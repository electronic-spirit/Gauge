
MC110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021a58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009e3c  08021c08  08021c08  00031c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ba44  0802ba44  000408c4  2**0
                  CONTENTS
  4 .ARM          00000008  0802ba44  0802ba44  0003ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ba4c  0802ba4c  000408c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ba4c  0802ba4c  0003ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ba50  0802ba50  0003ba50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008c4  20000000  0802ba54  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009884  200008c8  0802c318  000408c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a14c  0802c318  0004a14c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000408c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   001f36b4  00000000  00000000  000408f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ce2e  00000000  00000000  00233fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005350  00000000  00000000  00240dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004dd0  00000000  00000000  00246128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040743  00000000  00000000  0024aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005e3f5  00000000  00000000  0028b63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001427d7  00000000  00000000  002e9a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0042c207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00017674  00000000  00000000  0042c25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200008c8 	.word	0x200008c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021bf0 	.word	0x08021bf0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200008cc 	.word	0x200008cc
 80001ec:	08021bf0 	.word	0x08021bf0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <ADC_Read_REG>:

void Measure_Kdiv(void);


uint32_t ADC_Read_REG(uint8_t REG, uint8_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	uint32_t RES;
	ADC_NCS_ACTIVE();
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4820      	ldr	r0, [pc, #128]	; (8001144 <ADC_Read_REG+0x98>)
 80010c2:	f009 f80d 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((REG)<<1);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b3f      	subs	r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	747b      	strb	r3, [r7, #17]
	aTxBuffer[2] = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	74bb      	strb	r3, [r7, #18]
	aTxBuffer[3] = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 0110 	add.w	r1, r7, #16
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	9000      	str	r0, [sp, #0]
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <ADC_Read_REG+0x9c>)
 80010f6:	f00d f91e 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Read_REG+0x98>)
 8001100:	f008 ffee 	bl	800a0e0 <HAL_GPIO_WritePin>

	RES=aRxBuffer[1];
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[3];
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	461a      	mov	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
	RES = RES>>(8*(3-len));
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f1c3 0303 	rsb	r3, r3, #3
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]

	return RES;
 8001138:	697b      	ldr	r3, [r7, #20]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800
 8001148:	20007974 	.word	0x20007974

0800114c <ADC_Conversion>:


void ADC_Conversion(uint8_t RATE)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	ADC_NCS_ACTIVE();
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <ADC_Conversion+0x44>)
 800115c:	f008 ffc0 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b50      	subs	r3, #80	; 0x50
 8001164:	b2db      	uxtb	r3, r3
 8001166:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Conversion+0x48>)
 800117a:	f00d f8dc 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ADC_Conversion+0x44>)
 8001184:	f008 ffac 	bl	800a0e0 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000800 	.word	0x48000800
 8001194:	20007974 	.word	0x20007974

08001198 <ADC_Read_DATA>:

int32_t ADC_Read_DATA(uint8_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <ADC_Read_DATA+0x98>)
 80011a8:	f008 ff9a 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((14+Channel)<<1);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	330e      	adds	r3, #14
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b3f      	subs	r3, #63	; 0x3f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	74bb      	strb	r3, [r7, #18]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	747b      	strb	r3, [r7, #17]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f107 0110 	add.w	r1, r7, #16
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <ADC_Read_DATA+0x9c>)
 80011da:	f00d f8ac 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <ADC_Read_DATA+0x98>)
 80011e4:	f008 ff7c 	bl	800a0e0 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[2];
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[3];
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	461a      	mov	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
	if((data32>>23)==1) return -(8388608-(data32&0x7FFFFF));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	0ddb      	lsrs	r3, r3, #23
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <ADC_Read_DATA+0x88>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800121a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800121e:	e002      	b.n	8001226 <ADC_Read_DATA+0x8e>
	else return (data32&0x7FFFFF);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	48000800 	.word	0x48000800
 8001234:	20007974 	.word	0x20007974

08001238 <ADC_Read_STAT>:

uint32_t ADC_Read_STAT(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001244:	f008 ff4c 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((STAT_REG)<<1);
 8001248:	23c1      	movs	r3, #193	; 0xc1
 800124a:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	72bb      	strb	r3, [r7, #10]
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	727b      	strb	r3, [r7, #9]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2304      	movs	r3, #4
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <ADC_Read_STAT+0x70>)
 8001268:	f00d f865 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001272:	f008 ff35 	bl	800a0e0 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[2];
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[3];
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
	return data32;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	20007974 	.word	0x20007974

080012ac <ADC_Write_REG>:

void ADC_Write_REG(uint8_t REG, uint8_t*DATA, uint8_t len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[10], aRxBuffer[10];
	uint8_t i=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
	ADC_NCS_ACTIVE();
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <ADC_Write_REG+0x84>)
 80012c6:	f008 ff0b 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC0+((REG)<<1);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b40      	subs	r3, #64	; 0x40
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	753b      	strb	r3, [r7, #20]
	for(i=0;i<len;i++)aTxBuffer[i+1] = DATA[i];
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	e00d      	b.n	80012f8 <ADC_Write_REG+0x4c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	441a      	add	r2, r3
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ed      	bcc.n	80012dc <ADC_Write_REG+0x30>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	f107 0114 	add.w	r1, r7, #20
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	9000      	str	r0, [sp, #0]
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <ADC_Write_REG+0x88>)
 8001318:	f00d f80d 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <ADC_Write_REG+0x84>)
 8001322:	f008 fedd 	bl	800a0e0 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	48000800 	.word	0x48000800
 8001334:	20007974 	.word	0x20007974

08001338 <Auto_System_Calibration>:
	ADC_NCS_NOT_ACTIVE();
}


void Auto_System_Calibration(void)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b095      	sub	sp, #84	; 0x54
 800133c:	af00      	add	r7, sp, #0
	uint16_t i,j;
	int32_t DYNAMIC_BAND_MAX[9]={0,0,0,0,0,0,0,0,0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01b ff2a 	bl	801d1a0 <memset>
	int32_t DYNAMIC_BAND_MIN[9]={0,0,0,0,0,0,0,0,0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f01b ff24 	bl	801d1a0 <memset>
	uint8_t RES=0;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	// Читаем калибровочные данные из внешнего регистра
//	aTxBuffer[0] = 0x10;
//	ADC_Write_REG(CTRL3_REG, aTxBuffer, 1);

	calibr_process=1;
 800135e:	4b53      	ldr	r3, [pc, #332]	; (80014ac <Auto_System_Calibration+0x174>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
//		DYNAMIC_BAND_MAX[i]=ADC_middle[5];
//		DYNAMIC_BAND_MIN[i]=ADC_middle[0];
//	}


	ADC_PGA_Set(PGA_GAIN128);
 8001364:	2008      	movs	r0, #8
 8001366:	f000 fa25 	bl	80017b4 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <Auto_System_Calibration+0x178>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff feec 	bl	800114c <ADC_Conversion>
	ADC_Buff_size=256;
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <Auto_System_Calibration+0x17c>)
 8001376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137a:	801a      	strh	r2, [r3, #0]
	adc_full_buff=0;
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <Auto_System_Calibration+0x180>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
	while(adc_full_buff<ADC_Buff_size)
 8001382:	e00a      	b.n	800139a <Auto_System_Calibration+0x62>
	{
		Gauge_loading((uint8_t*)"Калибровка АЦП..",  (uint8_t)((adc_full_buff*100)/256));
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <Auto_System_Calibration+0x180>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2264      	movs	r2, #100	; 0x64
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	4849      	ldr	r0, [pc, #292]	; (80014bc <Auto_System_Calibration+0x184>)
 8001396:	f001 fa83 	bl	80028a0 <Gauge_loading>
	while(adc_full_buff<ADC_Buff_size)
 800139a:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <Auto_System_Calibration+0x17c>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <Auto_System_Calibration+0x180>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8ed      	bhi.n	8001384 <Auto_System_Calibration+0x4c>
//	OldData=ADC_middle[5];



	// Расчитываем коэффициенты для SYSTEM калибровки GAIN и OFFSET
	adc_mux[0]=1.0;
 80013a8:	4945      	ldr	r1, [pc, #276]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <Auto_System_Calibration+0x18c>)
 80013b0:	e9c1 2300 	strd	r2, r3, [r1]
	//for(i=1;i<9;i++)adc_mux[i]=(double)(DYNAMIC_BAND_MAX[0]*(1<<(i-1)))/(double)(DYNAMIC_BAND_MAX[i]-DYNAMIC_BAND_MIN[i]);
	for(i=1;i<9;i++)adc_mux[i]=(double)DYNAMIC_BAND_MAX[i]/(double)DYNAMIC_BAND_MAX[1];
 80013b4:	2301      	movs	r3, #1
 80013b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80013ba:	e024      	b.n	8001406 <Auto_System_Calibration+0xce>
 80013bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013c6:	4413      	add	r3, r2
 80013c8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8b9 	bl	8000544 <__aeabi_i2d>
 80013d2:	4604      	mov	r4, r0
 80013d4:	460d      	mov	r5, r1
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8b3 	bl	8000544 <__aeabi_i2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	f8b7 604e 	ldrh.w	r6, [r7, #78]	; 0x4e
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7ff fa3f 	bl	800086c <__aeabi_ddiv>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4833      	ldr	r0, [pc, #204]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013f4:	00f1      	lsls	r1, r6, #3
 80013f6:	4401      	add	r1, r0
 80013f8:	e9c1 2300 	strd	r2, r3, [r1]
 80013fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001400:	3301      	adds	r3, #1
 8001402:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800140a:	2b08      	cmp	r3, #8
 800140c:	d9d6      	bls.n	80013bc <Auto_System_Calibration+0x84>
	for(i=0;i<9;i++)adc_system_offset[i]=DYNAMIC_BAND_MIN[i];
 800140e:	2300      	movs	r3, #0
 8001410:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001414:	e011      	b.n	800143a <Auto_System_Calibration+0x102>
 8001416:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800141a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001424:	440b      	add	r3, r1
 8001426:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800142a:	4927      	ldr	r1, [pc, #156]	; (80014c8 <Auto_System_Calibration+0x190>)
 800142c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001434:	3301      	adds	r3, #1
 8001436:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800143a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800143e:	2b08      	cmp	r3, #8
 8001440:	d9e9      	bls.n	8001416 <Auto_System_Calibration+0xde>

	// Проверяем правильность показаний усиления
	for(i=2;i<9;i++) {if(DYNAMIC_BAND_MAX[i-1]<DYNAMIC_BAND_MAX[i])RES=1;}
 8001442:	2302      	movs	r3, #2
 8001444:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001448:	e01a      	b.n	8001480 <Auto_System_Calibration+0x148>
 800144a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800144e:	3b01      	subs	r3, #1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001456:	4413      	add	r3, r2
 8001458:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800145c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001466:	440b      	add	r3, r1
 8001468:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800146c:	429a      	cmp	r2, r3
 800146e:	da02      	bge.n	8001476 <Auto_System_Calibration+0x13e>
 8001470:	2301      	movs	r3, #1
 8001472:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800147a:	3301      	adds	r3, #1
 800147c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001484:	2b08      	cmp	r3, #8
 8001486:	d9e0      	bls.n	800144a <Auto_System_Calibration+0x112>
	if(RES==1)ERROR_REG|=(0x01<<ADC_cal_err);
 8001488:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <Auto_System_Calibration+0x164>
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <Auto_System_Calibration+0x194>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <Auto_System_Calibration+0x194>)
 800149a:	6013      	str	r3, [r2, #0]

	//OldData=(double)DYNAMIC_BAND_MAX[1];

	calibr_process=0;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <Auto_System_Calibration+0x174>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	3754      	adds	r7, #84	; 0x54
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000911 	.word	0x20000911
 80014b0:	2000009b 	.word	0x2000009b
 80014b4:	2000009c 	.word	0x2000009c
 80014b8:	200008e8 	.word	0x200008e8
 80014bc:	08021c08 	.word	0x08021c08
 80014c0:	20000000 	.word	0x20000000
 80014c4:	3ff00000 	.word	0x3ff00000
 80014c8:	200008ec 	.word	0x200008ec
 80014cc:	20000958 	.word	0x20000958

080014d0 <ADC_Calibration>:


void ADC_Calibration(uint8_t CAL)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	aTxBuffer[0]=((CAL)<<6)+0x02;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3302      	adds	r3, #2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2201      	movs	r2, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff fedc 	bl	80012ac <ADC_Write_REG>

	ADC_NCS_ACTIVE();
 80014f4:	2200      	movs	r2, #0
 80014f6:	2110      	movs	r1, #16
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <ADC_Calibration+0x5c>)
 80014fa:	f008 fdf1 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xA0;
 80014fe:	23a0      	movs	r3, #160	; 0xa0
 8001500:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001502:	f107 0208 	add.w	r2, r7, #8
 8001506:	f107 010c 	add.w	r1, r7, #12
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <ADC_Calibration+0x60>)
 8001514:	f00c ff0f 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001518:	2201      	movs	r2, #1
 800151a:	2110      	movs	r1, #16
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <ADC_Calibration+0x5c>)
 800151e:	f008 fddf 	bl	800a0e0 <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	48000800 	.word	0x48000800
 8001530:	20007974 	.word	0x20007974

08001534 <ADC_Start_Conversion>:

void ADC_Start_Conversion(uint8_t channel, uint8_t RATE)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	if(channel>5)channel=5;
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d901      	bls.n	800154e <ADC_Start_Conversion+0x1a>
 800154a:	2305      	movs	r3, #5
 800154c:	71fb      	strb	r3, [r7, #7]
	aTxBuffer[0]=channel<<5;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	b2db      	uxtb	r3, r3
 8001554:	733b      	strb	r3, [r7, #12]
	// Выбираем канал
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	2008      	movs	r0, #8
 8001560:	f7ff fea4 	bl	80012ac <ADC_Write_REG>
	// Запускаем преобразование
	ADC_NCS_ACTIVE();
 8001564:	2200      	movs	r2, #0
 8001566:	2110      	movs	r1, #16
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <ADC_Start_Conversion+0x6c>)
 800156a:	f008 fdb9 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	3b50      	subs	r3, #80	; 0x50
 8001572:	b2db      	uxtb	r3, r3
 8001574:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	f107 010c 	add.w	r1, r7, #12
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <ADC_Start_Conversion+0x70>)
 8001588:	f00c fed5 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800158c:	2201      	movs	r2, #1
 800158e:	2110      	movs	r1, #16
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <ADC_Start_Conversion+0x6c>)
 8001592:	f008 fda5 	bl	800a0e0 <HAL_GPIO_WritePin>

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	48000800 	.word	0x48000800
 80015a4:	20007974 	.word	0x20007974

080015a8 <ADC_init>:
	ADC_NCS_NOT_ACTIVE();
}


void ADC_init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data=0xFFFFFFFF;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	60fb      	str	r3, [r7, #12]
	uint16_t i=0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	817b      	strh	r3, [r7, #10]

	// Reset
	aTxBuffer[0] = 0x30;
 80015b8:	2330      	movs	r3, #48	; 0x30
 80015ba:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2201      	movs	r2, #1
 80015c0:	4619      	mov	r1, r3
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fe72 	bl	80012ac <ADC_Write_REG>
	ADC_NCS_ACTIVE();
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	482e      	ldr	r0, [pc, #184]	; (8001688 <ADC_init+0xe0>)
 80015ce:	f008 fd87 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x90;
 80015d2:	2390      	movs	r3, #144	; 0x90
 80015d4:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80015d6:	463a      	mov	r2, r7
 80015d8:	1d39      	adds	r1, r7, #4
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	482a      	ldr	r0, [pc, #168]	; (800168c <ADC_init+0xe4>)
 80015e4:	f00c fea7 	bl	800e336 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80015e8:	2201      	movs	r2, #1
 80015ea:	2110      	movs	r1, #16
 80015ec:	4826      	ldr	r0, [pc, #152]	; (8001688 <ADC_init+0xe0>)
 80015ee:	f008 fd77 	bl	800a0e0 <HAL_GPIO_WritePin>

	while(i<1000)
 80015f2:	e005      	b.n	8001600 <ADC_init+0x58>
	{
		data=ADC_Read_STAT();
 80015f4:	f7ff fe20 	bl	8001238 <ADC_Read_STAT>
 80015f8:	60f8      	str	r0, [r7, #12]
		i++;
 80015fa:	897b      	ldrh	r3, [r7, #10]
 80015fc:	3301      	adds	r3, #1
 80015fe:	817b      	strh	r3, [r7, #10]
	while(i<1000)
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001606:	d3f5      	bcc.n	80015f4 <ADC_init+0x4c>
	}
	if(data!=152) ERROR_REG=(1<<ADC_err);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b98      	cmp	r3, #152	; 0x98
 800160c:	d002      	beq.n	8001614 <ADC_init+0x6c>
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <ADC_init+0xe8>)
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
//	aTxBuffer[0] = 0xFF;
//	aTxBuffer[1] = 0x00;
//	ADC_Write_REG(DELAY_REG, aTxBuffer, 2);

	// Self calibration
	LED(1,0,0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2001      	movs	r0, #1
 800161a:	f000 fb33 	bl	8001c84 <LED>
	aTxBuffer[0] = 0x01;
 800161e:	2301      	movs	r3, #1
 8001620:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	2008      	movs	r0, #8
 800162a:	f7ff fe3f 	bl	80012ac <ADC_Write_REG>
	ADC_Calibration(self_calibration);
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff ff4e 	bl	80014d0 <ADC_Calibration>
	delay_ms(300);
 8001634:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001638:	f001 fb6e 	bl	8002d18 <delay_ms>
	aTxBuffer[0] = 0x09;
 800163c:	2309      	movs	r3, #9
 800163e:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	2008      	movs	r0, #8
 8001648:	f7ff fe30 	bl	80012ac <ADC_Write_REG>


	delay_ms(1500);
 800164c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001650:	f001 fb62 	bl	8002d18 <delay_ms>
	//Auto_System_Calibration();

//	ADC_PGA_Set(PGA_GAIN);
//	ADC_Conversion(ADC_SPS);

	LED(0,0,0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2000      	movs	r0, #0
 800165a:	f000 fb13 	bl	8001c84 <LED>

	ADC_PGA_Set(PGA_GAIN[current_adc_channel]);
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <ADC_init+0xec>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <ADC_init+0xf0>)
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f8a3 	bl	80017b4 <ADC_PGA_Set>
	ADC_Start_Conversion(current_adc_channel, ADC_SPS);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <ADC_init+0xec>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <ADC_init+0xf4>)
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5b 	bl	8001534 <ADC_Start_Conversion>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	48000800 	.word	0x48000800
 800168c:	20007974 	.word	0x20007974
 8001690:	20000958 	.word	0x20000958
 8001694:	20000912 	.word	0x20000912
 8001698:	20000094 	.word	0x20000094
 800169c:	2000009b 	.word	0x2000009b

080016a0 <Continue_Converting>:


uint8_t ChBuFul = 0;
void Continue_Converting(void)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	71fb      	strb	r3, [r7, #7]

	// Останавливаем преобразование
	//ADC_Stop_Conversion();

	// Сдвигаем буфер
	for(i=0;i<ADC_Buff_size-1;i++)ADC_channel[current_adc_channel][i]=ADC_channel[current_adc_channel][i+1];
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e015      	b.n	80016dc <Continue_Converting+0x3c>
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <Continue_Converting+0xf4>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4b36      	ldr	r3, [pc, #216]	; (8001794 <Continue_Converting+0xf4>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461c      	mov	r4, r3
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4835      	ldr	r0, [pc, #212]	; (8001798 <Continue_Converting+0xf8>)
 80016c4:	0249      	lsls	r1, r1, #9
 80016c6:	440a      	add	r2, r1
 80016c8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80016cc:	4832      	ldr	r0, [pc, #200]	; (8001798 <Continue_Converting+0xf8>)
 80016ce:	0261      	lsls	r1, r4, #9
 80016d0:	440b      	add	r3, r1
 80016d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	3301      	adds	r3, #1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	79fa      	ldrb	r2, [r7, #7]
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <Continue_Converting+0xfc>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbe3      	blt.n	80016b0 <Continue_Converting+0x10>
	// Читаем значение
	ADC_channel[current_adc_channel][ADC_Buff_size-1]=(ADC_Read_DATA(current_adc_channel)+ADC_channel[current_adc_channel][ADC_Buff_size-2])/2;
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <Continue_Converting+0xf4>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd53 	bl	8001198 <ADC_Read_DATA>
 80016f2:	4601      	mov	r1, r0
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <Continue_Converting+0xf4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <Continue_Converting+0xfc>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	3b02      	subs	r3, #2
 8001700:	4825      	ldr	r0, [pc, #148]	; (8001798 <Continue_Converting+0xf8>)
 8001702:	0252      	lsls	r2, r2, #9
 8001704:	4413      	add	r3, r2
 8001706:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800170a:	440b      	add	r3, r1
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <Continue_Converting+0xf4>)
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	4614      	mov	r4, r2
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <Continue_Converting+0xfc>)
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	3a01      	subs	r2, #1
 8001718:	0fd9      	lsrs	r1, r3, #31
 800171a:	440b      	add	r3, r1
 800171c:	105b      	asrs	r3, r3, #1
 800171e:	4618      	mov	r0, r3
 8001720:	491d      	ldr	r1, [pc, #116]	; (8001798 <Continue_Converting+0xf8>)
 8001722:	0263      	lsls	r3, r4, #9
 8001724:	4413      	add	r3, r2
 8001726:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

	// Считаем заполнение буфера текущего канала
	if(++adc_full_buff==ADC_Buff_size)
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <Continue_Converting+0x100>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <Continue_Converting+0x100>)
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <Continue_Converting+0x100>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a18      	ldr	r2, [pc, #96]	; (800179c <Continue_Converting+0xfc>)
 800173a:	8812      	ldrh	r2, [r2, #0]
 800173c:	4293      	cmp	r3, r2
 800173e:	d112      	bne.n	8001766 <Continue_Converting+0xc6>
	{
		if(++current_adc_channel==6)current_adc_channel=0;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <Continue_Converting+0xf4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <Continue_Converting+0xf4>)
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <Continue_Converting+0xf4>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d102      	bne.n	800175a <Continue_Converting+0xba>
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <Continue_Converting+0xf4>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
		adc_full_buff=0;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <Continue_Converting+0x100>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
		ChBuFul=1;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <Continue_Converting+0x104>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
	}

	// Стартуем преобразование
	ADC_PGA_Set(PGA_GAIN[current_adc_channel]);
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <Continue_Converting+0xf4>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <Continue_Converting+0x108>)
 800176e:	5c9b      	ldrb	r3, [r3, r2]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f81f 	bl	80017b4 <ADC_PGA_Set>
	ADC_Start_Conversion(current_adc_channel, ADC_SPS);
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <Continue_Converting+0xf4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <Continue_Converting+0x10c>)
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fed7 	bl	8001534 <ADC_Start_Conversion>

	adc_timeout=adc_timeout_const;
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <Continue_Converting+0x110>)
 8001788:	2219      	movs	r2, #25
 800178a:	701a      	strb	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	20000912 	.word	0x20000912
 8001798:	200023f8 	.word	0x200023f8
 800179c:	2000009c 	.word	0x2000009c
 80017a0:	200008e8 	.word	0x200008e8
 80017a4:	20000913 	.word	0x20000913
 80017a8:	20000094 	.word	0x20000094
 80017ac:	2000009b 	.word	0x2000009b
 80017b0:	20000048 	.word	0x20000048

080017b4 <ADC_PGA_Set>:



void ADC_PGA_Set(uint8_t pga_data)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4];
	uint8_t CTRL=ADC_Read_REG(CTRL2_REG, 1);
 80017be:	2101      	movs	r1, #1
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7ff fc73 	bl	80010ac <ADC_Read_REG>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
	CTRL&=0xF0;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	f023 030f 	bic.w	r3, r3, #15
 80017d0:	73fb      	strb	r3, [r7, #15]
	if(pga_data==0) aTxBuffer[0]=CTRL;
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <ADC_PGA_Set+0x2a>
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	723b      	strb	r3, [r7, #8]
 80017dc:	e006      	b.n	80017ec <ADC_PGA_Set+0x38>
	else aTxBuffer[0]=CTRL+0x08+(pga_data-1);
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3307      	adds	r3, #7
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL2_REG, aTxBuffer, 1);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2201      	movs	r2, #1
 80017f2:	4619      	mov	r1, r3
 80017f4:	2002      	movs	r0, #2
 80017f6:	f7ff fd59 	bl	80012ac <ADC_Write_REG>
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <ADC_EXT>:


void ADC_EXT(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
	Continue_Converting();
 8001806:	f7ff ff4b 	bl	80016a0 <Continue_Converting>
	new_cal_tim++;

	adc_timeout=adc_timeout_const;
	ADC_Conversion(ADC_SPS);
	*/
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <ADC_process>:




void ADC_process(void)
{
 8001810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001814:	b091      	sub	sp, #68	; 0x44
 8001816:	af00      	add	r7, sp, #0
	uint16_t i=0, j=0;
 8001818:	2300      	movs	r3, #0
 800181a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800181c:	2300      	movs	r3, #0
 800181e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint8_t aTxBuffer[4];
	int64_t SUM[7]={0,0,0,0,0,0};
 8001820:	463b      	mov	r3, r7
 8001822:	2238      	movs	r2, #56	; 0x38
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f01b fcba 	bl	801d1a0 <memset>


	if(ChBuFul==1)
 800182c:	4b97      	ldr	r3, [pc, #604]	; (8001a8c <ADC_process+0x27c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d154      	bne.n	80018de <ADC_process+0xce>
	{
		// Скользящее среднее
		for(i=0;i<ADC_Buff_size;i++)
 8001834:	2300      	movs	r3, #0
 8001836:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001838:	e028      	b.n	800188c <ADC_process+0x7c>
		{ for(j=0;j<6;j++) SUM[j]+=ADC_channel[j][i]; }
 800183a:	2300      	movs	r3, #0
 800183c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800183e:	e01f      	b.n	8001880 <ADC_process+0x70>
 8001840:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001848:	4413      	add	r3, r2
 800184a:	3b40      	subs	r3, #64	; 0x40
 800184c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001850:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001852:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001854:	4e8e      	ldr	r6, [pc, #568]	; (8001a90 <ADC_process+0x280>)
 8001856:	0252      	lsls	r2, r2, #9
 8001858:	4413      	add	r3, r2
 800185a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800185e:	461a      	mov	r2, r3
 8001860:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001864:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 8001866:	1884      	adds	r4, r0, r2
 8001868:	eb41 0503 	adc.w	r5, r1, r3
 800186c:	00f3      	lsls	r3, r6, #3
 800186e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001872:	4413      	add	r3, r2
 8001874:	3b40      	subs	r3, #64	; 0x40
 8001876:	e9c3 4500 	strd	r4, r5, [r3]
 800187a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800187c:	3301      	adds	r3, #1
 800187e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001880:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001882:	2b05      	cmp	r3, #5
 8001884:	d9dc      	bls.n	8001840 <ADC_process+0x30>
		for(i=0;i<ADC_Buff_size;i++)
 8001886:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001888:	3301      	adds	r3, #1
 800188a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <ADC_process+0x284>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001892:	429a      	cmp	r2, r3
 8001894:	d3d1      	bcc.n	800183a <ADC_process+0x2a>
		for(i=0;i<6;i++) ADC_middle[i]=(SUM[i]/ADC_Buff_size);
 8001896:	2300      	movs	r3, #0
 8001898:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800189a:	e01a      	b.n	80018d2 <ADC_process+0xc2>
 800189c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018a4:	4413      	add	r3, r2
 80018a6:	3b40      	subs	r3, #64	; 0x40
 80018a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <ADC_process+0x284>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f7ff f9f7 	bl	8000ca8 <__aeabi_ldivmod>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018c4:	4601      	mov	r1, r0
 80018c6:	4a74      	ldr	r2, [pc, #464]	; (8001a98 <ADC_process+0x288>)
 80018c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80018cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018ce:	3301      	adds	r3, #1
 80018d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80018d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d9e1      	bls.n	800189c <ADC_process+0x8c>
		ChBuFul=0;
 80018d8:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <ADC_process+0x27c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	}

		// Перезапуск АЦП если нет ответа в течении adc_timeout_const
		if(adc_timeout>0)adc_timeout--;
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <ADC_process+0x28c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <ADC_process+0xe4>
 80018e6:	4b6d      	ldr	r3, [pc, #436]	; (8001a9c <ADC_process+0x28c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b6b      	ldr	r3, [pc, #428]	; (8001a9c <ADC_process+0x28c>)
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e035      	b.n	8001960 <ADC_process+0x150>
//			aTxBuffer[2] = 0x12;
//			ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
//			aTxBuffer[0] = 0x02;
//			ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
			// Self calibration
			aTxBuffer[0] = 0x01;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 80018fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018fe:	2201      	movs	r2, #1
 8001900:	4619      	mov	r1, r3
 8001902:	2008      	movs	r0, #8
 8001904:	f7ff fcd2 	bl	80012ac <ADC_Write_REG>
			ADC_Calibration(adc_calibration_mode);
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <ADC_process+0x290>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fddf 	bl	80014d0 <ADC_Calibration>
			delay_ms(300);
 8001912:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001916:	f001 f9ff 	bl	8002d18 <delay_ms>
			aTxBuffer[0] = 0x09;
 800191a:	2309      	movs	r3, #9
 800191c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001924:	2201      	movs	r2, #1
 8001926:	4619      	mov	r1, r3
 8001928:	2008      	movs	r0, #8
 800192a:	f7ff fcbf 	bl	80012ac <ADC_Write_REG>

//			ADC_Conversion(ADC_SPS);
			adc_timeout=adc_timeout_const;
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <ADC_process+0x28c>)
 8001930:	2219      	movs	r2, #25
 8001932:	701a      	strb	r2, [r3, #0]
			ADC_PGA_Set(PGA_GAIN[current_adc_channel]);
 8001934:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <ADC_process+0x294>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <ADC_process+0x298>)
 800193c:	5c9b      	ldrb	r3, [r3, r2]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff38 	bl	80017b4 <ADC_PGA_Set>
			ADC_Start_Conversion(current_adc_channel, ADC_SPS);
 8001944:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <ADC_process+0x294>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4a58      	ldr	r2, [pc, #352]	; (8001aac <ADC_process+0x29c>)
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fdf0 	bl	8001534 <ADC_Start_Conversion>
			ERROR_REG|=(0x01<<ADC_err);
 8001954:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <ADC_process+0x2a0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <ADC_process+0x2a0>)
 800195e:	6013      	str	r3, [r2, #0]
		}


	// Делитель для PGA
	for(i=0;i<6;i++)
 8001960:	2300      	movs	r3, #0
 8001962:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001964:	e056      	b.n	8001a14 <ADC_process+0x204>
	{
		if(PGA_GAIN[i]==0)devider=1;
 8001966:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001968:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <ADC_process+0x298>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d103      	bne.n	8001978 <ADC_process+0x168>
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <ADC_process+0x2a4>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e009      	b.n	800198c <ADC_process+0x17c>
		else devider=(0x01<<(PGA_GAIN[i]-1));
 8001978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800197a:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <ADC_process+0x298>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	3b01      	subs	r3, #1
 8001980:	2201      	movs	r2, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <ADC_process+0x2a4>)
 800198a:	701a      	strb	r2, [r3, #0]
		Kdiv[i]=devider;
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <ADC_process+0x2a4>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	8ffc      	ldrh	r4, [r7, #62]	; 0x3e
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdc6 	bl	8000524 <__aeabi_ui2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4846      	ldr	r0, [pc, #280]	; (8001ab8 <ADC_process+0x2a8>)
 800199e:	00e1      	lsls	r1, r4, #3
 80019a0:	4401      	add	r1, r0
 80019a2:	e9c1 2300 	strd	r2, r3, [r1]
		ADC_volt[i]=ADC_middle[i]*((RefVoltage*1000)/(8388608*Kdiv[i]));
 80019a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019a8:	4a3b      	ldr	r2, [pc, #236]	; (8001a98 <ADC_process+0x288>)
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdc8 	bl	8000544 <__aeabi_i2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <ADC_process+0x2ac>)
 80019ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <ADC_process+0x2b0>)
 80019c4:	f7fe fe28 	bl	8000618 <__aeabi_dmul>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4690      	mov	r8, r2
 80019ce:	4699      	mov	r9, r3
 80019d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019d2:	4a39      	ldr	r2, [pc, #228]	; (8001ab8 <ADC_process+0x2a8>)
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <ADC_process+0x2b4>)
 80019e2:	f7fe fe19 	bl	8000618 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4640      	mov	r0, r8
 80019ec:	4649      	mov	r1, r9
 80019ee:	f7fe ff3d 	bl	800086c <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	8ffe      	ldrh	r6, [r7, #62]	; 0x3e
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fe0c 	bl	8000618 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4830      	ldr	r0, [pc, #192]	; (8001ac8 <ADC_process+0x2b8>)
 8001a06:	00f1      	lsls	r1, r6, #3
 8001a08:	4401      	add	r1, r0
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
	for(i=0;i<6;i++)
 8001a0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001a10:	3301      	adds	r3, #1
 8001a12:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001a14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d9a5      	bls.n	8001966 <ADC_process+0x156>
	}


	// Заводской номер 001
	current_4_20mA = calculate_current(ADC_volt[0]);
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <ADC_process+0x2b8>)
 8001a1c:	ed93 7b00 	vldr	d7, [r3]
 8001a20:	eeb0 0a47 	vmov.f32	s0, s14
 8001a24:	eef0 0a67 	vmov.f32	s1, s15
 8001a28:	f003 faaa 	bl	8004f80 <calculate_current>
 8001a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a30:	eef0 7a60 	vmov.f32	s15, s1
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <ADC_process+0x2bc>)
 8001a36:	ed83 7b00 	vstr	d7, [r3]
	voltage_measure = calculate_voltage(ADC_volt[1]);
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <ADC_process+0x2b8>)
 8001a3c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a40:	eeb0 0a47 	vmov.f32	s0, s14
 8001a44:	eef0 0a67 	vmov.f32	s1, s15
 8001a48:	f003 fb06 	bl	8005058 <calculate_voltage>
 8001a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a50:	eef0 7a60 	vmov.f32	s15, s1
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <ADC_process+0x2c0>)
 8001a56:	ed83 7b00 	vstr	d7, [r3]

	Approximation_MC110(ADC_middle[3], ADC_middle[4]);
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <ADC_process+0x288>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <ADC_process+0x288>)
 8001a60:	6912      	ldr	r2, [r2, #16]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 ff17 	bl	8004898 <Approximation_MC110>
	Calculate(ADC_middle[3], ADC_middle[4]);
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <ADC_process+0x288>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <ADC_process+0x288>)
 8001a70:	6912      	ldr	r2, [r2, #16]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 ff9b 	bl	80049b0 <Calculate>

	sleep(300);
 8001a7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a7e:	f001 f8ff 	bl	8002c80 <sleep>
}
 8001a82:	bf00      	nop
 8001a84:	3744      	adds	r7, #68	; 0x44
 8001a86:	46bd      	mov	sp, r7
 8001a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a8c:	20000913 	.word	0x20000913
 8001a90:	200023f8 	.word	0x200023f8
 8001a94:	2000009c 	.word	0x2000009c
 8001a98:	200021c0 	.word	0x200021c0
 8001a9c:	20000048 	.word	0x20000048
 8001aa0:	20000970 	.word	0x20000970
 8001aa4:	20000912 	.word	0x20000912
 8001aa8:	20000094 	.word	0x20000094
 8001aac:	2000009b 	.word	0x2000009b
 8001ab0:	20000958 	.word	0x20000958
 8001ab4:	20000910 	.word	0x20000910
 8001ab8:	200021e0 	.word	0x200021e0
 8001abc:	20000088 	.word	0x20000088
 8001ac0:	408f4000 	.word	0x408f4000
 8001ac4:	41600000 	.word	0x41600000
 8001ac8:	200023c8 	.word	0x200023c8
 8001acc:	200023c0 	.word	0x200023c0
 8001ad0:	20002278 	.word	0x20002278

08001ad4 <Buttons_init>:
//--------------------------------------------------------------------------------------------------------
//									Инициализация расширителя
//--------------------------------------------------------------------------------------------------------

void Buttons_init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af02      	add	r7, sp, #8
	uint8_t tx_buf[2], rx_buf[2];

	// Reset
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2120      	movs	r1, #32
 8001ade:	483c      	ldr	r0, [pc, #240]	; (8001bd0 <Buttons_init+0xfc>)
 8001ae0:	f008 fafe 	bl	800a0e0 <HAL_GPIO_WritePin>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x18;
 8001ae8:	2318      	movs	r3, #24
 8001aea:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 1000);
 8001aec:	1d3a      	adds	r2, r7, #4
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2302      	movs	r3, #2
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	4836      	ldr	r0, [pc, #216]	; (8001bd4 <Buttons_init+0x100>)
 8001afa:	f008 fbbb 	bl	800a274 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT0; // rd from out-reg port0
 8001afe:	2302      	movs	r3, #2
 8001b00:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001b02:	1d3a      	adds	r2, r7, #4
 8001b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2140      	movs	r1, #64	; 0x40
 8001b0e:	4831      	ldr	r0, [pc, #196]	; (8001bd4 <Buttons_init+0x100>)
 8001b10:	f008 fbb0 	bl	800a274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, &rx_buf[0], 0x02, 1000);
 8001b14:	463a      	mov	r2, r7
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	2141      	movs	r1, #65	; 0x41
 8001b20:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <Buttons_init+0x100>)
 8001b22:	f008 fc9b 	bl	800a45c <HAL_I2C_Master_Receive>

	tx_buf[0] = PI4IOE5V6416_REG_IO_DIR1; // set pin dir to be out
 8001b26:	2307      	movs	r3, #7
 8001b28:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x07;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001b2e:	1d3a      	adds	r2, r7, #4
 8001b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2302      	movs	r3, #2
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	4826      	ldr	r0, [pc, #152]	; (8001bd4 <Buttons_init+0x100>)
 8001b3c:	f008 fb9a 	bl	800a274 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD0; // pull-up port0
 8001b40:	2348      	movs	r3, #72	; 0x48
 8001b42:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001b44:	23ff      	movs	r3, #255	; 0xff
 8001b46:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001b48:	1d3a      	adds	r2, r7, #4
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2302      	movs	r3, #2
 8001b52:	2140      	movs	r1, #64	; 0x40
 8001b54:	481f      	ldr	r0, [pc, #124]	; (8001bd4 <Buttons_init+0x100>)
 8001b56:	f008 fb8d 	bl	800a274 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD1; // pull-up port1
 8001b5a:	2349      	movs	r3, #73	; 0x49
 8001b5c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001b5e:	23ff      	movs	r3, #255	; 0xff
 8001b60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001b62:	1d3a      	adds	r2, r7, #4
 8001b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	2140      	movs	r1, #64	; 0x40
 8001b6e:	4819      	ldr	r0, [pc, #100]	; (8001bd4 <Buttons_init+0x100>)
 8001b70:	f008 fb80 	bl	800a274 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN0; // pull-up enable on port0
 8001b74:	2346      	movs	r3, #70	; 0x46
 8001b76:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001b78:	23ff      	movs	r3, #255	; 0xff
 8001b7a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001b7c:	1d3a      	adds	r2, r7, #4
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2302      	movs	r3, #2
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <Buttons_init+0x100>)
 8001b8a:	f008 fb73 	bl	800a274 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN1; // pull-up enable on port1
 8001b8e:	2347      	movs	r3, #71	; 0x47
 8001b90:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001b92:	23ff      	movs	r3, #255	; 0xff
 8001b94:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001b96:	1d3a      	adds	r2, r7, #4
 8001b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <Buttons_init+0x100>)
 8001ba4:	f008 fb66 	bl	800a274 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_MNTR0; // rd pins state port0
 8001ba8:	2300      	movs	r3, #0
 8001baa:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001bac:	1d3a      	adds	r2, r7, #4
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <Buttons_init+0x100>)
 8001bba:	f008 fb5b 	bl	800a274 <HAL_I2C_Master_Transmit>

	LED(0,0,0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f85e 	bl	8001c84 <LED>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	48000400 	.word	0x48000400
 8001bd4:	20007a24 	.word	0x20007a24

08001bd8 <BLueTooth_Configuration>:
//--------------------------------------------------------------------------------------------------------
//										Выбор режима работы блютус
//--------------------------------------------------------------------------------------------------------

void BLueTooth_Configuration(uint8_t state)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint8_t BlueTooth_State = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
	// Читаем порт P1
	aTxBuffer[0] = 0x01;
 8001be6:	2301      	movs	r3, #1
 8001be8:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 8001bea:	f107 0210 	add.w	r2, r7, #16
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2140      	movs	r1, #64	; 0x40
 8001bf8:	4821      	ldr	r0, [pc, #132]	; (8001c80 <BLueTooth_Configuration+0xa8>)
 8001bfa:	f008 fb3b 	bl	800a274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8001bfe:	f107 020c 	add.w	r2, r7, #12
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	2141      	movs	r1, #65	; 0x41
 8001c0c:	481c      	ldr	r0, [pc, #112]	; (8001c80 <BLueTooth_Configuration+0xa8>)
 8001c0e:	f008 fc25 	bl	800a45c <HAL_I2C_Master_Receive>
	BlueTooth_State=aRxBuffer[0];
 8001c12:	7b3b      	ldrb	r3, [r7, #12]
 8001c14:	75fb      	strb	r3, [r7, #23]

	// Очищаем P1_3 и P1_4
	BlueTooth_State&=0xE7;
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	f023 0318 	bic.w	r3, r3, #24
 8001c1c:	75fb      	strb	r3, [r7, #23]
	// Записываем значение config
	BlueTooth_State|=(state<<4);
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	b25a      	sxtb	r2, r3
 8001c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8001c36:	f107 0210 	add.w	r2, r7, #16
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2302      	movs	r3, #2
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	480e      	ldr	r0, [pc, #56]	; (8001c80 <BLueTooth_Configuration+0xa8>)
 8001c46:	f008 fb15 	bl	800a274 <HAL_I2C_Master_Transmit>

	delay_ms(500);
 8001c4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c4e:	f001 f863 	bl	8002d18 <delay_ms>

	// Reset
	BlueTooth_State|=(0x01<<5);
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8001c62:	f107 0210 	add.w	r2, r7, #16
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	2140      	movs	r1, #64	; 0x40
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <BLueTooth_Configuration+0xa8>)
 8001c72:	f008 faff 	bl	800a274 <HAL_I2C_Master_Transmit>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20007a24 	.word	0x20007a24

08001c84 <LED>:
//--------------------------------------------------------------------------------------------------------
//											Управление светодиодом
//--------------------------------------------------------------------------------------------------------

void LED(uint8_t RED, uint8_t GREEN, uint8_t BLUE)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	71bb      	strb	r3, [r7, #6]
 8001c92:	4613      	mov	r3, r2
 8001c94:	717b      	strb	r3, [r7, #5]
	uint8_t color=0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[4];
	color=(RED<<7)+(GREEN<<6)+(BLUE<<5)+0x1F;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	01db      	lsls	r3, r3, #7
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	019b      	lsls	r3, r3, #6
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	797b      	ldrb	r3, [r7, #5]
 8001cac:	015b      	lsls	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	331f      	adds	r3, #31
 8001cb6:	73fb      	strb	r3, [r7, #15]
	color=~color;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	73fb      	strb	r3, [r7, #15]
	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = color;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 10000);
 8001cc6:	f107 0208 	add.w	r2, r7, #8
 8001cca:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	2140      	movs	r1, #64	; 0x40
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <LED+0x60>)
 8001cd6:	f008 facd 	bl	800a274 <HAL_I2C_Master_Transmit>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20007a24 	.word	0x20007a24

08001ce8 <Button_S1_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										ON / OFF
//--------------------------------------------------------------------------------------------------------

void Button_S1_press_callback(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	if(OnOffCntr==-1)
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <Button_S1_press_callback+0x34>)
 8001cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d10f      	bne.n	8001d18 <Button_S1_press_callback+0x30>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==1)
 8001cf8:	2140      	movs	r1, #64	; 0x40
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <Button_S1_press_callback+0x38>)
 8001cfc:	f008 f9d8 	bl	800a0b0 <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <Button_S1_press_callback+0x30>
		{
			old_active_string=0xFF; OnOffCntr=on_off_time; screen=Off_screen;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <Button_S1_press_callback+0x3c>)
 8001d08:	22ff      	movs	r2, #255	; 0xff
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <Button_S1_press_callback+0x34>)
 8001d0e:	22c8      	movs	r2, #200	; 0xc8
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <Button_S1_press_callback+0x40>)
 8001d14:	2203      	movs	r2, #3
 8001d16:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2000004a 	.word	0x2000004a
 8001d20:	48001000 	.word	0x48001000
 8001d24:	20000460 	.word	0x20000460
 8001d28:	2000004c 	.word	0x2000004c

08001d2c <Button_S2_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										P zero
//--------------------------------------------------------------------------------------------------------

void Button_S2_press_callback(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <Button_S2_press_callback+0x70>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <Button_S2_press_callback+0x70>)
 8001d38:	881a      	ldrh	r2, [r3, #0]
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <Button_S2_press_callback+0x74>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <Button_S2_press_callback+0x78>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <Button_S2_press_callback+0x78>)
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <Button_S2_press_callback+0x7c>)
 8001d4a:	701a      	strb	r2, [r3, #0]
	// Таррирование давления
	if(Pressure_zero==0)Pressure_zero=Pressure;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <Button_S2_press_callback+0x80>)
 8001d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	f7fe fec5 	bl	8000ae8 <__aeabi_dcmpeq>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <Button_S2_press_callback+0x46>
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <Button_S2_press_callback+0x84>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	4910      	ldr	r1, [pc, #64]	; (8001dac <Button_S2_press_callback+0x80>)
 8001d6c:	e9c1 2300 	strd	r2, r3, [r1]
 8001d70:	e006      	b.n	8001d80 <Button_S2_press_callback+0x54>
	else Pressure_zero=0;
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <Button_S2_press_callback+0x80>)
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9c1 2300 	strd	r2, r3, [r1]

	// Обнуление АЦП
	if(zero_ADC[0]==0)zero_ADC[0]=ADC_middle[3];
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <Button_S2_press_callback+0x88>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d104      	bne.n	8001d92 <Button_S2_press_callback+0x66>
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <Button_S2_press_callback+0x8c>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <Button_S2_press_callback+0x88>)
 8001d8e:	6013      	str	r3, [r2, #0]
		else zero_ADC[0]=0;

}
 8001d90:	e002      	b.n	8001d98 <Button_S2_press_callback+0x6c>
		else zero_ADC[0]=0;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <Button_S2_press_callback+0x88>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20001d0e 	.word	0x20001d0e
 8001da0:	20001d0c 	.word	0x20001d0c
 8001da4:	20001d11 	.word	0x20001d11
 8001da8:	20001d10 	.word	0x20001d10
 8001dac:	20000938 	.word	0x20000938
 8001db0:	20002398 	.word	0x20002398
 8001db4:	20002380 	.word	0x20002380
 8001db8:	200021c0 	.word	0x200021c0

08001dbc <Button_S3_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E zero
//--------------------------------------------------------------------------------------------------------

void Button_S3_press_callback(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <Button_S3_press_callback+0xa0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <Button_S3_press_callback+0xa0>)
 8001dc8:	881a      	ldrh	r2, [r3, #0]
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <Button_S3_press_callback+0xa4>)
 8001dcc:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <Button_S3_press_callback+0xa8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <Button_S3_press_callback+0xa8>)
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <Button_S3_press_callback+0xac>)
 8001dda:	701a      	strb	r2, [r3, #0]
	// Таррирование электрики
	switch(E_fun)
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <Button_S3_press_callback+0xb0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <Button_S3_press_callback+0x2e>
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d01b      	beq.n	8001e20 <Button_S3_press_callback+0x64>
			else Current_zero=0;
			break;
		case V: if(Voltage_zero==0)Voltage_zero=voltage_measure;
		else Voltage_zero=0; break;
	}
}
 8001de8:	e035      	b.n	8001e56 <Button_S3_press_callback+0x9a>
			if(Current_zero==0) Current_zero=current_4_20mA;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <Button_S3_press_callback+0xb4>)
 8001dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	f7fe fe76 	bl	8000ae8 <__aeabi_dcmpeq>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <Button_S3_press_callback+0x54>
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <Button_S3_press_callback+0xb8>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	4919      	ldr	r1, [pc, #100]	; (8001e70 <Button_S3_press_callback+0xb4>)
 8001e0a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001e0e:	e022      	b.n	8001e56 <Button_S3_press_callback+0x9a>
			else Current_zero=0;
 8001e10:	4917      	ldr	r1, [pc, #92]	; (8001e70 <Button_S3_press_callback+0xb4>)
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001e1e:	e01a      	b.n	8001e56 <Button_S3_press_callback+0x9a>
		case V: if(Voltage_zero==0)Voltage_zero=voltage_measure;
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <Button_S3_press_callback+0xbc>)
 8001e22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	f7fe fe5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <Button_S3_press_callback+0x8a>
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <Button_S3_press_callback+0xc0>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <Button_S3_press_callback+0xbc>)
 8001e40:	e9c1 2300 	strd	r2, r3, [r1]
		else Voltage_zero=0; break;
 8001e44:	e006      	b.n	8001e54 <Button_S3_press_callback+0x98>
 8001e46:	490c      	ldr	r1, [pc, #48]	; (8001e78 <Button_S3_press_callback+0xbc>)
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9c1 2300 	strd	r2, r3, [r1]
 8001e54:	bf00      	nop
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20001d0e 	.word	0x20001d0e
 8001e60:	20001d0c 	.word	0x20001d0c
 8001e64:	20001d11 	.word	0x20001d11
 8001e68:	20001d10 	.word	0x20001d10
 8001e6c:	20000968 	.word	0x20000968
 8001e70:	20000948 	.word	0x20000948
 8001e74:	200023c0 	.word	0x200023c0
 8001e78:	20000940 	.word	0x20000940
 8001e7c:	20002278 	.word	0x20002278

08001e80 <Button_S4_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											ENTER
//--------------------------------------------------------------------------------------------------------

void Button_S4_press_callback(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	 switch(screen)
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <Button_S4_press_callback+0x6c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	3b04      	subs	r3, #4
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d81d      	bhi.n	8001eca <Button_S4_press_callback+0x4a>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <Button_S4_press_callback+0x14>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001eb3 	.word	0x08001eb3
 8001e98:	08001ec5 	.word	0x08001ec5
 8001e9c:	08001ebf 	.word	0x08001ebf
 8001ea0:	08001ecb 	.word	0x08001ecb
 8001ea4:	08001ead 	.word	0x08001ead
 8001ea8:	08001eb9 	.word	0x08001eb9
	 {
	 	 case Parameter_screen: Parameter_screen_S4(); break;
 8001eac:	f016 fdb0 	bl	8018a10 <Parameter_screen_S4>
 8001eb0:	e00b      	b.n	8001eca <Button_S4_press_callback+0x4a>
	 	 case Option_screen: Option_screen_S4(); break;
 8001eb2:	f016 fe7b 	bl	8018bac <Option_screen_S4>
 8001eb6:	e008      	b.n	8001eca <Button_S4_press_callback+0x4a>
	 	 case RTC_screen: RTC_screen_S4(); break;
 8001eb8:	f016 fa32 	bl	8018320 <RTC_screen_S4>
 8001ebc:	e005      	b.n	8001eca <Button_S4_press_callback+0x4a>
	 	 case ADC_options_screen: ADC_options_screen_S4(); break;
 8001ebe:	f014 fe69 	bl	8016b94 <ADC_options_screen_S4>
 8001ec2:	e002      	b.n	8001eca <Button_S4_press_callback+0x4a>
	 	 case Display_options_screen: Display_options_screen_S4(); break;
 8001ec4:	f015 f992 	bl	80171ec <Display_options_screen_S4>
 8001ec8:	bf00      	nop
	 }
	 off_sec=off_min=0;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <Button_S4_press_callback+0x70>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <Button_S4_press_callback+0x70>)
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <Button_S4_press_callback+0x74>)
 8001ed6:	801a      	strh	r2, [r3, #0]
	 light_sec=light_min=0;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <Button_S4_press_callback+0x78>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <Button_S4_press_callback+0x78>)
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <Button_S4_press_callback+0x7c>)
 8001ee4:	701a      	strb	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000004c 	.word	0x2000004c
 8001ef0:	20001d0e 	.word	0x20001d0e
 8001ef4:	20001d0c 	.word	0x20001d0c
 8001ef8:	20001d11 	.word	0x20001d11
 8001efc:	20001d10 	.word	0x20001d10

08001f00 <Button_S5_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											FORWARD
//--------------------------------------------------------------------------------------------------------

void Button_S5_press_callback(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	switch(screen)
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <Button_S5_press_callback+0x78>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	2b07      	cmp	r3, #7
 8001f0c:	d824      	bhi.n	8001f58 <Button_S5_press_callback+0x58>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <Button_S5_press_callback+0x14>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f3b 	.word	0x08001f3b
 8001f18:	08001f35 	.word	0x08001f35
 8001f1c:	08001f41 	.word	0x08001f41
 8001f20:	08001f59 	.word	0x08001f59
 8001f24:	08001f47 	.word	0x08001f47
 8001f28:	08001f4d 	.word	0x08001f4d
 8001f2c:	08001f59 	.word	0x08001f59
 8001f30:	08001f53 	.word	0x08001f53
	{
		case ADC_options_screen: ADC_options_screen_S5(); break;
 8001f34:	f014 ff18 	bl	8016d68 <ADC_options_screen_S5>
 8001f38:	e00e      	b.n	8001f58 <Button_S5_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S5(); break;
 8001f3a:	f015 f9c3 	bl	80172c4 <Display_options_screen_S5>
 8001f3e:	e00b      	b.n	8001f58 <Button_S5_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S5(); break;
 8001f40:	f015 fc3e 	bl	80177c0 <Measure_options_screen_S5>
 8001f44:	e008      	b.n	8001f58 <Button_S5_press_callback+0x58>
		case RTC_screen: RTC_screen_S5(); break;
 8001f46:	f016 f8d7 	bl	80180f8 <RTC_screen_S5>
 8001f4a:	e005      	b.n	8001f58 <Button_S5_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S5(); break;
 8001f4c:	f014 fffc 	bl	8016f48 <Auto_Off_option_screen_S5>
 8001f50:	e002      	b.n	8001f58 <Button_S5_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S5(); break;
 8001f52:	f016 fc1d 	bl	8018790 <Logging_options_screen_S5>
 8001f56:	bf00      	nop
	}
	off_sec=off_min=0;
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <Button_S5_press_callback+0x7c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	801a      	strh	r2, [r3, #0]
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <Button_S5_press_callback+0x7c>)
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <Button_S5_press_callback+0x80>)
 8001f64:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <Button_S5_press_callback+0x84>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <Button_S5_press_callback+0x84>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <Button_S5_press_callback+0x88>)
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000004c 	.word	0x2000004c
 8001f7c:	20001d0e 	.word	0x20001d0e
 8001f80:	20001d0c 	.word	0x20001d0c
 8001f84:	20001d11 	.word	0x20001d11
 8001f88:	20001d10 	.word	0x20001d10

08001f8c <Button_S6_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											UP
//--------------------------------------------------------------------------------------------------------

void Button_S6_press_callback(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	switch(screen)
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <Button_S6_press_callback+0x84>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3b04      	subs	r3, #4
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d829      	bhi.n	8001fee <Button_S6_press_callback+0x62>
 8001f9a:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <Button_S6_press_callback+0x14>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	08001fcb 	.word	0x08001fcb
 8001fa4:	08001fd7 	.word	0x08001fd7
 8001fa8:	08001fd1 	.word	0x08001fd1
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	08001fc5 	.word	0x08001fc5
 8001fb4:	08001fe3 	.word	0x08001fe3
 8001fb8:	08001fef 	.word	0x08001fef
 8001fbc:	08001fef 	.word	0x08001fef
 8001fc0:	08001fe9 	.word	0x08001fe9
	{
		case Parameter_screen: Parameter_screen_S6(); break;
 8001fc4:	f016 fd80 	bl	8018ac8 <Parameter_screen_S6>
 8001fc8:	e011      	b.n	8001fee <Button_S6_press_callback+0x62>
		case Option_screen: Option_screen_S6(); break;
 8001fca:	f016 fdd9 	bl	8018b80 <Option_screen_S6>
 8001fce:	e00e      	b.n	8001fee <Button_S6_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S6(); break;
 8001fd0:	f014 fd9a 	bl	8016b08 <ADC_options_screen_S6>
 8001fd4:	e00b      	b.n	8001fee <Button_S6_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S6(); break;
 8001fd6:	f015 f8e1 	bl	801719c <Display_options_screen_S6>
 8001fda:	e008      	b.n	8001fee <Button_S6_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S6(); break;
 8001fdc:	f015 fb4c 	bl	8017678 <Measure_options_screen_S6>
 8001fe0:	e005      	b.n	8001fee <Button_S6_press_callback+0x62>
		case RTC_screen: RTC_screen_S6(); break;
 8001fe2:	f016 f8b1 	bl	8018148 <RTC_screen_S6>
 8001fe6:	e002      	b.n	8001fee <Button_S6_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S6(); break;
 8001fe8:	f016 fb1e 	bl	8018628 <Logging_options_screen_S6>
 8001fec:	bf00      	nop
	}
	off_sec=off_min=0;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <Button_S6_press_callback+0x88>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <Button_S6_press_callback+0x88>)
 8001ff6:	881a      	ldrh	r2, [r3, #0]
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <Button_S6_press_callback+0x8c>)
 8001ffa:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <Button_S6_press_callback+0x90>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <Button_S6_press_callback+0x90>)
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <Button_S6_press_callback+0x94>)
 8002008:	701a      	strb	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000004c 	.word	0x2000004c
 8002014:	20001d0e 	.word	0x20001d0e
 8002018:	20001d0c 	.word	0x20001d0c
 800201c:	20001d11 	.word	0x20001d11
 8002020:	20001d10 	.word	0x20001d10

08002024 <Button_S7_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										DOWN
//--------------------------------------------------------------------------------------------------------

void Button_S7_press_callback(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	switch(screen)
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <Button_S7_press_callback+0x84>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	3b04      	subs	r3, #4
 800202e:	2b08      	cmp	r3, #8
 8002030:	d829      	bhi.n	8002086 <Button_S7_press_callback+0x62>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <Button_S7_press_callback+0x14>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	08002063 	.word	0x08002063
 800203c:	0800206f 	.word	0x0800206f
 8002040:	08002069 	.word	0x08002069
 8002044:	08002075 	.word	0x08002075
 8002048:	0800205d 	.word	0x0800205d
 800204c:	0800207b 	.word	0x0800207b
 8002050:	08002087 	.word	0x08002087
 8002054:	08002087 	.word	0x08002087
 8002058:	08002081 	.word	0x08002081
	{
		case Parameter_screen: Parameter_screen_S7(); break;
 800205c:	f016 fd1c 	bl	8018a98 <Parameter_screen_S7>
 8002060:	e011      	b.n	8002086 <Button_S7_press_callback+0x62>
		case Option_screen: Option_screen_S7(); break;
 8002062:	f016 fd75 	bl	8018b50 <Option_screen_S7>
 8002066:	e00e      	b.n	8002086 <Button_S7_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S7(); break;
 8002068:	f014 fd66 	bl	8016b38 <ADC_options_screen_S7>
 800206c:	e00b      	b.n	8002086 <Button_S7_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S7(); break;
 800206e:	f015 f8a9 	bl	80171c4 <Display_options_screen_S7>
 8002072:	e008      	b.n	8002086 <Button_S7_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S7(); break;
 8002074:	f015 fb14 	bl	80176a0 <Measure_options_screen_S7>
 8002078:	e005      	b.n	8002086 <Button_S7_press_callback+0x62>
		case RTC_screen: RTC_screen_S7(); break;
 800207a:	f016 f8db 	bl	8018234 <RTC_screen_S7>
 800207e:	e002      	b.n	8002086 <Button_S7_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S7(); break;
 8002080:	f016 fae6 	bl	8018650 <Logging_options_screen_S7>
 8002084:	bf00      	nop
	}
	off_sec=off_min=0;
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <Button_S7_press_callback+0x88>)
 8002088:	2200      	movs	r2, #0
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <Button_S7_press_callback+0x88>)
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <Button_S7_press_callback+0x8c>)
 8002092:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <Button_S7_press_callback+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <Button_S7_press_callback+0x90>)
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <Button_S7_press_callback+0x94>)
 80020a0:	701a      	strb	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000004c 	.word	0x2000004c
 80020ac:	20001d0e 	.word	0x20001d0e
 80020b0:	20001d0c 	.word	0x20001d0c
 80020b4:	20001d11 	.word	0x20001d11
 80020b8:	20001d10 	.word	0x20001d10

080020bc <Button_S8_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											BACKWARD
//--------------------------------------------------------------------------------------------------------

void Button_S8_press_callback(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	switch(screen)
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <Button_S8_press_callback+0x78>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	3b05      	subs	r3, #5
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d824      	bhi.n	8002114 <Button_S8_press_callback+0x58>
 80020ca:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <Button_S8_press_callback+0x14>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	080020f7 	.word	0x080020f7
 80020d4:	080020f1 	.word	0x080020f1
 80020d8:	080020fd 	.word	0x080020fd
 80020dc:	08002115 	.word	0x08002115
 80020e0:	08002103 	.word	0x08002103
 80020e4:	08002109 	.word	0x08002109
 80020e8:	08002115 	.word	0x08002115
 80020ec:	0800210f 	.word	0x0800210f
	{
		case ADC_options_screen: ADC_options_screen_S8(); break;
 80020f0:	f014 fdac 	bl	8016c4c <ADC_options_screen_S8>
 80020f4:	e00e      	b.n	8002114 <Button_S8_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S8(); break;
 80020f6:	f015 f8a5 	bl	8017244 <Display_options_screen_S8>
 80020fa:	e00b      	b.n	8002114 <Button_S8_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S8(); break;
 80020fc:	f015 fafa 	bl	80176f4 <Measure_options_screen_S8>
 8002100:	e008      	b.n	8002114 <Button_S8_press_callback+0x58>
		case RTC_screen: RTC_screen_S8(); break;
 8002102:	f016 f80d 	bl	8018120 <RTC_screen_S8>
 8002106:	e005      	b.n	8002114 <Button_S8_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S8(); break;
 8002108:	f014 ff0a 	bl	8016f20 <Auto_Off_option_screen_S8>
 800210c:	e002      	b.n	8002114 <Button_S8_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S8(); break;
 800210e:	f016 fac9 	bl	80186a4 <Logging_options_screen_S8>
 8002112:	bf00      	nop
	}
	off_sec=off_min=0;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <Button_S8_press_callback+0x7c>)
 8002116:	2200      	movs	r2, #0
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <Button_S8_press_callback+0x7c>)
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <Button_S8_press_callback+0x80>)
 8002120:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <Button_S8_press_callback+0x84>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <Button_S8_press_callback+0x84>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <Button_S8_press_callback+0x88>)
 800212e:	701a      	strb	r2, [r3, #0]
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000004c 	.word	0x2000004c
 8002138:	20001d0e 	.word	0x20001d0e
 800213c:	20001d0c 	.word	0x20001d0c
 8002140:	20001d11 	.word	0x20001d11
 8002144:	20001d10 	.word	0x20001d10

08002148 <Button_S9_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											MENU
//--------------------------------------------------------------------------------------------------------

void Button_S9_press_callback(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	switch(screen)
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <Button_S9_press_callback+0xa0>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	3b01      	subs	r3, #1
 8002152:	2b0b      	cmp	r3, #11
 8002154:	d838      	bhi.n	80021c8 <Button_S9_press_callback+0x80>
 8002156:	a201      	add	r2, pc, #4	; (adr r2, 800215c <Button_S9_press_callback+0x14>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	080021ab 	.word	0x080021ab
 8002160:	080021c9 	.word	0x080021c9
 8002164:	080021c9 	.word	0x080021c9
 8002168:	08002193 	.word	0x08002193
 800216c:	0800219f 	.word	0x0800219f
 8002170:	08002199 	.word	0x08002199
 8002174:	080021a5 	.word	0x080021a5
 8002178:	0800218d 	.word	0x0800218d
 800217c:	080021b1 	.word	0x080021b1
 8002180:	080021b7 	.word	0x080021b7
 8002184:	080021bd 	.word	0x080021bd
 8002188:	080021c3 	.word	0x080021c3
	{
		case Parameter_screen: Parameter_screen_S9(); break;
 800218c:	f016 fc2a 	bl	80189e4 <Parameter_screen_S9>
 8002190:	e01a      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case Option_screen: Option_screen_S9(); break;
 8002192:	f016 fccb 	bl	8018b2c <Option_screen_S9>
 8002196:	e017      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case ADC_options_screen: ADC_options_screen_S9(); break;
 8002198:	f014 fce6 	bl	8016b68 <ADC_options_screen_S9>
 800219c:	e014      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case Display_options_screen: Display_options_screen_S9(); break;
 800219e:	f014 ffe7 	bl	8017170 <Display_options_screen_S9>
 80021a2:	e011      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case Measure_options_screen: Measure_options_screen_S9(); break;
 80021a4:	f015 fa90 	bl	80176c8 <Measure_options_screen_S9>
 80021a8:	e00e      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case Main_screen: Main_screen_S9(); break;
 80021aa:	f015 fccb 	bl	8017b44 <Main_screen_S9>
 80021ae:	e00b      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case RTC_screen: RTC_screen_S9(); break;
 80021b0:	f015 ff8c 	bl	80180cc <RTC_screen_S9>
 80021b4:	e008      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case Auto_Off_option_screen: Auto_Off_option_screen_S9(); break;
 80021b6:	f014 fe9d 	bl	8016ef4 <Auto_Off_option_screen_S9>
 80021ba:	e005      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case About_options_screen: About_options_screen_S9(); break;
 80021bc:	f016 f94c 	bl	8018458 <About_options_screen_S9>
 80021c0:	e002      	b.n	80021c8 <Button_S9_press_callback+0x80>
		case Logging_options_screen: Logging_options_screen_S9(); break;
 80021c2:	f016 fa59 	bl	8018678 <Logging_options_screen_S9>
 80021c6:	bf00      	nop
	}
	off_sec=off_min=0;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <Button_S9_press_callback+0xa4>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <Button_S9_press_callback+0xa4>)
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <Button_S9_press_callback+0xa8>)
 80021d4:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <Button_S9_press_callback+0xac>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <Button_S9_press_callback+0xac>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <Button_S9_press_callback+0xb0>)
 80021e2:	701a      	strb	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2000004c 	.word	0x2000004c
 80021ec:	20001d0e 	.word	0x20001d0e
 80021f0:	20001d0c 	.word	0x20001d0c
 80021f4:	20001d11 	.word	0x20001d11
 80021f8:	20001d10 	.word	0x20001d10

080021fc <Button_S10_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E func
//--------------------------------------------------------------------------------------------------------

void Button_S10_press_callback(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <Button_S10_press_callback+0x44>)
 8002202:	2200      	movs	r2, #0
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <Button_S10_press_callback+0x44>)
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <Button_S10_press_callback+0x48>)
 800220c:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <Button_S10_press_callback+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <Button_S10_press_callback+0x4c>)
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <Button_S10_press_callback+0x50>)
 800221a:	701a      	strb	r2, [r3, #0]
	// Переключение отображения второй строки
	if(++E_fun==3)E_fun=0;
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <Button_S10_press_callback+0x54>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <Button_S10_press_callback+0x54>)
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <Button_S10_press_callback+0x54>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d102      	bne.n	8002236 <Button_S10_press_callback+0x3a>
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <Button_S10_press_callback+0x54>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	20001d0e 	.word	0x20001d0e
 8002244:	20001d0c 	.word	0x20001d0c
 8002248:	20001d11 	.word	0x20001d11
 800224c:	20001d10 	.word	0x20001d10
 8002250:	20000968 	.word	0x20000968

08002254 <Button_S11_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											P units
//--------------------------------------------------------------------------------------------------------

void Button_S11_press_callback(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
	if(screen==Main_screen) screen=Test_screen;
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <Button_S11_press_callback+0x50>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d103      	bne.n	8002268 <Button_S11_press_callback+0x14>
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <Button_S11_press_callback+0x50>)
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	e00a      	b.n	800227e <Button_S11_press_callback+0x2a>
	else if(screen==Test_screen)screen=ADC_options_screen;
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <Button_S11_press_callback+0x50>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d103      	bne.n	8002278 <Button_S11_press_callback+0x24>
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <Button_S11_press_callback+0x50>)
 8002272:	2206      	movs	r2, #6
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	e002      	b.n	800227e <Button_S11_press_callback+0x2a>
	else screen=Main_screen;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <Button_S11_press_callback+0x50>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]

	off_sec=off_min=0;
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <Button_S11_press_callback+0x54>)
 8002280:	2200      	movs	r2, #0
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <Button_S11_press_callback+0x54>)
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <Button_S11_press_callback+0x58>)
 800228a:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <Button_S11_press_callback+0x5c>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <Button_S11_press_callback+0x5c>)
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <Button_S11_press_callback+0x60>)
 8002298:	701a      	strb	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	2000004c 	.word	0x2000004c
 80022a8:	20001d0e 	.word	0x20001d0e
 80022ac:	20001d0c 	.word	0x20001d0c
 80022b0:	20001d11 	.word	0x20001d11
 80022b4:	20001d10 	.word	0x20001d10

080022b8 <Buttons_process>:
//--------------------------------------------------------------------------------------------------------
//											Обработчик кнопок
//--------------------------------------------------------------------------------------------------------

void Buttons_process(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
	uint16_t keypad = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	81fb      	strh	r3, [r7, #14]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	// reset if bug
	aTxBuffer[0] = PI4IOE5V6416_REG_INT_MSK0;
 80022c2:	234a      	movs	r3, #74	; 0x4a
 80022c4:	723b      	strb	r3, [r7, #8]
	aRxBuffer[0] = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80022ca:	f107 0208 	add.w	r2, r7, #8
 80022ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2301      	movs	r3, #1
 80022d6:	2140      	movs	r1, #64	; 0x40
 80022d8:	48a0      	ldr	r0, [pc, #640]	; (800255c <Buttons_process+0x2a4>)
 80022da:	f007 ffcb 	bl	800a274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80022de:	1d3a      	adds	r2, r7, #4
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2301      	movs	r3, #1
 80022e8:	2141      	movs	r1, #65	; 0x41
 80022ea:	489c      	ldr	r0, [pc, #624]	; (800255c <Buttons_process+0x2a4>)
 80022ec:	f008 f8b6 	bl	800a45c <HAL_I2C_Master_Receive>
	if(aRxBuffer[0] == 0x00){ERROR_REG|=(1<<KeyPad_err);HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); delay_us(100); HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);}
 80022f0:	793b      	ldrb	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d112      	bne.n	800231c <Buttons_process+0x64>
 80022f6:	4b9a      	ldr	r3, [pc, #616]	; (8002560 <Buttons_process+0x2a8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	4a98      	ldr	r2, [pc, #608]	; (8002560 <Buttons_process+0x2a8>)
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	2120      	movs	r1, #32
 8002306:	4897      	ldr	r0, [pc, #604]	; (8002564 <Buttons_process+0x2ac>)
 8002308:	f007 feea 	bl	800a0e0 <HAL_GPIO_WritePin>
 800230c:	2064      	movs	r0, #100	; 0x64
 800230e:	f000 fd19 	bl	8002d44 <delay_us>
 8002312:	2201      	movs	r2, #1
 8002314:	2120      	movs	r1, #32
 8002316:	4893      	ldr	r0, [pc, #588]	; (8002564 <Buttons_process+0x2ac>)
 8002318:	f007 fee2 	bl	800a0e0 <HAL_GPIO_WritePin>

	aTxBuffer[0] = 0x00;
 800231c:	2300      	movs	r3, #0
 800231e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 8002320:	f107 0208 	add.w	r2, r7, #8
 8002324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	2140      	movs	r1, #64	; 0x40
 800232e:	488b      	ldr	r0, [pc, #556]	; (800255c <Buttons_process+0x2a4>)
 8002330:	f007 ffa0 	bl	800a274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002334:	1d3a      	adds	r2, r7, #4
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2301      	movs	r3, #1
 800233e:	2141      	movs	r1, #65	; 0x41
 8002340:	4886      	ldr	r0, [pc, #536]	; (800255c <Buttons_process+0x2a4>)
 8002342:	f008 f88b 	bl	800a45c <HAL_I2C_Master_Receive>
	keypad=aRxBuffer[0];
 8002346:	793b      	ldrb	r3, [r7, #4]
 8002348:	81fb      	strh	r3, [r7, #14]
	keypad<<=8;
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	81fb      	strh	r3, [r7, #14]
	aTxBuffer[0] = 0x01;
 8002350:	2301      	movs	r3, #1
 8002352:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 8002354:	f107 0208 	add.w	r2, r7, #8
 8002358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2301      	movs	r3, #1
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	487e      	ldr	r0, [pc, #504]	; (800255c <Buttons_process+0x2a4>)
 8002364:	f007 ff86 	bl	800a274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002368:	1d3a      	adds	r2, r7, #4
 800236a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	2141      	movs	r1, #65	; 0x41
 8002374:	4879      	ldr	r0, [pc, #484]	; (800255c <Buttons_process+0x2a4>)
 8002376:	f008 f871 	bl	800a45c <HAL_I2C_Master_Receive>
	keypad+=(aRxBuffer[0]&0x07);
 800237a:	793b      	ldrb	r3, [r7, #4]
 800237c:	b29b      	uxth	r3, r3
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	b29a      	uxth	r2, r3
 8002384:	89fb      	ldrh	r3, [r7, #14]
 8002386:	4413      	add	r3, r2
 8002388:	81fb      	strh	r3, [r7, #14]

	keypad_code=keypad;
 800238a:	4a77      	ldr	r2, [pc, #476]	; (8002568 <Buttons_process+0x2b0>)
 800238c:	89fb      	ldrh	r3, [r7, #14]
 800238e:	8013      	strh	r3, [r2, #0]
	switch(keypad)
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	f64f 7207 	movw	r2, #65287	; 0xff07
 8002396:	4293      	cmp	r3, r2
 8002398:	f000 80bb 	beq.w	8002512 <Buttons_process+0x25a>
 800239c:	f64f 7207 	movw	r2, #65287	; 0xff07
 80023a0:	4293      	cmp	r3, r2
 80023a2:	f300 80c0 	bgt.w	8002526 <Buttons_process+0x26e>
 80023a6:	f64f 6206 	movw	r2, #65030	; 0xfe06
 80023aa:	4293      	cmp	r3, r2
 80023ac:	f000 8093 	beq.w	80024d6 <Buttons_process+0x21e>
 80023b0:	f64f 6206 	movw	r2, #65030	; 0xfe06
 80023b4:	4293      	cmp	r3, r2
 80023b6:	f300 80b6 	bgt.w	8002526 <Buttons_process+0x26e>
 80023ba:	f64f 6205 	movw	r2, #65029	; 0xfe05
 80023be:	4293      	cmp	r3, r2
 80023c0:	f000 8093 	beq.w	80024ea <Buttons_process+0x232>
 80023c4:	f64f 6205 	movw	r2, #65029	; 0xfe05
 80023c8:	4293      	cmp	r3, r2
 80023ca:	f300 80ac 	bgt.w	8002526 <Buttons_process+0x26e>
 80023ce:	f64f 6203 	movw	r2, #65027	; 0xfe03
 80023d2:	4293      	cmp	r3, r2
 80023d4:	f000 8093 	beq.w	80024fe <Buttons_process+0x246>
 80023d8:	f64f 6203 	movw	r2, #65027	; 0xfe03
 80023dc:	4293      	cmp	r3, r2
 80023de:	f300 80a2 	bgt.w	8002526 <Buttons_process+0x26e>
 80023e2:	f64f 4207 	movw	r2, #64519	; 0xfc07
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02f      	beq.n	800244a <Buttons_process+0x192>
 80023ea:	f64f 4207 	movw	r2, #64519	; 0xfc07
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f300 8099 	bgt.w	8002526 <Buttons_process+0x26e>
 80023f4:	f64f 2207 	movw	r2, #64007	; 0xfa07
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d030      	beq.n	800245e <Buttons_process+0x1a6>
 80023fc:	f64f 2207 	movw	r2, #64007	; 0xfa07
 8002400:	4293      	cmp	r3, r2
 8002402:	f300 8090 	bgt.w	8002526 <Buttons_process+0x26e>
 8002406:	f24f 6207 	movw	r2, #62983	; 0xf607
 800240a:	4293      	cmp	r3, r2
 800240c:	d031      	beq.n	8002472 <Buttons_process+0x1ba>
 800240e:	f24f 6207 	movw	r2, #62983	; 0xf607
 8002412:	4293      	cmp	r3, r2
 8002414:	f300 8087 	bgt.w	8002526 <Buttons_process+0x26e>
 8002418:	f64e 6207 	movw	r2, #60935	; 0xee07
 800241c:	4293      	cmp	r3, r2
 800241e:	d032      	beq.n	8002486 <Buttons_process+0x1ce>
 8002420:	f64e 6207 	movw	r2, #60935	; 0xee07
 8002424:	4293      	cmp	r3, r2
 8002426:	dc7e      	bgt.n	8002526 <Buttons_process+0x26e>
 8002428:	f64d 6207 	movw	r2, #56839	; 0xde07
 800242c:	4293      	cmp	r3, r2
 800242e:	d034      	beq.n	800249a <Buttons_process+0x1e2>
 8002430:	f64d 6207 	movw	r2, #56839	; 0xde07
 8002434:	4293      	cmp	r3, r2
 8002436:	dc76      	bgt.n	8002526 <Buttons_process+0x26e>
 8002438:	f647 6207 	movw	r2, #32263	; 0x7e07
 800243c:	4293      	cmp	r3, r2
 800243e:	d040      	beq.n	80024c2 <Buttons_process+0x20a>
 8002440:	f64b 6207 	movw	r2, #48647	; 0xbe07
 8002444:	4293      	cmp	r3, r2
 8002446:	d032      	beq.n	80024ae <Buttons_process+0x1f6>
 8002448:	e06d      	b.n	8002526 <Buttons_process+0x26e>
	{
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 800244a:	4b48      	ldr	r3, [pc, #288]	; (800256c <Buttons_process+0x2b4>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d170      	bne.n	8002534 <Buttons_process+0x27c>
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <Buttons_process+0x2b4>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	f7ff fc68 	bl	8001d2c <Button_S2_press_callback>
 800245c:	e06a      	b.n	8002534 <Buttons_process+0x27c>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <Buttons_process+0x2b4>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d168      	bne.n	8002538 <Buttons_process+0x280>
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <Buttons_process+0x2b4>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	f7ff fca6 	bl	8001dbc <Button_S3_press_callback>
 8002470:	e062      	b.n	8002538 <Buttons_process+0x280>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <Buttons_process+0x2b4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d160      	bne.n	800253c <Buttons_process+0x284>
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <Buttons_process+0x2b4>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	f7ff fcfe 	bl	8001e80 <Button_S4_press_callback>
 8002484:	e05a      	b.n	800253c <Buttons_process+0x284>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <Buttons_process+0x2b4>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d158      	bne.n	8002540 <Buttons_process+0x288>
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <Buttons_process+0x2b4>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	f7ff fd34 	bl	8001f00 <Button_S5_press_callback>
 8002498:	e052      	b.n	8002540 <Buttons_process+0x288>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <Buttons_process+0x2b4>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d150      	bne.n	8002544 <Buttons_process+0x28c>
 80024a2:	4b32      	ldr	r3, [pc, #200]	; (800256c <Buttons_process+0x2b4>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	f7ff fd70 	bl	8001f8c <Button_S6_press_callback>
 80024ac:	e04a      	b.n	8002544 <Buttons_process+0x28c>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <Buttons_process+0x2b4>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d148      	bne.n	8002548 <Buttons_process+0x290>
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <Buttons_process+0x2b4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	f7ff fdb2 	bl	8002024 <Button_S7_press_callback>
 80024c0:	e042      	b.n	8002548 <Buttons_process+0x290>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <Buttons_process+0x2b4>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d140      	bne.n	800254c <Buttons_process+0x294>
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <Buttons_process+0x2b4>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	f7ff fdf4 	bl	80020bc <Button_S8_press_callback>
 80024d4:	e03a      	b.n	800254c <Buttons_process+0x294>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <Buttons_process+0x2b4>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d138      	bne.n	8002550 <Buttons_process+0x298>
 80024de:	4b23      	ldr	r3, [pc, #140]	; (800256c <Buttons_process+0x2b4>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	f7ff fe30 	bl	8002148 <Button_S9_press_callback>
 80024e8:	e032      	b.n	8002550 <Buttons_process+0x298>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <Buttons_process+0x2b4>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d130      	bne.n	8002554 <Buttons_process+0x29c>
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <Buttons_process+0x2b4>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	f7ff fe80 	bl	80021fc <Button_S10_press_callback>
 80024fc:	e02a      	b.n	8002554 <Buttons_process+0x29c>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <Buttons_process+0x2b4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d128      	bne.n	8002558 <Buttons_process+0x2a0>
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <Buttons_process+0x2b4>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	f7ff fea2 	bl	8002254 <Button_S11_press_callback>
 8002510:	e022      	b.n	8002558 <Buttons_process+0x2a0>
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <Buttons_process+0x2b4>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d12c      	bne.n	8002574 <Buttons_process+0x2bc>
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <Buttons_process+0x2b4>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	f7ff fbe2 	bl	8001ce8 <Button_S1_press_callback>
 8002524:	e026      	b.n	8002574 <Buttons_process+0x2bc>
		default: buttons_press=Button_State=0; break;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <Buttons_process+0x2b4>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <Buttons_process+0x2b8>)
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	e020      	b.n	8002576 <Buttons_process+0x2be>
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 8002534:	bf00      	nop
 8002536:	e01e      	b.n	8002576 <Buttons_process+0x2be>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 8002538:	bf00      	nop
 800253a:	e01c      	b.n	8002576 <Buttons_process+0x2be>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 800253c:	bf00      	nop
 800253e:	e01a      	b.n	8002576 <Buttons_process+0x2be>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002540:	bf00      	nop
 8002542:	e018      	b.n	8002576 <Buttons_process+0x2be>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002544:	bf00      	nop
 8002546:	e016      	b.n	8002576 <Buttons_process+0x2be>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 8002548:	bf00      	nop
 800254a:	e014      	b.n	8002576 <Buttons_process+0x2be>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 800254c:	bf00      	nop
 800254e:	e012      	b.n	8002576 <Buttons_process+0x2be>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 8002550:	bf00      	nop
 8002552:	e010      	b.n	8002576 <Buttons_process+0x2be>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 8002554:	bf00      	nop
 8002556:	e00e      	b.n	8002576 <Buttons_process+0x2be>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 8002558:	bf00      	nop
 800255a:	e00c      	b.n	8002576 <Buttons_process+0x2be>
 800255c:	20007a24 	.word	0x20007a24
 8002560:	20000958 	.word	0x20000958
 8002564:	48000400 	.word	0x48000400
 8002568:	2000091a 	.word	0x2000091a
 800256c:	20000914 	.word	0x20000914
 8002570:	20000916 	.word	0x20000916
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002574:	bf00      	nop
	}

	if((Button_State==1)&&(buttons_press<20))buttons_press++;
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <Buttons_process+0x37c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d109      	bne.n	8002592 <Buttons_process+0x2da>
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <Buttons_process+0x380>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	2b13      	cmp	r3, #19
 8002584:	d805      	bhi.n	8002592 <Buttons_process+0x2da>
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <Buttons_process+0x380>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <Buttons_process+0x380>)
 8002590:	801a      	strh	r2, [r3, #0]

	// Задержка на обработку кнопки включения
	if(OnOffCntr>on_off_time){ if(--OnOffCntr==on_off_time) OnOffCntr=-1; }
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <Buttons_process+0x384>)
 8002594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002598:	2bc8      	cmp	r3, #200	; 0xc8
 800259a:	dd11      	ble.n	80025c0 <Buttons_process+0x308>
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <Buttons_process+0x384>)
 800259e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <Buttons_process+0x384>)
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	4b23      	ldr	r3, [pc, #140]	; (800263c <Buttons_process+0x384>)
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	2bc8      	cmp	r3, #200	; 0xc8
 80025b6:	d103      	bne.n	80025c0 <Buttons_process+0x308>
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <Buttons_process+0x384>)
 80025ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025be:	801a      	strh	r2, [r3, #0]
	if((OnOffCntr>0)&&(OnOffCntr<=on_off_time)) if(--OnOffCntr==0)
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <Buttons_process+0x384>)
 80025c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	dd2c      	ble.n	8002624 <Buttons_process+0x36c>
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <Buttons_process+0x384>)
 80025cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d0:	2bc8      	cmp	r3, #200	; 0xc8
 80025d2:	dc27      	bgt.n	8002624 <Buttons_process+0x36c>
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <Buttons_process+0x384>)
 80025d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29b      	uxth	r3, r3
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <Buttons_process+0x384>)
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <Buttons_process+0x384>)
 80025e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d119      	bne.n	8002624 <Buttons_process+0x36c>
	{
		// Выключение
		TURN_OFF_ADC_POWER();
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	4812      	ldr	r0, [pc, #72]	; (8002640 <Buttons_process+0x388>)
 80025f6:	f007 fd73 	bl	800a0e0 <HAL_GPIO_WritePin>
 80025fa:	2200      	movs	r2, #0
 80025fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002600:	4810      	ldr	r0, [pc, #64]	; (8002644 <Buttons_process+0x38c>)
 8002602:	f007 fd6d 	bl	800a0e0 <HAL_GPIO_WritePin>
		delay_ms(200);
 8002606:	20c8      	movs	r0, #200	; 0xc8
 8002608:	f000 fb86 	bl	8002d18 <delay_ms>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002612:	480b      	ldr	r0, [pc, #44]	; (8002640 <Buttons_process+0x388>)
 8002614:	f007 fd64 	bl	800a0e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LCD_reserv_GPIO_Port, EN_LCD_reserv_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800261e:	4809      	ldr	r0, [pc, #36]	; (8002644 <Buttons_process+0x38c>)
 8002620:	f007 fd5e 	bl	800a0e0 <HAL_GPIO_WritePin>
	}

	sleep(5);
 8002624:	2005      	movs	r0, #5
 8002626:	f000 fb2b 	bl	8002c80 <sleep>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000914 	.word	0x20000914
 8002638:	20000916 	.word	0x20000916
 800263c:	2000004a 	.word	0x2000004a
 8002640:	48000800 	.word	0x48000800
 8002644:	48000c00 	.word	0x48000c00

08002648 <Buttons_timer>:
//--------------------------------------------------------------------------------------------------------
//											Таймер долгого нажатия
//--------------------------------------------------------------------------------------------------------

void Buttons_timer(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	if(buttons_press==20)
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <Buttons_timer+0x44>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	2b14      	cmp	r3, #20
 8002652:	d112      	bne.n	800267a <Buttons_timer+0x32>
	{
		if(++buttons_ms>=1000)
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <Buttons_timer+0x48>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <Buttons_timer+0x48>)
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <Buttons_timer+0x48>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002668:	d30a      	bcc.n	8002680 <Buttons_timer+0x38>
		{
			buttons_ms=1000-100;
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <Buttons_timer+0x48>)
 800266c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002670:	801a      	strh	r2, [r3, #0]
			Button_State=0;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <Buttons_timer+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
		}
	}
	else {buttons_ms=0;}
}
 8002678:	e002      	b.n	8002680 <Buttons_timer+0x38>
	else {buttons_ms=0;}
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <Buttons_timer+0x48>)
 800267c:	2200      	movs	r2, #0
 800267e:	801a      	strh	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000916 	.word	0x20000916
 8002690:	20000918 	.word	0x20000918
 8002694:	20000914 	.word	0x20000914

08002698 <DrawImage>:
const char *PGA_name[9]={ "PGA OFF", "PGA 1", "PGA 2", "PGA 4", "PGA 8", "PGA 16", "PGA 32", "PGA 64", "PGA 128" };



void DrawImage(const uint8_t *image, uint16_t x, uint16_t y, uint8_t inverse)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	460b      	mov	r3, r1
 80026ac:	813b      	strh	r3, [r7, #8]
 80026ae:	4613      	mov	r3, r2
 80026b0:	71fb      	strb	r3, [r7, #7]
	uint16_t xi = 0, yi = 0, bitnum=0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	83fb      	strh	r3, [r7, #30]
 80026b6:	2300      	movs	r3, #0
 80026b8:	83bb      	strh	r3, [r7, #28]
 80026ba:	2300      	movs	r3, #0
 80026bc:	837b      	strh	r3, [r7, #26]
	uint8_t color;
	uint16_t SIZE_X, SIZE_Y;
	// Размер картинки
	SIZE_X = (uint16_t)(((image[0]<<8) + image[1])>>3);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	3201      	adds	r2, #1
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	10db      	asrs	r3, r3, #3
 80026ce:	833b      	strh	r3, [r7, #24]
	SIZE_Y = (uint16_t)(image[2]<<8) + image[3];
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3302      	adds	r3, #2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3303      	adds	r3, #3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	82fb      	strh	r3, [r7, #22]
	for(yi = 0; yi < SIZE_Y; yi++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	83bb      	strh	r3, [r7, #28]
 80026ec:	e03e      	b.n	800276c <DrawImage+0xd4>
	{
		for(xi = 0; xi < SIZE_X; xi++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	83fb      	strh	r3, [r7, #30]
 80026f2:	e034      	b.n	800275e <DrawImage+0xc6>
		{
			for(bitnum=0;bitnum<8;bitnum++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	837b      	strh	r3, [r7, #26]
 80026f8:	e02b      	b.n	8002752 <DrawImage+0xba>
			{
				color=((image[xi+yi*SIZE_X+4])>>(7-bitnum))&0x01;
 80026fa:	8bfa      	ldrh	r2, [r7, #30]
 80026fc:	8bbb      	ldrh	r3, [r7, #28]
 80026fe:	8b39      	ldrh	r1, [r7, #24]
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	8b7b      	ldrh	r3, [r7, #26]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	fa42 f303 	asr.w	r3, r2, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	757b      	strb	r3, [r7, #21]
				if(color==inverse)u8g2_DrawPixel(&u8g2, x+(xi*8)+bitnum, y+yi);
 8002722:	7d7a      	ldrb	r2, [r7, #21]
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	429a      	cmp	r2, r3
 8002728:	d110      	bne.n	800274c <DrawImage+0xb4>
 800272a:	8bfb      	ldrh	r3, [r7, #30]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	b29a      	uxth	r2, r3
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	4413      	add	r3, r2
 8002734:	b29a      	uxth	r2, r3
 8002736:	8b7b      	ldrh	r3, [r7, #26]
 8002738:	4413      	add	r3, r2
 800273a:	b299      	uxth	r1, r3
 800273c:	893a      	ldrh	r2, [r7, #8]
 800273e:	8bbb      	ldrh	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <DrawImage+0xe8>)
 8002748:	f013 fab0 	bl	8015cac <u8g2_DrawPixel>
			for(bitnum=0;bitnum<8;bitnum++)
 800274c:	8b7b      	ldrh	r3, [r7, #26]
 800274e:	3301      	adds	r3, #1
 8002750:	837b      	strh	r3, [r7, #26]
 8002752:	8b7b      	ldrh	r3, [r7, #26]
 8002754:	2b07      	cmp	r3, #7
 8002756:	d9d0      	bls.n	80026fa <DrawImage+0x62>
		for(xi = 0; xi < SIZE_X; xi++)
 8002758:	8bfb      	ldrh	r3, [r7, #30]
 800275a:	3301      	adds	r3, #1
 800275c:	83fb      	strh	r3, [r7, #30]
 800275e:	8bfa      	ldrh	r2, [r7, #30]
 8002760:	8b3b      	ldrh	r3, [r7, #24]
 8002762:	429a      	cmp	r2, r3
 8002764:	d3c6      	bcc.n	80026f4 <DrawImage+0x5c>
	for(yi = 0; yi < SIZE_Y; yi++)
 8002766:	8bbb      	ldrh	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	83bb      	strh	r3, [r7, #28]
 800276c:	8bba      	ldrh	r2, [r7, #28]
 800276e:	8afb      	ldrh	r3, [r7, #22]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3bc      	bcc.n	80026ee <DrawImage+0x56>
			}
		}
	}
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20002098 	.word	0x20002098

08002784 <Display_init>:




void Display_init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	u8g2_Setup_uc1638_240x160_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_cb_stm32l4);
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <Display_init+0xe8>)
 800278c:	4a38      	ldr	r2, [pc, #224]	; (8002870 <Display_init+0xec>)
 800278e:	4939      	ldr	r1, [pc, #228]	; (8002874 <Display_init+0xf0>)
 8002790:	4839      	ldr	r0, [pc, #228]	; (8002878 <Display_init+0xf4>)
 8002792:	f012 fbc7 	bl	8014f24 <u8g2_Setup_uc1638_240x160_f>
	u8g2_InitDisplay(&u8g2);
 8002796:	4838      	ldr	r0, [pc, #224]	; (8002878 <Display_init+0xf4>)
 8002798:	f014 f840 	bl	801681c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 800279c:	2100      	movs	r1, #0
 800279e:	4836      	ldr	r0, [pc, #216]	; (8002878 <Display_init+0xf4>)
 80027a0:	f014 f84b 	bl	801683a <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 80027a4:	4834      	ldr	r0, [pc, #208]	; (8002878 <Display_init+0xf4>)
 80027a6:	f012 fb98 	bl	8014eda <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80027aa:	4934      	ldr	r1, [pc, #208]	; (800287c <Display_init+0xf8>)
 80027ac:	4832      	ldr	r0, [pc, #200]	; (8002878 <Display_init+0xf4>)
 80027ae:	f013 f969 	bl	8015a84 <u8g2_SetFont>

	//Подсветка
	temp_light=display_brightness;
 80027b2:	4b33      	ldr	r3, [pc, #204]	; (8002880 <Display_init+0xfc>)
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <Display_init+0x100>)
 80027b8:	701a      	strb	r2, [r3, #0]
	TIM2->CCR1=display_brightness;
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <Display_init+0xfc>)
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027c2:	635a      	str	r2, [r3, #52]	; 0x34

	// Контрастность
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ca:	482f      	ldr	r0, [pc, #188]	; (8002888 <Display_init+0x104>)
 80027cc:	f007 fc88 	bl	800a0e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2101      	movs	r1, #1
 80027d4:	482d      	ldr	r0, [pc, #180]	; (800288c <Display_init+0x108>)
 80027d6:	f007 fc83 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+1;
 80027da:	23e9      	movs	r3, #233	; 0xe9
 80027dc:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80027de:	463a      	mov	r2, r7
 80027e0:	1d39      	adds	r1, r7, #4
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2301      	movs	r3, #1
 80027ea:	4829      	ldr	r0, [pc, #164]	; (8002890 <Display_init+0x10c>)
 80027ec:	f00b fda3 	bl	800e336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	2101      	movs	r1, #1
 80027f4:	4825      	ldr	r0, [pc, #148]	; (800288c <Display_init+0x108>)
 80027f6:	f007 fc73 	bl	800a0e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2101      	movs	r1, #1
 80027fe:	4823      	ldr	r0, [pc, #140]	; (800288c <Display_init+0x108>)
 8002800:	f007 fc6e 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8002804:	2381      	movs	r3, #129	; 0x81
 8002806:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002808:	463a      	mov	r2, r7
 800280a:	1d39      	adds	r1, r7, #4
 800280c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	481e      	ldr	r0, [pc, #120]	; (8002890 <Display_init+0x10c>)
 8002816:	f00b fd8e 	bl	800e336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002820:	4819      	ldr	r0, [pc, #100]	; (8002888 <Display_init+0x104>)
 8002822:	f007 fc5d 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <Display_init+0x110>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	337d      	adds	r3, #125	; 0x7d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002830:	463a      	mov	r2, r7
 8002832:	1d39      	adds	r1, r7, #4
 8002834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	4814      	ldr	r0, [pc, #80]	; (8002890 <Display_init+0x10c>)
 800283e:	f00b fd7a 	bl	800e336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002842:	2201      	movs	r2, #1
 8002844:	2101      	movs	r1, #1
 8002846:	4811      	ldr	r0, [pc, #68]	; (800288c <Display_init+0x108>)
 8002848:	f007 fc4a 	bl	800a0e0 <HAL_GPIO_WritePin>

	DrawImage(img1, 16, 61, 1);
 800284c:	2301      	movs	r3, #1
 800284e:	223d      	movs	r2, #61	; 0x3d
 8002850:	2110      	movs	r1, #16
 8002852:	4811      	ldr	r0, [pc, #68]	; (8002898 <Display_init+0x114>)
 8002854:	f7ff ff20 	bl	8002698 <DrawImage>
	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <Display_init+0xf4>)
 800285a:	f012 fad6 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <Display_init+0xf4>)
 8002860:	f012 fa60 	bl	8014d24 <u8g2_ClearBuffer>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	080077b9 	.word	0x080077b9
 8002870:	080078d9 	.word	0x080078d9
 8002874:	0802b018 	.word	0x0802b018
 8002878:	20002098 	.word	0x20002098
 800287c:	080271b0 	.word	0x080271b0
 8002880:	20000090 	.word	0x20000090
 8002884:	20001d14 	.word	0x20001d14
 8002888:	48000400 	.word	0x48000400
 800288c:	48001000 	.word	0x48001000
 8002890:	20002034 	.word	0x20002034
 8002894:	20000091 	.word	0x20000091
 8002898:	08022708 	.word	0x08022708
 800289c:	00000000 	.word	0x00000000

080028a0 <Gauge_loading>:



void Gauge_loading(uint8_t*text, uint8_t percent)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
	DrawImage(img1, 16, 61, 1);
 80028ac:	2301      	movs	r3, #1
 80028ae:	223d      	movs	r2, #61	; 0x3d
 80028b0:	2110      	movs	r1, #16
 80028b2:	481d      	ldr	r0, [pc, #116]	; (8002928 <Gauge_loading+0x88>)
 80028b4:	f7ff fef0 	bl	8002698 <DrawImage>

	u8g2_DrawFrame(&u8g2, 40, 120, 160, 12);
 80028b8:	230c      	movs	r3, #12
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	23a0      	movs	r3, #160	; 0xa0
 80028be:	2278      	movs	r2, #120	; 0x78
 80028c0:	2128      	movs	r1, #40	; 0x28
 80028c2:	481a      	ldr	r0, [pc, #104]	; (800292c <Gauge_loading+0x8c>)
 80028c4:	f012 f9d1 	bl	8014c6a <u8g2_DrawFrame>
	u8g2_DrawBox(&u8g2, 40,120, percent*1.6, 12);
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe3a 	bl	8000544 <__aeabi_i2d>
 80028d0:	a313      	add	r3, pc, #76	; (adr r3, 8002920 <Gauge_loading+0x80>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fe9f 	bl	8000618 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f971 	bl	8000bc8 <__aeabi_d2uiz>
 80028e6:	4603      	mov	r3, r0
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	220c      	movs	r2, #12
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	2278      	movs	r2, #120	; 0x78
 80028f0:	2128      	movs	r1, #40	; 0x28
 80028f2:	480e      	ldr	r0, [pc, #56]	; (800292c <Gauge_loading+0x8c>)
 80028f4:	f012 f983 	bl	8014bfe <u8g2_DrawBox>

	//sprintf(RAM,"%d", percent);
	//u8g2_DrawUTF8(&u8g2, 50, 120, RAM);
	u8g2_SetFont(&u8g2, u8g2_font_8x13_t_cyrillic);
 80028f8:	490d      	ldr	r1, [pc, #52]	; (8002930 <Gauge_loading+0x90>)
 80028fa:	480c      	ldr	r0, [pc, #48]	; (800292c <Gauge_loading+0x8c>)
 80028fc:	f013 f8c2 	bl	8015a84 <u8g2_SetFont>
	u8g2_DrawUTF8(&u8g2, 40, 145, (char *)text);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2291      	movs	r2, #145	; 0x91
 8002904:	2128      	movs	r1, #40	; 0x28
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <Gauge_loading+0x8c>)
 8002908:	f013 f81a 	bl	8015940 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 800290c:	4807      	ldr	r0, [pc, #28]	; (800292c <Gauge_loading+0x8c>)
 800290e:	f012 fa7c 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002912:	4806      	ldr	r0, [pc, #24]	; (800292c <Gauge_loading+0x8c>)
 8002914:	f012 fa06 	bl	8014d24 <u8g2_ClearBuffer>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	9999999a 	.word	0x9999999a
 8002924:	3ff99999 	.word	0x3ff99999
 8002928:	08022708 	.word	0x08022708
 800292c:	20002098 	.word	0x20002098
 8002930:	08024754 	.word	0x08024754

08002934 <Off_screen_func>:




void Off_screen_func(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	// static
	if(old_active_string==0xFF)
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <Off_screen_func+0x30>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2bff      	cmp	r3, #255	; 0xff
 800293e:	d10e      	bne.n	800295e <Off_screen_func+0x2a>
	{
		DrawImage(img2, 0, 0, 0);
 8002940:	2300      	movs	r3, #0
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <Off_screen_func+0x34>)
 8002948:	f7ff fea6 	bl	8002698 <DrawImage>
		// Рисуем
		u8g2_SendBuffer(&u8g2);
 800294c:	4807      	ldr	r0, [pc, #28]	; (800296c <Off_screen_func+0x38>)
 800294e:	f012 fa5c 	bl	8014e0a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8002952:	4806      	ldr	r0, [pc, #24]	; (800296c <Off_screen_func+0x38>)
 8002954:	f012 f9e6 	bl	8014d24 <u8g2_ClearBuffer>
		old_active_string=0;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <Off_screen_func+0x30>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
	}
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000460 	.word	0x20000460
 8002968:	08022ae8 	.word	0x08022ae8
 800296c:	20002098 	.word	0x20002098

08002970 <Blink_Edit_Parameter_timer>:

uint16_t blink_timer=0;
uint8_t blink_trig=0;
void Blink_Edit_Parameter_timer(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
	if(++blink_timer==200)blink_trig=1;
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <Blink_Edit_Parameter_timer+0x40>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <Blink_Edit_Parameter_timer+0x40>)
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <Blink_Edit_Parameter_timer+0x40>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	2bc8      	cmp	r3, #200	; 0xc8
 8002986:	d102      	bne.n	800298e <Blink_Edit_Parameter_timer+0x1e>
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <Blink_Edit_Parameter_timer+0x44>)
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
	if(blink_timer>=500){blink_timer=blink_trig=0;}
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <Blink_Edit_Parameter_timer+0x40>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002996:	d305      	bcc.n	80029a4 <Blink_Edit_Parameter_timer+0x34>
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <Blink_Edit_Parameter_timer+0x44>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <Blink_Edit_Parameter_timer+0x40>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	801a      	strh	r2, [r3, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	2000091e 	.word	0x2000091e
 80029b4:	20000920 	.word	0x20000920

080029b8 <Blink_Edit_Parameter>:


void Blink_Edit_Parameter(uint8_t x, uint8_t y, const char* text, uint8_t param_num, uint8_t curr_param)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	603a      	str	r2, [r7, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	460b      	mov	r3, r1
 80029c8:	71bb      	strb	r3, [r7, #6]
 80029ca:	4613      	mov	r3, r2
 80029cc:	717b      	strb	r3, [r7, #5]
	if(param_num==curr_param)
 80029ce:	797a      	ldrb	r2, [r7, #5]
 80029d0:	7c3b      	ldrb	r3, [r7, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10c      	bne.n	80029f0 <Blink_Edit_Parameter+0x38>
	{if(blink_trig==1)u8g2_DrawUTF8(&u8g2, x, y, text);}
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <Blink_Edit_Parameter+0x50>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d110      	bne.n	8002a00 <Blink_Edit_Parameter+0x48>
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	b299      	uxth	r1, r3
 80029e2:	79bb      	ldrb	r3, [r7, #6]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <Blink_Edit_Parameter+0x54>)
 80029ea:	f012 ffa9 	bl	8015940 <u8g2_DrawUTF8>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
}
 80029ee:	e007      	b.n	8002a00 <Blink_Edit_Parameter+0x48>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	b299      	uxth	r1, r3
 80029f4:	79bb      	ldrb	r3, [r7, #6]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4804      	ldr	r0, [pc, #16]	; (8002a0c <Blink_Edit_Parameter+0x54>)
 80029fc:	f012 ffa0 	bl	8015940 <u8g2_DrawUTF8>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000920 	.word	0x20000920
 8002a0c:	20002098 	.word	0x20002098

08002a10 <Test_screen_func>:


void Test_screen_func(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	71fb      	strb	r3, [r7, #7]
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002a1a:	4927      	ldr	r1, [pc, #156]	; (8002ab8 <Test_screen_func+0xa8>)
 8002a1c:	4827      	ldr	r0, [pc, #156]	; (8002abc <Test_screen_func+0xac>)
 8002a1e:	f013 f831 	bl	8015a84 <u8g2_SetFont>

	// Индикация напряжения
	for(i=0;i<6;i++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	e01a      	b.n	8002a5e <Test_screen_func+0x4e>
	{
		sprintf((char *)RAM,"%+fmV", ADC_volt[i]);
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <Test_screen_func+0xb0>)
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	4923      	ldr	r1, [pc, #140]	; (8002ac4 <Test_screen_func+0xb4>)
 8002a36:	4824      	ldr	r0, [pc, #144]	; (8002ac8 <Test_screen_func+0xb8>)
 8002a38:	f01b fa3a 	bl	801deb0 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 30+i*18, (char *)RAM);
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	00d2      	lsls	r2, r2, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	331e      	adds	r3, #30
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <Test_screen_func+0xb8>)
 8002a50:	2178      	movs	r1, #120	; 0x78
 8002a52:	481a      	ldr	r0, [pc, #104]	; (8002abc <Test_screen_func+0xac>)
 8002a54:	f012 ff74 	bl	8015940 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d9e1      	bls.n	8002a28 <Test_screen_func+0x18>
	}

	// Индикация АЦП
	for(i=0;i<6;i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	e019      	b.n	8002a9e <Test_screen_func+0x8e>
	{
		//sprintf(RAM,"%d %+d", i, ADC_channel_0[i]);
		sprintf((char *)RAM,"%d %+d", i, ADC_middle[i]);
 8002a6a:	79fa      	ldrb	r2, [r7, #7]
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4917      	ldr	r1, [pc, #92]	; (8002acc <Test_screen_func+0xbc>)
 8002a70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <Test_screen_func+0xc0>)
 8002a76:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <Test_screen_func+0xb8>)
 8002a78:	f01b fa1a 	bl	801deb0 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 30+i*18, (char *)RAM);
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	00d2      	lsls	r2, r2, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	331e      	adds	r3, #30
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <Test_screen_func+0xb8>)
 8002a90:	2105      	movs	r1, #5
 8002a92:	480a      	ldr	r0, [pc, #40]	; (8002abc <Test_screen_func+0xac>)
 8002a94:	f012 ff54 	bl	8015940 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	71fb      	strb	r3, [r7, #7]
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d9e2      	bls.n	8002a6a <Test_screen_func+0x5a>
//
//	sprintf((char *)RAM,"%f", Kdiv);
//	u8g2_DrawUTF8(&u8g2, 120, 155, (char *)RAM);

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <Test_screen_func+0xac>)
 8002aa6:	f012 f9b0 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002aaa:	4804      	ldr	r0, [pc, #16]	; (8002abc <Test_screen_func+0xac>)
 8002aac:	f012 f93a 	bl	8014d24 <u8g2_ClearBuffer>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	080271b0 	.word	0x080271b0
 8002abc:	20002098 	.word	0x20002098
 8002ac0:	200023c8 	.word	0x200023c8
 8002ac4:	08021c70 	.word	0x08021c70
 8002ac8:	20002158 	.word	0x20002158
 8002acc:	200021c0 	.word	0x200021c0
 8002ad0:	08021c78 	.word	0x08021c78

08002ad4 <Display_process>:




void Display_process(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	switch(screen)
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <Display_process+0x98>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	2b0b      	cmp	r3, #11
 8002ae0:	d83e      	bhi.n	8002b60 <Display_process+0x8c>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <Display_process+0x14>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b1f 	.word	0x08002b1f
 8002af0:	08002b25 	.word	0x08002b25
 8002af4:	08002b2b 	.word	0x08002b2b
 8002af8:	08002b31 	.word	0x08002b31
 8002afc:	08002b37 	.word	0x08002b37
 8002b00:	08002b3d 	.word	0x08002b3d
 8002b04:	08002b43 	.word	0x08002b43
 8002b08:	08002b49 	.word	0x08002b49
 8002b0c:	08002b4f 	.word	0x08002b4f
 8002b10:	08002b55 	.word	0x08002b55
 8002b14:	08002b5b 	.word	0x08002b5b
	{
		case Main_screen: Main_screen_func(); break;
 8002b18:	f014 feb8 	bl	801788c <Main_screen_func>
 8002b1c:	e020      	b.n	8002b60 <Display_process+0x8c>
		case Test_screen: Test_screen_func(); break;
 8002b1e:	f7ff ff77 	bl	8002a10 <Test_screen_func>
 8002b22:	e01d      	b.n	8002b60 <Display_process+0x8c>
		case Off_screen: Off_screen_func(); break;
 8002b24:	f7ff ff06 	bl	8002934 <Off_screen_func>
 8002b28:	e01a      	b.n	8002b60 <Display_process+0x8c>
		case Option_screen: Option_screen_func(); break;
 8002b2a:	f015 ffe5 	bl	8018af8 <Option_screen_func>
 8002b2e:	e017      	b.n	8002b60 <Display_process+0x8c>
		case Display_options_screen: Display_options_screen_func(); break;
 8002b30:	f014 fa5c 	bl	8016fec <Display_options_screen_func>
 8002b34:	e014      	b.n	8002b60 <Display_process+0x8c>
		case ADC_options_screen: ADC_options_screen_func(); break;
 8002b36:	f013 ff0f 	bl	8016958 <ADC_options_screen_func>
 8002b3a:	e011      	b.n	8002b60 <Display_process+0x8c>
		case Measure_options_screen: Measure_options_screen_func(); break;
 8002b3c:	f014 fc82 	bl	8017444 <Measure_options_screen_func>
 8002b40:	e00e      	b.n	8002b60 <Display_process+0x8c>
		case Parameter_screen: Parameter_screen_func(); break;
 8002b42:	f015 ff35 	bl	80189b0 <Parameter_screen_func>
 8002b46:	e00b      	b.n	8002b60 <Display_process+0x8c>
		case RTC_screen: RTC_screen_func(); break;
 8002b48:	f015 f9f6 	bl	8017f38 <RTC_screen_func>
 8002b4c:	e008      	b.n	8002b60 <Display_process+0x8c>
		case Auto_Off_option_screen: Auto_Off_option_screen_func(); break;
 8002b4e:	f014 f99b 	bl	8016e88 <Auto_Off_option_screen_func>
 8002b52:	e005      	b.n	8002b60 <Display_process+0x8c>
		case About_options_screen: About_options_screen_func(); break;
 8002b54:	f015 fc08 	bl	8018368 <About_options_screen_func>
 8002b58:	e002      	b.n	8002b60 <Display_process+0x8c>
		case Logging_options_screen: Logging_options_screen_func(); break;
 8002b5a:	f015 fc93 	bl	8018484 <Logging_options_screen_func>
 8002b5e:	bf00      	nop
	}
	sleep(10);
 8002b60:	200a      	movs	r0, #10
 8002b62:	f000 f88d 	bl	8002c80 <sleep>
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000004c 	.word	0x2000004c

08002b70 <wait_scheduler>:
unsigned int delay_count=0;
unsigned char RAM[100];
unsigned int j=0;

void wait_scheduler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	if(tasks_timer[task_ready_cnt]==0)task=task_ready_cnt+1;
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <wait_scheduler+0x44>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <wait_scheduler+0x48>)
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <wait_scheduler+0x20>
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <wait_scheduler+0x44>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <wait_scheduler+0x4c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
	if(++task_ready_cnt==num_of_tasks)task_ready_cnt=0;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <wait_scheduler+0x44>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <wait_scheduler+0x44>)
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <wait_scheduler+0x44>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b0b      	cmp	r3, #11
 8002ba2:	d102      	bne.n	8002baa <wait_scheduler+0x3a>
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <wait_scheduler+0x44>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	20000922 	.word	0x20000922
 8002bb8:	2000212c 	.word	0x2000212c
 8002bbc:	20000921 	.word	0x20000921

08002bc0 <ELSPIRE_OS_KERNEL>:

void ELSPIRE_OS_KERNEL(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	new_task[0]=wait_scheduler;
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <ELSPIRE_OS_KERNEL+0x40>)
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <ELSPIRE_OS_KERNEL+0x44>)
 8002bc8:	601a      	str	r2, [r3, #0]
	while (1) for(j=0;j<=num_of_tasks;j++)if(task==j)new_task[j]();
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <ELSPIRE_OS_KERNEL+0x48>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e011      	b.n	8002bf6 <ELSPIRE_OS_KERNEL+0x36>
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <ELSPIRE_OS_KERNEL+0x4c>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <ELSPIRE_OS_KERNEL+0x48>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d105      	bne.n	8002bec <ELSPIRE_OS_KERNEL+0x2c>
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <ELSPIRE_OS_KERNEL+0x48>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <ELSPIRE_OS_KERNEL+0x40>)
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	4798      	blx	r3
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <ELSPIRE_OS_KERNEL+0x48>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <ELSPIRE_OS_KERNEL+0x48>)
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <ELSPIRE_OS_KERNEL+0x48>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b0b      	cmp	r3, #11
 8002bfc:	d9e9      	bls.n	8002bd2 <ELSPIRE_OS_KERNEL+0x12>
 8002bfe:	e7e4      	b.n	8002bca <ELSPIRE_OS_KERNEL+0xa>
 8002c00:	20002004 	.word	0x20002004
 8002c04:	08002b71 	.word	0x08002b71
 8002c08:	20000928 	.word	0x20000928
 8002c0c:	20000921 	.word	0x20000921

08002c10 <ELSPIRE_OS_TIMER>:
	for(i=1;i<=num_of_tasks;i++)
	tasks_timer[i]=0xFFFF;
}

void ELSPIRE_OS_TIMER(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<num_of_tasks;i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	71fb      	strb	r3, [r7, #7]
 8002c1e:	e018      	b.n	8002c52 <ELSPIRE_OS_TIMER+0x42>
	{
		if(tasks_timer[i]>0)
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <ELSPIRE_OS_TIMER+0x68>)
 8002c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <ELSPIRE_OS_TIMER+0x3c>
		{
			if(tasks_timer[i]!=0xFFFF) tasks_timer[i]--;
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <ELSPIRE_OS_TIMER+0x68>)
 8002c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <ELSPIRE_OS_TIMER+0x3c>
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <ELSPIRE_OS_TIMER+0x68>)
 8002c40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c44:	3a01      	subs	r2, #1
 8002c46:	490c      	ldr	r1, [pc, #48]	; (8002c78 <ELSPIRE_OS_TIMER+0x68>)
 8002c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<num_of_tasks;i++)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	2b0a      	cmp	r3, #10
 8002c56:	d9e3      	bls.n	8002c20 <ELSPIRE_OS_TIMER+0x10>
		}
	}
	// Задержка
	if (delay_count > 0)
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <ELSPIRE_OS_TIMER+0x6c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <ELSPIRE_OS_TIMER+0x5a>
	{ delay_count--; }
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <ELSPIRE_OS_TIMER+0x6c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <ELSPIRE_OS_TIMER+0x6c>)
 8002c68:	6013      	str	r3, [r2, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	2000212c 	.word	0x2000212c
 8002c7c:	20000924 	.word	0x20000924

08002c80 <sleep>:

void sleep(unsigned int ms)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	tasks_timer[task-1] = ms;
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <sleep+0x28>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	4907      	ldr	r1, [pc, #28]	; (8002cac <sleep+0x2c>)
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task = wait;
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <sleep+0x28>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	20000921 	.word	0x20000921
 8002cac:	2000212c 	.word	0x2000212c

08002cb0 <Task_STOP>:

void Task_STOP(unsigned char task_num)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=0xFFFF;
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <Task_STOP+0x2c>)
 8002cc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	task=wait;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <Task_STOP+0x30>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000212c 	.word	0x2000212c
 8002ce0:	20000921 	.word	0x20000921

08002ce4 <Task_RUN>:

void Task_RUN(unsigned char task_num, unsigned int del)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=del;
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	4906      	ldr	r1, [pc, #24]	; (8002d10 <Task_RUN+0x2c>)
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task=wait;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <Task_RUN+0x30>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	2000212c 	.word	0x2000212c
 8002d14:	20000921 	.word	0x20000921

08002d18 <delay_ms>:

void delay_ms(unsigned int ms)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	delay_count = ms;
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <delay_ms+0x28>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
	while (delay_count){}
 8002d26:	bf00      	nop
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <delay_ms+0x28>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1fb      	bne.n	8002d28 <delay_ms+0x10>
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000924 	.word	0x20000924

08002d44 <delay_us>:

void delay_us(unsigned long int us)
{ while (us--); }
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	bf00      	nop
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1fa      	bne.n	8002d4e <delay_us+0xa>
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <MAX77960_Read_Reg>:

extern I2C_HandleTypeDef hi2c2;


uint8_t MAX77960_Read_Reg(uint8_t REG)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[1], rx_buf[1];
	tx_buf[0]=REG;
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	733b      	strb	r3, [r7, #12]
	rx_buf[0]=0xFF;
 8002d76:	23ff      	movs	r3, #255	; 0xff
 8002d78:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, 0xDE, tx_buf, 1, 10000);
 8002d7a:	f107 020c 	add.w	r2, r7, #12
 8002d7e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2301      	movs	r3, #1
 8002d86:	21de      	movs	r1, #222	; 0xde
 8002d88:	4808      	ldr	r0, [pc, #32]	; (8002dac <MAX77960_Read_Reg+0x44>)
 8002d8a:	f007 fa73 	bl	800a274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0xDE, (uint8_t *)rx_buf, 1, 10000);
 8002d8e:	f107 0208 	add.w	r2, r7, #8
 8002d92:	f242 7310 	movw	r3, #10000	; 0x2710
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	21de      	movs	r1, #222	; 0xde
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <MAX77960_Read_Reg+0x44>)
 8002d9e:	f007 fb5d 	bl	800a45c <HAL_I2C_Master_Receive>
	return rx_buf[0];
 8002da2:	7a3b      	ldrb	r3, [r7, #8]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	200079d8 	.word	0x200079d8

08002db0 <clear_buf>:
uint16_t ANSWER=0xFFFF;
uint8_t BSFlag=0;


void clear_buf(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i=0;i<APP_RX_DATA_SIZE;i++)rx_buf[i]=' ';
 8002db6:	2300      	movs	r3, #0
 8002db8:	80fb      	strh	r3, [r7, #6]
 8002dba:	e006      	b.n	8002dca <clear_buf+0x1a>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <clear_buf+0x3c>)
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	54d1      	strb	r1, [r2, r3]
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	80fb      	strh	r3, [r7, #6]
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd0:	d3f4      	bcc.n	8002dbc <clear_buf+0xc>
	rxcntr=0;
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <clear_buf+0x40>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	801a      	strh	r2, [r3, #0]
	ANSWER=0xFFFF;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <clear_buf+0x44>)
 8002dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dde:	801a      	strh	r2, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	20005c64 	.word	0x20005c64
 8002df0:	20000982 	.word	0x20000982
 8002df4:	20000236 	.word	0x20000236

08002df8 <scan_num32>:

int64_t scan_num32(uint8_t offset)
{
 8002df8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002dfc:	b089      	sub	sp, #36	; 0x24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
	int64_t res=0;
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t i=0,sign=0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	75fb      	strb	r3, [r7, #23]
 8002e14:	2300      	movs	r3, #0
 8002e16:	75bb      	strb	r3, [r7, #22]
	if(rx_buf[offset]=='-')sign=1;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	4a34      	ldr	r2, [pc, #208]	; (8002eec <scan_num32+0xf4>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	2b2d      	cmp	r3, #45	; 0x2d
 8002e20:	d101      	bne.n	8002e26 <scan_num32+0x2e>
 8002e22:	2301      	movs	r3, #1
 8002e24:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<15;i++){
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]
 8002e2a:	e049      	b.n	8002ec0 <scan_num32+0xc8>
	if((rx_buf[offset+i+sign]>=48)&&(rx_buf[offset+i+sign]<=58))res=(rx_buf[offset+i+sign]-48)+res*10;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	441a      	add	r2, r3
 8002e32:	7dbb      	ldrb	r3, [r7, #22]
 8002e34:	4413      	add	r3, r2
 8002e36:	4a2d      	ldr	r2, [pc, #180]	; (8002eec <scan_num32+0xf4>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	2b2f      	cmp	r3, #47	; 0x2f
 8002e3c:	d934      	bls.n	8002ea8 <scan_num32+0xb0>
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	441a      	add	r2, r3
 8002e44:	7dbb      	ldrb	r3, [r7, #22]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a28      	ldr	r2, [pc, #160]	; (8002eec <scan_num32+0xf4>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	2b3a      	cmp	r3, #58	; 0x3a
 8002e4e:	d82b      	bhi.n	8002ea8 <scan_num32+0xb0>
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	441a      	add	r2, r3
 8002e56:	7dbb      	ldrb	r3, [r7, #22]
 8002e58:	4413      	add	r3, r2
 8002e5a:	4a24      	ldr	r2, [pc, #144]	; (8002eec <scan_num32+0xf4>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
 8002e5e:	3b30      	subs	r3, #48	; 0x30
 8002e60:	4698      	mov	r8, r3
 8002e62:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002e66:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	f04f 0000 	mov.w	r0, #0
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	0099      	lsls	r1, r3, #2
 8002e78:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002e7c:	0090      	lsls	r0, r2, #2
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	1912      	adds	r2, r2, r4
 8002e84:	eb45 0303 	adc.w	r3, r5, r3
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	6039      	str	r1, [r7, #0]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e94:	eb18 0a02 	adds.w	sl, r8, r2
 8002e98:	eb49 0b03 	adc.w	fp, r9, r3
 8002e9c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(i=0;i<15;i++){
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
 8002ea6:	e00b      	b.n	8002ec0 <scan_num32+0xc8>
	else {if(sign==1)return -res; else return res;}}
 8002ea8:	7dbb      	ldrb	r3, [r7, #22]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <scan_num32+0xc2>
 8002eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb2:	4252      	negs	r2, r2
 8002eb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002eb8:	e010      	b.n	8002edc <scan_num32+0xe4>
 8002eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ebe:	e00d      	b.n	8002edc <scan_num32+0xe4>
	for(i=0;i<15;i++){
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b0e      	cmp	r3, #14
 8002ec4:	d9b2      	bls.n	8002e2c <scan_num32+0x34>
	if(sign==1)return -res;
 8002ec6:	7dbb      	ldrb	r3, [r7, #22]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <scan_num32+0xe0>
 8002ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed0:	4252      	negs	r2, r2
 8002ed2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002ed6:	e001      	b.n	8002edc <scan_num32+0xe4>
	else return res;
 8002ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20005c64 	.word	0x20005c64

08002ef0 <scan_float>:

float scan_float(uint8_t offset)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
//	if(devider==0)devider=1;
//	RES = (float)res32/devider;
//	if(sign==1) return (float)-RES;
//	else return RES;

	return scan_double(offset, (uint8_t*)rx_buf);
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4909      	ldr	r1, [pc, #36]	; (8002f24 <scan_float+0x34>)
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 f9d9 	bl	80052b8 <scan_double>
 8002f06:	ec53 2b10 	vmov	r2, r3, d0
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fe7b 	bl	8000c08 <__aeabi_d2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	ee07 3a90 	vmov	s15, r3
}
 8002f18:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20005c64 	.word	0x20005c64

08002f28 <scan_num16>:

uint16_t scan_num16(uint8_t offset)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0,i=0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	2300      	movs	r3, #0
 8002f38:	73bb      	strb	r3, [r7, #14]
	if((rx_buf[offset]=='A')&&(rx_buf[offset+1]=='L')&&(rx_buf[offset+2]=='L'))return 0xFFFF;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <scan_num16+0xa0>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	2b41      	cmp	r3, #65	; 0x41
 8002f42:	d10e      	bne.n	8002f62 <scan_num16+0x3a>
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <scan_num16+0xa0>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	2b4c      	cmp	r3, #76	; 0x4c
 8002f4e:	d108      	bne.n	8002f62 <scan_num16+0x3a>
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	3302      	adds	r3, #2
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <scan_num16+0xa0>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	2b4c      	cmp	r3, #76	; 0x4c
 8002f5a:	d102      	bne.n	8002f62 <scan_num16+0x3a>
 8002f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f60:	e02b      	b.n	8002fba <scan_num16+0x92>
	for(i=0;i<10;i++){
 8002f62:	2300      	movs	r3, #0
 8002f64:	73bb      	strb	r3, [r7, #14]
 8002f66:	e023      	b.n	8002fb0 <scan_num16+0x88>
	if((rx_buf[offset+i]>=48)&&(rx_buf[offset+i]<=58))res=(rx_buf[offset+i]-48)+res*10;
 8002f68:	79fa      	ldrb	r2, [r7, #7]
 8002f6a:	7bbb      	ldrb	r3, [r7, #14]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <scan_num16+0xa0>)
 8002f70:	5cd3      	ldrb	r3, [r2, r3]
 8002f72:	2b2f      	cmp	r3, #47	; 0x2f
 8002f74:	d919      	bls.n	8002faa <scan_num16+0x82>
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <scan_num16+0xa0>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	2b3a      	cmp	r3, #58	; 0x3a
 8002f82:	d812      	bhi.n	8002faa <scan_num16+0x82>
 8002f84:	79fa      	ldrb	r2, [r7, #7]
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	4413      	add	r3, r2
 8002f8a:	4a0f      	ldr	r2, [pc, #60]	; (8002fc8 <scan_num16+0xa0>)
 8002f8c:	5cd2      	ldrb	r2, [r2, r3]
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	4619      	mov	r1, r3
 8002f92:	0089      	lsls	r1, r1, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3b30      	subs	r3, #48	; 0x30
 8002fa0:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<10;i++){
 8002fa2:	7bbb      	ldrb	r3, [r7, #14]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	73bb      	strb	r3, [r7, #14]
 8002fa8:	e002      	b.n	8002fb0 <scan_num16+0x88>
	else return res;}
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	e004      	b.n	8002fba <scan_num16+0x92>
	for(i=0;i<10;i++){
 8002fb0:	7bbb      	ldrb	r3, [r7, #14]
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d9d8      	bls.n	8002f68 <scan_num16+0x40>
	return res;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	b29b      	uxth	r3, r3
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20005c64 	.word	0x20005c64

08002fcc <OneCommParseCycle>:

void OneCommParseCycle(uint8_t com, const char* compare, uint8_t offset, uint8_t len)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6039      	str	r1, [r7, #0]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	71bb      	strb	r3, [r7, #6]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	if(ANSWER==0xFFFF){
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <OneCommParseCycle+0x8c>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d12c      	bne.n	800304a <OneCommParseCycle+0x7e>
	for(i=0;i<len;i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	e025      	b.n	8003042 <OneCommParseCycle+0x76>
	{
		if((rx_buf[i+offset]==compare[i])||(rx_buf[i+offset]==compare[i]+32)) ANSWER = com;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	79bb      	ldrb	r3, [r7, #6]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <OneCommParseCycle+0x90>)
 8002ffe:	5cd2      	ldrb	r2, [r2, r3]
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	440b      	add	r3, r1
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d00c      	beq.n	8003026 <OneCommParseCycle+0x5a>
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	4413      	add	r3, r2
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <OneCommParseCycle+0x90>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	4619      	mov	r1, r3
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	3320      	adds	r3, #32
 8003022:	4299      	cmp	r1, r3
 8003024:	d107      	bne.n	8003036 <OneCommParseCycle+0x6a>
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	b29a      	uxth	r2, r3
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <OneCommParseCycle+0x8c>)
 800302c:	801a      	strh	r2, [r3, #0]
	for(i=0;i<len;i++)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3301      	adds	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	e005      	b.n	8003042 <OneCommParseCycle+0x76>
		else {ANSWER=0xFFFF; break;}
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <OneCommParseCycle+0x8c>)
 8003038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	bf00      	nop
	}}
}
 8003040:	e003      	b.n	800304a <OneCommParseCycle+0x7e>
	for(i=0;i<len;i++)
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	797b      	ldrb	r3, [r7, #5]
 8003046:	429a      	cmp	r2, r3
 8003048:	d3d5      	bcc.n	8002ff6 <OneCommParseCycle+0x2a>
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000236 	.word	0x20000236
 800305c:	20005c64 	.word	0x20005c64

08003060 <parser>:

uint16_t parser(uint8_t offset)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	ANSWER=0xFFFF;
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <parser+0x8c>)
 800306c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003070:	801a      	strh	r2, [r3, #0]
	// Commands
	for(i=2;i<NUMBER_OF_COMMANDS;i++) OneCommParseCycle(i, COMMAND_STRING[i], offset, COMMAND_NUM_OF_SYM[i]);
 8003072:	2302      	movs	r3, #2
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e00d      	b.n	8003094 <parser+0x34>
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <parser+0x90>)
 800307c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <parser+0x94>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	79fa      	ldrb	r2, [r7, #7]
 8003088:	7bf8      	ldrb	r0, [r7, #15]
 800308a:	f7ff ff9f 	bl	8002fcc <OneCommParseCycle>
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	3301      	adds	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b25      	cmp	r3, #37	; 0x25
 8003098:	d9ee      	bls.n	8003078 <parser+0x18>
	// Variables
	for(i=0;i<NUMBER_OF_VARIABLES;i++) OneCommParseCycle(i, GV_STRING[i], offset, GV_NUM_OF_SYM[i]);
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	e00d      	b.n	80030bc <parser+0x5c>
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <parser+0x98>)
 80030a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <parser+0x9c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	7bf8      	ldrb	r0, [r7, #15]
 80030b2:	f7ff ff8b 	bl	8002fcc <OneCommParseCycle>
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b11      	cmp	r3, #17
 80030c0:	d9ee      	bls.n	80030a0 <parser+0x40>
	// UNKNOWING_CMD
	if((rx_buf[offset]!=0)&&(ANSWER==0xFFFF))ANSWER=0xFFFE;
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <parser+0xa0>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <parser+0x80>
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <parser+0x8c>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <parser+0x80>
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <parser+0x8c>)
 80030da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030de:	801a      	strh	r2, [r3, #0]
	return ANSWER;
 80030e0:	4b02      	ldr	r3, [pc, #8]	; (80030ec <parser+0x8c>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000236 	.word	0x20000236
 80030f0:	2000019c 	.word	0x2000019c
 80030f4:	08023df8 	.word	0x08023df8
 80030f8:	200000fc 	.word	0x200000fc
 80030fc:	08023dac 	.word	0x08023dac
 8003100:	20005c64 	.word	0x20005c64

08003104 <Set_uint8>:


void Set_uint8(uint8_t*arr, uint8_t offset)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff08 	bl	8002f28 <scan_num16>
 8003118:	4603      	mov	r3, r0
 800311a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800311c:	2300      	movs	r3, #0
 800311e:	82fb      	strh	r3, [r7, #22]
 8003120:	e019      	b.n	8003156 <Set_uint8+0x52>
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	8afb      	ldrh	r3, [r7, #22]
 8003126:	4413      	add	r3, r2
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <Set_uint8+0x98>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	2b20      	cmp	r3, #32
 800312e:	d006      	beq.n	800313e <Set_uint8+0x3a>
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	8afb      	ldrh	r3, [r7, #22]
 8003134:	4413      	add	r3, r2
 8003136:	4a19      	ldr	r2, [pc, #100]	; (800319c <Set_uint8+0x98>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	2b3d      	cmp	r3, #61	; 0x3d
 800313c:	d108      	bne.n	8003150 <Set_uint8+0x4c>
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	b29a      	uxth	r2, r3
 8003142:	8afb      	ldrh	r3, [r7, #22]
 8003144:	4413      	add	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	3301      	adds	r3, #1
 800314a:	82bb      	strh	r3, [r7, #20]
 800314c:	2364      	movs	r3, #100	; 0x64
 800314e:	82fb      	strh	r3, [r7, #22]
 8003150:	8afb      	ldrh	r3, [r7, #22]
 8003152:	3301      	adds	r3, #1
 8003154:	82fb      	strh	r3, [r7, #22]
 8003156:	8afb      	ldrh	r3, [r7, #22]
 8003158:	2b63      	cmp	r3, #99	; 0x63
 800315a:	d9e2      	bls.n	8003122 <Set_uint8+0x1e>
	data=scan_num32(equal);
 800315c:	8abb      	ldrh	r3, [r7, #20]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fe49 	bl	8002df8 <scan_num32>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4613      	mov	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
	if(data>255)CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2bff      	cmp	r3, #255	; 0xff
 8003172:	d904      	bls.n	800317e <Set_uint8+0x7a>
 8003174:	2117      	movs	r1, #23
 8003176:	480a      	ldr	r0, [pc, #40]	; (80031a0 <Set_uint8+0x9c>)
 8003178:	f016 fa24 	bl	80195c4 <CDC_Transmit_FS>
	else
	{
		arr[index]=data;
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}
 800317c:	e009      	b.n	8003192 <Set_uint8+0x8e>
		arr[index]=data;
 800317e:	8a7b      	ldrh	r3, [r7, #18]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800318a:	2104      	movs	r1, #4
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <Set_uint8+0xa0>)
 800318e:	f016 fa19 	bl	80195c4 <CDC_Transmit_FS>
}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20005c64 	.word	0x20005c64
 80031a0:	08021f60 	.word	0x08021f60
 80031a4:	08021f78 	.word	0x08021f78

080031a8 <Set_int8>:
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}

void Set_int8(int8_t*arr, uint8_t offset)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff feb6 	bl	8002f28 <scan_num16>
 80031bc:	4603      	mov	r3, r0
 80031be:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80031c0:	2300      	movs	r3, #0
 80031c2:	82fb      	strh	r3, [r7, #22]
 80031c4:	e019      	b.n	80031fa <Set_int8+0x52>
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	8afb      	ldrh	r3, [r7, #22]
 80031ca:	4413      	add	r3, r2
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <Set_int8+0xa0>)
 80031ce:	5cd3      	ldrb	r3, [r2, r3]
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d006      	beq.n	80031e2 <Set_int8+0x3a>
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	4413      	add	r3, r2
 80031da:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <Set_int8+0xa0>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	2b3d      	cmp	r3, #61	; 0x3d
 80031e0:	d108      	bne.n	80031f4 <Set_int8+0x4c>
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	8afb      	ldrh	r3, [r7, #22]
 80031e8:	4413      	add	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	82bb      	strh	r3, [r7, #20]
 80031f0:	2364      	movs	r3, #100	; 0x64
 80031f2:	82fb      	strh	r3, [r7, #22]
 80031f4:	8afb      	ldrh	r3, [r7, #22]
 80031f6:	3301      	adds	r3, #1
 80031f8:	82fb      	strh	r3, [r7, #22]
 80031fa:	8afb      	ldrh	r3, [r7, #22]
 80031fc:	2b63      	cmp	r3, #99	; 0x63
 80031fe:	d9e2      	bls.n	80031c6 <Set_int8+0x1e>
	data=scan_num32(equal);
 8003200:	8abb      	ldrh	r3, [r7, #20]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fdf7 	bl	8002df8 <scan_num32>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4613      	mov	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
	if((data>127)||(data<-127))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b7f      	cmp	r3, #127	; 0x7f
 8003216:	d803      	bhi.n	8003220 <Set_int8+0x78>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800321e:	d804      	bhi.n	800322a <Set_int8+0x82>
 8003220:	2117      	movs	r1, #23
 8003222:	480a      	ldr	r0, [pc, #40]	; (800324c <Set_int8+0xa4>)
 8003224:	f016 f9ce 	bl	80195c4 <CDC_Transmit_FS>
 8003228:	e00a      	b.n	8003240 <Set_int8+0x98>
	else
	{
		arr[index]=data;
 800322a:	8a7b      	ldrh	r3, [r7, #18]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	b252      	sxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003236:	2104      	movs	r1, #4
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <Set_int8+0xa8>)
 800323a:	f016 f9c3 	bl	80195c4 <CDC_Transmit_FS>
	}
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20005c64 	.word	0x20005c64
 800324c:	08021f60 	.word	0x08021f60
 8003250:	08021f78 	.word	0x08021f78

08003254 <Set_int16>:

void Set_int16(int16_t*arr, uint8_t offset)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fe60 	bl	8002f28 <scan_num16>
 8003268:	4603      	mov	r3, r0
 800326a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800326c:	2300      	movs	r3, #0
 800326e:	82fb      	strh	r3, [r7, #22]
 8003270:	e019      	b.n	80032a6 <Set_int16+0x52>
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	8afb      	ldrh	r3, [r7, #22]
 8003276:	4413      	add	r3, r2
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <Set_int16+0xa4>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	2b20      	cmp	r3, #32
 800327e:	d006      	beq.n	800328e <Set_int16+0x3a>
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	4413      	add	r3, r2
 8003286:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <Set_int16+0xa4>)
 8003288:	5cd3      	ldrb	r3, [r2, r3]
 800328a:	2b3d      	cmp	r3, #61	; 0x3d
 800328c:	d108      	bne.n	80032a0 <Set_int16+0x4c>
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	b29a      	uxth	r2, r3
 8003292:	8afb      	ldrh	r3, [r7, #22]
 8003294:	4413      	add	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	3301      	adds	r3, #1
 800329a:	82bb      	strh	r3, [r7, #20]
 800329c:	2364      	movs	r3, #100	; 0x64
 800329e:	82fb      	strh	r3, [r7, #22]
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	3301      	adds	r3, #1
 80032a4:	82fb      	strh	r3, [r7, #22]
 80032a6:	8afb      	ldrh	r3, [r7, #22]
 80032a8:	2b63      	cmp	r3, #99	; 0x63
 80032aa:	d9e2      	bls.n	8003272 <Set_int16+0x1e>
	data=scan_num32(equal);
 80032ac:	8abb      	ldrh	r3, [r7, #20]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fda1 	bl	8002df8 <scan_num32>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4613      	mov	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
	if((data>32767)||(data<-32767))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c4:	d203      	bcs.n	80032ce <Set_int16+0x7a>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80032cc:	d804      	bhi.n	80032d8 <Set_int16+0x84>
 80032ce:	2117      	movs	r1, #23
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <Set_int16+0xa8>)
 80032d2:	f016 f977 	bl	80195c4 <CDC_Transmit_FS>
 80032d6:	e00b      	b.n	80032f0 <Set_int16+0x9c>
	else
	{
		arr[index]=data;
 80032d8:	8a7b      	ldrh	r3, [r7, #18]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	b212      	sxth	r2, r2
 80032e4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80032e6:	2104      	movs	r1, #4
 80032e8:	4805      	ldr	r0, [pc, #20]	; (8003300 <Set_int16+0xac>)
 80032ea:	f016 f96b 	bl	80195c4 <CDC_Transmit_FS>
	}
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20005c64 	.word	0x20005c64
 80032fc:	08021f60 	.word	0x08021f60
 8003300:	08021f78 	.word	0x08021f78

08003304 <Set_int32>:

void Set_int32(int32_t*arr, uint8_t offset)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int64_t data;
	index=scan_num16(offset);
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fe08 	bl	8002f28 <scan_num16>
 8003318:	4603      	mov	r3, r0
 800331a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800331c:	2300      	movs	r3, #0
 800331e:	82fb      	strh	r3, [r7, #22]
 8003320:	e019      	b.n	8003356 <Set_int32+0x52>
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	8afb      	ldrh	r3, [r7, #22]
 8003326:	4413      	add	r3, r2
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <Set_int32+0xb8>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	2b20      	cmp	r3, #32
 800332e:	d006      	beq.n	800333e <Set_int32+0x3a>
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	8afb      	ldrh	r3, [r7, #22]
 8003334:	4413      	add	r3, r2
 8003336:	4a21      	ldr	r2, [pc, #132]	; (80033bc <Set_int32+0xb8>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	2b3d      	cmp	r3, #61	; 0x3d
 800333c:	d108      	bne.n	8003350 <Set_int32+0x4c>
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	b29a      	uxth	r2, r3
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	4413      	add	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	82bb      	strh	r3, [r7, #20]
 800334c:	2364      	movs	r3, #100	; 0x64
 800334e:	82fb      	strh	r3, [r7, #22]
 8003350:	8afb      	ldrh	r3, [r7, #22]
 8003352:	3301      	adds	r3, #1
 8003354:	82fb      	strh	r3, [r7, #22]
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	2b63      	cmp	r3, #99	; 0x63
 800335a:	d9e2      	bls.n	8003322 <Set_int32+0x1e>
	data=scan_num32(equal);
 800335c:	8abb      	ldrh	r3, [r7, #20]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fd49 	bl	8002df8 <scan_num32>
 8003366:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if((data>2147483647)||(data<-2147483647))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800336a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800336e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	4290      	cmp	r0, r2
 8003378:	eb71 0303 	sbcs.w	r3, r1, r3
 800337c:	db09      	blt.n	8003392 <Set_int32+0x8e>
 800337e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003382:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003386:	f04f 31ff 	mov.w	r1, #4294967295
 800338a:	4290      	cmp	r0, r2
 800338c:	eb71 0303 	sbcs.w	r3, r1, r3
 8003390:	db04      	blt.n	800339c <Set_int32+0x98>
 8003392:	2117      	movs	r1, #23
 8003394:	480a      	ldr	r0, [pc, #40]	; (80033c0 <Set_int32+0xbc>)
 8003396:	f016 f915 	bl	80195c4 <CDC_Transmit_FS>
 800339a:	e00a      	b.n	80033b2 <Set_int32+0xae>
	else
	{
		arr[index]=(int32_t)data;
 800339c:	8a7b      	ldrh	r3, [r7, #18]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80033a8:	2104      	movs	r1, #4
 80033aa:	4806      	ldr	r0, [pc, #24]	; (80033c4 <Set_int32+0xc0>)
 80033ac:	f016 f90a 	bl	80195c4 <CDC_Transmit_FS>
	}

//	arr[index]=data;
//	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20005c64 	.word	0x20005c64
 80033c0:	08021f60 	.word	0x08021f60
 80033c4:	08021f78 	.word	0x08021f78

080033c8 <Set_uint32>:

void Set_uint32(uint32_t*arr, uint8_t offset)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int32_t data;
	index=scan_num16(offset);
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fda6 	bl	8002f28 <scan_num16>
 80033dc:	4603      	mov	r3, r0
 80033de:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80033e0:	2300      	movs	r3, #0
 80033e2:	82fb      	strh	r3, [r7, #22]
 80033e4:	e019      	b.n	800341a <Set_uint32+0x52>
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	8afb      	ldrh	r3, [r7, #22]
 80033ea:	4413      	add	r3, r2
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <Set_uint32+0x88>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d006      	beq.n	8003402 <Set_uint32+0x3a>
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	4413      	add	r3, r2
 80033fa:	4a15      	ldr	r2, [pc, #84]	; (8003450 <Set_uint32+0x88>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	2b3d      	cmp	r3, #61	; 0x3d
 8003400:	d108      	bne.n	8003414 <Set_uint32+0x4c>
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	b29a      	uxth	r2, r3
 8003406:	8afb      	ldrh	r3, [r7, #22]
 8003408:	4413      	add	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	82bb      	strh	r3, [r7, #20]
 8003410:	2364      	movs	r3, #100	; 0x64
 8003412:	82fb      	strh	r3, [r7, #22]
 8003414:	8afb      	ldrh	r3, [r7, #22]
 8003416:	3301      	adds	r3, #1
 8003418:	82fb      	strh	r3, [r7, #22]
 800341a:	8afb      	ldrh	r3, [r7, #22]
 800341c:	2b63      	cmp	r3, #99	; 0x63
 800341e:	d9e2      	bls.n	80033e6 <Set_uint32+0x1e>
	data=scan_num32(equal);
 8003420:	8abb      	ldrh	r3, [r7, #20]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fce7 	bl	8002df8 <scan_num32>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4613      	mov	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
	arr[index]=data;
 8003432:	8a7b      	ldrh	r3, [r7, #18]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800343e:	2104      	movs	r1, #4
 8003440:	4804      	ldr	r0, [pc, #16]	; (8003454 <Set_uint32+0x8c>)
 8003442:	f016 f8bf 	bl	80195c4 <CDC_Transmit_FS>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20005c64 	.word	0x20005c64
 8003454:	08021f78 	.word	0x08021f78

08003458 <Set_float>:

void Set_float(float*arr, uint8_t offset)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	float data;
	index=scan_num16(offset);
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fd5e 	bl	8002f28 <scan_num16>
 800346c:	4603      	mov	r3, r0
 800346e:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003470:	2300      	movs	r3, #0
 8003472:	82fb      	strh	r3, [r7, #22]
 8003474:	e019      	b.n	80034aa <Set_float+0x52>
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	8afb      	ldrh	r3, [r7, #22]
 800347a:	4413      	add	r3, r2
 800347c:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <Set_float+0x94>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	2b20      	cmp	r3, #32
 8003482:	d006      	beq.n	8003492 <Set_float+0x3a>
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	8afb      	ldrh	r3, [r7, #22]
 8003488:	4413      	add	r3, r2
 800348a:	4a18      	ldr	r2, [pc, #96]	; (80034ec <Set_float+0x94>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	2b3d      	cmp	r3, #61	; 0x3d
 8003490:	d108      	bne.n	80034a4 <Set_float+0x4c>
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	b29a      	uxth	r2, r3
 8003496:	8afb      	ldrh	r3, [r7, #22]
 8003498:	4413      	add	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	82bb      	strh	r3, [r7, #20]
 80034a0:	2364      	movs	r3, #100	; 0x64
 80034a2:	82fb      	strh	r3, [r7, #22]
 80034a4:	8afb      	ldrh	r3, [r7, #22]
 80034a6:	3301      	adds	r3, #1
 80034a8:	82fb      	strh	r3, [r7, #22]
 80034aa:	8afb      	ldrh	r3, [r7, #22]
 80034ac:	2b63      	cmp	r3, #99	; 0x63
 80034ae:	d9e2      	bls.n	8003476 <Set_float+0x1e>
	data=scan_float(equal);
 80034b0:	8abb      	ldrh	r3, [r7, #20]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fd1b 	bl	8002ef0 <scan_float>
 80034ba:	ed87 0a03 	vstr	s0, [r7, #12]
	if(!BSFlag){
 80034be:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <Set_float+0x98>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <Set_float+0x84>
	arr[index]=data;
 80034c6:	8a7b      	ldrh	r3, [r7, #18]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);}
 80034d2:	2104      	movs	r1, #4
 80034d4:	4807      	ldr	r0, [pc, #28]	; (80034f4 <Set_float+0x9c>)
 80034d6:	f016 f875 	bl	80195c4 <CDC_Transmit_FS>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
}
 80034da:	e003      	b.n	80034e4 <Set_float+0x8c>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80034dc:	2117      	movs	r1, #23
 80034de:	4806      	ldr	r0, [pc, #24]	; (80034f8 <Set_float+0xa0>)
 80034e0:	f016 f870 	bl	80195c4 <CDC_Transmit_FS>
}
 80034e4:	bf00      	nop
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20005c64 	.word	0x20005c64
 80034f0:	20000984 	.word	0x20000984
 80034f4:	08021f78 	.word	0x08021f78
 80034f8:	08021f60 	.word	0x08021f60

080034fc <Get_uint8>:




void Get_uint8(uint8_t*arr, uint8_t offset, uint16_t size)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
 8003508:	4613      	mov	r3, r2
 800350a:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 800350c:	2300      	movs	r3, #0
 800350e:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fd08 	bl	8002f28 <scan_num16>
 8003518:	4603      	mov	r3, r0
 800351a:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 800351c:	89bb      	ldrh	r3, [r7, #12]
 800351e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003522:	4293      	cmp	r3, r2
 8003524:	d132      	bne.n	800358c <Get_uint8+0x90>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003526:	210e      	movs	r1, #14
 8003528:	482a      	ldr	r0, [pc, #168]	; (80035d4 <Get_uint8+0xd8>)
 800352a:	f016 f84b 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 800352e:	2300      	movs	r3, #0
 8003530:	81fb      	strh	r3, [r7, #14]
 8003532:	e022      	b.n	800357a <Get_uint8+0x7e>
		{
			if(!CSV_format)sprintf(RAM, "%d\t", arr[i]);
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <Get_uint8+0xdc>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <Get_uint8+0x54>
 800353c:	89fb      	ldrh	r3, [r7, #14]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4925      	ldr	r1, [pc, #148]	; (80035dc <Get_uint8+0xe0>)
 8003548:	4825      	ldr	r0, [pc, #148]	; (80035e0 <Get_uint8+0xe4>)
 800354a:	f01a fcb1 	bl	801deb0 <siprintf>
 800354e:	e008      	b.n	8003562 <Get_uint8+0x66>
			else sprintf(RAM, "%d;", arr[i]);
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4922      	ldr	r1, [pc, #136]	; (80035e4 <Get_uint8+0xe8>)
 800355c:	4820      	ldr	r0, [pc, #128]	; (80035e0 <Get_uint8+0xe4>)
 800355e:	f01a fca7 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003562:	481f      	ldr	r0, [pc, #124]	; (80035e0 <Get_uint8+0xe4>)
 8003564:	f7fc fe44 	bl	80001f0 <strlen>
 8003568:	4603      	mov	r3, r0
 800356a:	b29b      	uxth	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	481c      	ldr	r0, [pc, #112]	; (80035e0 <Get_uint8+0xe4>)
 8003570:	f016 f828 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	3301      	adds	r3, #1
 8003578:	81fb      	strh	r3, [r7, #14]
 800357a:	89fa      	ldrh	r2, [r7, #14]
 800357c:	883b      	ldrh	r3, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3d8      	bcc.n	8003534 <Get_uint8+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003582:	2102      	movs	r1, #2
 8003584:	4818      	ldr	r0, [pc, #96]	; (80035e8 <Get_uint8+0xec>)
 8003586:	f016 f81d 	bl	80195c4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%d\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 800358a:	e01e      	b.n	80035ca <Get_uint8+0xce>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 800358c:	883a      	ldrh	r2, [r7, #0]
 800358e:	89bb      	ldrh	r3, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d808      	bhi.n	80035a6 <Get_uint8+0xaa>
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <Get_uint8+0xf0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2209      	movs	r2, #9
 800359a:	b292      	uxth	r2, r2
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f016 f810 	bl	80195c4 <CDC_Transmit_FS>
}
 80035a4:	e011      	b.n	80035ca <Get_uint8+0xce>
			sprintf(RAM, "%d\r\n", arr[index]);
 80035a6:	89bb      	ldrh	r3, [r7, #12]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	490f      	ldr	r1, [pc, #60]	; (80035f0 <Get_uint8+0xf4>)
 80035b2:	480b      	ldr	r0, [pc, #44]	; (80035e0 <Get_uint8+0xe4>)
 80035b4:	f01a fc7c 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80035b8:	4809      	ldr	r0, [pc, #36]	; (80035e0 <Get_uint8+0xe4>)
 80035ba:	f7fc fe19 	bl	80001f0 <strlen>
 80035be:	4603      	mov	r3, r0
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4619      	mov	r1, r3
 80035c4:	4806      	ldr	r0, [pc, #24]	; (80035e0 <Get_uint8+0xe4>)
 80035c6:	f015 fffd 	bl	80195c4 <CDC_Transmit_FS>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	08021f80 	.word	0x08021f80
 80035d8:	2000097f 	.word	0x2000097f
 80035dc:	08021f90 	.word	0x08021f90
 80035e0:	20002158 	.word	0x20002158
 80035e4:	08021f94 	.word	0x08021f94
 80035e8:	08021e30 	.word	0x08021e30
 80035ec:	2000019c 	.word	0x2000019c
 80035f0:	08021f98 	.word	0x08021f98

080035f4 <Get_int32>:


void Get_int32(int32_t*arr, uint8_t offset, uint16_t size)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
 8003600:	4613      	mov	r3, r2
 8003602:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003604:	2300      	movs	r3, #0
 8003606:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fc8c 	bl	8002f28 <scan_num16>
 8003610:	4603      	mov	r3, r0
 8003612:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003614:	89bb      	ldrh	r3, [r7, #12]
 8003616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361a:	4293      	cmp	r3, r2
 800361c:	d134      	bne.n	8003688 <Get_int32+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 800361e:	210e      	movs	r1, #14
 8003620:	482b      	ldr	r0, [pc, #172]	; (80036d0 <Get_int32+0xdc>)
 8003622:	f015 ffcf 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003626:	2300      	movs	r3, #0
 8003628:	81fb      	strh	r3, [r7, #14]
 800362a:	e024      	b.n	8003676 <Get_int32+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%i\t", arr[i]);
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <Get_int32+0xe0>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <Get_int32+0x56>
 8003634:	89fb      	ldrh	r3, [r7, #14]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	4925      	ldr	r1, [pc, #148]	; (80036d8 <Get_int32+0xe4>)
 8003642:	4826      	ldr	r0, [pc, #152]	; (80036dc <Get_int32+0xe8>)
 8003644:	f01a fc34 	bl	801deb0 <siprintf>
 8003648:	e009      	b.n	800365e <Get_int32+0x6a>
			else sprintf(RAM, "%i;", arr[i]);
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	4922      	ldr	r1, [pc, #136]	; (80036e0 <Get_int32+0xec>)
 8003658:	4820      	ldr	r0, [pc, #128]	; (80036dc <Get_int32+0xe8>)
 800365a:	f01a fc29 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 800365e:	481f      	ldr	r0, [pc, #124]	; (80036dc <Get_int32+0xe8>)
 8003660:	f7fc fdc6 	bl	80001f0 <strlen>
 8003664:	4603      	mov	r3, r0
 8003666:	b29b      	uxth	r3, r3
 8003668:	4619      	mov	r1, r3
 800366a:	481c      	ldr	r0, [pc, #112]	; (80036dc <Get_int32+0xe8>)
 800366c:	f015 ffaa 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	3301      	adds	r3, #1
 8003674:	81fb      	strh	r3, [r7, #14]
 8003676:	89fa      	ldrh	r2, [r7, #14]
 8003678:	883b      	ldrh	r3, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3d6      	bcc.n	800362c <Get_int32+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 800367e:	2102      	movs	r1, #2
 8003680:	4818      	ldr	r0, [pc, #96]	; (80036e4 <Get_int32+0xf0>)
 8003682:	f015 ff9f 	bl	80195c4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%i\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003686:	e01f      	b.n	80036c8 <Get_int32+0xd4>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003688:	883a      	ldrh	r2, [r7, #0]
 800368a:	89bb      	ldrh	r3, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d808      	bhi.n	80036a2 <Get_int32+0xae>
 8003690:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <Get_int32+0xf4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2209      	movs	r2, #9
 8003696:	b292      	uxth	r2, r2
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f015 ff92 	bl	80195c4 <CDC_Transmit_FS>
}
 80036a0:	e012      	b.n	80036c8 <Get_int32+0xd4>
			sprintf(RAM, "%i\r\n", arr[index]);
 80036a2:	89bb      	ldrh	r3, [r7, #12]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	490f      	ldr	r1, [pc, #60]	; (80036ec <Get_int32+0xf8>)
 80036b0:	480a      	ldr	r0, [pc, #40]	; (80036dc <Get_int32+0xe8>)
 80036b2:	f01a fbfd 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80036b6:	4809      	ldr	r0, [pc, #36]	; (80036dc <Get_int32+0xe8>)
 80036b8:	f7fc fd9a 	bl	80001f0 <strlen>
 80036bc:	4603      	mov	r3, r0
 80036be:	b29b      	uxth	r3, r3
 80036c0:	4619      	mov	r1, r3
 80036c2:	4806      	ldr	r0, [pc, #24]	; (80036dc <Get_int32+0xe8>)
 80036c4:	f015 ff7e 	bl	80195c4 <CDC_Transmit_FS>
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	08021f80 	.word	0x08021f80
 80036d4:	2000097f 	.word	0x2000097f
 80036d8:	08021fa0 	.word	0x08021fa0
 80036dc:	20002158 	.word	0x20002158
 80036e0:	08021fa4 	.word	0x08021fa4
 80036e4:	08021e30 	.word	0x08021e30
 80036e8:	2000019c 	.word	0x2000019c
 80036ec:	08021fa8 	.word	0x08021fa8

080036f0 <Get_float>:

void Get_float(float*arr, uint8_t offset, uint16_t size)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
 80036fc:	4613      	mov	r3, r2
 80036fe:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003700:	2300      	movs	r3, #0
 8003702:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fc0e 	bl	8002f28 <scan_num16>
 800370c:	4603      	mov	r3, r0
 800370e:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003710:	89bb      	ldrh	r3, [r7, #12]
 8003712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003716:	4293      	cmp	r3, r2
 8003718:	d13c      	bne.n	8003794 <Get_float+0xa4>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 800371a:	210e      	movs	r1, #14
 800371c:	4831      	ldr	r0, [pc, #196]	; (80037e4 <Get_float+0xf4>)
 800371e:	f015 ff51 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003722:	2300      	movs	r3, #0
 8003724:	81fb      	strh	r3, [r7, #14]
 8003726:	e02c      	b.n	8003782 <Get_float+0x92>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003728:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <Get_float+0xf8>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10e      	bne.n	800374e <Get_float+0x5e>
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc ff14 	bl	8000568 <__aeabi_f2d>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4929      	ldr	r1, [pc, #164]	; (80037ec <Get_float+0xfc>)
 8003746:	482a      	ldr	r0, [pc, #168]	; (80037f0 <Get_float+0x100>)
 8003748:	f01a fbb2 	bl	801deb0 <siprintf>
 800374c:	e00d      	b.n	800376a <Get_float+0x7a>
			else sprintf(RAM, "%f;", arr[i]);
 800374e:	89fb      	ldrh	r3, [r7, #14]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc ff05 	bl	8000568 <__aeabi_f2d>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4924      	ldr	r1, [pc, #144]	; (80037f4 <Get_float+0x104>)
 8003764:	4822      	ldr	r0, [pc, #136]	; (80037f0 <Get_float+0x100>)
 8003766:	f01a fba3 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 800376a:	4821      	ldr	r0, [pc, #132]	; (80037f0 <Get_float+0x100>)
 800376c:	f7fc fd40 	bl	80001f0 <strlen>
 8003770:	4603      	mov	r3, r0
 8003772:	b29b      	uxth	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	481e      	ldr	r0, [pc, #120]	; (80037f0 <Get_float+0x100>)
 8003778:	f015 ff24 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	3301      	adds	r3, #1
 8003780:	81fb      	strh	r3, [r7, #14]
 8003782:	89fa      	ldrh	r2, [r7, #14]
 8003784:	883b      	ldrh	r3, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d3ce      	bcc.n	8003728 <Get_float+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 800378a:	2102      	movs	r1, #2
 800378c:	481a      	ldr	r0, [pc, #104]	; (80037f8 <Get_float+0x108>)
 800378e:	f015 ff19 	bl	80195c4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003792:	e023      	b.n	80037dc <Get_float+0xec>
		if(index>size-1)
 8003794:	883a      	ldrh	r2, [r7, #0]
 8003796:	89bb      	ldrh	r3, [r7, #12]
 8003798:	429a      	cmp	r2, r3
 800379a:	d808      	bhi.n	80037ae <Get_float+0xbe>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <Get_float+0x10c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2209      	movs	r2, #9
 80037a2:	b292      	uxth	r2, r2
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f015 ff0c 	bl	80195c4 <CDC_Transmit_FS>
}
 80037ac:	e016      	b.n	80037dc <Get_float+0xec>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 80037ae:	89bb      	ldrh	r3, [r7, #12]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fed5 	bl	8000568 <__aeabi_f2d>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	490f      	ldr	r1, [pc, #60]	; (8003800 <Get_float+0x110>)
 80037c4:	480a      	ldr	r0, [pc, #40]	; (80037f0 <Get_float+0x100>)
 80037c6:	f01a fb73 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80037ca:	4809      	ldr	r0, [pc, #36]	; (80037f0 <Get_float+0x100>)
 80037cc:	f7fc fd10 	bl	80001f0 <strlen>
 80037d0:	4603      	mov	r3, r0
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	4619      	mov	r1, r3
 80037d6:	4806      	ldr	r0, [pc, #24]	; (80037f0 <Get_float+0x100>)
 80037d8:	f015 fef4 	bl	80195c4 <CDC_Transmit_FS>
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	08021f80 	.word	0x08021f80
 80037e8:	2000097f 	.word	0x2000097f
 80037ec:	08021fb0 	.word	0x08021fb0
 80037f0:	20002158 	.word	0x20002158
 80037f4:	08021fb4 	.word	0x08021fb4
 80037f8:	08021e30 	.word	0x08021e30
 80037fc:	2000019c 	.word	0x2000019c
 8003800:	08021fb8 	.word	0x08021fb8

08003804 <Get_double>:


void Get_double(double*arr, uint8_t offset, uint16_t size)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
 8003810:	4613      	mov	r3, r2
 8003812:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003814:	2300      	movs	r3, #0
 8003816:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fb84 	bl	8002f28 <scan_num16>
 8003820:	4603      	mov	r3, r0
 8003822:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003824:	89bb      	ldrh	r3, [r7, #12]
 8003826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800382a:	4293      	cmp	r3, r2
 800382c:	d134      	bne.n	8003898 <Get_double+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 800382e:	210e      	movs	r1, #14
 8003830:	482b      	ldr	r0, [pc, #172]	; (80038e0 <Get_double+0xdc>)
 8003832:	f015 fec7 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003836:	2300      	movs	r3, #0
 8003838:	81fb      	strh	r3, [r7, #14]
 800383a:	e024      	b.n	8003886 <Get_double+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <Get_double+0xe0>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <Get_double+0x56>
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	4925      	ldr	r1, [pc, #148]	; (80038e8 <Get_double+0xe4>)
 8003852:	4826      	ldr	r0, [pc, #152]	; (80038ec <Get_double+0xe8>)
 8003854:	f01a fb2c 	bl	801deb0 <siprintf>
 8003858:	e009      	b.n	800386e <Get_double+0x6a>
			else sprintf(RAM, "%f;", (double)arr[i]);
 800385a:	89fb      	ldrh	r3, [r7, #14]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	4922      	ldr	r1, [pc, #136]	; (80038f0 <Get_double+0xec>)
 8003868:	4820      	ldr	r0, [pc, #128]	; (80038ec <Get_double+0xe8>)
 800386a:	f01a fb21 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 800386e:	481f      	ldr	r0, [pc, #124]	; (80038ec <Get_double+0xe8>)
 8003870:	f7fc fcbe 	bl	80001f0 <strlen>
 8003874:	4603      	mov	r3, r0
 8003876:	b29b      	uxth	r3, r3
 8003878:	4619      	mov	r1, r3
 800387a:	481c      	ldr	r0, [pc, #112]	; (80038ec <Get_double+0xe8>)
 800387c:	f015 fea2 	bl	80195c4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003880:	89fb      	ldrh	r3, [r7, #14]
 8003882:	3301      	adds	r3, #1
 8003884:	81fb      	strh	r3, [r7, #14]
 8003886:	89fa      	ldrh	r2, [r7, #14]
 8003888:	883b      	ldrh	r3, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3d6      	bcc.n	800383c <Get_double+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 800388e:	2102      	movs	r1, #2
 8003890:	4818      	ldr	r0, [pc, #96]	; (80038f4 <Get_double+0xf0>)
 8003892:	f015 fe97 	bl	80195c4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003896:	e01f      	b.n	80038d8 <Get_double+0xd4>
		if(index>size-1)
 8003898:	883a      	ldrh	r2, [r7, #0]
 800389a:	89bb      	ldrh	r3, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d808      	bhi.n	80038b2 <Get_double+0xae>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <Get_double+0xf4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2209      	movs	r2, #9
 80038a6:	b292      	uxth	r2, r2
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f015 fe8a 	bl	80195c4 <CDC_Transmit_FS>
}
 80038b0:	e012      	b.n	80038d8 <Get_double+0xd4>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 80038b2:	89bb      	ldrh	r3, [r7, #12]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	490f      	ldr	r1, [pc, #60]	; (80038fc <Get_double+0xf8>)
 80038c0:	480a      	ldr	r0, [pc, #40]	; (80038ec <Get_double+0xe8>)
 80038c2:	f01a faf5 	bl	801deb0 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80038c6:	4809      	ldr	r0, [pc, #36]	; (80038ec <Get_double+0xe8>)
 80038c8:	f7fc fc92 	bl	80001f0 <strlen>
 80038cc:	4603      	mov	r3, r0
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	4806      	ldr	r0, [pc, #24]	; (80038ec <Get_double+0xe8>)
 80038d4:	f015 fe76 	bl	80195c4 <CDC_Transmit_FS>
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	08021f80 	.word	0x08021f80
 80038e4:	2000097f 	.word	0x2000097f
 80038e8:	08021fb0 	.word	0x08021fb0
 80038ec:	20002158 	.word	0x20002158
 80038f0:	08021fb4 	.word	0x08021fb4
 80038f4:	08021e30 	.word	0x08021e30
 80038f8:	2000019c 	.word	0x2000019c
 80038fc:	08021fb8 	.word	0x08021fb8

08003900 <Scan_Uint16>:


uint16_t Scan_Uint16(uint8_t ofset, uint8_t*data)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 800390c:	2300      	movs	r3, #0
 800390e:	81fb      	strh	r3, [r7, #14]
	uint16_t result=0;
 8003910:	2300      	movs	r3, #0
 8003912:	81bb      	strh	r3, [r7, #12]

	for(i=ofset;i<ofset+10;i++)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	81fb      	strh	r3, [r7, #14]
 8003918:	e021      	b.n	800395e <Scan_Uint16+0x5e>
	{
		if((data[i]>=48)&&(data[i]<=58))
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b2f      	cmp	r3, #47	; 0x2f
 8003924:	d919      	bls.n	800395a <Scan_Uint16+0x5a>
 8003926:	89fb      	ldrh	r3, [r7, #14]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b3a      	cmp	r3, #58	; 0x3a
 8003930:	d813      	bhi.n	800395a <Scan_Uint16+0x5a>
		{
			result*=10;
 8003932:	89bb      	ldrh	r3, [r7, #12]
 8003934:	461a      	mov	r2, r3
 8003936:	0092      	lsls	r2, r2, #2
 8003938:	4413      	add	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	81bb      	strh	r3, [r7, #12]
			result+=(data[i]-48);
 800393e:	89fb      	ldrh	r3, [r7, #14]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b29a      	uxth	r2, r3
 8003948:	89bb      	ldrh	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b30      	subs	r3, #48	; 0x30
 8003950:	81bb      	strh	r3, [r7, #12]
	for(i=ofset;i<ofset+10;i++)
 8003952:	89fb      	ldrh	r3, [r7, #14]
 8003954:	3301      	adds	r3, #1
 8003956:	81fb      	strh	r3, [r7, #14]
 8003958:	e001      	b.n	800395e <Scan_Uint16+0x5e>
		}
		else return result;
 800395a:	89bb      	ldrh	r3, [r7, #12]
 800395c:	e006      	b.n	800396c <Scan_Uint16+0x6c>
	for(i=ofset;i<ofset+10;i++)
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	f103 0209 	add.w	r2, r3, #9
 8003964:	89fb      	ldrh	r3, [r7, #14]
 8003966:	429a      	cmp	r2, r3
 8003968:	dad7      	bge.n	800391a <Scan_Uint16+0x1a>
	}
	return result;
 800396a:	89bb      	ldrh	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <Parser_process>:



void Parser_process(void)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
	uint16_t RES=0,i;
 800397e:	2300      	movs	r3, #0
 8003980:	80bb      	strh	r3, [r7, #4]

	if(BLE_bridge!=0)
 8003982:	4bb5      	ldr	r3, [pc, #724]	; (8003c58 <Parser_process+0x2e0>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d015      	beq.n	80039b6 <Parser_process+0x3e>
	{
		if(usart1_counter!=0)
 800398a:	4bb4      	ldr	r3, [pc, #720]	; (8003c5c <Parser_process+0x2e4>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d011      	beq.n	80039b6 <Parser_process+0x3e>
		{
			if(rx_cmplt==0)
 8003992:	4bb3      	ldr	r3, [pc, #716]	; (8003c60 <Parser_process+0x2e8>)
 8003994:	f993 3000 	ldrsb.w	r3, [r3]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10c      	bne.n	80039b6 <Parser_process+0x3e>
			{
				CDC_Transmit_FS((unsigned char*)usart1_data, usart1_counter);
 800399c:	4baf      	ldr	r3, [pc, #700]	; (8003c5c <Parser_process+0x2e4>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	48af      	ldr	r0, [pc, #700]	; (8003c64 <Parser_process+0x2ec>)
 80039a6:	f015 fe0d 	bl	80195c4 <CDC_Transmit_FS>
				usart1_counter=0;
 80039aa:	4bac      	ldr	r3, [pc, #688]	; (8003c5c <Parser_process+0x2e4>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
				rx_cmplt=-1;
 80039b0:	4bab      	ldr	r3, [pc, #684]	; (8003c60 <Parser_process+0x2e8>)
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(USBTimeOutRX>0)USBTimeOutRX--;
 80039b6:	4bac      	ldr	r3, [pc, #688]	; (8003c68 <Parser_process+0x2f0>)
 80039b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	dd08      	ble.n	80039d2 <Parser_process+0x5a>
 80039c0:	4ba9      	ldr	r3, [pc, #676]	; (8003c68 <Parser_process+0x2f0>)
 80039c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	b21a      	sxth	r2, r3
 80039ce:	4ba6      	ldr	r3, [pc, #664]	; (8003c68 <Parser_process+0x2f0>)
 80039d0:	801a      	strh	r2, [r3, #0]
	if(USBTimeOutRX==0)
 80039d2:	4ba5      	ldr	r3, [pc, #660]	; (8003c68 <Parser_process+0x2f0>)
 80039d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 84ba 	bne.w	8004352 <Parser_process+0x9da>
	{
		// Bluetooth bridge
		if(BLE_bridge!=0)
 80039de:	4b9e      	ldr	r3, [pc, #632]	; (8003c58 <Parser_process+0x2e0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d025      	beq.n	8003a32 <Parser_process+0xba>
		{
			for(i=0;i<rxcntr;i++)bluetoothbuf[i]=rx_buf[i];
 80039e6:	2300      	movs	r3, #0
 80039e8:	80fb      	strh	r3, [r7, #6]
 80039ea:	e008      	b.n	80039fe <Parser_process+0x86>
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	499e      	ldr	r1, [pc, #632]	; (8003c6c <Parser_process+0x2f4>)
 80039f2:	5c89      	ldrb	r1, [r1, r2]
 80039f4:	4a9e      	ldr	r2, [pc, #632]	; (8003c70 <Parser_process+0x2f8>)
 80039f6:	54d1      	strb	r1, [r2, r3]
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	3301      	adds	r3, #1
 80039fc:	80fb      	strh	r3, [r7, #6]
 80039fe:	4b9d      	ldr	r3, [pc, #628]	; (8003c74 <Parser_process+0x2fc>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3f1      	bcc.n	80039ec <Parser_process+0x74>
			bluetoothcntr=rxcntr;
 8003a08:	4b9a      	ldr	r3, [pc, #616]	; (8003c74 <Parser_process+0x2fc>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4b9a      	ldr	r3, [pc, #616]	; (8003c78 <Parser_process+0x300>)
 8003a10:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)rx_buf, rxcntr, 1000);
 8003a12:	4b98      	ldr	r3, [pc, #608]	; (8003c74 <Parser_process+0x2fc>)
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1a:	4994      	ldr	r1, [pc, #592]	; (8003c6c <Parser_process+0x2f4>)
 8003a1c:	4897      	ldr	r0, [pc, #604]	; (8003c7c <Parser_process+0x304>)
 8003a1e:	f00c f9ed 	bl	800fdfc <HAL_UART_Transmit>
			clear_buf();
 8003a22:	f7ff f9c5 	bl	8002db0 <clear_buf>
			USBTimeOutRX=-1;
 8003a26:	4b90      	ldr	r3, [pc, #576]	; (8003c68 <Parser_process+0x2f0>)
 8003a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2c:	801a      	strh	r2, [r3, #0]
 8003a2e:	f000 bc90 	b.w	8004352 <Parser_process+0x9da>
		}
		// Parser
		else
		{
			LED(0,1,0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2101      	movs	r1, #1
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fe f924 	bl	8001c84 <LED>
			switch(parser(0))
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f7ff fb0f 	bl	8003060 <parser>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f000 8479 	beq.w	8004340 <Parser_process+0x9c8>
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	f280 846a 	bge.w	800432a <Parser_process+0x9b2>
 8003a56:	2b25      	cmp	r3, #37	; 0x25
 8003a58:	dc52      	bgt.n	8003b00 <Parser_process+0x188>
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	f2c0 8465 	blt.w	800432a <Parser_process+0x9b2>
 8003a60:	3b02      	subs	r3, #2
 8003a62:	2b23      	cmp	r3, #35	; 0x23
 8003a64:	f200 8461 	bhi.w	800432a <Parser_process+0x9b2>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <Parser_process+0xf8>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08004025 	.word	0x08004025
 8003a74:	080041a1 	.word	0x080041a1
 8003a78:	0800431d 	.word	0x0800431d
 8003a7c:	08003e97 	.word	0x08003e97
 8003a80:	08003e53 	.word	0x08003e53
 8003a84:	08003e75 	.word	0x08003e75
 8003a88:	0800432b 	.word	0x0800432b
 8003a8c:	08003e05 	.word	0x08003e05
 8003a90:	08003e1f 	.word	0x08003e1f
 8003a94:	08003d95 	.word	0x08003d95
 8003a98:	08003dbb 	.word	0x08003dbb
 8003a9c:	08003db5 	.word	0x08003db5
 8003aa0:	08003b23 	.word	0x08003b23
 8003aa4:	08003b33 	.word	0x08003b33
 8003aa8:	08003b83 	.word	0x08003b83
 8003aac:	08003c27 	.word	0x08003c27
 8003ab0:	08003cbd 	.word	0x08003cbd
 8003ab4:	08003ced 	.word	0x08003ced
 8003ab8:	08003cf3 	.word	0x08003cf3
 8003abc:	08003d2f 	.word	0x08003d2f
 8003ac0:	08003d35 	.word	0x08003d35
 8003ac4:	08003d3b 	.word	0x08003d3b
 8003ac8:	08003d41 	.word	0x08003d41
 8003acc:	08003d47 	.word	0x08003d47
 8003ad0:	08003d4d 	.word	0x08003d4d
 8003ad4:	08003d53 	.word	0x08003d53
 8003ad8:	08003d59 	.word	0x08003d59
 8003adc:	08003d5f 	.word	0x08003d5f
 8003ae0:	08003d65 	.word	0x08003d65
 8003ae4:	08003d6b 	.word	0x08003d6b
 8003ae8:	08003d71 	.word	0x08003d71
 8003aec:	08003d77 	.word	0x08003d77
 8003af0:	08003d7d 	.word	0x08003d7d
 8003af4:	08003d83 	.word	0x08003d83
 8003af8:	08003d89 	.word	0x08003d89
 8003afc:	08003d8f 	.word	0x08003d8f
 8003b00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b04:	4293      	cmp	r3, r2
 8003b06:	f040 8410 	bne.w	800432a <Parser_process+0x9b2>
			{
				case 0xFFFF: break;
				case 0xFFFE: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], (uint8_t)COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <Parser_process+0x308>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2209      	movs	r2, #9
 8003b10:	b292      	uxth	r2, r2
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f015 fd55 	bl	80195c4 <CDC_Transmit_FS>
 8003b1a:	f7ff f949 	bl	8002db0 <clear_buf>
 8003b1e:	f000 bc10 	b.w	8004342 <Parser_process+0x9ca>

				// Информация о модели
				case ID_CMD: CDC_Transmit_FS((unsigned char*)"METROL 110 USB", 14); clear_buf(); break;
 8003b22:	210e      	movs	r1, #14
 8003b24:	4857      	ldr	r0, [pc, #348]	; (8003c84 <Parser_process+0x30c>)
 8003b26:	f015 fd4d 	bl	80195c4 <CDC_Transmit_FS>
 8003b2a:	f7ff f941 	bl	8002db0 <clear_buf>
 8003b2e:	f000 bc08 	b.w	8004342 <Parser_process+0x9ca>
				// Получить текущее значение давления
				case A_CMD: sprintf((char*)RAM, "%f ", Pressure);
 8003b32:	4b55      	ldr	r3, [pc, #340]	; (8003c88 <Parser_process+0x310>)
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	4954      	ldr	r1, [pc, #336]	; (8003c8c <Parser_process+0x314>)
 8003b3a:	4855      	ldr	r0, [pc, #340]	; (8003c90 <Parser_process+0x318>)
 8003b3c:	f01a f9b8 	bl	801deb0 <siprintf>
				CDC_Transmit_FS((unsigned char*)RAM, strlen((char*)RAM));
 8003b40:	4853      	ldr	r0, [pc, #332]	; (8003c90 <Parser_process+0x318>)
 8003b42:	f7fc fb55 	bl	80001f0 <strlen>
 8003b46:	4603      	mov	r3, r0
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4850      	ldr	r0, [pc, #320]	; (8003c90 <Parser_process+0x318>)
 8003b4e:	f015 fd39 	bl	80195c4 <CDC_Transmit_FS>
				CDC_Transmit_FS((unsigned char*)UNITS_NAME[Units], strlen(UNITS_NAME[Units]));
 8003b52:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <Parser_process+0x31c>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <Parser_process+0x320>)
 8003b5a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003b5e:	4b4d      	ldr	r3, [pc, #308]	; (8003c94 <Parser_process+0x31c>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <Parser_process+0x320>)
 8003b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc fb40 	bl	80001f0 <strlen>
 8003b70:	4603      	mov	r3, r0
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	4619      	mov	r1, r3
 8003b76:	4620      	mov	r0, r4
 8003b78:	f015 fd24 	bl	80195c4 <CDC_Transmit_FS>
				clear_buf(); break;
 8003b7c:	f7ff f918 	bl	8002db0 <clear_buf>
 8003b80:	e3df      	b.n	8004342 <Parser_process+0x9ca>
				// Получить текущее значение электрического параметра
				case B_CMD:
				switch(E_fun)
 8003b82:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <Parser_process+0x324>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d024      	beq.n	8003bd4 <Parser_process+0x25c>
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	dc2a      	bgt.n	8003be4 <Parser_process+0x26c>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <Parser_process+0x220>
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d00f      	beq.n	8003bb6 <Parser_process+0x23e>
 8003b96:	e025      	b.n	8003be4 <Parser_process+0x26c>
				{
					case mA: sprintf((char*)RAM, "%f ", current_4_20mA-Current_zero); break;
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <Parser_process+0x328>)
 8003b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b9e:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <Parser_process+0x32c>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f7fc fb80 	bl	80002a8 <__aeabi_dsub>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4937      	ldr	r1, [pc, #220]	; (8003c8c <Parser_process+0x314>)
 8003bae:	4838      	ldr	r0, [pc, #224]	; (8003c90 <Parser_process+0x318>)
 8003bb0:	f01a f97e 	bl	801deb0 <siprintf>
 8003bb4:	e016      	b.n	8003be4 <Parser_process+0x26c>
					case V: sprintf((char*)RAM, "%f ", voltage_measure-Voltage_zero); break;
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <Parser_process+0x330>)
 8003bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bbc:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <Parser_process+0x334>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fb71 	bl	80002a8 <__aeabi_dsub>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4930      	ldr	r1, [pc, #192]	; (8003c8c <Parser_process+0x314>)
 8003bcc:	4830      	ldr	r0, [pc, #192]	; (8003c90 <Parser_process+0x318>)
 8003bce:	f01a f96f 	bl	801deb0 <siprintf>
 8003bd2:	e007      	b.n	8003be4 <Parser_process+0x26c>
					case SW: sprintf((char*)RAM, "%d ", SW_state); break;
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <Parser_process+0x338>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <Parser_process+0x33c>)
 8003bdc:	482c      	ldr	r0, [pc, #176]	; (8003c90 <Parser_process+0x318>)
 8003bde:	f01a f967 	bl	801deb0 <siprintf>
 8003be2:	bf00      	nop
				}
				CDC_Transmit_FS((unsigned char*)RAM, strlen((char*)RAM));
 8003be4:	482a      	ldr	r0, [pc, #168]	; (8003c90 <Parser_process+0x318>)
 8003be6:	f7fc fb03 	bl	80001f0 <strlen>
 8003bea:	4603      	mov	r3, r0
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4827      	ldr	r0, [pc, #156]	; (8003c90 <Parser_process+0x318>)
 8003bf2:	f015 fce7 	bl	80195c4 <CDC_Transmit_FS>
				CDC_Transmit_FS((unsigned char*)E_UNITS_NAME[E_fun], strlen(E_UNITS_NAME[E_fun]));
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <Parser_process+0x324>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <Parser_process+0x340>)
 8003bfe:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <Parser_process+0x324>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <Parser_process+0x340>)
 8003c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fc faee 	bl	80001f0 <strlen>
 8003c14:	4603      	mov	r3, r0
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f015 fcd2 	bl	80195c4 <CDC_Transmit_FS>
				clear_buf(); break;
 8003c20:	f7ff f8c6 	bl	8002db0 <clear_buf>
 8003c24:	e38d      	b.n	8004342 <Parser_process+0x9ca>
				// Получить наименование электрического параметра
				case FUN_CMD:
					CDC_Transmit_FS((unsigned char*)E_UNITS_NAME[E_fun], strlen(E_UNITS_NAME[E_fun]));
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <Parser_process+0x324>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <Parser_process+0x340>)
 8003c2e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <Parser_process+0x324>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <Parser_process+0x340>)
 8003c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fad6 	bl	80001f0 <strlen>
 8003c44:	4603      	mov	r3, r0
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f015 fcba 	bl	80195c4 <CDC_Transmit_FS>
					clear_buf(); break;
 8003c50:	f7ff f8ae 	bl	8002db0 <clear_buf>
 8003c54:	e375      	b.n	8004342 <Parser_process+0x9ca>
 8003c56:	bf00      	nop
 8003c58:	2000095c 	.word	0x2000095c
 8003c5c:	2000095d 	.word	0x2000095d
 8003c60:	2000095e 	.word	0x2000095e
 8003c64:	20002210 	.word	0x20002210
 8003c68:	20000234 	.word	0x20000234
 8003c6c:	20005c64 	.word	0x20005c64
 8003c70:	20005c00 	.word	0x20005c00
 8003c74:	20000982 	.word	0x20000982
 8003c78:	20000980 	.word	0x20000980
 8003c7c:	20007b48 	.word	0x20007b48
 8003c80:	2000019c 	.word	0x2000019c
 8003c84:	08021fc0 	.word	0x08021fc0
 8003c88:	20002398 	.word	0x20002398
 8003c8c:	08021fd0 	.word	0x08021fd0
 8003c90:	20002158 	.word	0x20002158
 8003c94:	200000b2 	.word	0x200000b2
 8003c98:	20000164 	.word	0x20000164
 8003c9c:	20000968 	.word	0x20000968
 8003ca0:	200023c0 	.word	0x200023c0
 8003ca4:	20000948 	.word	0x20000948
 8003ca8:	20002278 	.word	0x20002278
 8003cac:	20000940 	.word	0x20000940
 8003cb0:	20000969 	.word	0x20000969
 8003cb4:	08021fd4 	.word	0x08021fd4
 8003cb8:	20000190 	.word	0x20000190
				// Текущая единица измерения
				case UNITS_CMD:
					CDC_Transmit_FS((unsigned char*)UNITS_NAME[Units], strlen(UNITS_NAME[Units]));
 8003cbc:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <Parser_process+0x5b4>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b9b      	ldr	r3, [pc, #620]	; (8003f30 <Parser_process+0x5b8>)
 8003cc4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003cc8:	4b98      	ldr	r3, [pc, #608]	; (8003f2c <Parser_process+0x5b4>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b98      	ldr	r3, [pc, #608]	; (8003f30 <Parser_process+0x5b8>)
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fa8b 	bl	80001f0 <strlen>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f015 fc6f 	bl	80195c4 <CDC_Transmit_FS>
					clear_buf(); break;
 8003ce6:	f7ff f863 	bl	8002db0 <clear_buf>
 8003cea:	e32a      	b.n	8004342 <Parser_process+0x9ca>
				// Получить количество диапазонов измерения давления и значения этих диапазонов
				case RANGE_CMD: clear_buf(); break;
 8003cec:	f7ff f860 	bl	8002db0 <clear_buf>
 8003cf0:	e327      	b.n	8004342 <Parser_process+0x9ca>
				// Смена единицы измерения давления
				case UNITSXX_CMD: RES=Scan_Uint16(COMMAND_NUM_OF_SYM[UNITSXX_CMD], (uint8_t*)rx_buf);
 8003cf2:	2306      	movs	r3, #6
 8003cf4:	498f      	ldr	r1, [pc, #572]	; (8003f34 <Parser_process+0x5bc>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fe02 	bl	8003900 <Scan_Uint16>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	80bb      	strh	r3, [r7, #4]
				if(RES<11) {Units=RES; CDC_Transmit_FS((unsigned char*)"OK", 2);}
 8003d00:	88bb      	ldrh	r3, [r7, #4]
 8003d02:	2b0a      	cmp	r3, #10
 8003d04:	d808      	bhi.n	8003d18 <Parser_process+0x3a0>
 8003d06:	88bb      	ldrh	r3, [r7, #4]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <Parser_process+0x5b4>)
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4889      	ldr	r0, [pc, #548]	; (8003f38 <Parser_process+0x5c0>)
 8003d12:	f015 fc57 	bl	80195c4 <CDC_Transmit_FS>
 8003d16:	e007      	b.n	8003d28 <Parser_process+0x3b0>
				else CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], (uint8_t)COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003d18:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <Parser_process+0x5c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2209      	movs	r2, #9
 8003d1e:	b292      	uxth	r2, r2
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f015 fc4e 	bl	80195c4 <CDC_Transmit_FS>
				clear_buf(); break;
 8003d28:	f7ff f842 	bl	8002db0 <clear_buf>
 8003d2c:	e309      	b.n	8004342 <Parser_process+0x9ca>
				// Смена функции измерения напряжения, тока, контроля внешних контактов
				case FUNXXY_CMD: clear_buf(); break;
 8003d2e:	f7ff f83f 	bl	8002db0 <clear_buf>
 8003d32:	e306      	b.n	8004342 <Parser_process+0x9ca>
				// Класс точности манометра
				case ACCURACYST_CMD: clear_buf(); break;
 8003d34:	f7ff f83c 	bl	8002db0 <clear_buf>
 8003d38:	e303      	b.n	8004342 <Parser_process+0x9ca>
				// Обнуление показаний давления
				case ZERO_CMD: clear_buf(); break;
 8003d3a:	f7ff f839 	bl	8002db0 <clear_buf>
 8003d3e:	e300      	b.n	8004342 <Parser_process+0x9ca>
				// Обнуление показаний напряжения
				case ZEROV_CMD: clear_buf(); break;
 8003d40:	f7ff f836 	bl	8002db0 <clear_buf>
 8003d44:	e2fd      	b.n	8004342 <Parser_process+0x9ca>
				// Обнуление показаний тока
				case ZEROI_CMD: clear_buf(); break;
 8003d46:	f7ff f833 	bl	8002db0 <clear_buf>
 8003d4a:	e2fa      	b.n	8004342 <Parser_process+0x9ca>
				// Показать смещение нуля давления
				case ZEROX_CMD: clear_buf(); break;
 8003d4c:	f7ff f830 	bl	8002db0 <clear_buf>
 8003d50:	e2f7      	b.n	8004342 <Parser_process+0x9ca>
				// Показать смещение нуля напряжения
				case ZEROVX_CMD: clear_buf(); break;
 8003d52:	f7ff f82d 	bl	8002db0 <clear_buf>
 8003d56:	e2f4      	b.n	8004342 <Parser_process+0x9ca>
				// Показать смещение нуля тока
				case ZEROIX_CMD: clear_buf(); break;
 8003d58:	f7ff f82a 	bl	8002db0 <clear_buf>
 8003d5c:	e2f1      	b.n	8004342 <Parser_process+0x9ca>
				// Сброс на заводские настройки
				case DEFAULT_CMD: clear_buf(); break;
 8003d5e:	f7ff f827 	bl	8002db0 <clear_buf>
 8003d62:	e2ee      	b.n	8004342 <Parser_process+0x9ca>
				// Нижний предел измерения давления
				case RANGEMIN_CMD: clear_buf(); break;
 8003d64:	f7ff f824 	bl	8002db0 <clear_buf>
 8003d68:	e2eb      	b.n	8004342 <Parser_process+0x9ca>
				// Верхний предел измерения давления
				case RANGEMAX_CMD: clear_buf(); break;
 8003d6a:	f7ff f821 	bl	8002db0 <clear_buf>
 8003d6e:	e2e8      	b.n	8004342 <Parser_process+0x9ca>
				// Включение функции относительного измерения давления
				case TAREON_CMD: clear_buf(); break;
 8003d70:	f7ff f81e 	bl	8002db0 <clear_buf>
 8003d74:	e2e5      	b.n	8004342 <Parser_process+0x9ca>
				// Выключение функции относительного измерения давления
				case TAREOFF_CMD: clear_buf(); break;
 8003d76:	f7ff f81b 	bl	8002db0 <clear_buf>
 8003d7a:	e2e2      	b.n	8004342 <Parser_process+0x9ca>
				// Получить значение точки отсчета давления для функции TARE
				case TAREX_CMD: clear_buf(); break;
 8003d7c:	f7ff f818 	bl	8002db0 <clear_buf>
 8003d80:	e2df      	b.n	8004342 <Parser_process+0x9ca>
				// Получить минимальное измеренное значение давления за сеанс
				case PEAKMIN_CMD: clear_buf(); break;
 8003d82:	f7ff f815 	bl	8002db0 <clear_buf>
 8003d86:	e2dc      	b.n	8004342 <Parser_process+0x9ca>
				// Получить максимальное измеренное значение давления за сеанс
				case PEAKMAX_CMD: clear_buf(); break;
 8003d88:	f7ff f812 	bl	8002db0 <clear_buf>
 8003d8c:	e2d9      	b.n	8004342 <Parser_process+0x9ca>
				// Сбросить макс. и мин. значения давления за сеанс
				case PEAKRESET_CMD: clear_buf(); break;
 8003d8e:	f7ff f80f 	bl	8002db0 <clear_buf>
 8003d92:	e2d6      	b.n	8004342 <Parser_process+0x9ca>

				case BL_BRIDGE:
					CDC_Transmit_FS((unsigned char*)"BlueTooth Bridge Enabled", 24);
 8003d94:	2118      	movs	r1, #24
 8003d96:	486a      	ldr	r0, [pc, #424]	; (8003f40 <Parser_process+0x5c8>)
 8003d98:	f015 fc14 	bl	80195c4 <CDC_Transmit_FS>
					BLE_bridge=1;
 8003d9c:	4b69      	ldr	r3, [pc, #420]	; (8003f44 <Parser_process+0x5cc>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
					usart1_counter=0;
 8003da2:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <Parser_process+0x5d0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
					rx_cmplt=-1;
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <Parser_process+0x5d4>)
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003dae:	f7fe ffff 	bl	8002db0 <clear_buf>
					break;
 8003db2:	e2c6      	b.n	8004342 <Parser_process+0x9ca>

				case CREATE:

					clear_buf();
 8003db4:	f7fe fffc 	bl	8002db0 <clear_buf>
					break;
 8003db8:	e2c3      	b.n	8004342 <Parser_process+0x9ca>

				case BL_CONFIG:
					if(BLE_config==1)BLE_config=0;
 8003dba:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <Parser_process+0x5d8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d103      	bne.n	8003dca <Parser_process+0x452>
 8003dc2:	4b63      	ldr	r3, [pc, #396]	; (8003f50 <Parser_process+0x5d8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	e002      	b.n	8003dd0 <Parser_process+0x458>
					else BLE_config=1;
 8003dca:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <Parser_process+0x5d8>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
					BLueTooth_Configuration(BLE_config);
 8003dd0:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <Parser_process+0x5d8>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd feff 	bl	8001bd8 <BLueTooth_Configuration>
					sprintf(RAM, "BlueTooth Config = %d", BLE_config);
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <Parser_process+0x5d8>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	495c      	ldr	r1, [pc, #368]	; (8003f54 <Parser_process+0x5dc>)
 8003de2:	485d      	ldr	r0, [pc, #372]	; (8003f58 <Parser_process+0x5e0>)
 8003de4:	f01a f864 	bl	801deb0 <siprintf>
					CDC_Transmit_FS((unsigned char*)RAM, 20);
 8003de8:	2114      	movs	r1, #20
 8003dea:	485b      	ldr	r0, [pc, #364]	; (8003f58 <Parser_process+0x5e0>)
 8003dec:	f015 fbea 	bl	80195c4 <CDC_Transmit_FS>
					HAL_UART_Transmit(&huart1, (unsigned char*)RAM, 20, 1000);
 8003df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003df4:	2214      	movs	r2, #20
 8003df6:	4958      	ldr	r1, [pc, #352]	; (8003f58 <Parser_process+0x5e0>)
 8003df8:	4858      	ldr	r0, [pc, #352]	; (8003f5c <Parser_process+0x5e4>)
 8003dfa:	f00b ffff 	bl	800fdfc <HAL_UART_Transmit>
					clear_buf();
 8003dfe:	f7fe ffd7 	bl	8002db0 <clear_buf>
					break;
 8003e02:	e29e      	b.n	8004342 <Parser_process+0x9ca>

				case SELF_CAL:
					clear_buf();
 8003e04:	f7fe ffd4 	bl	8002db0 <clear_buf>
					adc_calibration_mode=self_calibration;
 8003e08:	4b55      	ldr	r3, [pc, #340]	; (8003f60 <Parser_process+0x5e8>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
					adc_start_calibration=1;
 8003e0e:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <Parser_process+0x5ec>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003e14:	2102      	movs	r1, #2
 8003e16:	4848      	ldr	r0, [pc, #288]	; (8003f38 <Parser_process+0x5c0>)
 8003e18:	f015 fbd4 	bl	80195c4 <CDC_Transmit_FS>
				break;
 8003e1c:	e291      	b.n	8004342 <Parser_process+0x9ca>
				case SYS_CAL:
					RES=screen;
 8003e1e:	4b52      	ldr	r3, [pc, #328]	; (8003f68 <Parser_process+0x5f0>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	80bb      	strh	r3, [r7, #4]
					Auto_System_Calibration();
 8003e24:	f7fd fa88 	bl	8001338 <Auto_System_Calibration>
						ADC_Conversion(ADC_SPS);
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <Parser_process+0x5f4>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fd f98d 	bl	800114c <ADC_Conversion>
						LED(0,0,0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	2100      	movs	r1, #0
 8003e36:	2000      	movs	r0, #0
 8003e38:	f7fd ff24 	bl	8001c84 <LED>
						screen=RES;
 8003e3c:	88bb      	ldrh	r3, [r7, #4]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <Parser_process+0x5f0>)
 8003e42:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003e44:	f7fe ffb4 	bl	8002db0 <clear_buf>
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003e48:	2102      	movs	r1, #2
 8003e4a:	483b      	ldr	r0, [pc, #236]	; (8003f38 <Parser_process+0x5c0>)
 8003e4c:	f015 fbba 	bl	80195c4 <CDC_Transmit_FS>
					break;
 8003e50:	e277      	b.n	8004342 <Parser_process+0x9ca>

				case CSV_ON: CSV_format=1; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV enabled", 11); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV enabled", 11, 1000); break;
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <Parser_process+0x5f8>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	f7fe ffaa 	bl	8002db0 <clear_buf>
 8003e5c:	210b      	movs	r1, #11
 8003e5e:	4845      	ldr	r0, [pc, #276]	; (8003f74 <Parser_process+0x5fc>)
 8003e60:	f015 fbb0 	bl	80195c4 <CDC_Transmit_FS>
 8003e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e68:	220b      	movs	r2, #11
 8003e6a:	4942      	ldr	r1, [pc, #264]	; (8003f74 <Parser_process+0x5fc>)
 8003e6c:	483b      	ldr	r0, [pc, #236]	; (8003f5c <Parser_process+0x5e4>)
 8003e6e:	f00b ffc5 	bl	800fdfc <HAL_UART_Transmit>
 8003e72:	e266      	b.n	8004342 <Parser_process+0x9ca>
				case CSV_OFF: CSV_format=0; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV disabled", 12); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV disabled", 12, 1000); break;
 8003e74:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <Parser_process+0x5f8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	f7fe ff99 	bl	8002db0 <clear_buf>
 8003e7e:	210c      	movs	r1, #12
 8003e80:	483d      	ldr	r0, [pc, #244]	; (8003f78 <Parser_process+0x600>)
 8003e82:	f015 fb9f 	bl	80195c4 <CDC_Transmit_FS>
 8003e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8a:	220c      	movs	r2, #12
 8003e8c:	493a      	ldr	r1, [pc, #232]	; (8003f78 <Parser_process+0x600>)
 8003e8e:	4833      	ldr	r0, [pc, #204]	; (8003f5c <Parser_process+0x5e4>)
 8003e90:	f00b ffb4 	bl	800fdfc <HAL_UART_Transmit>
 8003e94:	e255      	b.n	8004342 <Parser_process+0x9ca>

				case GV:
					if(CSV_format==0)
 8003e96:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <Parser_process+0x5f8>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d142      	bne.n	8003f24 <Parser_process+0x5ac>
					{
						CDC_Transmit_FS((unsigned char*)"Available Global Variables:\n", 28);
 8003e9e:	211c      	movs	r1, #28
 8003ea0:	4836      	ldr	r0, [pc, #216]	; (8003f7c <Parser_process+0x604>)
 8003ea2:	f015 fb8f 	bl	80195c4 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	80fb      	strh	r3, [r7, #6]
 8003eaa:	e037      	b.n	8003f1c <Parser_process+0x5a4>
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <Parser_process+0x608>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <Parser_process+0x60c>)
 8003eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eba:	210b      	movs	r1, #11
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f015 fb81 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4830      	ldr	r0, [pc, #192]	; (8003f88 <Parser_process+0x610>)
 8003ec6:	f015 fb7d 	bl	80195c4 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <Parser_process+0x614>)
 8003ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	492e      	ldr	r1, [pc, #184]	; (8003f90 <Parser_process+0x618>)
 8003ed6:	4820      	ldr	r0, [pc, #128]	; (8003f58 <Parser_process+0x5e0>)
 8003ed8:	f019 ffea 	bl	801deb0 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003edc:	481e      	ldr	r0, [pc, #120]	; (8003f58 <Parser_process+0x5e0>)
 8003ede:	f7fc f987 	bl	80001f0 <strlen>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	481b      	ldr	r0, [pc, #108]	; (8003f58 <Parser_process+0x5e0>)
 8003eea:	f015 fb6b 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4825      	ldr	r0, [pc, #148]	; (8003f88 <Parser_process+0x610>)
 8003ef2:	f015 fb67 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <Parser_process+0x61c>)
 8003efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	4925      	ldr	r1, [pc, #148]	; (8003f98 <Parser_process+0x620>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f015 fb5b 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4822      	ldr	r0, [pc, #136]	; (8003f9c <Parser_process+0x624>)
 8003f12:	f015 fb57 	bl	80195c4 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	80fb      	strh	r3, [r7, #6]
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2b11      	cmp	r3, #17
 8003f20:	d9c4      	bls.n	8003eac <Parser_process+0x534>
 8003f22:	e078      	b.n	8004016 <Parser_process+0x69e>
						}
					}
					else
					{
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	80fb      	strh	r3, [r7, #6]
 8003f28:	e072      	b.n	8004010 <Parser_process+0x698>
 8003f2a:	bf00      	nop
 8003f2c:	200000b2 	.word	0x200000b2
 8003f30:	20000164 	.word	0x20000164
 8003f34:	20005c64 	.word	0x20005c64
 8003f38:	08021fd8 	.word	0x08021fd8
 8003f3c:	2000019c 	.word	0x2000019c
 8003f40:	08021fdc 	.word	0x08021fdc
 8003f44:	2000095c 	.word	0x2000095c
 8003f48:	2000095d 	.word	0x2000095d
 8003f4c:	2000095e 	.word	0x2000095e
 8003f50:	20000080 	.word	0x20000080
 8003f54:	08021ff8 	.word	0x08021ff8
 8003f58:	20002158 	.word	0x20002158
 8003f5c:	20007b48 	.word	0x20007b48
 8003f60:	20000970 	.word	0x20000970
 8003f64:	200008e4 	.word	0x200008e4
 8003f68:	2000004c 	.word	0x2000004c
 8003f6c:	2000009b 	.word	0x2000009b
 8003f70:	2000097f 	.word	0x2000097f
 8003f74:	08022010 	.word	0x08022010
 8003f78:	0802201c 	.word	0x0802201c
 8003f7c:	0802202c 	.word	0x0802202c
 8003f80:	08023dc0 	.word	0x08023dc0
 8003f84:	20000144 	.word	0x20000144
 8003f88:	0802204c 	.word	0x0802204c
 8003f8c:	08023dd4 	.word	0x08023dd4
 8003f90:	08022050 	.word	0x08022050
 8003f94:	200000fc 	.word	0x200000fc
 8003f98:	08023dac 	.word	0x08023dac
 8003f9c:	08022054 	.word	0x08022054
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	4ab5      	ldr	r2, [pc, #724]	; (8004278 <Parser_process+0x900>)
 8003fa4:	5cd3      	ldrb	r3, [r2, r3]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4bb4      	ldr	r3, [pc, #720]	; (800427c <Parser_process+0x904>)
 8003faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fae:	210b      	movs	r1, #11
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f015 fb07 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	48b1      	ldr	r0, [pc, #708]	; (8004280 <Parser_process+0x908>)
 8003fba:	f015 fb03 	bl	80195c4 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	4ab0      	ldr	r2, [pc, #704]	; (8004284 <Parser_process+0x90c>)
 8003fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	49af      	ldr	r1, [pc, #700]	; (8004288 <Parser_process+0x910>)
 8003fca:	48b0      	ldr	r0, [pc, #704]	; (800428c <Parser_process+0x914>)
 8003fcc:	f019 ff70 	bl	801deb0 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003fd0:	48ae      	ldr	r0, [pc, #696]	; (800428c <Parser_process+0x914>)
 8003fd2:	f7fc f90d 	bl	80001f0 <strlen>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	48ab      	ldr	r0, [pc, #684]	; (800428c <Parser_process+0x914>)
 8003fde:	f015 faf1 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	48a6      	ldr	r0, [pc, #664]	; (8004280 <Parser_process+0x908>)
 8003fe6:	f015 faed 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	4aa8      	ldr	r2, [pc, #672]	; (8004290 <Parser_process+0x918>)
 8003fee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	49a7      	ldr	r1, [pc, #668]	; (8004294 <Parser_process+0x91c>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f015 fae1 	bl	80195c4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 8004002:	2101      	movs	r1, #1
 8004004:	48a4      	ldr	r0, [pc, #656]	; (8004298 <Parser_process+0x920>)
 8004006:	f015 fadd 	bl	80195c4 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	3301      	adds	r3, #1
 800400e:	80fb      	strh	r3, [r7, #6]
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	2b11      	cmp	r3, #17
 8004014:	d9c4      	bls.n	8003fa0 <Parser_process+0x628>
						}
					}

					CDC_Transmit_FS((unsigned char*)"\r\n", 1);
 8004016:	2101      	movs	r1, #1
 8004018:	48a0      	ldr	r0, [pc, #640]	; (800429c <Parser_process+0x924>)
 800401a:	f015 fad3 	bl	80195c4 <CDC_Transmit_FS>
					clear_buf();
 800401e:	f7fe fec7 	bl	8002db0 <clear_buf>
					break;
 8004022:	e18e      	b.n	8004342 <Parser_process+0x9ca>

				case GET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 8004024:	2303      	movs	r3, #3
 8004026:	3301      	adds	r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff f818 	bl	8003060 <parser>
 8004030:	4603      	mov	r3, r0
 8004032:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 8004034:	88bb      	ldrh	r3, [r7, #4]
 8004036:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800403a:	4293      	cmp	r3, r2
 800403c:	f200 80a3 	bhi.w	8004186 <Parser_process+0x80e>
					{
						switch(GV_TYPE[RES])
 8004040:	88bb      	ldrh	r3, [r7, #4]
 8004042:	4a8d      	ldr	r2, [pc, #564]	; (8004278 <Parser_process+0x900>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	2b07      	cmp	r3, #7
 8004048:	f200 8092 	bhi.w	8004170 <Parser_process+0x7f8>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <Parser_process+0x6dc>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004075 	.word	0x08004075
 8004058:	08004199 	.word	0x08004199
 800405c:	0800409f 	.word	0x0800409f
 8004060:	080040c9 	.word	0x080040c9
 8004064:	08004199 	.word	0x08004199
 8004068:	080040f3 	.word	0x080040f3
 800406c:	08004147 	.word	0x08004147
 8004070:	0800411d 	.word	0x0800411d
						{
							case type_INT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004074:	88bb      	ldrh	r3, [r7, #4]
 8004076:	4a8a      	ldr	r2, [pc, #552]	; (80042a0 <Parser_process+0x928>)
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	4618      	mov	r0, r3
 800407e:	2203      	movs	r2, #3
 8004080:	88bb      	ldrh	r3, [r7, #4]
 8004082:	4984      	ldr	r1, [pc, #528]	; (8004294 <Parser_process+0x91c>)
 8004084:	5ccb      	ldrb	r3, [r1, r3]
 8004086:	4413      	add	r3, r2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	3302      	adds	r3, #2
 800408c:	b2d9      	uxtb	r1, r3
 800408e:	88bb      	ldrh	r3, [r7, #4]
 8004090:	4a7c      	ldr	r2, [pc, #496]	; (8004284 <Parser_process+0x90c>)
 8004092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004096:	461a      	mov	r2, r3
 8004098:	f7ff fa30 	bl	80034fc <Get_uint8>
 800409c:	e07d      	b.n	800419a <Parser_process+0x822>
							case type_INT16: break;
							case type_INT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800409e:	88bb      	ldrh	r3, [r7, #4]
 80040a0:	4a7f      	ldr	r2, [pc, #508]	; (80042a0 <Parser_process+0x928>)
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	4618      	mov	r0, r3
 80040a8:	2203      	movs	r2, #3
 80040aa:	88bb      	ldrh	r3, [r7, #4]
 80040ac:	4979      	ldr	r1, [pc, #484]	; (8004294 <Parser_process+0x91c>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	4413      	add	r3, r2
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3302      	adds	r3, #2
 80040b6:	b2d9      	uxtb	r1, r3
 80040b8:	88bb      	ldrh	r3, [r7, #4]
 80040ba:	4a72      	ldr	r2, [pc, #456]	; (8004284 <Parser_process+0x90c>)
 80040bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040c0:	461a      	mov	r2, r3
 80040c2:	f7ff fa97 	bl	80035f4 <Get_int32>
 80040c6:	e068      	b.n	800419a <Parser_process+0x822>
							case type_UINT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80040c8:	88bb      	ldrh	r3, [r7, #4]
 80040ca:	4a75      	ldr	r2, [pc, #468]	; (80042a0 <Parser_process+0x928>)
 80040cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d0:	4618      	mov	r0, r3
 80040d2:	2203      	movs	r2, #3
 80040d4:	88bb      	ldrh	r3, [r7, #4]
 80040d6:	496f      	ldr	r1, [pc, #444]	; (8004294 <Parser_process+0x91c>)
 80040d8:	5ccb      	ldrb	r3, [r1, r3]
 80040da:	4413      	add	r3, r2
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	3302      	adds	r3, #2
 80040e0:	b2d9      	uxtb	r1, r3
 80040e2:	88bb      	ldrh	r3, [r7, #4]
 80040e4:	4a67      	ldr	r2, [pc, #412]	; (8004284 <Parser_process+0x90c>)
 80040e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7ff fa06 	bl	80034fc <Get_uint8>
 80040f0:	e053      	b.n	800419a <Parser_process+0x822>
							case type_UINT16: break;
							case type_UINT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80040f2:	88bb      	ldrh	r3, [r7, #4]
 80040f4:	4a6a      	ldr	r2, [pc, #424]	; (80042a0 <Parser_process+0x928>)
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	4618      	mov	r0, r3
 80040fc:	2203      	movs	r2, #3
 80040fe:	88bb      	ldrh	r3, [r7, #4]
 8004100:	4964      	ldr	r1, [pc, #400]	; (8004294 <Parser_process+0x91c>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	4413      	add	r3, r2
 8004106:	b2db      	uxtb	r3, r3
 8004108:	3302      	adds	r3, #2
 800410a:	b2d9      	uxtb	r1, r3
 800410c:	88bb      	ldrh	r3, [r7, #4]
 800410e:	4a5d      	ldr	r2, [pc, #372]	; (8004284 <Parser_process+0x90c>)
 8004110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004114:	461a      	mov	r2, r3
 8004116:	f7ff fa6d 	bl	80035f4 <Get_int32>
 800411a:	e03e      	b.n	800419a <Parser_process+0x822>
							case type_DOUBLE: Get_double((double*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800411c:	88bb      	ldrh	r3, [r7, #4]
 800411e:	4a60      	ldr	r2, [pc, #384]	; (80042a0 <Parser_process+0x928>)
 8004120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004124:	4618      	mov	r0, r3
 8004126:	2203      	movs	r2, #3
 8004128:	88bb      	ldrh	r3, [r7, #4]
 800412a:	495a      	ldr	r1, [pc, #360]	; (8004294 <Parser_process+0x91c>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	4413      	add	r3, r2
 8004130:	b2db      	uxtb	r3, r3
 8004132:	3302      	adds	r3, #2
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	88bb      	ldrh	r3, [r7, #4]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <Parser_process+0x90c>)
 800413a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800413e:	461a      	mov	r2, r3
 8004140:	f7ff fb60 	bl	8003804 <Get_double>
 8004144:	e029      	b.n	800419a <Parser_process+0x822>
							case type_FLOAT:  Get_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004146:	88bb      	ldrh	r3, [r7, #4]
 8004148:	4a55      	ldr	r2, [pc, #340]	; (80042a0 <Parser_process+0x928>)
 800414a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414e:	4618      	mov	r0, r3
 8004150:	2203      	movs	r2, #3
 8004152:	88bb      	ldrh	r3, [r7, #4]
 8004154:	494f      	ldr	r1, [pc, #316]	; (8004294 <Parser_process+0x91c>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	4413      	add	r3, r2
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3302      	adds	r3, #2
 800415e:	b2d9      	uxtb	r1, r3
 8004160:	88bb      	ldrh	r3, [r7, #4]
 8004162:	4a48      	ldr	r2, [pc, #288]	; (8004284 <Parser_process+0x90c>)
 8004164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004168:	461a      	mov	r2, r3
 800416a:	f7ff fac1 	bl	80036f0 <Get_float>
 800416e:	e014      	b.n	800419a <Parser_process+0x822>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004170:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <Parser_process+0x92c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2209      	movs	r2, #9
 8004176:	b292      	uxth	r2, r2
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f015 fa22 	bl	80195c4 <CDC_Transmit_FS>
 8004180:	f7fe fe16 	bl	8002db0 <clear_buf>
 8004184:	e009      	b.n	800419a <Parser_process+0x822>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <Parser_process+0x92c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2209      	movs	r2, #9
 800418c:	b292      	uxth	r2, r2
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f015 fa17 	bl	80195c4 <CDC_Transmit_FS>
 8004196:	e000      	b.n	800419a <Parser_process+0x822>
							case type_INT16: break;
 8004198:	bf00      	nop
					}
					clear_buf(); break;
 800419a:	f7fe fe09 	bl	8002db0 <clear_buf>
 800419e:	e0d0      	b.n	8004342 <Parser_process+0x9ca>


				case SET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 80041a0:	2303      	movs	r3, #3
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe ff5a 	bl	8003060 <parser>
 80041ac:	4603      	mov	r3, r0
 80041ae:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 80041b0:	88bb      	ldrh	r3, [r7, #4]
 80041b2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f200 80a3 	bhi.w	8004302 <Parser_process+0x98a>
					{
						switch(GV_TYPE[RES])
 80041bc:	88bb      	ldrh	r3, [r7, #4]
 80041be:	4a2e      	ldr	r2, [pc, #184]	; (8004278 <Parser_process+0x900>)
 80041c0:	5cd3      	ldrb	r3, [r2, r3]
 80041c2:	2b07      	cmp	r3, #7
 80041c4:	f200 8092 	bhi.w	80042ec <Parser_process+0x974>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <Parser_process+0x858>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041f1 	.word	0x080041f1
 80041d4:	08004213 	.word	0x08004213
 80041d8:	08004235 	.word	0x08004235
 80041dc:	08004257 	.word	0x08004257
 80041e0:	08004315 	.word	0x08004315
 80041e4:	080042a9 	.word	0x080042a9
 80041e8:	080042cb 	.word	0x080042cb
 80041ec:	08004315 	.word	0x08004315
						{
							case type_INT8: Set_int8((int8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80041f0:	88bb      	ldrh	r3, [r7, #4]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <Parser_process+0x928>)
 80041f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f8:	4618      	mov	r0, r3
 80041fa:	2203      	movs	r2, #3
 80041fc:	88bb      	ldrh	r3, [r7, #4]
 80041fe:	4925      	ldr	r1, [pc, #148]	; (8004294 <Parser_process+0x91c>)
 8004200:	5ccb      	ldrb	r3, [r1, r3]
 8004202:	4413      	add	r3, r2
 8004204:	b2db      	uxtb	r3, r3
 8004206:	3302      	adds	r3, #2
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4619      	mov	r1, r3
 800420c:	f7fe ffcc 	bl	80031a8 <Set_int8>
 8004210:	e081      	b.n	8004316 <Parser_process+0x99e>
							case type_INT16: Set_int16((int16_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004212:	88bb      	ldrh	r3, [r7, #4]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <Parser_process+0x928>)
 8004216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421a:	4618      	mov	r0, r3
 800421c:	2203      	movs	r2, #3
 800421e:	88bb      	ldrh	r3, [r7, #4]
 8004220:	491c      	ldr	r1, [pc, #112]	; (8004294 <Parser_process+0x91c>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	4413      	add	r3, r2
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3302      	adds	r3, #2
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	f7ff f811 	bl	8003254 <Set_int16>
 8004232:	e070      	b.n	8004316 <Parser_process+0x99e>
							case type_INT32: Set_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004234:	88bb      	ldrh	r3, [r7, #4]
 8004236:	4a1a      	ldr	r2, [pc, #104]	; (80042a0 <Parser_process+0x928>)
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	4618      	mov	r0, r3
 800423e:	2203      	movs	r2, #3
 8004240:	88bb      	ldrh	r3, [r7, #4]
 8004242:	4914      	ldr	r1, [pc, #80]	; (8004294 <Parser_process+0x91c>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	4413      	add	r3, r2
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3302      	adds	r3, #2
 800424c:	b2db      	uxtb	r3, r3
 800424e:	4619      	mov	r1, r3
 8004250:	f7ff f858 	bl	8003304 <Set_int32>
 8004254:	e05f      	b.n	8004316 <Parser_process+0x99e>
							case type_UINT8: Set_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004256:	88bb      	ldrh	r3, [r7, #4]
 8004258:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <Parser_process+0x928>)
 800425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425e:	4618      	mov	r0, r3
 8004260:	2203      	movs	r2, #3
 8004262:	88bb      	ldrh	r3, [r7, #4]
 8004264:	490b      	ldr	r1, [pc, #44]	; (8004294 <Parser_process+0x91c>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	4413      	add	r3, r2
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3302      	adds	r3, #2
 800426e:	b2db      	uxtb	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	f7fe ff47 	bl	8003104 <Set_uint8>
 8004276:	e04e      	b.n	8004316 <Parser_process+0x99e>
 8004278:	08023dc0 	.word	0x08023dc0
 800427c:	20000144 	.word	0x20000144
 8004280:	08022058 	.word	0x08022058
 8004284:	08023dd4 	.word	0x08023dd4
 8004288:	08022050 	.word	0x08022050
 800428c:	20002158 	.word	0x20002158
 8004290:	200000fc 	.word	0x200000fc
 8004294:	08023dac 	.word	0x08023dac
 8004298:	08022054 	.word	0x08022054
 800429c:	08021e30 	.word	0x08021e30
 80042a0:	200000b4 	.word	0x200000b4
 80042a4:	2000019c 	.word	0x2000019c
							case type_UINT16: break;
							case type_UINT32: Set_uint32((uint32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80042a8:	88bb      	ldrh	r3, [r7, #4]
 80042aa:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <Parser_process+0x9e8>)
 80042ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b0:	4618      	mov	r0, r3
 80042b2:	2203      	movs	r2, #3
 80042b4:	88bb      	ldrh	r3, [r7, #4]
 80042b6:	492b      	ldr	r1, [pc, #172]	; (8004364 <Parser_process+0x9ec>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	4413      	add	r3, r2
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	3302      	adds	r3, #2
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	4619      	mov	r1, r3
 80042c4:	f7ff f880 	bl	80033c8 <Set_uint32>
 80042c8:	e025      	b.n	8004316 <Parser_process+0x99e>
							case type_DOUBLE: break;
							case type_FLOAT: Set_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80042ca:	88bb      	ldrh	r3, [r7, #4]
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <Parser_process+0x9e8>)
 80042ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d2:	4618      	mov	r0, r3
 80042d4:	2203      	movs	r2, #3
 80042d6:	88bb      	ldrh	r3, [r7, #4]
 80042d8:	4922      	ldr	r1, [pc, #136]	; (8004364 <Parser_process+0x9ec>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	4413      	add	r3, r2
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3302      	adds	r3, #2
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	4619      	mov	r1, r3
 80042e6:	f7ff f8b7 	bl	8003458 <Set_float>
 80042ea:	e014      	b.n	8004316 <Parser_process+0x99e>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 80042ec:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <Parser_process+0x9f0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2209      	movs	r2, #9
 80042f2:	b292      	uxth	r2, r2
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f015 f964 	bl	80195c4 <CDC_Transmit_FS>
 80042fc:	f7fe fd58 	bl	8002db0 <clear_buf>
 8004300:	e009      	b.n	8004316 <Parser_process+0x99e>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8004302:	4b19      	ldr	r3, [pc, #100]	; (8004368 <Parser_process+0x9f0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2209      	movs	r2, #9
 8004308:	b292      	uxth	r2, r2
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f015 f959 	bl	80195c4 <CDC_Transmit_FS>
 8004312:	e000      	b.n	8004316 <Parser_process+0x99e>
							case type_UINT16: break;
 8004314:	bf00      	nop
					}
					clear_buf(); break;
 8004316:	f7fe fd4b 	bl	8002db0 <clear_buf>
 800431a:	e012      	b.n	8004342 <Parser_process+0x9ca>


				case SAVE_CMD:
					CDC_Transmit_FS((unsigned char*)"FLASH MEMORY IS BROKEN!!", 24);
 800431c:	2118      	movs	r1, #24
 800431e:	4813      	ldr	r0, [pc, #76]	; (800436c <Parser_process+0x9f4>)
 8004320:	f015 f950 	bl	80195c4 <CDC_Transmit_FS>
					clear_buf(); break;
 8004324:	f7fe fd44 	bl	8002db0 <clear_buf>
 8004328:	e00b      	b.n	8004342 <Parser_process+0x9ca>

				default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <Parser_process+0x9f0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2209      	movs	r2, #9
 8004330:	b292      	uxth	r2, r2
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f015 f945 	bl	80195c4 <CDC_Transmit_FS>
 800433a:	f7fe fd39 	bl	8002db0 <clear_buf>
 800433e:	e000      	b.n	8004342 <Parser_process+0x9ca>
				case 0xFFFF: break;
 8004340:	bf00      	nop

			}
			CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8004342:	2102      	movs	r1, #2
 8004344:	480a      	ldr	r0, [pc, #40]	; (8004370 <Parser_process+0x9f8>)
 8004346:	f015 f93d 	bl	80195c4 <CDC_Transmit_FS>
			USBTimeOutRX=-1;
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <Parser_process+0x9fc>)
 800434c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004350:	801a      	strh	r2, [r3, #0]
		}
	}
	sleep(5);
 8004352:	2005      	movs	r0, #5
 8004354:	f7fe fc94 	bl	8002c80 <sleep>
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}
 8004360:	200000b4 	.word	0x200000b4
 8004364:	08023dac 	.word	0x08023dac
 8004368:	2000019c 	.word	0x2000019c
 800436c:	0802205c 	.word	0x0802205c
 8004370:	08021e30 	.word	0x08021e30
 8004374:	20000234 	.word	0x20000234

08004378 <SPI1_Send>:
w25_info_t  w25_info;


//-------------------------------------------------------------
void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit (&hspi3, dt, cnt, 5000);
 8004384:	887a      	ldrh	r2, [r7, #2]
 8004386:	f241 3388 	movw	r3, #5000	; 0x1388
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <SPI1_Send+0x24>)
 800438e:	f009 fd34 	bl	800ddfa <HAL_SPI_Transmit>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20006484 	.word	0x20006484

080043a0 <SPI1_Recv>:
//-------------------------------------------------------------
void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive (&hspi3, dt, cnt, 5000);
 80043ac:	887a      	ldrh	r2, [r7, #2]
 80043ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4803      	ldr	r0, [pc, #12]	; (80043c4 <SPI1_Recv+0x24>)
 80043b6:	f009 fe8e 	bl	800e0d6 <HAL_SPI_Receive>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20006484 	.word	0x20006484

080043c8 <W25_WriteEnable>:
//-------------------------------------------------------------

void W25_WriteEnable(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	uint8_t command[1];
	cs_set();
 80043ce:	2200      	movs	r2, #0
 80043d0:	2104      	movs	r1, #4
 80043d2:	4809      	ldr	r0, [pc, #36]	; (80043f8 <W25_WriteEnable+0x30>)
 80043d4:	f005 fe84 	bl	800a0e0 <HAL_GPIO_WritePin>
	command[0]=0x06;
 80043d8:	2306      	movs	r3, #6
 80043da:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 80043dc:	1d3b      	adds	r3, r7, #4
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ffc9 	bl	8004378 <SPI1_Send>
	cs_reset();
 80043e6:	2201      	movs	r2, #1
 80043e8:	2104      	movs	r1, #4
 80043ea:	4803      	ldr	r0, [pc, #12]	; (80043f8 <W25_WriteEnable+0x30>)
 80043ec:	f005 fe78 	bl	800a0e0 <HAL_GPIO_WritePin>
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	48000c00 	.word	0x48000c00

080043fc <W25_Reset>:
	SPI1_Send(command, 1);
	cs_reset();
}

void W25_Reset (void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
	uint8_t command[1];
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004402:	bf00      	nop
 8004404:	20c0      	movs	r0, #192	; 0xc0
 8004406:	f000 f81d 	bl	8004444 <W25_Read_Status>
 800440a:	4603      	mov	r3, r0
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d0f7      	beq.n	8004404 <W25_Reset+0x8>
	cs_set();
 8004414:	2200      	movs	r2, #0
 8004416:	2104      	movs	r1, #4
 8004418:	4809      	ldr	r0, [pc, #36]	; (8004440 <W25_Reset+0x44>)
 800441a:	f005 fe61 	bl	800a0e0 <HAL_GPIO_WritePin>
	command[0] = W25_RESET;
 800441e:	23ff      	movs	r3, #255	; 0xff
 8004420:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ffa6 	bl	8004378 <SPI1_Send>
	cs_reset();
 800442c:	2201      	movs	r2, #1
 800442e:	2104      	movs	r1, #4
 8004430:	4803      	ldr	r0, [pc, #12]	; (8004440 <W25_Reset+0x44>)
 8004432:	f005 fe55 	bl	800a0e0 <HAL_GPIO_WritePin>
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	48000c00 	.word	0x48000c00

08004444 <W25_Read_Status>:
//-------------------------------------------------------------

uint8_t W25_Read_Status(uint8_t StatusRegAdd)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint8_t data[1];
	command[0] = 0x0F; 		// Read Status Register
 800444e:	230f      	movs	r3, #15
 8004450:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	737b      	strb	r3, [r7, #13]
	cs_set();
 8004456:	2200      	movs	r2, #0
 8004458:	2104      	movs	r1, #4
 800445a:	480c      	ldr	r0, [pc, #48]	; (800448c <W25_Read_Status+0x48>)
 800445c:	f005 fe40 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 8004460:	f107 030c 	add.w	r3, r7, #12
 8004464:	2102      	movs	r1, #2
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff86 	bl	8004378 <SPI1_Send>
	SPI1_Recv(data, 1);
 800446c:	f107 0308 	add.w	r3, r7, #8
 8004470:	2101      	movs	r1, #1
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff94 	bl	80043a0 <SPI1_Recv>
	cs_reset();
 8004478:	2201      	movs	r2, #1
 800447a:	2104      	movs	r1, #4
 800447c:	4803      	ldr	r0, [pc, #12]	; (800448c <W25_Read_Status+0x48>)
 800447e:	f005 fe2f 	bl	800a0e0 <HAL_GPIO_WritePin>
	return data[0];
 8004482:	7a3b      	ldrb	r3, [r7, #8]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	48000c00 	.word	0x48000c00

08004490 <W25_Write_Status>:

void W25_Write_Status(uint8_t StatusRegAdd, uint8_t data)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	460a      	mov	r2, r1
 800449a:	71fb      	strb	r3, [r7, #7]
 800449c:	4613      	mov	r3, r2
 800449e:	71bb      	strb	r3, [r7, #6]
	uint8_t command[3];
	command[0] = 0x1F; 		// Write Status Register
 80044a0:	231f      	movs	r3, #31
 80044a2:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	737b      	strb	r3, [r7, #13]
	command[2] = data;
 80044a8:	79bb      	ldrb	r3, [r7, #6]
 80044aa:	73bb      	strb	r3, [r7, #14]
	cs_set();
 80044ac:	2200      	movs	r2, #0
 80044ae:	2104      	movs	r1, #4
 80044b0:	4808      	ldr	r0, [pc, #32]	; (80044d4 <W25_Write_Status+0x44>)
 80044b2:	f005 fe15 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 80044b6:	f107 030c 	add.w	r3, r7, #12
 80044ba:	2103      	movs	r1, #3
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff5b 	bl	8004378 <SPI1_Send>
	cs_reset();
 80044c2:	2201      	movs	r2, #1
 80044c4:	2104      	movs	r1, #4
 80044c6:	4803      	ldr	r0, [pc, #12]	; (80044d4 <W25_Write_Status+0x44>)
 80044c8:	f005 fe0a 	bl	800a0e0 <HAL_GPIO_WritePin>
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	48000c00 	.word	0x48000c00

080044d8 <W25_Block_Erase>:


void W25_Block_Erase(uint32_t page_addr)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	uint8_t command[4];

	W25_WriteEnable();
 80044e0:	f7ff ff72 	bl	80043c8 <W25_WriteEnable>

	command[0] = 0xD8;						// Block erase
 80044e4:	23d8      	movs	r3, #216	; 0xd8
 80044e6:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;						// Dummy byte
 80044e8:	2300      	movs	r3, #0
 80044ea:	737b      	strb	r3, [r7, #13]
	command[2] = (page_addr >> 8) & 0xFF;	// Start page address
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	73bb      	strb	r3, [r7, #14]
	command[3] = page_addr & 0xFF;			// Start page address
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	73fb      	strb	r3, [r7, #15]

	cs_set();
 80044fa:	2200      	movs	r2, #0
 80044fc:	2104      	movs	r1, #4
 80044fe:	480e      	ldr	r0, [pc, #56]	; (8004538 <W25_Block_Erase+0x60>)
 8004500:	f005 fdee 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	2104      	movs	r1, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff ff34 	bl	8004378 <SPI1_Send>
	cs_reset();
 8004510:	2201      	movs	r2, #1
 8004512:	2104      	movs	r1, #4
 8004514:	4808      	ldr	r0, [pc, #32]	; (8004538 <W25_Block_Erase+0x60>)
 8004516:	f005 fde3 	bl	800a0e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(3)&0x01)==1);
 800451a:	bf00      	nop
 800451c:	2003      	movs	r0, #3
 800451e:	f7ff ff91 	bl	8004444 <W25_Read_Status>
 8004522:	4603      	mov	r3, r0
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d0f7      	beq.n	800451c <W25_Block_Erase+0x44>
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	48000c00 	.word	0x48000c00

0800453c <W25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
//-------------------------------------------------------------
uint32_t W25_Read_ID(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
	uint8_t command[4];
	uint8_t dt[3];
	command[0] = W25_GET_JEDEC_ID;
 8004542:	239f      	movs	r3, #159	; 0x9f
 8004544:	713b      	strb	r3, [r7, #4]
	command[1] = 0x00;
 8004546:	2300      	movs	r3, #0
 8004548:	717b      	strb	r3, [r7, #5]
	cs_set();
 800454a:	2200      	movs	r2, #0
 800454c:	2104      	movs	r1, #4
 800454e:	480e      	ldr	r0, [pc, #56]	; (8004588 <W25_Read_ID+0x4c>)
 8004550:	f005 fdc6 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2102      	movs	r1, #2
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff0d 	bl	8004378 <SPI1_Send>
	SPI1_Recv(dt,3);
 800455e:	463b      	mov	r3, r7
 8004560:	2103      	movs	r1, #3
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff1c 	bl	80043a0 <SPI1_Recv>
	cs_reset();
 8004568:	2201      	movs	r2, #1
 800456a:	2104      	movs	r1, #4
 800456c:	4806      	ldr	r0, [pc, #24]	; (8004588 <W25_Read_ID+0x4c>)
 800456e:	f005 fdb7 	bl	800a0e0 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8004572:	783b      	ldrb	r3, [r7, #0]
 8004574:	041a      	lsls	r2, r3, #16
 8004576:	787b      	ldrb	r3, [r7, #1]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	4313      	orrs	r3, r2
 800457c:	78ba      	ldrb	r2, [r7, #2]
 800457e:	4313      	orrs	r3, r2
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	48000c00 	.word	0x48000c00

0800458c <W25_ReadBuf>:


void W25_ReadBuf(uint8_t*data, uint16_t blk_addr)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t address=(blk_addr>>2)*64;
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	b29b      	uxth	r3, r3
 800459e:	019b      	lsls	r3, r3, #6
 80045a0:	81fb      	strh	r3, [r7, #14]
	uint16_t column=(blk_addr&0x03)*512;
 80045a2:	887b      	ldrh	r3, [r7, #2]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	025b      	lsls	r3, r3, #9
 80045ac:	81bb      	strh	r3, [r7, #12]

	while ((W25_Read_Status(0xC0)&0x01)==1);
 80045ae:	bf00      	nop
 80045b0:	20c0      	movs	r0, #192	; 0xc0
 80045b2:	f7ff ff47 	bl	8004444 <W25_Read_Status>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d0f7      	beq.n	80045b0 <W25_ReadBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 80045c0:	2313      	movs	r3, #19
 80045c2:	723b      	strb	r3, [r7, #8]
	command[1] = W25_DUMMY;
 80045c4:	2300      	movs	r3, #0
 80045c6:	727b      	strb	r3, [r7, #9]
	command[2] = (address >> 8) & 0xFF;
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	72bb      	strb	r3, [r7, #10]
	command[3] = address & 0xFF;
 80045d2:	89fb      	ldrh	r3, [r7, #14]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	72fb      	strb	r3, [r7, #11]
	cs_set();
 80045d8:	2200      	movs	r2, #0
 80045da:	2104      	movs	r1, #4
 80045dc:	4822      	ldr	r0, [pc, #136]	; (8004668 <W25_ReadBuf+0xdc>)
 80045de:	f005 fd7f 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	2104      	movs	r1, #4
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fec5 	bl	8004378 <SPI1_Send>
	cs_reset();
 80045ee:	2201      	movs	r2, #1
 80045f0:	2104      	movs	r1, #4
 80045f2:	481d      	ldr	r0, [pc, #116]	; (8004668 <W25_ReadBuf+0xdc>)
 80045f4:	f005 fd74 	bl	800a0e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80045f8:	bf00      	nop
 80045fa:	20c0      	movs	r0, #192	; 0xc0
 80045fc:	f7ff ff22 	bl	8004444 <W25_Read_Status>
 8004600:	4603      	mov	r3, r0
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d0f7      	beq.n	80045fa <W25_ReadBuf+0x6e>

	// Read from buffer
	command[0] = W25_FAST_READ;
 800460a:	230b      	movs	r3, #11
 800460c:	723b      	strb	r3, [r7, #8]
	command[1] = (column >> 8) & 0xFF;
 800460e:	89bb      	ldrh	r3, [r7, #12]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	b29b      	uxth	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	727b      	strb	r3, [r7, #9]
	command[2] = column & 0xFF;
 8004618:	89bb      	ldrh	r3, [r7, #12]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	72bb      	strb	r3, [r7, #10]
	command[3] = W25_DUMMY;
 800461e:	2300      	movs	r3, #0
 8004620:	72fb      	strb	r3, [r7, #11]
	cs_set();
 8004622:	2200      	movs	r2, #0
 8004624:	2104      	movs	r1, #4
 8004626:	4810      	ldr	r0, [pc, #64]	; (8004668 <W25_ReadBuf+0xdc>)
 8004628:	f005 fd5a 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	2104      	movs	r1, #4
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fea0 	bl	8004378 <SPI1_Send>
	SPI1_Recv(data, 512);
 8004638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff feaf 	bl	80043a0 <SPI1_Recv>
	cs_reset();
 8004642:	2201      	movs	r2, #1
 8004644:	2104      	movs	r1, #4
 8004646:	4808      	ldr	r0, [pc, #32]	; (8004668 <W25_ReadBuf+0xdc>)
 8004648:	f005 fd4a 	bl	800a0e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 800464c:	bf00      	nop
 800464e:	20c0      	movs	r0, #192	; 0xc0
 8004650:	f7ff fef8 	bl	8004444 <W25_Read_Status>
 8004654:	4603      	mov	r3, r0
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d0f7      	beq.n	800464e <W25_ReadBuf+0xc2>
}
 800465e:	bf00      	nop
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	48000c00 	.word	0x48000c00

0800466c <W25_WriteBuf>:

void W25_WriteBuf(uint8_t*data, uint16_t blk_addr)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t i;
	uint16_t address=(blk_addr>>2)*64;
 8004678:	887b      	ldrh	r3, [r7, #2]
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	b29b      	uxth	r3, r3
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	82bb      	strh	r3, [r7, #20]
	uint16_t column=(blk_addr&0x03)*512;
 8004682:	887b      	ldrh	r3, [r7, #2]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	b29b      	uxth	r3, r3
 800468a:	025b      	lsls	r3, r3, #9
 800468c:	827b      	strh	r3, [r7, #18]

	// Прочитаем блок 2048 прежде чем стереть
	while ((W25_Read_Status(0xC0)&0x01)==1);
 800468e:	bf00      	nop
 8004690:	20c0      	movs	r0, #192	; 0xc0
 8004692:	f7ff fed7 	bl	8004444 <W25_Read_Status>
 8004696:	4603      	mov	r3, r0
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d0f7      	beq.n	8004690 <W25_WriteBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 80046a0:	2313      	movs	r3, #19
 80046a2:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80046a4:	2300      	movs	r3, #0
 80046a6:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;
 80046a8:	8abb      	ldrh	r3, [r7, #20]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;
 80046b2:	8abb      	ldrh	r3, [r7, #20]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80046b8:	2200      	movs	r2, #0
 80046ba:	2104      	movs	r1, #4
 80046bc:	4857      	ldr	r0, [pc, #348]	; (800481c <W25_WriteBuf+0x1b0>)
 80046be:	f005 fd0f 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	2104      	movs	r1, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fe55 	bl	8004378 <SPI1_Send>
	cs_reset();
 80046ce:	2201      	movs	r2, #1
 80046d0:	2104      	movs	r1, #4
 80046d2:	4852      	ldr	r0, [pc, #328]	; (800481c <W25_WriteBuf+0x1b0>)
 80046d4:	f005 fd04 	bl	800a0e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80046d8:	bf00      	nop
 80046da:	20c0      	movs	r0, #192	; 0xc0
 80046dc:	f7ff feb2 	bl	8004444 <W25_Read_Status>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d0f7      	beq.n	80046da <W25_WriteBuf+0x6e>
	// Read from buffer
	command[0] = W25_FAST_READ;
 80046ea:	230b      	movs	r3, #11
 80046ec:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73bb      	strb	r3, [r7, #14]
	command[3] = W25_DUMMY;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80046fa:	2200      	movs	r2, #0
 80046fc:	2104      	movs	r1, #4
 80046fe:	4847      	ldr	r0, [pc, #284]	; (800481c <W25_WriteBuf+0x1b0>)
 8004700:	f005 fcee 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	2104      	movs	r1, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fe34 	bl	8004378 <SPI1_Send>
	SPI1_Recv(buf, 2048);
 8004710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004714:	4842      	ldr	r0, [pc, #264]	; (8004820 <W25_WriteBuf+0x1b4>)
 8004716:	f7ff fe43 	bl	80043a0 <SPI1_Recv>
	cs_reset();
 800471a:	2201      	movs	r2, #1
 800471c:	2104      	movs	r1, #4
 800471e:	483f      	ldr	r0, [pc, #252]	; (800481c <W25_WriteBuf+0x1b0>)
 8004720:	f005 fcde 	bl	800a0e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004724:	bf00      	nop
 8004726:	20c0      	movs	r0, #192	; 0xc0
 8004728:	f7ff fe8c 	bl	8004444 <W25_Read_Status>
 800472c:	4603      	mov	r3, r0
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d0f7      	beq.n	8004726 <W25_WriteBuf+0xba>

	for(i=0;i<512;i++)buf[column+i]=data[i];
 8004736:	2300      	movs	r3, #0
 8004738:	82fb      	strh	r3, [r7, #22]
 800473a:	e00b      	b.n	8004754 <W25_WriteBuf+0xe8>
 800473c:	8afb      	ldrh	r3, [r7, #22]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	441a      	add	r2, r3
 8004742:	8a79      	ldrh	r1, [r7, #18]
 8004744:	8afb      	ldrh	r3, [r7, #22]
 8004746:	440b      	add	r3, r1
 8004748:	7811      	ldrb	r1, [r2, #0]
 800474a:	4a35      	ldr	r2, [pc, #212]	; (8004820 <W25_WriteBuf+0x1b4>)
 800474c:	54d1      	strb	r1, [r2, r3]
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	3301      	adds	r3, #1
 8004752:	82fb      	strh	r3, [r7, #22]
 8004754:	8afb      	ldrh	r3, [r7, #22]
 8004756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475a:	d3ef      	bcc.n	800473c <W25_WriteBuf+0xd0>

	//memcpy(buf[column], data, 512);

	// Сотрем блок 128кБ
	W25_Block_Erase(address);
 800475c:	8abb      	ldrh	r3, [r7, #20]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff feba 	bl	80044d8 <W25_Block_Erase>

	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004764:	bf00      	nop
 8004766:	20c0      	movs	r0, #192	; 0xc0
 8004768:	f7ff fe6c 	bl	8004444 <W25_Read_Status>
 800476c:	4603      	mov	r3, r0
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d0f7      	beq.n	8004766 <W25_WriteBuf+0xfa>
	// Пишем в буфер
	W25_WriteEnable();
 8004776:	f7ff fe27 	bl	80043c8 <W25_WriteEnable>
	command[0] = PROGRAM_DATA_LOAD;
 800477a:	2302      	movs	r3, #2
 800477c:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	73bb      	strb	r3, [r7, #14]
	cs_set();
 8004786:	2200      	movs	r2, #0
 8004788:	2104      	movs	r1, #4
 800478a:	4824      	ldr	r0, [pc, #144]	; (800481c <W25_WriteBuf+0x1b0>)
 800478c:	f005 fca8 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	2103      	movs	r1, #3
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fdee 	bl	8004378 <SPI1_Send>
	SPI1_Send(buf, 2048);
 800479c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047a0:	481f      	ldr	r0, [pc, #124]	; (8004820 <W25_WriteBuf+0x1b4>)
 80047a2:	f7ff fde9 	bl	8004378 <SPI1_Send>
	cs_reset();
 80047a6:	2201      	movs	r2, #1
 80047a8:	2104      	movs	r1, #4
 80047aa:	481c      	ldr	r0, [pc, #112]	; (800481c <W25_WriteBuf+0x1b0>)
 80047ac:	f005 fc98 	bl	800a0e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80047b0:	bf00      	nop
 80047b2:	20c0      	movs	r0, #192	; 0xc0
 80047b4:	f7ff fe46 	bl	8004444 <W25_Read_Status>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d0f7      	beq.n	80047b2 <W25_WriteBuf+0x146>

	// Переносим во внутреннюю память
	W25_WriteEnable();
 80047c2:	f7ff fe01 	bl	80043c8 <W25_WriteEnable>
	command[0] = PROGRAM_EXECUTE;
 80047c6:	2310      	movs	r3, #16
 80047c8:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80047ca:	2300      	movs	r3, #0
 80047cc:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;	// Адрес страницы
 80047ce:	8abb      	ldrh	r3, [r7, #20]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;			// Адрес страницы
 80047d8:	8abb      	ldrh	r3, [r7, #20]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80047de:	2200      	movs	r2, #0
 80047e0:	2104      	movs	r1, #4
 80047e2:	480e      	ldr	r0, [pc, #56]	; (800481c <W25_WriteBuf+0x1b0>)
 80047e4:	f005 fc7c 	bl	800a0e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80047e8:	f107 030c 	add.w	r3, r7, #12
 80047ec:	2104      	movs	r1, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fdc2 	bl	8004378 <SPI1_Send>
	cs_reset();
 80047f4:	2201      	movs	r2, #1
 80047f6:	2104      	movs	r1, #4
 80047f8:	4808      	ldr	r0, [pc, #32]	; (800481c <W25_WriteBuf+0x1b0>)
 80047fa:	f005 fc71 	bl	800a0e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80047fe:	bf00      	nop
 8004800:	20c0      	movs	r0, #192	; 0xc0
 8004802:	f7ff fe1f 	bl	8004444 <W25_Read_Status>
 8004806:	4603      	mov	r3, r0
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d0f7      	beq.n	8004800 <W25_WriteBuf+0x194>
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	48000c00 	.word	0x48000c00
 8004820:	200064e8 	.word	0x200064e8

08004824 <W25_Init>:

//-------------------------------------------------------------
void W25_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800482a:	2064      	movs	r0, #100	; 0x64
 800482c:	f003 f96e 	bl	8007b0c <HAL_Delay>
	W25_Reset();
 8004830:	f7ff fde4 	bl	80043fc <W25_Reset>
	HAL_Delay(100);
 8004834:	2064      	movs	r0, #100	; 0x64
 8004836:	f003 f969 	bl	8007b0c <HAL_Delay>
	unsigned int id = W25_Read_ID();
 800483a:	f7ff fe7f 	bl	800453c <W25_Read_ID>
 800483e:	6078      	str	r0, [r7, #4]

	if(id!=0xEFAA21)ERROR_REG|=(0x01<<Memory_err);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <W25_Init+0x68>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d005      	beq.n	8004854 <W25_Init+0x30>
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <W25_Init+0x6c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f043 0304 	orr.w	r3, r3, #4
 8004850:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <W25_Init+0x6c>)
 8004852:	6013      	str	r3, [r2, #0]

	w25_info.PageSize=2048;
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <W25_Init+0x70>)
 8004856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800485a:	801a      	strh	r2, [r3, #0]
	w25_info.PageCount=0xFFFF;
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <W25_Init+0x70>)
 800485e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004862:	605a      	str	r2, [r3, #4]
	w25_info.BlockSize=w25_info.PageSize*64;
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <W25_Init+0x70>)
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	019b      	lsls	r3, r3, #6
 800486a:	461a      	mov	r2, r3
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <W25_Init+0x70>)
 800486e:	611a      	str	r2, [r3, #16]
	w25_info.NumKB=(w25_info.BlockSize*128)/8;
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <W25_Init+0x70>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	01db      	lsls	r3, r3, #7
 8004876:	08db      	lsrs	r3, r3, #3
 8004878:	4a06      	ldr	r2, [pc, #24]	; (8004894 <W25_Init+0x70>)
 800487a:	6193      	str	r3, [r2, #24]

	W25_Write_Status(0xA0, 0x00);
 800487c:	2100      	movs	r1, #0
 800487e:	20a0      	movs	r0, #160	; 0xa0
 8004880:	f7ff fe06 	bl	8004490 <W25_Write_Status>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	00efaa21 	.word	0x00efaa21
 8004890:	20000958 	.word	0x20000958
 8004894:	20006464 	.word	0x20006464

08004898 <Approximation_MC110>:
double Temperature_correction(double uncorrect_Pressure, double affect_temp);



void Approximation_MC110(int32_t meas_data, int32_t power_data)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
	double LSB;
	double temp_diff;

	int32_t ADC_MEAS_ZERO = meas_data-zero_ADC[0];
 80048a2:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <Approximation_MC110+0x108>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	61fb      	str	r3, [r7, #28]

	// Считаем LSB
	LSB=0.00000000028857241176*(double)ADC_MEAS_ZERO+1.41200835380823000000;
 80048ac:	69f8      	ldr	r0, [r7, #28]
 80048ae:	f7fb fe49 	bl	8000544 <__aeabi_i2d>
 80048b2:	a32f      	add	r3, pc, #188	; (adr r3, 8004970 <Approximation_MC110+0xd8>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f7fb feae 	bl	8000618 <__aeabi_dmul>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4610      	mov	r0, r2
 80048c2:	4619      	mov	r1, r3
 80048c4:	a32c      	add	r3, pc, #176	; (adr r3, 8004978 <Approximation_MC110+0xe0>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fcef 	bl	80002ac <__adddf3>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим температуру
	Temperature2=0.000128471469464*(double)power_data-420.277295988542;
 80048d6:	6838      	ldr	r0, [r7, #0]
 80048d8:	f7fb fe34 	bl	8000544 <__aeabi_i2d>
 80048dc:	a328      	add	r3, pc, #160	; (adr r3, 8004980 <Approximation_MC110+0xe8>)
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f7fb fe99 	bl	8000618 <__aeabi_dmul>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	a326      	add	r3, pc, #152	; (adr r3, 8004988 <Approximation_MC110+0xf0>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f7fb fcd8 	bl	80002a8 <__aeabi_dsub>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4929      	ldr	r1, [pc, #164]	; (80049a4 <Approximation_MC110+0x10c>)
 80048fe:	e9c1 2300 	strd	r2, r3, [r1]
	// Дифференциал температуры
	temp_diff=Temperature2-cal_temperature;
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <Approximation_MC110+0x10c>)
 8004904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004908:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <Approximation_MC110+0x110>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fb fccb 	bl	80002a8 <__aeabi_dsub>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// Находим термостабилизированное LSB
	LSB=LSB-(temp_diff*0.0000418240259295);
 800491a:	a31d      	add	r3, pc, #116	; (adr r3, 8004990 <Approximation_MC110+0xf8>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004924:	f7fb fe78 	bl	8000618 <__aeabi_dmul>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004930:	f7fb fcba 	bl	80002a8 <__aeabi_dsub>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим давление
	Pressure=(LSB*(double)ADC_MEAS_ZERO)/1000000.0;
 800493c:	69f8      	ldr	r0, [r7, #28]
 800493e:	f7fb fe01 	bl	8000544 <__aeabi_i2d>
 8004942:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004946:	f7fb fe67 	bl	8000618 <__aeabi_dmul>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	a311      	add	r3, pc, #68	; (adr r3, 8004998 <Approximation_MC110+0x100>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb ff88 	bl	800086c <__aeabi_ddiv>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4912      	ldr	r1, [pc, #72]	; (80049ac <Approximation_MC110+0x114>)
 8004962:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004966:	bf00      	nop
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	9b278484 	.word	0x9b278484
 8004974:	3df3d49e 	.word	0x3df3d49e
 8004978:	12548ff4 	.word	0x12548ff4
 800497c:	3ff69796 	.word	0x3ff69796
 8004980:	8506b9ef 	.word	0x8506b9ef
 8004984:	3f20d6c9 	.word	0x3f20d6c9
 8004988:	cdeb2199 	.word	0xcdeb2199
 800498c:	407a446f 	.word	0x407a446f
 8004990:	96a39d76 	.word	0x96a39d76
 8004994:	3f05ed86 	.word	0x3f05ed86
 8004998:	00000000 	.word	0x00000000
 800499c:	412e8480 	.word	0x412e8480
 80049a0:	20002380 	.word	0x20002380
 80049a4:	20000930 	.word	0x20000930
 80049a8:	20000328 	.word	0x20000328
 80049ac:	20002398 	.word	0x20002398

080049b0 <Calculate>:



void Calculate(int32_t adc_press, int32_t adc_pow)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	static double Press_old=0;
	// Считаем давлени
	Test_Pressure = Approximation_pressure(adc_press);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f85a 	bl	8004a74 <Approximation_pressure>
 80049c0:	eeb0 7a40 	vmov.f32	s14, s0
 80049c4:	eef0 7a60 	vmov.f32	s15, s1
 80049c8:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <Calculate+0xb4>)
 80049ca:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температурный коэффициент
	Temperature_coeff_25 = Approximation_Tcoef(adc_press, adc_pow);
 80049ce:	6839      	ldr	r1, [r7, #0]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f921 	bl	8004c18 <Approximation_Tcoef>
 80049d6:	eeb0 7a40 	vmov.f32	s14, s0
 80049da:	eef0 7a60 	vmov.f32	s15, s1
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <Calculate+0xb8>)
 80049e0:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температуру
	Temperature = Approximation_temperature(Temperature_coeff_25);
 80049e4:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <Calculate+0xb8>)
 80049e6:	ed93 7b00 	vldr	d7, [r3]
 80049ea:	eeb0 0a47 	vmov.f32	s0, s14
 80049ee:	eef0 0a67 	vmov.f32	s1, s15
 80049f2:	f000 f9db 	bl	8004dac <Approximation_temperature>
 80049f6:	eeb0 7a40 	vmov.f32	s14, s0
 80049fa:	eef0 7a60 	vmov.f32	s15, s1
 80049fe:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <Calculate+0xbc>)
 8004a00:	ed83 7b00 	vstr	d7, [r3]
	// Корректируем давление по температуре
	Test_Pressure = (Temperature_correction(Test_Pressure, Temperature) + Press_old)/2.0;
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <Calculate+0xb4>)
 8004a06:	ed93 7b00 	vldr	d7, [r3]
 8004a0a:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <Calculate+0xbc>)
 8004a0c:	ed93 6b00 	vldr	d6, [r3]
 8004a10:	eeb0 1a46 	vmov.f32	s2, s12
 8004a14:	eef0 1a66 	vmov.f32	s3, s13
 8004a18:	eeb0 0a47 	vmov.f32	s0, s14
 8004a1c:	eef0 0a67 	vmov.f32	s1, s15
 8004a20:	f000 fa80 	bl	8004f24 <Temperature_correction>
 8004a24:	ec51 0b10 	vmov	r0, r1, d0
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <Calculate+0xc0>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f7fb fc3d 	bl	80002ac <__adddf3>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4610      	mov	r0, r2
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a42:	f7fb ff13 	bl	800086c <__aeabi_ddiv>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4906      	ldr	r1, [pc, #24]	; (8004a64 <Calculate+0xb4>)
 8004a4c:	e9c1 2300 	strd	r2, r3, [r1]
	Press_old = Test_Pressure;
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <Calculate+0xb4>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	4906      	ldr	r1, [pc, #24]	; (8004a70 <Calculate+0xc0>)
 8004a58:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200023a0 	.word	0x200023a0
 8004a68:	20000078 	.word	0x20000078
 8004a6c:	20000950 	.word	0x20000950
 8004a70:	20000990 	.word	0x20000990

08004a74 <Approximation_pressure>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация давления
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_pressure(int32_t current_ADC_measure)
{
 8004a74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a78:	b08c      	sub	sp, #48	; 0x30
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	double RES=0, a, b;
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004a92:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <Approximation_pressure+0x198>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <Approximation_pressure+0x38>
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <Approximation_pressure+0x19c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <Approximation_pressure+0x198>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	e001      	b.n	8004ab0 <Approximation_pressure+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if(ADC_MEAS_ZERO>ADC_measure_cal_points[i])index++;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e00c      	b.n	8004ad0 <Approximation_pressure+0x5c>
 8004ab6:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <Approximation_pressure+0x19c>)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abe:	6a3a      	ldr	r2, [r7, #32]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	dd02      	ble.n	8004aca <Approximation_pressure+0x56>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b09      	cmp	r3, #9
 8004ad4:	ddef      	ble.n	8004ab6 <Approximation_pressure+0x42>

	if(index==0) a = (Pressure_cal_points[index+1] - Pressure_cal_points[index]) / (double)(ADC_measure_cal_points[index+1] - ADC_measure_cal_points[index]);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d12a      	bne.n	8004b32 <Approximation_pressure+0xbe>
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	3301      	adds	r3, #1
 8004ae0:	4a4c      	ldr	r2, [pc, #304]	; (8004c14 <Approximation_pressure+0x1a0>)
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aea:	4a4a      	ldr	r2, [pc, #296]	; (8004c14 <Approximation_pressure+0x1a0>)
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f7fb fbd7 	bl	80002a8 <__aeabi_dsub>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4614      	mov	r4, r2
 8004b00:	461d      	mov	r5, r3
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	3301      	adds	r3, #1
 8004b06:	4a42      	ldr	r2, [pc, #264]	; (8004c10 <Approximation_pressure+0x19c>)
 8004b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b0c:	4940      	ldr	r1, [pc, #256]	; (8004c10 <Approximation_pressure+0x19c>)
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fb fd14 	bl	8000544 <__aeabi_i2d>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4620      	mov	r0, r4
 8004b22:	4629      	mov	r1, r5
 8004b24:	f7fb fea2 	bl	800086c <__aeabi_ddiv>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004b30:	e033      	b.n	8004b9a <Approximation_pressure+0x126>
	else a = (Pressure_cal_points[index]-Pressure_cal_points[index-1]) / ((double)ADC_measure_cal_points[index]-(double)ADC_measure_cal_points[index-1]);
 8004b32:	4a38      	ldr	r2, [pc, #224]	; (8004c14 <Approximation_pressure+0x1a0>)
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4413      	add	r3, r2
 8004b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	3b01      	subs	r3, #1
 8004b42:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <Approximation_pressure+0x1a0>)
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fbac 	bl	80002a8 <__aeabi_dsub>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4690      	mov	r8, r2
 8004b56:	4699      	mov	r9, r3
 8004b58:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <Approximation_pressure+0x19c>)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb fcef 	bl	8000544 <__aeabi_i2d>
 8004b66:	4604      	mov	r4, r0
 8004b68:	460d      	mov	r5, r1
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	4a28      	ldr	r2, [pc, #160]	; (8004c10 <Approximation_pressure+0x19c>)
 8004b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fb fce5 	bl	8000544 <__aeabi_i2d>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	f7fb fb91 	bl	80002a8 <__aeabi_dsub>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	f7fb fe6d 	bl	800086c <__aeabi_ddiv>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	b = (double)Pressure_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <Approximation_pressure+0x1a0>)
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <Approximation_pressure+0x19c>)
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fb fcc8 	bl	8000544 <__aeabi_i2d>
 8004bb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb8:	f7fb fd2e 	bl	8000618 <__aeabi_dmul>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	f7fb fb70 	bl	80002a8 <__aeabi_dsub>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004bd0:	6a38      	ldr	r0, [r7, #32]
 8004bd2:	f7fb fcb7 	bl	8000544 <__aeabi_i2d>
 8004bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bda:	f7fb fd1d 	bl	8000618 <__aeabi_dmul>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004be6:	f7fb fb61 	bl	80002ac <__adddf3>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8004bf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bf6:	ec43 2b17 	vmov	d7, r2, r3
}
 8004bfa:	eeb0 0a47 	vmov.f32	s0, s14
 8004bfe:	eef0 0a67 	vmov.f32	s1, s15
 8004c02:	3730      	adds	r7, #48	; 0x30
 8004c04:	46bd      	mov	sp, r7
 8004c06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20002380 	.word	0x20002380
 8004c10:	20000290 	.word	0x20000290
 8004c14:	20000238 	.word	0x20000238

08004c18 <Approximation_Tcoef>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температурного коэффициента
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_Tcoef(int32_t current_ADC_measure, int32_t current_ADC_power)
{
 8004c18:	b5b0      	push	{r4, r5, r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
	double RES = 0, a, b;
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004c36:	4b5a      	ldr	r3, [pc, #360]	; (8004da0 <Approximation_Tcoef+0x188>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <Approximation_Tcoef+0x38>
 8004c3e:	4b59      	ldr	r3, [pc, #356]	; (8004da4 <Approximation_Tcoef+0x18c>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	441a      	add	r2, r3
 8004c46:	4b56      	ldr	r3, [pc, #344]	; (8004da0 <Approximation_Tcoef+0x188>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	623b      	str	r3, [r7, #32]
 8004c4e:	e001      	b.n	8004c54 <Approximation_Tcoef+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if (ADC_MEAS_ZERO > ADC_measure_cal_points[i]) index++;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e00c      	b.n	8004c74 <Approximation_Tcoef+0x5c>
 8004c5a:	4a52      	ldr	r2, [pc, #328]	; (8004da4 <Approximation_Tcoef+0x18c>)
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c62:	6a3a      	ldr	r2, [r7, #32]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	dd02      	ble.n	8004c6e <Approximation_Tcoef+0x56>
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	ddef      	ble.n	8004c5a <Approximation_Tcoef+0x42>

	if (index == 0) a = (double)(ADC_power_cal_points[index + 1] - ADC_power_cal_points[index]) / (double)(ADC_measure_cal_points[index + 1] - ADC_measure_cal_points[index]);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d126      	bne.n	8004cce <Approximation_Tcoef+0xb6>
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	3301      	adds	r3, #1
 8004c84:	4a48      	ldr	r2, [pc, #288]	; (8004da8 <Approximation_Tcoef+0x190>)
 8004c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c8a:	4947      	ldr	r1, [pc, #284]	; (8004da8 <Approximation_Tcoef+0x190>)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fb fc55 	bl	8000544 <__aeabi_i2d>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a40      	ldr	r2, [pc, #256]	; (8004da4 <Approximation_Tcoef+0x18c>)
 8004ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ca8:	493e      	ldr	r1, [pc, #248]	; (8004da4 <Approximation_Tcoef+0x18c>)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fc46 	bl	8000544 <__aeabi_i2d>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7fb fdd4 	bl	800086c <__aeabi_ddiv>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004ccc:	e025      	b.n	8004d1a <Approximation_Tcoef+0x102>
	else a = (double)(ADC_power_cal_points[index] - ADC_power_cal_points[index - 1]) / (double)(ADC_measure_cal_points[index] - ADC_measure_cal_points[index - 1]);
 8004cce:	4a36      	ldr	r2, [pc, #216]	; (8004da8 <Approximation_Tcoef+0x190>)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	4933      	ldr	r1, [pc, #204]	; (8004da8 <Approximation_Tcoef+0x190>)
 8004cdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb fc2e 	bl	8000544 <__aeabi_i2d>
 8004ce8:	4604      	mov	r4, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <Approximation_Tcoef+0x18c>)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	492a      	ldr	r1, [pc, #168]	; (8004da4 <Approximation_Tcoef+0x18c>)
 8004cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb fc1f 	bl	8000544 <__aeabi_i2d>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	f7fb fdad 	bl	800086c <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	b = (double)ADC_power_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004d1a:	4a23      	ldr	r2, [pc, #140]	; (8004da8 <Approximation_Tcoef+0x190>)
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fb fc0e 	bl	8000544 <__aeabi_i2d>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <Approximation_Tcoef+0x18c>)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fb fc05 	bl	8000544 <__aeabi_i2d>
 8004d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3e:	f7fb fc6b 	bl	8000618 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb faad 	bl	80002a8 <__aeabi_dsub>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004d56:	6a38      	ldr	r0, [r7, #32]
 8004d58:	f7fb fbf4 	bl	8000544 <__aeabi_i2d>
 8004d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d60:	f7fb fc5a 	bl	8000618 <__aeabi_dmul>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d6c:	f7fb fa9e 	bl	80002ac <__adddf3>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES/current_ADC_power;
 8004d78:	6838      	ldr	r0, [r7, #0]
 8004d7a:	f7fb fbe3 	bl	8000544 <__aeabi_i2d>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d86:	f7fb fd71 	bl	800086c <__aeabi_ddiv>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d92:	eeb0 0a47 	vmov.f32	s0, s14
 8004d96:	eef0 0a67 	vmov.f32	s1, s15
 8004d9a:	3730      	adds	r7, #48	; 0x30
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004da0:	20002380 	.word	0x20002380
 8004da4:	20000290 	.word	0x20000290
 8004da8:	200002bc 	.word	0x200002bc

08004dac <Approximation_temperature>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температуры
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_temperature(double T_coef)
{
 8004dac:	b5b0      	push	{r4, r5, r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	ed87 0b00 	vstr	d0, [r7]
	double RES = 0, a, b;
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < (num_of_temperature_cal_points-1); i++) if (T_coef > T_coef_cal[i]) index++;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	e012      	b.n	8004df2 <Approximation_temperature+0x46>
 8004dcc:	4a53      	ldr	r2, [pc, #332]	; (8004f1c <Approximation_temperature+0x170>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ddc:	f7fb feac 	bl	8000b38 <__aeabi_dcmpgt>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <Approximation_temperature+0x40>
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	3301      	adds	r3, #1
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	dde9      	ble.n	8004dcc <Approximation_temperature+0x20>

	if (index == 0) a = (double)(Temperature_cal_points[index + 1] - Temperature_cal_points[index]) / (double)(T_coef_cal[index + 1] - T_coef_cal[index]);
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d12c      	bne.n	8004e58 <Approximation_temperature+0xac>
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3301      	adds	r3, #1
 8004e02:	4a47      	ldr	r2, [pc, #284]	; (8004f20 <Approximation_temperature+0x174>)
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e0c:	4a44      	ldr	r2, [pc, #272]	; (8004f20 <Approximation_temperature+0x174>)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb fa46 	bl	80002a8 <__aeabi_dsub>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4614      	mov	r4, r2
 8004e22:	461d      	mov	r5, r3
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	3301      	adds	r3, #1
 8004e28:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <Approximation_temperature+0x170>)
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e32:	4a3a      	ldr	r2, [pc, #232]	; (8004f1c <Approximation_temperature+0x170>)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb fa33 	bl	80002a8 <__aeabi_dsub>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f7fb fd0f 	bl	800086c <__aeabi_ddiv>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004e56:	e02b      	b.n	8004eb0 <Approximation_temperature+0x104>
	else a = (double)(Temperature_cal_points[index] - Temperature_cal_points[index - 1]) / (double)(T_coef_cal[index] - T_coef_cal[index - 1]);
 8004e58:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <Approximation_temperature+0x174>)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <Approximation_temperature+0x174>)
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb fa19 	bl	80002a8 <__aeabi_dsub>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	461d      	mov	r5, r3
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <Approximation_temperature+0x170>)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <Approximation_temperature+0x170>)
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4413      	add	r3, r2
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f7fb fa06 	bl	80002a8 <__aeabi_dsub>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fce2 	bl	800086c <__aeabi_ddiv>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = (double)Temperature_cal_points[index] - (double)T_coef_cal[index] * a;
 8004eb0:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <Approximation_temperature+0x174>)
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ebc:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <Approximation_temperature+0x170>)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ec8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ecc:	f7fb fba4 	bl	8000618 <__aeabi_dmul>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb f9e6 	bl	80002a8 <__aeabi_dsub>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * T_coef;
 8004ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004eec:	f7fb fb94 	bl	8000618 <__aeabi_dmul>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ef8:	f7fb f9d8 	bl	80002ac <__adddf3>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8004f04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f08:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8004f10:	eef0 0a67 	vmov.f32	s1, s15
 8004f14:	3728      	adds	r7, #40	; 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200002e8 	.word	0x200002e8
 8004f20:	20000308 	.word	0x20000308

08004f24 <Temperature_correction>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Коррекция давления по температуре
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Temperature_correction(double uncorrect_Pressure, double affect_temp)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	ed87 0b02 	vstr	d0, [r7, #8]
 8004f2e:	ed87 1b00 	vstr	d1, [r7]
	return (uncorrect_Pressure + (cal_temperature - affect_temp) * affect);
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <Temperature_correction+0x54>)
 8004f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3c:	f7fb f9b4 	bl	80002a8 <__aeabi_dsub>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <Temperature_correction+0x58>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb fb63 	bl	8000618 <__aeabi_dmul>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5e:	f7fb f9a5 	bl	80002ac <__adddf3>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f6e:	eef0 0a67 	vmov.f32	s1, s15
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000328 	.word	0x20000328
 8004f7c:	20000988 	.word	0x20000988

08004f80 <calculate_current>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Расчет тока и напряжения, формулы Тимура
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double calculate_current(double data)
{
 8004f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_current = -0.0000741921796439735;
	//b_current = 9.9684133071094100000;
	//c_current = 0.0080740815705555100;
	RES = (-b_current+(sqrt((b_current*b_current)-(4*a_current*(c_current-data)))))/(2*a_current);
 8004f8c:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <calculate_current+0xc8>)
 8004f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f92:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <calculate_current+0xc8>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f7fb fb3e 	bl	8000618 <__aeabi_dmul>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	4b29      	ldr	r3, [pc, #164]	; (800504c <calculate_current+0xcc>)
 8004fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	4b28      	ldr	r3, [pc, #160]	; (8005050 <calculate_current+0xd0>)
 8004fb0:	f7fb fb32 	bl	8000618 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4690      	mov	r8, r2
 8004fba:	4699      	mov	r9, r3
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <calculate_current+0xd4>)
 8004fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc6:	f7fb f96f 	bl	80002a8 <__aeabi_dsub>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4640      	mov	r0, r8
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	f7fb fb21 	bl	8000618 <__aeabi_dmul>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4620      	mov	r0, r4
 8004fdc:	4629      	mov	r1, r5
 8004fde:	f7fb f963 	bl	80002a8 <__aeabi_dsub>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	ec43 2b17 	vmov	d7, r2, r3
 8004fea:	eeb0 0a47 	vmov.f32	s0, s14
 8004fee:	eef0 0a67 	vmov.f32	s1, s15
 8004ff2:	f01c fd15 	bl	8021a20 <sqrt>
 8004ff6:	ec51 0b10 	vmov	r0, r1, d0
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <calculate_current+0xc8>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb f952 	bl	80002a8 <__aeabi_dsub>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4614      	mov	r4, r2
 800500a:	461d      	mov	r5, r3
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <calculate_current+0xcc>)
 800500e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	f7fb f949 	bl	80002ac <__adddf3>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb fc23 	bl	800086c <__aeabi_ddiv>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 800502e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005032:	ec43 2b17 	vmov	d7, r2, r3
}
 8005036:	eeb0 0a47 	vmov.f32	s0, s14
 800503a:	eef0 0a67 	vmov.f32	s1, s15
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005046:	bf00      	nop
 8005048:	20006d10 	.word	0x20006d10
 800504c:	20006cf8 	.word	0x20006cf8
 8005050:	40100000 	.word	0x40100000
 8005054:	20006cf0 	.word	0x20006cf0

08005058 <calculate_voltage>:

double calculate_voltage(double data)
{
 8005058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_voltage = 0.0000160989032721161;
	//b_voltage = 9.6660275246403800000;
	//c_voltage = 0.0066157945677234600;
	RES = (-b_voltage+(sqrt((b_voltage*b_voltage)-(4*a_voltage*(c_voltage-data)))))/(2*a_voltage);
 8005064:	4b2e      	ldr	r3, [pc, #184]	; (8005120 <calculate_voltage+0xc8>)
 8005066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800506a:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <calculate_voltage+0xc8>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fad2 	bl	8000618 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4614      	mov	r4, r2
 800507a:	461d      	mov	r5, r3
 800507c:	4b29      	ldr	r3, [pc, #164]	; (8005124 <calculate_voltage+0xcc>)
 800507e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	4b28      	ldr	r3, [pc, #160]	; (8005128 <calculate_voltage+0xd0>)
 8005088:	f7fb fac6 	bl	8000618 <__aeabi_dmul>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4690      	mov	r8, r2
 8005092:	4699      	mov	r9, r3
 8005094:	4b25      	ldr	r3, [pc, #148]	; (800512c <calculate_voltage+0xd4>)
 8005096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800509a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800509e:	f7fb f903 	bl	80002a8 <__aeabi_dsub>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb fab5 	bl	8000618 <__aeabi_dmul>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7fb f8f7 	bl	80002a8 <__aeabi_dsub>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	ec43 2b17 	vmov	d7, r2, r3
 80050c2:	eeb0 0a47 	vmov.f32	s0, s14
 80050c6:	eef0 0a67 	vmov.f32	s1, s15
 80050ca:	f01c fca9 	bl	8021a20 <sqrt>
 80050ce:	ec51 0b10 	vmov	r0, r1, d0
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <calculate_voltage+0xc8>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb f8e6 	bl	80002a8 <__aeabi_dsub>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4614      	mov	r4, r2
 80050e2:	461d      	mov	r5, r3
 80050e4:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <calculate_voltage+0xcc>)
 80050e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	f7fb f8dd 	bl	80002ac <__adddf3>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7fb fbb7 	bl	800086c <__aeabi_ddiv>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 8005106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510a:	ec43 2b17 	vmov	d7, r2, r3
}
 800510e:	eeb0 0a47 	vmov.f32	s0, s14
 8005112:	eef0 0a67 	vmov.f32	s1, s15
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800511e:	bf00      	nop
 8005120:	20006ce8 	.word	0x20006ce8
 8005124:	20006d00 	.word	0x20006d00
 8005128:	40100000 	.word	0x40100000
 800512c:	20006d08 	.word	0x20006d08

08005130 <Logging_init>:
	[RefVoltage_tag]=10,
	[AutoGainCoef_period_tag]=19,
};

void Logging_init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
	disk_initialize(W25FatFs.drv);
 8005134:	4b03      	ldr	r3, [pc, #12]	; (8005144 <Logging_init+0x14>)
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	4618      	mov	r0, r3
 800513a:	f00d f877 	bl	801222c <disk_initialize>
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20007718 	.word	0x20007718

08005148 <Create_File>:



void Create_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	461a      	mov	r2, r3
 8005154:	460b      	mov	r3, r1
 8005156:	72fb      	strb	r3, [r7, #11]
 8005158:	4613      	mov	r3, r2
 800515a:	813b      	strh	r3, [r7, #8]
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 800515c:	2200      	movs	r2, #0
 800515e:	490b      	ldr	r1, [pc, #44]	; (800518c <Create_File+0x44>)
 8005160:	480b      	ldr	r0, [pc, #44]	; (8005190 <Create_File+0x48>)
 8005162:	f00e fd87 	bl	8013c74 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_WRITE|FA_CREATE_ALWAYS);
 8005166:	220a      	movs	r2, #10
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	480a      	ldr	r0, [pc, #40]	; (8005194 <Create_File+0x4c>)
 800516c:	f00e fdc8 	bl	8013d00 <f_open>
	f_write(&MyFile, FileText, FileSize, &testBytes);
 8005170:	893a      	ldrh	r2, [r7, #8]
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <Create_File+0x50>)
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4807      	ldr	r0, [pc, #28]	; (8005194 <Create_File+0x4c>)
 8005178:	f00f f8bf 	bl	80142fa <f_write>
	f_close(&MyFile);
 800517c:	4805      	ldr	r0, [pc, #20]	; (8005194 <Create_File+0x4c>)
 800517e:	f00f faaf 	bl	80146e0 <f_close>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	2000884c 	.word	0x2000884c
 8005190:	20007718 	.word	0x20007718
 8005194:	200074e8 	.word	0x200074e8
 8005198:	20007948 	.word	0x20007948

0800519c <Read_File>:



uint8_t Read_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	461a      	mov	r2, r3
 80051a8:	460b      	mov	r3, r1
 80051aa:	72fb      	strb	r3, [r7, #11]
 80051ac:	4613      	mov	r3, r2
 80051ae:	813b      	strh	r3, [r7, #8]
	uint8_t RES;
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 80051b0:	2200      	movs	r2, #0
 80051b2:	490c      	ldr	r1, [pc, #48]	; (80051e4 <Read_File+0x48>)
 80051b4:	480c      	ldr	r0, [pc, #48]	; (80051e8 <Read_File+0x4c>)
 80051b6:	f00e fd5d 	bl	8013c74 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_READ|FA_OPEN_ALWAYS);
 80051ba:	2211      	movs	r2, #17
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	480b      	ldr	r0, [pc, #44]	; (80051ec <Read_File+0x50>)
 80051c0:	f00e fd9e 	bl	8013d00 <f_open>
	RES=f_read(&MyFile, FileText, FileSize, &testBytes);
 80051c4:	893a      	ldrh	r2, [r7, #8]
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <Read_File+0x54>)
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4808      	ldr	r0, [pc, #32]	; (80051ec <Read_File+0x50>)
 80051cc:	f00e ff56 	bl	801407c <f_read>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]
	f_close(&MyFile);
 80051d4:	4805      	ldr	r0, [pc, #20]	; (80051ec <Read_File+0x50>)
 80051d6:	f00f fa83 	bl	80146e0 <f_close>
	return RES;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	2000884c 	.word	0x2000884c
 80051e8:	20007718 	.word	0x20007718
 80051ec:	200074e8 	.word	0x200074e8
 80051f0:	20007948 	.word	0x20007948

080051f4 <FileParser>:

uint16_t FileParser(uint8_t tag)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 80051fe:	2300      	movs	r3, #0
 8005200:	81fb      	strh	r3, [r7, #14]
	uint16_t RES=0, Sym_cntr=0;
 8005202:	2300      	movs	r3, #0
 8005204:	81bb      	strh	r3, [r7, #12]
 8005206:	2300      	movs	r3, #0
 8005208:	817b      	strh	r3, [r7, #10]

	for(i=0;i<file_size;i++)
 800520a:	2300      	movs	r3, #0
 800520c:	81fb      	strh	r3, [r7, #14]
 800520e:	e042      	b.n	8005296 <FileParser+0xa2>
	{
		if(ReadFileBuf[i]==TAG_STRING[tag][Sym_cntr])
 8005210:	89fb      	ldrh	r3, [r7, #14]
 8005212:	4a26      	ldr	r2, [pc, #152]	; (80052ac <FileParser+0xb8>)
 8005214:	5cd2      	ldrb	r2, [r2, r3]
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	4925      	ldr	r1, [pc, #148]	; (80052b0 <FileParser+0xbc>)
 800521a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	440b      	add	r3, r1
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d133      	bne.n	8005290 <FileParser+0x9c>
		{
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005228:	e013      	b.n	8005252 <FileParser+0x5e>
			{
				if(ReadFileBuf[i+Sym_cntr]==TAG_STRING[tag][Sym_cntr])
 800522a:	89fa      	ldrh	r2, [r7, #14]
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	4413      	add	r3, r2
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <FileParser+0xb8>)
 8005232:	5cd2      	ldrb	r2, [r2, r3]
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	491e      	ldr	r1, [pc, #120]	; (80052b0 <FileParser+0xbc>)
 8005238:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	440b      	add	r3, r1
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d102      	bne.n	800524c <FileParser+0x58>
				{RES++;}
 8005246:	89bb      	ldrh	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	81bb      	strh	r3, [r7, #12]
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 800524c:	897b      	ldrh	r3, [r7, #10]
 800524e:	3301      	adds	r3, #1
 8005250:	817b      	strh	r3, [r7, #10]
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <FileParser+0xc0>)
 8005256:	5cd3      	ldrb	r3, [r2, r3]
 8005258:	b29b      	uxth	r3, r3
 800525a:	897a      	ldrh	r2, [r7, #10]
 800525c:	429a      	cmp	r2, r3
 800525e:	d3e4      	bcc.n	800522a <FileParser+0x36>
			}
			if(RES==TAG_NUM_OF_SYM[tag])
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <FileParser+0xc0>)
 8005264:	5cd3      	ldrb	r3, [r2, r3]
 8005266:	b29b      	uxth	r3, r3
 8005268:	89ba      	ldrh	r2, [r7, #12]
 800526a:	429a      	cmp	r2, r3
 800526c:	d10c      	bne.n	8005288 <FileParser+0x94>
			{RES=i+TAG_NUM_OF_SYM[tag]+1; i=file_size;}
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <FileParser+0xc0>)
 8005272:	5cd3      	ldrb	r3, [r2, r3]
 8005274:	b29a      	uxth	r2, r3
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	4413      	add	r3, r2
 800527a:	b29b      	uxth	r3, r3
 800527c:	3301      	adds	r3, #1
 800527e:	81bb      	strh	r3, [r7, #12]
 8005280:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005284:	81fb      	strh	r3, [r7, #14]
 8005286:	e003      	b.n	8005290 <FileParser+0x9c>
			else {RES=Sym_cntr=0;}
 8005288:	2300      	movs	r3, #0
 800528a:	817b      	strh	r3, [r7, #10]
 800528c:	897b      	ldrh	r3, [r7, #10]
 800528e:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<file_size;i++)
 8005290:	89fb      	ldrh	r3, [r7, #14]
 8005292:	3301      	adds	r3, #1
 8005294:	81fb      	strh	r3, [r7, #14]
 8005296:	89fb      	ldrh	r3, [r7, #14]
 8005298:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800529c:	d3b8      	bcc.n	8005210 <FileParser+0x1c>
		}
	}

	return RES;
 800529e:	89bb      	ldrh	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20006d18 	.word	0x20006d18
 80052b0:	20000330 	.word	0x20000330
 80052b4:	08023e20 	.word	0x08023e20

080052b8 <scan_double>:
	}
}


double scan_double(uint16_t offset, uint8_t *buff)
{
 80052b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	6039      	str	r1, [r7, #0]
 80052c4:	80fb      	strh	r3, [r7, #6]
	uint64_t res64=0;
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t i=0, point=0, sign=0, after_size=0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	82fb      	strh	r3, [r7, #22]
 80052d6:	2300      	movs	r3, #0
 80052d8:	82bb      	strh	r3, [r7, #20]
 80052da:	2300      	movs	r3, #0
 80052dc:	827b      	strh	r3, [r7, #18]
 80052de:	2300      	movs	r3, #0
 80052e0:	823b      	strh	r3, [r7, #16]
	double RES=0;
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(buff[offset]=='-')sign=1;
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	4413      	add	r3, r2
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b2d      	cmp	r3, #45	; 0x2d
 80052f8:	d101      	bne.n	80052fe <scan_double+0x46>
 80052fa:	2301      	movs	r3, #1
 80052fc:	827b      	strh	r3, [r7, #18]

	// Find point
	for(i=0;i<30;i++)
 80052fe:	2300      	movs	r3, #0
 8005300:	82fb      	strh	r3, [r7, #22]
 8005302:	e034      	b.n	800536e <scan_double+0xb6>
	{
		if((buff[i+sign+offset]==',')||(buff[i+sign+offset]=='.')) point=i;
 8005304:	8afa      	ldrh	r2, [r7, #22]
 8005306:	8a7b      	ldrh	r3, [r7, #18]
 8005308:	441a      	add	r2, r3
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	4413      	add	r3, r2
 800530e:	461a      	mov	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4413      	add	r3, r2
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b2c      	cmp	r3, #44	; 0x2c
 8005318:	d00a      	beq.n	8005330 <scan_double+0x78>
 800531a:	8afa      	ldrh	r2, [r7, #22]
 800531c:	8a7b      	ldrh	r3, [r7, #18]
 800531e:	441a      	add	r2, r3
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	4413      	add	r3, r2
 8005324:	461a      	mov	r2, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4413      	add	r3, r2
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b2e      	cmp	r3, #46	; 0x2e
 800532e:	d101      	bne.n	8005334 <scan_double+0x7c>
 8005330:	8afb      	ldrh	r3, [r7, #22]
 8005332:	82bb      	strh	r3, [r7, #20]
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) {after_size=i; i=30;}
 8005334:	8afa      	ldrh	r2, [r7, #22]
 8005336:	8a7b      	ldrh	r3, [r7, #18]
 8005338:	441a      	add	r2, r3
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	4413      	add	r3, r2
 800533e:	461a      	mov	r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4413      	add	r3, r2
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b0d      	cmp	r3, #13
 8005348:	d00a      	beq.n	8005360 <scan_double+0xa8>
 800534a:	8afa      	ldrh	r2, [r7, #22]
 800534c:	8a7b      	ldrh	r3, [r7, #18]
 800534e:	441a      	add	r2, r3
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	4413      	add	r3, r2
 8005354:	461a      	mov	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	4413      	add	r3, r2
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b0a      	cmp	r3, #10
 800535e:	d103      	bne.n	8005368 <scan_double+0xb0>
 8005360:	8afb      	ldrh	r3, [r7, #22]
 8005362:	823b      	strh	r3, [r7, #16]
 8005364:	231e      	movs	r3, #30
 8005366:	82fb      	strh	r3, [r7, #22]
	for(i=0;i<30;i++)
 8005368:	8afb      	ldrh	r3, [r7, #22]
 800536a:	3301      	adds	r3, #1
 800536c:	82fb      	strh	r3, [r7, #22]
 800536e:	8afb      	ldrh	r3, [r7, #22]
 8005370:	2b1d      	cmp	r3, #29
 8005372:	d9c7      	bls.n	8005304 <scan_double+0x4c>
	}

	if(after_size>19)after_size=19;
 8005374:	8a3b      	ldrh	r3, [r7, #16]
 8005376:	2b13      	cmp	r3, #19
 8005378:	d901      	bls.n	800537e <scan_double+0xc6>
 800537a:	2313      	movs	r3, #19
 800537c:	823b      	strh	r3, [r7, #16]
	for(i=0;i<after_size;i++)
 800537e:	2300      	movs	r3, #0
 8005380:	82fb      	strh	r3, [r7, #22]
 8005382:	e04d      	b.n	8005420 <scan_double+0x168>
	{
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) break;
 8005384:	8afa      	ldrh	r2, [r7, #22]
 8005386:	8a7b      	ldrh	r3, [r7, #18]
 8005388:	441a      	add	r2, r3
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	4413      	add	r3, r2
 800538e:	461a      	mov	r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	4413      	add	r3, r2
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b0d      	cmp	r3, #13
 8005398:	d046      	beq.n	8005428 <scan_double+0x170>
 800539a:	8afa      	ldrh	r2, [r7, #22]
 800539c:	8a7b      	ldrh	r3, [r7, #18]
 800539e:	441a      	add	r2, r3
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	4413      	add	r3, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b0a      	cmp	r3, #10
 80053ae:	d03b      	beq.n	8005428 <scan_double+0x170>
		if((i!=point)||(point==0))
 80053b0:	8afa      	ldrh	r2, [r7, #22]
 80053b2:	8abb      	ldrh	r3, [r7, #20]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d102      	bne.n	80053be <scan_double+0x106>
 80053b8:	8abb      	ldrh	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d12d      	bne.n	800541a <scan_double+0x162>
		{
			res64*=10;
 80053be:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f04f 0000 	mov.w	r0, #0
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	0099      	lsls	r1, r3, #2
 80053d0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80053d4:	0090      	lsls	r0, r2, #2
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	1912      	adds	r2, r2, r4
 80053dc:	eb45 0303 	adc.w	r3, r5, r3
 80053e0:	eb12 0a02 	adds.w	sl, r2, r2
 80053e4:	eb43 0b03 	adc.w	fp, r3, r3
 80053e8:	4652      	mov	r2, sl
 80053ea:	465b      	mov	r3, fp
 80053ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
			res64+=buff[i+sign+offset]-48;
 80053f0:	8afa      	ldrh	r2, [r7, #22]
 80053f2:	8a7b      	ldrh	r3, [r7, #18]
 80053f4:	441a      	add	r2, r3
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	4413      	add	r3, r2
 80053fa:	461a      	mov	r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4413      	add	r3, r2
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	3b30      	subs	r3, #48	; 0x30
 8005404:	461a      	mov	r2, r3
 8005406:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800540a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800540e:	eb10 0802 	adds.w	r8, r0, r2
 8005412:	eb41 0903 	adc.w	r9, r1, r3
 8005416:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i=0;i<after_size;i++)
 800541a:	8afb      	ldrh	r3, [r7, #22]
 800541c:	3301      	adds	r3, #1
 800541e:	82fb      	strh	r3, [r7, #22]
 8005420:	8afa      	ldrh	r2, [r7, #22]
 8005422:	8a3b      	ldrh	r3, [r7, #16]
 8005424:	429a      	cmp	r2, r3
 8005426:	d3ad      	bcc.n	8005384 <scan_double+0xcc>
		}
	}

	if(point!=0){after_size-=1;
 8005428:	8abb      	ldrh	r3, [r7, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d022      	beq.n	8005474 <scan_double+0x1bc>
 800542e:	8a3b      	ldrh	r3, [r7, #16]
 8005430:	3b01      	subs	r3, #1
 8005432:	823b      	strh	r3, [r7, #16]
	RES = (double)res64;
 8005434:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005438:	f7fb f8b8 	bl	80005ac <__aeabi_ul2d>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<(after_size-point);i++)RES *= 0.1;}
 8005444:	2300      	movs	r3, #0
 8005446:	82fb      	strh	r3, [r7, #22]
 8005448:	e00d      	b.n	8005466 <scan_double+0x1ae>
 800544a:	a319      	add	r3, pc, #100	; (adr r3, 80054b0 <scan_double+0x1f8>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005454:	f7fb f8e0 	bl	8000618 <__aeabi_dmul>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005460:	8afb      	ldrh	r3, [r7, #22]
 8005462:	3301      	adds	r3, #1
 8005464:	82fb      	strh	r3, [r7, #22]
 8005466:	8afa      	ldrh	r2, [r7, #22]
 8005468:	8a39      	ldrh	r1, [r7, #16]
 800546a:	8abb      	ldrh	r3, [r7, #20]
 800546c:	1acb      	subs	r3, r1, r3
 800546e:	429a      	cmp	r2, r3
 8005470:	dbeb      	blt.n	800544a <scan_double+0x192>
 8005472:	e007      	b.n	8005484 <scan_double+0x1cc>
	else RES = (double)res64;
 8005474:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005478:	f7fb f898 	bl	80005ac <__aeabi_ul2d>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(sign==1)RES=-RES;
 8005484:	8a7b      	ldrh	r3, [r7, #18]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d105      	bne.n	8005496 <scan_double+0x1de>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005494:	60fb      	str	r3, [r7, #12]
	return RES;
 8005496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549a:	ec43 2b17 	vmov	d7, r2, r3
}
 800549e:	eeb0 0a47 	vmov.f32	s0, s14
 80054a2:	eef0 0a67 	vmov.f32	s1, s15
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ae:	bf00      	nop
 80054b0:	9999999a 	.word	0x9999999a
 80054b4:	3fb99999 	.word	0x3fb99999

080054b8 <Save_Settings>:

void Save_Settings(uint8_t TAG, int32_t data)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	71fb      	strb	r3, [r7, #7]
	uint8_t Name[11]="CONFIG.CSV\0";
 80054c4:	4a4c      	ldr	r2, [pc, #304]	; (80055f8 <Save_Settings+0x140>)
 80054c6:	f107 030c 	add.w	r3, r7, #12
 80054ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80054cc:	c303      	stmia	r3!, {r0, r1}
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	3302      	adds	r3, #2
 80054d2:	0c12      	lsrs	r2, r2, #16
 80054d4:	701a      	strb	r2, [r3, #0]
	uint16_t index, i, end_index;
	while(Read_File(Name, 11, ReadFileBuf, file_size)!=FR_OK){};
 80054d6:	bf00      	nop
 80054d8:	f107 000c 	add.w	r0, r7, #12
 80054dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80054e0:	4a46      	ldr	r2, [pc, #280]	; (80055fc <Save_Settings+0x144>)
 80054e2:	210b      	movs	r1, #11
 80054e4:	f7ff fe5a 	bl	800519c <Read_File>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f4      	bne.n	80054d8 <Save_Settings+0x20>
	//{
		index=FileParser(TAG);
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fe7f 	bl	80051f4 <FileParser>
 80054f6:	4603      	mov	r3, r0
 80054f8:	837b      	strh	r3, [r7, #26]
		for(i=index;i<file_size-1;i++)
 80054fa:	8b7b      	ldrh	r3, [r7, #26]
 80054fc:	83fb      	strh	r3, [r7, #30]
 80054fe:	e013      	b.n	8005528 <Save_Settings+0x70>
		{
			if((ReadFileBuf[i]==0x0D)&&(ReadFileBuf[i+1]==0x0A))
 8005500:	8bfb      	ldrh	r3, [r7, #30]
 8005502:	4a3e      	ldr	r2, [pc, #248]	; (80055fc <Save_Settings+0x144>)
 8005504:	5cd3      	ldrb	r3, [r2, r3]
 8005506:	2b0d      	cmp	r3, #13
 8005508:	d10b      	bne.n	8005522 <Save_Settings+0x6a>
 800550a:	8bfb      	ldrh	r3, [r7, #30]
 800550c:	3301      	adds	r3, #1
 800550e:	4a3b      	ldr	r2, [pc, #236]	; (80055fc <Save_Settings+0x144>)
 8005510:	5cd3      	ldrb	r3, [r2, r3]
 8005512:	2b0a      	cmp	r3, #10
 8005514:	d105      	bne.n	8005522 <Save_Settings+0x6a>
			{
				end_index=i+2;
 8005516:	8bfb      	ldrh	r3, [r7, #30]
 8005518:	3302      	adds	r3, #2
 800551a:	83bb      	strh	r3, [r7, #28]
				i=file_size-1;
 800551c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005520:	83fb      	strh	r3, [r7, #30]
		for(i=index;i<file_size-1;i++)
 8005522:	8bfb      	ldrh	r3, [r7, #30]
 8005524:	3301      	adds	r3, #1
 8005526:	83fb      	strh	r3, [r7, #30]
 8005528:	8bfb      	ldrh	r3, [r7, #30]
 800552a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800552e:	4293      	cmp	r3, r2
 8005530:	d9e6      	bls.n	8005500 <Save_Settings+0x48>
			}
		}

		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	4a32      	ldr	r2, [pc, #200]	; (8005600 <Save_Settings+0x148>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	b29b      	uxth	r3, r3
 800553a:	8b7a      	ldrh	r2, [r7, #26]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	83fb      	strh	r3, [r7, #30]
 8005544:	e011      	b.n	800556a <Save_Settings+0xb2>
		{
			ReadFileBuf[i]=ReadFileBuf[i+end_index-(index-TAG_NUM_OF_SYM[TAG]-1)];
 8005546:	8bfa      	ldrh	r2, [r7, #30]
 8005548:	8bbb      	ldrh	r3, [r7, #28]
 800554a:	441a      	add	r2, r3
 800554c:	8b7b      	ldrh	r3, [r7, #26]
 800554e:	79f9      	ldrb	r1, [r7, #7]
 8005550:	482b      	ldr	r0, [pc, #172]	; (8005600 <Save_Settings+0x148>)
 8005552:	5c41      	ldrb	r1, [r0, r1]
 8005554:	1a5b      	subs	r3, r3, r1
 8005556:	3b01      	subs	r3, #1
 8005558:	1ad2      	subs	r2, r2, r3
 800555a:	8bfb      	ldrh	r3, [r7, #30]
 800555c:	4927      	ldr	r1, [pc, #156]	; (80055fc <Save_Settings+0x144>)
 800555e:	5c89      	ldrb	r1, [r1, r2]
 8005560:	4a26      	ldr	r2, [pc, #152]	; (80055fc <Save_Settings+0x144>)
 8005562:	54d1      	strb	r1, [r2, r3]
		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 8005564:	8bfb      	ldrh	r3, [r7, #30]
 8005566:	3301      	adds	r3, #1
 8005568:	83fb      	strh	r3, [r7, #30]
 800556a:	8bfa      	ldrh	r2, [r7, #30]
 800556c:	8bbb      	ldrh	r3, [r7, #28]
 800556e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8005572:	429a      	cmp	r2, r3
 8005574:	dbe7      	blt.n	8005546 <Save_Settings+0x8e>
		}

		index=FileParser(end_of_file_tag)-TAG_NUM_OF_SYM[end_of_file_tag]-1;
 8005576:	2000      	movs	r0, #0
 8005578:	f7ff fe3c 	bl	80051f4 <FileParser>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	230b      	movs	r3, #11
 8005582:	b29b      	uxth	r3, r3
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	837b      	strh	r3, [r7, #26]

		for(i=0;i<TAG_NUM_OF_SYM[TAG];i++)ReadFileBuf[i+index]=TAG_STRING[TAG][i];
 800558c:	2300      	movs	r3, #0
 800558e:	83fb      	strh	r3, [r7, #30]
 8005590:	e00e      	b.n	80055b0 <Save_Settings+0xf8>
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <Save_Settings+0x14c>)
 8005596:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800559a:	8bfb      	ldrh	r3, [r7, #30]
 800559c:	441a      	add	r2, r3
 800559e:	8bf9      	ldrh	r1, [r7, #30]
 80055a0:	8b7b      	ldrh	r3, [r7, #26]
 80055a2:	440b      	add	r3, r1
 80055a4:	7811      	ldrb	r1, [r2, #0]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <Save_Settings+0x144>)
 80055a8:	54d1      	strb	r1, [r2, r3]
 80055aa:	8bfb      	ldrh	r3, [r7, #30]
 80055ac:	3301      	adds	r3, #1
 80055ae:	83fb      	strh	r3, [r7, #30]
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	4a13      	ldr	r2, [pc, #76]	; (8005600 <Save_Settings+0x148>)
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	8bfa      	ldrh	r2, [r7, #30]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d3e9      	bcc.n	8005592 <Save_Settings+0xda>
		sprintf(ReadFileBuf+index+TAG_NUM_OF_SYM[TAG],";%d\r\nend_of_file;\r\n", data);
 80055be:	8b7b      	ldrh	r3, [r7, #26]
 80055c0:	79fa      	ldrb	r2, [r7, #7]
 80055c2:	490f      	ldr	r1, [pc, #60]	; (8005600 <Save_Settings+0x148>)
 80055c4:	5c8a      	ldrb	r2, [r1, r2]
 80055c6:	4413      	add	r3, r2
 80055c8:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <Save_Settings+0x144>)
 80055ca:	4413      	add	r3, r2
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	490e      	ldr	r1, [pc, #56]	; (8005608 <Save_Settings+0x150>)
 80055d0:	4618      	mov	r0, r3
 80055d2:	f018 fc6d 	bl	801deb0 <siprintf>
		ReadFileBuf[file_size-1]="\0";
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <Save_Settings+0x154>)
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <Save_Settings+0x144>)
 80055dc:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
		Create_File(Name, 11, ReadFileBuf, file_size);
 80055e0:	f107 000c 	add.w	r0, r7, #12
 80055e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80055e8:	4a04      	ldr	r2, [pc, #16]	; (80055fc <Save_Settings+0x144>)
 80055ea:	210b      	movs	r1, #11
 80055ec:	f7ff fdac 	bl	8005148 <Create_File>
	//}
}
 80055f0:	bf00      	nop
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	080222b0 	.word	0x080222b0
 80055fc:	20006d18 	.word	0x20006d18
 8005600:	08023e20 	.word	0x08023e20
 8005604:	20000330 	.word	0x20000330
 8005608:	08022298 	.word	0x08022298
 800560c:	080222ac 	.word	0x080222ac

08005610 <Read_Variable_From_File>:



double Read_Variable_From_File(uint8_t name)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
	return scan_double(FileParser(name), ReadFileBuf);
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fde9 	bl	80051f4 <FileParser>
 8005622:	4603      	mov	r3, r0
 8005624:	4907      	ldr	r1, [pc, #28]	; (8005644 <Read_Variable_From_File+0x34>)
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fe46 	bl	80052b8 <scan_double>
 800562c:	eeb0 7a40 	vmov.f32	s14, s0
 8005630:	eef0 7a60 	vmov.f32	s15, s1
}
 8005634:	eeb0 0a47 	vmov.f32	s0, s14
 8005638:	eef0 0a67 	vmov.f32	s1, s15
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20006d18 	.word	0x20006d18

08005648 <Load_Settings>:



void Load_Settings(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
	uint8_t Name_settings[11]="CONFIG.CSV\0";
 800564e:	4ad2      	ldr	r2, [pc, #840]	; (8005998 <Load_Settings+0x350>)
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	ca07      	ldmia	r2, {r0, r1, r2}
 8005656:	c303      	stmia	r3!, {r0, r1}
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	3302      	adds	r3, #2
 800565c:	0c12      	lsrs	r2, r2, #16
 800565e:	701a      	strb	r2, [r3, #0]
	uint8_t Name_calibr[8]="CAL.CSV\0";
 8005660:	4ace      	ldr	r2, [pc, #824]	; (800599c <Load_Settings+0x354>)
 8005662:	1d3b      	adds	r3, r7, #4
 8005664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005668:	e883 0003 	stmia.w	r3, {r0, r1}

	// Читаем конфигурационный файл
	while(Read_File(Name_settings, 11, ReadFileBuf, file_size)!=FR_OK){};
 800566c:	bf00      	nop
 800566e:	f107 000c 	add.w	r0, r7, #12
 8005672:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005676:	4aca      	ldr	r2, [pc, #808]	; (80059a0 <Load_Settings+0x358>)
 8005678:	210b      	movs	r1, #11
 800567a:	f7ff fd8f 	bl	800519c <Read_File>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f4      	bne.n	800566e <Load_Settings+0x26>
	//{
		gauge_error = Read_Variable_From_File(gauge_error_tag);
 8005684:	2015      	movs	r0, #21
 8005686:	f7ff ffc3 	bl	8005610 <Read_Variable_From_File>
 800568a:	eeb0 7a40 	vmov.f32	s14, s0
 800568e:	eef0 7a60 	vmov.f32	s15, s1
 8005692:	4bc4      	ldr	r3, [pc, #784]	; (80059a4 <Load_Settings+0x35c>)
 8005694:	ed83 7b00 	vstr	d7, [r3]
		display_brightness = (uint16_t)Read_Variable_From_File(display_brightness_tag);
 8005698:	2001      	movs	r0, #1
 800569a:	f7ff ffb9 	bl	8005610 <Read_Variable_From_File>
 800569e:	ec53 2b10 	vmov	r2, r3, d0
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fb fa8f 	bl	8000bc8 <__aeabi_d2uiz>
 80056aa:	4603      	mov	r3, r0
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	4bbd      	ldr	r3, [pc, #756]	; (80059a8 <Load_Settings+0x360>)
 80056b2:	701a      	strb	r2, [r3, #0]
		display_contrast = (uint16_t)Read_Variable_From_File(display_contrast_tag);
 80056b4:	2002      	movs	r0, #2
 80056b6:	f7ff ffab 	bl	8005610 <Read_Variable_From_File>
 80056ba:	ec53 2b10 	vmov	r2, r3, d0
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	f7fb fa81 	bl	8000bc8 <__aeabi_d2uiz>
 80056c6:	4603      	mov	r3, r0
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	4bb7      	ldr	r3, [pc, #732]	; (80059ac <Load_Settings+0x364>)
 80056ce:	701a      	strb	r2, [r3, #0]
		mm_peak = (uint16_t)Read_Variable_From_File(mm_peak_tag);
 80056d0:	2003      	movs	r0, #3
 80056d2:	f7ff ff9d 	bl	8005610 <Read_Variable_From_File>
 80056d6:	ec53 2b10 	vmov	r2, r3, d0
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	f7fb fa73 	bl	8000bc8 <__aeabi_d2uiz>
 80056e2:	4603      	mov	r3, r0
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	4bb1      	ldr	r3, [pc, #708]	; (80059b0 <Load_Settings+0x368>)
 80056ea:	701a      	strb	r2, [r3, #0]
		leak_detect = (uint16_t)Read_Variable_From_File(leak_detect_tag);
 80056ec:	2004      	movs	r0, #4
 80056ee:	f7ff ff8f 	bl	8005610 <Read_Variable_From_File>
 80056f2:	ec53 2b10 	vmov	r2, r3, d0
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	f7fb fa65 	bl	8000bc8 <__aeabi_d2uiz>
 80056fe:	4603      	mov	r3, r0
 8005700:	b29b      	uxth	r3, r3
 8005702:	b2da      	uxtb	r2, r3
 8005704:	4bab      	ldr	r3, [pc, #684]	; (80059b4 <Load_Settings+0x36c>)
 8005706:	701a      	strb	r2, [r3, #0]
		PV = (uint16_t)Read_Variable_From_File(PV_tag);
 8005708:	2005      	movs	r0, #5
 800570a:	f7ff ff81 	bl	8005610 <Read_Variable_From_File>
 800570e:	ec53 2b10 	vmov	r2, r3, d0
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f7fb fa57 	bl	8000bc8 <__aeabi_d2uiz>
 800571a:	4603      	mov	r3, r0
 800571c:	b29b      	uxth	r3, r3
 800571e:	b2da      	uxtb	r2, r3
 8005720:	4ba5      	ldr	r3, [pc, #660]	; (80059b8 <Load_Settings+0x370>)
 8005722:	701a      	strb	r2, [r3, #0]
		PI = (uint16_t)Read_Variable_From_File(PI_tag);
 8005724:	2006      	movs	r0, #6
 8005726:	f7ff ff73 	bl	8005610 <Read_Variable_From_File>
 800572a:	ec53 2b10 	vmov	r2, r3, d0
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	f7fb fa49 	bl	8000bc8 <__aeabi_d2uiz>
 8005736:	4603      	mov	r3, r0
 8005738:	b29b      	uxth	r3, r3
 800573a:	b2da      	uxtb	r2, r3
 800573c:	4b9f      	ldr	r3, [pc, #636]	; (80059bc <Load_Settings+0x374>)
 800573e:	701a      	strb	r2, [r3, #0]
		PE = (uint16_t)Read_Variable_From_File(PE_tag);
 8005740:	2007      	movs	r0, #7
 8005742:	f7ff ff65 	bl	8005610 <Read_Variable_From_File>
 8005746:	ec53 2b10 	vmov	r2, r3, d0
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	f7fb fa3b 	bl	8000bc8 <__aeabi_d2uiz>
 8005752:	4603      	mov	r3, r0
 8005754:	b29b      	uxth	r3, r3
 8005756:	b2da      	uxtb	r2, r3
 8005758:	4b99      	ldr	r3, [pc, #612]	; (80059c0 <Load_Settings+0x378>)
 800575a:	701a      	strb	r2, [r3, #0]
		PGA_GAIN[0] = (uint16_t)Read_Variable_From_File(PGA_GAIN0_tag);
 800575c:	2008      	movs	r0, #8
 800575e:	f7ff ff57 	bl	8005610 <Read_Variable_From_File>
 8005762:	ec53 2b10 	vmov	r2, r3, d0
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	f7fb fa2d 	bl	8000bc8 <__aeabi_d2uiz>
 800576e:	4603      	mov	r3, r0
 8005770:	b29b      	uxth	r3, r3
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b93      	ldr	r3, [pc, #588]	; (80059c4 <Load_Settings+0x37c>)
 8005776:	701a      	strb	r2, [r3, #0]
		PGA_GAIN[1] = (uint16_t)Read_Variable_From_File(PGA_GAIN1_tag);
 8005778:	2009      	movs	r0, #9
 800577a:	f7ff ff49 	bl	8005610 <Read_Variable_From_File>
 800577e:	ec53 2b10 	vmov	r2, r3, d0
 8005782:	4610      	mov	r0, r2
 8005784:	4619      	mov	r1, r3
 8005786:	f7fb fa1f 	bl	8000bc8 <__aeabi_d2uiz>
 800578a:	4603      	mov	r3, r0
 800578c:	b29b      	uxth	r3, r3
 800578e:	b2da      	uxtb	r2, r3
 8005790:	4b8c      	ldr	r3, [pc, #560]	; (80059c4 <Load_Settings+0x37c>)
 8005792:	705a      	strb	r2, [r3, #1]
		PGA_GAIN[2] = (uint16_t)Read_Variable_From_File(PGA_GAIN2_tag);
 8005794:	200a      	movs	r0, #10
 8005796:	f7ff ff3b 	bl	8005610 <Read_Variable_From_File>
 800579a:	ec53 2b10 	vmov	r2, r3, d0
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f7fb fa11 	bl	8000bc8 <__aeabi_d2uiz>
 80057a6:	4603      	mov	r3, r0
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	4b85      	ldr	r3, [pc, #532]	; (80059c4 <Load_Settings+0x37c>)
 80057ae:	709a      	strb	r2, [r3, #2]
		PGA_GAIN[3] = (uint16_t)Read_Variable_From_File(PGA_GAIN3_tag);
 80057b0:	200b      	movs	r0, #11
 80057b2:	f7ff ff2d 	bl	8005610 <Read_Variable_From_File>
 80057b6:	ec53 2b10 	vmov	r2, r3, d0
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	f7fb fa03 	bl	8000bc8 <__aeabi_d2uiz>
 80057c2:	4603      	mov	r3, r0
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	4b7e      	ldr	r3, [pc, #504]	; (80059c4 <Load_Settings+0x37c>)
 80057ca:	70da      	strb	r2, [r3, #3]
		PGA_GAIN[4] = (uint16_t)Read_Variable_From_File(PGA_GAIN4_tag);
 80057cc:	200c      	movs	r0, #12
 80057ce:	f7ff ff1f 	bl	8005610 <Read_Variable_From_File>
 80057d2:	ec53 2b10 	vmov	r2, r3, d0
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	f7fb f9f5 	bl	8000bc8 <__aeabi_d2uiz>
 80057de:	4603      	mov	r3, r0
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	4b77      	ldr	r3, [pc, #476]	; (80059c4 <Load_Settings+0x37c>)
 80057e6:	711a      	strb	r2, [r3, #4]
		PGA_GAIN[5] = (uint16_t)Read_Variable_From_File(PGA_GAIN5_tag);
 80057e8:	200d      	movs	r0, #13
 80057ea:	f7ff ff11 	bl	8005610 <Read_Variable_From_File>
 80057ee:	ec53 2b10 	vmov	r2, r3, d0
 80057f2:	4610      	mov	r0, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7fb f9e7 	bl	8000bc8 <__aeabi_d2uiz>
 80057fa:	4603      	mov	r3, r0
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b70      	ldr	r3, [pc, #448]	; (80059c4 <Load_Settings+0x37c>)
 8005802:	715a      	strb	r2, [r3, #5]
		PGA_GAIN[6] = (uint16_t)Read_Variable_From_File(PGA_GAIN6_tag);
 8005804:	200e      	movs	r0, #14
 8005806:	f7ff ff03 	bl	8005610 <Read_Variable_From_File>
 800580a:	ec53 2b10 	vmov	r2, r3, d0
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	f7fb f9d9 	bl	8000bc8 <__aeabi_d2uiz>
 8005816:	4603      	mov	r3, r0
 8005818:	b29b      	uxth	r3, r3
 800581a:	b2da      	uxtb	r2, r3
 800581c:	4b69      	ldr	r3, [pc, #420]	; (80059c4 <Load_Settings+0x37c>)
 800581e:	719a      	strb	r2, [r3, #6]
		ADC_SPS = (uint16_t)Read_Variable_From_File(ADC_SPS_tag);
 8005820:	200f      	movs	r0, #15
 8005822:	f7ff fef5 	bl	8005610 <Read_Variable_From_File>
 8005826:	ec53 2b10 	vmov	r2, r3, d0
 800582a:	4610      	mov	r0, r2
 800582c:	4619      	mov	r1, r3
 800582e:	f7fb f9cb 	bl	8000bc8 <__aeabi_d2uiz>
 8005832:	4603      	mov	r3, r0
 8005834:	b29b      	uxth	r3, r3
 8005836:	b2da      	uxtb	r2, r3
 8005838:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <Load_Settings+0x380>)
 800583a:	701a      	strb	r2, [r3, #0]
		adc_calibration_mode = (uint16_t)Read_Variable_From_File(adc_calibration_mode_tag);
 800583c:	2010      	movs	r0, #16
 800583e:	f7ff fee7 	bl	8005610 <Read_Variable_From_File>
 8005842:	ec53 2b10 	vmov	r2, r3, d0
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	f7fb f9bd 	bl	8000bc8 <__aeabi_d2uiz>
 800584e:	4603      	mov	r3, r0
 8005850:	b29b      	uxth	r3, r3
 8005852:	b2da      	uxtb	r2, r3
 8005854:	4b5d      	ldr	r3, [pc, #372]	; (80059cc <Load_Settings+0x384>)
 8005856:	701a      	strb	r2, [r3, #0]
		ADC_Buff_size = (uint16_t)Read_Variable_From_File(ADC_Buff_size_tag);
 8005858:	2011      	movs	r0, #17
 800585a:	f7ff fed9 	bl	8005610 <Read_Variable_From_File>
 800585e:	ec53 2b10 	vmov	r2, r3, d0
 8005862:	4610      	mov	r0, r2
 8005864:	4619      	mov	r1, r3
 8005866:	f7fb f9af 	bl	8000bc8 <__aeabi_d2uiz>
 800586a:	4603      	mov	r3, r0
 800586c:	b29a      	uxth	r2, r3
 800586e:	4b58      	ldr	r3, [pc, #352]	; (80059d0 <Load_Settings+0x388>)
 8005870:	801a      	strh	r2, [r3, #0]
		Auto_Off_Time = (uint16_t)Read_Variable_From_File(Auto_Off_Time_tag);
 8005872:	2012      	movs	r0, #18
 8005874:	f7ff fecc 	bl	8005610 <Read_Variable_From_File>
 8005878:	ec53 2b10 	vmov	r2, r3, d0
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	f7fb f9a2 	bl	8000bc8 <__aeabi_d2uiz>
 8005884:	4603      	mov	r3, r0
 8005886:	b29a      	uxth	r2, r3
 8005888:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <Load_Settings+0x38c>)
 800588a:	801a      	strh	r2, [r3, #0]
		serial_num = (uint16_t)Read_Variable_From_File(serial_num_tag);
 800588c:	2013      	movs	r0, #19
 800588e:	f7ff febf 	bl	8005610 <Read_Variable_From_File>
 8005892:	ec53 2b10 	vmov	r2, r3, d0
 8005896:	4610      	mov	r0, r2
 8005898:	4619      	mov	r1, r3
 800589a:	f7fb f995 	bl	8000bc8 <__aeabi_d2uiz>
 800589e:	4603      	mov	r3, r0
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	4b4c      	ldr	r3, [pc, #304]	; (80059d8 <Load_Settings+0x390>)
 80058a6:	601a      	str	r2, [r3, #0]
		gauge_range = (uint16_t)Read_Variable_From_File(gauge_range_tag);
 80058a8:	2014      	movs	r0, #20
 80058aa:	f7ff feb1 	bl	8005610 <Read_Variable_From_File>
 80058ae:	ec53 2b10 	vmov	r2, r3, d0
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7fb f987 	bl	8000bc8 <__aeabi_d2uiz>
 80058ba:	4603      	mov	r3, r0
 80058bc:	b29b      	uxth	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	4b46      	ldr	r3, [pc, #280]	; (80059dc <Load_Settings+0x394>)
 80058c2:	601a      	str	r2, [r3, #0]
		light_delay = (uint16_t)Read_Variable_From_File(light_delay_tag);
 80058c4:	2016      	movs	r0, #22
 80058c6:	f7ff fea3 	bl	8005610 <Read_Variable_From_File>
 80058ca:	ec53 2b10 	vmov	r2, r3, d0
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	f7fb f979 	bl	8000bc8 <__aeabi_d2uiz>
 80058d6:	4603      	mov	r3, r0
 80058d8:	b29a      	uxth	r2, r3
 80058da:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <Load_Settings+0x398>)
 80058dc:	801a      	strh	r2, [r3, #0]
		logging = (uint16_t)Read_Variable_From_File(logging_tag);
 80058de:	2017      	movs	r0, #23
 80058e0:	f7ff fe96 	bl	8005610 <Read_Variable_From_File>
 80058e4:	ec53 2b10 	vmov	r2, r3, d0
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	f7fb f96c 	bl	8000bc8 <__aeabi_d2uiz>
 80058f0:	4603      	mov	r3, r0
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <Load_Settings+0x39c>)
 80058f8:	701a      	strb	r2, [r3, #0]
		logging_start_hour = (uint16_t)Read_Variable_From_File(logging_start_hour_tag);
 80058fa:	2018      	movs	r0, #24
 80058fc:	f7ff fe88 	bl	8005610 <Read_Variable_From_File>
 8005900:	ec53 2b10 	vmov	r2, r3, d0
 8005904:	4610      	mov	r0, r2
 8005906:	4619      	mov	r1, r3
 8005908:	f7fb f95e 	bl	8000bc8 <__aeabi_d2uiz>
 800590c:	4603      	mov	r3, r0
 800590e:	b29b      	uxth	r3, r3
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <Load_Settings+0x3a0>)
 8005914:	701a      	strb	r2, [r3, #0]
		logging_start_min = (uint16_t)Read_Variable_From_File(logging_start_min_tag);
 8005916:	2019      	movs	r0, #25
 8005918:	f7ff fe7a 	bl	8005610 <Read_Variable_From_File>
 800591c:	ec53 2b10 	vmov	r2, r3, d0
 8005920:	4610      	mov	r0, r2
 8005922:	4619      	mov	r1, r3
 8005924:	f7fb f950 	bl	8000bc8 <__aeabi_d2uiz>
 8005928:	4603      	mov	r3, r0
 800592a:	b29b      	uxth	r3, r3
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <Load_Settings+0x3a4>)
 8005930:	701a      	strb	r2, [r3, #0]
		logging_start_sec = (uint16_t)Read_Variable_From_File(logging_start_sec_tag);
 8005932:	201a      	movs	r0, #26
 8005934:	f7ff fe6c 	bl	8005610 <Read_Variable_From_File>
 8005938:	ec53 2b10 	vmov	r2, r3, d0
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	f7fb f942 	bl	8000bc8 <__aeabi_d2uiz>
 8005944:	4603      	mov	r3, r0
 8005946:	b29b      	uxth	r3, r3
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b29      	ldr	r3, [pc, #164]	; (80059f0 <Load_Settings+0x3a8>)
 800594c:	701a      	strb	r2, [r3, #0]
		logging_period = (uint16_t)Read_Variable_From_File(logging_period_tag);
 800594e:	201b      	movs	r0, #27
 8005950:	f7ff fe5e 	bl	8005610 <Read_Variable_From_File>
 8005954:	ec53 2b10 	vmov	r2, r3, d0
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	f7fb f934 	bl	8000bc8 <__aeabi_d2uiz>
 8005960:	4603      	mov	r3, r0
 8005962:	b29b      	uxth	r3, r3
 8005964:	b2da      	uxtb	r2, r3
 8005966:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <Load_Settings+0x3ac>)
 8005968:	701a      	strb	r2, [r3, #0]
		logging_len = (uint16_t)Read_Variable_From_File(logging_len_tag);
 800596a:	201c      	movs	r0, #28
 800596c:	f7ff fe50 	bl	8005610 <Read_Variable_From_File>
 8005970:	ec53 2b10 	vmov	r2, r3, d0
 8005974:	4610      	mov	r0, r2
 8005976:	4619      	mov	r1, r3
 8005978:	f7fb f926 	bl	8000bc8 <__aeabi_d2uiz>
 800597c:	4603      	mov	r3, r0
 800597e:	b29b      	uxth	r3, r3
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <Load_Settings+0x3b0>)
 8005984:	701a      	strb	r2, [r3, #0]
		logging_num = (uint16_t)Read_Variable_From_File(logging_num_tag);
 8005986:	201d      	movs	r0, #29
 8005988:	f7ff fe42 	bl	8005610 <Read_Variable_From_File>
 800598c:	ec53 2b10 	vmov	r2, r3, d0
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	e032      	b.n	80059fc <Load_Settings+0x3b4>
 8005996:	bf00      	nop
 8005998:	080222b0 	.word	0x080222b0
 800599c:	080222bc 	.word	0x080222bc
 80059a0:	20006d18 	.word	0x20006d18
 80059a4:	200000a8 	.word	0x200000a8
 80059a8:	20000090 	.word	0x20000090
 80059ac:	20000091 	.word	0x20000091
 80059b0:	2000096b 	.word	0x2000096b
 80059b4:	2000096c 	.word	0x2000096c
 80059b8:	2000096d 	.word	0x2000096d
 80059bc:	2000096e 	.word	0x2000096e
 80059c0:	2000096f 	.word	0x2000096f
 80059c4:	20000094 	.word	0x20000094
 80059c8:	2000009b 	.word	0x2000009b
 80059cc:	20000970 	.word	0x20000970
 80059d0:	2000009c 	.word	0x2000009c
 80059d4:	20000972 	.word	0x20000972
 80059d8:	200000a0 	.word	0x200000a0
 80059dc:	20000974 	.word	0x20000974
 80059e0:	200000b0 	.word	0x200000b0
 80059e4:	20000978 	.word	0x20000978
 80059e8:	20000979 	.word	0x20000979
 80059ec:	2000097a 	.word	0x2000097a
 80059f0:	2000097b 	.word	0x2000097b
 80059f4:	2000097c 	.word	0x2000097c
 80059f8:	2000097d 	.word	0x2000097d
 80059fc:	f7fb f8e4 	bl	8000bc8 <__aeabi_d2uiz>
 8005a00:	4603      	mov	r3, r0
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4b3f      	ldr	r3, [pc, #252]	; (8005b04 <Load_Settings+0x4bc>)
 8005a08:	701a      	strb	r2, [r3, #0]
		AutoAmpCoef=(uint8_t)Read_Variable_From_File(AutoAmpCoef_tag);
 8005a0a:	2024      	movs	r0, #36	; 0x24
 8005a0c:	f7ff fe00 	bl	8005610 <Read_Variable_From_File>
 8005a10:	ec53 2b10 	vmov	r2, r3, d0
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	f7fb f8d6 	bl	8000bc8 <__aeabi_d2uiz>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <Load_Settings+0x4c0>)
 8005a22:	701a      	strb	r2, [r3, #0]
		AutoOffCoef_period=(uint16_t)Read_Variable_From_File(AutoOffCoef_period_tag);
 8005a24:	2025      	movs	r0, #37	; 0x25
 8005a26:	f7ff fdf3 	bl	8005610 <Read_Variable_From_File>
 8005a2a:	ec53 2b10 	vmov	r2, r3, d0
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f7fb f8c9 	bl	8000bc8 <__aeabi_d2uiz>
 8005a36:	4603      	mov	r3, r0
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <Load_Settings+0x4c4>)
 8005a3c:	801a      	strh	r2, [r3, #0]
		AutoGainCoef_period=(uint16_t)Read_Variable_From_File(AutoGainCoef_period_tag);
 8005a3e:	2027      	movs	r0, #39	; 0x27
 8005a40:	f7ff fde6 	bl	8005610 <Read_Variable_From_File>
 8005a44:	ec53 2b10 	vmov	r2, r3, d0
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f7fb f8bc 	bl	8000bc8 <__aeabi_d2uiz>
 8005a50:	4603      	mov	r3, r0
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <Load_Settings+0x4c8>)
 8005a56:	801a      	strh	r2, [r3, #0]

	//}

		// Читаем калибровочный файл
		while(Read_File(Name_calibr, 8, ReadFileBuf, file_size)!=FR_OK){};
 8005a58:	bf00      	nop
 8005a5a:	1d38      	adds	r0, r7, #4
 8005a5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005a60:	4a2c      	ldr	r2, [pc, #176]	; (8005b14 <Load_Settings+0x4cc>)
 8005a62:	2108      	movs	r1, #8
 8005a64:	f7ff fb9a 	bl	800519c <Read_File>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f5      	bne.n	8005a5a <Load_Settings+0x412>
		a_current=Read_Variable_From_File(a_current_tag);
 8005a6e:	201e      	movs	r0, #30
 8005a70:	f7ff fdce 	bl	8005610 <Read_Variable_From_File>
 8005a74:	eeb0 7a40 	vmov.f32	s14, s0
 8005a78:	eef0 7a60 	vmov.f32	s15, s1
 8005a7c:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <Load_Settings+0x4d0>)
 8005a7e:	ed83 7b00 	vstr	d7, [r3]
		b_current=Read_Variable_From_File(b_current_tag);
 8005a82:	201f      	movs	r0, #31
 8005a84:	f7ff fdc4 	bl	8005610 <Read_Variable_From_File>
 8005a88:	eeb0 7a40 	vmov.f32	s14, s0
 8005a8c:	eef0 7a60 	vmov.f32	s15, s1
 8005a90:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <Load_Settings+0x4d4>)
 8005a92:	ed83 7b00 	vstr	d7, [r3]
		c_current=Read_Variable_From_File(c_current_tag);
 8005a96:	2020      	movs	r0, #32
 8005a98:	f7ff fdba 	bl	8005610 <Read_Variable_From_File>
 8005a9c:	eeb0 7a40 	vmov.f32	s14, s0
 8005aa0:	eef0 7a60 	vmov.f32	s15, s1
 8005aa4:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <Load_Settings+0x4d8>)
 8005aa6:	ed83 7b00 	vstr	d7, [r3]
		a_voltage=Read_Variable_From_File(a_voltage_tag);
 8005aaa:	2021      	movs	r0, #33	; 0x21
 8005aac:	f7ff fdb0 	bl	8005610 <Read_Variable_From_File>
 8005ab0:	eeb0 7a40 	vmov.f32	s14, s0
 8005ab4:	eef0 7a60 	vmov.f32	s15, s1
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <Load_Settings+0x4dc>)
 8005aba:	ed83 7b00 	vstr	d7, [r3]
		b_voltage=Read_Variable_From_File(b_voltage_tag);
 8005abe:	2022      	movs	r0, #34	; 0x22
 8005ac0:	f7ff fda6 	bl	8005610 <Read_Variable_From_File>
 8005ac4:	eeb0 7a40 	vmov.f32	s14, s0
 8005ac8:	eef0 7a60 	vmov.f32	s15, s1
 8005acc:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <Load_Settings+0x4e0>)
 8005ace:	ed83 7b00 	vstr	d7, [r3]
		c_voltage=Read_Variable_From_File(c_voltage_tag);
 8005ad2:	2023      	movs	r0, #35	; 0x23
 8005ad4:	f7ff fd9c 	bl	8005610 <Read_Variable_From_File>
 8005ad8:	eeb0 7a40 	vmov.f32	s14, s0
 8005adc:	eef0 7a60 	vmov.f32	s15, s1
 8005ae0:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <Load_Settings+0x4e4>)
 8005ae2:	ed83 7b00 	vstr	d7, [r3]
		RefVoltage=Read_Variable_From_File(RefVoltage_tag);
 8005ae6:	2026      	movs	r0, #38	; 0x26
 8005ae8:	f7ff fd92 	bl	8005610 <Read_Variable_From_File>
 8005aec:	eeb0 7a40 	vmov.f32	s14, s0
 8005af0:	eef0 7a60 	vmov.f32	s15, s1
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <Load_Settings+0x4e8>)
 8005af6:	ed83 7b00 	vstr	d7, [r3]
//		my_itoa(123456.654321, RAM, 0, 20);
//		my_itoa(-654321.123456, RAM, 0, 20);
//		my_itoa(555555, RAM, 0, 20);
//		my_itoa(-444444, RAM, 0, 20);
//		RAM[0]=0;
}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	2000097e 	.word	0x2000097e
 8005b08:	2000096a 	.word	0x2000096a
 8005b0c:	20002274 	.word	0x20002274
 8005b10:	200021dc 	.word	0x200021dc
 8005b14:	20006d18 	.word	0x20006d18
 8005b18:	20006cf8 	.word	0x20006cf8
 8005b1c:	20006d10 	.word	0x20006d10
 8005b20:	20006cf0 	.word	0x20006cf0
 8005b24:	20006d00 	.word	0x20006d00
 8005b28:	20006ce8 	.word	0x20006ce8
 8005b2c:	20006d08 	.word	0x20006d08
 8005b30:	20000088 	.word	0x20000088

08005b34 <led_on>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_on(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
	if(ERROR_REG!=0)LED(1,0,0);
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <led_on+0x28>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <led_on+0x16>
 8005b40:	2200      	movs	r2, #0
 8005b42:	2100      	movs	r1, #0
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7fc f89d 	bl	8001c84 <LED>
	Task_STOP(9);
 8005b4a:	2009      	movs	r0, #9
 8005b4c:	f7fd f8b0 	bl	8002cb0 <Task_STOP>
	Task_RUN(10, 250);
 8005b50:	21fa      	movs	r1, #250	; 0xfa
 8005b52:	200a      	movs	r0, #10
 8005b54:	f7fd f8c6 	bl	8002ce4 <Task_RUN>
}
 8005b58:	bf00      	nop
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000958 	.word	0x20000958

08005b60 <led_off>:
void led_off(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
	LED(0,0,0);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2100      	movs	r1, #0
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f7fc f88b 	bl	8001c84 <LED>
	Task_STOP(10);
 8005b6e:	200a      	movs	r0, #10
 8005b70:	f7fd f89e 	bl	8002cb0 <Task_STOP>
	Task_RUN(9, 250);
 8005b74:	21fa      	movs	r1, #250	; 0xfa
 8005b76:	2009      	movs	r0, #9
 8005b78:	f7fd f8b4 	bl	8002ce4 <Task_RUN>
}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <test_task>:
void test_task(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
	uint8_t CID = MAX77960_Read_Reg(MAX77960_CID);
 8005b86:	2000      	movs	r0, #0
 8005b88:	f7fd f8ee 	bl	8002d68 <MAX77960_Read_Reg>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	71fb      	strb	r3, [r7, #7]
	sleep(300);
 8005b90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005b94:	f7fd f874 	bl	8002c80 <sleep>
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ba4:	f001 ff79 	bl	8007a9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ba8:	f000 f894 	bl	8005cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005bac:	f000 fcba 	bl	8006524 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005bb0:	f000 fa00 	bl	8005fb4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005bb4:	f000 fa3e 	bl	8006034 <MX_I2C2_Init>
  MX_RTC_Init();
 8005bb8:	f000 fa7c 	bl	80060b4 <MX_RTC_Init>
  MX_SPI1_Init();
 8005bbc:	f000 faa6 	bl	800610c <MX_SPI1_Init>
  MX_SPI2_Init();
 8005bc0:	f000 fae2 	bl	8006188 <MX_SPI2_Init>
  MX_SPI3_Init();
 8005bc4:	f000 fb1e 	bl	8006204 <MX_SPI3_Init>
  MX_TIM2_Init();
 8005bc8:	f000 fb5a 	bl	8006280 <MX_TIM2_Init>
  MX_TIM4_Init();
 8005bcc:	f000 fbb4 	bl	8006338 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005bd0:	f000 fc42 	bl	8006458 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8005bd4:	f00c fa36 	bl	8012044 <MX_FATFS_Init>
  MX_DMA_Init();
 8005bd8:	f000 fc76 	bl	80064c8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8005bdc:	f013 f85c 	bl	8018c98 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8005be0:	f000 f952 	bl	8005e88 <MX_ADC2_Init>
  MX_ADC1_Init();
 8005be4:	f000 f8d6 	bl	8005d94 <MX_ADC1_Init>
  MX_TIM6_Init();
 8005be8:	f000 fc00 	bl	80063ec <MX_TIM6_Init>
  MX_DAC1_Init();
 8005bec:	f000 f9b0 	bl	8005f50 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Таски
  new_task[1]=Parser_process;		// Парсинг команд через виртуальный компорт
 8005bf0:	4b28      	ldr	r3, [pc, #160]	; (8005c94 <main+0xf4>)
 8005bf2:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <main+0xf8>)
 8005bf4:	605a      	str	r2, [r3, #4]
  new_task[2]=ADC_process;			// АЦП
 8005bf6:	4b27      	ldr	r3, [pc, #156]	; (8005c94 <main+0xf4>)
 8005bf8:	4a28      	ldr	r2, [pc, #160]	; (8005c9c <main+0xfc>)
 8005bfa:	609a      	str	r2, [r3, #8]
  new_task[3]=Display_process;		// Дисплей
 8005bfc:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <main+0xf4>)
 8005bfe:	4a28      	ldr	r2, [pc, #160]	; (8005ca0 <main+0x100>)
 8005c00:	60da      	str	r2, [r3, #12]
  new_task[4]=Buttons_process;		// Кнопки
 8005c02:	4b24      	ldr	r3, [pc, #144]	; (8005c94 <main+0xf4>)
 8005c04:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <main+0x104>)
 8005c06:	611a      	str	r2, [r3, #16]
  new_task[5]=RTC_process;			// Часы реального времени
 8005c08:	4b22      	ldr	r3, [pc, #136]	; (8005c94 <main+0xf4>)
 8005c0a:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <main+0x108>)
 8005c0c:	615a      	str	r2, [r3, #20]
  new_task[6]=Auto_OFF_process;		// Автовыключение
 8005c0e:	4b21      	ldr	r3, [pc, #132]	; (8005c94 <main+0xf4>)
 8005c10:	4a26      	ldr	r2, [pc, #152]	; (8005cac <main+0x10c>)
 8005c12:	619a      	str	r2, [r3, #24]
  new_task[7]=Temperature_process;	// Температура МКУ
 8005c14:	4b1f      	ldr	r3, [pc, #124]	; (8005c94 <main+0xf4>)
 8005c16:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <main+0x110>)
 8005c18:	61da      	str	r2, [r3, #28]
  new_task[8]=Battery_process;		// Напряжение на батарее
 8005c1a:	4b1e      	ldr	r3, [pc, #120]	; (8005c94 <main+0xf4>)
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <main+0x114>)
 8005c1e:	621a      	str	r2, [r3, #32]
new_task[11]=test_task;
 8005c20:	4b1c      	ldr	r3, [pc, #112]	; (8005c94 <main+0xf4>)
 8005c22:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <main+0x118>)
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c

  Task_STOP(10);
 8005c26:	200a      	movs	r0, #10
 8005c28:	f7fd f842 	bl	8002cb0 <Task_STOP>
  new_task[9]=led_on;
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <main+0xf4>)
 8005c2e:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <main+0x11c>)
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
  new_task[10]=led_off;
 8005c32:	4b18      	ldr	r3, [pc, #96]	; (8005c94 <main+0xf4>)
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <main+0x120>)
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Питание на самоблокировку
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c3e:	4821      	ldr	r0, [pc, #132]	; (8005cc4 <main+0x124>)
 8005c40:	f004 fa4e 	bl	800a0e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Питание на самоблокировку
 8005c44:	2201      	movs	r2, #1
 8005c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c4a:	481f      	ldr	r0, [pc, #124]	; (8005cc8 <main+0x128>)
 8005c4c:	f004 fa48 	bl	800a0e0 <HAL_GPIO_WritePin>
  TURN_ON_ADC_POWER();
 8005c50:	2201      	movs	r2, #1
 8005c52:	2140      	movs	r1, #64	; 0x40
 8005c54:	481b      	ldr	r0, [pc, #108]	; (8005cc4 <main+0x124>)
 8005c56:	f004 fa43 	bl	800a0e0 <HAL_GPIO_WritePin>
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c60:	4819      	ldr	r0, [pc, #100]	; (8005cc8 <main+0x128>)
 8005c62:	f004 fa3d 	bl	800a0e0 <HAL_GPIO_WritePin>

  Buttons_init();
 8005c66:	f7fb ff35 	bl	8001ad4 <Buttons_init>
  Display_init();
 8005c6a:	f7fc fd8b 	bl	8002784 <Display_init>
  ADC_init();
 8005c6e:	f7fb fc9b 	bl	80015a8 <ADC_init>
  W25_Init();
 8005c72:	f7fe fdd7 	bl	8004824 <W25_Init>
  BLueTooth_Configuration(BLE_config);
 8005c76:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <main+0x12c>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fb ffac 	bl	8001bd8 <BLueTooth_Configuration>
  Logging_init();
 8005c80:	f7ff fa56 	bl	8005130 <Logging_init>
  Load_Settings();
 8005c84:	f7ff fce0 	bl	8005648 <Load_Settings>



  Play_Sound((char*)"INTRO.WAV");
 8005c88:	4811      	ldr	r0, [pc, #68]	; (8005cd0 <main+0x130>)
 8005c8a:	f000 fd83 	bl	8006794 <Play_Sound>
  ELSPIRE_OS_KERNEL();
 8005c8e:	f7fc ff97 	bl	8002bc0 <ELSPIRE_OS_KERNEL>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005c92:	e7fe      	b.n	8005c92 <main+0xf2>
 8005c94:	20002004 	.word	0x20002004
 8005c98:	08003979 	.word	0x08003979
 8005c9c:	08001811 	.word	0x08001811
 8005ca0:	08002ad5 	.word	0x08002ad5
 8005ca4:	080022b9 	.word	0x080022b9
 8005ca8:	08017dd1 	.word	0x08017dd1
 8005cac:	08016f71 	.word	0x08016f71
 8005cb0:	080076a1 	.word	0x080076a1
 8005cb4:	08017bb1 	.word	0x08017bb1
 8005cb8:	08005b81 	.word	0x08005b81
 8005cbc:	08005b35 	.word	0x08005b35
 8005cc0:	08005b61 	.word	0x08005b61
 8005cc4:	48000800 	.word	0x48000800
 8005cc8:	48000c00 	.word	0x48000c00
 8005ccc:	20000080 	.word	0x20000080
 8005cd0:	080222c4 	.word	0x080222c4

08005cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b096      	sub	sp, #88	; 0x58
 8005cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cda:	f107 0314 	add.w	r3, r7, #20
 8005cde:	2244      	movs	r2, #68	; 0x44
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f017 fa5c 	bl	801d1a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ce8:	463b      	mov	r3, r7
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	60da      	str	r2, [r3, #12]
 8005cf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005cf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005cfa:	f006 f877 	bl	800bdec <HAL_PWREx_ControlVoltageScaling>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005d04:	f000 fd3a 	bl	800677c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005d08:	f005 ffe2 	bl	800bcd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <SystemClock_Config+0xbc>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <SystemClock_Config+0xbc>)
 8005d14:	f023 0318 	bic.w	r3, r3, #24
 8005d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005d1c:	2305      	movs	r3, #5
 8005d1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005d26:	2301      	movs	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005d36:	2314      	movs	r3, #20
 8005d38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005d42:	2302      	movs	r3, #2
 8005d44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d46:	f107 0314 	add.w	r3, r7, #20
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f006 f8b4 	bl	800beb8 <HAL_RCC_OscConfig>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005d56:	f000 fd11 	bl	800677c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d5a:	230f      	movs	r3, #15
 8005d5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005d6e:	463b      	mov	r3, r7
 8005d70:	2104      	movs	r1, #4
 8005d72:	4618      	mov	r0, r3
 8005d74:	f006 fcc6 	bl	800c704 <HAL_RCC_ClockConfig>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d7e:	f000 fcfd 	bl	800677c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8005d82:	f007 f9f3 	bl	800d16c <HAL_RCCEx_EnableLSECSS>
}
 8005d86:	bf00      	nop
 8005d88:	3758      	adds	r7, #88	; 0x58
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40021000 	.word	0x40021000

08005d94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005d9a:	f107 031c 	add.w	r3, r7, #28
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	611a      	str	r2, [r3, #16]
 8005db4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005db6:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005db8:	4a31      	ldr	r2, [pc, #196]	; (8005e80 <MX_ADC1_Init+0xec>)
 8005dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005dbc:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005dc2:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dc8:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005dce:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005dd4:	4b29      	ldr	r3, [pc, #164]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005dda:	4b28      	ldr	r3, [pc, #160]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005de0:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005de6:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005df4:	4b21      	ldr	r3, [pc, #132]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005dfa:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005e08:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005e0e:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005e16:	4819      	ldr	r0, [pc, #100]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005e18:	f002 f884 	bl	8007f24 <HAL_ADC_Init>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8005e22:	f000 fcab 	bl	800677c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005e2a:	f107 031c 	add.w	r3, r7, #28
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4812      	ldr	r0, [pc, #72]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005e32:	f003 f885 	bl	8008f40 <HAL_ADCEx_MultiModeConfigChannel>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005e3c:	f000 fc9e 	bl	800677c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005e40:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <MX_ADC1_Init+0xf0>)
 8005e42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005e44:	2306      	movs	r3, #6
 8005e46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005e48:	2304      	movs	r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005e4c:	237f      	movs	r3, #127	; 0x7f
 8005e4e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005e50:	2304      	movs	r3, #4
 8005e52:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e58:	1d3b      	adds	r3, r7, #4
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4807      	ldr	r0, [pc, #28]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005e5e:	f002 fb47 	bl	80084f0 <HAL_ADC_ConfigChannel>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005e68:	f000 fc88 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start(&hadc1);
 8005e6c:	4803      	ldr	r0, [pc, #12]	; (8005e7c <MX_ADC1_Init+0xe8>)
 8005e6e:	f002 f9b3 	bl	80081d8 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8005e72:	bf00      	nop
 8005e74:	3728      	adds	r7, #40	; 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20007c34 	.word	0x20007c34
 8005e80:	50040000 	.word	0x50040000
 8005e84:	c7520000 	.word	0xc7520000

08005e88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005e8e:	463b      	mov	r3, r7
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	605a      	str	r2, [r3, #4]
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	611a      	str	r2, [r3, #16]
 8005e9c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8005e9e:	4b29      	ldr	r3, [pc, #164]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ea0:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <MX_ADC2_Init+0xc0>)
 8005ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005ea4:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005eaa:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005eb0:	4b24      	ldr	r3, [pc, #144]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005eb6:	4b23      	ldr	r3, [pc, #140]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ebc:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005ec2:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005ee8:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005efe:	4811      	ldr	r0, [pc, #68]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005f00:	f002 f810 	bl	8007f24 <HAL_ADC_Init>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8005f0a:	f000 fc37 	bl	800677c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <MX_ADC2_Init+0xc4>)
 8005f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005f12:	2306      	movs	r3, #6
 8005f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005f16:	2304      	movs	r3, #4
 8005f18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005f1a:	237f      	movs	r3, #127	; 0x7f
 8005f1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005f1e:	2304      	movs	r3, #4
 8005f20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f26:	463b      	mov	r3, r7
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4806      	ldr	r0, [pc, #24]	; (8005f44 <MX_ADC2_Init+0xbc>)
 8005f2c:	f002 fae0 	bl	80084f0 <HAL_ADC_ConfigChannel>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8005f36:	f000 fc21 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005f3a:	bf00      	nop
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20007bcc 	.word	0x20007bcc
 8005f48:	50040100 	.word	0x50040100
 8005f4c:	21800100 	.word	0x21800100

08005f50 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	; 0x28
 8005f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	2224      	movs	r2, #36	; 0x24
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f017 f91f 	bl	801d1a0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8005f62:	4b12      	ldr	r3, [pc, #72]	; (8005fac <MX_DAC1_Init+0x5c>)
 8005f64:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <MX_DAC1_Init+0x60>)
 8005f66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005f68:	4810      	ldr	r0, [pc, #64]	; (8005fac <MX_DAC1_Init+0x5c>)
 8005f6a:	f003 f97b 	bl	8009264 <HAL_DAC_Init>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005f74:	f000 fc02 	bl	800677c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	2210      	movs	r2, #16
 8005f90:	4619      	mov	r1, r3
 8005f92:	4806      	ldr	r0, [pc, #24]	; (8005fac <MX_DAC1_Init+0x5c>)
 8005f94:	f003 fad6 	bl	8009544 <HAL_DAC_ConfigChannel>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8005f9e:	f000 fbed 	bl	800677c <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//  HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf, 512, DAC_ALIGN_12B_R);
  /* USER CODE END DAC1_Init 2 */

}
 8005fa2:	bf00      	nop
 8005fa4:	3728      	adds	r7, #40	; 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20007c9c 	.word	0x20007c9c
 8005fb0:	40007400 	.word	0x40007400

08005fb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fba:	4a1c      	ldr	r2, [pc, #112]	; (800602c <MX_I2C1_Init+0x78>)
 8005fbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8005fbe:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <MX_I2C1_Init+0x7c>)
 8005fc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005fc4:	4b18      	ldr	r3, [pc, #96]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fd0:	4b15      	ldr	r3, [pc, #84]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005fdc:	4b12      	ldr	r3, [pc, #72]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fe2:	4b11      	ldr	r3, [pc, #68]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <MX_I2C1_Init+0x74>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fee:	480e      	ldr	r0, [pc, #56]	; (8006028 <MX_I2C1_Init+0x74>)
 8005ff0:	f004 f8b1 	bl	800a156 <HAL_I2C_Init>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005ffa:	f000 fbbf 	bl	800677c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005ffe:	2100      	movs	r1, #0
 8006000:	4809      	ldr	r0, [pc, #36]	; (8006028 <MX_I2C1_Init+0x74>)
 8006002:	f004 fd01 	bl	800aa08 <HAL_I2CEx_ConfigAnalogFilter>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800600c:	f000 fbb6 	bl	800677c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006010:	2100      	movs	r1, #0
 8006012:	4805      	ldr	r0, [pc, #20]	; (8006028 <MX_I2C1_Init+0x74>)
 8006014:	f004 fd43 	bl	800aa9e <HAL_I2CEx_ConfigDigitalFilter>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800601e:	f000 fbad 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20007a24 	.word	0x20007a24
 800602c:	40005400 	.word	0x40005400
 8006030:	10909cec 	.word	0x10909cec

08006034 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006038:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <MX_I2C2_Init+0x74>)
 800603a:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <MX_I2C2_Init+0x78>)
 800603c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800603e:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006040:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <MX_I2C2_Init+0x7c>)
 8006042:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006044:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800604a:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <MX_I2C2_Init+0x74>)
 800604c:	2201      	movs	r2, #1
 800604e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006050:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006058:	2200      	movs	r2, #0
 800605a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800605c:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <MX_I2C2_Init+0x74>)
 800605e:	2200      	movs	r2, #0
 8006060:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006064:	2200      	movs	r2, #0
 8006066:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <MX_I2C2_Init+0x74>)
 800606a:	2200      	movs	r2, #0
 800606c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800606e:	480e      	ldr	r0, [pc, #56]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006070:	f004 f871 	bl	800a156 <HAL_I2C_Init>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800607a:	f000 fb7f 	bl	800677c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800607e:	2100      	movs	r1, #0
 8006080:	4809      	ldr	r0, [pc, #36]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006082:	f004 fcc1 	bl	800aa08 <HAL_I2CEx_ConfigAnalogFilter>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800608c:	f000 fb76 	bl	800677c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006090:	2100      	movs	r1, #0
 8006092:	4805      	ldr	r0, [pc, #20]	; (80060a8 <MX_I2C2_Init+0x74>)
 8006094:	f004 fd03 	bl	800aa9e <HAL_I2CEx_ConfigDigitalFilter>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800609e:	f000 fb6d 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	200079d8 	.word	0x200079d8
 80060ac:	40005800 	.word	0x40005800
 80060b0:	10909cec 	.word	0x10909cec

080060b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80060b8:	4b12      	ldr	r3, [pc, #72]	; (8006104 <MX_RTC_Init+0x50>)
 80060ba:	4a13      	ldr	r2, [pc, #76]	; (8006108 <MX_RTC_Init+0x54>)
 80060bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80060be:	4b11      	ldr	r3, [pc, #68]	; (8006104 <MX_RTC_Init+0x50>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <MX_RTC_Init+0x50>)
 80060c6:	227f      	movs	r2, #127	; 0x7f
 80060c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80060ca:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <MX_RTC_Init+0x50>)
 80060cc:	22ff      	movs	r2, #255	; 0xff
 80060ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <MX_RTC_Init+0x50>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <MX_RTC_Init+0x50>)
 80060d8:	2200      	movs	r2, #0
 80060da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <MX_RTC_Init+0x50>)
 80060de:	2200      	movs	r2, #0
 80060e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <MX_RTC_Init+0x50>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80060e8:	4806      	ldr	r0, [pc, #24]	; (8006104 <MX_RTC_Init+0x50>)
 80060ea:	f007 fa1f 	bl	800d52c <HAL_RTC_Init>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80060f4:	f000 fb42 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_EnableBypassShadow(&hrtc);
 80060f8:	4802      	ldr	r0, [pc, #8]	; (8006104 <MX_RTC_Init+0x50>)
 80060fa:	f007 fda5 	bl	800dc48 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_Init 2 */

}
 80060fe:	bf00      	nop
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20007950 	.word	0x20007950
 8006108:	40002800 	.word	0x40002800

0800610c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <MX_SPI1_Init+0x74>)
 8006112:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <MX_SPI1_Init+0x78>)
 8006114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006116:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <MX_SPI1_Init+0x74>)
 8006118:	f44f 7282 	mov.w	r2, #260	; 0x104
 800611c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800611e:	4b18      	ldr	r3, [pc, #96]	; (8006180 <MX_SPI1_Init+0x74>)
 8006120:	2200      	movs	r2, #0
 8006122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006124:	4b16      	ldr	r3, [pc, #88]	; (8006180 <MX_SPI1_Init+0x74>)
 8006126:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800612a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800612c:	4b14      	ldr	r3, [pc, #80]	; (8006180 <MX_SPI1_Init+0x74>)
 800612e:	2200      	movs	r2, #0
 8006130:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <MX_SPI1_Init+0x74>)
 8006134:	2200      	movs	r2, #0
 8006136:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <MX_SPI1_Init+0x74>)
 800613a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800613e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006140:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <MX_SPI1_Init+0x74>)
 8006142:	2228      	movs	r2, #40	; 0x28
 8006144:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006146:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <MX_SPI1_Init+0x74>)
 8006148:	2200      	movs	r2, #0
 800614a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <MX_SPI1_Init+0x74>)
 800614e:	2200      	movs	r2, #0
 8006150:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <MX_SPI1_Init+0x74>)
 8006154:	2200      	movs	r2, #0
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006158:	4b09      	ldr	r3, [pc, #36]	; (8006180 <MX_SPI1_Init+0x74>)
 800615a:	2207      	movs	r2, #7
 800615c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <MX_SPI1_Init+0x74>)
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <MX_SPI1_Init+0x74>)
 8006166:	2208      	movs	r2, #8
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800616a:	4805      	ldr	r0, [pc, #20]	; (8006180 <MX_SPI1_Init+0x74>)
 800616c:	f007 fda2 	bl	800dcb4 <HAL_SPI_Init>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006176:	f000 fb01 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20007974 	.word	0x20007974
 8006184:	40013000 	.word	0x40013000

08006188 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800618c:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <MX_SPI2_Init+0x74>)
 800618e:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <MX_SPI2_Init+0x78>)
 8006190:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006192:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <MX_SPI2_Init+0x74>)
 8006194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006198:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800619a:	4b18      	ldr	r3, [pc, #96]	; (80061fc <MX_SPI2_Init+0x74>)
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <MX_SPI2_Init+0x74>)
 80061a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80061a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061a8:	4b14      	ldr	r3, [pc, #80]	; (80061fc <MX_SPI2_Init+0x74>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <MX_SPI2_Init+0x74>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80061b4:	4b11      	ldr	r3, [pc, #68]	; (80061fc <MX_SPI2_Init+0x74>)
 80061b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <MX_SPI2_Init+0x74>)
 80061be:	2228      	movs	r2, #40	; 0x28
 80061c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061c2:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <MX_SPI2_Init+0x74>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <MX_SPI2_Init+0x74>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <MX_SPI2_Init+0x74>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80061d4:	4b09      	ldr	r3, [pc, #36]	; (80061fc <MX_SPI2_Init+0x74>)
 80061d6:	2207      	movs	r2, #7
 80061d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80061da:	4b08      	ldr	r3, [pc, #32]	; (80061fc <MX_SPI2_Init+0x74>)
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <MX_SPI2_Init+0x74>)
 80061e2:	2208      	movs	r2, #8
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80061e6:	4805      	ldr	r0, [pc, #20]	; (80061fc <MX_SPI2_Init+0x74>)
 80061e8:	f007 fd64 	bl	800dcb4 <HAL_SPI_Init>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80061f2:	f000 fac3 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80061f6:	bf00      	nop
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20002034 	.word	0x20002034
 8006200:	40003800 	.word	0x40003800

08006204 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006208:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <MX_SPI3_Init+0x74>)
 800620a:	4a1c      	ldr	r2, [pc, #112]	; (800627c <MX_SPI3_Init+0x78>)
 800620c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <MX_SPI3_Init+0x74>)
 8006210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006214:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006216:	4b18      	ldr	r3, [pc, #96]	; (8006278 <MX_SPI3_Init+0x74>)
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800621c:	4b16      	ldr	r3, [pc, #88]	; (8006278 <MX_SPI3_Init+0x74>)
 800621e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006222:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <MX_SPI3_Init+0x74>)
 8006226:	2200      	movs	r2, #0
 8006228:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <MX_SPI3_Init+0x74>)
 800622c:	2200      	movs	r2, #0
 800622e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <MX_SPI3_Init+0x74>)
 8006232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006236:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <MX_SPI3_Init+0x74>)
 800623a:	2220      	movs	r2, #32
 800623c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <MX_SPI3_Init+0x74>)
 8006240:	2200      	movs	r2, #0
 8006242:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <MX_SPI3_Init+0x74>)
 8006246:	2200      	movs	r2, #0
 8006248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <MX_SPI3_Init+0x74>)
 800624c:	2200      	movs	r2, #0
 800624e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <MX_SPI3_Init+0x74>)
 8006252:	2207      	movs	r2, #7
 8006254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <MX_SPI3_Init+0x74>)
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <MX_SPI3_Init+0x74>)
 800625e:	2208      	movs	r2, #8
 8006260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006262:	4805      	ldr	r0, [pc, #20]	; (8006278 <MX_SPI3_Init+0x74>)
 8006264:	f007 fd26 	bl	800dcb4 <HAL_SPI_Init>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800626e:	f000 fa85 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20006484 	.word	0x20006484
 800627c:	40003c00 	.word	0x40003c00

08006280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006286:	f107 031c 	add.w	r3, r7, #28
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	605a      	str	r2, [r3, #4]
 8006290:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006292:	463b      	mov	r3, r7
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	611a      	str	r2, [r3, #16]
 80062a0:	615a      	str	r2, [r3, #20]
 80062a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80062a4:	4b23      	ldr	r3, [pc, #140]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 80062ac:	4b21      	ldr	r3, [pc, #132]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062ae:	2202      	movs	r2, #2
 80062b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80062b8:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062ba:	2232      	movs	r2, #50	; 0x32
 80062bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062be:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062c4:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80062ca:	481a      	ldr	r0, [pc, #104]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062cc:	f008 fd56 	bl	800ed7c <HAL_TIM_PWM_Init>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80062d6:	f000 fa51 	bl	800677c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80062e2:	f107 031c 	add.w	r3, r7, #28
 80062e6:	4619      	mov	r1, r3
 80062e8:	4812      	ldr	r0, [pc, #72]	; (8006334 <MX_TIM2_Init+0xb4>)
 80062ea:	f009 fc93 	bl	800fc14 <HAL_TIMEx_MasterConfigSynchronization>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80062f4:	f000 fa42 	bl	800677c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062f8:	2360      	movs	r3, #96	; 0x60
 80062fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80062fc:	2332      	movs	r3, #50	; 0x32
 80062fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006300:	2300      	movs	r3, #0
 8006302:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006304:	2300      	movs	r3, #0
 8006306:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006308:	463b      	mov	r3, r7
 800630a:	2200      	movs	r2, #0
 800630c:	4619      	mov	r1, r3
 800630e:	4809      	ldr	r0, [pc, #36]	; (8006334 <MX_TIM2_Init+0xb4>)
 8006310:	f008 ffb2 	bl	800f278 <HAL_TIM_PWM_ConfigChannel>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800631a:	f000 fa2f 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800631e:	2100      	movs	r1, #0
 8006320:	4804      	ldr	r0, [pc, #16]	; (8006334 <MX_TIM2_Init+0xb4>)
 8006322:	f008 fd83 	bl	800ee2c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006326:	4803      	ldr	r0, [pc, #12]	; (8006334 <MX_TIM2_Init+0xb4>)
 8006328:	f000 ff02 	bl	8007130 <HAL_TIM_MspPostInit>

}
 800632c:	bf00      	nop
 800632e:	3728      	adds	r7, #40	; 0x28
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20007d48 	.word	0x20007d48

08006338 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800633e:	f107 031c 	add.w	r3, r7, #28
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	605a      	str	r2, [r3, #4]
 8006348:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800634a:	463b      	mov	r3, r7
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	60da      	str	r2, [r3, #12]
 8006356:	611a      	str	r2, [r3, #16]
 8006358:	615a      	str	r2, [r3, #20]
 800635a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800635c:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <MX_TIM4_Init+0xac>)
 800635e:	4a22      	ldr	r2, [pc, #136]	; (80063e8 <MX_TIM4_Init+0xb0>)
 8006360:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006362:	4b20      	ldr	r3, [pc, #128]	; (80063e4 <MX_TIM4_Init+0xac>)
 8006364:	2200      	movs	r2, #0
 8006366:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <MX_TIM4_Init+0xac>)
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800636e:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <MX_TIM4_Init+0xac>)
 8006370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006374:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006376:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <MX_TIM4_Init+0xac>)
 8006378:	2200      	movs	r2, #0
 800637a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800637c:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <MX_TIM4_Init+0xac>)
 800637e:	2200      	movs	r2, #0
 8006380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006382:	4818      	ldr	r0, [pc, #96]	; (80063e4 <MX_TIM4_Init+0xac>)
 8006384:	f008 fcfa 	bl	800ed7c <HAL_TIM_PWM_Init>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800638e:	f000 f9f5 	bl	800677c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800639a:	f107 031c 	add.w	r3, r7, #28
 800639e:	4619      	mov	r1, r3
 80063a0:	4810      	ldr	r0, [pc, #64]	; (80063e4 <MX_TIM4_Init+0xac>)
 80063a2:	f009 fc37 	bl	800fc14 <HAL_TIMEx_MasterConfigSynchronization>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80063ac:	f000 f9e6 	bl	800677c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063b0:	2360      	movs	r3, #96	; 0x60
 80063b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063bc:	2300      	movs	r3, #0
 80063be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80063c0:	463b      	mov	r3, r7
 80063c2:	2204      	movs	r2, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4807      	ldr	r0, [pc, #28]	; (80063e4 <MX_TIM4_Init+0xac>)
 80063c8:	f008 ff56 	bl	800f278 <HAL_TIM_PWM_ConfigChannel>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80063d2:	f000 f9d3 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80063d6:	4803      	ldr	r0, [pc, #12]	; (80063e4 <MX_TIM4_Init+0xac>)
 80063d8:	f000 feaa 	bl	8007130 <HAL_TIM_MspPostInit>

}
 80063dc:	bf00      	nop
 80063de:	3728      	adds	r7, #40	; 0x28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20007cfc 	.word	0x20007cfc
 80063e8:	40000800 	.word	0x40000800

080063ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <MX_TIM6_Init+0x64>)
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <MX_TIM6_Init+0x68>)
 8006400:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8006402:	4b13      	ldr	r3, [pc, #76]	; (8006450 <MX_TIM6_Init+0x64>)
 8006404:	2202      	movs	r2, #2
 8006406:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <MX_TIM6_Init+0x64>)
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1666;
 800640e:	4b10      	ldr	r3, [pc, #64]	; (8006450 <MX_TIM6_Init+0x64>)
 8006410:	f240 6282 	movw	r2, #1666	; 0x682
 8006414:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <MX_TIM6_Init+0x64>)
 8006418:	2200      	movs	r2, #0
 800641a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800641c:	480c      	ldr	r0, [pc, #48]	; (8006450 <MX_TIM6_Init+0x64>)
 800641e:	f008 fb55 	bl	800eacc <HAL_TIM_Base_Init>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8006428:	f000 f9a8 	bl	800677c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800642c:	2320      	movs	r3, #32
 800642e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4805      	ldr	r0, [pc, #20]	; (8006450 <MX_TIM6_Init+0x64>)
 800643a:	f009 fbeb 	bl	800fc14 <HAL_TIMEx_MasterConfigSynchronization>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8006444:	f000 f99a 	bl	800677c <Error_Handler>
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//    HAL_TIM_Base_Start_IT(&htim6);
 //   HAL_TIM_Base_Start(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20007cb0 	.word	0x20007cb0
 8006454:	40001000 	.word	0x40001000

08006458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800645c:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 800645e:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <MX_USART1_UART_Init+0x6c>)
 8006460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006462:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 8006464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800646a:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 800646c:	2200      	movs	r2, #0
 800646e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006470:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 8006472:	2200      	movs	r2, #0
 8006474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 8006478:	2200      	movs	r2, #0
 800647a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 800647e:	220c      	movs	r2, #12
 8006480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 8006484:	2200      	movs	r2, #0
 8006486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006488:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 800648a:	2200      	movs	r2, #0
 800648c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800648e:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 8006490:	2200      	movs	r2, #0
 8006492:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 8006496:	2200      	movs	r2, #0
 8006498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800649a:	4809      	ldr	r0, [pc, #36]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 800649c:	f009 fc60 	bl	800fd60 <HAL_UART_Init>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80064a6:	f000 f969 	bl	800677c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <MX_USART1_UART_Init+0x68>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0220 	orr.w	r2, r2, #32
 80064b8:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20007b48 	.word	0x20007b48
 80064c4:	40013800 	.word	0x40013800

080064c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ce:	4b14      	ldr	r3, [pc, #80]	; (8006520 <MX_DMA_Init+0x58>)
 80064d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d2:	4a13      	ldr	r2, [pc, #76]	; (8006520 <MX_DMA_Init+0x58>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	6493      	str	r3, [r2, #72]	; 0x48
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <MX_DMA_Init+0x58>)
 80064dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	607b      	str	r3, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80064e6:	2200      	movs	r2, #0
 80064e8:	2100      	movs	r1, #0
 80064ea:	200b      	movs	r0, #11
 80064ec:	f002 fe90 	bl	8009210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80064f0:	200b      	movs	r0, #11
 80064f2:	f002 fea9 	bl	8009248 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80064f6:	2200      	movs	r2, #0
 80064f8:	2100      	movs	r1, #0
 80064fa:	200c      	movs	r0, #12
 80064fc:	f002 fe88 	bl	8009210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006500:	200c      	movs	r0, #12
 8006502:	f002 fea1 	bl	8009248 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	200e      	movs	r0, #14
 800650c:	f002 fe80 	bl	8009210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006510:	200e      	movs	r0, #14
 8006512:	f002 fe99 	bl	8009248 <HAL_NVIC_EnableIRQ>

}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40021000 	.word	0x40021000

08006524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08c      	sub	sp, #48	; 0x30
 8006528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800652a:	f107 031c 	add.w	r3, r7, #28
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	60da      	str	r2, [r3, #12]
 8006538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800653a:	4b71      	ldr	r3, [pc, #452]	; (8006700 <MX_GPIO_Init+0x1dc>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	4a70      	ldr	r2, [pc, #448]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006540:	f043 0310 	orr.w	r3, r3, #16
 8006544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006546:	4b6e      	ldr	r3, [pc, #440]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006552:	4b6b      	ldr	r3, [pc, #428]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	4a6a      	ldr	r2, [pc, #424]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006558:	f043 0304 	orr.w	r3, r3, #4
 800655c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800655e:	4b68      	ldr	r3, [pc, #416]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800656a:	4b65      	ldr	r3, [pc, #404]	; (8006700 <MX_GPIO_Init+0x1dc>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	4a64      	ldr	r2, [pc, #400]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006576:	4b62      	ldr	r3, [pc, #392]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006582:	4b5f      	ldr	r3, [pc, #380]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	4a5e      	ldr	r2, [pc, #376]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800658e:	4b5c      	ldr	r3, [pc, #368]	; (8006700 <MX_GPIO_Init+0x1dc>)
 8006590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800659a:	4b59      	ldr	r3, [pc, #356]	; (8006700 <MX_GPIO_Init+0x1dc>)
 800659c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659e:	4a58      	ldr	r2, [pc, #352]	; (8006700 <MX_GPIO_Init+0x1dc>)
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065a6:	4b56      	ldr	r3, [pc, #344]	; (8006700 <MX_GPIO_Init+0x1dc>)
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	60bb      	str	r3, [r7, #8]
 80065b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065b2:	4b53      	ldr	r3, [pc, #332]	; (8006700 <MX_GPIO_Init+0x1dc>)
 80065b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b6:	4a52      	ldr	r2, [pc, #328]	; (8006700 <MX_GPIO_Init+0x1dc>)
 80065b8:	f043 0308 	orr.w	r3, r3, #8
 80065bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065be:	4b50      	ldr	r3, [pc, #320]	; (8006700 <MX_GPIO_Init+0x1dc>)
 80065c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80065ca:	2200      	movs	r2, #0
 80065cc:	2115      	movs	r1, #21
 80065ce:	484d      	ldr	r0, [pc, #308]	; (8006704 <MX_GPIO_Init+0x1e0>)
 80065d0:	f003 fd86 	bl	800a0e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin, GPIO_PIN_RESET);
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80065da:	484b      	ldr	r0, [pc, #300]	; (8006708 <MX_GPIO_Init+0x1e4>)
 80065dc:	f003 fd80 	bl	800a0e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 80065e0:	2200      	movs	r2, #0
 80065e2:	f241 3126 	movw	r1, #4902	; 0x1326
 80065e6:	4849      	ldr	r0, [pc, #292]	; (800670c <MX_GPIO_Init+0x1e8>)
 80065e8:	f003 fd7a 	bl	800a0e0 <HAL_GPIO_WritePin>
                          |I2C_ADDR_Pin|LCD_CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 80065ec:	2200      	movs	r2, #0
 80065ee:	f24c 014c 	movw	r1, #49228	; 0xc04c
 80065f2:	4847      	ldr	r0, [pc, #284]	; (8006710 <MX_GPIO_Init+0x1ec>)
 80065f4:	f003 fd74 	bl	800a0e0 <HAL_GPIO_WritePin>
                          |LCD_BL_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_ARK_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80065f8:	2315      	movs	r3, #21
 80065fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065fc:	2301      	movs	r3, #1
 80065fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006600:	2300      	movs	r3, #0
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006604:	2300      	movs	r3, #0
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006608:	f107 031c 	add.w	r3, r7, #28
 800660c:	4619      	mov	r1, r3
 800660e:	483d      	ldr	r0, [pc, #244]	; (8006704 <MX_GPIO_Init+0x1e0>)
 8006610:	f003 fbbc 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Reserved_Pin */
  GPIO_InitStruct.Pin = Reserved_Pin;
 8006614:	2308      	movs	r3, #8
 8006616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006618:	2300      	movs	r3, #0
 800661a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661c:	2300      	movs	r3, #0
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reserved_GPIO_Port, &GPIO_InitStruct);
 8006620:	f107 031c 	add.w	r3, r7, #28
 8006624:	4619      	mov	r1, r3
 8006626:	4837      	ldr	r0, [pc, #220]	; (8006704 <MX_GPIO_Init+0x1e0>)
 8006628:	f003 fbb0 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006630:	2300      	movs	r3, #0
 8006632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006634:	2302      	movs	r3, #2
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006638:	f107 031c 	add.w	r3, r7, #28
 800663c:	4619      	mov	r1, r3
 800663e:	4831      	ldr	r0, [pc, #196]	; (8006704 <MX_GPIO_Init+0x1e0>)
 8006640:	f003 fba4 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RDYB_Pin */
  GPIO_InitStruct.Pin = ADC_RDYB_Pin;
 8006644:	2310      	movs	r3, #16
 8006646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006648:	4b32      	ldr	r3, [pc, #200]	; (8006714 <MX_GPIO_Init+0x1f0>)
 800664a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664c:	2300      	movs	r3, #0
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_RDYB_GPIO_Port, &GPIO_InitStruct);
 8006650:	f107 031c 	add.w	r3, r7, #28
 8006654:	4619      	mov	r1, r3
 8006656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800665a:	f003 fb97 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin EN_AV6_Pin EN_V24_Pin EN_LCD_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin;
 800665e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8006662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006664:	2301      	movs	r3, #1
 8006666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006668:	2300      	movs	r3, #0
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800666c:	2300      	movs	r3, #0
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006670:	f107 031c 	add.w	r3, r7, #28
 8006674:	4619      	mov	r1, r3
 8006676:	4824      	ldr	r0, [pc, #144]	; (8006708 <MX_GPIO_Init+0x1e4>)
 8006678:	f003 fb88 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_P_Pin */
  GPIO_InitStruct.Pin = SW_P_Pin;
 800667c:	2320      	movs	r3, #32
 800667e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006680:	4b25      	ldr	r3, [pc, #148]	; (8006718 <MX_GPIO_Init+0x1f4>)
 8006682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006684:	2300      	movs	r3, #0
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_P_GPIO_Port, &GPIO_InitStruct);
 8006688:	f107 031c 	add.w	r3, r7, #28
 800668c:	4619      	mov	r1, r3
 800668e:	481e      	ldr	r0, [pc, #120]	; (8006708 <MX_GPIO_Init+0x1e4>)
 8006690:	f003 fb7c 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : I_P_ERROR_Pin */
  GPIO_InitStruct.Pin = I_P_ERROR_Pin;
 8006694:	2301      	movs	r3, #1
 8006696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006698:	4b1f      	ldr	r3, [pc, #124]	; (8006718 <MX_GPIO_Init+0x1f4>)
 800669a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I_P_ERROR_GPIO_Port, &GPIO_InitStruct);
 80066a0:	f107 031c 	add.w	r3, r7, #28
 80066a4:	4619      	mov	r1, r3
 80066a6:	4819      	ldr	r0, [pc, #100]	; (800670c <MX_GPIO_Init+0x1e8>)
 80066a8:	f003 fb70 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_EN_Pin INT_CHARGER_Pin LCD_SPI_CS_Pin PB5
                           I2C_ADDR_Pin LCD_CD_Pin */
  GPIO_InitStruct.Pin = Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 80066ac:	f241 3326 	movw	r3, #4902	; 0x1326
 80066b0:	61fb      	str	r3, [r7, #28]
                          |I2C_ADDR_Pin|LCD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066b2:	2301      	movs	r3, #1
 80066b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066be:	f107 031c 	add.w	r3, r7, #28
 80066c2:	4619      	mov	r1, r3
 80066c4:	4811      	ldr	r0, [pc, #68]	; (800670c <MX_GPIO_Init+0x1e8>)
 80066c6:	f003 fb61 	bl	8009d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LCD_reserv_Pin EN_AV6_reserv_Pin MEM1_CS_Pin MEM2_CS_Pin
                           LCD_BL_EN2_Pin */
  GPIO_InitStruct.Pin = EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 80066ca:	f24c 034c 	movw	r3, #49228	; 0xc04c
 80066ce:	61fb      	str	r3, [r7, #28]
                          |LCD_BL_EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066d0:	2301      	movs	r3, #1
 80066d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d8:	2300      	movs	r3, #0
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066dc:	f107 031c 	add.w	r3, r7, #28
 80066e0:	4619      	mov	r1, r3
 80066e2:	480b      	ldr	r0, [pc, #44]	; (8006710 <MX_GPIO_Init+0x1ec>)
 80066e4:	f003 fb52 	bl	8009d8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2100      	movs	r1, #0
 80066ec:	200a      	movs	r0, #10
 80066ee:	f002 fd8f 	bl	8009210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80066f2:	200a      	movs	r0, #10
 80066f4:	f002 fda8 	bl	8009248 <HAL_NVIC_EnableIRQ>

}
 80066f8:	bf00      	nop
 80066fa:	3730      	adds	r7, #48	; 0x30
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40021000 	.word	0x40021000
 8006704:	48001000 	.word	0x48001000
 8006708:	48000800 	.word	0x48000800
 800670c:	48000400 	.word	0x48000400
 8006710:	48000c00 	.word	0x48000c00
 8006714:	10210000 	.word	0x10210000
 8006718:	10110000 	.word	0x10110000

0800671c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	ELSPIRE_OS_TIMER();
 8006724:	f7fc fa74 	bl	8002c10 <ELSPIRE_OS_TIMER>

	Buttons_timer();
 8006728:	f7fb ff8e 	bl	8002648 <Buttons_timer>
	Blink_Edit_Parameter_timer();
 800672c:	f7fc f920 	bl	8002970 <Blink_Edit_Parameter_timer>
	menu_timer();
 8006730:	f012 fa7e 	bl	8018c30 <menu_timer>
	Viewer_timer();
 8006734:	f011 fa20 	bl	8017b78 <Viewer_timer>
	Light_OFF_process();
 8006738:	f010 fe04 	bl	8017344 <Light_OFF_process>
	if(rx_cmplt>0)rx_cmplt--;
 800673c:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800673e:	f993 3000 	ldrsb.w	r3, [r3]
 8006742:	2b00      	cmp	r3, #0
 8006744:	dd08      	ble.n	8006758 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006748:	f993 3000 	ldrsb.w	r3, [r3]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	b25a      	sxtb	r2, r3
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006756:	701a      	strb	r2, [r3, #0]
	spi_timeout();
 8006758:	f001 f818 	bl	800778c <spi_timeout>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a05      	ldr	r2, [pc, #20]	; (8006778 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d101      	bne.n	800676a <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8006766:	f001 f9b1 	bl	8007acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	2000095e 	.word	0x2000095e
 8006778:	40012c00 	.word	0x40012c00

0800677c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006780:	b672      	cpsid	i
}
 8006782:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // Если попали сюда, то делаем программный сброс контроллера
	  SCB->AIRCR = 0x05FA0004;
 8006784:	4b01      	ldr	r3, [pc, #4]	; (800678c <Error_Handler+0x10>)
 8006786:	4a02      	ldr	r2, [pc, #8]	; (8006790 <Error_Handler+0x14>)
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	e7fb      	b.n	8006784 <Error_Handler+0x8>
 800678c:	e000ed00 	.word	0xe000ed00
 8006790:	05fa0004 	.word	0x05fa0004

08006794 <Play_Sound>:
uint32_t wavcounter=0;



void Play_Sound(char*name)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af02      	add	r7, sp, #8
 800679a:	6078      	str	r0, [r7, #4]
	//uint8_t path[11] = "AUDIO_5.WAV";
	uint16_t i;

	// Открываем файл

	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 800679c:	2200      	movs	r2, #0
 800679e:	4934      	ldr	r1, [pc, #208]	; (8006870 <Play_Sound+0xdc>)
 80067a0:	4834      	ldr	r0, [pc, #208]	; (8006874 <Play_Sound+0xe0>)
 80067a2:	f00d fa67 	bl	8013c74 <f_mount>
	f_open(&MyFile, (char*)name, FA_READ|FA_OPEN_ALWAYS);
 80067a6:	2211      	movs	r2, #17
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4833      	ldr	r0, [pc, #204]	; (8006878 <Play_Sound+0xe4>)
 80067ac:	f00d faa8 	bl	8013d00 <f_open>
	f_read(&MyFile, sound_buf, WAV_BUF_SIZE, &testBytes);
 80067b0:	4b32      	ldr	r3, [pc, #200]	; (800687c <Play_Sound+0xe8>)
 80067b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b6:	4932      	ldr	r1, [pc, #200]	; (8006880 <Play_Sound+0xec>)
 80067b8:	482f      	ldr	r0, [pc, #188]	; (8006878 <Play_Sound+0xe4>)
 80067ba:	f00d fc5f 	bl	801407c <f_read>

	// Находим начало данных
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	81fb      	strh	r3, [r7, #14]
 80067c2:	e01f      	b.n	8006804 <Play_Sound+0x70>
	{
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <Play_Sound+0xec>)
 80067c8:	5cd3      	ldrb	r3, [r2, r3]
 80067ca:	2b64      	cmp	r3, #100	; 0x64
 80067cc:	d117      	bne.n	80067fe <Play_Sound+0x6a>
 80067ce:	89fb      	ldrh	r3, [r7, #14]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a2b      	ldr	r2, [pc, #172]	; (8006880 <Play_Sound+0xec>)
 80067d4:	5cd3      	ldrb	r3, [r2, r3]
 80067d6:	2b61      	cmp	r3, #97	; 0x61
 80067d8:	d111      	bne.n	80067fe <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 80067da:	89fb      	ldrh	r3, [r7, #14]
 80067dc:	3302      	adds	r3, #2
 80067de:	4a28      	ldr	r2, [pc, #160]	; (8006880 <Play_Sound+0xec>)
 80067e0:	5cd3      	ldrb	r3, [r2, r3]
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 80067e2:	2b74      	cmp	r3, #116	; 0x74
 80067e4:	d10b      	bne.n	80067fe <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 80067e6:	89fb      	ldrh	r3, [r7, #14]
 80067e8:	3303      	adds	r3, #3
 80067ea:	4a25      	ldr	r2, [pc, #148]	; (8006880 <Play_Sound+0xec>)
 80067ec:	5cd3      	ldrb	r3, [r2, r3]
 80067ee:	2b61      	cmp	r3, #97	; 0x61
 80067f0:	d105      	bne.n	80067fe <Play_Sound+0x6a>
	    {
	        dataOffset = i + 8;
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	3308      	adds	r3, #8
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	4b22      	ldr	r3, [pc, #136]	; (8006884 <Play_Sound+0xf0>)
 80067fa:	801a      	strh	r2, [r3, #0]
	        break;
 80067fc:	e006      	b.n	800680c <Play_Sound+0x78>
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 80067fe:	89fb      	ldrh	r3, [r7, #14]
 8006800:	3301      	adds	r3, #1
 8006802:	81fb      	strh	r3, [r7, #14]
 8006804:	89fb      	ldrh	r3, [r7, #14]
 8006806:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 800680a:	d9db      	bls.n	80067c4 <Play_Sound+0x30>
	    }
	}

	//  перемещаем указатель FatFs
	f_lseek(&MyFile, dataOffset);
 800680c:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <Play_Sound+0xf0>)
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	4619      	mov	r1, r3
 8006812:	4819      	ldr	r0, [pc, #100]	; (8006878 <Play_Sound+0xe4>)
 8006814:	f00d ff8e 	bl	8014734 <f_lseek>
	// определяем количество байт данных
	wavDataSize = f_size(&MyFile) - dataOffset;
 8006818:	4b17      	ldr	r3, [pc, #92]	; (8006878 <Play_Sound+0xe4>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4a19      	ldr	r2, [pc, #100]	; (8006884 <Play_Sound+0xf0>)
 800681e:	8812      	ldrh	r2, [r2, #0]
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	4a19      	ldr	r2, [pc, #100]	; (8006888 <Play_Sound+0xf4>)
 8006824:	6013      	str	r3, [r2, #0]

	// Заполняем оба буфера данными
	f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <Play_Sound+0xe8>)
 8006828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800682c:	4914      	ldr	r1, [pc, #80]	; (8006880 <Play_Sound+0xec>)
 800682e:	4812      	ldr	r0, [pc, #72]	; (8006878 <Play_Sound+0xe4>)
 8006830:	f00d fc24 	bl	801407c <f_read>

	ReadComplete=1;
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <Play_Sound+0xf8>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]

	TURN_ON_SOUND();
 800683a:	2201      	movs	r2, #1
 800683c:	2102      	movs	r1, #2
 800683e:	4814      	ldr	r0, [pc, #80]	; (8006890 <Play_Sound+0xfc>)
 8006840:	f003 fc4e 	bl	800a0e0 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim6);
 8006844:	4813      	ldr	r0, [pc, #76]	; (8006894 <Play_Sound+0x100>)
 8006846:	f008 f999 	bl	800eb7c <HAL_TIM_Base_Start>
	DMA1_Channel4->CCR |= (DMA_CCR_TCIE_Msk);
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <Play_Sound+0x104>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a12      	ldr	r2, [pc, #72]	; (8006898 <Play_Sound+0x104>)
 8006850:	f043 0302 	orr.w	r3, r3, #2
 8006854:	6013      	str	r3, [r2, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf[0], WAV_BUF_SIZE, DAC_ALIGN_8B_R);
 8006856:	2308      	movs	r3, #8
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800685e:	4a08      	ldr	r2, [pc, #32]	; (8006880 <Play_Sound+0xec>)
 8006860:	2110      	movs	r1, #16
 8006862:	480e      	ldr	r0, [pc, #56]	; (800689c <Play_Sound+0x108>)
 8006864:	f002 fd20 	bl	80092a8 <HAL_DAC_Start_DMA>
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	2000884c 	.word	0x2000884c
 8006874:	20007718 	.word	0x20007718
 8006878:	200074e8 	.word	0x200074e8
 800687c:	20007948 	.word	0x20007948
 8006880:	20007d98 	.word	0x20007d98
 8006884:	20000998 	.word	0x20000998
 8006888:	2000099c 	.word	0x2000099c
 800688c:	200009a0 	.word	0x200009a0
 8006890:	48000400 	.word	0x48000400
 8006894:	20007cb0 	.word	0x20007cb0
 8006898:	40020044 	.word	0x40020044
 800689c:	20007c9c 	.word	0x20007c9c

080068a0 <StartReadNextSoundBuf>:


void StartReadNextSoundBuf(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
	if((DMA1->ISR&DMA_ISR_TCIF4_Msk)!=0)
 80068a4:	4b18      	ldr	r3, [pc, #96]	; (8006908 <StartReadNextSoundBuf+0x68>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d028      	beq.n	8006902 <StartReadNextSoundBuf+0x62>
	{

		ReadComplete=0;
 80068b0:	4b16      	ldr	r3, [pc, #88]	; (800690c <StartReadNextSoundBuf+0x6c>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
		if(buf_num==1)buf_num=0;
 80068b6:	4b16      	ldr	r3, [pc, #88]	; (8006910 <StartReadNextSoundBuf+0x70>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d103      	bne.n	80068c6 <StartReadNextSoundBuf+0x26>
 80068be:	4b14      	ldr	r3, [pc, #80]	; (8006910 <StartReadNextSoundBuf+0x70>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e002      	b.n	80068cc <StartReadNextSoundBuf+0x2c>
		else buf_num=1;
 80068c6:	4b12      	ldr	r3, [pc, #72]	; (8006910 <StartReadNextSoundBuf+0x70>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]

		DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 80068cc:	4b11      	ldr	r3, [pc, #68]	; (8006914 <StartReadNextSoundBuf+0x74>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a10      	ldr	r2, [pc, #64]	; (8006914 <StartReadNextSoundBuf+0x74>)
 80068d2:	f023 0301 	bic.w	r3, r3, #1
 80068d6:	6013      	str	r3, [r2, #0]
		DMA1_Channel4->CMAR=(uint32_t)sound_buf[buf_num];
 80068d8:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <StartReadNextSoundBuf+0x70>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	025b      	lsls	r3, r3, #9
 80068de:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <StartReadNextSoundBuf+0x78>)
 80068e0:	441a      	add	r2, r3
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <StartReadNextSoundBuf+0x74>)
 80068e4:	60da      	str	r2, [r3, #12]
		//DMA1_Channel4->CNDTR=(uint32_t)WAV_BUF_SIZE;
		DMA1_Channel4->CCR |= (1 << DMA_CCR_EN_Pos);
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <StartReadNextSoundBuf+0x74>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <StartReadNextSoundBuf+0x74>)
 80068ec:	f043 0301 	orr.w	r3, r3, #1
 80068f0:	6013      	str	r3, [r2, #0]

		wavcounter+=WAV_BUF_SIZE;
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <StartReadNextSoundBuf+0x7c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80068fa:	4a08      	ldr	r2, [pc, #32]	; (800691c <StartReadNextSoundBuf+0x7c>)
 80068fc:	6013      	str	r3, [r2, #0]
		Sound_process();
 80068fe:	f000 f80f 	bl	8006920 <Sound_process>
	}
}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40020000 	.word	0x40020000
 800690c:	200009a0 	.word	0x200009a0
 8006910:	2000099a 	.word	0x2000099a
 8006914:	40020044 	.word	0x40020044
 8006918:	20007d98 	.word	0x20007d98
 800691c:	200009a4 	.word	0x200009a4

08006920 <Sound_process>:


void Sound_process(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8006926:	2300      	movs	r3, #0
 8006928:	80fb      	strh	r3, [r7, #6]
	uint8_t sign=0;
 800692a:	2300      	movs	r3, #0
 800692c:	717b      	strb	r3, [r7, #5]
	if(ReadComplete==0)
 800692e:	4b1b      	ldr	r3, [pc, #108]	; (800699c <Sound_process+0x7c>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d12d      	bne.n	8006992 <Sound_process+0x72>
	{
		if(wavDataSize>wavcounter)
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <Sound_process+0x80>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <Sound_process+0x84>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d913      	bls.n	800696a <Sound_process+0x4a>
		{
			if(buf_num==0)
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <Sound_process+0x88>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d107      	bne.n	800695a <Sound_process+0x3a>
			{
				f_read(&MyFile, sound_buf[1], WAV_BUF_SIZE, &testBytes);
 800694a:	4b18      	ldr	r3, [pc, #96]	; (80069ac <Sound_process+0x8c>)
 800694c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006950:	4917      	ldr	r1, [pc, #92]	; (80069b0 <Sound_process+0x90>)
 8006952:	4818      	ldr	r0, [pc, #96]	; (80069b4 <Sound_process+0x94>)
 8006954:	f00d fb92 	bl	801407c <f_read>
 8006958:	e018      	b.n	800698c <Sound_process+0x6c>
//					sound_buf[0][i]=(sound_buf[0][i])&0xFF;
//				}
			}
			else
			{
				f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 800695a:	4b14      	ldr	r3, [pc, #80]	; (80069ac <Sound_process+0x8c>)
 800695c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006960:	4915      	ldr	r1, [pc, #84]	; (80069b8 <Sound_process+0x98>)
 8006962:	4814      	ldr	r0, [pc, #80]	; (80069b4 <Sound_process+0x94>)
 8006964:	f00d fb8a 	bl	801407c <f_read>
 8006968:	e010      	b.n	800698c <Sound_process+0x6c>
//				}
			}
		}
		else
		{
			TURN_OFF_SOUND();
 800696a:	2200      	movs	r2, #0
 800696c:	2102      	movs	r1, #2
 800696e:	4813      	ldr	r0, [pc, #76]	; (80069bc <Sound_process+0x9c>)
 8006970:	f003 fbb6 	bl	800a0e0 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop(&htim6);
 8006974:	4812      	ldr	r0, [pc, #72]	; (80069c0 <Sound_process+0xa0>)
 8006976:	f008 f969 	bl	800ec4c <HAL_TIM_Base_Stop>
			DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 800697a:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <Sound_process+0xa4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a11      	ldr	r2, [pc, #68]	; (80069c4 <Sound_process+0xa4>)
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	6013      	str	r3, [r2, #0]
			f_close(&MyFile);
 8006986:	480b      	ldr	r0, [pc, #44]	; (80069b4 <Sound_process+0x94>)
 8006988:	f00d feaa 	bl	80146e0 <f_close>
		}
		ReadComplete=1;
 800698c:	4b03      	ldr	r3, [pc, #12]	; (800699c <Sound_process+0x7c>)
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
	}

//	sleep(1);
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	200009a0 	.word	0x200009a0
 80069a0:	2000099c 	.word	0x2000099c
 80069a4:	200009a4 	.word	0x200009a4
 80069a8:	2000099a 	.word	0x2000099a
 80069ac:	20007948 	.word	0x20007948
 80069b0:	20007f98 	.word	0x20007f98
 80069b4:	200074e8 	.word	0x200074e8
 80069b8:	20007d98 	.word	0x20007d98
 80069bc:	48000400 	.word	0x48000400
 80069c0:	20007cb0 	.word	0x20007cb0
 80069c4:	40020044 	.word	0x40020044

080069c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d8:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <HAL_MspInit+0x60>)
 80069da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069dc:	4a12      	ldr	r2, [pc, #72]	; (8006a28 <HAL_MspInit+0x60>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6613      	str	r3, [r2, #96]	; 0x60
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <HAL_MspInit+0x60>)
 80069e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069f0:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <HAL_MspInit+0x60>)
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	4a0c      	ldr	r2, [pc, #48]	; (8006a28 <HAL_MspInit+0x60>)
 80069f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fa:	6593      	str	r3, [r2, #88]	; 0x58
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <HAL_MspInit+0x60>)
 80069fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_4;
 8006a08:	2308      	movs	r3, #8
 8006a0a:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	4618      	mov	r0, r3
 8006a16:	f005 f96b 	bl	800bcf0 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8006a1a:	f005 f9c9 	bl	800bdb0 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000

08006a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b0ae      	sub	sp, #184	; 0xb8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	605a      	str	r2, [r3, #4]
 8006a3e:	609a      	str	r2, [r3, #8]
 8006a40:	60da      	str	r2, [r3, #12]
 8006a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a44:	f107 0318 	add.w	r3, r7, #24
 8006a48:	228c      	movs	r2, #140	; 0x8c
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f016 fba7 	bl	801d1a0 <memset>
  if(hadc->Instance==ADC1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a66      	ldr	r2, [pc, #408]	; (8006bf0 <HAL_ADC_MspInit+0x1c4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d152      	bne.n	8006b02 <HAL_ADC_MspInit+0xd6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006a62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a6a:	f107 0318 	add.w	r3, r7, #24
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f006 f880 	bl	800cb74 <HAL_RCCEx_PeriphCLKConfig>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8006a7a:	f7ff fe7f 	bl	800677c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8006a7e:	4b5d      	ldr	r3, [pc, #372]	; (8006bf4 <HAL_ADC_MspInit+0x1c8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a5b      	ldr	r2, [pc, #364]	; (8006bf4 <HAL_ADC_MspInit+0x1c8>)
 8006a86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006a88:	4b5a      	ldr	r3, [pc, #360]	; (8006bf4 <HAL_ADC_MspInit+0x1c8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10b      	bne.n	8006aa8 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006a90:	4b59      	ldr	r3, [pc, #356]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a94:	4a58      	ldr	r2, [pc, #352]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006a96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a9c:	4b56      	ldr	r3, [pc, #344]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006aa8:	4b54      	ldr	r3, [pc, #336]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006aaa:	4a55      	ldr	r2, [pc, #340]	; (8006c00 <HAL_ADC_MspInit+0x1d4>)
 8006aac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006aae:	4b53      	ldr	r3, [pc, #332]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ab4:	4b51      	ldr	r3, [pc, #324]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006aba:	4b50      	ldr	r3, [pc, #320]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006ac0:	4b4e      	ldr	r3, [pc, #312]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ac2:	2280      	movs	r2, #128	; 0x80
 8006ac4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ac6:	4b4d      	ldr	r3, [pc, #308]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006acc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006ace:	4b4b      	ldr	r3, [pc, #300]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ad4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006ad6:	4b49      	ldr	r3, [pc, #292]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ad8:	2220      	movs	r2, #32
 8006ada:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006adc:	4b47      	ldr	r3, [pc, #284]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ae2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006ae4:	4845      	ldr	r0, [pc, #276]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006ae6:	f002 fedb 	bl	80098a0 <HAL_DMA_Init>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8006af0:	f7ff fe44 	bl	800677c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a41      	ldr	r2, [pc, #260]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006af8:	651a      	str	r2, [r3, #80]	; 0x50
 8006afa:	4a40      	ldr	r2, [pc, #256]	; (8006bfc <HAL_ADC_MspInit+0x1d0>)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006b00:	e072      	b.n	8006be8 <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC2)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3f      	ldr	r2, [pc, #252]	; (8006c04 <HAL_ADC_MspInit+0x1d8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d16d      	bne.n	8006be8 <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006b12:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f006 f828 	bl	800cb74 <HAL_RCCEx_PeriphCLKConfig>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_ADC_MspInit+0x102>
      Error_Handler();
 8006b2a:	f7ff fe27 	bl	800677c <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006b2e:	4b31      	ldr	r3, [pc, #196]	; (8006bf4 <HAL_ADC_MspInit+0x1c8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a2f      	ldr	r2, [pc, #188]	; (8006bf4 <HAL_ADC_MspInit+0x1c8>)
 8006b36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006b38:	4b2e      	ldr	r3, [pc, #184]	; (8006bf4 <HAL_ADC_MspInit+0x1c8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10b      	bne.n	8006b58 <HAL_ADC_MspInit+0x12c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006b40:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b44:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b4c:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b58:	4b27      	ldr	r3, [pc, #156]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5c:	4a26      	ldr	r2, [pc, #152]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <HAL_ADC_MspInit+0x1cc>)
 8006b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006b70:	2308      	movs	r3, #8
 8006b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006b76:	230b      	movs	r3, #11
 8006b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b86:	4619      	mov	r1, r3
 8006b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b8c:	f003 f8fe 	bl	8009d8c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8006b90:	4b1d      	ldr	r3, [pc, #116]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006b92:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <HAL_ADC_MspInit+0x1e0>)
 8006b94:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8006b96:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ba2:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006ba8:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bae:	4b16      	ldr	r3, [pc, #88]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bb4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bbc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006bbe:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bc4:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006bc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006bcc:	480e      	ldr	r0, [pc, #56]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006bce:	f002 fe67 	bl	80098a0 <HAL_DMA_Init>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8006bd8:	f7ff fdd0 	bl	800677c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a0a      	ldr	r2, [pc, #40]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006be0:	651a      	str	r2, [r3, #80]	; 0x50
 8006be2:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <HAL_ADC_MspInit+0x1dc>)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006be8:	bf00      	nop
 8006bea:	37b8      	adds	r7, #184	; 0xb8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	50040000 	.word	0x50040000
 8006bf4:	200009a8 	.word	0x200009a8
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	20007a70 	.word	0x20007a70
 8006c00:	40020008 	.word	0x40020008
 8006c04:	50040100 	.word	0x50040100
 8006c08:	20007ab8 	.word	0x20007ab8
 8006c0c:	4002001c 	.word	0x4002001c

08006c10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c18:	f107 0314 	add.w	r3, r7, #20
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	609a      	str	r2, [r3, #8]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2e      	ldr	r2, [pc, #184]	; (8006ce8 <HAL_DAC_MspInit+0xd8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d156      	bne.n	8006ce0 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006c32:	4b2e      	ldr	r3, [pc, #184]	; (8006cec <HAL_DAC_MspInit+0xdc>)
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	4a2d      	ldr	r2, [pc, #180]	; (8006cec <HAL_DAC_MspInit+0xdc>)
 8006c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c3e:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <HAL_DAC_MspInit+0xdc>)
 8006c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c4a:	4b28      	ldr	r3, [pc, #160]	; (8006cec <HAL_DAC_MspInit+0xdc>)
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	4a27      	ldr	r2, [pc, #156]	; (8006cec <HAL_DAC_MspInit+0xdc>)
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c56:	4b25      	ldr	r3, [pc, #148]	; (8006cec <HAL_DAC_MspInit+0xdc>)
 8006c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 8006c62:	2320      	movs	r3, #32
 8006c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c66:	2303      	movs	r3, #3
 8006c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 8006c6e:	f107 0314 	add.w	r3, r7, #20
 8006c72:	4619      	mov	r1, r3
 8006c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c78:	f003 f888 	bl	8009d8c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8006c7c:	4b1c      	ldr	r3, [pc, #112]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006c7e:	4a1d      	ldr	r2, [pc, #116]	; (8006cf4 <HAL_DAC_MspInit+0xe4>)
 8006c80:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8006c82:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006c84:	2205      	movs	r2, #5
 8006c86:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c8e:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006c94:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006c96:	2280      	movs	r2, #128	; 0x80
 8006c98:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ca0:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006ca6:	4b12      	ldr	r3, [pc, #72]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006ca8:	2220      	movs	r2, #32
 8006caa:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006cac:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006cae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8006cb4:	480e      	ldr	r0, [pc, #56]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006cb6:	f002 fdf3 	bl	80098a0 <HAL_DMA_Init>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8006cc0:	f7ff fd5c 	bl	800677c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a0a      	ldr	r2, [pc, #40]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <HAL_DAC_MspInit+0xe0>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	2036      	movs	r0, #54	; 0x36
 8006cd6:	f002 fa9b 	bl	8009210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006cda:	2036      	movs	r0, #54	; 0x36
 8006cdc:	f002 fab4 	bl	8009248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006ce0:	bf00      	nop
 8006ce2:	3728      	adds	r7, #40	; 0x28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40007400 	.word	0x40007400
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	20007b00 	.word	0x20007b00
 8006cf4:	40020044 	.word	0x40020044

08006cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b0ae      	sub	sp, #184	; 0xb8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d10:	f107 0318 	add.w	r3, r7, #24
 8006d14:	228c      	movs	r2, #140	; 0x8c
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f016 fa41 	bl	801d1a0 <memset>
  if(hi2c->Instance==I2C1)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a42      	ldr	r2, [pc, #264]	; (8006e2c <HAL_I2C_MspInit+0x134>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d13b      	bne.n	8006da0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006d30:	f107 0318 	add.w	r3, r7, #24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f005 ff1d 	bl	800cb74 <HAL_RCCEx_PeriphCLKConfig>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006d40:	f7ff fd1c 	bl	800677c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d44:	4b3a      	ldr	r3, [pc, #232]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d48:	4a39      	ldr	r2, [pc, #228]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d50:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = KEYPAD_SCL_Pin|KEYPAD_SDA_Pin;
 8006d5c:	23c0      	movs	r3, #192	; 0xc0
 8006d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d62:	2312      	movs	r3, #18
 8006d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006d74:	2304      	movs	r3, #4
 8006d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	482c      	ldr	r0, [pc, #176]	; (8006e34 <HAL_I2C_MspInit+0x13c>)
 8006d82:	f003 f803 	bl	8009d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d86:	4b2a      	ldr	r3, [pc, #168]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8a:	4a29      	ldr	r2, [pc, #164]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d90:	6593      	str	r3, [r2, #88]	; 0x58
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006d9e:	e040      	b.n	8006e22 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a24      	ldr	r2, [pc, #144]	; (8006e38 <HAL_I2C_MspInit+0x140>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d13b      	bne.n	8006e22 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006dae:	2300      	movs	r3, #0
 8006db0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006db2:	f107 0318 	add.w	r3, r7, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f005 fedc 	bl	800cb74 <HAL_RCCEx_PeriphCLKConfig>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8006dc2:	f7ff fcdb 	bl	800677c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc6:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006dcc:	f043 0302 	orr.w	r3, r3, #2
 8006dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dd2:	4b17      	ldr	r3, [pc, #92]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POWER_SCL_Pin|POWER_SDA_Pin;
 8006dde:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006de6:	2312      	movs	r3, #18
 8006de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df2:	2303      	movs	r3, #3
 8006df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006df8:	2304      	movs	r3, #4
 8006dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e02:	4619      	mov	r1, r3
 8006e04:	480b      	ldr	r0, [pc, #44]	; (8006e34 <HAL_I2C_MspInit+0x13c>)
 8006e06:	f002 ffc1 	bl	8009d8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0e:	4a08      	ldr	r2, [pc, #32]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e14:	6593      	str	r3, [r2, #88]	; 0x58
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <HAL_I2C_MspInit+0x138>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	68bb      	ldr	r3, [r7, #8]
}
 8006e22:	bf00      	nop
 8006e24:	37b8      	adds	r7, #184	; 0xb8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40005400 	.word	0x40005400
 8006e30:	40021000 	.word	0x40021000
 8006e34:	48000400 	.word	0x48000400
 8006e38:	40005800 	.word	0x40005800

08006e3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b0a6      	sub	sp, #152	; 0x98
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e44:	f107 030c 	add.w	r3, r7, #12
 8006e48:	228c      	movs	r2, #140	; 0x8c
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f016 f9a7 	bl	801d1a0 <memset>
  if(hrtc->Instance==RTC)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a10      	ldr	r2, [pc, #64]	; (8006e98 <HAL_RTC_MspInit+0x5c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d118      	bne.n	8006e8e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e6a:	f107 030c 	add.w	r3, r7, #12
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f005 fe80 	bl	800cb74 <HAL_RCCEx_PeriphCLKConfig>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006e7a:	f7ff fc7f 	bl	800677c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <HAL_RTC_MspInit+0x60>)
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e84:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <HAL_RTC_MspInit+0x60>)
 8006e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006e8e:	bf00      	nop
 8006e90:	3798      	adds	r7, #152	; 0x98
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40002800 	.word	0x40002800
 8006e9c:	40021000 	.word	0x40021000

08006ea0 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <HAL_RTC_MspDeInit+0x30>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d107      	bne.n	8006ec2 <HAL_RTC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8006eb2:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <HAL_RTC_MspDeInit+0x34>)
 8006eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb8:	4a06      	ldr	r2, [pc, #24]	; (8006ed4 <HAL_RTC_MspDeInit+0x34>)
 8006eba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40002800 	.word	0x40002800
 8006ed4:	40021000 	.word	0x40021000

08006ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08e      	sub	sp, #56	; 0x38
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	605a      	str	r2, [r3, #4]
 8006eea:	609a      	str	r2, [r3, #8]
 8006eec:	60da      	str	r2, [r3, #12]
 8006eee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a5c      	ldr	r2, [pc, #368]	; (8007068 <HAL_SPI_MspInit+0x190>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d129      	bne.n	8006f4e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006efa:	4b5c      	ldr	r3, [pc, #368]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efe:	4a5b      	ldr	r2, [pc, #364]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f04:	6613      	str	r3, [r2, #96]	; 0x60
 8006f06:	4b59      	ldr	r3, [pc, #356]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f0e:	623b      	str	r3, [r7, #32]
 8006f10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f12:	4b56      	ldr	r3, [pc, #344]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f16:	4a55      	ldr	r2, [pc, #340]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f18:	f043 0301 	orr.w	r3, r3, #1
 8006f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f1e:	4b53      	ldr	r3, [pc, #332]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 8006f2a:	23c2      	movs	r3, #194	; 0xc2
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f36:	2303      	movs	r3, #3
 8006f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f3a:	2305      	movs	r3, #5
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f42:	4619      	mov	r1, r3
 8006f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f48:	f002 ff20 	bl	8009d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006f4c:	e088      	b.n	8007060 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a47      	ldr	r2, [pc, #284]	; (8007070 <HAL_SPI_MspInit+0x198>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d155      	bne.n	8007004 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f58:	4b44      	ldr	r3, [pc, #272]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5c:	4a43      	ldr	r2, [pc, #268]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f62:	6593      	str	r3, [r2, #88]	; 0x58
 8006f64:	4b41      	ldr	r3, [pc, #260]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f70:	4b3e      	ldr	r3, [pc, #248]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f74:	4a3d      	ldr	r2, [pc, #244]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f76:	f043 0304 	orr.w	r3, r3, #4
 8006f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f7c:	4b3b      	ldr	r3, [pc, #236]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f88:	4b38      	ldr	r3, [pc, #224]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8c:	4a37      	ldr	r2, [pc, #220]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f8e:	f043 0302 	orr.w	r3, r3, #2
 8006f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f94:	4b35      	ldr	r3, [pc, #212]	; (800706c <HAL_SPI_MspInit+0x194>)
 8006f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fac:	2303      	movs	r3, #3
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8006fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb8:	4619      	mov	r1, r3
 8006fba:	482e      	ldr	r0, [pc, #184]	; (8007074 <HAL_SPI_MspInit+0x19c>)
 8006fbc:	f002 fee6 	bl	8009d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006fd0:	2305      	movs	r3, #5
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8006fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4826      	ldr	r0, [pc, #152]	; (8007074 <HAL_SPI_MspInit+0x19c>)
 8006fdc:	f002 fed6 	bl	8009d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8006fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006ff2:	2305      	movs	r3, #5
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8006ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	481e      	ldr	r0, [pc, #120]	; (8007078 <HAL_SPI_MspInit+0x1a0>)
 8006ffe:	f002 fec5 	bl	8009d8c <HAL_GPIO_Init>
}
 8007002:	e02d      	b.n	8007060 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI3)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1c      	ldr	r2, [pc, #112]	; (800707c <HAL_SPI_MspInit+0x1a4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d128      	bne.n	8007060 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800700e:	4b17      	ldr	r3, [pc, #92]	; (800706c <HAL_SPI_MspInit+0x194>)
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	4a16      	ldr	r2, [pc, #88]	; (800706c <HAL_SPI_MspInit+0x194>)
 8007014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007018:	6593      	str	r3, [r2, #88]	; 0x58
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <HAL_SPI_MspInit+0x194>)
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <HAL_SPI_MspInit+0x194>)
 8007028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702a:	4a10      	ldr	r2, [pc, #64]	; (800706c <HAL_SPI_MspInit+0x194>)
 800702c:	f043 0304 	orr.w	r3, r3, #4
 8007030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007032:	4b0e      	ldr	r3, [pc, #56]	; (800706c <HAL_SPI_MspInit+0x194>)
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MEM_SCK_Pin|MEM_MISO_Pin|MEM_MOSI_Pin;
 800703e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007044:	2302      	movs	r3, #2
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007048:	2300      	movs	r3, #0
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800704c:	2303      	movs	r3, #3
 800704e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007050:	2306      	movs	r3, #6
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007058:	4619      	mov	r1, r3
 800705a:	4806      	ldr	r0, [pc, #24]	; (8007074 <HAL_SPI_MspInit+0x19c>)
 800705c:	f002 fe96 	bl	8009d8c <HAL_GPIO_Init>
}
 8007060:	bf00      	nop
 8007062:	3738      	adds	r7, #56	; 0x38
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40013000 	.word	0x40013000
 800706c:	40021000 	.word	0x40021000
 8007070:	40003800 	.word	0x40003800
 8007074:	48000800 	.word	0x48000800
 8007078:	48000400 	.word	0x48000400
 800707c:	40003c00 	.word	0x40003c00

08007080 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d10c      	bne.n	80070ac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007092:	4b12      	ldr	r3, [pc, #72]	; (80070dc <HAL_TIM_PWM_MspInit+0x5c>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	4a11      	ldr	r2, [pc, #68]	; (80070dc <HAL_TIM_PWM_MspInit+0x5c>)
 8007098:	f043 0301 	orr.w	r3, r3, #1
 800709c:	6593      	str	r3, [r2, #88]	; 0x58
 800709e:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <HAL_TIM_PWM_MspInit+0x5c>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80070aa:	e010      	b.n	80070ce <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a0b      	ldr	r2, [pc, #44]	; (80070e0 <HAL_TIM_PWM_MspInit+0x60>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d10b      	bne.n	80070ce <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80070b6:	4b09      	ldr	r3, [pc, #36]	; (80070dc <HAL_TIM_PWM_MspInit+0x5c>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	4a08      	ldr	r2, [pc, #32]	; (80070dc <HAL_TIM_PWM_MspInit+0x5c>)
 80070bc:	f043 0304 	orr.w	r3, r3, #4
 80070c0:	6593      	str	r3, [r2, #88]	; 0x58
 80070c2:	4b06      	ldr	r3, [pc, #24]	; (80070dc <HAL_TIM_PWM_MspInit+0x5c>)
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	60bb      	str	r3, [r7, #8]
 80070cc:	68bb      	ldr	r3, [r7, #8]
}
 80070ce:	bf00      	nop
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40021000 	.word	0x40021000
 80070e0:	40000800 	.word	0x40000800

080070e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a0d      	ldr	r2, [pc, #52]	; (8007128 <HAL_TIM_Base_MspInit+0x44>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d113      	bne.n	800711e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80070f6:	4b0d      	ldr	r3, [pc, #52]	; (800712c <HAL_TIM_Base_MspInit+0x48>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fa:	4a0c      	ldr	r2, [pc, #48]	; (800712c <HAL_TIM_Base_MspInit+0x48>)
 80070fc:	f043 0310 	orr.w	r3, r3, #16
 8007100:	6593      	str	r3, [r2, #88]	; 0x58
 8007102:	4b0a      	ldr	r3, [pc, #40]	; (800712c <HAL_TIM_Base_MspInit+0x48>)
 8007104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	2036      	movs	r0, #54	; 0x36
 8007114:	f002 f87c 	bl	8009210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007118:	2036      	movs	r0, #54	; 0x36
 800711a:	f002 f895 	bl	8009248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40001000 	.word	0x40001000
 800712c:	40021000 	.word	0x40021000

08007130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007138:	f107 0314 	add.w	r3, r7, #20
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	609a      	str	r2, [r3, #8]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007150:	d11d      	bne.n	800718e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007152:	4b22      	ldr	r3, [pc, #136]	; (80071dc <HAL_TIM_MspPostInit+0xac>)
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	4a21      	ldr	r2, [pc, #132]	; (80071dc <HAL_TIM_MspPostInit+0xac>)
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800715e:	4b1f      	ldr	r3, [pc, #124]	; (80071dc <HAL_TIM_MspPostInit+0xac>)
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 800716a:	2301      	movs	r3, #1
 800716c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800716e:	2302      	movs	r3, #2
 8007170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007176:	2300      	movs	r3, #0
 8007178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800717a:	2301      	movs	r3, #1
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 800717e:	f107 0314 	add.w	r3, r7, #20
 8007182:	4619      	mov	r1, r3
 8007184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007188:	f002 fe00 	bl	8009d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800718c:	e021      	b.n	80071d2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <HAL_TIM_MspPostInit+0xb0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d11c      	bne.n	80071d2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007198:	4b10      	ldr	r3, [pc, #64]	; (80071dc <HAL_TIM_MspPostInit+0xac>)
 800719a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719c:	4a0f      	ldr	r2, [pc, #60]	; (80071dc <HAL_TIM_MspPostInit+0xac>)
 800719e:	f043 0308 	orr.w	r3, r3, #8
 80071a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071a4:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <HAL_TIM_MspPostInit+0xac>)
 80071a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_meter_UGen_Pin;
 80071b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b6:	2302      	movs	r3, #2
 80071b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071be:	2300      	movs	r3, #0
 80071c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80071c2:	2302      	movs	r3, #2
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P_meter_UGen_GPIO_Port, &GPIO_InitStruct);
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	4619      	mov	r1, r3
 80071cc:	4805      	ldr	r0, [pc, #20]	; (80071e4 <HAL_TIM_MspPostInit+0xb4>)
 80071ce:	f002 fddd 	bl	8009d8c <HAL_GPIO_Init>
}
 80071d2:	bf00      	nop
 80071d4:	3728      	adds	r7, #40	; 0x28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40021000 	.word	0x40021000
 80071e0:	40000800 	.word	0x40000800
 80071e4:	48000c00 	.word	0x48000c00

080071e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b0ac      	sub	sp, #176	; 0xb0
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	228c      	movs	r2, #140	; 0x8c
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f015 ffc9 	bl	801d1a0 <memset>
  if(huart->Instance==USART1)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a26      	ldr	r2, [pc, #152]	; (80072ac <HAL_UART_MspInit+0xc4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d144      	bne.n	80072a2 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007218:	2301      	movs	r3, #1
 800721a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800721c:	2300      	movs	r3, #0
 800721e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007220:	f107 0310 	add.w	r3, r7, #16
 8007224:	4618      	mov	r0, r3
 8007226:	f005 fca5 	bl	800cb74 <HAL_RCCEx_PeriphCLKConfig>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007230:	f7ff faa4 	bl	800677c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007234:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <HAL_UART_MspInit+0xc8>)
 8007236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007238:	4a1d      	ldr	r2, [pc, #116]	; (80072b0 <HAL_UART_MspInit+0xc8>)
 800723a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800723e:	6613      	str	r3, [r2, #96]	; 0x60
 8007240:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <HAL_UART_MspInit+0xc8>)
 8007242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800724c:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <HAL_UART_MspInit+0xc8>)
 800724e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007250:	4a17      	ldr	r2, [pc, #92]	; (80072b0 <HAL_UART_MspInit+0xc8>)
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007258:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <HAL_UART_MspInit+0xc8>)
 800725a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007264:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800726c:	2302      	movs	r3, #2
 800726e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007272:	2300      	movs	r3, #0
 8007274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007278:	2303      	movs	r3, #3
 800727a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800727e:	2307      	movs	r3, #7
 8007280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007288:	4619      	mov	r1, r3
 800728a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800728e:	f002 fd7d 	bl	8009d8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007292:	2200      	movs	r2, #0
 8007294:	2100      	movs	r1, #0
 8007296:	2025      	movs	r0, #37	; 0x25
 8007298:	f001 ffba 	bl	8009210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800729c:	2025      	movs	r0, #37	; 0x25
 800729e:	f001 ffd3 	bl	8009248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80072a2:	bf00      	nop
 80072a4:	37b0      	adds	r7, #176	; 0xb0
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40013800 	.word	0x40013800
 80072b0:	40021000 	.word	0x40021000

080072b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08c      	sub	sp, #48	; 0x30
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80072c4:	2200      	movs	r2, #0
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	2019      	movs	r0, #25
 80072ca:	f001 ffa1 	bl	8009210 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80072ce:	2019      	movs	r0, #25
 80072d0:	f001 ffba 	bl	8009248 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80072d4:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <HAL_InitTick+0x9c>)
 80072d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d8:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <HAL_InitTick+0x9c>)
 80072da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072de:	6613      	str	r3, [r2, #96]	; 0x60
 80072e0:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <HAL_InitTick+0x9c>)
 80072e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80072ec:	f107 0210 	add.w	r2, r7, #16
 80072f0:	f107 0314 	add.w	r3, r7, #20
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f005 fbaa 	bl	800ca50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80072fc:	f005 fb92 	bl	800ca24 <HAL_RCC_GetPCLK2Freq>
 8007300:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	4a13      	ldr	r2, [pc, #76]	; (8007354 <HAL_InitTick+0xa0>)
 8007306:	fba2 2303 	umull	r2, r3, r2, r3
 800730a:	0c9b      	lsrs	r3, r3, #18
 800730c:	3b01      	subs	r3, #1
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007310:	4b11      	ldr	r3, [pc, #68]	; (8007358 <HAL_InitTick+0xa4>)
 8007312:	4a12      	ldr	r2, [pc, #72]	; (800735c <HAL_InitTick+0xa8>)
 8007314:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007316:	4b10      	ldr	r3, [pc, #64]	; (8007358 <HAL_InitTick+0xa4>)
 8007318:	f240 32e7 	movw	r2, #999	; 0x3e7
 800731c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800731e:	4a0e      	ldr	r2, [pc, #56]	; (8007358 <HAL_InitTick+0xa4>)
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <HAL_InitTick+0xa4>)
 8007326:	2200      	movs	r2, #0
 8007328:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <HAL_InitTick+0xa4>)
 800732c:	2200      	movs	r2, #0
 800732e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007330:	4809      	ldr	r0, [pc, #36]	; (8007358 <HAL_InitTick+0xa4>)
 8007332:	f007 fbcb 	bl	800eacc <HAL_TIM_Base_Init>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800733c:	4806      	ldr	r0, [pc, #24]	; (8007358 <HAL_InitTick+0xa4>)
 800733e:	f007 fcad 	bl	800ec9c <HAL_TIM_Base_Start_IT>
 8007342:	4603      	mov	r3, r0
 8007344:	e000      	b.n	8007348 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
}
 8007348:	4618      	mov	r0, r3
 800734a:	3730      	adds	r7, #48	; 0x30
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40021000 	.word	0x40021000
 8007354:	431bde83 	.word	0x431bde83
 8007358:	20008198 	.word	0x20008198
 800735c:	40012c00 	.word	0x40012c00

08007360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007364:	e7fe      	b.n	8007364 <NMI_Handler+0x4>

08007366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007366:	b480      	push	{r7}
 8007368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800736a:	e7fe      	b.n	800736a <HardFault_Handler+0x4>

0800736c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007370:	e7fe      	b.n	8007370 <MemManage_Handler+0x4>

08007372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007372:	b480      	push	{r7}
 8007374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007376:	e7fe      	b.n	8007376 <BusFault_Handler+0x4>

08007378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800737c:	e7fe      	b.n	800737c <UsageFault_Handler+0x4>

0800737e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800737e:	b480      	push	{r7}
 8007380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007382:	bf00      	nop
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800739e:	bf00      	nop
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073ac:	bf00      	nop
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  ADC_EXT();
 80073ba:	f7fa fa22 	bl	8001802 <ADC_EXT>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80073be:	2010      	movs	r0, #16
 80073c0:	f002 fea6 	bl	800a110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80073c4:	bf00      	nop
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80073cc:	4802      	ldr	r0, [pc, #8]	; (80073d8 <DMA1_Channel1_IRQHandler+0x10>)
 80073ce:	f002 fbfe 	bl	8009bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80073d2:	bf00      	nop
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20007a70 	.word	0x20007a70

080073dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80073e0:	4802      	ldr	r0, [pc, #8]	; (80073ec <DMA1_Channel2_IRQHandler+0x10>)
 80073e2:	f002 fbf4 	bl	8009bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80073e6:	bf00      	nop
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20007ab8 	.word	0x20007ab8

080073f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	//
	StartReadNextSoundBuf();
 80073f4:	f7ff fa54 	bl	80068a0 <StartReadNextSoundBuf>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80073f8:	4802      	ldr	r0, [pc, #8]	; (8007404 <DMA1_Channel4_IRQHandler+0x14>)
 80073fa:	f002 fbe8 	bl	8009bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80073fe:	bf00      	nop
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20007b00 	.word	0x20007b00

08007408 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800740c:	4802      	ldr	r0, [pc, #8]	; (8007418 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800740e:	f007 fe13 	bl	800f038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007412:	bf00      	nop
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20008198 	.word	0x20008198

0800741c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1, UART_IT_RXNE)==SET)
 8007420:	4b11      	ldr	r3, [pc, #68]	; (8007468 <USART1_IRQHandler+0x4c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <USART1_IRQHandler+0x40>
	{
		usart1_data[usart1_counter]=(uint8_t)USART1->RDR;
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <USART1_IRQHandler+0x50>)
 8007430:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007432:	b299      	uxth	r1, r3
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <USART1_IRQHandler+0x54>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	b2c9      	uxtb	r1, r1
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <USART1_IRQHandler+0x58>)
 800743e:	5499      	strb	r1, [r3, r2]
		usart1_counter++;
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <USART1_IRQHandler+0x54>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	3301      	adds	r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	4b09      	ldr	r3, [pc, #36]	; (8007470 <USART1_IRQHandler+0x54>)
 800744a:	701a      	strb	r2, [r3, #0]
		rx_cmplt=5;
 800744c:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <USART1_IRQHandler+0x5c>)
 800744e:	2205      	movs	r2, #5
 8007450:	701a      	strb	r2, [r3, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_IT_RXNE);
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <USART1_IRQHandler+0x4c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f240 5225 	movw	r2, #1317	; 0x525
 800745a:	621a      	str	r2, [r3, #32]
//		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800745c:	4802      	ldr	r0, [pc, #8]	; (8007468 <USART1_IRQHandler+0x4c>)
 800745e:	f008 fd61 	bl	800ff24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007462:	bf00      	nop
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20007b48 	.word	0x20007b48
 800746c:	40013800 	.word	0x40013800
 8007470:	2000095d 	.word	0x2000095d
 8007474:	20002210 	.word	0x20002210
 8007478:	2000095e 	.word	0x2000095e

0800747c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//StartReadNextSoundBuf();
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007480:	4803      	ldr	r0, [pc, #12]	; (8007490 <TIM6_DAC_IRQHandler+0x14>)
 8007482:	f007 fdd9 	bl	800f038 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8007486:	4803      	ldr	r0, [pc, #12]	; (8007494 <TIM6_DAC_IRQHandler+0x18>)
 8007488:	f001 ffda 	bl	8009440 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20007cb0 	.word	0x20007cb0
 8007494:	20007c9c 	.word	0x20007c9c

08007498 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800749c:	4802      	ldr	r0, [pc, #8]	; (80074a8 <OTG_FS_IRQHandler+0x10>)
 800749e:	f003 fc9d 	bl	800addc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20009b34 	.word	0x20009b34

080074ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
	return 1;
 80074b0:	2301      	movs	r3, #1
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <_kill>:

int _kill(int pid, int sig)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80074c6:	f015 fe41 	bl	801d14c <__errno>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2216      	movs	r2, #22
 80074ce:	601a      	str	r2, [r3, #0]
	return -1;
 80074d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <_exit>:

void _exit (int status)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80074e4:	f04f 31ff 	mov.w	r1, #4294967295
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff ffe7 	bl	80074bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80074ee:	e7fe      	b.n	80074ee <_exit+0x12>

080074f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	e00a      	b.n	8007518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007502:	f3af 8000 	nop.w
 8007506:	4601      	mov	r1, r0
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	60ba      	str	r2, [r7, #8]
 800750e:	b2ca      	uxtb	r2, r1
 8007510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	3301      	adds	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	dbf0      	blt.n	8007502 <_read+0x12>
	}

return len;
 8007520:	687b      	ldr	r3, [r7, #4]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e009      	b.n	8007550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	60ba      	str	r2, [r7, #8]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	3301      	adds	r3, #1
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	dbf1      	blt.n	800753c <_write+0x12>
	}
	return len;
 8007558:	687b      	ldr	r3, [r7, #4]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <_close>:

int _close(int file)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
	return -1;
 800756a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800758a:	605a      	str	r2, [r3, #4]
	return 0;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <_isatty>:

int _isatty(int file)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
	return 1;
 80075a2:	2301      	movs	r3, #1
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
	return 0;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075d4:	4a14      	ldr	r2, [pc, #80]	; (8007628 <_sbrk+0x5c>)
 80075d6:	4b15      	ldr	r3, [pc, #84]	; (800762c <_sbrk+0x60>)
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075e0:	4b13      	ldr	r3, [pc, #76]	; (8007630 <_sbrk+0x64>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075e8:	4b11      	ldr	r3, [pc, #68]	; (8007630 <_sbrk+0x64>)
 80075ea:	4a12      	ldr	r2, [pc, #72]	; (8007634 <_sbrk+0x68>)
 80075ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075ee:	4b10      	ldr	r3, [pc, #64]	; (8007630 <_sbrk+0x64>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4413      	add	r3, r2
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d207      	bcs.n	800760c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075fc:	f015 fda6 	bl	801d14c <__errno>
 8007600:	4603      	mov	r3, r0
 8007602:	220c      	movs	r2, #12
 8007604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007606:	f04f 33ff 	mov.w	r3, #4294967295
 800760a:	e009      	b.n	8007620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800760c:	4b08      	ldr	r3, [pc, #32]	; (8007630 <_sbrk+0x64>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007612:	4b07      	ldr	r3, [pc, #28]	; (8007630 <_sbrk+0x64>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4413      	add	r3, r2
 800761a:	4a05      	ldr	r2, [pc, #20]	; (8007630 <_sbrk+0x64>)
 800761c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800761e:	68fb      	ldr	r3, [r7, #12]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20040000 	.word	0x20040000
 800762c:	00000400 	.word	0x00000400
 8007630:	200009ac 	.word	0x200009ac
 8007634:	2000a150 	.word	0x2000a150

08007638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800763c:	4b15      	ldr	r3, [pc, #84]	; (8007694 <SystemInit+0x5c>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007642:	4a14      	ldr	r2, [pc, #80]	; (8007694 <SystemInit+0x5c>)
 8007644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800764c:	4b12      	ldr	r3, [pc, #72]	; (8007698 <SystemInit+0x60>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a11      	ldr	r2, [pc, #68]	; (8007698 <SystemInit+0x60>)
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007658:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <SystemInit+0x60>)
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <SystemInit+0x60>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a0d      	ldr	r2, [pc, #52]	; (8007698 <SystemInit+0x60>)
 8007664:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007668:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800766c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800766e:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <SystemInit+0x60>)
 8007670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007674:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007676:	4b08      	ldr	r3, [pc, #32]	; (8007698 <SystemInit+0x60>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <SystemInit+0x60>)
 800767c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007680:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <SystemInit+0x60>)
 8007684:	2200      	movs	r2, #0
 8007686:	619a      	str	r2, [r3, #24]
}
 8007688:	bf00      	nop
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	e000ed00 	.word	0xe000ed00
 8007698:	40021000 	.word	0x40021000
 800769c:	00000000 	.word	0x00000000

080076a0 <Temperature_process>:
extern ADC_HandleTypeDef hadc1;

uint16_t temperature_buf[256];

void Temperature_process(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_sum=0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
	uint16_t temperature_middle = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<128;i++)temp_sum+=temperature_buf[i];
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
 80076b6:	e00a      	b.n	80076ce <Temperature_process+0x2e>
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	4a2f      	ldr	r2, [pc, #188]	; (8007778 <Temperature_process+0xd8>)
 80076bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c0:	461a      	mov	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4413      	add	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	3301      	adds	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	daf0      	bge.n	80076b8 <Temperature_process+0x18>
	temperature_middle = (temp_sum>>7);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	09db      	lsrs	r3, r3, #7
 80076da:	80fb      	strh	r3, [r7, #6]

	MCU_temp = (double)(temperature_middle/4096.0)*Vref;   // Напряжение в вольтах на датчике.
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7f8 ff30 	bl	8000544 <__aeabi_i2d>
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	4b24      	ldr	r3, [pc, #144]	; (800777c <Temperature_process+0xdc>)
 80076ea:	f7f9 f8bf 	bl	800086c <__aeabi_ddiv>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4610      	mov	r0, r2
 80076f4:	4619      	mov	r1, r3
 80076f6:	a31a      	add	r3, pc, #104	; (adr r3, 8007760 <Temperature_process+0xc0>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 ff8c 	bl	8000618 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	491e      	ldr	r1, [pc, #120]	; (8007780 <Temperature_process+0xe0>)
 8007706:	e9c1 2300 	strd	r2, r3, [r1]
	MCU_temp = (tV_25-MCU_temp)/tSlope + 25.0;             // Температура в градусах.
 800770a:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <Temperature_process+0xe0>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	a115      	add	r1, pc, #84	; (adr r1, 8007768 <Temperature_process+0xc8>)
 8007712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007716:	f7f8 fdc7 	bl	80002a8 <__aeabi_dsub>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4610      	mov	r0, r2
 8007720:	4619      	mov	r1, r3
 8007722:	a313      	add	r3, pc, #76	; (adr r3, 8007770 <Temperature_process+0xd0>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f9 f8a0 	bl	800086c <__aeabi_ddiv>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4610      	mov	r0, r2
 8007732:	4619      	mov	r1, r3
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	4b12      	ldr	r3, [pc, #72]	; (8007784 <Temperature_process+0xe4>)
 800773a:	f7f8 fdb7 	bl	80002ac <__adddf3>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	490f      	ldr	r1, [pc, #60]	; (8007780 <Temperature_process+0xe0>)
 8007744:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &temperature_buf, 128);	// Запуск DMA на чтение температуры MCU
 8007748:	2280      	movs	r2, #128	; 0x80
 800774a:	490b      	ldr	r1, [pc, #44]	; (8007778 <Temperature_process+0xd8>)
 800774c:	480e      	ldr	r0, [pc, #56]	; (8007788 <Temperature_process+0xe8>)
 800774e:	f000 fdfd 	bl	800834c <HAL_ADC_Start_DMA>

	sleep(100);
 8007752:	2064      	movs	r0, #100	; 0x64
 8007754:	f7fb fa94 	bl	8002c80 <sleep>
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	66666666 	.word	0x66666666
 8007764:	400a6666 	.word	0x400a6666
 8007768:	22d0e560 	.word	0x22d0e560
 800776c:	3ff2f9db 	.word	0x3ff2f9db
 8007770:	75f6fd22 	.word	0x75f6fd22
 8007774:	3f719ce0 	.word	0x3f719ce0
 8007778:	200081e4 	.word	0x200081e4
 800777c:	40b00000 	.word	0x40b00000
 8007780:	20000960 	.word	0x20000960
 8007784:	40390000 	.word	0x40390000
 8007788:	20007c34 	.word	0x20007c34

0800778c <spi_timeout>:
static SPI_HandleTypeDef hdisplayspi;



uint8_t spi_timeout(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
	if(++spitimeout==100) return 1;
 8007790:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <spi_timeout+0x28>)
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <spi_timeout+0x28>)
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <spi_timeout+0x28>)
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	2b64      	cmp	r3, #100	; 0x64
 80077a2:	d101      	bne.n	80077a8 <spi_timeout+0x1c>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <spi_timeout+0x1e>
	else return 0;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	200009b0 	.word	0x200009b0

080077b8 <u8x8_gpio_and_delay_cb_stm32l4>:
/** @addtogroup _Exported_Functions
  * @{
  */
uint8_t u8x8_gpio_and_delay_cb_stm32l4 (U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg,
		U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	72fb      	strb	r3, [r7, #11]
 80077c6:	4613      	mov	r3, r2
 80077c8:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ca:	f107 0314 	add.w	r3, r7, #20
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	609a      	str	r2, [r3, #8]
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	611a      	str	r2, [r3, #16]
	  switch (msg)
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	3b28      	subs	r3, #40	; 0x28
 80077de:	2b23      	cmp	r3, #35	; 0x23
 80077e0:	d870      	bhi.n	80078c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <u8x8_gpio_and_delay_cb_stm32l4+0x30>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	08007879 	.word	0x08007879
 80077ec:	0800788f 	.word	0x0800788f
 80077f0:	080078c5 	.word	0x080078c5
 80077f4:	080078c5 	.word	0x080078c5
 80077f8:	080078c5 	.word	0x080078c5
 80077fc:	080078c5 	.word	0x080078c5
 8007800:	080078c5 	.word	0x080078c5
 8007804:	080078c5 	.word	0x080078c5
 8007808:	080078c5 	.word	0x080078c5
 800780c:	080078c5 	.word	0x080078c5
 8007810:	080078c5 	.word	0x080078c5
 8007814:	080078c5 	.word	0x080078c5
 8007818:	080078c5 	.word	0x080078c5
 800781c:	080078c5 	.word	0x080078c5
 8007820:	080078c5 	.word	0x080078c5
 8007824:	080078c5 	.word	0x080078c5
 8007828:	080078c5 	.word	0x080078c5
 800782c:	080078c5 	.word	0x080078c5
 8007830:	080078c5 	.word	0x080078c5
 8007834:	080078c5 	.word	0x080078c5
 8007838:	080078c5 	.word	0x080078c5
 800783c:	080078c5 	.word	0x080078c5
 8007840:	080078c5 	.word	0x080078c5
 8007844:	080078c5 	.word	0x080078c5
 8007848:	080078c5 	.word	0x080078c5
 800784c:	080078c5 	.word	0x080078c5
 8007850:	080078c5 	.word	0x080078c5
 8007854:	080078c5 	.word	0x080078c5
 8007858:	080078c5 	.word	0x080078c5
 800785c:	080078c5 	.word	0x080078c5
 8007860:	080078c5 	.word	0x080078c5
 8007864:	080078c5 	.word	0x080078c5
 8007868:	080078c5 	.word	0x080078c5
 800786c:	080078a9 	.word	0x080078a9
 8007870:	08007899 	.word	0x08007899
 8007874:	080078b7 	.word	0x080078b7
	  {
	  case U8X8_MSG_GPIO_AND_DELAY_INIT:
		  LCD_NRST_NOT_ACTIVE();
 8007878:	2201      	movs	r2, #1
 800787a:	2110      	movs	r1, #16
 800787c:	4814      	ldr	r0, [pc, #80]	; (80078d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 800787e:	f002 fc2f 	bl	800a0e0 <HAL_GPIO_WritePin>
		  LCD_NCS_NOT_ACTIVE();
 8007882:	2201      	movs	r2, #1
 8007884:	2101      	movs	r1, #1
 8007886:	4812      	ldr	r0, [pc, #72]	; (80078d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007888:	f002 fc2a 	bl	800a0e0 <HAL_GPIO_WritePin>
	    break;
 800788c:	e01a      	b.n	80078c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_DELAY_MILLI:
		  delay_ms(arg_int);
 800788e:	7abb      	ldrb	r3, [r7, #10]
 8007890:	4618      	mov	r0, r3
 8007892:	f7fb fa41 	bl	8002d18 <delay_ms>
	    break;
 8007896:	e015      	b.n	80078c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_DC:
	    HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, arg_int); //?
 8007898:	7abb      	ldrb	r3, [r7, #10]
 800789a:	461a      	mov	r2, r3
 800789c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078a0:	480c      	ldr	r0, [pc, #48]	; (80078d4 <u8x8_gpio_and_delay_cb_stm32l4+0x11c>)
 80078a2:	f002 fc1d 	bl	800a0e0 <HAL_GPIO_WritePin>
	    break;
 80078a6:	e00d      	b.n	80078c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_CS:
	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, arg_int); //?
 80078a8:	7abb      	ldrb	r3, [r7, #10]
 80078aa:	461a      	mov	r2, r3
 80078ac:	2101      	movs	r1, #1
 80078ae:	4808      	ldr	r0, [pc, #32]	; (80078d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80078b0:	f002 fc16 	bl	800a0e0 <HAL_GPIO_WritePin>
	    break;
 80078b4:	e006      	b.n	80078c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_RESET:
	    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, arg_int);
 80078b6:	7abb      	ldrb	r3, [r7, #10]
 80078b8:	461a      	mov	r2, r3
 80078ba:	2110      	movs	r1, #16
 80078bc:	4804      	ldr	r0, [pc, #16]	; (80078d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80078be:	f002 fc0f 	bl	800a0e0 <HAL_GPIO_WritePin>
	    break;
 80078c2:	bf00      	nop
	  }
	  return 1;
 80078c4:	2301      	movs	r3, #1
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3728      	adds	r7, #40	; 0x28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	48001000 	.word	0x48001000
 80078d4:	48000400 	.word	0x48000400

080078d8 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	607b      	str	r3, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	72fb      	strb	r3, [r7, #11]
 80078e6:	4613      	mov	r3, r2
 80078e8:	72bb      	strb	r3, [r7, #10]
	uint8_t *data;//, a_flag;
#ifdef  USE_BSP_SPI2
 hdisplayspi.Instance = huc1638_hspi.Instance;
#else
 hdisplayspi.Instance = hspi2.Instance;
 80078ea:	4b54      	ldr	r3, [pc, #336]	; (8007a3c <u8x8_byte_4wire_hw_spi+0x164>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a54      	ldr	r2, [pc, #336]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 80078f0:	6013      	str	r3, [r2, #0]
#endif

  switch (msg)
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	3b14      	subs	r3, #20
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	f200 8098 	bhi.w	8007a2c <u8x8_byte_4wire_hw_spi+0x154>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <u8x8_byte_4wire_hw_spi+0x2c>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	080079c9 	.word	0x080079c9
 8007908:	08007a2d 	.word	0x08007a2d
 800790c:	08007a2d 	.word	0x08007a2d
 8007910:	08007939 	.word	0x08007939
 8007914:	080079e9 	.word	0x080079e9
 8007918:	08007a0b 	.word	0x08007a0b
 800791c:	08007a2d 	.word	0x08007a2d
 8007920:	08007a2d 	.word	0x08007a2d
 8007924:	08007a2d 	.word	0x08007a2d
 8007928:	08007a2d 	.word	0x08007a2d
 800792c:	08007a2d 	.word	0x08007a2d
 8007930:	08007a2d 	.word	0x08007a2d
 8007934:	080079db 	.word	0x080079db
  {
  case U8X8_MSG_BYTE_SEND:
	data = (uint8_t *)arg_ptr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	617b      	str	r3, [r7, #20]
    while (arg_int > 0)
 800793c:	e040      	b.n	80079c0 <u8x8_byte_4wire_hw_spi+0xe8>
    {
    	/* check TXE flag */
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
    	{
    		spitimeout = 0;
 800793e:	4b41      	ldr	r3, [pc, #260]	; (8007a44 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007940:	2200      	movs	r2, #0
 8007942:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007944:	f7ff ff22 	bl	800778c <spi_timeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b01      	cmp	r3, #1
 800794c:	d007      	beq.n	800795e <u8x8_byte_4wire_hw_spi+0x86>
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 800794e:	4b3c      	ldr	r3, [pc, #240]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b02      	cmp	r3, #2
 800795a:	d1f0      	bne.n	800793e <u8x8_byte_4wire_hw_spi+0x66>
 800795c:	e000      	b.n	8007960 <u8x8_byte_4wire_hw_spi+0x88>
    		if(spi_timeout()==1) break;
 800795e:	bf00      	nop
    	}
    	/* Write the data */
    	*((__IO uint8_t*) &hdisplayspi.Instance->DR ) = (uint8_t) * data;
 8007960:	4b37      	ldr	r3, [pc, #220]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	330c      	adds	r3, #12
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	701a      	strb	r2, [r3, #0]
    	/* Wait BSY flag */
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 800796c:	e007      	b.n	800797e <u8x8_byte_4wire_hw_spi+0xa6>
    		{
    			spitimeout = 0;
 800796e:	4b35      	ldr	r3, [pc, #212]	; (8007a44 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007970:	2200      	movs	r2, #0
 8007972:	801a      	strh	r2, [r3, #0]
    		    if(spi_timeout()==1) break;
 8007974:	f7ff ff0a 	bl	800778c <spi_timeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b01      	cmp	r3, #1
 800797c:	d007      	beq.n	800798e <u8x8_byte_4wire_hw_spi+0xb6>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 800797e:	4b30      	ldr	r3, [pc, #192]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f0      	bne.n	800796e <u8x8_byte_4wire_hw_spi+0x96>
 800798c:	e009      	b.n	80079a2 <u8x8_byte_4wire_hw_spi+0xca>
    		    if(spi_timeout()==1) break;
 800798e:	bf00      	nop
    		}
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007990:	e007      	b.n	80079a2 <u8x8_byte_4wire_hw_spi+0xca>
    	{
    		spitimeout = 0;
 8007992:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007994:	2200      	movs	r2, #0
 8007996:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007998:	f7ff fef8 	bl	800778c <spi_timeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d007      	beq.n	80079b2 <u8x8_byte_4wire_hw_spi+0xda>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 80079a2:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ac:	2b80      	cmp	r3, #128	; 0x80
 80079ae:	d0f0      	beq.n	8007992 <u8x8_byte_4wire_hw_spi+0xba>
 80079b0:	e000      	b.n	80079b4 <u8x8_byte_4wire_hw_spi+0xdc>
    		if(spi_timeout()==1) break;
 80079b2:	bf00      	nop
    	}
        data++;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	3301      	adds	r3, #1
 80079b8:	617b      	str	r3, [r7, #20]
        arg_int--;
 80079ba:	7abb      	ldrb	r3, [r7, #10]
 80079bc:	3b01      	subs	r3, #1
 80079be:	72bb      	strb	r3, [r7, #10]
    while (arg_int > 0)
 80079c0:	7abb      	ldrb	r3, [r7, #10]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1c3      	bne.n	800794e <u8x8_byte_4wire_hw_spi+0x76>
    }
//	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, arg_int, 1000);
    break;
 80079c6:	e033      	b.n	8007a30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_INIT:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	461a      	mov	r2, r3
 80079d0:	2149      	movs	r1, #73	; 0x49
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f00e ff51 	bl	801687a <u8x8_gpio_call>
    break;
 80079d8:	e02a      	b.n	8007a30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_SET_DC:
	  u8x8_gpio_SetDC(u8x8, arg_int);
 80079da:	7abb      	ldrb	r3, [r7, #10]
 80079dc:	461a      	mov	r2, r3
 80079de:	214a      	movs	r1, #74	; 0x4a
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f00e ff4a 	bl	801687a <u8x8_gpio_call>
    break;
 80079e6:	e023      	b.n	8007a30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_START_TRANSFER:
	  __HAL_SPI_ENABLE(&hdisplayspi);
 80079e8:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f6:	601a      	str	r2, [r3, #0]
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	2149      	movs	r1, #73	; 0x49
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f00e ff39 	bl	801687a <u8x8_gpio_call>
    break;
 8007a08:	e012      	b.n	8007a30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_END_TRANSFER:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	461a      	mov	r2, r3
 8007a12:	2149      	movs	r1, #73	; 0x49
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f00e ff30 	bl	801687a <u8x8_gpio_call>
	  __HAL_SPI_DISABLE(&hdisplayspi);
 8007a1a:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a28:	601a      	str	r2, [r3, #0]
    break;
 8007a2a:	e001      	b.n	8007a30 <u8x8_byte_4wire_hw_spi+0x158>
  default:
    return 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e000      	b.n	8007a32 <u8x8_byte_4wire_hw_spi+0x15a>
  }
  return 1;
 8007a30:	2301      	movs	r3, #1
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20002034 	.word	0x20002034
 8007a40:	200009b4 	.word	0x200009b4
 8007a44:	200009b0 	.word	0x200009b0

08007a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007a4c:	f7ff fdf4 	bl	8007638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007a50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007a52:	e003      	b.n	8007a5c <LoopCopyDataInit>

08007a54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007a54:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007a56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007a58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007a5a:	3104      	adds	r1, #4

08007a5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007a5c:	480a      	ldr	r0, [pc, #40]	; (8007a88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007a5e:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8007a60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007a62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007a64:	d3f6      	bcc.n	8007a54 <CopyDataInit>
	ldr	r2, =_sbss
 8007a66:	4a0a      	ldr	r2, [pc, #40]	; (8007a90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007a68:	e002      	b.n	8007a70 <LoopFillZerobss>

08007a6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007a6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007a6c:	f842 3b04 	str.w	r3, [r2], #4

08007a70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007a70:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <LoopForever+0x16>)
	cmp	r2, r3
 8007a72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007a74:	d3f9      	bcc.n	8007a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007a76:	f015 fb6f 	bl	801d158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007a7a:	f7fe f891 	bl	8005ba0 <main>

08007a7e <LoopForever>:

LoopForever:
    b LoopForever
 8007a7e:	e7fe      	b.n	8007a7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007a80:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8007a84:	0802ba54 	.word	0x0802ba54
	ldr	r0, =_sdata
 8007a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007a8c:	200008c4 	.word	0x200008c4
	ldr	r2, =_sbss
 8007a90:	200008c8 	.word	0x200008c8
	ldr	r3, = _ebss
 8007a94:	2000a14c 	.word	0x2000a14c

08007a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a98:	e7fe      	b.n	8007a98 <ADC1_2_IRQHandler>

08007a9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007aa4:	2003      	movs	r0, #3
 8007aa6:	f001 fba8 	bl	80091fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007aaa:	200f      	movs	r0, #15
 8007aac:	f7ff fc02 	bl	80072b4 <HAL_InitTick>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	71fb      	strb	r3, [r7, #7]
 8007aba:	e001      	b.n	8007ac0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007abc:	f7fe ff84 	bl	80069c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007ad0:	4b06      	ldr	r3, [pc, #24]	; (8007aec <HAL_IncTick+0x20>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <HAL_IncTick+0x24>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4413      	add	r3, r2
 8007adc:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <HAL_IncTick+0x24>)
 8007ade:	6013      	str	r3, [r2, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	200003d8 	.word	0x200003d8
 8007af0:	200083e4 	.word	0x200083e4

08007af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
  return uwTick;
 8007af8:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <HAL_GetTick+0x14>)
 8007afa:	681b      	ldr	r3, [r3, #0]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	200083e4 	.word	0x200083e4

08007b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b14:	f7ff ffee 	bl	8007af4 <HAL_GetTick>
 8007b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d005      	beq.n	8007b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007b26:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <HAL_Delay+0x44>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007b32:	bf00      	nop
 8007b34:	f7ff ffde 	bl	8007af4 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d8f7      	bhi.n	8007b34 <HAL_Delay+0x28>
  {
  }
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200003d8 	.word	0x200003d8

08007b54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	609a      	str	r2, [r3, #8]
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	609a      	str	r2, [r3, #8]
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3360      	adds	r3, #96	; 0x60
 8007bce:	461a      	mov	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <LL_ADC_SetOffset+0x44>)
 8007bde:	4013      	ands	r3, r2
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007bf4:	bf00      	nop
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	03fff000 	.word	0x03fff000

08007c04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3360      	adds	r3, #96	; 0x60
 8007c12:	461a      	mov	r2, r3
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3360      	adds	r3, #96	; 0x60
 8007c40:	461a      	mov	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	431a      	orrs	r2, r3
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	615a      	str	r2, [r3, #20]
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b087      	sub	sp, #28
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3330      	adds	r3, #48	; 0x30
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	0a1b      	lsrs	r3, r3, #8
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	4413      	add	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f003 031f 	and.w	r3, r3, #31
 8007cdc:	211f      	movs	r1, #31
 8007cde:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	401a      	ands	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	0e9b      	lsrs	r3, r3, #26
 8007cea:	f003 011f 	and.w	r1, r3, #31
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	0e5b      	lsrs	r3, r3, #25
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	4413      	add	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	0d1b      	lsrs	r3, r3, #20
 8007d32:	f003 031f 	and.w	r3, r3, #31
 8007d36:	2107      	movs	r1, #7
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	401a      	ands	r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	0d1b      	lsrs	r3, r3, #20
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007d54:	bf00      	nop
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	401a      	ands	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f003 0318 	and.w	r3, r3, #24
 8007d82:	4908      	ldr	r1, [pc, #32]	; (8007da4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007d84:	40d9      	lsrs	r1, r3
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	400b      	ands	r3, r1
 8007d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	0007ffff 	.word	0x0007ffff

08007da8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f003 031f 	and.w	r3, r3, #31
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007dd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6093      	str	r3, [r2, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfc:	d101      	bne.n	8007e02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e4c:	d101      	bne.n	8007e52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e74:	f043 0201 	orr.w	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <LL_ADC_IsEnabled+0x18>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <LL_ADC_IsEnabled+0x1a>
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ebe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ec2:	f043 0204 	orr.w	r2, r3, #4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d101      	bne.n	8007eee <LL_ADC_REG_IsConversionOngoing+0x18>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d101      	bne.n	8007f14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b089      	sub	sp, #36	; 0x24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e139      	b.n	80081b2 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7fe fd6d 	bl	8006a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff ff3f 	bl	8007de8 <LL_ADC_IsDeepPowerDownEnabled>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff ff25 	bl	8007dc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff ff5a 	bl	8007e38 <LL_ADC_IsInternalRegulatorEnabled>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d115      	bne.n	8007fb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff ff3e 	bl	8007e10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007f94:	4b89      	ldr	r3, [pc, #548]	; (80081bc <HAL_ADC_Init+0x298>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	099b      	lsrs	r3, r3, #6
 8007f9a:	4a89      	ldr	r2, [pc, #548]	; (80081c0 <HAL_ADC_Init+0x29c>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	099b      	lsrs	r3, r3, #6
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007fa8:	e002      	b.n	8007fb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1f9      	bne.n	8007faa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff ff3c 	bl	8007e38 <LL_ADC_IsInternalRegulatorEnabled>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10d      	bne.n	8007fe2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fca:	f043 0210 	orr.w	r2, r3, #16
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd6:	f043 0201 	orr.w	r2, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff ff75 	bl	8007ed6 <LL_ADC_REG_IsConversionOngoing>
 8007fec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f040 80d2 	bne.w	80081a0 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 80ce 	bne.w	80081a0 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008008:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800800c:	f043 0202 	orr.w	r2, r3, #2
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff ff35 	bl	8007e88 <LL_ADC_IsEnabled>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d115      	bne.n	8008050 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008024:	4867      	ldr	r0, [pc, #412]	; (80081c4 <HAL_ADC_Init+0x2a0>)
 8008026:	f7ff ff2f 	bl	8007e88 <LL_ADC_IsEnabled>
 800802a:	4604      	mov	r4, r0
 800802c:	4866      	ldr	r0, [pc, #408]	; (80081c8 <HAL_ADC_Init+0x2a4>)
 800802e:	f7ff ff2b 	bl	8007e88 <LL_ADC_IsEnabled>
 8008032:	4603      	mov	r3, r0
 8008034:	431c      	orrs	r4, r3
 8008036:	4865      	ldr	r0, [pc, #404]	; (80081cc <HAL_ADC_Init+0x2a8>)
 8008038:	f7ff ff26 	bl	8007e88 <LL_ADC_IsEnabled>
 800803c:	4603      	mov	r3, r0
 800803e:	4323      	orrs	r3, r4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d105      	bne.n	8008050 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	4619      	mov	r1, r3
 800804a:	4861      	ldr	r0, [pc, #388]	; (80081d0 <HAL_ADC_Init+0x2ac>)
 800804c:	f7ff fd82 	bl	8007b54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7e5b      	ldrb	r3, [r3, #25]
 8008054:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800805a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008060:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008066:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800806e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008070:	4313      	orrs	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d106      	bne.n	800808c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	3b01      	subs	r3, #1
 8008084:	045b      	lsls	r3, r3, #17
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	4313      	orrs	r3, r2
 800808a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008098:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	4b49      	ldr	r3, [pc, #292]	; (80081d4 <HAL_ADC_Init+0x2b0>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	69b9      	ldr	r1, [r7, #24]
 80080b8:	430b      	orrs	r3, r1
 80080ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff ff08 	bl	8007ed6 <LL_ADC_REG_IsConversionOngoing>
 80080c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff ff15 	bl	8007efc <LL_ADC_INJ_IsConversionOngoing>
 80080d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d140      	bne.n	800815c <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d13d      	bne.n	800815c <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7e1b      	ldrb	r3, [r3, #24]
 80080e8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80080ea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80080f4:	4313      	orrs	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008102:	f023 0306 	bic.w	r3, r3, #6
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	69b9      	ldr	r1, [r7, #24]
 800810c:	430b      	orrs	r3, r1
 800810e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008116:	2b01      	cmp	r3, #1
 8008118:	d118      	bne.n	800814c <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008124:	f023 0304 	bic.w	r3, r3, #4
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008130:	4311      	orrs	r1, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008136:	4311      	orrs	r1, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800813c:	430a      	orrs	r2, r1
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0201 	orr.w	r2, r2, #1
 8008148:	611a      	str	r2, [r3, #16]
 800814a:	e007      	b.n	800815c <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d10c      	bne.n	800817e <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816a:	f023 010f 	bic.w	r1, r3, #15
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	1e5a      	subs	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	631a      	str	r2, [r3, #48]	; 0x30
 800817c:	e007      	b.n	800818e <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 020f 	bic.w	r2, r2, #15
 800818c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	f043 0201 	orr.w	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	659a      	str	r2, [r3, #88]	; 0x58
 800819e:	e007      	b.n	80081b0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a4:	f043 0210 	orr.w	r2, r3, #16
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80081b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3724      	adds	r7, #36	; 0x24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd90      	pop	{r4, r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200003d0 	.word	0x200003d0
 80081c0:	053e2d63 	.word	0x053e2d63
 80081c4:	50040000 	.word	0x50040000
 80081c8:	50040100 	.word	0x50040100
 80081cc:	50040200 	.word	0x50040200
 80081d0:	50040300 	.word	0x50040300
 80081d4:	fff0c007 	.word	0xfff0c007

080081d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80081e0:	4857      	ldr	r0, [pc, #348]	; (8008340 <HAL_ADC_Start+0x168>)
 80081e2:	f7ff fde1 	bl	8007da8 <LL_ADC_GetMultimode>
 80081e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fe72 	bl	8007ed6 <LL_ADC_REG_IsConversionOngoing>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f040 809c 	bne.w	8008332 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_ADC_Start+0x30>
 8008204:	2302      	movs	r3, #2
 8008206:	e097      	b.n	8008338 <HAL_ADC_Start+0x160>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fd79 	bl	8008d08 <ADC_Enable>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8083 	bne.w	8008328 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008226:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800822a:	f023 0301 	bic.w	r3, r3, #1
 800822e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a42      	ldr	r2, [pc, #264]	; (8008344 <HAL_ADC_Start+0x16c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d002      	beq.n	8008246 <HAL_ADC_Start+0x6e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	e000      	b.n	8008248 <HAL_ADC_Start+0x70>
 8008246:	4b40      	ldr	r3, [pc, #256]	; (8008348 <HAL_ADC_Start+0x170>)
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	4293      	cmp	r3, r2
 800824e:	d002      	beq.n	8008256 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800826a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826e:	d106      	bne.n	800827e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008274:	f023 0206 	bic.w	r2, r3, #6
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	65da      	str	r2, [r3, #92]	; 0x5c
 800827c:	e002      	b.n	8008284 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	221c      	movs	r2, #28
 800828a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a2a      	ldr	r2, [pc, #168]	; (8008344 <HAL_ADC_Start+0x16c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d002      	beq.n	80082a4 <HAL_ADC_Start+0xcc>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	e000      	b.n	80082a6 <HAL_ADC_Start+0xce>
 80082a4:	4b28      	ldr	r3, [pc, #160]	; (8008348 <HAL_ADC_Start+0x170>)
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d008      	beq.n	80082c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	d002      	beq.n	80082c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d114      	bne.n	80082ea <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80082d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fde3 	bl	8007eae <LL_ADC_REG_StartConversion>
 80082e8:	e025      	b.n	8008336 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a12      	ldr	r2, [pc, #72]	; (8008344 <HAL_ADC_Start+0x16c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d002      	beq.n	8008306 <HAL_ADC_Start+0x12e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	e000      	b.n	8008308 <HAL_ADC_Start+0x130>
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <HAL_ADC_Start+0x170>)
 8008308:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800831e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	659a      	str	r2, [r3, #88]	; 0x58
 8008326:	e006      	b.n	8008336 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008330:	e001      	b.n	8008336 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008332:	2302      	movs	r3, #2
 8008334:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008336:	7dfb      	ldrb	r3, [r7, #23]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	50040300 	.word	0x50040300
 8008344:	50040100 	.word	0x50040100
 8008348:	50040000 	.word	0x50040000

0800834c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008358:	4850      	ldr	r0, [pc, #320]	; (800849c <HAL_ADC_Start_DMA+0x150>)
 800835a:	f7ff fd25 	bl	8007da8 <LL_ADC_GetMultimode>
 800835e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fdb6 	bl	8007ed6 <LL_ADC_REG_IsConversionOngoing>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 808e 	bne.w	800848e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_ADC_Start_DMA+0x34>
 800837c:	2302      	movs	r3, #2
 800837e:	e089      	b.n	8008494 <HAL_ADC_Start_DMA+0x148>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d005      	beq.n	800839a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	2b05      	cmp	r3, #5
 8008392:	d002      	beq.n	800839a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b09      	cmp	r3, #9
 8008398:	d172      	bne.n	8008480 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 fcb4 	bl	8008d08 <ADC_Enable>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d165      	bne.n	8008476 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a37      	ldr	r2, [pc, #220]	; (80084a0 <HAL_ADC_Start_DMA+0x154>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d002      	beq.n	80083ce <HAL_ADC_Start_DMA+0x82>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	e000      	b.n	80083d0 <HAL_ADC_Start_DMA+0x84>
 80083ce:	4b35      	ldr	r3, [pc, #212]	; (80084a4 <HAL_ADC_Start_DMA+0x158>)
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d002      	beq.n	80083de <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d105      	bne.n	80083ea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083fa:	f023 0206 	bic.w	r2, r3, #6
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	65da      	str	r2, [r3, #92]	; 0x5c
 8008402:	e002      	b.n	800840a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840e:	4a26      	ldr	r2, [pc, #152]	; (80084a8 <HAL_ADC_Start_DMA+0x15c>)
 8008410:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008416:	4a25      	ldr	r2, [pc, #148]	; (80084ac <HAL_ADC_Start_DMA+0x160>)
 8008418:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841e:	4a24      	ldr	r2, [pc, #144]	; (80084b0 <HAL_ADC_Start_DMA+0x164>)
 8008420:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	221c      	movs	r2, #28
 8008428:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0210 	orr.w	r2, r2, #16
 8008440:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3340      	adds	r3, #64	; 0x40
 800845c:	4619      	mov	r1, r3
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f001 fad5 	bl	8009a10 <HAL_DMA_Start_IT>
 8008466:	4603      	mov	r3, r0
 8008468:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fd1d 	bl	8007eae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008474:	e00d      	b.n	8008492 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800847e:	e008      	b.n	8008492 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800848c:	e001      	b.n	8008492 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800848e:	2302      	movs	r3, #2
 8008490:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	50040300 	.word	0x50040300
 80084a0:	50040100 	.word	0x50040100
 80084a4:	50040000 	.word	0x50040000
 80084a8:	08008dcd 	.word	0x08008dcd
 80084ac:	08008ea5 	.word	0x08008ea5
 80084b0:	08008ec1 	.word	0x08008ec1

080084b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b0b6      	sub	sp, #216	; 0xd8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <HAL_ADC_ConfigChannel+0x22>
 800850e:	2302      	movs	r3, #2
 8008510:	e3e3      	b.n	8008cda <HAL_ADC_ConfigChannel+0x7ea>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff fcd9 	bl	8007ed6 <LL_ADC_REG_IsConversionOngoing>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	f040 83c4 	bne.w	8008cb4 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	2b05      	cmp	r3, #5
 8008532:	d824      	bhi.n	800857e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	3b02      	subs	r3, #2
 800853a:	2b03      	cmp	r3, #3
 800853c:	d81b      	bhi.n	8008576 <HAL_ADC_ConfigChannel+0x86>
 800853e:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <HAL_ADC_ConfigChannel+0x54>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	08008555 	.word	0x08008555
 8008548:	0800855d 	.word	0x0800855d
 800854c:	08008565 	.word	0x08008565
 8008550:	0800856d 	.word	0x0800856d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	220c      	movs	r2, #12
 8008558:	605a      	str	r2, [r3, #4]
          break;
 800855a:	e011      	b.n	8008580 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2212      	movs	r2, #18
 8008560:	605a      	str	r2, [r3, #4]
          break;
 8008562:	e00d      	b.n	8008580 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2218      	movs	r2, #24
 8008568:	605a      	str	r2, [r3, #4]
          break;
 800856a:	e009      	b.n	8008580 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008572:	605a      	str	r2, [r3, #4]
          break;
 8008574:	e004      	b.n	8008580 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2206      	movs	r2, #6
 800857a:	605a      	str	r2, [r3, #4]
          break;
 800857c:	e000      	b.n	8008580 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800857e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	6859      	ldr	r1, [r3, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	f7ff fb90 	bl	8007cb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fc9d 	bl	8007ed6 <LL_ADC_REG_IsConversionOngoing>
 800859c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fca9 	bl	8007efc <LL_ADC_INJ_IsConversionOngoing>
 80085aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80085ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f040 81c1 	bne.w	800893a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80085b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 81bc 	bne.w	800893a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ca:	d10f      	bne.n	80085ec <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2200      	movs	r2, #0
 80085d6:	4619      	mov	r1, r3
 80085d8:	f7ff fb97 	bl	8007d0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff fb3e 	bl	8007c66 <LL_ADC_SetSamplingTimeCommonConfig>
 80085ea:	e00e      	b.n	800860a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	461a      	mov	r2, r3
 80085fa:	f7ff fb86 	bl	8007d0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff fb2e 	bl	8007c66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	08db      	lsrs	r3, r3, #3
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	fa02 f303 	lsl.w	r3, r2, r3
 8008620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b04      	cmp	r3, #4
 800862a:	d00a      	beq.n	8008642 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6919      	ldr	r1, [r3, #16]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800863c:	f7ff fabe 	bl	8007bbc <LL_ADC_SetOffset>
 8008640:	e17b      	b.n	800893a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2100      	movs	r1, #0
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fadb 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 800864e:	4603      	mov	r3, r0
 8008650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <HAL_ADC_ConfigChannel+0x17e>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fad0 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 8008664:	4603      	mov	r3, r0
 8008666:	0e9b      	lsrs	r3, r3, #26
 8008668:	f003 021f 	and.w	r2, r3, #31
 800866c:	e01e      	b.n	80086ac <HAL_ADC_ConfigChannel+0x1bc>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fac5 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 800867a:	4603      	mov	r3, r0
 800867c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008680:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008684:	fa93 f3a3 	rbit	r3, r3
 8008688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800868c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008694:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800869c:	2320      	movs	r3, #32
 800869e:	e004      	b.n	80086aa <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80086a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086a4:	fab3 f383 	clz	r3, r3
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d105      	bne.n	80086c4 <HAL_ADC_ConfigChannel+0x1d4>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	0e9b      	lsrs	r3, r3, #26
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	e018      	b.n	80086f6 <HAL_ADC_ConfigChannel+0x206>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086d0:	fa93 f3a3 	rbit	r3, r3
 80086d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80086d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80086e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80086e8:	2320      	movs	r3, #32
 80086ea:	e004      	b.n	80086f6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80086ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086f0:	fab3 f383 	clz	r3, r3
 80086f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d106      	bne.n	8008708 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fa94 	bl	8007c30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2101      	movs	r1, #1
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff fa78 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 8008714:	4603      	mov	r3, r0
 8008716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <HAL_ADC_ConfigChannel+0x244>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2101      	movs	r1, #1
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fa6d 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 800872a:	4603      	mov	r3, r0
 800872c:	0e9b      	lsrs	r3, r3, #26
 800872e:	f003 021f 	and.w	r2, r3, #31
 8008732:	e01e      	b.n	8008772 <HAL_ADC_ConfigChannel+0x282>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2101      	movs	r1, #1
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fa62 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 8008740:	4603      	mov	r3, r0
 8008742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800874a:	fa93 f3a3 	rbit	r3, r3
 800874e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800875a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8008762:	2320      	movs	r3, #32
 8008764:	e004      	b.n	8008770 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8008766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800876a:	fab3 f383 	clz	r3, r3
 800876e:	b2db      	uxtb	r3, r3
 8008770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800877a:	2b00      	cmp	r3, #0
 800877c:	d105      	bne.n	800878a <HAL_ADC_ConfigChannel+0x29a>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	0e9b      	lsrs	r3, r3, #26
 8008784:	f003 031f 	and.w	r3, r3, #31
 8008788:	e018      	b.n	80087bc <HAL_ADC_ConfigChannel+0x2cc>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008796:	fa93 f3a3 	rbit	r3, r3
 800879a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800879e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80087a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80087ae:	2320      	movs	r3, #32
 80087b0:	e004      	b.n	80087bc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80087b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b6:	fab3 f383 	clz	r3, r3
 80087ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80087bc:	429a      	cmp	r2, r3
 80087be:	d106      	bne.n	80087ce <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2101      	movs	r1, #1
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fa31 	bl	8007c30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2102      	movs	r1, #2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fa15 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 80087da:	4603      	mov	r3, r0
 80087dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <HAL_ADC_ConfigChannel+0x30a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2102      	movs	r1, #2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff fa0a 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 80087f0:	4603      	mov	r3, r0
 80087f2:	0e9b      	lsrs	r3, r3, #26
 80087f4:	f003 021f 	and.w	r2, r3, #31
 80087f8:	e01e      	b.n	8008838 <HAL_ADC_ConfigChannel+0x348>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2102      	movs	r1, #2
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff f9ff 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 8008806:	4603      	mov	r3, r0
 8008808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800880c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008810:	fa93 f3a3 	rbit	r3, r3
 8008814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800881c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8008828:	2320      	movs	r3, #32
 800882a:	e004      	b.n	8008836 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800882c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008830:	fab3 f383 	clz	r3, r3
 8008834:	b2db      	uxtb	r3, r3
 8008836:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008840:	2b00      	cmp	r3, #0
 8008842:	d105      	bne.n	8008850 <HAL_ADC_ConfigChannel+0x360>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	0e9b      	lsrs	r3, r3, #26
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	e016      	b.n	800887e <HAL_ADC_ConfigChannel+0x38e>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800885c:	fa93 f3a3 	rbit	r3, r3
 8008860:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8008870:	2320      	movs	r3, #32
 8008872:	e004      	b.n	800887e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8008874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008878:	fab3 f383 	clz	r3, r3
 800887c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800887e:	429a      	cmp	r2, r3
 8008880:	d106      	bne.n	8008890 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	2102      	movs	r1, #2
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff f9d0 	bl	8007c30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2103      	movs	r1, #3
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff f9b4 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 800889c:	4603      	mov	r3, r0
 800889e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <HAL_ADC_ConfigChannel+0x3cc>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2103      	movs	r1, #3
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff f9a9 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 80088b2:	4603      	mov	r3, r0
 80088b4:	0e9b      	lsrs	r3, r3, #26
 80088b6:	f003 021f 	and.w	r2, r3, #31
 80088ba:	e017      	b.n	80088ec <HAL_ADC_ConfigChannel+0x3fc>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2103      	movs	r1, #3
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff f99e 	bl	8007c04 <LL_ADC_GetOffsetChannel>
 80088c8:	4603      	mov	r3, r0
 80088ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ce:	fa93 f3a3 	rbit	r3, r3
 80088d2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80088d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80088d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80088de:	2320      	movs	r3, #32
 80088e0:	e003      	b.n	80088ea <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80088e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e4:	fab3 f383 	clz	r3, r3
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d105      	bne.n	8008904 <HAL_ADC_ConfigChannel+0x414>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	0e9b      	lsrs	r3, r3, #26
 80088fe:	f003 031f 	and.w	r3, r3, #31
 8008902:	e011      	b.n	8008928 <HAL_ADC_ConfigChannel+0x438>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800890c:	fa93 f3a3 	rbit	r3, r3
 8008910:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008914:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800891c:	2320      	movs	r3, #32
 800891e:	e003      	b.n	8008928 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8008920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008922:	fab3 f383 	clz	r3, r3
 8008926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008928:	429a      	cmp	r2, r3
 800892a:	d106      	bne.n	800893a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	2103      	movs	r1, #3
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff f97b 	bl	8007c30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff faa2 	bl	8007e88 <LL_ADC_IsEnabled>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	f040 8140 	bne.w	8008bcc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	461a      	mov	r2, r3
 800895a:	f7ff fa01 	bl	8007d60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	4a8f      	ldr	r2, [pc, #572]	; (8008ba0 <HAL_ADC_ConfigChannel+0x6b0>)
 8008964:	4293      	cmp	r3, r2
 8008966:	f040 8131 	bne.w	8008bcc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10b      	bne.n	8008992 <HAL_ADC_ConfigChannel+0x4a2>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	0e9b      	lsrs	r3, r3, #26
 8008980:	3301      	adds	r3, #1
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2b09      	cmp	r3, #9
 8008988:	bf94      	ite	ls
 800898a:	2301      	movls	r3, #1
 800898c:	2300      	movhi	r3, #0
 800898e:	b2db      	uxtb	r3, r3
 8008990:	e019      	b.n	80089c6 <HAL_ADC_ConfigChannel+0x4d6>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899a:	fa93 f3a3 	rbit	r3, r3
 800899e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80089a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089a2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80089a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80089aa:	2320      	movs	r3, #32
 80089ac:	e003      	b.n	80089b6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80089ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089b0:	fab3 f383 	clz	r3, r3
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	3301      	adds	r3, #1
 80089b8:	f003 031f 	and.w	r3, r3, #31
 80089bc:	2b09      	cmp	r3, #9
 80089be:	bf94      	ite	ls
 80089c0:	2301      	movls	r3, #1
 80089c2:	2300      	movhi	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d079      	beq.n	8008abe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x4f6>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	0e9b      	lsrs	r3, r3, #26
 80089dc:	3301      	adds	r3, #1
 80089de:	069b      	lsls	r3, r3, #26
 80089e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80089e4:	e015      	b.n	8008a12 <HAL_ADC_ConfigChannel+0x522>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ee:	fa93 f3a3 	rbit	r3, r3
 80089f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80089f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80089f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80089fe:	2320      	movs	r3, #32
 8008a00:	e003      	b.n	8008a0a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8008a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a04:	fab3 f383 	clz	r3, r3
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	069b      	lsls	r3, r3, #26
 8008a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d109      	bne.n	8008a32 <HAL_ADC_ConfigChannel+0x542>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	0e9b      	lsrs	r3, r3, #26
 8008a24:	3301      	adds	r3, #1
 8008a26:	f003 031f 	and.w	r3, r3, #31
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a30:	e017      	b.n	8008a62 <HAL_ADC_ConfigChannel+0x572>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a3a:	fa93 f3a3 	rbit	r3, r3
 8008a3e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	e003      	b.n	8008a56 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8008a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a50:	fab3 f383 	clz	r3, r3
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	3301      	adds	r3, #1
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a62:	ea42 0103 	orr.w	r1, r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <HAL_ADC_ConfigChannel+0x598>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	0e9b      	lsrs	r3, r3, #26
 8008a78:	3301      	adds	r3, #1
 8008a7a:	f003 021f 	and.w	r2, r3, #31
 8008a7e:	4613      	mov	r3, r2
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	4413      	add	r3, r2
 8008a84:	051b      	lsls	r3, r3, #20
 8008a86:	e018      	b.n	8008aba <HAL_ADC_ConfigChannel+0x5ca>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	fa93 f3a3 	rbit	r3, r3
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8008aa0:	2320      	movs	r3, #32
 8008aa2:	e003      	b.n	8008aac <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa6:	fab3 f383 	clz	r3, r3
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	3301      	adds	r3, #1
 8008aae:	f003 021f 	and.w	r2, r3, #31
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4413      	add	r3, r2
 8008ab8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008aba:	430b      	orrs	r3, r1
 8008abc:	e081      	b.n	8008bc2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d107      	bne.n	8008ada <HAL_ADC_ConfigChannel+0x5ea>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	0e9b      	lsrs	r3, r3, #26
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	069b      	lsls	r3, r3, #26
 8008ad4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ad8:	e015      	b.n	8008b06 <HAL_ADC_ConfigChannel+0x616>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	fa93 f3a3 	rbit	r3, r3
 8008ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8008af2:	2320      	movs	r3, #32
 8008af4:	e003      	b.n	8008afe <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	fab3 f383 	clz	r3, r3
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	3301      	adds	r3, #1
 8008b00:	069b      	lsls	r3, r3, #26
 8008b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <HAL_ADC_ConfigChannel+0x636>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	0e9b      	lsrs	r3, r3, #26
 8008b18:	3301      	adds	r3, #1
 8008b1a:	f003 031f 	and.w	r3, r3, #31
 8008b1e:	2101      	movs	r1, #1
 8008b20:	fa01 f303 	lsl.w	r3, r1, r3
 8008b24:	e017      	b.n	8008b56 <HAL_ADC_ConfigChannel+0x666>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	fa93 f3a3 	rbit	r3, r3
 8008b32:	61fb      	str	r3, [r7, #28]
  return result;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8008b3e:	2320      	movs	r3, #32
 8008b40:	e003      	b.n	8008b4a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	fab3 f383 	clz	r3, r3
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	2101      	movs	r1, #1
 8008b52:	fa01 f303 	lsl.w	r3, r1, r3
 8008b56:	ea42 0103 	orr.w	r1, r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10d      	bne.n	8008b82 <HAL_ADC_ConfigChannel+0x692>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	0e9b      	lsrs	r3, r3, #26
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	f003 021f 	and.w	r2, r3, #31
 8008b72:	4613      	mov	r3, r2
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4413      	add	r3, r2
 8008b78:	3b1e      	subs	r3, #30
 8008b7a:	051b      	lsls	r3, r3, #20
 8008b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b80:	e01e      	b.n	8008bc0 <HAL_ADC_ConfigChannel+0x6d0>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	fa93 f3a3 	rbit	r3, r3
 8008b8e:	613b      	str	r3, [r7, #16]
  return result;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8008b9a:	2320      	movs	r3, #32
 8008b9c:	e006      	b.n	8008bac <HAL_ADC_ConfigChannel+0x6bc>
 8008b9e:	bf00      	nop
 8008ba0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	fab3 f383 	clz	r3, r3
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	3301      	adds	r3, #1
 8008bae:	f003 021f 	and.w	r2, r3, #31
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3b1e      	subs	r3, #30
 8008bba:	051b      	lsls	r3, r3, #20
 8008bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	6892      	ldr	r2, [r2, #8]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f7ff f89f 	bl	8007d0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4b44      	ldr	r3, [pc, #272]	; (8008ce4 <HAL_ADC_ConfigChannel+0x7f4>)
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d07a      	beq.n	8008cce <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008bd8:	4843      	ldr	r0, [pc, #268]	; (8008ce8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008bda:	f7fe ffe1 	bl	8007ba0 <LL_ADC_GetCommonPathInternalCh>
 8008bde:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a41      	ldr	r2, [pc, #260]	; (8008cec <HAL_ADC_ConfigChannel+0x7fc>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d12c      	bne.n	8008c46 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008bec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d126      	bne.n	8008c46 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a3c      	ldr	r2, [pc, #240]	; (8008cf0 <HAL_ADC_ConfigChannel+0x800>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d004      	beq.n	8008c0c <HAL_ADC_ConfigChannel+0x71c>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a3b      	ldr	r2, [pc, #236]	; (8008cf4 <HAL_ADC_ConfigChannel+0x804>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d15d      	bne.n	8008cc8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c14:	4619      	mov	r1, r3
 8008c16:	4834      	ldr	r0, [pc, #208]	; (8008ce8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008c18:	f7fe ffaf 	bl	8007b7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008c1c:	4b36      	ldr	r3, [pc, #216]	; (8008cf8 <HAL_ADC_ConfigChannel+0x808>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	099b      	lsrs	r3, r3, #6
 8008c22:	4a36      	ldr	r2, [pc, #216]	; (8008cfc <HAL_ADC_ConfigChannel+0x80c>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	099b      	lsrs	r3, r3, #6
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008c36:	e002      	b.n	8008c3e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1f9      	bne.n	8008c38 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008c44:	e040      	b.n	8008cc8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a2d      	ldr	r2, [pc, #180]	; (8008d00 <HAL_ADC_ConfigChannel+0x810>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d118      	bne.n	8008c82 <HAL_ADC_ConfigChannel+0x792>
 8008c50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d112      	bne.n	8008c82 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a23      	ldr	r2, [pc, #140]	; (8008cf0 <HAL_ADC_ConfigChannel+0x800>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d004      	beq.n	8008c70 <HAL_ADC_ConfigChannel+0x780>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a22      	ldr	r2, [pc, #136]	; (8008cf4 <HAL_ADC_ConfigChannel+0x804>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d12d      	bne.n	8008ccc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c78:	4619      	mov	r1, r3
 8008c7a:	481b      	ldr	r0, [pc, #108]	; (8008ce8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008c7c:	f7fe ff7d 	bl	8007b7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c80:	e024      	b.n	8008ccc <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <HAL_ADC_ConfigChannel+0x814>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d120      	bne.n	8008cce <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d11a      	bne.n	8008cce <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a14      	ldr	r2, [pc, #80]	; (8008cf0 <HAL_ADC_ConfigChannel+0x800>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d115      	bne.n	8008cce <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008caa:	4619      	mov	r1, r3
 8008cac:	480e      	ldr	r0, [pc, #56]	; (8008ce8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008cae:	f7fe ff64 	bl	8007b7a <LL_ADC_SetCommonPathInternalCh>
 8008cb2:	e00c      	b.n	8008cce <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb8:	f043 0220 	orr.w	r2, r3, #32
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008cc6:	e002      	b.n	8008cce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008cc8:	bf00      	nop
 8008cca:	e000      	b.n	8008cce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ccc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008cd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	37d8      	adds	r7, #216	; 0xd8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	80080000 	.word	0x80080000
 8008ce8:	50040300 	.word	0x50040300
 8008cec:	c7520000 	.word	0xc7520000
 8008cf0:	50040000 	.word	0x50040000
 8008cf4:	50040200 	.word	0x50040200
 8008cf8:	200003d0 	.word	0x200003d0
 8008cfc:	053e2d63 	.word	0x053e2d63
 8008d00:	cb840000 	.word	0xcb840000
 8008d04:	80000001 	.word	0x80000001

08008d08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff f8b7 	bl	8007e88 <LL_ADC_IsEnabled>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d14d      	bne.n	8008dbc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	4b28      	ldr	r3, [pc, #160]	; (8008dc8 <ADC_Enable+0xc0>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00d      	beq.n	8008d4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d32:	f043 0210 	orr.w	r2, r3, #16
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3e:	f043 0201 	orr.w	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e039      	b.n	8008dbe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff f886 	bl	8007e60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008d54:	f7fe fece 	bl	8007af4 <HAL_GetTick>
 8008d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008d5a:	e028      	b.n	8008dae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff f891 	bl	8007e88 <LL_ADC_IsEnabled>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff f875 	bl	8007e60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008d76:	f7fe febd 	bl	8007af4 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d914      	bls.n	8008dae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d00d      	beq.n	8008dae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	f043 0210 	orr.w	r2, r3, #16
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da2:	f043 0201 	orr.w	r2, r3, #1
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e007      	b.n	8008dbe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d1cf      	bne.n	8008d5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	8000003f 	.word	0x8000003f

08008dcc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d14b      	bne.n	8008e7e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0308 	and.w	r3, r3, #8
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d021      	beq.n	8008e44 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe ff41 	bl	8007c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d032      	beq.n	8008e76 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d12b      	bne.n	8008e76 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d11f      	bne.n	8008e76 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3a:	f043 0201 	orr.w	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	659a      	str	r2, [r3, #88]	; 0x58
 8008e42:	e018      	b.n	8008e76 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d111      	bne.n	8008e76 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6e:	f043 0201 	orr.w	r2, r3, #1
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7ff fb1c 	bl	80084b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008e7c:	e00e      	b.n	8008e9c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e82:	f003 0310 	and.w	r3, r3, #16
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7ff fb26 	bl	80084dc <HAL_ADC_ErrorCallback>
}
 8008e90:	e004      	b.n	8008e9c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	4798      	blx	r3
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fb08 	bl	80084c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ede:	f043 0204 	orr.w	r2, r3, #4
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7ff faf8 	bl	80084dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008eec:	bf00      	nop
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <LL_ADC_IsEnabled>:
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d101      	bne.n	8008f0c <LL_ADC_IsEnabled+0x18>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <LL_ADC_IsEnabled+0x1a>
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <LL_ADC_REG_IsConversionOngoing>:
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 0304 	and.w	r3, r3, #4
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d101      	bne.n	8008f32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008f40:	b590      	push	{r4, r7, lr}
 8008f42:	b0a1      	sub	sp, #132	; 0x84
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e093      	b.n	8009086 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8008f66:	2300      	movs	r3, #0
 8008f68:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a47      	ldr	r2, [pc, #284]	; (8009090 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d102      	bne.n	8008f7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008f78:	4b46      	ldr	r3, [pc, #280]	; (8009094 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	e001      	b.n	8008f82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8c:	f043 0220 	orr.w	r2, r3, #32
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e072      	b.n	8009086 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff ffb9 	bl	8008f1a <LL_ADC_REG_IsConversionOngoing>
 8008fa8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff ffb3 	bl	8008f1a <LL_ADC_REG_IsConversionOngoing>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d154      	bne.n	8009064 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d151      	bne.n	8009064 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008fc0:	4b35      	ldr	r3, [pc, #212]	; (8009098 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8008fc2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d02c      	beq.n	8009026 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	6859      	ldr	r1, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fde:	035b      	lsls	r3, r3, #13
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fe6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fe8:	4829      	ldr	r0, [pc, #164]	; (8009090 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8008fea:	f7ff ff83 	bl	8008ef4 <LL_ADC_IsEnabled>
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4828      	ldr	r0, [pc, #160]	; (8009094 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008ff2:	f7ff ff7f 	bl	8008ef4 <LL_ADC_IsEnabled>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	431c      	orrs	r4, r3
 8008ffa:	4828      	ldr	r0, [pc, #160]	; (800909c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8008ffc:	f7ff ff7a 	bl	8008ef4 <LL_ADC_IsEnabled>
 8009000:	4603      	mov	r3, r0
 8009002:	4323      	orrs	r3, r4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d137      	bne.n	8009078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009010:	f023 030f 	bic.w	r3, r3, #15
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	6811      	ldr	r1, [r2, #0]
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	6892      	ldr	r2, [r2, #8]
 800901c:	430a      	orrs	r2, r1
 800901e:	431a      	orrs	r2, r3
 8009020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009022:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009024:	e028      	b.n	8009078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800902e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009030:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009032:	4817      	ldr	r0, [pc, #92]	; (8009090 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009034:	f7ff ff5e 	bl	8008ef4 <LL_ADC_IsEnabled>
 8009038:	4604      	mov	r4, r0
 800903a:	4816      	ldr	r0, [pc, #88]	; (8009094 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800903c:	f7ff ff5a 	bl	8008ef4 <LL_ADC_IsEnabled>
 8009040:	4603      	mov	r3, r0
 8009042:	431c      	orrs	r4, r3
 8009044:	4815      	ldr	r0, [pc, #84]	; (800909c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009046:	f7ff ff55 	bl	8008ef4 <LL_ADC_IsEnabled>
 800904a:	4603      	mov	r3, r0
 800904c:	4323      	orrs	r3, r4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d112      	bne.n	8009078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800905a:	f023 030f 	bic.w	r3, r3, #15
 800905e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009060:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009062:	e009      	b.n	8009078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009068:	f043 0220 	orr.w	r2, r3, #32
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009076:	e000      	b.n	800907a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009078:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8009082:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009086:	4618      	mov	r0, r3
 8009088:	3784      	adds	r7, #132	; 0x84
 800908a:	46bd      	mov	sp, r7
 800908c:	bd90      	pop	{r4, r7, pc}
 800908e:	bf00      	nop
 8009090:	50040000 	.word	0x50040000
 8009094:	50040100 	.word	0x50040100
 8009098:	50040300 	.word	0x50040300
 800909c:	50040200 	.word	0x50040200

080090a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090b0:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <__NVIC_SetPriorityGrouping+0x44>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090bc:	4013      	ands	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090d2:	4a04      	ldr	r2, [pc, #16]	; (80090e4 <__NVIC_SetPriorityGrouping+0x44>)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	60d3      	str	r3, [r2, #12]
}
 80090d8:	bf00      	nop
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	e000ed00 	.word	0xe000ed00

080090e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <__NVIC_GetPriorityGrouping+0x18>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	0a1b      	lsrs	r3, r3, #8
 80090f2:	f003 0307 	and.w	r3, r3, #7
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	e000ed00 	.word	0xe000ed00

08009104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800910e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	db0b      	blt.n	800912e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	f003 021f 	and.w	r2, r3, #31
 800911c:	4907      	ldr	r1, [pc, #28]	; (800913c <__NVIC_EnableIRQ+0x38>)
 800911e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	2001      	movs	r0, #1
 8009126:	fa00 f202 	lsl.w	r2, r0, r2
 800912a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	e000e100 	.word	0xe000e100

08009140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800914c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009150:	2b00      	cmp	r3, #0
 8009152:	db0a      	blt.n	800916a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	b2da      	uxtb	r2, r3
 8009158:	490c      	ldr	r1, [pc, #48]	; (800918c <__NVIC_SetPriority+0x4c>)
 800915a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915e:	0112      	lsls	r2, r2, #4
 8009160:	b2d2      	uxtb	r2, r2
 8009162:	440b      	add	r3, r1
 8009164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009168:	e00a      	b.n	8009180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	b2da      	uxtb	r2, r3
 800916e:	4908      	ldr	r1, [pc, #32]	; (8009190 <__NVIC_SetPriority+0x50>)
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	3b04      	subs	r3, #4
 8009178:	0112      	lsls	r2, r2, #4
 800917a:	b2d2      	uxtb	r2, r2
 800917c:	440b      	add	r3, r1
 800917e:	761a      	strb	r2, [r3, #24]
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	e000e100 	.word	0xe000e100
 8009190:	e000ed00 	.word	0xe000ed00

08009194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009194:	b480      	push	{r7}
 8009196:	b089      	sub	sp, #36	; 0x24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f1c3 0307 	rsb	r3, r3, #7
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	bf28      	it	cs
 80091b2:	2304      	movcs	r3, #4
 80091b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	3304      	adds	r3, #4
 80091ba:	2b06      	cmp	r3, #6
 80091bc:	d902      	bls.n	80091c4 <NVIC_EncodePriority+0x30>
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	3b03      	subs	r3, #3
 80091c2:	e000      	b.n	80091c6 <NVIC_EncodePriority+0x32>
 80091c4:	2300      	movs	r3, #0
 80091c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091c8:	f04f 32ff 	mov.w	r2, #4294967295
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	43da      	mvns	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	401a      	ands	r2, r3
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091dc:	f04f 31ff 	mov.w	r1, #4294967295
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	fa01 f303 	lsl.w	r3, r1, r3
 80091e6:	43d9      	mvns	r1, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091ec:	4313      	orrs	r3, r2
         );
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3724      	adds	r7, #36	; 0x24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff ff4c 	bl	80090a0 <__NVIC_SetPriorityGrouping>
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800921e:	2300      	movs	r3, #0
 8009220:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009222:	f7ff ff61 	bl	80090e8 <__NVIC_GetPriorityGrouping>
 8009226:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	6978      	ldr	r0, [r7, #20]
 800922e:	f7ff ffb1 	bl	8009194 <NVIC_EncodePriority>
 8009232:	4602      	mov	r2, r0
 8009234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff ff80 	bl	8009140 <__NVIC_SetPriority>
}
 8009240:	bf00      	nop
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ff54 	bl	8009104 <__NVIC_EnableIRQ>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e014      	b.n	80092a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	791b      	ldrb	r3, [r3, #4]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d105      	bne.n	800928c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fd fcc2 	bl	8006c10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	795b      	ldrb	r3, [r3, #5]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_DAC_Start_DMA+0x1e>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e0ab      	b.n	800941e <HAL_DAC_Start_DMA+0x176>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2202      	movs	r2, #2
 80092d0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d12f      	bne.n	8009338 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	4a52      	ldr	r2, [pc, #328]	; (8009428 <HAL_DAC_Start_DMA+0x180>)
 80092de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	4a51      	ldr	r2, [pc, #324]	; (800942c <HAL_DAC_Start_DMA+0x184>)
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	4a50      	ldr	r2, [pc, #320]	; (8009430 <HAL_DAC_Start_DMA+0x188>)
 80092ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092fe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2b08      	cmp	r3, #8
 8009304:	d013      	beq.n	800932e <HAL_DAC_Start_DMA+0x86>
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	2b08      	cmp	r3, #8
 800930a:	d845      	bhi.n	8009398 <HAL_DAC_Start_DMA+0xf0>
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_DAC_Start_DMA+0x72>
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	2b04      	cmp	r3, #4
 8009316:	d005      	beq.n	8009324 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009318:	e03e      	b.n	8009398 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	613b      	str	r3, [r7, #16]
        break;
 8009322:	e03c      	b.n	800939e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	613b      	str	r3, [r7, #16]
        break;
 800932c:	e037      	b.n	800939e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3310      	adds	r3, #16
 8009334:	613b      	str	r3, [r7, #16]
        break;
 8009336:	e032      	b.n	800939e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	4a3d      	ldr	r2, [pc, #244]	; (8009434 <HAL_DAC_Start_DMA+0x18c>)
 800933e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	4a3c      	ldr	r2, [pc, #240]	; (8009438 <HAL_DAC_Start_DMA+0x190>)
 8009346:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4a3b      	ldr	r2, [pc, #236]	; (800943c <HAL_DAC_Start_DMA+0x194>)
 800934e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800935e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	2b08      	cmp	r3, #8
 8009364:	d013      	beq.n	800938e <HAL_DAC_Start_DMA+0xe6>
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	2b08      	cmp	r3, #8
 800936a:	d817      	bhi.n	800939c <HAL_DAC_Start_DMA+0xf4>
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_DAC_Start_DMA+0xd2>
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	2b04      	cmp	r3, #4
 8009376:	d005      	beq.n	8009384 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009378:	e010      	b.n	800939c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3314      	adds	r3, #20
 8009380:	613b      	str	r3, [r7, #16]
        break;
 8009382:	e00c      	b.n	800939e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3318      	adds	r3, #24
 800938a:	613b      	str	r3, [r7, #16]
        break;
 800938c:	e007      	b.n	800939e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	331c      	adds	r3, #28
 8009394:	613b      	str	r3, [r7, #16]
        break;
 8009396:	e002      	b.n	800939e <HAL_DAC_Start_DMA+0xf6>
        break;
 8009398:	bf00      	nop
 800939a:	e000      	b.n	800939e <HAL_DAC_Start_DMA+0xf6>
        break;
 800939c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d111      	bne.n	80093c8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6898      	ldr	r0, [r3, #8]
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	f000 fb27 	bl	8009a10 <HAL_DMA_Start_IT>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]
 80093c6:	e010      	b.n	80093ea <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80093d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68d8      	ldr	r0, [r3, #12]
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	f000 fb15 	bl	8009a10 <HAL_DMA_Start_IT>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10c      	bne.n	8009410 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6819      	ldr	r1, [r3, #0]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f003 0310 	and.w	r3, r3, #16
 8009402:	2201      	movs	r2, #1
 8009404:	409a      	lsls	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	e005      	b.n	800941c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	f043 0204 	orr.w	r2, r3, #4
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	08009779 	.word	0x08009779
 800942c:	0800979b 	.word	0x0800979b
 8009430:	080097b7 	.word	0x080097b7
 8009434:	08009835 	.word	0x08009835
 8009438:	08009857 	.word	0x08009857
 800943c:	08009873 	.word	0x08009873

08009440 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009456:	d120      	bne.n	800949a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009466:	d118      	bne.n	800949a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2204      	movs	r2, #4
 800946c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f043 0201 	orr.w	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009492:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f84b 	bl	8009530 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a8:	d120      	bne.n	80094ec <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b8:	d118      	bne.n	80094ec <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2204      	movs	r2, #4
 80094be:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f043 0202 	orr.w	r2, r3, #2
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80094d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80094e4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f99a 	bl	8009820 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	795b      	ldrb	r3, [r3, #5]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d101      	bne.n	8009560 <HAL_DAC_ConfigChannel+0x1c>
 800955c:	2302      	movs	r3, #2
 800955e:	e107      	b.n	8009770 <HAL_DAC_ConfigChannel+0x22c>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2202      	movs	r2, #2
 800956a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b04      	cmp	r3, #4
 8009572:	d174      	bne.n	800965e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009574:	f7fe fabe 	bl	8007af4 <HAL_GetTick>
 8009578:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d134      	bne.n	80095ea <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009580:	e011      	b.n	80095a6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009582:	f7fe fab7 	bl	8007af4 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	d90a      	bls.n	80095a6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	f043 0208 	orr.w	r2, r3, #8
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2203      	movs	r2, #3
 80095a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e0e4      	b.n	8009770 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7fe faa9 	bl	8007b0c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	6992      	ldr	r2, [r2, #24]
 80095c2:	641a      	str	r2, [r3, #64]	; 0x40
 80095c4:	e01e      	b.n	8009604 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80095c6:	f7fe fa95 	bl	8007af4 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d90a      	bls.n	80095ea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	f043 0208 	orr.w	r2, r3, #8
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2203      	movs	r2, #3
 80095e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e0c2      	b.n	8009770 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dbe8      	blt.n	80095c6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80095f4:	2001      	movs	r0, #1
 80095f6:	f7fe fa89 	bl	8007b0c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	6992      	ldr	r2, [r2, #24]
 8009602:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f003 0310 	and.w	r3, r3, #16
 8009610:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009614:	fa01 f303 	lsl.w	r3, r1, r3
 8009618:	43db      	mvns	r3, r3
 800961a:	ea02 0103 	and.w	r1, r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	69da      	ldr	r2, [r3, #28]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	409a      	lsls	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	21ff      	movs	r1, #255	; 0xff
 8009640:	fa01 f303 	lsl.w	r3, r1, r3
 8009644:	43db      	mvns	r3, r3
 8009646:	ea02 0103 	and.w	r1, r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6a1a      	ldr	r2, [r3, #32]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	409a      	lsls	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d11d      	bne.n	80096a2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	221f      	movs	r2, #31
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	43db      	mvns	r3, r3
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	4013      	ands	r3, r2
 8009680:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f003 0310 	and.w	r3, r3, #16
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	4313      	orrs	r3, r2
 8009698:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f003 0310 	and.w	r3, r3, #16
 80096b0:	2207      	movs	r2, #7
 80096b2:	fa02 f303 	lsl.w	r3, r2, r3
 80096b6:	43db      	mvns	r3, r3
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	4013      	ands	r3, r2
 80096bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f003 0310 	and.w	r3, r3, #16
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	4313      	orrs	r3, r2
 80096e0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6819      	ldr	r1, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	43da      	mvns	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	400a      	ands	r2, r1
 8009706:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f003 0310 	and.w	r3, r3, #16
 8009716:	f640 72fc 	movw	r2, #4092	; 0xffc
 800971a:	fa02 f303 	lsl.w	r3, r2, r3
 800971e:	43db      	mvns	r3, r3
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	4013      	ands	r3, r2
 8009724:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f003 0310 	and.w	r3, r3, #16
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	fa02 f303 	lsl.w	r3, r2, r3
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	4313      	orrs	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6819      	ldr	r1, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f003 0310 	and.w	r3, r3, #16
 8009752:	22c0      	movs	r2, #192	; 0xc0
 8009754:	fa02 f303 	lsl.w	r3, r2, r3
 8009758:	43da      	mvns	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	400a      	ands	r2, r1
 8009760:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2201      	movs	r2, #1
 8009766:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7ff feb4 	bl	80094f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	711a      	strb	r2, [r3, #4]
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff fead 	bl	8009508 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	f043 0204 	orr.w	r2, r3, #4
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff fea3 	bl	800951c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2201      	movs	r2, #1
 80097da:	711a      	strb	r2, [r3, #4]
}
 80097dc:	bf00      	nop
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f7ff ffce 	bl	80097e4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	711a      	strb	r2, [r3, #4]
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff ffc7 	bl	80097f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	f043 0204 	orr.w	r2, r3, #4
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f7ff ffbd 	bl	800980c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	711a      	strb	r2, [r3, #4]
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e098      	b.n	80099e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	4b4d      	ldr	r3, [pc, #308]	; (80099f0 <HAL_DMA_Init+0x150>)
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d80f      	bhi.n	80098de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	4b4b      	ldr	r3, [pc, #300]	; (80099f4 <HAL_DMA_Init+0x154>)
 80098c6:	4413      	add	r3, r2
 80098c8:	4a4b      	ldr	r2, [pc, #300]	; (80099f8 <HAL_DMA_Init+0x158>)
 80098ca:	fba2 2303 	umull	r2, r3, r2, r3
 80098ce:	091b      	lsrs	r3, r3, #4
 80098d0:	009a      	lsls	r2, r3, #2
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a48      	ldr	r2, [pc, #288]	; (80099fc <HAL_DMA_Init+0x15c>)
 80098da:	641a      	str	r2, [r3, #64]	; 0x40
 80098dc:	e00e      	b.n	80098fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	4b46      	ldr	r3, [pc, #280]	; (8009a00 <HAL_DMA_Init+0x160>)
 80098e6:	4413      	add	r3, r2
 80098e8:	4a43      	ldr	r2, [pc, #268]	; (80099f8 <HAL_DMA_Init+0x158>)
 80098ea:	fba2 2303 	umull	r2, r3, r2, r3
 80098ee:	091b      	lsrs	r3, r3, #4
 80098f0:	009a      	lsls	r2, r3, #2
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a42      	ldr	r2, [pc, #264]	; (8009a04 <HAL_DMA_Init+0x164>)
 80098fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009916:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800992c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4313      	orrs	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009956:	d039      	beq.n	80099cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995c:	4a27      	ldr	r2, [pc, #156]	; (80099fc <HAL_DMA_Init+0x15c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d11a      	bne.n	8009998 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009962:	4b29      	ldr	r3, [pc, #164]	; (8009a08 <HAL_DMA_Init+0x168>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996a:	f003 031c 	and.w	r3, r3, #28
 800996e:	210f      	movs	r1, #15
 8009970:	fa01 f303 	lsl.w	r3, r1, r3
 8009974:	43db      	mvns	r3, r3
 8009976:	4924      	ldr	r1, [pc, #144]	; (8009a08 <HAL_DMA_Init+0x168>)
 8009978:	4013      	ands	r3, r2
 800997a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800997c:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <HAL_DMA_Init+0x168>)
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6859      	ldr	r1, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009988:	f003 031c 	and.w	r3, r3, #28
 800998c:	fa01 f303 	lsl.w	r3, r1, r3
 8009990:	491d      	ldr	r1, [pc, #116]	; (8009a08 <HAL_DMA_Init+0x168>)
 8009992:	4313      	orrs	r3, r2
 8009994:	600b      	str	r3, [r1, #0]
 8009996:	e019      	b.n	80099cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009998:	4b1c      	ldr	r3, [pc, #112]	; (8009a0c <HAL_DMA_Init+0x16c>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a0:	f003 031c 	and.w	r3, r3, #28
 80099a4:	210f      	movs	r1, #15
 80099a6:	fa01 f303 	lsl.w	r3, r1, r3
 80099aa:	43db      	mvns	r3, r3
 80099ac:	4917      	ldr	r1, [pc, #92]	; (8009a0c <HAL_DMA_Init+0x16c>)
 80099ae:	4013      	ands	r3, r2
 80099b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <HAL_DMA_Init+0x16c>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6859      	ldr	r1, [r3, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099be:	f003 031c 	and.w	r3, r3, #28
 80099c2:	fa01 f303 	lsl.w	r3, r1, r3
 80099c6:	4911      	ldr	r1, [pc, #68]	; (8009a0c <HAL_DMA_Init+0x16c>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	40020407 	.word	0x40020407
 80099f4:	bffdfff8 	.word	0xbffdfff8
 80099f8:	cccccccd 	.word	0xcccccccd
 80099fc:	40020000 	.word	0x40020000
 8009a00:	bffdfbf8 	.word	0xbffdfbf8
 8009a04:	40020400 	.word	0x40020400
 8009a08:	400200a8 	.word	0x400200a8
 8009a0c:	400204a8 	.word	0x400204a8

08009a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d101      	bne.n	8009a30 <HAL_DMA_Start_IT+0x20>
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e04b      	b.n	8009ac8 <HAL_DMA_Start_IT+0xb8>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d13a      	bne.n	8009aba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f022 0201 	bic.w	r2, r2, #1
 8009a60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	68b9      	ldr	r1, [r7, #8]
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 f95f 	bl	8009d2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d008      	beq.n	8009a88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f042 020e 	orr.w	r2, r2, #14
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	e00f      	b.n	8009aa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f022 0204 	bic.w	r2, r2, #4
 8009a96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 020a 	orr.w	r2, r2, #10
 8009aa6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	e005      	b.n	8009ac6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d008      	beq.n	8009afa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2204      	movs	r2, #4
 8009aec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e022      	b.n	8009b40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 020e 	bic.w	r2, r2, #14
 8009b08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0201 	bic.w	r2, r2, #1
 8009b18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1e:	f003 021c 	and.w	r2, r3, #28
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	2101      	movs	r1, #1
 8009b28:	fa01 f202 	lsl.w	r2, r1, r2
 8009b2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d005      	beq.n	8009b70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2204      	movs	r2, #4
 8009b68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	73fb      	strb	r3, [r7, #15]
 8009b6e:	e029      	b.n	8009bc4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 020e 	bic.w	r2, r2, #14
 8009b7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0201 	bic.w	r2, r2, #1
 8009b8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b94:	f003 021c 	and.w	r2, r3, #28
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8009ba2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
    }
  }
  return status;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	f003 031c 	and.w	r3, r3, #28
 8009bee:	2204      	movs	r2, #4
 8009bf0:	409a      	lsls	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d026      	beq.n	8009c48 <HAL_DMA_IRQHandler+0x7a>
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f003 0304 	and.w	r3, r3, #4
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d021      	beq.n	8009c48 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d107      	bne.n	8009c22 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0204 	bic.w	r2, r2, #4
 8009c20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c26:	f003 021c 	and.w	r2, r3, #28
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	2104      	movs	r1, #4
 8009c30:	fa01 f202 	lsl.w	r2, r1, r2
 8009c34:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d071      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009c46:	e06c      	b.n	8009d22 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4c:	f003 031c 	and.w	r3, r3, #28
 8009c50:	2202      	movs	r2, #2
 8009c52:	409a      	lsls	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d02e      	beq.n	8009cba <HAL_DMA_IRQHandler+0xec>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d029      	beq.n	8009cba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 020a 	bic.w	r2, r2, #10
 8009c82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c90:	f003 021c 	and.w	r2, r3, #28
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c98:	2102      	movs	r1, #2
 8009c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d038      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009cb8:	e033      	b.n	8009d22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cbe:	f003 031c 	and.w	r3, r3, #28
 8009cc2:	2208      	movs	r2, #8
 8009cc4:	409a      	lsls	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d02a      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x156>
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0308 	and.w	r3, r3, #8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d025      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 020e 	bic.w	r2, r2, #14
 8009ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cec:	f003 021c 	and.w	r2, r3, #28
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8009cfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
}
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3e:	f003 021c 	and.w	r2, r3, #28
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	2101      	movs	r1, #1
 8009d48:	fa01 f202 	lsl.w	r2, r1, r2
 8009d4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b10      	cmp	r3, #16
 8009d5c:	d108      	bne.n	8009d70 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009d6e:	e007      	b.n	8009d80 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	60da      	str	r2, [r3, #12]
}
 8009d80:	bf00      	nop
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d9a:	e166      	b.n	800a06a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	2101      	movs	r1, #1
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	fa01 f303 	lsl.w	r3, r1, r3
 8009da8:	4013      	ands	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 8158 	beq.w	800a064 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d00b      	beq.n	8009dd4 <HAL_GPIO_Init+0x48>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d007      	beq.n	8009dd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009dc8:	2b11      	cmp	r3, #17
 8009dca:	d003      	beq.n	8009dd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	2b12      	cmp	r3, #18
 8009dd2:	d130      	bne.n	8009e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	005b      	lsls	r3, r3, #1
 8009dde:	2203      	movs	r2, #3
 8009de0:	fa02 f303 	lsl.w	r3, r2, r3
 8009de4:	43db      	mvns	r3, r3
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4013      	ands	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	005b      	lsls	r3, r3, #1
 8009df4:	fa02 f303 	lsl.w	r3, r2, r3
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	43db      	mvns	r3, r3
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	4013      	ands	r3, r2
 8009e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	091b      	lsrs	r3, r3, #4
 8009e20:	f003 0201 	and.w	r2, r3, #1
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	2203      	movs	r2, #3
 8009e42:	fa02 f303 	lsl.w	r3, r2, r3
 8009e46:	43db      	mvns	r3, r3
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d003      	beq.n	8009e76 <HAL_GPIO_Init+0xea>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2b12      	cmp	r3, #18
 8009e74:	d123      	bne.n	8009ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	08da      	lsrs	r2, r3, #3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3208      	adds	r2, #8
 8009e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	220f      	movs	r2, #15
 8009e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e92:	43db      	mvns	r3, r3
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	4013      	ands	r3, r2
 8009e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	08da      	lsrs	r2, r3, #3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3208      	adds	r2, #8
 8009eb8:	6939      	ldr	r1, [r7, #16]
 8009eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	005b      	lsls	r3, r3, #1
 8009ec8:	2203      	movs	r2, #3
 8009eca:	fa02 f303 	lsl.w	r3, r2, r3
 8009ece:	43db      	mvns	r3, r3
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f003 0203 	and.w	r2, r3, #3
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	005b      	lsls	r3, r3, #1
 8009ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 80b2 	beq.w	800a064 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f00:	4b61      	ldr	r3, [pc, #388]	; (800a088 <HAL_GPIO_Init+0x2fc>)
 8009f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f04:	4a60      	ldr	r2, [pc, #384]	; (800a088 <HAL_GPIO_Init+0x2fc>)
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	6613      	str	r3, [r2, #96]	; 0x60
 8009f0c:	4b5e      	ldr	r3, [pc, #376]	; (800a088 <HAL_GPIO_Init+0x2fc>)
 8009f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009f18:	4a5c      	ldr	r2, [pc, #368]	; (800a08c <HAL_GPIO_Init+0x300>)
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	089b      	lsrs	r3, r3, #2
 8009f1e:	3302      	adds	r3, #2
 8009f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f003 0303 	and.w	r3, r3, #3
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	220f      	movs	r2, #15
 8009f30:	fa02 f303 	lsl.w	r3, r2, r3
 8009f34:	43db      	mvns	r3, r3
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4013      	ands	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009f42:	d02b      	beq.n	8009f9c <HAL_GPIO_Init+0x210>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a52      	ldr	r2, [pc, #328]	; (800a090 <HAL_GPIO_Init+0x304>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d025      	beq.n	8009f98 <HAL_GPIO_Init+0x20c>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a51      	ldr	r2, [pc, #324]	; (800a094 <HAL_GPIO_Init+0x308>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d01f      	beq.n	8009f94 <HAL_GPIO_Init+0x208>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a50      	ldr	r2, [pc, #320]	; (800a098 <HAL_GPIO_Init+0x30c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d019      	beq.n	8009f90 <HAL_GPIO_Init+0x204>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a4f      	ldr	r2, [pc, #316]	; (800a09c <HAL_GPIO_Init+0x310>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d013      	beq.n	8009f8c <HAL_GPIO_Init+0x200>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a4e      	ldr	r2, [pc, #312]	; (800a0a0 <HAL_GPIO_Init+0x314>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00d      	beq.n	8009f88 <HAL_GPIO_Init+0x1fc>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a4d      	ldr	r2, [pc, #308]	; (800a0a4 <HAL_GPIO_Init+0x318>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d007      	beq.n	8009f84 <HAL_GPIO_Init+0x1f8>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a4c      	ldr	r2, [pc, #304]	; (800a0a8 <HAL_GPIO_Init+0x31c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d101      	bne.n	8009f80 <HAL_GPIO_Init+0x1f4>
 8009f7c:	2307      	movs	r3, #7
 8009f7e:	e00e      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f80:	2308      	movs	r3, #8
 8009f82:	e00c      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f84:	2306      	movs	r3, #6
 8009f86:	e00a      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f88:	2305      	movs	r3, #5
 8009f8a:	e008      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	e006      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f90:	2303      	movs	r3, #3
 8009f92:	e004      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f94:	2302      	movs	r3, #2
 8009f96:	e002      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e000      	b.n	8009f9e <HAL_GPIO_Init+0x212>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	f002 0203 	and.w	r2, r2, #3
 8009fa4:	0092      	lsls	r2, r2, #2
 8009fa6:	4093      	lsls	r3, r2
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009fae:	4937      	ldr	r1, [pc, #220]	; (800a08c <HAL_GPIO_Init+0x300>)
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	089b      	lsrs	r3, r3, #2
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009fbc:	4b3b      	ldr	r3, [pc, #236]	; (800a0ac <HAL_GPIO_Init+0x320>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009fe0:	4a32      	ldr	r2, [pc, #200]	; (800a0ac <HAL_GPIO_Init+0x320>)
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009fe6:	4b31      	ldr	r3, [pc, #196]	; (800a0ac <HAL_GPIO_Init+0x320>)
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	43db      	mvns	r3, r3
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a00a:	4a28      	ldr	r2, [pc, #160]	; (800a0ac <HAL_GPIO_Init+0x320>)
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a010:	4b26      	ldr	r3, [pc, #152]	; (800a0ac <HAL_GPIO_Init+0x320>)
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	43db      	mvns	r3, r3
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4013      	ands	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a034:	4a1d      	ldr	r2, [pc, #116]	; (800a0ac <HAL_GPIO_Init+0x320>)
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a03a:	4b1c      	ldr	r3, [pc, #112]	; (800a0ac <HAL_GPIO_Init+0x320>)
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	43db      	mvns	r3, r3
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	4013      	ands	r3, r2
 800a048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a05e:	4a13      	ldr	r2, [pc, #76]	; (800a0ac <HAL_GPIO_Init+0x320>)
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3301      	adds	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	fa22 f303 	lsr.w	r3, r2, r3
 800a074:	2b00      	cmp	r3, #0
 800a076:	f47f ae91 	bne.w	8009d9c <HAL_GPIO_Init+0x10>
  }
}
 800a07a:	bf00      	nop
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	40021000 	.word	0x40021000
 800a08c:	40010000 	.word	0x40010000
 800a090:	48000400 	.word	0x48000400
 800a094:	48000800 	.word	0x48000800
 800a098:	48000c00 	.word	0x48000c00
 800a09c:	48001000 	.word	0x48001000
 800a0a0:	48001400 	.word	0x48001400
 800a0a4:	48001800 	.word	0x48001800
 800a0a8:	48001c00 	.word	0x48001c00
 800a0ac:	40010400 	.word	0x40010400

0800a0b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	887b      	ldrh	r3, [r7, #2]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
 800a0cc:	e001      	b.n	800a0d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	807b      	strh	r3, [r7, #2]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a0f0:	787b      	ldrb	r3, [r7, #1]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a0f6:	887a      	ldrh	r2, [r7, #2]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a0fc:	e002      	b.n	800a104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a0fe:	887a      	ldrh	r2, [r7, #2]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a11a:	4b08      	ldr	r3, [pc, #32]	; (800a13c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a11c:	695a      	ldr	r2, [r3, #20]
 800a11e:	88fb      	ldrh	r3, [r7, #6]
 800a120:	4013      	ands	r3, r2
 800a122:	2b00      	cmp	r3, #0
 800a124:	d006      	beq.n	800a134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a126:	4a05      	ldr	r2, [pc, #20]	; (800a13c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a128:	88fb      	ldrh	r3, [r7, #6]
 800a12a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f806 	bl	800a140 <HAL_GPIO_EXTI_Callback>
  }
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40010400 	.word	0x40010400

0800a140 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e081      	b.n	800a26c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7fc fdbb 	bl	8006cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2224      	movs	r2, #36	; 0x24
 800a186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0201 	bic.w	r2, r2, #1
 800a198:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a1a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689a      	ldr	r2, [r3, #8]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d107      	bne.n	800a1d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1cc:	609a      	str	r2, [r3, #8]
 800a1ce:	e006      	b.n	800a1de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a1dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d104      	bne.n	800a1f0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	6812      	ldr	r2, [r2, #0]
 800a1fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a1fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a202:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a212:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	ea42 0103 	orr.w	r1, r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	021a      	lsls	r2, r3, #8
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	69d9      	ldr	r1, [r3, #28]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1a      	ldr	r2, [r3, #32]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2220      	movs	r2, #32
 800a258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af02      	add	r7, sp, #8
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	607a      	str	r2, [r7, #4]
 800a27e:	461a      	mov	r2, r3
 800a280:	460b      	mov	r3, r1
 800a282:	817b      	strh	r3, [r7, #10]
 800a284:	4613      	mov	r3, r2
 800a286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b20      	cmp	r3, #32
 800a292:	f040 80da 	bne.w	800a44a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d101      	bne.n	800a2a4 <HAL_I2C_Master_Transmit+0x30>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	e0d3      	b.n	800a44c <HAL_I2C_Master_Transmit+0x1d8>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a2ac:	f7fd fc22 	bl	8007af4 <HAL_GetTick>
 800a2b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	2319      	movs	r3, #25
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f9e6 	bl	800a690 <I2C_WaitOnFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e0be      	b.n	800a44c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2221      	movs	r2, #33	; 0x21
 800a2d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2210      	movs	r2, #16
 800a2da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	893a      	ldrh	r2, [r7, #8]
 800a2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	2bff      	cmp	r3, #255	; 0xff
 800a2fe:	d90e      	bls.n	800a31e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	22ff      	movs	r2, #255	; 0xff
 800a304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	8979      	ldrh	r1, [r7, #10]
 800a30e:	4b51      	ldr	r3, [pc, #324]	; (800a454 <HAL_I2C_Master_Transmit+0x1e0>)
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 fb48 	bl	800a9ac <I2C_TransferConfig>
 800a31c:	e06c      	b.n	800a3f8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a322:	b29a      	uxth	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	8979      	ldrh	r1, [r7, #10]
 800a330:	4b48      	ldr	r3, [pc, #288]	; (800a454 <HAL_I2C_Master_Transmit+0x1e0>)
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 fb37 	bl	800a9ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a33e:	e05b      	b.n	800a3f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	6a39      	ldr	r1, [r7, #32]
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 f9e3 	bl	800a710 <I2C_WaitOnTXISFlagUntilTimeout>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e07b      	b.n	800a44c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	781a      	ldrb	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36e:	b29b      	uxth	r3, r3
 800a370:	3b01      	subs	r3, #1
 800a372:	b29a      	uxth	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a388:	b29b      	uxth	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d034      	beq.n	800a3f8 <HAL_I2C_Master_Transmit+0x184>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a392:	2b00      	cmp	r3, #0
 800a394:	d130      	bne.n	800a3f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	2200      	movs	r2, #0
 800a39e:	2180      	movs	r1, #128	; 0x80
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f975 	bl	800a690 <I2C_WaitOnFlagUntilTimeout>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e04d      	b.n	800a44c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2bff      	cmp	r3, #255	; 0xff
 800a3b8:	d90e      	bls.n	800a3d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	22ff      	movs	r2, #255	; 0xff
 800a3be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	8979      	ldrh	r1, [r7, #10]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 faeb 	bl	800a9ac <I2C_TransferConfig>
 800a3d6:	e00f      	b.n	800a3f8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	8979      	ldrh	r1, [r7, #10]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fada 	bl	800a9ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d19e      	bne.n	800a340 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	6a39      	ldr	r1, [r7, #32]
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 f9c2 	bl	800a790 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e01a      	b.n	800a44c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2220      	movs	r2, #32
 800a41c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6859      	ldr	r1, [r3, #4]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <HAL_I2C_Master_Transmit+0x1e4>)
 800a42a:	400b      	ands	r3, r1
 800a42c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2220      	movs	r2, #32
 800a432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	e000      	b.n	800a44c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a44a:	2302      	movs	r3, #2
  }
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	80002000 	.word	0x80002000
 800a458:	fe00e800 	.word	0xfe00e800

0800a45c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b088      	sub	sp, #32
 800a460:	af02      	add	r7, sp, #8
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	607a      	str	r2, [r7, #4]
 800a466:	461a      	mov	r2, r3
 800a468:	460b      	mov	r3, r1
 800a46a:	817b      	strh	r3, [r7, #10]
 800a46c:	4613      	mov	r3, r2
 800a46e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b20      	cmp	r3, #32
 800a47a:	f040 80db 	bne.w	800a634 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a484:	2b01      	cmp	r3, #1
 800a486:	d101      	bne.n	800a48c <HAL_I2C_Master_Receive+0x30>
 800a488:	2302      	movs	r3, #2
 800a48a:	e0d4      	b.n	800a636 <HAL_I2C_Master_Receive+0x1da>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a494:	f7fd fb2e 	bl	8007af4 <HAL_GetTick>
 800a498:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	2319      	movs	r3, #25
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f8f2 	bl	800a690 <I2C_WaitOnFlagUntilTimeout>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e0bf      	b.n	800a636 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2222      	movs	r2, #34	; 0x22
 800a4ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2210      	movs	r2, #16
 800a4c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	893a      	ldrh	r2, [r7, #8]
 800a4d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	2bff      	cmp	r3, #255	; 0xff
 800a4e6:	d90e      	bls.n	800a506 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	22ff      	movs	r2, #255	; 0xff
 800a4ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	8979      	ldrh	r1, [r7, #10]
 800a4f6:	4b52      	ldr	r3, [pc, #328]	; (800a640 <HAL_I2C_Master_Receive+0x1e4>)
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 fa54 	bl	800a9ac <I2C_TransferConfig>
 800a504:	e06d      	b.n	800a5e2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a514:	b2da      	uxtb	r2, r3
 800a516:	8979      	ldrh	r1, [r7, #10]
 800a518:	4b49      	ldr	r3, [pc, #292]	; (800a640 <HAL_I2C_Master_Receive+0x1e4>)
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 fa43 	bl	800a9ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a526:	e05c      	b.n	800a5e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	6a39      	ldr	r1, [r7, #32]
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 f96b 	bl	800a808 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e07c      	b.n	800a636 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a558:	3b01      	subs	r3, #1
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a564:	b29b      	uxth	r3, r3
 800a566:	3b01      	subs	r3, #1
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d034      	beq.n	800a5e2 <HAL_I2C_Master_Receive+0x186>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d130      	bne.n	800a5e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	2200      	movs	r2, #0
 800a588:	2180      	movs	r1, #128	; 0x80
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f880 	bl	800a690 <I2C_WaitOnFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e04d      	b.n	800a636 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	2bff      	cmp	r3, #255	; 0xff
 800a5a2:	d90e      	bls.n	800a5c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	22ff      	movs	r2, #255	; 0xff
 800a5a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	8979      	ldrh	r1, [r7, #10]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 f9f6 	bl	800a9ac <I2C_TransferConfig>
 800a5c0:	e00f      	b.n	800a5e2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	8979      	ldrh	r1, [r7, #10]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f000 f9e5 	bl	800a9ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d19d      	bne.n	800a528 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	6a39      	ldr	r1, [r7, #32]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f8cd 	bl	800a790 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e01a      	b.n	800a636 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2220      	movs	r2, #32
 800a606:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6859      	ldr	r1, [r3, #4]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <HAL_I2C_Master_Receive+0x1e8>)
 800a614:	400b      	ands	r3, r1
 800a616:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	e000      	b.n	800a636 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a634:	2302      	movs	r3, #2
  }
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	80002400 	.word	0x80002400
 800a644:	fe00e800 	.word	0xfe00e800

0800a648 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d103      	bne.n	800a666 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b01      	cmp	r3, #1
 800a672:	d007      	beq.n	800a684 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699a      	ldr	r2, [r3, #24]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f042 0201 	orr.w	r2, r2, #1
 800a682:	619a      	str	r2, [r3, #24]
  }
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	603b      	str	r3, [r7, #0]
 800a69c:	4613      	mov	r3, r2
 800a69e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6a0:	e022      	b.n	800a6e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d01e      	beq.n	800a6e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6aa:	f7fd fa23 	bl	8007af4 <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d302      	bcc.n	800a6c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d113      	bne.n	800a6e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c4:	f043 0220 	orr.w	r2, r3, #32
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e00f      	b.n	800a708 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	bf0c      	ite	eq
 800a6f8:	2301      	moveq	r3, #1
 800a6fa:	2300      	movne	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	79fb      	ldrb	r3, [r7, #7]
 800a702:	429a      	cmp	r2, r3
 800a704:	d0cd      	beq.n	800a6a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a71c:	e02c      	b.n	800a778 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	68b9      	ldr	r1, [r7, #8]
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 f8dc 	bl	800a8e0 <I2C_IsAcknowledgeFailed>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e02a      	b.n	800a788 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d01e      	beq.n	800a778 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a73a:	f7fd f9db 	bl	8007af4 <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	429a      	cmp	r2, r3
 800a748:	d302      	bcc.n	800a750 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d113      	bne.n	800a778 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a754:	f043 0220 	orr.w	r2, r3, #32
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2220      	movs	r2, #32
 800a760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e007      	b.n	800a788 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b02      	cmp	r3, #2
 800a784:	d1cb      	bne.n	800a71e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a79c:	e028      	b.n	800a7f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	68b9      	ldr	r1, [r7, #8]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 f89c 	bl	800a8e0 <I2C_IsAcknowledgeFailed>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e026      	b.n	800a800 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7b2:	f7fd f99f 	bl	8007af4 <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d302      	bcc.n	800a7c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d113      	bne.n	800a7f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7cc:	f043 0220 	orr.w	r2, r3, #32
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e007      	b.n	800a800 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	f003 0320 	and.w	r3, r3, #32
 800a7fa:	2b20      	cmp	r3, #32
 800a7fc:	d1cf      	bne.n	800a79e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a814:	e055      	b.n	800a8c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 f860 	bl	800a8e0 <I2C_IsAcknowledgeFailed>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e053      	b.n	800a8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	f003 0320 	and.w	r3, r3, #32
 800a834:	2b20      	cmp	r3, #32
 800a836:	d129      	bne.n	800a88c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	f003 0304 	and.w	r3, r3, #4
 800a842:	2b04      	cmp	r3, #4
 800a844:	d105      	bne.n	800a852 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	e03f      	b.n	800a8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2220      	movs	r2, #32
 800a858:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6859      	ldr	r1, [r3, #4]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	4b1d      	ldr	r3, [pc, #116]	; (800a8dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a866:	400b      	ands	r3, r1
 800a868:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2220      	movs	r2, #32
 800a874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e022      	b.n	800a8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a88c:	f7fd f932 	bl	8007af4 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d302      	bcc.n	800a8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10f      	bne.n	800a8c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a6:	f043 0220 	orr.w	r2, r3, #32
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e007      	b.n	800a8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b04      	cmp	r3, #4
 800a8ce:	d1a2      	bne.n	800a816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	fe00e800 	.word	0xfe00e800

0800a8e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	f003 0310 	and.w	r3, r3, #16
 800a8f6:	2b10      	cmp	r3, #16
 800a8f8:	d151      	bne.n	800a99e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8fa:	e022      	b.n	800a942 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a902:	d01e      	beq.n	800a942 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a904:	f7fd f8f6 	bl	8007af4 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	429a      	cmp	r2, r3
 800a912:	d302      	bcc.n	800a91a <I2C_IsAcknowledgeFailed+0x3a>
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d113      	bne.n	800a942 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91e:	f043 0220 	orr.w	r2, r3, #32
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2220      	movs	r2, #32
 800a92a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e02e      	b.n	800a9a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	f003 0320 	and.w	r3, r3, #32
 800a94c:	2b20      	cmp	r3, #32
 800a94e:	d1d5      	bne.n	800a8fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2210      	movs	r2, #16
 800a956:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2220      	movs	r2, #32
 800a95e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7ff fe71 	bl	800a648 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6859      	ldr	r1, [r3, #4]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	4b0d      	ldr	r3, [pc, #52]	; (800a9a8 <I2C_IsAcknowledgeFailed+0xc8>)
 800a972:	400b      	ands	r3, r1
 800a974:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97a:	f043 0204 	orr.w	r2, r3, #4
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2220      	movs	r2, #32
 800a986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e000      	b.n	800a9a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	fe00e800 	.word	0xfe00e800

0800a9ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	607b      	str	r3, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	817b      	strh	r3, [r7, #10]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	0d5b      	lsrs	r3, r3, #21
 800a9c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <I2C_TransferConfig+0x58>)
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	ea02 0103 	and.w	r1, r2, r3
 800a9d6:	897b      	ldrh	r3, [r7, #10]
 800a9d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a9dc:	7a7b      	ldrb	r3, [r7, #9]
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	03ff63ff 	.word	0x03ff63ff

0800aa08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b20      	cmp	r3, #32
 800aa1c:	d138      	bne.n	800aa90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d101      	bne.n	800aa2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e032      	b.n	800aa92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2224      	movs	r2, #36	; 0x24
 800aa38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0201 	bic.w	r2, r2, #1
 800aa4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6819      	ldr	r1, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f042 0201 	orr.w	r2, r2, #1
 800aa7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e000      	b.n	800aa92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa90:	2302      	movs	r3, #2
  }
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b085      	sub	sp, #20
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b20      	cmp	r3, #32
 800aab2:	d139      	bne.n	800ab28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aabe:	2302      	movs	r3, #2
 800aac0:	e033      	b.n	800ab2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2224      	movs	r2, #36	; 0x24
 800aace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0201 	bic.w	r2, r2, #1
 800aae0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aaf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	021b      	lsls	r3, r3, #8
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0201 	orr.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e000      	b.n	800ab2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab28:	2302      	movs	r3, #2
  }
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab38:	b08f      	sub	sp, #60	; 0x3c
 800ab3a:	af0a      	add	r7, sp, #40	; 0x28
 800ab3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e116      	b.n	800ad76 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f00e fd80 	bl	8019668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f006 f921 	bl	8010dce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	603b      	str	r3, [r7, #0]
 800ab92:	687e      	ldr	r6, [r7, #4]
 800ab94:	466d      	mov	r5, sp
 800ab96:	f106 0410 	add.w	r4, r6, #16
 800ab9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aba6:	e885 0003 	stmia.w	r5, {r0, r1}
 800abaa:	1d33      	adds	r3, r6, #4
 800abac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abae:	6838      	ldr	r0, [r7, #0]
 800abb0:	f006 f833 	bl	8010c1a <USB_CoreInit>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d005      	beq.n	800abc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2202      	movs	r2, #2
 800abbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e0d7      	b.n	800ad76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2100      	movs	r1, #0
 800abcc:	4618      	mov	r0, r3
 800abce:	f006 f90f 	bl	8010df0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abd2:	2300      	movs	r3, #0
 800abd4:	73fb      	strb	r3, [r7, #15]
 800abd6:	e04a      	b.n	800ac6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800abd8:	7bfa      	ldrb	r2, [r7, #15]
 800abda:	6879      	ldr	r1, [r7, #4]
 800abdc:	4613      	mov	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	1a9b      	subs	r3, r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	333d      	adds	r3, #61	; 0x3d
 800abe8:	2201      	movs	r2, #1
 800abea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800abec:	7bfa      	ldrb	r2, [r7, #15]
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	1a9b      	subs	r3, r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	333c      	adds	r3, #60	; 0x3c
 800abfc:	7bfa      	ldrb	r2, [r7, #15]
 800abfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ac00:	7bfa      	ldrb	r2, [r7, #15]
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	b298      	uxth	r0, r3
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	1a9b      	subs	r3, r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	440b      	add	r3, r1
 800ac12:	3342      	adds	r3, #66	; 0x42
 800ac14:	4602      	mov	r2, r0
 800ac16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac18:	7bfa      	ldrb	r2, [r7, #15]
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	333f      	adds	r3, #63	; 0x3f
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac2c:	7bfa      	ldrb	r2, [r7, #15]
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	4613      	mov	r3, r2
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	1a9b      	subs	r3, r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	440b      	add	r3, r1
 800ac3a:	3344      	adds	r3, #68	; 0x44
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac40:	7bfa      	ldrb	r2, [r7, #15]
 800ac42:	6879      	ldr	r1, [r7, #4]
 800ac44:	4613      	mov	r3, r2
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	1a9b      	subs	r3, r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	440b      	add	r3, r1
 800ac4e:	3348      	adds	r3, #72	; 0x48
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac54:	7bfa      	ldrb	r2, [r7, #15]
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	1a9b      	subs	r3, r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	440b      	add	r3, r1
 800ac62:	3350      	adds	r3, #80	; 0x50
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	73fb      	strb	r3, [r7, #15]
 800ac6e:	7bfa      	ldrb	r2, [r7, #15]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3af      	bcc.n	800abd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]
 800ac7c:	e044      	b.n	800ad08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ac7e:	7bfa      	ldrb	r2, [r7, #15]
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	00db      	lsls	r3, r3, #3
 800ac86:	1a9b      	subs	r3, r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ac90:	2200      	movs	r2, #0
 800ac92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ac94:	7bfa      	ldrb	r2, [r7, #15]
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	1a9b      	subs	r3, r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	440b      	add	r3, r1
 800aca2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800aca6:	7bfa      	ldrb	r2, [r7, #15]
 800aca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800acaa:	7bfa      	ldrb	r2, [r7, #15]
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	4613      	mov	r3, r2
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	1a9b      	subs	r3, r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	440b      	add	r3, r1
 800acb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800acbc:	2200      	movs	r2, #0
 800acbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800acc0:	7bfa      	ldrb	r2, [r7, #15]
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	4613      	mov	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800acd6:	7bfa      	ldrb	r2, [r7, #15]
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	4613      	mov	r3, r2
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	1a9b      	subs	r3, r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	440b      	add	r3, r1
 800ace4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800acec:	7bfa      	ldrb	r2, [r7, #15]
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	3301      	adds	r3, #1
 800ad06:	73fb      	strb	r3, [r7, #15]
 800ad08:	7bfa      	ldrb	r2, [r7, #15]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d3b5      	bcc.n	800ac7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	603b      	str	r3, [r7, #0]
 800ad18:	687e      	ldr	r6, [r7, #4]
 800ad1a:	466d      	mov	r5, sp
 800ad1c:	f106 0410 	add.w	r4, r6, #16
 800ad20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad28:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad2c:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad30:	1d33      	adds	r3, r6, #4
 800ad32:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad34:	6838      	ldr	r0, [r7, #0]
 800ad36:	f006 f885 	bl	8010e44 <USB_DevInit>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2202      	movs	r2, #2
 800ad44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e014      	b.n	800ad76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d102      	bne.n	800ad6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 ff8f 	bl	800bc88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f007 f807 	bl	8011d82 <USB_DevDisconnect>

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <HAL_PCD_Start+0x1c>
 800ad96:	2302      	movs	r3, #2
 800ad98:	e01c      	b.n	800add4 <HAL_PCD_Start+0x56>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d105      	bne.n	800adb6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f005 fff6 	bl	8010dac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f006 ffbb 	bl	8011d40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b08d      	sub	sp, #52	; 0x34
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f007 f879 	bl	8011eea <USB_GetMode>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f040 838f 	bne.w	800b51e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f006 ffdd 	bl	8011dc4 <USB_ReadInterrupts>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 8385 	beq.w	800b51c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f006 ffd4 	bl	8011dc4 <USB_ReadInterrupts>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f003 0302 	and.w	r3, r3, #2
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d107      	bne.n	800ae36 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	695a      	ldr	r2, [r3, #20]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f002 0202 	and.w	r2, r2, #2
 800ae34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f006 ffc2 	bl	8011dc4 <USB_ReadInterrupts>
 800ae40:	4603      	mov	r3, r0
 800ae42:	f003 0310 	and.w	r3, r3, #16
 800ae46:	2b10      	cmp	r3, #16
 800ae48:	d161      	bne.n	800af0e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 0210 	bic.w	r2, r2, #16
 800ae58:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	f003 020f 	and.w	r2, r3, #15
 800ae66:	4613      	mov	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	1a9b      	subs	r3, r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	4413      	add	r3, r2
 800ae76:	3304      	adds	r3, #4
 800ae78:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	0c5b      	lsrs	r3, r3, #17
 800ae7e:	f003 030f 	and.w	r3, r3, #15
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d124      	bne.n	800aed0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d035      	beq.n	800aefe <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	091b      	lsrs	r3, r3, #4
 800ae9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ae9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	461a      	mov	r2, r3
 800aea4:	6a38      	ldr	r0, [r7, #32]
 800aea6:	f006 fe28 	bl	8011afa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	091b      	lsrs	r3, r3, #4
 800aeb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aeb6:	441a      	add	r2, r3
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	699a      	ldr	r2, [r3, #24]
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	091b      	lsrs	r3, r3, #4
 800aec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aec8:	441a      	add	r2, r3
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	619a      	str	r2, [r3, #24]
 800aece:	e016      	b.n	800aefe <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	0c5b      	lsrs	r3, r3, #17
 800aed4:	f003 030f 	and.w	r3, r3, #15
 800aed8:	2b06      	cmp	r3, #6
 800aeda:	d110      	bne.n	800aefe <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aee2:	2208      	movs	r2, #8
 800aee4:	4619      	mov	r1, r3
 800aee6:	6a38      	ldr	r0, [r7, #32]
 800aee8:	f006 fe07 	bl	8011afa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	699a      	ldr	r2, [r3, #24]
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	091b      	lsrs	r3, r3, #4
 800aef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aef8:	441a      	add	r2, r3
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	699a      	ldr	r2, [r3, #24]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f042 0210 	orr.w	r2, r2, #16
 800af0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f006 ff56 	bl	8011dc4 <USB_ReadInterrupts>
 800af18:	4603      	mov	r3, r0
 800af1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af22:	d16e      	bne.n	800b002 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f006 ff5c 	bl	8011dea <USB_ReadDevAllOutEpInterrupt>
 800af32:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800af34:	e062      	b.n	800affc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d057      	beq.n	800aff0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f006 ff81 	bl	8011e52 <USB_ReadDevOutEPInterrupt>
 800af50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f003 0301 	and.w	r3, r3, #1
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00c      	beq.n	800af76 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af68:	461a      	mov	r2, r3
 800af6a:	2301      	movs	r3, #1
 800af6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800af6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fdaf 	bl	800bad4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f003 0308 	and.w	r3, r3, #8
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00c      	beq.n	800af9a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8c:	461a      	mov	r2, r3
 800af8e:	2308      	movs	r3, #8
 800af90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800af92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fdeb 	bl	800bb70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f003 0310 	and.w	r3, r3, #16
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d008      	beq.n	800afb6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb0:	461a      	mov	r2, r3
 800afb2:	2310      	movs	r3, #16
 800afb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f003 0320 	and.w	r3, r3, #32
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d008      	beq.n	800afd2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afcc:	461a      	mov	r2, r3
 800afce:	2320      	movs	r3, #32
 800afd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d009      	beq.n	800aff0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe8:	461a      	mov	r2, r3
 800afea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	3301      	adds	r3, #1
 800aff4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	085b      	lsrs	r3, r3, #1
 800affa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	2b00      	cmp	r3, #0
 800b000:	d199      	bne.n	800af36 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4618      	mov	r0, r3
 800b008:	f006 fedc 	bl	8011dc4 <USB_ReadInterrupts>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b016:	f040 8087 	bne.w	800b128 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f006 fefd 	bl	8011e1e <USB_ReadDevAllInEpInterrupt>
 800b024:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b02a:	e07a      	b.n	800b122 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	d06f      	beq.n	800b116 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03c:	b2d2      	uxtb	r2, r2
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f006 ff24 	bl	8011e8e <USB_ReadDevInEPInterrupt>
 800b046:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d020      	beq.n	800b094 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	f003 030f 	and.w	r3, r3, #15
 800b058:	2201      	movs	r2, #1
 800b05a:	fa02 f303 	lsl.w	r3, r2, r3
 800b05e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	43db      	mvns	r3, r3
 800b06c:	69f9      	ldr	r1, [r7, #28]
 800b06e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b072:	4013      	ands	r3, r2
 800b074:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b082:	461a      	mov	r2, r3
 800b084:	2301      	movs	r3, #1
 800b086:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f00e fba9 	bl	80197e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	f003 0308 	and.w	r3, r3, #8
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d008      	beq.n	800b0b0 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f003 0310 	and.w	r3, r3, #16
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d008      	beq.n	800b0cc <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d008      	beq.n	800b0e8 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	2340      	movs	r3, #64	; 0x40
 800b0e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d008      	beq.n	800b104 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	015a      	lsls	r2, r3, #5
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fe:	461a      	mov	r2, r3
 800b100:	2302      	movs	r3, #2
 800b102:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b10e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fc56 	bl	800b9c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	3301      	adds	r3, #1
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	2b00      	cmp	r3, #0
 800b126:	d181      	bne.n	800b02c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f006 fe49 	bl	8011dc4 <USB_ReadInterrupts>
 800b132:	4603      	mov	r3, r0
 800b134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b13c:	d122      	bne.n	800b184 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	69fa      	ldr	r2, [r7, #28]
 800b148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d108      	bne.n	800b16e <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b164:	2100      	movs	r1, #0
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f00e fe96 	bl	8019e98 <HAL_PCDEx_LPM_Callback>
 800b16c:	e002      	b.n	800b174 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f00e fba6 	bl	80198c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	695a      	ldr	r2, [r3, #20]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4618      	mov	r0, r3
 800b18a:	f006 fe1b 	bl	8011dc4 <USB_ReadInterrupts>
 800b18e:	4603      	mov	r3, r0
 800b190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b198:	d112      	bne.n	800b1c0 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d102      	bne.n	800b1b0 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f00e fb62 	bl	8019874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	695a      	ldr	r2, [r3, #20]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b1be:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f006 fdfd 	bl	8011dc4 <USB_ReadInterrupts>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1d4:	d121      	bne.n	800b21a <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	695a      	ldr	r2, [r3, #20]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b1e4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d111      	bne.n	800b214 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fe:	089b      	lsrs	r3, r3, #2
 800b200:	f003 020f 	and.w	r2, r3, #15
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b20a:	2101      	movs	r1, #1
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f00e fe43 	bl	8019e98 <HAL_PCDEx_LPM_Callback>
 800b212:	e002      	b.n	800b21a <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f00e fb2d 	bl	8019874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4618      	mov	r0, r3
 800b220:	f006 fdd0 	bl	8011dc4 <USB_ReadInterrupts>
 800b224:	4603      	mov	r3, r0
 800b226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b22e:	f040 80c5 	bne.w	800b3bc <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	69fa      	ldr	r2, [r7, #28]
 800b23c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b240:	f023 0301 	bic.w	r3, r3, #1
 800b244:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2110      	movs	r1, #16
 800b24c:	4618      	mov	r0, r3
 800b24e:	f005 ff45 	bl	80110dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b252:	2300      	movs	r3, #0
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b256:	e056      	b.n	800b306 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b264:	461a      	mov	r2, r3
 800b266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b26a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b27c:	0151      	lsls	r1, r2, #5
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	440a      	add	r2, r1
 800b282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b28a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b29c:	0151      	lsls	r1, r2, #5
 800b29e:	69fa      	ldr	r2, [r7, #28]
 800b2a0:	440a      	add	r2, r1
 800b2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	015a      	lsls	r2, r3, #5
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b2de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2f0:	0151      	lsls	r1, r2, #5
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	440a      	add	r2, r1
 800b2f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	3301      	adds	r3, #1
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d3a3      	bcc.n	800b258 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	69fa      	ldr	r2, [r7, #28]
 800b31a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b31e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b322:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d016      	beq.n	800b35a <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b33c:	f043 030b 	orr.w	r3, r3, #11
 800b340:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b352:	f043 030b 	orr.w	r3, r3, #11
 800b356:	6453      	str	r3, [r2, #68]	; 0x44
 800b358:	e015      	b.n	800b386 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b368:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b36c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b370:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	69fa      	ldr	r2, [r7, #28]
 800b37c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b380:	f043 030b 	orr.w	r3, r3, #11
 800b384:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	69fa      	ldr	r2, [r7, #28]
 800b390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b394:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b398:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	f006 fdd0 	bl	8011f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	695a      	ldr	r2, [r3, #20]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b3ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f006 fcff 	bl	8011dc4 <USB_ReadInterrupts>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3d0:	d124      	bne.n	800b41c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f006 fd95 	bl	8011f06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f005 fedc 	bl	801119e <USB_GetDevSpeed>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681c      	ldr	r4, [r3, #0]
 800b3f2:	f001 faf5 	bl	800c9e0 <HAL_RCC_GetHCLKFreq>
 800b3f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	461a      	mov	r2, r3
 800b400:	4620      	mov	r0, r4
 800b402:	f005 fc37 	bl	8010c74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f00e fa15 	bl	8019836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	695a      	ldr	r2, [r3, #20]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b41a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f006 fccf 	bl	8011dc4 <USB_ReadInterrupts>
 800b426:	4603      	mov	r3, r0
 800b428:	f003 0308 	and.w	r3, r3, #8
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d10a      	bne.n	800b446 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f00e f9f2 	bl	801981a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	695a      	ldr	r2, [r3, #20]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f002 0208 	and.w	r2, r2, #8
 800b444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f006 fcba 	bl	8011dc4 <USB_ReadInterrupts>
 800b450:	4603      	mov	r3, r0
 800b452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b45a:	d10f      	bne.n	800b47c <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	b2db      	uxtb	r3, r3
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f00e fa64 	bl	8019934 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	695a      	ldr	r2, [r3, #20]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b47a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4618      	mov	r0, r3
 800b482:	f006 fc9f 	bl	8011dc4 <USB_ReadInterrupts>
 800b486:	4603      	mov	r3, r0
 800b488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b48c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b490:	d10f      	bne.n	800b4b2 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f00e fa37 	bl	8019910 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	695a      	ldr	r2, [r3, #20]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b4b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f006 fc84 	bl	8011dc4 <USB_ReadInterrupts>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c6:	d10a      	bne.n	800b4de <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f00e fa45 	bl	8019958 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	695a      	ldr	r2, [r3, #20]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b4dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f006 fc6e 	bl	8011dc4 <USB_ReadInterrupts>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f003 0304 	and.w	r3, r3, #4
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d115      	bne.n	800b51e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f00e fa35 	bl	8019974 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6859      	ldr	r1, [r3, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	69ba      	ldr	r2, [r7, #24]
 800b516:	430a      	orrs	r2, r1
 800b518:	605a      	str	r2, [r3, #4]
 800b51a:	e000      	b.n	800b51e <HAL_PCD_IRQHandler+0x742>
      return;
 800b51c:	bf00      	nop
    }
  }
}
 800b51e:	3734      	adds	r7, #52	; 0x34
 800b520:	46bd      	mov	sp, r7
 800b522:	bd90      	pop	{r4, r7, pc}

0800b524 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <HAL_PCD_SetAddress+0x1a>
 800b53a:	2302      	movs	r3, #2
 800b53c:	e013      	b.n	800b566 <HAL_PCD_SetAddress+0x42>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	78fa      	ldrb	r2, [r7, #3]
 800b54a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	78fa      	ldrb	r2, [r7, #3]
 800b554:	4611      	mov	r1, r2
 800b556:	4618      	mov	r0, r3
 800b558:	f006 fbcc 	bl	8011cf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	4608      	mov	r0, r1
 800b578:	4611      	mov	r1, r2
 800b57a:	461a      	mov	r2, r3
 800b57c:	4603      	mov	r3, r0
 800b57e:	70fb      	strb	r3, [r7, #3]
 800b580:	460b      	mov	r3, r1
 800b582:	803b      	strh	r3, [r7, #0]
 800b584:	4613      	mov	r3, r2
 800b586:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b58c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b590:	2b00      	cmp	r3, #0
 800b592:	da0f      	bge.n	800b5b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	f003 020f 	and.w	r2, r3, #15
 800b59a:	4613      	mov	r3, r2
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	1a9b      	subs	r3, r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	3338      	adds	r3, #56	; 0x38
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	705a      	strb	r2, [r3, #1]
 800b5b2:	e00f      	b.n	800b5d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	f003 020f 	and.w	r2, r3, #15
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	00db      	lsls	r3, r3, #3
 800b5be:	1a9b      	subs	r3, r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b5d4:	78fb      	ldrb	r3, [r7, #3]
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b5e0:	883a      	ldrh	r2, [r7, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	78ba      	ldrb	r2, [r7, #2]
 800b5ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	785b      	ldrb	r3, [r3, #1]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d004      	beq.n	800b5fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b5fe:	78bb      	ldrb	r3, [r7, #2]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d102      	bne.n	800b60a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b610:	2b01      	cmp	r3, #1
 800b612:	d101      	bne.n	800b618 <HAL_PCD_EP_Open+0xaa>
 800b614:	2302      	movs	r3, #2
 800b616:	e00e      	b.n	800b636 <HAL_PCD_EP_Open+0xc8>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	4618      	mov	r0, r3
 800b628:	f005 fdd8 	bl	80111dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b634:	7afb      	ldrb	r3, [r7, #11]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b084      	sub	sp, #16
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	460b      	mov	r3, r1
 800b648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b64a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	da0f      	bge.n	800b672 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b652:	78fb      	ldrb	r3, [r7, #3]
 800b654:	f003 020f 	and.w	r2, r3, #15
 800b658:	4613      	mov	r3, r2
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	1a9b      	subs	r3, r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	3338      	adds	r3, #56	; 0x38
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	4413      	add	r3, r2
 800b666:	3304      	adds	r3, #4
 800b668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	705a      	strb	r2, [r3, #1]
 800b670:	e00f      	b.n	800b692 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b672:	78fb      	ldrb	r3, [r7, #3]
 800b674:	f003 020f 	and.w	r2, r3, #15
 800b678:	4613      	mov	r3, r2
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	1a9b      	subs	r3, r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	4413      	add	r3, r2
 800b688:	3304      	adds	r3, #4
 800b68a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	f003 030f 	and.w	r3, r3, #15
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d101      	bne.n	800b6ac <HAL_PCD_EP_Close+0x6e>
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	e00e      	b.n	800b6ca <HAL_PCD_EP_Close+0x8c>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68f9      	ldr	r1, [r7, #12]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f005 fe16 	bl	80112ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b086      	sub	sp, #24
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	60f8      	str	r0, [r7, #12]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	f003 020f 	and.w	r2, r3, #15
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2200      	movs	r2, #0
 800b70c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2200      	movs	r2, #0
 800b712:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b714:	7afb      	ldrb	r3, [r7, #11]
 800b716:	f003 030f 	and.w	r3, r3, #15
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b720:	7afb      	ldrb	r3, [r7, #11]
 800b722:	f003 030f 	and.w	r3, r3, #15
 800b726:	2b00      	cmp	r3, #0
 800b728:	d106      	bne.n	800b738 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6979      	ldr	r1, [r7, #20]
 800b730:	4618      	mov	r0, r3
 800b732:	f006 f893 	bl	801185c <USB_EP0StartXfer>
 800b736:	e005      	b.n	800b744 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6979      	ldr	r1, [r7, #20]
 800b73e:	4618      	mov	r0, r3
 800b740:	f005 feb0 	bl	80114a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b74e:	b480      	push	{r7}
 800b750:	b083      	sub	sp, #12
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	f003 020f 	and.w	r2, r3, #15
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	4613      	mov	r3, r2
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	1a9b      	subs	r3, r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	440b      	add	r3, r1
 800b76c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b770:	681b      	ldr	r3, [r3, #0]
}
 800b772:	4618      	mov	r0, r3
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b086      	sub	sp, #24
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
 800b78a:	460b      	mov	r3, r1
 800b78c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b78e:	7afb      	ldrb	r3, [r7, #11]
 800b790:	f003 020f 	and.w	r2, r3, #15
 800b794:	4613      	mov	r3, r2
 800b796:	00db      	lsls	r3, r3, #3
 800b798:	1a9b      	subs	r3, r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	3338      	adds	r3, #56	; 0x38
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	f003 030f 	and.w	r3, r3, #15
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b7ca:	7afb      	ldrb	r3, [r7, #11]
 800b7cc:	f003 030f 	and.w	r3, r3, #15
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f006 f83e 	bl	801185c <USB_EP0StartXfer>
 800b7e0:	e005      	b.n	800b7ee <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6979      	ldr	r1, [r7, #20]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f005 fe5b 	bl	80114a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	f003 020f 	and.w	r2, r3, #15
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d901      	bls.n	800b816 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e04e      	b.n	800b8b4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	da0f      	bge.n	800b83e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b81e:	78fb      	ldrb	r3, [r7, #3]
 800b820:	f003 020f 	and.w	r2, r3, #15
 800b824:	4613      	mov	r3, r2
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	1a9b      	subs	r3, r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	3338      	adds	r3, #56	; 0x38
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	4413      	add	r3, r2
 800b832:	3304      	adds	r3, #4
 800b834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2201      	movs	r2, #1
 800b83a:	705a      	strb	r2, [r3, #1]
 800b83c:	e00d      	b.n	800b85a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b83e:	78fa      	ldrb	r2, [r7, #3]
 800b840:	4613      	mov	r3, r2
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	1a9b      	subs	r3, r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	4413      	add	r3, r2
 800b850:	3304      	adds	r3, #4
 800b852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2200      	movs	r2, #0
 800b858:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2201      	movs	r2, #1
 800b85e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b860:	78fb      	ldrb	r3, [r7, #3]
 800b862:	f003 030f 	and.w	r3, r3, #15
 800b866:	b2da      	uxtb	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b872:	2b01      	cmp	r3, #1
 800b874:	d101      	bne.n	800b87a <HAL_PCD_EP_SetStall+0x82>
 800b876:	2302      	movs	r3, #2
 800b878:	e01c      	b.n	800b8b4 <HAL_PCD_EP_SetStall+0xbc>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68f9      	ldr	r1, [r7, #12]
 800b888:	4618      	mov	r0, r3
 800b88a:	f006 f95f 	bl	8011b4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	f003 030f 	and.w	r3, r3, #15
 800b894:	2b00      	cmp	r3, #0
 800b896:	d108      	bne.n	800b8aa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f006 fb51 	bl	8011f4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b8c8:	78fb      	ldrb	r3, [r7, #3]
 800b8ca:	f003 020f 	and.w	r2, r3, #15
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d901      	bls.n	800b8da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e042      	b.n	800b960 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b8da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	da0f      	bge.n	800b902 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8e2:	78fb      	ldrb	r3, [r7, #3]
 800b8e4:	f003 020f 	and.w	r2, r3, #15
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	00db      	lsls	r3, r3, #3
 800b8ec:	1a9b      	subs	r3, r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	3338      	adds	r3, #56	; 0x38
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	705a      	strb	r2, [r3, #1]
 800b900:	e00f      	b.n	800b922 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	f003 020f 	and.w	r2, r3, #15
 800b908:	4613      	mov	r3, r2
 800b90a:	00db      	lsls	r3, r3, #3
 800b90c:	1a9b      	subs	r3, r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	4413      	add	r3, r2
 800b918:	3304      	adds	r3, #4
 800b91a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b928:	78fb      	ldrb	r3, [r7, #3]
 800b92a:	f003 030f 	and.w	r3, r3, #15
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <HAL_PCD_EP_ClrStall+0x86>
 800b93e:	2302      	movs	r3, #2
 800b940:	e00e      	b.n	800b960 <HAL_PCD_EP_ClrStall+0xa4>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68f9      	ldr	r1, [r7, #12]
 800b950:	4618      	mov	r0, r3
 800b952:	f006 f969 	bl	8011c28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <HAL_PCD_EP_Flush+0x1a>
 800b97e:	2302      	movs	r3, #2
 800b980:	e01b      	b.n	800b9ba <HAL_PCD_EP_Flush+0x52>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800b98a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	da09      	bge.n	800b9a6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	f003 030f 	and.w	r3, r3, #15
 800b99c:	4619      	mov	r1, r3
 800b99e:	4610      	mov	r0, r2
 800b9a0:	f005 fb9c 	bl	80110dc <USB_FlushTxFifo>
 800b9a4:	e004      	b.n	800b9b0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f005 fbbc 	bl	8011128 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b088      	sub	sp, #32
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	1a9b      	subs	r3, r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	3338      	adds	r3, #56	; 0x38
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	699a      	ldr	r2, [r3, #24]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	695b      	ldr	r3, [r3, #20]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d901      	bls.n	800b9fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e067      	b.n	800baca <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	695a      	ldr	r2, [r3, #20]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	69fa      	ldr	r2, [r7, #28]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d902      	bls.n	800ba16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	3303      	adds	r3, #3
 800ba1a:	089b      	lsrs	r3, r3, #2
 800ba1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba1e:	e026      	b.n	800ba6e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	695a      	ldr	r2, [r3, #20]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	69fa      	ldr	r2, [r7, #28]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d902      	bls.n	800ba3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	3303      	adds	r3, #3
 800ba40:	089b      	lsrs	r3, r3, #2
 800ba42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	68d9      	ldr	r1, [r3, #12]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	6978      	ldr	r0, [r7, #20]
 800ba52:	f006 f821 	bl	8011a98 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	68da      	ldr	r2, [r3, #12]
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	441a      	add	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	699a      	ldr	r2, [r3, #24]
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	441a      	add	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	015a      	lsls	r2, r3, #5
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	4413      	add	r3, r2
 800ba76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	69ba      	ldr	r2, [r7, #24]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d809      	bhi.n	800ba98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	699a      	ldr	r2, [r3, #24]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d203      	bcs.n	800ba98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1c3      	bne.n	800ba20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	695a      	ldr	r2, [r3, #20]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d811      	bhi.n	800bac8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	f003 030f 	and.w	r3, r3, #15
 800baaa:	2201      	movs	r2, #1
 800baac:	fa02 f303 	lsl.w	r3, r2, r3
 800bab0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	43db      	mvns	r3, r3
 800babe:	6939      	ldr	r1, [r7, #16]
 800bac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bac4:	4013      	ands	r3, r2
 800bac6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3720      	adds	r7, #32
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	333c      	adds	r3, #60	; 0x3c
 800baec:	3304      	adds	r3, #4
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	015a      	lsls	r2, r3, #5
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	4413      	add	r3, r2
 800bafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	4a19      	ldr	r2, [pc, #100]	; (800bb6c <PCD_EP_OutXfrComplete_int+0x98>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d124      	bne.n	800bb54 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00a      	beq.n	800bb2a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb20:	461a      	mov	r2, r3
 800bb22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb26:	6093      	str	r3, [r2, #8]
 800bb28:	e01a      	b.n	800bb60 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f003 0320 	and.w	r3, r3, #32
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d008      	beq.n	800bb46 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb40:	461a      	mov	r2, r3
 800bb42:	2320      	movs	r3, #32
 800bb44:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f00d fe2f 	bl	80197b0 <HAL_PCD_DataOutStageCallback>
 800bb52:	e005      	b.n	800bb60 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f00d fe28 	bl	80197b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	4f54310a 	.word	0x4f54310a

0800bb70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	333c      	adds	r3, #60	; 0x3c
 800bb88:	3304      	adds	r3, #4
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4a0c      	ldr	r2, [pc, #48]	; (800bbd4 <PCD_EP_OutSetupPacket_int+0x64>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d90e      	bls.n	800bbc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d009      	beq.n	800bbc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f00d fde1 	bl	801978c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	4f54300a 	.word	0x4f54300a

0800bbd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d107      	bne.n	800bc06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bbf6:	883b      	ldrh	r3, [r7, #0]
 800bbf8:	0419      	lsls	r1, r3, #16
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	629a      	str	r2, [r3, #40]	; 0x28
 800bc04:	e028      	b.n	800bc58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0c:	0c1b      	lsrs	r3, r3, #16
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	4413      	add	r3, r2
 800bc12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
 800bc18:	e00d      	b.n	800bc36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	3340      	adds	r3, #64	; 0x40
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	0c1b      	lsrs	r3, r3, #16
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	3301      	adds	r3, #1
 800bc34:	73fb      	strb	r3, [r7, #15]
 800bc36:	7bfa      	ldrb	r2, [r7, #15]
 800bc38:	78fb      	ldrb	r3, [r7, #3]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d3ec      	bcc.n	800bc1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bc40:	883b      	ldrh	r3, [r7, #0]
 800bc42:	0418      	lsls	r0, r3, #16
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6819      	ldr	r1, [r3, #0]
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	4302      	orrs	r2, r0
 800bc50:	3340      	adds	r3, #64	; 0x40
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	887a      	ldrh	r2, [r7, #2]
 800bc78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcba:	f043 0303 	orr.w	r3, r3, #3
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcd4:	4b05      	ldr	r3, [pc, #20]	; (800bcec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a04      	ldr	r2, [pc, #16]	; (800bcec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bcda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcde:	6013      	str	r3, [r2, #0]
}
 800bce0:	bf00      	nop
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	40007000 	.word	0x40007000

0800bcf0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800bcf8:	4b2b      	ldr	r3, [pc, #172]	; (800bda8 <HAL_PWR_ConfigPVD+0xb8>)
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f023 020e 	bic.w	r2, r3, #14
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4928      	ldr	r1, [pc, #160]	; (800bda8 <HAL_PWR_ConfigPVD+0xb8>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800bd0a:	4b28      	ldr	r3, [pc, #160]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	4a27      	ldr	r2, [pc, #156]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd14:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800bd16:	4b25      	ldr	r3, [pc, #148]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a24      	ldr	r2, [pc, #144]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd20:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800bd22:	4b22      	ldr	r3, [pc, #136]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	4a21      	ldr	r2, [pc, #132]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd2c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800bd2e:	4b1f      	ldr	r3, [pc, #124]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	4a1e      	ldr	r2, [pc, #120]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd38:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800bd46:	4b19      	ldr	r3, [pc, #100]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a18      	ldr	r2, [pc, #96]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd50:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d005      	beq.n	800bd6a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800bd5e:	4b13      	ldr	r3, [pc, #76]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	4a12      	ldr	r2, [pc, #72]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd68:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d005      	beq.n	800bd82 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800bd76:	4b0d      	ldr	r3, [pc, #52]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	4a0c      	ldr	r2, [pc, #48]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd80:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f003 0302 	and.w	r3, r3, #2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800bd8e:	4b07      	ldr	r3, [pc, #28]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	4a06      	ldr	r2, [pc, #24]	; (800bdac <HAL_PWR_ConfigPVD+0xbc>)
 800bd94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd98:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	40007000 	.word	0x40007000
 800bdac:	40010400 	.word	0x40010400

0800bdb0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800bdb4:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <HAL_PWR_EnablePVD+0x1c>)
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	4a04      	ldr	r2, [pc, #16]	; (800bdcc <HAL_PWR_EnablePVD+0x1c>)
 800bdba:	f043 0301 	orr.w	r3, r3, #1
 800bdbe:	6053      	str	r3, [r2, #4]
}
 800bdc0:	bf00      	nop
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	40007000 	.word	0x40007000

0800bdd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bdd4:	4b04      	ldr	r3, [pc, #16]	; (800bde8 <HAL_PWREx_GetVoltageRange+0x18>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	40007000 	.word	0x40007000

0800bdec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdfa:	d130      	bne.n	800be5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdfc:	4b23      	ldr	r3, [pc, #140]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be08:	d038      	beq.n	800be7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800be0a:	4b20      	ldr	r3, [pc, #128]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be12:	4a1e      	ldr	r2, [pc, #120]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800be1a:	4b1d      	ldr	r3, [pc, #116]	; (800be90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2232      	movs	r2, #50	; 0x32
 800be20:	fb02 f303 	mul.w	r3, r2, r3
 800be24:	4a1b      	ldr	r2, [pc, #108]	; (800be94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800be26:	fba2 2303 	umull	r2, r3, r2, r3
 800be2a:	0c9b      	lsrs	r3, r3, #18
 800be2c:	3301      	adds	r3, #1
 800be2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be30:	e002      	b.n	800be38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3b01      	subs	r3, #1
 800be36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be38:	4b14      	ldr	r3, [pc, #80]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be44:	d102      	bne.n	800be4c <HAL_PWREx_ControlVoltageScaling+0x60>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1f2      	bne.n	800be32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800be4c:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be58:	d110      	bne.n	800be7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e00f      	b.n	800be7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800be5e:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be6a:	d007      	beq.n	800be7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800be6c:	4b07      	ldr	r3, [pc, #28]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be74:	4a05      	ldr	r2, [pc, #20]	; (800be8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	40007000 	.word	0x40007000
 800be90:	200003d0 	.word	0x200003d0
 800be94:	431bde83 	.word	0x431bde83

0800be98 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800be98:	b480      	push	{r7}
 800be9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bea6:	6053      	str	r3, [r2, #4]
}
 800bea8:	bf00      	nop
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	40007000 	.word	0x40007000

0800beb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	f000 bc16 	b.w	800c6f8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800becc:	4ba0      	ldr	r3, [pc, #640]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	f003 030c 	and.w	r3, r3, #12
 800bed4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bed6:	4b9e      	ldr	r3, [pc, #632]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f000 80e4 	beq.w	800c0b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d007      	beq.n	800bf04 <HAL_RCC_OscConfig+0x4c>
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2b0c      	cmp	r3, #12
 800bef8:	f040 808b 	bne.w	800c012 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	f040 8087 	bne.w	800c012 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf04:	4b92      	ldr	r3, [pc, #584]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d005      	beq.n	800bf1c <HAL_RCC_OscConfig+0x64>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	699b      	ldr	r3, [r3, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e3ed      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a1a      	ldr	r2, [r3, #32]
 800bf20:	4b8b      	ldr	r3, [pc, #556]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0308 	and.w	r3, r3, #8
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <HAL_RCC_OscConfig+0x7e>
 800bf2c:	4b88      	ldr	r3, [pc, #544]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf34:	e005      	b.n	800bf42 <HAL_RCC_OscConfig+0x8a>
 800bf36:	4b86      	ldr	r3, [pc, #536]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf3c:	091b      	lsrs	r3, r3, #4
 800bf3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d223      	bcs.n	800bf8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 fdb2 	bl	800cab4 <RCC_SetFlashLatencyFromMSIRange>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e3ce      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf5a:	4b7d      	ldr	r3, [pc, #500]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a7c      	ldr	r2, [pc, #496]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf60:	f043 0308 	orr.w	r3, r3, #8
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	4b7a      	ldr	r3, [pc, #488]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	4977      	ldr	r1, [pc, #476]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf78:	4b75      	ldr	r3, [pc, #468]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	021b      	lsls	r3, r3, #8
 800bf86:	4972      	ldr	r1, [pc, #456]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	604b      	str	r3, [r1, #4]
 800bf8c:	e025      	b.n	800bfda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf8e:	4b70      	ldr	r3, [pc, #448]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a6f      	ldr	r2, [pc, #444]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf94:	f043 0308 	orr.w	r3, r3, #8
 800bf98:	6013      	str	r3, [r2, #0]
 800bf9a:	4b6d      	ldr	r3, [pc, #436]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	496a      	ldr	r1, [pc, #424]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfac:	4b68      	ldr	r3, [pc, #416]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	4965      	ldr	r1, [pc, #404]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d109      	bne.n	800bfda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 fd72 	bl	800cab4 <RCC_SetFlashLatencyFromMSIRange>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e38e      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bfda:	f000 fc75 	bl	800c8c8 <HAL_RCC_GetSysClockFreq>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	4b5b      	ldr	r3, [pc, #364]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	091b      	lsrs	r3, r3, #4
 800bfe6:	f003 030f 	and.w	r3, r3, #15
 800bfea:	495a      	ldr	r1, [pc, #360]	; (800c154 <HAL_RCC_OscConfig+0x29c>)
 800bfec:	5ccb      	ldrb	r3, [r1, r3]
 800bfee:	f003 031f 	and.w	r3, r3, #31
 800bff2:	fa22 f303 	lsr.w	r3, r2, r3
 800bff6:	4a58      	ldr	r2, [pc, #352]	; (800c158 <HAL_RCC_OscConfig+0x2a0>)
 800bff8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bffa:	4b58      	ldr	r3, [pc, #352]	; (800c15c <HAL_RCC_OscConfig+0x2a4>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fb f958 	bl	80072b4 <HAL_InitTick>
 800c004:	4603      	mov	r3, r0
 800c006:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d052      	beq.n	800c0b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	e372      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d032      	beq.n	800c080 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c01a:	4b4d      	ldr	r3, [pc, #308]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a4c      	ldr	r2, [pc, #304]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c020:	f043 0301 	orr.w	r3, r3, #1
 800c024:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c026:	f7fb fd65 	bl	8007af4 <HAL_GetTick>
 800c02a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c02c:	e008      	b.n	800c040 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c02e:	f7fb fd61 	bl	8007af4 <HAL_GetTick>
 800c032:	4602      	mov	r2, r0
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d901      	bls.n	800c040 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e35b      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c040:	4b43      	ldr	r3, [pc, #268]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0f0      	beq.n	800c02e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c04c:	4b40      	ldr	r3, [pc, #256]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a3f      	ldr	r2, [pc, #252]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c052:	f043 0308 	orr.w	r3, r3, #8
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	4b3d      	ldr	r3, [pc, #244]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a1b      	ldr	r3, [r3, #32]
 800c064:	493a      	ldr	r1, [pc, #232]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c066:	4313      	orrs	r3, r2
 800c068:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c06a:	4b39      	ldr	r3, [pc, #228]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	021b      	lsls	r3, r3, #8
 800c078:	4935      	ldr	r1, [pc, #212]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c07a:	4313      	orrs	r3, r2
 800c07c:	604b      	str	r3, [r1, #4]
 800c07e:	e01a      	b.n	800c0b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c080:	4b33      	ldr	r3, [pc, #204]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a32      	ldr	r2, [pc, #200]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c086:	f023 0301 	bic.w	r3, r3, #1
 800c08a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c08c:	f7fb fd32 	bl	8007af4 <HAL_GetTick>
 800c090:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c092:	e008      	b.n	800c0a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c094:	f7fb fd2e 	bl	8007af4 <HAL_GetTick>
 800c098:	4602      	mov	r2, r0
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d901      	bls.n	800c0a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e328      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c0a6:	4b2a      	ldr	r3, [pc, #168]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0302 	and.w	r3, r3, #2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1f0      	bne.n	800c094 <HAL_RCC_OscConfig+0x1dc>
 800c0b2:	e000      	b.n	800c0b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c0b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d073      	beq.n	800c1aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	2b08      	cmp	r3, #8
 800c0c6:	d005      	beq.n	800c0d4 <HAL_RCC_OscConfig+0x21c>
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	2b0c      	cmp	r3, #12
 800c0cc:	d10e      	bne.n	800c0ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d10b      	bne.n	800c0ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0d4:	4b1e      	ldr	r3, [pc, #120]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d063      	beq.n	800c1a8 <HAL_RCC_OscConfig+0x2f0>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d15f      	bne.n	800c1a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e305      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f4:	d106      	bne.n	800c104 <HAL_RCC_OscConfig+0x24c>
 800c0f6:	4b16      	ldr	r3, [pc, #88]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a15      	ldr	r2, [pc, #84]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c0fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	e01d      	b.n	800c140 <HAL_RCC_OscConfig+0x288>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c10c:	d10c      	bne.n	800c128 <HAL_RCC_OscConfig+0x270>
 800c10e:	4b10      	ldr	r3, [pc, #64]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a0f      	ldr	r2, [pc, #60]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a0c      	ldr	r2, [pc, #48]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	e00b      	b.n	800c140 <HAL_RCC_OscConfig+0x288>
 800c128:	4b09      	ldr	r3, [pc, #36]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a08      	ldr	r2, [pc, #32]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c12e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	4b06      	ldr	r3, [pc, #24]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a05      	ldr	r2, [pc, #20]	; (800c150 <HAL_RCC_OscConfig+0x298>)
 800c13a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c13e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d01b      	beq.n	800c180 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c148:	f7fb fcd4 	bl	8007af4 <HAL_GetTick>
 800c14c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c14e:	e010      	b.n	800c172 <HAL_RCC_OscConfig+0x2ba>
 800c150:	40021000 	.word	0x40021000
 800c154:	08023e48 	.word	0x08023e48
 800c158:	200003d0 	.word	0x200003d0
 800c15c:	200003d4 	.word	0x200003d4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c160:	f7fb fcc8 	bl	8007af4 <HAL_GetTick>
 800c164:	4602      	mov	r2, r0
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	2b64      	cmp	r3, #100	; 0x64
 800c16c:	d901      	bls.n	800c172 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e2c2      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c172:	4baf      	ldr	r3, [pc, #700]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d0f0      	beq.n	800c160 <HAL_RCC_OscConfig+0x2a8>
 800c17e:	e014      	b.n	800c1aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c180:	f7fb fcb8 	bl	8007af4 <HAL_GetTick>
 800c184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c186:	e008      	b.n	800c19a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c188:	f7fb fcb4 	bl	8007af4 <HAL_GetTick>
 800c18c:	4602      	mov	r2, r0
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	2b64      	cmp	r3, #100	; 0x64
 800c194:	d901      	bls.n	800c19a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c196:	2303      	movs	r3, #3
 800c198:	e2ae      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c19a:	4ba5      	ldr	r3, [pc, #660]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1f0      	bne.n	800c188 <HAL_RCC_OscConfig+0x2d0>
 800c1a6:	e000      	b.n	800c1aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f003 0302 	and.w	r3, r3, #2
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d060      	beq.n	800c278 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d005      	beq.n	800c1c8 <HAL_RCC_OscConfig+0x310>
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	2b0c      	cmp	r3, #12
 800c1c0:	d119      	bne.n	800c1f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d116      	bne.n	800c1f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c1c8:	4b99      	ldr	r3, [pc, #612]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d005      	beq.n	800c1e0 <HAL_RCC_OscConfig+0x328>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d101      	bne.n	800c1e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e28b      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1e0:	4b93      	ldr	r3, [pc, #588]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	061b      	lsls	r3, r3, #24
 800c1ee:	4990      	ldr	r1, [pc, #576]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c1f4:	e040      	b.n	800c278 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d023      	beq.n	800c246 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c1fe:	4b8c      	ldr	r3, [pc, #560]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a8b      	ldr	r2, [pc, #556]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c20a:	f7fb fc73 	bl	8007af4 <HAL_GetTick>
 800c20e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c210:	e008      	b.n	800c224 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c212:	f7fb fc6f 	bl	8007af4 <HAL_GetTick>
 800c216:	4602      	mov	r2, r0
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	d901      	bls.n	800c224 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e269      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c224:	4b82      	ldr	r3, [pc, #520]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d0f0      	beq.n	800c212 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c230:	4b7f      	ldr	r3, [pc, #508]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	061b      	lsls	r3, r3, #24
 800c23e:	497c      	ldr	r1, [pc, #496]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c240:	4313      	orrs	r3, r2
 800c242:	604b      	str	r3, [r1, #4]
 800c244:	e018      	b.n	800c278 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c246:	4b7a      	ldr	r3, [pc, #488]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a79      	ldr	r2, [pc, #484]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c24c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c252:	f7fb fc4f 	bl	8007af4 <HAL_GetTick>
 800c256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c258:	e008      	b.n	800c26c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c25a:	f7fb fc4b 	bl	8007af4 <HAL_GetTick>
 800c25e:	4602      	mov	r2, r0
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	2b02      	cmp	r3, #2
 800c266:	d901      	bls.n	800c26c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e245      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c26c:	4b70      	ldr	r3, [pc, #448]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1f0      	bne.n	800c25a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 0308 	and.w	r3, r3, #8
 800c280:	2b00      	cmp	r3, #0
 800c282:	d03c      	beq.n	800c2fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d01c      	beq.n	800c2c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c28c:	4b68      	ldr	r3, [pc, #416]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c28e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c292:	4a67      	ldr	r2, [pc, #412]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c294:	f043 0301 	orr.w	r3, r3, #1
 800c298:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c29c:	f7fb fc2a 	bl	8007af4 <HAL_GetTick>
 800c2a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2a2:	e008      	b.n	800c2b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2a4:	f7fb fc26 	bl	8007af4 <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d901      	bls.n	800c2b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e220      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2b6:	4b5e      	ldr	r3, [pc, #376]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c2b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2bc:	f003 0302 	and.w	r3, r3, #2
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d0ef      	beq.n	800c2a4 <HAL_RCC_OscConfig+0x3ec>
 800c2c4:	e01b      	b.n	800c2fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c2c6:	4b5a      	ldr	r3, [pc, #360]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c2c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2cc:	4a58      	ldr	r2, [pc, #352]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c2ce:	f023 0301 	bic.w	r3, r3, #1
 800c2d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2d6:	f7fb fc0d 	bl	8007af4 <HAL_GetTick>
 800c2da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c2dc:	e008      	b.n	800c2f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2de:	f7fb fc09 	bl	8007af4 <HAL_GetTick>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d901      	bls.n	800c2f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e203      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c2f0:	4b4f      	ldr	r3, [pc, #316]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c2f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2f6:	f003 0302 	and.w	r3, r3, #2
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1ef      	bne.n	800c2de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 0304 	and.w	r3, r3, #4
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 80a6 	beq.w	800c458 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c30c:	2300      	movs	r3, #0
 800c30e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c310:	4b47      	ldr	r3, [pc, #284]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10d      	bne.n	800c338 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c31c:	4b44      	ldr	r3, [pc, #272]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c31e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c320:	4a43      	ldr	r2, [pc, #268]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c326:	6593      	str	r3, [r2, #88]	; 0x58
 800c328:	4b41      	ldr	r3, [pc, #260]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c330:	60bb      	str	r3, [r7, #8]
 800c332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c334:	2301      	movs	r3, #1
 800c336:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c338:	4b3e      	ldr	r3, [pc, #248]	; (800c434 <HAL_RCC_OscConfig+0x57c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c340:	2b00      	cmp	r3, #0
 800c342:	d118      	bne.n	800c376 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c344:	4b3b      	ldr	r3, [pc, #236]	; (800c434 <HAL_RCC_OscConfig+0x57c>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a3a      	ldr	r2, [pc, #232]	; (800c434 <HAL_RCC_OscConfig+0x57c>)
 800c34a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c34e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c350:	f7fb fbd0 	bl	8007af4 <HAL_GetTick>
 800c354:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c356:	e008      	b.n	800c36a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c358:	f7fb fbcc 	bl	8007af4 <HAL_GetTick>
 800c35c:	4602      	mov	r2, r0
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	2b02      	cmp	r3, #2
 800c364:	d901      	bls.n	800c36a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c366:	2303      	movs	r3, #3
 800c368:	e1c6      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c36a:	4b32      	ldr	r3, [pc, #200]	; (800c434 <HAL_RCC_OscConfig+0x57c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0f0      	beq.n	800c358 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d108      	bne.n	800c390 <HAL_RCC_OscConfig+0x4d8>
 800c37e:	4b2c      	ldr	r3, [pc, #176]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c384:	4a2a      	ldr	r2, [pc, #168]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c386:	f043 0301 	orr.w	r3, r3, #1
 800c38a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c38e:	e024      	b.n	800c3da <HAL_RCC_OscConfig+0x522>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	2b05      	cmp	r3, #5
 800c396:	d110      	bne.n	800c3ba <HAL_RCC_OscConfig+0x502>
 800c398:	4b25      	ldr	r3, [pc, #148]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c39e:	4a24      	ldr	r2, [pc, #144]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c3a0:	f043 0304 	orr.w	r3, r3, #4
 800c3a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3a8:	4b21      	ldr	r3, [pc, #132]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3ae:	4a20      	ldr	r2, [pc, #128]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c3b0:	f043 0301 	orr.w	r3, r3, #1
 800c3b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3b8:	e00f      	b.n	800c3da <HAL_RCC_OscConfig+0x522>
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3c0:	4a1b      	ldr	r2, [pc, #108]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c3c2:	f023 0301 	bic.w	r3, r3, #1
 800c3c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3ca:	4b19      	ldr	r3, [pc, #100]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3d0:	4a17      	ldr	r2, [pc, #92]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c3d2:	f023 0304 	bic.w	r3, r3, #4
 800c3d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d016      	beq.n	800c410 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3e2:	f7fb fb87 	bl	8007af4 <HAL_GetTick>
 800c3e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c3e8:	e00a      	b.n	800c400 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3ea:	f7fb fb83 	bl	8007af4 <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d901      	bls.n	800c400 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	e17b      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <HAL_RCC_OscConfig+0x578>)
 800c402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d0ed      	beq.n	800c3ea <HAL_RCC_OscConfig+0x532>
 800c40e:	e01a      	b.n	800c446 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c410:	f7fb fb70 	bl	8007af4 <HAL_GetTick>
 800c414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c416:	e00f      	b.n	800c438 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c418:	f7fb fb6c 	bl	8007af4 <HAL_GetTick>
 800c41c:	4602      	mov	r2, r0
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	f241 3288 	movw	r2, #5000	; 0x1388
 800c426:	4293      	cmp	r3, r2
 800c428:	d906      	bls.n	800c438 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e164      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
 800c42e:	bf00      	nop
 800c430:	40021000 	.word	0x40021000
 800c434:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c438:	4ba8      	ldr	r3, [pc, #672]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c43e:	f003 0302 	and.w	r3, r3, #2
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1e8      	bne.n	800c418 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c446:	7ffb      	ldrb	r3, [r7, #31]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d105      	bne.n	800c458 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c44c:	4ba3      	ldr	r3, [pc, #652]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c450:	4aa2      	ldr	r2, [pc, #648]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c456:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0320 	and.w	r3, r3, #32
 800c460:	2b00      	cmp	r3, #0
 800c462:	d03c      	beq.n	800c4de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01c      	beq.n	800c4a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c46c:	4b9b      	ldr	r3, [pc, #620]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c46e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c472:	4a9a      	ldr	r2, [pc, #616]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c474:	f043 0301 	orr.w	r3, r3, #1
 800c478:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c47c:	f7fb fb3a 	bl	8007af4 <HAL_GetTick>
 800c480:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c482:	e008      	b.n	800c496 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c484:	f7fb fb36 	bl	8007af4 <HAL_GetTick>
 800c488:	4602      	mov	r2, r0
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d901      	bls.n	800c496 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c492:	2303      	movs	r3, #3
 800c494:	e130      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c496:	4b91      	ldr	r3, [pc, #580]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c49c:	f003 0302 	and.w	r3, r3, #2
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0ef      	beq.n	800c484 <HAL_RCC_OscConfig+0x5cc>
 800c4a4:	e01b      	b.n	800c4de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c4a6:	4b8d      	ldr	r3, [pc, #564]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c4a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4ac:	4a8b      	ldr	r2, [pc, #556]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4b6:	f7fb fb1d 	bl	8007af4 <HAL_GetTick>
 800c4ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4bc:	e008      	b.n	800c4d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4be:	f7fb fb19 	bl	8007af4 <HAL_GetTick>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d901      	bls.n	800c4d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e113      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4d0:	4b82      	ldr	r3, [pc, #520]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c4d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4d6:	f003 0302 	and.w	r3, r3, #2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1ef      	bne.n	800c4be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f000 8107 	beq.w	800c6f6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	f040 80cb 	bne.w	800c688 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c4f2:	4b7a      	ldr	r3, [pc, #488]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	f003 0203 	and.w	r2, r3, #3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c502:	429a      	cmp	r2, r3
 800c504:	d12c      	bne.n	800c560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c510:	3b01      	subs	r3, #1
 800c512:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c514:	429a      	cmp	r2, r3
 800c516:	d123      	bne.n	800c560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c522:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c524:	429a      	cmp	r2, r3
 800c526:	d11b      	bne.n	800c560 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c532:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c534:	429a      	cmp	r2, r3
 800c536:	d113      	bne.n	800c560 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c542:	085b      	lsrs	r3, r3, #1
 800c544:	3b01      	subs	r3, #1
 800c546:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c548:	429a      	cmp	r2, r3
 800c54a:	d109      	bne.n	800c560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	085b      	lsrs	r3, r3, #1
 800c558:	3b01      	subs	r3, #1
 800c55a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d06d      	beq.n	800c63c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	2b0c      	cmp	r3, #12
 800c564:	d068      	beq.n	800c638 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c566:	4b5d      	ldr	r3, [pc, #372]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c572:	4b5a      	ldr	r3, [pc, #360]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d001      	beq.n	800c582 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e0ba      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c582:	4b56      	ldr	r3, [pc, #344]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a55      	ldr	r2, [pc, #340]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c58c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c58e:	f7fb fab1 	bl	8007af4 <HAL_GetTick>
 800c592:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c594:	e008      	b.n	800c5a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c596:	f7fb faad 	bl	8007af4 <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d901      	bls.n	800c5a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e0a7      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c5a8:	4b4c      	ldr	r3, [pc, #304]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1f0      	bne.n	800c596 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c5b4:	4b49      	ldr	r3, [pc, #292]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c5b6:	68da      	ldr	r2, [r3, #12]
 800c5b8:	4b49      	ldr	r3, [pc, #292]	; (800c6e0 <HAL_RCC_OscConfig+0x828>)
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c5c4:	3a01      	subs	r2, #1
 800c5c6:	0112      	lsls	r2, r2, #4
 800c5c8:	4311      	orrs	r1, r2
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c5ce:	0212      	lsls	r2, r2, #8
 800c5d0:	4311      	orrs	r1, r2
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c5d6:	0852      	lsrs	r2, r2, #1
 800c5d8:	3a01      	subs	r2, #1
 800c5da:	0552      	lsls	r2, r2, #21
 800c5dc:	4311      	orrs	r1, r2
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c5e2:	0852      	lsrs	r2, r2, #1
 800c5e4:	3a01      	subs	r2, #1
 800c5e6:	0652      	lsls	r2, r2, #25
 800c5e8:	4311      	orrs	r1, r2
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c5ee:	06d2      	lsls	r2, r2, #27
 800c5f0:	430a      	orrs	r2, r1
 800c5f2:	493a      	ldr	r1, [pc, #232]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c5f8:	4b38      	ldr	r3, [pc, #224]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a37      	ldr	r2, [pc, #220]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c5fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c602:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c604:	4b35      	ldr	r3, [pc, #212]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	4a34      	ldr	r2, [pc, #208]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c60a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c60e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c610:	f7fb fa70 	bl	8007af4 <HAL_GetTick>
 800c614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c616:	e008      	b.n	800c62a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c618:	f7fb fa6c 	bl	8007af4 <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	2b02      	cmp	r3, #2
 800c624:	d901      	bls.n	800c62a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e066      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c62a:	4b2c      	ldr	r3, [pc, #176]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0f0      	beq.n	800c618 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c636:	e05e      	b.n	800c6f6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	e05d      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c63c:	4b27      	ldr	r3, [pc, #156]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c644:	2b00      	cmp	r3, #0
 800c646:	d156      	bne.n	800c6f6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c648:	4b24      	ldr	r3, [pc, #144]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a23      	ldr	r2, [pc, #140]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c64e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c652:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c654:	4b21      	ldr	r3, [pc, #132]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	4a20      	ldr	r2, [pc, #128]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c65a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c65e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c660:	f7fb fa48 	bl	8007af4 <HAL_GetTick>
 800c664:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c668:	f7fb fa44 	bl	8007af4 <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b02      	cmp	r3, #2
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e03e      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c67a:	4b18      	ldr	r3, [pc, #96]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d0f0      	beq.n	800c668 <HAL_RCC_OscConfig+0x7b0>
 800c686:	e036      	b.n	800c6f6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	2b0c      	cmp	r3, #12
 800c68c:	d031      	beq.n	800c6f2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a12      	ldr	r2, [pc, #72]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c698:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c69a:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d105      	bne.n	800c6b2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c6a6:	4b0d      	ldr	r3, [pc, #52]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	4a0c      	ldr	r2, [pc, #48]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c6ac:	f023 0303 	bic.w	r3, r3, #3
 800c6b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c6b2:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	4a09      	ldr	r2, [pc, #36]	; (800c6dc <HAL_RCC_OscConfig+0x824>)
 800c6b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c6bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6c2:	f7fb fa17 	bl	8007af4 <HAL_GetTick>
 800c6c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6c8:	e00c      	b.n	800c6e4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6ca:	f7fb fa13 	bl	8007af4 <HAL_GetTick>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d905      	bls.n	800c6e4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800c6d8:	2303      	movs	r3, #3
 800c6da:	e00d      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
 800c6dc:	40021000 	.word	0x40021000
 800c6e0:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6e4:	4b06      	ldr	r3, [pc, #24]	; (800c700 <HAL_RCC_OscConfig+0x848>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1ec      	bne.n	800c6ca <HAL_RCC_OscConfig+0x812>
 800c6f0:	e001      	b.n	800c6f6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e000      	b.n	800c6f8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3720      	adds	r7, #32
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	40021000 	.word	0x40021000

0800c704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	e0c8      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c718:	4b66      	ldr	r3, [pc, #408]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 0307 	and.w	r3, r3, #7
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d910      	bls.n	800c748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c726:	4b63      	ldr	r3, [pc, #396]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f023 0207 	bic.w	r2, r3, #7
 800c72e:	4961      	ldr	r1, [pc, #388]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	4313      	orrs	r3, r2
 800c734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c736:	4b5f      	ldr	r3, [pc, #380]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 0307 	and.w	r3, r3, #7
 800c73e:	683a      	ldr	r2, [r7, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d001      	beq.n	800c748 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	e0b0      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	2b00      	cmp	r3, #0
 800c752:	d04c      	beq.n	800c7ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	2b03      	cmp	r3, #3
 800c75a:	d107      	bne.n	800c76c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c75c:	4b56      	ldr	r3, [pc, #344]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c764:	2b00      	cmp	r3, #0
 800c766:	d121      	bne.n	800c7ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c768:	2301      	movs	r3, #1
 800c76a:	e09e      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	2b02      	cmp	r3, #2
 800c772:	d107      	bne.n	800c784 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c774:	4b50      	ldr	r3, [pc, #320]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d115      	bne.n	800c7ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e092      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d107      	bne.n	800c79c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c78c:	4b4a      	ldr	r3, [pc, #296]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f003 0302 	and.w	r3, r3, #2
 800c794:	2b00      	cmp	r3, #0
 800c796:	d109      	bne.n	800c7ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e086      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c79c:	4b46      	ldr	r3, [pc, #280]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e07e      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c7ac:	4b42      	ldr	r3, [pc, #264]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f023 0203 	bic.w	r2, r3, #3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	493f      	ldr	r1, [pc, #252]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7be:	f7fb f999 	bl	8007af4 <HAL_GetTick>
 800c7c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7c4:	e00a      	b.n	800c7dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7c6:	f7fb f995 	bl	8007af4 <HAL_GetTick>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d901      	bls.n	800c7dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e066      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7dc:	4b36      	ldr	r3, [pc, #216]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	f003 020c 	and.w	r2, r3, #12
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d1eb      	bne.n	800c7c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 0302 	and.w	r3, r3, #2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d008      	beq.n	800c80c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c7fa:	4b2f      	ldr	r3, [pc, #188]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	492c      	ldr	r1, [pc, #176]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c808:	4313      	orrs	r3, r2
 800c80a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c80c:	4b29      	ldr	r3, [pc, #164]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 0307 	and.w	r3, r3, #7
 800c814:	683a      	ldr	r2, [r7, #0]
 800c816:	429a      	cmp	r2, r3
 800c818:	d210      	bcs.n	800c83c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c81a:	4b26      	ldr	r3, [pc, #152]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f023 0207 	bic.w	r2, r3, #7
 800c822:	4924      	ldr	r1, [pc, #144]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	4313      	orrs	r3, r2
 800c828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c82a:	4b22      	ldr	r3, [pc, #136]	; (800c8b4 <HAL_RCC_ClockConfig+0x1b0>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0307 	and.w	r3, r3, #7
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d001      	beq.n	800c83c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e036      	b.n	800c8aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 0304 	and.w	r3, r3, #4
 800c844:	2b00      	cmp	r3, #0
 800c846:	d008      	beq.n	800c85a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c848:	4b1b      	ldr	r3, [pc, #108]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	4918      	ldr	r1, [pc, #96]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c856:	4313      	orrs	r3, r2
 800c858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0308 	and.w	r3, r3, #8
 800c862:	2b00      	cmp	r3, #0
 800c864:	d009      	beq.n	800c87a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c866:	4b14      	ldr	r3, [pc, #80]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	4910      	ldr	r1, [pc, #64]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c876:	4313      	orrs	r3, r2
 800c878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c87a:	f000 f825 	bl	800c8c8 <HAL_RCC_GetSysClockFreq>
 800c87e:	4602      	mov	r2, r0
 800c880:	4b0d      	ldr	r3, [pc, #52]	; (800c8b8 <HAL_RCC_ClockConfig+0x1b4>)
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	091b      	lsrs	r3, r3, #4
 800c886:	f003 030f 	and.w	r3, r3, #15
 800c88a:	490c      	ldr	r1, [pc, #48]	; (800c8bc <HAL_RCC_ClockConfig+0x1b8>)
 800c88c:	5ccb      	ldrb	r3, [r1, r3]
 800c88e:	f003 031f 	and.w	r3, r3, #31
 800c892:	fa22 f303 	lsr.w	r3, r2, r3
 800c896:	4a0a      	ldr	r2, [pc, #40]	; (800c8c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c89a:	4b0a      	ldr	r3, [pc, #40]	; (800c8c4 <HAL_RCC_ClockConfig+0x1c0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fa fd08 	bl	80072b4 <HAL_InitTick>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	72fb      	strb	r3, [r7, #11]

  return status;
 800c8a8:	7afb      	ldrb	r3, [r7, #11]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	40022000 	.word	0x40022000
 800c8b8:	40021000 	.word	0x40021000
 800c8bc:	08023e48 	.word	0x08023e48
 800c8c0:	200003d0 	.word	0x200003d0
 800c8c4:	200003d4 	.word	0x200003d4

0800c8c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b089      	sub	sp, #36	; 0x24
 800c8cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	61fb      	str	r3, [r7, #28]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8d6:	4b3e      	ldr	r3, [pc, #248]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 030c 	and.w	r3, r3, #12
 800c8de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c8e0:	4b3b      	ldr	r3, [pc, #236]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	f003 0303 	and.w	r3, r3, #3
 800c8e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <HAL_RCC_GetSysClockFreq+0x34>
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	2b0c      	cmp	r3, #12
 800c8f4:	d121      	bne.n	800c93a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d11e      	bne.n	800c93a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c8fc:	4b34      	ldr	r3, [pc, #208]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 0308 	and.w	r3, r3, #8
 800c904:	2b00      	cmp	r3, #0
 800c906:	d107      	bne.n	800c918 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c908:	4b31      	ldr	r3, [pc, #196]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c90a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c90e:	0a1b      	lsrs	r3, r3, #8
 800c910:	f003 030f 	and.w	r3, r3, #15
 800c914:	61fb      	str	r3, [r7, #28]
 800c916:	e005      	b.n	800c924 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c918:	4b2d      	ldr	r3, [pc, #180]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	091b      	lsrs	r3, r3, #4
 800c91e:	f003 030f 	and.w	r3, r3, #15
 800c922:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c924:	4a2b      	ldr	r2, [pc, #172]	; (800c9d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c92c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10d      	bne.n	800c950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c938:	e00a      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	2b04      	cmp	r3, #4
 800c93e:	d102      	bne.n	800c946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c940:	4b25      	ldr	r3, [pc, #148]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c942:	61bb      	str	r3, [r7, #24]
 800c944:	e004      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b08      	cmp	r3, #8
 800c94a:	d101      	bne.n	800c950 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c94c:	4b23      	ldr	r3, [pc, #140]	; (800c9dc <HAL_RCC_GetSysClockFreq+0x114>)
 800c94e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	2b0c      	cmp	r3, #12
 800c954:	d134      	bne.n	800c9c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c956:	4b1e      	ldr	r3, [pc, #120]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	f003 0303 	and.w	r3, r3, #3
 800c95e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b02      	cmp	r3, #2
 800c964:	d003      	beq.n	800c96e <HAL_RCC_GetSysClockFreq+0xa6>
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d003      	beq.n	800c974 <HAL_RCC_GetSysClockFreq+0xac>
 800c96c:	e005      	b.n	800c97a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c96e:	4b1a      	ldr	r3, [pc, #104]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c970:	617b      	str	r3, [r7, #20]
      break;
 800c972:	e005      	b.n	800c980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c974:	4b19      	ldr	r3, [pc, #100]	; (800c9dc <HAL_RCC_GetSysClockFreq+0x114>)
 800c976:	617b      	str	r3, [r7, #20]
      break;
 800c978:	e002      	b.n	800c980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	617b      	str	r3, [r7, #20]
      break;
 800c97e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c980:	4b13      	ldr	r3, [pc, #76]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	091b      	lsrs	r3, r3, #4
 800c986:	f003 0307 	and.w	r3, r3, #7
 800c98a:	3301      	adds	r3, #1
 800c98c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c98e:	4b10      	ldr	r3, [pc, #64]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	0a1b      	lsrs	r3, r3, #8
 800c994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	fb02 f203 	mul.w	r2, r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c9a6:	4b0a      	ldr	r3, [pc, #40]	; (800c9d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	0e5b      	lsrs	r3, r3, #25
 800c9ac:	f003 0303 	and.w	r3, r3, #3
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c9c0:	69bb      	ldr	r3, [r7, #24]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3724      	adds	r7, #36	; 0x24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	40021000 	.word	0x40021000
 800c9d4:	08023e60 	.word	0x08023e60
 800c9d8:	00f42400 	.word	0x00f42400
 800c9dc:	007a1200 	.word	0x007a1200

0800c9e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c9e4:	4b03      	ldr	r3, [pc, #12]	; (800c9f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	200003d0 	.word	0x200003d0

0800c9f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c9fc:	f7ff fff0 	bl	800c9e0 <HAL_RCC_GetHCLKFreq>
 800ca00:	4602      	mov	r2, r0
 800ca02:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	0a1b      	lsrs	r3, r3, #8
 800ca08:	f003 0307 	and.w	r3, r3, #7
 800ca0c:	4904      	ldr	r1, [pc, #16]	; (800ca20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ca0e:	5ccb      	ldrb	r3, [r1, r3]
 800ca10:	f003 031f 	and.w	r3, r3, #31
 800ca14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	40021000 	.word	0x40021000
 800ca20:	08023e58 	.word	0x08023e58

0800ca24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ca28:	f7ff ffda 	bl	800c9e0 <HAL_RCC_GetHCLKFreq>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	0adb      	lsrs	r3, r3, #11
 800ca34:	f003 0307 	and.w	r3, r3, #7
 800ca38:	4904      	ldr	r1, [pc, #16]	; (800ca4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca3a:	5ccb      	ldrb	r3, [r1, r3]
 800ca3c:	f003 031f 	and.w	r3, r3, #31
 800ca40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	40021000 	.word	0x40021000
 800ca4c:	08023e58 	.word	0x08023e58

0800ca50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	220f      	movs	r2, #15
 800ca5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ca60:	4b12      	ldr	r3, [pc, #72]	; (800caac <HAL_RCC_GetClockConfig+0x5c>)
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	f003 0203 	and.w	r2, r3, #3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ca6c:	4b0f      	ldr	r3, [pc, #60]	; (800caac <HAL_RCC_GetClockConfig+0x5c>)
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ca78:	4b0c      	ldr	r3, [pc, #48]	; (800caac <HAL_RCC_GetClockConfig+0x5c>)
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <HAL_RCC_GetClockConfig+0x5c>)
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	08db      	lsrs	r3, r3, #3
 800ca8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ca92:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <HAL_RCC_GetClockConfig+0x60>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0207 	and.w	r2, r3, #7
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	601a      	str	r2, [r3, #0]
}
 800ca9e:	bf00      	nop
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	40021000 	.word	0x40021000
 800cab0:	40022000 	.word	0x40022000

0800cab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cabc:	2300      	movs	r3, #0
 800cabe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cac0:	4b2a      	ldr	r3, [pc, #168]	; (800cb6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cacc:	f7ff f980 	bl	800bdd0 <HAL_PWREx_GetVoltageRange>
 800cad0:	6178      	str	r0, [r7, #20]
 800cad2:	e014      	b.n	800cafe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cad4:	4b25      	ldr	r3, [pc, #148]	; (800cb6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cad8:	4a24      	ldr	r2, [pc, #144]	; (800cb6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cade:	6593      	str	r3, [r2, #88]	; 0x58
 800cae0:	4b22      	ldr	r3, [pc, #136]	; (800cb6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800caec:	f7ff f970 	bl	800bdd0 <HAL_PWREx_GetVoltageRange>
 800caf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800caf2:	4b1e      	ldr	r3, [pc, #120]	; (800cb6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf6:	4a1d      	ldr	r2, [pc, #116]	; (800cb6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cafc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb04:	d10b      	bne.n	800cb1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b80      	cmp	r3, #128	; 0x80
 800cb0a:	d919      	bls.n	800cb40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2ba0      	cmp	r3, #160	; 0xa0
 800cb10:	d902      	bls.n	800cb18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb12:	2302      	movs	r3, #2
 800cb14:	613b      	str	r3, [r7, #16]
 800cb16:	e013      	b.n	800cb40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb18:	2301      	movs	r3, #1
 800cb1a:	613b      	str	r3, [r7, #16]
 800cb1c:	e010      	b.n	800cb40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b80      	cmp	r3, #128	; 0x80
 800cb22:	d902      	bls.n	800cb2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cb24:	2303      	movs	r3, #3
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	e00a      	b.n	800cb40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b80      	cmp	r3, #128	; 0x80
 800cb2e:	d102      	bne.n	800cb36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb30:	2302      	movs	r3, #2
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	e004      	b.n	800cb40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b70      	cmp	r3, #112	; 0x70
 800cb3a:	d101      	bne.n	800cb40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cb40:	4b0b      	ldr	r3, [pc, #44]	; (800cb70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f023 0207 	bic.w	r2, r3, #7
 800cb48:	4909      	ldr	r1, [pc, #36]	; (800cb70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cb50:	4b07      	ldr	r3, [pc, #28]	; (800cb70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 0307 	and.w	r3, r3, #7
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d001      	beq.n	800cb62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e000      	b.n	800cb64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3718      	adds	r7, #24
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	40021000 	.word	0x40021000
 800cb70:	40022000 	.word	0x40022000

0800cb74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cb80:	2300      	movs	r3, #0
 800cb82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d041      	beq.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb98:	d02a      	beq.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cb9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb9e:	d824      	bhi.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cba4:	d008      	beq.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbaa:	d81e      	bhi.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00a      	beq.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cbb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbb4:	d010      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cbb6:	e018      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cbb8:	4b86      	ldr	r3, [pc, #536]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4a85      	ldr	r2, [pc, #532]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbc4:	e015      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	2100      	movs	r1, #0
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fadf 	bl	800d190 <RCCEx_PLLSAI1_Config>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbd6:	e00c      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3320      	adds	r3, #32
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fbc8 	bl	800d374 <RCCEx_PLLSAI2_Config>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbe8:	e003      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	74fb      	strb	r3, [r7, #19]
      break;
 800cbee:	e000      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cbf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbf2:	7cfb      	ldrb	r3, [r7, #19]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10b      	bne.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cbf8:	4b76      	ldr	r3, [pc, #472]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc06:	4973      	ldr	r1, [pc, #460]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cc0e:	e001      	b.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc10:	7cfb      	ldrb	r3, [r7, #19]
 800cc12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d041      	beq.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc28:	d02a      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cc2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc2e:	d824      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc34:	d008      	beq.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cc36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc3a:	d81e      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00a      	beq.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800cc40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc44:	d010      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cc46:	e018      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cc48:	4b62      	ldr	r3, [pc, #392]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	4a61      	ldr	r2, [pc, #388]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc54:	e015      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 fa97 	bl	800d190 <RCCEx_PLLSAI1_Config>
 800cc62:	4603      	mov	r3, r0
 800cc64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc66:	e00c      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3320      	adds	r3, #32
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 fb80 	bl	800d374 <RCCEx_PLLSAI2_Config>
 800cc74:	4603      	mov	r3, r0
 800cc76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc78:	e003      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	74fb      	strb	r3, [r7, #19]
      break;
 800cc7e:	e000      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800cc80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc82:	7cfb      	ldrb	r3, [r7, #19]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10b      	bne.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cc88:	4b52      	ldr	r3, [pc, #328]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc96:	494f      	ldr	r1, [pc, #316]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cc9e:	e001      	b.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca0:	7cfb      	ldrb	r3, [r7, #19]
 800cca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 80a0 	beq.w	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ccb6:	4b47      	ldr	r3, [pc, #284]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e000      	b.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00d      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cccc:	4b41      	ldr	r3, [pc, #260]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd0:	4a40      	ldr	r2, [pc, #256]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccd6:	6593      	str	r3, [r2, #88]	; 0x58
 800ccd8:	4b3e      	ldr	r3, [pc, #248]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cce0:	60bb      	str	r3, [r7, #8]
 800cce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cce4:	2301      	movs	r3, #1
 800cce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cce8:	4b3b      	ldr	r3, [pc, #236]	; (800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a3a      	ldr	r2, [pc, #232]	; (800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ccee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ccf4:	f7fa fefe 	bl	8007af4 <HAL_GetTick>
 800ccf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ccfa:	e009      	b.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ccfc:	f7fa fefa 	bl	8007af4 <HAL_GetTick>
 800cd00:	4602      	mov	r2, r0
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d902      	bls.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	74fb      	strb	r3, [r7, #19]
        break;
 800cd0e:	e005      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd10:	4b31      	ldr	r3, [pc, #196]	; (800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d0ef      	beq.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800cd1c:	7cfb      	ldrb	r3, [r7, #19]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d15c      	bne.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd22:	4b2c      	ldr	r3, [pc, #176]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d01f      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d019      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd40:	4b24      	ldr	r3, [pc, #144]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd4c:	4b21      	ldr	r3, [pc, #132]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd52:	4a20      	ldr	r2, [pc, #128]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd5c:	4b1d      	ldr	r3, [pc, #116]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd62:	4a1c      	ldr	r2, [pc, #112]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cd6c:	4a19      	ldr	r2, [pc, #100]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d016      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd7e:	f7fa feb9 	bl	8007af4 <HAL_GetTick>
 800cd82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd84:	e00b      	b.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd86:	f7fa feb5 	bl	8007af4 <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d902      	bls.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	74fb      	strb	r3, [r7, #19]
            break;
 800cd9c:	e006      	b.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd9e:	4b0d      	ldr	r3, [pc, #52]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cda0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda4:	f003 0302 	and.w	r3, r3, #2
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d0ec      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800cdac:	7cfb      	ldrb	r3, [r7, #19]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10c      	bne.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdb2:	4b08      	ldr	r3, [pc, #32]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdc2:	4904      	ldr	r1, [pc, #16]	; (800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cdca:	e009      	b.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cdcc:	7cfb      	ldrb	r3, [r7, #19]
 800cdce:	74bb      	strb	r3, [r7, #18]
 800cdd0:	e006      	b.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800cdd2:	bf00      	nop
 800cdd4:	40021000 	.word	0x40021000
 800cdd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cddc:	7cfb      	ldrb	r3, [r7, #19]
 800cdde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cde0:	7c7b      	ldrb	r3, [r7, #17]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d105      	bne.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cde6:	4ba6      	ldr	r3, [pc, #664]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cde8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdea:	4aa5      	ldr	r2, [pc, #660]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00a      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cdfe:	4ba0      	ldr	r3, [pc, #640]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce04:	f023 0203 	bic.w	r2, r3, #3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0c:	499c      	ldr	r1, [pc, #624]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00a      	beq.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce20:	4b97      	ldr	r3, [pc, #604]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce26:	f023 020c 	bic.w	r2, r3, #12
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce2e:	4994      	ldr	r1, [pc, #592]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce30:	4313      	orrs	r3, r2
 800ce32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f003 0304 	and.w	r3, r3, #4
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00a      	beq.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce42:	4b8f      	ldr	r3, [pc, #572]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce50:	498b      	ldr	r1, [pc, #556]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce52:	4313      	orrs	r3, r2
 800ce54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 0308 	and.w	r3, r3, #8
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00a      	beq.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce64:	4b86      	ldr	r3, [pc, #536]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce72:	4983      	ldr	r1, [pc, #524]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce74:	4313      	orrs	r3, r2
 800ce76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 0310 	and.w	r3, r3, #16
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00a      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ce86:	4b7e      	ldr	r3, [pc, #504]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce94:	497a      	ldr	r1, [pc, #488]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce96:	4313      	orrs	r3, r2
 800ce98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f003 0320 	and.w	r3, r3, #32
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00a      	beq.n	800cebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cea8:	4b75      	ldr	r3, [pc, #468]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb6:	4972      	ldr	r1, [pc, #456]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ceca:	4b6d      	ldr	r3, [pc, #436]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ced0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ced8:	4969      	ldr	r1, [pc, #420]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceda:	4313      	orrs	r3, r2
 800cedc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00a      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ceec:	4b64      	ldr	r3, [pc, #400]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cefa:	4961      	ldr	r1, [pc, #388]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cefc:	4313      	orrs	r3, r2
 800cefe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf0e:	4b5c      	ldr	r3, [pc, #368]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf1c:	4958      	ldr	r1, [pc, #352]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00a      	beq.n	800cf46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf30:	4b53      	ldr	r3, [pc, #332]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf3e:	4950      	ldr	r1, [pc, #320]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf40:	4313      	orrs	r3, r2
 800cf42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00a      	beq.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf52:	4b4b      	ldr	r3, [pc, #300]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf60:	4947      	ldr	r1, [pc, #284]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00a      	beq.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf74:	4b42      	ldr	r3, [pc, #264]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf7a:	f023 0203 	bic.w	r2, r3, #3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf82:	493f      	ldr	r1, [pc, #252]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf84:	4313      	orrs	r3, r2
 800cf86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d028      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cf96:	4b3a      	ldr	r3, [pc, #232]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa4:	4936      	ldr	r1, [pc, #216]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfb4:	d106      	bne.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfb6:	4b32      	ldr	r3, [pc, #200]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	4a31      	ldr	r2, [pc, #196]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfc0:	60d3      	str	r3, [r2, #12]
 800cfc2:	e011      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfcc:	d10c      	bne.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 f8db 	bl	800d190 <RCCEx_PLLSAI1_Config>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cfde:	7cfb      	ldrb	r3, [r7, #19]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800cfe4:	7cfb      	ldrb	r3, [r7, #19]
 800cfe6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d028      	beq.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cff4:	4b22      	ldr	r3, [pc, #136]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d002:	491f      	ldr	r1, [pc, #124]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d004:	4313      	orrs	r3, r2
 800d006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d00e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d012:	d106      	bne.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d014:	4b1a      	ldr	r3, [pc, #104]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	4a19      	ldr	r2, [pc, #100]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d01e:	60d3      	str	r3, [r2, #12]
 800d020:	e011      	b.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d02a:	d10c      	bne.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3304      	adds	r3, #4
 800d030:	2101      	movs	r1, #1
 800d032:	4618      	mov	r0, r3
 800d034:	f000 f8ac 	bl	800d190 <RCCEx_PLLSAI1_Config>
 800d038:	4603      	mov	r3, r0
 800d03a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d03c:	7cfb      	ldrb	r3, [r7, #19]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800d042:	7cfb      	ldrb	r3, [r7, #19]
 800d044:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d02a      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d052:	4b0b      	ldr	r3, [pc, #44]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d058:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d060:	4907      	ldr	r1, [pc, #28]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d062:	4313      	orrs	r3, r2
 800d064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d06c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d070:	d108      	bne.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d072:	4b03      	ldr	r3, [pc, #12]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	4a02      	ldr	r2, [pc, #8]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d07c:	60d3      	str	r3, [r2, #12]
 800d07e:	e013      	b.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800d080:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d08c:	d10c      	bne.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3304      	adds	r3, #4
 800d092:	2101      	movs	r1, #1
 800d094:	4618      	mov	r0, r3
 800d096:	f000 f87b 	bl	800d190 <RCCEx_PLLSAI1_Config>
 800d09a:	4603      	mov	r3, r0
 800d09c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d09e:	7cfb      	ldrb	r3, [r7, #19]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800d0a4:	7cfb      	ldrb	r3, [r7, #19]
 800d0a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d02f      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0b4:	4b2c      	ldr	r3, [pc, #176]	; (800d168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	4929      	ldr	r1, [pc, #164]	; (800d168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0d2:	d10d      	bne.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	2102      	movs	r1, #2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 f858 	bl	800d190 <RCCEx_PLLSAI1_Config>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0e4:	7cfb      	ldrb	r3, [r7, #19]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d014      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d0ea:	7cfb      	ldrb	r3, [r7, #19]
 800d0ec:	74bb      	strb	r3, [r7, #18]
 800d0ee:	e011      	b.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0f8:	d10c      	bne.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3320      	adds	r3, #32
 800d0fe:	2102      	movs	r1, #2
 800d100:	4618      	mov	r0, r3
 800d102:	f000 f937 	bl	800d374 <RCCEx_PLLSAI2_Config>
 800d106:	4603      	mov	r3, r0
 800d108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d10a:	7cfb      	ldrb	r3, [r7, #19]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d001      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d110:	7cfb      	ldrb	r3, [r7, #19]
 800d112:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d120:	4b11      	ldr	r3, [pc, #68]	; (800d168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d126:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d130:	490d      	ldr	r1, [pc, #52]	; (800d168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d132:	4313      	orrs	r3, r2
 800d134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00b      	beq.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d144:	4b08      	ldr	r3, [pc, #32]	; (800d168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d14a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d154:	4904      	ldr	r1, [pc, #16]	; (800d168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d156:	4313      	orrs	r3, r2
 800d158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d15c:	7cbb      	ldrb	r3, [r7, #18]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3718      	adds	r7, #24
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	40021000 	.word	0x40021000

0800d16c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800d16c:	b480      	push	{r7}
 800d16e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800d170:	4b06      	ldr	r3, [pc, #24]	; (800d18c <HAL_RCCEx_EnableLSECSS+0x20>)
 800d172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d176:	4a05      	ldr	r2, [pc, #20]	; (800d18c <HAL_RCCEx_EnableLSECSS+0x20>)
 800d178:	f043 0320 	orr.w	r3, r3, #32
 800d17c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d180:	bf00      	nop
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	40021000 	.word	0x40021000

0800d190 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d19e:	4b74      	ldr	r3, [pc, #464]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	f003 0303 	and.w	r3, r3, #3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d018      	beq.n	800d1dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d1aa:	4b71      	ldr	r3, [pc, #452]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	f003 0203 	and.w	r2, r3, #3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d10d      	bne.n	800d1d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
       ||
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d009      	beq.n	800d1d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d1c2:	4b6b      	ldr	r3, [pc, #428]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	091b      	lsrs	r3, r3, #4
 800d1c8:	f003 0307 	and.w	r3, r3, #7
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	685b      	ldr	r3, [r3, #4]
       ||
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d047      	beq.n	800d266 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	73fb      	strb	r3, [r7, #15]
 800d1da:	e044      	b.n	800d266 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d018      	beq.n	800d216 <RCCEx_PLLSAI1_Config+0x86>
 800d1e4:	2b03      	cmp	r3, #3
 800d1e6:	d825      	bhi.n	800d234 <RCCEx_PLLSAI1_Config+0xa4>
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d002      	beq.n	800d1f2 <RCCEx_PLLSAI1_Config+0x62>
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d009      	beq.n	800d204 <RCCEx_PLLSAI1_Config+0x74>
 800d1f0:	e020      	b.n	800d234 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d1f2:	4b5f      	ldr	r3, [pc, #380]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 0302 	and.w	r3, r3, #2
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d11d      	bne.n	800d23a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d202:	e01a      	b.n	800d23a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d204:	4b5a      	ldr	r3, [pc, #360]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d116      	bne.n	800d23e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d214:	e013      	b.n	800d23e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d216:	4b56      	ldr	r3, [pc, #344]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10f      	bne.n	800d242 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d222:	4b53      	ldr	r3, [pc, #332]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d109      	bne.n	800d242 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d232:	e006      	b.n	800d242 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	73fb      	strb	r3, [r7, #15]
      break;
 800d238:	e004      	b.n	800d244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d23a:	bf00      	nop
 800d23c:	e002      	b.n	800d244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d23e:	bf00      	nop
 800d240:	e000      	b.n	800d244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d242:	bf00      	nop
    }

    if(status == HAL_OK)
 800d244:	7bfb      	ldrb	r3, [r7, #15]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10d      	bne.n	800d266 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d24a:	4b49      	ldr	r3, [pc, #292]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6819      	ldr	r1, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	011b      	lsls	r3, r3, #4
 800d25e:	430b      	orrs	r3, r1
 800d260:	4943      	ldr	r1, [pc, #268]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d262:	4313      	orrs	r3, r2
 800d264:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d17c      	bne.n	800d366 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d26c:	4b40      	ldr	r3, [pc, #256]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a3f      	ldr	r2, [pc, #252]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d278:	f7fa fc3c 	bl	8007af4 <HAL_GetTick>
 800d27c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d27e:	e009      	b.n	800d294 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d280:	f7fa fc38 	bl	8007af4 <HAL_GetTick>
 800d284:	4602      	mov	r2, r0
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d902      	bls.n	800d294 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	73fb      	strb	r3, [r7, #15]
        break;
 800d292:	e005      	b.n	800d2a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d294:	4b36      	ldr	r3, [pc, #216]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1ef      	bne.n	800d280 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d15f      	bne.n	800d366 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d110      	bne.n	800d2ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2ac:	4b30      	ldr	r3, [pc, #192]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d2b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6892      	ldr	r2, [r2, #8]
 800d2bc:	0211      	lsls	r1, r2, #8
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	68d2      	ldr	r2, [r2, #12]
 800d2c2:	06d2      	lsls	r2, r2, #27
 800d2c4:	430a      	orrs	r2, r1
 800d2c6:	492a      	ldr	r1, [pc, #168]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	610b      	str	r3, [r1, #16]
 800d2cc:	e027      	b.n	800d31e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d112      	bne.n	800d2fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2d4:	4b26      	ldr	r3, [pc, #152]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d2dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	6892      	ldr	r2, [r2, #8]
 800d2e4:	0211      	lsls	r1, r2, #8
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	6912      	ldr	r2, [r2, #16]
 800d2ea:	0852      	lsrs	r2, r2, #1
 800d2ec:	3a01      	subs	r2, #1
 800d2ee:	0552      	lsls	r2, r2, #21
 800d2f0:	430a      	orrs	r2, r1
 800d2f2:	491f      	ldr	r1, [pc, #124]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	610b      	str	r3, [r1, #16]
 800d2f8:	e011      	b.n	800d31e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2fa:	4b1d      	ldr	r3, [pc, #116]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d302:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	6892      	ldr	r2, [r2, #8]
 800d30a:	0211      	lsls	r1, r2, #8
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	6952      	ldr	r2, [r2, #20]
 800d310:	0852      	lsrs	r2, r2, #1
 800d312:	3a01      	subs	r2, #1
 800d314:	0652      	lsls	r2, r2, #25
 800d316:	430a      	orrs	r2, r1
 800d318:	4915      	ldr	r1, [pc, #84]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d31e:	4b14      	ldr	r3, [pc, #80]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a13      	ldr	r2, [pc, #76]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d328:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d32a:	f7fa fbe3 	bl	8007af4 <HAL_GetTick>
 800d32e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d330:	e009      	b.n	800d346 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d332:	f7fa fbdf 	bl	8007af4 <HAL_GetTick>
 800d336:	4602      	mov	r2, r0
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d902      	bls.n	800d346 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	73fb      	strb	r3, [r7, #15]
          break;
 800d344:	e005      	b.n	800d352 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d346:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d0ef      	beq.n	800d332 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d106      	bne.n	800d366 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d35a:	691a      	ldr	r2, [r3, #16]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	4903      	ldr	r1, [pc, #12]	; (800d370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d362:	4313      	orrs	r3, r2
 800d364:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d366:	7bfb      	ldrb	r3, [r7, #15]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	40021000 	.word	0x40021000

0800d374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d382:	4b69      	ldr	r3, [pc, #420]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	f003 0303 	and.w	r3, r3, #3
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d018      	beq.n	800d3c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d38e:	4b66      	ldr	r3, [pc, #408]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	f003 0203 	and.w	r2, r3, #3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d10d      	bne.n	800d3ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
       ||
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d009      	beq.n	800d3ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d3a6:	4b60      	ldr	r3, [pc, #384]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	091b      	lsrs	r3, r3, #4
 800d3ac:	f003 0307 	and.w	r3, r3, #7
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	685b      	ldr	r3, [r3, #4]
       ||
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d047      	beq.n	800d44a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	73fb      	strb	r3, [r7, #15]
 800d3be:	e044      	b.n	800d44a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d018      	beq.n	800d3fa <RCCEx_PLLSAI2_Config+0x86>
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d825      	bhi.n	800d418 <RCCEx_PLLSAI2_Config+0xa4>
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d002      	beq.n	800d3d6 <RCCEx_PLLSAI2_Config+0x62>
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d009      	beq.n	800d3e8 <RCCEx_PLLSAI2_Config+0x74>
 800d3d4:	e020      	b.n	800d418 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d3d6:	4b54      	ldr	r3, [pc, #336]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0302 	and.w	r3, r3, #2
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d11d      	bne.n	800d41e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d3e6:	e01a      	b.n	800d41e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d3e8:	4b4f      	ldr	r3, [pc, #316]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d116      	bne.n	800d422 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d3f8:	e013      	b.n	800d422 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d3fa:	4b4b      	ldr	r3, [pc, #300]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10f      	bne.n	800d426 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d406:	4b48      	ldr	r3, [pc, #288]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d109      	bne.n	800d426 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d416:	e006      	b.n	800d426 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d418:	2301      	movs	r3, #1
 800d41a:	73fb      	strb	r3, [r7, #15]
      break;
 800d41c:	e004      	b.n	800d428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d41e:	bf00      	nop
 800d420:	e002      	b.n	800d428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d422:	bf00      	nop
 800d424:	e000      	b.n	800d428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d426:	bf00      	nop
    }

    if(status == HAL_OK)
 800d428:	7bfb      	ldrb	r3, [r7, #15]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10d      	bne.n	800d44a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d42e:	4b3e      	ldr	r3, [pc, #248]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6819      	ldr	r1, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	3b01      	subs	r3, #1
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	430b      	orrs	r3, r1
 800d444:	4938      	ldr	r1, [pc, #224]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d446:	4313      	orrs	r3, r2
 800d448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d166      	bne.n	800d51e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d450:	4b35      	ldr	r3, [pc, #212]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a34      	ldr	r2, [pc, #208]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d45a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d45c:	f7fa fb4a 	bl	8007af4 <HAL_GetTick>
 800d460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d462:	e009      	b.n	800d478 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d464:	f7fa fb46 	bl	8007af4 <HAL_GetTick>
 800d468:	4602      	mov	r2, r0
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d902      	bls.n	800d478 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d472:	2303      	movs	r3, #3
 800d474:	73fb      	strb	r3, [r7, #15]
        break;
 800d476:	e005      	b.n	800d484 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d478:	4b2b      	ldr	r3, [pc, #172]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1ef      	bne.n	800d464 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d484:	7bfb      	ldrb	r3, [r7, #15]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d149      	bne.n	800d51e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d110      	bne.n	800d4b2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d490:	4b25      	ldr	r3, [pc, #148]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d492:	695b      	ldr	r3, [r3, #20]
 800d494:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	6892      	ldr	r2, [r2, #8]
 800d4a0:	0211      	lsls	r1, r2, #8
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	68d2      	ldr	r2, [r2, #12]
 800d4a6:	06d2      	lsls	r2, r2, #27
 800d4a8:	430a      	orrs	r2, r1
 800d4aa:	491f      	ldr	r1, [pc, #124]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	614b      	str	r3, [r1, #20]
 800d4b0:	e011      	b.n	800d4d6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d4b2:	4b1d      	ldr	r3, [pc, #116]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d4ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6892      	ldr	r2, [r2, #8]
 800d4c2:	0211      	lsls	r1, r2, #8
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	6912      	ldr	r2, [r2, #16]
 800d4c8:	0852      	lsrs	r2, r2, #1
 800d4ca:	3a01      	subs	r2, #1
 800d4cc:	0652      	lsls	r2, r2, #25
 800d4ce:	430a      	orrs	r2, r1
 800d4d0:	4915      	ldr	r1, [pc, #84]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d4d6:	4b14      	ldr	r3, [pc, #80]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a13      	ldr	r2, [pc, #76]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4e2:	f7fa fb07 	bl	8007af4 <HAL_GetTick>
 800d4e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d4e8:	e009      	b.n	800d4fe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d4ea:	f7fa fb03 	bl	8007af4 <HAL_GetTick>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d902      	bls.n	800d4fe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	73fb      	strb	r3, [r7, #15]
          break;
 800d4fc:	e005      	b.n	800d50a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d4fe:	4b0a      	ldr	r3, [pc, #40]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0ef      	beq.n	800d4ea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d510:	4b05      	ldr	r3, [pc, #20]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d512:	695a      	ldr	r2, [r3, #20]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	695b      	ldr	r3, [r3, #20]
 800d518:	4903      	ldr	r1, [pc, #12]	; (800d528 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d51a:	4313      	orrs	r3, r2
 800d51c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	40021000 	.word	0x40021000

0800d52c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d06c      	beq.n	800d618 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d106      	bne.n	800d558 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7f9 fc72 	bl	8006e3c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2202      	movs	r2, #2
 800d55c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	22ca      	movs	r2, #202	; 0xca
 800d566:	625a      	str	r2, [r3, #36]	; 0x24
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2253      	movs	r2, #83	; 0x53
 800d56e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fabe 	bl	800daf2 <RTC_EnterInitMode>
 800d576:	4603      	mov	r3, r0
 800d578:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d57a:	7bfb      	ldrb	r3, [r7, #15]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d14b      	bne.n	800d618 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d58e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d592:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6899      	ldr	r1, [r3, #8]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685a      	ldr	r2, [r3, #4]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	431a      	orrs	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	430a      	orrs	r2, r1
 800d5b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	68d2      	ldr	r2, [r2, #12]
 800d5ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6919      	ldr	r1, [r3, #16]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	041a      	lsls	r2, r3, #16
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	430a      	orrs	r2, r1
 800d5ce:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fac1 	bl	800db58 <RTC_ExitInitMode>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d11b      	bne.n	800d618 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f022 0203 	bic.w	r2, r2, #3
 800d5ee:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	69da      	ldr	r2, [r3, #28]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	695b      	ldr	r3, [r3, #20]
 800d5fe:	431a      	orrs	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	430a      	orrs	r2, r1
 800d606:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	22ff      	movs	r2, #255	; 0xff
 800d60e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2201      	movs	r2, #1
 800d614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d618:	7bfb      	ldrb	r3, [r7, #15]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
	...

0800d624 <HAL_RTC_DeInit>:
  * @note   This function does not reset the RTC Backup Data registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d063      	beq.n	800d6fe <HAL_RTC_DeInit+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2202      	movs	r2, #2
 800d63a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	22ca      	movs	r2, #202	; 0xca
 800d644:	625a      	str	r2, [r3, #36]	; 0x24
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2253      	movs	r2, #83	; 0x53
 800d64c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fa4f 	bl	800daf2 <RTC_EnterInitMode>
 800d654:	4603      	mov	r3, r0
 800d656:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d658:	7bfb      	ldrb	r3, [r7, #15]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d14f      	bne.n	800d6fe <HAL_RTC_DeInit+0xda>
    {
      /* Reset all RTC CR register bits */
      hrtc->Instance->TR = 0x00000000U;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2200      	movs	r2, #0
 800d664:	601a      	str	r2, [r3, #0]
      hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f242 1201 	movw	r2, #8449	; 0x2101
 800d66e:	605a      	str	r2, [r3, #4]
      hrtc->Instance->CR &= 0x00000000U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2200      	movs	r2, #0
 800d67c:	609a      	str	r2, [r3, #8]

      hrtc->Instance->WUTR = RTC_WUTR_WUT;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d686:	615a      	str	r2, [r3, #20]
      hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a1e      	ldr	r2, [pc, #120]	; (800d708 <HAL_RTC_DeInit+0xe4>)
 800d68e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->ALRMAR = 0x00000000U;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2200      	movs	r2, #0
 800d696:	61da      	str	r2, [r3, #28]
      hrtc->Instance->ALRMBR = 0x00000000U;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2200      	movs	r2, #0
 800d69e:	621a      	str	r2, [r3, #32]
      hrtc->Instance->SHIFTR = 0x00000000U;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->Instance->CALR = 0x00000000U;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Instance->ALRMASSR = 0x00000000U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Instance->ALRMBSSR = 0x00000000U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	649a      	str	r2, [r3, #72]	; 0x48

      /* Exit initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fa49 	bl	800db58 <RTC_ExitInitMode>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	73fb      	strb	r3, [r7, #15]


      if (status == HAL_OK)
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d116      	bne.n	800d6fe <HAL_RTC_DeInit+0xda>
        /* Reset TAMP registers */
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR1 = 0xFFFF0000U;
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR2 = 0x00000000U;
#else
        /* Reset Tamper configuration register */
        hrtc->Instance->TAMPCR = 0x00000000U;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Reset Option register */
        hrtc->Instance->OR = 0x00000000U;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	22ff      	movs	r2, #255	; 0xff
 800d6e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* DeInit the low level hardware: CLOCK, NVIC.*/
        hrtc->MspDeInitCallback(hrtc);
#else
        /* De-Initialize RTC MSP */
        HAL_RTC_MspDeInit(hrtc);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7f9 fbd9 	bl	8006ea0 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

        hrtc->State = HAL_RTC_STATE_RESET;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Release Lock */
        __HAL_UNLOCK(hrtc);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 2020 	strb.w	r2, [r3, #32]
      }
    }
  }

  return status;
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	007f00ff 	.word	0x007f00ff

0800d70c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d70c:	b590      	push	{r4, r7, lr}
 800d70e:	b087      	sub	sp, #28
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d101      	bne.n	800d726 <HAL_RTC_SetTime+0x1a>
 800d722:	2302      	movs	r3, #2
 800d724:	e08b      	b.n	800d83e <HAL_RTC_SetTime+0x132>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2202      	movs	r2, #2
 800d732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	22ca      	movs	r2, #202	; 0xca
 800d73c:	625a      	str	r2, [r3, #36]	; 0x24
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2253      	movs	r2, #83	; 0x53
 800d744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f000 f9d3 	bl	800daf2 <RTC_EnterInitMode>
 800d74c:	4603      	mov	r3, r0
 800d74e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d750:	7cfb      	ldrb	r3, [r7, #19]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d163      	bne.n	800d81e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d126      	bne.n	800d7aa <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d766:	2b00      	cmp	r3, #0
 800d768:	d102      	bne.n	800d770 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	2200      	movs	r2, #0
 800d76e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	4618      	mov	r0, r3
 800d776:	f000 fa2d 	bl	800dbd4 <RTC_ByteToBcd2>
 800d77a:	4603      	mov	r3, r0
 800d77c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	785b      	ldrb	r3, [r3, #1]
 800d782:	4618      	mov	r0, r3
 800d784:	f000 fa26 	bl	800dbd4 <RTC_ByteToBcd2>
 800d788:	4603      	mov	r3, r0
 800d78a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d78c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	789b      	ldrb	r3, [r3, #2]
 800d792:	4618      	mov	r0, r3
 800d794:	f000 fa1e 	bl	800dbd4 <RTC_ByteToBcd2>
 800d798:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d79a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	78db      	ldrb	r3, [r3, #3]
 800d7a2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]
 800d7a8:	e018      	b.n	800d7dc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d102      	bne.n	800d7be <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	785b      	ldrb	r3, [r3, #1]
 800d7c8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7ca:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7d0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	78db      	ldrb	r3, [r3, #3]
 800d7d6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d7e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d7ea:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	689a      	ldr	r2, [r3, #8]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d7fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6899      	ldr	r1, [r3, #8]
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	431a      	orrs	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 f99f 	bl	800db58 <RTC_ExitInitMode>
 800d81a:	4603      	mov	r3, r0
 800d81c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	22ff      	movs	r2, #255	; 0xff
 800d824:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d826:	7cfb      	ldrb	r3, [r7, #19]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d103      	bne.n	800d834 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d83c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	bd90      	pop	{r4, r7, pc}

0800d846 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b086      	sub	sp, #24
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	60f8      	str	r0, [r7, #12]
 800d84e:	60b9      	str	r1, [r7, #8]
 800d850:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d874:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d878:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	0c1b      	lsrs	r3, r3, #16
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d884:	b2da      	uxtb	r2, r3
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	0a1b      	lsrs	r3, r3, #8
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d894:	b2da      	uxtb	r2, r3
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	0d9b      	lsrs	r3, r3, #22
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d11a      	bne.n	800d8f4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 f9a6 	bl	800dc14 <RTC_Bcd2ToByte>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	785b      	ldrb	r3, [r3, #1]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 f99d 	bl	800dc14 <RTC_Bcd2ToByte>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	461a      	mov	r2, r3
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	789b      	ldrb	r3, [r3, #2]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f000 f994 	bl	800dc14 <RTC_Bcd2ToByte>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d8fe:	b590      	push	{r4, r7, lr}
 800d900:	b087      	sub	sp, #28
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	60b9      	str	r1, [r7, #8]
 800d908:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d101      	bne.n	800d918 <HAL_RTC_SetDate+0x1a>
 800d914:	2302      	movs	r3, #2
 800d916:	e075      	b.n	800da04 <HAL_RTC_SetDate+0x106>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2202      	movs	r2, #2
 800d924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10e      	bne.n	800d94c <HAL_RTC_SetDate+0x4e>
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	785b      	ldrb	r3, [r3, #1]
 800d932:	f003 0310 	and.w	r3, r3, #16
 800d936:	2b00      	cmp	r3, #0
 800d938:	d008      	beq.n	800d94c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	785b      	ldrb	r3, [r3, #1]
 800d93e:	f023 0310 	bic.w	r3, r3, #16
 800d942:	b2db      	uxtb	r3, r3
 800d944:	330a      	adds	r3, #10
 800d946:	b2da      	uxtb	r2, r3
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d11c      	bne.n	800d98c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	78db      	ldrb	r3, [r3, #3]
 800d956:	4618      	mov	r0, r3
 800d958:	f000 f93c 	bl	800dbd4 <RTC_ByteToBcd2>
 800d95c:	4603      	mov	r3, r0
 800d95e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	785b      	ldrb	r3, [r3, #1]
 800d964:	4618      	mov	r0, r3
 800d966:	f000 f935 	bl	800dbd4 <RTC_ByteToBcd2>
 800d96a:	4603      	mov	r3, r0
 800d96c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d96e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	789b      	ldrb	r3, [r3, #2]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 f92d 	bl	800dbd4 <RTC_ByteToBcd2>
 800d97a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d97c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d986:	4313      	orrs	r3, r2
 800d988:	617b      	str	r3, [r7, #20]
 800d98a:	e00e      	b.n	800d9aa <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	78db      	ldrb	r3, [r3, #3]
 800d990:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	785b      	ldrb	r3, [r3, #1]
 800d996:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d998:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d99e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	22ca      	movs	r2, #202	; 0xca
 800d9b0:	625a      	str	r2, [r3, #36]	; 0x24
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2253      	movs	r2, #83	; 0x53
 800d9b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f000 f899 	bl	800daf2 <RTC_EnterInitMode>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d9c4:	7cfb      	ldrb	r3, [r7, #19]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10c      	bne.n	800d9e4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f000 f8bc 	bl	800db58 <RTC_ExitInitMode>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	22ff      	movs	r2, #255	; 0xff
 800d9ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d9ec:	7cfb      	ldrb	r3, [r7, #19]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d103      	bne.n	800d9fa <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da02:	7cfb      	ldrb	r3, [r7, #19]
}
 800da04:	4618      	mov	r0, r3
 800da06:	371c      	adds	r7, #28
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd90      	pop	{r4, r7, pc}

0800da0c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	0c1b      	lsrs	r3, r3, #16
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	0a1b      	lsrs	r3, r3, #8
 800da36:	b2db      	uxtb	r3, r3
 800da38:	f003 031f 	and.w	r3, r3, #31
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	b2db      	uxtb	r3, r3
 800da46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da4a:	b2da      	uxtb	r2, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	0b5b      	lsrs	r3, r3, #13
 800da54:	b2db      	uxtb	r3, r3
 800da56:	f003 0307 	and.w	r3, r3, #7
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d11a      	bne.n	800da9c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	78db      	ldrb	r3, [r3, #3]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 f8d2 	bl	800dc14 <RTC_Bcd2ToByte>
 800da70:	4603      	mov	r3, r0
 800da72:	461a      	mov	r2, r3
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	785b      	ldrb	r3, [r3, #1]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f000 f8c9 	bl	800dc14 <RTC_Bcd2ToByte>
 800da82:	4603      	mov	r3, r0
 800da84:	461a      	mov	r2, r3
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	789b      	ldrb	r3, [r3, #2]
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 f8c0 	bl	800dc14 <RTC_Bcd2ToByte>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3718      	adds	r7, #24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	68da      	ldr	r2, [r3, #12]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dabc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800dabe:	f7fa f819 	bl	8007af4 <HAL_GetTick>
 800dac2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dac4:	e009      	b.n	800dada <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dac6:	f7fa f815 	bl	8007af4 <HAL_GetTick>
 800daca:	4602      	mov	r2, r0
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dad4:	d901      	bls.n	800dada <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dad6:	2303      	movs	r3, #3
 800dad8:	e007      	b.n	800daea <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	f003 0320 	and.w	r3, r3, #32
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d0ee      	beq.n	800dac6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d120      	bne.n	800db4e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f04f 32ff 	mov.w	r2, #4294967295
 800db14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800db16:	f7f9 ffed 	bl	8007af4 <HAL_GetTick>
 800db1a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db1c:	e00d      	b.n	800db3a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800db1e:	f7f9 ffe9 	bl	8007af4 <HAL_GetTick>
 800db22:	4602      	mov	r2, r0
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db2c:	d905      	bls.n	800db3a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800db2e:	2303      	movs	r3, #3
 800db30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2203      	movs	r2, #3
 800db36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db44:	2b00      	cmp	r3, #0
 800db46:	d102      	bne.n	800db4e <RTC_EnterInitMode+0x5c>
 800db48:	7bfb      	ldrb	r3, [r7, #15]
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d1e7      	bne.n	800db1e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800db64:	4b1a      	ldr	r3, [pc, #104]	; (800dbd0 <RTC_ExitInitMode+0x78>)
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	4a19      	ldr	r2, [pc, #100]	; (800dbd0 <RTC_ExitInitMode+0x78>)
 800db6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db6e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800db70:	4b17      	ldr	r3, [pc, #92]	; (800dbd0 <RTC_ExitInitMode+0x78>)
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f003 0320 	and.w	r3, r3, #32
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10c      	bne.n	800db96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff ff92 	bl	800daa6 <HAL_RTC_WaitForSynchro>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01e      	beq.n	800dbc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2203      	movs	r2, #3
 800db8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800db90:	2303      	movs	r3, #3
 800db92:	73fb      	strb	r3, [r7, #15]
 800db94:	e017      	b.n	800dbc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800db96:	4b0e      	ldr	r3, [pc, #56]	; (800dbd0 <RTC_ExitInitMode+0x78>)
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	4a0d      	ldr	r2, [pc, #52]	; (800dbd0 <RTC_ExitInitMode+0x78>)
 800db9c:	f023 0320 	bic.w	r3, r3, #32
 800dba0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7ff ff7f 	bl	800daa6 <HAL_RTC_WaitForSynchro>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d005      	beq.n	800dbba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2203      	movs	r2, #3
 800dbb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbba:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <RTC_ExitInitMode+0x78>)
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	4a04      	ldr	r2, [pc, #16]	; (800dbd0 <RTC_ExitInitMode+0x78>)
 800dbc0:	f043 0320 	orr.w	r3, r3, #32
 800dbc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	40002800 	.word	0x40002800

0800dbd4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	4603      	mov	r3, r0
 800dbdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800dbe2:	79fb      	ldrb	r3, [r7, #7]
 800dbe4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800dbe6:	e005      	b.n	800dbf4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	3301      	adds	r3, #1
 800dbec:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800dbee:	7afb      	ldrb	r3, [r7, #11]
 800dbf0:	3b0a      	subs	r3, #10
 800dbf2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800dbf4:	7afb      	ldrb	r3, [r7, #11]
 800dbf6:	2b09      	cmp	r3, #9
 800dbf8:	d8f6      	bhi.n	800dbe8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	011b      	lsls	r3, r3, #4
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	7afb      	ldrb	r3, [r7, #11]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	b2db      	uxtb	r3, r3
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	091b      	lsrs	r3, r3, #4
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	461a      	mov	r2, r3
 800dc26:	0092      	lsls	r2, r2, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	005b      	lsls	r3, r3, #1
 800dc2c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dc2e:	79fb      	ldrb	r3, [r7, #7]
 800dc30:	f003 030f 	and.w	r3, r3, #15
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
 800dc38:	4413      	add	r3, r2
 800dc3a:	b2db      	uxtb	r3, r3
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d101      	bne.n	800dc5e <HAL_RTCEx_EnableBypassShadow+0x16>
 800dc5a:	2302      	movs	r3, #2
 800dc5c:	e024      	b.n	800dca8 <HAL_RTCEx_EnableBypassShadow+0x60>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2202      	movs	r2, #2
 800dc6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	22ca      	movs	r2, #202	; 0xca
 800dc74:	625a      	str	r2, [r3, #36]	; 0x24
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2253      	movs	r2, #83	; 0x53
 800dc7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	689a      	ldr	r2, [r3, #8]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f042 0220 	orr.w	r2, r2, #32
 800dc8c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	22ff      	movs	r2, #255	; 0xff
 800dc94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e095      	b.n	800ddf2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d108      	bne.n	800dce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcd6:	d009      	beq.n	800dcec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	61da      	str	r2, [r3, #28]
 800dcde:	e005      	b.n	800dcec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d106      	bne.n	800dd0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7f9 f8e6 	bl	8006ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd2c:	d902      	bls.n	800dd34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	60fb      	str	r3, [r7, #12]
 800dd32:	e002      	b.n	800dd3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dd42:	d007      	beq.n	800dd54 <HAL_SPI_Init+0xa0>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd4c:	d002      	beq.n	800dd54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	f003 0302 	and.w	r3, r3, #2
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	695b      	ldr	r3, [r3, #20]
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	431a      	orrs	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd82:	431a      	orrs	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	69db      	ldr	r3, [r3, #28]
 800dd88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd8c:	431a      	orrs	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd96:	ea42 0103 	orr.w	r1, r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	430a      	orrs	r2, r1
 800dda8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	0c1b      	lsrs	r3, r3, #16
 800ddb0:	f003 0204 	and.w	r2, r3, #4
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb8:	f003 0310 	and.w	r3, r3, #16
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc2:	f003 0308 	and.w	r3, r3, #8
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ddd0:	ea42 0103 	orr.w	r1, r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	430a      	orrs	r2, r1
 800dde0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b088      	sub	sp, #32
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	60f8      	str	r0, [r7, #12]
 800de02:	60b9      	str	r1, [r7, #8]
 800de04:	603b      	str	r3, [r7, #0]
 800de06:	4613      	mov	r3, r2
 800de08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de14:	2b01      	cmp	r3, #1
 800de16:	d101      	bne.n	800de1c <HAL_SPI_Transmit+0x22>
 800de18:	2302      	movs	r3, #2
 800de1a:	e158      	b.n	800e0ce <HAL_SPI_Transmit+0x2d4>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de24:	f7f9 fe66 	bl	8007af4 <HAL_GetTick>
 800de28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de2a:	88fb      	ldrh	r3, [r7, #6]
 800de2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b01      	cmp	r3, #1
 800de38:	d002      	beq.n	800de40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de3a:	2302      	movs	r3, #2
 800de3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de3e:	e13d      	b.n	800e0bc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <HAL_SPI_Transmit+0x52>
 800de46:	88fb      	ldrh	r3, [r7, #6]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d102      	bne.n	800de52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de50:	e134      	b.n	800e0bc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2203      	movs	r2, #3
 800de56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	88fa      	ldrh	r2, [r7, #6]
 800de6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	88fa      	ldrh	r2, [r7, #6]
 800de70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2200      	movs	r2, #0
 800de7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2200      	movs	r2, #0
 800de84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2200      	movs	r2, #0
 800de8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2200      	movs	r2, #0
 800de92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de9c:	d10f      	bne.n	800debe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800debc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec8:	2b40      	cmp	r3, #64	; 0x40
 800deca:	d007      	beq.n	800dedc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800deda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dee4:	d94b      	bls.n	800df7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <HAL_SPI_Transmit+0xfa>
 800deee:	8afb      	ldrh	r3, [r7, #22]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d13e      	bne.n	800df72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def8:	881a      	ldrh	r2, [r3, #0]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df04:	1c9a      	adds	r2, r3, #2
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df0e:	b29b      	uxth	r3, r3
 800df10:	3b01      	subs	r3, #1
 800df12:	b29a      	uxth	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df18:	e02b      	b.n	800df72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	f003 0302 	and.w	r3, r3, #2
 800df24:	2b02      	cmp	r3, #2
 800df26:	d112      	bne.n	800df4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2c:	881a      	ldrh	r2, [r3, #0]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df38:	1c9a      	adds	r2, r3, #2
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df42:	b29b      	uxth	r3, r3
 800df44:	3b01      	subs	r3, #1
 800df46:	b29a      	uxth	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df4c:	e011      	b.n	800df72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df4e:	f7f9 fdd1 	bl	8007af4 <HAL_GetTick>
 800df52:	4602      	mov	r2, r0
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d803      	bhi.n	800df66 <HAL_SPI_Transmit+0x16c>
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df64:	d102      	bne.n	800df6c <HAL_SPI_Transmit+0x172>
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d102      	bne.n	800df72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800df6c:	2303      	movs	r3, #3
 800df6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df70:	e0a4      	b.n	800e0bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df76:	b29b      	uxth	r3, r3
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1ce      	bne.n	800df1a <HAL_SPI_Transmit+0x120>
 800df7c:	e07c      	b.n	800e078 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <HAL_SPI_Transmit+0x192>
 800df86:	8afb      	ldrh	r3, [r7, #22]
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d170      	bne.n	800e06e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df90:	b29b      	uxth	r3, r3
 800df92:	2b01      	cmp	r3, #1
 800df94:	d912      	bls.n	800dfbc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9a:	881a      	ldrh	r2, [r3, #0]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa6:	1c9a      	adds	r2, r3, #2
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3b02      	subs	r3, #2
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfba:	e058      	b.n	800e06e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	330c      	adds	r3, #12
 800dfc6:	7812      	ldrb	r2, [r2, #0]
 800dfc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800dfe2:	e044      	b.n	800e06e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d12b      	bne.n	800e04a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d912      	bls.n	800e022 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e000:	881a      	ldrh	r2, [r3, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00c:	1c9a      	adds	r2, r3, #2
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e016:	b29b      	uxth	r3, r3
 800e018:	3b02      	subs	r3, #2
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e020:	e025      	b.n	800e06e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	330c      	adds	r3, #12
 800e02c:	7812      	ldrb	r2, [r2, #0]
 800e02e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e034:	1c5a      	adds	r2, r3, #1
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e03e:	b29b      	uxth	r3, r3
 800e040:	3b01      	subs	r3, #1
 800e042:	b29a      	uxth	r2, r3
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e048:	e011      	b.n	800e06e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e04a:	f7f9 fd53 	bl	8007af4 <HAL_GetTick>
 800e04e:	4602      	mov	r2, r0
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	1ad3      	subs	r3, r2, r3
 800e054:	683a      	ldr	r2, [r7, #0]
 800e056:	429a      	cmp	r2, r3
 800e058:	d803      	bhi.n	800e062 <HAL_SPI_Transmit+0x268>
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e060:	d102      	bne.n	800e068 <HAL_SPI_Transmit+0x26e>
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d102      	bne.n	800e06e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e068:	2303      	movs	r3, #3
 800e06a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e06c:	e026      	b.n	800e0bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e072:	b29b      	uxth	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1b5      	bne.n	800dfe4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e078:	69ba      	ldr	r2, [r7, #24]
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	68f8      	ldr	r0, [r7, #12]
 800e07e:	f000 fcdf 	bl	800ea40 <SPI_EndRxTxTransaction>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2220      	movs	r2, #32
 800e08c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10a      	bne.n	800e0ac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e096:	2300      	movs	r3, #0
 800e098:	613b      	str	r3, [r7, #16]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	613b      	str	r3, [r7, #16]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	77fb      	strb	r3, [r7, #31]
 800e0b8:	e000      	b.n	800e0bc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e0ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e0cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3720      	adds	r7, #32
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b088      	sub	sp, #32
 800e0da:	af02      	add	r7, sp, #8
 800e0dc:	60f8      	str	r0, [r7, #12]
 800e0de:	60b9      	str	r1, [r7, #8]
 800e0e0:	603b      	str	r3, [r7, #0]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0f2:	d112      	bne.n	800e11a <HAL_SPI_Receive+0x44>
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10e      	bne.n	800e11a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2204      	movs	r2, #4
 800e100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e104:	88fa      	ldrh	r2, [r7, #6]
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	4613      	mov	r3, r2
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	68b9      	ldr	r1, [r7, #8]
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f000 f910 	bl	800e336 <HAL_SPI_TransmitReceive>
 800e116:	4603      	mov	r3, r0
 800e118:	e109      	b.n	800e32e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e120:	2b01      	cmp	r3, #1
 800e122:	d101      	bne.n	800e128 <HAL_SPI_Receive+0x52>
 800e124:	2302      	movs	r3, #2
 800e126:	e102      	b.n	800e32e <HAL_SPI_Receive+0x258>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e130:	f7f9 fce0 	bl	8007af4 <HAL_GetTick>
 800e134:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d002      	beq.n	800e148 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e142:	2302      	movs	r3, #2
 800e144:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e146:	e0e9      	b.n	800e31c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <HAL_SPI_Receive+0x7e>
 800e14e:	88fb      	ldrh	r3, [r7, #6]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d102      	bne.n	800e15a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e154:	2301      	movs	r3, #1
 800e156:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e158:	e0e0      	b.n	800e31c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2204      	movs	r2, #4
 800e15e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	88fa      	ldrh	r2, [r7, #6]
 800e172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	88fa      	ldrh	r2, [r7, #6]
 800e17a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2200      	movs	r2, #0
 800e18e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1a4:	d908      	bls.n	800e1b8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1b4:	605a      	str	r2, [r3, #4]
 800e1b6:	e007      	b.n	800e1c8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e1c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1d0:	d10f      	bne.n	800e1f2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e1f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1fc:	2b40      	cmp	r3, #64	; 0x40
 800e1fe:	d007      	beq.n	800e210 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e20e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e218:	d867      	bhi.n	800e2ea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e21a:	e030      	b.n	800e27e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	2b01      	cmp	r3, #1
 800e228:	d117      	bne.n	800e25a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f103 020c 	add.w	r2, r3, #12
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e236:	7812      	ldrb	r2, [r2, #0]
 800e238:	b2d2      	uxtb	r2, r2
 800e23a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	3b01      	subs	r3, #1
 800e250:	b29a      	uxth	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e258:	e011      	b.n	800e27e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e25a:	f7f9 fc4b 	bl	8007af4 <HAL_GetTick>
 800e25e:	4602      	mov	r2, r0
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	683a      	ldr	r2, [r7, #0]
 800e266:	429a      	cmp	r2, r3
 800e268:	d803      	bhi.n	800e272 <HAL_SPI_Receive+0x19c>
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e270:	d102      	bne.n	800e278 <HAL_SPI_Receive+0x1a2>
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d102      	bne.n	800e27e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e278:	2303      	movs	r3, #3
 800e27a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e27c:	e04e      	b.n	800e31c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e284:	b29b      	uxth	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1c8      	bne.n	800e21c <HAL_SPI_Receive+0x146>
 800e28a:	e034      	b.n	800e2f6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	f003 0301 	and.w	r3, r3, #1
 800e296:	2b01      	cmp	r3, #1
 800e298:	d115      	bne.n	800e2c6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	68da      	ldr	r2, [r3, #12]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a4:	b292      	uxth	r2, r2
 800e2a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ac:	1c9a      	adds	r2, r3, #2
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e2c4:	e011      	b.n	800e2ea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2c6:	f7f9 fc15 	bl	8007af4 <HAL_GetTick>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	1ad3      	subs	r3, r2, r3
 800e2d0:	683a      	ldr	r2, [r7, #0]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d803      	bhi.n	800e2de <HAL_SPI_Receive+0x208>
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2dc:	d102      	bne.n	800e2e4 <HAL_SPI_Receive+0x20e>
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d102      	bne.n	800e2ea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e2e8:	e018      	b.n	800e31c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1ca      	bne.n	800e28c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e2f6:	693a      	ldr	r2, [r7, #16]
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f000 fb48 	bl	800e990 <SPI_EndRxTransaction>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2220      	movs	r2, #32
 800e30a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e314:	2301      	movs	r3, #1
 800e316:	75fb      	strb	r3, [r7, #23]
 800e318:	e000      	b.n	800e31c <HAL_SPI_Receive+0x246>
  }

error :
 800e31a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2201      	movs	r2, #1
 800e320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b08a      	sub	sp, #40	; 0x28
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	60f8      	str	r0, [r7, #12]
 800e33e:	60b9      	str	r1, [r7, #8]
 800e340:	607a      	str	r2, [r7, #4]
 800e342:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e344:	2301      	movs	r3, #1
 800e346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e354:	2b01      	cmp	r3, #1
 800e356:	d101      	bne.n	800e35c <HAL_SPI_TransmitReceive+0x26>
 800e358:	2302      	movs	r3, #2
 800e35a:	e1fb      	b.n	800e754 <HAL_SPI_TransmitReceive+0x41e>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e364:	f7f9 fbc6 	bl	8007af4 <HAL_GetTick>
 800e368:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e370:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e378:	887b      	ldrh	r3, [r7, #2]
 800e37a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e37c:	887b      	ldrh	r3, [r7, #2]
 800e37e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e380:	7efb      	ldrb	r3, [r7, #27]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d00e      	beq.n	800e3a4 <HAL_SPI_TransmitReceive+0x6e>
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e38c:	d106      	bne.n	800e39c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d102      	bne.n	800e39c <HAL_SPI_TransmitReceive+0x66>
 800e396:	7efb      	ldrb	r3, [r7, #27]
 800e398:	2b04      	cmp	r3, #4
 800e39a:	d003      	beq.n	800e3a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e39c:	2302      	movs	r3, #2
 800e39e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3a2:	e1cd      	b.n	800e740 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d005      	beq.n	800e3b6 <HAL_SPI_TransmitReceive+0x80>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d002      	beq.n	800e3b6 <HAL_SPI_TransmitReceive+0x80>
 800e3b0:	887b      	ldrh	r3, [r7, #2]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d103      	bne.n	800e3be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3bc:	e1c0      	b.n	800e740 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b04      	cmp	r3, #4
 800e3c8:	d003      	beq.n	800e3d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2205      	movs	r2, #5
 800e3ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	887a      	ldrh	r2, [r7, #2]
 800e3e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	887a      	ldrh	r2, [r7, #2]
 800e3ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	887a      	ldrh	r2, [r7, #2]
 800e3f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	887a      	ldrh	r2, [r7, #2]
 800e3fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e414:	d802      	bhi.n	800e41c <HAL_SPI_TransmitReceive+0xe6>
 800e416:	8a3b      	ldrh	r3, [r7, #16]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d908      	bls.n	800e42e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	685a      	ldr	r2, [r3, #4]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e42a:	605a      	str	r2, [r3, #4]
 800e42c:	e007      	b.n	800e43e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	685a      	ldr	r2, [r3, #4]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e43c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e448:	2b40      	cmp	r3, #64	; 0x40
 800e44a:	d007      	beq.n	800e45c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e45a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e464:	d97c      	bls.n	800e560 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d002      	beq.n	800e474 <HAL_SPI_TransmitReceive+0x13e>
 800e46e:	8a7b      	ldrh	r3, [r7, #18]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d169      	bne.n	800e548 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e478:	881a      	ldrh	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e484:	1c9a      	adds	r2, r3, #2
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e48e:	b29b      	uxth	r3, r3
 800e490:	3b01      	subs	r3, #1
 800e492:	b29a      	uxth	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e498:	e056      	b.n	800e548 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	f003 0302 	and.w	r3, r3, #2
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d11b      	bne.n	800e4e0 <HAL_SPI_TransmitReceive+0x1aa>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d016      	beq.n	800e4e0 <HAL_SPI_TransmitReceive+0x1aa>
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d113      	bne.n	800e4e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4bc:	881a      	ldrh	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c8:	1c9a      	adds	r2, r3, #2
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	f003 0301 	and.w	r3, r3, #1
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d11c      	bne.n	800e528 <HAL_SPI_TransmitReceive+0x1f2>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d016      	beq.n	800e528 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	68da      	ldr	r2, [r3, #12]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e504:	b292      	uxth	r2, r2
 800e506:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e50c:	1c9a      	adds	r2, r3, #2
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e518:	b29b      	uxth	r3, r3
 800e51a:	3b01      	subs	r3, #1
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e524:	2301      	movs	r3, #1
 800e526:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e528:	f7f9 fae4 	bl	8007af4 <HAL_GetTick>
 800e52c:	4602      	mov	r2, r0
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e534:	429a      	cmp	r2, r3
 800e536:	d807      	bhi.n	800e548 <HAL_SPI_TransmitReceive+0x212>
 800e538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e53e:	d003      	beq.n	800e548 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e540:	2303      	movs	r3, #3
 800e542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e546:	e0fb      	b.n	800e740 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1a3      	bne.n	800e49a <HAL_SPI_TransmitReceive+0x164>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e558:	b29b      	uxth	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d19d      	bne.n	800e49a <HAL_SPI_TransmitReceive+0x164>
 800e55e:	e0df      	b.n	800e720 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d003      	beq.n	800e570 <HAL_SPI_TransmitReceive+0x23a>
 800e568:	8a7b      	ldrh	r3, [r7, #18]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	f040 80cb 	bne.w	800e706 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e574:	b29b      	uxth	r3, r3
 800e576:	2b01      	cmp	r3, #1
 800e578:	d912      	bls.n	800e5a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57e:	881a      	ldrh	r2, [r3, #0]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e58a:	1c9a      	adds	r2, r3, #2
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e594:	b29b      	uxth	r3, r3
 800e596:	3b02      	subs	r3, #2
 800e598:	b29a      	uxth	r2, r3
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e59e:	e0b2      	b.n	800e706 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	330c      	adds	r3, #12
 800e5aa:	7812      	ldrb	r2, [r2, #0]
 800e5ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b2:	1c5a      	adds	r2, r3, #1
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5c6:	e09e      	b.n	800e706 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	f003 0302 	and.w	r3, r3, #2
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d134      	bne.n	800e640 <HAL_SPI_TransmitReceive+0x30a>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d02f      	beq.n	800e640 <HAL_SPI_TransmitReceive+0x30a>
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d12c      	bne.n	800e640 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d912      	bls.n	800e616 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f4:	881a      	ldrh	r2, [r3, #0]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e600:	1c9a      	adds	r2, r3, #2
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	3b02      	subs	r3, #2
 800e60e:	b29a      	uxth	r2, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e614:	e012      	b.n	800e63c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	330c      	adds	r3, #12
 800e620:	7812      	ldrb	r2, [r2, #0]
 800e622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e632:	b29b      	uxth	r3, r3
 800e634:	3b01      	subs	r3, #1
 800e636:	b29a      	uxth	r2, r3
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e63c:	2300      	movs	r3, #0
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d148      	bne.n	800e6e0 <HAL_SPI_TransmitReceive+0x3aa>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e654:	b29b      	uxth	r3, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	d042      	beq.n	800e6e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e660:	b29b      	uxth	r3, r3
 800e662:	2b01      	cmp	r3, #1
 800e664:	d923      	bls.n	800e6ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68da      	ldr	r2, [r3, #12]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e670:	b292      	uxth	r2, r2
 800e672:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e678:	1c9a      	adds	r2, r3, #2
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e684:	b29b      	uxth	r3, r3
 800e686:	3b02      	subs	r3, #2
 800e688:	b29a      	uxth	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e696:	b29b      	uxth	r3, r3
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d81f      	bhi.n	800e6dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	685a      	ldr	r2, [r3, #4]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e6aa:	605a      	str	r2, [r3, #4]
 800e6ac:	e016      	b.n	800e6dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f103 020c 	add.w	r2, r3, #12
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ba:	7812      	ldrb	r2, [r2, #0]
 800e6bc:	b2d2      	uxtb	r2, r2
 800e6be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e6e0:	f7f9 fa08 	bl	8007af4 <HAL_GetTick>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d803      	bhi.n	800e6f8 <HAL_SPI_TransmitReceive+0x3c2>
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f6:	d102      	bne.n	800e6fe <HAL_SPI_TransmitReceive+0x3c8>
 800e6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d103      	bne.n	800e706 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e6fe:	2303      	movs	r3, #3
 800e700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e704:	e01c      	b.n	800e740 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f47f af5b 	bne.w	800e5c8 <HAL_SPI_TransmitReceive+0x292>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e718:	b29b      	uxth	r3, r3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f47f af54 	bne.w	800e5c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e720:	69fa      	ldr	r2, [r7, #28]
 800e722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 f98b 	bl	800ea40 <SPI_EndRxTxTransaction>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d006      	beq.n	800e73e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e730:	2301      	movs	r3, #1
 800e732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2220      	movs	r2, #32
 800e73a:	661a      	str	r2, [r3, #96]	; 0x60
 800e73c:	e000      	b.n	800e740 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e73e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2201      	movs	r2, #1
 800e744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e754:	4618      	mov	r0, r3
 800e756:	3728      	adds	r7, #40	; 0x28
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b088      	sub	sp, #32
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	4613      	mov	r3, r2
 800e76a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e76c:	f7f9 f9c2 	bl	8007af4 <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	1a9b      	subs	r3, r3, r2
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	4413      	add	r3, r2
 800e77a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e77c:	f7f9 f9ba 	bl	8007af4 <HAL_GetTick>
 800e780:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e782:	4b39      	ldr	r3, [pc, #228]	; (800e868 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	015b      	lsls	r3, r3, #5
 800e788:	0d1b      	lsrs	r3, r3, #20
 800e78a:	69fa      	ldr	r2, [r7, #28]
 800e78c:	fb02 f303 	mul.w	r3, r2, r3
 800e790:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e792:	e054      	b.n	800e83e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79a:	d050      	beq.n	800e83e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e79c:	f7f9 f9aa 	bl	8007af4 <HAL_GetTick>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	1ad3      	subs	r3, r2, r3
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d902      	bls.n	800e7b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d13d      	bne.n	800e82e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e7c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7ca:	d111      	bne.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7d4:	d004      	beq.n	800e7e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7de:	d107      	bne.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7f8:	d10f      	bne.n	800e81a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e808:	601a      	str	r2, [r3, #0]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e017      	b.n	800e85e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e834:	2300      	movs	r3, #0
 800e836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	3b01      	subs	r3, #1
 800e83c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	689a      	ldr	r2, [r3, #8]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	4013      	ands	r3, r2
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	bf0c      	ite	eq
 800e84e:	2301      	moveq	r3, #1
 800e850:	2300      	movne	r3, #0
 800e852:	b2db      	uxtb	r3, r3
 800e854:	461a      	mov	r2, r3
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d19b      	bne.n	800e794 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	200003d0 	.word	0x200003d0

0800e86c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b088      	sub	sp, #32
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e87a:	f7f9 f93b 	bl	8007af4 <HAL_GetTick>
 800e87e:	4602      	mov	r2, r0
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	1a9b      	subs	r3, r3, r2
 800e884:	683a      	ldr	r2, [r7, #0]
 800e886:	4413      	add	r3, r2
 800e888:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e88a:	f7f9 f933 	bl	8007af4 <HAL_GetTick>
 800e88e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e890:	4b3e      	ldr	r3, [pc, #248]	; (800e98c <SPI_WaitFifoStateUntilTimeout+0x120>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	4613      	mov	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	00da      	lsls	r2, r3, #3
 800e89c:	1ad3      	subs	r3, r2, r3
 800e89e:	0d1b      	lsrs	r3, r3, #20
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	fb02 f303 	mul.w	r3, r2, r3
 800e8a6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8a8:	e062      	b.n	800e970 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e8b0:	d109      	bne.n	800e8c6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d106      	bne.n	800e8c6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	330c      	adds	r3, #12
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800e8c4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8cc:	d050      	beq.n	800e970 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e8ce:	f7f9 f911 	bl	8007af4 <HAL_GetTick>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	69fa      	ldr	r2, [r7, #28]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d902      	bls.n	800e8e4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d13d      	bne.n	800e960 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e8f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8fc:	d111      	bne.n	800e922 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e906:	d004      	beq.n	800e912 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e910:	d107      	bne.n	800e922 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e920:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e92a:	d10f      	bne.n	800e94c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e93a:	601a      	str	r2, [r3, #0]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e94a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e95c:	2303      	movs	r3, #3
 800e95e:	e010      	b.n	800e982 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d101      	bne.n	800e96a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800e966:	2300      	movs	r3, #0
 800e968:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	689a      	ldr	r2, [r3, #8]
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	4013      	ands	r3, r2
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d194      	bne.n	800e8aa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3720      	adds	r7, #32
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	200003d0 	.word	0x200003d0

0800e990 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af02      	add	r7, sp, #8
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9a4:	d111      	bne.n	800e9ca <SPI_EndRxTransaction+0x3a>
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ae:	d004      	beq.n	800e9ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9b8:	d107      	bne.n	800e9ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	2180      	movs	r1, #128	; 0x80
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f7ff fec1 	bl	800e75c <SPI_WaitFlagStateUntilTimeout>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d007      	beq.n	800e9f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9e4:	f043 0220 	orr.w	r2, r3, #32
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e023      	b.n	800ea38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9f8:	d11d      	bne.n	800ea36 <SPI_EndRxTransaction+0xa6>
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea02:	d004      	beq.n	800ea0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea0c:	d113      	bne.n	800ea36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f7ff ff26 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d007      	beq.n	800ea36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea2a:	f043 0220 	orr.w	r2, r3, #32
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ea32:	2303      	movs	r3, #3
 800ea34:	e000      	b.n	800ea38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af02      	add	r7, sp, #8
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff ff07 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d007      	beq.n	800ea74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea68:	f043 0220 	orr.w	r2, r3, #32
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea70:	2303      	movs	r3, #3
 800ea72:	e027      	b.n	800eac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	2180      	movs	r1, #128	; 0x80
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f7ff fe6c 	bl	800e75c <SPI_WaitFlagStateUntilTimeout>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d007      	beq.n	800ea9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea8e:	f043 0220 	orr.w	r2, r3, #32
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea96:	2303      	movs	r3, #3
 800ea98:	e014      	b.n	800eac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	f7ff fee0 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d007      	beq.n	800eac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eab6:	f043 0220 	orr.w	r2, r3, #32
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eabe:	2303      	movs	r3, #3
 800eac0:	e000      	b.n	800eac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d101      	bne.n	800eade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eada:	2301      	movs	r3, #1
 800eadc:	e049      	b.n	800eb72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7f8 faf6 	bl	80070e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2202      	movs	r2, #2
 800eafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	3304      	adds	r3, #4
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4610      	mov	r0, r2
 800eb0c:	f000 fcec 	bl	800f4e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3708      	adds	r7, #8
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d001      	beq.n	800eb94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eb90:	2301      	movs	r3, #1
 800eb92:	e047      	b.n	800ec24 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2202      	movs	r2, #2
 800eb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a23      	ldr	r2, [pc, #140]	; (800ec30 <HAL_TIM_Base_Start+0xb4>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d01d      	beq.n	800ebe2 <HAL_TIM_Base_Start+0x66>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebae:	d018      	beq.n	800ebe2 <HAL_TIM_Base_Start+0x66>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a1f      	ldr	r2, [pc, #124]	; (800ec34 <HAL_TIM_Base_Start+0xb8>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d013      	beq.n	800ebe2 <HAL_TIM_Base_Start+0x66>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4a1e      	ldr	r2, [pc, #120]	; (800ec38 <HAL_TIM_Base_Start+0xbc>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d00e      	beq.n	800ebe2 <HAL_TIM_Base_Start+0x66>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a1c      	ldr	r2, [pc, #112]	; (800ec3c <HAL_TIM_Base_Start+0xc0>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d009      	beq.n	800ebe2 <HAL_TIM_Base_Start+0x66>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a1b      	ldr	r2, [pc, #108]	; (800ec40 <HAL_TIM_Base_Start+0xc4>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d004      	beq.n	800ebe2 <HAL_TIM_Base_Start+0x66>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a19      	ldr	r2, [pc, #100]	; (800ec44 <HAL_TIM_Base_Start+0xc8>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d115      	bne.n	800ec0e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	689a      	ldr	r2, [r3, #8]
 800ebe8:	4b17      	ldr	r3, [pc, #92]	; (800ec48 <HAL_TIM_Base_Start+0xcc>)
 800ebea:	4013      	ands	r3, r2
 800ebec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2b06      	cmp	r3, #6
 800ebf2:	d015      	beq.n	800ec20 <HAL_TIM_Base_Start+0xa4>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebfa:	d011      	beq.n	800ec20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f042 0201 	orr.w	r2, r2, #1
 800ec0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec0c:	e008      	b.n	800ec20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f042 0201 	orr.w	r2, r2, #1
 800ec1c:	601a      	str	r2, [r3, #0]
 800ec1e:	e000      	b.n	800ec22 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr
 800ec30:	40012c00 	.word	0x40012c00
 800ec34:	40000400 	.word	0x40000400
 800ec38:	40000800 	.word	0x40000800
 800ec3c:	40000c00 	.word	0x40000c00
 800ec40:	40013400 	.word	0x40013400
 800ec44:	40014000 	.word	0x40014000
 800ec48:	00010007 	.word	0x00010007

0800ec4c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6a1a      	ldr	r2, [r3, #32]
 800ec5a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec5e:	4013      	ands	r3, r2
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10f      	bne.n	800ec84 <HAL_TIM_Base_Stop+0x38>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6a1a      	ldr	r2, [r3, #32]
 800ec6a:	f240 4344 	movw	r3, #1092	; 0x444
 800ec6e:	4013      	ands	r3, r2
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d107      	bne.n	800ec84 <HAL_TIM_Base_Stop+0x38>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f022 0201 	bic.w	r2, r2, #1
 800ec82:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
	...

0800ec9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d001      	beq.n	800ecb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e04f      	b.n	800ed54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68da      	ldr	r2, [r3, #12]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f042 0201 	orr.w	r2, r2, #1
 800ecca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a23      	ldr	r2, [pc, #140]	; (800ed60 <HAL_TIM_Base_Start_IT+0xc4>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d01d      	beq.n	800ed12 <HAL_TIM_Base_Start_IT+0x76>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecde:	d018      	beq.n	800ed12 <HAL_TIM_Base_Start_IT+0x76>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a1f      	ldr	r2, [pc, #124]	; (800ed64 <HAL_TIM_Base_Start_IT+0xc8>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d013      	beq.n	800ed12 <HAL_TIM_Base_Start_IT+0x76>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4a1e      	ldr	r2, [pc, #120]	; (800ed68 <HAL_TIM_Base_Start_IT+0xcc>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d00e      	beq.n	800ed12 <HAL_TIM_Base_Start_IT+0x76>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a1c      	ldr	r2, [pc, #112]	; (800ed6c <HAL_TIM_Base_Start_IT+0xd0>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d009      	beq.n	800ed12 <HAL_TIM_Base_Start_IT+0x76>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4a1b      	ldr	r2, [pc, #108]	; (800ed70 <HAL_TIM_Base_Start_IT+0xd4>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d004      	beq.n	800ed12 <HAL_TIM_Base_Start_IT+0x76>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a19      	ldr	r2, [pc, #100]	; (800ed74 <HAL_TIM_Base_Start_IT+0xd8>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d115      	bne.n	800ed3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	4b17      	ldr	r3, [pc, #92]	; (800ed78 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed1a:	4013      	ands	r3, r2
 800ed1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b06      	cmp	r3, #6
 800ed22:	d015      	beq.n	800ed50 <HAL_TIM_Base_Start_IT+0xb4>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed2a:	d011      	beq.n	800ed50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f042 0201 	orr.w	r2, r2, #1
 800ed3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed3c:	e008      	b.n	800ed50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f042 0201 	orr.w	r2, r2, #1
 800ed4c:	601a      	str	r2, [r3, #0]
 800ed4e:	e000      	b.n	800ed52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed52:	2300      	movs	r3, #0
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3714      	adds	r7, #20
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	40012c00 	.word	0x40012c00
 800ed64:	40000400 	.word	0x40000400
 800ed68:	40000800 	.word	0x40000800
 800ed6c:	40000c00 	.word	0x40000c00
 800ed70:	40013400 	.word	0x40013400
 800ed74:	40014000 	.word	0x40014000
 800ed78:	00010007 	.word	0x00010007

0800ed7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d101      	bne.n	800ed8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e049      	b.n	800ee22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d106      	bne.n	800eda8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7f8 f96c 	bl	8007080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2202      	movs	r2, #2
 800edac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3304      	adds	r3, #4
 800edb8:	4619      	mov	r1, r3
 800edba:	4610      	mov	r0, r2
 800edbc:	f000 fb94 	bl	800f4e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2201      	movs	r2, #1
 800edfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3708      	adds	r7, #8
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
	...

0800ee2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d109      	bne.n	800ee50 <HAL_TIM_PWM_Start+0x24>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	bf14      	ite	ne
 800ee48:	2301      	movne	r3, #1
 800ee4a:	2300      	moveq	r3, #0
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	e03c      	b.n	800eeca <HAL_TIM_PWM_Start+0x9e>
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2b04      	cmp	r3, #4
 800ee54:	d109      	bne.n	800ee6a <HAL_TIM_PWM_Start+0x3e>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	bf14      	ite	ne
 800ee62:	2301      	movne	r3, #1
 800ee64:	2300      	moveq	r3, #0
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	e02f      	b.n	800eeca <HAL_TIM_PWM_Start+0x9e>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b08      	cmp	r3, #8
 800ee6e:	d109      	bne.n	800ee84 <HAL_TIM_PWM_Start+0x58>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	bf14      	ite	ne
 800ee7c:	2301      	movne	r3, #1
 800ee7e:	2300      	moveq	r3, #0
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	e022      	b.n	800eeca <HAL_TIM_PWM_Start+0x9e>
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b0c      	cmp	r3, #12
 800ee88:	d109      	bne.n	800ee9e <HAL_TIM_PWM_Start+0x72>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	bf14      	ite	ne
 800ee96:	2301      	movne	r3, #1
 800ee98:	2300      	moveq	r3, #0
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	e015      	b.n	800eeca <HAL_TIM_PWM_Start+0x9e>
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b10      	cmp	r3, #16
 800eea2:	d109      	bne.n	800eeb8 <HAL_TIM_PWM_Start+0x8c>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	bf14      	ite	ne
 800eeb0:	2301      	movne	r3, #1
 800eeb2:	2300      	moveq	r3, #0
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	e008      	b.n	800eeca <HAL_TIM_PWM_Start+0x9e>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	bf14      	ite	ne
 800eec4:	2301      	movne	r3, #1
 800eec6:	2300      	moveq	r3, #0
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	e09c      	b.n	800f00c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d104      	bne.n	800eee2 <HAL_TIM_PWM_Start+0xb6>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2202      	movs	r2, #2
 800eedc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eee0:	e023      	b.n	800ef2a <HAL_TIM_PWM_Start+0xfe>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b04      	cmp	r3, #4
 800eee6:	d104      	bne.n	800eef2 <HAL_TIM_PWM_Start+0xc6>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2202      	movs	r2, #2
 800eeec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eef0:	e01b      	b.n	800ef2a <HAL_TIM_PWM_Start+0xfe>
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	2b08      	cmp	r3, #8
 800eef6:	d104      	bne.n	800ef02 <HAL_TIM_PWM_Start+0xd6>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2202      	movs	r2, #2
 800eefc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef00:	e013      	b.n	800ef2a <HAL_TIM_PWM_Start+0xfe>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	2b0c      	cmp	r3, #12
 800ef06:	d104      	bne.n	800ef12 <HAL_TIM_PWM_Start+0xe6>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2202      	movs	r2, #2
 800ef0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef10:	e00b      	b.n	800ef2a <HAL_TIM_PWM_Start+0xfe>
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	2b10      	cmp	r3, #16
 800ef16:	d104      	bne.n	800ef22 <HAL_TIM_PWM_Start+0xf6>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2202      	movs	r2, #2
 800ef1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef20:	e003      	b.n	800ef2a <HAL_TIM_PWM_Start+0xfe>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2202      	movs	r2, #2
 800ef26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	6839      	ldr	r1, [r7, #0]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 fe48 	bl	800fbc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a35      	ldr	r2, [pc, #212]	; (800f014 <HAL_TIM_PWM_Start+0x1e8>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d013      	beq.n	800ef6a <HAL_TIM_PWM_Start+0x13e>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a34      	ldr	r2, [pc, #208]	; (800f018 <HAL_TIM_PWM_Start+0x1ec>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d00e      	beq.n	800ef6a <HAL_TIM_PWM_Start+0x13e>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a32      	ldr	r2, [pc, #200]	; (800f01c <HAL_TIM_PWM_Start+0x1f0>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d009      	beq.n	800ef6a <HAL_TIM_PWM_Start+0x13e>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a31      	ldr	r2, [pc, #196]	; (800f020 <HAL_TIM_PWM_Start+0x1f4>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d004      	beq.n	800ef6a <HAL_TIM_PWM_Start+0x13e>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a2f      	ldr	r2, [pc, #188]	; (800f024 <HAL_TIM_PWM_Start+0x1f8>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d101      	bne.n	800ef6e <HAL_TIM_PWM_Start+0x142>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e000      	b.n	800ef70 <HAL_TIM_PWM_Start+0x144>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d007      	beq.n	800ef84 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a22      	ldr	r2, [pc, #136]	; (800f014 <HAL_TIM_PWM_Start+0x1e8>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d01d      	beq.n	800efca <HAL_TIM_PWM_Start+0x19e>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef96:	d018      	beq.n	800efca <HAL_TIM_PWM_Start+0x19e>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a22      	ldr	r2, [pc, #136]	; (800f028 <HAL_TIM_PWM_Start+0x1fc>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d013      	beq.n	800efca <HAL_TIM_PWM_Start+0x19e>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a21      	ldr	r2, [pc, #132]	; (800f02c <HAL_TIM_PWM_Start+0x200>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d00e      	beq.n	800efca <HAL_TIM_PWM_Start+0x19e>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4a1f      	ldr	r2, [pc, #124]	; (800f030 <HAL_TIM_PWM_Start+0x204>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d009      	beq.n	800efca <HAL_TIM_PWM_Start+0x19e>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a17      	ldr	r2, [pc, #92]	; (800f018 <HAL_TIM_PWM_Start+0x1ec>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d004      	beq.n	800efca <HAL_TIM_PWM_Start+0x19e>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a15      	ldr	r2, [pc, #84]	; (800f01c <HAL_TIM_PWM_Start+0x1f0>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d115      	bne.n	800eff6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	689a      	ldr	r2, [r3, #8]
 800efd0:	4b18      	ldr	r3, [pc, #96]	; (800f034 <HAL_TIM_PWM_Start+0x208>)
 800efd2:	4013      	ands	r3, r2
 800efd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2b06      	cmp	r3, #6
 800efda:	d015      	beq.n	800f008 <HAL_TIM_PWM_Start+0x1dc>
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efe2:	d011      	beq.n	800f008 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f042 0201 	orr.w	r2, r2, #1
 800eff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eff4:	e008      	b.n	800f008 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f042 0201 	orr.w	r2, r2, #1
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	e000      	b.n	800f00a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f008:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	40012c00 	.word	0x40012c00
 800f018:	40013400 	.word	0x40013400
 800f01c:	40014000 	.word	0x40014000
 800f020:	40014400 	.word	0x40014400
 800f024:	40014800 	.word	0x40014800
 800f028:	40000400 	.word	0x40000400
 800f02c:	40000800 	.word	0x40000800
 800f030:	40000c00 	.word	0x40000c00
 800f034:	00010007 	.word	0x00010007

0800f038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	691b      	ldr	r3, [r3, #16]
 800f046:	f003 0302 	and.w	r3, r3, #2
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d122      	bne.n	800f094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	f003 0302 	and.w	r3, r3, #2
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d11b      	bne.n	800f094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f06f 0202 	mvn.w	r2, #2
 800f064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2201      	movs	r2, #1
 800f06a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	699b      	ldr	r3, [r3, #24]
 800f072:	f003 0303 	and.w	r3, r3, #3
 800f076:	2b00      	cmp	r3, #0
 800f078:	d003      	beq.n	800f082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 fa16 	bl	800f4ac <HAL_TIM_IC_CaptureCallback>
 800f080:	e005      	b.n	800f08e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fa08 	bl	800f498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 fa19 	bl	800f4c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	f003 0304 	and.w	r3, r3, #4
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d122      	bne.n	800f0e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	f003 0304 	and.w	r3, r3, #4
 800f0ac:	2b04      	cmp	r3, #4
 800f0ae:	d11b      	bne.n	800f0e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f06f 0204 	mvn.w	r2, #4
 800f0b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2202      	movs	r2, #2
 800f0be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	699b      	ldr	r3, [r3, #24]
 800f0c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d003      	beq.n	800f0d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 f9ec 	bl	800f4ac <HAL_TIM_IC_CaptureCallback>
 800f0d4:	e005      	b.n	800f0e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f9de 	bl	800f498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 f9ef 	bl	800f4c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	f003 0308 	and.w	r3, r3, #8
 800f0f2:	2b08      	cmp	r3, #8
 800f0f4:	d122      	bne.n	800f13c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	f003 0308 	and.w	r3, r3, #8
 800f100:	2b08      	cmp	r3, #8
 800f102:	d11b      	bne.n	800f13c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f06f 0208 	mvn.w	r2, #8
 800f10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2204      	movs	r2, #4
 800f112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	69db      	ldr	r3, [r3, #28]
 800f11a:	f003 0303 	and.w	r3, r3, #3
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f9c2 	bl	800f4ac <HAL_TIM_IC_CaptureCallback>
 800f128:	e005      	b.n	800f136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 f9b4 	bl	800f498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f9c5 	bl	800f4c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	f003 0310 	and.w	r3, r3, #16
 800f146:	2b10      	cmp	r3, #16
 800f148:	d122      	bne.n	800f190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	f003 0310 	and.w	r3, r3, #16
 800f154:	2b10      	cmp	r3, #16
 800f156:	d11b      	bne.n	800f190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f06f 0210 	mvn.w	r2, #16
 800f160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2208      	movs	r2, #8
 800f166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	69db      	ldr	r3, [r3, #28]
 800f16e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 f998 	bl	800f4ac <HAL_TIM_IC_CaptureCallback>
 800f17c:	e005      	b.n	800f18a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 f98a 	bl	800f498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 f99b 	bl	800f4c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	691b      	ldr	r3, [r3, #16]
 800f196:	f003 0301 	and.w	r3, r3, #1
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d10e      	bne.n	800f1bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	f003 0301 	and.w	r3, r3, #1
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d107      	bne.n	800f1bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f06f 0201 	mvn.w	r2, #1
 800f1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f7f7 fab0 	bl	800671c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1c6:	2b80      	cmp	r3, #128	; 0x80
 800f1c8:	d10e      	bne.n	800f1e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1d4:	2b80      	cmp	r3, #128	; 0x80
 800f1d6:	d107      	bne.n	800f1e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f1e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fda8 	bl	800fd38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1f6:	d10e      	bne.n	800f216 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f202:	2b80      	cmp	r3, #128	; 0x80
 800f204:	d107      	bne.n	800f216 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 fd9b 	bl	800fd4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f220:	2b40      	cmp	r3, #64	; 0x40
 800f222:	d10e      	bne.n	800f242 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f22e:	2b40      	cmp	r3, #64	; 0x40
 800f230:	d107      	bne.n	800f242 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f949 	bl	800f4d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	691b      	ldr	r3, [r3, #16]
 800f248:	f003 0320 	and.w	r3, r3, #32
 800f24c:	2b20      	cmp	r3, #32
 800f24e:	d10e      	bne.n	800f26e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	f003 0320 	and.w	r3, r3, #32
 800f25a:	2b20      	cmp	r3, #32
 800f25c:	d107      	bne.n	800f26e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f06f 0220 	mvn.w	r2, #32
 800f266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 fd5b 	bl	800fd24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f26e:	bf00      	nop
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
	...

0800f278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d101      	bne.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f28e:	2302      	movs	r3, #2
 800f290:	e0fd      	b.n	800f48e <HAL_TIM_PWM_ConfigChannel+0x216>
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2201      	movs	r2, #1
 800f296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b14      	cmp	r3, #20
 800f29e:	f200 80f0 	bhi.w	800f482 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f2a2:	a201      	add	r2, pc, #4	; (adr r2, 800f2a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a8:	0800f2fd 	.word	0x0800f2fd
 800f2ac:	0800f483 	.word	0x0800f483
 800f2b0:	0800f483 	.word	0x0800f483
 800f2b4:	0800f483 	.word	0x0800f483
 800f2b8:	0800f33d 	.word	0x0800f33d
 800f2bc:	0800f483 	.word	0x0800f483
 800f2c0:	0800f483 	.word	0x0800f483
 800f2c4:	0800f483 	.word	0x0800f483
 800f2c8:	0800f37f 	.word	0x0800f37f
 800f2cc:	0800f483 	.word	0x0800f483
 800f2d0:	0800f483 	.word	0x0800f483
 800f2d4:	0800f483 	.word	0x0800f483
 800f2d8:	0800f3bf 	.word	0x0800f3bf
 800f2dc:	0800f483 	.word	0x0800f483
 800f2e0:	0800f483 	.word	0x0800f483
 800f2e4:	0800f483 	.word	0x0800f483
 800f2e8:	0800f401 	.word	0x0800f401
 800f2ec:	0800f483 	.word	0x0800f483
 800f2f0:	0800f483 	.word	0x0800f483
 800f2f4:	0800f483 	.word	0x0800f483
 800f2f8:	0800f441 	.word	0x0800f441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	4618      	mov	r0, r3
 800f304:	f000 f98a 	bl	800f61c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	699a      	ldr	r2, [r3, #24]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f042 0208 	orr.w	r2, r2, #8
 800f316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f022 0204 	bic.w	r2, r2, #4
 800f326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6999      	ldr	r1, [r3, #24]
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	691a      	ldr	r2, [r3, #16]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	430a      	orrs	r2, r1
 800f338:	619a      	str	r2, [r3, #24]
      break;
 800f33a:	e0a3      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68b9      	ldr	r1, [r7, #8]
 800f342:	4618      	mov	r0, r3
 800f344:	f000 f9fa 	bl	800f73c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	699a      	ldr	r2, [r3, #24]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	699a      	ldr	r2, [r3, #24]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	6999      	ldr	r1, [r3, #24]
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	021a      	lsls	r2, r3, #8
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	430a      	orrs	r2, r1
 800f37a:	619a      	str	r2, [r3, #24]
      break;
 800f37c:	e082      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	68b9      	ldr	r1, [r7, #8]
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fa63 	bl	800f850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	69da      	ldr	r2, [r3, #28]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f042 0208 	orr.w	r2, r2, #8
 800f398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	69da      	ldr	r2, [r3, #28]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f022 0204 	bic.w	r2, r2, #4
 800f3a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	69d9      	ldr	r1, [r3, #28]
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	691a      	ldr	r2, [r3, #16]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	61da      	str	r2, [r3, #28]
      break;
 800f3bc:	e062      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	68b9      	ldr	r1, [r7, #8]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 facb 	bl	800f960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	69da      	ldr	r2, [r3, #28]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	69da      	ldr	r2, [r3, #28]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	69d9      	ldr	r1, [r3, #28]
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	021a      	lsls	r2, r3, #8
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	430a      	orrs	r2, r1
 800f3fc:	61da      	str	r2, [r3, #28]
      break;
 800f3fe:	e041      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	68b9      	ldr	r1, [r7, #8]
 800f406:	4618      	mov	r0, r3
 800f408:	f000 fb14 	bl	800fa34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f042 0208 	orr.w	r2, r2, #8
 800f41a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f022 0204 	bic.w	r2, r2, #4
 800f42a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	691a      	ldr	r2, [r3, #16]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	430a      	orrs	r2, r1
 800f43c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f43e:	e021      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68b9      	ldr	r1, [r7, #8]
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fb58 	bl	800fafc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f45a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f46a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	021a      	lsls	r2, r3, #8
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	430a      	orrs	r2, r1
 800f47e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f480:	e000      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f482:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop

0800f498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4b4:	bf00      	nop
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4c8:	bf00      	nop
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4dc:	bf00      	nop
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a40      	ldr	r2, [pc, #256]	; (800f5fc <TIM_Base_SetConfig+0x114>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d013      	beq.n	800f528 <TIM_Base_SetConfig+0x40>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f506:	d00f      	beq.n	800f528 <TIM_Base_SetConfig+0x40>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4a3d      	ldr	r2, [pc, #244]	; (800f600 <TIM_Base_SetConfig+0x118>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d00b      	beq.n	800f528 <TIM_Base_SetConfig+0x40>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a3c      	ldr	r2, [pc, #240]	; (800f604 <TIM_Base_SetConfig+0x11c>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d007      	beq.n	800f528 <TIM_Base_SetConfig+0x40>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a3b      	ldr	r2, [pc, #236]	; (800f608 <TIM_Base_SetConfig+0x120>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d003      	beq.n	800f528 <TIM_Base_SetConfig+0x40>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a3a      	ldr	r2, [pc, #232]	; (800f60c <TIM_Base_SetConfig+0x124>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d108      	bne.n	800f53a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f52e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	4313      	orrs	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a2f      	ldr	r2, [pc, #188]	; (800f5fc <TIM_Base_SetConfig+0x114>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d01f      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f548:	d01b      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4a2c      	ldr	r2, [pc, #176]	; (800f600 <TIM_Base_SetConfig+0x118>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d017      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4a2b      	ldr	r2, [pc, #172]	; (800f604 <TIM_Base_SetConfig+0x11c>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d013      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4a2a      	ldr	r2, [pc, #168]	; (800f608 <TIM_Base_SetConfig+0x120>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d00f      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4a29      	ldr	r2, [pc, #164]	; (800f60c <TIM_Base_SetConfig+0x124>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d00b      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4a28      	ldr	r2, [pc, #160]	; (800f610 <TIM_Base_SetConfig+0x128>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d007      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	4a27      	ldr	r2, [pc, #156]	; (800f614 <TIM_Base_SetConfig+0x12c>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d003      	beq.n	800f582 <TIM_Base_SetConfig+0x9a>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4a26      	ldr	r2, [pc, #152]	; (800f618 <TIM_Base_SetConfig+0x130>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d108      	bne.n	800f594 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	4313      	orrs	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	695b      	ldr	r3, [r3, #20]
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	689a      	ldr	r2, [r3, #8]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a10      	ldr	r2, [pc, #64]	; (800f5fc <TIM_Base_SetConfig+0x114>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d00f      	beq.n	800f5e0 <TIM_Base_SetConfig+0xf8>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a12      	ldr	r2, [pc, #72]	; (800f60c <TIM_Base_SetConfig+0x124>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d00b      	beq.n	800f5e0 <TIM_Base_SetConfig+0xf8>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a11      	ldr	r2, [pc, #68]	; (800f610 <TIM_Base_SetConfig+0x128>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d007      	beq.n	800f5e0 <TIM_Base_SetConfig+0xf8>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a10      	ldr	r2, [pc, #64]	; (800f614 <TIM_Base_SetConfig+0x12c>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d003      	beq.n	800f5e0 <TIM_Base_SetConfig+0xf8>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a0f      	ldr	r2, [pc, #60]	; (800f618 <TIM_Base_SetConfig+0x130>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d103      	bne.n	800f5e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	691a      	ldr	r2, [r3, #16]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	615a      	str	r2, [r3, #20]
}
 800f5ee:	bf00      	nop
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	40012c00 	.word	0x40012c00
 800f600:	40000400 	.word	0x40000400
 800f604:	40000800 	.word	0x40000800
 800f608:	40000c00 	.word	0x40000c00
 800f60c:	40013400 	.word	0x40013400
 800f610:	40014000 	.word	0x40014000
 800f614:	40014400 	.word	0x40014400
 800f618:	40014800 	.word	0x40014800

0800f61c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b087      	sub	sp, #28
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a1b      	ldr	r3, [r3, #32]
 800f62a:	f023 0201 	bic.w	r2, r3, #1
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	699b      	ldr	r3, [r3, #24]
 800f642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f023 0303 	bic.w	r3, r3, #3
 800f656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	4313      	orrs	r3, r2
 800f660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	f023 0302 	bic.w	r3, r3, #2
 800f668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	4313      	orrs	r3, r2
 800f672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a2c      	ldr	r2, [pc, #176]	; (800f728 <TIM_OC1_SetConfig+0x10c>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d00f      	beq.n	800f69c <TIM_OC1_SetConfig+0x80>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a2b      	ldr	r2, [pc, #172]	; (800f72c <TIM_OC1_SetConfig+0x110>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d00b      	beq.n	800f69c <TIM_OC1_SetConfig+0x80>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a2a      	ldr	r2, [pc, #168]	; (800f730 <TIM_OC1_SetConfig+0x114>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d007      	beq.n	800f69c <TIM_OC1_SetConfig+0x80>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4a29      	ldr	r2, [pc, #164]	; (800f734 <TIM_OC1_SetConfig+0x118>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d003      	beq.n	800f69c <TIM_OC1_SetConfig+0x80>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4a28      	ldr	r2, [pc, #160]	; (800f738 <TIM_OC1_SetConfig+0x11c>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d10c      	bne.n	800f6b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	f023 0308 	bic.w	r3, r3, #8
 800f6a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	697a      	ldr	r2, [r7, #20]
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	f023 0304 	bic.w	r3, r3, #4
 800f6b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4a1b      	ldr	r2, [pc, #108]	; (800f728 <TIM_OC1_SetConfig+0x10c>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d00f      	beq.n	800f6de <TIM_OC1_SetConfig+0xc2>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4a1a      	ldr	r2, [pc, #104]	; (800f72c <TIM_OC1_SetConfig+0x110>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d00b      	beq.n	800f6de <TIM_OC1_SetConfig+0xc2>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a19      	ldr	r2, [pc, #100]	; (800f730 <TIM_OC1_SetConfig+0x114>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d007      	beq.n	800f6de <TIM_OC1_SetConfig+0xc2>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4a18      	ldr	r2, [pc, #96]	; (800f734 <TIM_OC1_SetConfig+0x118>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d003      	beq.n	800f6de <TIM_OC1_SetConfig+0xc2>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a17      	ldr	r2, [pc, #92]	; (800f738 <TIM_OC1_SetConfig+0x11c>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d111      	bne.n	800f702 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	695b      	ldr	r3, [r3, #20]
 800f6f2:	693a      	ldr	r2, [r7, #16]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	699b      	ldr	r3, [r3, #24]
 800f6fc:	693a      	ldr	r2, [r7, #16]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	621a      	str	r2, [r3, #32]
}
 800f71c:	bf00      	nop
 800f71e:	371c      	adds	r7, #28
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr
 800f728:	40012c00 	.word	0x40012c00
 800f72c:	40013400 	.word	0x40013400
 800f730:	40014000 	.word	0x40014000
 800f734:	40014400 	.word	0x40014400
 800f738:	40014800 	.word	0x40014800

0800f73c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b087      	sub	sp, #28
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	f023 0210 	bic.w	r2, r3, #16
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	699b      	ldr	r3, [r3, #24]
 800f762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f76a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f76e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	021b      	lsls	r3, r3, #8
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	4313      	orrs	r3, r2
 800f782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	f023 0320 	bic.w	r3, r3, #32
 800f78a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	011b      	lsls	r3, r3, #4
 800f792:	697a      	ldr	r2, [r7, #20]
 800f794:	4313      	orrs	r3, r2
 800f796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4a28      	ldr	r2, [pc, #160]	; (800f83c <TIM_OC2_SetConfig+0x100>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d003      	beq.n	800f7a8 <TIM_OC2_SetConfig+0x6c>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a27      	ldr	r2, [pc, #156]	; (800f840 <TIM_OC2_SetConfig+0x104>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d10d      	bne.n	800f7c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	011b      	lsls	r3, r3, #4
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a1d      	ldr	r2, [pc, #116]	; (800f83c <TIM_OC2_SetConfig+0x100>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d00f      	beq.n	800f7ec <TIM_OC2_SetConfig+0xb0>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a1c      	ldr	r2, [pc, #112]	; (800f840 <TIM_OC2_SetConfig+0x104>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d00b      	beq.n	800f7ec <TIM_OC2_SetConfig+0xb0>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a1b      	ldr	r2, [pc, #108]	; (800f844 <TIM_OC2_SetConfig+0x108>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d007      	beq.n	800f7ec <TIM_OC2_SetConfig+0xb0>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a1a      	ldr	r2, [pc, #104]	; (800f848 <TIM_OC2_SetConfig+0x10c>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d003      	beq.n	800f7ec <TIM_OC2_SetConfig+0xb0>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4a19      	ldr	r2, [pc, #100]	; (800f84c <TIM_OC2_SetConfig+0x110>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d113      	bne.n	800f814 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	693a      	ldr	r2, [r7, #16]
 800f804:	4313      	orrs	r3, r2
 800f806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	699b      	ldr	r3, [r3, #24]
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	693a      	ldr	r2, [r7, #16]
 800f810:	4313      	orrs	r3, r2
 800f812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	685a      	ldr	r2, [r3, #4]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	621a      	str	r2, [r3, #32]
}
 800f82e:	bf00      	nop
 800f830:	371c      	adds	r7, #28
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	40012c00 	.word	0x40012c00
 800f840:	40013400 	.word	0x40013400
 800f844:	40014000 	.word	0x40014000
 800f848:	40014400 	.word	0x40014400
 800f84c:	40014800 	.word	0x40014800

0800f850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f850:	b480      	push	{r7}
 800f852:	b087      	sub	sp, #28
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a1b      	ldr	r3, [r3, #32]
 800f85e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6a1b      	ldr	r3, [r3, #32]
 800f86a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	69db      	ldr	r3, [r3, #28]
 800f876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f023 0303 	bic.w	r3, r3, #3
 800f88a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	4313      	orrs	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f89c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	021b      	lsls	r3, r3, #8
 800f8a4:	697a      	ldr	r2, [r7, #20]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4a27      	ldr	r2, [pc, #156]	; (800f94c <TIM_OC3_SetConfig+0xfc>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d003      	beq.n	800f8ba <TIM_OC3_SetConfig+0x6a>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4a26      	ldr	r2, [pc, #152]	; (800f950 <TIM_OC3_SetConfig+0x100>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d10d      	bne.n	800f8d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	021b      	lsls	r3, r3, #8
 800f8c8:	697a      	ldr	r2, [r7, #20]
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4a1c      	ldr	r2, [pc, #112]	; (800f94c <TIM_OC3_SetConfig+0xfc>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d00f      	beq.n	800f8fe <TIM_OC3_SetConfig+0xae>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a1b      	ldr	r2, [pc, #108]	; (800f950 <TIM_OC3_SetConfig+0x100>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d00b      	beq.n	800f8fe <TIM_OC3_SetConfig+0xae>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a1a      	ldr	r2, [pc, #104]	; (800f954 <TIM_OC3_SetConfig+0x104>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d007      	beq.n	800f8fe <TIM_OC3_SetConfig+0xae>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a19      	ldr	r2, [pc, #100]	; (800f958 <TIM_OC3_SetConfig+0x108>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d003      	beq.n	800f8fe <TIM_OC3_SetConfig+0xae>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a18      	ldr	r2, [pc, #96]	; (800f95c <TIM_OC3_SetConfig+0x10c>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d113      	bne.n	800f926 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f90c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	695b      	ldr	r3, [r3, #20]
 800f912:	011b      	lsls	r3, r3, #4
 800f914:	693a      	ldr	r2, [r7, #16]
 800f916:	4313      	orrs	r3, r2
 800f918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	011b      	lsls	r3, r3, #4
 800f920:	693a      	ldr	r2, [r7, #16]
 800f922:	4313      	orrs	r3, r2
 800f924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	693a      	ldr	r2, [r7, #16]
 800f92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	685a      	ldr	r2, [r3, #4]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	697a      	ldr	r2, [r7, #20]
 800f93e:	621a      	str	r2, [r3, #32]
}
 800f940:	bf00      	nop
 800f942:	371c      	adds	r7, #28
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	40012c00 	.word	0x40012c00
 800f950:	40013400 	.word	0x40013400
 800f954:	40014000 	.word	0x40014000
 800f958:	40014400 	.word	0x40014400
 800f95c:	40014800 	.word	0x40014800

0800f960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f960:	b480      	push	{r7}
 800f962:	b087      	sub	sp, #28
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
 800f96e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6a1b      	ldr	r3, [r3, #32]
 800f97a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	69db      	ldr	r3, [r3, #28]
 800f986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f98e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f99a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	021b      	lsls	r3, r3, #8
 800f9a2:	68fa      	ldr	r2, [r7, #12]
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	031b      	lsls	r3, r3, #12
 800f9b6:	693a      	ldr	r2, [r7, #16]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a18      	ldr	r2, [pc, #96]	; (800fa20 <TIM_OC4_SetConfig+0xc0>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d00f      	beq.n	800f9e4 <TIM_OC4_SetConfig+0x84>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a17      	ldr	r2, [pc, #92]	; (800fa24 <TIM_OC4_SetConfig+0xc4>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d00b      	beq.n	800f9e4 <TIM_OC4_SetConfig+0x84>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a16      	ldr	r2, [pc, #88]	; (800fa28 <TIM_OC4_SetConfig+0xc8>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d007      	beq.n	800f9e4 <TIM_OC4_SetConfig+0x84>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a15      	ldr	r2, [pc, #84]	; (800fa2c <TIM_OC4_SetConfig+0xcc>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d003      	beq.n	800f9e4 <TIM_OC4_SetConfig+0x84>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a14      	ldr	r2, [pc, #80]	; (800fa30 <TIM_OC4_SetConfig+0xd0>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d109      	bne.n	800f9f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	019b      	lsls	r3, r3, #6
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	685a      	ldr	r2, [r3, #4]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	693a      	ldr	r2, [r7, #16]
 800fa10:	621a      	str	r2, [r3, #32]
}
 800fa12:	bf00      	nop
 800fa14:	371c      	adds	r7, #28
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	40012c00 	.word	0x40012c00
 800fa24:	40013400 	.word	0x40013400
 800fa28:	40014000 	.word	0x40014000
 800fa2c:	40014400 	.word	0x40014400
 800fa30:	40014800 	.word	0x40014800

0800fa34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b087      	sub	sp, #28
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a1b      	ldr	r3, [r3, #32]
 800fa42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	041b      	lsls	r3, r3, #16
 800fa80:	693a      	ldr	r2, [r7, #16]
 800fa82:	4313      	orrs	r3, r2
 800fa84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a17      	ldr	r2, [pc, #92]	; (800fae8 <TIM_OC5_SetConfig+0xb4>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d00f      	beq.n	800faae <TIM_OC5_SetConfig+0x7a>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a16      	ldr	r2, [pc, #88]	; (800faec <TIM_OC5_SetConfig+0xb8>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d00b      	beq.n	800faae <TIM_OC5_SetConfig+0x7a>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4a15      	ldr	r2, [pc, #84]	; (800faf0 <TIM_OC5_SetConfig+0xbc>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d007      	beq.n	800faae <TIM_OC5_SetConfig+0x7a>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4a14      	ldr	r2, [pc, #80]	; (800faf4 <TIM_OC5_SetConfig+0xc0>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d003      	beq.n	800faae <TIM_OC5_SetConfig+0x7a>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4a13      	ldr	r2, [pc, #76]	; (800faf8 <TIM_OC5_SetConfig+0xc4>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d109      	bne.n	800fac2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	021b      	lsls	r3, r3, #8
 800fabc:	697a      	ldr	r2, [r7, #20]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	697a      	ldr	r2, [r7, #20]
 800fac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	685a      	ldr	r2, [r3, #4]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	693a      	ldr	r2, [r7, #16]
 800fada:	621a      	str	r2, [r3, #32]
}
 800fadc:	bf00      	nop
 800fade:	371c      	adds	r7, #28
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr
 800fae8:	40012c00 	.word	0x40012c00
 800faec:	40013400 	.word	0x40013400
 800faf0:	40014000 	.word	0x40014000
 800faf4:	40014400 	.word	0x40014400
 800faf8:	40014800 	.word	0x40014800

0800fafc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b087      	sub	sp, #28
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a1b      	ldr	r3, [r3, #32]
 800fb0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	021b      	lsls	r3, r3, #8
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	051b      	lsls	r3, r3, #20
 800fb4a:	693a      	ldr	r2, [r7, #16]
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a18      	ldr	r2, [pc, #96]	; (800fbb4 <TIM_OC6_SetConfig+0xb8>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d00f      	beq.n	800fb78 <TIM_OC6_SetConfig+0x7c>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a17      	ldr	r2, [pc, #92]	; (800fbb8 <TIM_OC6_SetConfig+0xbc>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d00b      	beq.n	800fb78 <TIM_OC6_SetConfig+0x7c>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a16      	ldr	r2, [pc, #88]	; (800fbbc <TIM_OC6_SetConfig+0xc0>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d007      	beq.n	800fb78 <TIM_OC6_SetConfig+0x7c>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a15      	ldr	r2, [pc, #84]	; (800fbc0 <TIM_OC6_SetConfig+0xc4>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d003      	beq.n	800fb78 <TIM_OC6_SetConfig+0x7c>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4a14      	ldr	r2, [pc, #80]	; (800fbc4 <TIM_OC6_SetConfig+0xc8>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d109      	bne.n	800fb8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	695b      	ldr	r3, [r3, #20]
 800fb84:	029b      	lsls	r3, r3, #10
 800fb86:	697a      	ldr	r2, [r7, #20]
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	621a      	str	r2, [r3, #32]
}
 800fba6:	bf00      	nop
 800fba8:	371c      	adds	r7, #28
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	40012c00 	.word	0x40012c00
 800fbb8:	40013400 	.word	0x40013400
 800fbbc:	40014000 	.word	0x40014000
 800fbc0:	40014400 	.word	0x40014400
 800fbc4:	40014800 	.word	0x40014800

0800fbc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b087      	sub	sp, #28
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	f003 031f 	and.w	r3, r3, #31
 800fbda:	2201      	movs	r2, #1
 800fbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800fbe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6a1a      	ldr	r2, [r3, #32]
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	43db      	mvns	r3, r3
 800fbea:	401a      	ands	r2, r3
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6a1a      	ldr	r2, [r3, #32]
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	f003 031f 	and.w	r3, r3, #31
 800fbfa:	6879      	ldr	r1, [r7, #4]
 800fbfc:	fa01 f303 	lsl.w	r3, r1, r3
 800fc00:	431a      	orrs	r2, r3
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	621a      	str	r2, [r3, #32]
}
 800fc06:	bf00      	nop
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
	...

0800fc14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b085      	sub	sp, #20
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d101      	bne.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc28:	2302      	movs	r3, #2
 800fc2a:	e068      	b.n	800fcfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2202      	movs	r2, #2
 800fc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a2e      	ldr	r2, [pc, #184]	; (800fd0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d004      	beq.n	800fc60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4a2d      	ldr	r2, [pc, #180]	; (800fd10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d108      	bne.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	4313      	orrs	r3, r2
 800fc82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a1e      	ldr	r2, [pc, #120]	; (800fd0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d01d      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc9e:	d018      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a1b      	ldr	r2, [pc, #108]	; (800fd14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d013      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a1a      	ldr	r2, [pc, #104]	; (800fd18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d00e      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a18      	ldr	r2, [pc, #96]	; (800fd1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d009      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a13      	ldr	r2, [pc, #76]	; (800fd10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d004      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a14      	ldr	r2, [pc, #80]	; (800fd20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d10c      	bne.n	800fcec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	68ba      	ldr	r2, [r7, #8]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	40012c00 	.word	0x40012c00
 800fd10:	40013400 	.word	0x40013400
 800fd14:	40000400 	.word	0x40000400
 800fd18:	40000800 	.word	0x40000800
 800fd1c:	40000c00 	.word	0x40000c00
 800fd20:	40014000 	.word	0x40014000

0800fd24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd2c:	bf00      	nop
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd40:	bf00      	nop
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d101      	bne.n	800fd72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e040      	b.n	800fdf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d106      	bne.n	800fd88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7f7 fa30 	bl	80071e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2224      	movs	r2, #36	; 0x24
 800fd8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f022 0201 	bic.w	r2, r2, #1
 800fd9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fae2 	bl	8010368 <UART_SetConfig>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d101      	bne.n	800fdae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	e022      	b.n	800fdf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 fd60 	bl	801087c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fdca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	689a      	ldr	r2, [r3, #8]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fdda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f042 0201 	orr.w	r2, r2, #1
 800fdea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fde7 	bl	80109c0 <UART_CheckIdleState>
 800fdf2:	4603      	mov	r3, r0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08a      	sub	sp, #40	; 0x28
 800fe00:	af02      	add	r7, sp, #8
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	603b      	str	r3, [r7, #0]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe10:	2b20      	cmp	r3, #32
 800fe12:	f040 8082 	bne.w	800ff1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d002      	beq.n	800fe22 <HAL_UART_Transmit+0x26>
 800fe1c:	88fb      	ldrh	r3, [r7, #6]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d101      	bne.n	800fe26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fe22:	2301      	movs	r3, #1
 800fe24:	e07a      	b.n	800ff1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d101      	bne.n	800fe34 <HAL_UART_Transmit+0x38>
 800fe30:	2302      	movs	r3, #2
 800fe32:	e073      	b.n	800ff1c <HAL_UART_Transmit+0x120>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2221      	movs	r2, #33	; 0x21
 800fe48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe4a:	f7f7 fe53 	bl	8007af4 <HAL_GetTick>
 800fe4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	88fa      	ldrh	r2, [r7, #6]
 800fe54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	88fa      	ldrh	r2, [r7, #6]
 800fe5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe68:	d108      	bne.n	800fe7c <HAL_UART_Transmit+0x80>
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d104      	bne.n	800fe7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	61bb      	str	r3, [r7, #24]
 800fe7a:	e003      	b.n	800fe84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe80:	2300      	movs	r3, #0
 800fe82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fe8c:	e02d      	b.n	800feea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	2200      	movs	r2, #0
 800fe96:	2180      	movs	r1, #128	; 0x80
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 fdda 	bl	8010a52 <UART_WaitOnFlagUntilTimeout>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d001      	beq.n	800fea8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fea4:	2303      	movs	r3, #3
 800fea6:	e039      	b.n	800ff1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d10b      	bne.n	800fec6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	881a      	ldrh	r2, [r3, #0]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800feba:	b292      	uxth	r2, r2
 800febc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	3302      	adds	r3, #2
 800fec2:	61bb      	str	r3, [r7, #24]
 800fec4:	e008      	b.n	800fed8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	781a      	ldrb	r2, [r3, #0]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	b292      	uxth	r2, r2
 800fed0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	3301      	adds	r3, #1
 800fed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fede:	b29b      	uxth	r3, r3
 800fee0:	3b01      	subs	r3, #1
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d1cb      	bne.n	800fe8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	9300      	str	r3, [sp, #0]
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	2200      	movs	r2, #0
 800fefe:	2140      	movs	r1, #64	; 0x40
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f000 fda6 	bl	8010a52 <UART_WaitOnFlagUntilTimeout>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e005      	b.n	800ff1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2220      	movs	r2, #32
 800ff14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ff16:	2300      	movs	r3, #0
 800ff18:	e000      	b.n	800ff1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800ff1a:	2302      	movs	r3, #2
  }
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3720      	adds	r7, #32
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b088      	sub	sp, #32
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	69db      	ldr	r3, [r3, #28]
 800ff32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff44:	69fa      	ldr	r2, [r7, #28]
 800ff46:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff4a:	4013      	ands	r3, r2
 800ff4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d113      	bne.n	800ff7c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	f003 0320 	and.w	r3, r3, #32
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d00e      	beq.n	800ff7c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	f003 0320 	and.w	r3, r3, #32
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d009      	beq.n	800ff7c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f000 81ce 	beq.w	801030e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	4798      	blx	r3
      }
      return;
 800ff7a:	e1c8      	b.n	801030e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f000 80e3 	beq.w	801014a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d105      	bne.n	800ff9a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ff8e:	69ba      	ldr	r2, [r7, #24]
 800ff90:	4ba6      	ldr	r3, [pc, #664]	; (801022c <HAL_UART_IRQHandler+0x308>)
 800ff92:	4013      	ands	r3, r2
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 80d8 	beq.w	801014a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	f003 0301 	and.w	r3, r3, #1
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d010      	beq.n	800ffc6 <HAL_UART_IRQHandler+0xa2>
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00b      	beq.n	800ffc6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffbc:	f043 0201 	orr.w	r2, r3, #1
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	f003 0302 	and.w	r3, r3, #2
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d010      	beq.n	800fff2 <HAL_UART_IRQHandler+0xce>
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00b      	beq.n	800fff2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2202      	movs	r2, #2
 800ffe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffe8:	f043 0204 	orr.w	r2, r3, #4
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	f003 0304 	and.w	r3, r3, #4
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d010      	beq.n	801001e <HAL_UART_IRQHandler+0xfa>
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00b      	beq.n	801001e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2204      	movs	r2, #4
 801000c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010014:	f043 0202 	orr.w	r2, r3, #2
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	f003 0308 	and.w	r3, r3, #8
 8010024:	2b00      	cmp	r3, #0
 8010026:	d015      	beq.n	8010054 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	f003 0320 	and.w	r3, r3, #32
 801002e:	2b00      	cmp	r3, #0
 8010030:	d104      	bne.n	801003c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010038:	2b00      	cmp	r3, #0
 801003a:	d00b      	beq.n	8010054 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2208      	movs	r2, #8
 8010042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801004a:	f043 0208 	orr.w	r2, r3, #8
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801005a:	2b00      	cmp	r3, #0
 801005c:	d011      	beq.n	8010082 <HAL_UART_IRQHandler+0x15e>
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010064:	2b00      	cmp	r3, #0
 8010066:	d00c      	beq.n	8010082 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010078:	f043 0220 	orr.w	r2, r3, #32
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010088:	2b00      	cmp	r3, #0
 801008a:	f000 8142 	beq.w	8010312 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	f003 0320 	and.w	r3, r3, #32
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00c      	beq.n	80100b2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	f003 0320 	and.w	r3, r3, #32
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d007      	beq.n	80100b2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d003      	beq.n	80100b2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100c4:	2b40      	cmp	r3, #64	; 0x40
 80100c6:	d004      	beq.n	80100d2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d031      	beq.n	8010136 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 fd39 	bl	8010b4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100e2:	2b40      	cmp	r3, #64	; 0x40
 80100e4:	d123      	bne.n	801012e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	689a      	ldr	r2, [r3, #8]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d013      	beq.n	8010126 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010102:	4a4b      	ldr	r2, [pc, #300]	; (8010230 <HAL_UART_IRQHandler+0x30c>)
 8010104:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801010a:	4618      	mov	r0, r3
 801010c:	f7f9 fd1e 	bl	8009b4c <HAL_DMA_Abort_IT>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d017      	beq.n	8010146 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801011a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8010120:	4610      	mov	r0, r2
 8010122:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010124:	e00f      	b.n	8010146 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f908 	bl	801033c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801012c:	e00b      	b.n	8010146 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 f904 	bl	801033c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010134:	e007      	b.n	8010146 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f900 	bl	801033c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8010144:	e0e5      	b.n	8010312 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010146:	bf00      	nop
    return;
 8010148:	e0e3      	b.n	8010312 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801014e:	2b01      	cmp	r3, #1
 8010150:	f040 80a9 	bne.w	80102a6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	f003 0310 	and.w	r3, r3, #16
 801015a:	2b00      	cmp	r3, #0
 801015c:	f000 80a3 	beq.w	80102a6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	f003 0310 	and.w	r3, r3, #16
 8010166:	2b00      	cmp	r3, #0
 8010168:	f000 809d 	beq.w	80102a6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2210      	movs	r2, #16
 8010172:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	689b      	ldr	r3, [r3, #8]
 801017a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801017e:	2b40      	cmp	r3, #64	; 0x40
 8010180:	d158      	bne.n	8010234 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 801018c:	893b      	ldrh	r3, [r7, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	f000 80c1 	beq.w	8010316 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801019a:	893a      	ldrh	r2, [r7, #8]
 801019c:	429a      	cmp	r2, r3
 801019e:	f080 80ba 	bcs.w	8010316 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	893a      	ldrh	r2, [r7, #8]
 80101a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f003 0320 	and.w	r3, r3, #32
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d12a      	bne.n	8010210 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80101c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	689a      	ldr	r2, [r3, #8]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f022 0201 	bic.w	r2, r2, #1
 80101d8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	689a      	ldr	r2, [r3, #8]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101e8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2220      	movs	r2, #32
 80101ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f022 0210 	bic.w	r2, r2, #16
 8010204:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801020a:	4618      	mov	r0, r3
 801020c:	f7f9 fc60 	bl	8009ad0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801021c:	b29b      	uxth	r3, r3
 801021e:	1ad3      	subs	r3, r2, r3
 8010220:	b29b      	uxth	r3, r3
 8010222:	4619      	mov	r1, r3
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f893 	bl	8010350 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801022a:	e074      	b.n	8010316 <HAL_UART_IRQHandler+0x3f2>
 801022c:	04000120 	.word	0x04000120
 8010230:	08010ba9 	.word	0x08010ba9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010240:	b29b      	uxth	r3, r3
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801024c:	b29b      	uxth	r3, r3
 801024e:	2b00      	cmp	r3, #0
 8010250:	d063      	beq.n	801031a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8010252:	897b      	ldrh	r3, [r7, #10]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d060      	beq.n	801031a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010266:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	689a      	ldr	r2, [r3, #8]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f022 0201 	bic.w	r2, r2, #1
 8010276:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2220      	movs	r2, #32
 801027c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2200      	movs	r2, #0
 8010282:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f022 0210 	bic.w	r2, r2, #16
 8010298:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801029a:	897b      	ldrh	r3, [r7, #10]
 801029c:	4619      	mov	r1, r3
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 f856 	bl	8010350 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80102a4:	e039      	b.n	801031a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00d      	beq.n	80102cc <HAL_UART_IRQHandler+0x3a8>
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d008      	beq.n	80102cc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80102c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fc9e 	bl	8010c06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80102ca:	e029      	b.n	8010320 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d00d      	beq.n	80102f2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d008      	beq.n	80102f2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d01a      	beq.n	801031e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	4798      	blx	r3
    }
    return;
 80102f0:	e015      	b.n	801031e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d011      	beq.n	8010320 <HAL_UART_IRQHandler+0x3fc>
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00c      	beq.n	8010320 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 fc64 	bl	8010bd4 <UART_EndTransmit_IT>
    return;
 801030c:	e008      	b.n	8010320 <HAL_UART_IRQHandler+0x3fc>
      return;
 801030e:	bf00      	nop
 8010310:	e006      	b.n	8010320 <HAL_UART_IRQHandler+0x3fc>
    return;
 8010312:	bf00      	nop
 8010314:	e004      	b.n	8010320 <HAL_UART_IRQHandler+0x3fc>
      return;
 8010316:	bf00      	nop
 8010318:	e002      	b.n	8010320 <HAL_UART_IRQHandler+0x3fc>
      return;
 801031a:	bf00      	nop
 801031c:	e000      	b.n	8010320 <HAL_UART_IRQHandler+0x3fc>
    return;
 801031e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8010320:	3720      	adds	r7, #32
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop

08010328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010330:	bf00      	nop
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010344:	bf00      	nop
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	460b      	mov	r3, r1
 801035a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801035c:	bf00      	nop
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010368:	b5b0      	push	{r4, r5, r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010370:	2300      	movs	r3, #0
 8010372:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	689a      	ldr	r2, [r3, #8]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	691b      	ldr	r3, [r3, #16]
 801037c:	431a      	orrs	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	695b      	ldr	r3, [r3, #20]
 8010382:	431a      	orrs	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	69db      	ldr	r3, [r3, #28]
 8010388:	4313      	orrs	r3, r2
 801038a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	4bad      	ldr	r3, [pc, #692]	; (8010648 <UART_SetConfig+0x2e0>)
 8010394:	4013      	ands	r3, r2
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	6812      	ldr	r2, [r2, #0]
 801039a:	69f9      	ldr	r1, [r7, #28]
 801039c:	430b      	orrs	r3, r1
 801039e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	68da      	ldr	r2, [r3, #12]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	430a      	orrs	r2, r1
 80103b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	699b      	ldr	r3, [r3, #24]
 80103ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4aa2      	ldr	r2, [pc, #648]	; (801064c <UART_SetConfig+0x2e4>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d004      	beq.n	80103d0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	69fa      	ldr	r2, [r7, #28]
 80103cc:	4313      	orrs	r3, r2
 80103ce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	69fa      	ldr	r2, [r7, #28]
 80103e0:	430a      	orrs	r2, r1
 80103e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4a99      	ldr	r2, [pc, #612]	; (8010650 <UART_SetConfig+0x2e8>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d121      	bne.n	8010432 <UART_SetConfig+0xca>
 80103ee:	4b99      	ldr	r3, [pc, #612]	; (8010654 <UART_SetConfig+0x2ec>)
 80103f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103f4:	f003 0303 	and.w	r3, r3, #3
 80103f8:	2b03      	cmp	r3, #3
 80103fa:	d817      	bhi.n	801042c <UART_SetConfig+0xc4>
 80103fc:	a201      	add	r2, pc, #4	; (adr r2, 8010404 <UART_SetConfig+0x9c>)
 80103fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010402:	bf00      	nop
 8010404:	08010415 	.word	0x08010415
 8010408:	08010421 	.word	0x08010421
 801040c:	0801041b 	.word	0x0801041b
 8010410:	08010427 	.word	0x08010427
 8010414:	2301      	movs	r3, #1
 8010416:	76fb      	strb	r3, [r7, #27]
 8010418:	e0e7      	b.n	80105ea <UART_SetConfig+0x282>
 801041a:	2302      	movs	r3, #2
 801041c:	76fb      	strb	r3, [r7, #27]
 801041e:	e0e4      	b.n	80105ea <UART_SetConfig+0x282>
 8010420:	2304      	movs	r3, #4
 8010422:	76fb      	strb	r3, [r7, #27]
 8010424:	e0e1      	b.n	80105ea <UART_SetConfig+0x282>
 8010426:	2308      	movs	r3, #8
 8010428:	76fb      	strb	r3, [r7, #27]
 801042a:	e0de      	b.n	80105ea <UART_SetConfig+0x282>
 801042c:	2310      	movs	r3, #16
 801042e:	76fb      	strb	r3, [r7, #27]
 8010430:	e0db      	b.n	80105ea <UART_SetConfig+0x282>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a88      	ldr	r2, [pc, #544]	; (8010658 <UART_SetConfig+0x2f0>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d132      	bne.n	80104a2 <UART_SetConfig+0x13a>
 801043c:	4b85      	ldr	r3, [pc, #532]	; (8010654 <UART_SetConfig+0x2ec>)
 801043e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010442:	f003 030c 	and.w	r3, r3, #12
 8010446:	2b0c      	cmp	r3, #12
 8010448:	d828      	bhi.n	801049c <UART_SetConfig+0x134>
 801044a:	a201      	add	r2, pc, #4	; (adr r2, 8010450 <UART_SetConfig+0xe8>)
 801044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010450:	08010485 	.word	0x08010485
 8010454:	0801049d 	.word	0x0801049d
 8010458:	0801049d 	.word	0x0801049d
 801045c:	0801049d 	.word	0x0801049d
 8010460:	08010491 	.word	0x08010491
 8010464:	0801049d 	.word	0x0801049d
 8010468:	0801049d 	.word	0x0801049d
 801046c:	0801049d 	.word	0x0801049d
 8010470:	0801048b 	.word	0x0801048b
 8010474:	0801049d 	.word	0x0801049d
 8010478:	0801049d 	.word	0x0801049d
 801047c:	0801049d 	.word	0x0801049d
 8010480:	08010497 	.word	0x08010497
 8010484:	2300      	movs	r3, #0
 8010486:	76fb      	strb	r3, [r7, #27]
 8010488:	e0af      	b.n	80105ea <UART_SetConfig+0x282>
 801048a:	2302      	movs	r3, #2
 801048c:	76fb      	strb	r3, [r7, #27]
 801048e:	e0ac      	b.n	80105ea <UART_SetConfig+0x282>
 8010490:	2304      	movs	r3, #4
 8010492:	76fb      	strb	r3, [r7, #27]
 8010494:	e0a9      	b.n	80105ea <UART_SetConfig+0x282>
 8010496:	2308      	movs	r3, #8
 8010498:	76fb      	strb	r3, [r7, #27]
 801049a:	e0a6      	b.n	80105ea <UART_SetConfig+0x282>
 801049c:	2310      	movs	r3, #16
 801049e:	76fb      	strb	r3, [r7, #27]
 80104a0:	e0a3      	b.n	80105ea <UART_SetConfig+0x282>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a6d      	ldr	r2, [pc, #436]	; (801065c <UART_SetConfig+0x2f4>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d120      	bne.n	80104ee <UART_SetConfig+0x186>
 80104ac:	4b69      	ldr	r3, [pc, #420]	; (8010654 <UART_SetConfig+0x2ec>)
 80104ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80104b6:	2b30      	cmp	r3, #48	; 0x30
 80104b8:	d013      	beq.n	80104e2 <UART_SetConfig+0x17a>
 80104ba:	2b30      	cmp	r3, #48	; 0x30
 80104bc:	d814      	bhi.n	80104e8 <UART_SetConfig+0x180>
 80104be:	2b20      	cmp	r3, #32
 80104c0:	d009      	beq.n	80104d6 <UART_SetConfig+0x16e>
 80104c2:	2b20      	cmp	r3, #32
 80104c4:	d810      	bhi.n	80104e8 <UART_SetConfig+0x180>
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d002      	beq.n	80104d0 <UART_SetConfig+0x168>
 80104ca:	2b10      	cmp	r3, #16
 80104cc:	d006      	beq.n	80104dc <UART_SetConfig+0x174>
 80104ce:	e00b      	b.n	80104e8 <UART_SetConfig+0x180>
 80104d0:	2300      	movs	r3, #0
 80104d2:	76fb      	strb	r3, [r7, #27]
 80104d4:	e089      	b.n	80105ea <UART_SetConfig+0x282>
 80104d6:	2302      	movs	r3, #2
 80104d8:	76fb      	strb	r3, [r7, #27]
 80104da:	e086      	b.n	80105ea <UART_SetConfig+0x282>
 80104dc:	2304      	movs	r3, #4
 80104de:	76fb      	strb	r3, [r7, #27]
 80104e0:	e083      	b.n	80105ea <UART_SetConfig+0x282>
 80104e2:	2308      	movs	r3, #8
 80104e4:	76fb      	strb	r3, [r7, #27]
 80104e6:	e080      	b.n	80105ea <UART_SetConfig+0x282>
 80104e8:	2310      	movs	r3, #16
 80104ea:	76fb      	strb	r3, [r7, #27]
 80104ec:	e07d      	b.n	80105ea <UART_SetConfig+0x282>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4a5b      	ldr	r2, [pc, #364]	; (8010660 <UART_SetConfig+0x2f8>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d120      	bne.n	801053a <UART_SetConfig+0x1d2>
 80104f8:	4b56      	ldr	r3, [pc, #344]	; (8010654 <UART_SetConfig+0x2ec>)
 80104fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010502:	2bc0      	cmp	r3, #192	; 0xc0
 8010504:	d013      	beq.n	801052e <UART_SetConfig+0x1c6>
 8010506:	2bc0      	cmp	r3, #192	; 0xc0
 8010508:	d814      	bhi.n	8010534 <UART_SetConfig+0x1cc>
 801050a:	2b80      	cmp	r3, #128	; 0x80
 801050c:	d009      	beq.n	8010522 <UART_SetConfig+0x1ba>
 801050e:	2b80      	cmp	r3, #128	; 0x80
 8010510:	d810      	bhi.n	8010534 <UART_SetConfig+0x1cc>
 8010512:	2b00      	cmp	r3, #0
 8010514:	d002      	beq.n	801051c <UART_SetConfig+0x1b4>
 8010516:	2b40      	cmp	r3, #64	; 0x40
 8010518:	d006      	beq.n	8010528 <UART_SetConfig+0x1c0>
 801051a:	e00b      	b.n	8010534 <UART_SetConfig+0x1cc>
 801051c:	2300      	movs	r3, #0
 801051e:	76fb      	strb	r3, [r7, #27]
 8010520:	e063      	b.n	80105ea <UART_SetConfig+0x282>
 8010522:	2302      	movs	r3, #2
 8010524:	76fb      	strb	r3, [r7, #27]
 8010526:	e060      	b.n	80105ea <UART_SetConfig+0x282>
 8010528:	2304      	movs	r3, #4
 801052a:	76fb      	strb	r3, [r7, #27]
 801052c:	e05d      	b.n	80105ea <UART_SetConfig+0x282>
 801052e:	2308      	movs	r3, #8
 8010530:	76fb      	strb	r3, [r7, #27]
 8010532:	e05a      	b.n	80105ea <UART_SetConfig+0x282>
 8010534:	2310      	movs	r3, #16
 8010536:	76fb      	strb	r3, [r7, #27]
 8010538:	e057      	b.n	80105ea <UART_SetConfig+0x282>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4a49      	ldr	r2, [pc, #292]	; (8010664 <UART_SetConfig+0x2fc>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d125      	bne.n	8010590 <UART_SetConfig+0x228>
 8010544:	4b43      	ldr	r3, [pc, #268]	; (8010654 <UART_SetConfig+0x2ec>)
 8010546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801054a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801054e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010552:	d017      	beq.n	8010584 <UART_SetConfig+0x21c>
 8010554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010558:	d817      	bhi.n	801058a <UART_SetConfig+0x222>
 801055a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801055e:	d00b      	beq.n	8010578 <UART_SetConfig+0x210>
 8010560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010564:	d811      	bhi.n	801058a <UART_SetConfig+0x222>
 8010566:	2b00      	cmp	r3, #0
 8010568:	d003      	beq.n	8010572 <UART_SetConfig+0x20a>
 801056a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801056e:	d006      	beq.n	801057e <UART_SetConfig+0x216>
 8010570:	e00b      	b.n	801058a <UART_SetConfig+0x222>
 8010572:	2300      	movs	r3, #0
 8010574:	76fb      	strb	r3, [r7, #27]
 8010576:	e038      	b.n	80105ea <UART_SetConfig+0x282>
 8010578:	2302      	movs	r3, #2
 801057a:	76fb      	strb	r3, [r7, #27]
 801057c:	e035      	b.n	80105ea <UART_SetConfig+0x282>
 801057e:	2304      	movs	r3, #4
 8010580:	76fb      	strb	r3, [r7, #27]
 8010582:	e032      	b.n	80105ea <UART_SetConfig+0x282>
 8010584:	2308      	movs	r3, #8
 8010586:	76fb      	strb	r3, [r7, #27]
 8010588:	e02f      	b.n	80105ea <UART_SetConfig+0x282>
 801058a:	2310      	movs	r3, #16
 801058c:	76fb      	strb	r3, [r7, #27]
 801058e:	e02c      	b.n	80105ea <UART_SetConfig+0x282>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a2d      	ldr	r2, [pc, #180]	; (801064c <UART_SetConfig+0x2e4>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d125      	bne.n	80105e6 <UART_SetConfig+0x27e>
 801059a:	4b2e      	ldr	r3, [pc, #184]	; (8010654 <UART_SetConfig+0x2ec>)
 801059c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80105a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80105a8:	d017      	beq.n	80105da <UART_SetConfig+0x272>
 80105aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80105ae:	d817      	bhi.n	80105e0 <UART_SetConfig+0x278>
 80105b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105b4:	d00b      	beq.n	80105ce <UART_SetConfig+0x266>
 80105b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105ba:	d811      	bhi.n	80105e0 <UART_SetConfig+0x278>
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d003      	beq.n	80105c8 <UART_SetConfig+0x260>
 80105c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80105c4:	d006      	beq.n	80105d4 <UART_SetConfig+0x26c>
 80105c6:	e00b      	b.n	80105e0 <UART_SetConfig+0x278>
 80105c8:	2300      	movs	r3, #0
 80105ca:	76fb      	strb	r3, [r7, #27]
 80105cc:	e00d      	b.n	80105ea <UART_SetConfig+0x282>
 80105ce:	2302      	movs	r3, #2
 80105d0:	76fb      	strb	r3, [r7, #27]
 80105d2:	e00a      	b.n	80105ea <UART_SetConfig+0x282>
 80105d4:	2304      	movs	r3, #4
 80105d6:	76fb      	strb	r3, [r7, #27]
 80105d8:	e007      	b.n	80105ea <UART_SetConfig+0x282>
 80105da:	2308      	movs	r3, #8
 80105dc:	76fb      	strb	r3, [r7, #27]
 80105de:	e004      	b.n	80105ea <UART_SetConfig+0x282>
 80105e0:	2310      	movs	r3, #16
 80105e2:	76fb      	strb	r3, [r7, #27]
 80105e4:	e001      	b.n	80105ea <UART_SetConfig+0x282>
 80105e6:	2310      	movs	r3, #16
 80105e8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4a17      	ldr	r2, [pc, #92]	; (801064c <UART_SetConfig+0x2e4>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	f040 8087 	bne.w	8010704 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80105f6:	7efb      	ldrb	r3, [r7, #27]
 80105f8:	2b08      	cmp	r3, #8
 80105fa:	d837      	bhi.n	801066c <UART_SetConfig+0x304>
 80105fc:	a201      	add	r2, pc, #4	; (adr r2, 8010604 <UART_SetConfig+0x29c>)
 80105fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010602:	bf00      	nop
 8010604:	08010629 	.word	0x08010629
 8010608:	0801066d 	.word	0x0801066d
 801060c:	08010631 	.word	0x08010631
 8010610:	0801066d 	.word	0x0801066d
 8010614:	08010637 	.word	0x08010637
 8010618:	0801066d 	.word	0x0801066d
 801061c:	0801066d 	.word	0x0801066d
 8010620:	0801066d 	.word	0x0801066d
 8010624:	0801063f 	.word	0x0801063f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010628:	f7fc f9e6 	bl	800c9f8 <HAL_RCC_GetPCLK1Freq>
 801062c:	6178      	str	r0, [r7, #20]
        break;
 801062e:	e022      	b.n	8010676 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010630:	4b0d      	ldr	r3, [pc, #52]	; (8010668 <UART_SetConfig+0x300>)
 8010632:	617b      	str	r3, [r7, #20]
        break;
 8010634:	e01f      	b.n	8010676 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010636:	f7fc f947 	bl	800c8c8 <HAL_RCC_GetSysClockFreq>
 801063a:	6178      	str	r0, [r7, #20]
        break;
 801063c:	e01b      	b.n	8010676 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801063e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010642:	617b      	str	r3, [r7, #20]
        break;
 8010644:	e017      	b.n	8010676 <UART_SetConfig+0x30e>
 8010646:	bf00      	nop
 8010648:	efff69f3 	.word	0xefff69f3
 801064c:	40008000 	.word	0x40008000
 8010650:	40013800 	.word	0x40013800
 8010654:	40021000 	.word	0x40021000
 8010658:	40004400 	.word	0x40004400
 801065c:	40004800 	.word	0x40004800
 8010660:	40004c00 	.word	0x40004c00
 8010664:	40005000 	.word	0x40005000
 8010668:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 801066c:	2300      	movs	r3, #0
 801066e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010670:	2301      	movs	r3, #1
 8010672:	76bb      	strb	r3, [r7, #26]
        break;
 8010674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 80f1 	beq.w	8010860 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	685a      	ldr	r2, [r3, #4]
 8010682:	4613      	mov	r3, r2
 8010684:	005b      	lsls	r3, r3, #1
 8010686:	4413      	add	r3, r2
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	429a      	cmp	r2, r3
 801068c:	d305      	bcc.n	801069a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	429a      	cmp	r2, r3
 8010698:	d902      	bls.n	80106a0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 801069a:	2301      	movs	r3, #1
 801069c:	76bb      	strb	r3, [r7, #26]
 801069e:	e0df      	b.n	8010860 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f04f 0100 	mov.w	r1, #0
 80106a8:	f04f 0200 	mov.w	r2, #0
 80106ac:	f04f 0300 	mov.w	r3, #0
 80106b0:	020b      	lsls	r3, r1, #8
 80106b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80106b6:	0202      	lsls	r2, r0, #8
 80106b8:	6879      	ldr	r1, [r7, #4]
 80106ba:	6849      	ldr	r1, [r1, #4]
 80106bc:	0849      	lsrs	r1, r1, #1
 80106be:	4608      	mov	r0, r1
 80106c0:	f04f 0100 	mov.w	r1, #0
 80106c4:	1814      	adds	r4, r2, r0
 80106c6:	eb43 0501 	adc.w	r5, r3, r1
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	461a      	mov	r2, r3
 80106d0:	f04f 0300 	mov.w	r3, #0
 80106d4:	4620      	mov	r0, r4
 80106d6:	4629      	mov	r1, r5
 80106d8:	f7f0 fb36 	bl	8000d48 <__aeabi_uldivmod>
 80106dc:	4602      	mov	r2, r0
 80106de:	460b      	mov	r3, r1
 80106e0:	4613      	mov	r3, r2
 80106e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80106ea:	d308      	bcc.n	80106fe <UART_SetConfig+0x396>
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106f2:	d204      	bcs.n	80106fe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	60da      	str	r2, [r3, #12]
 80106fc:	e0b0      	b.n	8010860 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80106fe:	2301      	movs	r3, #1
 8010700:	76bb      	strb	r3, [r7, #26]
 8010702:	e0ad      	b.n	8010860 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	69db      	ldr	r3, [r3, #28]
 8010708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801070c:	d15c      	bne.n	80107c8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 801070e:	7efb      	ldrb	r3, [r7, #27]
 8010710:	2b08      	cmp	r3, #8
 8010712:	d828      	bhi.n	8010766 <UART_SetConfig+0x3fe>
 8010714:	a201      	add	r2, pc, #4	; (adr r2, 801071c <UART_SetConfig+0x3b4>)
 8010716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801071a:	bf00      	nop
 801071c:	08010741 	.word	0x08010741
 8010720:	08010749 	.word	0x08010749
 8010724:	08010751 	.word	0x08010751
 8010728:	08010767 	.word	0x08010767
 801072c:	08010757 	.word	0x08010757
 8010730:	08010767 	.word	0x08010767
 8010734:	08010767 	.word	0x08010767
 8010738:	08010767 	.word	0x08010767
 801073c:	0801075f 	.word	0x0801075f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010740:	f7fc f95a 	bl	800c9f8 <HAL_RCC_GetPCLK1Freq>
 8010744:	6178      	str	r0, [r7, #20]
        break;
 8010746:	e013      	b.n	8010770 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010748:	f7fc f96c 	bl	800ca24 <HAL_RCC_GetPCLK2Freq>
 801074c:	6178      	str	r0, [r7, #20]
        break;
 801074e:	e00f      	b.n	8010770 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010750:	4b49      	ldr	r3, [pc, #292]	; (8010878 <UART_SetConfig+0x510>)
 8010752:	617b      	str	r3, [r7, #20]
        break;
 8010754:	e00c      	b.n	8010770 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010756:	f7fc f8b7 	bl	800c8c8 <HAL_RCC_GetSysClockFreq>
 801075a:	6178      	str	r0, [r7, #20]
        break;
 801075c:	e008      	b.n	8010770 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801075e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010762:	617b      	str	r3, [r7, #20]
        break;
 8010764:	e004      	b.n	8010770 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8010766:	2300      	movs	r3, #0
 8010768:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801076a:	2301      	movs	r3, #1
 801076c:	76bb      	strb	r3, [r7, #26]
        break;
 801076e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d074      	beq.n	8010860 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	005a      	lsls	r2, r3, #1
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	085b      	lsrs	r3, r3, #1
 8010780:	441a      	add	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	fbb2 f3f3 	udiv	r3, r2, r3
 801078a:	b29b      	uxth	r3, r3
 801078c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	2b0f      	cmp	r3, #15
 8010792:	d916      	bls.n	80107c2 <UART_SetConfig+0x45a>
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801079a:	d212      	bcs.n	80107c2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	b29b      	uxth	r3, r3
 80107a0:	f023 030f 	bic.w	r3, r3, #15
 80107a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	085b      	lsrs	r3, r3, #1
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	f003 0307 	and.w	r3, r3, #7
 80107b0:	b29a      	uxth	r2, r3
 80107b2:	89fb      	ldrh	r3, [r7, #14]
 80107b4:	4313      	orrs	r3, r2
 80107b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	89fa      	ldrh	r2, [r7, #14]
 80107be:	60da      	str	r2, [r3, #12]
 80107c0:	e04e      	b.n	8010860 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80107c2:	2301      	movs	r3, #1
 80107c4:	76bb      	strb	r3, [r7, #26]
 80107c6:	e04b      	b.n	8010860 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107c8:	7efb      	ldrb	r3, [r7, #27]
 80107ca:	2b08      	cmp	r3, #8
 80107cc:	d827      	bhi.n	801081e <UART_SetConfig+0x4b6>
 80107ce:	a201      	add	r2, pc, #4	; (adr r2, 80107d4 <UART_SetConfig+0x46c>)
 80107d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d4:	080107f9 	.word	0x080107f9
 80107d8:	08010801 	.word	0x08010801
 80107dc:	08010809 	.word	0x08010809
 80107e0:	0801081f 	.word	0x0801081f
 80107e4:	0801080f 	.word	0x0801080f
 80107e8:	0801081f 	.word	0x0801081f
 80107ec:	0801081f 	.word	0x0801081f
 80107f0:	0801081f 	.word	0x0801081f
 80107f4:	08010817 	.word	0x08010817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107f8:	f7fc f8fe 	bl	800c9f8 <HAL_RCC_GetPCLK1Freq>
 80107fc:	6178      	str	r0, [r7, #20]
        break;
 80107fe:	e013      	b.n	8010828 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010800:	f7fc f910 	bl	800ca24 <HAL_RCC_GetPCLK2Freq>
 8010804:	6178      	str	r0, [r7, #20]
        break;
 8010806:	e00f      	b.n	8010828 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010808:	4b1b      	ldr	r3, [pc, #108]	; (8010878 <UART_SetConfig+0x510>)
 801080a:	617b      	str	r3, [r7, #20]
        break;
 801080c:	e00c      	b.n	8010828 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801080e:	f7fc f85b 	bl	800c8c8 <HAL_RCC_GetSysClockFreq>
 8010812:	6178      	str	r0, [r7, #20]
        break;
 8010814:	e008      	b.n	8010828 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801081a:	617b      	str	r3, [r7, #20]
        break;
 801081c:	e004      	b.n	8010828 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801081e:	2300      	movs	r3, #0
 8010820:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010822:	2301      	movs	r3, #1
 8010824:	76bb      	strb	r3, [r7, #26]
        break;
 8010826:	bf00      	nop
    }

    if (pclk != 0U)
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d018      	beq.n	8010860 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	085a      	lsrs	r2, r3, #1
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	441a      	add	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010840:	b29b      	uxth	r3, r3
 8010842:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	2b0f      	cmp	r3, #15
 8010848:	d908      	bls.n	801085c <UART_SetConfig+0x4f4>
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010850:	d204      	bcs.n	801085c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	693a      	ldr	r2, [r7, #16]
 8010858:	60da      	str	r2, [r3, #12]
 801085a:	e001      	b.n	8010860 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801085c:	2301      	movs	r3, #1
 801085e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801086c:	7ebb      	ldrb	r3, [r7, #26]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3720      	adds	r7, #32
 8010872:	46bd      	mov	sp, r7
 8010874:	bdb0      	pop	{r4, r5, r7, pc}
 8010876:	bf00      	nop
 8010878:	00f42400 	.word	0x00f42400

0801087c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010888:	f003 0301 	and.w	r3, r3, #1
 801088c:	2b00      	cmp	r3, #0
 801088e:	d00a      	beq.n	80108a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	430a      	orrs	r2, r1
 80108a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108aa:	f003 0302 	and.w	r3, r3, #2
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00a      	beq.n	80108c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	430a      	orrs	r2, r1
 80108c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108cc:	f003 0304 	and.w	r3, r3, #4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00a      	beq.n	80108ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	430a      	orrs	r2, r1
 80108e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ee:	f003 0308 	and.w	r3, r3, #8
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d00a      	beq.n	801090c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	430a      	orrs	r2, r1
 801090a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010910:	f003 0310 	and.w	r3, r3, #16
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00a      	beq.n	801092e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	430a      	orrs	r2, r1
 801092c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010932:	f003 0320 	and.w	r3, r3, #32
 8010936:	2b00      	cmp	r3, #0
 8010938:	d00a      	beq.n	8010950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	689b      	ldr	r3, [r3, #8]
 8010940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	430a      	orrs	r2, r1
 801094e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010958:	2b00      	cmp	r3, #0
 801095a:	d01a      	beq.n	8010992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	430a      	orrs	r2, r1
 8010970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801097a:	d10a      	bne.n	8010992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	430a      	orrs	r2, r1
 8010990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801099a:	2b00      	cmp	r3, #0
 801099c:	d00a      	beq.n	80109b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	430a      	orrs	r2, r1
 80109b2:	605a      	str	r2, [r3, #4]
  }
}
 80109b4:	bf00      	nop
 80109b6:	370c      	adds	r7, #12
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr

080109c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af02      	add	r7, sp, #8
 80109c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80109d0:	f7f7 f890 	bl	8007af4 <HAL_GetTick>
 80109d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f003 0308 	and.w	r3, r3, #8
 80109e0:	2b08      	cmp	r3, #8
 80109e2:	d10e      	bne.n	8010a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80109e8:	9300      	str	r3, [sp, #0]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f82d 	bl	8010a52 <UART_WaitOnFlagUntilTimeout>
 80109f8:	4603      	mov	r3, r0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d001      	beq.n	8010a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109fe:	2303      	movs	r3, #3
 8010a00:	e023      	b.n	8010a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f003 0304 	and.w	r3, r3, #4
 8010a0c:	2b04      	cmp	r3, #4
 8010a0e:	d10e      	bne.n	8010a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f817 	bl	8010a52 <UART_WaitOnFlagUntilTimeout>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d001      	beq.n	8010a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a2a:	2303      	movs	r3, #3
 8010a2c:	e00d      	b.n	8010a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2220      	movs	r2, #32
 8010a32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2220      	movs	r2, #32
 8010a38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010a48:	2300      	movs	r3, #0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3710      	adds	r7, #16
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b084      	sub	sp, #16
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	60f8      	str	r0, [r7, #12]
 8010a5a:	60b9      	str	r1, [r7, #8]
 8010a5c:	603b      	str	r3, [r7, #0]
 8010a5e:	4613      	mov	r3, r2
 8010a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a62:	e05e      	b.n	8010b22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a6a:	d05a      	beq.n	8010b22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a6c:	f7f7 f842 	bl	8007af4 <HAL_GetTick>
 8010a70:	4602      	mov	r2, r0
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	69ba      	ldr	r2, [r7, #24]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d302      	bcc.n	8010a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8010a7c:	69bb      	ldr	r3, [r7, #24]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d11b      	bne.n	8010aba <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689a      	ldr	r2, [r3, #8]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f022 0201 	bic.w	r2, r2, #1
 8010aa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2220      	movs	r2, #32
 8010aa6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2220      	movs	r2, #32
 8010aac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010ab6:	2303      	movs	r3, #3
 8010ab8:	e043      	b.n	8010b42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f003 0304 	and.w	r3, r3, #4
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d02c      	beq.n	8010b22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	69db      	ldr	r3, [r3, #28]
 8010ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ad6:	d124      	bne.n	8010b22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ae0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010af0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	689a      	ldr	r2, [r3, #8]
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f022 0201 	bic.w	r2, r2, #1
 8010b00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2220      	movs	r2, #32
 8010b06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	2220      	movs	r2, #32
 8010b0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2220      	movs	r2, #32
 8010b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010b1e:	2303      	movs	r3, #3
 8010b20:	e00f      	b.n	8010b42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	69da      	ldr	r2, [r3, #28]
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	4013      	ands	r3, r2
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	bf0c      	ite	eq
 8010b32:	2301      	moveq	r3, #1
 8010b34:	2300      	movne	r3, #0
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	461a      	mov	r2, r3
 8010b3a:	79fb      	ldrb	r3, [r7, #7]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d091      	beq.n	8010a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b4a:	b480      	push	{r7}
 8010b4c:	b083      	sub	sp, #12
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b60:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	689a      	ldr	r2, [r3, #8]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f022 0201 	bic.w	r2, r2, #1
 8010b70:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d107      	bne.n	8010b8a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f022 0210 	bic.w	r2, r2, #16
 8010b88:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2220      	movs	r2, #32
 8010b8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010b9c:	bf00      	nop
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bc6:	68f8      	ldr	r0, [r7, #12]
 8010bc8:	f7ff fbb8 	bl	801033c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bcc:	bf00      	nop
 8010bce:	3710      	adds	r7, #16
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2220      	movs	r2, #32
 8010bf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff fb95 	bl	8010328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bfe:	bf00      	nop
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010c06:	b480      	push	{r7}
 8010c08:	b083      	sub	sp, #12
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010c0e:	bf00      	nop
 8010c10:	370c      	adds	r7, #12
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr

08010c1a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	f107 001c 	add.w	r0, r7, #28
 8010c28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f001 f9cf 	bl	8011fdc <USB_CoreReset>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d106      	bne.n	8010c56 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	639a      	str	r2, [r3, #56]	; 0x38
 8010c54:	e005      	b.n	8010c62 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8010c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c6e:	b004      	add	sp, #16
 8010c70:	4770      	bx	lr
	...

08010c74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b087      	sub	sp, #28
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	60f8      	str	r0, [r7, #12]
 8010c7c:	60b9      	str	r1, [r7, #8]
 8010c7e:	4613      	mov	r3, r2
 8010c80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c82:	79fb      	ldrb	r3, [r7, #7]
 8010c84:	2b02      	cmp	r3, #2
 8010c86:	d165      	bne.n	8010d54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	4a3e      	ldr	r2, [pc, #248]	; (8010d84 <USB_SetTurnaroundTime+0x110>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d906      	bls.n	8010c9e <USB_SetTurnaroundTime+0x2a>
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	4a3d      	ldr	r2, [pc, #244]	; (8010d88 <USB_SetTurnaroundTime+0x114>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d202      	bcs.n	8010c9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c98:	230f      	movs	r3, #15
 8010c9a:	617b      	str	r3, [r7, #20]
 8010c9c:	e05c      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	4a39      	ldr	r2, [pc, #228]	; (8010d88 <USB_SetTurnaroundTime+0x114>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d306      	bcc.n	8010cb4 <USB_SetTurnaroundTime+0x40>
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	4a38      	ldr	r2, [pc, #224]	; (8010d8c <USB_SetTurnaroundTime+0x118>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d202      	bcs.n	8010cb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010cae:	230e      	movs	r3, #14
 8010cb0:	617b      	str	r3, [r7, #20]
 8010cb2:	e051      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	4a35      	ldr	r2, [pc, #212]	; (8010d8c <USB_SetTurnaroundTime+0x118>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d306      	bcc.n	8010cca <USB_SetTurnaroundTime+0x56>
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	4a34      	ldr	r2, [pc, #208]	; (8010d90 <USB_SetTurnaroundTime+0x11c>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d202      	bcs.n	8010cca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010cc4:	230d      	movs	r3, #13
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	e046      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	4a30      	ldr	r2, [pc, #192]	; (8010d90 <USB_SetTurnaroundTime+0x11c>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d306      	bcc.n	8010ce0 <USB_SetTurnaroundTime+0x6c>
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	4a2f      	ldr	r2, [pc, #188]	; (8010d94 <USB_SetTurnaroundTime+0x120>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d802      	bhi.n	8010ce0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010cda:	230c      	movs	r3, #12
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	e03b      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	4a2c      	ldr	r2, [pc, #176]	; (8010d94 <USB_SetTurnaroundTime+0x120>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d906      	bls.n	8010cf6 <USB_SetTurnaroundTime+0x82>
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	4a2b      	ldr	r2, [pc, #172]	; (8010d98 <USB_SetTurnaroundTime+0x124>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d802      	bhi.n	8010cf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010cf0:	230b      	movs	r3, #11
 8010cf2:	617b      	str	r3, [r7, #20]
 8010cf4:	e030      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	4a27      	ldr	r2, [pc, #156]	; (8010d98 <USB_SetTurnaroundTime+0x124>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d906      	bls.n	8010d0c <USB_SetTurnaroundTime+0x98>
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	4a26      	ldr	r2, [pc, #152]	; (8010d9c <USB_SetTurnaroundTime+0x128>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d802      	bhi.n	8010d0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010d06:	230a      	movs	r3, #10
 8010d08:	617b      	str	r3, [r7, #20]
 8010d0a:	e025      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	4a23      	ldr	r2, [pc, #140]	; (8010d9c <USB_SetTurnaroundTime+0x128>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d906      	bls.n	8010d22 <USB_SetTurnaroundTime+0xae>
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	4a22      	ldr	r2, [pc, #136]	; (8010da0 <USB_SetTurnaroundTime+0x12c>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d202      	bcs.n	8010d22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d1c:	2309      	movs	r3, #9
 8010d1e:	617b      	str	r3, [r7, #20]
 8010d20:	e01a      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	4a1e      	ldr	r2, [pc, #120]	; (8010da0 <USB_SetTurnaroundTime+0x12c>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d306      	bcc.n	8010d38 <USB_SetTurnaroundTime+0xc4>
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	4a1d      	ldr	r2, [pc, #116]	; (8010da4 <USB_SetTurnaroundTime+0x130>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d802      	bhi.n	8010d38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d32:	2308      	movs	r3, #8
 8010d34:	617b      	str	r3, [r7, #20]
 8010d36:	e00f      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	4a1a      	ldr	r2, [pc, #104]	; (8010da4 <USB_SetTurnaroundTime+0x130>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d906      	bls.n	8010d4e <USB_SetTurnaroundTime+0xda>
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	4a19      	ldr	r2, [pc, #100]	; (8010da8 <USB_SetTurnaroundTime+0x134>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d202      	bcs.n	8010d4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d48:	2307      	movs	r3, #7
 8010d4a:	617b      	str	r3, [r7, #20]
 8010d4c:	e004      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d4e:	2306      	movs	r3, #6
 8010d50:	617b      	str	r3, [r7, #20]
 8010d52:	e001      	b.n	8010d58 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d54:	2309      	movs	r3, #9
 8010d56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	68da      	ldr	r2, [r3, #12]
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	029b      	lsls	r3, r3, #10
 8010d6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d70:	431a      	orrs	r2, r3
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	371c      	adds	r7, #28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	00d8acbf 	.word	0x00d8acbf
 8010d88:	00e4e1c0 	.word	0x00e4e1c0
 8010d8c:	00f42400 	.word	0x00f42400
 8010d90:	01067380 	.word	0x01067380
 8010d94:	011a499f 	.word	0x011a499f
 8010d98:	01312cff 	.word	0x01312cff
 8010d9c:	014ca43f 	.word	0x014ca43f
 8010da0:	016e3600 	.word	0x016e3600
 8010da4:	01a6ab1f 	.word	0x01a6ab1f
 8010da8:	01e84800 	.word	0x01e84800

08010dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	689b      	ldr	r3, [r3, #8]
 8010db8:	f043 0201 	orr.w	r2, r3, #1
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010dc0:	2300      	movs	r3, #0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dce:	b480      	push	{r7}
 8010dd0:	b083      	sub	sp, #12
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	689b      	ldr	r3, [r3, #8]
 8010dda:	f023 0201 	bic.w	r2, r3, #1
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e08:	78fb      	ldrb	r3, [r7, #3]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d106      	bne.n	8010e1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	60da      	str	r2, [r3, #12]
 8010e1a:	e00b      	b.n	8010e34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e1c:	78fb      	ldrb	r3, [r7, #3]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	60da      	str	r2, [r3, #12]
 8010e2e:	e001      	b.n	8010e34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010e30:	2301      	movs	r3, #1
 8010e32:	e003      	b.n	8010e3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010e34:	2032      	movs	r0, #50	; 0x32
 8010e36:	f7f6 fe69 	bl	8007b0c <HAL_Delay>

  return HAL_OK;
 8010e3a:	2300      	movs	r3, #0
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e44:	b084      	sub	sp, #16
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b086      	sub	sp, #24
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e56:	2300      	movs	r3, #0
 8010e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e5e:	2300      	movs	r3, #0
 8010e60:	613b      	str	r3, [r7, #16]
 8010e62:	e009      	b.n	8010e78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	3340      	adds	r3, #64	; 0x40
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	2200      	movs	r2, #0
 8010e70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	3301      	adds	r3, #1
 8010e76:	613b      	str	r3, [r7, #16]
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	2b0e      	cmp	r3, #14
 8010e7c:	d9f2      	bls.n	8010e64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d11c      	bne.n	8010ebe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e92:	f043 0302 	orr.w	r3, r3, #2
 8010e96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	601a      	str	r2, [r3, #0]
 8010ebc:	e005      	b.n	8010eca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010edc:	4619      	mov	r1, r3
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	680b      	ldr	r3, [r1, #0]
 8010ee8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010eea:	2103      	movs	r1, #3
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f93d 	bl	801116c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010ef2:	2110      	movs	r1, #16
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 f8f1 	bl	80110dc <USB_FlushTxFifo>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d001      	beq.n	8010f04 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010f00:	2301      	movs	r3, #1
 8010f02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f000 f90f 	bl	8011128 <USB_FlushRxFifo>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010f10:	2301      	movs	r3, #1
 8010f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f26:	461a      	mov	r2, r3
 8010f28:	2300      	movs	r3, #0
 8010f2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f32:	461a      	mov	r2, r3
 8010f34:	2300      	movs	r3, #0
 8010f36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	613b      	str	r3, [r7, #16]
 8010f3c:	e043      	b.n	8010fc6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	015a      	lsls	r2, r3, #5
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	4413      	add	r3, r2
 8010f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f54:	d118      	bne.n	8010f88 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10a      	bne.n	8010f72 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	015a      	lsls	r2, r3, #5
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	4413      	add	r3, r2
 8010f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f68:	461a      	mov	r2, r3
 8010f6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	e013      	b.n	8010f9a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	015a      	lsls	r2, r3, #5
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	4413      	add	r3, r2
 8010f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f7e:	461a      	mov	r2, r3
 8010f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010f84:	6013      	str	r3, [r2, #0]
 8010f86:	e008      	b.n	8010f9a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	015a      	lsls	r2, r3, #5
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	4413      	add	r3, r2
 8010f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f94:	461a      	mov	r2, r3
 8010f96:	2300      	movs	r3, #0
 8010f98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	015a      	lsls	r2, r3, #5
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	2300      	movs	r3, #0
 8010faa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	015a      	lsls	r2, r3, #5
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb8:	461a      	mov	r2, r3
 8010fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	613b      	str	r3, [r7, #16]
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc8:	693a      	ldr	r2, [r7, #16]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d3b7      	bcc.n	8010f3e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fce:	2300      	movs	r3, #0
 8010fd0:	613b      	str	r3, [r7, #16]
 8010fd2:	e043      	b.n	801105c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	015a      	lsls	r2, r3, #5
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	4413      	add	r3, r2
 8010fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fea:	d118      	bne.n	801101e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d10a      	bne.n	8011008 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	015a      	lsls	r2, r3, #5
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ffe:	461a      	mov	r2, r3
 8011000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011004:	6013      	str	r3, [r2, #0]
 8011006:	e013      	b.n	8011030 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	015a      	lsls	r2, r3, #5
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	4413      	add	r3, r2
 8011010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011014:	461a      	mov	r2, r3
 8011016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801101a:	6013      	str	r3, [r2, #0]
 801101c:	e008      	b.n	8011030 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	015a      	lsls	r2, r3, #5
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	4413      	add	r3, r2
 8011026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801102a:	461a      	mov	r2, r3
 801102c:	2300      	movs	r3, #0
 801102e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	015a      	lsls	r2, r3, #5
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	4413      	add	r3, r2
 8011038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801103c:	461a      	mov	r2, r3
 801103e:	2300      	movs	r3, #0
 8011040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	015a      	lsls	r2, r3, #5
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	4413      	add	r3, r2
 801104a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801104e:	461a      	mov	r2, r3
 8011050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	3301      	adds	r3, #1
 801105a:	613b      	str	r3, [r7, #16]
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	429a      	cmp	r2, r3
 8011062:	d3b7      	bcc.n	8010fd4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	68fa      	ldr	r2, [r7, #12]
 801106e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011076:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2200      	movs	r2, #0
 801107c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011084:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	699b      	ldr	r3, [r3, #24]
 801108a:	f043 0210 	orr.w	r2, r3, #16
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	699a      	ldr	r2, [r3, #24]
 8011096:	4b10      	ldr	r3, [pc, #64]	; (80110d8 <USB_DevInit+0x294>)
 8011098:	4313      	orrs	r3, r2
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801109e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d005      	beq.n	80110b0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	699b      	ldr	r3, [r3, #24]
 80110a8:	f043 0208 	orr.w	r2, r3, #8
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80110b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d107      	bne.n	80110c6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	699b      	ldr	r3, [r3, #24]
 80110ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80110be:	f043 0304 	orr.w	r3, r3, #4
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80110c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3718      	adds	r7, #24
 80110cc:	46bd      	mov	sp, r7
 80110ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110d2:	b004      	add	sp, #16
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	803c3800 	.word	0x803c3800

080110dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80110e6:	2300      	movs	r3, #0
 80110e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	019b      	lsls	r3, r3, #6
 80110ee:	f043 0220 	orr.w	r2, r3, #32
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	3301      	adds	r3, #1
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	4a09      	ldr	r2, [pc, #36]	; (8011124 <USB_FlushTxFifo+0x48>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d901      	bls.n	8011108 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011104:	2303      	movs	r3, #3
 8011106:	e006      	b.n	8011116 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	f003 0320 	and.w	r3, r3, #32
 8011110:	2b20      	cmp	r3, #32
 8011112:	d0f0      	beq.n	80110f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011114:	2300      	movs	r3, #0
}
 8011116:	4618      	mov	r0, r3
 8011118:	3714      	adds	r7, #20
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	00030d40 	.word	0x00030d40

08011128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011130:	2300      	movs	r3, #0
 8011132:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2210      	movs	r2, #16
 8011138:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	3301      	adds	r3, #1
 801113e:	60fb      	str	r3, [r7, #12]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	4a09      	ldr	r2, [pc, #36]	; (8011168 <USB_FlushRxFifo+0x40>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d901      	bls.n	801114c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011148:	2303      	movs	r3, #3
 801114a:	e006      	b.n	801115a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	f003 0310 	and.w	r3, r3, #16
 8011154:	2b10      	cmp	r3, #16
 8011156:	d0f0      	beq.n	801113a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3714      	adds	r7, #20
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	00030d40 	.word	0x00030d40

0801116c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801116c:	b480      	push	{r7}
 801116e:	b085      	sub	sp, #20
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	460b      	mov	r3, r1
 8011176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	78fb      	ldrb	r3, [r7, #3]
 8011186:	68f9      	ldr	r1, [r7, #12]
 8011188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801118c:	4313      	orrs	r3, r2
 801118e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3714      	adds	r7, #20
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801119e:	b480      	push	{r7}
 80111a0:	b087      	sub	sp, #28
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80111aa:	693b      	ldr	r3, [r7, #16]
 80111ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111b0:	689b      	ldr	r3, [r3, #8]
 80111b2:	f003 0306 	and.w	r3, r3, #6
 80111b6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	d002      	beq.n	80111c4 <USB_GetDevSpeed+0x26>
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2b06      	cmp	r3, #6
 80111c2:	d102      	bne.n	80111ca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80111c4:	2302      	movs	r3, #2
 80111c6:	75fb      	strb	r3, [r7, #23]
 80111c8:	e001      	b.n	80111ce <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80111ca:	230f      	movs	r3, #15
 80111cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80111ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	371c      	adds	r7, #28
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111dc:	b480      	push	{r7}
 80111de:	b085      	sub	sp, #20
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	785b      	ldrb	r3, [r3, #1]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d13a      	bne.n	801126e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111fe:	69da      	ldr	r2, [r3, #28]
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	f003 030f 	and.w	r3, r3, #15
 8011208:	2101      	movs	r1, #1
 801120a:	fa01 f303 	lsl.w	r3, r1, r3
 801120e:	b29b      	uxth	r3, r3
 8011210:	68f9      	ldr	r1, [r7, #12]
 8011212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011216:	4313      	orrs	r3, r2
 8011218:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	015a      	lsls	r2, r3, #5
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	4413      	add	r3, r2
 8011222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801122c:	2b00      	cmp	r3, #0
 801122e:	d155      	bne.n	80112dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	015a      	lsls	r2, r3, #5
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	4413      	add	r3, r2
 8011238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	78db      	ldrb	r3, [r3, #3]
 801124a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801124c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	059b      	lsls	r3, r3, #22
 8011252:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011254:	4313      	orrs	r3, r2
 8011256:	68ba      	ldr	r2, [r7, #8]
 8011258:	0151      	lsls	r1, r2, #5
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	440a      	add	r2, r1
 801125e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801126a:	6013      	str	r3, [r2, #0]
 801126c:	e036      	b.n	80112dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011274:	69da      	ldr	r2, [r3, #28]
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	f003 030f 	and.w	r3, r3, #15
 801127e:	2101      	movs	r1, #1
 8011280:	fa01 f303 	lsl.w	r3, r1, r3
 8011284:	041b      	lsls	r3, r3, #16
 8011286:	68f9      	ldr	r1, [r7, #12]
 8011288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801128c:	4313      	orrs	r3, r2
 801128e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	015a      	lsls	r2, r3, #5
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	4413      	add	r3, r2
 8011298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d11a      	bne.n	80112dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	015a      	lsls	r2, r3, #5
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	4413      	add	r3, r2
 80112ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	78db      	ldrb	r3, [r3, #3]
 80112c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112c2:	430b      	orrs	r3, r1
 80112c4:	4313      	orrs	r3, r2
 80112c6:	68ba      	ldr	r2, [r7, #8]
 80112c8:	0151      	lsls	r1, r2, #5
 80112ca:	68fa      	ldr	r2, [r7, #12]
 80112cc:	440a      	add	r2, r1
 80112ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80112dc:	2300      	movs	r3, #0
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
	...

080112ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b085      	sub	sp, #20
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	785b      	ldrb	r3, [r3, #1]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d161      	bne.n	80113cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	015a      	lsls	r2, r3, #5
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	4413      	add	r3, r2
 8011310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801131a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801131e:	d11f      	bne.n	8011360 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	015a      	lsls	r2, r3, #5
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	4413      	add	r3, r2
 8011328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	68ba      	ldr	r2, [r7, #8]
 8011330:	0151      	lsls	r1, r2, #5
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	440a      	add	r2, r1
 8011336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801133a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801133e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	015a      	lsls	r2, r3, #5
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	4413      	add	r3, r2
 8011348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	68ba      	ldr	r2, [r7, #8]
 8011350:	0151      	lsls	r1, r2, #5
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	440a      	add	r2, r1
 8011356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801135a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801135e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	f003 030f 	and.w	r3, r3, #15
 8011370:	2101      	movs	r1, #1
 8011372:	fa01 f303 	lsl.w	r3, r1, r3
 8011376:	b29b      	uxth	r3, r3
 8011378:	43db      	mvns	r3, r3
 801137a:	68f9      	ldr	r1, [r7, #12]
 801137c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011380:	4013      	ands	r3, r2
 8011382:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801138a:	69da      	ldr	r2, [r3, #28]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	f003 030f 	and.w	r3, r3, #15
 8011394:	2101      	movs	r1, #1
 8011396:	fa01 f303 	lsl.w	r3, r1, r3
 801139a:	b29b      	uxth	r3, r3
 801139c:	43db      	mvns	r3, r3
 801139e:	68f9      	ldr	r1, [r7, #12]
 80113a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113a4:	4013      	ands	r3, r2
 80113a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	015a      	lsls	r2, r3, #5
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	4413      	add	r3, r2
 80113b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	0159      	lsls	r1, r3, #5
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	440b      	add	r3, r1
 80113be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113c2:	4619      	mov	r1, r3
 80113c4:	4b35      	ldr	r3, [pc, #212]	; (801149c <USB_DeactivateEndpoint+0x1b0>)
 80113c6:	4013      	ands	r3, r2
 80113c8:	600b      	str	r3, [r1, #0]
 80113ca:	e060      	b.n	801148e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	015a      	lsls	r2, r3, #5
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	4413      	add	r3, r2
 80113d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113e2:	d11f      	bne.n	8011424 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	015a      	lsls	r2, r3, #5
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	4413      	add	r3, r2
 80113ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68ba      	ldr	r2, [r7, #8]
 80113f4:	0151      	lsls	r1, r2, #5
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	440a      	add	r2, r1
 80113fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011402:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	015a      	lsls	r2, r3, #5
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	4413      	add	r3, r2
 801140c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	0151      	lsls	r1, r2, #5
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	440a      	add	r2, r1
 801141a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801141e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011422:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801142a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	f003 030f 	and.w	r3, r3, #15
 8011434:	2101      	movs	r1, #1
 8011436:	fa01 f303 	lsl.w	r3, r1, r3
 801143a:	041b      	lsls	r3, r3, #16
 801143c:	43db      	mvns	r3, r3
 801143e:	68f9      	ldr	r1, [r7, #12]
 8011440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011444:	4013      	ands	r3, r2
 8011446:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801144e:	69da      	ldr	r2, [r3, #28]
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	f003 030f 	and.w	r3, r3, #15
 8011458:	2101      	movs	r1, #1
 801145a:	fa01 f303 	lsl.w	r3, r1, r3
 801145e:	041b      	lsls	r3, r3, #16
 8011460:	43db      	mvns	r3, r3
 8011462:	68f9      	ldr	r1, [r7, #12]
 8011464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011468:	4013      	ands	r3, r2
 801146a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	015a      	lsls	r2, r3, #5
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	4413      	add	r3, r2
 8011474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	0159      	lsls	r1, r3, #5
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	440b      	add	r3, r1
 8011482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011486:	4619      	mov	r1, r3
 8011488:	4b05      	ldr	r3, [pc, #20]	; (80114a0 <USB_DeactivateEndpoint+0x1b4>)
 801148a:	4013      	ands	r3, r2
 801148c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801148e:	2300      	movs	r3, #0
}
 8011490:	4618      	mov	r0, r3
 8011492:	3714      	adds	r7, #20
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr
 801149c:	ec337800 	.word	0xec337800
 80114a0:	eff37800 	.word	0xeff37800

080114a4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b086      	sub	sp, #24
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	785b      	ldrb	r3, [r3, #1]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	f040 810a 	bne.w	80116d6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	695b      	ldr	r3, [r3, #20]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d132      	bne.n	8011530 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	015a      	lsls	r2, r3, #5
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	4413      	add	r3, r2
 80114d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114d6:	691b      	ldr	r3, [r3, #16]
 80114d8:	693a      	ldr	r2, [r7, #16]
 80114da:	0151      	lsls	r1, r2, #5
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	440a      	add	r2, r1
 80114e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80114e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80114ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	015a      	lsls	r2, r3, #5
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114fa:	691b      	ldr	r3, [r3, #16]
 80114fc:	693a      	ldr	r2, [r7, #16]
 80114fe:	0151      	lsls	r1, r2, #5
 8011500:	697a      	ldr	r2, [r7, #20]
 8011502:	440a      	add	r2, r1
 8011504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801150c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	015a      	lsls	r2, r3, #5
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	4413      	add	r3, r2
 8011516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801151a:	691b      	ldr	r3, [r3, #16]
 801151c:	693a      	ldr	r2, [r7, #16]
 801151e:	0151      	lsls	r1, r2, #5
 8011520:	697a      	ldr	r2, [r7, #20]
 8011522:	440a      	add	r2, r1
 8011524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011528:	0cdb      	lsrs	r3, r3, #19
 801152a:	04db      	lsls	r3, r3, #19
 801152c:	6113      	str	r3, [r2, #16]
 801152e:	e074      	b.n	801161a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	015a      	lsls	r2, r3, #5
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	4413      	add	r3, r2
 8011538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	693a      	ldr	r2, [r7, #16]
 8011540:	0151      	lsls	r1, r2, #5
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	440a      	add	r2, r1
 8011546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801154a:	0cdb      	lsrs	r3, r3, #19
 801154c:	04db      	lsls	r3, r3, #19
 801154e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	015a      	lsls	r2, r3, #5
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	4413      	add	r3, r2
 8011558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801155c:	691b      	ldr	r3, [r3, #16]
 801155e:	693a      	ldr	r2, [r7, #16]
 8011560:	0151      	lsls	r1, r2, #5
 8011562:	697a      	ldr	r2, [r7, #20]
 8011564:	440a      	add	r2, r1
 8011566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801156a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801156e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	015a      	lsls	r2, r3, #5
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	4413      	add	r3, r2
 801157c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011580:	691a      	ldr	r2, [r3, #16]
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	6959      	ldr	r1, [r3, #20]
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	440b      	add	r3, r1
 801158c:	1e59      	subs	r1, r3, #1
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	689b      	ldr	r3, [r3, #8]
 8011592:	fbb1 f3f3 	udiv	r3, r1, r3
 8011596:	04d9      	lsls	r1, r3, #19
 8011598:	4baf      	ldr	r3, [pc, #700]	; (8011858 <USB_EPStartXfer+0x3b4>)
 801159a:	400b      	ands	r3, r1
 801159c:	6939      	ldr	r1, [r7, #16]
 801159e:	0148      	lsls	r0, r1, #5
 80115a0:	6979      	ldr	r1, [r7, #20]
 80115a2:	4401      	add	r1, r0
 80115a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115a8:	4313      	orrs	r3, r2
 80115aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	015a      	lsls	r2, r3, #5
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	4413      	add	r3, r2
 80115b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115b8:	691a      	ldr	r2, [r3, #16]
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	695b      	ldr	r3, [r3, #20]
 80115be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115c2:	6939      	ldr	r1, [r7, #16]
 80115c4:	0148      	lsls	r0, r1, #5
 80115c6:	6979      	ldr	r1, [r7, #20]
 80115c8:	4401      	add	r1, r0
 80115ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115ce:	4313      	orrs	r3, r2
 80115d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	78db      	ldrb	r3, [r3, #3]
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	d11f      	bne.n	801161a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	015a      	lsls	r2, r3, #5
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	4413      	add	r3, r2
 80115e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	693a      	ldr	r2, [r7, #16]
 80115ea:	0151      	lsls	r1, r2, #5
 80115ec:	697a      	ldr	r2, [r7, #20]
 80115ee:	440a      	add	r2, r1
 80115f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80115f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	015a      	lsls	r2, r3, #5
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	4413      	add	r3, r2
 8011602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011606:	691b      	ldr	r3, [r3, #16]
 8011608:	693a      	ldr	r2, [r7, #16]
 801160a:	0151      	lsls	r1, r2, #5
 801160c:	697a      	ldr	r2, [r7, #20]
 801160e:	440a      	add	r2, r1
 8011610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011618:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	015a      	lsls	r2, r3, #5
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	4413      	add	r3, r2
 8011622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	693a      	ldr	r2, [r7, #16]
 801162a:	0151      	lsls	r1, r2, #5
 801162c:	697a      	ldr	r2, [r7, #20]
 801162e:	440a      	add	r2, r1
 8011630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011634:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011638:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	78db      	ldrb	r3, [r3, #3]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d015      	beq.n	801166e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	695b      	ldr	r3, [r3, #20]
 8011646:	2b00      	cmp	r3, #0
 8011648:	f000 8100 	beq.w	801184c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	f003 030f 	and.w	r3, r3, #15
 801165c:	2101      	movs	r1, #1
 801165e:	fa01 f303 	lsl.w	r3, r1, r3
 8011662:	6979      	ldr	r1, [r7, #20]
 8011664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011668:	4313      	orrs	r3, r2
 801166a:	634b      	str	r3, [r1, #52]	; 0x34
 801166c:	e0ee      	b.n	801184c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801167a:	2b00      	cmp	r3, #0
 801167c:	d110      	bne.n	80116a0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	015a      	lsls	r2, r3, #5
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	4413      	add	r3, r2
 8011686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	693a      	ldr	r2, [r7, #16]
 801168e:	0151      	lsls	r1, r2, #5
 8011690:	697a      	ldr	r2, [r7, #20]
 8011692:	440a      	add	r2, r1
 8011694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011698:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801169c:	6013      	str	r3, [r2, #0]
 801169e:	e00f      	b.n	80116c0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	015a      	lsls	r2, r3, #5
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	4413      	add	r3, r2
 80116a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	693a      	ldr	r2, [r7, #16]
 80116b0:	0151      	lsls	r1, r2, #5
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	440a      	add	r2, r1
 80116b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116be:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	68d9      	ldr	r1, [r3, #12]
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	781a      	ldrb	r2, [r3, #0]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	695b      	ldr	r3, [r3, #20]
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 f9e2 	bl	8011a98 <USB_WritePacket>
 80116d4:	e0ba      	b.n	801184c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	015a      	lsls	r2, r3, #5
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	4413      	add	r3, r2
 80116de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116e2:	691b      	ldr	r3, [r3, #16]
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	0151      	lsls	r1, r2, #5
 80116e8:	697a      	ldr	r2, [r7, #20]
 80116ea:	440a      	add	r2, r1
 80116ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116f0:	0cdb      	lsrs	r3, r3, #19
 80116f2:	04db      	lsls	r3, r3, #19
 80116f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	015a      	lsls	r2, r3, #5
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	4413      	add	r3, r2
 80116fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011702:	691b      	ldr	r3, [r3, #16]
 8011704:	693a      	ldr	r2, [r7, #16]
 8011706:	0151      	lsls	r1, r2, #5
 8011708:	697a      	ldr	r2, [r7, #20]
 801170a:	440a      	add	r2, r1
 801170c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011718:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	695b      	ldr	r3, [r3, #20]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d123      	bne.n	801176a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	015a      	lsls	r2, r3, #5
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	4413      	add	r3, r2
 801172a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801172e:	691a      	ldr	r2, [r3, #16]
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	689b      	ldr	r3, [r3, #8]
 8011734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011738:	6939      	ldr	r1, [r7, #16]
 801173a:	0148      	lsls	r0, r1, #5
 801173c:	6979      	ldr	r1, [r7, #20]
 801173e:	4401      	add	r1, r0
 8011740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011744:	4313      	orrs	r3, r2
 8011746:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	015a      	lsls	r2, r3, #5
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	4413      	add	r3, r2
 8011750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	693a      	ldr	r2, [r7, #16]
 8011758:	0151      	lsls	r1, r2, #5
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	440a      	add	r2, r1
 801175e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011766:	6113      	str	r3, [r2, #16]
 8011768:	e033      	b.n	80117d2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	695a      	ldr	r2, [r3, #20]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	4413      	add	r3, r2
 8011774:	1e5a      	subs	r2, r3, #1
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	689b      	ldr	r3, [r3, #8]
 801177a:	fbb2 f3f3 	udiv	r3, r2, r3
 801177e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	015a      	lsls	r2, r3, #5
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	4413      	add	r3, r2
 8011788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801178c:	691a      	ldr	r2, [r3, #16]
 801178e:	89fb      	ldrh	r3, [r7, #14]
 8011790:	04d9      	lsls	r1, r3, #19
 8011792:	4b31      	ldr	r3, [pc, #196]	; (8011858 <USB_EPStartXfer+0x3b4>)
 8011794:	400b      	ands	r3, r1
 8011796:	6939      	ldr	r1, [r7, #16]
 8011798:	0148      	lsls	r0, r1, #5
 801179a:	6979      	ldr	r1, [r7, #20]
 801179c:	4401      	add	r1, r0
 801179e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80117a2:	4313      	orrs	r3, r2
 80117a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	015a      	lsls	r2, r3, #5
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	4413      	add	r3, r2
 80117ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117b2:	691a      	ldr	r2, [r3, #16]
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	89f9      	ldrh	r1, [r7, #14]
 80117ba:	fb01 f303 	mul.w	r3, r1, r3
 80117be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80117c2:	6939      	ldr	r1, [r7, #16]
 80117c4:	0148      	lsls	r0, r1, #5
 80117c6:	6979      	ldr	r1, [r7, #20]
 80117c8:	4401      	add	r1, r0
 80117ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80117ce:	4313      	orrs	r3, r2
 80117d0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	78db      	ldrb	r3, [r3, #3]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d128      	bne.n	801182c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d110      	bne.n	801180c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	015a      	lsls	r2, r3, #5
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	4413      	add	r3, r2
 80117f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	693a      	ldr	r2, [r7, #16]
 80117fa:	0151      	lsls	r1, r2, #5
 80117fc:	697a      	ldr	r2, [r7, #20]
 80117fe:	440a      	add	r2, r1
 8011800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011808:	6013      	str	r3, [r2, #0]
 801180a:	e00f      	b.n	801182c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	015a      	lsls	r2, r3, #5
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	4413      	add	r3, r2
 8011814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	693a      	ldr	r2, [r7, #16]
 801181c:	0151      	lsls	r1, r2, #5
 801181e:	697a      	ldr	r2, [r7, #20]
 8011820:	440a      	add	r2, r1
 8011822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801182a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	015a      	lsls	r2, r3, #5
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	4413      	add	r3, r2
 8011834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	0151      	lsls	r1, r2, #5
 801183e:	697a      	ldr	r2, [r7, #20]
 8011840:	440a      	add	r2, r1
 8011842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801184a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801184c:	2300      	movs	r3, #0
}
 801184e:	4618      	mov	r0, r3
 8011850:	3718      	adds	r7, #24
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	1ff80000 	.word	0x1ff80000

0801185c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801185c:	b480      	push	{r7}
 801185e:	b085      	sub	sp, #20
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	785b      	ldrb	r3, [r3, #1]
 8011874:	2b01      	cmp	r3, #1
 8011876:	f040 80ab 	bne.w	80119d0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	695b      	ldr	r3, [r3, #20]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d132      	bne.n	80118e8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	015a      	lsls	r2, r3, #5
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	4413      	add	r3, r2
 801188a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801188e:	691b      	ldr	r3, [r3, #16]
 8011890:	68ba      	ldr	r2, [r7, #8]
 8011892:	0151      	lsls	r1, r2, #5
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	440a      	add	r2, r1
 8011898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801189c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80118a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80118a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	015a      	lsls	r2, r3, #5
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	4413      	add	r3, r2
 80118ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	0151      	lsls	r1, r2, #5
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	440a      	add	r2, r1
 80118bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80118c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	015a      	lsls	r2, r3, #5
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	4413      	add	r3, r2
 80118ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d2:	691b      	ldr	r3, [r3, #16]
 80118d4:	68ba      	ldr	r2, [r7, #8]
 80118d6:	0151      	lsls	r1, r2, #5
 80118d8:	68fa      	ldr	r2, [r7, #12]
 80118da:	440a      	add	r2, r1
 80118dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118e0:	0cdb      	lsrs	r3, r3, #19
 80118e2:	04db      	lsls	r3, r3, #19
 80118e4:	6113      	str	r3, [r2, #16]
 80118e6:	e04e      	b.n	8011986 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118f4:	691b      	ldr	r3, [r3, #16]
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	0151      	lsls	r1, r2, #5
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	440a      	add	r2, r1
 80118fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011902:	0cdb      	lsrs	r3, r3, #19
 8011904:	04db      	lsls	r3, r3, #19
 8011906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	015a      	lsls	r2, r3, #5
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	4413      	add	r3, r2
 8011910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011914:	691b      	ldr	r3, [r3, #16]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	0151      	lsls	r1, r2, #5
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	440a      	add	r2, r1
 801191e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011922:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011926:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801192a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	695a      	ldr	r2, [r3, #20]
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	429a      	cmp	r2, r3
 8011936:	d903      	bls.n	8011940 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	689a      	ldr	r2, [r3, #8]
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	015a      	lsls	r2, r3, #5
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	4413      	add	r3, r2
 8011948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801194c:	691b      	ldr	r3, [r3, #16]
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	0151      	lsls	r1, r2, #5
 8011952:	68fa      	ldr	r2, [r7, #12]
 8011954:	440a      	add	r2, r1
 8011956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801195a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801195e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	015a      	lsls	r2, r3, #5
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	4413      	add	r3, r2
 8011968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801196c:	691a      	ldr	r2, [r3, #16]
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	695b      	ldr	r3, [r3, #20]
 8011972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011976:	68b9      	ldr	r1, [r7, #8]
 8011978:	0148      	lsls	r0, r1, #5
 801197a:	68f9      	ldr	r1, [r7, #12]
 801197c:	4401      	add	r1, r0
 801197e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011982:	4313      	orrs	r3, r2
 8011984:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	015a      	lsls	r2, r3, #5
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	4413      	add	r3, r2
 801198e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	68ba      	ldr	r2, [r7, #8]
 8011996:	0151      	lsls	r1, r2, #5
 8011998:	68fa      	ldr	r2, [r7, #12]
 801199a:	440a      	add	r2, r1
 801199c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80119a4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	695b      	ldr	r3, [r3, #20]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d06d      	beq.n	8011a8a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 030f 	and.w	r3, r3, #15
 80119be:	2101      	movs	r1, #1
 80119c0:	fa01 f303 	lsl.w	r3, r1, r3
 80119c4:	68f9      	ldr	r1, [r7, #12]
 80119c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80119ca:	4313      	orrs	r3, r2
 80119cc:	634b      	str	r3, [r1, #52]	; 0x34
 80119ce:	e05c      	b.n	8011a8a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	015a      	lsls	r2, r3, #5
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	4413      	add	r3, r2
 80119d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119dc:	691b      	ldr	r3, [r3, #16]
 80119de:	68ba      	ldr	r2, [r7, #8]
 80119e0:	0151      	lsls	r1, r2, #5
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	440a      	add	r2, r1
 80119e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119ea:	0cdb      	lsrs	r3, r3, #19
 80119ec:	04db      	lsls	r3, r3, #19
 80119ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	015a      	lsls	r2, r3, #5
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	4413      	add	r3, r2
 80119f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119fc:	691b      	ldr	r3, [r3, #16]
 80119fe:	68ba      	ldr	r2, [r7, #8]
 8011a00:	0151      	lsls	r1, r2, #5
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	440a      	add	r2, r1
 8011a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011a0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011a12:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	695b      	ldr	r3, [r3, #20]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d003      	beq.n	8011a24 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	689a      	ldr	r2, [r3, #8]
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	015a      	lsls	r2, r3, #5
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a30:	691b      	ldr	r3, [r3, #16]
 8011a32:	68ba      	ldr	r2, [r7, #8]
 8011a34:	0151      	lsls	r1, r2, #5
 8011a36:	68fa      	ldr	r2, [r7, #12]
 8011a38:	440a      	add	r2, r1
 8011a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	015a      	lsls	r2, r3, #5
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a50:	691a      	ldr	r2, [r3, #16]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a5a:	68b9      	ldr	r1, [r7, #8]
 8011a5c:	0148      	lsls	r0, r1, #5
 8011a5e:	68f9      	ldr	r1, [r7, #12]
 8011a60:	4401      	add	r1, r0
 8011a62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a66:	4313      	orrs	r3, r2
 8011a68:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	015a      	lsls	r2, r3, #5
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	4413      	add	r3, r2
 8011a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	0151      	lsls	r1, r2, #5
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	440a      	add	r2, r1
 8011a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011a88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a8a:	2300      	movs	r3, #0
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3714      	adds	r7, #20
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr

08011a98 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b089      	sub	sp, #36	; 0x24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	71fb      	strb	r3, [r7, #7]
 8011aaa:	4613      	mov	r3, r2
 8011aac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011ab6:	88bb      	ldrh	r3, [r7, #4]
 8011ab8:	3303      	adds	r3, #3
 8011aba:	089b      	lsrs	r3, r3, #2
 8011abc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011abe:	2300      	movs	r3, #0
 8011ac0:	61bb      	str	r3, [r7, #24]
 8011ac2:	e00f      	b.n	8011ae4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011ac4:	79fb      	ldrb	r3, [r7, #7]
 8011ac6:	031a      	lsls	r2, r3, #12
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	4413      	add	r3, r2
 8011acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	3304      	adds	r3, #4
 8011adc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	61bb      	str	r3, [r7, #24]
 8011ae4:	69ba      	ldr	r2, [r7, #24]
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d3eb      	bcc.n	8011ac4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3724      	adds	r7, #36	; 0x24
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr

08011afa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011afa:	b480      	push	{r7}
 8011afc:	b089      	sub	sp, #36	; 0x24
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	60f8      	str	r0, [r7, #12]
 8011b02:	60b9      	str	r1, [r7, #8]
 8011b04:	4613      	mov	r3, r2
 8011b06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011b10:	88fb      	ldrh	r3, [r7, #6]
 8011b12:	3303      	adds	r3, #3
 8011b14:	089b      	lsrs	r3, r3, #2
 8011b16:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011b18:	2300      	movs	r3, #0
 8011b1a:	61bb      	str	r3, [r7, #24]
 8011b1c:	e00b      	b.n	8011b36 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	601a      	str	r2, [r3, #0]
    pDest++;
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	3301      	adds	r3, #1
 8011b34:	61bb      	str	r3, [r7, #24]
 8011b36:	69ba      	ldr	r2, [r7, #24]
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d3ef      	bcc.n	8011b1e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011b3e:	69fb      	ldr	r3, [r7, #28]
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3724      	adds	r7, #36	; 0x24
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr

08011b4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b085      	sub	sp, #20
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	785b      	ldrb	r3, [r3, #1]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d12c      	bne.n	8011bc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	015a      	lsls	r2, r3, #5
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	4413      	add	r3, r2
 8011b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	db12      	blt.n	8011ba0 <USB_EPSetStall+0x54>
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d00f      	beq.n	8011ba0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	015a      	lsls	r2, r3, #5
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	4413      	add	r3, r2
 8011b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	68ba      	ldr	r2, [r7, #8]
 8011b90:	0151      	lsls	r1, r2, #5
 8011b92:	68fa      	ldr	r2, [r7, #12]
 8011b94:	440a      	add	r2, r1
 8011b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011b9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	015a      	lsls	r2, r3, #5
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	68ba      	ldr	r2, [r7, #8]
 8011bb0:	0151      	lsls	r1, r2, #5
 8011bb2:	68fa      	ldr	r2, [r7, #12]
 8011bb4:	440a      	add	r2, r1
 8011bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011bbe:	6013      	str	r3, [r2, #0]
 8011bc0:	e02b      	b.n	8011c1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	015a      	lsls	r2, r3, #5
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	4413      	add	r3, r2
 8011bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	db12      	blt.n	8011bfa <USB_EPSetStall+0xae>
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00f      	beq.n	8011bfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	015a      	lsls	r2, r3, #5
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	4413      	add	r3, r2
 8011be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	68ba      	ldr	r2, [r7, #8]
 8011bea:	0151      	lsls	r1, r2, #5
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	440a      	add	r2, r1
 8011bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011bf8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	015a      	lsls	r2, r3, #5
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	4413      	add	r3, r2
 8011c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	0151      	lsls	r1, r2, #5
 8011c0c:	68fa      	ldr	r2, [r7, #12]
 8011c0e:	440a      	add	r2, r1
 8011c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011c18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3714      	adds	r7, #20
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	785b      	ldrb	r3, [r3, #1]
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	d128      	bne.n	8011c96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	015a      	lsls	r2, r3, #5
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	68ba      	ldr	r2, [r7, #8]
 8011c54:	0151      	lsls	r1, r2, #5
 8011c56:	68fa      	ldr	r2, [r7, #12]
 8011c58:	440a      	add	r2, r1
 8011c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	78db      	ldrb	r3, [r3, #3]
 8011c68:	2b03      	cmp	r3, #3
 8011c6a:	d003      	beq.n	8011c74 <USB_EPClearStall+0x4c>
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	78db      	ldrb	r3, [r3, #3]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d138      	bne.n	8011ce6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	015a      	lsls	r2, r3, #5
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	68ba      	ldr	r2, [r7, #8]
 8011c84:	0151      	lsls	r1, r2, #5
 8011c86:	68fa      	ldr	r2, [r7, #12]
 8011c88:	440a      	add	r2, r1
 8011c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c92:	6013      	str	r3, [r2, #0]
 8011c94:	e027      	b.n	8011ce6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	015a      	lsls	r2, r3, #5
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	68ba      	ldr	r2, [r7, #8]
 8011ca6:	0151      	lsls	r1, r2, #5
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	440a      	add	r2, r1
 8011cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011cb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	78db      	ldrb	r3, [r3, #3]
 8011cba:	2b03      	cmp	r3, #3
 8011cbc:	d003      	beq.n	8011cc6 <USB_EPClearStall+0x9e>
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	78db      	ldrb	r3, [r3, #3]
 8011cc2:	2b02      	cmp	r3, #2
 8011cc4:	d10f      	bne.n	8011ce6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	015a      	lsls	r2, r3, #5
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	4413      	add	r3, r2
 8011cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	68ba      	ldr	r2, [r7, #8]
 8011cd6:	0151      	lsls	r1, r2, #5
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	440a      	add	r2, r1
 8011cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ce4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011ce6:	2300      	movs	r3, #0
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3714      	adds	r7, #20
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	460b      	mov	r3, r1
 8011cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	68fa      	ldr	r2, [r7, #12]
 8011d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011d16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	011b      	lsls	r3, r3, #4
 8011d24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011d28:	68f9      	ldr	r1, [r7, #12]
 8011d2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d2e:	4313      	orrs	r3, r2
 8011d30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011d32:	2300      	movs	r3, #0
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3714      	adds	r7, #20
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr

08011d40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b085      	sub	sp, #20
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	68fa      	ldr	r2, [r7, #12]
 8011d56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d5a:	f023 0303 	bic.w	r3, r3, #3
 8011d5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d6e:	f023 0302 	bic.w	r3, r3, #2
 8011d72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d74:	2300      	movs	r3, #0
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3714      	adds	r7, #20
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d82:	b480      	push	{r7}
 8011d84:	b085      	sub	sp, #20
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d9c:	f023 0303 	bic.w	r3, r3, #3
 8011da0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	68fa      	ldr	r2, [r7, #12]
 8011dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011db0:	f043 0302 	orr.w	r3, r3, #2
 8011db4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3714      	adds	r7, #20
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr

08011dc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b085      	sub	sp, #20
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	695b      	ldr	r3, [r3, #20]
 8011dd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	699b      	ldr	r3, [r3, #24]
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	4013      	ands	r3, r2
 8011dda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3714      	adds	r7, #20
 8011de2:	46bd      	mov	sp, r7
 8011de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de8:	4770      	bx	lr

08011dea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011dea:	b480      	push	{r7}
 8011dec:	b085      	sub	sp, #20
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dfc:	699b      	ldr	r3, [r3, #24]
 8011dfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e06:	69db      	ldr	r3, [r3, #28]
 8011e08:	68ba      	ldr	r2, [r7, #8]
 8011e0a:	4013      	ands	r3, r2
 8011e0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	0c1b      	lsrs	r3, r3, #16
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3714      	adds	r7, #20
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b085      	sub	sp, #20
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e30:	699b      	ldr	r3, [r3, #24]
 8011e32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e3a:	69db      	ldr	r3, [r3, #28]
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	4013      	ands	r3, r2
 8011e40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	b29b      	uxth	r3, r3
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3714      	adds	r7, #20
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr

08011e52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e52:	b480      	push	{r7}
 8011e54:	b085      	sub	sp, #20
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011e62:	78fb      	ldrb	r3, [r7, #3]
 8011e64:	015a      	lsls	r2, r3, #5
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	4413      	add	r3, r2
 8011e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e6e:	689b      	ldr	r3, [r3, #8]
 8011e70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e78:	695b      	ldr	r3, [r3, #20]
 8011e7a:	68ba      	ldr	r2, [r7, #8]
 8011e7c:	4013      	ands	r3, r2
 8011e7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011e80:	68bb      	ldr	r3, [r7, #8]
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3714      	adds	r7, #20
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr

08011e8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e8e:	b480      	push	{r7}
 8011e90:	b087      	sub	sp, #28
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
 8011e96:	460b      	mov	r3, r1
 8011e98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ea4:	691b      	ldr	r3, [r3, #16]
 8011ea6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011eb2:	78fb      	ldrb	r3, [r7, #3]
 8011eb4:	f003 030f 	and.w	r3, r3, #15
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	fa22 f303 	lsr.w	r3, r2, r3
 8011ebe:	01db      	lsls	r3, r3, #7
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	693a      	ldr	r2, [r7, #16]
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011ec8:	78fb      	ldrb	r3, [r7, #3]
 8011eca:	015a      	lsls	r2, r3, #5
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	4413      	add	r3, r2
 8011ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	693a      	ldr	r2, [r7, #16]
 8011ed8:	4013      	ands	r3, r2
 8011eda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011edc:	68bb      	ldr	r3, [r7, #8]
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	371c      	adds	r7, #28
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr

08011eea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011eea:	b480      	push	{r7}
 8011eec:	b083      	sub	sp, #12
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	695b      	ldr	r3, [r3, #20]
 8011ef6:	f003 0301 	and.w	r3, r3, #1
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	370c      	adds	r7, #12
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr

08011f06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011f06:	b480      	push	{r7}
 8011f08:	b085      	sub	sp, #20
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011f24:	f023 0307 	bic.w	r3, r3, #7
 8011f28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f3e:	2300      	movs	r3, #0
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3714      	adds	r7, #20
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	333c      	adds	r3, #60	; 0x3c
 8011f5e:	3304      	adds	r3, #4
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	4a1c      	ldr	r2, [pc, #112]	; (8011fd8 <USB_EP0_OutStart+0x8c>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d90a      	bls.n	8011f82 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f7c:	d101      	bne.n	8011f82 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	e024      	b.n	8011fcc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f88:	461a      	mov	r2, r3
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f94:	691b      	ldr	r3, [r3, #16]
 8011f96:	68fa      	ldr	r2, [r7, #12]
 8011f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	68fa      	ldr	r2, [r7, #12]
 8011fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fb0:	f043 0318 	orr.w	r3, r3, #24
 8011fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fbc:	691b      	ldr	r3, [r3, #16]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011fc8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8011fca:	2300      	movs	r3, #0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3714      	adds	r7, #20
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr
 8011fd8:	4f54300a 	.word	0x4f54300a

08011fdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b085      	sub	sp, #20
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	3301      	adds	r3, #1
 8011fec:	60fb      	str	r3, [r7, #12]
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	4a13      	ldr	r2, [pc, #76]	; (8012040 <USB_CoreReset+0x64>)
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	d901      	bls.n	8011ffa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011ff6:	2303      	movs	r3, #3
 8011ff8:	e01b      	b.n	8012032 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	daf2      	bge.n	8011fe8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012002:	2300      	movs	r3, #0
 8012004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	691b      	ldr	r3, [r3, #16]
 801200a:	f043 0201 	orr.w	r2, r3, #1
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	3301      	adds	r3, #1
 8012016:	60fb      	str	r3, [r7, #12]
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	4a09      	ldr	r2, [pc, #36]	; (8012040 <USB_CoreReset+0x64>)
 801201c:	4293      	cmp	r3, r2
 801201e:	d901      	bls.n	8012024 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012020:	2303      	movs	r3, #3
 8012022:	e006      	b.n	8012032 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	691b      	ldr	r3, [r3, #16]
 8012028:	f003 0301 	and.w	r3, r3, #1
 801202c:	2b01      	cmp	r3, #1
 801202e:	d0f0      	beq.n	8012012 <USB_CoreReset+0x36>

  return HAL_OK;
 8012030:	2300      	movs	r3, #0
}
 8012032:	4618      	mov	r0, r3
 8012034:	3714      	adds	r7, #20
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	00030d40 	.word	0x00030d40

08012044 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012048:	4904      	ldr	r1, [pc, #16]	; (801205c <MX_FATFS_Init+0x18>)
 801204a:	4805      	ldr	r0, [pc, #20]	; (8012060 <MX_FATFS_Init+0x1c>)
 801204c:	f002 fdc8 	bl	8014be0 <FATFS_LinkDriver>
 8012050:	4603      	mov	r3, r0
 8012052:	461a      	mov	r2, r3
 8012054:	4b03      	ldr	r3, [pc, #12]	; (8012064 <MX_FATFS_Init+0x20>)
 8012056:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012058:	bf00      	nop
 801205a:	bd80      	pop	{r7, pc}
 801205c:	2000884c 	.word	0x2000884c
 8012060:	200003dc 	.word	0x200003dc
 8012064:	20008848 	.word	0x20008848

08012068 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012068:	b480      	push	{r7}
 801206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801206c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801206e:	4618      	mov	r0, r3
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr

08012078 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	4603      	mov	r3, r0
 8012080:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat &= ~STA_NOINIT;
 8012082:	4b08      	ldr	r3, [pc, #32]	; (80120a4 <USER_initialize+0x2c>)
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	b2db      	uxtb	r3, r3
 8012088:	f023 0301 	bic.w	r3, r3, #1
 801208c:	b2da      	uxtb	r2, r3
 801208e:	4b05      	ldr	r3, [pc, #20]	; (80120a4 <USER_initialize+0x2c>)
 8012090:	701a      	strb	r2, [r3, #0]
    return Stat;
 8012092:	4b04      	ldr	r3, [pc, #16]	; (80120a4 <USER_initialize+0x2c>)
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8012098:	4618      	mov	r0, r3
 801209a:	370c      	adds	r7, #12
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	200003d9 	.word	0x200003d9

080120a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	4603      	mov	r3, r0
 80120b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(pdrv) return STA_NOINIT;
 80120b2:	79fb      	ldrb	r3, [r7, #7]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d001      	beq.n	80120bc <USER_status+0x14>
 80120b8:	2301      	movs	r3, #1
 80120ba:	e002      	b.n	80120c2 <USER_status+0x1a>
    return Stat;
 80120bc:	4b04      	ldr	r3, [pc, #16]	; (80120d0 <USER_status+0x28>)
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	370c      	adds	r7, #12
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	200003d9 	.word	0x200003d9

080120d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b086      	sub	sp, #24
 80120d8:	af00      	add	r7, sp, #0
 80120da:	60b9      	str	r1, [r7, #8]
 80120dc:	607a      	str	r2, [r7, #4]
 80120de:	603b      	str	r3, [r7, #0]
 80120e0:	4603      	mov	r3, r0
 80120e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		uint8_t block_cnt = 0;
 80120e4:	2300      	movs	r3, #0
 80120e6:	75fb      	strb	r3, [r7, #23]
		for(block_cnt=0;block_cnt<count;block_cnt++) W25_ReadBuf(&buff[block_cnt*512], sector+block_cnt);
 80120e8:	2300      	movs	r3, #0
 80120ea:	75fb      	strb	r3, [r7, #23]
 80120ec:	e010      	b.n	8012110 <USER_read+0x3c>
 80120ee:	7dfb      	ldrb	r3, [r7, #23]
 80120f0:	025b      	lsls	r3, r3, #9
 80120f2:	461a      	mov	r2, r3
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	1898      	adds	r0, r3, r2
 80120f8:	7dfb      	ldrb	r3, [r7, #23]
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	b29b      	uxth	r3, r3
 8012100:	4413      	add	r3, r2
 8012102:	b29b      	uxth	r3, r3
 8012104:	4619      	mov	r1, r3
 8012106:	f7f2 fa41 	bl	800458c <W25_ReadBuf>
 801210a:	7dfb      	ldrb	r3, [r7, #23]
 801210c:	3301      	adds	r3, #1
 801210e:	75fb      	strb	r3, [r7, #23]
 8012110:	7dfb      	ldrb	r3, [r7, #23]
 8012112:	683a      	ldr	r2, [r7, #0]
 8012114:	429a      	cmp	r2, r3
 8012116:	d8ea      	bhi.n	80120ee <USER_read+0x1a>
		return RES_OK;
 8012118:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801211a:	4618      	mov	r0, r3
 801211c:	3718      	adds	r7, #24
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b086      	sub	sp, #24
 8012126:	af00      	add	r7, sp, #0
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
 801212c:	603b      	str	r3, [r7, #0]
 801212e:	4603      	mov	r3, r0
 8012130:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t block_cnt = 0;
 8012132:	2300      	movs	r3, #0
 8012134:	75fb      	strb	r3, [r7, #23]
	for(block_cnt=0;block_cnt<count;block_cnt++) W25_WriteBuf(&buff[block_cnt*512], sector+block_cnt);
 8012136:	2300      	movs	r3, #0
 8012138:	75fb      	strb	r3, [r7, #23]
 801213a:	e010      	b.n	801215e <USER_write+0x3c>
 801213c:	7dfb      	ldrb	r3, [r7, #23]
 801213e:	025b      	lsls	r3, r3, #9
 8012140:	461a      	mov	r2, r3
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	1898      	adds	r0, r3, r2
 8012146:	7dfb      	ldrb	r3, [r7, #23]
 8012148:	b29a      	uxth	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	b29b      	uxth	r3, r3
 801214e:	4413      	add	r3, r2
 8012150:	b29b      	uxth	r3, r3
 8012152:	4619      	mov	r1, r3
 8012154:	f7f2 fa8a 	bl	800466c <W25_WriteBuf>
 8012158:	7dfb      	ldrb	r3, [r7, #23]
 801215a:	3301      	adds	r3, #1
 801215c:	75fb      	strb	r3, [r7, #23]
 801215e:	7dfb      	ldrb	r3, [r7, #23]
 8012160:	683a      	ldr	r2, [r7, #0]
 8012162:	429a      	cmp	r2, r3
 8012164:	d8ea      	bhi.n	801213c <USER_write+0x1a>

	return RES_OK;
 8012166:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8012168:	4618      	mov	r0, r3
 801216a:	3718      	adds	r7, #24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012170:	b480      	push	{r7}
 8012172:	b085      	sub	sp, #20
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	603a      	str	r2, [r7, #0]
 801217a:	71fb      	strb	r3, [r7, #7]
 801217c:	460b      	mov	r3, r1
 801217e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 8012180:	2300      	movs	r3, #0
 8012182:	73fb      	strb	r3, [r7, #15]
	    if(pdrv) return RES_PARERR;
 8012184:	79fb      	ldrb	r3, [r7, #7]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d001      	beq.n	801218e <USER_ioctl+0x1e>
 801218a:	2304      	movs	r3, #4
 801218c:	e02b      	b.n	80121e6 <USER_ioctl+0x76>
	    if(Stat&STA_NOINIT) return RES_NOTRDY;
 801218e:	4b19      	ldr	r3, [pc, #100]	; (80121f4 <USER_ioctl+0x84>)
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	b2db      	uxtb	r3, r3
 8012194:	f003 0301 	and.w	r3, r3, #1
 8012198:	2b00      	cmp	r3, #0
 801219a:	d001      	beq.n	80121a0 <USER_ioctl+0x30>
 801219c:	2303      	movs	r3, #3
 801219e:	e022      	b.n	80121e6 <USER_ioctl+0x76>
	    switch(cmd)
 80121a0:	79bb      	ldrb	r3, [r7, #6]
 80121a2:	2b03      	cmp	r3, #3
 80121a4:	d81b      	bhi.n	80121de <USER_ioctl+0x6e>
 80121a6:	a201      	add	r2, pc, #4	; (adr r2, 80121ac <USER_ioctl+0x3c>)
 80121a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ac:	080121d9 	.word	0x080121d9
 80121b0:	080121c9 	.word	0x080121c9
 80121b4:	080121bd 	.word	0x080121bd
 80121b8:	080121d1 	.word	0x080121d1
	    {
			case GET_SECTOR_SIZE:
				*(WORD*)buff=50; // Размер сектора
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	2232      	movs	r2, #50	; 0x32
 80121c0:	801a      	strh	r2, [r3, #0]
				res=RES_OK;
 80121c2:	2300      	movs	r3, #0
 80121c4:	73fb      	strb	r3, [r7, #15]
				break;
 80121c6:	e00d      	b.n	80121e4 <USER_ioctl+0x74>
			case GET_SECTOR_COUNT: *(WORD*)buff=50; break;
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	2232      	movs	r2, #50	; 0x32
 80121cc:	801a      	strh	r2, [r3, #0]
 80121ce:	e009      	b.n	80121e4 <USER_ioctl+0x74>
			case GET_BLOCK_SIZE: *(WORD*)buff=50; break;
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	2232      	movs	r2, #50	; 0x32
 80121d4:	801a      	strh	r2, [r3, #0]
 80121d6:	e005      	b.n	80121e4 <USER_ioctl+0x74>
			case CTRL_SYNC: res=RES_OK; break;
 80121d8:	2300      	movs	r3, #0
 80121da:	73fb      	strb	r3, [r7, #15]
 80121dc:	e002      	b.n	80121e4 <USER_ioctl+0x74>
			default: res = RES_PARERR; break;
 80121de:	2304      	movs	r3, #4
 80121e0:	73fb      	strb	r3, [r7, #15]
 80121e2:	bf00      	nop
	    }

	    return res;
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3714      	adds	r7, #20
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	200003d9 	.word	0x200003d9

080121f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	4603      	mov	r3, r0
 8012200:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012202:	79fb      	ldrb	r3, [r7, #7]
 8012204:	4a08      	ldr	r2, [pc, #32]	; (8012228 <disk_status+0x30>)
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	4413      	add	r3, r2
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	79fa      	ldrb	r2, [r7, #7]
 8012210:	4905      	ldr	r1, [pc, #20]	; (8012228 <disk_status+0x30>)
 8012212:	440a      	add	r2, r1
 8012214:	7a12      	ldrb	r2, [r2, #8]
 8012216:	4610      	mov	r0, r2
 8012218:	4798      	blx	r3
 801221a:	4603      	mov	r3, r0
 801221c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012220:	4618      	mov	r0, r3
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	20000a40 	.word	0x20000a40

0801222c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	4603      	mov	r3, r0
 8012234:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012236:	2300      	movs	r3, #0
 8012238:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801223a:	79fb      	ldrb	r3, [r7, #7]
 801223c:	4a0d      	ldr	r2, [pc, #52]	; (8012274 <disk_initialize+0x48>)
 801223e:	5cd3      	ldrb	r3, [r2, r3]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d111      	bne.n	8012268 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012244:	79fb      	ldrb	r3, [r7, #7]
 8012246:	4a0b      	ldr	r2, [pc, #44]	; (8012274 <disk_initialize+0x48>)
 8012248:	2101      	movs	r1, #1
 801224a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801224c:	79fb      	ldrb	r3, [r7, #7]
 801224e:	4a09      	ldr	r2, [pc, #36]	; (8012274 <disk_initialize+0x48>)
 8012250:	009b      	lsls	r3, r3, #2
 8012252:	4413      	add	r3, r2
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	79fa      	ldrb	r2, [r7, #7]
 801225a:	4906      	ldr	r1, [pc, #24]	; (8012274 <disk_initialize+0x48>)
 801225c:	440a      	add	r2, r1
 801225e:	7a12      	ldrb	r2, [r2, #8]
 8012260:	4610      	mov	r0, r2
 8012262:	4798      	blx	r3
 8012264:	4603      	mov	r3, r0
 8012266:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012268:	7bfb      	ldrb	r3, [r7, #15]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20000a40 	.word	0x20000a40

08012278 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012278:	b590      	push	{r4, r7, lr}
 801227a:	b087      	sub	sp, #28
 801227c:	af00      	add	r7, sp, #0
 801227e:	60b9      	str	r1, [r7, #8]
 8012280:	607a      	str	r2, [r7, #4]
 8012282:	603b      	str	r3, [r7, #0]
 8012284:	4603      	mov	r3, r0
 8012286:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012288:	7bfb      	ldrb	r3, [r7, #15]
 801228a:	4a0a      	ldr	r2, [pc, #40]	; (80122b4 <disk_read+0x3c>)
 801228c:	009b      	lsls	r3, r3, #2
 801228e:	4413      	add	r3, r2
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	689c      	ldr	r4, [r3, #8]
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	4a07      	ldr	r2, [pc, #28]	; (80122b4 <disk_read+0x3c>)
 8012298:	4413      	add	r3, r2
 801229a:	7a18      	ldrb	r0, [r3, #8]
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	68b9      	ldr	r1, [r7, #8]
 80122a2:	47a0      	blx	r4
 80122a4:	4603      	mov	r3, r0
 80122a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80122a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	371c      	adds	r7, #28
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd90      	pop	{r4, r7, pc}
 80122b2:	bf00      	nop
 80122b4:	20000a40 	.word	0x20000a40

080122b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80122b8:	b590      	push	{r4, r7, lr}
 80122ba:	b087      	sub	sp, #28
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60b9      	str	r1, [r7, #8]
 80122c0:	607a      	str	r2, [r7, #4]
 80122c2:	603b      	str	r3, [r7, #0]
 80122c4:	4603      	mov	r3, r0
 80122c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80122c8:	7bfb      	ldrb	r3, [r7, #15]
 80122ca:	4a0a      	ldr	r2, [pc, #40]	; (80122f4 <disk_write+0x3c>)
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4413      	add	r3, r2
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	68dc      	ldr	r4, [r3, #12]
 80122d4:	7bfb      	ldrb	r3, [r7, #15]
 80122d6:	4a07      	ldr	r2, [pc, #28]	; (80122f4 <disk_write+0x3c>)
 80122d8:	4413      	add	r3, r2
 80122da:	7a18      	ldrb	r0, [r3, #8]
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	68b9      	ldr	r1, [r7, #8]
 80122e2:	47a0      	blx	r4
 80122e4:	4603      	mov	r3, r0
 80122e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80122e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	371c      	adds	r7, #28
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd90      	pop	{r4, r7, pc}
 80122f2:	bf00      	nop
 80122f4:	20000a40 	.word	0x20000a40

080122f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	603a      	str	r2, [r7, #0]
 8012302:	71fb      	strb	r3, [r7, #7]
 8012304:	460b      	mov	r3, r1
 8012306:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012308:	79fb      	ldrb	r3, [r7, #7]
 801230a:	4a09      	ldr	r2, [pc, #36]	; (8012330 <disk_ioctl+0x38>)
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	4413      	add	r3, r2
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	79fa      	ldrb	r2, [r7, #7]
 8012316:	4906      	ldr	r1, [pc, #24]	; (8012330 <disk_ioctl+0x38>)
 8012318:	440a      	add	r2, r1
 801231a:	7a10      	ldrb	r0, [r2, #8]
 801231c:	79b9      	ldrb	r1, [r7, #6]
 801231e:	683a      	ldr	r2, [r7, #0]
 8012320:	4798      	blx	r3
 8012322:	4603      	mov	r3, r0
 8012324:	73fb      	strb	r3, [r7, #15]
  return res;
 8012326:	7bfb      	ldrb	r3, [r7, #15]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	20000a40 	.word	0x20000a40

08012334 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	3301      	adds	r3, #1
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012344:	89fb      	ldrh	r3, [r7, #14]
 8012346:	021b      	lsls	r3, r3, #8
 8012348:	b21a      	sxth	r2, r3
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	b21b      	sxth	r3, r3
 8012350:	4313      	orrs	r3, r2
 8012352:	b21b      	sxth	r3, r3
 8012354:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012356:	89fb      	ldrh	r3, [r7, #14]
}
 8012358:	4618      	mov	r0, r3
 801235a:	3714      	adds	r7, #20
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3303      	adds	r3, #3
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	021b      	lsls	r3, r3, #8
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	3202      	adds	r2, #2
 801237c:	7812      	ldrb	r2, [r2, #0]
 801237e:	4313      	orrs	r3, r2
 8012380:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	021b      	lsls	r3, r3, #8
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	3201      	adds	r2, #1
 801238a:	7812      	ldrb	r2, [r2, #0]
 801238c:	4313      	orrs	r3, r2
 801238e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	021b      	lsls	r3, r3, #8
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	7812      	ldrb	r2, [r2, #0]
 8012398:	4313      	orrs	r3, r2
 801239a:	60fb      	str	r3, [r7, #12]
	return rv;
 801239c:	68fb      	ldr	r3, [r7, #12]
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3714      	adds	r7, #20
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr

080123aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80123aa:	b480      	push	{r7}
 80123ac:	b083      	sub	sp, #12
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
 80123b2:	460b      	mov	r3, r1
 80123b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	1c5a      	adds	r2, r3, #1
 80123ba:	607a      	str	r2, [r7, #4]
 80123bc:	887a      	ldrh	r2, [r7, #2]
 80123be:	b2d2      	uxtb	r2, r2
 80123c0:	701a      	strb	r2, [r3, #0]
 80123c2:	887b      	ldrh	r3, [r7, #2]
 80123c4:	0a1b      	lsrs	r3, r3, #8
 80123c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	1c5a      	adds	r2, r3, #1
 80123cc:	607a      	str	r2, [r7, #4]
 80123ce:	887a      	ldrh	r2, [r7, #2]
 80123d0:	b2d2      	uxtb	r2, r2
 80123d2:	701a      	strb	r2, [r3, #0]
}
 80123d4:	bf00      	nop
 80123d6:	370c      	adds	r7, #12
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr

080123e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80123e0:	b480      	push	{r7}
 80123e2:	b083      	sub	sp, #12
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	1c5a      	adds	r2, r3, #1
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	683a      	ldr	r2, [r7, #0]
 80123f2:	b2d2      	uxtb	r2, r2
 80123f4:	701a      	strb	r2, [r3, #0]
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	0a1b      	lsrs	r3, r3, #8
 80123fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	1c5a      	adds	r2, r3, #1
 8012400:	607a      	str	r2, [r7, #4]
 8012402:	683a      	ldr	r2, [r7, #0]
 8012404:	b2d2      	uxtb	r2, r2
 8012406:	701a      	strb	r2, [r3, #0]
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	0a1b      	lsrs	r3, r3, #8
 801240c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	1c5a      	adds	r2, r3, #1
 8012412:	607a      	str	r2, [r7, #4]
 8012414:	683a      	ldr	r2, [r7, #0]
 8012416:	b2d2      	uxtb	r2, r2
 8012418:	701a      	strb	r2, [r3, #0]
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	0a1b      	lsrs	r3, r3, #8
 801241e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	1c5a      	adds	r2, r3, #1
 8012424:	607a      	str	r2, [r7, #4]
 8012426:	683a      	ldr	r2, [r7, #0]
 8012428:	b2d2      	uxtb	r2, r2
 801242a:	701a      	strb	r2, [r3, #0]
}
 801242c:	bf00      	nop
 801242e:	370c      	adds	r7, #12
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr

08012438 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012438:	b480      	push	{r7}
 801243a:	b087      	sub	sp, #28
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00d      	beq.n	801246e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012452:	693a      	ldr	r2, [r7, #16]
 8012454:	1c53      	adds	r3, r2, #1
 8012456:	613b      	str	r3, [r7, #16]
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	1c59      	adds	r1, r3, #1
 801245c:	6179      	str	r1, [r7, #20]
 801245e:	7812      	ldrb	r2, [r2, #0]
 8012460:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	3b01      	subs	r3, #1
 8012466:	607b      	str	r3, [r7, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1f1      	bne.n	8012452 <mem_cpy+0x1a>
	}
}
 801246e:	bf00      	nop
 8012470:	371c      	adds	r7, #28
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr

0801247a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801247a:	b480      	push	{r7}
 801247c:	b087      	sub	sp, #28
 801247e:	af00      	add	r7, sp, #0
 8012480:	60f8      	str	r0, [r7, #12]
 8012482:	60b9      	str	r1, [r7, #8]
 8012484:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	617a      	str	r2, [r7, #20]
 8012490:	68ba      	ldr	r2, [r7, #8]
 8012492:	b2d2      	uxtb	r2, r2
 8012494:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	3b01      	subs	r3, #1
 801249a:	607b      	str	r3, [r7, #4]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1f3      	bne.n	801248a <mem_set+0x10>
}
 80124a2:	bf00      	nop
 80124a4:	bf00      	nop
 80124a6:	371c      	adds	r7, #28
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80124b0:	b480      	push	{r7}
 80124b2:	b089      	sub	sp, #36	; 0x24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	61fb      	str	r3, [r7, #28]
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80124c4:	2300      	movs	r3, #0
 80124c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	1c5a      	adds	r2, r3, #1
 80124cc:	61fa      	str	r2, [r7, #28]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	4619      	mov	r1, r3
 80124d2:	69bb      	ldr	r3, [r7, #24]
 80124d4:	1c5a      	adds	r2, r3, #1
 80124d6:	61ba      	str	r2, [r7, #24]
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	1acb      	subs	r3, r1, r3
 80124dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3b01      	subs	r3, #1
 80124e2:	607b      	str	r3, [r7, #4]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d002      	beq.n	80124f0 <mem_cmp+0x40>
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d0eb      	beq.n	80124c8 <mem_cmp+0x18>

	return r;
 80124f0:	697b      	ldr	r3, [r7, #20]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3724      	adds	r7, #36	; 0x24
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80124fe:	b480      	push	{r7}
 8012500:	b083      	sub	sp, #12
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
 8012506:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012508:	e002      	b.n	8012510 <chk_chr+0x12>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	3301      	adds	r3, #1
 801250e:	607b      	str	r3, [r7, #4]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d005      	beq.n	8012524 <chk_chr+0x26>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	461a      	mov	r2, r3
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	4293      	cmp	r3, r2
 8012522:	d1f2      	bne.n	801250a <chk_chr+0xc>
	return *str;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	781b      	ldrb	r3, [r3, #0]
}
 8012528:	4618      	mov	r0, r3
 801252a:	370c      	adds	r7, #12
 801252c:	46bd      	mov	sp, r7
 801252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012532:	4770      	bx	lr

08012534 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012534:	b480      	push	{r7}
 8012536:	b085      	sub	sp, #20
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801253e:	2300      	movs	r3, #0
 8012540:	60bb      	str	r3, [r7, #8]
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	60fb      	str	r3, [r7, #12]
 8012546:	e029      	b.n	801259c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012548:	4a27      	ldr	r2, [pc, #156]	; (80125e8 <chk_lock+0xb4>)
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	011b      	lsls	r3, r3, #4
 801254e:	4413      	add	r3, r2
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d01d      	beq.n	8012592 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012556:	4a24      	ldr	r2, [pc, #144]	; (80125e8 <chk_lock+0xb4>)
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	011b      	lsls	r3, r3, #4
 801255c:	4413      	add	r3, r2
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	429a      	cmp	r2, r3
 8012566:	d116      	bne.n	8012596 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012568:	4a1f      	ldr	r2, [pc, #124]	; (80125e8 <chk_lock+0xb4>)
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	011b      	lsls	r3, r3, #4
 801256e:	4413      	add	r3, r2
 8012570:	3304      	adds	r3, #4
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012578:	429a      	cmp	r2, r3
 801257a:	d10c      	bne.n	8012596 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801257c:	4a1a      	ldr	r2, [pc, #104]	; (80125e8 <chk_lock+0xb4>)
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	011b      	lsls	r3, r3, #4
 8012582:	4413      	add	r3, r2
 8012584:	3308      	adds	r3, #8
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801258c:	429a      	cmp	r2, r3
 801258e:	d102      	bne.n	8012596 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012590:	e007      	b.n	80125a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012592:	2301      	movs	r3, #1
 8012594:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	3301      	adds	r3, #1
 801259a:	60fb      	str	r3, [r7, #12]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2b01      	cmp	r3, #1
 80125a0:	d9d2      	bls.n	8012548 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2b02      	cmp	r3, #2
 80125a6:	d109      	bne.n	80125bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d102      	bne.n	80125b4 <chk_lock+0x80>
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	2b02      	cmp	r3, #2
 80125b2:	d101      	bne.n	80125b8 <chk_lock+0x84>
 80125b4:	2300      	movs	r3, #0
 80125b6:	e010      	b.n	80125da <chk_lock+0xa6>
 80125b8:	2312      	movs	r3, #18
 80125ba:	e00e      	b.n	80125da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d108      	bne.n	80125d4 <chk_lock+0xa0>
 80125c2:	4a09      	ldr	r2, [pc, #36]	; (80125e8 <chk_lock+0xb4>)
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	011b      	lsls	r3, r3, #4
 80125c8:	4413      	add	r3, r2
 80125ca:	330c      	adds	r3, #12
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125d2:	d101      	bne.n	80125d8 <chk_lock+0xa4>
 80125d4:	2310      	movs	r3, #16
 80125d6:	e000      	b.n	80125da <chk_lock+0xa6>
 80125d8:	2300      	movs	r3, #0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3714      	adds	r7, #20
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop
 80125e8:	20000a20 	.word	0x20000a20

080125ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80125f2:	2300      	movs	r3, #0
 80125f4:	607b      	str	r3, [r7, #4]
 80125f6:	e002      	b.n	80125fe <enq_lock+0x12>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	3301      	adds	r3, #1
 80125fc:	607b      	str	r3, [r7, #4]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b01      	cmp	r3, #1
 8012602:	d806      	bhi.n	8012612 <enq_lock+0x26>
 8012604:	4a09      	ldr	r2, [pc, #36]	; (801262c <enq_lock+0x40>)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	011b      	lsls	r3, r3, #4
 801260a:	4413      	add	r3, r2
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1f2      	bne.n	80125f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2b02      	cmp	r3, #2
 8012616:	bf14      	ite	ne
 8012618:	2301      	movne	r3, #1
 801261a:	2300      	moveq	r3, #0
 801261c:	b2db      	uxtb	r3, r3
}
 801261e:	4618      	mov	r0, r3
 8012620:	370c      	adds	r7, #12
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop
 801262c:	20000a20 	.word	0x20000a20

08012630 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012630:	b480      	push	{r7}
 8012632:	b085      	sub	sp, #20
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801263a:	2300      	movs	r3, #0
 801263c:	60fb      	str	r3, [r7, #12]
 801263e:	e01f      	b.n	8012680 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012640:	4a41      	ldr	r2, [pc, #260]	; (8012748 <inc_lock+0x118>)
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	011b      	lsls	r3, r3, #4
 8012646:	4413      	add	r3, r2
 8012648:	681a      	ldr	r2, [r3, #0]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	429a      	cmp	r2, r3
 8012650:	d113      	bne.n	801267a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012652:	4a3d      	ldr	r2, [pc, #244]	; (8012748 <inc_lock+0x118>)
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	011b      	lsls	r3, r3, #4
 8012658:	4413      	add	r3, r2
 801265a:	3304      	adds	r3, #4
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012662:	429a      	cmp	r2, r3
 8012664:	d109      	bne.n	801267a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012666:	4a38      	ldr	r2, [pc, #224]	; (8012748 <inc_lock+0x118>)
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	011b      	lsls	r3, r3, #4
 801266c:	4413      	add	r3, r2
 801266e:	3308      	adds	r3, #8
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012676:	429a      	cmp	r2, r3
 8012678:	d006      	beq.n	8012688 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	3301      	adds	r3, #1
 801267e:	60fb      	str	r3, [r7, #12]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d9dc      	bls.n	8012640 <inc_lock+0x10>
 8012686:	e000      	b.n	801268a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012688:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2b02      	cmp	r3, #2
 801268e:	d132      	bne.n	80126f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012690:	2300      	movs	r3, #0
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	e002      	b.n	801269c <inc_lock+0x6c>
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	3301      	adds	r3, #1
 801269a:	60fb      	str	r3, [r7, #12]
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d806      	bhi.n	80126b0 <inc_lock+0x80>
 80126a2:	4a29      	ldr	r2, [pc, #164]	; (8012748 <inc_lock+0x118>)
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	011b      	lsls	r3, r3, #4
 80126a8:	4413      	add	r3, r2
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1f2      	bne.n	8012696 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d101      	bne.n	80126ba <inc_lock+0x8a>
 80126b6:	2300      	movs	r3, #0
 80126b8:	e040      	b.n	801273c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681a      	ldr	r2, [r3, #0]
 80126be:	4922      	ldr	r1, [pc, #136]	; (8012748 <inc_lock+0x118>)
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	011b      	lsls	r3, r3, #4
 80126c4:	440b      	add	r3, r1
 80126c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	689a      	ldr	r2, [r3, #8]
 80126cc:	491e      	ldr	r1, [pc, #120]	; (8012748 <inc_lock+0x118>)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	011b      	lsls	r3, r3, #4
 80126d2:	440b      	add	r3, r1
 80126d4:	3304      	adds	r3, #4
 80126d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	695a      	ldr	r2, [r3, #20]
 80126dc:	491a      	ldr	r1, [pc, #104]	; (8012748 <inc_lock+0x118>)
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	011b      	lsls	r3, r3, #4
 80126e2:	440b      	add	r3, r1
 80126e4:	3308      	adds	r3, #8
 80126e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80126e8:	4a17      	ldr	r2, [pc, #92]	; (8012748 <inc_lock+0x118>)
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	011b      	lsls	r3, r3, #4
 80126ee:	4413      	add	r3, r2
 80126f0:	330c      	adds	r3, #12
 80126f2:	2200      	movs	r2, #0
 80126f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d009      	beq.n	8012710 <inc_lock+0xe0>
 80126fc:	4a12      	ldr	r2, [pc, #72]	; (8012748 <inc_lock+0x118>)
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	011b      	lsls	r3, r3, #4
 8012702:	4413      	add	r3, r2
 8012704:	330c      	adds	r3, #12
 8012706:	881b      	ldrh	r3, [r3, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d001      	beq.n	8012710 <inc_lock+0xe0>
 801270c:	2300      	movs	r3, #0
 801270e:	e015      	b.n	801273c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d108      	bne.n	8012728 <inc_lock+0xf8>
 8012716:	4a0c      	ldr	r2, [pc, #48]	; (8012748 <inc_lock+0x118>)
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	011b      	lsls	r3, r3, #4
 801271c:	4413      	add	r3, r2
 801271e:	330c      	adds	r3, #12
 8012720:	881b      	ldrh	r3, [r3, #0]
 8012722:	3301      	adds	r3, #1
 8012724:	b29a      	uxth	r2, r3
 8012726:	e001      	b.n	801272c <inc_lock+0xfc>
 8012728:	f44f 7280 	mov.w	r2, #256	; 0x100
 801272c:	4906      	ldr	r1, [pc, #24]	; (8012748 <inc_lock+0x118>)
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	011b      	lsls	r3, r3, #4
 8012732:	440b      	add	r3, r1
 8012734:	330c      	adds	r3, #12
 8012736:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	3301      	adds	r3, #1
}
 801273c:	4618      	mov	r0, r3
 801273e:	3714      	adds	r7, #20
 8012740:	46bd      	mov	sp, r7
 8012742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012746:	4770      	bx	lr
 8012748:	20000a20 	.word	0x20000a20

0801274c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	3b01      	subs	r3, #1
 8012758:	607b      	str	r3, [r7, #4]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2b01      	cmp	r3, #1
 801275e:	d825      	bhi.n	80127ac <dec_lock+0x60>
		n = Files[i].ctr;
 8012760:	4a17      	ldr	r2, [pc, #92]	; (80127c0 <dec_lock+0x74>)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	011b      	lsls	r3, r3, #4
 8012766:	4413      	add	r3, r2
 8012768:	330c      	adds	r3, #12
 801276a:	881b      	ldrh	r3, [r3, #0]
 801276c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801276e:	89fb      	ldrh	r3, [r7, #14]
 8012770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012774:	d101      	bne.n	801277a <dec_lock+0x2e>
 8012776:	2300      	movs	r3, #0
 8012778:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801277a:	89fb      	ldrh	r3, [r7, #14]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d002      	beq.n	8012786 <dec_lock+0x3a>
 8012780:	89fb      	ldrh	r3, [r7, #14]
 8012782:	3b01      	subs	r3, #1
 8012784:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012786:	4a0e      	ldr	r2, [pc, #56]	; (80127c0 <dec_lock+0x74>)
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	011b      	lsls	r3, r3, #4
 801278c:	4413      	add	r3, r2
 801278e:	330c      	adds	r3, #12
 8012790:	89fa      	ldrh	r2, [r7, #14]
 8012792:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012794:	89fb      	ldrh	r3, [r7, #14]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d105      	bne.n	80127a6 <dec_lock+0x5a>
 801279a:	4a09      	ldr	r2, [pc, #36]	; (80127c0 <dec_lock+0x74>)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	011b      	lsls	r3, r3, #4
 80127a0:	4413      	add	r3, r2
 80127a2:	2200      	movs	r2, #0
 80127a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80127a6:	2300      	movs	r3, #0
 80127a8:	737b      	strb	r3, [r7, #13]
 80127aa:	e001      	b.n	80127b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80127ac:	2302      	movs	r3, #2
 80127ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80127b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3714      	adds	r7, #20
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	20000a20 	.word	0x20000a20

080127c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b085      	sub	sp, #20
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80127cc:	2300      	movs	r3, #0
 80127ce:	60fb      	str	r3, [r7, #12]
 80127d0:	e010      	b.n	80127f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80127d2:	4a0d      	ldr	r2, [pc, #52]	; (8012808 <clear_lock+0x44>)
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	011b      	lsls	r3, r3, #4
 80127d8:	4413      	add	r3, r2
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d105      	bne.n	80127ee <clear_lock+0x2a>
 80127e2:	4a09      	ldr	r2, [pc, #36]	; (8012808 <clear_lock+0x44>)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	011b      	lsls	r3, r3, #4
 80127e8:	4413      	add	r3, r2
 80127ea:	2200      	movs	r2, #0
 80127ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	3301      	adds	r3, #1
 80127f2:	60fb      	str	r3, [r7, #12]
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	d9eb      	bls.n	80127d2 <clear_lock+0xe>
	}
}
 80127fa:	bf00      	nop
 80127fc:	bf00      	nop
 80127fe:	3714      	adds	r7, #20
 8012800:	46bd      	mov	sp, r7
 8012802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012806:	4770      	bx	lr
 8012808:	20000a20 	.word	0x20000a20

0801280c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b086      	sub	sp, #24
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012814:	2300      	movs	r3, #0
 8012816:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	78db      	ldrb	r3, [r3, #3]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d034      	beq.n	801288a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012824:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	7858      	ldrb	r0, [r3, #1]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012830:	2301      	movs	r3, #1
 8012832:	697a      	ldr	r2, [r7, #20]
 8012834:	f7ff fd40 	bl	80122b8 <disk_write>
 8012838:	4603      	mov	r3, r0
 801283a:	2b00      	cmp	r3, #0
 801283c:	d002      	beq.n	8012844 <sync_window+0x38>
			res = FR_DISK_ERR;
 801283e:	2301      	movs	r3, #1
 8012840:	73fb      	strb	r3, [r7, #15]
 8012842:	e022      	b.n	801288a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6a1b      	ldr	r3, [r3, #32]
 801284e:	697a      	ldr	r2, [r7, #20]
 8012850:	1ad2      	subs	r2, r2, r3
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	699b      	ldr	r3, [r3, #24]
 8012856:	429a      	cmp	r2, r3
 8012858:	d217      	bcs.n	801288a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	789b      	ldrb	r3, [r3, #2]
 801285e:	613b      	str	r3, [r7, #16]
 8012860:	e010      	b.n	8012884 <sync_window+0x78>
					wsect += fs->fsize;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	699b      	ldr	r3, [r3, #24]
 8012866:	697a      	ldr	r2, [r7, #20]
 8012868:	4413      	add	r3, r2
 801286a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	7858      	ldrb	r0, [r3, #1]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012876:	2301      	movs	r3, #1
 8012878:	697a      	ldr	r2, [r7, #20]
 801287a:	f7ff fd1d 	bl	80122b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	3b01      	subs	r3, #1
 8012882:	613b      	str	r3, [r7, #16]
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	2b01      	cmp	r3, #1
 8012888:	d8eb      	bhi.n	8012862 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801288a:	7bfb      	ldrb	r3, [r7, #15]
}
 801288c:	4618      	mov	r0, r3
 801288e:	3718      	adds	r7, #24
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801289e:	2300      	movs	r3, #0
 80128a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d01b      	beq.n	80128e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff ffad 	bl	801280c <sync_window>
 80128b2:	4603      	mov	r3, r0
 80128b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d113      	bne.n	80128e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	7858      	ldrb	r0, [r3, #1]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128c6:	2301      	movs	r3, #1
 80128c8:	683a      	ldr	r2, [r7, #0]
 80128ca:	f7ff fcd5 	bl	8012278 <disk_read>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d004      	beq.n	80128de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80128d4:	f04f 33ff 	mov.w	r3, #4294967295
 80128d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80128da:	2301      	movs	r3, #1
 80128dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	683a      	ldr	r2, [r7, #0]
 80128e2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80128e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3710      	adds	r7, #16
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
	...

080128f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7ff ff87 	bl	801280c <sync_window>
 80128fe:	4603      	mov	r3, r0
 8012900:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012902:	7bfb      	ldrb	r3, [r7, #15]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d158      	bne.n	80129ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b03      	cmp	r3, #3
 801290e:	d148      	bne.n	80129a2 <sync_fs+0xb2>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	791b      	ldrb	r3, [r3, #4]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d144      	bne.n	80129a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	3330      	adds	r3, #48	; 0x30
 801291c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012920:	2100      	movs	r1, #0
 8012922:	4618      	mov	r0, r3
 8012924:	f7ff fda9 	bl	801247a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	3330      	adds	r3, #48	; 0x30
 801292c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012930:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012934:	4618      	mov	r0, r3
 8012936:	f7ff fd38 	bl	80123aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	3330      	adds	r3, #48	; 0x30
 801293e:	4921      	ldr	r1, [pc, #132]	; (80129c4 <sync_fs+0xd4>)
 8012940:	4618      	mov	r0, r3
 8012942:	f7ff fd4d 	bl	80123e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	3330      	adds	r3, #48	; 0x30
 801294a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801294e:	491e      	ldr	r1, [pc, #120]	; (80129c8 <sync_fs+0xd8>)
 8012950:	4618      	mov	r0, r3
 8012952:	f7ff fd45 	bl	80123e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3330      	adds	r3, #48	; 0x30
 801295a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	691b      	ldr	r3, [r3, #16]
 8012962:	4619      	mov	r1, r3
 8012964:	4610      	mov	r0, r2
 8012966:	f7ff fd3b 	bl	80123e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	3330      	adds	r3, #48	; 0x30
 801296e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	68db      	ldr	r3, [r3, #12]
 8012976:	4619      	mov	r1, r3
 8012978:	4610      	mov	r0, r2
 801297a:	f7ff fd31 	bl	80123e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	69db      	ldr	r3, [r3, #28]
 8012982:	1c5a      	adds	r2, r3, #1
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	7858      	ldrb	r0, [r3, #1]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012996:	2301      	movs	r3, #1
 8012998:	f7ff fc8e 	bl	80122b8 <disk_write>
			fs->fsi_flag = 0;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2200      	movs	r2, #0
 80129a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	785b      	ldrb	r3, [r3, #1]
 80129a6:	2200      	movs	r2, #0
 80129a8:	2100      	movs	r1, #0
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff fca4 	bl	80122f8 <disk_ioctl>
 80129b0:	4603      	mov	r3, r0
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <sync_fs+0xca>
 80129b6:	2301      	movs	r3, #1
 80129b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80129ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3710      	adds	r7, #16
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	41615252 	.word	0x41615252
 80129c8:	61417272 	.word	0x61417272

080129cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b083      	sub	sp, #12
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	3b02      	subs	r3, #2
 80129da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	695b      	ldr	r3, [r3, #20]
 80129e0:	3b02      	subs	r3, #2
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d301      	bcc.n	80129ec <clust2sect+0x20>
 80129e8:	2300      	movs	r3, #0
 80129ea:	e008      	b.n	80129fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	895b      	ldrh	r3, [r3, #10]
 80129f0:	461a      	mov	r2, r3
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	fb03 f202 	mul.w	r2, r3, r2
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129fc:	4413      	add	r3, r2
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr

08012a0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a0a:	b580      	push	{r7, lr}
 8012a0c:	b086      	sub	sp, #24
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
 8012a12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d904      	bls.n	8012a2a <get_fat+0x20>
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	695b      	ldr	r3, [r3, #20]
 8012a24:	683a      	ldr	r2, [r7, #0]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d302      	bcc.n	8012a30 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	617b      	str	r3, [r7, #20]
 8012a2e:	e08f      	b.n	8012b50 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a30:	f04f 33ff 	mov.w	r3, #4294967295
 8012a34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	2b03      	cmp	r3, #3
 8012a3c:	d062      	beq.n	8012b04 <get_fat+0xfa>
 8012a3e:	2b03      	cmp	r3, #3
 8012a40:	dc7c      	bgt.n	8012b3c <get_fat+0x132>
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d002      	beq.n	8012a4c <get_fat+0x42>
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	d042      	beq.n	8012ad0 <get_fat+0xc6>
 8012a4a:	e077      	b.n	8012b3c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	60fb      	str	r3, [r7, #12]
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	085b      	lsrs	r3, r3, #1
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	4413      	add	r3, r2
 8012a58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	6a1a      	ldr	r2, [r3, #32]
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	0a5b      	lsrs	r3, r3, #9
 8012a62:	4413      	add	r3, r2
 8012a64:	4619      	mov	r1, r3
 8012a66:	6938      	ldr	r0, [r7, #16]
 8012a68:	f7ff ff14 	bl	8012894 <move_window>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d167      	bne.n	8012b42 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	1c5a      	adds	r2, r3, #1
 8012a76:	60fa      	str	r2, [r7, #12]
 8012a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a7c:	693a      	ldr	r2, [r7, #16]
 8012a7e:	4413      	add	r3, r2
 8012a80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	6a1a      	ldr	r2, [r3, #32]
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	0a5b      	lsrs	r3, r3, #9
 8012a8e:	4413      	add	r3, r2
 8012a90:	4619      	mov	r1, r3
 8012a92:	6938      	ldr	r0, [r7, #16]
 8012a94:	f7ff fefe 	bl	8012894 <move_window>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d153      	bne.n	8012b46 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012aa4:	693a      	ldr	r2, [r7, #16]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012aac:	021b      	lsls	r3, r3, #8
 8012aae:	461a      	mov	r2, r3
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	f003 0301 	and.w	r3, r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d002      	beq.n	8012ac6 <get_fat+0xbc>
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	091b      	lsrs	r3, r3, #4
 8012ac4:	e002      	b.n	8012acc <get_fat+0xc2>
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012acc:	617b      	str	r3, [r7, #20]
			break;
 8012ace:	e03f      	b.n	8012b50 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	6a1a      	ldr	r2, [r3, #32]
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	0a1b      	lsrs	r3, r3, #8
 8012ad8:	4413      	add	r3, r2
 8012ada:	4619      	mov	r1, r3
 8012adc:	6938      	ldr	r0, [r7, #16]
 8012ade:	f7ff fed9 	bl	8012894 <move_window>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d130      	bne.n	8012b4a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	005b      	lsls	r3, r3, #1
 8012af2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012af6:	4413      	add	r3, r2
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff fc1b 	bl	8012334 <ld_word>
 8012afe:	4603      	mov	r3, r0
 8012b00:	617b      	str	r3, [r7, #20]
			break;
 8012b02:	e025      	b.n	8012b50 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	6a1a      	ldr	r2, [r3, #32]
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	09db      	lsrs	r3, r3, #7
 8012b0c:	4413      	add	r3, r2
 8012b0e:	4619      	mov	r1, r3
 8012b10:	6938      	ldr	r0, [r7, #16]
 8012b12:	f7ff febf 	bl	8012894 <move_window>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d118      	bne.n	8012b4e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012b2a:	4413      	add	r3, r2
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff fc19 	bl	8012364 <ld_dword>
 8012b32:	4603      	mov	r3, r0
 8012b34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012b38:	617b      	str	r3, [r7, #20]
			break;
 8012b3a:	e009      	b.n	8012b50 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	617b      	str	r3, [r7, #20]
 8012b40:	e006      	b.n	8012b50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b42:	bf00      	nop
 8012b44:	e004      	b.n	8012b50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b46:	bf00      	nop
 8012b48:	e002      	b.n	8012b50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b4a:	bf00      	nop
 8012b4c:	e000      	b.n	8012b50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b4e:	bf00      	nop
		}
	}

	return val;
 8012b50:	697b      	ldr	r3, [r7, #20]
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3718      	adds	r7, #24
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}

08012b5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b5a:	b590      	push	{r4, r7, lr}
 8012b5c:	b089      	sub	sp, #36	; 0x24
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	60f8      	str	r0, [r7, #12]
 8012b62:	60b9      	str	r1, [r7, #8]
 8012b64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b66:	2302      	movs	r3, #2
 8012b68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	f240 80d2 	bls.w	8012d16 <put_fat+0x1bc>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	695b      	ldr	r3, [r3, #20]
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	f080 80cc 	bcs.w	8012d16 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	2b03      	cmp	r3, #3
 8012b84:	f000 8096 	beq.w	8012cb4 <put_fat+0x15a>
 8012b88:	2b03      	cmp	r3, #3
 8012b8a:	f300 80cd 	bgt.w	8012d28 <put_fat+0x1ce>
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d002      	beq.n	8012b98 <put_fat+0x3e>
 8012b92:	2b02      	cmp	r3, #2
 8012b94:	d06e      	beq.n	8012c74 <put_fat+0x11a>
 8012b96:	e0c7      	b.n	8012d28 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	61bb      	str	r3, [r7, #24]
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	085b      	lsrs	r3, r3, #1
 8012ba0:	69ba      	ldr	r2, [r7, #24]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6a1a      	ldr	r2, [r3, #32]
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	0a5b      	lsrs	r3, r3, #9
 8012bae:	4413      	add	r3, r2
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	68f8      	ldr	r0, [r7, #12]
 8012bb4:	f7ff fe6e 	bl	8012894 <move_window>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bbc:	7ffb      	ldrb	r3, [r7, #31]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f040 80ab 	bne.w	8012d1a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	1c59      	adds	r1, r3, #1
 8012bce:	61b9      	str	r1, [r7, #24]
 8012bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bd4:	4413      	add	r3, r2
 8012bd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	f003 0301 	and.w	r3, r3, #1
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d00d      	beq.n	8012bfe <put_fat+0xa4>
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	b25b      	sxtb	r3, r3
 8012be8:	f003 030f 	and.w	r3, r3, #15
 8012bec:	b25a      	sxtb	r2, r3
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	011b      	lsls	r3, r3, #4
 8012bf4:	b25b      	sxtb	r3, r3
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	b25b      	sxtb	r3, r3
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	e001      	b.n	8012c02 <put_fat+0xa8>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	697a      	ldr	r2, [r7, #20]
 8012c04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2201      	movs	r2, #1
 8012c0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6a1a      	ldr	r2, [r3, #32]
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	0a5b      	lsrs	r3, r3, #9
 8012c14:	4413      	add	r3, r2
 8012c16:	4619      	mov	r1, r3
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f7ff fe3b 	bl	8012894 <move_window>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c22:	7ffb      	ldrb	r3, [r7, #31]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d17a      	bne.n	8012d1e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c2e:	69bb      	ldr	r3, [r7, #24]
 8012c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c34:	4413      	add	r3, r2
 8012c36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	f003 0301 	and.w	r3, r3, #1
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d003      	beq.n	8012c4a <put_fat+0xf0>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	091b      	lsrs	r3, r3, #4
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	e00e      	b.n	8012c68 <put_fat+0x10e>
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	b25b      	sxtb	r3, r3
 8012c50:	f023 030f 	bic.w	r3, r3, #15
 8012c54:	b25a      	sxtb	r2, r3
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	0a1b      	lsrs	r3, r3, #8
 8012c5a:	b25b      	sxtb	r3, r3
 8012c5c:	f003 030f 	and.w	r3, r3, #15
 8012c60:	b25b      	sxtb	r3, r3
 8012c62:	4313      	orrs	r3, r2
 8012c64:	b25b      	sxtb	r3, r3
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	697a      	ldr	r2, [r7, #20]
 8012c6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	70da      	strb	r2, [r3, #3]
			break;
 8012c72:	e059      	b.n	8012d28 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6a1a      	ldr	r2, [r3, #32]
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	0a1b      	lsrs	r3, r3, #8
 8012c7c:	4413      	add	r3, r2
 8012c7e:	4619      	mov	r1, r3
 8012c80:	68f8      	ldr	r0, [r7, #12]
 8012c82:	f7ff fe07 	bl	8012894 <move_window>
 8012c86:	4603      	mov	r3, r0
 8012c88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c8a:	7ffb      	ldrb	r3, [r7, #31]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d148      	bne.n	8012d22 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012c9e:	4413      	add	r3, r2
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	b292      	uxth	r2, r2
 8012ca4:	4611      	mov	r1, r2
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7ff fb7f 	bl	80123aa <st_word>
			fs->wflag = 1;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	2201      	movs	r2, #1
 8012cb0:	70da      	strb	r2, [r3, #3]
			break;
 8012cb2:	e039      	b.n	8012d28 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	6a1a      	ldr	r2, [r3, #32]
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	09db      	lsrs	r3, r3, #7
 8012cbc:	4413      	add	r3, r2
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f7ff fde7 	bl	8012894 <move_window>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012cca:	7ffb      	ldrb	r3, [r7, #31]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d12a      	bne.n	8012d26 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012ce4:	4413      	add	r3, r2
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7ff fb3c 	bl	8012364 <ld_dword>
 8012cec:	4603      	mov	r3, r0
 8012cee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012cf2:	4323      	orrs	r3, r4
 8012cf4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d04:	4413      	add	r3, r2
 8012d06:	6879      	ldr	r1, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7ff fb69 	bl	80123e0 <st_dword>
			fs->wflag = 1;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2201      	movs	r2, #1
 8012d12:	70da      	strb	r2, [r3, #3]
			break;
 8012d14:	e008      	b.n	8012d28 <put_fat+0x1ce>
		}
	}
 8012d16:	bf00      	nop
 8012d18:	e006      	b.n	8012d28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d1a:	bf00      	nop
 8012d1c:	e004      	b.n	8012d28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d1e:	bf00      	nop
 8012d20:	e002      	b.n	8012d28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d22:	bf00      	nop
 8012d24:	e000      	b.n	8012d28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d26:	bf00      	nop
	return res;
 8012d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3724      	adds	r7, #36	; 0x24
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd90      	pop	{r4, r7, pc}

08012d32 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b088      	sub	sp, #32
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	60f8      	str	r0, [r7, #12]
 8012d3a:	60b9      	str	r1, [r7, #8]
 8012d3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d904      	bls.n	8012d58 <remove_chain+0x26>
 8012d4e:	69bb      	ldr	r3, [r7, #24]
 8012d50:	695b      	ldr	r3, [r3, #20]
 8012d52:	68ba      	ldr	r2, [r7, #8]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d301      	bcc.n	8012d5c <remove_chain+0x2a>
 8012d58:	2302      	movs	r3, #2
 8012d5a:	e04b      	b.n	8012df4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d00c      	beq.n	8012d7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012d62:	f04f 32ff 	mov.w	r2, #4294967295
 8012d66:	6879      	ldr	r1, [r7, #4]
 8012d68:	69b8      	ldr	r0, [r7, #24]
 8012d6a:	f7ff fef6 	bl	8012b5a <put_fat>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012d72:	7ffb      	ldrb	r3, [r7, #31]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d001      	beq.n	8012d7c <remove_chain+0x4a>
 8012d78:	7ffb      	ldrb	r3, [r7, #31]
 8012d7a:	e03b      	b.n	8012df4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d7c:	68b9      	ldr	r1, [r7, #8]
 8012d7e:	68f8      	ldr	r0, [r7, #12]
 8012d80:	f7ff fe43 	bl	8012a0a <get_fat>
 8012d84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d031      	beq.n	8012df0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	2b01      	cmp	r3, #1
 8012d90:	d101      	bne.n	8012d96 <remove_chain+0x64>
 8012d92:	2302      	movs	r3, #2
 8012d94:	e02e      	b.n	8012df4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d9c:	d101      	bne.n	8012da2 <remove_chain+0x70>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e028      	b.n	8012df4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012da2:	2200      	movs	r2, #0
 8012da4:	68b9      	ldr	r1, [r7, #8]
 8012da6:	69b8      	ldr	r0, [r7, #24]
 8012da8:	f7ff fed7 	bl	8012b5a <put_fat>
 8012dac:	4603      	mov	r3, r0
 8012dae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012db0:	7ffb      	ldrb	r3, [r7, #31]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d001      	beq.n	8012dba <remove_chain+0x88>
 8012db6:	7ffb      	ldrb	r3, [r7, #31]
 8012db8:	e01c      	b.n	8012df4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012dba:	69bb      	ldr	r3, [r7, #24]
 8012dbc:	691a      	ldr	r2, [r3, #16]
 8012dbe:	69bb      	ldr	r3, [r7, #24]
 8012dc0:	695b      	ldr	r3, [r3, #20]
 8012dc2:	3b02      	subs	r3, #2
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d20b      	bcs.n	8012de0 <remove_chain+0xae>
			fs->free_clst++;
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	691b      	ldr	r3, [r3, #16]
 8012dcc:	1c5a      	adds	r2, r3, #1
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	791b      	ldrb	r3, [r3, #4]
 8012dd6:	f043 0301 	orr.w	r3, r3, #1
 8012dda:	b2da      	uxtb	r2, r3
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	695b      	ldr	r3, [r3, #20]
 8012de8:	68ba      	ldr	r2, [r7, #8]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d3c6      	bcc.n	8012d7c <remove_chain+0x4a>
 8012dee:	e000      	b.n	8012df2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012df0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012df2:	2300      	movs	r3, #0
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3720      	adds	r7, #32
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d10d      	bne.n	8012e2e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	68db      	ldr	r3, [r3, #12]
 8012e16:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d004      	beq.n	8012e28 <create_chain+0x2c>
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	695b      	ldr	r3, [r3, #20]
 8012e22:	69ba      	ldr	r2, [r7, #24]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d31b      	bcc.n	8012e60 <create_chain+0x64>
 8012e28:	2301      	movs	r3, #1
 8012e2a:	61bb      	str	r3, [r7, #24]
 8012e2c:	e018      	b.n	8012e60 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012e2e:	6839      	ldr	r1, [r7, #0]
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7ff fdea 	bl	8012a0a <get_fat>
 8012e36:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	2b01      	cmp	r3, #1
 8012e3c:	d801      	bhi.n	8012e42 <create_chain+0x46>
 8012e3e:	2301      	movs	r3, #1
 8012e40:	e070      	b.n	8012f24 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e48:	d101      	bne.n	8012e4e <create_chain+0x52>
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	e06a      	b.n	8012f24 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	695b      	ldr	r3, [r3, #20]
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d201      	bcs.n	8012e5c <create_chain+0x60>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	e063      	b.n	8012f24 <create_chain+0x128>
		scl = clst;
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012e64:	69fb      	ldr	r3, [r7, #28]
 8012e66:	3301      	adds	r3, #1
 8012e68:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012e6a:	693b      	ldr	r3, [r7, #16]
 8012e6c:	695b      	ldr	r3, [r3, #20]
 8012e6e:	69fa      	ldr	r2, [r7, #28]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d307      	bcc.n	8012e84 <create_chain+0x88>
				ncl = 2;
 8012e74:	2302      	movs	r3, #2
 8012e76:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e78:	69fa      	ldr	r2, [r7, #28]
 8012e7a:	69bb      	ldr	r3, [r7, #24]
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d901      	bls.n	8012e84 <create_chain+0x88>
 8012e80:	2300      	movs	r3, #0
 8012e82:	e04f      	b.n	8012f24 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e84:	69f9      	ldr	r1, [r7, #28]
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7ff fdbf 	bl	8012a0a <get_fat>
 8012e8c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00e      	beq.n	8012eb2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d003      	beq.n	8012ea2 <create_chain+0xa6>
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ea0:	d101      	bne.n	8012ea6 <create_chain+0xaa>
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	e03e      	b.n	8012f24 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012ea6:	69fa      	ldr	r2, [r7, #28]
 8012ea8:	69bb      	ldr	r3, [r7, #24]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d1da      	bne.n	8012e64 <create_chain+0x68>
 8012eae:	2300      	movs	r3, #0
 8012eb0:	e038      	b.n	8012f24 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012eb2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb8:	69f9      	ldr	r1, [r7, #28]
 8012eba:	6938      	ldr	r0, [r7, #16]
 8012ebc:	f7ff fe4d 	bl	8012b5a <put_fat>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012ec4:	7dfb      	ldrb	r3, [r7, #23]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d109      	bne.n	8012ede <create_chain+0xe2>
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d006      	beq.n	8012ede <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012ed0:	69fa      	ldr	r2, [r7, #28]
 8012ed2:	6839      	ldr	r1, [r7, #0]
 8012ed4:	6938      	ldr	r0, [r7, #16]
 8012ed6:	f7ff fe40 	bl	8012b5a <put_fat>
 8012eda:	4603      	mov	r3, r0
 8012edc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012ede:	7dfb      	ldrb	r3, [r7, #23]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d116      	bne.n	8012f12 <create_chain+0x116>
		fs->last_clst = ncl;
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	69fa      	ldr	r2, [r7, #28]
 8012ee8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	691a      	ldr	r2, [r3, #16]
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	695b      	ldr	r3, [r3, #20]
 8012ef2:	3b02      	subs	r3, #2
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	d804      	bhi.n	8012f02 <create_chain+0x106>
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	691b      	ldr	r3, [r3, #16]
 8012efc:	1e5a      	subs	r2, r3, #1
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	791b      	ldrb	r3, [r3, #4]
 8012f06:	f043 0301 	orr.w	r3, r3, #1
 8012f0a:	b2da      	uxtb	r2, r3
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	711a      	strb	r2, [r3, #4]
 8012f10:	e007      	b.n	8012f22 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f12:	7dfb      	ldrb	r3, [r7, #23]
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	d102      	bne.n	8012f1e <create_chain+0x122>
 8012f18:	f04f 33ff 	mov.w	r3, #4294967295
 8012f1c:	e000      	b.n	8012f20 <create_chain+0x124>
 8012f1e:	2301      	movs	r3, #1
 8012f20:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012f22:	69fb      	ldr	r3, [r7, #28]
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3720      	adds	r7, #32
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}

08012f2c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b087      	sub	sp, #28
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f40:	3304      	adds	r3, #4
 8012f42:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	0a5b      	lsrs	r3, r3, #9
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	8952      	ldrh	r2, [r2, #10]
 8012f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	1d1a      	adds	r2, r3, #4
 8012f56:	613a      	str	r2, [r7, #16]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d101      	bne.n	8012f66 <clmt_clust+0x3a>
 8012f62:	2300      	movs	r3, #0
 8012f64:	e010      	b.n	8012f88 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012f66:	697a      	ldr	r2, [r7, #20]
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d307      	bcc.n	8012f7e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f6e:	697a      	ldr	r2, [r7, #20]
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	1ad3      	subs	r3, r2, r3
 8012f74:	617b      	str	r3, [r7, #20]
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	3304      	adds	r3, #4
 8012f7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f7c:	e7e9      	b.n	8012f52 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	4413      	add	r3, r2
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	371c      	adds	r7, #28
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b086      	sub	sp, #24
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012faa:	d204      	bcs.n	8012fb6 <dir_sdi+0x22>
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	f003 031f 	and.w	r3, r3, #31
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d001      	beq.n	8012fba <dir_sdi+0x26>
		return FR_INT_ERR;
 8012fb6:	2302      	movs	r3, #2
 8012fb8:	e063      	b.n	8013082 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	683a      	ldr	r2, [r7, #0]
 8012fbe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	689b      	ldr	r3, [r3, #8]
 8012fc4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d106      	bne.n	8012fda <dir_sdi+0x46>
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	2b02      	cmp	r3, #2
 8012fd2:	d902      	bls.n	8012fda <dir_sdi+0x46>
		clst = fs->dirbase;
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10c      	bne.n	8012ffa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	095b      	lsrs	r3, r3, #5
 8012fe4:	693a      	ldr	r2, [r7, #16]
 8012fe6:	8912      	ldrh	r2, [r2, #8]
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d301      	bcc.n	8012ff0 <dir_sdi+0x5c>
 8012fec:	2302      	movs	r3, #2
 8012fee:	e048      	b.n	8013082 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	61da      	str	r2, [r3, #28]
 8012ff8:	e029      	b.n	801304e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	895b      	ldrh	r3, [r3, #10]
 8012ffe:	025b      	lsls	r3, r3, #9
 8013000:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013002:	e019      	b.n	8013038 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6979      	ldr	r1, [r7, #20]
 8013008:	4618      	mov	r0, r3
 801300a:	f7ff fcfe 	bl	8012a0a <get_fat>
 801300e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013016:	d101      	bne.n	801301c <dir_sdi+0x88>
 8013018:	2301      	movs	r3, #1
 801301a:	e032      	b.n	8013082 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	2b01      	cmp	r3, #1
 8013020:	d904      	bls.n	801302c <dir_sdi+0x98>
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	695b      	ldr	r3, [r3, #20]
 8013026:	697a      	ldr	r2, [r7, #20]
 8013028:	429a      	cmp	r2, r3
 801302a:	d301      	bcc.n	8013030 <dir_sdi+0x9c>
 801302c:	2302      	movs	r3, #2
 801302e:	e028      	b.n	8013082 <dir_sdi+0xee>
			ofs -= csz;
 8013030:	683a      	ldr	r2, [r7, #0]
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	1ad3      	subs	r3, r2, r3
 8013036:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013038:	683a      	ldr	r2, [r7, #0]
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	429a      	cmp	r2, r3
 801303e:	d2e1      	bcs.n	8013004 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013040:	6979      	ldr	r1, [r7, #20]
 8013042:	6938      	ldr	r0, [r7, #16]
 8013044:	f7ff fcc2 	bl	80129cc <clust2sect>
 8013048:	4602      	mov	r2, r0
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	697a      	ldr	r2, [r7, #20]
 8013052:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	69db      	ldr	r3, [r3, #28]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d101      	bne.n	8013060 <dir_sdi+0xcc>
 801305c:	2302      	movs	r3, #2
 801305e:	e010      	b.n	8013082 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	69da      	ldr	r2, [r3, #28]
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	0a5b      	lsrs	r3, r3, #9
 8013068:	441a      	add	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801307a:	441a      	add	r2, r3
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013080:	2300      	movs	r3, #0
}
 8013082:	4618      	mov	r0, r3
 8013084:	3718      	adds	r7, #24
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801308a:	b580      	push	{r7, lr}
 801308c:	b086      	sub	sp, #24
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
 8013092:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	695b      	ldr	r3, [r3, #20]
 801309e:	3320      	adds	r3, #32
 80130a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	69db      	ldr	r3, [r3, #28]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d003      	beq.n	80130b2 <dir_next+0x28>
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80130b0:	d301      	bcc.n	80130b6 <dir_next+0x2c>
 80130b2:	2304      	movs	r3, #4
 80130b4:	e0aa      	b.n	801320c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f040 8098 	bne.w	80131f2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	69db      	ldr	r3, [r3, #28]
 80130c6:	1c5a      	adds	r2, r3, #1
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10b      	bne.n	80130ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	095b      	lsrs	r3, r3, #5
 80130d8:	68fa      	ldr	r2, [r7, #12]
 80130da:	8912      	ldrh	r2, [r2, #8]
 80130dc:	4293      	cmp	r3, r2
 80130de:	f0c0 8088 	bcc.w	80131f2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	61da      	str	r2, [r3, #28]
 80130e8:	2304      	movs	r3, #4
 80130ea:	e08f      	b.n	801320c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	0a5b      	lsrs	r3, r3, #9
 80130f0:	68fa      	ldr	r2, [r7, #12]
 80130f2:	8952      	ldrh	r2, [r2, #10]
 80130f4:	3a01      	subs	r2, #1
 80130f6:	4013      	ands	r3, r2
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d17a      	bne.n	80131f2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	699b      	ldr	r3, [r3, #24]
 8013102:	4619      	mov	r1, r3
 8013104:	4610      	mov	r0, r2
 8013106:	f7ff fc80 	bl	8012a0a <get_fat>
 801310a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	2b01      	cmp	r3, #1
 8013110:	d801      	bhi.n	8013116 <dir_next+0x8c>
 8013112:	2302      	movs	r3, #2
 8013114:	e07a      	b.n	801320c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801311c:	d101      	bne.n	8013122 <dir_next+0x98>
 801311e:	2301      	movs	r3, #1
 8013120:	e074      	b.n	801320c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	695b      	ldr	r3, [r3, #20]
 8013126:	697a      	ldr	r2, [r7, #20]
 8013128:	429a      	cmp	r2, r3
 801312a:	d358      	bcc.n	80131de <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d104      	bne.n	801313c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	61da      	str	r2, [r3, #28]
 8013138:	2304      	movs	r3, #4
 801313a:	e067      	b.n	801320c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	699b      	ldr	r3, [r3, #24]
 8013142:	4619      	mov	r1, r3
 8013144:	4610      	mov	r0, r2
 8013146:	f7ff fe59 	bl	8012dfc <create_chain>
 801314a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d101      	bne.n	8013156 <dir_next+0xcc>
 8013152:	2307      	movs	r3, #7
 8013154:	e05a      	b.n	801320c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	2b01      	cmp	r3, #1
 801315a:	d101      	bne.n	8013160 <dir_next+0xd6>
 801315c:	2302      	movs	r3, #2
 801315e:	e055      	b.n	801320c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013166:	d101      	bne.n	801316c <dir_next+0xe2>
 8013168:	2301      	movs	r3, #1
 801316a:	e04f      	b.n	801320c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	f7ff fb4d 	bl	801280c <sync_window>
 8013172:	4603      	mov	r3, r0
 8013174:	2b00      	cmp	r3, #0
 8013176:	d001      	beq.n	801317c <dir_next+0xf2>
 8013178:	2301      	movs	r3, #1
 801317a:	e047      	b.n	801320c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	3330      	adds	r3, #48	; 0x30
 8013180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013184:	2100      	movs	r1, #0
 8013186:	4618      	mov	r0, r3
 8013188:	f7ff f977 	bl	801247a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801318c:	2300      	movs	r3, #0
 801318e:	613b      	str	r3, [r7, #16]
 8013190:	6979      	ldr	r1, [r7, #20]
 8013192:	68f8      	ldr	r0, [r7, #12]
 8013194:	f7ff fc1a 	bl	80129cc <clust2sect>
 8013198:	4602      	mov	r2, r0
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	62da      	str	r2, [r3, #44]	; 0x2c
 801319e:	e012      	b.n	80131c6 <dir_next+0x13c>
						fs->wflag = 1;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2201      	movs	r2, #1
 80131a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	f7ff fb30 	bl	801280c <sync_window>
 80131ac:	4603      	mov	r3, r0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d001      	beq.n	80131b6 <dir_next+0x12c>
 80131b2:	2301      	movs	r3, #1
 80131b4:	e02a      	b.n	801320c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	3301      	adds	r3, #1
 80131ba:	613b      	str	r3, [r7, #16]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c0:	1c5a      	adds	r2, r3, #1
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	895b      	ldrh	r3, [r3, #10]
 80131ca:	461a      	mov	r2, r3
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d3e6      	bcc.n	80131a0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	1ad2      	subs	r2, r2, r3
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	697a      	ldr	r2, [r7, #20]
 80131e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80131e4:	6979      	ldr	r1, [r7, #20]
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f7ff fbf0 	bl	80129cc <clust2sect>
 80131ec:	4602      	mov	r2, r0
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	68ba      	ldr	r2, [r7, #8]
 80131f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013204:	441a      	add	r2, r3
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801320a:	2300      	movs	r3, #0
}
 801320c:	4618      	mov	r0, r3
 801320e:	3718      	adds	r7, #24
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b086      	sub	sp, #24
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013224:	2100      	movs	r1, #0
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f7ff feb4 	bl	8012f94 <dir_sdi>
 801322c:	4603      	mov	r3, r0
 801322e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013230:	7dfb      	ldrb	r3, [r7, #23]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d12b      	bne.n	801328e <dir_alloc+0x7a>
		n = 0;
 8013236:	2300      	movs	r3, #0
 8013238:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	69db      	ldr	r3, [r3, #28]
 801323e:	4619      	mov	r1, r3
 8013240:	68f8      	ldr	r0, [r7, #12]
 8013242:	f7ff fb27 	bl	8012894 <move_window>
 8013246:	4603      	mov	r3, r0
 8013248:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801324a:	7dfb      	ldrb	r3, [r7, #23]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d11d      	bne.n	801328c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6a1b      	ldr	r3, [r3, #32]
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	2be5      	cmp	r3, #229	; 0xe5
 8013258:	d004      	beq.n	8013264 <dir_alloc+0x50>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6a1b      	ldr	r3, [r3, #32]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d107      	bne.n	8013274 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	3301      	adds	r3, #1
 8013268:	613b      	str	r3, [r7, #16]
 801326a:	693a      	ldr	r2, [r7, #16]
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	429a      	cmp	r2, r3
 8013270:	d102      	bne.n	8013278 <dir_alloc+0x64>
 8013272:	e00c      	b.n	801328e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013274:	2300      	movs	r3, #0
 8013276:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013278:	2101      	movs	r1, #1
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f7ff ff05 	bl	801308a <dir_next>
 8013280:	4603      	mov	r3, r0
 8013282:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013284:	7dfb      	ldrb	r3, [r7, #23]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d0d7      	beq.n	801323a <dir_alloc+0x26>
 801328a:	e000      	b.n	801328e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801328c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801328e:	7dfb      	ldrb	r3, [r7, #23]
 8013290:	2b04      	cmp	r3, #4
 8013292:	d101      	bne.n	8013298 <dir_alloc+0x84>
 8013294:	2307      	movs	r3, #7
 8013296:	75fb      	strb	r3, [r7, #23]
	return res;
 8013298:	7dfb      	ldrb	r3, [r7, #23]
}
 801329a:	4618      	mov	r0, r3
 801329c:	3718      	adds	r7, #24
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b084      	sub	sp, #16
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
 80132aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	331a      	adds	r3, #26
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7ff f83f 	bl	8012334 <ld_word>
 80132b6:	4603      	mov	r3, r0
 80132b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	2b03      	cmp	r3, #3
 80132c0:	d109      	bne.n	80132d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	3314      	adds	r3, #20
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ff f834 	bl	8012334 <ld_word>
 80132cc:	4603      	mov	r3, r0
 80132ce:	041b      	lsls	r3, r3, #16
 80132d0:	68fa      	ldr	r2, [r7, #12]
 80132d2:	4313      	orrs	r3, r2
 80132d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80132d6:	68fb      	ldr	r3, [r7, #12]
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3710      	adds	r7, #16
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	60f8      	str	r0, [r7, #12]
 80132e8:	60b9      	str	r1, [r7, #8]
 80132ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	331a      	adds	r3, #26
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	b292      	uxth	r2, r2
 80132f4:	4611      	mov	r1, r2
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7ff f857 	bl	80123aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	2b03      	cmp	r3, #3
 8013302:	d109      	bne.n	8013318 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	f103 0214 	add.w	r2, r3, #20
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	0c1b      	lsrs	r3, r3, #16
 801330e:	b29b      	uxth	r3, r3
 8013310:	4619      	mov	r1, r3
 8013312:	4610      	mov	r0, r2
 8013314:	f7ff f849 	bl	80123aa <st_word>
	}
}
 8013318:	bf00      	nop
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801332e:	2100      	movs	r1, #0
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f7ff fe2f 	bl	8012f94 <dir_sdi>
 8013336:	4603      	mov	r3, r0
 8013338:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801333a:	7dfb      	ldrb	r3, [r7, #23]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d001      	beq.n	8013344 <dir_find+0x24>
 8013340:	7dfb      	ldrb	r3, [r7, #23]
 8013342:	e03e      	b.n	80133c2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	69db      	ldr	r3, [r3, #28]
 8013348:	4619      	mov	r1, r3
 801334a:	6938      	ldr	r0, [r7, #16]
 801334c:	f7ff faa2 	bl	8012894 <move_window>
 8013350:	4603      	mov	r3, r0
 8013352:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013354:	7dfb      	ldrb	r3, [r7, #23]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d12f      	bne.n	80133ba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6a1b      	ldr	r3, [r3, #32]
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013362:	7bfb      	ldrb	r3, [r7, #15]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d102      	bne.n	801336e <dir_find+0x4e>
 8013368:	2304      	movs	r3, #4
 801336a:	75fb      	strb	r3, [r7, #23]
 801336c:	e028      	b.n	80133c0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6a1b      	ldr	r3, [r3, #32]
 8013372:	330b      	adds	r3, #11
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801337a:	b2da      	uxtb	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6a1b      	ldr	r3, [r3, #32]
 8013384:	330b      	adds	r3, #11
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f003 0308 	and.w	r3, r3, #8
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10a      	bne.n	80133a6 <dir_find+0x86>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6a18      	ldr	r0, [r3, #32]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	3324      	adds	r3, #36	; 0x24
 8013398:	220b      	movs	r2, #11
 801339a:	4619      	mov	r1, r3
 801339c:	f7ff f888 	bl	80124b0 <mem_cmp>
 80133a0:	4603      	mov	r3, r0
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d00b      	beq.n	80133be <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80133a6:	2100      	movs	r1, #0
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f7ff fe6e 	bl	801308a <dir_next>
 80133ae:	4603      	mov	r3, r0
 80133b0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80133b2:	7dfb      	ldrb	r3, [r7, #23]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d0c5      	beq.n	8013344 <dir_find+0x24>
 80133b8:	e002      	b.n	80133c0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80133ba:	bf00      	nop
 80133bc:	e000      	b.n	80133c0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80133be:	bf00      	nop

	return res;
 80133c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3718      	adds	r7, #24
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}

080133ca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80133ca:	b580      	push	{r7, lr}
 80133cc:	b084      	sub	sp, #16
 80133ce:	af00      	add	r7, sp, #0
 80133d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80133d8:	2101      	movs	r1, #1
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f7ff ff1a 	bl	8013214 <dir_alloc>
 80133e0:	4603      	mov	r3, r0
 80133e2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80133e4:	7bfb      	ldrb	r3, [r7, #15]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d11c      	bne.n	8013424 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	69db      	ldr	r3, [r3, #28]
 80133ee:	4619      	mov	r1, r3
 80133f0:	68b8      	ldr	r0, [r7, #8]
 80133f2:	f7ff fa4f 	bl	8012894 <move_window>
 80133f6:	4603      	mov	r3, r0
 80133f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80133fa:	7bfb      	ldrb	r3, [r7, #15]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d111      	bne.n	8013424 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6a1b      	ldr	r3, [r3, #32]
 8013404:	2220      	movs	r2, #32
 8013406:	2100      	movs	r1, #0
 8013408:	4618      	mov	r0, r3
 801340a:	f7ff f836 	bl	801247a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6a18      	ldr	r0, [r3, #32]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	3324      	adds	r3, #36	; 0x24
 8013416:	220b      	movs	r2, #11
 8013418:	4619      	mov	r1, r3
 801341a:	f7ff f80d 	bl	8012438 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	2201      	movs	r2, #1
 8013422:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013424:	7bfb      	ldrb	r3, [r7, #15]
}
 8013426:	4618      	mov	r0, r3
 8013428:	3710      	adds	r7, #16
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
	...

08013430 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b088      	sub	sp, #32
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	60fb      	str	r3, [r7, #12]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	3324      	adds	r3, #36	; 0x24
 8013444:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013446:	220b      	movs	r2, #11
 8013448:	2120      	movs	r1, #32
 801344a:	68b8      	ldr	r0, [r7, #8]
 801344c:	f7ff f815 	bl	801247a <mem_set>
	si = i = 0; ni = 8;
 8013450:	2300      	movs	r3, #0
 8013452:	613b      	str	r3, [r7, #16]
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	61fb      	str	r3, [r7, #28]
 8013458:	2308      	movs	r3, #8
 801345a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801345c:	69fb      	ldr	r3, [r7, #28]
 801345e:	1c5a      	adds	r2, r3, #1
 8013460:	61fa      	str	r2, [r7, #28]
 8013462:	68fa      	ldr	r2, [r7, #12]
 8013464:	4413      	add	r3, r2
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801346a:	7efb      	ldrb	r3, [r7, #27]
 801346c:	2b20      	cmp	r3, #32
 801346e:	d94e      	bls.n	801350e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013470:	7efb      	ldrb	r3, [r7, #27]
 8013472:	2b2f      	cmp	r3, #47	; 0x2f
 8013474:	d006      	beq.n	8013484 <create_name+0x54>
 8013476:	7efb      	ldrb	r3, [r7, #27]
 8013478:	2b5c      	cmp	r3, #92	; 0x5c
 801347a:	d110      	bne.n	801349e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801347c:	e002      	b.n	8013484 <create_name+0x54>
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	3301      	adds	r3, #1
 8013482:	61fb      	str	r3, [r7, #28]
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	69fb      	ldr	r3, [r7, #28]
 8013488:	4413      	add	r3, r2
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	2b2f      	cmp	r3, #47	; 0x2f
 801348e:	d0f6      	beq.n	801347e <create_name+0x4e>
 8013490:	68fa      	ldr	r2, [r7, #12]
 8013492:	69fb      	ldr	r3, [r7, #28]
 8013494:	4413      	add	r3, r2
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	2b5c      	cmp	r3, #92	; 0x5c
 801349a:	d0f0      	beq.n	801347e <create_name+0x4e>
			break;
 801349c:	e038      	b.n	8013510 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801349e:	7efb      	ldrb	r3, [r7, #27]
 80134a0:	2b2e      	cmp	r3, #46	; 0x2e
 80134a2:	d003      	beq.n	80134ac <create_name+0x7c>
 80134a4:	693a      	ldr	r2, [r7, #16]
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d30c      	bcc.n	80134c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	2b0b      	cmp	r3, #11
 80134b0:	d002      	beq.n	80134b8 <create_name+0x88>
 80134b2:	7efb      	ldrb	r3, [r7, #27]
 80134b4:	2b2e      	cmp	r3, #46	; 0x2e
 80134b6:	d001      	beq.n	80134bc <create_name+0x8c>
 80134b8:	2306      	movs	r3, #6
 80134ba:	e044      	b.n	8013546 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80134bc:	2308      	movs	r3, #8
 80134be:	613b      	str	r3, [r7, #16]
 80134c0:	230b      	movs	r3, #11
 80134c2:	617b      	str	r3, [r7, #20]
			continue;
 80134c4:	e022      	b.n	801350c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80134c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	da04      	bge.n	80134d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80134ce:	7efb      	ldrb	r3, [r7, #27]
 80134d0:	3b80      	subs	r3, #128	; 0x80
 80134d2:	4a1f      	ldr	r2, [pc, #124]	; (8013550 <create_name+0x120>)
 80134d4:	5cd3      	ldrb	r3, [r2, r3]
 80134d6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80134d8:	7efb      	ldrb	r3, [r7, #27]
 80134da:	4619      	mov	r1, r3
 80134dc:	481d      	ldr	r0, [pc, #116]	; (8013554 <create_name+0x124>)
 80134de:	f7ff f80e 	bl	80124fe <chk_chr>
 80134e2:	4603      	mov	r3, r0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d001      	beq.n	80134ec <create_name+0xbc>
 80134e8:	2306      	movs	r3, #6
 80134ea:	e02c      	b.n	8013546 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80134ec:	7efb      	ldrb	r3, [r7, #27]
 80134ee:	2b60      	cmp	r3, #96	; 0x60
 80134f0:	d905      	bls.n	80134fe <create_name+0xce>
 80134f2:	7efb      	ldrb	r3, [r7, #27]
 80134f4:	2b7a      	cmp	r3, #122	; 0x7a
 80134f6:	d802      	bhi.n	80134fe <create_name+0xce>
 80134f8:	7efb      	ldrb	r3, [r7, #27]
 80134fa:	3b20      	subs	r3, #32
 80134fc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	1c5a      	adds	r2, r3, #1
 8013502:	613a      	str	r2, [r7, #16]
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	4413      	add	r3, r2
 8013508:	7efa      	ldrb	r2, [r7, #27]
 801350a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801350c:	e7a6      	b.n	801345c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801350e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013510:	68fa      	ldr	r2, [r7, #12]
 8013512:	69fb      	ldr	r3, [r7, #28]
 8013514:	441a      	add	r2, r3
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d101      	bne.n	8013524 <create_name+0xf4>
 8013520:	2306      	movs	r3, #6
 8013522:	e010      	b.n	8013546 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	2be5      	cmp	r3, #229	; 0xe5
 801352a:	d102      	bne.n	8013532 <create_name+0x102>
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	2205      	movs	r2, #5
 8013530:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013532:	7efb      	ldrb	r3, [r7, #27]
 8013534:	2b20      	cmp	r3, #32
 8013536:	d801      	bhi.n	801353c <create_name+0x10c>
 8013538:	2204      	movs	r2, #4
 801353a:	e000      	b.n	801353e <create_name+0x10e>
 801353c:	2200      	movs	r2, #0
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	330b      	adds	r3, #11
 8013542:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013544:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013546:	4618      	mov	r0, r3
 8013548:	3720      	adds	r7, #32
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	08023e90 	.word	0x08023e90
 8013554:	080222d0 	.word	0x080222d0

08013558 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801356c:	e002      	b.n	8013574 <follow_path+0x1c>
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	3301      	adds	r3, #1
 8013572:	603b      	str	r3, [r7, #0]
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	2b2f      	cmp	r3, #47	; 0x2f
 801357a:	d0f8      	beq.n	801356e <follow_path+0x16>
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	781b      	ldrb	r3, [r3, #0]
 8013580:	2b5c      	cmp	r3, #92	; 0x5c
 8013582:	d0f4      	beq.n	801356e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	2200      	movs	r2, #0
 8013588:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	2b1f      	cmp	r3, #31
 8013590:	d80a      	bhi.n	80135a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2280      	movs	r2, #128	; 0x80
 8013596:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801359a:	2100      	movs	r1, #0
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7ff fcf9 	bl	8012f94 <dir_sdi>
 80135a2:	4603      	mov	r3, r0
 80135a4:	75fb      	strb	r3, [r7, #23]
 80135a6:	e043      	b.n	8013630 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135a8:	463b      	mov	r3, r7
 80135aa:	4619      	mov	r1, r3
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7ff ff3f 	bl	8013430 <create_name>
 80135b2:	4603      	mov	r3, r0
 80135b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80135b6:	7dfb      	ldrb	r3, [r7, #23]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d134      	bne.n	8013626 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f7ff feaf 	bl	8013320 <dir_find>
 80135c2:	4603      	mov	r3, r0
 80135c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80135cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80135ce:	7dfb      	ldrb	r3, [r7, #23]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d00a      	beq.n	80135ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80135d4:	7dfb      	ldrb	r3, [r7, #23]
 80135d6:	2b04      	cmp	r3, #4
 80135d8:	d127      	bne.n	801362a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80135da:	7afb      	ldrb	r3, [r7, #11]
 80135dc:	f003 0304 	and.w	r3, r3, #4
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d122      	bne.n	801362a <follow_path+0xd2>
 80135e4:	2305      	movs	r3, #5
 80135e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80135e8:	e01f      	b.n	801362a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135ea:	7afb      	ldrb	r3, [r7, #11]
 80135ec:	f003 0304 	and.w	r3, r3, #4
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d11c      	bne.n	801362e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	799b      	ldrb	r3, [r3, #6]
 80135f8:	f003 0310 	and.w	r3, r3, #16
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d102      	bne.n	8013606 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013600:	2305      	movs	r3, #5
 8013602:	75fb      	strb	r3, [r7, #23]
 8013604:	e014      	b.n	8013630 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	695b      	ldr	r3, [r3, #20]
 8013610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013614:	4413      	add	r3, r2
 8013616:	4619      	mov	r1, r3
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7ff fe42 	bl	80132a2 <ld_clust>
 801361e:	4602      	mov	r2, r0
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013624:	e7c0      	b.n	80135a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8013626:	bf00      	nop
 8013628:	e002      	b.n	8013630 <follow_path+0xd8>
				break;
 801362a:	bf00      	nop
 801362c:	e000      	b.n	8013630 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801362e:	bf00      	nop
			}
		}
	}

	return res;
 8013630:	7dfb      	ldrb	r3, [r7, #23]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3718      	adds	r7, #24
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801363a:	b480      	push	{r7}
 801363c:	b087      	sub	sp, #28
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013642:	f04f 33ff 	mov.w	r3, #4294967295
 8013646:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d031      	beq.n	80136b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	617b      	str	r3, [r7, #20]
 8013656:	e002      	b.n	801365e <get_ldnumber+0x24>
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	3301      	adds	r3, #1
 801365c:	617b      	str	r3, [r7, #20]
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	2b20      	cmp	r3, #32
 8013664:	d903      	bls.n	801366e <get_ldnumber+0x34>
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	2b3a      	cmp	r3, #58	; 0x3a
 801366c:	d1f4      	bne.n	8013658 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	2b3a      	cmp	r3, #58	; 0x3a
 8013674:	d11c      	bne.n	80136b0 <get_ldnumber+0x76>
			tp = *path;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	1c5a      	adds	r2, r3, #1
 8013680:	60fa      	str	r2, [r7, #12]
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	3b30      	subs	r3, #48	; 0x30
 8013686:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	2b09      	cmp	r3, #9
 801368c:	d80e      	bhi.n	80136ac <get_ldnumber+0x72>
 801368e:	68fa      	ldr	r2, [r7, #12]
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	429a      	cmp	r2, r3
 8013694:	d10a      	bne.n	80136ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d107      	bne.n	80136ac <get_ldnumber+0x72>
					vol = (int)i;
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	3301      	adds	r3, #1
 80136a4:	617b      	str	r3, [r7, #20]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	697a      	ldr	r2, [r7, #20]
 80136aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	e002      	b.n	80136b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80136b0:	2300      	movs	r3, #0
 80136b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80136b4:	693b      	ldr	r3, [r7, #16]
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	371c      	adds	r7, #28
 80136ba:	46bd      	mov	sp, r7
 80136bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c0:	4770      	bx	lr
	...

080136c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2200      	movs	r2, #0
 80136d2:	70da      	strb	r2, [r3, #3]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f04f 32ff 	mov.w	r2, #4294967295
 80136da:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80136dc:	6839      	ldr	r1, [r7, #0]
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f7ff f8d8 	bl	8012894 <move_window>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <check_fs+0x2a>
 80136ea:	2304      	movs	r3, #4
 80136ec:	e038      	b.n	8013760 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	3330      	adds	r3, #48	; 0x30
 80136f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fe fe1c 	bl	8012334 <ld_word>
 80136fc:	4603      	mov	r3, r0
 80136fe:	461a      	mov	r2, r3
 8013700:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013704:	429a      	cmp	r2, r3
 8013706:	d001      	beq.n	801370c <check_fs+0x48>
 8013708:	2303      	movs	r3, #3
 801370a:	e029      	b.n	8013760 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013712:	2be9      	cmp	r3, #233	; 0xe9
 8013714:	d009      	beq.n	801372a <check_fs+0x66>
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801371c:	2beb      	cmp	r3, #235	; 0xeb
 801371e:	d11e      	bne.n	801375e <check_fs+0x9a>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013726:	2b90      	cmp	r3, #144	; 0x90
 8013728:	d119      	bne.n	801375e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	3330      	adds	r3, #48	; 0x30
 801372e:	3336      	adds	r3, #54	; 0x36
 8013730:	4618      	mov	r0, r3
 8013732:	f7fe fe17 	bl	8012364 <ld_dword>
 8013736:	4603      	mov	r3, r0
 8013738:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801373c:	4a0a      	ldr	r2, [pc, #40]	; (8013768 <check_fs+0xa4>)
 801373e:	4293      	cmp	r3, r2
 8013740:	d101      	bne.n	8013746 <check_fs+0x82>
 8013742:	2300      	movs	r3, #0
 8013744:	e00c      	b.n	8013760 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	3330      	adds	r3, #48	; 0x30
 801374a:	3352      	adds	r3, #82	; 0x52
 801374c:	4618      	mov	r0, r3
 801374e:	f7fe fe09 	bl	8012364 <ld_dword>
 8013752:	4603      	mov	r3, r0
 8013754:	4a05      	ldr	r2, [pc, #20]	; (801376c <check_fs+0xa8>)
 8013756:	4293      	cmp	r3, r2
 8013758:	d101      	bne.n	801375e <check_fs+0x9a>
 801375a:	2300      	movs	r3, #0
 801375c:	e000      	b.n	8013760 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801375e:	2302      	movs	r3, #2
}
 8013760:	4618      	mov	r0, r3
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}
 8013768:	00544146 	.word	0x00544146
 801376c:	33544146 	.word	0x33544146

08013770 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b096      	sub	sp, #88	; 0x58
 8013774:	af00      	add	r7, sp, #0
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	4613      	mov	r3, r2
 801377c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	2200      	movs	r2, #0
 8013782:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f7ff ff58 	bl	801363a <get_ldnumber>
 801378a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801378c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801378e:	2b00      	cmp	r3, #0
 8013790:	da01      	bge.n	8013796 <find_volume+0x26>
 8013792:	230b      	movs	r3, #11
 8013794:	e22e      	b.n	8013bf4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013796:	4aa8      	ldr	r2, [pc, #672]	; (8013a38 <find_volume+0x2c8>)
 8013798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801379a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801379e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80137a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d101      	bne.n	80137aa <find_volume+0x3a>
 80137a6:	230c      	movs	r3, #12
 80137a8:	e224      	b.n	8013bf4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80137b0:	79fb      	ldrb	r3, [r7, #7]
 80137b2:	f023 0301 	bic.w	r3, r3, #1
 80137b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80137b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d01a      	beq.n	80137f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80137c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c2:	785b      	ldrb	r3, [r3, #1]
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fe fd17 	bl	80121f8 <disk_status>
 80137ca:	4603      	mov	r3, r0
 80137cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80137d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137d4:	f003 0301 	and.w	r3, r3, #1
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10c      	bne.n	80137f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80137dc:	79fb      	ldrb	r3, [r7, #7]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d007      	beq.n	80137f2 <find_volume+0x82>
 80137e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137e6:	f003 0304 	and.w	r3, r3, #4
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d001      	beq.n	80137f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80137ee:	230a      	movs	r3, #10
 80137f0:	e200      	b.n	8013bf4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80137f2:	2300      	movs	r3, #0
 80137f4:	e1fe      	b.n	8013bf4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80137f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f8:	2200      	movs	r2, #0
 80137fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80137fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137fe:	b2da      	uxtb	r2, r3
 8013800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013802:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013806:	785b      	ldrb	r3, [r3, #1]
 8013808:	4618      	mov	r0, r3
 801380a:	f7fe fd0f 	bl	801222c <disk_initialize>
 801380e:	4603      	mov	r3, r0
 8013810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013818:	f003 0301 	and.w	r3, r3, #1
 801381c:	2b00      	cmp	r3, #0
 801381e:	d001      	beq.n	8013824 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013820:	2303      	movs	r3, #3
 8013822:	e1e7      	b.n	8013bf4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013824:	79fb      	ldrb	r3, [r7, #7]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d007      	beq.n	801383a <find_volume+0xca>
 801382a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801382e:	f003 0304 	and.w	r3, r3, #4
 8013832:	2b00      	cmp	r3, #0
 8013834:	d001      	beq.n	801383a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013836:	230a      	movs	r3, #10
 8013838:	e1dc      	b.n	8013bf4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801383a:	2300      	movs	r3, #0
 801383c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801383e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013842:	f7ff ff3f 	bl	80136c4 <check_fs>
 8013846:	4603      	mov	r3, r0
 8013848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801384c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013850:	2b02      	cmp	r3, #2
 8013852:	d14b      	bne.n	80138ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013854:	2300      	movs	r3, #0
 8013856:	643b      	str	r3, [r7, #64]	; 0x40
 8013858:	e01f      	b.n	801389a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013862:	011b      	lsls	r3, r3, #4
 8013864:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013868:	4413      	add	r3, r2
 801386a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386e:	3304      	adds	r3, #4
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d006      	beq.n	8013884 <find_volume+0x114>
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	3308      	adds	r3, #8
 801387a:	4618      	mov	r0, r3
 801387c:	f7fe fd72 	bl	8012364 <ld_dword>
 8013880:	4602      	mov	r2, r0
 8013882:	e000      	b.n	8013886 <find_volume+0x116>
 8013884:	2200      	movs	r2, #0
 8013886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013888:	009b      	lsls	r3, r3, #2
 801388a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801388e:	440b      	add	r3, r1
 8013890:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013896:	3301      	adds	r3, #1
 8013898:	643b      	str	r3, [r7, #64]	; 0x40
 801389a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801389c:	2b03      	cmp	r3, #3
 801389e:	d9dc      	bls.n	801385a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80138a0:	2300      	movs	r3, #0
 80138a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80138a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d002      	beq.n	80138b0 <find_volume+0x140>
 80138aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138ac:	3b01      	subs	r3, #1
 80138ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80138b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80138b8:	4413      	add	r3, r2
 80138ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80138be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80138c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d005      	beq.n	80138d2 <find_volume+0x162>
 80138c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80138ca:	f7ff fefb 	bl	80136c4 <check_fs>
 80138ce:	4603      	mov	r3, r0
 80138d0:	e000      	b.n	80138d4 <find_volume+0x164>
 80138d2:	2303      	movs	r3, #3
 80138d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80138d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d905      	bls.n	80138ec <find_volume+0x17c>
 80138e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138e2:	3301      	adds	r3, #1
 80138e4:	643b      	str	r3, [r7, #64]	; 0x40
 80138e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138e8:	2b03      	cmp	r3, #3
 80138ea:	d9e1      	bls.n	80138b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80138ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138f0:	2b04      	cmp	r3, #4
 80138f2:	d101      	bne.n	80138f8 <find_volume+0x188>
 80138f4:	2301      	movs	r3, #1
 80138f6:	e17d      	b.n	8013bf4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80138f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d901      	bls.n	8013904 <find_volume+0x194>
 8013900:	230d      	movs	r3, #13
 8013902:	e177      	b.n	8013bf4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013906:	3330      	adds	r3, #48	; 0x30
 8013908:	330b      	adds	r3, #11
 801390a:	4618      	mov	r0, r3
 801390c:	f7fe fd12 	bl	8012334 <ld_word>
 8013910:	4603      	mov	r3, r0
 8013912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013916:	d001      	beq.n	801391c <find_volume+0x1ac>
 8013918:	230d      	movs	r3, #13
 801391a:	e16b      	b.n	8013bf4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391e:	3330      	adds	r3, #48	; 0x30
 8013920:	3316      	adds	r3, #22
 8013922:	4618      	mov	r0, r3
 8013924:	f7fe fd06 	bl	8012334 <ld_word>
 8013928:	4603      	mov	r3, r0
 801392a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801392c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801392e:	2b00      	cmp	r3, #0
 8013930:	d106      	bne.n	8013940 <find_volume+0x1d0>
 8013932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013934:	3330      	adds	r3, #48	; 0x30
 8013936:	3324      	adds	r3, #36	; 0x24
 8013938:	4618      	mov	r0, r3
 801393a:	f7fe fd13 	bl	8012364 <ld_dword>
 801393e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013944:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013948:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013952:	789b      	ldrb	r3, [r3, #2]
 8013954:	2b01      	cmp	r3, #1
 8013956:	d005      	beq.n	8013964 <find_volume+0x1f4>
 8013958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395a:	789b      	ldrb	r3, [r3, #2]
 801395c:	2b02      	cmp	r3, #2
 801395e:	d001      	beq.n	8013964 <find_volume+0x1f4>
 8013960:	230d      	movs	r3, #13
 8013962:	e147      	b.n	8013bf4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013966:	789b      	ldrb	r3, [r3, #2]
 8013968:	461a      	mov	r2, r3
 801396a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801396c:	fb02 f303 	mul.w	r3, r2, r3
 8013970:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013978:	b29a      	uxth	r2, r3
 801397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013980:	895b      	ldrh	r3, [r3, #10]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d008      	beq.n	8013998 <find_volume+0x228>
 8013986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013988:	895b      	ldrh	r3, [r3, #10]
 801398a:	461a      	mov	r2, r3
 801398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398e:	895b      	ldrh	r3, [r3, #10]
 8013990:	3b01      	subs	r3, #1
 8013992:	4013      	ands	r3, r2
 8013994:	2b00      	cmp	r3, #0
 8013996:	d001      	beq.n	801399c <find_volume+0x22c>
 8013998:	230d      	movs	r3, #13
 801399a:	e12b      	b.n	8013bf4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801399e:	3330      	adds	r3, #48	; 0x30
 80139a0:	3311      	adds	r3, #17
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fe fcc6 	bl	8012334 <ld_word>
 80139a8:	4603      	mov	r3, r0
 80139aa:	461a      	mov	r2, r3
 80139ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80139b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b2:	891b      	ldrh	r3, [r3, #8]
 80139b4:	f003 030f 	and.w	r3, r3, #15
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d001      	beq.n	80139c2 <find_volume+0x252>
 80139be:	230d      	movs	r3, #13
 80139c0:	e118      	b.n	8013bf4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80139c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c4:	3330      	adds	r3, #48	; 0x30
 80139c6:	3313      	adds	r3, #19
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fe fcb3 	bl	8012334 <ld_word>
 80139ce:	4603      	mov	r3, r0
 80139d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80139d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d106      	bne.n	80139e6 <find_volume+0x276>
 80139d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139da:	3330      	adds	r3, #48	; 0x30
 80139dc:	3320      	adds	r3, #32
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fe fcc0 	bl	8012364 <ld_dword>
 80139e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80139e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e8:	3330      	adds	r3, #48	; 0x30
 80139ea:	330e      	adds	r3, #14
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7fe fca1 	bl	8012334 <ld_word>
 80139f2:	4603      	mov	r3, r0
 80139f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80139f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <find_volume+0x290>
 80139fc:	230d      	movs	r3, #13
 80139fe:	e0f9      	b.n	8013bf4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a04:	4413      	add	r3, r2
 8013a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a08:	8912      	ldrh	r2, [r2, #8]
 8013a0a:	0912      	lsrs	r2, r2, #4
 8013a0c:	b292      	uxth	r2, r2
 8013a0e:	4413      	add	r3, r2
 8013a10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d201      	bcs.n	8013a1e <find_volume+0x2ae>
 8013a1a:	230d      	movs	r3, #13
 8013a1c:	e0ea      	b.n	8013bf4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a26:	8952      	ldrh	r2, [r2, #10]
 8013a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a2c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d103      	bne.n	8013a3c <find_volume+0x2cc>
 8013a34:	230d      	movs	r3, #13
 8013a36:	e0dd      	b.n	8013bf4 <find_volume+0x484>
 8013a38:	20000a18 	.word	0x20000a18
		fmt = FS_FAT32;
 8013a3c:	2303      	movs	r3, #3
 8013a3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d802      	bhi.n	8013a52 <find_volume+0x2e2>
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a54:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	d802      	bhi.n	8013a62 <find_volume+0x2f2>
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a64:	1c9a      	adds	r2, r3, #2
 8013a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a68:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a6e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a74:	441a      	add	r2, r3
 8013a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a78:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013a7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7e:	441a      	add	r2, r3
 8013a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a82:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a88:	2b03      	cmp	r3, #3
 8013a8a:	d11e      	bne.n	8013aca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8e:	3330      	adds	r3, #48	; 0x30
 8013a90:	332a      	adds	r3, #42	; 0x2a
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7fe fc4e 	bl	8012334 <ld_word>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d001      	beq.n	8013aa2 <find_volume+0x332>
 8013a9e:	230d      	movs	r3, #13
 8013aa0:	e0a8      	b.n	8013bf4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa4:	891b      	ldrh	r3, [r3, #8]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d001      	beq.n	8013aae <find_volume+0x33e>
 8013aaa:	230d      	movs	r3, #13
 8013aac:	e0a2      	b.n	8013bf4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab0:	3330      	adds	r3, #48	; 0x30
 8013ab2:	332c      	adds	r3, #44	; 0x2c
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7fe fc55 	bl	8012364 <ld_dword>
 8013aba:	4602      	mov	r2, r0
 8013abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac2:	695b      	ldr	r3, [r3, #20]
 8013ac4:	009b      	lsls	r3, r3, #2
 8013ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8013ac8:	e01f      	b.n	8013b0a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013acc:	891b      	ldrh	r3, [r3, #8]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d101      	bne.n	8013ad6 <find_volume+0x366>
 8013ad2:	230d      	movs	r3, #13
 8013ad4:	e08e      	b.n	8013bf4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad8:	6a1a      	ldr	r2, [r3, #32]
 8013ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013adc:	441a      	add	r2, r3
 8013ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ae6:	2b02      	cmp	r3, #2
 8013ae8:	d103      	bne.n	8013af2 <find_volume+0x382>
 8013aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aec:	695b      	ldr	r3, [r3, #20]
 8013aee:	005b      	lsls	r3, r3, #1
 8013af0:	e00a      	b.n	8013b08 <find_volume+0x398>
 8013af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af4:	695a      	ldr	r2, [r3, #20]
 8013af6:	4613      	mov	r3, r2
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	4413      	add	r3, r2
 8013afc:	085a      	lsrs	r2, r3, #1
 8013afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b00:	695b      	ldr	r3, [r3, #20]
 8013b02:	f003 0301 	and.w	r3, r3, #1
 8013b06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0c:	699a      	ldr	r2, [r3, #24]
 8013b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013b14:	0a5b      	lsrs	r3, r3, #9
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d201      	bcs.n	8013b1e <find_volume+0x3ae>
 8013b1a:	230d      	movs	r3, #13
 8013b1c:	e06a      	b.n	8013bf4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	f04f 32ff 	mov.w	r2, #4294967295
 8013b24:	611a      	str	r2, [r3, #16]
 8013b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b28:	691a      	ldr	r2, [r3, #16]
 8013b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b30:	2280      	movs	r2, #128	; 0x80
 8013b32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b38:	2b03      	cmp	r3, #3
 8013b3a:	d149      	bne.n	8013bd0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b3e:	3330      	adds	r3, #48	; 0x30
 8013b40:	3330      	adds	r3, #48	; 0x30
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7fe fbf6 	bl	8012334 <ld_word>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	2b01      	cmp	r3, #1
 8013b4c:	d140      	bne.n	8013bd0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b50:	3301      	adds	r3, #1
 8013b52:	4619      	mov	r1, r3
 8013b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b56:	f7fe fe9d 	bl	8012894 <move_window>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d137      	bne.n	8013bd0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b62:	2200      	movs	r2, #0
 8013b64:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b68:	3330      	adds	r3, #48	; 0x30
 8013b6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fe fbe0 	bl	8012334 <ld_word>
 8013b74:	4603      	mov	r3, r0
 8013b76:	461a      	mov	r2, r3
 8013b78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d127      	bne.n	8013bd0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b82:	3330      	adds	r3, #48	; 0x30
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7fe fbed 	bl	8012364 <ld_dword>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	4a1b      	ldr	r2, [pc, #108]	; (8013bfc <find_volume+0x48c>)
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	d11e      	bne.n	8013bd0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b94:	3330      	adds	r3, #48	; 0x30
 8013b96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fe fbe2 	bl	8012364 <ld_dword>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	4a17      	ldr	r2, [pc, #92]	; (8013c00 <find_volume+0x490>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d113      	bne.n	8013bd0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013baa:	3330      	adds	r3, #48	; 0x30
 8013bac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7fe fbd7 	bl	8012364 <ld_dword>
 8013bb6:	4602      	mov	r2, r0
 8013bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bba:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbe:	3330      	adds	r3, #48	; 0x30
 8013bc0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fe fbcd 	bl	8012364 <ld_dword>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bce:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013bd6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013bd8:	4b0a      	ldr	r3, [pc, #40]	; (8013c04 <find_volume+0x494>)
 8013bda:	881b      	ldrh	r3, [r3, #0]
 8013bdc:	3301      	adds	r3, #1
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	4b08      	ldr	r3, [pc, #32]	; (8013c04 <find_volume+0x494>)
 8013be2:	801a      	strh	r2, [r3, #0]
 8013be4:	4b07      	ldr	r3, [pc, #28]	; (8013c04 <find_volume+0x494>)
 8013be6:	881a      	ldrh	r2, [r3, #0]
 8013be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013bec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bee:	f7fe fde9 	bl	80127c4 <clear_lock>
#endif
	return FR_OK;
 8013bf2:	2300      	movs	r3, #0
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3758      	adds	r7, #88	; 0x58
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	41615252 	.word	0x41615252
 8013c00:	61417272 	.word	0x61417272
 8013c04:	20000a1c 	.word	0x20000a1c

08013c08 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c12:	2309      	movs	r3, #9
 8013c14:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d01c      	beq.n	8013c56 <validate+0x4e>
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d018      	beq.n	8013c56 <validate+0x4e>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d013      	beq.n	8013c56 <validate+0x4e>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	889a      	ldrh	r2, [r3, #4]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	88db      	ldrh	r3, [r3, #6]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d10c      	bne.n	8013c56 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	785b      	ldrb	r3, [r3, #1]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fe fad8 	bl	80121f8 <disk_status>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	f003 0301 	and.w	r3, r3, #1
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d101      	bne.n	8013c56 <validate+0x4e>
			res = FR_OK;
 8013c52:	2300      	movs	r3, #0
 8013c54:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c56:	7bfb      	ldrb	r3, [r7, #15]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d102      	bne.n	8013c62 <validate+0x5a>
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	e000      	b.n	8013c64 <validate+0x5c>
 8013c62:	2300      	movs	r3, #0
 8013c64:	683a      	ldr	r2, [r7, #0]
 8013c66:	6013      	str	r3, [r2, #0]
	return res;
 8013c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
	...

08013c74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b088      	sub	sp, #32
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	4613      	mov	r3, r2
 8013c80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c86:	f107 0310 	add.w	r3, r7, #16
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7ff fcd5 	bl	801363a <get_ldnumber>
 8013c90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	da01      	bge.n	8013c9c <f_mount+0x28>
 8013c98:	230b      	movs	r3, #11
 8013c9a:	e02b      	b.n	8013cf4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013c9c:	4a17      	ldr	r2, [pc, #92]	; (8013cfc <f_mount+0x88>)
 8013c9e:	69fb      	ldr	r3, [r7, #28]
 8013ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ca4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d005      	beq.n	8013cb8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013cac:	69b8      	ldr	r0, [r7, #24]
 8013cae:	f7fe fd89 	bl	80127c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d002      	beq.n	8013cc4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013cc4:	68fa      	ldr	r2, [r7, #12]
 8013cc6:	490d      	ldr	r1, [pc, #52]	; (8013cfc <f_mount+0x88>)
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <f_mount+0x66>
 8013cd4:	79fb      	ldrb	r3, [r7, #7]
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d001      	beq.n	8013cde <f_mount+0x6a>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	e00a      	b.n	8013cf4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013cde:	f107 010c 	add.w	r1, r7, #12
 8013ce2:	f107 0308 	add.w	r3, r7, #8
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff fd41 	bl	8013770 <find_volume>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3720      	adds	r7, #32
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	20000a18 	.word	0x20000a18

08013d00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b098      	sub	sp, #96	; 0x60
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	60f8      	str	r0, [r7, #12]
 8013d08:	60b9      	str	r1, [r7, #8]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d101      	bne.n	8013d18 <f_open+0x18>
 8013d14:	2309      	movs	r3, #9
 8013d16:	e1ad      	b.n	8014074 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d18:	79fb      	ldrb	r3, [r7, #7]
 8013d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d1e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013d20:	79fa      	ldrb	r2, [r7, #7]
 8013d22:	f107 0110 	add.w	r1, r7, #16
 8013d26:	f107 0308 	add.w	r3, r7, #8
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7ff fd20 	bl	8013770 <find_volume>
 8013d30:	4603      	mov	r3, r0
 8013d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	f040 8191 	bne.w	8014062 <f_open+0x362>
		dj.obj.fs = fs;
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d44:	68ba      	ldr	r2, [r7, #8]
 8013d46:	f107 0314 	add.w	r3, r7, #20
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7ff fc03 	bl	8013558 <follow_path>
 8013d52:	4603      	mov	r3, r0
 8013d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013d58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d11a      	bne.n	8013d96 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013d60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013d64:	b25b      	sxtb	r3, r3
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	da03      	bge.n	8013d72 <f_open+0x72>
				res = FR_INVALID_NAME;
 8013d6a:	2306      	movs	r3, #6
 8013d6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013d70:	e011      	b.n	8013d96 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013d72:	79fb      	ldrb	r3, [r7, #7]
 8013d74:	f023 0301 	bic.w	r3, r3, #1
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	bf14      	ite	ne
 8013d7c:	2301      	movne	r3, #1
 8013d7e:	2300      	moveq	r3, #0
 8013d80:	b2db      	uxtb	r3, r3
 8013d82:	461a      	mov	r2, r3
 8013d84:	f107 0314 	add.w	r3, r7, #20
 8013d88:	4611      	mov	r1, r2
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fe fbd2 	bl	8012534 <chk_lock>
 8013d90:	4603      	mov	r3, r0
 8013d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d96:	79fb      	ldrb	r3, [r7, #7]
 8013d98:	f003 031c 	and.w	r3, r3, #28
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d07f      	beq.n	8013ea0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d017      	beq.n	8013dd8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dac:	2b04      	cmp	r3, #4
 8013dae:	d10e      	bne.n	8013dce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013db0:	f7fe fc1c 	bl	80125ec <enq_lock>
 8013db4:	4603      	mov	r3, r0
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d006      	beq.n	8013dc8 <f_open+0xc8>
 8013dba:	f107 0314 	add.w	r3, r7, #20
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ff fb03 	bl	80133ca <dir_register>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	e000      	b.n	8013dca <f_open+0xca>
 8013dc8:	2312      	movs	r3, #18
 8013dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013dce:	79fb      	ldrb	r3, [r7, #7]
 8013dd0:	f043 0308 	orr.w	r3, r3, #8
 8013dd4:	71fb      	strb	r3, [r7, #7]
 8013dd6:	e010      	b.n	8013dfa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013dd8:	7ebb      	ldrb	r3, [r7, #26]
 8013dda:	f003 0311 	and.w	r3, r3, #17
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d003      	beq.n	8013dea <f_open+0xea>
					res = FR_DENIED;
 8013de2:	2307      	movs	r3, #7
 8013de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013de8:	e007      	b.n	8013dfa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013dea:	79fb      	ldrb	r3, [r7, #7]
 8013dec:	f003 0304 	and.w	r3, r3, #4
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d002      	beq.n	8013dfa <f_open+0xfa>
 8013df4:	2308      	movs	r3, #8
 8013df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d168      	bne.n	8013ed4 <f_open+0x1d4>
 8013e02:	79fb      	ldrb	r3, [r7, #7]
 8013e04:	f003 0308 	and.w	r3, r3, #8
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d063      	beq.n	8013ed4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013e0c:	f7fe f92c 	bl	8012068 <get_fattime>
 8013e10:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e14:	330e      	adds	r3, #14
 8013e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7fe fae1 	bl	80123e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e20:	3316      	adds	r3, #22
 8013e22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7fe fadb 	bl	80123e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e2c:	330b      	adds	r3, #11
 8013e2e:	2220      	movs	r2, #32
 8013e30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e36:	4611      	mov	r1, r2
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7ff fa32 	bl	80132a2 <ld_clust>
 8013e3e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e44:	2200      	movs	r2, #0
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7ff fa4a 	bl	80132e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e4e:	331c      	adds	r3, #28
 8013e50:	2100      	movs	r1, #0
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7fe fac4 	bl	80123e0 <st_dword>
					fs->wflag = 1;
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d037      	beq.n	8013ed4 <f_open+0x1d4>
						dw = fs->winsect;
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e68:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013e6a:	f107 0314 	add.w	r3, r7, #20
 8013e6e:	2200      	movs	r2, #0
 8013e70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7fe ff5d 	bl	8012d32 <remove_chain>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d126      	bne.n	8013ed4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fe fd02 	bl	8012894 <move_window>
 8013e90:	4603      	mov	r3, r0
 8013e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e9a:	3a01      	subs	r2, #1
 8013e9c:	60da      	str	r2, [r3, #12]
 8013e9e:	e019      	b.n	8013ed4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d115      	bne.n	8013ed4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013ea8:	7ebb      	ldrb	r3, [r7, #26]
 8013eaa:	f003 0310 	and.w	r3, r3, #16
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d003      	beq.n	8013eba <f_open+0x1ba>
					res = FR_NO_FILE;
 8013eb2:	2304      	movs	r3, #4
 8013eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013eb8:	e00c      	b.n	8013ed4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013eba:	79fb      	ldrb	r3, [r7, #7]
 8013ebc:	f003 0302 	and.w	r3, r3, #2
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d007      	beq.n	8013ed4 <f_open+0x1d4>
 8013ec4:	7ebb      	ldrb	r3, [r7, #26]
 8013ec6:	f003 0301 	and.w	r3, r3, #1
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d002      	beq.n	8013ed4 <f_open+0x1d4>
						res = FR_DENIED;
 8013ece:	2307      	movs	r3, #7
 8013ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d128      	bne.n	8013f2e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013edc:	79fb      	ldrb	r3, [r7, #7]
 8013ede:	f003 0308 	and.w	r3, r3, #8
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d003      	beq.n	8013eee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013ee6:	79fb      	ldrb	r3, [r7, #7]
 8013ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013efc:	79fb      	ldrb	r3, [r7, #7]
 8013efe:	f023 0301 	bic.w	r3, r3, #1
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	bf14      	ite	ne
 8013f06:	2301      	movne	r3, #1
 8013f08:	2300      	moveq	r3, #0
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	f107 0314 	add.w	r3, r7, #20
 8013f12:	4611      	mov	r1, r2
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fe fb8b 	bl	8012630 <inc_lock>
 8013f1a:	4602      	mov	r2, r0
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	691b      	ldr	r3, [r3, #16]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d102      	bne.n	8013f2e <f_open+0x22e>
 8013f28:	2302      	movs	r3, #2
 8013f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f040 8095 	bne.w	8014062 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ff f9af 	bl	80132a2 <ld_clust>
 8013f44:	4602      	mov	r2, r0
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f4c:	331c      	adds	r3, #28
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fe fa08 	bl	8012364 <ld_dword>
 8013f54:	4602      	mov	r2, r0
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013f60:	693a      	ldr	r2, [r7, #16]
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	88da      	ldrh	r2, [r3, #6]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	79fa      	ldrb	r2, [r7, #7]
 8013f72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	2200      	movs	r2, #0
 8013f78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	2200      	movs	r2, #0
 8013f84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	3330      	adds	r3, #48	; 0x30
 8013f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f8e:	2100      	movs	r1, #0
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7fe fa72 	bl	801247a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013f96:	79fb      	ldrb	r3, [r7, #7]
 8013f98:	f003 0320 	and.w	r3, r3, #32
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d060      	beq.n	8014062 <f_open+0x362>
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d05c      	beq.n	8014062 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	68da      	ldr	r2, [r3, #12]
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	895b      	ldrh	r3, [r3, #10]
 8013fb4:	025b      	lsls	r3, r3, #9
 8013fb6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	689b      	ldr	r3, [r3, #8]
 8013fbc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	68db      	ldr	r3, [r3, #12]
 8013fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8013fc4:	e016      	b.n	8013ff4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fe fd1d 	bl	8012a0a <get_fat>
 8013fd0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fd4:	2b01      	cmp	r3, #1
 8013fd6:	d802      	bhi.n	8013fde <f_open+0x2de>
 8013fd8:	2302      	movs	r3, #2
 8013fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fe4:	d102      	bne.n	8013fec <f_open+0x2ec>
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8013ff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d103      	bne.n	8014004 <f_open+0x304>
 8013ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014000:	429a      	cmp	r2, r3
 8014002:	d8e0      	bhi.n	8013fc6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014008:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801400a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801400e:	2b00      	cmp	r3, #0
 8014010:	d127      	bne.n	8014062 <f_open+0x362>
 8014012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014018:	2b00      	cmp	r3, #0
 801401a:	d022      	beq.n	8014062 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014020:	4618      	mov	r0, r3
 8014022:	f7fe fcd3 	bl	80129cc <clust2sect>
 8014026:	6478      	str	r0, [r7, #68]	; 0x44
 8014028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801402a:	2b00      	cmp	r3, #0
 801402c:	d103      	bne.n	8014036 <f_open+0x336>
						res = FR_INT_ERR;
 801402e:	2302      	movs	r3, #2
 8014030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014034:	e015      	b.n	8014062 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014038:	0a5a      	lsrs	r2, r3, #9
 801403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801403c:	441a      	add	r2, r3
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	7858      	ldrb	r0, [r3, #1]
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	6a1a      	ldr	r2, [r3, #32]
 8014050:	2301      	movs	r3, #1
 8014052:	f7fe f911 	bl	8012278 <disk_read>
 8014056:	4603      	mov	r3, r0
 8014058:	2b00      	cmp	r3, #0
 801405a:	d002      	beq.n	8014062 <f_open+0x362>
 801405c:	2301      	movs	r3, #1
 801405e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014066:	2b00      	cmp	r3, #0
 8014068:	d002      	beq.n	8014070 <f_open+0x370>
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2200      	movs	r2, #0
 801406e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014074:	4618      	mov	r0, r3
 8014076:	3760      	adds	r7, #96	; 0x60
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b08e      	sub	sp, #56	; 0x38
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	2200      	movs	r2, #0
 8014092:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f107 0214 	add.w	r2, r7, #20
 801409a:	4611      	mov	r1, r2
 801409c:	4618      	mov	r0, r3
 801409e:	f7ff fdb3 	bl	8013c08 <validate>
 80140a2:	4603      	mov	r3, r0
 80140a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80140a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d107      	bne.n	80140c0 <f_read+0x44>
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	7d5b      	ldrb	r3, [r3, #21]
 80140b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80140b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d002      	beq.n	80140c6 <f_read+0x4a>
 80140c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140c4:	e115      	b.n	80142f2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	7d1b      	ldrb	r3, [r3, #20]
 80140ca:	f003 0301 	and.w	r3, r3, #1
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d101      	bne.n	80140d6 <f_read+0x5a>
 80140d2:	2307      	movs	r3, #7
 80140d4:	e10d      	b.n	80142f2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	68da      	ldr	r2, [r3, #12]
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	699b      	ldr	r3, [r3, #24]
 80140de:	1ad3      	subs	r3, r2, r3
 80140e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80140e2:	687a      	ldr	r2, [r7, #4]
 80140e4:	6a3b      	ldr	r3, [r7, #32]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	f240 80fe 	bls.w	80142e8 <f_read+0x26c>
 80140ec:	6a3b      	ldr	r3, [r7, #32]
 80140ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80140f0:	e0fa      	b.n	80142e8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	699b      	ldr	r3, [r3, #24]
 80140f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	f040 80c6 	bne.w	801428c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	699b      	ldr	r3, [r3, #24]
 8014104:	0a5b      	lsrs	r3, r3, #9
 8014106:	697a      	ldr	r2, [r7, #20]
 8014108:	8952      	ldrh	r2, [r2, #10]
 801410a:	3a01      	subs	r2, #1
 801410c:	4013      	ands	r3, r2
 801410e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014110:	69fb      	ldr	r3, [r7, #28]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d12f      	bne.n	8014176 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	699b      	ldr	r3, [r3, #24]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d103      	bne.n	8014126 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	689b      	ldr	r3, [r3, #8]
 8014122:	633b      	str	r3, [r7, #48]	; 0x30
 8014124:	e013      	b.n	801414e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801412a:	2b00      	cmp	r3, #0
 801412c:	d007      	beq.n	801413e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	699b      	ldr	r3, [r3, #24]
 8014132:	4619      	mov	r1, r3
 8014134:	68f8      	ldr	r0, [r7, #12]
 8014136:	f7fe fef9 	bl	8012f2c <clmt_clust>
 801413a:	6338      	str	r0, [r7, #48]	; 0x30
 801413c:	e007      	b.n	801414e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801413e:	68fa      	ldr	r2, [r7, #12]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	69db      	ldr	r3, [r3, #28]
 8014144:	4619      	mov	r1, r3
 8014146:	4610      	mov	r0, r2
 8014148:	f7fe fc5f 	bl	8012a0a <get_fat>
 801414c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014150:	2b01      	cmp	r3, #1
 8014152:	d804      	bhi.n	801415e <f_read+0xe2>
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2202      	movs	r2, #2
 8014158:	755a      	strb	r2, [r3, #21]
 801415a:	2302      	movs	r3, #2
 801415c:	e0c9      	b.n	80142f2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014164:	d104      	bne.n	8014170 <f_read+0xf4>
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	2201      	movs	r2, #1
 801416a:	755a      	strb	r2, [r3, #21]
 801416c:	2301      	movs	r3, #1
 801416e:	e0c0      	b.n	80142f2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014174:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014176:	697a      	ldr	r2, [r7, #20]
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	69db      	ldr	r3, [r3, #28]
 801417c:	4619      	mov	r1, r3
 801417e:	4610      	mov	r0, r2
 8014180:	f7fe fc24 	bl	80129cc <clust2sect>
 8014184:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d104      	bne.n	8014196 <f_read+0x11a>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2202      	movs	r2, #2
 8014190:	755a      	strb	r2, [r3, #21]
 8014192:	2302      	movs	r3, #2
 8014194:	e0ad      	b.n	80142f2 <f_read+0x276>
			sect += csect;
 8014196:	69ba      	ldr	r2, [r7, #24]
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	4413      	add	r3, r2
 801419c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	0a5b      	lsrs	r3, r3, #9
 80141a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80141a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d039      	beq.n	801421e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141aa:	69fa      	ldr	r2, [r7, #28]
 80141ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ae:	4413      	add	r3, r2
 80141b0:	697a      	ldr	r2, [r7, #20]
 80141b2:	8952      	ldrh	r2, [r2, #10]
 80141b4:	4293      	cmp	r3, r2
 80141b6:	d905      	bls.n	80141c4 <f_read+0x148>
					cc = fs->csize - csect;
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	895b      	ldrh	r3, [r3, #10]
 80141bc:	461a      	mov	r2, r3
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	1ad3      	subs	r3, r2, r3
 80141c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	7858      	ldrb	r0, [r3, #1]
 80141c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ca:	69ba      	ldr	r2, [r7, #24]
 80141cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80141ce:	f7fe f853 	bl	8012278 <disk_read>
 80141d2:	4603      	mov	r3, r0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d004      	beq.n	80141e2 <f_read+0x166>
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2201      	movs	r2, #1
 80141dc:	755a      	strb	r2, [r3, #21]
 80141de:	2301      	movs	r3, #1
 80141e0:	e087      	b.n	80142f2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	7d1b      	ldrb	r3, [r3, #20]
 80141e6:	b25b      	sxtb	r3, r3
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	da14      	bge.n	8014216 <f_read+0x19a>
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	6a1a      	ldr	r2, [r3, #32]
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	1ad3      	subs	r3, r2, r3
 80141f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d90d      	bls.n	8014216 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	6a1a      	ldr	r2, [r3, #32]
 80141fe:	69bb      	ldr	r3, [r7, #24]
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	025b      	lsls	r3, r3, #9
 8014204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014206:	18d0      	adds	r0, r2, r3
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	3330      	adds	r3, #48	; 0x30
 801420c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014210:	4619      	mov	r1, r3
 8014212:	f7fe f911 	bl	8012438 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014218:	025b      	lsls	r3, r3, #9
 801421a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801421c:	e050      	b.n	80142c0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	6a1b      	ldr	r3, [r3, #32]
 8014222:	69ba      	ldr	r2, [r7, #24]
 8014224:	429a      	cmp	r2, r3
 8014226:	d02e      	beq.n	8014286 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	7d1b      	ldrb	r3, [r3, #20]
 801422c:	b25b      	sxtb	r3, r3
 801422e:	2b00      	cmp	r3, #0
 8014230:	da18      	bge.n	8014264 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	7858      	ldrb	r0, [r3, #1]
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	6a1a      	ldr	r2, [r3, #32]
 8014240:	2301      	movs	r3, #1
 8014242:	f7fe f839 	bl	80122b8 <disk_write>
 8014246:	4603      	mov	r3, r0
 8014248:	2b00      	cmp	r3, #0
 801424a:	d004      	beq.n	8014256 <f_read+0x1da>
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	2201      	movs	r2, #1
 8014250:	755a      	strb	r2, [r3, #21]
 8014252:	2301      	movs	r3, #1
 8014254:	e04d      	b.n	80142f2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	7d1b      	ldrb	r3, [r3, #20]
 801425a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801425e:	b2da      	uxtb	r2, r3
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	7858      	ldrb	r0, [r3, #1]
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801426e:	2301      	movs	r3, #1
 8014270:	69ba      	ldr	r2, [r7, #24]
 8014272:	f7fe f801 	bl	8012278 <disk_read>
 8014276:	4603      	mov	r3, r0
 8014278:	2b00      	cmp	r3, #0
 801427a:	d004      	beq.n	8014286 <f_read+0x20a>
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2201      	movs	r2, #1
 8014280:	755a      	strb	r2, [r3, #21]
 8014282:	2301      	movs	r3, #1
 8014284:	e035      	b.n	80142f2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	69ba      	ldr	r2, [r7, #24]
 801428a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	699b      	ldr	r3, [r3, #24]
 8014290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014294:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014298:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801429a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d901      	bls.n	80142a6 <f_read+0x22a>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	699b      	ldr	r3, [r3, #24]
 80142b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142b4:	4413      	add	r3, r2
 80142b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142b8:	4619      	mov	r1, r3
 80142ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142bc:	f7fe f8bc 	bl	8012438 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80142c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c4:	4413      	add	r3, r2
 80142c6:	627b      	str	r3, [r7, #36]	; 0x24
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	699a      	ldr	r2, [r3, #24]
 80142cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ce:	441a      	add	r2, r3
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	619a      	str	r2, [r3, #24]
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142da:	441a      	add	r2, r3
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	601a      	str	r2, [r3, #0]
 80142e0:	687a      	ldr	r2, [r7, #4]
 80142e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f47f af01 	bne.w	80140f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80142f0:	2300      	movs	r3, #0
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3738      	adds	r7, #56	; 0x38
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}

080142fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b08c      	sub	sp, #48	; 0x30
 80142fe:	af00      	add	r7, sp, #0
 8014300:	60f8      	str	r0, [r7, #12]
 8014302:	60b9      	str	r1, [r7, #8]
 8014304:	607a      	str	r2, [r7, #4]
 8014306:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	2200      	movs	r2, #0
 8014310:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f107 0210 	add.w	r2, r7, #16
 8014318:	4611      	mov	r1, r2
 801431a:	4618      	mov	r0, r3
 801431c:	f7ff fc74 	bl	8013c08 <validate>
 8014320:	4603      	mov	r3, r0
 8014322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801432a:	2b00      	cmp	r3, #0
 801432c:	d107      	bne.n	801433e <f_write+0x44>
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	7d5b      	ldrb	r3, [r3, #21]
 8014332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801433a:	2b00      	cmp	r3, #0
 801433c:	d002      	beq.n	8014344 <f_write+0x4a>
 801433e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014342:	e14b      	b.n	80145dc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	7d1b      	ldrb	r3, [r3, #20]
 8014348:	f003 0302 	and.w	r3, r3, #2
 801434c:	2b00      	cmp	r3, #0
 801434e:	d101      	bne.n	8014354 <f_write+0x5a>
 8014350:	2307      	movs	r3, #7
 8014352:	e143      	b.n	80145dc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	699a      	ldr	r2, [r3, #24]
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	441a      	add	r2, r3
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	699b      	ldr	r3, [r3, #24]
 8014360:	429a      	cmp	r2, r3
 8014362:	f080 812d 	bcs.w	80145c0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	699b      	ldr	r3, [r3, #24]
 801436a:	43db      	mvns	r3, r3
 801436c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801436e:	e127      	b.n	80145c0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	699b      	ldr	r3, [r3, #24]
 8014374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014378:	2b00      	cmp	r3, #0
 801437a:	f040 80e3 	bne.w	8014544 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	699b      	ldr	r3, [r3, #24]
 8014382:	0a5b      	lsrs	r3, r3, #9
 8014384:	693a      	ldr	r2, [r7, #16]
 8014386:	8952      	ldrh	r2, [r2, #10]
 8014388:	3a01      	subs	r2, #1
 801438a:	4013      	ands	r3, r2
 801438c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d143      	bne.n	801441c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	699b      	ldr	r3, [r3, #24]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d10c      	bne.n	80143b6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	689b      	ldr	r3, [r3, #8]
 80143a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80143a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d11a      	bne.n	80143de <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	2100      	movs	r1, #0
 80143ac:	4618      	mov	r0, r3
 80143ae:	f7fe fd25 	bl	8012dfc <create_chain>
 80143b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80143b4:	e013      	b.n	80143de <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d007      	beq.n	80143ce <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	699b      	ldr	r3, [r3, #24]
 80143c2:	4619      	mov	r1, r3
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f7fe fdb1 	bl	8012f2c <clmt_clust>
 80143ca:	62b8      	str	r0, [r7, #40]	; 0x28
 80143cc:	e007      	b.n	80143de <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80143ce:	68fa      	ldr	r2, [r7, #12]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	69db      	ldr	r3, [r3, #28]
 80143d4:	4619      	mov	r1, r3
 80143d6:	4610      	mov	r0, r2
 80143d8:	f7fe fd10 	bl	8012dfc <create_chain>
 80143dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80143de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f000 80f2 	beq.w	80145ca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80143e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	d104      	bne.n	80143f6 <f_write+0xfc>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2202      	movs	r2, #2
 80143f0:	755a      	strb	r2, [r3, #21]
 80143f2:	2302      	movs	r3, #2
 80143f4:	e0f2      	b.n	80145dc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80143f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143fc:	d104      	bne.n	8014408 <f_write+0x10e>
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2201      	movs	r2, #1
 8014402:	755a      	strb	r2, [r3, #21]
 8014404:	2301      	movs	r3, #1
 8014406:	e0e9      	b.n	80145dc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801440c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	689b      	ldr	r3, [r3, #8]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d102      	bne.n	801441c <f_write+0x122>
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801441a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	7d1b      	ldrb	r3, [r3, #20]
 8014420:	b25b      	sxtb	r3, r3
 8014422:	2b00      	cmp	r3, #0
 8014424:	da18      	bge.n	8014458 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	7858      	ldrb	r0, [r3, #1]
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	6a1a      	ldr	r2, [r3, #32]
 8014434:	2301      	movs	r3, #1
 8014436:	f7fd ff3f 	bl	80122b8 <disk_write>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d004      	beq.n	801444a <f_write+0x150>
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2201      	movs	r2, #1
 8014444:	755a      	strb	r2, [r3, #21]
 8014446:	2301      	movs	r3, #1
 8014448:	e0c8      	b.n	80145dc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	7d1b      	ldrb	r3, [r3, #20]
 801444e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014452:	b2da      	uxtb	r2, r3
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014458:	693a      	ldr	r2, [r7, #16]
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	69db      	ldr	r3, [r3, #28]
 801445e:	4619      	mov	r1, r3
 8014460:	4610      	mov	r0, r2
 8014462:	f7fe fab3 	bl	80129cc <clust2sect>
 8014466:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d104      	bne.n	8014478 <f_write+0x17e>
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	2202      	movs	r2, #2
 8014472:	755a      	strb	r2, [r3, #21]
 8014474:	2302      	movs	r3, #2
 8014476:	e0b1      	b.n	80145dc <f_write+0x2e2>
			sect += csect;
 8014478:	697a      	ldr	r2, [r7, #20]
 801447a:	69bb      	ldr	r3, [r7, #24]
 801447c:	4413      	add	r3, r2
 801447e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	0a5b      	lsrs	r3, r3, #9
 8014484:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014486:	6a3b      	ldr	r3, [r7, #32]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d03c      	beq.n	8014506 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801448c:	69ba      	ldr	r2, [r7, #24]
 801448e:	6a3b      	ldr	r3, [r7, #32]
 8014490:	4413      	add	r3, r2
 8014492:	693a      	ldr	r2, [r7, #16]
 8014494:	8952      	ldrh	r2, [r2, #10]
 8014496:	4293      	cmp	r3, r2
 8014498:	d905      	bls.n	80144a6 <f_write+0x1ac>
					cc = fs->csize - csect;
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	895b      	ldrh	r3, [r3, #10]
 801449e:	461a      	mov	r2, r3
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	1ad3      	subs	r3, r2, r3
 80144a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	7858      	ldrb	r0, [r3, #1]
 80144aa:	6a3b      	ldr	r3, [r7, #32]
 80144ac:	697a      	ldr	r2, [r7, #20]
 80144ae:	69f9      	ldr	r1, [r7, #28]
 80144b0:	f7fd ff02 	bl	80122b8 <disk_write>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d004      	beq.n	80144c4 <f_write+0x1ca>
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	2201      	movs	r2, #1
 80144be:	755a      	strb	r2, [r3, #21]
 80144c0:	2301      	movs	r3, #1
 80144c2:	e08b      	b.n	80145dc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6a1a      	ldr	r2, [r3, #32]
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	1ad3      	subs	r3, r2, r3
 80144cc:	6a3a      	ldr	r2, [r7, #32]
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d915      	bls.n	80144fe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	6a1a      	ldr	r2, [r3, #32]
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	1ad3      	subs	r3, r2, r3
 80144e0:	025b      	lsls	r3, r3, #9
 80144e2:	69fa      	ldr	r2, [r7, #28]
 80144e4:	4413      	add	r3, r2
 80144e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144ea:	4619      	mov	r1, r3
 80144ec:	f7fd ffa4 	bl	8012438 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	7d1b      	ldrb	r3, [r3, #20]
 80144f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144f8:	b2da      	uxtb	r2, r3
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80144fe:	6a3b      	ldr	r3, [r7, #32]
 8014500:	025b      	lsls	r3, r3, #9
 8014502:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014504:	e03f      	b.n	8014586 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	6a1b      	ldr	r3, [r3, #32]
 801450a:	697a      	ldr	r2, [r7, #20]
 801450c:	429a      	cmp	r2, r3
 801450e:	d016      	beq.n	801453e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	699a      	ldr	r2, [r3, #24]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014518:	429a      	cmp	r2, r3
 801451a:	d210      	bcs.n	801453e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	7858      	ldrb	r0, [r3, #1]
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014526:	2301      	movs	r3, #1
 8014528:	697a      	ldr	r2, [r7, #20]
 801452a:	f7fd fea5 	bl	8012278 <disk_read>
 801452e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014530:	2b00      	cmp	r3, #0
 8014532:	d004      	beq.n	801453e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2201      	movs	r2, #1
 8014538:	755a      	strb	r2, [r3, #21]
 801453a:	2301      	movs	r3, #1
 801453c:	e04e      	b.n	80145dc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	697a      	ldr	r2, [r7, #20]
 8014542:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	699b      	ldr	r3, [r3, #24]
 8014548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801454c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014550:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	429a      	cmp	r2, r3
 8014558:	d901      	bls.n	801455e <f_write+0x264>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	699b      	ldr	r3, [r3, #24]
 8014568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801456c:	4413      	add	r3, r2
 801456e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014570:	69f9      	ldr	r1, [r7, #28]
 8014572:	4618      	mov	r0, r3
 8014574:	f7fd ff60 	bl	8012438 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	7d1b      	ldrb	r3, [r3, #20]
 801457c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014580:	b2da      	uxtb	r2, r3
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014586:	69fa      	ldr	r2, [r7, #28]
 8014588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458a:	4413      	add	r3, r2
 801458c:	61fb      	str	r3, [r7, #28]
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	699a      	ldr	r2, [r3, #24]
 8014592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014594:	441a      	add	r2, r3
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	619a      	str	r2, [r3, #24]
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	68da      	ldr	r2, [r3, #12]
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	699b      	ldr	r3, [r3, #24]
 80145a2:	429a      	cmp	r2, r3
 80145a4:	bf38      	it	cc
 80145a6:	461a      	movcc	r2, r3
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	60da      	str	r2, [r3, #12]
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b2:	441a      	add	r2, r3
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	601a      	str	r2, [r3, #0]
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145bc:	1ad3      	subs	r3, r2, r3
 80145be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	f47f aed4 	bne.w	8014370 <f_write+0x76>
 80145c8:	e000      	b.n	80145cc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80145ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	7d1b      	ldrb	r3, [r3, #20]
 80145d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145d4:	b2da      	uxtb	r2, r3
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80145da:	2300      	movs	r3, #0
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3730      	adds	r7, #48	; 0x30
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}

080145e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b086      	sub	sp, #24
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f107 0208 	add.w	r2, r7, #8
 80145f2:	4611      	mov	r1, r2
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7ff fb07 	bl	8013c08 <validate>
 80145fa:	4603      	mov	r3, r0
 80145fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80145fe:	7dfb      	ldrb	r3, [r7, #23]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d168      	bne.n	80146d6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	7d1b      	ldrb	r3, [r3, #20]
 8014608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801460c:	2b00      	cmp	r3, #0
 801460e:	d062      	beq.n	80146d6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	7d1b      	ldrb	r3, [r3, #20]
 8014614:	b25b      	sxtb	r3, r3
 8014616:	2b00      	cmp	r3, #0
 8014618:	da15      	bge.n	8014646 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	7858      	ldrb	r0, [r3, #1]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6a1a      	ldr	r2, [r3, #32]
 8014628:	2301      	movs	r3, #1
 801462a:	f7fd fe45 	bl	80122b8 <disk_write>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d001      	beq.n	8014638 <f_sync+0x54>
 8014634:	2301      	movs	r3, #1
 8014636:	e04f      	b.n	80146d8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	7d1b      	ldrb	r3, [r3, #20]
 801463c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014640:	b2da      	uxtb	r2, r3
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014646:	f7fd fd0f 	bl	8012068 <get_fattime>
 801464a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801464c:	68ba      	ldr	r2, [r7, #8]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014652:	4619      	mov	r1, r3
 8014654:	4610      	mov	r0, r2
 8014656:	f7fe f91d 	bl	8012894 <move_window>
 801465a:	4603      	mov	r3, r0
 801465c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801465e:	7dfb      	ldrb	r3, [r7, #23]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d138      	bne.n	80146d6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014668:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	330b      	adds	r3, #11
 801466e:	781a      	ldrb	r2, [r3, #0]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	330b      	adds	r3, #11
 8014674:	f042 0220 	orr.w	r2, r2, #32
 8014678:	b2d2      	uxtb	r2, r2
 801467a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6818      	ldr	r0, [r3, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	689b      	ldr	r3, [r3, #8]
 8014684:	461a      	mov	r2, r3
 8014686:	68f9      	ldr	r1, [r7, #12]
 8014688:	f7fe fe2a 	bl	80132e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	f103 021c 	add.w	r2, r3, #28
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	68db      	ldr	r3, [r3, #12]
 8014696:	4619      	mov	r1, r3
 8014698:	4610      	mov	r0, r2
 801469a:	f7fd fea1 	bl	80123e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	3316      	adds	r3, #22
 80146a2:	6939      	ldr	r1, [r7, #16]
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7fd fe9b 	bl	80123e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	3312      	adds	r3, #18
 80146ae:	2100      	movs	r1, #0
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7fd fe7a 	bl	80123aa <st_word>
					fs->wflag = 1;
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	2201      	movs	r2, #1
 80146ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fe f916 	bl	80128f0 <sync_fs>
 80146c4:	4603      	mov	r3, r0
 80146c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	7d1b      	ldrb	r3, [r3, #20]
 80146cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146d0:	b2da      	uxtb	r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80146d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3718      	adds	r7, #24
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}

080146e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b084      	sub	sp, #16
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f7ff ff7b 	bl	80145e4 <f_sync>
 80146ee:	4603      	mov	r3, r0
 80146f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80146f2:	7bfb      	ldrb	r3, [r7, #15]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d118      	bne.n	801472a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f107 0208 	add.w	r2, r7, #8
 80146fe:	4611      	mov	r1, r2
 8014700:	4618      	mov	r0, r3
 8014702:	f7ff fa81 	bl	8013c08 <validate>
 8014706:	4603      	mov	r3, r0
 8014708:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801470a:	7bfb      	ldrb	r3, [r7, #15]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d10c      	bne.n	801472a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	691b      	ldr	r3, [r3, #16]
 8014714:	4618      	mov	r0, r3
 8014716:	f7fe f819 	bl	801274c <dec_lock>
 801471a:	4603      	mov	r3, r0
 801471c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801471e:	7bfb      	ldrb	r3, [r7, #15]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d102      	bne.n	801472a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801472a:	7bfb      	ldrb	r3, [r7, #15]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3710      	adds	r7, #16
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b090      	sub	sp, #64	; 0x40
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f107 0208 	add.w	r2, r7, #8
 8014744:	4611      	mov	r1, r2
 8014746:	4618      	mov	r0, r3
 8014748:	f7ff fa5e 	bl	8013c08 <validate>
 801474c:	4603      	mov	r3, r0
 801474e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014752:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014756:	2b00      	cmp	r3, #0
 8014758:	d103      	bne.n	8014762 <f_lseek+0x2e>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	7d5b      	ldrb	r3, [r3, #21]
 801475e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014766:	2b00      	cmp	r3, #0
 8014768:	d002      	beq.n	8014770 <f_lseek+0x3c>
 801476a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801476e:	e1e6      	b.n	8014b3e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014774:	2b00      	cmp	r3, #0
 8014776:	f000 80d1 	beq.w	801491c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014780:	d15a      	bne.n	8014838 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014786:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478a:	1d1a      	adds	r2, r3, #4
 801478c:	627a      	str	r2, [r7, #36]	; 0x24
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	617b      	str	r3, [r7, #20]
 8014792:	2302      	movs	r3, #2
 8014794:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	689b      	ldr	r3, [r3, #8]
 801479a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d03a      	beq.n	8014818 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80147a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a4:	613b      	str	r3, [r7, #16]
 80147a6:	2300      	movs	r3, #0
 80147a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ac:	3302      	adds	r3, #2
 80147ae:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80147b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b2:	60fb      	str	r3, [r7, #12]
 80147b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b6:	3301      	adds	r3, #1
 80147b8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80147be:	4618      	mov	r0, r3
 80147c0:	f7fe f923 	bl	8012a0a <get_fat>
 80147c4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80147c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d804      	bhi.n	80147d6 <f_lseek+0xa2>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2202      	movs	r2, #2
 80147d0:	755a      	strb	r2, [r3, #21]
 80147d2:	2302      	movs	r3, #2
 80147d4:	e1b3      	b.n	8014b3e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80147d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147dc:	d104      	bne.n	80147e8 <f_lseek+0xb4>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2201      	movs	r2, #1
 80147e2:	755a      	strb	r2, [r3, #21]
 80147e4:	2301      	movs	r3, #1
 80147e6:	e1aa      	b.n	8014b3e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	3301      	adds	r3, #1
 80147ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d0de      	beq.n	80147b0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80147f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d809      	bhi.n	801480e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fc:	1d1a      	adds	r2, r3, #4
 80147fe:	627a      	str	r2, [r7, #36]	; 0x24
 8014800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014802:	601a      	str	r2, [r3, #0]
 8014804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014806:	1d1a      	adds	r2, r3, #4
 8014808:	627a      	str	r2, [r7, #36]	; 0x24
 801480a:	693a      	ldr	r2, [r7, #16]
 801480c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	695b      	ldr	r3, [r3, #20]
 8014812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014814:	429a      	cmp	r2, r3
 8014816:	d3c4      	bcc.n	80147a2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801481c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801481e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	429a      	cmp	r2, r3
 8014826:	d803      	bhi.n	8014830 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482a:	2200      	movs	r2, #0
 801482c:	601a      	str	r2, [r3, #0]
 801482e:	e184      	b.n	8014b3a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014830:	2311      	movs	r3, #17
 8014832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014836:	e180      	b.n	8014b3a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	683a      	ldr	r2, [r7, #0]
 801483e:	429a      	cmp	r2, r3
 8014840:	d902      	bls.n	8014848 <f_lseek+0x114>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	68db      	ldr	r3, [r3, #12]
 8014846:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	683a      	ldr	r2, [r7, #0]
 801484c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	f000 8172 	beq.w	8014b3a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	3b01      	subs	r3, #1
 801485a:	4619      	mov	r1, r3
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7fe fb65 	bl	8012f2c <clmt_clust>
 8014862:	4602      	mov	r2, r0
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	69db      	ldr	r3, [r3, #28]
 801486e:	4619      	mov	r1, r3
 8014870:	4610      	mov	r0, r2
 8014872:	f7fe f8ab 	bl	80129cc <clust2sect>
 8014876:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014878:	69bb      	ldr	r3, [r7, #24]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d104      	bne.n	8014888 <f_lseek+0x154>
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2202      	movs	r2, #2
 8014882:	755a      	strb	r2, [r3, #21]
 8014884:	2302      	movs	r3, #2
 8014886:	e15a      	b.n	8014b3e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	3b01      	subs	r3, #1
 801488c:	0a5b      	lsrs	r3, r3, #9
 801488e:	68ba      	ldr	r2, [r7, #8]
 8014890:	8952      	ldrh	r2, [r2, #10]
 8014892:	3a01      	subs	r2, #1
 8014894:	4013      	ands	r3, r2
 8014896:	69ba      	ldr	r2, [r7, #24]
 8014898:	4413      	add	r3, r2
 801489a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	699b      	ldr	r3, [r3, #24]
 80148a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	f000 8148 	beq.w	8014b3a <f_lseek+0x406>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6a1b      	ldr	r3, [r3, #32]
 80148ae:	69ba      	ldr	r2, [r7, #24]
 80148b0:	429a      	cmp	r2, r3
 80148b2:	f000 8142 	beq.w	8014b3a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	7d1b      	ldrb	r3, [r3, #20]
 80148ba:	b25b      	sxtb	r3, r3
 80148bc:	2b00      	cmp	r3, #0
 80148be:	da18      	bge.n	80148f2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	7858      	ldrb	r0, [r3, #1]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6a1a      	ldr	r2, [r3, #32]
 80148ce:	2301      	movs	r3, #1
 80148d0:	f7fd fcf2 	bl	80122b8 <disk_write>
 80148d4:	4603      	mov	r3, r0
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d004      	beq.n	80148e4 <f_lseek+0x1b0>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2201      	movs	r2, #1
 80148de:	755a      	strb	r2, [r3, #21]
 80148e0:	2301      	movs	r3, #1
 80148e2:	e12c      	b.n	8014b3e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	7d1b      	ldrb	r3, [r3, #20]
 80148e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148ec:	b2da      	uxtb	r2, r3
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	7858      	ldrb	r0, [r3, #1]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148fc:	2301      	movs	r3, #1
 80148fe:	69ba      	ldr	r2, [r7, #24]
 8014900:	f7fd fcba 	bl	8012278 <disk_read>
 8014904:	4603      	mov	r3, r0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d004      	beq.n	8014914 <f_lseek+0x1e0>
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2201      	movs	r2, #1
 801490e:	755a      	strb	r2, [r3, #21]
 8014910:	2301      	movs	r3, #1
 8014912:	e114      	b.n	8014b3e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	69ba      	ldr	r2, [r7, #24]
 8014918:	621a      	str	r2, [r3, #32]
 801491a:	e10e      	b.n	8014b3a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	683a      	ldr	r2, [r7, #0]
 8014922:	429a      	cmp	r2, r3
 8014924:	d908      	bls.n	8014938 <f_lseek+0x204>
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	7d1b      	ldrb	r3, [r3, #20]
 801492a:	f003 0302 	and.w	r3, r3, #2
 801492e:	2b00      	cmp	r3, #0
 8014930:	d102      	bne.n	8014938 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801493e:	2300      	movs	r3, #0
 8014940:	637b      	str	r3, [r7, #52]	; 0x34
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014946:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	2b00      	cmp	r3, #0
 801494c:	f000 80a7 	beq.w	8014a9e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	895b      	ldrh	r3, [r3, #10]
 8014954:	025b      	lsls	r3, r3, #9
 8014956:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014958:	6a3b      	ldr	r3, [r7, #32]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d01b      	beq.n	8014996 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	1e5a      	subs	r2, r3, #1
 8014962:	69fb      	ldr	r3, [r7, #28]
 8014964:	fbb2 f2f3 	udiv	r2, r2, r3
 8014968:	6a3b      	ldr	r3, [r7, #32]
 801496a:	1e59      	subs	r1, r3, #1
 801496c:	69fb      	ldr	r3, [r7, #28]
 801496e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014972:	429a      	cmp	r2, r3
 8014974:	d30f      	bcc.n	8014996 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014976:	6a3b      	ldr	r3, [r7, #32]
 8014978:	1e5a      	subs	r2, r3, #1
 801497a:	69fb      	ldr	r3, [r7, #28]
 801497c:	425b      	negs	r3, r3
 801497e:	401a      	ands	r2, r3
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	699b      	ldr	r3, [r3, #24]
 8014988:	683a      	ldr	r2, [r7, #0]
 801498a:	1ad3      	subs	r3, r2, r3
 801498c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	69db      	ldr	r3, [r3, #28]
 8014992:	63bb      	str	r3, [r7, #56]	; 0x38
 8014994:	e022      	b.n	80149dc <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	689b      	ldr	r3, [r3, #8]
 801499a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d119      	bne.n	80149d6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2100      	movs	r1, #0
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7fe fa28 	bl	8012dfc <create_chain>
 80149ac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80149ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	d104      	bne.n	80149be <f_lseek+0x28a>
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2202      	movs	r2, #2
 80149b8:	755a      	strb	r2, [r3, #21]
 80149ba:	2302      	movs	r3, #2
 80149bc:	e0bf      	b.n	8014b3e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80149be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149c4:	d104      	bne.n	80149d0 <f_lseek+0x29c>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2201      	movs	r2, #1
 80149ca:	755a      	strb	r2, [r3, #21]
 80149cc:	2301      	movs	r3, #1
 80149ce:	e0b6      	b.n	8014b3e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149d4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149da:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80149dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d05d      	beq.n	8014a9e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80149e2:	e03a      	b.n	8014a5a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80149e4:	683a      	ldr	r2, [r7, #0]
 80149e6:	69fb      	ldr	r3, [r7, #28]
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	603b      	str	r3, [r7, #0]
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	699a      	ldr	r2, [r3, #24]
 80149f0:	69fb      	ldr	r3, [r7, #28]
 80149f2:	441a      	add	r2, r3
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	7d1b      	ldrb	r3, [r3, #20]
 80149fc:	f003 0302 	and.w	r3, r3, #2
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d00b      	beq.n	8014a1c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7fe f9f7 	bl	8012dfc <create_chain>
 8014a0e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d108      	bne.n	8014a28 <f_lseek+0x2f4>
							ofs = 0; break;
 8014a16:	2300      	movs	r3, #0
 8014a18:	603b      	str	r3, [r7, #0]
 8014a1a:	e022      	b.n	8014a62 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7fd fff2 	bl	8012a0a <get_fat>
 8014a26:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a2e:	d104      	bne.n	8014a3a <f_lseek+0x306>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2201      	movs	r2, #1
 8014a34:	755a      	strb	r2, [r3, #21]
 8014a36:	2301      	movs	r3, #1
 8014a38:	e081      	b.n	8014b3e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d904      	bls.n	8014a4a <f_lseek+0x316>
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	695b      	ldr	r3, [r3, #20]
 8014a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d304      	bcc.n	8014a54 <f_lseek+0x320>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2202      	movs	r2, #2
 8014a4e:	755a      	strb	r2, [r3, #21]
 8014a50:	2302      	movs	r3, #2
 8014a52:	e074      	b.n	8014b3e <f_lseek+0x40a>
					fp->clust = clst;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a58:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014a5a:	683a      	ldr	r2, [r7, #0]
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d8c0      	bhi.n	80149e4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	699a      	ldr	r2, [r3, #24]
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	441a      	add	r2, r3
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d012      	beq.n	8014a9e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7fd ffa5 	bl	80129cc <clust2sect>
 8014a82:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d104      	bne.n	8014a94 <f_lseek+0x360>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2202      	movs	r2, #2
 8014a8e:	755a      	strb	r2, [r3, #21]
 8014a90:	2302      	movs	r3, #2
 8014a92:	e054      	b.n	8014b3e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	0a5b      	lsrs	r3, r3, #9
 8014a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a9a:	4413      	add	r3, r2
 8014a9c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	699a      	ldr	r2, [r3, #24]
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	68db      	ldr	r3, [r3, #12]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d90a      	bls.n	8014ac0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	699a      	ldr	r2, [r3, #24]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	7d1b      	ldrb	r3, [r3, #20]
 8014ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	699b      	ldr	r3, [r3, #24]
 8014ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d036      	beq.n	8014b3a <f_lseek+0x406>
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6a1b      	ldr	r3, [r3, #32]
 8014ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d031      	beq.n	8014b3a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	7d1b      	ldrb	r3, [r3, #20]
 8014ada:	b25b      	sxtb	r3, r3
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	da18      	bge.n	8014b12 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	7858      	ldrb	r0, [r3, #1]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a1a      	ldr	r2, [r3, #32]
 8014aee:	2301      	movs	r3, #1
 8014af0:	f7fd fbe2 	bl	80122b8 <disk_write>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d004      	beq.n	8014b04 <f_lseek+0x3d0>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2201      	movs	r2, #1
 8014afe:	755a      	strb	r2, [r3, #21]
 8014b00:	2301      	movs	r3, #1
 8014b02:	e01c      	b.n	8014b3e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	7d1b      	ldrb	r3, [r3, #20]
 8014b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b0c:	b2da      	uxtb	r2, r3
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	7858      	ldrb	r0, [r3, #1]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b20:	f7fd fbaa 	bl	8012278 <disk_read>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d004      	beq.n	8014b34 <f_lseek+0x400>
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	755a      	strb	r2, [r3, #21]
 8014b30:	2301      	movs	r3, #1
 8014b32:	e004      	b.n	8014b3e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b38:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014b3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3740      	adds	r7, #64	; 0x40
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
	...

08014b48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b087      	sub	sp, #28
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	60b9      	str	r1, [r7, #8]
 8014b52:	4613      	mov	r3, r2
 8014b54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014b56:	2301      	movs	r3, #1
 8014b58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014b5e:	4b1f      	ldr	r3, [pc, #124]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b60:	7a5b      	ldrb	r3, [r3, #9]
 8014b62:	b2db      	uxtb	r3, r3
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d131      	bne.n	8014bcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014b68:	4b1c      	ldr	r3, [pc, #112]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b6a:	7a5b      	ldrb	r3, [r3, #9]
 8014b6c:	b2db      	uxtb	r3, r3
 8014b6e:	461a      	mov	r2, r3
 8014b70:	4b1a      	ldr	r3, [pc, #104]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b72:	2100      	movs	r1, #0
 8014b74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014b76:	4b19      	ldr	r3, [pc, #100]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b78:	7a5b      	ldrb	r3, [r3, #9]
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	4a17      	ldr	r2, [pc, #92]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	4413      	add	r3, r2
 8014b82:	68fa      	ldr	r2, [r7, #12]
 8014b84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014b86:	4b15      	ldr	r3, [pc, #84]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b88:	7a5b      	ldrb	r3, [r3, #9]
 8014b8a:	b2db      	uxtb	r3, r3
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	4b13      	ldr	r3, [pc, #76]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b90:	4413      	add	r3, r2
 8014b92:	79fa      	ldrb	r2, [r7, #7]
 8014b94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014b96:	4b11      	ldr	r3, [pc, #68]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014b98:	7a5b      	ldrb	r3, [r3, #9]
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	1c5a      	adds	r2, r3, #1
 8014b9e:	b2d1      	uxtb	r1, r2
 8014ba0:	4a0e      	ldr	r2, [pc, #56]	; (8014bdc <FATFS_LinkDriverEx+0x94>)
 8014ba2:	7251      	strb	r1, [r2, #9]
 8014ba4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014ba6:	7dbb      	ldrb	r3, [r7, #22]
 8014ba8:	3330      	adds	r3, #48	; 0x30
 8014baa:	b2da      	uxtb	r2, r3
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	223a      	movs	r2, #58	; 0x3a
 8014bb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	3302      	adds	r3, #2
 8014bbc:	222f      	movs	r2, #47	; 0x2f
 8014bbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	3303      	adds	r3, #3
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	371c      	adds	r7, #28
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd8:	4770      	bx	lr
 8014bda:	bf00      	nop
 8014bdc:	20000a40 	.word	0x20000a40

08014be0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014bea:	2200      	movs	r2, #0
 8014bec:	6839      	ldr	r1, [r7, #0]
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f7ff ffaa 	bl	8014b48 <FATFS_LinkDriverEx>
 8014bf4:	4603      	mov	r3, r0
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3708      	adds	r7, #8
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}

08014bfe <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014bfe:	b580      	push	{r7, lr}
 8014c00:	b086      	sub	sp, #24
 8014c02:	af02      	add	r7, sp, #8
 8014c04:	60f8      	str	r0, [r7, #12]
 8014c06:	4608      	mov	r0, r1
 8014c08:	4611      	mov	r1, r2
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	817b      	strh	r3, [r7, #10]
 8014c10:	460b      	mov	r3, r1
 8014c12:	813b      	strh	r3, [r7, #8]
 8014c14:	4613      	mov	r3, r2
 8014c16:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014c18:	897a      	ldrh	r2, [r7, #10]
 8014c1a:	88fb      	ldrh	r3, [r7, #6]
 8014c1c:	4413      	add	r3, r2
 8014c1e:	b298      	uxth	r0, r3
 8014c20:	893a      	ldrh	r2, [r7, #8]
 8014c22:	8b3b      	ldrh	r3, [r7, #24]
 8014c24:	4413      	add	r3, r2
 8014c26:	b29b      	uxth	r3, r3
 8014c28:	893a      	ldrh	r2, [r7, #8]
 8014c2a:	8979      	ldrh	r1, [r7, #10]
 8014c2c:	9300      	str	r3, [sp, #0]
 8014c2e:	4603      	mov	r3, r0
 8014c30:	68f8      	ldr	r0, [r7, #12]
 8014c32:	f001 f8a1 	bl	8015d78 <u8g2_IsIntersection>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d012      	beq.n	8014c62 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8014c3c:	e00d      	b.n	8014c5a <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c3e:	88fb      	ldrh	r3, [r7, #6]
 8014c40:	893a      	ldrh	r2, [r7, #8]
 8014c42:	8979      	ldrh	r1, [r7, #10]
 8014c44:	2000      	movs	r0, #0
 8014c46:	9000      	str	r0, [sp, #0]
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f000 ffa4 	bl	8015b96 <u8g2_DrawHVLine>
    y++;    
 8014c4e:	893b      	ldrh	r3, [r7, #8]
 8014c50:	3301      	adds	r3, #1
 8014c52:	813b      	strh	r3, [r7, #8]
    h--;
 8014c54:	8b3b      	ldrh	r3, [r7, #24]
 8014c56:	3b01      	subs	r3, #1
 8014c58:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8014c5a:	8b3b      	ldrh	r3, [r7, #24]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d1ee      	bne.n	8014c3e <u8g2_DrawBox+0x40>
 8014c60:	e000      	b.n	8014c64 <u8g2_DrawBox+0x66>
    return;
 8014c62:	bf00      	nop
  }
}
 8014c64:	3710      	adds	r7, #16
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}

08014c6a <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014c6a:	b580      	push	{r7, lr}
 8014c6c:	b088      	sub	sp, #32
 8014c6e:	af02      	add	r7, sp, #8
 8014c70:	60f8      	str	r0, [r7, #12]
 8014c72:	4608      	mov	r0, r1
 8014c74:	4611      	mov	r1, r2
 8014c76:	461a      	mov	r2, r3
 8014c78:	4603      	mov	r3, r0
 8014c7a:	817b      	strh	r3, [r7, #10]
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	813b      	strh	r3, [r7, #8]
 8014c80:	4613      	mov	r3, r2
 8014c82:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8014c84:	897b      	ldrh	r3, [r7, #10]
 8014c86:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014c88:	897a      	ldrh	r2, [r7, #10]
 8014c8a:	88fb      	ldrh	r3, [r7, #6]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	b298      	uxth	r0, r3
 8014c90:	893a      	ldrh	r2, [r7, #8]
 8014c92:	8c3b      	ldrh	r3, [r7, #32]
 8014c94:	4413      	add	r3, r2
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	893a      	ldrh	r2, [r7, #8]
 8014c9a:	8979      	ldrh	r1, [r7, #10]
 8014c9c:	9300      	str	r3, [sp, #0]
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	68f8      	ldr	r0, [r7, #12]
 8014ca2:	f001 f869 	bl	8015d78 <u8g2_IsIntersection>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d037      	beq.n	8014d1c <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014cac:	88fb      	ldrh	r3, [r7, #6]
 8014cae:	893a      	ldrh	r2, [r7, #8]
 8014cb0:	8979      	ldrh	r1, [r7, #10]
 8014cb2:	2000      	movs	r0, #0
 8014cb4:	9000      	str	r0, [sp, #0]
 8014cb6:	68f8      	ldr	r0, [r7, #12]
 8014cb8:	f000 ff6d 	bl	8015b96 <u8g2_DrawHVLine>
  if (h >= 2) {
 8014cbc:	8c3b      	ldrh	r3, [r7, #32]
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	d92d      	bls.n	8014d1e <u8g2_DrawFrame+0xb4>
    h-=2;
 8014cc2:	8c3b      	ldrh	r3, [r7, #32]
 8014cc4:	3b02      	subs	r3, #2
 8014cc6:	843b      	strh	r3, [r7, #32]
    y++;
 8014cc8:	893b      	ldrh	r3, [r7, #8]
 8014cca:	3301      	adds	r3, #1
 8014ccc:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8014cce:	8c3b      	ldrh	r3, [r7, #32]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d01a      	beq.n	8014d0a <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014cd4:	8c3b      	ldrh	r3, [r7, #32]
 8014cd6:	893a      	ldrh	r2, [r7, #8]
 8014cd8:	8979      	ldrh	r1, [r7, #10]
 8014cda:	2001      	movs	r0, #1
 8014cdc:	9000      	str	r0, [sp, #0]
 8014cde:	68f8      	ldr	r0, [r7, #12]
 8014ce0:	f000 ff59 	bl	8015b96 <u8g2_DrawHVLine>
      x+=w;
 8014ce4:	897a      	ldrh	r2, [r7, #10]
 8014ce6:	88fb      	ldrh	r3, [r7, #6]
 8014ce8:	4413      	add	r3, r2
 8014cea:	817b      	strh	r3, [r7, #10]
      x--;
 8014cec:	897b      	ldrh	r3, [r7, #10]
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014cf2:	8c3b      	ldrh	r3, [r7, #32]
 8014cf4:	893a      	ldrh	r2, [r7, #8]
 8014cf6:	8979      	ldrh	r1, [r7, #10]
 8014cf8:	2001      	movs	r0, #1
 8014cfa:	9000      	str	r0, [sp, #0]
 8014cfc:	68f8      	ldr	r0, [r7, #12]
 8014cfe:	f000 ff4a 	bl	8015b96 <u8g2_DrawHVLine>
      y+=h;
 8014d02:	893a      	ldrh	r2, [r7, #8]
 8014d04:	8c3b      	ldrh	r3, [r7, #32]
 8014d06:	4413      	add	r3, r2
 8014d08:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8014d0a:	88fb      	ldrh	r3, [r7, #6]
 8014d0c:	893a      	ldrh	r2, [r7, #8]
 8014d0e:	8af9      	ldrh	r1, [r7, #22]
 8014d10:	2000      	movs	r0, #0
 8014d12:	9000      	str	r0, [sp, #0]
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f000 ff3e 	bl	8015b96 <u8g2_DrawHVLine>
 8014d1a:	e000      	b.n	8014d1e <u8g2_DrawFrame+0xb4>
    return;
 8014d1c:	bf00      	nop
  }
}
 8014d1e:	3718      	adds	r7, #24
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	7c1b      	ldrb	r3, [r3, #16]
 8014d32:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d3a:	461a      	mov	r2, r3
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	fb02 f303 	mul.w	r3, r2, r3
 8014d42:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	00db      	lsls	r3, r3, #3
 8014d48:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d4e:	68fa      	ldr	r2, [r7, #12]
 8014d50:	2100      	movs	r1, #0
 8014d52:	4618      	mov	r0, r3
 8014d54:	f008 fa24 	bl	801d1a0 <memset>
}
 8014d58:	bf00      	nop
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b086      	sub	sp, #24
 8014d64:	af02      	add	r7, sp, #8
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	460b      	mov	r3, r1
 8014d6a:	70fb      	strb	r3, [r7, #3]
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	7c1b      	ldrb	r3, [r3, #16]
 8014d76:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8014d78:	78fb      	ldrb	r3, [r7, #3]
 8014d7a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d80:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8014d82:	7bfb      	ldrb	r3, [r7, #15]
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	89ba      	ldrh	r2, [r7, #12]
 8014d88:	fb12 f303 	smulbb	r3, r2, r3
 8014d8c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8014d8e:	89bb      	ldrh	r3, [r7, #12]
 8014d90:	00db      	lsls	r3, r3, #3
 8014d92:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8014d94:	89bb      	ldrh	r3, [r7, #12]
 8014d96:	68ba      	ldr	r2, [r7, #8]
 8014d98:	4413      	add	r3, r2
 8014d9a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8014d9c:	7bf9      	ldrb	r1, [r7, #15]
 8014d9e:	78ba      	ldrb	r2, [r7, #2]
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	9300      	str	r3, [sp, #0]
 8014da4:	460b      	mov	r3, r1
 8014da6:	2100      	movs	r1, #0
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f001 fd06 	bl	80167ba <u8x8_DrawTile>
}
 8014dae:	bf00      	nop
 8014db0:	3710      	adds	r7, #16
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}

08014db6 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8014db6:	b580      	push	{r7, lr}
 8014db8:	b084      	sub	sp, #16
 8014dba:	af00      	add	r7, sp, #0
 8014dbc:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014dc8:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014dd0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	7c5b      	ldrb	r3, [r3, #17]
 8014dd8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8014dda:	7bba      	ldrb	r2, [r7, #14]
 8014ddc:	7bfb      	ldrb	r3, [r7, #15]
 8014dde:	4619      	mov	r1, r3
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f7ff ffbd 	bl	8014d60 <u8g2_send_tile_row>
    src_row++;
 8014de6:	7bfb      	ldrb	r3, [r7, #15]
 8014de8:	3301      	adds	r3, #1
 8014dea:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8014dec:	7bbb      	ldrb	r3, [r7, #14]
 8014dee:	3301      	adds	r3, #1
 8014df0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8014df2:	7bfa      	ldrb	r2, [r7, #15]
 8014df4:	7b7b      	ldrb	r3, [r7, #13]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d203      	bcs.n	8014e02 <u8g2_send_buffer+0x4c>
 8014dfa:	7bba      	ldrb	r2, [r7, #14]
 8014dfc:	7b3b      	ldrb	r3, [r7, #12]
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d3eb      	bcc.n	8014dda <u8g2_send_buffer+0x24>
}
 8014e02:	bf00      	nop
 8014e04:	3710      	adds	r7, #16
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b082      	sub	sp, #8
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f7ff ffcf 	bl	8014db6 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f001 fd1f 	bl	801685c <u8x8_RefreshDisplay>
}
 8014e1e:	bf00      	nop
 8014e20:	3708      	adds	r7, #8
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}

08014e26 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b082      	sub	sp, #8
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
 8014e2e:	460b      	mov	r3, r1
 8014e30:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	78fa      	ldrb	r2, [r7, #3]
 8014e36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e48:	685b      	ldr	r3, [r3, #4]
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	4798      	blx	r3
}
 8014e4e:	bf00      	nop
 8014e50:	3708      	adds	r7, #8
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}

08014e56 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8014e56:	b580      	push	{r7, lr}
 8014e58:	b082      	sub	sp, #8
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d002      	beq.n	8014e6e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f7ff ff5b 	bl	8014d24 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8014e6e:	2100      	movs	r1, #0
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7ff ffd8 	bl	8014e26 <u8g2_SetBufferCurrTileRow>
}
 8014e76:	bf00      	nop
 8014e78:	3708      	adds	r7, #8
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}

08014e7e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8014e7e:	b580      	push	{r7, lr}
 8014e80:	b084      	sub	sp, #16
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7ff ff95 	bl	8014db6 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014e92:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8014e9a:	7bfb      	ldrb	r3, [r7, #15]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	7c5b      	ldrb	r3, [r3, #17]
 8014ea6:	7bfa      	ldrb	r2, [r7, #15]
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d304      	bcc.n	8014eb6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f001 fcd5 	bl	801685c <u8x8_RefreshDisplay>
    return 0;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	e00d      	b.n	8014ed2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d002      	beq.n	8014ec6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7ff ff2f 	bl	8014d24 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8014ec6:	7bfb      	ldrb	r3, [r7, #15]
 8014ec8:	4619      	mov	r1, r3
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f7ff ffab 	bl	8014e26 <u8g2_SetBufferCurrTileRow>
  return 1;
 8014ed0:	2301      	movs	r3, #1
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3710      	adds	r7, #16
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}

08014eda <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8014eda:	b580      	push	{r7, lr}
 8014edc:	b082      	sub	sp, #8
 8014ede:	af00      	add	r7, sp, #0
 8014ee0:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7ff ffb7 	bl	8014e56 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	f7ff ffc8 	bl	8014e7e <u8g2_NextPage>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d1f9      	bne.n	8014ee8 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8014ef4:	2100      	movs	r1, #0
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f7ff ff95 	bl	8014e26 <u8g2_SetBufferCurrTileRow>
}
 8014efc:	bf00      	nop
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <u8g2_m_30_20_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_30_20_f(uint8_t *page_cnt)
{
 8014f04:	b480      	push	{r7}
 8014f06:	b083      	sub	sp, #12
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 20;
  return 0;
  #else
  static uint8_t buf[4800];
  *page_cnt = 20;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2214      	movs	r2, #20
 8014f10:	701a      	strb	r2, [r3, #0]
  return buf;
 8014f12:	4b03      	ldr	r3, [pc, #12]	; (8014f20 <u8g2_m_30_20_f+0x1c>)
  #endif
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	370c      	adds	r7, #12
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1e:	4770      	bx	lr
 8014f20:	20000a4c 	.word	0x20000a4c

08014f24 <u8g2_Setup_uc1638_240x160_f>:
  buf = u8g2_m_30_20_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1638 f */
void u8g2_Setup_uc1638_240x160_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b088      	sub	sp, #32
 8014f28:	af02      	add	r7, sp, #8
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	607a      	str	r2, [r7, #4]
 8014f30:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1638_240x160, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	4a0b      	ldr	r2, [pc, #44]	; (8014f68 <u8g2_Setup_uc1638_240x160_f+0x44>)
 8014f3a:	490c      	ldr	r1, [pc, #48]	; (8014f6c <u8g2_Setup_uc1638_240x160_f+0x48>)
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	f001 fced 	bl	801691c <u8x8_Setup>
  buf = u8g2_m_30_20_f(&tile_buf_height);
 8014f42:	f107 0313 	add.w	r3, r7, #19
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7ff ffdc 	bl	8014f04 <u8g2_m_30_20_f>
 8014f4c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8014f4e:	7cfa      	ldrb	r2, [r7, #19]
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	9300      	str	r3, [sp, #0]
 8014f54:	4b06      	ldr	r3, [pc, #24]	; (8014f70 <u8g2_Setup_uc1638_240x160_f+0x4c>)
 8014f56:	6979      	ldr	r1, [r7, #20]
 8014f58:	68f8      	ldr	r0, [r7, #12]
 8014f5a:	f000 fff7 	bl	8015f4c <u8g2_SetupBuffer>
}
 8014f5e:	bf00      	nop
 8014f60:	3718      	adds	r7, #24
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	080164b5 	.word	0x080164b5
 8014f6c:	080166b5 	.word	0x080166b5
 8014f70:	08015dcf 	.word	0x08015dcf

08014f74 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8014f80:	78fb      	ldrb	r3, [r7, #3]
 8014f82:	687a      	ldr	r2, [r7, #4]
 8014f84:	4413      	add	r3, r2
 8014f86:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	460b      	mov	r3, r1
 8014fa2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8014fa4:	78fb      	ldrb	r3, [r7, #3]
 8014fa6:	687a      	ldr	r2, [r7, #4]
 8014fa8:	4413      	add	r3, r2
 8014faa:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	81fb      	strh	r3, [r7, #14]
    font++;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8014fb8:	89fb      	ldrh	r3, [r7, #14]
 8014fba:	021b      	lsls	r3, r3, #8
 8014fbc:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	b29a      	uxth	r2, r3
 8014fc4:	89fb      	ldrh	r3, [r7, #14]
 8014fc6:	4413      	add	r3, r2
 8014fc8:	81fb      	strh	r3, [r7, #14]
    return pos;
 8014fca:	89fb      	ldrh	r3, [r7, #14]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3714      	adds	r7, #20
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	6838      	ldr	r0, [r7, #0]
 8014fe6:	f7ff ffc5 	bl	8014f74 <u8g2_font_get_byte>
 8014fea:	4603      	mov	r3, r0
 8014fec:	461a      	mov	r2, r3
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8014ff2:	2101      	movs	r1, #1
 8014ff4:	6838      	ldr	r0, [r7, #0]
 8014ff6:	f7ff ffbd 	bl	8014f74 <u8g2_font_get_byte>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	461a      	mov	r2, r3
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8015002:	2102      	movs	r1, #2
 8015004:	6838      	ldr	r0, [r7, #0]
 8015006:	f7ff ffb5 	bl	8014f74 <u8g2_font_get_byte>
 801500a:	4603      	mov	r3, r0
 801500c:	461a      	mov	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8015012:	2103      	movs	r1, #3
 8015014:	6838      	ldr	r0, [r7, #0]
 8015016:	f7ff ffad 	bl	8014f74 <u8g2_font_get_byte>
 801501a:	4603      	mov	r3, r0
 801501c:	461a      	mov	r2, r3
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8015022:	2104      	movs	r1, #4
 8015024:	6838      	ldr	r0, [r7, #0]
 8015026:	f7ff ffa5 	bl	8014f74 <u8g2_font_get_byte>
 801502a:	4603      	mov	r3, r0
 801502c:	461a      	mov	r2, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8015032:	2105      	movs	r1, #5
 8015034:	6838      	ldr	r0, [r7, #0]
 8015036:	f7ff ff9d 	bl	8014f74 <u8g2_font_get_byte>
 801503a:	4603      	mov	r3, r0
 801503c:	461a      	mov	r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8015042:	2106      	movs	r1, #6
 8015044:	6838      	ldr	r0, [r7, #0]
 8015046:	f7ff ff95 	bl	8014f74 <u8g2_font_get_byte>
 801504a:	4603      	mov	r3, r0
 801504c:	461a      	mov	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8015052:	2107      	movs	r1, #7
 8015054:	6838      	ldr	r0, [r7, #0]
 8015056:	f7ff ff8d 	bl	8014f74 <u8g2_font_get_byte>
 801505a:	4603      	mov	r3, r0
 801505c:	461a      	mov	r2, r3
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8015062:	2108      	movs	r1, #8
 8015064:	6838      	ldr	r0, [r7, #0]
 8015066:	f7ff ff85 	bl	8014f74 <u8g2_font_get_byte>
 801506a:	4603      	mov	r3, r0
 801506c:	461a      	mov	r2, r3
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8015072:	2109      	movs	r1, #9
 8015074:	6838      	ldr	r0, [r7, #0]
 8015076:	f7ff ff7d 	bl	8014f74 <u8g2_font_get_byte>
 801507a:	4603      	mov	r3, r0
 801507c:	b25a      	sxtb	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8015082:	210a      	movs	r1, #10
 8015084:	6838      	ldr	r0, [r7, #0]
 8015086:	f7ff ff75 	bl	8014f74 <u8g2_font_get_byte>
 801508a:	4603      	mov	r3, r0
 801508c:	b25a      	sxtb	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8015092:	210b      	movs	r1, #11
 8015094:	6838      	ldr	r0, [r7, #0]
 8015096:	f7ff ff6d 	bl	8014f74 <u8g2_font_get_byte>
 801509a:	4603      	mov	r3, r0
 801509c:	b25a      	sxtb	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80150a2:	210c      	movs	r1, #12
 80150a4:	6838      	ldr	r0, [r7, #0]
 80150a6:	f7ff ff65 	bl	8014f74 <u8g2_font_get_byte>
 80150aa:	4603      	mov	r3, r0
 80150ac:	b25a      	sxtb	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80150b2:	210d      	movs	r1, #13
 80150b4:	6838      	ldr	r0, [r7, #0]
 80150b6:	f7ff ff5d 	bl	8014f74 <u8g2_font_get_byte>
 80150ba:	4603      	mov	r3, r0
 80150bc:	b25a      	sxtb	r2, r3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80150c2:	210e      	movs	r1, #14
 80150c4:	6838      	ldr	r0, [r7, #0]
 80150c6:	f7ff ff55 	bl	8014f74 <u8g2_font_get_byte>
 80150ca:	4603      	mov	r3, r0
 80150cc:	b25a      	sxtb	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80150d2:	210f      	movs	r1, #15
 80150d4:	6838      	ldr	r0, [r7, #0]
 80150d6:	f7ff ff4d 	bl	8014f74 <u8g2_font_get_byte>
 80150da:	4603      	mov	r3, r0
 80150dc:	b25a      	sxtb	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80150e2:	2110      	movs	r1, #16
 80150e4:	6838      	ldr	r0, [r7, #0]
 80150e6:	f7ff ff45 	bl	8014f74 <u8g2_font_get_byte>
 80150ea:	4603      	mov	r3, r0
 80150ec:	b25a      	sxtb	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80150f2:	2111      	movs	r1, #17
 80150f4:	6838      	ldr	r0, [r7, #0]
 80150f6:	f7ff ff4f 	bl	8014f98 <u8g2_font_get_word>
 80150fa:	4603      	mov	r3, r0
 80150fc:	461a      	mov	r2, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8015102:	2113      	movs	r1, #19
 8015104:	6838      	ldr	r0, [r7, #0]
 8015106:	f7ff ff47 	bl	8014f98 <u8g2_font_get_word>
 801510a:	4603      	mov	r3, r0
 801510c:	461a      	mov	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8015112:	2115      	movs	r1, #21
 8015114:	6838      	ldr	r0, [r7, #0]
 8015116:	f7ff ff3f 	bl	8014f98 <u8g2_font_get_word>
 801511a:	4603      	mov	r3, r0
 801511c:	461a      	mov	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	82da      	strh	r2, [r3, #22]
#endif
}
 8015122:	bf00      	nop
 8015124:	3708      	adds	r7, #8
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}

0801512a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 801512a:	b480      	push	{r7}
 801512c:	b085      	sub	sp, #20
 801512e:	af00      	add	r7, sp, #0
 8015130:	6078      	str	r0, [r7, #4]
 8015132:	460b      	mov	r3, r1
 8015134:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	7b1b      	ldrb	r3, [r3, #12]
 801513a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8015144:	7bfa      	ldrb	r2, [r7, #15]
 8015146:	7b7b      	ldrb	r3, [r7, #13]
 8015148:	fa42 f303 	asr.w	r3, r2, r3
 801514c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 801514e:	7b7b      	ldrb	r3, [r7, #13]
 8015150:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8015152:	7bba      	ldrb	r2, [r7, #14]
 8015154:	78fb      	ldrb	r3, [r7, #3]
 8015156:	4413      	add	r3, r2
 8015158:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 801515a:	7bbb      	ldrb	r3, [r7, #14]
 801515c:	2b07      	cmp	r3, #7
 801515e:	d91a      	bls.n	8015196 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8015160:	2308      	movs	r3, #8
 8015162:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8015164:	7b3a      	ldrb	r2, [r7, #12]
 8015166:	7b7b      	ldrb	r3, [r7, #13]
 8015168:	1ad3      	subs	r3, r2, r3
 801516a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	1c5a      	adds	r2, r3, #1
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	461a      	mov	r2, r3
 801517e:	7b3b      	ldrb	r3, [r7, #12]
 8015180:	fa02 f303 	lsl.w	r3, r2, r3
 8015184:	b25a      	sxtb	r2, r3
 8015186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801518a:	4313      	orrs	r3, r2
 801518c:	b25b      	sxtb	r3, r3
 801518e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8015190:	7bbb      	ldrb	r3, [r7, #14]
 8015192:	3b08      	subs	r3, #8
 8015194:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8015196:	78fb      	ldrb	r3, [r7, #3]
 8015198:	f04f 32ff 	mov.w	r2, #4294967295
 801519c:	fa02 f303 	lsl.w	r3, r2, r3
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	43db      	mvns	r3, r3
 80151a4:	b2da      	uxtb	r2, r3
 80151a6:	7bfb      	ldrb	r3, [r7, #15]
 80151a8:	4013      	ands	r3, r2
 80151aa:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	7bba      	ldrb	r2, [r7, #14]
 80151b0:	731a      	strb	r2, [r3, #12]
  return val;
 80151b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3714      	adds	r7, #20
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr

080151c0 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	460b      	mov	r3, r1
 80151ca:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80151cc:	78fb      	ldrb	r3, [r7, #3]
 80151ce:	4619      	mov	r1, r3
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f7ff ffaa 	bl	801512a <u8g2_font_decode_get_unsigned_bits>
 80151d6:	4603      	mov	r3, r0
 80151d8:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80151da:	2301      	movs	r3, #1
 80151dc:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80151de:	78fb      	ldrb	r3, [r7, #3]
 80151e0:	3b01      	subs	r3, #1
 80151e2:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80151e4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80151e8:	78fb      	ldrb	r3, [r7, #3]
 80151ea:	fa02 f303 	lsl.w	r3, r2, r3
 80151ee:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80151f0:	7bfa      	ldrb	r2, [r7, #15]
 80151f2:	7bbb      	ldrb	r3, [r7, #14]
 80151f4:	1ad3      	subs	r3, r2, r3
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	73fb      	strb	r3, [r7, #15]
  return v;
 80151fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3710      	adds	r7, #16
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}

08015206 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8015206:	b490      	push	{r4, r7}
 8015208:	b082      	sub	sp, #8
 801520a:	af00      	add	r7, sp, #0
 801520c:	4604      	mov	r4, r0
 801520e:	4608      	mov	r0, r1
 8015210:	4611      	mov	r1, r2
 8015212:	461a      	mov	r2, r3
 8015214:	4623      	mov	r3, r4
 8015216:	80fb      	strh	r3, [r7, #6]
 8015218:	4603      	mov	r3, r0
 801521a:	717b      	strb	r3, [r7, #5]
 801521c:	460b      	mov	r3, r1
 801521e:	713b      	strb	r3, [r7, #4]
 8015220:	4613      	mov	r3, r2
 8015222:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8015224:	78fb      	ldrb	r3, [r7, #3]
 8015226:	2b02      	cmp	r3, #2
 8015228:	d014      	beq.n	8015254 <u8g2_add_vector_y+0x4e>
 801522a:	2b02      	cmp	r3, #2
 801522c:	dc19      	bgt.n	8015262 <u8g2_add_vector_y+0x5c>
 801522e:	2b00      	cmp	r3, #0
 8015230:	d002      	beq.n	8015238 <u8g2_add_vector_y+0x32>
 8015232:	2b01      	cmp	r3, #1
 8015234:	d007      	beq.n	8015246 <u8g2_add_vector_y+0x40>
 8015236:	e014      	b.n	8015262 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8015238:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801523c:	b29a      	uxth	r2, r3
 801523e:	88fb      	ldrh	r3, [r7, #6]
 8015240:	4413      	add	r3, r2
 8015242:	80fb      	strh	r3, [r7, #6]
      break;
 8015244:	e014      	b.n	8015270 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8015246:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801524a:	b29a      	uxth	r2, r3
 801524c:	88fb      	ldrh	r3, [r7, #6]
 801524e:	4413      	add	r3, r2
 8015250:	80fb      	strh	r3, [r7, #6]
      break;
 8015252:	e00d      	b.n	8015270 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8015254:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015258:	b29b      	uxth	r3, r3
 801525a:	88fa      	ldrh	r2, [r7, #6]
 801525c:	1ad3      	subs	r3, r2, r3
 801525e:	80fb      	strh	r3, [r7, #6]
      break;
 8015260:	e006      	b.n	8015270 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8015262:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015266:	b29b      	uxth	r3, r3
 8015268:	88fa      	ldrh	r2, [r7, #6]
 801526a:	1ad3      	subs	r3, r2, r3
 801526c:	80fb      	strh	r3, [r7, #6]
      break;      
 801526e:	bf00      	nop
  }
  return dy;
 8015270:	88fb      	ldrh	r3, [r7, #6]
}
 8015272:	4618      	mov	r0, r3
 8015274:	3708      	adds	r7, #8
 8015276:	46bd      	mov	sp, r7
 8015278:	bc90      	pop	{r4, r7}
 801527a:	4770      	bx	lr

0801527c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 801527c:	b490      	push	{r4, r7}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	4604      	mov	r4, r0
 8015284:	4608      	mov	r0, r1
 8015286:	4611      	mov	r1, r2
 8015288:	461a      	mov	r2, r3
 801528a:	4623      	mov	r3, r4
 801528c:	80fb      	strh	r3, [r7, #6]
 801528e:	4603      	mov	r3, r0
 8015290:	717b      	strb	r3, [r7, #5]
 8015292:	460b      	mov	r3, r1
 8015294:	713b      	strb	r3, [r7, #4]
 8015296:	4613      	mov	r3, r2
 8015298:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 801529a:	78fb      	ldrb	r3, [r7, #3]
 801529c:	2b02      	cmp	r3, #2
 801529e:	d014      	beq.n	80152ca <u8g2_add_vector_x+0x4e>
 80152a0:	2b02      	cmp	r3, #2
 80152a2:	dc19      	bgt.n	80152d8 <u8g2_add_vector_x+0x5c>
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d002      	beq.n	80152ae <u8g2_add_vector_x+0x32>
 80152a8:	2b01      	cmp	r3, #1
 80152aa:	d007      	beq.n	80152bc <u8g2_add_vector_x+0x40>
 80152ac:	e014      	b.n	80152d8 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80152ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80152b2:	b29a      	uxth	r2, r3
 80152b4:	88fb      	ldrh	r3, [r7, #6]
 80152b6:	4413      	add	r3, r2
 80152b8:	80fb      	strh	r3, [r7, #6]
      break;
 80152ba:	e014      	b.n	80152e6 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80152bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80152c0:	b29b      	uxth	r3, r3
 80152c2:	88fa      	ldrh	r2, [r7, #6]
 80152c4:	1ad3      	subs	r3, r2, r3
 80152c6:	80fb      	strh	r3, [r7, #6]
      break;
 80152c8:	e00d      	b.n	80152e6 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80152ca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	88fa      	ldrh	r2, [r7, #6]
 80152d2:	1ad3      	subs	r3, r2, r3
 80152d4:	80fb      	strh	r3, [r7, #6]
      break;
 80152d6:	e006      	b.n	80152e6 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80152d8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80152dc:	b29a      	uxth	r2, r3
 80152de:	88fb      	ldrh	r3, [r7, #6]
 80152e0:	4413      	add	r3, r2
 80152e2:	80fb      	strh	r3, [r7, #6]
      break;      
 80152e4:	bf00      	nop
  }
  return dx;
 80152e6:	88fb      	ldrh	r3, [r7, #6]
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bc90      	pop	{r4, r7}
 80152f0:	4770      	bx	lr

080152f2 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b088      	sub	sp, #32
 80152f6:	af02      	add	r7, sp, #8
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	460b      	mov	r3, r1
 80152fc:	70fb      	strb	r3, [r7, #3]
 80152fe:	4613      	mov	r3, r2
 8015300:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	3360      	adds	r3, #96	; 0x60
 8015306:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8015308:	78fb      	ldrb	r3, [r7, #3]
 801530a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015312:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801531a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015322:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8015324:	7bfa      	ldrb	r2, [r7, #15]
 8015326:	7d7b      	ldrb	r3, [r7, #21]
 8015328:	1ad3      	subs	r3, r2, r3
 801532a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 801532c:	7bfb      	ldrb	r3, [r7, #15]
 801532e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8015330:	7dfa      	ldrb	r2, [r7, #23]
 8015332:	7bfb      	ldrb	r3, [r7, #15]
 8015334:	429a      	cmp	r2, r3
 8015336:	d201      	bcs.n	801533c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8015338:	7dfb      	ldrb	r3, [r7, #23]
 801533a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	889b      	ldrh	r3, [r3, #4]
 8015340:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	88db      	ldrh	r3, [r3, #6]
 8015346:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8015348:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801534c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	7c1b      	ldrb	r3, [r3, #16]
 8015354:	89b8      	ldrh	r0, [r7, #12]
 8015356:	f7ff ff91 	bl	801527c <u8g2_add_vector_x>
 801535a:	4603      	mov	r3, r0
 801535c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 801535e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8015362:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015366:	693b      	ldr	r3, [r7, #16]
 8015368:	7c1b      	ldrb	r3, [r3, #16]
 801536a:	8978      	ldrh	r0, [r7, #10]
 801536c:	f7ff ff4b 	bl	8015206 <u8g2_add_vector_y>
 8015370:	4603      	mov	r3, r0
 8015372:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8015374:	78bb      	ldrb	r3, [r7, #2]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d010      	beq.n	801539c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 801537a:	693b      	ldr	r3, [r7, #16]
 801537c:	7b9a      	ldrb	r2, [r3, #14]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8015384:	7dbb      	ldrb	r3, [r7, #22]
 8015386:	b298      	uxth	r0, r3
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	7c1b      	ldrb	r3, [r3, #16]
 801538c:	897a      	ldrh	r2, [r7, #10]
 801538e:	89b9      	ldrh	r1, [r7, #12]
 8015390:	9300      	str	r3, [sp, #0]
 8015392:	4603      	mov	r3, r0
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f000 fbfe 	bl	8015b96 <u8g2_DrawHVLine>
 801539a:	e013      	b.n	80153c4 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	7b5b      	ldrb	r3, [r3, #13]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d10f      	bne.n	80153c4 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	7bda      	ldrb	r2, [r3, #15]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80153ae:	7dbb      	ldrb	r3, [r7, #22]
 80153b0:	b298      	uxth	r0, r3
 80153b2:	693b      	ldr	r3, [r7, #16]
 80153b4:	7c1b      	ldrb	r3, [r3, #16]
 80153b6:	897a      	ldrh	r2, [r7, #10]
 80153b8:	89b9      	ldrh	r1, [r7, #12]
 80153ba:	9300      	str	r3, [sp, #0]
 80153bc:	4603      	mov	r3, r0
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f000 fbe9 	bl	8015b96 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80153c4:	7dfa      	ldrb	r2, [r7, #23]
 80153c6:	7bfb      	ldrb	r3, [r7, #15]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d309      	bcc.n	80153e0 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80153cc:	7dfa      	ldrb	r2, [r7, #23]
 80153ce:	7bfb      	ldrb	r3, [r7, #15]
 80153d0:	1ad3      	subs	r3, r2, r3
 80153d2:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80153d4:	2300      	movs	r3, #0
 80153d6:	757b      	strb	r3, [r7, #21]
    ly++;
 80153d8:	7d3b      	ldrb	r3, [r7, #20]
 80153da:	3301      	adds	r3, #1
 80153dc:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80153de:	e79d      	b.n	801531c <u8g2_font_decode_len+0x2a>
      break;
 80153e0:	bf00      	nop
  }
  lx += cnt;
 80153e2:	7d7a      	ldrb	r2, [r7, #21]
 80153e4:	7dfb      	ldrb	r3, [r7, #23]
 80153e6:	4413      	add	r3, r2
 80153e8:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80153ea:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80153ee:	693b      	ldr	r3, [r7, #16]
 80153f0:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80153f2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	725a      	strb	r2, [r3, #9]
  
}
 80153fa:	bf00      	nop
 80153fc:	3718      	adds	r7, #24
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}

08015402 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8015402:	b580      	push	{r7, lr}
 8015404:	b084      	sub	sp, #16
 8015406:	af00      	add	r7, sp, #0
 8015408:	6078      	str	r0, [r7, #4]
 801540a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	3360      	adds	r3, #96	; 0x60
 8015410:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	683a      	ldr	r2, [r7, #0]
 8015416:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2200      	movs	r2, #0
 801541c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8015424:	4619      	mov	r1, r3
 8015426:	68f8      	ldr	r0, [r7, #12]
 8015428:	f7ff fe7f 	bl	801512a <u8g2_font_decode_get_unsigned_bits>
 801542c:	4603      	mov	r3, r0
 801542e:	b25a      	sxtb	r2, r3
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801543a:	4619      	mov	r1, r3
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f7ff fe74 	bl	801512a <u8g2_font_decode_get_unsigned_bits>
 8015442:	4603      	mov	r3, r0
 8015444:	b25a      	sxtb	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	7b9b      	ldrb	r3, [r3, #14]
 8015458:	2b00      	cmp	r3, #0
 801545a:	bf0c      	ite	eq
 801545c:	2301      	moveq	r3, #1
 801545e:	2300      	movne	r3, #0
 8015460:	b2db      	uxtb	r3, r3
 8015462:	461a      	mov	r2, r3
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	73da      	strb	r2, [r3, #15]
}
 8015468:	bf00      	nop
 801546a:	3710      	adds	r7, #16
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b08a      	sub	sp, #40	; 0x28
 8015474:	af02      	add	r7, sp, #8
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	3360      	adds	r3, #96	; 0x60
 801547e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8015480:	6839      	ldr	r1, [r7, #0]
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f7ff ffbd 	bl	8015402 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801548e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8015496:	4619      	mov	r1, r3
 8015498:	6978      	ldr	r0, [r7, #20]
 801549a:	f7ff fe91 	bl	80151c0 <u8g2_font_decode_get_signed_bits>
 801549e:	4603      	mov	r3, r0
 80154a0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80154a8:	4619      	mov	r1, r3
 80154aa:	6978      	ldr	r0, [r7, #20]
 80154ac:	f7ff fe88 	bl	80151c0 <u8g2_font_decode_get_signed_bits>
 80154b0:	4603      	mov	r3, r0
 80154b2:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80154ba:	4619      	mov	r1, r3
 80154bc:	6978      	ldr	r0, [r7, #20]
 80154be:	f7ff fe7f 	bl	80151c0 <u8g2_font_decode_get_signed_bits>
 80154c2:	4603      	mov	r3, r0
 80154c4:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	f340 80d7 	ble.w	8015680 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	8898      	ldrh	r0, [r3, #4]
 80154d6:	7cfa      	ldrb	r2, [r7, #19]
 80154d8:	7c7b      	ldrb	r3, [r7, #17]
 80154da:	4413      	add	r3, r2
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	425b      	negs	r3, r3
 80154e0:	b2db      	uxtb	r3, r3
 80154e2:	b25a      	sxtb	r2, r3
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	7c1b      	ldrb	r3, [r3, #16]
 80154e8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80154ec:	f7ff fec6 	bl	801527c <u8g2_add_vector_x>
 80154f0:	4603      	mov	r3, r0
 80154f2:	461a      	mov	r2, r3
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	88d8      	ldrh	r0, [r3, #6]
 80154fc:	7cfa      	ldrb	r2, [r7, #19]
 80154fe:	7c7b      	ldrb	r3, [r7, #17]
 8015500:	4413      	add	r3, r2
 8015502:	b2db      	uxtb	r3, r3
 8015504:	425b      	negs	r3, r3
 8015506:	b2db      	uxtb	r3, r3
 8015508:	b25a      	sxtb	r2, r3
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	7c1b      	ldrb	r3, [r3, #16]
 801550e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8015512:	f7ff fe78 	bl	8015206 <u8g2_add_vector_y>
 8015516:	4603      	mov	r3, r0
 8015518:	461a      	mov	r2, r3
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	889b      	ldrh	r3, [r3, #4]
 8015522:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	88db      	ldrh	r3, [r3, #6]
 8015528:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 801552a:	8bfb      	ldrh	r3, [r7, #30]
 801552c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 801552e:	8b7b      	ldrh	r3, [r7, #26]
 8015530:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	7c1b      	ldrb	r3, [r3, #16]
 8015536:	2b03      	cmp	r3, #3
 8015538:	d85a      	bhi.n	80155f0 <u8g2_font_decode_glyph+0x180>
 801553a:	a201      	add	r2, pc, #4	; (adr r2, 8015540 <u8g2_font_decode_glyph+0xd0>)
 801553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015540:	08015551 	.word	0x08015551
 8015544:	0801556d 	.word	0x0801556d
 8015548:	08015595 	.word	0x08015595
 801554c:	080155c9 	.word	0x080155c9
      {
	case 0:
	    x1 += decode->glyph_width;
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015556:	b29a      	uxth	r2, r3
 8015558:	8bbb      	ldrh	r3, [r7, #28]
 801555a:	4413      	add	r3, r2
 801555c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 801555e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015562:	b29a      	uxth	r2, r3
 8015564:	8b3b      	ldrh	r3, [r7, #24]
 8015566:	4413      	add	r3, r2
 8015568:	833b      	strh	r3, [r7, #24]
	    break;
 801556a:	e041      	b.n	80155f0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 801556c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015570:	b29b      	uxth	r3, r3
 8015572:	8bfa      	ldrh	r2, [r7, #30]
 8015574:	1ad3      	subs	r3, r2, r3
 8015576:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015578:	8bfb      	ldrh	r3, [r7, #30]
 801557a:	3301      	adds	r3, #1
 801557c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 801557e:	8bbb      	ldrh	r3, [r7, #28]
 8015580:	3301      	adds	r3, #1
 8015582:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801558a:	b29a      	uxth	r2, r3
 801558c:	8b3b      	ldrh	r3, [r7, #24]
 801558e:	4413      	add	r3, r2
 8015590:	833b      	strh	r3, [r7, #24]
	    break;
 8015592:	e02d      	b.n	80155f0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801559a:	b29b      	uxth	r3, r3
 801559c:	8bfa      	ldrh	r2, [r7, #30]
 801559e:	1ad3      	subs	r3, r2, r3
 80155a0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155a2:	8bfb      	ldrh	r3, [r7, #30]
 80155a4:	3301      	adds	r3, #1
 80155a6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80155a8:	8bbb      	ldrh	r3, [r7, #28]
 80155aa:	3301      	adds	r3, #1
 80155ac:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80155ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	8b7a      	ldrh	r2, [r7, #26]
 80155b6:	1ad3      	subs	r3, r2, r3
 80155b8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155ba:	8b7b      	ldrh	r3, [r7, #26]
 80155bc:	3301      	adds	r3, #1
 80155be:	837b      	strh	r3, [r7, #26]
	    y1++;
 80155c0:	8b3b      	ldrh	r3, [r7, #24]
 80155c2:	3301      	adds	r3, #1
 80155c4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80155c6:	e013      	b.n	80155f0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80155c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155cc:	b29a      	uxth	r2, r3
 80155ce:	8bbb      	ldrh	r3, [r7, #28]
 80155d0:	4413      	add	r3, r2
 80155d2:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155da:	b29b      	uxth	r3, r3
 80155dc:	8b7a      	ldrh	r2, [r7, #26]
 80155de:	1ad3      	subs	r3, r2, r3
 80155e0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155e2:	8b7b      	ldrh	r3, [r7, #26]
 80155e4:	3301      	adds	r3, #1
 80155e6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80155e8:	8b3b      	ldrh	r3, [r7, #24]
 80155ea:	3301      	adds	r3, #1
 80155ec:	833b      	strh	r3, [r7, #24]
	    break;	  
 80155ee:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80155f0:	8bb8      	ldrh	r0, [r7, #28]
 80155f2:	8b7a      	ldrh	r2, [r7, #26]
 80155f4:	8bf9      	ldrh	r1, [r7, #30]
 80155f6:	8b3b      	ldrh	r3, [r7, #24]
 80155f8:	9300      	str	r3, [sp, #0]
 80155fa:	4603      	mov	r3, r0
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 fbbb 	bl	8015d78 <u8g2_IsIntersection>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d102      	bne.n	801560e <u8g2_font_decode_glyph+0x19e>
	return d;
 8015608:	f997 3010 	ldrsb.w	r3, [r7, #16]
 801560c:	e03a      	b.n	8015684 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	2200      	movs	r2, #0
 8015612:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	2200      	movs	r2, #0
 8015618:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8015620:	4619      	mov	r1, r3
 8015622:	6978      	ldr	r0, [r7, #20]
 8015624:	f7ff fd81 	bl	801512a <u8g2_font_decode_get_unsigned_bits>
 8015628:	4603      	mov	r3, r0
 801562a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8015632:	4619      	mov	r1, r3
 8015634:	6978      	ldr	r0, [r7, #20]
 8015636:	f7ff fd78 	bl	801512a <u8g2_font_decode_get_unsigned_bits>
 801563a:	4603      	mov	r3, r0
 801563c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 801563e:	7bfb      	ldrb	r3, [r7, #15]
 8015640:	2200      	movs	r2, #0
 8015642:	4619      	mov	r1, r3
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f7ff fe54 	bl	80152f2 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 801564a:	7bbb      	ldrb	r3, [r7, #14]
 801564c:	2201      	movs	r2, #1
 801564e:	4619      	mov	r1, r3
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f7ff fe4e 	bl	80152f2 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8015656:	2101      	movs	r1, #1
 8015658:	6978      	ldr	r0, [r7, #20]
 801565a:	f7ff fd66 	bl	801512a <u8g2_font_decode_get_unsigned_bits>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d1ec      	bne.n	801563e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801566a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801566e:	429a      	cmp	r2, r3
 8015670:	dd00      	ble.n	8015674 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8015672:	e7d2      	b.n	801561a <u8g2_font_decode_glyph+0x1aa>
	break;
 8015674:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	7b9a      	ldrb	r2, [r3, #14]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8015680:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8015684:	4618      	mov	r0, r3
 8015686:	3720      	adds	r7, #32
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b086      	sub	sp, #24
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	460b      	mov	r3, r1
 8015696:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801569c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	3317      	adds	r3, #23
 80156a2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80156a4:	887b      	ldrh	r3, [r7, #2]
 80156a6:	2bff      	cmp	r3, #255	; 0xff
 80156a8:	d82a      	bhi.n	8015700 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80156aa:	887b      	ldrh	r3, [r7, #2]
 80156ac:	2b60      	cmp	r3, #96	; 0x60
 80156ae:	d907      	bls.n	80156c0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80156b6:	461a      	mov	r2, r3
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	4413      	add	r3, r2
 80156bc:	617b      	str	r3, [r7, #20]
 80156be:	e009      	b.n	80156d4 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80156c0:	887b      	ldrh	r3, [r7, #2]
 80156c2:	2b40      	cmp	r3, #64	; 0x40
 80156c4:	d906      	bls.n	80156d4 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80156cc:	461a      	mov	r2, r3
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	4413      	add	r3, r2
 80156d2:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	3301      	adds	r3, #1
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d04e      	beq.n	801577c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	887a      	ldrh	r2, [r7, #2]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d102      	bne.n	80156f0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	3302      	adds	r3, #2
 80156ee:	e049      	b.n	8015784 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	3301      	adds	r3, #1
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	461a      	mov	r2, r3
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	4413      	add	r3, r2
 80156fc:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80156fe:	e7e9      	b.n	80156d4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8015706:	461a      	mov	r2, r3
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	4413      	add	r3, r2
 801570c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8015712:	2100      	movs	r1, #0
 8015714:	6938      	ldr	r0, [r7, #16]
 8015716:	f7ff fc3f 	bl	8014f98 <u8g2_font_get_word>
 801571a:	4603      	mov	r3, r0
 801571c:	461a      	mov	r2, r3
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	4413      	add	r3, r2
 8015722:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8015724:	2102      	movs	r1, #2
 8015726:	6938      	ldr	r0, [r7, #16]
 8015728:	f7ff fc36 	bl	8014f98 <u8g2_font_get_word>
 801572c:	4603      	mov	r3, r0
 801572e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	3304      	adds	r3, #4
 8015734:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8015736:	89fa      	ldrh	r2, [r7, #14]
 8015738:	887b      	ldrh	r3, [r7, #2]
 801573a:	429a      	cmp	r2, r3
 801573c:	d3e9      	bcc.n	8015712 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8015744:	89fb      	ldrh	r3, [r7, #14]
 8015746:	021b      	lsls	r3, r3, #8
 8015748:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	3301      	adds	r3, #1
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	b29a      	uxth	r2, r3
 8015752:	89fb      	ldrh	r3, [r7, #14]
 8015754:	4313      	orrs	r3, r2
 8015756:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8015758:	89fb      	ldrh	r3, [r7, #14]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d010      	beq.n	8015780 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 801575e:	89fa      	ldrh	r2, [r7, #14]
 8015760:	887b      	ldrh	r3, [r7, #2]
 8015762:	429a      	cmp	r2, r3
 8015764:	d102      	bne.n	801576c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	3303      	adds	r3, #3
 801576a:	e00b      	b.n	8015784 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	3302      	adds	r3, #2
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	461a      	mov	r2, r3
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	4413      	add	r3, r2
 8015778:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 801577a:	e7e0      	b.n	801573e <u8g2_font_get_glyph_data+0xb2>
	break;
 801577c:	bf00      	nop
 801577e:	e000      	b.n	8015782 <u8g2_font_get_glyph_data+0xf6>
	break;
 8015780:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8015782:	2300      	movs	r3, #0
}
 8015784:	4618      	mov	r0, r3
 8015786:	3718      	adds	r7, #24
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b086      	sub	sp, #24
 8015790:	af00      	add	r7, sp, #0
 8015792:	60f8      	str	r0, [r7, #12]
 8015794:	4608      	mov	r0, r1
 8015796:	4611      	mov	r1, r2
 8015798:	461a      	mov	r2, r3
 801579a:	4603      	mov	r3, r0
 801579c:	817b      	strh	r3, [r7, #10]
 801579e:	460b      	mov	r3, r1
 80157a0:	813b      	strh	r3, [r7, #8]
 80157a2:	4613      	mov	r3, r2
 80157a4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80157a6:	2300      	movs	r3, #0
 80157a8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	897a      	ldrh	r2, [r7, #10]
 80157ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	893a      	ldrh	r2, [r7, #8]
 80157b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80157ba:	88fb      	ldrh	r3, [r7, #6]
 80157bc:	4619      	mov	r1, r3
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f7ff ff64 	bl	801568c <u8g2_font_get_glyph_data>
 80157c4:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d005      	beq.n	80157d8 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80157cc:	6939      	ldr	r1, [r7, #16]
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	f7ff fe4e 	bl	8015470 <u8g2_font_decode_glyph>
 80157d4:	4603      	mov	r3, r0
 80157d6:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80157d8:	8afb      	ldrh	r3, [r7, #22]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3718      	adds	r7, #24
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
	...

080157e4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b084      	sub	sp, #16
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	4608      	mov	r0, r1
 80157ee:	4611      	mov	r1, r2
 80157f0:	461a      	mov	r2, r3
 80157f2:	4603      	mov	r3, r0
 80157f4:	817b      	strh	r3, [r7, #10]
 80157f6:	460b      	mov	r3, r1
 80157f8:	813b      	strh	r3, [r7, #8]
 80157fa:	4613      	mov	r3, r2
 80157fc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015804:	2b03      	cmp	r3, #3
 8015806:	d833      	bhi.n	8015870 <u8g2_DrawGlyph+0x8c>
 8015808:	a201      	add	r2, pc, #4	; (adr r2, 8015810 <u8g2_DrawGlyph+0x2c>)
 801580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801580e:	bf00      	nop
 8015810:	08015821 	.word	0x08015821
 8015814:	08015835 	.word	0x08015835
 8015818:	08015849 	.word	0x08015849
 801581c:	0801585d 	.word	0x0801585d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015824:	68f8      	ldr	r0, [r7, #12]
 8015826:	4798      	blx	r3
 8015828:	4603      	mov	r3, r0
 801582a:	461a      	mov	r2, r3
 801582c:	893b      	ldrh	r3, [r7, #8]
 801582e:	4413      	add	r3, r2
 8015830:	813b      	strh	r3, [r7, #8]
      break;
 8015832:	e01d      	b.n	8015870 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	4798      	blx	r3
 801583c:	4603      	mov	r3, r0
 801583e:	461a      	mov	r2, r3
 8015840:	897b      	ldrh	r3, [r7, #10]
 8015842:	1a9b      	subs	r3, r3, r2
 8015844:	817b      	strh	r3, [r7, #10]
      break;
 8015846:	e013      	b.n	8015870 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801584c:	68f8      	ldr	r0, [r7, #12]
 801584e:	4798      	blx	r3
 8015850:	4603      	mov	r3, r0
 8015852:	461a      	mov	r2, r3
 8015854:	893b      	ldrh	r3, [r7, #8]
 8015856:	1a9b      	subs	r3, r3, r2
 8015858:	813b      	strh	r3, [r7, #8]
      break;
 801585a:	e009      	b.n	8015870 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015860:	68f8      	ldr	r0, [r7, #12]
 8015862:	4798      	blx	r3
 8015864:	4603      	mov	r3, r0
 8015866:	461a      	mov	r2, r3
 8015868:	897b      	ldrh	r3, [r7, #10]
 801586a:	4413      	add	r3, r2
 801586c:	817b      	strh	r3, [r7, #10]
      break;
 801586e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8015870:	88fb      	ldrh	r3, [r7, #6]
 8015872:	893a      	ldrh	r2, [r7, #8]
 8015874:	8979      	ldrh	r1, [r7, #10]
 8015876:	68f8      	ldr	r0, [r7, #12]
 8015878:	f7ff ff88 	bl	801578c <u8g2_font_draw_glyph>
 801587c:	4603      	mov	r3, r0
}
 801587e:	4618      	mov	r0, r3
 8015880:	3710      	adds	r7, #16
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop

08015888 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b086      	sub	sp, #24
 801588c:	af00      	add	r7, sp, #0
 801588e:	60f8      	str	r0, [r7, #12]
 8015890:	607b      	str	r3, [r7, #4]
 8015892:	460b      	mov	r3, r1
 8015894:	817b      	strh	r3, [r7, #10]
 8015896:	4613      	mov	r3, r2
 8015898:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 801589a:	68f8      	ldr	r0, [r7, #12]
 801589c:	f000 fc99 	bl	80161d2 <u8x8_utf8_init>
  sum = 0;
 80158a0:	2300      	movs	r3, #0
 80158a2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	7812      	ldrb	r2, [r2, #0]
 80158ac:	4611      	mov	r1, r2
 80158ae:	68f8      	ldr	r0, [r7, #12]
 80158b0:	4798      	blx	r3
 80158b2:	4603      	mov	r3, r0
 80158b4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80158b6:	8abb      	ldrh	r3, [r7, #20]
 80158b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158bc:	4293      	cmp	r3, r2
 80158be:	d038      	beq.n	8015932 <u8g2_draw_string+0xaa>
      break;
    str++;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	3301      	adds	r3, #1
 80158c4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80158c6:	8abb      	ldrh	r3, [r7, #20]
 80158c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d0e9      	beq.n	80158a4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80158d0:	8abb      	ldrh	r3, [r7, #20]
 80158d2:	893a      	ldrh	r2, [r7, #8]
 80158d4:	8979      	ldrh	r1, [r7, #10]
 80158d6:	68f8      	ldr	r0, [r7, #12]
 80158d8:	f7ff ff84 	bl	80157e4 <u8g2_DrawGlyph>
 80158dc:	4603      	mov	r3, r0
 80158de:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80158e6:	2b03      	cmp	r3, #3
 80158e8:	d81e      	bhi.n	8015928 <u8g2_draw_string+0xa0>
 80158ea:	a201      	add	r2, pc, #4	; (adr r2, 80158f0 <u8g2_draw_string+0x68>)
 80158ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158f0:	08015901 	.word	0x08015901
 80158f4:	0801590b 	.word	0x0801590b
 80158f8:	08015915 	.word	0x08015915
 80158fc:	0801591f 	.word	0x0801591f
      {
	case 0:
	  x += delta;
 8015900:	897a      	ldrh	r2, [r7, #10]
 8015902:	8a7b      	ldrh	r3, [r7, #18]
 8015904:	4413      	add	r3, r2
 8015906:	817b      	strh	r3, [r7, #10]
	  break;
 8015908:	e00e      	b.n	8015928 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 801590a:	893a      	ldrh	r2, [r7, #8]
 801590c:	8a7b      	ldrh	r3, [r7, #18]
 801590e:	4413      	add	r3, r2
 8015910:	813b      	strh	r3, [r7, #8]
	  break;
 8015912:	e009      	b.n	8015928 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8015914:	897a      	ldrh	r2, [r7, #10]
 8015916:	8a7b      	ldrh	r3, [r7, #18]
 8015918:	1ad3      	subs	r3, r2, r3
 801591a:	817b      	strh	r3, [r7, #10]
	  break;
 801591c:	e004      	b.n	8015928 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 801591e:	893a      	ldrh	r2, [r7, #8]
 8015920:	8a7b      	ldrh	r3, [r7, #18]
 8015922:	1ad3      	subs	r3, r2, r3
 8015924:	813b      	strh	r3, [r7, #8]
	  break;
 8015926:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8015928:	8afa      	ldrh	r2, [r7, #22]
 801592a:	8a7b      	ldrh	r3, [r7, #18]
 801592c:	4413      	add	r3, r2
 801592e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8015930:	e7b8      	b.n	80158a4 <u8g2_draw_string+0x1c>
      break;
 8015932:	bf00      	nop
    }
  }
  return sum;
 8015934:	8afb      	ldrh	r3, [r7, #22]
}
 8015936:	4618      	mov	r0, r3
 8015938:	3718      	adds	r7, #24
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop

08015940 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	60f8      	str	r0, [r7, #12]
 8015948:	607b      	str	r3, [r7, #4]
 801594a:	460b      	mov	r3, r1
 801594c:	817b      	strh	r3, [r7, #10]
 801594e:	4613      	mov	r3, r2
 8015950:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	4a06      	ldr	r2, [pc, #24]	; (8015970 <u8g2_DrawUTF8+0x30>)
 8015956:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8015958:	893a      	ldrh	r2, [r7, #8]
 801595a:	8979      	ldrh	r1, [r7, #10]
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	68f8      	ldr	r0, [r7, #12]
 8015960:	f7ff ff92 	bl	8015888 <u8g2_draw_string>
 8015964:	4603      	mov	r3, r0
}
 8015966:	4618      	mov	r0, r3
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	080161ef 	.word	0x080161ef

08015974 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8015974:	b480      	push	{r7}
 8015976:	b083      	sub	sp, #12
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015980:	2b00      	cmp	r3, #0
 8015982:	d05d      	beq.n	8015a40 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d04d      	beq.n	8015a42 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80159ac:	2b01      	cmp	r3, #1
 80159ae:	d11c      	bne.n	80159ea <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80159bc:	429a      	cmp	r2, r3
 80159be:	da05      	bge.n	80159cc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80159d8:	429a      	cmp	r2, r3
 80159da:	dd32      	ble.n	8015a42 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80159e8:	e02b      	b.n	8015a42 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80159f0:	461a      	mov	r2, r3
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80159f8:	4619      	mov	r1, r3
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a00:	440b      	add	r3, r1
 8015a02:	429a      	cmp	r2, r3
 8015a04:	da0d      	bge.n	8015a22 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015a0c:	b2da      	uxtb	r2, r3
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	4413      	add	r3, r2
 8015a18:	b2db      	uxtb	r3, r3
 8015a1a:	b25a      	sxtb	r2, r3
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	dd07      	ble.n	8015a42 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015a3e:	e000      	b.n	8015a42 <u8g2_UpdateRefHeight+0xce>
    return;
 8015a40:	bf00      	nop
  }  
}
 8015a42:	370c      	adds	r7, #12
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr

08015a4c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  return 0;
 8015a54:	2300      	movs	r3, #0
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	370c      	adds	r7, #12
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a60:	4770      	bx	lr
	...

08015a64 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8015a64:	b480      	push	{r7}
 8015a66:	b083      	sub	sp, #12
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	4a04      	ldr	r2, [pc, #16]	; (8015a80 <u8g2_SetFontPosBaseline+0x1c>)
 8015a70:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8015a72:	bf00      	nop
 8015a74:	370c      	adds	r7, #12
 8015a76:	46bd      	mov	sp, r7
 8015a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop
 8015a80:	08015a4d 	.word	0x08015a4d

08015a84 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a92:	683a      	ldr	r2, [r7, #0]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d00b      	beq.n	8015ab0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	683a      	ldr	r2, [r7, #0]
 8015a9c:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	3374      	adds	r3, #116	; 0x74
 8015aa2:	6839      	ldr	r1, [r7, #0]
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7ff fa97 	bl	8014fd8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f7ff ff62 	bl	8015974 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8015ab0:	bf00      	nop
 8015ab2:	3708      	adds	r7, #8
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bd80      	pop	{r7, pc}

08015ab8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b087      	sub	sp, #28
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	60f8      	str	r0, [r7, #12]
 8015ac0:	60b9      	str	r1, [r7, #8]
 8015ac2:	4611      	mov	r1, r2
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	460b      	mov	r3, r1
 8015ac8:	80fb      	strh	r3, [r7, #6]
 8015aca:	4613      	mov	r3, r2
 8015acc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	881b      	ldrh	r3, [r3, #0]
 8015ad2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8015ad4:	8afb      	ldrh	r3, [r7, #22]
 8015ad6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	881a      	ldrh	r2, [r3, #0]
 8015adc:	8abb      	ldrh	r3, [r7, #20]
 8015ade:	4413      	add	r3, r2
 8015ae0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8015ae2:	8afa      	ldrh	r2, [r7, #22]
 8015ae4:	8abb      	ldrh	r3, [r7, #20]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d90b      	bls.n	8015b02 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8015aea:	8afa      	ldrh	r2, [r7, #22]
 8015aec:	88bb      	ldrh	r3, [r7, #4]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d205      	bcs.n	8015afe <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8015af2:	88bb      	ldrh	r3, [r7, #4]
 8015af4:	82bb      	strh	r3, [r7, #20]
      b--;
 8015af6:	8abb      	ldrh	r3, [r7, #20]
 8015af8:	3b01      	subs	r3, #1
 8015afa:	82bb      	strh	r3, [r7, #20]
 8015afc:	e001      	b.n	8015b02 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8015afe:	88fb      	ldrh	r3, [r7, #6]
 8015b00:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8015b02:	8afa      	ldrh	r2, [r7, #22]
 8015b04:	88bb      	ldrh	r3, [r7, #4]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d301      	bcc.n	8015b0e <u8g2_clip_intersection2+0x56>
    return 0;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	e01c      	b.n	8015b48 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8015b0e:	8aba      	ldrh	r2, [r7, #20]
 8015b10:	88fb      	ldrh	r3, [r7, #6]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d801      	bhi.n	8015b1a <u8g2_clip_intersection2+0x62>
    return 0;
 8015b16:	2300      	movs	r3, #0
 8015b18:	e016      	b.n	8015b48 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8015b1a:	8afa      	ldrh	r2, [r7, #22]
 8015b1c:	88fb      	ldrh	r3, [r7, #6]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d201      	bcs.n	8015b26 <u8g2_clip_intersection2+0x6e>
    a = c;
 8015b22:	88fb      	ldrh	r3, [r7, #6]
 8015b24:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8015b26:	8aba      	ldrh	r2, [r7, #20]
 8015b28:	88bb      	ldrh	r3, [r7, #4]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d901      	bls.n	8015b32 <u8g2_clip_intersection2+0x7a>
    b = d;
 8015b2e:	88bb      	ldrh	r3, [r7, #4]
 8015b30:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	8afa      	ldrh	r2, [r7, #22]
 8015b36:	801a      	strh	r2, [r3, #0]
  b -= a;
 8015b38:	8aba      	ldrh	r2, [r7, #20]
 8015b3a:	8afb      	ldrh	r3, [r7, #22]
 8015b3c:	1ad3      	subs	r3, r2, r3
 8015b3e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	8aba      	ldrh	r2, [r7, #20]
 8015b44:	801a      	strh	r2, [r3, #0]
  return 1;
 8015b46:	2301      	movs	r3, #1
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	371c      	adds	r7, #28
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b52:	4770      	bx	lr

08015b54 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b54:	b590      	push	{r4, r7, lr}
 8015b56:	b087      	sub	sp, #28
 8015b58:	af02      	add	r7, sp, #8
 8015b5a:	60f8      	str	r0, [r7, #12]
 8015b5c:	4608      	mov	r0, r1
 8015b5e:	4611      	mov	r1, r2
 8015b60:	461a      	mov	r2, r3
 8015b62:	4603      	mov	r3, r0
 8015b64:	817b      	strh	r3, [r7, #10]
 8015b66:	460b      	mov	r3, r1
 8015b68:	813b      	strh	r3, [r7, #8]
 8015b6a:	4613      	mov	r3, r2
 8015b6c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015b72:	893a      	ldrh	r2, [r7, #8]
 8015b74:	1ad3      	subs	r3, r2, r3
 8015b76:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015b7c:	88f8      	ldrh	r0, [r7, #6]
 8015b7e:	893a      	ldrh	r2, [r7, #8]
 8015b80:	8979      	ldrh	r1, [r7, #10]
 8015b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b86:	9300      	str	r3, [sp, #0]
 8015b88:	4603      	mov	r3, r0
 8015b8a:	68f8      	ldr	r0, [r7, #12]
 8015b8c:	47a0      	blx	r4
}
 8015b8e:	bf00      	nop
 8015b90:	3714      	adds	r7, #20
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd90      	pop	{r4, r7, pc}

08015b96 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b96:	b590      	push	{r4, r7, lr}
 8015b98:	b087      	sub	sp, #28
 8015b9a:	af02      	add	r7, sp, #8
 8015b9c:	60f8      	str	r0, [r7, #12]
 8015b9e:	4608      	mov	r0, r1
 8015ba0:	4611      	mov	r1, r2
 8015ba2:	461a      	mov	r2, r3
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	817b      	strh	r3, [r7, #10]
 8015ba8:	460b      	mov	r3, r1
 8015baa:	813b      	strh	r3, [r7, #8]
 8015bac:	4613      	mov	r3, r2
 8015bae:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d075      	beq.n	8015ca6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8015bba:	88fb      	ldrh	r3, [r7, #6]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d072      	beq.n	8015ca6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8015bc0:	88fb      	ldrh	r3, [r7, #6]
 8015bc2:	2b01      	cmp	r3, #1
 8015bc4:	d91a      	bls.n	8015bfc <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8015bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bca:	2b02      	cmp	r3, #2
 8015bcc:	d109      	bne.n	8015be2 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8015bce:	897a      	ldrh	r2, [r7, #10]
 8015bd0:	88fb      	ldrh	r3, [r7, #6]
 8015bd2:	1ad3      	subs	r3, r2, r3
 8015bd4:	b29b      	uxth	r3, r3
 8015bd6:	817b      	strh	r3, [r7, #10]
	  x++;
 8015bd8:	897b      	ldrh	r3, [r7, #10]
 8015bda:	3301      	adds	r3, #1
 8015bdc:	b29b      	uxth	r3, r3
 8015bde:	817b      	strh	r3, [r7, #10]
 8015be0:	e00c      	b.n	8015bfc <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8015be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015be6:	2b03      	cmp	r3, #3
 8015be8:	d108      	bne.n	8015bfc <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8015bea:	893a      	ldrh	r2, [r7, #8]
 8015bec:	88fb      	ldrh	r3, [r7, #6]
 8015bee:	1ad3      	subs	r3, r2, r3
 8015bf0:	b29b      	uxth	r3, r3
 8015bf2:	813b      	strh	r3, [r7, #8]
	  y++;
 8015bf4:	893b      	ldrh	r3, [r7, #8]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8015bfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c00:	f003 0301 	and.w	r3, r3, #1
 8015c04:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8015c08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d11a      	bne.n	8015c46 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015c16:	893b      	ldrh	r3, [r7, #8]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d83b      	bhi.n	8015c94 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8015c22:	893b      	ldrh	r3, [r7, #8]
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d937      	bls.n	8015c98 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c34:	1db9      	adds	r1, r7, #6
 8015c36:	f107 000a 	add.w	r0, r7, #10
 8015c3a:	f7ff ff3d 	bl	8015ab8 <u8g2_clip_intersection2>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d11a      	bne.n	8015c7a <u8g2_DrawHVLine+0xe4>
	  return;
 8015c44:	e02f      	b.n	8015ca6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c4c:	897b      	ldrh	r3, [r7, #10]
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d824      	bhi.n	8015c9c <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015c58:	897b      	ldrh	r3, [r7, #10]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d920      	bls.n	8015ca0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015c6a:	1db9      	adds	r1, r7, #6
 8015c6c:	f107 0008 	add.w	r0, r7, #8
 8015c70:	f7ff ff22 	bl	8015ab8 <u8g2_clip_intersection2>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d014      	beq.n	8015ca4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c7e:	689c      	ldr	r4, [r3, #8]
 8015c80:	8979      	ldrh	r1, [r7, #10]
 8015c82:	893a      	ldrh	r2, [r7, #8]
 8015c84:	88f8      	ldrh	r0, [r7, #6]
 8015c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c8a:	9300      	str	r3, [sp, #0]
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	68f8      	ldr	r0, [r7, #12]
 8015c90:	47a0      	blx	r4
 8015c92:	e008      	b.n	8015ca6 <u8g2_DrawHVLine+0x110>
	  return;
 8015c94:	bf00      	nop
 8015c96:	e006      	b.n	8015ca6 <u8g2_DrawHVLine+0x110>
	  return;
 8015c98:	bf00      	nop
 8015c9a:	e004      	b.n	8015ca6 <u8g2_DrawHVLine+0x110>
	  return;
 8015c9c:	bf00      	nop
 8015c9e:	e002      	b.n	8015ca6 <u8g2_DrawHVLine+0x110>
	  return;
 8015ca0:	bf00      	nop
 8015ca2:	e000      	b.n	8015ca6 <u8g2_DrawHVLine+0x110>
	  return;
 8015ca4:	bf00      	nop
    }
}
 8015ca6:	3714      	adds	r7, #20
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd90      	pop	{r4, r7, pc}

08015cac <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b084      	sub	sp, #16
 8015cb0:	af02      	add	r7, sp, #8
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	807b      	strh	r3, [r7, #2]
 8015cb8:	4613      	mov	r3, r2
 8015cba:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015cc2:	883a      	ldrh	r2, [r7, #0]
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d31a      	bcc.n	8015cfe <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015cce:	883a      	ldrh	r2, [r7, #0]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d216      	bcs.n	8015d02 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015cda:	887a      	ldrh	r2, [r7, #2]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d312      	bcc.n	8015d06 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015ce6:	887a      	ldrh	r2, [r7, #2]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d20e      	bcs.n	8015d0a <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8015cec:	883a      	ldrh	r2, [r7, #0]
 8015cee:	8879      	ldrh	r1, [r7, #2]
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	9300      	str	r3, [sp, #0]
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f7ff ff4d 	bl	8015b96 <u8g2_DrawHVLine>
 8015cfc:	e006      	b.n	8015d0c <u8g2_DrawPixel+0x60>
    return;
 8015cfe:	bf00      	nop
 8015d00:	e004      	b.n	8015d0c <u8g2_DrawPixel+0x60>
    return;
 8015d02:	bf00      	nop
 8015d04:	e002      	b.n	8015d0c <u8g2_DrawPixel+0x60>
    return;
 8015d06:	bf00      	nop
 8015d08:	e000      	b.n	8015d0c <u8g2_DrawPixel+0x60>
    return;
 8015d0a:	bf00      	nop
}
 8015d0c:	3708      	adds	r7, #8
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}

08015d12 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8015d12:	b490      	push	{r4, r7}
 8015d14:	b082      	sub	sp, #8
 8015d16:	af00      	add	r7, sp, #0
 8015d18:	4604      	mov	r4, r0
 8015d1a:	4608      	mov	r0, r1
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	461a      	mov	r2, r3
 8015d20:	4623      	mov	r3, r4
 8015d22:	80fb      	strh	r3, [r7, #6]
 8015d24:	4603      	mov	r3, r0
 8015d26:	80bb      	strh	r3, [r7, #4]
 8015d28:	460b      	mov	r3, r1
 8015d2a:	807b      	strh	r3, [r7, #2]
 8015d2c:	4613      	mov	r3, r2
 8015d2e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8015d30:	887a      	ldrh	r2, [r7, #2]
 8015d32:	88bb      	ldrh	r3, [r7, #4]
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d20d      	bcs.n	8015d54 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d38:	883a      	ldrh	r2, [r7, #0]
 8015d3a:	88fb      	ldrh	r3, [r7, #6]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d901      	bls.n	8015d44 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8015d40:	2301      	movs	r3, #1
 8015d42:	e014      	b.n	8015d6e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015d44:	887a      	ldrh	r2, [r7, #2]
 8015d46:	883b      	ldrh	r3, [r7, #0]
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	d901      	bls.n	8015d50 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	e00e      	b.n	8015d6e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015d50:	2300      	movs	r3, #0
 8015d52:	e00c      	b.n	8015d6e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d54:	883a      	ldrh	r2, [r7, #0]
 8015d56:	88fb      	ldrh	r3, [r7, #6]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d907      	bls.n	8015d6c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8015d5c:	887a      	ldrh	r2, [r7, #2]
 8015d5e:	883b      	ldrh	r3, [r7, #0]
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d901      	bls.n	8015d68 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015d64:	2301      	movs	r3, #1
 8015d66:	e002      	b.n	8015d6e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	e000      	b.n	8015d6e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8015d6c:	2300      	movs	r3, #0
    }
  }
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3708      	adds	r7, #8
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bc90      	pop	{r4, r7}
 8015d76:	4770      	bx	lr

08015d78 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b084      	sub	sp, #16
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	4608      	mov	r0, r1
 8015d82:	4611      	mov	r1, r2
 8015d84:	461a      	mov	r2, r3
 8015d86:	4603      	mov	r3, r0
 8015d88:	817b      	strh	r3, [r7, #10]
 8015d8a:	460b      	mov	r3, r1
 8015d8c:	813b      	strh	r3, [r7, #8]
 8015d8e:	4613      	mov	r3, r2
 8015d90:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8015d9e:	8b3b      	ldrh	r3, [r7, #24]
 8015da0:	893a      	ldrh	r2, [r7, #8]
 8015da2:	f7ff ffb6 	bl	8015d12 <u8g2_is_intersection_decision_tree>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d101      	bne.n	8015db0 <u8g2_IsIntersection+0x38>
    return 0; 
 8015dac:	2300      	movs	r3, #0
 8015dae:	e00a      	b.n	8015dc6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8015dbc:	88fb      	ldrh	r3, [r7, #6]
 8015dbe:	897a      	ldrh	r2, [r7, #10]
 8015dc0:	f7ff ffa7 	bl	8015d12 <u8g2_is_intersection_decision_tree>
 8015dc4:	4603      	mov	r3, r0
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3710      	adds	r7, #16
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}

08015dce <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015dce:	b480      	push	{r7}
 8015dd0:	b089      	sub	sp, #36	; 0x24
 8015dd2:	af00      	add	r7, sp, #0
 8015dd4:	60f8      	str	r0, [r7, #12]
 8015dd6:	4608      	mov	r0, r1
 8015dd8:	4611      	mov	r1, r2
 8015dda:	461a      	mov	r2, r3
 8015ddc:	4603      	mov	r3, r0
 8015dde:	817b      	strh	r3, [r7, #10]
 8015de0:	460b      	mov	r3, r1
 8015de2:	813b      	strh	r3, [r7, #8]
 8015de4:	4613      	mov	r3, r2
 8015de6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8015de8:	893b      	ldrh	r3, [r7, #8]
 8015dea:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8015dec:	7efb      	ldrb	r3, [r7, #27]
 8015dee:	f003 0307 	and.w	r3, r3, #7
 8015df2:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8015df4:	2301      	movs	r3, #1
 8015df6:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8015df8:	7e3a      	ldrb	r2, [r7, #24]
 8015dfa:	7efb      	ldrb	r3, [r7, #27]
 8015dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8015e00:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8015e02:	2300      	movs	r3, #0
 8015e04:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8015e06:	2300      	movs	r3, #0
 8015e08:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e10:	2b01      	cmp	r3, #1
 8015e12:	d801      	bhi.n	8015e18 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8015e14:	7e3b      	ldrb	r3, [r7, #24]
 8015e16:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	d001      	beq.n	8015e26 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015e22:	7e3b      	ldrb	r3, [r7, #24]
 8015e24:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015e26:	893b      	ldrh	r3, [r7, #8]
 8015e28:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8015e2a:	8afb      	ldrh	r3, [r7, #22]
 8015e2c:	f023 0307 	bic.w	r3, r3, #7
 8015e30:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	7c1b      	ldrb	r3, [r3, #16]
 8015e38:	b29b      	uxth	r3, r3
 8015e3a:	8afa      	ldrh	r2, [r7, #22]
 8015e3c:	fb12 f303 	smulbb	r3, r2, r3
 8015e40:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e46:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8015e48:	8afb      	ldrh	r3, [r7, #22]
 8015e4a:	69fa      	ldr	r2, [r7, #28]
 8015e4c:	4413      	add	r3, r2
 8015e4e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8015e50:	897b      	ldrh	r3, [r7, #10]
 8015e52:	69fa      	ldr	r2, [r7, #28]
 8015e54:	4413      	add	r3, r2
 8015e56:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8015e58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d117      	bne.n	8015e90 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8015e60:	69fb      	ldr	r3, [r7, #28]
 8015e62:	781a      	ldrb	r2, [r3, #0]
 8015e64:	7ebb      	ldrb	r3, [r7, #26]
 8015e66:	4313      	orrs	r3, r2
 8015e68:	b2da      	uxtb	r2, r3
 8015e6a:	69fb      	ldr	r3, [r7, #28]
 8015e6c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8015e6e:	69fb      	ldr	r3, [r7, #28]
 8015e70:	781a      	ldrb	r2, [r3, #0]
 8015e72:	7e7b      	ldrb	r3, [r7, #25]
 8015e74:	4053      	eors	r3, r2
 8015e76:	b2da      	uxtb	r2, r3
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	701a      	strb	r2, [r3, #0]
	ptr++;
 8015e7c:	69fb      	ldr	r3, [r7, #28]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	61fb      	str	r3, [r7, #28]
	len--;
 8015e82:	88fb      	ldrh	r3, [r7, #6]
 8015e84:	3b01      	subs	r3, #1
 8015e86:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8015e88:	88fb      	ldrh	r3, [r7, #6]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d1e8      	bne.n	8015e60 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8015e8e:	e038      	b.n	8015f02 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8015e90:	69fb      	ldr	r3, [r7, #28]
 8015e92:	781a      	ldrb	r2, [r3, #0]
 8015e94:	7ebb      	ldrb	r3, [r7, #26]
 8015e96:	4313      	orrs	r3, r2
 8015e98:	b2da      	uxtb	r2, r3
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	781a      	ldrb	r2, [r3, #0]
 8015ea2:	7e7b      	ldrb	r3, [r7, #25]
 8015ea4:	4053      	eors	r3, r2
 8015ea6:	b2da      	uxtb	r2, r3
 8015ea8:	69fb      	ldr	r3, [r7, #28]
 8015eaa:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8015eac:	7efb      	ldrb	r3, [r7, #27]
 8015eae:	3301      	adds	r3, #1
 8015eb0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8015eb2:	7efb      	ldrb	r3, [r7, #27]
 8015eb4:	f003 0307 	and.w	r3, r3, #7
 8015eb8:	76fb      	strb	r3, [r7, #27]
      len--;
 8015eba:	88fb      	ldrh	r3, [r7, #6]
 8015ebc:	3b01      	subs	r3, #1
 8015ebe:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8015ec0:	7efb      	ldrb	r3, [r7, #27]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d114      	bne.n	8015ef0 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8015eca:	461a      	mov	r2, r3
 8015ecc:	69fb      	ldr	r3, [r7, #28]
 8015ece:	4413      	add	r3, r2
 8015ed0:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015ed8:	2b01      	cmp	r3, #1
 8015eda:	d801      	bhi.n	8015ee0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8015edc:	2301      	movs	r3, #1
 8015ede:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	d008      	beq.n	8015efc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8015eea:	2301      	movs	r3, #1
 8015eec:	767b      	strb	r3, [r7, #25]
 8015eee:	e005      	b.n	8015efc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8015ef0:	7ebb      	ldrb	r3, [r7, #26]
 8015ef2:	005b      	lsls	r3, r3, #1
 8015ef4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8015ef6:	7e7b      	ldrb	r3, [r7, #25]
 8015ef8:	005b      	lsls	r3, r3, #1
 8015efa:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8015efc:	88fb      	ldrh	r3, [r7, #6]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d1c6      	bne.n	8015e90 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8015f02:	bf00      	nop
 8015f04:	3724      	adds	r7, #36	; 0x24
 8015f06:	46bd      	mov	sp, r7
 8015f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0c:	4770      	bx	lr

08015f0e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015f0e:	b580      	push	{r7, lr}
 8015f10:	b082      	sub	sp, #8
 8015f12:	af00      	add	r7, sp, #0
 8015f14:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2200      	movs	r2, #0
 8015f22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	4798      	blx	r3
}
 8015f44:	bf00      	nop
 8015f46:	3708      	adds	r7, #8
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd80      	pop	{r7, pc}

08015f4c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b084      	sub	sp, #16
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	603b      	str	r3, [r7, #0]
 8015f58:	4613      	mov	r3, r2
 8015f5a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	683a      	ldr	r2, [r7, #0]
 8015f66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	68ba      	ldr	r2, [r7, #8]
 8015f6c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	79fa      	ldrb	r2, [r7, #7]
 8015f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	2200      	movs	r2, #0
 8015f82:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	2201      	movs	r2, #1
 8015f92:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	2201      	movs	r2, #1
 8015f9a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	69ba      	ldr	r2, [r7, #24]
 8015fa2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	68f8      	ldr	r0, [r7, #12]
 8015fac:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015fae:	68f8      	ldr	r0, [r7, #12]
 8015fb0:	f7ff ffad 	bl	8015f0e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015fb4:	68f8      	ldr	r0, [r7, #12]
 8015fb6:	f7ff fd55 	bl	8015a64 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8015fc2:	bf00      	nop
 8015fc4:	3710      	adds	r7, #16
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	bd80      	pop	{r7, pc}

08015fca <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8015fca:	b480      	push	{r7}
 8015fcc:	b085      	sub	sp, #20
 8015fce:	af00      	add	r7, sp, #0
 8015fd0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fde:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015fe0:	89fb      	ldrh	r3, [r7, #14]
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	89fa      	ldrh	r2, [r7, #14]
 8015fea:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	7c1b      	ldrb	r3, [r3, #16]
 8015ff0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8015ff2:	89fb      	ldrh	r3, [r7, #14]
 8015ff4:	00db      	lsls	r3, r3, #3
 8015ff6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	89fa      	ldrh	r2, [r7, #14]
 8015ffc:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016004:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8016006:	89fb      	ldrh	r3, [r7, #14]
 8016008:	00db      	lsls	r3, r3, #3
 801600a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	89fa      	ldrh	r2, [r7, #14]
 8016010:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016018:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 801601a:	89fb      	ldrh	r3, [r7, #14]
 801601c:	687a      	ldr	r2, [r7, #4]
 801601e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8016022:	4413      	add	r3, r2
 8016024:	68ba      	ldr	r2, [r7, #8]
 8016026:	7c52      	ldrb	r2, [r2, #17]
 8016028:	4293      	cmp	r3, r2
 801602a:	dd08      	ble.n	801603e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	7c5b      	ldrb	r3, [r3, #17]
 8016030:	b29a      	uxth	r2, r3
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016038:	b29b      	uxth	r3, r3
 801603a:	1ad3      	subs	r3, r2, r3
 801603c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 801603e:	89fb      	ldrh	r3, [r7, #14]
 8016040:	00db      	lsls	r3, r3, #3
 8016042:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8016060:	89fb      	ldrh	r3, [r7, #14]
 8016062:	4413      	add	r3, r2
 8016064:	b29a      	uxth	r2, r3
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	8a9a      	ldrh	r2, [r3, #20]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	8ada      	ldrh	r2, [r3, #22]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8016080:	bf00      	nop
 8016082:	3714      	adds	r7, #20
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr

0801608c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af02      	add	r7, sp, #8
 8016092:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80160ac:	9300      	str	r3, [sp, #0]
 80160ae:	4603      	mov	r3, r0
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7ff fe61 	bl	8015d78 <u8g2_IsIntersection>
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d104      	bne.n	80160c6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2200      	movs	r2, #0
 80160c0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80160c4:	e03b      	b.n	801613e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2201      	movs	r2, #1
 80160ca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80160da:	429a      	cmp	r2, r3
 80160dc:	d205      	bcs.n	80160ea <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d905      	bls.n	8016106 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016112:	429a      	cmp	r2, r3
 8016114:	d205      	bcs.n	8016122 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801612e:	429a      	cmp	r2, r3
 8016130:	d905      	bls.n	801613e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 801613e:	bf00      	nop
 8016140:	3708      	adds	r7, #8
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}

08016146 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8016146:	b580      	push	{r7, lr}
 8016148:	b082      	sub	sp, #8
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7ff ff3b 	bl	8015fca <u8g2_update_dimension_common>
}
 8016154:	bf00      	nop
 8016156:	3708      	adds	r7, #8
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}

0801615c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2200      	movs	r2, #0
 8016168:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f7ff ff7b 	bl	801608c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8016196:	bf00      	nop
 8016198:	3708      	adds	r7, #8
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}

0801619e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 801619e:	b580      	push	{r7, lr}
 80161a0:	b086      	sub	sp, #24
 80161a2:	af02      	add	r7, sp, #8
 80161a4:	60f8      	str	r0, [r7, #12]
 80161a6:	4608      	mov	r0, r1
 80161a8:	4611      	mov	r1, r2
 80161aa:	461a      	mov	r2, r3
 80161ac:	4603      	mov	r3, r0
 80161ae:	817b      	strh	r3, [r7, #10]
 80161b0:	460b      	mov	r3, r1
 80161b2:	813b      	strh	r3, [r7, #8]
 80161b4:	4613      	mov	r3, r2
 80161b6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80161b8:	88f8      	ldrh	r0, [r7, #6]
 80161ba:	893a      	ldrh	r2, [r7, #8]
 80161bc:	8979      	ldrh	r1, [r7, #10]
 80161be:	7e3b      	ldrb	r3, [r7, #24]
 80161c0:	9300      	str	r3, [sp, #0]
 80161c2:	4603      	mov	r3, r0
 80161c4:	68f8      	ldr	r0, [r7, #12]
 80161c6:	f7ff fcc5 	bl	8015b54 <u8g2_draw_hv_line_2dir>
}
 80161ca:	bf00      	nop
 80161cc:	3710      	adds	r7, #16
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}

080161d2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80161d2:	b480      	push	{r7}
 80161d4:	b083      	sub	sp, #12
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2200      	movs	r2, #0
 80161de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80161e2:	bf00      	nop
 80161e4:	370c      	adds	r7, #12
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr

080161ee <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80161ee:	b480      	push	{r7}
 80161f0:	b083      	sub	sp, #12
 80161f2:	af00      	add	r7, sp, #0
 80161f4:	6078      	str	r0, [r7, #4]
 80161f6:	460b      	mov	r3, r1
 80161f8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80161fa:	78fb      	ldrb	r3, [r7, #3]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d002      	beq.n	8016206 <u8x8_utf8_next+0x18>
 8016200:	78fb      	ldrb	r3, [r7, #3]
 8016202:	2b0a      	cmp	r3, #10
 8016204:	d102      	bne.n	801620c <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8016206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801620a:	e06e      	b.n	80162ea <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016212:	2b00      	cmp	r3, #0
 8016214:	d145      	bne.n	80162a2 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8016216:	78fb      	ldrb	r3, [r7, #3]
 8016218:	2bfb      	cmp	r3, #251	; 0xfb
 801621a:	d908      	bls.n	801622e <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2205      	movs	r2, #5
 8016220:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8016224:	78fb      	ldrb	r3, [r7, #3]
 8016226:	f003 0301 	and.w	r3, r3, #1
 801622a:	70fb      	strb	r3, [r7, #3]
 801622c:	e032      	b.n	8016294 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 801622e:	78fb      	ldrb	r3, [r7, #3]
 8016230:	2bf7      	cmp	r3, #247	; 0xf7
 8016232:	d908      	bls.n	8016246 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2204      	movs	r2, #4
 8016238:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 801623c:	78fb      	ldrb	r3, [r7, #3]
 801623e:	f003 0303 	and.w	r3, r3, #3
 8016242:	70fb      	strb	r3, [r7, #3]
 8016244:	e026      	b.n	8016294 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8016246:	78fb      	ldrb	r3, [r7, #3]
 8016248:	2bef      	cmp	r3, #239	; 0xef
 801624a:	d908      	bls.n	801625e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2203      	movs	r2, #3
 8016250:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8016254:	78fb      	ldrb	r3, [r7, #3]
 8016256:	f003 0307 	and.w	r3, r3, #7
 801625a:	70fb      	strb	r3, [r7, #3]
 801625c:	e01a      	b.n	8016294 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 801625e:	78fb      	ldrb	r3, [r7, #3]
 8016260:	2bdf      	cmp	r3, #223	; 0xdf
 8016262:	d908      	bls.n	8016276 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	2202      	movs	r2, #2
 8016268:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 801626c:	78fb      	ldrb	r3, [r7, #3]
 801626e:	f003 030f 	and.w	r3, r3, #15
 8016272:	70fb      	strb	r3, [r7, #3]
 8016274:	e00e      	b.n	8016294 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8016276:	78fb      	ldrb	r3, [r7, #3]
 8016278:	2bbf      	cmp	r3, #191	; 0xbf
 801627a:	d908      	bls.n	801628e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2201      	movs	r2, #1
 8016280:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8016284:	78fb      	ldrb	r3, [r7, #3]
 8016286:	f003 031f 	and.w	r3, r3, #31
 801628a:	70fb      	strb	r3, [r7, #3]
 801628c:	e002      	b.n	8016294 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 801628e:	78fb      	ldrb	r3, [r7, #3]
 8016290:	b29b      	uxth	r3, r3
 8016292:	e02a      	b.n	80162ea <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8016294:	78fb      	ldrb	r3, [r7, #3]
 8016296:	b29a      	uxth	r2, r3
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 801629c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162a0:	e023      	b.n	80162ea <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80162a8:	3b01      	subs	r3, #1
 80162aa:	b2da      	uxtb	r2, r3
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	8c1b      	ldrh	r3, [r3, #32]
 80162b6:	019b      	lsls	r3, r3, #6
 80162b8:	b29a      	uxth	r2, r3
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 80162be:	78fb      	ldrb	r3, [r7, #3]
 80162c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80162c4:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	8c1a      	ldrh	r2, [r3, #32]
 80162ca:	78fb      	ldrb	r3, [r7, #3]
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	4313      	orrs	r3, r2
 80162d0:	b29a      	uxth	r2, r3
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d002      	beq.n	80162e6 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80162e0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162e4:	e001      	b.n	80162ea <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	8c1b      	ldrh	r3, [r3, #32]
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	370c      	adds	r7, #12
 80162ee:	46bd      	mov	sp, r7
 80162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f4:	4770      	bx	lr

080162f6 <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80162f6:	b590      	push	{r4, r7, lr}
 80162f8:	b083      	sub	sp, #12
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
 80162fe:	460b      	mov	r3, r1
 8016300:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	691c      	ldr	r4, [r3, #16]
 8016306:	78fa      	ldrb	r2, [r7, #3]
 8016308:	2300      	movs	r3, #0
 801630a:	2120      	movs	r1, #32
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	47a0      	blx	r4
 8016310:	4603      	mov	r3, r0
}
 8016312:	4618      	mov	r0, r3
 8016314:	370c      	adds	r7, #12
 8016316:	46bd      	mov	sp, r7
 8016318:	bd90      	pop	{r4, r7, pc}

0801631a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 801631a:	b590      	push	{r4, r7, lr}
 801631c:	b085      	sub	sp, #20
 801631e:	af00      	add	r7, sp, #0
 8016320:	60f8      	str	r0, [r7, #12]
 8016322:	460b      	mov	r3, r1
 8016324:	607a      	str	r2, [r7, #4]
 8016326:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	691c      	ldr	r4, [r3, #16]
 801632c:	7afa      	ldrb	r2, [r7, #11]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2117      	movs	r1, #23
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	47a0      	blx	r4
 8016336:	4603      	mov	r3, r0
}
 8016338:	4618      	mov	r0, r3
 801633a:	3714      	adds	r7, #20
 801633c:	46bd      	mov	sp, r7
 801633e:	bd90      	pop	{r4, r7, pc}

08016340 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	460b      	mov	r3, r1
 801634a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 801634c:	1cfb      	adds	r3, r7, #3
 801634e:	461a      	mov	r2, r3
 8016350:	2101      	movs	r1, #1
 8016352:	6878      	ldr	r0, [r7, #4]
 8016354:	f7ff ffe1 	bl	801631a <u8x8_byte_SendBytes>
 8016358:	4603      	mov	r3, r0
}
 801635a:	4618      	mov	r0, r3
 801635c:	3708      	adds	r7, #8
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}

08016362 <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8016362:	b590      	push	{r4, r7, lr}
 8016364:	b083      	sub	sp, #12
 8016366:	af00      	add	r7, sp, #0
 8016368:	6078      	str	r0, [r7, #4]
 801636a:	460b      	mov	r3, r1
 801636c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	68dc      	ldr	r4, [r3, #12]
 8016372:	78fa      	ldrb	r2, [r7, #3]
 8016374:	2300      	movs	r3, #0
 8016376:	2115      	movs	r1, #21
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	47a0      	blx	r4
 801637c:	4603      	mov	r3, r0
}
 801637e:	4618      	mov	r0, r3
 8016380:	370c      	adds	r7, #12
 8016382:	46bd      	mov	sp, r7
 8016384:	bd90      	pop	{r4, r7, pc}

08016386 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8016386:	b590      	push	{r4, r7, lr}
 8016388:	b083      	sub	sp, #12
 801638a:	af00      	add	r7, sp, #0
 801638c:	6078      	str	r0, [r7, #4]
 801638e:	460b      	mov	r3, r1
 8016390:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	68dc      	ldr	r4, [r3, #12]
 8016396:	78fa      	ldrb	r2, [r7, #3]
 8016398:	2300      	movs	r3, #0
 801639a:	2116      	movs	r1, #22
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	47a0      	blx	r4
 80163a0:	4603      	mov	r3, r0
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	370c      	adds	r7, #12
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd90      	pop	{r4, r7, pc}

080163aa <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80163aa:	b590      	push	{r4, r7, lr}
 80163ac:	b085      	sub	sp, #20
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	60f8      	str	r0, [r7, #12]
 80163b2:	460b      	mov	r3, r1
 80163b4:	607a      	str	r2, [r7, #4]
 80163b6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	68dc      	ldr	r4, [r3, #12]
 80163bc:	7afa      	ldrb	r2, [r7, #11]
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2117      	movs	r1, #23
 80163c2:	68f8      	ldr	r0, [r7, #12]
 80163c4:	47a0      	blx	r4
 80163c6:	4603      	mov	r3, r0
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3714      	adds	r7, #20
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd90      	pop	{r4, r7, pc}

080163d0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80163d0:	b590      	push	{r4, r7, lr}
 80163d2:	b083      	sub	sp, #12
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	68dc      	ldr	r4, [r3, #12]
 80163dc:	2300      	movs	r3, #0
 80163de:	2200      	movs	r2, #0
 80163e0:	2118      	movs	r1, #24
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	47a0      	blx	r4
 80163e6:	4603      	mov	r3, r0
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	370c      	adds	r7, #12
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd90      	pop	{r4, r7, pc}

080163f0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80163f0:	b590      	push	{r4, r7, lr}
 80163f2:	b083      	sub	sp, #12
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	68dc      	ldr	r4, [r3, #12]
 80163fc:	2300      	movs	r3, #0
 80163fe:	2200      	movs	r2, #0
 8016400:	2119      	movs	r1, #25
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	47a0      	blx	r4
 8016406:	4603      	mov	r3, r0
}
 8016408:	4618      	mov	r0, r3
 801640a:	370c      	adds	r7, #12
 801640c:	46bd      	mov	sp, r7
 801640e:	bd90      	pop	{r4, r7, pc}

08016410 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8016410:	b590      	push	{r4, r7, lr}
 8016412:	b085      	sub	sp, #20
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	781b      	ldrb	r3, [r3, #0]
 801641e:	73fb      	strb	r3, [r7, #15]
    data++;
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	3301      	adds	r3, #1
 8016424:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8016426:	7bfb      	ldrb	r3, [r7, #15]
 8016428:	2bfe      	cmp	r3, #254	; 0xfe
 801642a:	d031      	beq.n	8016490 <u8x8_cad_SendSequence+0x80>
 801642c:	2bfe      	cmp	r3, #254	; 0xfe
 801642e:	dc3d      	bgt.n	80164ac <u8x8_cad_SendSequence+0x9c>
 8016430:	2b19      	cmp	r3, #25
 8016432:	dc3b      	bgt.n	80164ac <u8x8_cad_SendSequence+0x9c>
 8016434:	2b18      	cmp	r3, #24
 8016436:	da23      	bge.n	8016480 <u8x8_cad_SendSequence+0x70>
 8016438:	2b16      	cmp	r3, #22
 801643a:	dc02      	bgt.n	8016442 <u8x8_cad_SendSequence+0x32>
 801643c:	2b15      	cmp	r3, #21
 801643e:	da03      	bge.n	8016448 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8016440:	e034      	b.n	80164ac <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8016442:	2b17      	cmp	r3, #23
 8016444:	d00e      	beq.n	8016464 <u8x8_cad_SendSequence+0x54>
	return;
 8016446:	e031      	b.n	80164ac <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	781b      	ldrb	r3, [r3, #0]
 801644c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	68dc      	ldr	r4, [r3, #12]
 8016452:	7bba      	ldrb	r2, [r7, #14]
 8016454:	7bf9      	ldrb	r1, [r7, #15]
 8016456:	2300      	movs	r3, #0
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	47a0      	blx	r4
	  data++;
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	3301      	adds	r3, #1
 8016460:	603b      	str	r3, [r7, #0]
	  break;
 8016462:	e022      	b.n	80164aa <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 801646a:	f107 030e 	add.w	r3, r7, #14
 801646e:	461a      	mov	r2, r3
 8016470:	2101      	movs	r1, #1
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff ff99 	bl	80163aa <u8x8_cad_SendData>
	  data++;
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	3301      	adds	r3, #1
 801647c:	603b      	str	r3, [r7, #0]
	  break;
 801647e:	e014      	b.n	80164aa <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	68dc      	ldr	r4, [r3, #12]
 8016484:	7bf9      	ldrb	r1, [r7, #15]
 8016486:	2300      	movs	r3, #0
 8016488:	2200      	movs	r2, #0
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	47a0      	blx	r4
	  break;
 801648e:	e00c      	b.n	80164aa <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	781b      	ldrb	r3, [r3, #0]
 8016494:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8016496:	7bbb      	ldrb	r3, [r7, #14]
 8016498:	461a      	mov	r2, r3
 801649a:	2129      	movs	r1, #41	; 0x29
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f000 f9ec 	bl	801687a <u8x8_gpio_call>
	  data++;
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	3301      	adds	r3, #1
 80164a6:	603b      	str	r3, [r7, #0]
	  break;
 80164a8:	bf00      	nop
    cmd = *data;
 80164aa:	e7b6      	b.n	801641a <u8x8_cad_SendSequence+0xa>
	return;
 80164ac:	bf00      	nop
    }
  }
}
 80164ae:	3714      	adds	r7, #20
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd90      	pop	{r4, r7, pc}

080164b4 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80164b4:	b590      	push	{r4, r7, lr}
 80164b6:	b085      	sub	sp, #20
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	60f8      	str	r0, [r7, #12]
 80164bc:	607b      	str	r3, [r7, #4]
 80164be:	460b      	mov	r3, r1
 80164c0:	72fb      	strb	r3, [r7, #11]
 80164c2:	4613      	mov	r3, r2
 80164c4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80164c6:	7afb      	ldrb	r3, [r7, #11]
 80164c8:	3b14      	subs	r3, #20
 80164ca:	2b05      	cmp	r3, #5
 80164cc:	d82f      	bhi.n	801652e <u8x8_cad_011+0x7a>
 80164ce:	a201      	add	r2, pc, #4	; (adr r2, 80164d4 <u8x8_cad_011+0x20>)
 80164d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164d4:	0801651d 	.word	0x0801651d
 80164d8:	080164ed 	.word	0x080164ed
 80164dc:	08016501 	.word	0x08016501
 80164e0:	08016515 	.word	0x08016515
 80164e4:	0801651d 	.word	0x0801651d
 80164e8:	0801651d 	.word	0x0801651d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80164ec:	2100      	movs	r1, #0
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f7ff ff01 	bl	80162f6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80164f4:	7abb      	ldrb	r3, [r7, #10]
 80164f6:	4619      	mov	r1, r3
 80164f8:	68f8      	ldr	r0, [r7, #12]
 80164fa:	f7ff ff21 	bl	8016340 <u8x8_byte_SendByte>
      break;
 80164fe:	e018      	b.n	8016532 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8016500:	2101      	movs	r1, #1
 8016502:	68f8      	ldr	r0, [r7, #12]
 8016504:	f7ff fef7 	bl	80162f6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016508:	7abb      	ldrb	r3, [r7, #10]
 801650a:	4619      	mov	r1, r3
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	f7ff ff17 	bl	8016340 <u8x8_byte_SendByte>
      break;
 8016512:	e00e      	b.n	8016532 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8016514:	2101      	movs	r1, #1
 8016516:	68f8      	ldr	r0, [r7, #12]
 8016518:	f7ff feed 	bl	80162f6 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	691c      	ldr	r4, [r3, #16]
 8016520:	7aba      	ldrb	r2, [r7, #10]
 8016522:	7af9      	ldrb	r1, [r7, #11]
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	68f8      	ldr	r0, [r7, #12]
 8016528:	47a0      	blx	r4
 801652a:	4603      	mov	r3, r0
 801652c:	e002      	b.n	8016534 <u8x8_cad_011+0x80>
    default:
      return 0;
 801652e:	2300      	movs	r3, #0
 8016530:	e000      	b.n	8016534 <u8x8_cad_011+0x80>
  }
  return 1;
 8016532:	2301      	movs	r3, #1
}
 8016534:	4618      	mov	r0, r3
 8016536:	3714      	adds	r7, #20
 8016538:	46bd      	mov	sp, r7
 801653a:	bd90      	pop	{r4, r7, pc}

0801653c <u8x8_d_uc1638_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1638_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b086      	sub	sp, #24
 8016540:	af00      	add	r7, sp, #0
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	607b      	str	r3, [r7, #4]
 8016546:	460b      	mov	r3, r1
 8016548:	72fb      	strb	r3, [r7, #11]
 801654a:	4613      	mov	r3, r2
 801654c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 801654e:	7afb      	ldrb	r3, [r7, #11]
 8016550:	3b0b      	subs	r3, #11
 8016552:	2b04      	cmp	r3, #4
 8016554:	f200 809e 	bhi.w	8016694 <u8x8_d_uc1638_common+0x158>
 8016558:	a201      	add	r2, pc, #4	; (adr r2, 8016560 <u8x8_d_uc1638_common+0x24>)
 801655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801655e:	bf00      	nop
 8016560:	08016629 	.word	0x08016629
 8016564:	08016695 	.word	0x08016695
 8016568:	08016643 	.word	0x08016643
 801656c:	08016675 	.word	0x08016675
 8016570:	08016575 	.word	0x08016575
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8016574:	68f8      	ldr	r0, [r7, #12]
 8016576:	f7ff ff2b 	bl	80163d0 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	795b      	ldrb	r3, [r3, #5]
 801657e:	75fb      	strb	r3, [r7, #23]
	  x += u8x8->x_offset & 15; //I find this string in the new version
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8016586:	f003 030f 	and.w	r3, r3, #15
 801658a:	b2da      	uxtb	r2, r3
 801658c:	7dfb      	ldrb	r3, [r7, #23]
 801658e:	4413      	add	r3, r2
 8016590:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8016592:	7dfb      	ldrb	r3, [r7, #23]
 8016594:	00db      	lsls	r3, r3, #3
 8016596:	75fb      	strb	r3, [r7, #23]

      u8x8_cad_SendCmd(u8x8, 0x004);  /* UC1638 */
 8016598:	2104      	movs	r1, #4
 801659a:	68f8      	ldr	r0, [r7, #12]
 801659c:	f7ff fee1 	bl	8016362 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, x);
 80165a0:	7dfb      	ldrb	r3, [r7, #23]
 80165a2:	4619      	mov	r1, r3
 80165a4:	68f8      	ldr	r0, [r7, #12]
 80165a6:	f7ff feee 	bl	8016386 <u8x8_cad_SendArg>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	799b      	ldrb	r3, [r3, #6]
 80165ae:	75bb      	strb	r3, [r7, #22]
	  y += u8x8->x_offset >> 4;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80165b6:	091b      	lsrs	r3, r3, #4
 80165b8:	b2da      	uxtb	r2, r3
 80165ba:	7dbb      	ldrb	r3, [r7, #22]
 80165bc:	4413      	add	r3, r2
 80165be:	75bb      	strb	r3, [r7, #22]
      //y += u8x8->x_offset;
      //y *= 2;		/* for B/W mode, use only every second page */

      u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));  /* UC1638 */
 80165c0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80165c4:	f003 030f 	and.w	r3, r3, #15
 80165c8:	b25b      	sxtb	r3, r3
 80165ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80165ce:	b25b      	sxtb	r3, r3
 80165d0:	b2db      	uxtb	r3, r3
 80165d2:	4619      	mov	r1, r3
 80165d4:	68f8      	ldr	r0, [r7, #12]
 80165d6:	f7ff fec4 	bl	8016362 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));  /* UC1638 */
 80165da:	7dbb      	ldrb	r3, [r7, #22]
 80165dc:	091b      	lsrs	r3, r3, #4
 80165de:	b2db      	uxtb	r3, r3
 80165e0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	4619      	mov	r1, r3
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f7ff feba 	bl	8016362 <u8x8_cad_SendCmd>
    
    
      u8x8_cad_SendCmd(u8x8, 0x001); /* UC1638 */
 80165ee:	2101      	movs	r1, #1
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	f7ff feb6 	bl	8016362 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	791b      	ldrb	r3, [r3, #4]
 80165fa:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80165fc:	7d7b      	ldrb	r3, [r7, #21]
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8016608:	7d7b      	ldrb	r3, [r7, #21]
 801660a:	693a      	ldr	r2, [r7, #16]
 801660c:	4619      	mov	r1, r3
 801660e:	68f8      	ldr	r0, [r7, #12]
 8016610:	f7ff fecb 	bl	80163aa <u8x8_cad_SendData>
	arg_int--;
 8016614:	7abb      	ldrb	r3, [r7, #10]
 8016616:	3b01      	subs	r3, #1
 8016618:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 801661a:	7abb      	ldrb	r3, [r7, #10]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d1f3      	bne.n	8016608 <u8x8_d_uc1638_common+0xcc>
      
      u8x8_cad_EndTransfer(u8x8);
 8016620:	68f8      	ldr	r0, [r7, #12]
 8016622:	f7ff fee5 	bl	80163f0 <u8x8_cad_EndTransfer>
      break;
 8016626:	e037      	b.n	8016698 <u8x8_d_uc1638_common+0x15c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8016628:	7abb      	ldrb	r3, [r7, #10]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d104      	bne.n	8016638 <u8x8_d_uc1638_common+0xfc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave0_seq);
 801662e:	491d      	ldr	r1, [pc, #116]	; (80166a4 <u8x8_d_uc1638_common+0x168>)
 8016630:	68f8      	ldr	r0, [r7, #12]
 8016632:	f7ff feed 	bl	8016410 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
      break;
 8016636:	e02f      	b.n	8016698 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
 8016638:	491b      	ldr	r1, [pc, #108]	; (80166a8 <u8x8_d_uc1638_common+0x16c>)
 801663a:	68f8      	ldr	r0, [r7, #12]
 801663c:	f7ff fee8 	bl	8016410 <u8x8_cad_SendSequence>
      break;
 8016640:	e02a      	b.n	8016698 <u8x8_d_uc1638_common+0x15c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8016642:	7abb      	ldrb	r3, [r7, #10]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d10a      	bne.n	801665e <u8x8_d_uc1638_common+0x122>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip0_seq);
 8016648:	4918      	ldr	r1, [pc, #96]	; (80166ac <u8x8_d_uc1638_common+0x170>)
 801664a:	68f8      	ldr	r0, [r7, #12]
 801664c:	f7ff fee0 	bl	8016410 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	7c9a      	ldrb	r2, [r3, #18]
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 801665c:	e01c      	b.n	8016698 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
 801665e:	4914      	ldr	r1, [pc, #80]	; (80166b0 <u8x8_d_uc1638_common+0x174>)
 8016660:	68f8      	ldr	r0, [r7, #12]
 8016662:	f7ff fed5 	bl	8016410 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	7cda      	ldrb	r2, [r3, #19]
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8016672:	e011      	b.n	8016698 <u8x8_d_uc1638_common+0x15c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8016674:	68f8      	ldr	r0, [r7, #12]
 8016676:	f7ff feab 	bl	80163d0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 801667a:	2181      	movs	r1, #129	; 0x81
 801667c:	68f8      	ldr	r0, [r7, #12]
 801667e:	f7ff fe70 	bl	8016362 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1638 has range from 0 to 255 */
 8016682:	7abb      	ldrb	r3, [r7, #10]
 8016684:	4619      	mov	r1, r3
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	f7ff fe7d 	bl	8016386 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 801668c:	68f8      	ldr	r0, [r7, #12]
 801668e:	f7ff feaf 	bl	80163f0 <u8x8_cad_EndTransfer>
      break;
 8016692:	e001      	b.n	8016698 <u8x8_d_uc1638_common+0x15c>
#endif
    default:
      return 0;
 8016694:	2300      	movs	r3, #0
 8016696:	e000      	b.n	801669a <u8x8_d_uc1638_common+0x15e>
  }
  return 1;
 8016698:	2301      	movs	r3, #1
}
 801669a:	4618      	mov	r0, r3
 801669c:	3718      	adds	r7, #24
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	0802b024 	.word	0x0802b024
 80166a8:	0802b02c 	.word	0x0802b02c
 80166ac:	0802b034 	.word	0x0802b034
 80166b0:	0802b03c 	.word	0x0802b03c

080166b4 <u8x8_d_uc1638_240x160>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1638_240x160(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b084      	sub	sp, #16
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	60f8      	str	r0, [r7, #12]
 80166bc:	607b      	str	r3, [r7, #4]
 80166be:	460b      	mov	r3, r1
 80166c0:	72fb      	strb	r3, [r7, #11]
 80166c2:	4613      	mov	r3, r2
 80166c4:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1638_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80166c6:	7aba      	ldrb	r2, [r7, #10]
 80166c8:	7af9      	ldrb	r1, [r7, #11]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f7ff ff35 	bl	801653c <u8x8_d_uc1638_common>
 80166d2:	4603      	mov	r3, r0
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d114      	bne.n	8016702 <u8x8_d_uc1638_240x160+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 80166d8:	7afb      	ldrb	r3, [r7, #11]
 80166da:	2b09      	cmp	r3, #9
 80166dc:	d002      	beq.n	80166e4 <u8x8_d_uc1638_240x160+0x30>
 80166de:	2b0a      	cmp	r3, #10
 80166e0:	d005      	beq.n	80166ee <u8x8_d_uc1638_240x160+0x3a>
 80166e2:	e00c      	b.n	80166fe <u8x8_d_uc1638_240x160+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_240x160_display_info);
 80166e4:	490a      	ldr	r1, [pc, #40]	; (8016710 <u8x8_d_uc1638_240x160+0x5c>)
 80166e6:	68f8      	ldr	r0, [r7, #12]
 80166e8:	f000 f816 	bl	8016718 <u8x8_d_helper_display_setup_memory>
	break;
 80166ec:	e00a      	b.n	8016704 <u8x8_d_uc1638_240x160+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	f000 f826 	bl	8016740 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_240x160_init_seq);
 80166f4:	4907      	ldr	r1, [pc, #28]	; (8016714 <u8x8_d_uc1638_240x160+0x60>)
 80166f6:	68f8      	ldr	r0, [r7, #12]
 80166f8:	f7ff fe8a 	bl	8016410 <u8x8_cad_SendSequence>
	break;
 80166fc:	e002      	b.n	8016704 <u8x8_d_uc1638_240x160+0x50>
      default:
	return 0;		/* msg unknown */
 80166fe:	2300      	movs	r3, #0
 8016700:	e001      	b.n	8016706 <u8x8_d_uc1638_240x160+0x52>
    }
  }
 8016702:	bf00      	nop
  return 1;
 8016704:	2301      	movs	r3, #1
}
 8016706:	4618      	mov	r0, r3
 8016708:	3710      	adds	r7, #16
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop
 8016710:	0802b044 	.word	0x0802b044
 8016714:	0802b05c 	.word	0x0802b05c

08016718 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8016718:	b480      	push	{r7}
 801671a:	b083      	sub	sp, #12
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	683a      	ldr	r2, [r7, #0]
 8016726:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	7c9a      	ldrb	r2, [r3, #18]
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8016734:	bf00      	nop
 8016736:	370c      	adds	r7, #12
 8016738:	46bd      	mov	sp, r7
 801673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673e:	4770      	bx	lr

08016740 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016740:	b590      	push	{r4, r7, lr}
 8016742:	b083      	sub	sp, #12
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	695c      	ldr	r4, [r3, #20]
 801674c:	2300      	movs	r3, #0
 801674e:	2200      	movs	r2, #0
 8016750:	2128      	movs	r1, #40	; 0x28
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	68dc      	ldr	r4, [r3, #12]
 801675a:	2300      	movs	r3, #0
 801675c:	2200      	movs	r2, #0
 801675e:	2114      	movs	r1, #20
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8016764:	2201      	movs	r2, #1
 8016766:	214b      	movs	r1, #75	; 0x4b
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f000 f886 	bl	801687a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	791b      	ldrb	r3, [r3, #4]
 8016774:	461a      	mov	r2, r3
 8016776:	2129      	movs	r1, #41	; 0x29
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f000 f87e 	bl	801687a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 801677e:	2200      	movs	r2, #0
 8016780:	214b      	movs	r1, #75	; 0x4b
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f000 f879 	bl	801687a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	791b      	ldrb	r3, [r3, #4]
 801678e:	461a      	mov	r2, r3
 8016790:	2129      	movs	r1, #41	; 0x29
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 f871 	bl	801687a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8016798:	2201      	movs	r2, #1
 801679a:	214b      	movs	r1, #75	; 0x4b
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f000 f86c 	bl	801687a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	795b      	ldrb	r3, [r3, #5]
 80167a8:	461a      	mov	r2, r3
 80167aa:	2129      	movs	r1, #41	; 0x29
 80167ac:	6878      	ldr	r0, [r7, #4]
 80167ae:	f000 f864 	bl	801687a <u8x8_gpio_call>
}    
 80167b2:	bf00      	nop
 80167b4:	370c      	adds	r7, #12
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd90      	pop	{r4, r7, pc}

080167ba <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80167ba:	b590      	push	{r4, r7, lr}
 80167bc:	b085      	sub	sp, #20
 80167be:	af00      	add	r7, sp, #0
 80167c0:	6078      	str	r0, [r7, #4]
 80167c2:	4608      	mov	r0, r1
 80167c4:	4611      	mov	r1, r2
 80167c6:	461a      	mov	r2, r3
 80167c8:	4603      	mov	r3, r0
 80167ca:	70fb      	strb	r3, [r7, #3]
 80167cc:	460b      	mov	r3, r1
 80167ce:	70bb      	strb	r3, [r7, #2]
 80167d0:	4613      	mov	r3, r2
 80167d2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80167d4:	78fb      	ldrb	r3, [r7, #3]
 80167d6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80167d8:	78bb      	ldrb	r3, [r7, #2]
 80167da:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80167dc:	787b      	ldrb	r3, [r7, #1]
 80167de:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80167e0:	6a3b      	ldr	r3, [r7, #32]
 80167e2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	689c      	ldr	r4, [r3, #8]
 80167e8:	f107 0308 	add.w	r3, r7, #8
 80167ec:	2201      	movs	r2, #1
 80167ee:	210f      	movs	r1, #15
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	47a0      	blx	r4
 80167f4:	4603      	mov	r3, r0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3714      	adds	r7, #20
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd90      	pop	{r4, r7, pc}

080167fe <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80167fe:	b590      	push	{r4, r7, lr}
 8016800:	b083      	sub	sp, #12
 8016802:	af00      	add	r7, sp, #0
 8016804:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	689c      	ldr	r4, [r3, #8]
 801680a:	2300      	movs	r3, #0
 801680c:	2200      	movs	r2, #0
 801680e:	2109      	movs	r1, #9
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	47a0      	blx	r4
}
 8016814:	bf00      	nop
 8016816:	370c      	adds	r7, #12
 8016818:	46bd      	mov	sp, r7
 801681a:	bd90      	pop	{r4, r7, pc}

0801681c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 801681c:	b590      	push	{r4, r7, lr}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	689c      	ldr	r4, [r3, #8]
 8016828:	2300      	movs	r3, #0
 801682a:	2200      	movs	r2, #0
 801682c:	210a      	movs	r1, #10
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	47a0      	blx	r4
}
 8016832:	bf00      	nop
 8016834:	370c      	adds	r7, #12
 8016836:	46bd      	mov	sp, r7
 8016838:	bd90      	pop	{r4, r7, pc}

0801683a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 801683a:	b590      	push	{r4, r7, lr}
 801683c:	b083      	sub	sp, #12
 801683e:	af00      	add	r7, sp, #0
 8016840:	6078      	str	r0, [r7, #4]
 8016842:	460b      	mov	r3, r1
 8016844:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	689c      	ldr	r4, [r3, #8]
 801684a:	78fa      	ldrb	r2, [r7, #3]
 801684c:	2300      	movs	r3, #0
 801684e:	210b      	movs	r1, #11
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	47a0      	blx	r4
}
 8016854:	bf00      	nop
 8016856:	370c      	adds	r7, #12
 8016858:	46bd      	mov	sp, r7
 801685a:	bd90      	pop	{r4, r7, pc}

0801685c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 801685c:	b590      	push	{r4, r7, lr}
 801685e:	b083      	sub	sp, #12
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	689c      	ldr	r4, [r3, #8]
 8016868:	2300      	movs	r3, #0
 801686a:	2200      	movs	r2, #0
 801686c:	2110      	movs	r1, #16
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	47a0      	blx	r4
}
 8016872:	bf00      	nop
 8016874:	370c      	adds	r7, #12
 8016876:	46bd      	mov	sp, r7
 8016878:	bd90      	pop	{r4, r7, pc}

0801687a <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 801687a:	b590      	push	{r4, r7, lr}
 801687c:	b083      	sub	sp, #12
 801687e:	af00      	add	r7, sp, #0
 8016880:	6078      	str	r0, [r7, #4]
 8016882:	460b      	mov	r3, r1
 8016884:	70fb      	strb	r3, [r7, #3]
 8016886:	4613      	mov	r3, r2
 8016888:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	695c      	ldr	r4, [r3, #20]
 801688e:	78ba      	ldrb	r2, [r7, #2]
 8016890:	78f9      	ldrb	r1, [r7, #3]
 8016892:	2300      	movs	r3, #0
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	47a0      	blx	r4
}
 8016898:	bf00      	nop
 801689a:	370c      	adds	r7, #12
 801689c:	46bd      	mov	sp, r7
 801689e:	bd90      	pop	{r4, r7, pc}

080168a0 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80168a0:	b480      	push	{r7}
 80168a2:	b085      	sub	sp, #20
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	60f8      	str	r0, [r7, #12]
 80168a8:	607b      	str	r3, [r7, #4]
 80168aa:	460b      	mov	r3, r1
 80168ac:	72fb      	strb	r3, [r7, #11]
 80168ae:	4613      	mov	r3, r2
 80168b0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80168b2:	2300      	movs	r3, #0
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3714      	adds	r7, #20
 80168b8:	46bd      	mov	sp, r7
 80168ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168be:	4770      	bx	lr

080168c0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80168c0:	b480      	push	{r7}
 80168c2:	b083      	sub	sp, #12
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2200      	movs	r2, #0
 80168cc:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	4a11      	ldr	r2, [pc, #68]	; (8016918 <u8x8_SetupDefaults+0x58>)
 80168d2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	4a10      	ldr	r2, [pc, #64]	; (8016918 <u8x8_SetupDefaults+0x58>)
 80168d8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	4a0e      	ldr	r2, [pc, #56]	; (8016918 <u8x8_SetupDefaults+0x58>)
 80168de:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	4a0d      	ldr	r2, [pc, #52]	; (8016918 <u8x8_SetupDefaults+0x58>)
 80168e4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2200      	movs	r2, #0
 80168ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2200      	movs	r2, #0
 80168f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2200      	movs	r2, #0
 80168fa:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	22ff      	movs	r2, #255	; 0xff
 8016900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	22ff      	movs	r2, #255	; 0xff
 8016908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 801690c:	bf00      	nop
 801690e:	370c      	adds	r7, #12
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	080168a1 	.word	0x080168a1

0801691c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b084      	sub	sp, #16
 8016920:	af00      	add	r7, sp, #0
 8016922:	60f8      	str	r0, [r7, #12]
 8016924:	60b9      	str	r1, [r7, #8]
 8016926:	607a      	str	r2, [r7, #4]
 8016928:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 801692a:	68f8      	ldr	r0, [r7, #12]
 801692c:	f7ff ffc8 	bl	80168c0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	68ba      	ldr	r2, [r7, #8]
 8016934:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	683a      	ldr	r2, [r7, #0]
 8016940:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	69ba      	ldr	r2, [r7, #24]
 8016946:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8016948:	68f8      	ldr	r0, [r7, #12]
 801694a:	f7ff ff58 	bl	80167fe <u8x8_SetupMemory>
}
 801694e:	bf00      	nop
 8016950:	3710      	adds	r7, #16
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
	...

08016958 <ADC_options_screen_func>:
const char* SPS_name[16]={ "2SPS", "4SPS", "8SPS", "16SPS", "32SPS", "63SPS", "125SPS", "250SPS",
		"500SPS", "1000SPS", "2000SPS", "4000SPS", "8000SPS", "16000SPS", "32000SPS", "64000SPS"};
const char* CAL_name[4]={"SELF", "OFFSET", "FULL SCALE", "NEW"};

void ADC_options_screen_func(void)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af02      	add	r7, sp, #8
	RTC_view();
 801695e:	f001 f937 	bl	8017bd0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016962:	4957      	ldr	r1, [pc, #348]	; (8016ac0 <ADC_options_screen_func+0x168>)
 8016964:	4857      	ldr	r0, [pc, #348]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016966:	f7ff f88d 	bl	8015a84 <u8g2_SetFont>

	// PGA 0
	u8g2_DrawUTF8(&u8g2, 10, 40, "PGA 0:");
 801696a:	4b57      	ldr	r3, [pc, #348]	; (8016ac8 <ADC_options_screen_func+0x170>)
 801696c:	2228      	movs	r2, #40	; 0x28
 801696e:	210a      	movs	r1, #10
 8016970:	4854      	ldr	r0, [pc, #336]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016972:	f7fe ffe5 	bl	8015940 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 40, PGA_name[PGA_GAIN[0]], edit_param, 0);
 8016976:	4b55      	ldr	r3, [pc, #340]	; (8016acc <ADC_options_screen_func+0x174>)
 8016978:	781b      	ldrb	r3, [r3, #0]
 801697a:	461a      	mov	r2, r3
 801697c:	4b54      	ldr	r3, [pc, #336]	; (8016ad0 <ADC_options_screen_func+0x178>)
 801697e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016982:	4b54      	ldr	r3, [pc, #336]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	2100      	movs	r1, #0
 8016988:	9100      	str	r1, [sp, #0]
 801698a:	2128      	movs	r1, #40	; 0x28
 801698c:	2078      	movs	r0, #120	; 0x78
 801698e:	f7ec f813 	bl	80029b8 <Blink_Edit_Parameter>
	// PGA 1
	u8g2_DrawUTF8(&u8g2, 10, 58, "PGA 1:");
 8016992:	4b51      	ldr	r3, [pc, #324]	; (8016ad8 <ADC_options_screen_func+0x180>)
 8016994:	223a      	movs	r2, #58	; 0x3a
 8016996:	210a      	movs	r1, #10
 8016998:	484a      	ldr	r0, [pc, #296]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 801699a:	f7fe ffd1 	bl	8015940 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 58, PGA_name[PGA_GAIN[1]], edit_param, 1);
 801699e:	4b4b      	ldr	r3, [pc, #300]	; (8016acc <ADC_options_screen_func+0x174>)
 80169a0:	785b      	ldrb	r3, [r3, #1]
 80169a2:	461a      	mov	r2, r3
 80169a4:	4b4a      	ldr	r3, [pc, #296]	; (8016ad0 <ADC_options_screen_func+0x178>)
 80169a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169aa:	4b4a      	ldr	r3, [pc, #296]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	2101      	movs	r1, #1
 80169b0:	9100      	str	r1, [sp, #0]
 80169b2:	213a      	movs	r1, #58	; 0x3a
 80169b4:	2078      	movs	r0, #120	; 0x78
 80169b6:	f7eb ffff 	bl	80029b8 <Blink_Edit_Parameter>
	// PGA 2
	u8g2_DrawUTF8(&u8g2, 10, 76, "PGA 2:");
 80169ba:	4b48      	ldr	r3, [pc, #288]	; (8016adc <ADC_options_screen_func+0x184>)
 80169bc:	224c      	movs	r2, #76	; 0x4c
 80169be:	210a      	movs	r1, #10
 80169c0:	4840      	ldr	r0, [pc, #256]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 80169c2:	f7fe ffbd 	bl	8015940 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 76, PGA_name[PGA_GAIN[2]], edit_param, 2);
 80169c6:	4b41      	ldr	r3, [pc, #260]	; (8016acc <ADC_options_screen_func+0x174>)
 80169c8:	789b      	ldrb	r3, [r3, #2]
 80169ca:	461a      	mov	r2, r3
 80169cc:	4b40      	ldr	r3, [pc, #256]	; (8016ad0 <ADC_options_screen_func+0x178>)
 80169ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169d2:	4b40      	ldr	r3, [pc, #256]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	2102      	movs	r1, #2
 80169d8:	9100      	str	r1, [sp, #0]
 80169da:	214c      	movs	r1, #76	; 0x4c
 80169dc:	2078      	movs	r0, #120	; 0x78
 80169de:	f7eb ffeb 	bl	80029b8 <Blink_Edit_Parameter>
	// PGA 3
	u8g2_DrawUTF8(&u8g2, 10, 94, "PGA 3:");
 80169e2:	4b3f      	ldr	r3, [pc, #252]	; (8016ae0 <ADC_options_screen_func+0x188>)
 80169e4:	225e      	movs	r2, #94	; 0x5e
 80169e6:	210a      	movs	r1, #10
 80169e8:	4836      	ldr	r0, [pc, #216]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 80169ea:	f7fe ffa9 	bl	8015940 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 94, PGA_name[PGA_GAIN[3]], edit_param, 3);
 80169ee:	4b37      	ldr	r3, [pc, #220]	; (8016acc <ADC_options_screen_func+0x174>)
 80169f0:	78db      	ldrb	r3, [r3, #3]
 80169f2:	461a      	mov	r2, r3
 80169f4:	4b36      	ldr	r3, [pc, #216]	; (8016ad0 <ADC_options_screen_func+0x178>)
 80169f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169fa:	4b36      	ldr	r3, [pc, #216]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	2103      	movs	r1, #3
 8016a00:	9100      	str	r1, [sp, #0]
 8016a02:	215e      	movs	r1, #94	; 0x5e
 8016a04:	2078      	movs	r0, #120	; 0x78
 8016a06:	f7eb ffd7 	bl	80029b8 <Blink_Edit_Parameter>
	// PGA 4
	u8g2_DrawUTF8(&u8g2, 10, 112, "PGA 4:");
 8016a0a:	4b36      	ldr	r3, [pc, #216]	; (8016ae4 <ADC_options_screen_func+0x18c>)
 8016a0c:	2270      	movs	r2, #112	; 0x70
 8016a0e:	210a      	movs	r1, #10
 8016a10:	482c      	ldr	r0, [pc, #176]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016a12:	f7fe ff95 	bl	8015940 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 112, PGA_name[PGA_GAIN[4]], edit_param, 4);
 8016a16:	4b2d      	ldr	r3, [pc, #180]	; (8016acc <ADC_options_screen_func+0x174>)
 8016a18:	791b      	ldrb	r3, [r3, #4]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4b2c      	ldr	r3, [pc, #176]	; (8016ad0 <ADC_options_screen_func+0x178>)
 8016a1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016a22:	4b2c      	ldr	r3, [pc, #176]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	2104      	movs	r1, #4
 8016a28:	9100      	str	r1, [sp, #0]
 8016a2a:	2170      	movs	r1, #112	; 0x70
 8016a2c:	2078      	movs	r0, #120	; 0x78
 8016a2e:	f7eb ffc3 	bl	80029b8 <Blink_Edit_Parameter>
	// PGA 5
	u8g2_DrawUTF8(&u8g2, 10, 130, "PGA 5:");
 8016a32:	4b2d      	ldr	r3, [pc, #180]	; (8016ae8 <ADC_options_screen_func+0x190>)
 8016a34:	2282      	movs	r2, #130	; 0x82
 8016a36:	210a      	movs	r1, #10
 8016a38:	4822      	ldr	r0, [pc, #136]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016a3a:	f7fe ff81 	bl	8015940 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 130, PGA_name[PGA_GAIN[5]], edit_param, 5);
 8016a3e:	4b23      	ldr	r3, [pc, #140]	; (8016acc <ADC_options_screen_func+0x174>)
 8016a40:	795b      	ldrb	r3, [r3, #5]
 8016a42:	461a      	mov	r2, r3
 8016a44:	4b22      	ldr	r3, [pc, #136]	; (8016ad0 <ADC_options_screen_func+0x178>)
 8016a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016a4a:	4b22      	ldr	r3, [pc, #136]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	2105      	movs	r1, #5
 8016a50:	9100      	str	r1, [sp, #0]
 8016a52:	2182      	movs	r1, #130	; 0x82
 8016a54:	2078      	movs	r0, #120	; 0x78
 8016a56:	f7eb ffaf 	bl	80029b8 <Blink_Edit_Parameter>
	// SPS
	u8g2_DrawUTF8(&u8g2, 10, 155, "RATE:");
 8016a5a:	4b24      	ldr	r3, [pc, #144]	; (8016aec <ADC_options_screen_func+0x194>)
 8016a5c:	229b      	movs	r2, #155	; 0x9b
 8016a5e:	210a      	movs	r1, #10
 8016a60:	4818      	ldr	r0, [pc, #96]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016a62:	f7fe ff6d 	bl	8015940 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(65, 155, SPS_name[ADC_SPS], edit_param, 6);
 8016a66:	4b22      	ldr	r3, [pc, #136]	; (8016af0 <ADC_options_screen_func+0x198>)
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	461a      	mov	r2, r3
 8016a6c:	4b21      	ldr	r3, [pc, #132]	; (8016af4 <ADC_options_screen_func+0x19c>)
 8016a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016a72:	4b18      	ldr	r3, [pc, #96]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	2106      	movs	r1, #6
 8016a78:	9100      	str	r1, [sp, #0]
 8016a7a:	219b      	movs	r1, #155	; 0x9b
 8016a7c:	2041      	movs	r0, #65	; 0x41
 8016a7e:	f7eb ff9b 	bl	80029b8 <Blink_Edit_Parameter>
	// Size
	u8g2_DrawUTF8(&u8g2, 155, 155, "Size:");
 8016a82:	4b1d      	ldr	r3, [pc, #116]	; (8016af8 <ADC_options_screen_func+0x1a0>)
 8016a84:	229b      	movs	r2, #155	; 0x9b
 8016a86:	219b      	movs	r1, #155	; 0x9b
 8016a88:	480e      	ldr	r0, [pc, #56]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016a8a:	f7fe ff59 	bl	8015940 <u8g2_DrawUTF8>
	sprintf((char*)RAM,"%d", ADC_Buff_size);
 8016a8e:	4b1b      	ldr	r3, [pc, #108]	; (8016afc <ADC_options_screen_func+0x1a4>)
 8016a90:	881b      	ldrh	r3, [r3, #0]
 8016a92:	461a      	mov	r2, r3
 8016a94:	491a      	ldr	r1, [pc, #104]	; (8016b00 <ADC_options_screen_func+0x1a8>)
 8016a96:	481b      	ldr	r0, [pc, #108]	; (8016b04 <ADC_options_screen_func+0x1ac>)
 8016a98:	f007 fa0a 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(205, 155, (char*)RAM, edit_param, 7);
 8016a9c:	4b0d      	ldr	r3, [pc, #52]	; (8016ad4 <ADC_options_screen_func+0x17c>)
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	2207      	movs	r2, #7
 8016aa2:	9200      	str	r2, [sp, #0]
 8016aa4:	4a17      	ldr	r2, [pc, #92]	; (8016b04 <ADC_options_screen_func+0x1ac>)
 8016aa6:	219b      	movs	r1, #155	; 0x9b
 8016aa8:	20cd      	movs	r0, #205	; 0xcd
 8016aaa:	f7eb ff85 	bl	80029b8 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 8016aae:	4805      	ldr	r0, [pc, #20]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016ab0:	f7fe f9ab 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016ab4:	4803      	ldr	r0, [pc, #12]	; (8016ac4 <ADC_options_screen_func+0x16c>)
 8016ab6:	f7fe f935 	bl	8014d24 <u8g2_ClearBuffer>
}
 8016aba:	bf00      	nop
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}
 8016ac0:	080271b0 	.word	0x080271b0
 8016ac4:	20002098 	.word	0x20002098
 8016ac8:	080223c0 	.word	0x080223c0
 8016acc:	20000094 	.word	0x20000094
 8016ad0:	20000050 	.word	0x20000050
 8016ad4:	2000091c 	.word	0x2000091c
 8016ad8:	080223c8 	.word	0x080223c8
 8016adc:	080223d0 	.word	0x080223d0
 8016ae0:	080223d8 	.word	0x080223d8
 8016ae4:	080223e0 	.word	0x080223e0
 8016ae8:	080223e8 	.word	0x080223e8
 8016aec:	080223f0 	.word	0x080223f0
 8016af0:	2000009b 	.word	0x2000009b
 8016af4:	200003f0 	.word	0x200003f0
 8016af8:	080223f8 	.word	0x080223f8
 8016afc:	2000009c 	.word	0x2000009c
 8016b00:	08022400 	.word	0x08022400
 8016b04:	20002158 	.word	0x20002158

08016b08 <ADC_options_screen_S6>:



// DOWN
void ADC_options_screen_S6(void)
{
 8016b08:	b480      	push	{r7}
 8016b0a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8016b0c:	4b09      	ldr	r3, [pc, #36]	; (8016b34 <ADC_options_screen_S6+0x2c>)
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	2b06      	cmp	r3, #6
 8016b12:	d806      	bhi.n	8016b22 <ADC_options_screen_S6+0x1a>
 8016b14:	4b07      	ldr	r3, [pc, #28]	; (8016b34 <ADC_options_screen_S6+0x2c>)
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	3301      	adds	r3, #1
 8016b1a:	b2da      	uxtb	r2, r3
 8016b1c:	4b05      	ldr	r3, [pc, #20]	; (8016b34 <ADC_options_screen_S6+0x2c>)
 8016b1e:	701a      	strb	r2, [r3, #0]
	else edit_param=0;
}
 8016b20:	e002      	b.n	8016b28 <ADC_options_screen_S6+0x20>
	else edit_param=0;
 8016b22:	4b04      	ldr	r3, [pc, #16]	; (8016b34 <ADC_options_screen_S6+0x2c>)
 8016b24:	2200      	movs	r2, #0
 8016b26:	701a      	strb	r2, [r3, #0]
}
 8016b28:	bf00      	nop
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	2000091c 	.word	0x2000091c

08016b38 <ADC_options_screen_S7>:

// UP
void ADC_options_screen_S7(void)
{
 8016b38:	b480      	push	{r7}
 8016b3a:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8016b3c:	4b09      	ldr	r3, [pc, #36]	; (8016b64 <ADC_options_screen_S7+0x2c>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d006      	beq.n	8016b52 <ADC_options_screen_S7+0x1a>
 8016b44:	4b07      	ldr	r3, [pc, #28]	; (8016b64 <ADC_options_screen_S7+0x2c>)
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	3b01      	subs	r3, #1
 8016b4a:	b2da      	uxtb	r2, r3
 8016b4c:	4b05      	ldr	r3, [pc, #20]	; (8016b64 <ADC_options_screen_S7+0x2c>)
 8016b4e:	701a      	strb	r2, [r3, #0]
	else edit_param=max_edit_param-1;
}
 8016b50:	e002      	b.n	8016b58 <ADC_options_screen_S7+0x20>
	else edit_param=max_edit_param-1;
 8016b52:	4b04      	ldr	r3, [pc, #16]	; (8016b64 <ADC_options_screen_S7+0x2c>)
 8016b54:	2207      	movs	r2, #7
 8016b56:	701a      	strb	r2, [r3, #0]
}
 8016b58:	bf00      	nop
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop
 8016b64:	2000091c 	.word	0x2000091c

08016b68 <ADC_options_screen_S9>:


// MENU
void ADC_options_screen_S9(void)
{
 8016b68:	b480      	push	{r7}
 8016b6a:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016b6c:	4b06      	ldr	r3, [pc, #24]	; (8016b88 <ADC_options_screen_S9+0x20>)
 8016b6e:	2208      	movs	r2, #8
 8016b70:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016b72:	4b06      	ldr	r3, [pc, #24]	; (8016b8c <ADC_options_screen_S9+0x24>)
 8016b74:	22ff      	movs	r2, #255	; 0xff
 8016b76:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8016b78:	4b05      	ldr	r3, [pc, #20]	; (8016b90 <ADC_options_screen_S9+0x28>)
 8016b7a:	2205      	movs	r2, #5
 8016b7c:	701a      	strb	r2, [r3, #0]
}
 8016b7e:	bf00      	nop
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr
 8016b88:	2000004c 	.word	0x2000004c
 8016b8c:	20000460 	.word	0x20000460
 8016b90:	20000461 	.word	0x20000461

08016b94 <ADC_options_screen_S4>:



// ENTER
void ADC_options_screen_S4(void)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016b98:	4b28      	ldr	r3, [pc, #160]	; (8016c3c <ADC_options_screen_S4+0xa8>)
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	2b07      	cmp	r3, #7
 8016b9e:	d84b      	bhi.n	8016c38 <ADC_options_screen_S4+0xa4>
 8016ba0:	a201      	add	r2, pc, #4	; (adr r2, 8016ba8 <ADC_options_screen_S4+0x14>)
 8016ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ba6:	bf00      	nop
 8016ba8:	08016bc9 	.word	0x08016bc9
 8016bac:	08016bd7 	.word	0x08016bd7
 8016bb0:	08016be5 	.word	0x08016be5
 8016bb4:	08016bf3 	.word	0x08016bf3
 8016bb8:	08016c01 	.word	0x08016c01
 8016bbc:	08016c0f 	.word	0x08016c0f
 8016bc0:	08016c1d 	.word	0x08016c1d
 8016bc4:	08016c2b 	.word	0x08016c2b
	{
		case 0: Save_Settings(PGA_GAIN0_tag, PGA_GAIN[0]); break;
 8016bc8:	4b1d      	ldr	r3, [pc, #116]	; (8016c40 <ADC_options_screen_S4+0xac>)
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	4619      	mov	r1, r3
 8016bce:	2008      	movs	r0, #8
 8016bd0:	f7ee fc72 	bl	80054b8 <Save_Settings>
 8016bd4:	e030      	b.n	8016c38 <ADC_options_screen_S4+0xa4>
		case 1: Save_Settings(PGA_GAIN1_tag, PGA_GAIN[1]); break;
 8016bd6:	4b1a      	ldr	r3, [pc, #104]	; (8016c40 <ADC_options_screen_S4+0xac>)
 8016bd8:	785b      	ldrb	r3, [r3, #1]
 8016bda:	4619      	mov	r1, r3
 8016bdc:	2009      	movs	r0, #9
 8016bde:	f7ee fc6b 	bl	80054b8 <Save_Settings>
 8016be2:	e029      	b.n	8016c38 <ADC_options_screen_S4+0xa4>
		case 2: Save_Settings(PGA_GAIN2_tag, PGA_GAIN[2]); break;
 8016be4:	4b16      	ldr	r3, [pc, #88]	; (8016c40 <ADC_options_screen_S4+0xac>)
 8016be6:	789b      	ldrb	r3, [r3, #2]
 8016be8:	4619      	mov	r1, r3
 8016bea:	200a      	movs	r0, #10
 8016bec:	f7ee fc64 	bl	80054b8 <Save_Settings>
 8016bf0:	e022      	b.n	8016c38 <ADC_options_screen_S4+0xa4>
		case 3: Save_Settings(PGA_GAIN3_tag, PGA_GAIN[3]); break;
 8016bf2:	4b13      	ldr	r3, [pc, #76]	; (8016c40 <ADC_options_screen_S4+0xac>)
 8016bf4:	78db      	ldrb	r3, [r3, #3]
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	200b      	movs	r0, #11
 8016bfa:	f7ee fc5d 	bl	80054b8 <Save_Settings>
 8016bfe:	e01b      	b.n	8016c38 <ADC_options_screen_S4+0xa4>
		case 4: Save_Settings(PGA_GAIN4_tag, PGA_GAIN[4]); break;
 8016c00:	4b0f      	ldr	r3, [pc, #60]	; (8016c40 <ADC_options_screen_S4+0xac>)
 8016c02:	791b      	ldrb	r3, [r3, #4]
 8016c04:	4619      	mov	r1, r3
 8016c06:	200c      	movs	r0, #12
 8016c08:	f7ee fc56 	bl	80054b8 <Save_Settings>
 8016c0c:	e014      	b.n	8016c38 <ADC_options_screen_S4+0xa4>
		case 5: Save_Settings(PGA_GAIN5_tag, PGA_GAIN[5]); break;
 8016c0e:	4b0c      	ldr	r3, [pc, #48]	; (8016c40 <ADC_options_screen_S4+0xac>)
 8016c10:	795b      	ldrb	r3, [r3, #5]
 8016c12:	4619      	mov	r1, r3
 8016c14:	200d      	movs	r0, #13
 8016c16:	f7ee fc4f 	bl	80054b8 <Save_Settings>
 8016c1a:	e00d      	b.n	8016c38 <ADC_options_screen_S4+0xa4>
		case 6: Save_Settings(ADC_SPS_tag, ADC_SPS); break;
 8016c1c:	4b09      	ldr	r3, [pc, #36]	; (8016c44 <ADC_options_screen_S4+0xb0>)
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	4619      	mov	r1, r3
 8016c22:	200f      	movs	r0, #15
 8016c24:	f7ee fc48 	bl	80054b8 <Save_Settings>
 8016c28:	e006      	b.n	8016c38 <ADC_options_screen_S4+0xa4>
		case 7: Save_Settings(ADC_Buff_size_tag, ADC_Buff_size); break;
 8016c2a:	4b07      	ldr	r3, [pc, #28]	; (8016c48 <ADC_options_screen_S4+0xb4>)
 8016c2c:	881b      	ldrh	r3, [r3, #0]
 8016c2e:	4619      	mov	r1, r3
 8016c30:	2011      	movs	r0, #17
 8016c32:	f7ee fc41 	bl	80054b8 <Save_Settings>
 8016c36:	bf00      	nop
	}
}
 8016c38:	bf00      	nop
 8016c3a:	bd80      	pop	{r7, pc}
 8016c3c:	2000091c 	.word	0x2000091c
 8016c40:	20000094 	.word	0x20000094
 8016c44:	2000009b 	.word	0x2000009b
 8016c48:	2000009c 	.word	0x2000009c

08016c4c <ADC_options_screen_S8>:



// BACKWARD
void ADC_options_screen_S8(void)
{
 8016c4c:	b480      	push	{r7}
 8016c4e:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016c50:	4b41      	ldr	r3, [pc, #260]	; (8016d58 <ADC_options_screen_S8+0x10c>)
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	2b07      	cmp	r3, #7
 8016c56:	d87a      	bhi.n	8016d4e <ADC_options_screen_S8+0x102>
 8016c58:	a201      	add	r2, pc, #4	; (adr r2, 8016c60 <ADC_options_screen_S8+0x14>)
 8016c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c5e:	bf00      	nop
 8016c60:	08016c81 	.word	0x08016c81
 8016c64:	08016c97 	.word	0x08016c97
 8016c68:	08016cad 	.word	0x08016cad
 8016c6c:	08016cc3 	.word	0x08016cc3
 8016c70:	08016cd9 	.word	0x08016cd9
 8016c74:	08016cef 	.word	0x08016cef
 8016c78:	08016d05 	.word	0x08016d05
 8016c7c:	08016d1b 	.word	0x08016d1b
	{
		case 0: if(PGA_GAIN[0]>0)PGA_GAIN[0]--; break;
 8016c80:	4b36      	ldr	r3, [pc, #216]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d053      	beq.n	8016d30 <ADC_options_screen_S8+0xe4>
 8016c88:	4b34      	ldr	r3, [pc, #208]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	3b01      	subs	r3, #1
 8016c8e:	b2da      	uxtb	r2, r3
 8016c90:	4b32      	ldr	r3, [pc, #200]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016c92:	701a      	strb	r2, [r3, #0]
 8016c94:	e04c      	b.n	8016d30 <ADC_options_screen_S8+0xe4>
		case 1: if(PGA_GAIN[1]>0)PGA_GAIN[1]--; break;
 8016c96:	4b31      	ldr	r3, [pc, #196]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016c98:	785b      	ldrb	r3, [r3, #1]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d04a      	beq.n	8016d34 <ADC_options_screen_S8+0xe8>
 8016c9e:	4b2f      	ldr	r3, [pc, #188]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016ca0:	785b      	ldrb	r3, [r3, #1]
 8016ca2:	3b01      	subs	r3, #1
 8016ca4:	b2da      	uxtb	r2, r3
 8016ca6:	4b2d      	ldr	r3, [pc, #180]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016ca8:	705a      	strb	r2, [r3, #1]
 8016caa:	e043      	b.n	8016d34 <ADC_options_screen_S8+0xe8>
		case 2: if(PGA_GAIN[2]>0)PGA_GAIN[2]--; break;
 8016cac:	4b2b      	ldr	r3, [pc, #172]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cae:	789b      	ldrb	r3, [r3, #2]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d041      	beq.n	8016d38 <ADC_options_screen_S8+0xec>
 8016cb4:	4b29      	ldr	r3, [pc, #164]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cb6:	789b      	ldrb	r3, [r3, #2]
 8016cb8:	3b01      	subs	r3, #1
 8016cba:	b2da      	uxtb	r2, r3
 8016cbc:	4b27      	ldr	r3, [pc, #156]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cbe:	709a      	strb	r2, [r3, #2]
 8016cc0:	e03a      	b.n	8016d38 <ADC_options_screen_S8+0xec>
		case 3: if(PGA_GAIN[3]>0)PGA_GAIN[3]--; break;
 8016cc2:	4b26      	ldr	r3, [pc, #152]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cc4:	78db      	ldrb	r3, [r3, #3]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d038      	beq.n	8016d3c <ADC_options_screen_S8+0xf0>
 8016cca:	4b24      	ldr	r3, [pc, #144]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016ccc:	78db      	ldrb	r3, [r3, #3]
 8016cce:	3b01      	subs	r3, #1
 8016cd0:	b2da      	uxtb	r2, r3
 8016cd2:	4b22      	ldr	r3, [pc, #136]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cd4:	70da      	strb	r2, [r3, #3]
 8016cd6:	e031      	b.n	8016d3c <ADC_options_screen_S8+0xf0>
		case 4: if(PGA_GAIN[4]>0)PGA_GAIN[4]--; break;
 8016cd8:	4b20      	ldr	r3, [pc, #128]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cda:	791b      	ldrb	r3, [r3, #4]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d02f      	beq.n	8016d40 <ADC_options_screen_S8+0xf4>
 8016ce0:	4b1e      	ldr	r3, [pc, #120]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016ce2:	791b      	ldrb	r3, [r3, #4]
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	b2da      	uxtb	r2, r3
 8016ce8:	4b1c      	ldr	r3, [pc, #112]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cea:	711a      	strb	r2, [r3, #4]
 8016cec:	e028      	b.n	8016d40 <ADC_options_screen_S8+0xf4>
		case 5: if(PGA_GAIN[5]>0)PGA_GAIN[5]--; break;
 8016cee:	4b1b      	ldr	r3, [pc, #108]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cf0:	795b      	ldrb	r3, [r3, #5]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d026      	beq.n	8016d44 <ADC_options_screen_S8+0xf8>
 8016cf6:	4b19      	ldr	r3, [pc, #100]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016cf8:	795b      	ldrb	r3, [r3, #5]
 8016cfa:	3b01      	subs	r3, #1
 8016cfc:	b2da      	uxtb	r2, r3
 8016cfe:	4b17      	ldr	r3, [pc, #92]	; (8016d5c <ADC_options_screen_S8+0x110>)
 8016d00:	715a      	strb	r2, [r3, #5]
 8016d02:	e01f      	b.n	8016d44 <ADC_options_screen_S8+0xf8>
		case 6: if(ADC_SPS>0)ADC_SPS--; break;
 8016d04:	4b16      	ldr	r3, [pc, #88]	; (8016d60 <ADC_options_screen_S8+0x114>)
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d01d      	beq.n	8016d48 <ADC_options_screen_S8+0xfc>
 8016d0c:	4b14      	ldr	r3, [pc, #80]	; (8016d60 <ADC_options_screen_S8+0x114>)
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	3b01      	subs	r3, #1
 8016d12:	b2da      	uxtb	r2, r3
 8016d14:	4b12      	ldr	r3, [pc, #72]	; (8016d60 <ADC_options_screen_S8+0x114>)
 8016d16:	701a      	strb	r2, [r3, #0]
 8016d18:	e016      	b.n	8016d48 <ADC_options_screen_S8+0xfc>
		case 7: if(ADC_Buff_size>0)ADC_Buff_size--; break;
 8016d1a:	4b12      	ldr	r3, [pc, #72]	; (8016d64 <ADC_options_screen_S8+0x118>)
 8016d1c:	881b      	ldrh	r3, [r3, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d014      	beq.n	8016d4c <ADC_options_screen_S8+0x100>
 8016d22:	4b10      	ldr	r3, [pc, #64]	; (8016d64 <ADC_options_screen_S8+0x118>)
 8016d24:	881b      	ldrh	r3, [r3, #0]
 8016d26:	3b01      	subs	r3, #1
 8016d28:	b29a      	uxth	r2, r3
 8016d2a:	4b0e      	ldr	r3, [pc, #56]	; (8016d64 <ADC_options_screen_S8+0x118>)
 8016d2c:	801a      	strh	r2, [r3, #0]
 8016d2e:	e00d      	b.n	8016d4c <ADC_options_screen_S8+0x100>
		case 0: if(PGA_GAIN[0]>0)PGA_GAIN[0]--; break;
 8016d30:	bf00      	nop
 8016d32:	e00c      	b.n	8016d4e <ADC_options_screen_S8+0x102>
		case 1: if(PGA_GAIN[1]>0)PGA_GAIN[1]--; break;
 8016d34:	bf00      	nop
 8016d36:	e00a      	b.n	8016d4e <ADC_options_screen_S8+0x102>
		case 2: if(PGA_GAIN[2]>0)PGA_GAIN[2]--; break;
 8016d38:	bf00      	nop
 8016d3a:	e008      	b.n	8016d4e <ADC_options_screen_S8+0x102>
		case 3: if(PGA_GAIN[3]>0)PGA_GAIN[3]--; break;
 8016d3c:	bf00      	nop
 8016d3e:	e006      	b.n	8016d4e <ADC_options_screen_S8+0x102>
		case 4: if(PGA_GAIN[4]>0)PGA_GAIN[4]--; break;
 8016d40:	bf00      	nop
 8016d42:	e004      	b.n	8016d4e <ADC_options_screen_S8+0x102>
		case 5: if(PGA_GAIN[5]>0)PGA_GAIN[5]--; break;
 8016d44:	bf00      	nop
 8016d46:	e002      	b.n	8016d4e <ADC_options_screen_S8+0x102>
		case 6: if(ADC_SPS>0)ADC_SPS--; break;
 8016d48:	bf00      	nop
 8016d4a:	e000      	b.n	8016d4e <ADC_options_screen_S8+0x102>
		case 7: if(ADC_Buff_size>0)ADC_Buff_size--; break;
 8016d4c:	bf00      	nop
	}
}
 8016d4e:	bf00      	nop
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr
 8016d58:	2000091c 	.word	0x2000091c
 8016d5c:	20000094 	.word	0x20000094
 8016d60:	2000009b 	.word	0x2000009b
 8016d64:	2000009c 	.word	0x2000009c

08016d68 <ADC_options_screen_S5>:


// FORWARD
void ADC_options_screen_S5(void)
{
 8016d68:	b480      	push	{r7}
 8016d6a:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016d6c:	4b42      	ldr	r3, [pc, #264]	; (8016e78 <ADC_options_screen_S5+0x110>)
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	2b07      	cmp	r3, #7
 8016d72:	d87b      	bhi.n	8016e6c <ADC_options_screen_S5+0x104>
 8016d74:	a201      	add	r2, pc, #4	; (adr r2, 8016d7c <ADC_options_screen_S5+0x14>)
 8016d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d7a:	bf00      	nop
 8016d7c:	08016d9d 	.word	0x08016d9d
 8016d80:	08016db3 	.word	0x08016db3
 8016d84:	08016dc9 	.word	0x08016dc9
 8016d88:	08016ddf 	.word	0x08016ddf
 8016d8c:	08016df5 	.word	0x08016df5
 8016d90:	08016e0b 	.word	0x08016e0b
 8016d94:	08016e21 	.word	0x08016e21
 8016d98:	08016e37 	.word	0x08016e37
	{
		case 0: if(PGA_GAIN[0]<8)PGA_GAIN[0]++; break;
 8016d9c:	4b37      	ldr	r3, [pc, #220]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	2b07      	cmp	r3, #7
 8016da2:	d854      	bhi.n	8016e4e <ADC_options_screen_S5+0xe6>
 8016da4:	4b35      	ldr	r3, [pc, #212]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	3301      	adds	r3, #1
 8016daa:	b2da      	uxtb	r2, r3
 8016dac:	4b33      	ldr	r3, [pc, #204]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016dae:	701a      	strb	r2, [r3, #0]
 8016db0:	e04d      	b.n	8016e4e <ADC_options_screen_S5+0xe6>
		case 1: if(PGA_GAIN[1]<8)PGA_GAIN[1]++; break;
 8016db2:	4b32      	ldr	r3, [pc, #200]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016db4:	785b      	ldrb	r3, [r3, #1]
 8016db6:	2b07      	cmp	r3, #7
 8016db8:	d84b      	bhi.n	8016e52 <ADC_options_screen_S5+0xea>
 8016dba:	4b30      	ldr	r3, [pc, #192]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016dbc:	785b      	ldrb	r3, [r3, #1]
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	b2da      	uxtb	r2, r3
 8016dc2:	4b2e      	ldr	r3, [pc, #184]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016dc4:	705a      	strb	r2, [r3, #1]
 8016dc6:	e044      	b.n	8016e52 <ADC_options_screen_S5+0xea>
		case 2: if(PGA_GAIN[2]<8)PGA_GAIN[2]++; break;
 8016dc8:	4b2c      	ldr	r3, [pc, #176]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016dca:	789b      	ldrb	r3, [r3, #2]
 8016dcc:	2b07      	cmp	r3, #7
 8016dce:	d842      	bhi.n	8016e56 <ADC_options_screen_S5+0xee>
 8016dd0:	4b2a      	ldr	r3, [pc, #168]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016dd2:	789b      	ldrb	r3, [r3, #2]
 8016dd4:	3301      	adds	r3, #1
 8016dd6:	b2da      	uxtb	r2, r3
 8016dd8:	4b28      	ldr	r3, [pc, #160]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016dda:	709a      	strb	r2, [r3, #2]
 8016ddc:	e03b      	b.n	8016e56 <ADC_options_screen_S5+0xee>
		case 3: if(PGA_GAIN[3]<8)PGA_GAIN[3]++; break;
 8016dde:	4b27      	ldr	r3, [pc, #156]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016de0:	78db      	ldrb	r3, [r3, #3]
 8016de2:	2b07      	cmp	r3, #7
 8016de4:	d839      	bhi.n	8016e5a <ADC_options_screen_S5+0xf2>
 8016de6:	4b25      	ldr	r3, [pc, #148]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016de8:	78db      	ldrb	r3, [r3, #3]
 8016dea:	3301      	adds	r3, #1
 8016dec:	b2da      	uxtb	r2, r3
 8016dee:	4b23      	ldr	r3, [pc, #140]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016df0:	70da      	strb	r2, [r3, #3]
 8016df2:	e032      	b.n	8016e5a <ADC_options_screen_S5+0xf2>
		case 4: if(PGA_GAIN[4]<8)PGA_GAIN[4]++; break;
 8016df4:	4b21      	ldr	r3, [pc, #132]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016df6:	791b      	ldrb	r3, [r3, #4]
 8016df8:	2b07      	cmp	r3, #7
 8016dfa:	d830      	bhi.n	8016e5e <ADC_options_screen_S5+0xf6>
 8016dfc:	4b1f      	ldr	r3, [pc, #124]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016dfe:	791b      	ldrb	r3, [r3, #4]
 8016e00:	3301      	adds	r3, #1
 8016e02:	b2da      	uxtb	r2, r3
 8016e04:	4b1d      	ldr	r3, [pc, #116]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016e06:	711a      	strb	r2, [r3, #4]
 8016e08:	e029      	b.n	8016e5e <ADC_options_screen_S5+0xf6>
		case 5: if(PGA_GAIN[5]<8)PGA_GAIN[5]++; break;
 8016e0a:	4b1c      	ldr	r3, [pc, #112]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016e0c:	795b      	ldrb	r3, [r3, #5]
 8016e0e:	2b07      	cmp	r3, #7
 8016e10:	d827      	bhi.n	8016e62 <ADC_options_screen_S5+0xfa>
 8016e12:	4b1a      	ldr	r3, [pc, #104]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016e14:	795b      	ldrb	r3, [r3, #5]
 8016e16:	3301      	adds	r3, #1
 8016e18:	b2da      	uxtb	r2, r3
 8016e1a:	4b18      	ldr	r3, [pc, #96]	; (8016e7c <ADC_options_screen_S5+0x114>)
 8016e1c:	715a      	strb	r2, [r3, #5]
 8016e1e:	e020      	b.n	8016e62 <ADC_options_screen_S5+0xfa>
		case 6: if(ADC_SPS<15)ADC_SPS++; break;
 8016e20:	4b17      	ldr	r3, [pc, #92]	; (8016e80 <ADC_options_screen_S5+0x118>)
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	2b0e      	cmp	r3, #14
 8016e26:	d81e      	bhi.n	8016e66 <ADC_options_screen_S5+0xfe>
 8016e28:	4b15      	ldr	r3, [pc, #84]	; (8016e80 <ADC_options_screen_S5+0x118>)
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	3301      	adds	r3, #1
 8016e2e:	b2da      	uxtb	r2, r3
 8016e30:	4b13      	ldr	r3, [pc, #76]	; (8016e80 <ADC_options_screen_S5+0x118>)
 8016e32:	701a      	strb	r2, [r3, #0]
 8016e34:	e017      	b.n	8016e66 <ADC_options_screen_S5+0xfe>
		case 7: if(ADC_Buff_size<511)ADC_Buff_size++; break;
 8016e36:	4b13      	ldr	r3, [pc, #76]	; (8016e84 <ADC_options_screen_S5+0x11c>)
 8016e38:	881b      	ldrh	r3, [r3, #0]
 8016e3a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8016e3e:	d814      	bhi.n	8016e6a <ADC_options_screen_S5+0x102>
 8016e40:	4b10      	ldr	r3, [pc, #64]	; (8016e84 <ADC_options_screen_S5+0x11c>)
 8016e42:	881b      	ldrh	r3, [r3, #0]
 8016e44:	3301      	adds	r3, #1
 8016e46:	b29a      	uxth	r2, r3
 8016e48:	4b0e      	ldr	r3, [pc, #56]	; (8016e84 <ADC_options_screen_S5+0x11c>)
 8016e4a:	801a      	strh	r2, [r3, #0]
 8016e4c:	e00d      	b.n	8016e6a <ADC_options_screen_S5+0x102>
		case 0: if(PGA_GAIN[0]<8)PGA_GAIN[0]++; break;
 8016e4e:	bf00      	nop
 8016e50:	e00c      	b.n	8016e6c <ADC_options_screen_S5+0x104>
		case 1: if(PGA_GAIN[1]<8)PGA_GAIN[1]++; break;
 8016e52:	bf00      	nop
 8016e54:	e00a      	b.n	8016e6c <ADC_options_screen_S5+0x104>
		case 2: if(PGA_GAIN[2]<8)PGA_GAIN[2]++; break;
 8016e56:	bf00      	nop
 8016e58:	e008      	b.n	8016e6c <ADC_options_screen_S5+0x104>
		case 3: if(PGA_GAIN[3]<8)PGA_GAIN[3]++; break;
 8016e5a:	bf00      	nop
 8016e5c:	e006      	b.n	8016e6c <ADC_options_screen_S5+0x104>
		case 4: if(PGA_GAIN[4]<8)PGA_GAIN[4]++; break;
 8016e5e:	bf00      	nop
 8016e60:	e004      	b.n	8016e6c <ADC_options_screen_S5+0x104>
		case 5: if(PGA_GAIN[5]<8)PGA_GAIN[5]++; break;
 8016e62:	bf00      	nop
 8016e64:	e002      	b.n	8016e6c <ADC_options_screen_S5+0x104>
		case 6: if(ADC_SPS<15)ADC_SPS++; break;
 8016e66:	bf00      	nop
 8016e68:	e000      	b.n	8016e6c <ADC_options_screen_S5+0x104>
		case 7: if(ADC_Buff_size<511)ADC_Buff_size++; break;
 8016e6a:	bf00      	nop
	}
}
 8016e6c:	bf00      	nop
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e74:	4770      	bx	lr
 8016e76:	bf00      	nop
 8016e78:	2000091c 	.word	0x2000091c
 8016e7c:	20000094 	.word	0x20000094
 8016e80:	2000009b 	.word	0x2000009b
 8016e84:	2000009c 	.word	0x2000009c

08016e88 <Auto_Off_option_screen_func>:
uint16_t off_min = 0;



void Auto_Off_option_screen_func(void)
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b082      	sub	sp, #8
 8016e8c:	af02      	add	r7, sp, #8
	RTC_view();
 8016e8e:	f000 fe9f 	bl	8017bd0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016e92:	4911      	ldr	r1, [pc, #68]	; (8016ed8 <Auto_Off_option_screen_func+0x50>)
 8016e94:	4811      	ldr	r0, [pc, #68]	; (8016edc <Auto_Off_option_screen_func+0x54>)
 8016e96:	f7fe fdf5 	bl	8015a84 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 20, 60, "Автовыключение:");
 8016e9a:	4b11      	ldr	r3, [pc, #68]	; (8016ee0 <Auto_Off_option_screen_func+0x58>)
 8016e9c:	223c      	movs	r2, #60	; 0x3c
 8016e9e:	2114      	movs	r1, #20
 8016ea0:	480e      	ldr	r0, [pc, #56]	; (8016edc <Auto_Off_option_screen_func+0x54>)
 8016ea2:	f7fe fd4d 	bl	8015940 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", Auto_Off_Time);
 8016ea6:	4b0f      	ldr	r3, [pc, #60]	; (8016ee4 <Auto_Off_option_screen_func+0x5c>)
 8016ea8:	881b      	ldrh	r3, [r3, #0]
 8016eaa:	461a      	mov	r2, r3
 8016eac:	490e      	ldr	r1, [pc, #56]	; (8016ee8 <Auto_Off_option_screen_func+0x60>)
 8016eae:	480f      	ldr	r0, [pc, #60]	; (8016eec <Auto_Off_option_screen_func+0x64>)
 8016eb0:	f006 fffe 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(180, 60, RAM, edit_param, 0);
 8016eb4:	4b0e      	ldr	r3, [pc, #56]	; (8016ef0 <Auto_Off_option_screen_func+0x68>)
 8016eb6:	781b      	ldrb	r3, [r3, #0]
 8016eb8:	2200      	movs	r2, #0
 8016eba:	9200      	str	r2, [sp, #0]
 8016ebc:	4a0b      	ldr	r2, [pc, #44]	; (8016eec <Auto_Off_option_screen_func+0x64>)
 8016ebe:	213c      	movs	r1, #60	; 0x3c
 8016ec0:	20b4      	movs	r0, #180	; 0xb4
 8016ec2:	f7eb fd79 	bl	80029b8 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016ec6:	4805      	ldr	r0, [pc, #20]	; (8016edc <Auto_Off_option_screen_func+0x54>)
 8016ec8:	f7fd ff9f 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016ecc:	4803      	ldr	r0, [pc, #12]	; (8016edc <Auto_Off_option_screen_func+0x54>)
 8016ece:	f7fd ff29 	bl	8014d24 <u8g2_ClearBuffer>
}
 8016ed2:	bf00      	nop
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}
 8016ed8:	080271b0 	.word	0x080271b0
 8016edc:	20002098 	.word	0x20002098
 8016ee0:	08022404 	.word	0x08022404
 8016ee4:	20000972 	.word	0x20000972
 8016ee8:	08022424 	.word	0x08022424
 8016eec:	20002158 	.word	0x20002158
 8016ef0:	2000091c 	.word	0x2000091c

08016ef4 <Auto_Off_option_screen_S9>:



// MENU
void Auto_Off_option_screen_S9(void)
{
 8016ef4:	b480      	push	{r7}
 8016ef6:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016ef8:	4b06      	ldr	r3, [pc, #24]	; (8016f14 <Auto_Off_option_screen_S9+0x20>)
 8016efa:	2208      	movs	r2, #8
 8016efc:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016efe:	4b06      	ldr	r3, [pc, #24]	; (8016f18 <Auto_Off_option_screen_S9+0x24>)
 8016f00:	22ff      	movs	r2, #255	; 0xff
 8016f02:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8016f04:	4b05      	ldr	r3, [pc, #20]	; (8016f1c <Auto_Off_option_screen_S9+0x28>)
 8016f06:	2203      	movs	r2, #3
 8016f08:	701a      	strb	r2, [r3, #0]
}
 8016f0a:	bf00      	nop
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f12:	4770      	bx	lr
 8016f14:	2000004c 	.word	0x2000004c
 8016f18:	20000460 	.word	0x20000460
 8016f1c:	20000461 	.word	0x20000461

08016f20 <Auto_Off_option_screen_S8>:

// BACKWARD
void Auto_Off_option_screen_S8(void)
{ if(Auto_Off_Time>1)Auto_Off_Time--; }
 8016f20:	b480      	push	{r7}
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	4b07      	ldr	r3, [pc, #28]	; (8016f44 <Auto_Off_option_screen_S8+0x24>)
 8016f26:	881b      	ldrh	r3, [r3, #0]
 8016f28:	2b01      	cmp	r3, #1
 8016f2a:	d905      	bls.n	8016f38 <Auto_Off_option_screen_S8+0x18>
 8016f2c:	4b05      	ldr	r3, [pc, #20]	; (8016f44 <Auto_Off_option_screen_S8+0x24>)
 8016f2e:	881b      	ldrh	r3, [r3, #0]
 8016f30:	3b01      	subs	r3, #1
 8016f32:	b29a      	uxth	r2, r3
 8016f34:	4b03      	ldr	r3, [pc, #12]	; (8016f44 <Auto_Off_option_screen_S8+0x24>)
 8016f36:	801a      	strh	r2, [r3, #0]
 8016f38:	bf00      	nop
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f40:	4770      	bx	lr
 8016f42:	bf00      	nop
 8016f44:	20000972 	.word	0x20000972

08016f48 <Auto_Off_option_screen_S5>:

// FORWARD
void Auto_Off_option_screen_S5(void)
{ if(Auto_Off_Time<120)Auto_Off_Time++; }
 8016f48:	b480      	push	{r7}
 8016f4a:	af00      	add	r7, sp, #0
 8016f4c:	4b07      	ldr	r3, [pc, #28]	; (8016f6c <Auto_Off_option_screen_S5+0x24>)
 8016f4e:	881b      	ldrh	r3, [r3, #0]
 8016f50:	2b77      	cmp	r3, #119	; 0x77
 8016f52:	d805      	bhi.n	8016f60 <Auto_Off_option_screen_S5+0x18>
 8016f54:	4b05      	ldr	r3, [pc, #20]	; (8016f6c <Auto_Off_option_screen_S5+0x24>)
 8016f56:	881b      	ldrh	r3, [r3, #0]
 8016f58:	3301      	adds	r3, #1
 8016f5a:	b29a      	uxth	r2, r3
 8016f5c:	4b03      	ldr	r3, [pc, #12]	; (8016f6c <Auto_Off_option_screen_S5+0x24>)
 8016f5e:	801a      	strh	r2, [r3, #0]
 8016f60:	bf00      	nop
 8016f62:	46bd      	mov	sp, r7
 8016f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f68:	4770      	bx	lr
 8016f6a:	bf00      	nop
 8016f6c:	20000972 	.word	0x20000972

08016f70 <Auto_OFF_process>:




void Auto_OFF_process(void)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	af00      	add	r7, sp, #0
	if(Auto_Off_Time!=0)
 8016f74:	4b17      	ldr	r3, [pc, #92]	; (8016fd4 <Auto_OFF_process+0x64>)
 8016f76:	881b      	ldrh	r3, [r3, #0]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d025      	beq.n	8016fc8 <Auto_OFF_process+0x58>
	{
		if(++off_sec>=59){off_min++;off_sec=0;}
 8016f7c:	4b16      	ldr	r3, [pc, #88]	; (8016fd8 <Auto_OFF_process+0x68>)
 8016f7e:	881b      	ldrh	r3, [r3, #0]
 8016f80:	3301      	adds	r3, #1
 8016f82:	b29a      	uxth	r2, r3
 8016f84:	4b14      	ldr	r3, [pc, #80]	; (8016fd8 <Auto_OFF_process+0x68>)
 8016f86:	801a      	strh	r2, [r3, #0]
 8016f88:	4b13      	ldr	r3, [pc, #76]	; (8016fd8 <Auto_OFF_process+0x68>)
 8016f8a:	881b      	ldrh	r3, [r3, #0]
 8016f8c:	2b3a      	cmp	r3, #58	; 0x3a
 8016f8e:	d908      	bls.n	8016fa2 <Auto_OFF_process+0x32>
 8016f90:	4b12      	ldr	r3, [pc, #72]	; (8016fdc <Auto_OFF_process+0x6c>)
 8016f92:	881b      	ldrh	r3, [r3, #0]
 8016f94:	3301      	adds	r3, #1
 8016f96:	b29a      	uxth	r2, r3
 8016f98:	4b10      	ldr	r3, [pc, #64]	; (8016fdc <Auto_OFF_process+0x6c>)
 8016f9a:	801a      	strh	r2, [r3, #0]
 8016f9c:	4b0e      	ldr	r3, [pc, #56]	; (8016fd8 <Auto_OFF_process+0x68>)
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	801a      	strh	r2, [r3, #0]

		if(screen != Off_screen)
 8016fa2:	4b0f      	ldr	r3, [pc, #60]	; (8016fe0 <Auto_OFF_process+0x70>)
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	2b03      	cmp	r3, #3
 8016fa8:	d00e      	beq.n	8016fc8 <Auto_OFF_process+0x58>
		{
			if(off_min>=Auto_Off_Time)
 8016faa:	4b0c      	ldr	r3, [pc, #48]	; (8016fdc <Auto_OFF_process+0x6c>)
 8016fac:	881a      	ldrh	r2, [r3, #0]
 8016fae:	4b09      	ldr	r3, [pc, #36]	; (8016fd4 <Auto_OFF_process+0x64>)
 8016fb0:	881b      	ldrh	r3, [r3, #0]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d308      	bcc.n	8016fc8 <Auto_OFF_process+0x58>
			{
				old_active_string=0xFF;
 8016fb6:	4b0b      	ldr	r3, [pc, #44]	; (8016fe4 <Auto_OFF_process+0x74>)
 8016fb8:	22ff      	movs	r2, #255	; 0xff
 8016fba:	701a      	strb	r2, [r3, #0]
				OnOffCntr = on_off_time;
 8016fbc:	4b0a      	ldr	r3, [pc, #40]	; (8016fe8 <Auto_OFF_process+0x78>)
 8016fbe:	22c8      	movs	r2, #200	; 0xc8
 8016fc0:	801a      	strh	r2, [r3, #0]
				screen = Off_screen;
 8016fc2:	4b07      	ldr	r3, [pc, #28]	; (8016fe0 <Auto_OFF_process+0x70>)
 8016fc4:	2203      	movs	r2, #3
 8016fc6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	sleep(1000);
 8016fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016fcc:	f7eb fe58 	bl	8002c80 <sleep>
}
 8016fd0:	bf00      	nop
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	20000972 	.word	0x20000972
 8016fd8:	20001d0c 	.word	0x20001d0c
 8016fdc:	20001d0e 	.word	0x20001d0e
 8016fe0:	2000004c 	.word	0x2000004c
 8016fe4:	20000460 	.word	0x20000460
 8016fe8:	2000004a 	.word	0x2000004a

08016fec <Display_options_screen_func>:
uint8_t temp_light=0;
uint8_t soft_onoff_cntr=0;


void Display_options_screen_func(void)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b084      	sub	sp, #16
 8016ff0:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	RTC_view();
 8016ff2:	f000 fded 	bl	8017bd0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016ff6:	494e      	ldr	r1, [pc, #312]	; (8017130 <Display_options_screen_func+0x144>)
 8016ff8:	484e      	ldr	r0, [pc, #312]	; (8017134 <Display_options_screen_func+0x148>)
 8016ffa:	f7fe fd43 	bl	8015a84 <u8g2_SetFont>

	// brightness
	u8g2_DrawUTF8(&u8g2, 20, 60, "Яркость:");
 8016ffe:	4b4e      	ldr	r3, [pc, #312]	; (8017138 <Display_options_screen_func+0x14c>)
 8017000:	223c      	movs	r2, #60	; 0x3c
 8017002:	2114      	movs	r1, #20
 8017004:	484b      	ldr	r0, [pc, #300]	; (8017134 <Display_options_screen_func+0x148>)
 8017006:	f7fe fc9b 	bl	8015940 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_brightness);
 801700a:	4b4c      	ldr	r3, [pc, #304]	; (801713c <Display_options_screen_func+0x150>)
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	461a      	mov	r2, r3
 8017010:	494b      	ldr	r1, [pc, #300]	; (8017140 <Display_options_screen_func+0x154>)
 8017012:	484c      	ldr	r0, [pc, #304]	; (8017144 <Display_options_screen_func+0x158>)
 8017014:	f006 ff4c 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(170, 60, RAM, edit_param, 0);
 8017018:	4b4b      	ldr	r3, [pc, #300]	; (8017148 <Display_options_screen_func+0x15c>)
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	2200      	movs	r2, #0
 801701e:	9200      	str	r2, [sp, #0]
 8017020:	4a48      	ldr	r2, [pc, #288]	; (8017144 <Display_options_screen_func+0x158>)
 8017022:	213c      	movs	r1, #60	; 0x3c
 8017024:	20aa      	movs	r0, #170	; 0xaa
 8017026:	f7eb fcc7 	bl	80029b8 <Blink_Edit_Parameter>
	// contrast
	u8g2_DrawUTF8(&u8g2, 20, 80, "Контрастность:");
 801702a:	4b48      	ldr	r3, [pc, #288]	; (801714c <Display_options_screen_func+0x160>)
 801702c:	2250      	movs	r2, #80	; 0x50
 801702e:	2114      	movs	r1, #20
 8017030:	4840      	ldr	r0, [pc, #256]	; (8017134 <Display_options_screen_func+0x148>)
 8017032:	f7fe fc85 	bl	8015940 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_contrast);
 8017036:	4b46      	ldr	r3, [pc, #280]	; (8017150 <Display_options_screen_func+0x164>)
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	461a      	mov	r2, r3
 801703c:	4940      	ldr	r1, [pc, #256]	; (8017140 <Display_options_screen_func+0x154>)
 801703e:	4841      	ldr	r0, [pc, #260]	; (8017144 <Display_options_screen_func+0x158>)
 8017040:	f006 ff36 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(170, 80, RAM, edit_param, 1);
 8017044:	4b40      	ldr	r3, [pc, #256]	; (8017148 <Display_options_screen_func+0x15c>)
 8017046:	781b      	ldrb	r3, [r3, #0]
 8017048:	2201      	movs	r2, #1
 801704a:	9200      	str	r2, [sp, #0]
 801704c:	4a3d      	ldr	r2, [pc, #244]	; (8017144 <Display_options_screen_func+0x158>)
 801704e:	2150      	movs	r1, #80	; 0x50
 8017050:	20aa      	movs	r0, #170	; 0xaa
 8017052:	f7eb fcb1 	bl	80029b8 <Blink_Edit_Parameter>
	// delay
	u8g2_DrawUTF8(&u8g2, 20, 100, "Длительность:");
 8017056:	4b3f      	ldr	r3, [pc, #252]	; (8017154 <Display_options_screen_func+0x168>)
 8017058:	2264      	movs	r2, #100	; 0x64
 801705a:	2114      	movs	r1, #20
 801705c:	4835      	ldr	r0, [pc, #212]	; (8017134 <Display_options_screen_func+0x148>)
 801705e:	f7fe fc6f 	bl	8015940 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", light_delay);
 8017062:	4b3d      	ldr	r3, [pc, #244]	; (8017158 <Display_options_screen_func+0x16c>)
 8017064:	881b      	ldrh	r3, [r3, #0]
 8017066:	461a      	mov	r2, r3
 8017068:	4935      	ldr	r1, [pc, #212]	; (8017140 <Display_options_screen_func+0x154>)
 801706a:	4836      	ldr	r0, [pc, #216]	; (8017144 <Display_options_screen_func+0x158>)
 801706c:	f006 ff20 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(170, 100, RAM, edit_param, 2);
 8017070:	4b35      	ldr	r3, [pc, #212]	; (8017148 <Display_options_screen_func+0x15c>)
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	2202      	movs	r2, #2
 8017076:	9200      	str	r2, [sp, #0]
 8017078:	4a32      	ldr	r2, [pc, #200]	; (8017144 <Display_options_screen_func+0x158>)
 801707a:	2164      	movs	r1, #100	; 0x64
 801707c:	20aa      	movs	r0, #170	; 0xaa
 801707e:	f7eb fc9b 	bl	80029b8 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 8017082:	482c      	ldr	r0, [pc, #176]	; (8017134 <Display_options_screen_func+0x148>)
 8017084:	f7fd fec1 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017088:	482a      	ldr	r0, [pc, #168]	; (8017134 <Display_options_screen_func+0x148>)
 801708a:	f7fd fe4b 	bl	8014d24 <u8g2_ClearBuffer>

	TIM2->CCR1=temp_light;//display_brightness;
 801708e:	4b33      	ldr	r3, [pc, #204]	; (801715c <Display_options_screen_func+0x170>)
 8017090:	781a      	ldrb	r2, [r3, #0]
 8017092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017096:	635a      	str	r2, [r3, #52]	; 0x34

	// Vbias
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8017098:	2200      	movs	r2, #0
 801709a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801709e:	4830      	ldr	r0, [pc, #192]	; (8017160 <Display_options_screen_func+0x174>)
 80170a0:	f7f3 f81e 	bl	800a0e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80170a4:	2200      	movs	r2, #0
 80170a6:	2101      	movs	r1, #1
 80170a8:	482e      	ldr	r0, [pc, #184]	; (8017164 <Display_options_screen_func+0x178>)
 80170aa:	f7f3 f819 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+Vbias;
 80170ae:	4b2e      	ldr	r3, [pc, #184]	; (8017168 <Display_options_screen_func+0x17c>)
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	3b18      	subs	r3, #24
 80170b4:	b2db      	uxtb	r3, r3
 80170b6:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80170b8:	463a      	mov	r2, r7
 80170ba:	1d39      	adds	r1, r7, #4
 80170bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80170c0:	9300      	str	r3, [sp, #0]
 80170c2:	2301      	movs	r3, #1
 80170c4:	4829      	ldr	r0, [pc, #164]	; (801716c <Display_options_screen_func+0x180>)
 80170c6:	f7f7 f936 	bl	800e336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80170ca:	2201      	movs	r2, #1
 80170cc:	2101      	movs	r1, #1
 80170ce:	4825      	ldr	r0, [pc, #148]	; (8017164 <Display_options_screen_func+0x178>)
 80170d0:	f7f3 f806 	bl	800a0e0 <HAL_GPIO_WritePin>
	// Temp compensation
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80170d4:	2200      	movs	r2, #0
 80170d6:	2101      	movs	r1, #1
 80170d8:	4822      	ldr	r0, [pc, #136]	; (8017164 <Display_options_screen_func+0x178>)
 80170da:	f7f3 f801 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 80170de:	2381      	movs	r3, #129	; 0x81
 80170e0:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80170e2:	463a      	mov	r2, r7
 80170e4:	1d39      	adds	r1, r7, #4
 80170e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80170ea:	9300      	str	r3, [sp, #0]
 80170ec:	2301      	movs	r3, #1
 80170ee:	481f      	ldr	r0, [pc, #124]	; (801716c <Display_options_screen_func+0x180>)
 80170f0:	f7f7 f921 	bl	800e336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 80170f4:	2201      	movs	r2, #1
 80170f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80170fa:	4819      	ldr	r0, [pc, #100]	; (8017160 <Display_options_screen_func+0x174>)
 80170fc:	f7f2 fff0 	bl	800a0e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8017100:	4b13      	ldr	r3, [pc, #76]	; (8017150 <Display_options_screen_func+0x164>)
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	337d      	adds	r3, #125	; 0x7d
 8017106:	b2db      	uxtb	r3, r3
 8017108:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 801710a:	463a      	mov	r2, r7
 801710c:	1d39      	adds	r1, r7, #4
 801710e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017112:	9300      	str	r3, [sp, #0]
 8017114:	2301      	movs	r3, #1
 8017116:	4815      	ldr	r0, [pc, #84]	; (801716c <Display_options_screen_func+0x180>)
 8017118:	f7f7 f90d 	bl	800e336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 801711c:	2201      	movs	r2, #1
 801711e:	2101      	movs	r1, #1
 8017120:	4810      	ldr	r0, [pc, #64]	; (8017164 <Display_options_screen_func+0x178>)
 8017122:	f7f2 ffdd 	bl	800a0e0 <HAL_GPIO_WritePin>
}
 8017126:	bf00      	nop
 8017128:	3708      	adds	r7, #8
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	080271b0 	.word	0x080271b0
 8017134:	20002098 	.word	0x20002098
 8017138:	08022428 	.word	0x08022428
 801713c:	20000090 	.word	0x20000090
 8017140:	08022438 	.word	0x08022438
 8017144:	20002158 	.word	0x20002158
 8017148:	2000091c 	.word	0x2000091c
 801714c:	0802243c 	.word	0x0802243c
 8017150:	20000091 	.word	0x20000091
 8017154:	08022458 	.word	0x08022458
 8017158:	200000b0 	.word	0x200000b0
 801715c:	20001d14 	.word	0x20001d14
 8017160:	48000400 	.word	0x48000400
 8017164:	48001000 	.word	0x48001000
 8017168:	20000430 	.word	0x20000430
 801716c:	20002034 	.word	0x20002034

08017170 <Display_options_screen_S9>:


// MENU
void Display_options_screen_S9(void)
{
 8017170:	b480      	push	{r7}
 8017172:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8017174:	4b06      	ldr	r3, [pc, #24]	; (8017190 <Display_options_screen_S9+0x20>)
 8017176:	2208      	movs	r2, #8
 8017178:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801717a:	4b06      	ldr	r3, [pc, #24]	; (8017194 <Display_options_screen_S9+0x24>)
 801717c:	22ff      	movs	r2, #255	; 0xff
 801717e:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 8017180:	4b05      	ldr	r3, [pc, #20]	; (8017198 <Display_options_screen_S9+0x28>)
 8017182:	2200      	movs	r2, #0
 8017184:	701a      	strb	r2, [r3, #0]
}
 8017186:	bf00      	nop
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr
 8017190:	2000004c 	.word	0x2000004c
 8017194:	20000460 	.word	0x20000460
 8017198:	20000461 	.word	0x20000461

0801719c <Display_options_screen_S6>:

// DOWN
void Display_options_screen_S6(void)
{
 801719c:	b480      	push	{r7}
 801719e:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80171a0:	4b07      	ldr	r3, [pc, #28]	; (80171c0 <Display_options_screen_S6+0x24>)
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	2b01      	cmp	r3, #1
 80171a6:	d805      	bhi.n	80171b4 <Display_options_screen_S6+0x18>
 80171a8:	4b05      	ldr	r3, [pc, #20]	; (80171c0 <Display_options_screen_S6+0x24>)
 80171aa:	781b      	ldrb	r3, [r3, #0]
 80171ac:	3301      	adds	r3, #1
 80171ae:	b2da      	uxtb	r2, r3
 80171b0:	4b03      	ldr	r3, [pc, #12]	; (80171c0 <Display_options_screen_S6+0x24>)
 80171b2:	701a      	strb	r2, [r3, #0]
}
 80171b4:	bf00      	nop
 80171b6:	46bd      	mov	sp, r7
 80171b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop
 80171c0:	2000091c 	.word	0x2000091c

080171c4 <Display_options_screen_S7>:

// UP
void Display_options_screen_S7(void)
{
 80171c4:	b480      	push	{r7}
 80171c6:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80171c8:	4b07      	ldr	r3, [pc, #28]	; (80171e8 <Display_options_screen_S7+0x24>)
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d005      	beq.n	80171dc <Display_options_screen_S7+0x18>
 80171d0:	4b05      	ldr	r3, [pc, #20]	; (80171e8 <Display_options_screen_S7+0x24>)
 80171d2:	781b      	ldrb	r3, [r3, #0]
 80171d4:	3b01      	subs	r3, #1
 80171d6:	b2da      	uxtb	r2, r3
 80171d8:	4b03      	ldr	r3, [pc, #12]	; (80171e8 <Display_options_screen_S7+0x24>)
 80171da:	701a      	strb	r2, [r3, #0]
}
 80171dc:	bf00      	nop
 80171de:	46bd      	mov	sp, r7
 80171e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e4:	4770      	bx	lr
 80171e6:	bf00      	nop
 80171e8:	2000091c 	.word	0x2000091c

080171ec <Display_options_screen_S4>:

// ENTER
void Display_options_screen_S4(void)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	af00      	add	r7, sp, #0
	switch(edit_param)
 80171f0:	4b10      	ldr	r3, [pc, #64]	; (8017234 <Display_options_screen_S4+0x48>)
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	2b02      	cmp	r3, #2
 80171f6:	d014      	beq.n	8017222 <Display_options_screen_S4+0x36>
 80171f8:	2b02      	cmp	r3, #2
 80171fa:	dc19      	bgt.n	8017230 <Display_options_screen_S4+0x44>
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d002      	beq.n	8017206 <Display_options_screen_S4+0x1a>
 8017200:	2b01      	cmp	r3, #1
 8017202:	d007      	beq.n	8017214 <Display_options_screen_S4+0x28>
	{
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
		case 2: Save_Settings(light_delay_tag, light_delay); break;
	}
}
 8017204:	e014      	b.n	8017230 <Display_options_screen_S4+0x44>
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
 8017206:	4b0c      	ldr	r3, [pc, #48]	; (8017238 <Display_options_screen_S4+0x4c>)
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	4619      	mov	r1, r3
 801720c:	2001      	movs	r0, #1
 801720e:	f7ee f953 	bl	80054b8 <Save_Settings>
 8017212:	e00d      	b.n	8017230 <Display_options_screen_S4+0x44>
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
 8017214:	4b09      	ldr	r3, [pc, #36]	; (801723c <Display_options_screen_S4+0x50>)
 8017216:	781b      	ldrb	r3, [r3, #0]
 8017218:	4619      	mov	r1, r3
 801721a:	2002      	movs	r0, #2
 801721c:	f7ee f94c 	bl	80054b8 <Save_Settings>
 8017220:	e006      	b.n	8017230 <Display_options_screen_S4+0x44>
		case 2: Save_Settings(light_delay_tag, light_delay); break;
 8017222:	4b07      	ldr	r3, [pc, #28]	; (8017240 <Display_options_screen_S4+0x54>)
 8017224:	881b      	ldrh	r3, [r3, #0]
 8017226:	4619      	mov	r1, r3
 8017228:	2016      	movs	r0, #22
 801722a:	f7ee f945 	bl	80054b8 <Save_Settings>
 801722e:	bf00      	nop
}
 8017230:	bf00      	nop
 8017232:	bd80      	pop	{r7, pc}
 8017234:	2000091c 	.word	0x2000091c
 8017238:	20000090 	.word	0x20000090
 801723c:	20000091 	.word	0x20000091
 8017240:	200000b0 	.word	0x200000b0

08017244 <Display_options_screen_S8>:



// BACKWARD
void Display_options_screen_S8(void)
{
 8017244:	b480      	push	{r7}
 8017246:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017248:	4b1a      	ldr	r3, [pc, #104]	; (80172b4 <Display_options_screen_S8+0x70>)
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	2b02      	cmp	r3, #2
 801724e:	d01c      	beq.n	801728a <Display_options_screen_S8+0x46>
 8017250:	2b02      	cmp	r3, #2
 8017252:	dc2a      	bgt.n	80172aa <Display_options_screen_S8+0x66>
 8017254:	2b00      	cmp	r3, #0
 8017256:	d002      	beq.n	801725e <Display_options_screen_S8+0x1a>
 8017258:	2b01      	cmp	r3, #1
 801725a:	d00b      	beq.n	8017274 <Display_options_screen_S8+0x30>
	{
		case 0: if(display_brightness>0)display_brightness--; break;
		case 1: if(display_contrast>0)display_contrast--; break;
		case 2: if(light_delay>0)light_delay--; break;
	}
}
 801725c:	e025      	b.n	80172aa <Display_options_screen_S8+0x66>
		case 0: if(display_brightness>0)display_brightness--; break;
 801725e:	4b16      	ldr	r3, [pc, #88]	; (80172b8 <Display_options_screen_S8+0x74>)
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d01c      	beq.n	80172a0 <Display_options_screen_S8+0x5c>
 8017266:	4b14      	ldr	r3, [pc, #80]	; (80172b8 <Display_options_screen_S8+0x74>)
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	3b01      	subs	r3, #1
 801726c:	b2da      	uxtb	r2, r3
 801726e:	4b12      	ldr	r3, [pc, #72]	; (80172b8 <Display_options_screen_S8+0x74>)
 8017270:	701a      	strb	r2, [r3, #0]
 8017272:	e015      	b.n	80172a0 <Display_options_screen_S8+0x5c>
		case 1: if(display_contrast>0)display_contrast--; break;
 8017274:	4b11      	ldr	r3, [pc, #68]	; (80172bc <Display_options_screen_S8+0x78>)
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d013      	beq.n	80172a4 <Display_options_screen_S8+0x60>
 801727c:	4b0f      	ldr	r3, [pc, #60]	; (80172bc <Display_options_screen_S8+0x78>)
 801727e:	781b      	ldrb	r3, [r3, #0]
 8017280:	3b01      	subs	r3, #1
 8017282:	b2da      	uxtb	r2, r3
 8017284:	4b0d      	ldr	r3, [pc, #52]	; (80172bc <Display_options_screen_S8+0x78>)
 8017286:	701a      	strb	r2, [r3, #0]
 8017288:	e00c      	b.n	80172a4 <Display_options_screen_S8+0x60>
		case 2: if(light_delay>0)light_delay--; break;
 801728a:	4b0d      	ldr	r3, [pc, #52]	; (80172c0 <Display_options_screen_S8+0x7c>)
 801728c:	881b      	ldrh	r3, [r3, #0]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d00a      	beq.n	80172a8 <Display_options_screen_S8+0x64>
 8017292:	4b0b      	ldr	r3, [pc, #44]	; (80172c0 <Display_options_screen_S8+0x7c>)
 8017294:	881b      	ldrh	r3, [r3, #0]
 8017296:	3b01      	subs	r3, #1
 8017298:	b29a      	uxth	r2, r3
 801729a:	4b09      	ldr	r3, [pc, #36]	; (80172c0 <Display_options_screen_S8+0x7c>)
 801729c:	801a      	strh	r2, [r3, #0]
 801729e:	e003      	b.n	80172a8 <Display_options_screen_S8+0x64>
		case 0: if(display_brightness>0)display_brightness--; break;
 80172a0:	bf00      	nop
 80172a2:	e002      	b.n	80172aa <Display_options_screen_S8+0x66>
		case 1: if(display_contrast>0)display_contrast--; break;
 80172a4:	bf00      	nop
 80172a6:	e000      	b.n	80172aa <Display_options_screen_S8+0x66>
		case 2: if(light_delay>0)light_delay--; break;
 80172a8:	bf00      	nop
}
 80172aa:	bf00      	nop
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr
 80172b4:	2000091c 	.word	0x2000091c
 80172b8:	20000090 	.word	0x20000090
 80172bc:	20000091 	.word	0x20000091
 80172c0:	200000b0 	.word	0x200000b0

080172c4 <Display_options_screen_S5>:

// FORWARD
void Display_options_screen_S5(void)
{
 80172c4:	b480      	push	{r7}
 80172c6:	af00      	add	r7, sp, #0
	switch(edit_param)
 80172c8:	4b1a      	ldr	r3, [pc, #104]	; (8017334 <Display_options_screen_S5+0x70>)
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	2b02      	cmp	r3, #2
 80172ce:	d01c      	beq.n	801730a <Display_options_screen_S5+0x46>
 80172d0:	2b02      	cmp	r3, #2
 80172d2:	dc2a      	bgt.n	801732a <Display_options_screen_S5+0x66>
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d002      	beq.n	80172de <Display_options_screen_S5+0x1a>
 80172d8:	2b01      	cmp	r3, #1
 80172da:	d00b      	beq.n	80172f4 <Display_options_screen_S5+0x30>
	{
		case 0:if(display_brightness<50)display_brightness++; break;
		case 1: if(display_contrast<50)display_contrast++; break;
		case 2: if(light_delay<50)light_delay++; break;
	}
}
 80172dc:	e025      	b.n	801732a <Display_options_screen_S5+0x66>
		case 0:if(display_brightness<50)display_brightness++; break;
 80172de:	4b16      	ldr	r3, [pc, #88]	; (8017338 <Display_options_screen_S5+0x74>)
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	2b31      	cmp	r3, #49	; 0x31
 80172e4:	d81c      	bhi.n	8017320 <Display_options_screen_S5+0x5c>
 80172e6:	4b14      	ldr	r3, [pc, #80]	; (8017338 <Display_options_screen_S5+0x74>)
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	3301      	adds	r3, #1
 80172ec:	b2da      	uxtb	r2, r3
 80172ee:	4b12      	ldr	r3, [pc, #72]	; (8017338 <Display_options_screen_S5+0x74>)
 80172f0:	701a      	strb	r2, [r3, #0]
 80172f2:	e015      	b.n	8017320 <Display_options_screen_S5+0x5c>
		case 1: if(display_contrast<50)display_contrast++; break;
 80172f4:	4b11      	ldr	r3, [pc, #68]	; (801733c <Display_options_screen_S5+0x78>)
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	2b31      	cmp	r3, #49	; 0x31
 80172fa:	d813      	bhi.n	8017324 <Display_options_screen_S5+0x60>
 80172fc:	4b0f      	ldr	r3, [pc, #60]	; (801733c <Display_options_screen_S5+0x78>)
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	3301      	adds	r3, #1
 8017302:	b2da      	uxtb	r2, r3
 8017304:	4b0d      	ldr	r3, [pc, #52]	; (801733c <Display_options_screen_S5+0x78>)
 8017306:	701a      	strb	r2, [r3, #0]
 8017308:	e00c      	b.n	8017324 <Display_options_screen_S5+0x60>
		case 2: if(light_delay<50)light_delay++; break;
 801730a:	4b0d      	ldr	r3, [pc, #52]	; (8017340 <Display_options_screen_S5+0x7c>)
 801730c:	881b      	ldrh	r3, [r3, #0]
 801730e:	2b31      	cmp	r3, #49	; 0x31
 8017310:	d80a      	bhi.n	8017328 <Display_options_screen_S5+0x64>
 8017312:	4b0b      	ldr	r3, [pc, #44]	; (8017340 <Display_options_screen_S5+0x7c>)
 8017314:	881b      	ldrh	r3, [r3, #0]
 8017316:	3301      	adds	r3, #1
 8017318:	b29a      	uxth	r2, r3
 801731a:	4b09      	ldr	r3, [pc, #36]	; (8017340 <Display_options_screen_S5+0x7c>)
 801731c:	801a      	strh	r2, [r3, #0]
 801731e:	e003      	b.n	8017328 <Display_options_screen_S5+0x64>
		case 0:if(display_brightness<50)display_brightness++; break;
 8017320:	bf00      	nop
 8017322:	e002      	b.n	801732a <Display_options_screen_S5+0x66>
		case 1: if(display_contrast<50)display_contrast++; break;
 8017324:	bf00      	nop
 8017326:	e000      	b.n	801732a <Display_options_screen_S5+0x66>
		case 2: if(light_delay<50)light_delay++; break;
 8017328:	bf00      	nop
}
 801732a:	bf00      	nop
 801732c:	46bd      	mov	sp, r7
 801732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017332:	4770      	bx	lr
 8017334:	2000091c 	.word	0x2000091c
 8017338:	20000090 	.word	0x20000090
 801733c:	20000091 	.word	0x20000091
 8017340:	200000b0 	.word	0x200000b0

08017344 <Light_OFF_process>:



void Light_OFF_process(void)
{
 8017344:	b480      	push	{r7}
 8017346:	af00      	add	r7, sp, #0
	if(++light_ms>=1000)
 8017348:	4b37      	ldr	r3, [pc, #220]	; (8017428 <Light_OFF_process+0xe4>)
 801734a:	881b      	ldrh	r3, [r3, #0]
 801734c:	3301      	adds	r3, #1
 801734e:	b29a      	uxth	r2, r3
 8017350:	4b35      	ldr	r3, [pc, #212]	; (8017428 <Light_OFF_process+0xe4>)
 8017352:	801a      	strh	r2, [r3, #0]
 8017354:	4b34      	ldr	r3, [pc, #208]	; (8017428 <Light_OFF_process+0xe4>)
 8017356:	881b      	ldrh	r3, [r3, #0]
 8017358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801735c:	d315      	bcc.n	801738a <Light_OFF_process+0x46>
	{
		light_ms=0;
 801735e:	4b32      	ldr	r3, [pc, #200]	; (8017428 <Light_OFF_process+0xe4>)
 8017360:	2200      	movs	r2, #0
 8017362:	801a      	strh	r2, [r3, #0]
		if(++light_sec>59){light_min++; light_sec=0;}
 8017364:	4b31      	ldr	r3, [pc, #196]	; (801742c <Light_OFF_process+0xe8>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	3301      	adds	r3, #1
 801736a:	b2da      	uxtb	r2, r3
 801736c:	4b2f      	ldr	r3, [pc, #188]	; (801742c <Light_OFF_process+0xe8>)
 801736e:	701a      	strb	r2, [r3, #0]
 8017370:	4b2e      	ldr	r3, [pc, #184]	; (801742c <Light_OFF_process+0xe8>)
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	2b3b      	cmp	r3, #59	; 0x3b
 8017376:	d908      	bls.n	801738a <Light_OFF_process+0x46>
 8017378:	4b2d      	ldr	r3, [pc, #180]	; (8017430 <Light_OFF_process+0xec>)
 801737a:	781b      	ldrb	r3, [r3, #0]
 801737c:	3301      	adds	r3, #1
 801737e:	b2da      	uxtb	r2, r3
 8017380:	4b2b      	ldr	r3, [pc, #172]	; (8017430 <Light_OFF_process+0xec>)
 8017382:	701a      	strb	r2, [r3, #0]
 8017384:	4b29      	ldr	r3, [pc, #164]	; (801742c <Light_OFF_process+0xe8>)
 8017386:	2200      	movs	r2, #0
 8017388:	701a      	strb	r2, [r3, #0]
	}

	if(++soft_onoff_cntr>=50)
 801738a:	4b2a      	ldr	r3, [pc, #168]	; (8017434 <Light_OFF_process+0xf0>)
 801738c:	781b      	ldrb	r3, [r3, #0]
 801738e:	3301      	adds	r3, #1
 8017390:	b2da      	uxtb	r2, r3
 8017392:	4b28      	ldr	r3, [pc, #160]	; (8017434 <Light_OFF_process+0xf0>)
 8017394:	701a      	strb	r2, [r3, #0]
 8017396:	4b27      	ldr	r3, [pc, #156]	; (8017434 <Light_OFF_process+0xf0>)
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	2b31      	cmp	r3, #49	; 0x31
 801739c:	d93e      	bls.n	801741c <Light_OFF_process+0xd8>
	{
		soft_onoff_cntr=0;
 801739e:	4b25      	ldr	r3, [pc, #148]	; (8017434 <Light_OFF_process+0xf0>)
 80173a0:	2200      	movs	r2, #0
 80173a2:	701a      	strb	r2, [r3, #0]
		if(light_min>=light_delay)
 80173a4:	4b22      	ldr	r3, [pc, #136]	; (8017430 <Light_OFF_process+0xec>)
 80173a6:	781b      	ldrb	r3, [r3, #0]
 80173a8:	b29a      	uxth	r2, r3
 80173aa:	4b23      	ldr	r3, [pc, #140]	; (8017438 <Light_OFF_process+0xf4>)
 80173ac:	881b      	ldrh	r3, [r3, #0]
 80173ae:	429a      	cmp	r2, r3
 80173b0:	d319      	bcc.n	80173e6 <Light_OFF_process+0xa2>
		{
			light_min=light_delay;
 80173b2:	4b21      	ldr	r3, [pc, #132]	; (8017438 <Light_OFF_process+0xf4>)
 80173b4:	881b      	ldrh	r3, [r3, #0]
 80173b6:	b2da      	uxtb	r2, r3
 80173b8:	4b1d      	ldr	r3, [pc, #116]	; (8017430 <Light_OFF_process+0xec>)
 80173ba:	701a      	strb	r2, [r3, #0]
			if(temp_light>0)temp_light--;
 80173bc:	4b1f      	ldr	r3, [pc, #124]	; (801743c <Light_OFF_process+0xf8>)
 80173be:	781b      	ldrb	r3, [r3, #0]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d005      	beq.n	80173d0 <Light_OFF_process+0x8c>
 80173c4:	4b1d      	ldr	r3, [pc, #116]	; (801743c <Light_OFF_process+0xf8>)
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	3b01      	subs	r3, #1
 80173ca:	b2da      	uxtb	r2, r3
 80173cc:	4b1b      	ldr	r3, [pc, #108]	; (801743c <Light_OFF_process+0xf8>)
 80173ce:	701a      	strb	r2, [r3, #0]
			light_min=light_delay;
 80173d0:	4b19      	ldr	r3, [pc, #100]	; (8017438 <Light_OFF_process+0xf4>)
 80173d2:	881b      	ldrh	r3, [r3, #0]
 80173d4:	b2da      	uxtb	r2, r3
 80173d6:	4b16      	ldr	r3, [pc, #88]	; (8017430 <Light_OFF_process+0xec>)
 80173d8:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 80173da:	4b18      	ldr	r3, [pc, #96]	; (801743c <Light_OFF_process+0xf8>)
 80173dc:	781a      	ldrb	r2, [r3, #0]
 80173de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173e2:	635a      	str	r2, [r3, #52]	; 0x34
			if(temp_light<display_brightness)temp_light++;
			if(temp_light>=display_brightness)temp_light=display_brightness;
			TIM2->CCR1=temp_light;
		}
	}
}
 80173e4:	e01a      	b.n	801741c <Light_OFF_process+0xd8>
			if(temp_light<display_brightness)temp_light++;
 80173e6:	4b15      	ldr	r3, [pc, #84]	; (801743c <Light_OFF_process+0xf8>)
 80173e8:	781a      	ldrb	r2, [r3, #0]
 80173ea:	4b15      	ldr	r3, [pc, #84]	; (8017440 <Light_OFF_process+0xfc>)
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d205      	bcs.n	80173fe <Light_OFF_process+0xba>
 80173f2:	4b12      	ldr	r3, [pc, #72]	; (801743c <Light_OFF_process+0xf8>)
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	3301      	adds	r3, #1
 80173f8:	b2da      	uxtb	r2, r3
 80173fa:	4b10      	ldr	r3, [pc, #64]	; (801743c <Light_OFF_process+0xf8>)
 80173fc:	701a      	strb	r2, [r3, #0]
			if(temp_light>=display_brightness)temp_light=display_brightness;
 80173fe:	4b0f      	ldr	r3, [pc, #60]	; (801743c <Light_OFF_process+0xf8>)
 8017400:	781a      	ldrb	r2, [r3, #0]
 8017402:	4b0f      	ldr	r3, [pc, #60]	; (8017440 <Light_OFF_process+0xfc>)
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	429a      	cmp	r2, r3
 8017408:	d303      	bcc.n	8017412 <Light_OFF_process+0xce>
 801740a:	4b0d      	ldr	r3, [pc, #52]	; (8017440 <Light_OFF_process+0xfc>)
 801740c:	781a      	ldrb	r2, [r3, #0]
 801740e:	4b0b      	ldr	r3, [pc, #44]	; (801743c <Light_OFF_process+0xf8>)
 8017410:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 8017412:	4b0a      	ldr	r3, [pc, #40]	; (801743c <Light_OFF_process+0xf8>)
 8017414:	781a      	ldrb	r2, [r3, #0]
 8017416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801741a:	635a      	str	r2, [r3, #52]	; 0x34
}
 801741c:	bf00      	nop
 801741e:	46bd      	mov	sp, r7
 8017420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017424:	4770      	bx	lr
 8017426:	bf00      	nop
 8017428:	20001d12 	.word	0x20001d12
 801742c:	20001d10 	.word	0x20001d10
 8017430:	20001d11 	.word	0x20001d11
 8017434:	20001d15 	.word	0x20001d15
 8017438:	200000b0 	.word	0x200000b0
 801743c:	20001d14 	.word	0x20001d14
 8017440:	20000090 	.word	0x20000090

08017444 <Measure_options_screen_func>:
const uint8_t time_icon[]={0,24,0,24,0x1F, 0xFF, 0xF8, 0x7F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFE, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x31, 0x87, 0xE0, 0x33, 0x87, 0xE0, 0x3F, 0x07, 0xE0, 0x1E, 0x07, 0xE0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0x7F, 0xFF, 0xFE, 0x3F, 0xFF, 0xFC, 0x1F, 0xFF, 0xF8};



void Measure_options_screen_func(void)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af02      	add	r7, sp, #8
	RTC_view();
 801744a:	f000 fbc1 	bl	8017bd0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801744e:	4974      	ldr	r1, [pc, #464]	; (8017620 <Measure_options_screen_func+0x1dc>)
 8017450:	4874      	ldr	r0, [pc, #464]	; (8017624 <Measure_options_screen_func+0x1e0>)
 8017452:	f7fe fb17 	bl	8015a84 <u8g2_SetFont>


		// "ПИКОВЫЕ ЗНАЧЕНИЯ");
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*0+6, "ПИКОВЫЕ ЗНАЧЕНИЯ", edit_param, 0);
 8017456:	4b74      	ldr	r3, [pc, #464]	; (8017628 <Measure_options_screen_func+0x1e4>)
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	2200      	movs	r2, #0
 801745c:	9200      	str	r2, [sp, #0]
 801745e:	4a73      	ldr	r2, [pc, #460]	; (801762c <Measure_options_screen_func+0x1e8>)
 8017460:	211f      	movs	r1, #31
 8017462:	200f      	movs	r0, #15
 8017464:	f7eb faa8 	bl	80029b8 <Blink_Edit_Parameter>
		switch(mm_peak)
 8017468:	4b71      	ldr	r3, [pc, #452]	; (8017630 <Measure_options_screen_func+0x1ec>)
 801746a:	781b      	ldrb	r3, [r3, #0]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d002      	beq.n	8017476 <Measure_options_screen_func+0x32>
 8017470:	2b01      	cmp	r3, #1
 8017472:	d007      	beq.n	8017484 <Measure_options_screen_func+0x40>
 8017474:	e00d      	b.n	8017492 <Measure_options_screen_func+0x4e>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 8017476:	2301      	movs	r3, #1
 8017478:	2219      	movs	r2, #25
 801747a:	21c8      	movs	r1, #200	; 0xc8
 801747c:	486d      	ldr	r0, [pc, #436]	; (8017634 <Measure_options_screen_func+0x1f0>)
 801747e:	f7eb f90b 	bl	8002698 <DrawImage>
 8017482:	e006      	b.n	8017492 <Measure_options_screen_func+0x4e>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 8017484:	2301      	movs	r3, #1
 8017486:	2219      	movs	r2, #25
 8017488:	21c8      	movs	r1, #200	; 0xc8
 801748a:	486b      	ldr	r0, [pc, #428]	; (8017638 <Measure_options_screen_func+0x1f4>)
 801748c:	f7eb f904 	bl	8002698 <DrawImage>
 8017490:	bf00      	nop
		}

		// "ОБНАРУЖЕНИЕ УТЕЧЕК"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*1+6, "ОБНАРУЖЕНИЕ УТЕЧЕК", edit_param, 1);
 8017492:	4b65      	ldr	r3, [pc, #404]	; (8017628 <Measure_options_screen_func+0x1e4>)
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	2201      	movs	r2, #1
 8017498:	9200      	str	r2, [sp, #0]
 801749a:	4a68      	ldr	r2, [pc, #416]	; (801763c <Measure_options_screen_func+0x1f8>)
 801749c:	2139      	movs	r1, #57	; 0x39
 801749e:	200f      	movs	r0, #15
 80174a0:	f7eb fa8a 	bl	80029b8 <Blink_Edit_Parameter>
		switch(leak_detect)
 80174a4:	4b66      	ldr	r3, [pc, #408]	; (8017640 <Measure_options_screen_func+0x1fc>)
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	2b02      	cmp	r3, #2
 80174aa:	d014      	beq.n	80174d6 <Measure_options_screen_func+0x92>
 80174ac:	2b02      	cmp	r3, #2
 80174ae:	dc19      	bgt.n	80174e4 <Measure_options_screen_func+0xa0>
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d002      	beq.n	80174ba <Measure_options_screen_func+0x76>
 80174b4:	2b01      	cmp	r3, #1
 80174b6:	d007      	beq.n	80174c8 <Measure_options_screen_func+0x84>
 80174b8:	e014      	b.n	80174e4 <Measure_options_screen_func+0xa0>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80174ba:	2301      	movs	r3, #1
 80174bc:	2233      	movs	r2, #51	; 0x33
 80174be:	21c8      	movs	r1, #200	; 0xc8
 80174c0:	485c      	ldr	r0, [pc, #368]	; (8017634 <Measure_options_screen_func+0x1f0>)
 80174c2:	f7eb f8e9 	bl	8002698 <DrawImage>
 80174c6:	e00d      	b.n	80174e4 <Measure_options_screen_func+0xa0>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80174c8:	2301      	movs	r3, #1
 80174ca:	2233      	movs	r2, #51	; 0x33
 80174cc:	21c8      	movs	r1, #200	; 0xc8
 80174ce:	485a      	ldr	r0, [pc, #360]	; (8017638 <Measure_options_screen_func+0x1f4>)
 80174d0:	f7eb f8e2 	bl	8002698 <DrawImage>
 80174d4:	e006      	b.n	80174e4 <Measure_options_screen_func+0xa0>
			case 2: DrawImage(time_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80174d6:	2301      	movs	r3, #1
 80174d8:	2233      	movs	r2, #51	; 0x33
 80174da:	21c8      	movs	r1, #200	; 0xc8
 80174dc:	4859      	ldr	r0, [pc, #356]	; (8017644 <Measure_options_screen_func+0x200>)
 80174de:	f7eb f8db 	bl	8002698 <DrawImage>
 80174e2:	bf00      	nop
		}

		// "P+V"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*2+6, "P+V", edit_param, 2);
 80174e4:	4b50      	ldr	r3, [pc, #320]	; (8017628 <Measure_options_screen_func+0x1e4>)
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	2202      	movs	r2, #2
 80174ea:	9200      	str	r2, [sp, #0]
 80174ec:	4a56      	ldr	r2, [pc, #344]	; (8017648 <Measure_options_screen_func+0x204>)
 80174ee:	2153      	movs	r1, #83	; 0x53
 80174f0:	200f      	movs	r0, #15
 80174f2:	f7eb fa61 	bl	80029b8 <Blink_Edit_Parameter>
		switch(PV)
 80174f6:	4b55      	ldr	r3, [pc, #340]	; (801764c <Measure_options_screen_func+0x208>)
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d002      	beq.n	8017504 <Measure_options_screen_func+0xc0>
 80174fe:	2b01      	cmp	r3, #1
 8017500:	d007      	beq.n	8017512 <Measure_options_screen_func+0xce>
 8017502:	e00d      	b.n	8017520 <Measure_options_screen_func+0xdc>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 8017504:	2301      	movs	r3, #1
 8017506:	224d      	movs	r2, #77	; 0x4d
 8017508:	21c8      	movs	r1, #200	; 0xc8
 801750a:	484a      	ldr	r0, [pc, #296]	; (8017634 <Measure_options_screen_func+0x1f0>)
 801750c:	f7eb f8c4 	bl	8002698 <DrawImage>
 8017510:	e006      	b.n	8017520 <Measure_options_screen_func+0xdc>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 8017512:	2301      	movs	r3, #1
 8017514:	224d      	movs	r2, #77	; 0x4d
 8017516:	21c8      	movs	r1, #200	; 0xc8
 8017518:	4847      	ldr	r0, [pc, #284]	; (8017638 <Measure_options_screen_func+0x1f4>)
 801751a:	f7eb f8bd 	bl	8002698 <DrawImage>
 801751e:	bf00      	nop
		}

		// "P+I"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*3+6, "P+I", edit_param, 3);
 8017520:	4b41      	ldr	r3, [pc, #260]	; (8017628 <Measure_options_screen_func+0x1e4>)
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	2203      	movs	r2, #3
 8017526:	9200      	str	r2, [sp, #0]
 8017528:	4a49      	ldr	r2, [pc, #292]	; (8017650 <Measure_options_screen_func+0x20c>)
 801752a:	216d      	movs	r1, #109	; 0x6d
 801752c:	200f      	movs	r0, #15
 801752e:	f7eb fa43 	bl	80029b8 <Blink_Edit_Parameter>
		switch(PI)
 8017532:	4b48      	ldr	r3, [pc, #288]	; (8017654 <Measure_options_screen_func+0x210>)
 8017534:	781b      	ldrb	r3, [r3, #0]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d002      	beq.n	8017540 <Measure_options_screen_func+0xfc>
 801753a:	2b01      	cmp	r3, #1
 801753c:	d007      	beq.n	801754e <Measure_options_screen_func+0x10a>
 801753e:	e00d      	b.n	801755c <Measure_options_screen_func+0x118>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 8017540:	2301      	movs	r3, #1
 8017542:	2267      	movs	r2, #103	; 0x67
 8017544:	21c8      	movs	r1, #200	; 0xc8
 8017546:	483b      	ldr	r0, [pc, #236]	; (8017634 <Measure_options_screen_func+0x1f0>)
 8017548:	f7eb f8a6 	bl	8002698 <DrawImage>
 801754c:	e006      	b.n	801755c <Measure_options_screen_func+0x118>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 801754e:	2301      	movs	r3, #1
 8017550:	2267      	movs	r2, #103	; 0x67
 8017552:	21c8      	movs	r1, #200	; 0xc8
 8017554:	4838      	ldr	r0, [pc, #224]	; (8017638 <Measure_options_screen_func+0x1f4>)
 8017556:	f7eb f89f 	bl	8002698 <DrawImage>
 801755a:	bf00      	nop
		}

		// "P+E"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*4+6, "P+E", edit_param, 4);
 801755c:	4b32      	ldr	r3, [pc, #200]	; (8017628 <Measure_options_screen_func+0x1e4>)
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	2204      	movs	r2, #4
 8017562:	9200      	str	r2, [sp, #0]
 8017564:	4a3c      	ldr	r2, [pc, #240]	; (8017658 <Measure_options_screen_func+0x214>)
 8017566:	2187      	movs	r1, #135	; 0x87
 8017568:	200f      	movs	r0, #15
 801756a:	f7eb fa25 	bl	80029b8 <Blink_Edit_Parameter>
		switch(PE)
 801756e:	4b3b      	ldr	r3, [pc, #236]	; (801765c <Measure_options_screen_func+0x218>)
 8017570:	781b      	ldrb	r3, [r3, #0]
 8017572:	2b07      	cmp	r3, #7
 8017574:	d84a      	bhi.n	801760c <Measure_options_screen_func+0x1c8>
 8017576:	a201      	add	r2, pc, #4	; (adr r2, 801757c <Measure_options_screen_func+0x138>)
 8017578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801757c:	0801759d 	.word	0x0801759d
 8017580:	080175ab 	.word	0x080175ab
 8017584:	080175b9 	.word	0x080175b9
 8017588:	080175c7 	.word	0x080175c7
 801758c:	080175d5 	.word	0x080175d5
 8017590:	080175e3 	.word	0x080175e3
 8017594:	080175f1 	.word	0x080175f1
 8017598:	080175ff 	.word	0x080175ff
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801759c:	2301      	movs	r3, #1
 801759e:	2281      	movs	r2, #129	; 0x81
 80175a0:	21c8      	movs	r1, #200	; 0xc8
 80175a2:	4824      	ldr	r0, [pc, #144]	; (8017634 <Measure_options_screen_func+0x1f0>)
 80175a4:	f7eb f878 	bl	8002698 <DrawImage>
 80175a8:	e030      	b.n	801760c <Measure_options_screen_func+0x1c8>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175aa:	2301      	movs	r3, #1
 80175ac:	2281      	movs	r2, #129	; 0x81
 80175ae:	21c8      	movs	r1, #200	; 0xc8
 80175b0:	4821      	ldr	r0, [pc, #132]	; (8017638 <Measure_options_screen_func+0x1f4>)
 80175b2:	f7eb f871 	bl	8002698 <DrawImage>
 80175b6:	e029      	b.n	801760c <Measure_options_screen_func+0x1c8>
			case 2: DrawImage(press_on_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175b8:	2301      	movs	r3, #1
 80175ba:	2281      	movs	r2, #129	; 0x81
 80175bc:	21c8      	movs	r1, #200	; 0xc8
 80175be:	4828      	ldr	r0, [pc, #160]	; (8017660 <Measure_options_screen_func+0x21c>)
 80175c0:	f7eb f86a 	bl	8002698 <DrawImage>
 80175c4:	e022      	b.n	801760c <Measure_options_screen_func+0x1c8>
			case 3: DrawImage(press_off_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175c6:	2301      	movs	r3, #1
 80175c8:	2281      	movs	r2, #129	; 0x81
 80175ca:	21c8      	movs	r1, #200	; 0xc8
 80175cc:	4825      	ldr	r0, [pc, #148]	; (8017664 <Measure_options_screen_func+0x220>)
 80175ce:	f7eb f863 	bl	8002698 <DrawImage>
 80175d2:	e01b      	b.n	801760c <Measure_options_screen_func+0x1c8>
			case 4: DrawImage(up_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175d4:	2301      	movs	r3, #1
 80175d6:	2281      	movs	r2, #129	; 0x81
 80175d8:	21c8      	movs	r1, #200	; 0xc8
 80175da:	4823      	ldr	r0, [pc, #140]	; (8017668 <Measure_options_screen_func+0x224>)
 80175dc:	f7eb f85c 	bl	8002698 <DrawImage>
 80175e0:	e014      	b.n	801760c <Measure_options_screen_func+0x1c8>
			case 5: DrawImage(down_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175e2:	2301      	movs	r3, #1
 80175e4:	2281      	movs	r2, #129	; 0x81
 80175e6:	21c8      	movs	r1, #200	; 0xc8
 80175e8:	4820      	ldr	r0, [pc, #128]	; (801766c <Measure_options_screen_func+0x228>)
 80175ea:	f7eb f855 	bl	8002698 <DrawImage>
 80175ee:	e00d      	b.n	801760c <Measure_options_screen_func+0x1c8>
			case 6: DrawImage(pos_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175f0:	2301      	movs	r3, #1
 80175f2:	2281      	movs	r2, #129	; 0x81
 80175f4:	21c8      	movs	r1, #200	; 0xc8
 80175f6:	481e      	ldr	r0, [pc, #120]	; (8017670 <Measure_options_screen_func+0x22c>)
 80175f8:	f7eb f84e 	bl	8002698 <DrawImage>
 80175fc:	e006      	b.n	801760c <Measure_options_screen_func+0x1c8>
			case 7: DrawImage(neg_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175fe:	2301      	movs	r3, #1
 8017600:	2281      	movs	r2, #129	; 0x81
 8017602:	21c8      	movs	r1, #200	; 0xc8
 8017604:	481b      	ldr	r0, [pc, #108]	; (8017674 <Measure_options_screen_func+0x230>)
 8017606:	f7eb f847 	bl	8002698 <DrawImage>
 801760a:	bf00      	nop
		}



	u8g2_SendBuffer(&u8g2);
 801760c:	4805      	ldr	r0, [pc, #20]	; (8017624 <Measure_options_screen_func+0x1e0>)
 801760e:	f7fd fbfc 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017612:	4804      	ldr	r0, [pc, #16]	; (8017624 <Measure_options_screen_func+0x1e0>)
 8017614:	f7fd fb86 	bl	8014d24 <u8g2_ClearBuffer>
}
 8017618:	bf00      	nop
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	080271b0 	.word	0x080271b0
 8017624:	20002098 	.word	0x20002098
 8017628:	2000091c 	.word	0x2000091c
 801762c:	08022474 	.word	0x08022474
 8017630:	2000096b 	.word	0x2000096b
 8017634:	0802b0a8 	.word	0x0802b0a8
 8017638:	0802b0f4 	.word	0x0802b0f4
 801763c:	08022494 	.word	0x08022494
 8017640:	2000096c 	.word	0x2000096c
 8017644:	0802b308 	.word	0x0802b308
 8017648:	080224b8 	.word	0x080224b8
 801764c:	2000096d 	.word	0x2000096d
 8017650:	080224bc 	.word	0x080224bc
 8017654:	2000096e 	.word	0x2000096e
 8017658:	080224c0 	.word	0x080224c0
 801765c:	2000096f 	.word	0x2000096f
 8017660:	0802b270 	.word	0x0802b270
 8017664:	0802b2bc 	.word	0x0802b2bc
 8017668:	0802b140 	.word	0x0802b140
 801766c:	0802b18c 	.word	0x0802b18c
 8017670:	0802b224 	.word	0x0802b224
 8017674:	0802b1d8 	.word	0x0802b1d8

08017678 <Measure_options_screen_S6>:


// DOWN
void Measure_options_screen_S6(void)
{
 8017678:	b480      	push	{r7}
 801767a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801767c:	4b07      	ldr	r3, [pc, #28]	; (801769c <Measure_options_screen_S6+0x24>)
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	2b03      	cmp	r3, #3
 8017682:	d805      	bhi.n	8017690 <Measure_options_screen_S6+0x18>
 8017684:	4b05      	ldr	r3, [pc, #20]	; (801769c <Measure_options_screen_S6+0x24>)
 8017686:	781b      	ldrb	r3, [r3, #0]
 8017688:	3301      	adds	r3, #1
 801768a:	b2da      	uxtb	r2, r3
 801768c:	4b03      	ldr	r3, [pc, #12]	; (801769c <Measure_options_screen_S6+0x24>)
 801768e:	701a      	strb	r2, [r3, #0]
}
 8017690:	bf00      	nop
 8017692:	46bd      	mov	sp, r7
 8017694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017698:	4770      	bx	lr
 801769a:	bf00      	nop
 801769c:	2000091c 	.word	0x2000091c

080176a0 <Measure_options_screen_S7>:

// UP
void Measure_options_screen_S7(void)
{
 80176a0:	b480      	push	{r7}
 80176a2:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80176a4:	4b07      	ldr	r3, [pc, #28]	; (80176c4 <Measure_options_screen_S7+0x24>)
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d005      	beq.n	80176b8 <Measure_options_screen_S7+0x18>
 80176ac:	4b05      	ldr	r3, [pc, #20]	; (80176c4 <Measure_options_screen_S7+0x24>)
 80176ae:	781b      	ldrb	r3, [r3, #0]
 80176b0:	3b01      	subs	r3, #1
 80176b2:	b2da      	uxtb	r2, r3
 80176b4:	4b03      	ldr	r3, [pc, #12]	; (80176c4 <Measure_options_screen_S7+0x24>)
 80176b6:	701a      	strb	r2, [r3, #0]
}
 80176b8:	bf00      	nop
 80176ba:	46bd      	mov	sp, r7
 80176bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c0:	4770      	bx	lr
 80176c2:	bf00      	nop
 80176c4:	2000091c 	.word	0x2000091c

080176c8 <Measure_options_screen_S9>:



// MENU
void Measure_options_screen_S9(void)
{
 80176c8:	b480      	push	{r7}
 80176ca:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80176cc:	4b06      	ldr	r3, [pc, #24]	; (80176e8 <Measure_options_screen_S9+0x20>)
 80176ce:	2204      	movs	r2, #4
 80176d0:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80176d2:	4b06      	ldr	r3, [pc, #24]	; (80176ec <Measure_options_screen_S9+0x24>)
 80176d4:	22ff      	movs	r2, #255	; 0xff
 80176d6:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 80176d8:	4b05      	ldr	r3, [pc, #20]	; (80176f0 <Measure_options_screen_S9+0x28>)
 80176da:	2200      	movs	r2, #0
 80176dc:	701a      	strb	r2, [r3, #0]
}
 80176de:	bf00      	nop
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr
 80176e8:	2000004c 	.word	0x2000004c
 80176ec:	20000460 	.word	0x20000460
 80176f0:	20000461 	.word	0x20000461

080176f4 <Measure_options_screen_S8>:

// BACKWARD
void Measure_options_screen_S8(void)
{
 80176f4:	b480      	push	{r7}
 80176f6:	af00      	add	r7, sp, #0
	switch(edit_param)
 80176f8:	4b2b      	ldr	r3, [pc, #172]	; (80177a8 <Measure_options_screen_S8+0xb4>)
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	2b04      	cmp	r3, #4
 80176fe:	d84d      	bhi.n	801779c <Measure_options_screen_S8+0xa8>
 8017700:	a201      	add	r2, pc, #4	; (adr r2, 8017708 <Measure_options_screen_S8+0x14>)
 8017702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017706:	bf00      	nop
 8017708:	0801771d 	.word	0x0801771d
 801770c:	08017733 	.word	0x08017733
 8017710:	08017749 	.word	0x08017749
 8017714:	0801775f 	.word	0x0801775f
 8017718:	08017775 	.word	0x08017775
	{
		case 0: if(mm_peak>0)mm_peak--; break;
 801771c:	4b23      	ldr	r3, [pc, #140]	; (80177ac <Measure_options_screen_S8+0xb8>)
 801771e:	781b      	ldrb	r3, [r3, #0]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d032      	beq.n	801778a <Measure_options_screen_S8+0x96>
 8017724:	4b21      	ldr	r3, [pc, #132]	; (80177ac <Measure_options_screen_S8+0xb8>)
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	3b01      	subs	r3, #1
 801772a:	b2da      	uxtb	r2, r3
 801772c:	4b1f      	ldr	r3, [pc, #124]	; (80177ac <Measure_options_screen_S8+0xb8>)
 801772e:	701a      	strb	r2, [r3, #0]
 8017730:	e02b      	b.n	801778a <Measure_options_screen_S8+0x96>
		case 1: if(leak_detect>0)leak_detect--; break;
 8017732:	4b1f      	ldr	r3, [pc, #124]	; (80177b0 <Measure_options_screen_S8+0xbc>)
 8017734:	781b      	ldrb	r3, [r3, #0]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d029      	beq.n	801778e <Measure_options_screen_S8+0x9a>
 801773a:	4b1d      	ldr	r3, [pc, #116]	; (80177b0 <Measure_options_screen_S8+0xbc>)
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	3b01      	subs	r3, #1
 8017740:	b2da      	uxtb	r2, r3
 8017742:	4b1b      	ldr	r3, [pc, #108]	; (80177b0 <Measure_options_screen_S8+0xbc>)
 8017744:	701a      	strb	r2, [r3, #0]
 8017746:	e022      	b.n	801778e <Measure_options_screen_S8+0x9a>
		case 2: if(PV>0)PV--; break;
 8017748:	4b1a      	ldr	r3, [pc, #104]	; (80177b4 <Measure_options_screen_S8+0xc0>)
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d020      	beq.n	8017792 <Measure_options_screen_S8+0x9e>
 8017750:	4b18      	ldr	r3, [pc, #96]	; (80177b4 <Measure_options_screen_S8+0xc0>)
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	3b01      	subs	r3, #1
 8017756:	b2da      	uxtb	r2, r3
 8017758:	4b16      	ldr	r3, [pc, #88]	; (80177b4 <Measure_options_screen_S8+0xc0>)
 801775a:	701a      	strb	r2, [r3, #0]
 801775c:	e019      	b.n	8017792 <Measure_options_screen_S8+0x9e>
		case 3: if(PI>0)PI--; break;
 801775e:	4b16      	ldr	r3, [pc, #88]	; (80177b8 <Measure_options_screen_S8+0xc4>)
 8017760:	781b      	ldrb	r3, [r3, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d017      	beq.n	8017796 <Measure_options_screen_S8+0xa2>
 8017766:	4b14      	ldr	r3, [pc, #80]	; (80177b8 <Measure_options_screen_S8+0xc4>)
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	3b01      	subs	r3, #1
 801776c:	b2da      	uxtb	r2, r3
 801776e:	4b12      	ldr	r3, [pc, #72]	; (80177b8 <Measure_options_screen_S8+0xc4>)
 8017770:	701a      	strb	r2, [r3, #0]
 8017772:	e010      	b.n	8017796 <Measure_options_screen_S8+0xa2>
		case 4: if(PE>0)PE--; break;
 8017774:	4b11      	ldr	r3, [pc, #68]	; (80177bc <Measure_options_screen_S8+0xc8>)
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d00e      	beq.n	801779a <Measure_options_screen_S8+0xa6>
 801777c:	4b0f      	ldr	r3, [pc, #60]	; (80177bc <Measure_options_screen_S8+0xc8>)
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	3b01      	subs	r3, #1
 8017782:	b2da      	uxtb	r2, r3
 8017784:	4b0d      	ldr	r3, [pc, #52]	; (80177bc <Measure_options_screen_S8+0xc8>)
 8017786:	701a      	strb	r2, [r3, #0]
 8017788:	e007      	b.n	801779a <Measure_options_screen_S8+0xa6>
		case 0: if(mm_peak>0)mm_peak--; break;
 801778a:	bf00      	nop
 801778c:	e006      	b.n	801779c <Measure_options_screen_S8+0xa8>
		case 1: if(leak_detect>0)leak_detect--; break;
 801778e:	bf00      	nop
 8017790:	e004      	b.n	801779c <Measure_options_screen_S8+0xa8>
		case 2: if(PV>0)PV--; break;
 8017792:	bf00      	nop
 8017794:	e002      	b.n	801779c <Measure_options_screen_S8+0xa8>
		case 3: if(PI>0)PI--; break;
 8017796:	bf00      	nop
 8017798:	e000      	b.n	801779c <Measure_options_screen_S8+0xa8>
		case 4: if(PE>0)PE--; break;
 801779a:	bf00      	nop
	}
}
 801779c:	bf00      	nop
 801779e:	46bd      	mov	sp, r7
 80177a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a4:	4770      	bx	lr
 80177a6:	bf00      	nop
 80177a8:	2000091c 	.word	0x2000091c
 80177ac:	2000096b 	.word	0x2000096b
 80177b0:	2000096c 	.word	0x2000096c
 80177b4:	2000096d 	.word	0x2000096d
 80177b8:	2000096e 	.word	0x2000096e
 80177bc:	2000096f 	.word	0x2000096f

080177c0 <Measure_options_screen_S5>:

// FORWARD
void Measure_options_screen_S5(void)
{
 80177c0:	b480      	push	{r7}
 80177c2:	af00      	add	r7, sp, #0
	switch(edit_param)
 80177c4:	4b2b      	ldr	r3, [pc, #172]	; (8017874 <Measure_options_screen_S5+0xb4>)
 80177c6:	781b      	ldrb	r3, [r3, #0]
 80177c8:	2b04      	cmp	r3, #4
 80177ca:	d84d      	bhi.n	8017868 <Measure_options_screen_S5+0xa8>
 80177cc:	a201      	add	r2, pc, #4	; (adr r2, 80177d4 <Measure_options_screen_S5+0x14>)
 80177ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177d2:	bf00      	nop
 80177d4:	080177e9 	.word	0x080177e9
 80177d8:	080177ff 	.word	0x080177ff
 80177dc:	08017815 	.word	0x08017815
 80177e0:	0801782b 	.word	0x0801782b
 80177e4:	08017841 	.word	0x08017841
	{
		case 0: if(mm_peak<1)mm_peak++; break;
 80177e8:	4b23      	ldr	r3, [pc, #140]	; (8017878 <Measure_options_screen_S5+0xb8>)
 80177ea:	781b      	ldrb	r3, [r3, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d132      	bne.n	8017856 <Measure_options_screen_S5+0x96>
 80177f0:	4b21      	ldr	r3, [pc, #132]	; (8017878 <Measure_options_screen_S5+0xb8>)
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	3301      	adds	r3, #1
 80177f6:	b2da      	uxtb	r2, r3
 80177f8:	4b1f      	ldr	r3, [pc, #124]	; (8017878 <Measure_options_screen_S5+0xb8>)
 80177fa:	701a      	strb	r2, [r3, #0]
 80177fc:	e02b      	b.n	8017856 <Measure_options_screen_S5+0x96>
		case 1: if(leak_detect<2)leak_detect++; break;
 80177fe:	4b1f      	ldr	r3, [pc, #124]	; (801787c <Measure_options_screen_S5+0xbc>)
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	2b01      	cmp	r3, #1
 8017804:	d829      	bhi.n	801785a <Measure_options_screen_S5+0x9a>
 8017806:	4b1d      	ldr	r3, [pc, #116]	; (801787c <Measure_options_screen_S5+0xbc>)
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	3301      	adds	r3, #1
 801780c:	b2da      	uxtb	r2, r3
 801780e:	4b1b      	ldr	r3, [pc, #108]	; (801787c <Measure_options_screen_S5+0xbc>)
 8017810:	701a      	strb	r2, [r3, #0]
 8017812:	e022      	b.n	801785a <Measure_options_screen_S5+0x9a>
		case 2: if(PV<1)PV++; break;
 8017814:	4b1a      	ldr	r3, [pc, #104]	; (8017880 <Measure_options_screen_S5+0xc0>)
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d120      	bne.n	801785e <Measure_options_screen_S5+0x9e>
 801781c:	4b18      	ldr	r3, [pc, #96]	; (8017880 <Measure_options_screen_S5+0xc0>)
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	3301      	adds	r3, #1
 8017822:	b2da      	uxtb	r2, r3
 8017824:	4b16      	ldr	r3, [pc, #88]	; (8017880 <Measure_options_screen_S5+0xc0>)
 8017826:	701a      	strb	r2, [r3, #0]
 8017828:	e019      	b.n	801785e <Measure_options_screen_S5+0x9e>
		case 3: if(PI<1)PI++; break;
 801782a:	4b16      	ldr	r3, [pc, #88]	; (8017884 <Measure_options_screen_S5+0xc4>)
 801782c:	781b      	ldrb	r3, [r3, #0]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d117      	bne.n	8017862 <Measure_options_screen_S5+0xa2>
 8017832:	4b14      	ldr	r3, [pc, #80]	; (8017884 <Measure_options_screen_S5+0xc4>)
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	3301      	adds	r3, #1
 8017838:	b2da      	uxtb	r2, r3
 801783a:	4b12      	ldr	r3, [pc, #72]	; (8017884 <Measure_options_screen_S5+0xc4>)
 801783c:	701a      	strb	r2, [r3, #0]
 801783e:	e010      	b.n	8017862 <Measure_options_screen_S5+0xa2>
		case 4: if(PE<7)PE++; break;
 8017840:	4b11      	ldr	r3, [pc, #68]	; (8017888 <Measure_options_screen_S5+0xc8>)
 8017842:	781b      	ldrb	r3, [r3, #0]
 8017844:	2b06      	cmp	r3, #6
 8017846:	d80e      	bhi.n	8017866 <Measure_options_screen_S5+0xa6>
 8017848:	4b0f      	ldr	r3, [pc, #60]	; (8017888 <Measure_options_screen_S5+0xc8>)
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	3301      	adds	r3, #1
 801784e:	b2da      	uxtb	r2, r3
 8017850:	4b0d      	ldr	r3, [pc, #52]	; (8017888 <Measure_options_screen_S5+0xc8>)
 8017852:	701a      	strb	r2, [r3, #0]
 8017854:	e007      	b.n	8017866 <Measure_options_screen_S5+0xa6>
		case 0: if(mm_peak<1)mm_peak++; break;
 8017856:	bf00      	nop
 8017858:	e006      	b.n	8017868 <Measure_options_screen_S5+0xa8>
		case 1: if(leak_detect<2)leak_detect++; break;
 801785a:	bf00      	nop
 801785c:	e004      	b.n	8017868 <Measure_options_screen_S5+0xa8>
		case 2: if(PV<1)PV++; break;
 801785e:	bf00      	nop
 8017860:	e002      	b.n	8017868 <Measure_options_screen_S5+0xa8>
		case 3: if(PI<1)PI++; break;
 8017862:	bf00      	nop
 8017864:	e000      	b.n	8017868 <Measure_options_screen_S5+0xa8>
		case 4: if(PE<7)PE++; break;
 8017866:	bf00      	nop
	}
}
 8017868:	bf00      	nop
 801786a:	46bd      	mov	sp, r7
 801786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017870:	4770      	bx	lr
 8017872:	bf00      	nop
 8017874:	2000091c 	.word	0x2000091c
 8017878:	2000096b 	.word	0x2000096b
 801787c:	2000096c 	.word	0x2000096c
 8017880:	2000096d 	.word	0x2000096d
 8017884:	2000096e 	.word	0x2000096e
 8017888:	2000096f 	.word	0x2000096f

0801788c <Main_screen_func>:

uint16_t view_tim=0;
uint8_t view=0;

void Main_screen_func(void)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	af00      	add	r7, sp, #0
	if(view==1)
 8017890:	4b94      	ldr	r3, [pc, #592]	; (8017ae4 <Main_screen_func+0x258>)
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	2b01      	cmp	r3, #1
 8017896:	f040 8123 	bne.w	8017ae0 <Main_screen_func+0x254>
	{
		RTC_view();
 801789a:	f000 f999 	bl	8017bd0 <RTC_view>
		view=0;
 801789e:	4b91      	ldr	r3, [pc, #580]	; (8017ae4 <Main_screen_func+0x258>)
 80178a0:	2200      	movs	r2, #0
 80178a2:	701a      	strb	r2, [r3, #0]

		// Отображение давления
		u8g2_SetFont(&u8g2, u8g2_font_inr30_mn);
 80178a4:	4990      	ldr	r1, [pc, #576]	; (8017ae8 <Main_screen_func+0x25c>)
 80178a6:	4891      	ldr	r0, [pc, #580]	; (8017aec <Main_screen_func+0x260>)
 80178a8:	f7fe f8ec 	bl	8015a84 <u8g2_SetFont>
		if(Pressure<10.0) sprintf(RAM,"%+.5f", Pressure);
 80178ac:	4b90      	ldr	r3, [pc, #576]	; (8017af0 <Main_screen_func+0x264>)
 80178ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80178b2:	f04f 0200 	mov.w	r2, #0
 80178b6:	4b8f      	ldr	r3, [pc, #572]	; (8017af4 <Main_screen_func+0x268>)
 80178b8:	f7e9 f920 	bl	8000afc <__aeabi_dcmplt>
 80178bc:	4603      	mov	r3, r0
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d007      	beq.n	80178d2 <Main_screen_func+0x46>
 80178c2:	4b8b      	ldr	r3, [pc, #556]	; (8017af0 <Main_screen_func+0x264>)
 80178c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c8:	498b      	ldr	r1, [pc, #556]	; (8017af8 <Main_screen_func+0x26c>)
 80178ca:	488c      	ldr	r0, [pc, #560]	; (8017afc <Main_screen_func+0x270>)
 80178cc:	f006 faf0 	bl	801deb0 <siprintf>
 80178d0:	e019      	b.n	8017906 <Main_screen_func+0x7a>
		else if(Pressure<100.0) sprintf(RAM,"%+.4f", Pressure);
 80178d2:	4b87      	ldr	r3, [pc, #540]	; (8017af0 <Main_screen_func+0x264>)
 80178d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80178d8:	f04f 0200 	mov.w	r2, #0
 80178dc:	4b88      	ldr	r3, [pc, #544]	; (8017b00 <Main_screen_func+0x274>)
 80178de:	f7e9 f90d 	bl	8000afc <__aeabi_dcmplt>
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d007      	beq.n	80178f8 <Main_screen_func+0x6c>
 80178e8:	4b81      	ldr	r3, [pc, #516]	; (8017af0 <Main_screen_func+0x264>)
 80178ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ee:	4985      	ldr	r1, [pc, #532]	; (8017b04 <Main_screen_func+0x278>)
 80178f0:	4882      	ldr	r0, [pc, #520]	; (8017afc <Main_screen_func+0x270>)
 80178f2:	f006 fadd 	bl	801deb0 <siprintf>
 80178f6:	e006      	b.n	8017906 <Main_screen_func+0x7a>
		else sprintf(RAM,"%+.3f", Pressure);
 80178f8:	4b7d      	ldr	r3, [pc, #500]	; (8017af0 <Main_screen_func+0x264>)
 80178fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178fe:	4982      	ldr	r1, [pc, #520]	; (8017b08 <Main_screen_func+0x27c>)
 8017900:	487e      	ldr	r0, [pc, #504]	; (8017afc <Main_screen_func+0x270>)
 8017902:	f006 fad5 	bl	801deb0 <siprintf>
		u8g2_DrawUTF8(&u8g2, 0, 70, RAM);
 8017906:	4b7d      	ldr	r3, [pc, #500]	; (8017afc <Main_screen_func+0x270>)
 8017908:	2246      	movs	r2, #70	; 0x46
 801790a:	2100      	movs	r1, #0
 801790c:	4877      	ldr	r0, [pc, #476]	; (8017aec <Main_screen_func+0x260>)
 801790e:	f7fe f817 	bl	8015940 <u8g2_DrawUTF8>
		u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017912:	497e      	ldr	r1, [pc, #504]	; (8017b0c <Main_screen_func+0x280>)
 8017914:	4875      	ldr	r0, [pc, #468]	; (8017aec <Main_screen_func+0x260>)
 8017916:	f7fe f8b5 	bl	8015a84 <u8g2_SetFont>
		u8g2_DrawUTF8(&u8g2, 200, 70, UNITS_NAME[Units]);
 801791a:	4b7d      	ldr	r3, [pc, #500]	; (8017b10 <Main_screen_func+0x284>)
 801791c:	781b      	ldrb	r3, [r3, #0]
 801791e:	461a      	mov	r2, r3
 8017920:	4b7c      	ldr	r3, [pc, #496]	; (8017b14 <Main_screen_func+0x288>)
 8017922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017926:	2246      	movs	r2, #70	; 0x46
 8017928:	21c8      	movs	r1, #200	; 0xc8
 801792a:	4870      	ldr	r0, [pc, #448]	; (8017aec <Main_screen_func+0x260>)
 801792c:	f7fe f808 	bl	8015940 <u8g2_DrawUTF8>

		// Отображение електрических величин
		u8g2_SetFont(&u8g2, u8g2_font_inr27_t_cyrillic);
 8017930:	4979      	ldr	r1, [pc, #484]	; (8017b18 <Main_screen_func+0x28c>)
 8017932:	486e      	ldr	r0, [pc, #440]	; (8017aec <Main_screen_func+0x260>)
 8017934:	f7fe f8a6 	bl	8015a84 <u8g2_SetFont>
		switch(E_fun)
 8017938:	4b78      	ldr	r3, [pc, #480]	; (8017b1c <Main_screen_func+0x290>)
 801793a:	781b      	ldrb	r3, [r3, #0]
 801793c:	2b02      	cmp	r3, #2
 801793e:	d007      	beq.n	8017950 <Main_screen_func+0xc4>
 8017940:	2b02      	cmp	r3, #2
 8017942:	f300 80c7 	bgt.w	8017ad4 <Main_screen_func+0x248>
 8017946:	2b00      	cmp	r3, #0
 8017948:	d014      	beq.n	8017974 <Main_screen_func+0xe8>
 801794a:	2b01      	cmp	r3, #1
 801794c:	d06a      	beq.n	8017a24 <Main_screen_func+0x198>
 801794e:	e0c1      	b.n	8017ad4 <Main_screen_func+0x248>
		{
			// Контакты
			case SW:
				if(SW_state==0)u8g2_DrawUTF8(&u8g2, 25, 130, "РАЗОМКНУТ");
 8017950:	4b73      	ldr	r3, [pc, #460]	; (8017b20 <Main_screen_func+0x294>)
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d106      	bne.n	8017966 <Main_screen_func+0xda>
 8017958:	4b72      	ldr	r3, [pc, #456]	; (8017b24 <Main_screen_func+0x298>)
 801795a:	2282      	movs	r2, #130	; 0x82
 801795c:	2119      	movs	r1, #25
 801795e:	4863      	ldr	r0, [pc, #396]	; (8017aec <Main_screen_func+0x260>)
 8017960:	f7fd ffee 	bl	8015940 <u8g2_DrawUTF8>
				else u8g2_DrawUTF8(&u8g2, 25, 130, " ЗАМКНУТ ");
			break;
 8017964:	e0b6      	b.n	8017ad4 <Main_screen_func+0x248>
				else u8g2_DrawUTF8(&u8g2, 25, 130, " ЗАМКНУТ ");
 8017966:	4b70      	ldr	r3, [pc, #448]	; (8017b28 <Main_screen_func+0x29c>)
 8017968:	2282      	movs	r2, #130	; 0x82
 801796a:	2119      	movs	r1, #25
 801796c:	485f      	ldr	r0, [pc, #380]	; (8017aec <Main_screen_func+0x260>)
 801796e:	f7fd ffe7 	bl	8015940 <u8g2_DrawUTF8>
			break;
 8017972:	e0af      	b.n	8017ad4 <Main_screen_func+0x248>

			// Ток
			case mA:
				if(Pressure<10.0) sprintf(RAM,"%+.6f", current_4_20mA-Current_zero);
 8017974:	4b5e      	ldr	r3, [pc, #376]	; (8017af0 <Main_screen_func+0x264>)
 8017976:	e9d3 0100 	ldrd	r0, r1, [r3]
 801797a:	f04f 0200 	mov.w	r2, #0
 801797e:	4b5d      	ldr	r3, [pc, #372]	; (8017af4 <Main_screen_func+0x268>)
 8017980:	f7e9 f8bc 	bl	8000afc <__aeabi_dcmplt>
 8017984:	4603      	mov	r3, r0
 8017986:	2b00      	cmp	r3, #0
 8017988:	d00e      	beq.n	80179a8 <Main_screen_func+0x11c>
 801798a:	4b68      	ldr	r3, [pc, #416]	; (8017b2c <Main_screen_func+0x2a0>)
 801798c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017990:	4b67      	ldr	r3, [pc, #412]	; (8017b30 <Main_screen_func+0x2a4>)
 8017992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017996:	f7e8 fc87 	bl	80002a8 <__aeabi_dsub>
 801799a:	4602      	mov	r2, r0
 801799c:	460b      	mov	r3, r1
 801799e:	4965      	ldr	r1, [pc, #404]	; (8017b34 <Main_screen_func+0x2a8>)
 80179a0:	4856      	ldr	r0, [pc, #344]	; (8017afc <Main_screen_func+0x270>)
 80179a2:	f006 fa85 	bl	801deb0 <siprintf>
 80179a6:	e027      	b.n	80179f8 <Main_screen_func+0x16c>
				else if(Pressure<100.0) sprintf(RAM,"%+.5f", current_4_20mA-Current_zero);
 80179a8:	4b51      	ldr	r3, [pc, #324]	; (8017af0 <Main_screen_func+0x264>)
 80179aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179ae:	f04f 0200 	mov.w	r2, #0
 80179b2:	4b53      	ldr	r3, [pc, #332]	; (8017b00 <Main_screen_func+0x274>)
 80179b4:	f7e9 f8a2 	bl	8000afc <__aeabi_dcmplt>
 80179b8:	4603      	mov	r3, r0
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d00e      	beq.n	80179dc <Main_screen_func+0x150>
 80179be:	4b5b      	ldr	r3, [pc, #364]	; (8017b2c <Main_screen_func+0x2a0>)
 80179c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179c4:	4b5a      	ldr	r3, [pc, #360]	; (8017b30 <Main_screen_func+0x2a4>)
 80179c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ca:	f7e8 fc6d 	bl	80002a8 <__aeabi_dsub>
 80179ce:	4602      	mov	r2, r0
 80179d0:	460b      	mov	r3, r1
 80179d2:	4949      	ldr	r1, [pc, #292]	; (8017af8 <Main_screen_func+0x26c>)
 80179d4:	4849      	ldr	r0, [pc, #292]	; (8017afc <Main_screen_func+0x270>)
 80179d6:	f006 fa6b 	bl	801deb0 <siprintf>
 80179da:	e00d      	b.n	80179f8 <Main_screen_func+0x16c>
				else sprintf(RAM,"%+.4f", current_4_20mA-Current_zero);
 80179dc:	4b53      	ldr	r3, [pc, #332]	; (8017b2c <Main_screen_func+0x2a0>)
 80179de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179e2:	4b53      	ldr	r3, [pc, #332]	; (8017b30 <Main_screen_func+0x2a4>)
 80179e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179e8:	f7e8 fc5e 	bl	80002a8 <__aeabi_dsub>
 80179ec:	4602      	mov	r2, r0
 80179ee:	460b      	mov	r3, r1
 80179f0:	4944      	ldr	r1, [pc, #272]	; (8017b04 <Main_screen_func+0x278>)
 80179f2:	4842      	ldr	r0, [pc, #264]	; (8017afc <Main_screen_func+0x270>)
 80179f4:	f006 fa5c 	bl	801deb0 <siprintf>
				u8g2_DrawUTF8(&u8g2, 0, 130, RAM);
 80179f8:	4b40      	ldr	r3, [pc, #256]	; (8017afc <Main_screen_func+0x270>)
 80179fa:	2282      	movs	r2, #130	; 0x82
 80179fc:	2100      	movs	r1, #0
 80179fe:	483b      	ldr	r0, [pc, #236]	; (8017aec <Main_screen_func+0x260>)
 8017a00:	f7fd ff9e 	bl	8015940 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017a04:	4941      	ldr	r1, [pc, #260]	; (8017b0c <Main_screen_func+0x280>)
 8017a06:	4839      	ldr	r0, [pc, #228]	; (8017aec <Main_screen_func+0x260>)
 8017a08:	f7fe f83c 	bl	8015a84 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 200, 130, E_UNITS_NAME[E_fun]);
 8017a0c:	4b43      	ldr	r3, [pc, #268]	; (8017b1c <Main_screen_func+0x290>)
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	461a      	mov	r2, r3
 8017a12:	4b49      	ldr	r3, [pc, #292]	; (8017b38 <Main_screen_func+0x2ac>)
 8017a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a18:	2282      	movs	r2, #130	; 0x82
 8017a1a:	21c8      	movs	r1, #200	; 0xc8
 8017a1c:	4833      	ldr	r0, [pc, #204]	; (8017aec <Main_screen_func+0x260>)
 8017a1e:	f7fd ff8f 	bl	8015940 <u8g2_DrawUTF8>
			break;
 8017a22:	e057      	b.n	8017ad4 <Main_screen_func+0x248>

			// Напряжение
			case V:
				if(Pressure<10.0) sprintf(RAM,"%+.6f", voltage_measure-Voltage_zero);
 8017a24:	4b32      	ldr	r3, [pc, #200]	; (8017af0 <Main_screen_func+0x264>)
 8017a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a2a:	f04f 0200 	mov.w	r2, #0
 8017a2e:	4b31      	ldr	r3, [pc, #196]	; (8017af4 <Main_screen_func+0x268>)
 8017a30:	f7e9 f864 	bl	8000afc <__aeabi_dcmplt>
 8017a34:	4603      	mov	r3, r0
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d00e      	beq.n	8017a58 <Main_screen_func+0x1cc>
 8017a3a:	4b40      	ldr	r3, [pc, #256]	; (8017b3c <Main_screen_func+0x2b0>)
 8017a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a40:	4b3f      	ldr	r3, [pc, #252]	; (8017b40 <Main_screen_func+0x2b4>)
 8017a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a46:	f7e8 fc2f 	bl	80002a8 <__aeabi_dsub>
 8017a4a:	4602      	mov	r2, r0
 8017a4c:	460b      	mov	r3, r1
 8017a4e:	4939      	ldr	r1, [pc, #228]	; (8017b34 <Main_screen_func+0x2a8>)
 8017a50:	482a      	ldr	r0, [pc, #168]	; (8017afc <Main_screen_func+0x270>)
 8017a52:	f006 fa2d 	bl	801deb0 <siprintf>
 8017a56:	e027      	b.n	8017aa8 <Main_screen_func+0x21c>
				else if(Pressure<100.0) sprintf(RAM,"%+.5f", voltage_measure-Voltage_zero);
 8017a58:	4b25      	ldr	r3, [pc, #148]	; (8017af0 <Main_screen_func+0x264>)
 8017a5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a5e:	f04f 0200 	mov.w	r2, #0
 8017a62:	4b27      	ldr	r3, [pc, #156]	; (8017b00 <Main_screen_func+0x274>)
 8017a64:	f7e9 f84a 	bl	8000afc <__aeabi_dcmplt>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d00e      	beq.n	8017a8c <Main_screen_func+0x200>
 8017a6e:	4b33      	ldr	r3, [pc, #204]	; (8017b3c <Main_screen_func+0x2b0>)
 8017a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a74:	4b32      	ldr	r3, [pc, #200]	; (8017b40 <Main_screen_func+0x2b4>)
 8017a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a7a:	f7e8 fc15 	bl	80002a8 <__aeabi_dsub>
 8017a7e:	4602      	mov	r2, r0
 8017a80:	460b      	mov	r3, r1
 8017a82:	491d      	ldr	r1, [pc, #116]	; (8017af8 <Main_screen_func+0x26c>)
 8017a84:	481d      	ldr	r0, [pc, #116]	; (8017afc <Main_screen_func+0x270>)
 8017a86:	f006 fa13 	bl	801deb0 <siprintf>
 8017a8a:	e00d      	b.n	8017aa8 <Main_screen_func+0x21c>
				else sprintf(RAM,"%+.4f", voltage_measure-Voltage_zero);
 8017a8c:	4b2b      	ldr	r3, [pc, #172]	; (8017b3c <Main_screen_func+0x2b0>)
 8017a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a92:	4b2b      	ldr	r3, [pc, #172]	; (8017b40 <Main_screen_func+0x2b4>)
 8017a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a98:	f7e8 fc06 	bl	80002a8 <__aeabi_dsub>
 8017a9c:	4602      	mov	r2, r0
 8017a9e:	460b      	mov	r3, r1
 8017aa0:	4918      	ldr	r1, [pc, #96]	; (8017b04 <Main_screen_func+0x278>)
 8017aa2:	4816      	ldr	r0, [pc, #88]	; (8017afc <Main_screen_func+0x270>)
 8017aa4:	f006 fa04 	bl	801deb0 <siprintf>
				u8g2_DrawUTF8(&u8g2, 0, 130, RAM);
 8017aa8:	4b14      	ldr	r3, [pc, #80]	; (8017afc <Main_screen_func+0x270>)
 8017aaa:	2282      	movs	r2, #130	; 0x82
 8017aac:	2100      	movs	r1, #0
 8017aae:	480f      	ldr	r0, [pc, #60]	; (8017aec <Main_screen_func+0x260>)
 8017ab0:	f7fd ff46 	bl	8015940 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017ab4:	4915      	ldr	r1, [pc, #84]	; (8017b0c <Main_screen_func+0x280>)
 8017ab6:	480d      	ldr	r0, [pc, #52]	; (8017aec <Main_screen_func+0x260>)
 8017ab8:	f7fd ffe4 	bl	8015a84 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 200, 130, E_UNITS_NAME[E_fun]);
 8017abc:	4b17      	ldr	r3, [pc, #92]	; (8017b1c <Main_screen_func+0x290>)
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	4b1d      	ldr	r3, [pc, #116]	; (8017b38 <Main_screen_func+0x2ac>)
 8017ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ac8:	2282      	movs	r2, #130	; 0x82
 8017aca:	21c8      	movs	r1, #200	; 0xc8
 8017acc:	4807      	ldr	r0, [pc, #28]	; (8017aec <Main_screen_func+0x260>)
 8017ace:	f7fd ff37 	bl	8015940 <u8g2_DrawUTF8>
			break;
 8017ad2:	bf00      	nop
		}

		u8g2_SendBuffer(&u8g2);
 8017ad4:	4805      	ldr	r0, [pc, #20]	; (8017aec <Main_screen_func+0x260>)
 8017ad6:	f7fd f998 	bl	8014e0a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8017ada:	4804      	ldr	r0, [pc, #16]	; (8017aec <Main_screen_func+0x260>)
 8017adc:	f7fd f922 	bl	8014d24 <u8g2_ClearBuffer>
	}
}
 8017ae0:	bf00      	nop
 8017ae2:	bd80      	pop	{r7, pc}
 8017ae4:	20001d18 	.word	0x20001d18
 8017ae8:	0802ad00 	.word	0x0802ad00
 8017aec:	20002098 	.word	0x20002098
 8017af0:	20002398 	.word	0x20002398
 8017af4:	40240000 	.word	0x40240000
 8017af8:	080224c4 	.word	0x080224c4
 8017afc:	20002158 	.word	0x20002158
 8017b00:	40590000 	.word	0x40590000
 8017b04:	080224cc 	.word	0x080224cc
 8017b08:	080224d4 	.word	0x080224d4
 8017b0c:	080271b0 	.word	0x080271b0
 8017b10:	200000b2 	.word	0x200000b2
 8017b14:	20000164 	.word	0x20000164
 8017b18:	08028ddc 	.word	0x08028ddc
 8017b1c:	20000968 	.word	0x20000968
 8017b20:	20000969 	.word	0x20000969
 8017b24:	080224dc 	.word	0x080224dc
 8017b28:	080224f0 	.word	0x080224f0
 8017b2c:	200023c0 	.word	0x200023c0
 8017b30:	20000948 	.word	0x20000948
 8017b34:	08022504 	.word	0x08022504
 8017b38:	20000190 	.word	0x20000190
 8017b3c:	20002278 	.word	0x20002278
 8017b40:	20000940 	.word	0x20000940

08017b44 <Main_screen_S9>:



// Меню
void Main_screen_S9(void)
{
 8017b44:	b480      	push	{r7}
 8017b46:	af00      	add	r7, sp, #0
	if(screen=Main_screen)
 8017b48:	4b08      	ldr	r3, [pc, #32]	; (8017b6c <Main_screen_S9+0x28>)
 8017b4a:	2201      	movs	r2, #1
 8017b4c:	701a      	strb	r2, [r3, #0]
	{
		screen=Option_screen;
 8017b4e:	4b07      	ldr	r3, [pc, #28]	; (8017b6c <Main_screen_S9+0x28>)
 8017b50:	2204      	movs	r2, #4
 8017b52:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8017b54:	4b06      	ldr	r3, [pc, #24]	; (8017b70 <Main_screen_S9+0x2c>)
 8017b56:	22ff      	movs	r2, #255	; 0xff
 8017b58:	701a      	strb	r2, [r3, #0]
		Menu_num=0;
 8017b5a:	4b06      	ldr	r3, [pc, #24]	; (8017b74 <Main_screen_S9+0x30>)
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	701a      	strb	r2, [r3, #0]
	}
}
 8017b60:	bf00      	nop
 8017b62:	46bd      	mov	sp, r7
 8017b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b68:	4770      	bx	lr
 8017b6a:	bf00      	nop
 8017b6c:	2000004c 	.word	0x2000004c
 8017b70:	20000460 	.word	0x20000460
 8017b74:	20000461 	.word	0x20000461

08017b78 <Viewer_timer>:


// Таймер для частоты обновления экрана с показаниями
void Viewer_timer(void)
{
 8017b78:	b480      	push	{r7}
 8017b7a:	af00      	add	r7, sp, #0
	if(++view_tim==300){view=1;view_tim=0;}
 8017b7c:	4b0a      	ldr	r3, [pc, #40]	; (8017ba8 <Viewer_timer+0x30>)
 8017b7e:	881b      	ldrh	r3, [r3, #0]
 8017b80:	3301      	adds	r3, #1
 8017b82:	b29a      	uxth	r2, r3
 8017b84:	4b08      	ldr	r3, [pc, #32]	; (8017ba8 <Viewer_timer+0x30>)
 8017b86:	801a      	strh	r2, [r3, #0]
 8017b88:	4b07      	ldr	r3, [pc, #28]	; (8017ba8 <Viewer_timer+0x30>)
 8017b8a:	881b      	ldrh	r3, [r3, #0]
 8017b8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017b90:	d105      	bne.n	8017b9e <Viewer_timer+0x26>
 8017b92:	4b06      	ldr	r3, [pc, #24]	; (8017bac <Viewer_timer+0x34>)
 8017b94:	2201      	movs	r2, #1
 8017b96:	701a      	strb	r2, [r3, #0]
 8017b98:	4b03      	ldr	r3, [pc, #12]	; (8017ba8 <Viewer_timer+0x30>)
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	801a      	strh	r2, [r3, #0]
}
 8017b9e:	bf00      	nop
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba6:	4770      	bx	lr
 8017ba8:	20001d16 	.word	0x20001d16
 8017bac:	20001d18 	.word	0x20001d18

08017bb0 <Battery_process>:
const uint8_t eltara_icon[]={0,16,0,16, 0x3F, 0xFC, 0x40, 0x02, 0x80, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x86, 0x01, 0x86, 0x01, 0x87, 0x81, 0x87, 0x81, 0x86, 0x01, 0x86, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x80, 0x01, 0x40, 0x02, 0x3F, 0xFC};



void Battery_process(void)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*) &Vbat_uint,128);
 8017bb4:	2280      	movs	r2, #128	; 0x80
 8017bb6:	4904      	ldr	r1, [pc, #16]	; (8017bc8 <Battery_process+0x18>)
 8017bb8:	4804      	ldr	r0, [pc, #16]	; (8017bcc <Battery_process+0x1c>)
 8017bba:	f7f0 fbc7 	bl	800834c <HAL_ADC_Start_DMA>
	sleep(100);
 8017bbe:	2064      	movs	r0, #100	; 0x64
 8017bc0:	f7eb f85e 	bl	8002c80 <sleep>
}
 8017bc4:	bf00      	nop
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	20002280 	.word	0x20002280
 8017bcc:	20007bcc 	.word	0x20007bcc

08017bd0 <RTC_view>:



void RTC_view(void)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b086      	sub	sp, #24
 8017bd4:	af02      	add	r7, sp, #8
	uint8_t battery_percent, i;
	uint32_t bat_sum=0;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	60bb      	str	r3, [r7, #8]
	float battery_volt;

	// date & time
	u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017bda:	4967      	ldr	r1, [pc, #412]	; (8017d78 <RTC_view+0x1a8>)
 8017bdc:	4867      	ldr	r0, [pc, #412]	; (8017d7c <RTC_view+0x1ac>)
 8017bde:	f7fd ff51 	bl	8015a84 <u8g2_SetFont>
	sprintf(RAM,"%02d.%02d.%02d", day, month, year);
 8017be2:	4b67      	ldr	r3, [pc, #412]	; (8017d80 <RTC_view+0x1b0>)
 8017be4:	781b      	ldrb	r3, [r3, #0]
 8017be6:	461a      	mov	r2, r3
 8017be8:	4b66      	ldr	r3, [pc, #408]	; (8017d84 <RTC_view+0x1b4>)
 8017bea:	781b      	ldrb	r3, [r3, #0]
 8017bec:	4619      	mov	r1, r3
 8017bee:	4b66      	ldr	r3, [pc, #408]	; (8017d88 <RTC_view+0x1b8>)
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	9300      	str	r3, [sp, #0]
 8017bf4:	460b      	mov	r3, r1
 8017bf6:	4965      	ldr	r1, [pc, #404]	; (8017d8c <RTC_view+0x1bc>)
 8017bf8:	4865      	ldr	r0, [pc, #404]	; (8017d90 <RTC_view+0x1c0>)
 8017bfa:	f006 f959 	bl	801deb0 <siprintf>
	u8g2_DrawUTF8(&u8g2, 0, 12, RAM);
 8017bfe:	4b64      	ldr	r3, [pc, #400]	; (8017d90 <RTC_view+0x1c0>)
 8017c00:	220c      	movs	r2, #12
 8017c02:	2100      	movs	r1, #0
 8017c04:	485d      	ldr	r0, [pc, #372]	; (8017d7c <RTC_view+0x1ac>)
 8017c06:	f7fd fe9b 	bl	8015940 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:%02d:%02d", hour, minute, sec);
 8017c0a:	4b62      	ldr	r3, [pc, #392]	; (8017d94 <RTC_view+0x1c4>)
 8017c0c:	781b      	ldrb	r3, [r3, #0]
 8017c0e:	461a      	mov	r2, r3
 8017c10:	4b61      	ldr	r3, [pc, #388]	; (8017d98 <RTC_view+0x1c8>)
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	4619      	mov	r1, r3
 8017c16:	4b61      	ldr	r3, [pc, #388]	; (8017d9c <RTC_view+0x1cc>)
 8017c18:	781b      	ldrb	r3, [r3, #0]
 8017c1a:	9300      	str	r3, [sp, #0]
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	4960      	ldr	r1, [pc, #384]	; (8017da0 <RTC_view+0x1d0>)
 8017c20:	485b      	ldr	r0, [pc, #364]	; (8017d90 <RTC_view+0x1c0>)
 8017c22:	f006 f945 	bl	801deb0 <siprintf>
	u8g2_DrawUTF8(&u8g2, 81, 12, RAM);
 8017c26:	4b5a      	ldr	r3, [pc, #360]	; (8017d90 <RTC_view+0x1c0>)
 8017c28:	220c      	movs	r2, #12
 8017c2a:	2151      	movs	r1, #81	; 0x51
 8017c2c:	4853      	ldr	r0, [pc, #332]	; (8017d7c <RTC_view+0x1ac>)
 8017c2e:	f7fd fe87 	bl	8015940 <u8g2_DrawUTF8>

	// Tarring
	if(Pressure_zero!=0)DrawImage(tara_icon, 194, 2, 1);
 8017c32:	4b5c      	ldr	r3, [pc, #368]	; (8017da4 <RTC_view+0x1d4>)
 8017c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c38:	f04f 0200 	mov.w	r2, #0
 8017c3c:	f04f 0300 	mov.w	r3, #0
 8017c40:	f7e8 ff52 	bl	8000ae8 <__aeabi_dcmpeq>
 8017c44:	4603      	mov	r3, r0
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d105      	bne.n	8017c56 <RTC_view+0x86>
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	2202      	movs	r2, #2
 8017c4e:	21c2      	movs	r1, #194	; 0xc2
 8017c50:	4855      	ldr	r0, [pc, #340]	; (8017da8 <RTC_view+0x1d8>)
 8017c52:	f7ea fd21 	bl	8002698 <DrawImage>

	//El tarring
	switch(E_fun)
 8017c56:	4b55      	ldr	r3, [pc, #340]	; (8017dac <RTC_view+0x1dc>)
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d002      	beq.n	8017c64 <RTC_view+0x94>
 8017c5e:	2b01      	cmp	r3, #1
 8017c60:	d014      	beq.n	8017c8c <RTC_view+0xbc>
 8017c62:	e027      	b.n	8017cb4 <RTC_view+0xe4>
	{
		case mA: if(Current_zero!=0)DrawImage(eltara_icon, 176, 2, 1); break;
 8017c64:	4b52      	ldr	r3, [pc, #328]	; (8017db0 <RTC_view+0x1e0>)
 8017c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c6a:	f04f 0200 	mov.w	r2, #0
 8017c6e:	f04f 0300 	mov.w	r3, #0
 8017c72:	f7e8 ff39 	bl	8000ae8 <__aeabi_dcmpeq>
 8017c76:	4603      	mov	r3, r0
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d000      	beq.n	8017c7e <RTC_view+0xae>
 8017c7c:	e01a      	b.n	8017cb4 <RTC_view+0xe4>
 8017c7e:	2301      	movs	r3, #1
 8017c80:	2202      	movs	r2, #2
 8017c82:	21b0      	movs	r1, #176	; 0xb0
 8017c84:	484b      	ldr	r0, [pc, #300]	; (8017db4 <RTC_view+0x1e4>)
 8017c86:	f7ea fd07 	bl	8002698 <DrawImage>
 8017c8a:	e013      	b.n	8017cb4 <RTC_view+0xe4>
		case V: if(Voltage_zero!=0)DrawImage(eltara_icon, 176, 2, 1); break;
 8017c8c:	4b4a      	ldr	r3, [pc, #296]	; (8017db8 <RTC_view+0x1e8>)
 8017c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c92:	f04f 0200 	mov.w	r2, #0
 8017c96:	f04f 0300 	mov.w	r3, #0
 8017c9a:	f7e8 ff25 	bl	8000ae8 <__aeabi_dcmpeq>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d000      	beq.n	8017ca6 <RTC_view+0xd6>
 8017ca4:	e005      	b.n	8017cb2 <RTC_view+0xe2>
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	2202      	movs	r2, #2
 8017caa:	21b0      	movs	r1, #176	; 0xb0
 8017cac:	4841      	ldr	r0, [pc, #260]	; (8017db4 <RTC_view+0x1e4>)
 8017cae:	f7ea fcf3 	bl	8002698 <DrawImage>
 8017cb2:	bf00      	nop
	}

	// Battery
	for(i=0;i<128;i++)bat_sum+=Vbat_uint[i];
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	73fb      	strb	r3, [r7, #15]
 8017cb8:	e00a      	b.n	8017cd0 <RTC_view+0x100>
 8017cba:	7bfb      	ldrb	r3, [r7, #15]
 8017cbc:	4a3f      	ldr	r2, [pc, #252]	; (8017dbc <RTC_view+0x1ec>)
 8017cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017cc2:	461a      	mov	r2, r3
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	4413      	add	r3, r2
 8017cc8:	60bb      	str	r3, [r7, #8]
 8017cca:	7bfb      	ldrb	r3, [r7, #15]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	73fb      	strb	r3, [r7, #15]
 8017cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	daf0      	bge.n	8017cba <RTC_view+0xea>
	battery_volt = 0.0074258*(bat_sum>>7);
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	09db      	lsrs	r3, r3, #7
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7e8 fc21 	bl	8000524 <__aeabi_ui2d>
 8017ce2:	a321      	add	r3, pc, #132	; (adr r3, 8017d68 <RTC_view+0x198>)
 8017ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce8:	f7e8 fc96 	bl	8000618 <__aeabi_dmul>
 8017cec:	4602      	mov	r2, r0
 8017cee:	460b      	mov	r3, r1
 8017cf0:	4610      	mov	r0, r2
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	f7e8 ff88 	bl	8000c08 <__aeabi_d2f>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	607b      	str	r3, [r7, #4]
	DrawImage(bat_icon, 216, 4, 1);
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	2204      	movs	r2, #4
 8017d00:	21d8      	movs	r1, #216	; 0xd8
 8017d02:	482f      	ldr	r0, [pc, #188]	; (8017dc0 <RTC_view+0x1f0>)
 8017d04:	f7ea fcc8 	bl	8002698 <DrawImage>
	battery_percent = (uint8_t)((battery_volt-2.9)*100);
 8017d08:	6878      	ldr	r0, [r7, #4]
 8017d0a:	f7e8 fc2d 	bl	8000568 <__aeabi_f2d>
 8017d0e:	a318      	add	r3, pc, #96	; (adr r3, 8017d70 <RTC_view+0x1a0>)
 8017d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d14:	f7e8 fac8 	bl	80002a8 <__aeabi_dsub>
 8017d18:	4602      	mov	r2, r0
 8017d1a:	460b      	mov	r3, r1
 8017d1c:	4610      	mov	r0, r2
 8017d1e:	4619      	mov	r1, r3
 8017d20:	f04f 0200 	mov.w	r2, #0
 8017d24:	4b27      	ldr	r3, [pc, #156]	; (8017dc4 <RTC_view+0x1f4>)
 8017d26:	f7e8 fc77 	bl	8000618 <__aeabi_dmul>
 8017d2a:	4602      	mov	r2, r0
 8017d2c:	460b      	mov	r3, r1
 8017d2e:	4610      	mov	r0, r2
 8017d30:	4619      	mov	r1, r3
 8017d32:	f7e8 ff49 	bl	8000bc8 <__aeabi_d2uiz>
 8017d36:	4603      	mov	r3, r0
 8017d38:	70fb      	strb	r3, [r7, #3]

	u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8017d3a:	4923      	ldr	r1, [pc, #140]	; (8017dc8 <RTC_view+0x1f8>)
 8017d3c:	480f      	ldr	r0, [pc, #60]	; (8017d7c <RTC_view+0x1ac>)
 8017d3e:	f7fd fea1 	bl	8015a84 <u8g2_SetFont>
	sprintf(RAM,"%.2f", battery_volt);
 8017d42:	6878      	ldr	r0, [r7, #4]
 8017d44:	f7e8 fc10 	bl	8000568 <__aeabi_f2d>
 8017d48:	4602      	mov	r2, r0
 8017d4a:	460b      	mov	r3, r1
 8017d4c:	491f      	ldr	r1, [pc, #124]	; (8017dcc <RTC_view+0x1fc>)
 8017d4e:	4810      	ldr	r0, [pc, #64]	; (8017d90 <RTC_view+0x1c0>)
 8017d50:	f006 f8ae 	bl	801deb0 <siprintf>
	//sprintf(RAM,"%d", battery_percent);
	u8g2_DrawUTF8(&u8g2, 219, 13, RAM);
 8017d54:	4b0e      	ldr	r3, [pc, #56]	; (8017d90 <RTC_view+0x1c0>)
 8017d56:	220d      	movs	r2, #13
 8017d58:	21db      	movs	r1, #219	; 0xdb
 8017d5a:	4808      	ldr	r0, [pc, #32]	; (8017d7c <RTC_view+0x1ac>)
 8017d5c:	f7fd fdf0 	bl	8015940 <u8g2_DrawUTF8>
}
 8017d60:	bf00      	nop
 8017d62:	3710      	adds	r7, #16
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}
 8017d68:	02589fd4 	.word	0x02589fd4
 8017d6c:	3f7e6a84 	.word	0x3f7e6a84
 8017d70:	33333333 	.word	0x33333333
 8017d74:	40073333 	.word	0x40073333
 8017d78:	08025b84 	.word	0x08025b84
 8017d7c:	20002098 	.word	0x20002098
 8017d80:	20008850 	.word	0x20008850
 8017d84:	20008857 	.word	0x20008857
 8017d88:	20008858 	.word	0x20008858
 8017d8c:	0802250c 	.word	0x0802250c
 8017d90:	20002158 	.word	0x20002158
 8017d94:	20008853 	.word	0x20008853
 8017d98:	2000885a 	.word	0x2000885a
 8017d9c:	20008854 	.word	0x20008854
 8017da0:	0802251c 	.word	0x0802251c
 8017da4:	20000938 	.word	0x20000938
 8017da8:	0802b37c 	.word	0x0802b37c
 8017dac:	20000968 	.word	0x20000968
 8017db0:	20000948 	.word	0x20000948
 8017db4:	0802b3a0 	.word	0x0802b3a0
 8017db8:	20000940 	.word	0x20000940
 8017dbc:	20002280 	.word	0x20002280
 8017dc0:	0802b354 	.word	0x0802b354
 8017dc4:	40590000 	.word	0x40590000
 8017dc8:	08023f10 	.word	0x08023f10
 8017dcc:	0802252c 	.word	0x0802252c

08017dd0 <RTC_process>:


void RTC_process(void)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b086      	sub	sp, #24
 8017dd4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8017dd6:	1d3b      	adds	r3, r7, #4
 8017dd8:	2200      	movs	r2, #0
 8017dda:	601a      	str	r2, [r3, #0]
 8017ddc:	605a      	str	r2, [r3, #4]
 8017dde:	609a      	str	r2, [r3, #8]
 8017de0:	60da      	str	r2, [r3, #12]
 8017de2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017de4:	2300      	movs	r3, #0
 8017de6:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8017de8:	463b      	mov	r3, r7
 8017dea:	2200      	movs	r2, #0
 8017dec:	4619      	mov	r1, r3
 8017dee:	4811      	ldr	r0, [pc, #68]	; (8017e34 <RTC_process+0x64>)
 8017df0:	f7f5 fe0c 	bl	800da0c <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8017df4:	1d3b      	adds	r3, r7, #4
 8017df6:	2200      	movs	r2, #0
 8017df8:	4619      	mov	r1, r3
 8017dfa:	480e      	ldr	r0, [pc, #56]	; (8017e34 <RTC_process+0x64>)
 8017dfc:	f7f5 fd23 	bl	800d846 <HAL_RTC_GetTime>

	year=sDate.Year;
 8017e00:	78fa      	ldrb	r2, [r7, #3]
 8017e02:	4b0d      	ldr	r3, [pc, #52]	; (8017e38 <RTC_process+0x68>)
 8017e04:	701a      	strb	r2, [r3, #0]
	month=sDate.Month;
 8017e06:	787a      	ldrb	r2, [r7, #1]
 8017e08:	4b0c      	ldr	r3, [pc, #48]	; (8017e3c <RTC_process+0x6c>)
 8017e0a:	701a      	strb	r2, [r3, #0]
	day=sDate.Date;
 8017e0c:	78ba      	ldrb	r2, [r7, #2]
 8017e0e:	4b0c      	ldr	r3, [pc, #48]	; (8017e40 <RTC_process+0x70>)
 8017e10:	701a      	strb	r2, [r3, #0]
	hour=sTime.Hours;
 8017e12:	793a      	ldrb	r2, [r7, #4]
 8017e14:	4b0b      	ldr	r3, [pc, #44]	; (8017e44 <RTC_process+0x74>)
 8017e16:	701a      	strb	r2, [r3, #0]
	minute=sTime.Minutes;
 8017e18:	797a      	ldrb	r2, [r7, #5]
 8017e1a:	4b0b      	ldr	r3, [pc, #44]	; (8017e48 <RTC_process+0x78>)
 8017e1c:	701a      	strb	r2, [r3, #0]
	sec=sTime.Seconds;
 8017e1e:	79ba      	ldrb	r2, [r7, #6]
 8017e20:	4b0a      	ldr	r3, [pc, #40]	; (8017e4c <RTC_process+0x7c>)
 8017e22:	701a      	strb	r2, [r3, #0]

	sleep(1000);
 8017e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017e28:	f7ea ff2a 	bl	8002c80 <sleep>
}
 8017e2c:	bf00      	nop
 8017e2e:	3718      	adds	r7, #24
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}
 8017e34:	20007950 	.word	0x20007950
 8017e38:	20008858 	.word	0x20008858
 8017e3c:	20008857 	.word	0x20008857
 8017e40:	20008850 	.word	0x20008850
 8017e44:	20008853 	.word	0x20008853
 8017e48:	2000885a 	.word	0x2000885a
 8017e4c:	20008854 	.word	0x20008854

08017e50 <RTC_set>:


void RTC_set(uint8_t rtc_year, uint8_t rtc_month, uint8_t rtc_day, uint8_t rtc_hour, uint8_t rtc_min, uint8_t rtc_sec)
{
 8017e50:	b590      	push	{r4, r7, lr}
 8017e52:	b089      	sub	sp, #36	; 0x24
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	4604      	mov	r4, r0
 8017e58:	4608      	mov	r0, r1
 8017e5a:	4611      	mov	r1, r2
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	4623      	mov	r3, r4
 8017e60:	71fb      	strb	r3, [r7, #7]
 8017e62:	4603      	mov	r3, r0
 8017e64:	71bb      	strb	r3, [r7, #6]
 8017e66:	460b      	mov	r3, r1
 8017e68:	717b      	strb	r3, [r7, #5]
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8017e6e:	f107 030c 	add.w	r3, r7, #12
 8017e72:	2200      	movs	r2, #0
 8017e74:	601a      	str	r2, [r3, #0]
 8017e76:	605a      	str	r2, [r3, #4]
 8017e78:	609a      	str	r2, [r3, #8]
 8017e7a:	60da      	str	r2, [r3, #12]
 8017e7c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017e7e:	2300      	movs	r3, #0
 8017e80:	60bb      	str	r3, [r7, #8]
	HAL_RTC_DeInit(&hrtc);
 8017e82:	482b      	ldr	r0, [pc, #172]	; (8017f30 <RTC_set+0xe0>)
 8017e84:	f7f5 fbce 	bl	800d624 <HAL_RTC_DeInit>


	hrtc.Instance = RTC;
 8017e88:	4b29      	ldr	r3, [pc, #164]	; (8017f30 <RTC_set+0xe0>)
 8017e8a:	4a2a      	ldr	r2, [pc, #168]	; (8017f34 <RTC_set+0xe4>)
 8017e8c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8017e8e:	4b28      	ldr	r3, [pc, #160]	; (8017f30 <RTC_set+0xe0>)
 8017e90:	2200      	movs	r2, #0
 8017e92:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8017e94:	4b26      	ldr	r3, [pc, #152]	; (8017f30 <RTC_set+0xe0>)
 8017e96:	227f      	movs	r2, #127	; 0x7f
 8017e98:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8017e9a:	4b25      	ldr	r3, [pc, #148]	; (8017f30 <RTC_set+0xe0>)
 8017e9c:	22ff      	movs	r2, #255	; 0xff
 8017e9e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8017ea0:	4b23      	ldr	r3, [pc, #140]	; (8017f30 <RTC_set+0xe0>)
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8017ea6:	4b22      	ldr	r3, [pc, #136]	; (8017f30 <RTC_set+0xe0>)
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8017eac:	4b20      	ldr	r3, [pc, #128]	; (8017f30 <RTC_set+0xe0>)
 8017eae:	2200      	movs	r2, #0
 8017eb0:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8017eb2:	4b1f      	ldr	r3, [pc, #124]	; (8017f30 <RTC_set+0xe0>)
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8017eb8:	481d      	ldr	r0, [pc, #116]	; (8017f30 <RTC_set+0xe0>)
 8017eba:	f7f5 fb37 	bl	800d52c <HAL_RTC_Init>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d001      	beq.n	8017ec8 <RTC_set+0x78>
	{
	Error_Handler();
 8017ec4:	f7ee fc5a 	bl	800677c <Error_Handler>
	}


	sTime.Hours = rtc_hour;
 8017ec8:	793b      	ldrb	r3, [r7, #4]
 8017eca:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtc_min;
 8017ecc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017ed0:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtc_sec;
 8017ed2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017ed6:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017ed8:	2300      	movs	r3, #0
 8017eda:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017edc:	2300      	movs	r3, #0
 8017ede:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8017ee0:	f107 030c 	add.w	r3, r7, #12
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	4619      	mov	r1, r3
 8017ee8:	4811      	ldr	r0, [pc, #68]	; (8017f30 <RTC_set+0xe0>)
 8017eea:	f7f5 fc0f 	bl	800d70c <HAL_RTC_SetTime>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d001      	beq.n	8017ef8 <RTC_set+0xa8>
	{
		Error_Handler();
 8017ef4:	f7ee fc42 	bl	800677c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017ef8:	2301      	movs	r3, #1
 8017efa:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtc_month;
 8017efc:	79bb      	ldrb	r3, [r7, #6]
 8017efe:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtc_day;
 8017f00:	797b      	ldrb	r3, [r7, #5]
 8017f02:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtc_year;
 8017f04:	79fb      	ldrb	r3, [r7, #7]
 8017f06:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8017f08:	f107 0308 	add.w	r3, r7, #8
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	4619      	mov	r1, r3
 8017f10:	4807      	ldr	r0, [pc, #28]	; (8017f30 <RTC_set+0xe0>)
 8017f12:	f7f5 fcf4 	bl	800d8fe <HAL_RTC_SetDate>
 8017f16:	4603      	mov	r3, r0
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d001      	beq.n	8017f20 <RTC_set+0xd0>
	{
		Error_Handler();
 8017f1c:	f7ee fc2e 	bl	800677c <Error_Handler>
	}

	HAL_RTCEx_EnableBypassShadow(&hrtc);
 8017f20:	4803      	ldr	r0, [pc, #12]	; (8017f30 <RTC_set+0xe0>)
 8017f22:	f7f5 fe91 	bl	800dc48 <HAL_RTCEx_EnableBypassShadow>
}
 8017f26:	bf00      	nop
 8017f28:	3724      	adds	r7, #36	; 0x24
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd90      	pop	{r4, r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	20007950 	.word	0x20007950
 8017f34:	40002800 	.word	0x40002800

08017f38 <RTC_screen_func>:


void RTC_screen_func(void)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b082      	sub	sp, #8
 8017f3c:	af02      	add	r7, sp, #8
	if(old_active_string==0xFF)
 8017f3e:	4b4d      	ldr	r3, [pc, #308]	; (8018074 <RTC_screen_func+0x13c>)
 8017f40:	781b      	ldrb	r3, [r3, #0]
 8017f42:	2bff      	cmp	r3, #255	; 0xff
 8017f44:	d11a      	bne.n	8017f7c <RTC_screen_func+0x44>
	{
		old_active_string=0;
 8017f46:	4b4b      	ldr	r3, [pc, #300]	; (8018074 <RTC_screen_func+0x13c>)
 8017f48:	2200      	movs	r2, #0
 8017f4a:	701a      	strb	r2, [r3, #0]
		year_temp=year;
 8017f4c:	4b4a      	ldr	r3, [pc, #296]	; (8018078 <RTC_screen_func+0x140>)
 8017f4e:	781a      	ldrb	r2, [r3, #0]
 8017f50:	4b4a      	ldr	r3, [pc, #296]	; (801807c <RTC_screen_func+0x144>)
 8017f52:	701a      	strb	r2, [r3, #0]
		month_temp=month;
 8017f54:	4b4a      	ldr	r3, [pc, #296]	; (8018080 <RTC_screen_func+0x148>)
 8017f56:	781a      	ldrb	r2, [r3, #0]
 8017f58:	4b4a      	ldr	r3, [pc, #296]	; (8018084 <RTC_screen_func+0x14c>)
 8017f5a:	701a      	strb	r2, [r3, #0]
		day_temp=day;
 8017f5c:	4b4a      	ldr	r3, [pc, #296]	; (8018088 <RTC_screen_func+0x150>)
 8017f5e:	781a      	ldrb	r2, [r3, #0]
 8017f60:	4b4a      	ldr	r3, [pc, #296]	; (801808c <RTC_screen_func+0x154>)
 8017f62:	701a      	strb	r2, [r3, #0]
		hour_temp=hour;
 8017f64:	4b4a      	ldr	r3, [pc, #296]	; (8018090 <RTC_screen_func+0x158>)
 8017f66:	781a      	ldrb	r2, [r3, #0]
 8017f68:	4b4a      	ldr	r3, [pc, #296]	; (8018094 <RTC_screen_func+0x15c>)
 8017f6a:	701a      	strb	r2, [r3, #0]
		minute_temp=minute;
 8017f6c:	4b4a      	ldr	r3, [pc, #296]	; (8018098 <RTC_screen_func+0x160>)
 8017f6e:	781a      	ldrb	r2, [r3, #0]
 8017f70:	4b4a      	ldr	r3, [pc, #296]	; (801809c <RTC_screen_func+0x164>)
 8017f72:	701a      	strb	r2, [r3, #0]
		sec_temp=sec;
 8017f74:	4b4a      	ldr	r3, [pc, #296]	; (80180a0 <RTC_screen_func+0x168>)
 8017f76:	781a      	ldrb	r2, [r3, #0]
 8017f78:	4b4a      	ldr	r3, [pc, #296]	; (80180a4 <RTC_screen_func+0x16c>)
 8017f7a:	701a      	strb	r2, [r3, #0]
	}

	// date time
	RTC_view();
 8017f7c:	f7ff fe28 	bl	8017bd0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017f80:	4949      	ldr	r1, [pc, #292]	; (80180a8 <RTC_screen_func+0x170>)
 8017f82:	484a      	ldr	r0, [pc, #296]	; (80180ac <RTC_screen_func+0x174>)
 8017f84:	f7fd fd7e 	bl	8015a84 <u8g2_SetFont>

	// Date
	u8g2_DrawUTF8(&u8g2, 20, 50, "Дата:");
 8017f88:	4b49      	ldr	r3, [pc, #292]	; (80180b0 <RTC_screen_func+0x178>)
 8017f8a:	2232      	movs	r2, #50	; 0x32
 8017f8c:	2114      	movs	r1, #20
 8017f8e:	4847      	ldr	r0, [pc, #284]	; (80180ac <RTC_screen_func+0x174>)
 8017f90:	f7fd fcd6 	bl	8015940 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d.", day_temp);
 8017f94:	4b3d      	ldr	r3, [pc, #244]	; (801808c <RTC_screen_func+0x154>)
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	461a      	mov	r2, r3
 8017f9a:	4946      	ldr	r1, [pc, #280]	; (80180b4 <RTC_screen_func+0x17c>)
 8017f9c:	4846      	ldr	r0, [pc, #280]	; (80180b8 <RTC_screen_func+0x180>)
 8017f9e:	f005 ff87 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(120, 50, RAM, edit_param, 0);
 8017fa2:	4b46      	ldr	r3, [pc, #280]	; (80180bc <RTC_screen_func+0x184>)
 8017fa4:	781b      	ldrb	r3, [r3, #0]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	9200      	str	r2, [sp, #0]
 8017faa:	4a43      	ldr	r2, [pc, #268]	; (80180b8 <RTC_screen_func+0x180>)
 8017fac:	2132      	movs	r1, #50	; 0x32
 8017fae:	2078      	movs	r0, #120	; 0x78
 8017fb0:	f7ea fd02 	bl	80029b8 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d.", month_temp);
 8017fb4:	4b33      	ldr	r3, [pc, #204]	; (8018084 <RTC_screen_func+0x14c>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	461a      	mov	r2, r3
 8017fba:	493e      	ldr	r1, [pc, #248]	; (80180b4 <RTC_screen_func+0x17c>)
 8017fbc:	483e      	ldr	r0, [pc, #248]	; (80180b8 <RTC_screen_func+0x180>)
 8017fbe:	f005 ff77 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(150, 50, RAM, edit_param, 1);
 8017fc2:	4b3e      	ldr	r3, [pc, #248]	; (80180bc <RTC_screen_func+0x184>)
 8017fc4:	781b      	ldrb	r3, [r3, #0]
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	9200      	str	r2, [sp, #0]
 8017fca:	4a3b      	ldr	r2, [pc, #236]	; (80180b8 <RTC_screen_func+0x180>)
 8017fcc:	2132      	movs	r1, #50	; 0x32
 8017fce:	2096      	movs	r0, #150	; 0x96
 8017fd0:	f7ea fcf2 	bl	80029b8 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", year_temp);
 8017fd4:	4b29      	ldr	r3, [pc, #164]	; (801807c <RTC_screen_func+0x144>)
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	461a      	mov	r2, r3
 8017fda:	4939      	ldr	r1, [pc, #228]	; (80180c0 <RTC_screen_func+0x188>)
 8017fdc:	4836      	ldr	r0, [pc, #216]	; (80180b8 <RTC_screen_func+0x180>)
 8017fde:	f005 ff67 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(180, 50, RAM, edit_param, 2);
 8017fe2:	4b36      	ldr	r3, [pc, #216]	; (80180bc <RTC_screen_func+0x184>)
 8017fe4:	781b      	ldrb	r3, [r3, #0]
 8017fe6:	2202      	movs	r2, #2
 8017fe8:	9200      	str	r2, [sp, #0]
 8017fea:	4a33      	ldr	r2, [pc, #204]	; (80180b8 <RTC_screen_func+0x180>)
 8017fec:	2132      	movs	r1, #50	; 0x32
 8017fee:	20b4      	movs	r0, #180	; 0xb4
 8017ff0:	f7ea fce2 	bl	80029b8 <Blink_Edit_Parameter>


	// Date
	u8g2_DrawUTF8(&u8g2, 20, 70, "Время:");
 8017ff4:	4b33      	ldr	r3, [pc, #204]	; (80180c4 <RTC_screen_func+0x18c>)
 8017ff6:	2246      	movs	r2, #70	; 0x46
 8017ff8:	2114      	movs	r1, #20
 8017ffa:	482c      	ldr	r0, [pc, #176]	; (80180ac <RTC_screen_func+0x174>)
 8017ffc:	f7fd fca0 	bl	8015940 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:", hour_temp);
 8018000:	4b24      	ldr	r3, [pc, #144]	; (8018094 <RTC_screen_func+0x15c>)
 8018002:	781b      	ldrb	r3, [r3, #0]
 8018004:	461a      	mov	r2, r3
 8018006:	4930      	ldr	r1, [pc, #192]	; (80180c8 <RTC_screen_func+0x190>)
 8018008:	482b      	ldr	r0, [pc, #172]	; (80180b8 <RTC_screen_func+0x180>)
 801800a:	f005 ff51 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(120, 70, RAM, edit_param, 3);
 801800e:	4b2b      	ldr	r3, [pc, #172]	; (80180bc <RTC_screen_func+0x184>)
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	2203      	movs	r2, #3
 8018014:	9200      	str	r2, [sp, #0]
 8018016:	4a28      	ldr	r2, [pc, #160]	; (80180b8 <RTC_screen_func+0x180>)
 8018018:	2146      	movs	r1, #70	; 0x46
 801801a:	2078      	movs	r0, #120	; 0x78
 801801c:	f7ea fccc 	bl	80029b8 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d:", minute_temp);
 8018020:	4b1e      	ldr	r3, [pc, #120]	; (801809c <RTC_screen_func+0x164>)
 8018022:	781b      	ldrb	r3, [r3, #0]
 8018024:	461a      	mov	r2, r3
 8018026:	4928      	ldr	r1, [pc, #160]	; (80180c8 <RTC_screen_func+0x190>)
 8018028:	4823      	ldr	r0, [pc, #140]	; (80180b8 <RTC_screen_func+0x180>)
 801802a:	f005 ff41 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(150, 70, RAM, edit_param, 4);
 801802e:	4b23      	ldr	r3, [pc, #140]	; (80180bc <RTC_screen_func+0x184>)
 8018030:	781b      	ldrb	r3, [r3, #0]
 8018032:	2204      	movs	r2, #4
 8018034:	9200      	str	r2, [sp, #0]
 8018036:	4a20      	ldr	r2, [pc, #128]	; (80180b8 <RTC_screen_func+0x180>)
 8018038:	2146      	movs	r1, #70	; 0x46
 801803a:	2096      	movs	r0, #150	; 0x96
 801803c:	f7ea fcbc 	bl	80029b8 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", sec_temp);
 8018040:	4b18      	ldr	r3, [pc, #96]	; (80180a4 <RTC_screen_func+0x16c>)
 8018042:	781b      	ldrb	r3, [r3, #0]
 8018044:	461a      	mov	r2, r3
 8018046:	491e      	ldr	r1, [pc, #120]	; (80180c0 <RTC_screen_func+0x188>)
 8018048:	481b      	ldr	r0, [pc, #108]	; (80180b8 <RTC_screen_func+0x180>)
 801804a:	f005 ff31 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(180, 70, RAM, edit_param, 5);
 801804e:	4b1b      	ldr	r3, [pc, #108]	; (80180bc <RTC_screen_func+0x184>)
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	2205      	movs	r2, #5
 8018054:	9200      	str	r2, [sp, #0]
 8018056:	4a18      	ldr	r2, [pc, #96]	; (80180b8 <RTC_screen_func+0x180>)
 8018058:	2146      	movs	r1, #70	; 0x46
 801805a:	20b4      	movs	r0, #180	; 0xb4
 801805c:	f7ea fcac 	bl	80029b8 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8018060:	4812      	ldr	r0, [pc, #72]	; (80180ac <RTC_screen_func+0x174>)
 8018062:	f7fc fed2 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018066:	4811      	ldr	r0, [pc, #68]	; (80180ac <RTC_screen_func+0x174>)
 8018068:	f7fc fe5c 	bl	8014d24 <u8g2_ClearBuffer>
}
 801806c:	bf00      	nop
 801806e:	46bd      	mov	sp, r7
 8018070:	bd80      	pop	{r7, pc}
 8018072:	bf00      	nop
 8018074:	20000460 	.word	0x20000460
 8018078:	20008858 	.word	0x20008858
 801807c:	20008859 	.word	0x20008859
 8018080:	20008857 	.word	0x20008857
 8018084:	20008855 	.word	0x20008855
 8018088:	20008850 	.word	0x20008850
 801808c:	20008852 	.word	0x20008852
 8018090:	20008853 	.word	0x20008853
 8018094:	2000885b 	.word	0x2000885b
 8018098:	2000885a 	.word	0x2000885a
 801809c:	20008851 	.word	0x20008851
 80180a0:	20008854 	.word	0x20008854
 80180a4:	20008856 	.word	0x20008856
 80180a8:	080271b0 	.word	0x080271b0
 80180ac:	20002098 	.word	0x20002098
 80180b0:	08022534 	.word	0x08022534
 80180b4:	08022540 	.word	0x08022540
 80180b8:	20002158 	.word	0x20002158
 80180bc:	2000091c 	.word	0x2000091c
 80180c0:	08022548 	.word	0x08022548
 80180c4:	08022550 	.word	0x08022550
 80180c8:	0802255c 	.word	0x0802255c

080180cc <RTC_screen_S9>:



// MENU
void RTC_screen_S9(void)
{
 80180cc:	b480      	push	{r7}
 80180ce:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 80180d0:	4b06      	ldr	r3, [pc, #24]	; (80180ec <RTC_screen_S9+0x20>)
 80180d2:	2208      	movs	r2, #8
 80180d4:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80180d6:	4b06      	ldr	r3, [pc, #24]	; (80180f0 <RTC_screen_S9+0x24>)
 80180d8:	22ff      	movs	r2, #255	; 0xff
 80180da:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 80180dc:	4b05      	ldr	r3, [pc, #20]	; (80180f4 <RTC_screen_S9+0x28>)
 80180de:	2202      	movs	r2, #2
 80180e0:	701a      	strb	r2, [r3, #0]
}
 80180e2:	bf00      	nop
 80180e4:	46bd      	mov	sp, r7
 80180e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ea:	4770      	bx	lr
 80180ec:	2000004c 	.word	0x2000004c
 80180f0:	20000460 	.word	0x20000460
 80180f4:	20000461 	.word	0x20000461

080180f8 <RTC_screen_S5>:

// DOWN
void RTC_screen_S5(void)
{
 80180f8:	b480      	push	{r7}
 80180fa:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80180fc:	4b07      	ldr	r3, [pc, #28]	; (801811c <RTC_screen_S5+0x24>)
 80180fe:	781b      	ldrb	r3, [r3, #0]
 8018100:	2b04      	cmp	r3, #4
 8018102:	d805      	bhi.n	8018110 <RTC_screen_S5+0x18>
 8018104:	4b05      	ldr	r3, [pc, #20]	; (801811c <RTC_screen_S5+0x24>)
 8018106:	781b      	ldrb	r3, [r3, #0]
 8018108:	3301      	adds	r3, #1
 801810a:	b2da      	uxtb	r2, r3
 801810c:	4b03      	ldr	r3, [pc, #12]	; (801811c <RTC_screen_S5+0x24>)
 801810e:	701a      	strb	r2, [r3, #0]
}
 8018110:	bf00      	nop
 8018112:	46bd      	mov	sp, r7
 8018114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018118:	4770      	bx	lr
 801811a:	bf00      	nop
 801811c:	2000091c 	.word	0x2000091c

08018120 <RTC_screen_S8>:

// UP
void RTC_screen_S8(void)
{
 8018120:	b480      	push	{r7}
 8018122:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8018124:	4b07      	ldr	r3, [pc, #28]	; (8018144 <RTC_screen_S8+0x24>)
 8018126:	781b      	ldrb	r3, [r3, #0]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d005      	beq.n	8018138 <RTC_screen_S8+0x18>
 801812c:	4b05      	ldr	r3, [pc, #20]	; (8018144 <RTC_screen_S8+0x24>)
 801812e:	781b      	ldrb	r3, [r3, #0]
 8018130:	3b01      	subs	r3, #1
 8018132:	b2da      	uxtb	r2, r3
 8018134:	4b03      	ldr	r3, [pc, #12]	; (8018144 <RTC_screen_S8+0x24>)
 8018136:	701a      	strb	r2, [r3, #0]
}
 8018138:	bf00      	nop
 801813a:	46bd      	mov	sp, r7
 801813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018140:	4770      	bx	lr
 8018142:	bf00      	nop
 8018144:	2000091c 	.word	0x2000091c

08018148 <RTC_screen_S6>:



// BACKWARD
void RTC_screen_S6(void)
{
 8018148:	b480      	push	{r7}
 801814a:	af00      	add	r7, sp, #0
	switch(edit_param)
 801814c:	4b32      	ldr	r3, [pc, #200]	; (8018218 <RTC_screen_S6+0xd0>)
 801814e:	781b      	ldrb	r3, [r3, #0]
 8018150:	2b05      	cmp	r3, #5
 8018152:	d85c      	bhi.n	801820e <RTC_screen_S6+0xc6>
 8018154:	a201      	add	r2, pc, #4	; (adr r2, 801815c <RTC_screen_S6+0x14>)
 8018156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801815a:	bf00      	nop
 801815c:	08018175 	.word	0x08018175
 8018160:	0801818b 	.word	0x0801818b
 8018164:	080181a1 	.word	0x080181a1
 8018168:	080181b7 	.word	0x080181b7
 801816c:	080181cd 	.word	0x080181cd
 8018170:	080181e3 	.word	0x080181e3
	{
		case 0: if(day_temp>0)day_temp--; break;
 8018174:	4b29      	ldr	r3, [pc, #164]	; (801821c <RTC_screen_S6+0xd4>)
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d03d      	beq.n	80181f8 <RTC_screen_S6+0xb0>
 801817c:	4b27      	ldr	r3, [pc, #156]	; (801821c <RTC_screen_S6+0xd4>)
 801817e:	781b      	ldrb	r3, [r3, #0]
 8018180:	3b01      	subs	r3, #1
 8018182:	b2da      	uxtb	r2, r3
 8018184:	4b25      	ldr	r3, [pc, #148]	; (801821c <RTC_screen_S6+0xd4>)
 8018186:	701a      	strb	r2, [r3, #0]
 8018188:	e036      	b.n	80181f8 <RTC_screen_S6+0xb0>
		case 1: if(month_temp>0)month_temp--; break;
 801818a:	4b25      	ldr	r3, [pc, #148]	; (8018220 <RTC_screen_S6+0xd8>)
 801818c:	781b      	ldrb	r3, [r3, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d034      	beq.n	80181fc <RTC_screen_S6+0xb4>
 8018192:	4b23      	ldr	r3, [pc, #140]	; (8018220 <RTC_screen_S6+0xd8>)
 8018194:	781b      	ldrb	r3, [r3, #0]
 8018196:	3b01      	subs	r3, #1
 8018198:	b2da      	uxtb	r2, r3
 801819a:	4b21      	ldr	r3, [pc, #132]	; (8018220 <RTC_screen_S6+0xd8>)
 801819c:	701a      	strb	r2, [r3, #0]
 801819e:	e02d      	b.n	80181fc <RTC_screen_S6+0xb4>
		case 2: if(year_temp>0)year_temp--; break;
 80181a0:	4b20      	ldr	r3, [pc, #128]	; (8018224 <RTC_screen_S6+0xdc>)
 80181a2:	781b      	ldrb	r3, [r3, #0]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d02b      	beq.n	8018200 <RTC_screen_S6+0xb8>
 80181a8:	4b1e      	ldr	r3, [pc, #120]	; (8018224 <RTC_screen_S6+0xdc>)
 80181aa:	781b      	ldrb	r3, [r3, #0]
 80181ac:	3b01      	subs	r3, #1
 80181ae:	b2da      	uxtb	r2, r3
 80181b0:	4b1c      	ldr	r3, [pc, #112]	; (8018224 <RTC_screen_S6+0xdc>)
 80181b2:	701a      	strb	r2, [r3, #0]
 80181b4:	e024      	b.n	8018200 <RTC_screen_S6+0xb8>
		case 3: if(hour_temp>0)hour_temp--; break;
 80181b6:	4b1c      	ldr	r3, [pc, #112]	; (8018228 <RTC_screen_S6+0xe0>)
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d022      	beq.n	8018204 <RTC_screen_S6+0xbc>
 80181be:	4b1a      	ldr	r3, [pc, #104]	; (8018228 <RTC_screen_S6+0xe0>)
 80181c0:	781b      	ldrb	r3, [r3, #0]
 80181c2:	3b01      	subs	r3, #1
 80181c4:	b2da      	uxtb	r2, r3
 80181c6:	4b18      	ldr	r3, [pc, #96]	; (8018228 <RTC_screen_S6+0xe0>)
 80181c8:	701a      	strb	r2, [r3, #0]
 80181ca:	e01b      	b.n	8018204 <RTC_screen_S6+0xbc>
		case 4: if(minute_temp>0)minute_temp--; break;
 80181cc:	4b17      	ldr	r3, [pc, #92]	; (801822c <RTC_screen_S6+0xe4>)
 80181ce:	781b      	ldrb	r3, [r3, #0]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d019      	beq.n	8018208 <RTC_screen_S6+0xc0>
 80181d4:	4b15      	ldr	r3, [pc, #84]	; (801822c <RTC_screen_S6+0xe4>)
 80181d6:	781b      	ldrb	r3, [r3, #0]
 80181d8:	3b01      	subs	r3, #1
 80181da:	b2da      	uxtb	r2, r3
 80181dc:	4b13      	ldr	r3, [pc, #76]	; (801822c <RTC_screen_S6+0xe4>)
 80181de:	701a      	strb	r2, [r3, #0]
 80181e0:	e012      	b.n	8018208 <RTC_screen_S6+0xc0>
		case 5: if(sec_temp>0)sec_temp--; break;
 80181e2:	4b13      	ldr	r3, [pc, #76]	; (8018230 <RTC_screen_S6+0xe8>)
 80181e4:	781b      	ldrb	r3, [r3, #0]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d010      	beq.n	801820c <RTC_screen_S6+0xc4>
 80181ea:	4b11      	ldr	r3, [pc, #68]	; (8018230 <RTC_screen_S6+0xe8>)
 80181ec:	781b      	ldrb	r3, [r3, #0]
 80181ee:	3b01      	subs	r3, #1
 80181f0:	b2da      	uxtb	r2, r3
 80181f2:	4b0f      	ldr	r3, [pc, #60]	; (8018230 <RTC_screen_S6+0xe8>)
 80181f4:	701a      	strb	r2, [r3, #0]
 80181f6:	e009      	b.n	801820c <RTC_screen_S6+0xc4>
		case 0: if(day_temp>0)day_temp--; break;
 80181f8:	bf00      	nop
 80181fa:	e008      	b.n	801820e <RTC_screen_S6+0xc6>
		case 1: if(month_temp>0)month_temp--; break;
 80181fc:	bf00      	nop
 80181fe:	e006      	b.n	801820e <RTC_screen_S6+0xc6>
		case 2: if(year_temp>0)year_temp--; break;
 8018200:	bf00      	nop
 8018202:	e004      	b.n	801820e <RTC_screen_S6+0xc6>
		case 3: if(hour_temp>0)hour_temp--; break;
 8018204:	bf00      	nop
 8018206:	e002      	b.n	801820e <RTC_screen_S6+0xc6>
		case 4: if(minute_temp>0)minute_temp--; break;
 8018208:	bf00      	nop
 801820a:	e000      	b.n	801820e <RTC_screen_S6+0xc6>
		case 5: if(sec_temp>0)sec_temp--; break;
 801820c:	bf00      	nop
	}
}
 801820e:	bf00      	nop
 8018210:	46bd      	mov	sp, r7
 8018212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018216:	4770      	bx	lr
 8018218:	2000091c 	.word	0x2000091c
 801821c:	20008852 	.word	0x20008852
 8018220:	20008855 	.word	0x20008855
 8018224:	20008859 	.word	0x20008859
 8018228:	2000885b 	.word	0x2000885b
 801822c:	20008851 	.word	0x20008851
 8018230:	20008856 	.word	0x20008856

08018234 <RTC_screen_S7>:

// FORWARD
void RTC_screen_S7(void)
{
 8018234:	b480      	push	{r7}
 8018236:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018238:	4b32      	ldr	r3, [pc, #200]	; (8018304 <RTC_screen_S7+0xd0>)
 801823a:	781b      	ldrb	r3, [r3, #0]
 801823c:	2b05      	cmp	r3, #5
 801823e:	d85c      	bhi.n	80182fa <RTC_screen_S7+0xc6>
 8018240:	a201      	add	r2, pc, #4	; (adr r2, 8018248 <RTC_screen_S7+0x14>)
 8018242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018246:	bf00      	nop
 8018248:	08018261 	.word	0x08018261
 801824c:	08018277 	.word	0x08018277
 8018250:	0801828d 	.word	0x0801828d
 8018254:	080182a3 	.word	0x080182a3
 8018258:	080182b9 	.word	0x080182b9
 801825c:	080182cf 	.word	0x080182cf
	{
		case 0: if(day_temp<31)day_temp++; break;
 8018260:	4b29      	ldr	r3, [pc, #164]	; (8018308 <RTC_screen_S7+0xd4>)
 8018262:	781b      	ldrb	r3, [r3, #0]
 8018264:	2b1e      	cmp	r3, #30
 8018266:	d83d      	bhi.n	80182e4 <RTC_screen_S7+0xb0>
 8018268:	4b27      	ldr	r3, [pc, #156]	; (8018308 <RTC_screen_S7+0xd4>)
 801826a:	781b      	ldrb	r3, [r3, #0]
 801826c:	3301      	adds	r3, #1
 801826e:	b2da      	uxtb	r2, r3
 8018270:	4b25      	ldr	r3, [pc, #148]	; (8018308 <RTC_screen_S7+0xd4>)
 8018272:	701a      	strb	r2, [r3, #0]
 8018274:	e036      	b.n	80182e4 <RTC_screen_S7+0xb0>
		case 1: if(month_temp<12)month_temp++; break;
 8018276:	4b25      	ldr	r3, [pc, #148]	; (801830c <RTC_screen_S7+0xd8>)
 8018278:	781b      	ldrb	r3, [r3, #0]
 801827a:	2b0b      	cmp	r3, #11
 801827c:	d834      	bhi.n	80182e8 <RTC_screen_S7+0xb4>
 801827e:	4b23      	ldr	r3, [pc, #140]	; (801830c <RTC_screen_S7+0xd8>)
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	3301      	adds	r3, #1
 8018284:	b2da      	uxtb	r2, r3
 8018286:	4b21      	ldr	r3, [pc, #132]	; (801830c <RTC_screen_S7+0xd8>)
 8018288:	701a      	strb	r2, [r3, #0]
 801828a:	e02d      	b.n	80182e8 <RTC_screen_S7+0xb4>
		case 2: if(year_temp<60)year_temp++; break;
 801828c:	4b20      	ldr	r3, [pc, #128]	; (8018310 <RTC_screen_S7+0xdc>)
 801828e:	781b      	ldrb	r3, [r3, #0]
 8018290:	2b3b      	cmp	r3, #59	; 0x3b
 8018292:	d82b      	bhi.n	80182ec <RTC_screen_S7+0xb8>
 8018294:	4b1e      	ldr	r3, [pc, #120]	; (8018310 <RTC_screen_S7+0xdc>)
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	3301      	adds	r3, #1
 801829a:	b2da      	uxtb	r2, r3
 801829c:	4b1c      	ldr	r3, [pc, #112]	; (8018310 <RTC_screen_S7+0xdc>)
 801829e:	701a      	strb	r2, [r3, #0]
 80182a0:	e024      	b.n	80182ec <RTC_screen_S7+0xb8>
		case 3: if(hour_temp<24)hour_temp++; break;
 80182a2:	4b1c      	ldr	r3, [pc, #112]	; (8018314 <RTC_screen_S7+0xe0>)
 80182a4:	781b      	ldrb	r3, [r3, #0]
 80182a6:	2b17      	cmp	r3, #23
 80182a8:	d822      	bhi.n	80182f0 <RTC_screen_S7+0xbc>
 80182aa:	4b1a      	ldr	r3, [pc, #104]	; (8018314 <RTC_screen_S7+0xe0>)
 80182ac:	781b      	ldrb	r3, [r3, #0]
 80182ae:	3301      	adds	r3, #1
 80182b0:	b2da      	uxtb	r2, r3
 80182b2:	4b18      	ldr	r3, [pc, #96]	; (8018314 <RTC_screen_S7+0xe0>)
 80182b4:	701a      	strb	r2, [r3, #0]
 80182b6:	e01b      	b.n	80182f0 <RTC_screen_S7+0xbc>
		case 4: if(minute_temp<60)minute_temp++; break;
 80182b8:	4b17      	ldr	r3, [pc, #92]	; (8018318 <RTC_screen_S7+0xe4>)
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	2b3b      	cmp	r3, #59	; 0x3b
 80182be:	d819      	bhi.n	80182f4 <RTC_screen_S7+0xc0>
 80182c0:	4b15      	ldr	r3, [pc, #84]	; (8018318 <RTC_screen_S7+0xe4>)
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	3301      	adds	r3, #1
 80182c6:	b2da      	uxtb	r2, r3
 80182c8:	4b13      	ldr	r3, [pc, #76]	; (8018318 <RTC_screen_S7+0xe4>)
 80182ca:	701a      	strb	r2, [r3, #0]
 80182cc:	e012      	b.n	80182f4 <RTC_screen_S7+0xc0>
		case 5: if(sec_temp<60)sec_temp++; break;
 80182ce:	4b13      	ldr	r3, [pc, #76]	; (801831c <RTC_screen_S7+0xe8>)
 80182d0:	781b      	ldrb	r3, [r3, #0]
 80182d2:	2b3b      	cmp	r3, #59	; 0x3b
 80182d4:	d810      	bhi.n	80182f8 <RTC_screen_S7+0xc4>
 80182d6:	4b11      	ldr	r3, [pc, #68]	; (801831c <RTC_screen_S7+0xe8>)
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	3301      	adds	r3, #1
 80182dc:	b2da      	uxtb	r2, r3
 80182de:	4b0f      	ldr	r3, [pc, #60]	; (801831c <RTC_screen_S7+0xe8>)
 80182e0:	701a      	strb	r2, [r3, #0]
 80182e2:	e009      	b.n	80182f8 <RTC_screen_S7+0xc4>
		case 0: if(day_temp<31)day_temp++; break;
 80182e4:	bf00      	nop
 80182e6:	e008      	b.n	80182fa <RTC_screen_S7+0xc6>
		case 1: if(month_temp<12)month_temp++; break;
 80182e8:	bf00      	nop
 80182ea:	e006      	b.n	80182fa <RTC_screen_S7+0xc6>
		case 2: if(year_temp<60)year_temp++; break;
 80182ec:	bf00      	nop
 80182ee:	e004      	b.n	80182fa <RTC_screen_S7+0xc6>
		case 3: if(hour_temp<24)hour_temp++; break;
 80182f0:	bf00      	nop
 80182f2:	e002      	b.n	80182fa <RTC_screen_S7+0xc6>
		case 4: if(minute_temp<60)minute_temp++; break;
 80182f4:	bf00      	nop
 80182f6:	e000      	b.n	80182fa <RTC_screen_S7+0xc6>
		case 5: if(sec_temp<60)sec_temp++; break;
 80182f8:	bf00      	nop
	}
}
 80182fa:	bf00      	nop
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr
 8018304:	2000091c 	.word	0x2000091c
 8018308:	20008852 	.word	0x20008852
 801830c:	20008855 	.word	0x20008855
 8018310:	20008859 	.word	0x20008859
 8018314:	2000885b 	.word	0x2000885b
 8018318:	20008851 	.word	0x20008851
 801831c:	20008856 	.word	0x20008856

08018320 <RTC_screen_S4>:

// ENTER
void RTC_screen_S4(void)
{
 8018320:	b5b0      	push	{r4, r5, r7, lr}
 8018322:	b082      	sub	sp, #8
 8018324:	af02      	add	r7, sp, #8
	RTC_set(year_temp, month_temp, day_temp, hour_temp, minute_temp, sec_temp);
 8018326:	4b0a      	ldr	r3, [pc, #40]	; (8018350 <RTC_screen_S4+0x30>)
 8018328:	7818      	ldrb	r0, [r3, #0]
 801832a:	4b0a      	ldr	r3, [pc, #40]	; (8018354 <RTC_screen_S4+0x34>)
 801832c:	7819      	ldrb	r1, [r3, #0]
 801832e:	4b0a      	ldr	r3, [pc, #40]	; (8018358 <RTC_screen_S4+0x38>)
 8018330:	781c      	ldrb	r4, [r3, #0]
 8018332:	4b0a      	ldr	r3, [pc, #40]	; (801835c <RTC_screen_S4+0x3c>)
 8018334:	781d      	ldrb	r5, [r3, #0]
 8018336:	4b0a      	ldr	r3, [pc, #40]	; (8018360 <RTC_screen_S4+0x40>)
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	4a0a      	ldr	r2, [pc, #40]	; (8018364 <RTC_screen_S4+0x44>)
 801833c:	7812      	ldrb	r2, [r2, #0]
 801833e:	9201      	str	r2, [sp, #4]
 8018340:	9300      	str	r3, [sp, #0]
 8018342:	462b      	mov	r3, r5
 8018344:	4622      	mov	r2, r4
 8018346:	f7ff fd83 	bl	8017e50 <RTC_set>
}
 801834a:	bf00      	nop
 801834c:	46bd      	mov	sp, r7
 801834e:	bdb0      	pop	{r4, r5, r7, pc}
 8018350:	20008859 	.word	0x20008859
 8018354:	20008855 	.word	0x20008855
 8018358:	20008852 	.word	0x20008852
 801835c:	2000885b 	.word	0x2000885b
 8018360:	20008851 	.word	0x20008851
 8018364:	20008856 	.word	0x20008856

08018368 <About_options_screen_func>:
};



void About_options_screen_func(void)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	af00      	add	r7, sp, #0
	RTC_view();
 801836c:	f7ff fc30 	bl	8017bd0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018370:	492a      	ldr	r1, [pc, #168]	; (801841c <About_options_screen_func+0xb4>)
 8018372:	482b      	ldr	r0, [pc, #172]	; (8018420 <About_options_screen_func+0xb8>)
 8018374:	f7fd fb86 	bl	8015a84 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 10, 35, "Серийный номер:");
 8018378:	4b2a      	ldr	r3, [pc, #168]	; (8018424 <About_options_screen_func+0xbc>)
 801837a:	2223      	movs	r2, #35	; 0x23
 801837c:	210a      	movs	r1, #10
 801837e:	4828      	ldr	r0, [pc, #160]	; (8018420 <About_options_screen_func+0xb8>)
 8018380:	f7fd fade 	bl	8015940 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%05d", serial_num);
 8018384:	4b28      	ldr	r3, [pc, #160]	; (8018428 <About_options_screen_func+0xc0>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	461a      	mov	r2, r3
 801838a:	4928      	ldr	r1, [pc, #160]	; (801842c <About_options_screen_func+0xc4>)
 801838c:	4828      	ldr	r0, [pc, #160]	; (8018430 <About_options_screen_func+0xc8>)
 801838e:	f005 fd8f 	bl	801deb0 <siprintf>
	u8g2_DrawUTF8(&u8g2, 170, 35, (char*)RAM);
 8018392:	4b27      	ldr	r3, [pc, #156]	; (8018430 <About_options_screen_func+0xc8>)
 8018394:	2223      	movs	r2, #35	; 0x23
 8018396:	21aa      	movs	r1, #170	; 0xaa
 8018398:	4821      	ldr	r0, [pc, #132]	; (8018420 <About_options_screen_func+0xb8>)
 801839a:	f7fd fad1 	bl	8015940 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 50, "Диапазон:");
 801839e:	4b25      	ldr	r3, [pc, #148]	; (8018434 <About_options_screen_func+0xcc>)
 80183a0:	2232      	movs	r2, #50	; 0x32
 80183a2:	210a      	movs	r1, #10
 80183a4:	481e      	ldr	r0, [pc, #120]	; (8018420 <About_options_screen_func+0xb8>)
 80183a6:	f7fd facb 	bl	8015940 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 110, 50, GAUGE_RANGE_TEXT[gauge_range]);
 80183aa:	4b23      	ldr	r3, [pc, #140]	; (8018438 <About_options_screen_func+0xd0>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4a23      	ldr	r2, [pc, #140]	; (801843c <About_options_screen_func+0xd4>)
 80183b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80183b4:	2232      	movs	r2, #50	; 0x32
 80183b6:	216e      	movs	r1, #110	; 0x6e
 80183b8:	4819      	ldr	r0, [pc, #100]	; (8018420 <About_options_screen_func+0xb8>)
 80183ba:	f7fd fac1 	bl	8015940 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 65, "Погрешность:");
 80183be:	4b20      	ldr	r3, [pc, #128]	; (8018440 <About_options_screen_func+0xd8>)
 80183c0:	2241      	movs	r2, #65	; 0x41
 80183c2:	210a      	movs	r1, #10
 80183c4:	4816      	ldr	r0, [pc, #88]	; (8018420 <About_options_screen_func+0xb8>)
 80183c6:	f7fd fabb 	bl	8015940 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%.4f", gauge_error);
 80183ca:	4b1e      	ldr	r3, [pc, #120]	; (8018444 <About_options_screen_func+0xdc>)
 80183cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d0:	491d      	ldr	r1, [pc, #116]	; (8018448 <About_options_screen_func+0xe0>)
 80183d2:	4817      	ldr	r0, [pc, #92]	; (8018430 <About_options_screen_func+0xc8>)
 80183d4:	f005 fd6c 	bl	801deb0 <siprintf>
	u8g2_DrawUTF8(&u8g2, 140, 65, (char*)RAM);
 80183d8:	4b15      	ldr	r3, [pc, #84]	; (8018430 <About_options_screen_func+0xc8>)
 80183da:	2241      	movs	r2, #65	; 0x41
 80183dc:	218c      	movs	r1, #140	; 0x8c
 80183de:	4810      	ldr	r0, [pc, #64]	; (8018420 <About_options_screen_func+0xb8>)
 80183e0:	f7fd faae 	bl	8015940 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 145, "Код ошибки:");
 80183e4:	4b19      	ldr	r3, [pc, #100]	; (801844c <About_options_screen_func+0xe4>)
 80183e6:	2291      	movs	r2, #145	; 0x91
 80183e8:	210a      	movs	r1, #10
 80183ea:	480d      	ldr	r0, [pc, #52]	; (8018420 <About_options_screen_func+0xb8>)
 80183ec:	f7fd faa8 	bl	8015940 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%d", ERROR_REG);
 80183f0:	4b17      	ldr	r3, [pc, #92]	; (8018450 <About_options_screen_func+0xe8>)
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	461a      	mov	r2, r3
 80183f6:	4917      	ldr	r1, [pc, #92]	; (8018454 <About_options_screen_func+0xec>)
 80183f8:	480d      	ldr	r0, [pc, #52]	; (8018430 <About_options_screen_func+0xc8>)
 80183fa:	f005 fd59 	bl	801deb0 <siprintf>
	u8g2_DrawUTF8(&u8g2, 130, 145, (char*)RAM);
 80183fe:	4b0c      	ldr	r3, [pc, #48]	; (8018430 <About_options_screen_func+0xc8>)
 8018400:	2291      	movs	r2, #145	; 0x91
 8018402:	2182      	movs	r1, #130	; 0x82
 8018404:	4806      	ldr	r0, [pc, #24]	; (8018420 <About_options_screen_func+0xb8>)
 8018406:	f7fd fa9b 	bl	8015940 <u8g2_DrawUTF8>



	u8g2_SendBuffer(&u8g2);
 801840a:	4805      	ldr	r0, [pc, #20]	; (8018420 <About_options_screen_func+0xb8>)
 801840c:	f7fc fcfd 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018410:	4803      	ldr	r0, [pc, #12]	; (8018420 <About_options_screen_func+0xb8>)
 8018412:	f7fc fc87 	bl	8014d24 <u8g2_ClearBuffer>
}
 8018416:	bf00      	nop
 8018418:	bd80      	pop	{r7, pc}
 801841a:	bf00      	nop
 801841c:	080271b0 	.word	0x080271b0
 8018420:	20002098 	.word	0x20002098
 8018424:	08022598 	.word	0x08022598
 8018428:	200000a0 	.word	0x200000a0
 801842c:	080225b8 	.word	0x080225b8
 8018430:	20002158 	.word	0x20002158
 8018434:	080225c0 	.word	0x080225c0
 8018438:	20000974 	.word	0x20000974
 801843c:	20000434 	.word	0x20000434
 8018440:	080225d4 	.word	0x080225d4
 8018444:	200000a8 	.word	0x200000a8
 8018448:	080225ec 	.word	0x080225ec
 801844c:	080225f4 	.word	0x080225f4
 8018450:	20000958 	.word	0x20000958
 8018454:	0802260c 	.word	0x0802260c

08018458 <About_options_screen_S9>:


// MENU
void About_options_screen_S9(void)
{
 8018458:	b480      	push	{r7}
 801845a:	af00      	add	r7, sp, #0
	screen=Option_screen;
 801845c:	4b06      	ldr	r3, [pc, #24]	; (8018478 <About_options_screen_S9+0x20>)
 801845e:	2204      	movs	r2, #4
 8018460:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018462:	4b06      	ldr	r3, [pc, #24]	; (801847c <About_options_screen_S9+0x24>)
 8018464:	22ff      	movs	r2, #255	; 0xff
 8018466:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8018468:	4b05      	ldr	r3, [pc, #20]	; (8018480 <About_options_screen_S9+0x28>)
 801846a:	2203      	movs	r2, #3
 801846c:	701a      	strb	r2, [r3, #0]
}
 801846e:	bf00      	nop
 8018470:	46bd      	mov	sp, r7
 8018472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018476:	4770      	bx	lr
 8018478:	2000004c 	.word	0x2000004c
 801847c:	20000460 	.word	0x20000460
 8018480:	20000461 	.word	0x20000461

08018484 <Logging_options_screen_func>:
#define max_edit_param 6



void Logging_options_screen_func(void)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b082      	sub	sp, #8
 8018488:	af02      	add	r7, sp, #8
	RTC_view();
 801848a:	f7ff fba1 	bl	8017bd0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801848e:	4951      	ldr	r1, [pc, #324]	; (80185d4 <Logging_options_screen_func+0x150>)
 8018490:	4851      	ldr	r0, [pc, #324]	; (80185d8 <Logging_options_screen_func+0x154>)
 8018492:	f7fd faf7 	bl	8015a84 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 5, 40, "Логгирование:");
 8018496:	4b51      	ldr	r3, [pc, #324]	; (80185dc <Logging_options_screen_func+0x158>)
 8018498:	2228      	movs	r2, #40	; 0x28
 801849a:	2105      	movs	r1, #5
 801849c:	484e      	ldr	r0, [pc, #312]	; (80185d8 <Logging_options_screen_func+0x154>)
 801849e:	f7fd fa4f 	bl	8015940 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 60, "Время старта:");
 80184a2:	4b4f      	ldr	r3, [pc, #316]	; (80185e0 <Logging_options_screen_func+0x15c>)
 80184a4:	223c      	movs	r2, #60	; 0x3c
 80184a6:	2105      	movs	r1, #5
 80184a8:	484b      	ldr	r0, [pc, #300]	; (80185d8 <Logging_options_screen_func+0x154>)
 80184aa:	f7fd fa49 	bl	8015940 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 80, "Период сохранения:");
 80184ae:	4b4d      	ldr	r3, [pc, #308]	; (80185e4 <Logging_options_screen_func+0x160>)
 80184b0:	2250      	movs	r2, #80	; 0x50
 80184b2:	2105      	movs	r1, #5
 80184b4:	4848      	ldr	r0, [pc, #288]	; (80185d8 <Logging_options_screen_func+0x154>)
 80184b6:	f7fd fa43 	bl	8015940 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 100, "Длительность:");
 80184ba:	4b4b      	ldr	r3, [pc, #300]	; (80185e8 <Logging_options_screen_func+0x164>)
 80184bc:	2264      	movs	r2, #100	; 0x64
 80184be:	2105      	movs	r1, #5
 80184c0:	4845      	ldr	r0, [pc, #276]	; (80185d8 <Logging_options_screen_func+0x154>)
 80184c2:	f7fd fa3d 	bl	8015940 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 120, "Всего файлов:");
 80184c6:	4b49      	ldr	r3, [pc, #292]	; (80185ec <Logging_options_screen_func+0x168>)
 80184c8:	2278      	movs	r2, #120	; 0x78
 80184ca:	2105      	movs	r1, #5
 80184cc:	4842      	ldr	r0, [pc, #264]	; (80185d8 <Logging_options_screen_func+0x154>)
 80184ce:	f7fd fa37 	bl	8015940 <u8g2_DrawUTF8>


	// 0 parameter
	if(logging==0)Blink_Edit_Parameter(155, 40, "ДА", edit_param, 0);
 80184d2:	4b47      	ldr	r3, [pc, #284]	; (80185f0 <Logging_options_screen_func+0x16c>)
 80184d4:	781b      	ldrb	r3, [r3, #0]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d109      	bne.n	80184ee <Logging_options_screen_func+0x6a>
 80184da:	4b46      	ldr	r3, [pc, #280]	; (80185f4 <Logging_options_screen_func+0x170>)
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	2200      	movs	r2, #0
 80184e0:	9200      	str	r2, [sp, #0]
 80184e2:	4a45      	ldr	r2, [pc, #276]	; (80185f8 <Logging_options_screen_func+0x174>)
 80184e4:	2128      	movs	r1, #40	; 0x28
 80184e6:	209b      	movs	r0, #155	; 0x9b
 80184e8:	f7ea fa66 	bl	80029b8 <Blink_Edit_Parameter>
 80184ec:	e008      	b.n	8018500 <Logging_options_screen_func+0x7c>
	else Blink_Edit_Parameter(155, 40, "НЕТ", edit_param, 0);
 80184ee:	4b41      	ldr	r3, [pc, #260]	; (80185f4 <Logging_options_screen_func+0x170>)
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	2200      	movs	r2, #0
 80184f4:	9200      	str	r2, [sp, #0]
 80184f6:	4a41      	ldr	r2, [pc, #260]	; (80185fc <Logging_options_screen_func+0x178>)
 80184f8:	2128      	movs	r1, #40	; 0x28
 80184fa:	209b      	movs	r0, #155	; 0x9b
 80184fc:	f7ea fa5c 	bl	80029b8 <Blink_Edit_Parameter>
	// 1 parameter
	sprintf(RAM,"%02d:", logging_start_hour);
 8018500:	4b3f      	ldr	r3, [pc, #252]	; (8018600 <Logging_options_screen_func+0x17c>)
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	461a      	mov	r2, r3
 8018506:	493f      	ldr	r1, [pc, #252]	; (8018604 <Logging_options_screen_func+0x180>)
 8018508:	483f      	ldr	r0, [pc, #252]	; (8018608 <Logging_options_screen_func+0x184>)
 801850a:	f005 fcd1 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(155, 60, RAM, edit_param, 1);
 801850e:	4b39      	ldr	r3, [pc, #228]	; (80185f4 <Logging_options_screen_func+0x170>)
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	2201      	movs	r2, #1
 8018514:	9200      	str	r2, [sp, #0]
 8018516:	4a3c      	ldr	r2, [pc, #240]	; (8018608 <Logging_options_screen_func+0x184>)
 8018518:	213c      	movs	r1, #60	; 0x3c
 801851a:	209b      	movs	r0, #155	; 0x9b
 801851c:	f7ea fa4c 	bl	80029b8 <Blink_Edit_Parameter>
	// 2 parameter
	sprintf(RAM,"%02d:", logging_start_min);
 8018520:	4b3a      	ldr	r3, [pc, #232]	; (801860c <Logging_options_screen_func+0x188>)
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	461a      	mov	r2, r3
 8018526:	4937      	ldr	r1, [pc, #220]	; (8018604 <Logging_options_screen_func+0x180>)
 8018528:	4837      	ldr	r0, [pc, #220]	; (8018608 <Logging_options_screen_func+0x184>)
 801852a:	f005 fcc1 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(185, 60, RAM, edit_param, 2);
 801852e:	4b31      	ldr	r3, [pc, #196]	; (80185f4 <Logging_options_screen_func+0x170>)
 8018530:	781b      	ldrb	r3, [r3, #0]
 8018532:	2202      	movs	r2, #2
 8018534:	9200      	str	r2, [sp, #0]
 8018536:	4a34      	ldr	r2, [pc, #208]	; (8018608 <Logging_options_screen_func+0x184>)
 8018538:	213c      	movs	r1, #60	; 0x3c
 801853a:	20b9      	movs	r0, #185	; 0xb9
 801853c:	f7ea fa3c 	bl	80029b8 <Blink_Edit_Parameter>
	// 3 parameter
	sprintf(RAM,"%02d", logging_start_sec);
 8018540:	4b33      	ldr	r3, [pc, #204]	; (8018610 <Logging_options_screen_func+0x18c>)
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	461a      	mov	r2, r3
 8018546:	4933      	ldr	r1, [pc, #204]	; (8018614 <Logging_options_screen_func+0x190>)
 8018548:	482f      	ldr	r0, [pc, #188]	; (8018608 <Logging_options_screen_func+0x184>)
 801854a:	f005 fcb1 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(215, 60, RAM, edit_param, 3);
 801854e:	4b29      	ldr	r3, [pc, #164]	; (80185f4 <Logging_options_screen_func+0x170>)
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	2203      	movs	r2, #3
 8018554:	9200      	str	r2, [sp, #0]
 8018556:	4a2c      	ldr	r2, [pc, #176]	; (8018608 <Logging_options_screen_func+0x184>)
 8018558:	213c      	movs	r1, #60	; 0x3c
 801855a:	20d7      	movs	r0, #215	; 0xd7
 801855c:	f7ea fa2c 	bl	80029b8 <Blink_Edit_Parameter>
	// 4 parameter
	sprintf(RAM,"%d", logging_period);
 8018560:	4b2d      	ldr	r3, [pc, #180]	; (8018618 <Logging_options_screen_func+0x194>)
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	461a      	mov	r2, r3
 8018566:	492d      	ldr	r1, [pc, #180]	; (801861c <Logging_options_screen_func+0x198>)
 8018568:	4827      	ldr	r0, [pc, #156]	; (8018608 <Logging_options_screen_func+0x184>)
 801856a:	f005 fca1 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(195, 80, RAM, edit_param, 4);
 801856e:	4b21      	ldr	r3, [pc, #132]	; (80185f4 <Logging_options_screen_func+0x170>)
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	2204      	movs	r2, #4
 8018574:	9200      	str	r2, [sp, #0]
 8018576:	4a24      	ldr	r2, [pc, #144]	; (8018608 <Logging_options_screen_func+0x184>)
 8018578:	2150      	movs	r1, #80	; 0x50
 801857a:	20c3      	movs	r0, #195	; 0xc3
 801857c:	f7ea fa1c 	bl	80029b8 <Blink_Edit_Parameter>
	// 5 parameter
	sprintf(RAM,"%d", logging_len);
 8018580:	4b27      	ldr	r3, [pc, #156]	; (8018620 <Logging_options_screen_func+0x19c>)
 8018582:	781b      	ldrb	r3, [r3, #0]
 8018584:	461a      	mov	r2, r3
 8018586:	4925      	ldr	r1, [pc, #148]	; (801861c <Logging_options_screen_func+0x198>)
 8018588:	481f      	ldr	r0, [pc, #124]	; (8018608 <Logging_options_screen_func+0x184>)
 801858a:	f005 fc91 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(155, 100, RAM, edit_param, 5);
 801858e:	4b19      	ldr	r3, [pc, #100]	; (80185f4 <Logging_options_screen_func+0x170>)
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	2205      	movs	r2, #5
 8018594:	9200      	str	r2, [sp, #0]
 8018596:	4a1c      	ldr	r2, [pc, #112]	; (8018608 <Logging_options_screen_func+0x184>)
 8018598:	2164      	movs	r1, #100	; 0x64
 801859a:	209b      	movs	r0, #155	; 0x9b
 801859c:	f7ea fa0c 	bl	80029b8 <Blink_Edit_Parameter>
	// 6 parameter
	sprintf(RAM,"%d", logging_num);
 80185a0:	4b20      	ldr	r3, [pc, #128]	; (8018624 <Logging_options_screen_func+0x1a0>)
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	461a      	mov	r2, r3
 80185a6:	491d      	ldr	r1, [pc, #116]	; (801861c <Logging_options_screen_func+0x198>)
 80185a8:	4817      	ldr	r0, [pc, #92]	; (8018608 <Logging_options_screen_func+0x184>)
 80185aa:	f005 fc81 	bl	801deb0 <siprintf>
	Blink_Edit_Parameter(155, 120, RAM, edit_param, 6);
 80185ae:	4b11      	ldr	r3, [pc, #68]	; (80185f4 <Logging_options_screen_func+0x170>)
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	2206      	movs	r2, #6
 80185b4:	9200      	str	r2, [sp, #0]
 80185b6:	4a14      	ldr	r2, [pc, #80]	; (8018608 <Logging_options_screen_func+0x184>)
 80185b8:	2178      	movs	r1, #120	; 0x78
 80185ba:	209b      	movs	r0, #155	; 0x9b
 80185bc:	f7ea f9fc 	bl	80029b8 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 80185c0:	4805      	ldr	r0, [pc, #20]	; (80185d8 <Logging_options_screen_func+0x154>)
 80185c2:	f7fc fc22 	bl	8014e0a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80185c6:	4804      	ldr	r0, [pc, #16]	; (80185d8 <Logging_options_screen_func+0x154>)
 80185c8:	f7fc fbac 	bl	8014d24 <u8g2_ClearBuffer>
}
 80185cc:	bf00      	nop
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}
 80185d2:	bf00      	nop
 80185d4:	080271b0 	.word	0x080271b0
 80185d8:	20002098 	.word	0x20002098
 80185dc:	08022610 	.word	0x08022610
 80185e0:	0802262c 	.word	0x0802262c
 80185e4:	08022648 	.word	0x08022648
 80185e8:	0802266c 	.word	0x0802266c
 80185ec:	08022688 	.word	0x08022688
 80185f0:	20000978 	.word	0x20000978
 80185f4:	2000091c 	.word	0x2000091c
 80185f8:	080226a4 	.word	0x080226a4
 80185fc:	080226ac 	.word	0x080226ac
 8018600:	20000979 	.word	0x20000979
 8018604:	080226b4 	.word	0x080226b4
 8018608:	20002158 	.word	0x20002158
 801860c:	2000097a 	.word	0x2000097a
 8018610:	2000097b 	.word	0x2000097b
 8018614:	080226bc 	.word	0x080226bc
 8018618:	2000097c 	.word	0x2000097c
 801861c:	080226c4 	.word	0x080226c4
 8018620:	2000097d 	.word	0x2000097d
 8018624:	2000097e 	.word	0x2000097e

08018628 <Logging_options_screen_S6>:


// DOWN
void Logging_options_screen_S6(void)
{
 8018628:	b480      	push	{r7}
 801862a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801862c:	4b07      	ldr	r3, [pc, #28]	; (801864c <Logging_options_screen_S6+0x24>)
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	2b04      	cmp	r3, #4
 8018632:	d805      	bhi.n	8018640 <Logging_options_screen_S6+0x18>
 8018634:	4b05      	ldr	r3, [pc, #20]	; (801864c <Logging_options_screen_S6+0x24>)
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	3301      	adds	r3, #1
 801863a:	b2da      	uxtb	r2, r3
 801863c:	4b03      	ldr	r3, [pc, #12]	; (801864c <Logging_options_screen_S6+0x24>)
 801863e:	701a      	strb	r2, [r3, #0]
}
 8018640:	bf00      	nop
 8018642:	46bd      	mov	sp, r7
 8018644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018648:	4770      	bx	lr
 801864a:	bf00      	nop
 801864c:	2000091c 	.word	0x2000091c

08018650 <Logging_options_screen_S7>:

// UP
void Logging_options_screen_S7(void)
{
 8018650:	b480      	push	{r7}
 8018652:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8018654:	4b07      	ldr	r3, [pc, #28]	; (8018674 <Logging_options_screen_S7+0x24>)
 8018656:	781b      	ldrb	r3, [r3, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d005      	beq.n	8018668 <Logging_options_screen_S7+0x18>
 801865c:	4b05      	ldr	r3, [pc, #20]	; (8018674 <Logging_options_screen_S7+0x24>)
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	3b01      	subs	r3, #1
 8018662:	b2da      	uxtb	r2, r3
 8018664:	4b03      	ldr	r3, [pc, #12]	; (8018674 <Logging_options_screen_S7+0x24>)
 8018666:	701a      	strb	r2, [r3, #0]
}
 8018668:	bf00      	nop
 801866a:	46bd      	mov	sp, r7
 801866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018670:	4770      	bx	lr
 8018672:	bf00      	nop
 8018674:	2000091c 	.word	0x2000091c

08018678 <Logging_options_screen_S9>:



// MENU
void Logging_options_screen_S9(void)
{
 8018678:	b480      	push	{r7}
 801867a:	af00      	add	r7, sp, #0
	screen=Option_screen;
 801867c:	4b06      	ldr	r3, [pc, #24]	; (8018698 <Logging_options_screen_S9+0x20>)
 801867e:	2204      	movs	r2, #4
 8018680:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018682:	4b06      	ldr	r3, [pc, #24]	; (801869c <Logging_options_screen_S9+0x24>)
 8018684:	22ff      	movs	r2, #255	; 0xff
 8018686:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8018688:	4b05      	ldr	r3, [pc, #20]	; (80186a0 <Logging_options_screen_S9+0x28>)
 801868a:	2205      	movs	r2, #5
 801868c:	701a      	strb	r2, [r3, #0]
}
 801868e:	bf00      	nop
 8018690:	46bd      	mov	sp, r7
 8018692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018696:	4770      	bx	lr
 8018698:	2000004c 	.word	0x2000004c
 801869c:	20000460 	.word	0x20000460
 80186a0:	20000461 	.word	0x20000461

080186a4 <Logging_options_screen_S8>:

// BACKWARD
void Logging_options_screen_S8(void)
{
 80186a4:	b480      	push	{r7}
 80186a6:	af00      	add	r7, sp, #0
	switch(edit_param)
 80186a8:	4b32      	ldr	r3, [pc, #200]	; (8018774 <Logging_options_screen_S8+0xd0>)
 80186aa:	781b      	ldrb	r3, [r3, #0]
 80186ac:	2b05      	cmp	r3, #5
 80186ae:	d85c      	bhi.n	801876a <Logging_options_screen_S8+0xc6>
 80186b0:	a201      	add	r2, pc, #4	; (adr r2, 80186b8 <Logging_options_screen_S8+0x14>)
 80186b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b6:	bf00      	nop
 80186b8:	080186d1 	.word	0x080186d1
 80186bc:	080186e7 	.word	0x080186e7
 80186c0:	080186fd 	.word	0x080186fd
 80186c4:	08018713 	.word	0x08018713
 80186c8:	08018729 	.word	0x08018729
 80186cc:	0801873f 	.word	0x0801873f
	{
		case 0: if(logging>0)logging--; break;
 80186d0:	4b29      	ldr	r3, [pc, #164]	; (8018778 <Logging_options_screen_S8+0xd4>)
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d03d      	beq.n	8018754 <Logging_options_screen_S8+0xb0>
 80186d8:	4b27      	ldr	r3, [pc, #156]	; (8018778 <Logging_options_screen_S8+0xd4>)
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	3b01      	subs	r3, #1
 80186de:	b2da      	uxtb	r2, r3
 80186e0:	4b25      	ldr	r3, [pc, #148]	; (8018778 <Logging_options_screen_S8+0xd4>)
 80186e2:	701a      	strb	r2, [r3, #0]
 80186e4:	e036      	b.n	8018754 <Logging_options_screen_S8+0xb0>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 80186e6:	4b25      	ldr	r3, [pc, #148]	; (801877c <Logging_options_screen_S8+0xd8>)
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d034      	beq.n	8018758 <Logging_options_screen_S8+0xb4>
 80186ee:	4b23      	ldr	r3, [pc, #140]	; (801877c <Logging_options_screen_S8+0xd8>)
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	3b01      	subs	r3, #1
 80186f4:	b2da      	uxtb	r2, r3
 80186f6:	4b21      	ldr	r3, [pc, #132]	; (801877c <Logging_options_screen_S8+0xd8>)
 80186f8:	701a      	strb	r2, [r3, #0]
 80186fa:	e02d      	b.n	8018758 <Logging_options_screen_S8+0xb4>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 80186fc:	4b20      	ldr	r3, [pc, #128]	; (8018780 <Logging_options_screen_S8+0xdc>)
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d02b      	beq.n	801875c <Logging_options_screen_S8+0xb8>
 8018704:	4b1e      	ldr	r3, [pc, #120]	; (8018780 <Logging_options_screen_S8+0xdc>)
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	3b01      	subs	r3, #1
 801870a:	b2da      	uxtb	r2, r3
 801870c:	4b1c      	ldr	r3, [pc, #112]	; (8018780 <Logging_options_screen_S8+0xdc>)
 801870e:	701a      	strb	r2, [r3, #0]
 8018710:	e024      	b.n	801875c <Logging_options_screen_S8+0xb8>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 8018712:	4b1c      	ldr	r3, [pc, #112]	; (8018784 <Logging_options_screen_S8+0xe0>)
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d022      	beq.n	8018760 <Logging_options_screen_S8+0xbc>
 801871a:	4b1a      	ldr	r3, [pc, #104]	; (8018784 <Logging_options_screen_S8+0xe0>)
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	3b01      	subs	r3, #1
 8018720:	b2da      	uxtb	r2, r3
 8018722:	4b18      	ldr	r3, [pc, #96]	; (8018784 <Logging_options_screen_S8+0xe0>)
 8018724:	701a      	strb	r2, [r3, #0]
 8018726:	e01b      	b.n	8018760 <Logging_options_screen_S8+0xbc>
		case 4: if(logging_period>0)logging_period--; break;
 8018728:	4b17      	ldr	r3, [pc, #92]	; (8018788 <Logging_options_screen_S8+0xe4>)
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d019      	beq.n	8018764 <Logging_options_screen_S8+0xc0>
 8018730:	4b15      	ldr	r3, [pc, #84]	; (8018788 <Logging_options_screen_S8+0xe4>)
 8018732:	781b      	ldrb	r3, [r3, #0]
 8018734:	3b01      	subs	r3, #1
 8018736:	b2da      	uxtb	r2, r3
 8018738:	4b13      	ldr	r3, [pc, #76]	; (8018788 <Logging_options_screen_S8+0xe4>)
 801873a:	701a      	strb	r2, [r3, #0]
 801873c:	e012      	b.n	8018764 <Logging_options_screen_S8+0xc0>
		case 5: if(logging_len>0)logging_len--; break;
 801873e:	4b13      	ldr	r3, [pc, #76]	; (801878c <Logging_options_screen_S8+0xe8>)
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d010      	beq.n	8018768 <Logging_options_screen_S8+0xc4>
 8018746:	4b11      	ldr	r3, [pc, #68]	; (801878c <Logging_options_screen_S8+0xe8>)
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	3b01      	subs	r3, #1
 801874c:	b2da      	uxtb	r2, r3
 801874e:	4b0f      	ldr	r3, [pc, #60]	; (801878c <Logging_options_screen_S8+0xe8>)
 8018750:	701a      	strb	r2, [r3, #0]
 8018752:	e009      	b.n	8018768 <Logging_options_screen_S8+0xc4>
		case 0: if(logging>0)logging--; break;
 8018754:	bf00      	nop
 8018756:	e008      	b.n	801876a <Logging_options_screen_S8+0xc6>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 8018758:	bf00      	nop
 801875a:	e006      	b.n	801876a <Logging_options_screen_S8+0xc6>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 801875c:	bf00      	nop
 801875e:	e004      	b.n	801876a <Logging_options_screen_S8+0xc6>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 8018760:	bf00      	nop
 8018762:	e002      	b.n	801876a <Logging_options_screen_S8+0xc6>
		case 4: if(logging_period>0)logging_period--; break;
 8018764:	bf00      	nop
 8018766:	e000      	b.n	801876a <Logging_options_screen_S8+0xc6>
		case 5: if(logging_len>0)logging_len--; break;
 8018768:	bf00      	nop
	}
}
 801876a:	bf00      	nop
 801876c:	46bd      	mov	sp, r7
 801876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018772:	4770      	bx	lr
 8018774:	2000091c 	.word	0x2000091c
 8018778:	20000978 	.word	0x20000978
 801877c:	20000979 	.word	0x20000979
 8018780:	2000097a 	.word	0x2000097a
 8018784:	2000097b 	.word	0x2000097b
 8018788:	2000097c 	.word	0x2000097c
 801878c:	2000097d 	.word	0x2000097d

08018790 <Logging_options_screen_S5>:

// FORWARD
void Logging_options_screen_S5(void)
{
 8018790:	b480      	push	{r7}
 8018792:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018794:	4b32      	ldr	r3, [pc, #200]	; (8018860 <Logging_options_screen_S5+0xd0>)
 8018796:	781b      	ldrb	r3, [r3, #0]
 8018798:	2b05      	cmp	r3, #5
 801879a:	d85c      	bhi.n	8018856 <Logging_options_screen_S5+0xc6>
 801879c:	a201      	add	r2, pc, #4	; (adr r2, 80187a4 <Logging_options_screen_S5+0x14>)
 801879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187a2:	bf00      	nop
 80187a4:	080187bd 	.word	0x080187bd
 80187a8:	080187d3 	.word	0x080187d3
 80187ac:	080187e9 	.word	0x080187e9
 80187b0:	080187ff 	.word	0x080187ff
 80187b4:	08018815 	.word	0x08018815
 80187b8:	0801882b 	.word	0x0801882b
	{
		case 0: if(logging<1)logging++; break;
 80187bc:	4b29      	ldr	r3, [pc, #164]	; (8018864 <Logging_options_screen_S5+0xd4>)
 80187be:	781b      	ldrb	r3, [r3, #0]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d13d      	bne.n	8018840 <Logging_options_screen_S5+0xb0>
 80187c4:	4b27      	ldr	r3, [pc, #156]	; (8018864 <Logging_options_screen_S5+0xd4>)
 80187c6:	781b      	ldrb	r3, [r3, #0]
 80187c8:	3301      	adds	r3, #1
 80187ca:	b2da      	uxtb	r2, r3
 80187cc:	4b25      	ldr	r3, [pc, #148]	; (8018864 <Logging_options_screen_S5+0xd4>)
 80187ce:	701a      	strb	r2, [r3, #0]
 80187d0:	e036      	b.n	8018840 <Logging_options_screen_S5+0xb0>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 80187d2:	4b25      	ldr	r3, [pc, #148]	; (8018868 <Logging_options_screen_S5+0xd8>)
 80187d4:	781b      	ldrb	r3, [r3, #0]
 80187d6:	2b16      	cmp	r3, #22
 80187d8:	d834      	bhi.n	8018844 <Logging_options_screen_S5+0xb4>
 80187da:	4b23      	ldr	r3, [pc, #140]	; (8018868 <Logging_options_screen_S5+0xd8>)
 80187dc:	781b      	ldrb	r3, [r3, #0]
 80187de:	3301      	adds	r3, #1
 80187e0:	b2da      	uxtb	r2, r3
 80187e2:	4b21      	ldr	r3, [pc, #132]	; (8018868 <Logging_options_screen_S5+0xd8>)
 80187e4:	701a      	strb	r2, [r3, #0]
 80187e6:	e02d      	b.n	8018844 <Logging_options_screen_S5+0xb4>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 80187e8:	4b20      	ldr	r3, [pc, #128]	; (801886c <Logging_options_screen_S5+0xdc>)
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	2b3a      	cmp	r3, #58	; 0x3a
 80187ee:	d82b      	bhi.n	8018848 <Logging_options_screen_S5+0xb8>
 80187f0:	4b1e      	ldr	r3, [pc, #120]	; (801886c <Logging_options_screen_S5+0xdc>)
 80187f2:	781b      	ldrb	r3, [r3, #0]
 80187f4:	3301      	adds	r3, #1
 80187f6:	b2da      	uxtb	r2, r3
 80187f8:	4b1c      	ldr	r3, [pc, #112]	; (801886c <Logging_options_screen_S5+0xdc>)
 80187fa:	701a      	strb	r2, [r3, #0]
 80187fc:	e024      	b.n	8018848 <Logging_options_screen_S5+0xb8>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 80187fe:	4b1c      	ldr	r3, [pc, #112]	; (8018870 <Logging_options_screen_S5+0xe0>)
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	2b3a      	cmp	r3, #58	; 0x3a
 8018804:	d822      	bhi.n	801884c <Logging_options_screen_S5+0xbc>
 8018806:	4b1a      	ldr	r3, [pc, #104]	; (8018870 <Logging_options_screen_S5+0xe0>)
 8018808:	781b      	ldrb	r3, [r3, #0]
 801880a:	3301      	adds	r3, #1
 801880c:	b2da      	uxtb	r2, r3
 801880e:	4b18      	ldr	r3, [pc, #96]	; (8018870 <Logging_options_screen_S5+0xe0>)
 8018810:	701a      	strb	r2, [r3, #0]
 8018812:	e01b      	b.n	801884c <Logging_options_screen_S5+0xbc>
		case 4: if(logging_period<30)logging_period++; break;
 8018814:	4b17      	ldr	r3, [pc, #92]	; (8018874 <Logging_options_screen_S5+0xe4>)
 8018816:	781b      	ldrb	r3, [r3, #0]
 8018818:	2b1d      	cmp	r3, #29
 801881a:	d819      	bhi.n	8018850 <Logging_options_screen_S5+0xc0>
 801881c:	4b15      	ldr	r3, [pc, #84]	; (8018874 <Logging_options_screen_S5+0xe4>)
 801881e:	781b      	ldrb	r3, [r3, #0]
 8018820:	3301      	adds	r3, #1
 8018822:	b2da      	uxtb	r2, r3
 8018824:	4b13      	ldr	r3, [pc, #76]	; (8018874 <Logging_options_screen_S5+0xe4>)
 8018826:	701a      	strb	r2, [r3, #0]
 8018828:	e012      	b.n	8018850 <Logging_options_screen_S5+0xc0>
		case 5: if(logging_len<100)logging_len++; break;
 801882a:	4b13      	ldr	r3, [pc, #76]	; (8018878 <Logging_options_screen_S5+0xe8>)
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	2b63      	cmp	r3, #99	; 0x63
 8018830:	d810      	bhi.n	8018854 <Logging_options_screen_S5+0xc4>
 8018832:	4b11      	ldr	r3, [pc, #68]	; (8018878 <Logging_options_screen_S5+0xe8>)
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	3301      	adds	r3, #1
 8018838:	b2da      	uxtb	r2, r3
 801883a:	4b0f      	ldr	r3, [pc, #60]	; (8018878 <Logging_options_screen_S5+0xe8>)
 801883c:	701a      	strb	r2, [r3, #0]
 801883e:	e009      	b.n	8018854 <Logging_options_screen_S5+0xc4>
		case 0: if(logging<1)logging++; break;
 8018840:	bf00      	nop
 8018842:	e008      	b.n	8018856 <Logging_options_screen_S5+0xc6>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 8018844:	bf00      	nop
 8018846:	e006      	b.n	8018856 <Logging_options_screen_S5+0xc6>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 8018848:	bf00      	nop
 801884a:	e004      	b.n	8018856 <Logging_options_screen_S5+0xc6>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 801884c:	bf00      	nop
 801884e:	e002      	b.n	8018856 <Logging_options_screen_S5+0xc6>
		case 4: if(logging_period<30)logging_period++; break;
 8018850:	bf00      	nop
 8018852:	e000      	b.n	8018856 <Logging_options_screen_S5+0xc6>
		case 5: if(logging_len<100)logging_len++; break;
 8018854:	bf00      	nop
	}
}
 8018856:	bf00      	nop
 8018858:	46bd      	mov	sp, r7
 801885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801885e:	4770      	bx	lr
 8018860:	2000091c 	.word	0x2000091c
 8018864:	20000978 	.word	0x20000978
 8018868:	20000979 	.word	0x20000979
 801886c:	2000097a 	.word	0x2000097a
 8018870:	2000097b 	.word	0x2000097b
 8018874:	2000097c 	.word	0x2000097c
 8018878:	2000097d 	.word	0x2000097d

0801887c <Menu_GUI>:



void Menu_GUI(uint16_t x_pos, uint16_t y_pos, const unsigned char *menu_string[], uint8_t *str_size,
		uint8_t str_to_str, uint8_t menu_size, uint8_t active_string)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b086      	sub	sp, #24
 8018880:	af00      	add	r7, sp, #0
 8018882:	60ba      	str	r2, [r7, #8]
 8018884:	607b      	str	r3, [r7, #4]
 8018886:	4603      	mov	r3, r0
 8018888:	81fb      	strh	r3, [r7, #14]
 801888a:	460b      	mov	r3, r1
 801888c:	81bb      	strh	r3, [r7, #12]
	uint8_t i=0;
 801888e:	2300      	movs	r3, #0
 8018890:	75fb      	strb	r3, [r7, #23]
	if((old_active_string!=active_string)||(float_menu!=0))
 8018892:	4b42      	ldr	r3, [pc, #264]	; (801899c <Menu_GUI+0x120>)
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801889a:	429a      	cmp	r2, r3
 801889c:	d104      	bne.n	80188a8 <Menu_GUI+0x2c>
 801889e:	4b40      	ldr	r3, [pc, #256]	; (80189a0 <Menu_GUI+0x124>)
 80188a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d075      	beq.n	8018994 <Menu_GUI+0x118>
	{
		for(i=0;i<menu_size;i++)
 80188a8:	2300      	movs	r3, #0
 80188aa:	75fb      	strb	r3, [r7, #23]
 80188ac:	e063      	b.n	8018976 <Menu_GUI+0xfa>
		{
			if(active_string==i)
 80188ae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80188b2:	7dfb      	ldrb	r3, [r7, #23]
 80188b4:	429a      	cmp	r2, r3
 80188b6:	d12d      	bne.n	8018914 <Menu_GUI+0x98>
			{
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80188b8:	493a      	ldr	r1, [pc, #232]	; (80189a4 <Menu_GUI+0x128>)
 80188ba:	483b      	ldr	r0, [pc, #236]	; (80189a8 <Menu_GUI+0x12c>)
 80188bc:	f7fd f8e2 	bl	8015a84 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*10))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 80188c0:	7dfb      	ldrb	r3, [r7, #23]
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	4413      	add	r3, r2
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	461a      	mov	r2, r3
 80188ca:	f06f 0309 	mvn.w	r3, #9
 80188ce:	fb03 f302 	mul.w	r3, r3, r2
 80188d2:	33f0      	adds	r3, #240	; 0xf0
 80188d4:	105b      	asrs	r3, r3, #1
 80188d6:	b29a      	uxth	r2, r3
 80188d8:	89fb      	ldrh	r3, [r7, #14]
 80188da:	4413      	add	r3, r2
 80188dc:	b299      	uxth	r1, r3
 80188de:	7dfb      	ldrb	r3, [r7, #23]
 80188e0:	b29a      	uxth	r2, r3
 80188e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188e6:	b29b      	uxth	r3, r3
 80188e8:	fb12 f303 	smulbb	r3, r2, r3
 80188ec:	b29a      	uxth	r2, r3
 80188ee:	89bb      	ldrh	r3, [r7, #12]
 80188f0:	4413      	add	r3, r2
 80188f2:	b29a      	uxth	r2, r3
 80188f4:	4b2a      	ldr	r3, [pc, #168]	; (80189a0 <Menu_GUI+0x124>)
 80188f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	4413      	add	r3, r2
 80188fe:	b298      	uxth	r0, r3
 8018900:	7dfb      	ldrb	r3, [r7, #23]
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	68ba      	ldr	r2, [r7, #8]
 8018906:	4413      	add	r3, r2
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	4602      	mov	r2, r0
 801890c:	4826      	ldr	r0, [pc, #152]	; (80189a8 <Menu_GUI+0x12c>)
 801890e:	f7fd f817 	bl	8015940 <u8g2_DrawUTF8>
 8018912:	e02d      	b.n	8018970 <Menu_GUI+0xf4>
			}
			else
			{
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8018914:	4925      	ldr	r1, [pc, #148]	; (80189ac <Menu_GUI+0x130>)
 8018916:	4824      	ldr	r0, [pc, #144]	; (80189a8 <Menu_GUI+0x12c>)
 8018918:	f7fd f8b4 	bl	8015a84 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*9))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 801891c:	7dfb      	ldrb	r3, [r7, #23]
 801891e:	687a      	ldr	r2, [r7, #4]
 8018920:	4413      	add	r3, r2
 8018922:	781b      	ldrb	r3, [r3, #0]
 8018924:	461a      	mov	r2, r3
 8018926:	4613      	mov	r3, r2
 8018928:	075b      	lsls	r3, r3, #29
 801892a:	1a9b      	subs	r3, r3, r2
 801892c:	00db      	lsls	r3, r3, #3
 801892e:	1a9b      	subs	r3, r3, r2
 8018930:	33f0      	adds	r3, #240	; 0xf0
 8018932:	105b      	asrs	r3, r3, #1
 8018934:	b29a      	uxth	r2, r3
 8018936:	89fb      	ldrh	r3, [r7, #14]
 8018938:	4413      	add	r3, r2
 801893a:	b299      	uxth	r1, r3
 801893c:	7dfb      	ldrb	r3, [r7, #23]
 801893e:	b29a      	uxth	r2, r3
 8018940:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018944:	b29b      	uxth	r3, r3
 8018946:	fb12 f303 	smulbb	r3, r2, r3
 801894a:	b29a      	uxth	r2, r3
 801894c:	89bb      	ldrh	r3, [r7, #12]
 801894e:	4413      	add	r3, r2
 8018950:	b29a      	uxth	r2, r3
 8018952:	4b13      	ldr	r3, [pc, #76]	; (80189a0 <Menu_GUI+0x124>)
 8018954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018958:	b29b      	uxth	r3, r3
 801895a:	4413      	add	r3, r2
 801895c:	b298      	uxth	r0, r3
 801895e:	7dfb      	ldrb	r3, [r7, #23]
 8018960:	009b      	lsls	r3, r3, #2
 8018962:	68ba      	ldr	r2, [r7, #8]
 8018964:	4413      	add	r3, r2
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	4602      	mov	r2, r0
 801896a:	480f      	ldr	r0, [pc, #60]	; (80189a8 <Menu_GUI+0x12c>)
 801896c:	f7fc ffe8 	bl	8015940 <u8g2_DrawUTF8>
		for(i=0;i<menu_size;i++)
 8018970:	7dfb      	ldrb	r3, [r7, #23]
 8018972:	3301      	adds	r3, #1
 8018974:	75fb      	strb	r3, [r7, #23]
 8018976:	7dfa      	ldrb	r2, [r7, #23]
 8018978:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801897c:	429a      	cmp	r2, r3
 801897e:	d396      	bcc.n	80188ae <Menu_GUI+0x32>
			}
		}
		old_active_string=active_string;
 8018980:	4a06      	ldr	r2, [pc, #24]	; (801899c <Menu_GUI+0x120>)
 8018982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018986:	7013      	strb	r3, [r2, #0]

		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8018988:	4807      	ldr	r0, [pc, #28]	; (80189a8 <Menu_GUI+0x12c>)
 801898a:	f7fc fa3e 	bl	8014e0a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 801898e:	4806      	ldr	r0, [pc, #24]	; (80189a8 <Menu_GUI+0x12c>)
 8018990:	f7fc f9c8 	bl	8014d24 <u8g2_ClearBuffer>
	}
}
 8018994:	bf00      	nop
 8018996:	3718      	adds	r7, #24
 8018998:	46bd      	mov	sp, r7
 801899a:	bd80      	pop	{r7, pc}
 801899c:	20000460 	.word	0x20000460
 80189a0:	20001d1a 	.word	0x20001d1a
 80189a4:	080271b0 	.word	0x080271b0
 80189a8:	20002098 	.word	0x20002098
 80189ac:	08025b84 	.word	0x08025b84

080189b0 <Parameter_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Parameter_screen_func(void)
{ Menu_GUI(0, 40, menu_parameter, menu_parameter_size, 17, Menu_parameter_num, Menu_num); }
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b084      	sub	sp, #16
 80189b4:	af04      	add	r7, sp, #16
 80189b6:	4b08      	ldr	r3, [pc, #32]	; (80189d8 <Parameter_screen_func+0x28>)
 80189b8:	781b      	ldrb	r3, [r3, #0]
 80189ba:	9302      	str	r3, [sp, #8]
 80189bc:	2307      	movs	r3, #7
 80189be:	9301      	str	r3, [sp, #4]
 80189c0:	2311      	movs	r3, #17
 80189c2:	9300      	str	r3, [sp, #0]
 80189c4:	4b05      	ldr	r3, [pc, #20]	; (80189dc <Parameter_screen_func+0x2c>)
 80189c6:	4a06      	ldr	r2, [pc, #24]	; (80189e0 <Parameter_screen_func+0x30>)
 80189c8:	2128      	movs	r1, #40	; 0x28
 80189ca:	2000      	movs	r0, #0
 80189cc:	f7ff ff56 	bl	801887c <Menu_GUI>
 80189d0:	bf00      	nop
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
 80189d6:	bf00      	nop
 80189d8:	20000461 	.word	0x20000461
 80189dc:	0802b560 	.word	0x0802b560
 80189e0:	20000488 	.word	0x20000488

080189e4 <Parameter_screen_S9>:



// MENU
void Parameter_screen_S9(void)
{
 80189e4:	b480      	push	{r7}
 80189e6:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80189e8:	4b06      	ldr	r3, [pc, #24]	; (8018a04 <Parameter_screen_S9+0x20>)
 80189ea:	2204      	movs	r2, #4
 80189ec:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80189ee:	4b06      	ldr	r3, [pc, #24]	; (8018a08 <Parameter_screen_S9+0x24>)
 80189f0:	22ff      	movs	r2, #255	; 0xff
 80189f2:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 80189f4:	4b05      	ldr	r3, [pc, #20]	; (8018a0c <Parameter_screen_S9+0x28>)
 80189f6:	2202      	movs	r2, #2
 80189f8:	701a      	strb	r2, [r3, #0]
}
 80189fa:	bf00      	nop
 80189fc:	46bd      	mov	sp, r7
 80189fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a02:	4770      	bx	lr
 8018a04:	2000004c 	.word	0x2000004c
 8018a08:	20000460 	.word	0x20000460
 8018a0c:	20000461 	.word	0x20000461

08018a10 <Parameter_screen_S4>:


// ENTER
void Parameter_screen_S4(void)
{
 8018a10:	b480      	push	{r7}
 8018a12:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018a14:	4b1c      	ldr	r3, [pc, #112]	; (8018a88 <Parameter_screen_S4+0x78>)
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	2b06      	cmp	r3, #6
 8018a1a:	d82d      	bhi.n	8018a78 <Parameter_screen_S4+0x68>
 8018a1c:	a201      	add	r2, pc, #4	; (adr r2, 8018a24 <Parameter_screen_S4+0x14>)
 8018a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a22:	bf00      	nop
 8018a24:	08018a41 	.word	0x08018a41
 8018a28:	08018a79 	.word	0x08018a79
 8018a2c:	08018a4f 	.word	0x08018a4f
 8018a30:	08018a5d 	.word	0x08018a5d
 8018a34:	08018a79 	.word	0x08018a79
 8018a38:	08018a6b 	.word	0x08018a6b
 8018a3c:	08018a79 	.word	0x08018a79
	{
		// ДИСПЛЕЙ
		case 0: screen=Display_options_screen; old_active_string=0xFF; break;
 8018a40:	4b12      	ldr	r3, [pc, #72]	; (8018a8c <Parameter_screen_S4+0x7c>)
 8018a42:	2205      	movs	r2, #5
 8018a44:	701a      	strb	r2, [r3, #0]
 8018a46:	4b12      	ldr	r3, [pc, #72]	; (8018a90 <Parameter_screen_S4+0x80>)
 8018a48:	22ff      	movs	r2, #255	; 0xff
 8018a4a:	701a      	strb	r2, [r3, #0]
 8018a4c:	e014      	b.n	8018a78 <Parameter_screen_S4+0x68>
		// ГРОМКОСТЬ
		case 1:
		break;
		// ДАТА И ВРЕМЯ
		case 2: screen=RTC_screen; old_active_string=0xFF; break;
 8018a4e:	4b0f      	ldr	r3, [pc, #60]	; (8018a8c <Parameter_screen_S4+0x7c>)
 8018a50:	2209      	movs	r2, #9
 8018a52:	701a      	strb	r2, [r3, #0]
 8018a54:	4b0e      	ldr	r3, [pc, #56]	; (8018a90 <Parameter_screen_S4+0x80>)
 8018a56:	22ff      	movs	r2, #255	; 0xff
 8018a58:	701a      	strb	r2, [r3, #0]
 8018a5a:	e00d      	b.n	8018a78 <Parameter_screen_S4+0x68>
		// АВТООТКЛЮЧЕНИЕ
		case 3: screen=Auto_Off_option_screen; old_active_string=0xFF; break;
 8018a5c:	4b0b      	ldr	r3, [pc, #44]	; (8018a8c <Parameter_screen_S4+0x7c>)
 8018a5e:	220a      	movs	r2, #10
 8018a60:	701a      	strb	r2, [r3, #0]
 8018a62:	4b0b      	ldr	r3, [pc, #44]	; (8018a90 <Parameter_screen_S4+0x80>)
 8018a64:	22ff      	movs	r2, #255	; 0xff
 8018a66:	701a      	strb	r2, [r3, #0]
 8018a68:	e006      	b.n	8018a78 <Parameter_screen_S4+0x68>
		// НАСТРОЙКА ПОДКЛЮЧЕНИЯ
		case 4: break;
		// НАСТРОЙКА АЦП
		case 5: screen=ADC_options_screen; old_active_string=0xFF; break;
 8018a6a:	4b08      	ldr	r3, [pc, #32]	; (8018a8c <Parameter_screen_S4+0x7c>)
 8018a6c:	2206      	movs	r2, #6
 8018a6e:	701a      	strb	r2, [r3, #0]
 8018a70:	4b07      	ldr	r3, [pc, #28]	; (8018a90 <Parameter_screen_S4+0x80>)
 8018a72:	22ff      	movs	r2, #255	; 0xff
 8018a74:	701a      	strb	r2, [r3, #0]
 8018a76:	bf00      	nop
		// РЕЧЕВОЕ ИНФОРМИРОВАНИЕ
		case 6: break;
	}
	edit_param=0;
 8018a78:	4b06      	ldr	r3, [pc, #24]	; (8018a94 <Parameter_screen_S4+0x84>)
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	701a      	strb	r2, [r3, #0]
}
 8018a7e:	bf00      	nop
 8018a80:	46bd      	mov	sp, r7
 8018a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a86:	4770      	bx	lr
 8018a88:	20000461 	.word	0x20000461
 8018a8c:	2000004c 	.word	0x2000004c
 8018a90:	20000460 	.word	0x20000460
 8018a94:	2000091c 	.word	0x2000091c

08018a98 <Parameter_screen_S7>:

// DOWN
void Parameter_screen_S7(void)
{
 8018a98:	b480      	push	{r7}
 8018a9a:	af00      	add	r7, sp, #0
		if(Menu_num>0)
 8018a9c:	4b09      	ldr	r3, [pc, #36]	; (8018ac4 <Parameter_screen_S7+0x2c>)
 8018a9e:	781b      	ldrb	r3, [r3, #0]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d006      	beq.n	8018ab2 <Parameter_screen_S7+0x1a>
		{
			Menu_num--;
 8018aa4:	4b07      	ldr	r3, [pc, #28]	; (8018ac4 <Parameter_screen_S7+0x2c>)
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	3b01      	subs	r3, #1
 8018aaa:	b2da      	uxtb	r2, r3
 8018aac:	4b05      	ldr	r3, [pc, #20]	; (8018ac4 <Parameter_screen_S7+0x2c>)
 8018aae:	701a      	strb	r2, [r3, #0]
			//float_menu=-2;
		}
		else Menu_num=Menu_parameter_num-1;
}
 8018ab0:	e002      	b.n	8018ab8 <Parameter_screen_S7+0x20>
		else Menu_num=Menu_parameter_num-1;
 8018ab2:	4b04      	ldr	r3, [pc, #16]	; (8018ac4 <Parameter_screen_S7+0x2c>)
 8018ab4:	2206      	movs	r2, #6
 8018ab6:	701a      	strb	r2, [r3, #0]
}
 8018ab8:	bf00      	nop
 8018aba:	46bd      	mov	sp, r7
 8018abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac0:	4770      	bx	lr
 8018ac2:	bf00      	nop
 8018ac4:	20000461 	.word	0x20000461

08018ac8 <Parameter_screen_S6>:

// UP
void Parameter_screen_S6(void)
{
 8018ac8:	b480      	push	{r7}
 8018aca:	af00      	add	r7, sp, #0
		if(Menu_num<(Menu_parameter_num-1))
 8018acc:	4b09      	ldr	r3, [pc, #36]	; (8018af4 <Parameter_screen_S6+0x2c>)
 8018ace:	781b      	ldrb	r3, [r3, #0]
 8018ad0:	2b05      	cmp	r3, #5
 8018ad2:	d806      	bhi.n	8018ae2 <Parameter_screen_S6+0x1a>
		{
			Menu_num++;
 8018ad4:	4b07      	ldr	r3, [pc, #28]	; (8018af4 <Parameter_screen_S6+0x2c>)
 8018ad6:	781b      	ldrb	r3, [r3, #0]
 8018ad8:	3301      	adds	r3, #1
 8018ada:	b2da      	uxtb	r2, r3
 8018adc:	4b05      	ldr	r3, [pc, #20]	; (8018af4 <Parameter_screen_S6+0x2c>)
 8018ade:	701a      	strb	r2, [r3, #0]
			//float_menu=2;
		}
		else Menu_num=0;
}
 8018ae0:	e002      	b.n	8018ae8 <Parameter_screen_S6+0x20>
		else Menu_num=0;
 8018ae2:	4b04      	ldr	r3, [pc, #16]	; (8018af4 <Parameter_screen_S6+0x2c>)
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	701a      	strb	r2, [r3, #0]
}
 8018ae8:	bf00      	nop
 8018aea:	46bd      	mov	sp, r7
 8018aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af0:	4770      	bx	lr
 8018af2:	bf00      	nop
 8018af4:	20000461 	.word	0x20000461

08018af8 <Option_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Option_screen_func(void)
{ Menu_GUI(0, 16, menu_option, menu_option_size, 17, Menu_option_num, Menu_num); }
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b084      	sub	sp, #16
 8018afc:	af04      	add	r7, sp, #16
 8018afe:	4b08      	ldr	r3, [pc, #32]	; (8018b20 <Option_screen_func+0x28>)
 8018b00:	781b      	ldrb	r3, [r3, #0]
 8018b02:	9302      	str	r3, [sp, #8]
 8018b04:	2309      	movs	r3, #9
 8018b06:	9301      	str	r3, [sp, #4]
 8018b08:	2311      	movs	r3, #17
 8018b0a:	9300      	str	r3, [sp, #0]
 8018b0c:	4b05      	ldr	r3, [pc, #20]	; (8018b24 <Option_screen_func+0x2c>)
 8018b0e:	4a06      	ldr	r2, [pc, #24]	; (8018b28 <Option_screen_func+0x30>)
 8018b10:	2110      	movs	r1, #16
 8018b12:	2000      	movs	r0, #0
 8018b14:	f7ff feb2 	bl	801887c <Menu_GUI>
 8018b18:	bf00      	nop
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}
 8018b1e:	bf00      	nop
 8018b20:	20000461 	.word	0x20000461
 8018b24:	0802b488 	.word	0x0802b488
 8018b28:	20000464 	.word	0x20000464

08018b2c <Option_screen_S9>:


// MENU
void Option_screen_S9(void)
{
 8018b2c:	b480      	push	{r7}
 8018b2e:	af00      	add	r7, sp, #0
		screen=Main_screen;
 8018b30:	4b05      	ldr	r3, [pc, #20]	; (8018b48 <Option_screen_S9+0x1c>)
 8018b32:	2201      	movs	r2, #1
 8018b34:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8018b36:	4b05      	ldr	r3, [pc, #20]	; (8018b4c <Option_screen_S9+0x20>)
 8018b38:	22ff      	movs	r2, #255	; 0xff
 8018b3a:	701a      	strb	r2, [r3, #0]
}
 8018b3c:	bf00      	nop
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b44:	4770      	bx	lr
 8018b46:	bf00      	nop
 8018b48:	2000004c 	.word	0x2000004c
 8018b4c:	20000460 	.word	0x20000460

08018b50 <Option_screen_S7>:

// DOWN
void Option_screen_S7(void)
{
 8018b50:	b480      	push	{r7}
 8018b52:	af00      	add	r7, sp, #0
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018b54:	4b09      	ldr	r3, [pc, #36]	; (8018b7c <Option_screen_S7+0x2c>)
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d006      	beq.n	8018b6a <Option_screen_S7+0x1a>
 8018b5c:	4b07      	ldr	r3, [pc, #28]	; (8018b7c <Option_screen_S7+0x2c>)
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	3b01      	subs	r3, #1
 8018b62:	b2da      	uxtb	r2, r3
 8018b64:	4b05      	ldr	r3, [pc, #20]	; (8018b7c <Option_screen_S7+0x2c>)
 8018b66:	701a      	strb	r2, [r3, #0]
}
 8018b68:	e002      	b.n	8018b70 <Option_screen_S7+0x20>
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018b6a:	4b04      	ldr	r3, [pc, #16]	; (8018b7c <Option_screen_S7+0x2c>)
 8018b6c:	2208      	movs	r2, #8
 8018b6e:	701a      	strb	r2, [r3, #0]
}
 8018b70:	bf00      	nop
 8018b72:	46bd      	mov	sp, r7
 8018b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b78:	4770      	bx	lr
 8018b7a:	bf00      	nop
 8018b7c:	20000461 	.word	0x20000461

08018b80 <Option_screen_S6>:

// UP
void Option_screen_S6(void)
{
 8018b80:	b480      	push	{r7}
 8018b82:	af00      	add	r7, sp, #0
		if(++Menu_num==Menu_option_num)Menu_num=0;
 8018b84:	4b08      	ldr	r3, [pc, #32]	; (8018ba8 <Option_screen_S6+0x28>)
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	b2da      	uxtb	r2, r3
 8018b8c:	4b06      	ldr	r3, [pc, #24]	; (8018ba8 <Option_screen_S6+0x28>)
 8018b8e:	701a      	strb	r2, [r3, #0]
 8018b90:	4b05      	ldr	r3, [pc, #20]	; (8018ba8 <Option_screen_S6+0x28>)
 8018b92:	781b      	ldrb	r3, [r3, #0]
 8018b94:	2b09      	cmp	r3, #9
 8018b96:	d102      	bne.n	8018b9e <Option_screen_S6+0x1e>
 8018b98:	4b03      	ldr	r3, [pc, #12]	; (8018ba8 <Option_screen_S6+0x28>)
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	701a      	strb	r2, [r3, #0]
}
 8018b9e:	bf00      	nop
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba6:	4770      	bx	lr
 8018ba8:	20000461 	.word	0x20000461

08018bac <Option_screen_S4>:

// ENTER
void Option_screen_S4(void)
{
 8018bac:	b480      	push	{r7}
 8018bae:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018bb0:	4b1b      	ldr	r3, [pc, #108]	; (8018c20 <Option_screen_S4+0x74>)
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	2b08      	cmp	r3, #8
 8018bb6:	d825      	bhi.n	8018c04 <Option_screen_S4+0x58>
 8018bb8:	a201      	add	r2, pc, #4	; (adr r2, 8018bc0 <Option_screen_S4+0x14>)
 8018bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bbe:	bf00      	nop
 8018bc0:	08018be5 	.word	0x08018be5
 8018bc4:	08018c05 	.word	0x08018c05
 8018bc8:	08018bed 	.word	0x08018bed
 8018bcc:	08018bf5 	.word	0x08018bf5
 8018bd0:	08018c05 	.word	0x08018c05
 8018bd4:	08018bfd 	.word	0x08018bfd
 8018bd8:	08018c05 	.word	0x08018c05
 8018bdc:	08018c05 	.word	0x08018c05
 8018be0:	08018c05 	.word	0x08018c05
	{
		// ИЗМЕРЕНИЕ
		case 0: screen=Measure_options_screen; break;
 8018be4:	4b0f      	ldr	r3, [pc, #60]	; (8018c24 <Option_screen_S4+0x78>)
 8018be6:	2207      	movs	r2, #7
 8018be8:	701a      	strb	r2, [r3, #0]
 8018bea:	e00b      	b.n	8018c04 <Option_screen_S4+0x58>
		// 24 ВОЛЬТА
		case 1: break;
		// ПАРАМЕТРЫ
		case 2: screen=Parameter_screen; break;
 8018bec:	4b0d      	ldr	r3, [pc, #52]	; (8018c24 <Option_screen_S4+0x78>)
 8018bee:	2208      	movs	r2, #8
 8018bf0:	701a      	strb	r2, [r3, #0]
 8018bf2:	e007      	b.n	8018c04 <Option_screen_S4+0x58>
		// О ПРИБОРЕ
		case 3: screen=About_options_screen; break;
 8018bf4:	4b0b      	ldr	r3, [pc, #44]	; (8018c24 <Option_screen_S4+0x78>)
 8018bf6:	220b      	movs	r2, #11
 8018bf8:	701a      	strb	r2, [r3, #0]
 8018bfa:	e003      	b.n	8018c04 <Option_screen_S4+0x58>
		// КАЛИБРОВКА
		case 4: break;
		// ЛОГГИРОВАНИЕ
		case 5: screen=Logging_options_screen; break;
 8018bfc:	4b09      	ldr	r3, [pc, #36]	; (8018c24 <Option_screen_S4+0x78>)
 8018bfe:	220c      	movs	r2, #12
 8018c00:	701a      	strb	r2, [r3, #0]
 8018c02:	bf00      	nop
		// ТЕХ ПАРАМЕТРЫ
		case 7: break;
		// СЕРВИСНОЕ МЕНЮ
		case 8: break;
	}
	Menu_num=0;
 8018c04:	4b06      	ldr	r3, [pc, #24]	; (8018c20 <Option_screen_S4+0x74>)
 8018c06:	2200      	movs	r2, #0
 8018c08:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018c0a:	4b07      	ldr	r3, [pc, #28]	; (8018c28 <Option_screen_S4+0x7c>)
 8018c0c:	22ff      	movs	r2, #255	; 0xff
 8018c0e:	701a      	strb	r2, [r3, #0]
	edit_param=0;
 8018c10:	4b06      	ldr	r3, [pc, #24]	; (8018c2c <Option_screen_S4+0x80>)
 8018c12:	2200      	movs	r2, #0
 8018c14:	701a      	strb	r2, [r3, #0]
}
 8018c16:	bf00      	nop
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1e:	4770      	bx	lr
 8018c20:	20000461 	.word	0x20000461
 8018c24:	2000004c 	.word	0x2000004c
 8018c28:	20000460 	.word	0x20000460
 8018c2c:	2000091c 	.word	0x2000091c

08018c30 <menu_timer>:
//
//------------------------------------------------------------------------------------------------------------------

uint8_t menu_delay = 0;
void menu_timer(void)
{
 8018c30:	b480      	push	{r7}
 8018c32:	af00      	add	r7, sp, #0
	if(++menu_delay==25)
 8018c34:	4b16      	ldr	r3, [pc, #88]	; (8018c90 <menu_timer+0x60>)
 8018c36:	781b      	ldrb	r3, [r3, #0]
 8018c38:	3301      	adds	r3, #1
 8018c3a:	b2da      	uxtb	r2, r3
 8018c3c:	4b14      	ldr	r3, [pc, #80]	; (8018c90 <menu_timer+0x60>)
 8018c3e:	701a      	strb	r2, [r3, #0]
 8018c40:	4b13      	ldr	r3, [pc, #76]	; (8018c90 <menu_timer+0x60>)
 8018c42:	781b      	ldrb	r3, [r3, #0]
 8018c44:	2b19      	cmp	r3, #25
 8018c46:	d11e      	bne.n	8018c86 <menu_timer+0x56>
	{
		if(float_menu>0)float_menu--;
 8018c48:	4b12      	ldr	r3, [pc, #72]	; (8018c94 <menu_timer+0x64>)
 8018c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	dd08      	ble.n	8018c64 <menu_timer+0x34>
 8018c52:	4b10      	ldr	r3, [pc, #64]	; (8018c94 <menu_timer+0x64>)
 8018c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	3b01      	subs	r3, #1
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	b21a      	sxth	r2, r3
 8018c60:	4b0c      	ldr	r3, [pc, #48]	; (8018c94 <menu_timer+0x64>)
 8018c62:	801a      	strh	r2, [r3, #0]
		if(float_menu<0)float_menu++;
 8018c64:	4b0b      	ldr	r3, [pc, #44]	; (8018c94 <menu_timer+0x64>)
 8018c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	da08      	bge.n	8018c80 <menu_timer+0x50>
 8018c6e:	4b09      	ldr	r3, [pc, #36]	; (8018c94 <menu_timer+0x64>)
 8018c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c74:	b29b      	uxth	r3, r3
 8018c76:	3301      	adds	r3, #1
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	b21a      	sxth	r2, r3
 8018c7c:	4b05      	ldr	r3, [pc, #20]	; (8018c94 <menu_timer+0x64>)
 8018c7e:	801a      	strh	r2, [r3, #0]
		menu_delay=0;
 8018c80:	4b03      	ldr	r3, [pc, #12]	; (8018c90 <menu_timer+0x60>)
 8018c82:	2200      	movs	r2, #0
 8018c84:	701a      	strb	r2, [r3, #0]
	}
}
 8018c86:	bf00      	nop
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8e:	4770      	bx	lr
 8018c90:	20001d1c 	.word	0x20001d1c
 8018c94:	20001d1a 	.word	0x20001d1a

08018c98 <MX_USB_DEVICE_Init>:




void MX_USB_DEVICE_Init(void)
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	490a      	ldr	r1, [pc, #40]	; (8018cc8 <MX_USB_DEVICE_Init+0x30>)
 8018ca0:	480a      	ldr	r0, [pc, #40]	; (8018ccc <MX_USB_DEVICE_Init+0x34>)
 8018ca2:	f001 f965 	bl	8019f70 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC_CDC);
 8018ca6:	490a      	ldr	r1, [pc, #40]	; (8018cd0 <MX_USB_DEVICE_Init+0x38>)
 8018ca8:	4808      	ldr	r0, [pc, #32]	; (8018ccc <MX_USB_DEVICE_Init+0x34>)
 8018caa:	f001 f995 	bl	8019fd8 <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8018cae:	4909      	ldr	r1, [pc, #36]	; (8018cd4 <MX_USB_DEVICE_Init+0x3c>)
 8018cb0:	4806      	ldr	r0, [pc, #24]	; (8018ccc <MX_USB_DEVICE_Init+0x34>)
 8018cb2:	f000 fb3c 	bl	801932e <USBD_CDC_RegisterInterface>
	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8018cb6:	4908      	ldr	r1, [pc, #32]	; (8018cd8 <MX_USB_DEVICE_Init+0x40>)
 8018cb8:	4804      	ldr	r0, [pc, #16]	; (8018ccc <MX_USB_DEVICE_Init+0x34>)
 8018cba:	f002 fd9d 	bl	801b7f8 <USBD_MSC_RegisterStorage>
	USBD_Start(&hUsbDeviceFS);
 8018cbe:	4803      	ldr	r0, [pc, #12]	; (8018ccc <MX_USB_DEVICE_Init+0x34>)
 8018cc0:	f001 f9b1 	bl	801a026 <USBD_Start>
}
 8018cc4:	bf00      	nop
 8018cc6:	bd80      	pop	{r7, pc}
 8018cc8:	20000628 	.word	0x20000628
 8018ccc:	2000885c 	.word	0x2000885c
 8018cd0:	200004a4 	.word	0x200004a4
 8018cd4:	20000614 	.word	0x20000614
 8018cd8:	200006cc 	.word	0x200006cc

08018cdc <USBD_MSC_CDC_GetDeviceQualifierDescriptor>:
};



uint8_t *USBD_MSC_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018cdc:	b480      	push	{r7}
 8018cde:	b083      	sub	sp, #12
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_DeviceQualifierDesc);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	220a      	movs	r2, #10
 8018ce8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_DeviceQualifierDesc;
 8018cea:	4b03      	ldr	r3, [pc, #12]	; (8018cf8 <USBD_MSC_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018cec:	4618      	mov	r0, r3
 8018cee:	370c      	adds	r7, #12
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf6:	4770      	bx	lr
 8018cf8:	20000608 	.word	0x20000608

08018cfc <USBD_MSC_CDC_GetOtherSpeedCfgDesc>:


uint8_t *USBD_MSC_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018cfc:	b480      	push	{r7}
 8018cfe:	b083      	sub	sp, #12
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_OtherSpeedCfgDesc);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2262      	movs	r2, #98	; 0x62
 8018d08:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_OtherSpeedCfgDesc;
 8018d0a:	4b03      	ldr	r3, [pc, #12]	; (8018d18 <USBD_MSC_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	370c      	adds	r7, #12
 8018d10:	46bd      	mov	sp, r7
 8018d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d16:	4770      	bx	lr
 8018d18:	200005a4 	.word	0x200005a4

08018d1c <USBD_MSC_CDC_GetHSCfgDesc>:

uint8_t *USBD_MSC_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	b083      	sub	sp, #12
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgHSDesc);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2262      	movs	r2, #98	; 0x62
 8018d28:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgHSDesc;
 8018d2a:	4b03      	ldr	r3, [pc, #12]	; (8018d38 <USBD_MSC_CDC_GetHSCfgDesc+0x1c>)
}
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	370c      	adds	r7, #12
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr
 8018d38:	200004dc 	.word	0x200004dc

08018d3c <USBD_MSC_CDC_GetFSCfgDesc>:


uint8_t *USBD_MSC_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018d3c:	b480      	push	{r7}
 8018d3e:	b083      	sub	sp, #12
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgFSDesc);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2262      	movs	r2, #98	; 0x62
 8018d48:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgFSDesc;
 8018d4a:	4b03      	ldr	r3, [pc, #12]	; (8018d58 <USBD_MSC_CDC_GetFSCfgDesc+0x1c>)
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	370c      	adds	r7, #12
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr
 8018d58:	20000540 	.word	0x20000540

08018d5c <USBD_MSC_CDC_Init>:


// Инициализация композитного устройства
static uint8_t  USBD_MSC_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b084      	sub	sp, #16
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	460b      	mov	r3, r1
 8018d66:	70fb      	strb	r3, [r7, #3]
	/* MSC initialization */
	uint8_t ret = USBD_MSC_Init (pdev, cfgidx);
 8018d68:	78fb      	ldrb	r3, [r7, #3]
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	6878      	ldr	r0, [r7, #4]
 8018d6e:	f002 fbb8 	bl	801b4e2 <USBD_MSC_Init>
 8018d72:	4603      	mov	r3, r0
 8018d74:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018d76:	7bfb      	ldrb	r3, [r7, #15]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d001      	beq.n	8018d80 <USBD_MSC_CDC_Init+0x24>
			return ret;
 8018d7c:	7bfb      	ldrb	r3, [r7, #15]
 8018d7e:	e00c      	b.n	8018d9a <USBD_MSC_CDC_Init+0x3e>

	/* CDC initialization */
	ret = USBD_CDC_Init (pdev, cfgidx);
 8018d80:	78fb      	ldrb	r3, [r7, #3]
 8018d82:	4619      	mov	r1, r3
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f000 f88b 	bl	8018ea0 <USBD_CDC_Init>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018d8e:	7bfb      	ldrb	r3, [r7, #15]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d001      	beq.n	8018d98 <USBD_MSC_CDC_Init+0x3c>
			return ret;
 8018d94:	7bfb      	ldrb	r3, [r7, #15]
 8018d96:	e000      	b.n	8018d9a <USBD_MSC_CDC_Init+0x3e>

	return USBD_OK;
 8018d98:	2300      	movs	r3, #0
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3710      	adds	r7, #16
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd80      	pop	{r7, pc}

08018da2 <USBD_MSC_CDC_DeInit>:


// Деинициализация композитного устройства
static uint8_t  USBD_MSC_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018da2:	b580      	push	{r7, lr}
 8018da4:	b082      	sub	sp, #8
 8018da6:	af00      	add	r7, sp, #0
 8018da8:	6078      	str	r0, [r7, #4]
 8018daa:	460b      	mov	r3, r1
 8018dac:	70fb      	strb	r3, [r7, #3]
       	/* MSC De-initialization */
       	USBD_MSC_DeInit(pdev, cfgidx);
 8018dae:	78fb      	ldrb	r3, [r7, #3]
 8018db0:	4619      	mov	r1, r3
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f002 fbe2 	bl	801b57c <USBD_MSC_DeInit>

       	/* CDC De-initialization */
       	USBD_CDC_DeInit(pdev, cfgidx);
 8018db8:	78fb      	ldrb	r3, [r7, #3]
 8018dba:	4619      	mov	r1, r3
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	f000 f8ed 	bl	8018f9c <USBD_CDC_DeInit>

       	return USBD_OK;
 8018dc2:	2300      	movs	r3, #0
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	3708      	adds	r7, #8
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	bd80      	pop	{r7, pc}

08018dcc <USBD_MSC_CDC_Setup>:



// Setup для композитного устройства
static uint8_t  USBD_MSC_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b082      	sub	sp, #8
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
 8018dd4:	6039      	str	r1, [r7, #0]
	// Route requests to MSC interface or its endpoints to MSC class implementaion
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	781b      	ldrb	r3, [r3, #0]
 8018dda:	f003 0303 	and.w	r3, r3, #3
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d103      	bne.n	8018dea <USBD_MSC_CDC_Setup+0x1e>
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	889b      	ldrh	r3, [r3, #4]
 8018de6:	2b01      	cmp	r3, #1
 8018de8:	d00b      	beq.n	8018e02 <USBD_MSC_CDC_Setup+0x36>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	781b      	ldrb	r3, [r3, #0]
 8018dee:	f003 0303 	and.w	r3, r3, #3
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018df2:	2b02      	cmp	r3, #2
 8018df4:	d10b      	bne.n	8018e0e <USBD_MSC_CDC_Setup+0x42>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	889b      	ldrh	r3, [r3, #4]
 8018dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018dfe:	2b01      	cmp	r3, #1
 8018e00:	d105      	bne.n	8018e0e <USBD_MSC_CDC_Setup+0x42>
	{
		return USBD_MSC_Setup(pdev, req);
 8018e02:	6839      	ldr	r1, [r7, #0]
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f002 fbe5 	bl	801b5d4 <USBD_MSC_Setup>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	e004      	b.n	8018e18 <USBD_MSC_CDC_Setup+0x4c>
	}

	return USBD_CDC_Setup(pdev, req);
 8018e0e:	6839      	ldr	r1, [r7, #0]
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	f000 f8ff 	bl	8019014 <USBD_CDC_Setup>
 8018e16:	4603      	mov	r3, r0
}
 8018e18:	4618      	mov	r0, r3
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}

08018e20 <USBD_MSC_CDC_DataIn>:


// Data IN для композитного устройства
static uint8_t  USBD_MSC_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b082      	sub	sp, #8
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
 8018e28:	460b      	mov	r3, r1
 8018e2a:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018e2c:	78fb      	ldrb	r3, [r7, #3]
 8018e2e:	2b01      	cmp	r3, #1
 8018e30:	d106      	bne.n	8018e40 <USBD_MSC_CDC_DataIn+0x20>
		return USBD_MSC_DataIn(pdev, epnum);
 8018e32:	78fb      	ldrb	r3, [r7, #3]
 8018e34:	4619      	mov	r1, r3
 8018e36:	6878      	ldr	r0, [r7, #4]
 8018e38:	f002 fcbe 	bl	801b7b8 <USBD_MSC_DataIn>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	e005      	b.n	8018e4c <USBD_MSC_CDC_DataIn+0x2c>

	return USBD_CDC_DataIn(pdev, epnum);
 8018e40:	78fb      	ldrb	r3, [r7, #3]
 8018e42:	4619      	mov	r1, r3
 8018e44:	6878      	ldr	r0, [r7, #4]
 8018e46:	f000 f9b3 	bl	80191b0 <USBD_CDC_DataIn>
 8018e4a:	4603      	mov	r3, r0
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	3708      	adds	r7, #8
 8018e50:	46bd      	mov	sp, r7
 8018e52:	bd80      	pop	{r7, pc}

08018e54 <USBD_MSC_CDC_DataOut>:


// Data OUT для композитного устройства
static uint8_t  USBD_MSC_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
 8018e5c:	460b      	mov	r3, r1
 8018e5e:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018e60:	78fb      	ldrb	r3, [r7, #3]
 8018e62:	2b01      	cmp	r3, #1
 8018e64:	d106      	bne.n	8018e74 <USBD_MSC_CDC_DataOut+0x20>
		return USBD_MSC_DataOut(pdev, epnum);
 8018e66:	78fb      	ldrb	r3, [r7, #3]
 8018e68:	4619      	mov	r1, r3
 8018e6a:	6878      	ldr	r0, [r7, #4]
 8018e6c:	f002 fcb4 	bl	801b7d8 <USBD_MSC_DataOut>
 8018e70:	4603      	mov	r3, r0
 8018e72:	e005      	b.n	8018e80 <USBD_MSC_CDC_DataOut+0x2c>

	return USBD_CDC_DataOut(pdev, epnum);
 8018e74:	78fb      	ldrb	r3, [r7, #3]
 8018e76:	4619      	mov	r1, r3
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 f9fe 	bl	801927a <USBD_CDC_DataOut>
 8018e7e:	4603      	mov	r3, r0
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3708      	adds	r7, #8
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}

08018e88 <USBD_MSC_CDC_EP0_RxReady>:


// Обработчик приема EP0
static uint8_t  USBD_MSC_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
    	return USBD_CDC_EP0_RxReady(pdev);
 8018e90:	6878      	ldr	r0, [r7, #4]
 8018e92:	f000 fa1d 	bl	80192d0 <USBD_CDC_EP0_RxReady>
 8018e96:	4603      	mov	r3, r0
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3708      	adds	r7, #8
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}

08018ea0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b084      	sub	sp, #16
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	460b      	mov	r3, r1
 8018eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hcdc;


  hcdc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 8018eac:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8018eb0:	f001 f840 	bl	8019f34 <USBD_static_malloc>
 8018eb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d105      	bne.n	8018ec8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassDataCDC = NULL;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    return (uint8_t)USBD_EMEM;
 8018ec4:	2302      	movs	r3, #2
 8018ec6:	e065      	b.n	8018f94 <USBD_CDC_Init+0xf4>
  }

  pdev->pClassDataCDC = (void *)hcdc;
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	68fa      	ldr	r2, [r7, #12]
 8018ecc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	7c1b      	ldrb	r3, [r3, #16]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d118      	bne.n	8018f0a <USBD_CDC_Init+0x6a>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018ed8:	2340      	movs	r3, #64	; 0x40
 8018eda:	2202      	movs	r2, #2
 8018edc:	2183      	movs	r1, #131	; 0x83
 8018ede:	6878      	ldr	r0, [r7, #4]
 8018ee0:	f000 fdde 	bl	8019aa0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2201      	movs	r2, #1
 8018ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018eec:	2340      	movs	r3, #64	; 0x40
 8018eee:	2202      	movs	r2, #2
 8018ef0:	2103      	movs	r1, #3
 8018ef2:	6878      	ldr	r0, [r7, #4]
 8018ef4:	f000 fdd4 	bl	8019aa0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2201      	movs	r2, #1
 8018efc:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2264      	movs	r2, #100	; 0x64
 8018f04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8018f08:	e017      	b.n	8018f3a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018f0a:	2340      	movs	r3, #64	; 0x40
 8018f0c:	2202      	movs	r2, #2
 8018f0e:	2183      	movs	r1, #131	; 0x83
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	f000 fdc5 	bl	8019aa0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	2201      	movs	r2, #1
 8018f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018f1e:	2340      	movs	r3, #64	; 0x40
 8018f20:	2202      	movs	r2, #2
 8018f22:	2103      	movs	r1, #3
 8018f24:	6878      	ldr	r0, [r7, #4]
 8018f26:	f000 fdbb 	bl	8019aa0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	2264      	movs	r2, #100	; 0x64
 8018f36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018f3a:	2340      	movs	r3, #64	; 0x40
 8018f3c:	2203      	movs	r2, #3
 8018f3e:	2182      	movs	r1, #130	; 0x82
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f000 fdad 	bl	8019aa0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	2201      	movs	r2, #1
 8018f4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Init();
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  hcdc->RxState = 0U;
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	2200      	movs	r2, #0
 8018f64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	7c1b      	ldrb	r3, [r3, #16]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d108      	bne.n	8018f82 <USBD_CDC_Init+0xe2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018f76:	2340      	movs	r3, #64	; 0x40
 8018f78:	2103      	movs	r1, #3
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f000 ff40 	bl	8019e00 <USBD_LL_PrepareReceive>
 8018f80:	e007      	b.n	8018f92 <USBD_CDC_Init+0xf2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018f88:	2340      	movs	r3, #64	; 0x40
 8018f8a:	2103      	movs	r1, #3
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f000 ff37 	bl	8019e00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018f92:	2300      	movs	r3, #0
}
 8018f94:	4618      	mov	r0, r3
 8018f96:	3710      	adds	r7, #16
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}

08018f9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b082      	sub	sp, #8
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018fa8:	2183      	movs	r1, #131	; 0x83
 8018faa:	6878      	ldr	r0, [r7, #4]
 8018fac:	f000 fdb6 	bl	8019b1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018fb8:	2103      	movs	r1, #3
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	f000 fdae 	bl	8019b1c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8018fc8:	2182      	movs	r1, #130	; 0x82
 8018fca:	6878      	ldr	r0, [r7, #4]
 8018fcc:	f000 fda6 	bl	8019b1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCDC != NULL)
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d00e      	beq.n	8019008 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->DeInit();
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCDC);
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f000 ffa8 	bl	8019f50 <USBD_static_free>
    pdev->pClassDataCDC = NULL;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2200      	movs	r2, #0
 8019004:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }

  return (uint8_t)USBD_OK;
 8019008:	2300      	movs	r3, #0
}
 801900a:	4618      	mov	r0, r3
 801900c:	3708      	adds	r7, #8
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}
	...

08019014 <USBD_CDC_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b086      	sub	sp, #24
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019024:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8019026:	2300      	movs	r3, #0
 8019028:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801902a:	2300      	movs	r3, #0
 801902c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801902e:	2300      	movs	r3, #0
 8019030:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8019032:	693b      	ldr	r3, [r7, #16]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d101      	bne.n	801903c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8019038:	2303      	movs	r3, #3
 801903a:	e0b5      	b.n	80191a8 <USBD_CDC_Setup+0x194>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	781b      	ldrb	r3, [r3, #0]
 8019040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019044:	2b00      	cmp	r3, #0
 8019046:	d045      	beq.n	80190d4 <USBD_CDC_Setup+0xc0>
 8019048:	2b20      	cmp	r3, #32
 801904a:	f040 80a5 	bne.w	8019198 <USBD_CDC_Setup+0x184>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801904e:	683b      	ldr	r3, [r7, #0]
 8019050:	88db      	ldrh	r3, [r3, #6]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d034      	beq.n	80190c0 <USBD_CDC_Setup+0xac>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8019056:	683b      	ldr	r3, [r7, #0]
 8019058:	781b      	ldrb	r3, [r3, #0]
 801905a:	b25b      	sxtb	r3, r3
 801905c:	2b00      	cmp	r3, #0
 801905e:	da1a      	bge.n	8019096 <USBD_CDC_Setup+0x82>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019066:	689b      	ldr	r3, [r3, #8]
 8019068:	683a      	ldr	r2, [r7, #0]
 801906a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801906c:	693a      	ldr	r2, [r7, #16]
 801906e:	f502 711d 	add.w	r1, r2, #628	; 0x274
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8019072:	683a      	ldr	r2, [r7, #0]
 8019074:	88d2      	ldrh	r2, [r2, #6]
 8019076:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	88db      	ldrh	r3, [r3, #6]
 801907c:	2b08      	cmp	r3, #8
 801907e:	bf28      	it	cs
 8019080:	2308      	movcs	r3, #8
 8019082:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8019084:	693b      	ldr	r3, [r7, #16]
 8019086:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801908a:	89fa      	ldrh	r2, [r7, #14]
 801908c:	4619      	mov	r1, r3
 801908e:	6878      	ldr	r0, [r7, #4]
 8019090:	f002 f9a7 	bl	801b3e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8019094:	e087      	b.n	80191a6 <USBD_CDC_Setup+0x192>
          hcdc->CmdOpCode = req->bRequest;
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	785a      	ldrb	r2, [r3, #1]
 801909a:	693b      	ldr	r3, [r7, #16]
 801909c:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
          hcdc->CmdLength = (uint8_t)req->wLength;
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	88db      	ldrh	r3, [r3, #6]
 80190a4:	b2da      	uxtb	r2, r3
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80190ac:	693b      	ldr	r3, [r7, #16]
 80190ae:	f503 711d 	add.w	r1, r3, #628	; 0x274
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	88db      	ldrh	r3, [r3, #6]
 80190b6:	461a      	mov	r2, r3
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f002 f9be 	bl	801b43a <USBD_CtlPrepareRx>
      break;
 80190be:	e072      	b.n	80191a6 <USBD_CDC_Setup+0x192>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80190c6:	689b      	ldr	r3, [r3, #8]
 80190c8:	683a      	ldr	r2, [r7, #0]
 80190ca:	7850      	ldrb	r0, [r2, #1]
 80190cc:	2200      	movs	r2, #0
 80190ce:	6839      	ldr	r1, [r7, #0]
 80190d0:	4798      	blx	r3
      break;
 80190d2:	e068      	b.n	80191a6 <USBD_CDC_Setup+0x192>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	785b      	ldrb	r3, [r3, #1]
 80190d8:	2b0b      	cmp	r3, #11
 80190da:	d852      	bhi.n	8019182 <USBD_CDC_Setup+0x16e>
 80190dc:	a201      	add	r2, pc, #4	; (adr r2, 80190e4 <USBD_CDC_Setup+0xd0>)
 80190de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190e2:	bf00      	nop
 80190e4:	08019115 	.word	0x08019115
 80190e8:	08019191 	.word	0x08019191
 80190ec:	08019183 	.word	0x08019183
 80190f0:	08019183 	.word	0x08019183
 80190f4:	08019183 	.word	0x08019183
 80190f8:	08019183 	.word	0x08019183
 80190fc:	08019183 	.word	0x08019183
 8019100:	08019183 	.word	0x08019183
 8019104:	08019183 	.word	0x08019183
 8019108:	08019183 	.word	0x08019183
 801910c:	0801913f 	.word	0x0801913f
 8019110:	08019169 	.word	0x08019169
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801911a:	b2db      	uxtb	r3, r3
 801911c:	2b03      	cmp	r3, #3
 801911e:	d107      	bne.n	8019130 <USBD_CDC_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8019120:	f107 030a 	add.w	r3, r7, #10
 8019124:	2202      	movs	r2, #2
 8019126:	4619      	mov	r1, r3
 8019128:	6878      	ldr	r0, [r7, #4]
 801912a:	f002 f95a 	bl	801b3e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801912e:	e032      	b.n	8019196 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 8019130:	6839      	ldr	r1, [r7, #0]
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f001 ffc2 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 8019138:	2303      	movs	r3, #3
 801913a:	75fb      	strb	r3, [r7, #23]
          break;
 801913c:	e02b      	b.n	8019196 <USBD_CDC_Setup+0x182>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019144:	b2db      	uxtb	r3, r3
 8019146:	2b03      	cmp	r3, #3
 8019148:	d107      	bne.n	801915a <USBD_CDC_Setup+0x146>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801914a:	f107 030d 	add.w	r3, r7, #13
 801914e:	2201      	movs	r2, #1
 8019150:	4619      	mov	r1, r3
 8019152:	6878      	ldr	r0, [r7, #4]
 8019154:	f002 f945 	bl	801b3e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019158:	e01d      	b.n	8019196 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 801915a:	6839      	ldr	r1, [r7, #0]
 801915c:	6878      	ldr	r0, [r7, #4]
 801915e:	f001 ffad 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 8019162:	2303      	movs	r3, #3
 8019164:	75fb      	strb	r3, [r7, #23]
          break;
 8019166:	e016      	b.n	8019196 <USBD_CDC_Setup+0x182>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801916e:	b2db      	uxtb	r3, r3
 8019170:	2b03      	cmp	r3, #3
 8019172:	d00f      	beq.n	8019194 <USBD_CDC_Setup+0x180>
          {
            USBD_CtlError(pdev, req);
 8019174:	6839      	ldr	r1, [r7, #0]
 8019176:	6878      	ldr	r0, [r7, #4]
 8019178:	f001 ffa0 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 801917c:	2303      	movs	r3, #3
 801917e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8019180:	e008      	b.n	8019194 <USBD_CDC_Setup+0x180>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8019182:	6839      	ldr	r1, [r7, #0]
 8019184:	6878      	ldr	r0, [r7, #4]
 8019186:	f001 ff99 	bl	801b0bc <USBD_CtlError>
          ret = USBD_FAIL;
 801918a:	2303      	movs	r3, #3
 801918c:	75fb      	strb	r3, [r7, #23]
          break;
 801918e:	e002      	b.n	8019196 <USBD_CDC_Setup+0x182>
          break;
 8019190:	bf00      	nop
 8019192:	e008      	b.n	80191a6 <USBD_CDC_Setup+0x192>
          break;
 8019194:	bf00      	nop
      }
      break;
 8019196:	e006      	b.n	80191a6 <USBD_CDC_Setup+0x192>

    default:
      USBD_CtlError(pdev, req);
 8019198:	6839      	ldr	r1, [r7, #0]
 801919a:	6878      	ldr	r0, [r7, #4]
 801919c:	f001 ff8e 	bl	801b0bc <USBD_CtlError>
      ret = USBD_FAIL;
 80191a0:	2303      	movs	r3, #3
 80191a2:	75fb      	strb	r3, [r7, #23]
      break;
 80191a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80191a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	3718      	adds	r7, #24
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}

080191b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b084      	sub	sp, #16
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
 80191b8:	460b      	mov	r3, r1
 80191ba:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80191c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d101      	bne.n	80191d2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80191ce:	2303      	movs	r3, #3
 80191d0:	e04f      	b.n	8019272 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80191da:	78fa      	ldrb	r2, [r7, #3]
 80191dc:	6879      	ldr	r1, [r7, #4]
 80191de:	4613      	mov	r3, r2
 80191e0:	009b      	lsls	r3, r3, #2
 80191e2:	4413      	add	r3, r2
 80191e4:	009b      	lsls	r3, r3, #2
 80191e6:	440b      	add	r3, r1
 80191e8:	3318      	adds	r3, #24
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d029      	beq.n	8019244 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80191f0:	78fa      	ldrb	r2, [r7, #3]
 80191f2:	6879      	ldr	r1, [r7, #4]
 80191f4:	4613      	mov	r3, r2
 80191f6:	009b      	lsls	r3, r3, #2
 80191f8:	4413      	add	r3, r2
 80191fa:	009b      	lsls	r3, r3, #2
 80191fc:	440b      	add	r3, r1
 80191fe:	3318      	adds	r3, #24
 8019200:	681a      	ldr	r2, [r3, #0]
 8019202:	78f9      	ldrb	r1, [r7, #3]
 8019204:	68f8      	ldr	r0, [r7, #12]
 8019206:	460b      	mov	r3, r1
 8019208:	00db      	lsls	r3, r3, #3
 801920a:	1a5b      	subs	r3, r3, r1
 801920c:	009b      	lsls	r3, r3, #2
 801920e:	4403      	add	r3, r0
 8019210:	3344      	adds	r3, #68	; 0x44
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	fbb2 f1f3 	udiv	r1, r2, r3
 8019218:	fb03 f301 	mul.w	r3, r3, r1
 801921c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801921e:	2b00      	cmp	r3, #0
 8019220:	d110      	bne.n	8019244 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8019222:	78fa      	ldrb	r2, [r7, #3]
 8019224:	6879      	ldr	r1, [r7, #4]
 8019226:	4613      	mov	r3, r2
 8019228:	009b      	lsls	r3, r3, #2
 801922a:	4413      	add	r3, r2
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	440b      	add	r3, r1
 8019230:	3318      	adds	r3, #24
 8019232:	2200      	movs	r2, #0
 8019234:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8019236:	78f9      	ldrb	r1, [r7, #3]
 8019238:	2300      	movs	r3, #0
 801923a:	2200      	movs	r2, #0
 801923c:	6878      	ldr	r0, [r7, #4]
 801923e:	f000 fda7 	bl	8019d90 <USBD_LL_Transmit>
 8019242:	e015      	b.n	8019270 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8019244:	68bb      	ldr	r3, [r7, #8]
 8019246:	2200      	movs	r2, #0
 8019248:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt != NULL)
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019252:	691b      	ldr	r3, [r3, #16]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d00b      	beq.n	8019270 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801925e:	691b      	ldr	r3, [r3, #16]
 8019260:	68ba      	ldr	r2, [r7, #8]
 8019262:	f8d2 02bc 	ldr.w	r0, [r2, #700]	; 0x2bc
 8019266:	68ba      	ldr	r2, [r7, #8]
 8019268:	f502 7131 	add.w	r1, r2, #708	; 0x2c4
 801926c:	78fa      	ldrb	r2, [r7, #3]
 801926e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8019270:	2300      	movs	r3, #0
}
 8019272:	4618      	mov	r0, r3
 8019274:	3710      	adds	r7, #16
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}

0801927a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801927a:	b580      	push	{r7, lr}
 801927c:	b084      	sub	sp, #16
 801927e:	af00      	add	r7, sp, #0
 8019280:	6078      	str	r0, [r7, #4]
 8019282:	460b      	mov	r3, r1
 8019284:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801928c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019294:	2b00      	cmp	r3, #0
 8019296:	d101      	bne.n	801929c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019298:	2303      	movs	r3, #3
 801929a:	e015      	b.n	80192c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801929c:	78fb      	ldrb	r3, [r7, #3]
 801929e:	4619      	mov	r1, r3
 80192a0:	6878      	ldr	r0, [r7, #4]
 80192a2:	f000 fde5 	bl	8019e70 <USBD_LL_GetRxDataSize>
 80192a6:	4602      	mov	r2, r0
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80192b4:	68db      	ldr	r3, [r3, #12]
 80192b6:	68fa      	ldr	r2, [r7, #12]
 80192b8:	f8d2 02b8 	ldr.w	r0, [r2, #696]	; 0x2b8
 80192bc:	68fa      	ldr	r2, [r7, #12]
 80192be:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 80192c2:	4611      	mov	r1, r2
 80192c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80192c6:	2300      	movs	r3, #0
}
 80192c8:	4618      	mov	r0, r3
 80192ca:	3710      	adds	r7, #16
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}

080192d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b084      	sub	sp, #16
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d101      	bne.n	80192ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80192e6:	2303      	movs	r3, #3
 80192e8:	e01d      	b.n	8019326 <USBD_CDC_EP0_RxReady+0x56>
  }

  if ((pdev->pUserDataCDC != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d017      	beq.n	8019324 <USBD_CDC_EP0_RxReady+0x54>
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 80192fa:	2bff      	cmp	r3, #255	; 0xff
 80192fc:	d012      	beq.n	8019324 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019304:	689b      	ldr	r3, [r3, #8]
 8019306:	68fa      	ldr	r2, [r7, #12]
 8019308:	f892 02b4 	ldrb.w	r0, [r2, #692]	; 0x2b4
                                                      (uint8_t *)hcdc->data,
 801930c:	68fa      	ldr	r2, [r7, #12]
 801930e:	f502 711d 	add.w	r1, r2, #628	; 0x274
                                                      (uint16_t)hcdc->CmdLength);
 8019312:	68fa      	ldr	r2, [r7, #12]
 8019314:	f892 22b5 	ldrb.w	r2, [r2, #693]	; 0x2b5
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 8019318:	b292      	uxth	r2, r2
 801931a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	22ff      	movs	r2, #255	; 0xff
 8019320:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
  }

  return (uint8_t)USBD_OK;
 8019324:	2300      	movs	r3, #0
}
 8019326:	4618      	mov	r0, r3
 8019328:	3710      	adds	r7, #16
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}

0801932e <USBD_CDC_RegisterInterface>:
  * @param  pdev: device instance
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_CDC_ItfTypeDef *fops)
{
 801932e:	b480      	push	{r7}
 8019330:	b083      	sub	sp, #12
 8019332:	af00      	add	r7, sp, #0
 8019334:	6078      	str	r0, [r7, #4]
 8019336:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d101      	bne.n	8019342 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801933e:	2303      	movs	r3, #3
 8019340:	e004      	b.n	801934c <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserDataCDC = fops;
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	683a      	ldr	r2, [r7, #0]
 8019346:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  return (uint8_t)USBD_OK;
 801934a:	2300      	movs	r3, #0
}
 801934c:	4618      	mov	r0, r3
 801934e:	370c      	adds	r7, #12
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <USBD_CDC_SetTxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 8019358:	b480      	push	{r7}
 801935a:	b087      	sub	sp, #28
 801935c:	af00      	add	r7, sp, #0
 801935e:	60f8      	str	r0, [r7, #12]
 8019360:	60b9      	str	r1, [r7, #8]
 8019362:	607a      	str	r2, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801936a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d101      	bne.n	8019376 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019372:	2303      	movs	r3, #3
 8019374:	e008      	b.n	8019388 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	68ba      	ldr	r2, [r7, #8]
 801937a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  hcdc->TxLength = length;
 801937e:	697b      	ldr	r3, [r7, #20]
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  return (uint8_t)USBD_OK;
 8019386:	2300      	movs	r3, #0
}
 8019388:	4618      	mov	r0, r3
 801938a:	371c      	adds	r7, #28
 801938c:	46bd      	mov	sp, r7
 801938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019392:	4770      	bx	lr

08019394 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8019394:	b480      	push	{r7}
 8019396:	b085      	sub	sp, #20
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d101      	bne.n	80193b0 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80193ac:	2303      	movs	r3, #3
 80193ae:	e004      	b.n	80193ba <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	683a      	ldr	r2, [r7, #0]
 80193b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  return (uint8_t)USBD_OK;
 80193b8:	2300      	movs	r3, #0
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3714      	adds	r7, #20
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr

080193c6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80193c6:	b580      	push	{r7, lr}
 80193c8:	b084      	sub	sp, #16
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193d4:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80193d6:	2301      	movs	r3, #1
 80193d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCDC == NULL)
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d101      	bne.n	80193e8 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80193e4:	2303      	movs	r3, #3
 80193e6:	e01a      	b.n	801941e <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80193e8:	68bb      	ldr	r3, [r7, #8]
 80193ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d114      	bne.n	801941c <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80193f2:	68bb      	ldr	r3, [r7, #8]
 80193f4:	2201      	movs	r2, #1
 80193f6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80193fa:	68bb      	ldr	r3, [r7, #8]
 80193fc:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	655a      	str	r2, [r3, #84]	; 0x54

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8019404:	68bb      	ldr	r3, [r7, #8]
 8019406:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 801940a:	68bb      	ldr	r3, [r7, #8]
 801940c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019410:	2183      	movs	r1, #131	; 0x83
 8019412:	6878      	ldr	r0, [r7, #4]
 8019414:	f000 fcbc 	bl	8019d90 <USBD_LL_Transmit>

    ret = USBD_OK;
 8019418:	2300      	movs	r3, #0
 801941a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801941c:	7bfb      	ldrb	r3, [r7, #15]
}
 801941e:	4618      	mov	r0, r3
 8019420:	3710      	adds	r7, #16
 8019422:	46bd      	mov	sp, r7
 8019424:	bd80      	pop	{r7, pc}

08019426 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8019426:	b580      	push	{r7, lr}
 8019428:	b084      	sub	sp, #16
 801942a:	af00      	add	r7, sp, #0
 801942c:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019434:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801943c:	2b00      	cmp	r3, #0
 801943e:	d101      	bne.n	8019444 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019440:	2303      	movs	r3, #3
 8019442:	e015      	b.n	8019470 <USBD_CDC_ReceivePacket+0x4a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	7c1b      	ldrb	r3, [r3, #16]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d108      	bne.n	801945e <USBD_CDC_ReceivePacket+0x38>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019452:	2340      	movs	r3, #64	; 0x40
 8019454:	2103      	movs	r1, #3
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f000 fcd2 	bl	8019e00 <USBD_LL_PrepareReceive>
 801945c:	e007      	b.n	801946e <USBD_CDC_ReceivePacket+0x48>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019464:	2340      	movs	r3, #64	; 0x40
 8019466:	2103      	movs	r1, #3
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	f000 fcc9 	bl	8019e00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801946e:	2300      	movs	r3, #0
}
 8019470:	4618      	mov	r0, r3
 8019472:	3710      	adds	r7, #16
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}

08019478 <CDC_Init_FS>:
};



static int8_t CDC_Init_FS(void)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801947c:	2200      	movs	r2, #0
 801947e:	4905      	ldr	r1, [pc, #20]	; (8019494 <CDC_Init_FS+0x1c>)
 8019480:	4805      	ldr	r0, [pc, #20]	; (8019498 <CDC_Init_FS+0x20>)
 8019482:	f7ff ff69 	bl	8019358 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019486:	4905      	ldr	r1, [pc, #20]	; (801949c <CDC_Init_FS+0x24>)
 8019488:	4803      	ldr	r0, [pc, #12]	; (8019498 <CDC_Init_FS+0x20>)
 801948a:	f7ff ff83 	bl	8019394 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801948e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019490:	4618      	mov	r0, r3
 8019492:	bd80      	pop	{r7, pc}
 8019494:	20008b34 	.word	0x20008b34
 8019498:	2000885c 	.word	0x2000885c
 801949c:	20009334 	.word	0x20009334

080194a0 <CDC_DeInit_FS>:



static int8_t CDC_DeInit_FS(void)
{
 80194a0:	b480      	push	{r7}
 80194a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80194a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	46bd      	mov	sp, r7
 80194aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ae:	4770      	bx	lr

080194b0 <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80194b0:	b480      	push	{r7}
 80194b2:	b083      	sub	sp, #12
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	4603      	mov	r3, r0
 80194b8:	6039      	str	r1, [r7, #0]
 80194ba:	71fb      	strb	r3, [r7, #7]
 80194bc:	4613      	mov	r3, r2
 80194be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80194c0:	79fb      	ldrb	r3, [r7, #7]
 80194c2:	2b23      	cmp	r3, #35	; 0x23
 80194c4:	d84a      	bhi.n	801955c <CDC_Control_FS+0xac>
 80194c6:	a201      	add	r2, pc, #4	; (adr r2, 80194cc <CDC_Control_FS+0x1c>)
 80194c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194cc:	0801955d 	.word	0x0801955d
 80194d0:	0801955d 	.word	0x0801955d
 80194d4:	0801955d 	.word	0x0801955d
 80194d8:	0801955d 	.word	0x0801955d
 80194dc:	0801955d 	.word	0x0801955d
 80194e0:	0801955d 	.word	0x0801955d
 80194e4:	0801955d 	.word	0x0801955d
 80194e8:	0801955d 	.word	0x0801955d
 80194ec:	0801955d 	.word	0x0801955d
 80194f0:	0801955d 	.word	0x0801955d
 80194f4:	0801955d 	.word	0x0801955d
 80194f8:	0801955d 	.word	0x0801955d
 80194fc:	0801955d 	.word	0x0801955d
 8019500:	0801955d 	.word	0x0801955d
 8019504:	0801955d 	.word	0x0801955d
 8019508:	0801955d 	.word	0x0801955d
 801950c:	0801955d 	.word	0x0801955d
 8019510:	0801955d 	.word	0x0801955d
 8019514:	0801955d 	.word	0x0801955d
 8019518:	0801955d 	.word	0x0801955d
 801951c:	0801955d 	.word	0x0801955d
 8019520:	0801955d 	.word	0x0801955d
 8019524:	0801955d 	.word	0x0801955d
 8019528:	0801955d 	.word	0x0801955d
 801952c:	0801955d 	.word	0x0801955d
 8019530:	0801955d 	.word	0x0801955d
 8019534:	0801955d 	.word	0x0801955d
 8019538:	0801955d 	.word	0x0801955d
 801953c:	0801955d 	.word	0x0801955d
 8019540:	0801955d 	.word	0x0801955d
 8019544:	0801955d 	.word	0x0801955d
 8019548:	0801955d 	.word	0x0801955d
 801954c:	0801955d 	.word	0x0801955d
 8019550:	0801955d 	.word	0x0801955d
 8019554:	0801955d 	.word	0x0801955d
 8019558:	0801955d 	.word	0x0801955d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801955c:	bf00      	nop
  }

  return (USBD_OK);
 801955e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019560:	4618      	mov	r0, r3
 8019562:	370c      	adds	r7, #12
 8019564:	46bd      	mov	sp, r7
 8019566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956a:	4770      	bx	lr

0801956c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b082      	sub	sp, #8
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
 8019574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  strncpy(rx_buf+rxcntr, (char*)Buf, *Len);
 8019576:	4b0f      	ldr	r3, [pc, #60]	; (80195b4 <CDC_Receive_FS+0x48>)
 8019578:	881b      	ldrh	r3, [r3, #0]
 801957a:	461a      	mov	r2, r3
 801957c:	4b0e      	ldr	r3, [pc, #56]	; (80195b8 <CDC_Receive_FS+0x4c>)
 801957e:	18d0      	adds	r0, r2, r3
 8019580:	683b      	ldr	r3, [r7, #0]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	461a      	mov	r2, r3
 8019586:	6879      	ldr	r1, [r7, #4]
 8019588:	f004 fcb2 	bl	801def0 <strncpy>
  	rxcntr+=*Len;
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	b29a      	uxth	r2, r3
 8019592:	4b08      	ldr	r3, [pc, #32]	; (80195b4 <CDC_Receive_FS+0x48>)
 8019594:	881b      	ldrh	r3, [r3, #0]
 8019596:	4413      	add	r3, r2
 8019598:	b29a      	uxth	r2, r3
 801959a:	4b06      	ldr	r3, [pc, #24]	; (80195b4 <CDC_Receive_FS+0x48>)
 801959c:	801a      	strh	r2, [r3, #0]
  	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801959e:	4807      	ldr	r0, [pc, #28]	; (80195bc <CDC_Receive_FS+0x50>)
 80195a0:	f7ff ff41 	bl	8019426 <USBD_CDC_ReceivePacket>
  	USBTimeOutRX=timeout_const;
 80195a4:	4b06      	ldr	r3, [pc, #24]	; (80195c0 <CDC_Receive_FS+0x54>)
 80195a6:	2202      	movs	r2, #2
 80195a8:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80195aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80195ac:	4618      	mov	r0, r3
 80195ae:	3708      	adds	r7, #8
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}
 80195b4:	20000982 	.word	0x20000982
 80195b8:	20005c64 	.word	0x20005c64
 80195bc:	2000885c 	.word	0x2000885c
 80195c0:	20000234 	.word	0x20000234

080195c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b084      	sub	sp, #16
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
 80195cc:	460b      	mov	r3, r1
 80195ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80195d0:	2300      	movs	r3, #0
 80195d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef*)hUsbDeviceFS.pClassDataCDC;
 80195d4:	4b18      	ldr	r3, [pc, #96]	; (8019638 <CDC_Transmit_FS+0x74>)
 80195d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80195da:	60bb      	str	r3, [r7, #8]
  USB_timeout=15000;
 80195dc:	4b17      	ldr	r3, [pc, #92]	; (801963c <CDC_Transmit_FS+0x78>)
 80195de:	f643 2298 	movw	r2, #15000	; 0x3a98
 80195e2:	601a      	str	r2, [r3, #0]
  while(hcdc->TxState!=0)
 80195e4:	e013      	b.n	801960e <CDC_Transmit_FS+0x4a>
  {
	  USB_timeout--;
 80195e6:	4b15      	ldr	r3, [pc, #84]	; (801963c <CDC_Transmit_FS+0x78>)
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	3b01      	subs	r3, #1
 80195ec:	4a13      	ldr	r2, [pc, #76]	; (801963c <CDC_Transmit_FS+0x78>)
 80195ee:	6013      	str	r3, [r2, #0]
	  if(USB_timeout==0) {ERROR_REG|=(0x01<<USB_CVC_err); hcdc->TxState=0; break;}
 80195f0:	4b12      	ldr	r3, [pc, #72]	; (801963c <CDC_Transmit_FS+0x78>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d10a      	bne.n	801960e <CDC_Transmit_FS+0x4a>
 80195f8:	4b11      	ldr	r3, [pc, #68]	; (8019640 <CDC_Transmit_FS+0x7c>)
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	f043 0308 	orr.w	r3, r3, #8
 8019600:	4a0f      	ldr	r2, [pc, #60]	; (8019640 <CDC_Transmit_FS+0x7c>)
 8019602:	6013      	str	r3, [r2, #0]
 8019604:	68bb      	ldr	r3, [r7, #8]
 8019606:	2200      	movs	r2, #0
 8019608:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 801960c:	e004      	b.n	8019618 <CDC_Transmit_FS+0x54>
  while(hcdc->TxState!=0)
 801960e:	68bb      	ldr	r3, [r7, #8]
 8019610:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019614:	2b00      	cmp	r3, #0
 8019616:	d1e6      	bne.n	80195e6 <CDC_Transmit_FS+0x22>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019618:	887b      	ldrh	r3, [r7, #2]
 801961a:	461a      	mov	r2, r3
 801961c:	6879      	ldr	r1, [r7, #4]
 801961e:	4806      	ldr	r0, [pc, #24]	; (8019638 <CDC_Transmit_FS+0x74>)
 8019620:	f7ff fe9a 	bl	8019358 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019624:	4804      	ldr	r0, [pc, #16]	; (8019638 <CDC_Transmit_FS+0x74>)
 8019626:	f7ff fece 	bl	80193c6 <USBD_CDC_TransmitPacket>
 801962a:	4603      	mov	r3, r0
 801962c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801962e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019630:	4618      	mov	r0, r3
 8019632:	3710      	adds	r7, #16
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}
 8019638:	2000885c 	.word	0x2000885c
 801963c:	20001d20 	.word	0x20001d20
 8019640:	20000958 	.word	0x20000958

08019644 <CDC_TransmitCplt_FS>:



static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019644:	b480      	push	{r7}
 8019646:	b087      	sub	sp, #28
 8019648:	af00      	add	r7, sp, #0
 801964a:	60f8      	str	r0, [r7, #12]
 801964c:	60b9      	str	r1, [r7, #8]
 801964e:	4613      	mov	r3, r2
 8019650:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019652:	2300      	movs	r3, #0
 8019654:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801965a:	4618      	mov	r0, r3
 801965c:	371c      	adds	r7, #28
 801965e:	46bd      	mov	sp, r7
 8019660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019664:	4770      	bx	lr
	...

08019668 <HAL_PCD_MspInit>:




void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b0ae      	sub	sp, #184	; 0xb8
 801966c:	af00      	add	r7, sp, #0
 801966e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019670:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019674:	2200      	movs	r2, #0
 8019676:	601a      	str	r2, [r3, #0]
 8019678:	605a      	str	r2, [r3, #4]
 801967a:	609a      	str	r2, [r3, #8]
 801967c:	60da      	str	r2, [r3, #12]
 801967e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019680:	f107 0318 	add.w	r3, r7, #24
 8019684:	228c      	movs	r2, #140	; 0x8c
 8019686:	2100      	movs	r1, #0
 8019688:	4618      	mov	r0, r3
 801968a:	f003 fd89 	bl	801d1a0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019696:	d173      	bne.n	8019780 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801969c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801969e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80196a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80196a6:	2303      	movs	r3, #3
 80196a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80196aa:	2301      	movs	r3, #1
 80196ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80196ae:	230c      	movs	r3, #12
 80196b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80196b2:	2302      	movs	r3, #2
 80196b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80196b6:	2302      	movs	r3, #2
 80196b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80196ba:	2302      	movs	r3, #2
 80196bc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80196be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80196c2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80196c4:	f107 0318 	add.w	r3, r7, #24
 80196c8:	4618      	mov	r0, r3
 80196ca:	f7f3 fa53 	bl	800cb74 <HAL_RCCEx_PeriphCLKConfig>
 80196ce:	4603      	mov	r3, r0
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d001      	beq.n	80196d8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80196d4:	f7ed f852 	bl	800677c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80196d8:	4b2b      	ldr	r3, [pc, #172]	; (8019788 <HAL_PCD_MspInit+0x120>)
 80196da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196dc:	4a2a      	ldr	r2, [pc, #168]	; (8019788 <HAL_PCD_MspInit+0x120>)
 80196de:	f043 0301 	orr.w	r3, r3, #1
 80196e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80196e4:	4b28      	ldr	r3, [pc, #160]	; (8019788 <HAL_PCD_MspInit+0x120>)
 80196e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196e8:	f003 0301 	and.w	r3, r3, #1
 80196ec:	617b      	str	r3, [r7, #20]
 80196ee:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80196f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80196f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80196f8:	2302      	movs	r3, #2
 80196fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80196fe:	2300      	movs	r3, #0
 8019700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019704:	2303      	movs	r3, #3
 8019706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801970a:	230a      	movs	r3, #10
 801970c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019710:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019714:	4619      	mov	r1, r3
 8019716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801971a:	f7f0 fb37 	bl	8009d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801971e:	4b1a      	ldr	r3, [pc, #104]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019722:	4a19      	ldr	r2, [pc, #100]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019728:	64d3      	str	r3, [r2, #76]	; 0x4c
 801972a:	4b17      	ldr	r3, [pc, #92]	; (8019788 <HAL_PCD_MspInit+0x120>)
 801972c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801972e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019732:	613b      	str	r3, [r7, #16]
 8019734:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019736:	4b14      	ldr	r3, [pc, #80]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801973a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801973e:	2b00      	cmp	r3, #0
 8019740:	d114      	bne.n	801976c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019742:	4b11      	ldr	r3, [pc, #68]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019746:	4a10      	ldr	r2, [pc, #64]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801974c:	6593      	str	r3, [r2, #88]	; 0x58
 801974e:	4b0e      	ldr	r3, [pc, #56]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019756:	60fb      	str	r3, [r7, #12]
 8019758:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 801975a:	f7f2 fb9d 	bl	800be98 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801975e:	4b0a      	ldr	r3, [pc, #40]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019762:	4a09      	ldr	r2, [pc, #36]	; (8019788 <HAL_PCD_MspInit+0x120>)
 8019764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019768:	6593      	str	r3, [r2, #88]	; 0x58
 801976a:	e001      	b.n	8019770 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801976c:	f7f2 fb94 	bl	800be98 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019770:	2200      	movs	r2, #0
 8019772:	2100      	movs	r1, #0
 8019774:	2043      	movs	r0, #67	; 0x43
 8019776:	f7ef fd4b 	bl	8009210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801977a:	2043      	movs	r0, #67	; 0x43
 801977c:	f7ef fd64 	bl	8009248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019780:	bf00      	nop
 8019782:	37b8      	adds	r7, #184	; 0xb8
 8019784:	46bd      	mov	sp, r7
 8019786:	bd80      	pop	{r7, pc}
 8019788:	40021000 	.word	0x40021000

0801978c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b082      	sub	sp, #8
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80197a0:	4619      	mov	r1, r3
 80197a2:	4610      	mov	r0, r2
 80197a4:	f000 fc8a 	bl	801a0bc <USBD_LL_SetupStage>
}
 80197a8:	bf00      	nop
 80197aa:	3708      	adds	r7, #8
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}

080197b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b082      	sub	sp, #8
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	460b      	mov	r3, r1
 80197ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80197c2:	78fa      	ldrb	r2, [r7, #3]
 80197c4:	6879      	ldr	r1, [r7, #4]
 80197c6:	4613      	mov	r3, r2
 80197c8:	00db      	lsls	r3, r3, #3
 80197ca:	1a9b      	subs	r3, r3, r2
 80197cc:	009b      	lsls	r3, r3, #2
 80197ce:	440b      	add	r3, r1
 80197d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80197d4:	681a      	ldr	r2, [r3, #0]
 80197d6:	78fb      	ldrb	r3, [r7, #3]
 80197d8:	4619      	mov	r1, r3
 80197da:	f000 fcc4 	bl	801a166 <USBD_LL_DataOutStage>
}
 80197de:	bf00      	nop
 80197e0:	3708      	adds	r7, #8
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}

080197e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197e6:	b580      	push	{r7, lr}
 80197e8:	b082      	sub	sp, #8
 80197ea:	af00      	add	r7, sp, #0
 80197ec:	6078      	str	r0, [r7, #4]
 80197ee:	460b      	mov	r3, r1
 80197f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80197f8:	78fa      	ldrb	r2, [r7, #3]
 80197fa:	6879      	ldr	r1, [r7, #4]
 80197fc:	4613      	mov	r3, r2
 80197fe:	00db      	lsls	r3, r3, #3
 8019800:	1a9b      	subs	r3, r3, r2
 8019802:	009b      	lsls	r3, r3, #2
 8019804:	440b      	add	r3, r1
 8019806:	3348      	adds	r3, #72	; 0x48
 8019808:	681a      	ldr	r2, [r3, #0]
 801980a:	78fb      	ldrb	r3, [r7, #3]
 801980c:	4619      	mov	r1, r3
 801980e:	f000 fd0d 	bl	801a22c <USBD_LL_DataInStage>
}
 8019812:	bf00      	nop
 8019814:	3708      	adds	r7, #8
 8019816:	46bd      	mov	sp, r7
 8019818:	bd80      	pop	{r7, pc}

0801981a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801981a:	b580      	push	{r7, lr}
 801981c:	b082      	sub	sp, #8
 801981e:	af00      	add	r7, sp, #0
 8019820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019828:	4618      	mov	r0, r3
 801982a:	f000 fe21 	bl	801a470 <USBD_LL_SOF>
}
 801982e:	bf00      	nop
 8019830:	3708      	adds	r7, #8
 8019832:	46bd      	mov	sp, r7
 8019834:	bd80      	pop	{r7, pc}

08019836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019836:	b580      	push	{r7, lr}
 8019838:	b084      	sub	sp, #16
 801983a:	af00      	add	r7, sp, #0
 801983c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801983e:	2301      	movs	r3, #1
 8019840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	68db      	ldr	r3, [r3, #12]
 8019846:	2b02      	cmp	r3, #2
 8019848:	d001      	beq.n	801984e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801984a:	f7ec ff97 	bl	800677c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019854:	7bfa      	ldrb	r2, [r7, #15]
 8019856:	4611      	mov	r1, r2
 8019858:	4618      	mov	r0, r3
 801985a:	f000 fdcb 	bl	801a3f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019864:	4618      	mov	r0, r3
 8019866:	f000 fd77 	bl	801a358 <USBD_LL_Reset>
}
 801986a:	bf00      	nop
 801986c:	3710      	adds	r7, #16
 801986e:	46bd      	mov	sp, r7
 8019870:	bd80      	pop	{r7, pc}
	...

08019874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b082      	sub	sp, #8
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	687a      	ldr	r2, [r7, #4]
 8019888:	6812      	ldr	r2, [r2, #0]
 801988a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801988e:	f043 0301 	orr.w	r3, r3, #1
 8019892:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801989a:	4618      	mov	r0, r3
 801989c:	f000 fdba 	bl	801a414 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	6a1b      	ldr	r3, [r3, #32]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d005      	beq.n	80198b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80198a8:	4b04      	ldr	r3, [pc, #16]	; (80198bc <HAL_PCD_SuspendCallback+0x48>)
 80198aa:	691b      	ldr	r3, [r3, #16]
 80198ac:	4a03      	ldr	r2, [pc, #12]	; (80198bc <HAL_PCD_SuspendCallback+0x48>)
 80198ae:	f043 0306 	orr.w	r3, r3, #6
 80198b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80198b4:	bf00      	nop
 80198b6:	3708      	adds	r7, #8
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}
 80198bc:	e000ed00 	.word	0xe000ed00

080198c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b082      	sub	sp, #8
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	687a      	ldr	r2, [r7, #4]
 80198d4:	6812      	ldr	r2, [r2, #0]
 80198d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80198da:	f023 0301 	bic.w	r3, r3, #1
 80198de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	6a1b      	ldr	r3, [r3, #32]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d007      	beq.n	80198f8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80198e8:	4b08      	ldr	r3, [pc, #32]	; (801990c <HAL_PCD_ResumeCallback+0x4c>)
 80198ea:	691b      	ldr	r3, [r3, #16]
 80198ec:	4a07      	ldr	r2, [pc, #28]	; (801990c <HAL_PCD_ResumeCallback+0x4c>)
 80198ee:	f023 0306 	bic.w	r3, r3, #6
 80198f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80198f4:	f000 fb36 	bl	8019f64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80198fe:	4618      	mov	r0, r3
 8019900:	f000 fd9e 	bl	801a440 <USBD_LL_Resume>
}
 8019904:	bf00      	nop
 8019906:	3708      	adds	r7, #8
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}
 801990c:	e000ed00 	.word	0xe000ed00

08019910 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b082      	sub	sp, #8
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
 8019918:	460b      	mov	r3, r1
 801991a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019922:	78fa      	ldrb	r2, [r7, #3]
 8019924:	4611      	mov	r1, r2
 8019926:	4618      	mov	r0, r3
 8019928:	f000 fdea 	bl	801a500 <USBD_LL_IsoOUTIncomplete>
}
 801992c:	bf00      	nop
 801992e:	3708      	adds	r7, #8
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}

08019934 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b082      	sub	sp, #8
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	460b      	mov	r3, r1
 801993e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019946:	78fa      	ldrb	r2, [r7, #3]
 8019948:	4611      	mov	r1, r2
 801994a:	4618      	mov	r0, r3
 801994c:	f000 fdb2 	bl	801a4b4 <USBD_LL_IsoINIncomplete>
}
 8019950:	bf00      	nop
 8019952:	3708      	adds	r7, #8
 8019954:	46bd      	mov	sp, r7
 8019956:	bd80      	pop	{r7, pc}

08019958 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b082      	sub	sp, #8
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019966:	4618      	mov	r0, r3
 8019968:	f000 fdf0 	bl	801a54c <USBD_LL_DevConnected>
}
 801996c:	bf00      	nop
 801996e:	3708      	adds	r7, #8
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}

08019974 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019974:	b580      	push	{r7, lr}
 8019976:	b082      	sub	sp, #8
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019982:	4618      	mov	r0, r3
 8019984:	f000 fded 	bl	801a562 <USBD_LL_DevDisconnected>
}
 8019988:	bf00      	nop
 801998a:	3708      	adds	r7, #8
 801998c:	46bd      	mov	sp, r7
 801998e:	bd80      	pop	{r7, pc}

08019990 <USBD_LL_Init>:
/*******************************************************************************
                       LL Driver Interface (USB Device Library --> PCD)
*******************************************************************************/

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b082      	sub	sp, #8
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d146      	bne.n	8019a2e <USBD_LL_Init+0x9e>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80199a0:	4a25      	ldr	r2, [pc, #148]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	4a23      	ldr	r2, [pc, #140]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80199b0:	4b21      	ldr	r3, [pc, #132]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80199b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 7;
 80199b8:	4b1f      	ldr	r3, [pc, #124]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199ba:	2207      	movs	r2, #7
 80199bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80199be:	4b1e      	ldr	r3, [pc, #120]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199c0:	2202      	movs	r2, #2
 80199c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80199c4:	4b1c      	ldr	r3, [pc, #112]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199c6:	2202      	movs	r2, #2
 80199c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80199ca:	4b1b      	ldr	r3, [pc, #108]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199cc:	2200      	movs	r2, #0
 80199ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80199d0:	4b19      	ldr	r3, [pc, #100]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199d2:	2200      	movs	r2, #0
 80199d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80199d6:	4b18      	ldr	r3, [pc, #96]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199d8:	2200      	movs	r2, #0
 80199da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80199dc:	4b16      	ldr	r3, [pc, #88]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199de:	2200      	movs	r2, #0
 80199e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80199e2:	4b15      	ldr	r3, [pc, #84]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199e4:	2200      	movs	r2, #0
 80199e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80199e8:	4b13      	ldr	r3, [pc, #76]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199ea:	2200      	movs	r2, #0
 80199ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80199ee:	4812      	ldr	r0, [pc, #72]	; (8019a38 <USBD_LL_Init+0xa8>)
 80199f0:	f7f1 f8a1 	bl	800ab36 <HAL_PCD_Init>
 80199f4:	4603      	mov	r3, r0
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d001      	beq.n	80199fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80199fa:	f7ec febf 	bl	800677c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 80199fe:	2140      	movs	r1, #64	; 0x40
 8019a00:	480d      	ldr	r0, [pc, #52]	; (8019a38 <USBD_LL_Init+0xa8>)
 8019a02:	f7f2 f930 	bl	800bc66 <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019a06:	2240      	movs	r2, #64	; 0x40
 8019a08:	2100      	movs	r1, #0
 8019a0a:	480b      	ldr	r0, [pc, #44]	; (8019a38 <USBD_LL_Init+0xa8>)
 8019a0c:	f7f2 f8e4 	bl	800bbd8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8019a10:	2240      	movs	r2, #64	; 0x40
 8019a12:	2101      	movs	r1, #1
 8019a14:	4808      	ldr	r0, [pc, #32]	; (8019a38 <USBD_LL_Init+0xa8>)
 8019a16:	f7f2 f8df 	bl	800bbd8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 8019a1a:	2240      	movs	r2, #64	; 0x40
 8019a1c:	2102      	movs	r1, #2
 8019a1e:	4806      	ldr	r0, [pc, #24]	; (8019a38 <USBD_LL_Init+0xa8>)
 8019a20:	f7f2 f8da 	bl	800bbd8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8019a24:	2240      	movs	r2, #64	; 0x40
 8019a26:	2103      	movs	r1, #3
 8019a28:	4803      	ldr	r0, [pc, #12]	; (8019a38 <USBD_LL_Init+0xa8>)
 8019a2a:	f7f2 f8d5 	bl	800bbd8 <HAL_PCDEx_SetTxFiFo>

	//


  }
  return USBD_OK;
 8019a2e:	2300      	movs	r3, #0
}
 8019a30:	4618      	mov	r0, r3
 8019a32:	3708      	adds	r7, #8
 8019a34:	46bd      	mov	sp, r7
 8019a36:	bd80      	pop	{r7, pc}
 8019a38:	20009b34 	.word	0x20009b34

08019a3c <USBD_LL_Start>:




USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b084      	sub	sp, #16
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a44:	2300      	movs	r3, #0
 8019a46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a48:	2300      	movs	r3, #0
 8019a4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019a52:	4618      	mov	r0, r3
 8019a54:	f7f1 f993 	bl	800ad7e <HAL_PCD_Start>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a5c:	7bbb      	ldrb	r3, [r7, #14]
 8019a5e:	2b03      	cmp	r3, #3
 8019a60:	d816      	bhi.n	8019a90 <USBD_LL_Start+0x54>
 8019a62:	a201      	add	r2, pc, #4	; (adr r2, 8019a68 <USBD_LL_Start+0x2c>)
 8019a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a68:	08019a79 	.word	0x08019a79
 8019a6c:	08019a7f 	.word	0x08019a7f
 8019a70:	08019a85 	.word	0x08019a85
 8019a74:	08019a8b 	.word	0x08019a8b
    case HAL_OK :
      usb_status = USBD_OK;
 8019a78:	2300      	movs	r3, #0
 8019a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8019a7c:	e00b      	b.n	8019a96 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a7e:	2303      	movs	r3, #3
 8019a80:	73fb      	strb	r3, [r7, #15]
    break;
 8019a82:	e008      	b.n	8019a96 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a84:	2301      	movs	r3, #1
 8019a86:	73fb      	strb	r3, [r7, #15]
    break;
 8019a88:	e005      	b.n	8019a96 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a8a:	2303      	movs	r3, #3
 8019a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8019a8e:	e002      	b.n	8019a96 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019a90:	2303      	movs	r3, #3
 8019a92:	73fb      	strb	r3, [r7, #15]
    break;
 8019a94:	bf00      	nop
  }
  return usb_status;
 8019a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	3710      	adds	r7, #16
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}

08019aa0 <USBD_LL_OpenEP>:




USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b084      	sub	sp, #16
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	4608      	mov	r0, r1
 8019aaa:	4611      	mov	r1, r2
 8019aac:	461a      	mov	r2, r3
 8019aae:	4603      	mov	r3, r0
 8019ab0:	70fb      	strb	r3, [r7, #3]
 8019ab2:	460b      	mov	r3, r1
 8019ab4:	70bb      	strb	r3, [r7, #2]
 8019ab6:	4613      	mov	r3, r2
 8019ab8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aba:	2300      	movs	r3, #0
 8019abc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019abe:	2300      	movs	r3, #0
 8019ac0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019ac8:	78bb      	ldrb	r3, [r7, #2]
 8019aca:	883a      	ldrh	r2, [r7, #0]
 8019acc:	78f9      	ldrb	r1, [r7, #3]
 8019ace:	f7f1 fd4e 	bl	800b56e <HAL_PCD_EP_Open>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019ad6:	7bbb      	ldrb	r3, [r7, #14]
 8019ad8:	2b03      	cmp	r3, #3
 8019ada:	d817      	bhi.n	8019b0c <USBD_LL_OpenEP+0x6c>
 8019adc:	a201      	add	r2, pc, #4	; (adr r2, 8019ae4 <USBD_LL_OpenEP+0x44>)
 8019ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ae2:	bf00      	nop
 8019ae4:	08019af5 	.word	0x08019af5
 8019ae8:	08019afb 	.word	0x08019afb
 8019aec:	08019b01 	.word	0x08019b01
 8019af0:	08019b07 	.word	0x08019b07
    case HAL_OK :
      usb_status = USBD_OK;
 8019af4:	2300      	movs	r3, #0
 8019af6:	73fb      	strb	r3, [r7, #15]
    break;
 8019af8:	e00b      	b.n	8019b12 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019afa:	2303      	movs	r3, #3
 8019afc:	73fb      	strb	r3, [r7, #15]
    break;
 8019afe:	e008      	b.n	8019b12 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b00:	2301      	movs	r3, #1
 8019b02:	73fb      	strb	r3, [r7, #15]
    break;
 8019b04:	e005      	b.n	8019b12 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b06:	2303      	movs	r3, #3
 8019b08:	73fb      	strb	r3, [r7, #15]
    break;
 8019b0a:	e002      	b.n	8019b12 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8019b0c:	2303      	movs	r3, #3
 8019b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8019b10:	bf00      	nop
  }
  return usb_status;
 8019b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b14:	4618      	mov	r0, r3
 8019b16:	3710      	adds	r7, #16
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}

08019b1c <USBD_LL_CloseEP>:



USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b084      	sub	sp, #16
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	460b      	mov	r3, r1
 8019b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b36:	78fa      	ldrb	r2, [r7, #3]
 8019b38:	4611      	mov	r1, r2
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	f7f1 fd7f 	bl	800b63e <HAL_PCD_EP_Close>
 8019b40:	4603      	mov	r3, r0
 8019b42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b44:	7bbb      	ldrb	r3, [r7, #14]
 8019b46:	2b03      	cmp	r3, #3
 8019b48:	d816      	bhi.n	8019b78 <USBD_LL_CloseEP+0x5c>
 8019b4a:	a201      	add	r2, pc, #4	; (adr r2, 8019b50 <USBD_LL_CloseEP+0x34>)
 8019b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b50:	08019b61 	.word	0x08019b61
 8019b54:	08019b67 	.word	0x08019b67
 8019b58:	08019b6d 	.word	0x08019b6d
 8019b5c:	08019b73 	.word	0x08019b73
    case HAL_OK :
      usb_status = USBD_OK;
 8019b60:	2300      	movs	r3, #0
 8019b62:	73fb      	strb	r3, [r7, #15]
    break;
 8019b64:	e00b      	b.n	8019b7e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b66:	2303      	movs	r3, #3
 8019b68:	73fb      	strb	r3, [r7, #15]
    break;
 8019b6a:	e008      	b.n	8019b7e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b6c:	2301      	movs	r3, #1
 8019b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8019b70:	e005      	b.n	8019b7e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b72:	2303      	movs	r3, #3
 8019b74:	73fb      	strb	r3, [r7, #15]
    break;
 8019b76:	e002      	b.n	8019b7e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b78:	2303      	movs	r3, #3
 8019b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b7c:	bf00      	nop
  }
  return usb_status;
 8019b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3710      	adds	r7, #16
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b084      	sub	sp, #16
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	460b      	mov	r3, r1
 8019b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b94:	2300      	movs	r3, #0
 8019b96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019ba2:	78fa      	ldrb	r2, [r7, #3]
 8019ba4:	4611      	mov	r1, r2
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	f7f1 fede 	bl	800b968 <HAL_PCD_EP_Flush>
 8019bac:	4603      	mov	r3, r0
 8019bae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019bb0:	7bbb      	ldrb	r3, [r7, #14]
 8019bb2:	2b03      	cmp	r3, #3
 8019bb4:	d816      	bhi.n	8019be4 <USBD_LL_FlushEP+0x5c>
 8019bb6:	a201      	add	r2, pc, #4	; (adr r2, 8019bbc <USBD_LL_FlushEP+0x34>)
 8019bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bbc:	08019bcd 	.word	0x08019bcd
 8019bc0:	08019bd3 	.word	0x08019bd3
 8019bc4:	08019bd9 	.word	0x08019bd9
 8019bc8:	08019bdf 	.word	0x08019bdf
    case HAL_OK :
      usb_status = USBD_OK;
 8019bcc:	2300      	movs	r3, #0
 8019bce:	73fb      	strb	r3, [r7, #15]
    break;
 8019bd0:	e00b      	b.n	8019bea <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bd2:	2303      	movs	r3, #3
 8019bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8019bd6:	e008      	b.n	8019bea <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bd8:	2301      	movs	r3, #1
 8019bda:	73fb      	strb	r3, [r7, #15]
    break;
 8019bdc:	e005      	b.n	8019bea <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bde:	2303      	movs	r3, #3
 8019be0:	73fb      	strb	r3, [r7, #15]
    break;
 8019be2:	e002      	b.n	8019bea <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019be4:	2303      	movs	r3, #3
 8019be6:	73fb      	strb	r3, [r7, #15]
    break;
 8019be8:	bf00      	nop
  }
  return usb_status;
 8019bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bec:	4618      	mov	r0, r3
 8019bee:	3710      	adds	r7, #16
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	bd80      	pop	{r7, pc}

08019bf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b084      	sub	sp, #16
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
 8019bfc:	460b      	mov	r3, r1
 8019bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c00:	2300      	movs	r3, #0
 8019c02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c04:	2300      	movs	r3, #0
 8019c06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019c0e:	78fa      	ldrb	r2, [r7, #3]
 8019c10:	4611      	mov	r1, r2
 8019c12:	4618      	mov	r0, r3
 8019c14:	f7f1 fdf0 	bl	800b7f8 <HAL_PCD_EP_SetStall>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019c1c:	7bbb      	ldrb	r3, [r7, #14]
 8019c1e:	2b03      	cmp	r3, #3
 8019c20:	d816      	bhi.n	8019c50 <USBD_LL_StallEP+0x5c>
 8019c22:	a201      	add	r2, pc, #4	; (adr r2, 8019c28 <USBD_LL_StallEP+0x34>)
 8019c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c28:	08019c39 	.word	0x08019c39
 8019c2c:	08019c3f 	.word	0x08019c3f
 8019c30:	08019c45 	.word	0x08019c45
 8019c34:	08019c4b 	.word	0x08019c4b
    case HAL_OK :
      usb_status = USBD_OK;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c3c:	e00b      	b.n	8019c56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c3e:	2303      	movs	r3, #3
 8019c40:	73fb      	strb	r3, [r7, #15]
    break;
 8019c42:	e008      	b.n	8019c56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c44:	2301      	movs	r3, #1
 8019c46:	73fb      	strb	r3, [r7, #15]
    break;
 8019c48:	e005      	b.n	8019c56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c4a:	2303      	movs	r3, #3
 8019c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8019c4e:	e002      	b.n	8019c56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019c50:	2303      	movs	r3, #3
 8019c52:	73fb      	strb	r3, [r7, #15]
    break;
 8019c54:	bf00      	nop
  }
  return usb_status;
 8019c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3710      	adds	r7, #16
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}

08019c60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b084      	sub	sp, #16
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
 8019c68:	460b      	mov	r3, r1
 8019c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c70:	2300      	movs	r3, #0
 8019c72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019c7a:	78fa      	ldrb	r2, [r7, #3]
 8019c7c:	4611      	mov	r1, r2
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7f1 fe1c 	bl	800b8bc <HAL_PCD_EP_ClrStall>
 8019c84:	4603      	mov	r3, r0
 8019c86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019c88:	7bbb      	ldrb	r3, [r7, #14]
 8019c8a:	2b03      	cmp	r3, #3
 8019c8c:	d816      	bhi.n	8019cbc <USBD_LL_ClearStallEP+0x5c>
 8019c8e:	a201      	add	r2, pc, #4	; (adr r2, 8019c94 <USBD_LL_ClearStallEP+0x34>)
 8019c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c94:	08019ca5 	.word	0x08019ca5
 8019c98:	08019cab 	.word	0x08019cab
 8019c9c:	08019cb1 	.word	0x08019cb1
 8019ca0:	08019cb7 	.word	0x08019cb7
    case HAL_OK :
      usb_status = USBD_OK;
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ca8:	e00b      	b.n	8019cc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019caa:	2303      	movs	r3, #3
 8019cac:	73fb      	strb	r3, [r7, #15]
    break;
 8019cae:	e008      	b.n	8019cc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019cb0:	2301      	movs	r3, #1
 8019cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8019cb4:	e005      	b.n	8019cc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019cb6:	2303      	movs	r3, #3
 8019cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8019cba:	e002      	b.n	8019cc2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019cbc:	2303      	movs	r3, #3
 8019cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8019cc0:	bf00      	nop
  }
  return usb_status;
 8019cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	3710      	adds	r7, #16
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bd80      	pop	{r7, pc}

08019ccc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ccc:	b480      	push	{r7}
 8019cce:	b085      	sub	sp, #20
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]
 8019cd4:	460b      	mov	r3, r1
 8019cd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019cde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	da0b      	bge.n	8019d00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019ce8:	78fb      	ldrb	r3, [r7, #3]
 8019cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019cee:	68f9      	ldr	r1, [r7, #12]
 8019cf0:	4613      	mov	r3, r2
 8019cf2:	00db      	lsls	r3, r3, #3
 8019cf4:	1a9b      	subs	r3, r3, r2
 8019cf6:	009b      	lsls	r3, r3, #2
 8019cf8:	440b      	add	r3, r1
 8019cfa:	333e      	adds	r3, #62	; 0x3e
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	e00b      	b.n	8019d18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019d00:	78fb      	ldrb	r3, [r7, #3]
 8019d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019d06:	68f9      	ldr	r1, [r7, #12]
 8019d08:	4613      	mov	r3, r2
 8019d0a:	00db      	lsls	r3, r3, #3
 8019d0c:	1a9b      	subs	r3, r3, r2
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	440b      	add	r3, r1
 8019d12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019d16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019d18:	4618      	mov	r0, r3
 8019d1a:	3714      	adds	r7, #20
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d22:	4770      	bx	lr

08019d24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b084      	sub	sp, #16
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
 8019d2c:	460b      	mov	r3, r1
 8019d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d30:	2300      	movs	r3, #0
 8019d32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d34:	2300      	movs	r3, #0
 8019d36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019d3e:	78fa      	ldrb	r2, [r7, #3]
 8019d40:	4611      	mov	r1, r2
 8019d42:	4618      	mov	r0, r3
 8019d44:	f7f1 fbee 	bl	800b524 <HAL_PCD_SetAddress>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019d4c:	7bbb      	ldrb	r3, [r7, #14]
 8019d4e:	2b03      	cmp	r3, #3
 8019d50:	d816      	bhi.n	8019d80 <USBD_LL_SetUSBAddress+0x5c>
 8019d52:	a201      	add	r2, pc, #4	; (adr r2, 8019d58 <USBD_LL_SetUSBAddress+0x34>)
 8019d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d58:	08019d69 	.word	0x08019d69
 8019d5c:	08019d6f 	.word	0x08019d6f
 8019d60:	08019d75 	.word	0x08019d75
 8019d64:	08019d7b 	.word	0x08019d7b
    case HAL_OK :
      usb_status = USBD_OK;
 8019d68:	2300      	movs	r3, #0
 8019d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8019d6c:	e00b      	b.n	8019d86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019d6e:	2303      	movs	r3, #3
 8019d70:	73fb      	strb	r3, [r7, #15]
    break;
 8019d72:	e008      	b.n	8019d86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019d74:	2301      	movs	r3, #1
 8019d76:	73fb      	strb	r3, [r7, #15]
    break;
 8019d78:	e005      	b.n	8019d86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019d7a:	2303      	movs	r3, #3
 8019d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8019d7e:	e002      	b.n	8019d86 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019d80:	2303      	movs	r3, #3
 8019d82:	73fb      	strb	r3, [r7, #15]
    break;
 8019d84:	bf00      	nop
  }
  return usb_status;
 8019d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3710      	adds	r7, #16
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}

08019d90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b086      	sub	sp, #24
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	60f8      	str	r0, [r7, #12]
 8019d98:	607a      	str	r2, [r7, #4]
 8019d9a:	603b      	str	r3, [r7, #0]
 8019d9c:	460b      	mov	r3, r1
 8019d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019da0:	2300      	movs	r3, #0
 8019da2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019da4:	2300      	movs	r3, #0
 8019da6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019dae:	7af9      	ldrb	r1, [r7, #11]
 8019db0:	683b      	ldr	r3, [r7, #0]
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	f7f1 fce3 	bl	800b77e <HAL_PCD_EP_Transmit>
 8019db8:	4603      	mov	r3, r0
 8019dba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019dbc:	7dbb      	ldrb	r3, [r7, #22]
 8019dbe:	2b03      	cmp	r3, #3
 8019dc0:	d816      	bhi.n	8019df0 <USBD_LL_Transmit+0x60>
 8019dc2:	a201      	add	r2, pc, #4	; (adr r2, 8019dc8 <USBD_LL_Transmit+0x38>)
 8019dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dc8:	08019dd9 	.word	0x08019dd9
 8019dcc:	08019ddf 	.word	0x08019ddf
 8019dd0:	08019de5 	.word	0x08019de5
 8019dd4:	08019deb 	.word	0x08019deb
    case HAL_OK :
      usb_status = USBD_OK;
 8019dd8:	2300      	movs	r3, #0
 8019dda:	75fb      	strb	r3, [r7, #23]
    break;
 8019ddc:	e00b      	b.n	8019df6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019dde:	2303      	movs	r3, #3
 8019de0:	75fb      	strb	r3, [r7, #23]
    break;
 8019de2:	e008      	b.n	8019df6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019de4:	2301      	movs	r3, #1
 8019de6:	75fb      	strb	r3, [r7, #23]
    break;
 8019de8:	e005      	b.n	8019df6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019dea:	2303      	movs	r3, #3
 8019dec:	75fb      	strb	r3, [r7, #23]
    break;
 8019dee:	e002      	b.n	8019df6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019df0:	2303      	movs	r3, #3
 8019df2:	75fb      	strb	r3, [r7, #23]
    break;
 8019df4:	bf00      	nop
  }
  return usb_status;
 8019df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	3718      	adds	r7, #24
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}

08019e00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b086      	sub	sp, #24
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	60f8      	str	r0, [r7, #12]
 8019e08:	607a      	str	r2, [r7, #4]
 8019e0a:	603b      	str	r3, [r7, #0]
 8019e0c:	460b      	mov	r3, r1
 8019e0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e10:	2300      	movs	r3, #0
 8019e12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e14:	2300      	movs	r3, #0
 8019e16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019e1e:	7af9      	ldrb	r1, [r7, #11]
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	687a      	ldr	r2, [r7, #4]
 8019e24:	f7f1 fc55 	bl	800b6d2 <HAL_PCD_EP_Receive>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019e2c:	7dbb      	ldrb	r3, [r7, #22]
 8019e2e:	2b03      	cmp	r3, #3
 8019e30:	d816      	bhi.n	8019e60 <USBD_LL_PrepareReceive+0x60>
 8019e32:	a201      	add	r2, pc, #4	; (adr r2, 8019e38 <USBD_LL_PrepareReceive+0x38>)
 8019e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e38:	08019e49 	.word	0x08019e49
 8019e3c:	08019e4f 	.word	0x08019e4f
 8019e40:	08019e55 	.word	0x08019e55
 8019e44:	08019e5b 	.word	0x08019e5b
    case HAL_OK :
      usb_status = USBD_OK;
 8019e48:	2300      	movs	r3, #0
 8019e4a:	75fb      	strb	r3, [r7, #23]
    break;
 8019e4c:	e00b      	b.n	8019e66 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019e4e:	2303      	movs	r3, #3
 8019e50:	75fb      	strb	r3, [r7, #23]
    break;
 8019e52:	e008      	b.n	8019e66 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019e54:	2301      	movs	r3, #1
 8019e56:	75fb      	strb	r3, [r7, #23]
    break;
 8019e58:	e005      	b.n	8019e66 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019e5a:	2303      	movs	r3, #3
 8019e5c:	75fb      	strb	r3, [r7, #23]
    break;
 8019e5e:	e002      	b.n	8019e66 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019e60:	2303      	movs	r3, #3
 8019e62:	75fb      	strb	r3, [r7, #23]
    break;
 8019e64:	bf00      	nop
  }
  return usb_status;
 8019e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8019e68:	4618      	mov	r0, r3
 8019e6a:	3718      	adds	r7, #24
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b082      	sub	sp, #8
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
 8019e78:	460b      	mov	r3, r1
 8019e7a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019e82:	78fa      	ldrb	r2, [r7, #3]
 8019e84:	4611      	mov	r1, r2
 8019e86:	4618      	mov	r0, r3
 8019e88:	f7f1 fc61 	bl	800b74e <HAL_PCD_EP_GetRxCount>
 8019e8c:	4603      	mov	r3, r0
}
 8019e8e:	4618      	mov	r0, r3
 8019e90:	3708      	adds	r7, #8
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}
	...

08019e98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b082      	sub	sp, #8
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
 8019ea0:	460b      	mov	r3, r1
 8019ea2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019ea4:	78fb      	ldrb	r3, [r7, #3]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d002      	beq.n	8019eb0 <HAL_PCDEx_LPM_Callback+0x18>
 8019eaa:	2b01      	cmp	r3, #1
 8019eac:	d01f      	beq.n	8019eee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019eae:	e03b      	b.n	8019f28 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	6a1b      	ldr	r3, [r3, #32]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d007      	beq.n	8019ec8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019eb8:	f000 f854 	bl	8019f64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019ebc:	4b1c      	ldr	r3, [pc, #112]	; (8019f30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019ebe:	691b      	ldr	r3, [r3, #16]
 8019ec0:	4a1b      	ldr	r2, [pc, #108]	; (8019f30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019ec2:	f023 0306 	bic.w	r3, r3, #6
 8019ec6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	687a      	ldr	r2, [r7, #4]
 8019ed4:	6812      	ldr	r2, [r2, #0]
 8019ed6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019eda:	f023 0301 	bic.w	r3, r3, #1
 8019ede:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f000 faaa 	bl	801a440 <USBD_LL_Resume>
    break;
 8019eec:	e01c      	b.n	8019f28 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	687a      	ldr	r2, [r7, #4]
 8019efa:	6812      	ldr	r2, [r2, #0]
 8019efc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019f00:	f043 0301 	orr.w	r3, r3, #1
 8019f04:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f000 fa81 	bl	801a414 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	6a1b      	ldr	r3, [r3, #32]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d005      	beq.n	8019f26 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019f1a:	4b05      	ldr	r3, [pc, #20]	; (8019f30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019f1c:	691b      	ldr	r3, [r3, #16]
 8019f1e:	4a04      	ldr	r2, [pc, #16]	; (8019f30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019f20:	f043 0306 	orr.w	r3, r3, #6
 8019f24:	6113      	str	r3, [r2, #16]
    break;
 8019f26:	bf00      	nop
}
 8019f28:	bf00      	nop
 8019f2a:	3708      	adds	r7, #8
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}
 8019f30:	e000ed00 	.word	0xe000ed00

08019f34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019f34:	b480      	push	{r7}
 8019f36:	b083      	sub	sp, #12
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
  //static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  static uint32_t mem[(sizeof(USBD_CDCMSC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  //static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */

  return mem;
 8019f3c:	4b03      	ldr	r3, [pc, #12]	; (8019f4c <USBD_static_malloc+0x18>)
}
 8019f3e:	4618      	mov	r0, r3
 8019f40:	370c      	adds	r7, #12
 8019f42:	46bd      	mov	sp, r7
 8019f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f48:	4770      	bx	lr
 8019f4a:	bf00      	nop
 8019f4c:	20001d24 	.word	0x20001d24

08019f50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019f50:	b480      	push	{r7}
 8019f52:	b083      	sub	sp, #12
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]

}
 8019f58:	bf00      	nop
 8019f5a:	370c      	adds	r7, #12
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f62:	4770      	bx	lr

08019f64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019f68:	f7eb feb4 	bl	8005cd4 <SystemClock_Config>
}
 8019f6c:	bf00      	nop
 8019f6e:	bd80      	pop	{r7, pc}

08019f70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b086      	sub	sp, #24
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	60f8      	str	r0, [r7, #12]
 8019f78:	60b9      	str	r1, [r7, #8]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d101      	bne.n	8019f88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019f84:	2303      	movs	r3, #3
 8019f86:	e023      	b.n	8019fd0 <USBD_Init+0x60>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	2200      	movs	r2, #0
 8019f8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserDataCDC = NULL;
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	2200      	movs	r2, #0
 8019f94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pdev->pUserDataMSC = NULL;
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d003      	beq.n	8019fb6 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	68ba      	ldr	r2, [r7, #8]
 8019fb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	2201      	movs	r2, #1
 8019fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	79fa      	ldrb	r2, [r7, #7]
 8019fc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8019fc4:	68f8      	ldr	r0, [r7, #12]
 8019fc6:	f7ff fce3 	bl	8019990 <USBD_LL_Init>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8019fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	3718      	adds	r7, #24
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	bd80      	pop	{r7, pc}

08019fd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b084      	sub	sp, #16
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
 8019fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8019fe6:	683b      	ldr	r3, [r7, #0]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d101      	bne.n	8019ff0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8019fec:	2303      	movs	r3, #3
 8019fee:	e016      	b.n	801a01e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	683a      	ldr	r2, [r7, #0]
 8019ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a000:	2b00      	cmp	r3, #0
 801a002:	d00b      	beq.n	801a01c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a00c:	f107 020e 	add.w	r2, r7, #14
 801a010:	4610      	mov	r0, r2
 801a012:	4798      	blx	r3
 801a014:	4602      	mov	r2, r0
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801a01c:	2300      	movs	r3, #0
}
 801a01e:	4618      	mov	r0, r3
 801a020:	3710      	adds	r7, #16
 801a022:	46bd      	mov	sp, r7
 801a024:	bd80      	pop	{r7, pc}

0801a026 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801a026:	b580      	push	{r7, lr}
 801a028:	b082      	sub	sp, #8
 801a02a:	af00      	add	r7, sp, #0
 801a02c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801a02e:	6878      	ldr	r0, [r7, #4]
 801a030:	f7ff fd04 	bl	8019a3c <USBD_LL_Start>
 801a034:	4603      	mov	r3, r0
}
 801a036:	4618      	mov	r0, r3
 801a038:	3708      	adds	r7, #8
 801a03a:	46bd      	mov	sp, r7
 801a03c:	bd80      	pop	{r7, pc}

0801a03e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801a03e:	b480      	push	{r7}
 801a040:	b083      	sub	sp, #12
 801a042:	af00      	add	r7, sp, #0
 801a044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a046:	2300      	movs	r3, #0
}
 801a048:	4618      	mov	r0, r3
 801a04a:	370c      	adds	r7, #12
 801a04c:	46bd      	mov	sp, r7
 801a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a052:	4770      	bx	lr

0801a054 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a054:	b580      	push	{r7, lr}
 801a056:	b084      	sub	sp, #16
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
 801a05c:	460b      	mov	r3, r1
 801a05e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801a060:	2303      	movs	r3, #3
 801a062:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d009      	beq.n	801a082 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	78fa      	ldrb	r2, [r7, #3]
 801a078:	4611      	mov	r1, r2
 801a07a:	6878      	ldr	r0, [r7, #4]
 801a07c:	4798      	blx	r3
 801a07e:	4603      	mov	r3, r0
 801a080:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801a082:	7bfb      	ldrb	r3, [r7, #15]
}
 801a084:	4618      	mov	r0, r3
 801a086:	3710      	adds	r7, #16
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b082      	sub	sp, #8
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
 801a094:	460b      	mov	r3, r1
 801a096:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d007      	beq.n	801a0b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0a8:	685b      	ldr	r3, [r3, #4]
 801a0aa:	78fa      	ldrb	r2, [r7, #3]
 801a0ac:	4611      	mov	r1, r2
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	4798      	blx	r3
  }

  return USBD_OK;
 801a0b2:	2300      	movs	r3, #0
}
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	3708      	adds	r7, #8
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}

0801a0bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b084      	sub	sp, #16
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
 801a0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a0cc:	6839      	ldr	r1, [r7, #0]
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f000 ffba 	bl	801b048 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	2201      	movs	r2, #1
 801a0d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a0f0:	f003 031f 	and.w	r3, r3, #31
 801a0f4:	2b02      	cmp	r3, #2
 801a0f6:	d01a      	beq.n	801a12e <USBD_LL_SetupStage+0x72>
 801a0f8:	2b02      	cmp	r3, #2
 801a0fa:	d822      	bhi.n	801a142 <USBD_LL_SetupStage+0x86>
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d002      	beq.n	801a106 <USBD_LL_SetupStage+0x4a>
 801a100:	2b01      	cmp	r3, #1
 801a102:	d00a      	beq.n	801a11a <USBD_LL_SetupStage+0x5e>
 801a104:	e01d      	b.n	801a142 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a10c:	4619      	mov	r1, r3
 801a10e:	6878      	ldr	r0, [r7, #4]
 801a110:	f000 fa62 	bl	801a5d8 <USBD_StdDevReq>
 801a114:	4603      	mov	r3, r0
 801a116:	73fb      	strb	r3, [r7, #15]
      break;
 801a118:	e020      	b.n	801a15c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a120:	4619      	mov	r1, r3
 801a122:	6878      	ldr	r0, [r7, #4]
 801a124:	f000 fac6 	bl	801a6b4 <USBD_StdItfReq>
 801a128:	4603      	mov	r3, r0
 801a12a:	73fb      	strb	r3, [r7, #15]
      break;
 801a12c:	e016      	b.n	801a15c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a134:	4619      	mov	r1, r3
 801a136:	6878      	ldr	r0, [r7, #4]
 801a138:	f000 fb05 	bl	801a746 <USBD_StdEPReq>
 801a13c:	4603      	mov	r3, r0
 801a13e:	73fb      	strb	r3, [r7, #15]
      break;
 801a140:	e00c      	b.n	801a15c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a14c:	b2db      	uxtb	r3, r3
 801a14e:	4619      	mov	r1, r3
 801a150:	6878      	ldr	r0, [r7, #4]
 801a152:	f7ff fd4f 	bl	8019bf4 <USBD_LL_StallEP>
 801a156:	4603      	mov	r3, r0
 801a158:	73fb      	strb	r3, [r7, #15]
      break;
 801a15a:	bf00      	nop
  }

  return ret;
 801a15c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a15e:	4618      	mov	r0, r3
 801a160:	3710      	adds	r7, #16
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}

0801a166 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a166:	b580      	push	{r7, lr}
 801a168:	b086      	sub	sp, #24
 801a16a:	af00      	add	r7, sp, #0
 801a16c:	60f8      	str	r0, [r7, #12]
 801a16e:	460b      	mov	r3, r1
 801a170:	607a      	str	r2, [r7, #4]
 801a172:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a174:	7afb      	ldrb	r3, [r7, #11]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d138      	bne.n	801a1ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801a180:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a188:	2b03      	cmp	r3, #3
 801a18a:	d14a      	bne.n	801a222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801a18c:	693b      	ldr	r3, [r7, #16]
 801a18e:	689a      	ldr	r2, [r3, #8]
 801a190:	693b      	ldr	r3, [r7, #16]
 801a192:	68db      	ldr	r3, [r3, #12]
 801a194:	429a      	cmp	r2, r3
 801a196:	d913      	bls.n	801a1c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a198:	693b      	ldr	r3, [r7, #16]
 801a19a:	689a      	ldr	r2, [r3, #8]
 801a19c:	693b      	ldr	r3, [r7, #16]
 801a19e:	68db      	ldr	r3, [r3, #12]
 801a1a0:	1ad2      	subs	r2, r2, r3
 801a1a2:	693b      	ldr	r3, [r7, #16]
 801a1a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801a1a6:	693b      	ldr	r3, [r7, #16]
 801a1a8:	68da      	ldr	r2, [r3, #12]
 801a1aa:	693b      	ldr	r3, [r7, #16]
 801a1ac:	689b      	ldr	r3, [r3, #8]
 801a1ae:	4293      	cmp	r3, r2
 801a1b0:	bf28      	it	cs
 801a1b2:	4613      	movcs	r3, r2
 801a1b4:	461a      	mov	r2, r3
 801a1b6:	6879      	ldr	r1, [r7, #4]
 801a1b8:	68f8      	ldr	r0, [r7, #12]
 801a1ba:	f001 f95b 	bl	801b474 <USBD_CtlContinueRx>
 801a1be:	e030      	b.n	801a222 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a1c6:	b2db      	uxtb	r3, r3
 801a1c8:	2b03      	cmp	r3, #3
 801a1ca:	d10b      	bne.n	801a1e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1d2:	691b      	ldr	r3, [r3, #16]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d005      	beq.n	801a1e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1de:	691b      	ldr	r3, [r3, #16]
 801a1e0:	68f8      	ldr	r0, [r7, #12]
 801a1e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801a1e4:	68f8      	ldr	r0, [r7, #12]
 801a1e6:	f001 f956 	bl	801b496 <USBD_CtlSendStatus>
 801a1ea:	e01a      	b.n	801a222 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a1f2:	b2db      	uxtb	r3, r3
 801a1f4:	2b03      	cmp	r3, #3
 801a1f6:	d114      	bne.n	801a222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1fe:	699b      	ldr	r3, [r3, #24]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d00e      	beq.n	801a222 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a20a:	699b      	ldr	r3, [r3, #24]
 801a20c:	7afa      	ldrb	r2, [r7, #11]
 801a20e:	4611      	mov	r1, r2
 801a210:	68f8      	ldr	r0, [r7, #12]
 801a212:	4798      	blx	r3
 801a214:	4603      	mov	r3, r0
 801a216:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a218:	7dfb      	ldrb	r3, [r7, #23]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d001      	beq.n	801a222 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a21e:	7dfb      	ldrb	r3, [r7, #23]
 801a220:	e000      	b.n	801a224 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a222:	2300      	movs	r3, #0
}
 801a224:	4618      	mov	r0, r3
 801a226:	3718      	adds	r7, #24
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}

0801a22c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b086      	sub	sp, #24
 801a230:	af00      	add	r7, sp, #0
 801a232:	60f8      	str	r0, [r7, #12]
 801a234:	460b      	mov	r3, r1
 801a236:	607a      	str	r2, [r7, #4]
 801a238:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a23a:	7afb      	ldrb	r3, [r7, #11]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d16b      	bne.n	801a318 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	3314      	adds	r3, #20
 801a244:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a24c:	2b02      	cmp	r3, #2
 801a24e:	d156      	bne.n	801a2fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a250:	693b      	ldr	r3, [r7, #16]
 801a252:	689a      	ldr	r2, [r3, #8]
 801a254:	693b      	ldr	r3, [r7, #16]
 801a256:	68db      	ldr	r3, [r3, #12]
 801a258:	429a      	cmp	r2, r3
 801a25a:	d914      	bls.n	801a286 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a25c:	693b      	ldr	r3, [r7, #16]
 801a25e:	689a      	ldr	r2, [r3, #8]
 801a260:	693b      	ldr	r3, [r7, #16]
 801a262:	68db      	ldr	r3, [r3, #12]
 801a264:	1ad2      	subs	r2, r2, r3
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a26a:	693b      	ldr	r3, [r7, #16]
 801a26c:	689b      	ldr	r3, [r3, #8]
 801a26e:	461a      	mov	r2, r3
 801a270:	6879      	ldr	r1, [r7, #4]
 801a272:	68f8      	ldr	r0, [r7, #12]
 801a274:	f001 f8d0 	bl	801b418 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a278:	2300      	movs	r3, #0
 801a27a:	2200      	movs	r2, #0
 801a27c:	2100      	movs	r1, #0
 801a27e:	68f8      	ldr	r0, [r7, #12]
 801a280:	f7ff fdbe 	bl	8019e00 <USBD_LL_PrepareReceive>
 801a284:	e03b      	b.n	801a2fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a286:	693b      	ldr	r3, [r7, #16]
 801a288:	68da      	ldr	r2, [r3, #12]
 801a28a:	693b      	ldr	r3, [r7, #16]
 801a28c:	689b      	ldr	r3, [r3, #8]
 801a28e:	429a      	cmp	r2, r3
 801a290:	d11c      	bne.n	801a2cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a292:	693b      	ldr	r3, [r7, #16]
 801a294:	685a      	ldr	r2, [r3, #4]
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a29a:	429a      	cmp	r2, r3
 801a29c:	d316      	bcc.n	801a2cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a29e:	693b      	ldr	r3, [r7, #16]
 801a2a0:	685a      	ldr	r2, [r3, #4]
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a2a8:	429a      	cmp	r2, r3
 801a2aa:	d20f      	bcs.n	801a2cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	2100      	movs	r1, #0
 801a2b0:	68f8      	ldr	r0, [r7, #12]
 801a2b2:	f001 f8b1 	bl	801b418 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a2be:	2300      	movs	r3, #0
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	2100      	movs	r1, #0
 801a2c4:	68f8      	ldr	r0, [r7, #12]
 801a2c6:	f7ff fd9b 	bl	8019e00 <USBD_LL_PrepareReceive>
 801a2ca:	e018      	b.n	801a2fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	2b03      	cmp	r3, #3
 801a2d6:	d10b      	bne.n	801a2f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2de:	68db      	ldr	r3, [r3, #12]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d005      	beq.n	801a2f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2ea:	68db      	ldr	r3, [r3, #12]
 801a2ec:	68f8      	ldr	r0, [r7, #12]
 801a2ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a2f0:	2180      	movs	r1, #128	; 0x80
 801a2f2:	68f8      	ldr	r0, [r7, #12]
 801a2f4:	f7ff fc7e 	bl	8019bf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a2f8:	68f8      	ldr	r0, [r7, #12]
 801a2fa:	f001 f8df 	bl	801b4bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a304:	2b01      	cmp	r3, #1
 801a306:	d122      	bne.n	801a34e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a308:	68f8      	ldr	r0, [r7, #12]
 801a30a:	f7ff fe98 	bl	801a03e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	2200      	movs	r2, #0
 801a312:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a316:	e01a      	b.n	801a34e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a31e:	b2db      	uxtb	r3, r3
 801a320:	2b03      	cmp	r3, #3
 801a322:	d114      	bne.n	801a34e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a32a:	695b      	ldr	r3, [r3, #20]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d00e      	beq.n	801a34e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a336:	695b      	ldr	r3, [r3, #20]
 801a338:	7afa      	ldrb	r2, [r7, #11]
 801a33a:	4611      	mov	r1, r2
 801a33c:	68f8      	ldr	r0, [r7, #12]
 801a33e:	4798      	blx	r3
 801a340:	4603      	mov	r3, r0
 801a342:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a344:	7dfb      	ldrb	r3, [r7, #23]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d001      	beq.n	801a34e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801a34a:	7dfb      	ldrb	r3, [r7, #23]
 801a34c:	e000      	b.n	801a350 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801a34e:	2300      	movs	r3, #0
}
 801a350:	4618      	mov	r0, r3
 801a352:	3718      	adds	r7, #24
 801a354:	46bd      	mov	sp, r7
 801a356:	bd80      	pop	{r7, pc}

0801a358 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b082      	sub	sp, #8
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	2201      	movs	r2, #1
 801a364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	2200      	movs	r2, #0
 801a36c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	2200      	movs	r2, #0
 801a374:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	2200      	movs	r2, #0
 801a37a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a384:	2b00      	cmp	r3, #0
 801a386:	d101      	bne.n	801a38c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801a388:	2303      	movs	r3, #3
 801a38a:	e02f      	b.n	801a3ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassDataCDC != NULL)
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a392:	2b00      	cmp	r3, #0
 801a394:	d00f      	beq.n	801a3b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a39c:	685b      	ldr	r3, [r3, #4]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d009      	beq.n	801a3b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3a8:	685b      	ldr	r3, [r3, #4]
 801a3aa:	687a      	ldr	r2, [r7, #4]
 801a3ac:	6852      	ldr	r2, [r2, #4]
 801a3ae:	b2d2      	uxtb	r2, r2
 801a3b0:	4611      	mov	r1, r2
 801a3b2:	6878      	ldr	r0, [r7, #4]
 801a3b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a3b6:	2340      	movs	r3, #64	; 0x40
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	2100      	movs	r1, #0
 801a3bc:	6878      	ldr	r0, [r7, #4]
 801a3be:	f7ff fb6f 	bl	8019aa0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	2201      	movs	r2, #1
 801a3c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2240      	movs	r2, #64	; 0x40
 801a3ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a3d2:	2340      	movs	r3, #64	; 0x40
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	2180      	movs	r1, #128	; 0x80
 801a3d8:	6878      	ldr	r0, [r7, #4]
 801a3da:	f7ff fb61 	bl	8019aa0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	2201      	movs	r2, #1
 801a3e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	2240      	movs	r2, #64	; 0x40
 801a3e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801a3ea:	2300      	movs	r3, #0
}
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	3708      	adds	r7, #8
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}

0801a3f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a3f4:	b480      	push	{r7}
 801a3f6:	b083      	sub	sp, #12
 801a3f8:	af00      	add	r7, sp, #0
 801a3fa:	6078      	str	r0, [r7, #4]
 801a3fc:	460b      	mov	r3, r1
 801a3fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	78fa      	ldrb	r2, [r7, #3]
 801a404:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a406:	2300      	movs	r3, #0
}
 801a408:	4618      	mov	r0, r3
 801a40a:	370c      	adds	r7, #12
 801a40c:	46bd      	mov	sp, r7
 801a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a412:	4770      	bx	lr

0801a414 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a414:	b480      	push	{r7}
 801a416:	b083      	sub	sp, #12
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a422:	b2da      	uxtb	r2, r3
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	2204      	movs	r2, #4
 801a42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a432:	2300      	movs	r3, #0
}
 801a434:	4618      	mov	r0, r3
 801a436:	370c      	adds	r7, #12
 801a438:	46bd      	mov	sp, r7
 801a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43e:	4770      	bx	lr

0801a440 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a440:	b480      	push	{r7}
 801a442:	b083      	sub	sp, #12
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a44e:	b2db      	uxtb	r3, r3
 801a450:	2b04      	cmp	r3, #4
 801a452:	d106      	bne.n	801a462 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801a45a:	b2da      	uxtb	r2, r3
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a462:	2300      	movs	r3, #0
}
 801a464:	4618      	mov	r0, r3
 801a466:	370c      	adds	r7, #12
 801a468:	46bd      	mov	sp, r7
 801a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a46e:	4770      	bx	lr

0801a470 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a470:	b580      	push	{r7, lr}
 801a472:	b082      	sub	sp, #8
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d101      	bne.n	801a486 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801a482:	2303      	movs	r3, #3
 801a484:	e012      	b.n	801a4ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a48c:	b2db      	uxtb	r3, r3
 801a48e:	2b03      	cmp	r3, #3
 801a490:	d10b      	bne.n	801a4aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a498:	69db      	ldr	r3, [r3, #28]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d005      	beq.n	801a4aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4a4:	69db      	ldr	r3, [r3, #28]
 801a4a6:	6878      	ldr	r0, [r7, #4]
 801a4a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a4aa:	2300      	movs	r3, #0
}
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	3708      	adds	r7, #8
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}

0801a4b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b082      	sub	sp, #8
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
 801a4bc:	460b      	mov	r3, r1
 801a4be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d101      	bne.n	801a4ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a4ca:	2303      	movs	r3, #3
 801a4cc:	e014      	b.n	801a4f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a4d4:	b2db      	uxtb	r3, r3
 801a4d6:	2b03      	cmp	r3, #3
 801a4d8:	d10d      	bne.n	801a4f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4e0:	6a1b      	ldr	r3, [r3, #32]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d007      	beq.n	801a4f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4ec:	6a1b      	ldr	r3, [r3, #32]
 801a4ee:	78fa      	ldrb	r2, [r7, #3]
 801a4f0:	4611      	mov	r1, r2
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a4f6:	2300      	movs	r3, #0
}
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	3708      	adds	r7, #8
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}

0801a500 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801a500:	b580      	push	{r7, lr}
 801a502:	b082      	sub	sp, #8
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
 801a508:	460b      	mov	r3, r1
 801a50a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a512:	2b00      	cmp	r3, #0
 801a514:	d101      	bne.n	801a51a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a516:	2303      	movs	r3, #3
 801a518:	e014      	b.n	801a544 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a520:	b2db      	uxtb	r3, r3
 801a522:	2b03      	cmp	r3, #3
 801a524:	d10d      	bne.n	801a542 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d007      	beq.n	801a542 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a53a:	78fa      	ldrb	r2, [r7, #3]
 801a53c:	4611      	mov	r1, r2
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a542:	2300      	movs	r3, #0
}
 801a544:	4618      	mov	r0, r3
 801a546:	3708      	adds	r7, #8
 801a548:	46bd      	mov	sp, r7
 801a54a:	bd80      	pop	{r7, pc}

0801a54c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801a54c:	b480      	push	{r7}
 801a54e:	b083      	sub	sp, #12
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a554:	2300      	movs	r3, #0
}
 801a556:	4618      	mov	r0, r3
 801a558:	370c      	adds	r7, #12
 801a55a:	46bd      	mov	sp, r7
 801a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a560:	4770      	bx	lr

0801a562 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801a562:	b580      	push	{r7, lr}
 801a564:	b082      	sub	sp, #8
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2201      	movs	r2, #1
 801a56e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d009      	beq.n	801a590 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a582:	685b      	ldr	r3, [r3, #4]
 801a584:	687a      	ldr	r2, [r7, #4]
 801a586:	6852      	ldr	r2, [r2, #4]
 801a588:	b2d2      	uxtb	r2, r2
 801a58a:	4611      	mov	r1, r2
 801a58c:	6878      	ldr	r0, [r7, #4]
 801a58e:	4798      	blx	r3
  }

  return USBD_OK;
 801a590:	2300      	movs	r3, #0
}
 801a592:	4618      	mov	r0, r3
 801a594:	3708      	adds	r7, #8
 801a596:	46bd      	mov	sp, r7
 801a598:	bd80      	pop	{r7, pc}

0801a59a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a59a:	b480      	push	{r7}
 801a59c:	b087      	sub	sp, #28
 801a59e:	af00      	add	r7, sp, #0
 801a5a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a5a6:	697b      	ldr	r3, [r7, #20]
 801a5a8:	781b      	ldrb	r3, [r3, #0]
 801a5aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801a5ac:	697b      	ldr	r3, [r7, #20]
 801a5ae:	3301      	adds	r3, #1
 801a5b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a5b2:	697b      	ldr	r3, [r7, #20]
 801a5b4:	781b      	ldrb	r3, [r3, #0]
 801a5b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a5b8:	8a3b      	ldrh	r3, [r7, #16]
 801a5ba:	021b      	lsls	r3, r3, #8
 801a5bc:	b21a      	sxth	r2, r3
 801a5be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a5c2:	4313      	orrs	r3, r2
 801a5c4:	b21b      	sxth	r3, r3
 801a5c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801a5c8:	89fb      	ldrh	r3, [r7, #14]
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	371c      	adds	r7, #28
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d4:	4770      	bx	lr
	...

0801a5d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
 801a5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a5e6:	683b      	ldr	r3, [r7, #0]
 801a5e8:	781b      	ldrb	r3, [r3, #0]
 801a5ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a5ee:	2b40      	cmp	r3, #64	; 0x40
 801a5f0:	d005      	beq.n	801a5fe <USBD_StdDevReq+0x26>
 801a5f2:	2b40      	cmp	r3, #64	; 0x40
 801a5f4:	d853      	bhi.n	801a69e <USBD_StdDevReq+0xc6>
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d00b      	beq.n	801a612 <USBD_StdDevReq+0x3a>
 801a5fa:	2b20      	cmp	r3, #32
 801a5fc:	d14f      	bne.n	801a69e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a604:	689b      	ldr	r3, [r3, #8]
 801a606:	6839      	ldr	r1, [r7, #0]
 801a608:	6878      	ldr	r0, [r7, #4]
 801a60a:	4798      	blx	r3
 801a60c:	4603      	mov	r3, r0
 801a60e:	73fb      	strb	r3, [r7, #15]
      break;
 801a610:	e04a      	b.n	801a6a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	785b      	ldrb	r3, [r3, #1]
 801a616:	2b09      	cmp	r3, #9
 801a618:	d83b      	bhi.n	801a692 <USBD_StdDevReq+0xba>
 801a61a:	a201      	add	r2, pc, #4	; (adr r2, 801a620 <USBD_StdDevReq+0x48>)
 801a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a620:	0801a675 	.word	0x0801a675
 801a624:	0801a689 	.word	0x0801a689
 801a628:	0801a693 	.word	0x0801a693
 801a62c:	0801a67f 	.word	0x0801a67f
 801a630:	0801a693 	.word	0x0801a693
 801a634:	0801a653 	.word	0x0801a653
 801a638:	0801a649 	.word	0x0801a649
 801a63c:	0801a693 	.word	0x0801a693
 801a640:	0801a66b 	.word	0x0801a66b
 801a644:	0801a65d 	.word	0x0801a65d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a648:	6839      	ldr	r1, [r7, #0]
 801a64a:	6878      	ldr	r0, [r7, #4]
 801a64c:	f000 f9de 	bl	801aa0c <USBD_GetDescriptor>
          break;
 801a650:	e024      	b.n	801a69c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a652:	6839      	ldr	r1, [r7, #0]
 801a654:	6878      	ldr	r0, [r7, #4]
 801a656:	f000 fb6d 	bl	801ad34 <USBD_SetAddress>
          break;
 801a65a:	e01f      	b.n	801a69c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a65c:	6839      	ldr	r1, [r7, #0]
 801a65e:	6878      	ldr	r0, [r7, #4]
 801a660:	f000 fbac 	bl	801adbc <USBD_SetConfig>
 801a664:	4603      	mov	r3, r0
 801a666:	73fb      	strb	r3, [r7, #15]
          break;
 801a668:	e018      	b.n	801a69c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a66a:	6839      	ldr	r1, [r7, #0]
 801a66c:	6878      	ldr	r0, [r7, #4]
 801a66e:	f000 fc4b 	bl	801af08 <USBD_GetConfig>
          break;
 801a672:	e013      	b.n	801a69c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a674:	6839      	ldr	r1, [r7, #0]
 801a676:	6878      	ldr	r0, [r7, #4]
 801a678:	f000 fc7c 	bl	801af74 <USBD_GetStatus>
          break;
 801a67c:	e00e      	b.n	801a69c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a67e:	6839      	ldr	r1, [r7, #0]
 801a680:	6878      	ldr	r0, [r7, #4]
 801a682:	f000 fcab 	bl	801afdc <USBD_SetFeature>
          break;
 801a686:	e009      	b.n	801a69c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a688:	6839      	ldr	r1, [r7, #0]
 801a68a:	6878      	ldr	r0, [r7, #4]
 801a68c:	f000 fcba 	bl	801b004 <USBD_ClrFeature>
          break;
 801a690:	e004      	b.n	801a69c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801a692:	6839      	ldr	r1, [r7, #0]
 801a694:	6878      	ldr	r0, [r7, #4]
 801a696:	f000 fd11 	bl	801b0bc <USBD_CtlError>
          break;
 801a69a:	bf00      	nop
      }
      break;
 801a69c:	e004      	b.n	801a6a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a69e:	6839      	ldr	r1, [r7, #0]
 801a6a0:	6878      	ldr	r0, [r7, #4]
 801a6a2:	f000 fd0b 	bl	801b0bc <USBD_CtlError>
      break;
 801a6a6:	bf00      	nop
  }

  return ret;
 801a6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	3710      	adds	r7, #16
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	bd80      	pop	{r7, pc}
 801a6b2:	bf00      	nop

0801a6b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b084      	sub	sp, #16
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	6078      	str	r0, [r7, #4]
 801a6bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a6ca:	2b40      	cmp	r3, #64	; 0x40
 801a6cc:	d005      	beq.n	801a6da <USBD_StdItfReq+0x26>
 801a6ce:	2b40      	cmp	r3, #64	; 0x40
 801a6d0:	d82f      	bhi.n	801a732 <USBD_StdItfReq+0x7e>
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d001      	beq.n	801a6da <USBD_StdItfReq+0x26>
 801a6d6:	2b20      	cmp	r3, #32
 801a6d8:	d12b      	bne.n	801a732 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a6e0:	b2db      	uxtb	r3, r3
 801a6e2:	3b01      	subs	r3, #1
 801a6e4:	2b02      	cmp	r3, #2
 801a6e6:	d81d      	bhi.n	801a724 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a6e8:	683b      	ldr	r3, [r7, #0]
 801a6ea:	889b      	ldrh	r3, [r3, #4]
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	2b03      	cmp	r3, #3
 801a6f0:	d813      	bhi.n	801a71a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a6f8:	689b      	ldr	r3, [r3, #8]
 801a6fa:	6839      	ldr	r1, [r7, #0]
 801a6fc:	6878      	ldr	r0, [r7, #4]
 801a6fe:	4798      	blx	r3
 801a700:	4603      	mov	r3, r0
 801a702:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a704:	683b      	ldr	r3, [r7, #0]
 801a706:	88db      	ldrh	r3, [r3, #6]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d110      	bne.n	801a72e <USBD_StdItfReq+0x7a>
 801a70c:	7bfb      	ldrb	r3, [r7, #15]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d10d      	bne.n	801a72e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a712:	6878      	ldr	r0, [r7, #4]
 801a714:	f000 febf 	bl	801b496 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a718:	e009      	b.n	801a72e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801a71a:	6839      	ldr	r1, [r7, #0]
 801a71c:	6878      	ldr	r0, [r7, #4]
 801a71e:	f000 fccd 	bl	801b0bc <USBD_CtlError>
          break;
 801a722:	e004      	b.n	801a72e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801a724:	6839      	ldr	r1, [r7, #0]
 801a726:	6878      	ldr	r0, [r7, #4]
 801a728:	f000 fcc8 	bl	801b0bc <USBD_CtlError>
          break;
 801a72c:	e000      	b.n	801a730 <USBD_StdItfReq+0x7c>
          break;
 801a72e:	bf00      	nop
      }
      break;
 801a730:	e004      	b.n	801a73c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801a732:	6839      	ldr	r1, [r7, #0]
 801a734:	6878      	ldr	r0, [r7, #4]
 801a736:	f000 fcc1 	bl	801b0bc <USBD_CtlError>
      break;
 801a73a:	bf00      	nop
  }

  return ret;
 801a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a73e:	4618      	mov	r0, r3
 801a740:	3710      	adds	r7, #16
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}

0801a746 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a746:	b580      	push	{r7, lr}
 801a748:	b084      	sub	sp, #16
 801a74a:	af00      	add	r7, sp, #0
 801a74c:	6078      	str	r0, [r7, #4]
 801a74e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a750:	2300      	movs	r3, #0
 801a752:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801a754:	683b      	ldr	r3, [r7, #0]
 801a756:	889b      	ldrh	r3, [r3, #4]
 801a758:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a75a:	683b      	ldr	r3, [r7, #0]
 801a75c:	781b      	ldrb	r3, [r3, #0]
 801a75e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a762:	2b40      	cmp	r3, #64	; 0x40
 801a764:	d007      	beq.n	801a776 <USBD_StdEPReq+0x30>
 801a766:	2b40      	cmp	r3, #64	; 0x40
 801a768:	f200 8145 	bhi.w	801a9f6 <USBD_StdEPReq+0x2b0>
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d00c      	beq.n	801a78a <USBD_StdEPReq+0x44>
 801a770:	2b20      	cmp	r3, #32
 801a772:	f040 8140 	bne.w	801a9f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a77c:	689b      	ldr	r3, [r3, #8]
 801a77e:	6839      	ldr	r1, [r7, #0]
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	4798      	blx	r3
 801a784:	4603      	mov	r3, r0
 801a786:	73fb      	strb	r3, [r7, #15]
      break;
 801a788:	e13a      	b.n	801aa00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a78a:	683b      	ldr	r3, [r7, #0]
 801a78c:	785b      	ldrb	r3, [r3, #1]
 801a78e:	2b03      	cmp	r3, #3
 801a790:	d007      	beq.n	801a7a2 <USBD_StdEPReq+0x5c>
 801a792:	2b03      	cmp	r3, #3
 801a794:	f300 8129 	bgt.w	801a9ea <USBD_StdEPReq+0x2a4>
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d07f      	beq.n	801a89c <USBD_StdEPReq+0x156>
 801a79c:	2b01      	cmp	r3, #1
 801a79e:	d03c      	beq.n	801a81a <USBD_StdEPReq+0xd4>
 801a7a0:	e123      	b.n	801a9ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7a8:	b2db      	uxtb	r3, r3
 801a7aa:	2b02      	cmp	r3, #2
 801a7ac:	d002      	beq.n	801a7b4 <USBD_StdEPReq+0x6e>
 801a7ae:	2b03      	cmp	r3, #3
 801a7b0:	d016      	beq.n	801a7e0 <USBD_StdEPReq+0x9a>
 801a7b2:	e02c      	b.n	801a80e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a7b4:	7bbb      	ldrb	r3, [r7, #14]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d00d      	beq.n	801a7d6 <USBD_StdEPReq+0x90>
 801a7ba:	7bbb      	ldrb	r3, [r7, #14]
 801a7bc:	2b80      	cmp	r3, #128	; 0x80
 801a7be:	d00a      	beq.n	801a7d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a7c0:	7bbb      	ldrb	r3, [r7, #14]
 801a7c2:	4619      	mov	r1, r3
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	f7ff fa15 	bl	8019bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a7ca:	2180      	movs	r1, #128	; 0x80
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f7ff fa11 	bl	8019bf4 <USBD_LL_StallEP>
 801a7d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a7d4:	e020      	b.n	801a818 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801a7d6:	6839      	ldr	r1, [r7, #0]
 801a7d8:	6878      	ldr	r0, [r7, #4]
 801a7da:	f000 fc6f 	bl	801b0bc <USBD_CtlError>
              break;
 801a7de:	e01b      	b.n	801a818 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	885b      	ldrh	r3, [r3, #2]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d10e      	bne.n	801a806 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a7e8:	7bbb      	ldrb	r3, [r7, #14]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d00b      	beq.n	801a806 <USBD_StdEPReq+0xc0>
 801a7ee:	7bbb      	ldrb	r3, [r7, #14]
 801a7f0:	2b80      	cmp	r3, #128	; 0x80
 801a7f2:	d008      	beq.n	801a806 <USBD_StdEPReq+0xc0>
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	88db      	ldrh	r3, [r3, #6]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d104      	bne.n	801a806 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a7fc:	7bbb      	ldrb	r3, [r7, #14]
 801a7fe:	4619      	mov	r1, r3
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	f7ff f9f7 	bl	8019bf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f000 fe45 	bl	801b496 <USBD_CtlSendStatus>

              break;
 801a80c:	e004      	b.n	801a818 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801a80e:	6839      	ldr	r1, [r7, #0]
 801a810:	6878      	ldr	r0, [r7, #4]
 801a812:	f000 fc53 	bl	801b0bc <USBD_CtlError>
              break;
 801a816:	bf00      	nop
          }
          break;
 801a818:	e0ec      	b.n	801a9f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a820:	b2db      	uxtb	r3, r3
 801a822:	2b02      	cmp	r3, #2
 801a824:	d002      	beq.n	801a82c <USBD_StdEPReq+0xe6>
 801a826:	2b03      	cmp	r3, #3
 801a828:	d016      	beq.n	801a858 <USBD_StdEPReq+0x112>
 801a82a:	e030      	b.n	801a88e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a82c:	7bbb      	ldrb	r3, [r7, #14]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d00d      	beq.n	801a84e <USBD_StdEPReq+0x108>
 801a832:	7bbb      	ldrb	r3, [r7, #14]
 801a834:	2b80      	cmp	r3, #128	; 0x80
 801a836:	d00a      	beq.n	801a84e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a838:	7bbb      	ldrb	r3, [r7, #14]
 801a83a:	4619      	mov	r1, r3
 801a83c:	6878      	ldr	r0, [r7, #4]
 801a83e:	f7ff f9d9 	bl	8019bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a842:	2180      	movs	r1, #128	; 0x80
 801a844:	6878      	ldr	r0, [r7, #4]
 801a846:	f7ff f9d5 	bl	8019bf4 <USBD_LL_StallEP>
 801a84a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a84c:	e025      	b.n	801a89a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801a84e:	6839      	ldr	r1, [r7, #0]
 801a850:	6878      	ldr	r0, [r7, #4]
 801a852:	f000 fc33 	bl	801b0bc <USBD_CtlError>
              break;
 801a856:	e020      	b.n	801a89a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a858:	683b      	ldr	r3, [r7, #0]
 801a85a:	885b      	ldrh	r3, [r3, #2]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d11b      	bne.n	801a898 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a860:	7bbb      	ldrb	r3, [r7, #14]
 801a862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a866:	2b00      	cmp	r3, #0
 801a868:	d004      	beq.n	801a874 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a86a:	7bbb      	ldrb	r3, [r7, #14]
 801a86c:	4619      	mov	r1, r3
 801a86e:	6878      	ldr	r0, [r7, #4]
 801a870:	f7ff f9f6 	bl	8019c60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a874:	6878      	ldr	r0, [r7, #4]
 801a876:	f000 fe0e 	bl	801b496 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a880:	689b      	ldr	r3, [r3, #8]
 801a882:	6839      	ldr	r1, [r7, #0]
 801a884:	6878      	ldr	r0, [r7, #4]
 801a886:	4798      	blx	r3
 801a888:	4603      	mov	r3, r0
 801a88a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801a88c:	e004      	b.n	801a898 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801a88e:	6839      	ldr	r1, [r7, #0]
 801a890:	6878      	ldr	r0, [r7, #4]
 801a892:	f000 fc13 	bl	801b0bc <USBD_CtlError>
              break;
 801a896:	e000      	b.n	801a89a <USBD_StdEPReq+0x154>
              break;
 801a898:	bf00      	nop
          }
          break;
 801a89a:	e0ab      	b.n	801a9f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a8a2:	b2db      	uxtb	r3, r3
 801a8a4:	2b02      	cmp	r3, #2
 801a8a6:	d002      	beq.n	801a8ae <USBD_StdEPReq+0x168>
 801a8a8:	2b03      	cmp	r3, #3
 801a8aa:	d032      	beq.n	801a912 <USBD_StdEPReq+0x1cc>
 801a8ac:	e097      	b.n	801a9de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a8ae:	7bbb      	ldrb	r3, [r7, #14]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d007      	beq.n	801a8c4 <USBD_StdEPReq+0x17e>
 801a8b4:	7bbb      	ldrb	r3, [r7, #14]
 801a8b6:	2b80      	cmp	r3, #128	; 0x80
 801a8b8:	d004      	beq.n	801a8c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801a8ba:	6839      	ldr	r1, [r7, #0]
 801a8bc:	6878      	ldr	r0, [r7, #4]
 801a8be:	f000 fbfd 	bl	801b0bc <USBD_CtlError>
                break;
 801a8c2:	e091      	b.n	801a9e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	da0b      	bge.n	801a8e4 <USBD_StdEPReq+0x19e>
 801a8cc:	7bbb      	ldrb	r3, [r7, #14]
 801a8ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a8d2:	4613      	mov	r3, r2
 801a8d4:	009b      	lsls	r3, r3, #2
 801a8d6:	4413      	add	r3, r2
 801a8d8:	009b      	lsls	r3, r3, #2
 801a8da:	3310      	adds	r3, #16
 801a8dc:	687a      	ldr	r2, [r7, #4]
 801a8de:	4413      	add	r3, r2
 801a8e0:	3304      	adds	r3, #4
 801a8e2:	e00b      	b.n	801a8fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a8e4:	7bbb      	ldrb	r3, [r7, #14]
 801a8e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	009b      	lsls	r3, r3, #2
 801a8ee:	4413      	add	r3, r2
 801a8f0:	009b      	lsls	r3, r3, #2
 801a8f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a8f6:	687a      	ldr	r2, [r7, #4]
 801a8f8:	4413      	add	r3, r2
 801a8fa:	3304      	adds	r3, #4
 801a8fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	2200      	movs	r2, #0
 801a902:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	2202      	movs	r2, #2
 801a908:	4619      	mov	r1, r3
 801a90a:	6878      	ldr	r0, [r7, #4]
 801a90c:	f000 fd69 	bl	801b3e2 <USBD_CtlSendData>
              break;
 801a910:	e06a      	b.n	801a9e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a916:	2b00      	cmp	r3, #0
 801a918:	da11      	bge.n	801a93e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a91a:	7bbb      	ldrb	r3, [r7, #14]
 801a91c:	f003 020f 	and.w	r2, r3, #15
 801a920:	6879      	ldr	r1, [r7, #4]
 801a922:	4613      	mov	r3, r2
 801a924:	009b      	lsls	r3, r3, #2
 801a926:	4413      	add	r3, r2
 801a928:	009b      	lsls	r3, r3, #2
 801a92a:	440b      	add	r3, r1
 801a92c:	3324      	adds	r3, #36	; 0x24
 801a92e:	881b      	ldrh	r3, [r3, #0]
 801a930:	2b00      	cmp	r3, #0
 801a932:	d117      	bne.n	801a964 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a934:	6839      	ldr	r1, [r7, #0]
 801a936:	6878      	ldr	r0, [r7, #4]
 801a938:	f000 fbc0 	bl	801b0bc <USBD_CtlError>
                  break;
 801a93c:	e054      	b.n	801a9e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a93e:	7bbb      	ldrb	r3, [r7, #14]
 801a940:	f003 020f 	and.w	r2, r3, #15
 801a944:	6879      	ldr	r1, [r7, #4]
 801a946:	4613      	mov	r3, r2
 801a948:	009b      	lsls	r3, r3, #2
 801a94a:	4413      	add	r3, r2
 801a94c:	009b      	lsls	r3, r3, #2
 801a94e:	440b      	add	r3, r1
 801a950:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a954:	881b      	ldrh	r3, [r3, #0]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d104      	bne.n	801a964 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a95a:	6839      	ldr	r1, [r7, #0]
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f000 fbad 	bl	801b0bc <USBD_CtlError>
                  break;
 801a962:	e041      	b.n	801a9e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	da0b      	bge.n	801a984 <USBD_StdEPReq+0x23e>
 801a96c:	7bbb      	ldrb	r3, [r7, #14]
 801a96e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a972:	4613      	mov	r3, r2
 801a974:	009b      	lsls	r3, r3, #2
 801a976:	4413      	add	r3, r2
 801a978:	009b      	lsls	r3, r3, #2
 801a97a:	3310      	adds	r3, #16
 801a97c:	687a      	ldr	r2, [r7, #4]
 801a97e:	4413      	add	r3, r2
 801a980:	3304      	adds	r3, #4
 801a982:	e00b      	b.n	801a99c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a984:	7bbb      	ldrb	r3, [r7, #14]
 801a986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a98a:	4613      	mov	r3, r2
 801a98c:	009b      	lsls	r3, r3, #2
 801a98e:	4413      	add	r3, r2
 801a990:	009b      	lsls	r3, r3, #2
 801a992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a996:	687a      	ldr	r2, [r7, #4]
 801a998:	4413      	add	r3, r2
 801a99a:	3304      	adds	r3, #4
 801a99c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a99e:	7bbb      	ldrb	r3, [r7, #14]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d002      	beq.n	801a9aa <USBD_StdEPReq+0x264>
 801a9a4:	7bbb      	ldrb	r3, [r7, #14]
 801a9a6:	2b80      	cmp	r3, #128	; 0x80
 801a9a8:	d103      	bne.n	801a9b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	601a      	str	r2, [r3, #0]
 801a9b0:	e00e      	b.n	801a9d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801a9b2:	7bbb      	ldrb	r3, [r7, #14]
 801a9b4:	4619      	mov	r1, r3
 801a9b6:	6878      	ldr	r0, [r7, #4]
 801a9b8:	f7ff f988 	bl	8019ccc <USBD_LL_IsStallEP>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d003      	beq.n	801a9ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801a9c2:	68bb      	ldr	r3, [r7, #8]
 801a9c4:	2201      	movs	r2, #1
 801a9c6:	601a      	str	r2, [r3, #0]
 801a9c8:	e002      	b.n	801a9d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	2202      	movs	r2, #2
 801a9d4:	4619      	mov	r1, r3
 801a9d6:	6878      	ldr	r0, [r7, #4]
 801a9d8:	f000 fd03 	bl	801b3e2 <USBD_CtlSendData>
              break;
 801a9dc:	e004      	b.n	801a9e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801a9de:	6839      	ldr	r1, [r7, #0]
 801a9e0:	6878      	ldr	r0, [r7, #4]
 801a9e2:	f000 fb6b 	bl	801b0bc <USBD_CtlError>
              break;
 801a9e6:	bf00      	nop
          }
          break;
 801a9e8:	e004      	b.n	801a9f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801a9ea:	6839      	ldr	r1, [r7, #0]
 801a9ec:	6878      	ldr	r0, [r7, #4]
 801a9ee:	f000 fb65 	bl	801b0bc <USBD_CtlError>
          break;
 801a9f2:	bf00      	nop
      }
      break;
 801a9f4:	e004      	b.n	801aa00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801a9f6:	6839      	ldr	r1, [r7, #0]
 801a9f8:	6878      	ldr	r0, [r7, #4]
 801a9fa:	f000 fb5f 	bl	801b0bc <USBD_CtlError>
      break;
 801a9fe:	bf00      	nop
  }

  return ret;
 801aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa02:	4618      	mov	r0, r3
 801aa04:	3710      	adds	r7, #16
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
	...

0801aa0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b084      	sub	sp, #16
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
 801aa14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801aa16:	2300      	movs	r3, #0
 801aa18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801aa1e:	2300      	movs	r3, #0
 801aa20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	885b      	ldrh	r3, [r3, #2]
 801aa26:	0a1b      	lsrs	r3, r3, #8
 801aa28:	b29b      	uxth	r3, r3
 801aa2a:	3b01      	subs	r3, #1
 801aa2c:	2b0e      	cmp	r3, #14
 801aa2e:	f200 8152 	bhi.w	801acd6 <USBD_GetDescriptor+0x2ca>
 801aa32:	a201      	add	r2, pc, #4	; (adr r2, 801aa38 <USBD_GetDescriptor+0x2c>)
 801aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa38:	0801aaa9 	.word	0x0801aaa9
 801aa3c:	0801aac1 	.word	0x0801aac1
 801aa40:	0801ab01 	.word	0x0801ab01
 801aa44:	0801acd7 	.word	0x0801acd7
 801aa48:	0801acd7 	.word	0x0801acd7
 801aa4c:	0801ac77 	.word	0x0801ac77
 801aa50:	0801aca3 	.word	0x0801aca3
 801aa54:	0801acd7 	.word	0x0801acd7
 801aa58:	0801acd7 	.word	0x0801acd7
 801aa5c:	0801acd7 	.word	0x0801acd7
 801aa60:	0801acd7 	.word	0x0801acd7
 801aa64:	0801acd7 	.word	0x0801acd7
 801aa68:	0801acd7 	.word	0x0801acd7
 801aa6c:	0801acd7 	.word	0x0801acd7
 801aa70:	0801aa75 	.word	0x0801aa75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa7a:	69db      	ldr	r3, [r3, #28]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d00b      	beq.n	801aa98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa86:	69db      	ldr	r3, [r3, #28]
 801aa88:	687a      	ldr	r2, [r7, #4]
 801aa8a:	7c12      	ldrb	r2, [r2, #16]
 801aa8c:	f107 0108 	add.w	r1, r7, #8
 801aa90:	4610      	mov	r0, r2
 801aa92:	4798      	blx	r3
 801aa94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aa96:	e126      	b.n	801ace6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801aa98:	6839      	ldr	r1, [r7, #0]
 801aa9a:	6878      	ldr	r0, [r7, #4]
 801aa9c:	f000 fb0e 	bl	801b0bc <USBD_CtlError>
        err++;
 801aaa0:	7afb      	ldrb	r3, [r7, #11]
 801aaa2:	3301      	adds	r3, #1
 801aaa4:	72fb      	strb	r3, [r7, #11]
      break;
 801aaa6:	e11e      	b.n	801ace6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	687a      	ldr	r2, [r7, #4]
 801aab2:	7c12      	ldrb	r2, [r2, #16]
 801aab4:	f107 0108 	add.w	r1, r7, #8
 801aab8:	4610      	mov	r0, r2
 801aaba:	4798      	blx	r3
 801aabc:	60f8      	str	r0, [r7, #12]
      break;
 801aabe:	e112      	b.n	801ace6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	7c1b      	ldrb	r3, [r3, #16]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d10d      	bne.n	801aae4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aad0:	f107 0208 	add.w	r2, r7, #8
 801aad4:	4610      	mov	r0, r2
 801aad6:	4798      	blx	r3
 801aad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	3301      	adds	r3, #1
 801aade:	2202      	movs	r2, #2
 801aae0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801aae2:	e100      	b.n	801ace6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaec:	f107 0208 	add.w	r2, r7, #8
 801aaf0:	4610      	mov	r0, r2
 801aaf2:	4798      	blx	r3
 801aaf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	3301      	adds	r3, #1
 801aafa:	2202      	movs	r2, #2
 801aafc:	701a      	strb	r2, [r3, #0]
      break;
 801aafe:	e0f2      	b.n	801ace6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801ab00:	683b      	ldr	r3, [r7, #0]
 801ab02:	885b      	ldrh	r3, [r3, #2]
 801ab04:	b2db      	uxtb	r3, r3
 801ab06:	2b05      	cmp	r3, #5
 801ab08:	f200 80ac 	bhi.w	801ac64 <USBD_GetDescriptor+0x258>
 801ab0c:	a201      	add	r2, pc, #4	; (adr r2, 801ab14 <USBD_GetDescriptor+0x108>)
 801ab0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab12:	bf00      	nop
 801ab14:	0801ab2d 	.word	0x0801ab2d
 801ab18:	0801ab61 	.word	0x0801ab61
 801ab1c:	0801ab95 	.word	0x0801ab95
 801ab20:	0801abc9 	.word	0x0801abc9
 801ab24:	0801abfd 	.word	0x0801abfd
 801ab28:	0801ac31 	.word	0x0801ac31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab32:	685b      	ldr	r3, [r3, #4]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d00b      	beq.n	801ab50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab3e:	685b      	ldr	r3, [r3, #4]
 801ab40:	687a      	ldr	r2, [r7, #4]
 801ab42:	7c12      	ldrb	r2, [r2, #16]
 801ab44:	f107 0108 	add.w	r1, r7, #8
 801ab48:	4610      	mov	r0, r2
 801ab4a:	4798      	blx	r3
 801ab4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ab4e:	e091      	b.n	801ac74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ab50:	6839      	ldr	r1, [r7, #0]
 801ab52:	6878      	ldr	r0, [r7, #4]
 801ab54:	f000 fab2 	bl	801b0bc <USBD_CtlError>
            err++;
 801ab58:	7afb      	ldrb	r3, [r7, #11]
 801ab5a:	3301      	adds	r3, #1
 801ab5c:	72fb      	strb	r3, [r7, #11]
          break;
 801ab5e:	e089      	b.n	801ac74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab66:	689b      	ldr	r3, [r3, #8]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d00b      	beq.n	801ab84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab72:	689b      	ldr	r3, [r3, #8]
 801ab74:	687a      	ldr	r2, [r7, #4]
 801ab76:	7c12      	ldrb	r2, [r2, #16]
 801ab78:	f107 0108 	add.w	r1, r7, #8
 801ab7c:	4610      	mov	r0, r2
 801ab7e:	4798      	blx	r3
 801ab80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ab82:	e077      	b.n	801ac74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ab84:	6839      	ldr	r1, [r7, #0]
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f000 fa98 	bl	801b0bc <USBD_CtlError>
            err++;
 801ab8c:	7afb      	ldrb	r3, [r7, #11]
 801ab8e:	3301      	adds	r3, #1
 801ab90:	72fb      	strb	r3, [r7, #11]
          break;
 801ab92:	e06f      	b.n	801ac74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab9a:	68db      	ldr	r3, [r3, #12]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d00b      	beq.n	801abb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aba6:	68db      	ldr	r3, [r3, #12]
 801aba8:	687a      	ldr	r2, [r7, #4]
 801abaa:	7c12      	ldrb	r2, [r2, #16]
 801abac:	f107 0108 	add.w	r1, r7, #8
 801abb0:	4610      	mov	r0, r2
 801abb2:	4798      	blx	r3
 801abb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801abb6:	e05d      	b.n	801ac74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801abb8:	6839      	ldr	r1, [r7, #0]
 801abba:	6878      	ldr	r0, [r7, #4]
 801abbc:	f000 fa7e 	bl	801b0bc <USBD_CtlError>
            err++;
 801abc0:	7afb      	ldrb	r3, [r7, #11]
 801abc2:	3301      	adds	r3, #1
 801abc4:	72fb      	strb	r3, [r7, #11]
          break;
 801abc6:	e055      	b.n	801ac74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abce:	691b      	ldr	r3, [r3, #16]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d00b      	beq.n	801abec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abda:	691b      	ldr	r3, [r3, #16]
 801abdc:	687a      	ldr	r2, [r7, #4]
 801abde:	7c12      	ldrb	r2, [r2, #16]
 801abe0:	f107 0108 	add.w	r1, r7, #8
 801abe4:	4610      	mov	r0, r2
 801abe6:	4798      	blx	r3
 801abe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801abea:	e043      	b.n	801ac74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801abec:	6839      	ldr	r1, [r7, #0]
 801abee:	6878      	ldr	r0, [r7, #4]
 801abf0:	f000 fa64 	bl	801b0bc <USBD_CtlError>
            err++;
 801abf4:	7afb      	ldrb	r3, [r7, #11]
 801abf6:	3301      	adds	r3, #1
 801abf8:	72fb      	strb	r3, [r7, #11]
          break;
 801abfa:	e03b      	b.n	801ac74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac02:	695b      	ldr	r3, [r3, #20]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d00b      	beq.n	801ac20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac0e:	695b      	ldr	r3, [r3, #20]
 801ac10:	687a      	ldr	r2, [r7, #4]
 801ac12:	7c12      	ldrb	r2, [r2, #16]
 801ac14:	f107 0108 	add.w	r1, r7, #8
 801ac18:	4610      	mov	r0, r2
 801ac1a:	4798      	blx	r3
 801ac1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac1e:	e029      	b.n	801ac74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ac20:	6839      	ldr	r1, [r7, #0]
 801ac22:	6878      	ldr	r0, [r7, #4]
 801ac24:	f000 fa4a 	bl	801b0bc <USBD_CtlError>
            err++;
 801ac28:	7afb      	ldrb	r3, [r7, #11]
 801ac2a:	3301      	adds	r3, #1
 801ac2c:	72fb      	strb	r3, [r7, #11]
          break;
 801ac2e:	e021      	b.n	801ac74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac36:	699b      	ldr	r3, [r3, #24]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d00b      	beq.n	801ac54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac42:	699b      	ldr	r3, [r3, #24]
 801ac44:	687a      	ldr	r2, [r7, #4]
 801ac46:	7c12      	ldrb	r2, [r2, #16]
 801ac48:	f107 0108 	add.w	r1, r7, #8
 801ac4c:	4610      	mov	r0, r2
 801ac4e:	4798      	blx	r3
 801ac50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac52:	e00f      	b.n	801ac74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ac54:	6839      	ldr	r1, [r7, #0]
 801ac56:	6878      	ldr	r0, [r7, #4]
 801ac58:	f000 fa30 	bl	801b0bc <USBD_CtlError>
            err++;
 801ac5c:	7afb      	ldrb	r3, [r7, #11]
 801ac5e:	3301      	adds	r3, #1
 801ac60:	72fb      	strb	r3, [r7, #11]
          break;
 801ac62:	e007      	b.n	801ac74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801ac64:	6839      	ldr	r1, [r7, #0]
 801ac66:	6878      	ldr	r0, [r7, #4]
 801ac68:	f000 fa28 	bl	801b0bc <USBD_CtlError>
          err++;
 801ac6c:	7afb      	ldrb	r3, [r7, #11]
 801ac6e:	3301      	adds	r3, #1
 801ac70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801ac72:	bf00      	nop
      }
      break;
 801ac74:	e037      	b.n	801ace6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	7c1b      	ldrb	r3, [r3, #16]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d109      	bne.n	801ac92 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ac84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac86:	f107 0208 	add.w	r2, r7, #8
 801ac8a:	4610      	mov	r0, r2
 801ac8c:	4798      	blx	r3
 801ac8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ac90:	e029      	b.n	801ace6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ac92:	6839      	ldr	r1, [r7, #0]
 801ac94:	6878      	ldr	r0, [r7, #4]
 801ac96:	f000 fa11 	bl	801b0bc <USBD_CtlError>
        err++;
 801ac9a:	7afb      	ldrb	r3, [r7, #11]
 801ac9c:	3301      	adds	r3, #1
 801ac9e:	72fb      	strb	r3, [r7, #11]
      break;
 801aca0:	e021      	b.n	801ace6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	7c1b      	ldrb	r3, [r3, #16]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d10d      	bne.n	801acc6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acb2:	f107 0208 	add.w	r2, r7, #8
 801acb6:	4610      	mov	r0, r2
 801acb8:	4798      	blx	r3
 801acba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	3301      	adds	r3, #1
 801acc0:	2207      	movs	r2, #7
 801acc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801acc4:	e00f      	b.n	801ace6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801acc6:	6839      	ldr	r1, [r7, #0]
 801acc8:	6878      	ldr	r0, [r7, #4]
 801acca:	f000 f9f7 	bl	801b0bc <USBD_CtlError>
        err++;
 801acce:	7afb      	ldrb	r3, [r7, #11]
 801acd0:	3301      	adds	r3, #1
 801acd2:	72fb      	strb	r3, [r7, #11]
      break;
 801acd4:	e007      	b.n	801ace6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801acd6:	6839      	ldr	r1, [r7, #0]
 801acd8:	6878      	ldr	r0, [r7, #4]
 801acda:	f000 f9ef 	bl	801b0bc <USBD_CtlError>
      err++;
 801acde:	7afb      	ldrb	r3, [r7, #11]
 801ace0:	3301      	adds	r3, #1
 801ace2:	72fb      	strb	r3, [r7, #11]
      break;
 801ace4:	bf00      	nop
  }

  if (err != 0U)
 801ace6:	7afb      	ldrb	r3, [r7, #11]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d11e      	bne.n	801ad2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801acec:	683b      	ldr	r3, [r7, #0]
 801acee:	88db      	ldrh	r3, [r3, #6]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d016      	beq.n	801ad22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801acf4:	893b      	ldrh	r3, [r7, #8]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d00e      	beq.n	801ad18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801acfa:	683b      	ldr	r3, [r7, #0]
 801acfc:	88da      	ldrh	r2, [r3, #6]
 801acfe:	893b      	ldrh	r3, [r7, #8]
 801ad00:	4293      	cmp	r3, r2
 801ad02:	bf28      	it	cs
 801ad04:	4613      	movcs	r3, r2
 801ad06:	b29b      	uxth	r3, r3
 801ad08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ad0a:	893b      	ldrh	r3, [r7, #8]
 801ad0c:	461a      	mov	r2, r3
 801ad0e:	68f9      	ldr	r1, [r7, #12]
 801ad10:	6878      	ldr	r0, [r7, #4]
 801ad12:	f000 fb66 	bl	801b3e2 <USBD_CtlSendData>
 801ad16:	e009      	b.n	801ad2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801ad18:	6839      	ldr	r1, [r7, #0]
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	f000 f9ce 	bl	801b0bc <USBD_CtlError>
 801ad20:	e004      	b.n	801ad2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801ad22:	6878      	ldr	r0, [r7, #4]
 801ad24:	f000 fbb7 	bl	801b496 <USBD_CtlSendStatus>
 801ad28:	e000      	b.n	801ad2c <USBD_GetDescriptor+0x320>
    return;
 801ad2a:	bf00      	nop
  }
}
 801ad2c:	3710      	adds	r7, #16
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	bd80      	pop	{r7, pc}
 801ad32:	bf00      	nop

0801ad34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	b084      	sub	sp, #16
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
 801ad3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ad3e:	683b      	ldr	r3, [r7, #0]
 801ad40:	889b      	ldrh	r3, [r3, #4]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d131      	bne.n	801adaa <USBD_SetAddress+0x76>
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	88db      	ldrh	r3, [r3, #6]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d12d      	bne.n	801adaa <USBD_SetAddress+0x76>
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	885b      	ldrh	r3, [r3, #2]
 801ad52:	2b7f      	cmp	r3, #127	; 0x7f
 801ad54:	d829      	bhi.n	801adaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	885b      	ldrh	r3, [r3, #2]
 801ad5a:	b2db      	uxtb	r3, r3
 801ad5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ad60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ad68:	b2db      	uxtb	r3, r3
 801ad6a:	2b03      	cmp	r3, #3
 801ad6c:	d104      	bne.n	801ad78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801ad6e:	6839      	ldr	r1, [r7, #0]
 801ad70:	6878      	ldr	r0, [r7, #4]
 801ad72:	f000 f9a3 	bl	801b0bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad76:	e01d      	b.n	801adb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	7bfa      	ldrb	r2, [r7, #15]
 801ad7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ad80:	7bfb      	ldrb	r3, [r7, #15]
 801ad82:	4619      	mov	r1, r3
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f7fe ffcd 	bl	8019d24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801ad8a:	6878      	ldr	r0, [r7, #4]
 801ad8c:	f000 fb83 	bl	801b496 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ad90:	7bfb      	ldrb	r3, [r7, #15]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d004      	beq.n	801ada0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	2202      	movs	r2, #2
 801ad9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad9e:	e009      	b.n	801adb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	2201      	movs	r2, #1
 801ada4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ada8:	e004      	b.n	801adb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801adaa:	6839      	ldr	r1, [r7, #0]
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	f000 f985 	bl	801b0bc <USBD_CtlError>
  }
}
 801adb2:	bf00      	nop
 801adb4:	bf00      	nop
 801adb6:	3710      	adds	r7, #16
 801adb8:	46bd      	mov	sp, r7
 801adba:	bd80      	pop	{r7, pc}

0801adbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b084      	sub	sp, #16
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
 801adc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801adc6:	2300      	movs	r3, #0
 801adc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	885b      	ldrh	r3, [r3, #2]
 801adce:	b2da      	uxtb	r2, r3
 801add0:	4b4c      	ldr	r3, [pc, #304]	; (801af04 <USBD_SetConfig+0x148>)
 801add2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801add4:	4b4b      	ldr	r3, [pc, #300]	; (801af04 <USBD_SetConfig+0x148>)
 801add6:	781b      	ldrb	r3, [r3, #0]
 801add8:	2b01      	cmp	r3, #1
 801adda:	d905      	bls.n	801ade8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801addc:	6839      	ldr	r1, [r7, #0]
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f000 f96c 	bl	801b0bc <USBD_CtlError>
    return USBD_FAIL;
 801ade4:	2303      	movs	r3, #3
 801ade6:	e088      	b.n	801aefa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	2b02      	cmp	r3, #2
 801adf2:	d002      	beq.n	801adfa <USBD_SetConfig+0x3e>
 801adf4:	2b03      	cmp	r3, #3
 801adf6:	d025      	beq.n	801ae44 <USBD_SetConfig+0x88>
 801adf8:	e071      	b.n	801aede <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801adfa:	4b42      	ldr	r3, [pc, #264]	; (801af04 <USBD_SetConfig+0x148>)
 801adfc:	781b      	ldrb	r3, [r3, #0]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d01c      	beq.n	801ae3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801ae02:	4b40      	ldr	r3, [pc, #256]	; (801af04 <USBD_SetConfig+0x148>)
 801ae04:	781b      	ldrb	r3, [r3, #0]
 801ae06:	461a      	mov	r2, r3
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ae0c:	4b3d      	ldr	r3, [pc, #244]	; (801af04 <USBD_SetConfig+0x148>)
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	4619      	mov	r1, r3
 801ae12:	6878      	ldr	r0, [r7, #4]
 801ae14:	f7ff f91e 	bl	801a054 <USBD_SetClassConfig>
 801ae18:	4603      	mov	r3, r0
 801ae1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801ae1c:	7bfb      	ldrb	r3, [r7, #15]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d004      	beq.n	801ae2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801ae22:	6839      	ldr	r1, [r7, #0]
 801ae24:	6878      	ldr	r0, [r7, #4]
 801ae26:	f000 f949 	bl	801b0bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ae2a:	e065      	b.n	801aef8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801ae2c:	6878      	ldr	r0, [r7, #4]
 801ae2e:	f000 fb32 	bl	801b496 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	2203      	movs	r2, #3
 801ae36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ae3a:	e05d      	b.n	801aef8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801ae3c:	6878      	ldr	r0, [r7, #4]
 801ae3e:	f000 fb2a 	bl	801b496 <USBD_CtlSendStatus>
      break;
 801ae42:	e059      	b.n	801aef8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801ae44:	4b2f      	ldr	r3, [pc, #188]	; (801af04 <USBD_SetConfig+0x148>)
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d112      	bne.n	801ae72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	2202      	movs	r2, #2
 801ae50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801ae54:	4b2b      	ldr	r3, [pc, #172]	; (801af04 <USBD_SetConfig+0x148>)
 801ae56:	781b      	ldrb	r3, [r3, #0]
 801ae58:	461a      	mov	r2, r3
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801ae5e:	4b29      	ldr	r3, [pc, #164]	; (801af04 <USBD_SetConfig+0x148>)
 801ae60:	781b      	ldrb	r3, [r3, #0]
 801ae62:	4619      	mov	r1, r3
 801ae64:	6878      	ldr	r0, [r7, #4]
 801ae66:	f7ff f911 	bl	801a08c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801ae6a:	6878      	ldr	r0, [r7, #4]
 801ae6c:	f000 fb13 	bl	801b496 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ae70:	e042      	b.n	801aef8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801ae72:	4b24      	ldr	r3, [pc, #144]	; (801af04 <USBD_SetConfig+0x148>)
 801ae74:	781b      	ldrb	r3, [r3, #0]
 801ae76:	461a      	mov	r2, r3
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	685b      	ldr	r3, [r3, #4]
 801ae7c:	429a      	cmp	r2, r3
 801ae7e:	d02a      	beq.n	801aed6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	685b      	ldr	r3, [r3, #4]
 801ae84:	b2db      	uxtb	r3, r3
 801ae86:	4619      	mov	r1, r3
 801ae88:	6878      	ldr	r0, [r7, #4]
 801ae8a:	f7ff f8ff 	bl	801a08c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801ae8e:	4b1d      	ldr	r3, [pc, #116]	; (801af04 <USBD_SetConfig+0x148>)
 801ae90:	781b      	ldrb	r3, [r3, #0]
 801ae92:	461a      	mov	r2, r3
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ae98:	4b1a      	ldr	r3, [pc, #104]	; (801af04 <USBD_SetConfig+0x148>)
 801ae9a:	781b      	ldrb	r3, [r3, #0]
 801ae9c:	4619      	mov	r1, r3
 801ae9e:	6878      	ldr	r0, [r7, #4]
 801aea0:	f7ff f8d8 	bl	801a054 <USBD_SetClassConfig>
 801aea4:	4603      	mov	r3, r0
 801aea6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801aea8:	7bfb      	ldrb	r3, [r7, #15]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d00f      	beq.n	801aece <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801aeae:	6839      	ldr	r1, [r7, #0]
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	f000 f903 	bl	801b0bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	685b      	ldr	r3, [r3, #4]
 801aeba:	b2db      	uxtb	r3, r3
 801aebc:	4619      	mov	r1, r3
 801aebe:	6878      	ldr	r0, [r7, #4]
 801aec0:	f7ff f8e4 	bl	801a08c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	2202      	movs	r2, #2
 801aec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801aecc:	e014      	b.n	801aef8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801aece:	6878      	ldr	r0, [r7, #4]
 801aed0:	f000 fae1 	bl	801b496 <USBD_CtlSendStatus>
      break;
 801aed4:	e010      	b.n	801aef8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801aed6:	6878      	ldr	r0, [r7, #4]
 801aed8:	f000 fadd 	bl	801b496 <USBD_CtlSendStatus>
      break;
 801aedc:	e00c      	b.n	801aef8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801aede:	6839      	ldr	r1, [r7, #0]
 801aee0:	6878      	ldr	r0, [r7, #4]
 801aee2:	f000 f8eb 	bl	801b0bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801aee6:	4b07      	ldr	r3, [pc, #28]	; (801af04 <USBD_SetConfig+0x148>)
 801aee8:	781b      	ldrb	r3, [r3, #0]
 801aeea:	4619      	mov	r1, r3
 801aeec:	6878      	ldr	r0, [r7, #4]
 801aeee:	f7ff f8cd 	bl	801a08c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801aef2:	2303      	movs	r3, #3
 801aef4:	73fb      	strb	r3, [r7, #15]
      break;
 801aef6:	bf00      	nop
  }

  return ret;
 801aef8:	7bfb      	ldrb	r3, [r7, #15]
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	3710      	adds	r7, #16
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}
 801af02:	bf00      	nop
 801af04:	20001ff8 	.word	0x20001ff8

0801af08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b082      	sub	sp, #8
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	6078      	str	r0, [r7, #4]
 801af10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801af12:	683b      	ldr	r3, [r7, #0]
 801af14:	88db      	ldrh	r3, [r3, #6]
 801af16:	2b01      	cmp	r3, #1
 801af18:	d004      	beq.n	801af24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801af1a:	6839      	ldr	r1, [r7, #0]
 801af1c:	6878      	ldr	r0, [r7, #4]
 801af1e:	f000 f8cd 	bl	801b0bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801af22:	e023      	b.n	801af6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801af2a:	b2db      	uxtb	r3, r3
 801af2c:	2b02      	cmp	r3, #2
 801af2e:	dc02      	bgt.n	801af36 <USBD_GetConfig+0x2e>
 801af30:	2b00      	cmp	r3, #0
 801af32:	dc03      	bgt.n	801af3c <USBD_GetConfig+0x34>
 801af34:	e015      	b.n	801af62 <USBD_GetConfig+0x5a>
 801af36:	2b03      	cmp	r3, #3
 801af38:	d00b      	beq.n	801af52 <USBD_GetConfig+0x4a>
 801af3a:	e012      	b.n	801af62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	2200      	movs	r2, #0
 801af40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	3308      	adds	r3, #8
 801af46:	2201      	movs	r2, #1
 801af48:	4619      	mov	r1, r3
 801af4a:	6878      	ldr	r0, [r7, #4]
 801af4c:	f000 fa49 	bl	801b3e2 <USBD_CtlSendData>
        break;
 801af50:	e00c      	b.n	801af6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	3304      	adds	r3, #4
 801af56:	2201      	movs	r2, #1
 801af58:	4619      	mov	r1, r3
 801af5a:	6878      	ldr	r0, [r7, #4]
 801af5c:	f000 fa41 	bl	801b3e2 <USBD_CtlSendData>
        break;
 801af60:	e004      	b.n	801af6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801af62:	6839      	ldr	r1, [r7, #0]
 801af64:	6878      	ldr	r0, [r7, #4]
 801af66:	f000 f8a9 	bl	801b0bc <USBD_CtlError>
        break;
 801af6a:	bf00      	nop
}
 801af6c:	bf00      	nop
 801af6e:	3708      	adds	r7, #8
 801af70:	46bd      	mov	sp, r7
 801af72:	bd80      	pop	{r7, pc}

0801af74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801af84:	b2db      	uxtb	r3, r3
 801af86:	3b01      	subs	r3, #1
 801af88:	2b02      	cmp	r3, #2
 801af8a:	d81e      	bhi.n	801afca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801af8c:	683b      	ldr	r3, [r7, #0]
 801af8e:	88db      	ldrh	r3, [r3, #6]
 801af90:	2b02      	cmp	r3, #2
 801af92:	d004      	beq.n	801af9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801af94:	6839      	ldr	r1, [r7, #0]
 801af96:	6878      	ldr	r0, [r7, #4]
 801af98:	f000 f890 	bl	801b0bc <USBD_CtlError>
        break;
 801af9c:	e01a      	b.n	801afd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	2201      	movs	r2, #1
 801afa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d005      	beq.n	801afba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	68db      	ldr	r3, [r3, #12]
 801afb2:	f043 0202 	orr.w	r2, r3, #2
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	330c      	adds	r3, #12
 801afbe:	2202      	movs	r2, #2
 801afc0:	4619      	mov	r1, r3
 801afc2:	6878      	ldr	r0, [r7, #4]
 801afc4:	f000 fa0d 	bl	801b3e2 <USBD_CtlSendData>
      break;
 801afc8:	e004      	b.n	801afd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801afca:	6839      	ldr	r1, [r7, #0]
 801afcc:	6878      	ldr	r0, [r7, #4]
 801afce:	f000 f875 	bl	801b0bc <USBD_CtlError>
      break;
 801afd2:	bf00      	nop
  }
}
 801afd4:	bf00      	nop
 801afd6:	3708      	adds	r7, #8
 801afd8:	46bd      	mov	sp, r7
 801afda:	bd80      	pop	{r7, pc}

0801afdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801afdc:	b580      	push	{r7, lr}
 801afde:	b082      	sub	sp, #8
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
 801afe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801afe6:	683b      	ldr	r3, [r7, #0]
 801afe8:	885b      	ldrh	r3, [r3, #2]
 801afea:	2b01      	cmp	r3, #1
 801afec:	d106      	bne.n	801affc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	2201      	movs	r2, #1
 801aff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	f000 fa4d 	bl	801b496 <USBD_CtlSendStatus>
  }
}
 801affc:	bf00      	nop
 801affe:	3708      	adds	r7, #8
 801b000:	46bd      	mov	sp, r7
 801b002:	bd80      	pop	{r7, pc}

0801b004 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b082      	sub	sp, #8
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
 801b00c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b014:	b2db      	uxtb	r3, r3
 801b016:	3b01      	subs	r3, #1
 801b018:	2b02      	cmp	r3, #2
 801b01a:	d80b      	bhi.n	801b034 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	885b      	ldrh	r3, [r3, #2]
 801b020:	2b01      	cmp	r3, #1
 801b022:	d10c      	bne.n	801b03e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	2200      	movs	r2, #0
 801b028:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801b02c:	6878      	ldr	r0, [r7, #4]
 801b02e:	f000 fa32 	bl	801b496 <USBD_CtlSendStatus>
      }
      break;
 801b032:	e004      	b.n	801b03e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801b034:	6839      	ldr	r1, [r7, #0]
 801b036:	6878      	ldr	r0, [r7, #4]
 801b038:	f000 f840 	bl	801b0bc <USBD_CtlError>
      break;
 801b03c:	e000      	b.n	801b040 <USBD_ClrFeature+0x3c>
      break;
 801b03e:	bf00      	nop
  }
}
 801b040:	bf00      	nop
 801b042:	3708      	adds	r7, #8
 801b044:	46bd      	mov	sp, r7
 801b046:	bd80      	pop	{r7, pc}

0801b048 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b084      	sub	sp, #16
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
 801b050:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801b052:	683b      	ldr	r3, [r7, #0]
 801b054:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	781a      	ldrb	r2, [r3, #0]
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	3301      	adds	r3, #1
 801b062:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	781a      	ldrb	r2, [r3, #0]
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	3301      	adds	r3, #1
 801b070:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801b072:	68f8      	ldr	r0, [r7, #12]
 801b074:	f7ff fa91 	bl	801a59a <SWAPBYTE>
 801b078:	4603      	mov	r3, r0
 801b07a:	461a      	mov	r2, r3
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	3301      	adds	r3, #1
 801b084:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b086:	68fb      	ldr	r3, [r7, #12]
 801b088:	3301      	adds	r3, #1
 801b08a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801b08c:	68f8      	ldr	r0, [r7, #12]
 801b08e:	f7ff fa84 	bl	801a59a <SWAPBYTE>
 801b092:	4603      	mov	r3, r0
 801b094:	461a      	mov	r2, r3
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	3301      	adds	r3, #1
 801b09e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	3301      	adds	r3, #1
 801b0a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801b0a6:	68f8      	ldr	r0, [r7, #12]
 801b0a8:	f7ff fa77 	bl	801a59a <SWAPBYTE>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	461a      	mov	r2, r3
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	80da      	strh	r2, [r3, #6]
}
 801b0b4:	bf00      	nop
 801b0b6:	3710      	adds	r7, #16
 801b0b8:	46bd      	mov	sp, r7
 801b0ba:	bd80      	pop	{r7, pc}

0801b0bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	b082      	sub	sp, #8
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
 801b0c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801b0c6:	2180      	movs	r1, #128	; 0x80
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	f7fe fd93 	bl	8019bf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801b0ce:	2100      	movs	r1, #0
 801b0d0:	6878      	ldr	r0, [r7, #4]
 801b0d2:	f7fe fd8f 	bl	8019bf4 <USBD_LL_StallEP>
}
 801b0d6:	bf00      	nop
 801b0d8:	3708      	adds	r7, #8
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	bd80      	pop	{r7, pc}

0801b0de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801b0de:	b580      	push	{r7, lr}
 801b0e0:	b086      	sub	sp, #24
 801b0e2:	af00      	add	r7, sp, #0
 801b0e4:	60f8      	str	r0, [r7, #12]
 801b0e6:	60b9      	str	r1, [r7, #8]
 801b0e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d036      	beq.n	801b162 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801b0f8:	6938      	ldr	r0, [r7, #16]
 801b0fa:	f000 f836 	bl	801b16a <USBD_GetLen>
 801b0fe:	4603      	mov	r3, r0
 801b100:	3301      	adds	r3, #1
 801b102:	b29b      	uxth	r3, r3
 801b104:	005b      	lsls	r3, r3, #1
 801b106:	b29a      	uxth	r2, r3
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801b10c:	7dfb      	ldrb	r3, [r7, #23]
 801b10e:	68ba      	ldr	r2, [r7, #8]
 801b110:	4413      	add	r3, r2
 801b112:	687a      	ldr	r2, [r7, #4]
 801b114:	7812      	ldrb	r2, [r2, #0]
 801b116:	701a      	strb	r2, [r3, #0]
  idx++;
 801b118:	7dfb      	ldrb	r3, [r7, #23]
 801b11a:	3301      	adds	r3, #1
 801b11c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801b11e:	7dfb      	ldrb	r3, [r7, #23]
 801b120:	68ba      	ldr	r2, [r7, #8]
 801b122:	4413      	add	r3, r2
 801b124:	2203      	movs	r2, #3
 801b126:	701a      	strb	r2, [r3, #0]
  idx++;
 801b128:	7dfb      	ldrb	r3, [r7, #23]
 801b12a:	3301      	adds	r3, #1
 801b12c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801b12e:	e013      	b.n	801b158 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801b130:	7dfb      	ldrb	r3, [r7, #23]
 801b132:	68ba      	ldr	r2, [r7, #8]
 801b134:	4413      	add	r3, r2
 801b136:	693a      	ldr	r2, [r7, #16]
 801b138:	7812      	ldrb	r2, [r2, #0]
 801b13a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801b13c:	693b      	ldr	r3, [r7, #16]
 801b13e:	3301      	adds	r3, #1
 801b140:	613b      	str	r3, [r7, #16]
    idx++;
 801b142:	7dfb      	ldrb	r3, [r7, #23]
 801b144:	3301      	adds	r3, #1
 801b146:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801b148:	7dfb      	ldrb	r3, [r7, #23]
 801b14a:	68ba      	ldr	r2, [r7, #8]
 801b14c:	4413      	add	r3, r2
 801b14e:	2200      	movs	r2, #0
 801b150:	701a      	strb	r2, [r3, #0]
    idx++;
 801b152:	7dfb      	ldrb	r3, [r7, #23]
 801b154:	3301      	adds	r3, #1
 801b156:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801b158:	693b      	ldr	r3, [r7, #16]
 801b15a:	781b      	ldrb	r3, [r3, #0]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d1e7      	bne.n	801b130 <USBD_GetString+0x52>
 801b160:	e000      	b.n	801b164 <USBD_GetString+0x86>
    return;
 801b162:	bf00      	nop
  }
}
 801b164:	3718      	adds	r7, #24
 801b166:	46bd      	mov	sp, r7
 801b168:	bd80      	pop	{r7, pc}

0801b16a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b16a:	b480      	push	{r7}
 801b16c:	b085      	sub	sp, #20
 801b16e:	af00      	add	r7, sp, #0
 801b170:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b172:	2300      	movs	r3, #0
 801b174:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801b17a:	e005      	b.n	801b188 <USBD_GetLen+0x1e>
  {
    len++;
 801b17c:	7bfb      	ldrb	r3, [r7, #15]
 801b17e:	3301      	adds	r3, #1
 801b180:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801b182:	68bb      	ldr	r3, [r7, #8]
 801b184:	3301      	adds	r3, #1
 801b186:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	781b      	ldrb	r3, [r3, #0]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d1f5      	bne.n	801b17c <USBD_GetLen+0x12>
  }

  return len;
 801b190:	7bfb      	ldrb	r3, [r7, #15]
}
 801b192:	4618      	mov	r0, r3
 801b194:	3714      	adds	r7, #20
 801b196:	46bd      	mov	sp, r7
 801b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19c:	4770      	bx	lr
	...

0801b1a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1a0:	b480      	push	{r7}
 801b1a2:	b083      	sub	sp, #12
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	6039      	str	r1, [r7, #0]
 801b1aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b1ac:	683b      	ldr	r3, [r7, #0]
 801b1ae:	2212      	movs	r2, #18
 801b1b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b1b2:	4b03      	ldr	r3, [pc, #12]	; (801b1c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	370c      	adds	r7, #12
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1be:	4770      	bx	lr
 801b1c0:	20000648 	.word	0x20000648

0801b1c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1c4:	b480      	push	{r7}
 801b1c6:	b083      	sub	sp, #12
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	6039      	str	r1, [r7, #0]
 801b1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b1d0:	683b      	ldr	r3, [r7, #0]
 801b1d2:	2204      	movs	r2, #4
 801b1d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b1d6:	4b03      	ldr	r3, [pc, #12]	; (801b1e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	370c      	adds	r7, #12
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e2:	4770      	bx	lr
 801b1e4:	20000668 	.word	0x20000668

0801b1e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b082      	sub	sp, #8
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	6039      	str	r1, [r7, #0]
 801b1f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b1f4:	79fb      	ldrb	r3, [r7, #7]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d105      	bne.n	801b206 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b1fa:	683a      	ldr	r2, [r7, #0]
 801b1fc:	4907      	ldr	r1, [pc, #28]	; (801b21c <USBD_FS_ProductStrDescriptor+0x34>)
 801b1fe:	4808      	ldr	r0, [pc, #32]	; (801b220 <USBD_FS_ProductStrDescriptor+0x38>)
 801b200:	f7ff ff6d 	bl	801b0de <USBD_GetString>
 801b204:	e004      	b.n	801b210 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b206:	683a      	ldr	r2, [r7, #0]
 801b208:	4904      	ldr	r1, [pc, #16]	; (801b21c <USBD_FS_ProductStrDescriptor+0x34>)
 801b20a:	4805      	ldr	r0, [pc, #20]	; (801b220 <USBD_FS_ProductStrDescriptor+0x38>)
 801b20c:	f7ff ff67 	bl	801b0de <USBD_GetString>
  }
  return USBD_StrDesc;
 801b210:	4b02      	ldr	r3, [pc, #8]	; (801b21c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b212:	4618      	mov	r0, r3
 801b214:	3708      	adds	r7, #8
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	bf00      	nop
 801b21c:	20009f3c 	.word	0x20009f3c
 801b220:	080226c8 	.word	0x080226c8

0801b224 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b224:	b580      	push	{r7, lr}
 801b226:	b082      	sub	sp, #8
 801b228:	af00      	add	r7, sp, #0
 801b22a:	4603      	mov	r3, r0
 801b22c:	6039      	str	r1, [r7, #0]
 801b22e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b230:	683a      	ldr	r2, [r7, #0]
 801b232:	4904      	ldr	r1, [pc, #16]	; (801b244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b234:	4804      	ldr	r0, [pc, #16]	; (801b248 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b236:	f7ff ff52 	bl	801b0de <USBD_GetString>
  return USBD_StrDesc;
 801b23a:	4b02      	ldr	r3, [pc, #8]	; (801b244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b23c:	4618      	mov	r0, r3
 801b23e:	3708      	adds	r7, #8
 801b240:	46bd      	mov	sp, r7
 801b242:	bd80      	pop	{r7, pc}
 801b244:	20009f3c 	.word	0x20009f3c
 801b248:	080226d0 	.word	0x080226d0

0801b24c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b082      	sub	sp, #8
 801b250:	af00      	add	r7, sp, #0
 801b252:	4603      	mov	r3, r0
 801b254:	6039      	str	r1, [r7, #0]
 801b256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b258:	683b      	ldr	r3, [r7, #0]
 801b25a:	221a      	movs	r2, #26
 801b25c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b25e:	f000 f855 	bl	801b30c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b262:	4b02      	ldr	r3, [pc, #8]	; (801b26c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b264:	4618      	mov	r0, r3
 801b266:	3708      	adds	r7, #8
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}
 801b26c:	2000066c 	.word	0x2000066c

0801b270 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b270:	b580      	push	{r7, lr}
 801b272:	b082      	sub	sp, #8
 801b274:	af00      	add	r7, sp, #0
 801b276:	4603      	mov	r3, r0
 801b278:	6039      	str	r1, [r7, #0]
 801b27a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b27c:	79fb      	ldrb	r3, [r7, #7]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d105      	bne.n	801b28e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b282:	683a      	ldr	r2, [r7, #0]
 801b284:	4907      	ldr	r1, [pc, #28]	; (801b2a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b286:	4808      	ldr	r0, [pc, #32]	; (801b2a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b288:	f7ff ff29 	bl	801b0de <USBD_GetString>
 801b28c:	e004      	b.n	801b298 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b28e:	683a      	ldr	r2, [r7, #0]
 801b290:	4904      	ldr	r1, [pc, #16]	; (801b2a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b292:	4805      	ldr	r0, [pc, #20]	; (801b2a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b294:	f7ff ff23 	bl	801b0de <USBD_GetString>
  }
  return USBD_StrDesc;
 801b298:	4b02      	ldr	r3, [pc, #8]	; (801b2a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3708      	adds	r7, #8
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	20009f3c 	.word	0x20009f3c
 801b2a8:	080226e4 	.word	0x080226e4

0801b2ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b082      	sub	sp, #8
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	4603      	mov	r3, r0
 801b2b4:	6039      	str	r1, [r7, #0]
 801b2b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b2b8:	79fb      	ldrb	r3, [r7, #7]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d105      	bne.n	801b2ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b2be:	683a      	ldr	r2, [r7, #0]
 801b2c0:	4907      	ldr	r1, [pc, #28]	; (801b2e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b2c2:	4808      	ldr	r0, [pc, #32]	; (801b2e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b2c4:	f7ff ff0b 	bl	801b0de <USBD_GetString>
 801b2c8:	e004      	b.n	801b2d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b2ca:	683a      	ldr	r2, [r7, #0]
 801b2cc:	4904      	ldr	r1, [pc, #16]	; (801b2e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b2ce:	4805      	ldr	r0, [pc, #20]	; (801b2e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b2d0:	f7ff ff05 	bl	801b0de <USBD_GetString>
  }
  return USBD_StrDesc;
 801b2d4:	4b02      	ldr	r3, [pc, #8]	; (801b2e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	3708      	adds	r7, #8
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
 801b2de:	bf00      	nop
 801b2e0:	20009f3c 	.word	0x20009f3c
 801b2e4:	080226f4 	.word	0x080226f4

0801b2e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b2e8:	b480      	push	{r7}
 801b2ea:	b083      	sub	sp, #12
 801b2ec:	af00      	add	r7, sp, #0
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	6039      	str	r1, [r7, #0]
 801b2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801b2f4:	683b      	ldr	r3, [r7, #0]
 801b2f6:	220c      	movs	r2, #12
 801b2f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801b2fa:	4b03      	ldr	r3, [pc, #12]	; (801b308 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	370c      	adds	r7, #12
 801b300:	46bd      	mov	sp, r7
 801b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b306:	4770      	bx	lr
 801b308:	2000065c 	.word	0x2000065c

0801b30c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b084      	sub	sp, #16
 801b310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b312:	4b0f      	ldr	r3, [pc, #60]	; (801b350 <Get_SerialNum+0x44>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b318:	4b0e      	ldr	r3, [pc, #56]	; (801b354 <Get_SerialNum+0x48>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b31e:	4b0e      	ldr	r3, [pc, #56]	; (801b358 <Get_SerialNum+0x4c>)
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b324:	68fa      	ldr	r2, [r7, #12]
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	4413      	add	r3, r2
 801b32a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d009      	beq.n	801b346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b332:	2208      	movs	r2, #8
 801b334:	4909      	ldr	r1, [pc, #36]	; (801b35c <Get_SerialNum+0x50>)
 801b336:	68f8      	ldr	r0, [r7, #12]
 801b338:	f000 f814 	bl	801b364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b33c:	2204      	movs	r2, #4
 801b33e:	4908      	ldr	r1, [pc, #32]	; (801b360 <Get_SerialNum+0x54>)
 801b340:	68b8      	ldr	r0, [r7, #8]
 801b342:	f000 f80f 	bl	801b364 <IntToUnicode>
  }
}
 801b346:	bf00      	nop
 801b348:	3710      	adds	r7, #16
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	1fff7590 	.word	0x1fff7590
 801b354:	1fff7594 	.word	0x1fff7594
 801b358:	1fff7598 	.word	0x1fff7598
 801b35c:	2000066e 	.word	0x2000066e
 801b360:	2000067e 	.word	0x2000067e

0801b364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b364:	b480      	push	{r7}
 801b366:	b087      	sub	sp, #28
 801b368:	af00      	add	r7, sp, #0
 801b36a:	60f8      	str	r0, [r7, #12]
 801b36c:	60b9      	str	r1, [r7, #8]
 801b36e:	4613      	mov	r3, r2
 801b370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b372:	2300      	movs	r3, #0
 801b374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b376:	2300      	movs	r3, #0
 801b378:	75fb      	strb	r3, [r7, #23]
 801b37a:	e027      	b.n	801b3cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	0f1b      	lsrs	r3, r3, #28
 801b380:	2b09      	cmp	r3, #9
 801b382:	d80b      	bhi.n	801b39c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	0f1b      	lsrs	r3, r3, #28
 801b388:	b2da      	uxtb	r2, r3
 801b38a:	7dfb      	ldrb	r3, [r7, #23]
 801b38c:	005b      	lsls	r3, r3, #1
 801b38e:	4619      	mov	r1, r3
 801b390:	68bb      	ldr	r3, [r7, #8]
 801b392:	440b      	add	r3, r1
 801b394:	3230      	adds	r2, #48	; 0x30
 801b396:	b2d2      	uxtb	r2, r2
 801b398:	701a      	strb	r2, [r3, #0]
 801b39a:	e00a      	b.n	801b3b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	0f1b      	lsrs	r3, r3, #28
 801b3a0:	b2da      	uxtb	r2, r3
 801b3a2:	7dfb      	ldrb	r3, [r7, #23]
 801b3a4:	005b      	lsls	r3, r3, #1
 801b3a6:	4619      	mov	r1, r3
 801b3a8:	68bb      	ldr	r3, [r7, #8]
 801b3aa:	440b      	add	r3, r1
 801b3ac:	3237      	adds	r2, #55	; 0x37
 801b3ae:	b2d2      	uxtb	r2, r2
 801b3b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	011b      	lsls	r3, r3, #4
 801b3b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b3b8:	7dfb      	ldrb	r3, [r7, #23]
 801b3ba:	005b      	lsls	r3, r3, #1
 801b3bc:	3301      	adds	r3, #1
 801b3be:	68ba      	ldr	r2, [r7, #8]
 801b3c0:	4413      	add	r3, r2
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b3c6:	7dfb      	ldrb	r3, [r7, #23]
 801b3c8:	3301      	adds	r3, #1
 801b3ca:	75fb      	strb	r3, [r7, #23]
 801b3cc:	7dfa      	ldrb	r2, [r7, #23]
 801b3ce:	79fb      	ldrb	r3, [r7, #7]
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d3d3      	bcc.n	801b37c <IntToUnicode+0x18>
  }
}
 801b3d4:	bf00      	nop
 801b3d6:	bf00      	nop
 801b3d8:	371c      	adds	r7, #28
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e0:	4770      	bx	lr

0801b3e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b3e2:	b580      	push	{r7, lr}
 801b3e4:	b084      	sub	sp, #16
 801b3e6:	af00      	add	r7, sp, #0
 801b3e8:	60f8      	str	r0, [r7, #12]
 801b3ea:	60b9      	str	r1, [r7, #8]
 801b3ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	2202      	movs	r2, #2
 801b3f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	687a      	ldr	r2, [r7, #4]
 801b3fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	687a      	ldr	r2, [r7, #4]
 801b400:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	68ba      	ldr	r2, [r7, #8]
 801b406:	2100      	movs	r1, #0
 801b408:	68f8      	ldr	r0, [r7, #12]
 801b40a:	f7fe fcc1 	bl	8019d90 <USBD_LL_Transmit>

  return USBD_OK;
 801b40e:	2300      	movs	r3, #0
}
 801b410:	4618      	mov	r0, r3
 801b412:	3710      	adds	r7, #16
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}

0801b418 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b084      	sub	sp, #16
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	60f8      	str	r0, [r7, #12]
 801b420:	60b9      	str	r1, [r7, #8]
 801b422:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	68ba      	ldr	r2, [r7, #8]
 801b428:	2100      	movs	r1, #0
 801b42a:	68f8      	ldr	r0, [r7, #12]
 801b42c:	f7fe fcb0 	bl	8019d90 <USBD_LL_Transmit>

  return USBD_OK;
 801b430:	2300      	movs	r3, #0
}
 801b432:	4618      	mov	r0, r3
 801b434:	3710      	adds	r7, #16
 801b436:	46bd      	mov	sp, r7
 801b438:	bd80      	pop	{r7, pc}

0801b43a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b43a:	b580      	push	{r7, lr}
 801b43c:	b084      	sub	sp, #16
 801b43e:	af00      	add	r7, sp, #0
 801b440:	60f8      	str	r0, [r7, #12]
 801b442:	60b9      	str	r1, [r7, #8]
 801b444:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	2203      	movs	r2, #3
 801b44a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	687a      	ldr	r2, [r7, #4]
 801b452:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	687a      	ldr	r2, [r7, #4]
 801b45a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	68ba      	ldr	r2, [r7, #8]
 801b462:	2100      	movs	r1, #0
 801b464:	68f8      	ldr	r0, [r7, #12]
 801b466:	f7fe fccb 	bl	8019e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b46a:	2300      	movs	r3, #0
}
 801b46c:	4618      	mov	r0, r3
 801b46e:	3710      	adds	r7, #16
 801b470:	46bd      	mov	sp, r7
 801b472:	bd80      	pop	{r7, pc}

0801b474 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b084      	sub	sp, #16
 801b478:	af00      	add	r7, sp, #0
 801b47a:	60f8      	str	r0, [r7, #12]
 801b47c:	60b9      	str	r1, [r7, #8]
 801b47e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	68ba      	ldr	r2, [r7, #8]
 801b484:	2100      	movs	r1, #0
 801b486:	68f8      	ldr	r0, [r7, #12]
 801b488:	f7fe fcba 	bl	8019e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b48c:	2300      	movs	r3, #0
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3710      	adds	r7, #16
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}

0801b496 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b496:	b580      	push	{r7, lr}
 801b498:	b082      	sub	sp, #8
 801b49a:	af00      	add	r7, sp, #0
 801b49c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	2204      	movs	r2, #4
 801b4a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b4a6:	2300      	movs	r3, #0
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	2100      	movs	r1, #0
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	f7fe fc6f 	bl	8019d90 <USBD_LL_Transmit>

  return USBD_OK;
 801b4b2:	2300      	movs	r3, #0
}
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	3708      	adds	r7, #8
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	bd80      	pop	{r7, pc}

0801b4bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b082      	sub	sp, #8
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2205      	movs	r2, #5
 801b4c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	2200      	movs	r2, #0
 801b4d0:	2100      	movs	r1, #0
 801b4d2:	6878      	ldr	r0, [r7, #4]
 801b4d4:	f7fe fc94 	bl	8019e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b4d8:	2300      	movs	r3, #0
}
 801b4da:	4618      	mov	r0, r3
 801b4dc:	3708      	adds	r7, #8
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bd80      	pop	{r7, pc}

0801b4e2 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b4e2:	b580      	push	{r7, lr}
 801b4e4:	b084      	sub	sp, #16
 801b4e6:	af00      	add	r7, sp, #0
 801b4e8:	6078      	str	r0, [r7, #4]
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 801b4ee:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b4f2:	f7fe fd1f 	bl	8019f34 <USBD_static_malloc>
 801b4f6:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d105      	bne.n	801b50a <USBD_MSC_Init+0x28>
  {
    pdev->pClassDataMSC = NULL;
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	2200      	movs	r2, #0
 801b502:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801b506:	2302      	movs	r3, #2
 801b508:	e034      	b.n	801b574 <USBD_MSC_Init+0x92>
  }

  pdev->pClassDataMSC = (void *)hmsc;
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	68fa      	ldr	r2, [r7, #12]
 801b50e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	7c1b      	ldrb	r3, [r3, #16]
 801b516:	2b00      	cmp	r3, #0
 801b518:	d115      	bne.n	801b546 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b51a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b51e:	2202      	movs	r2, #2
 801b520:	2101      	movs	r1, #1
 801b522:	6878      	ldr	r0, [r7, #4]
 801b524:	f7fe fabc 	bl	8019aa0 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	2201      	movs	r2, #1
 801b52c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b530:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b534:	2202      	movs	r2, #2
 801b536:	2181      	movs	r1, #129	; 0x81
 801b538:	6878      	ldr	r0, [r7, #4]
 801b53a:	f7fe fab1 	bl	8019aa0 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	2201      	movs	r2, #1
 801b542:	871a      	strh	r2, [r3, #56]	; 0x38
 801b544:	e012      	b.n	801b56c <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b546:	2340      	movs	r3, #64	; 0x40
 801b548:	2202      	movs	r2, #2
 801b54a:	2101      	movs	r1, #1
 801b54c:	6878      	ldr	r0, [r7, #4]
 801b54e:	f7fe faa7 	bl	8019aa0 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	2201      	movs	r2, #1
 801b556:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b55a:	2340      	movs	r3, #64	; 0x40
 801b55c:	2202      	movs	r2, #2
 801b55e:	2181      	movs	r1, #129	; 0x81
 801b560:	6878      	ldr	r0, [r7, #4]
 801b562:	f7fe fa9d 	bl	8019aa0 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	2201      	movs	r2, #1
 801b56a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801b56c:	6878      	ldr	r0, [r7, #4]
 801b56e:	f000 f958 	bl	801b822 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801b572:	2300      	movs	r3, #0
}
 801b574:	4618      	mov	r0, r3
 801b576:	3710      	adds	r7, #16
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd80      	pop	{r7, pc}

0801b57c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b57c:	b580      	push	{r7, lr}
 801b57e:	b082      	sub	sp, #8
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
 801b584:	460b      	mov	r3, r1
 801b586:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 801b588:	2101      	movs	r1, #1
 801b58a:	6878      	ldr	r0, [r7, #4]
 801b58c:	f7fe fac6 	bl	8019b1c <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	2200      	movs	r2, #0
 801b594:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 801b598:	2181      	movs	r1, #129	; 0x81
 801b59a:	6878      	ldr	r0, [r7, #4]
 801b59c:	f7fe fabe 	bl	8019b1c <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassDataMSC != NULL)
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d00c      	beq.n	801b5ca <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801b5b0:	6878      	ldr	r0, [r7, #4]
 801b5b2:	f000 f994 	bl	801b8de <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataMSC);
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b5bc:	4618      	mov	r0, r3
 801b5be:	f7fe fcc7 	bl	8019f50 <USBD_static_free>
    pdev->pClassDataMSC = NULL;
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b5ca:	2300      	movs	r3, #0
}
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	3708      	adds	r7, #8
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	bd80      	pop	{r7, pc}

0801b5d4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b086      	sub	sp, #24
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
 801b5dc:	6039      	str	r1, [r7, #0]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b5e4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801b5ee:	693b      	ldr	r3, [r7, #16]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d101      	bne.n	801b5f8 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801b5f4:	2303      	movs	r3, #3
 801b5f6:	e0db      	b.n	801b7b0 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b5f8:	683b      	ldr	r3, [r7, #0]
 801b5fa:	781b      	ldrb	r3, [r3, #0]
 801b5fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b600:	2b00      	cmp	r3, #0
 801b602:	d04e      	beq.n	801b6a2 <USBD_MSC_Setup+0xce>
 801b604:	2b20      	cmp	r3, #32
 801b606:	f040 80cb 	bne.w	801b7a0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801b60a:	683b      	ldr	r3, [r7, #0]
 801b60c:	785b      	ldrb	r3, [r3, #1]
 801b60e:	2bfe      	cmp	r3, #254	; 0xfe
 801b610:	d002      	beq.n	801b618 <USBD_MSC_Setup+0x44>
 801b612:	2bff      	cmp	r3, #255	; 0xff
 801b614:	d025      	beq.n	801b662 <USBD_MSC_Setup+0x8e>
 801b616:	e03c      	b.n	801b692 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b618:	683b      	ldr	r3, [r7, #0]
 801b61a:	885b      	ldrh	r3, [r3, #2]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d119      	bne.n	801b654 <USBD_MSC_Setup+0x80>
 801b620:	683b      	ldr	r3, [r7, #0]
 801b622:	88db      	ldrh	r3, [r3, #6]
 801b624:	2b01      	cmp	r3, #1
 801b626:	d115      	bne.n	801b654 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801b628:	683b      	ldr	r3, [r7, #0]
 801b62a:	781b      	ldrb	r3, [r3, #0]
 801b62c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b62e:	2b00      	cmp	r3, #0
 801b630:	da10      	bge.n	801b654 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetMaxLun();
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b638:	699b      	ldr	r3, [r3, #24]
 801b63a:	4798      	blx	r3
 801b63c:	4603      	mov	r3, r0
 801b63e:	461a      	mov	r2, r3
 801b640:	693b      	ldr	r3, [r7, #16]
 801b642:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801b644:	693b      	ldr	r3, [r7, #16]
 801b646:	2201      	movs	r2, #1
 801b648:	4619      	mov	r1, r3
 801b64a:	6878      	ldr	r0, [r7, #4]
 801b64c:	f7ff fec9 	bl	801b3e2 <USBD_CtlSendData>
 801b650:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b652:	e025      	b.n	801b6a0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b654:	6839      	ldr	r1, [r7, #0]
 801b656:	6878      	ldr	r0, [r7, #4]
 801b658:	f7ff fd30 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 801b65c:	2303      	movs	r3, #3
 801b65e:	75fb      	strb	r3, [r7, #23]
          break;
 801b660:	e01e      	b.n	801b6a0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b662:	683b      	ldr	r3, [r7, #0]
 801b664:	885b      	ldrh	r3, [r3, #2]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d10c      	bne.n	801b684 <USBD_MSC_Setup+0xb0>
 801b66a:	683b      	ldr	r3, [r7, #0]
 801b66c:	88db      	ldrh	r3, [r3, #6]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d108      	bne.n	801b684 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801b672:	683b      	ldr	r3, [r7, #0]
 801b674:	781b      	ldrb	r3, [r3, #0]
 801b676:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b678:	2b00      	cmp	r3, #0
 801b67a:	db03      	blt.n	801b684 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801b67c:	6878      	ldr	r0, [r7, #4]
 801b67e:	f000 f908 	bl	801b892 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b682:	e00d      	b.n	801b6a0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b684:	6839      	ldr	r1, [r7, #0]
 801b686:	6878      	ldr	r0, [r7, #4]
 801b688:	f7ff fd18 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 801b68c:	2303      	movs	r3, #3
 801b68e:	75fb      	strb	r3, [r7, #23]
          break;
 801b690:	e006      	b.n	801b6a0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b692:	6839      	ldr	r1, [r7, #0]
 801b694:	6878      	ldr	r0, [r7, #4]
 801b696:	f7ff fd11 	bl	801b0bc <USBD_CtlError>
          ret = USBD_FAIL;
 801b69a:	2303      	movs	r3, #3
 801b69c:	75fb      	strb	r3, [r7, #23]
          break;
 801b69e:	bf00      	nop
      }
      break;
 801b6a0:	e085      	b.n	801b7ae <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b6a2:	683b      	ldr	r3, [r7, #0]
 801b6a4:	785b      	ldrb	r3, [r3, #1]
 801b6a6:	2b0b      	cmp	r3, #11
 801b6a8:	d871      	bhi.n	801b78e <USBD_MSC_Setup+0x1ba>
 801b6aa:	a201      	add	r2, pc, #4	; (adr r2, 801b6b0 <USBD_MSC_Setup+0xdc>)
 801b6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6b0:	0801b6e1 	.word	0x0801b6e1
 801b6b4:	0801b75d 	.word	0x0801b75d
 801b6b8:	0801b78f 	.word	0x0801b78f
 801b6bc:	0801b78f 	.word	0x0801b78f
 801b6c0:	0801b78f 	.word	0x0801b78f
 801b6c4:	0801b78f 	.word	0x0801b78f
 801b6c8:	0801b78f 	.word	0x0801b78f
 801b6cc:	0801b78f 	.word	0x0801b78f
 801b6d0:	0801b78f 	.word	0x0801b78f
 801b6d4:	0801b78f 	.word	0x0801b78f
 801b6d8:	0801b70b 	.word	0x0801b70b
 801b6dc:	0801b735 	.word	0x0801b735
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b6e6:	b2db      	uxtb	r3, r3
 801b6e8:	2b03      	cmp	r3, #3
 801b6ea:	d107      	bne.n	801b6fc <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b6ec:	f107 030e 	add.w	r3, r7, #14
 801b6f0:	2202      	movs	r2, #2
 801b6f2:	4619      	mov	r1, r3
 801b6f4:	6878      	ldr	r0, [r7, #4]
 801b6f6:	f7ff fe74 	bl	801b3e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b6fa:	e050      	b.n	801b79e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b6fc:	6839      	ldr	r1, [r7, #0]
 801b6fe:	6878      	ldr	r0, [r7, #4]
 801b700:	f7ff fcdc 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 801b704:	2303      	movs	r3, #3
 801b706:	75fb      	strb	r3, [r7, #23]
          break;
 801b708:	e049      	b.n	801b79e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b710:	b2db      	uxtb	r3, r3
 801b712:	2b03      	cmp	r3, #3
 801b714:	d107      	bne.n	801b726 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801b716:	693b      	ldr	r3, [r7, #16]
 801b718:	3304      	adds	r3, #4
 801b71a:	2201      	movs	r2, #1
 801b71c:	4619      	mov	r1, r3
 801b71e:	6878      	ldr	r0, [r7, #4]
 801b720:	f7ff fe5f 	bl	801b3e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b724:	e03b      	b.n	801b79e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b726:	6839      	ldr	r1, [r7, #0]
 801b728:	6878      	ldr	r0, [r7, #4]
 801b72a:	f7ff fcc7 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 801b72e:	2303      	movs	r3, #3
 801b730:	75fb      	strb	r3, [r7, #23]
          break;
 801b732:	e034      	b.n	801b79e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b73a:	b2db      	uxtb	r3, r3
 801b73c:	2b03      	cmp	r3, #3
 801b73e:	d106      	bne.n	801b74e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801b740:	683b      	ldr	r3, [r7, #0]
 801b742:	885b      	ldrh	r3, [r3, #2]
 801b744:	b2db      	uxtb	r3, r3
 801b746:	461a      	mov	r2, r3
 801b748:	693b      	ldr	r3, [r7, #16]
 801b74a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b74c:	e027      	b.n	801b79e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b74e:	6839      	ldr	r1, [r7, #0]
 801b750:	6878      	ldr	r0, [r7, #4]
 801b752:	f7ff fcb3 	bl	801b0bc <USBD_CtlError>
            ret = USBD_FAIL;
 801b756:	2303      	movs	r3, #3
 801b758:	75fb      	strb	r3, [r7, #23]
          break;
 801b75a:	e020      	b.n	801b79e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b762:	b2db      	uxtb	r3, r3
 801b764:	2b03      	cmp	r3, #3
 801b766:	d119      	bne.n	801b79c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801b768:	683b      	ldr	r3, [r7, #0]
 801b76a:	885b      	ldrh	r3, [r3, #2]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d115      	bne.n	801b79c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801b770:	683b      	ldr	r3, [r7, #0]
 801b772:	889b      	ldrh	r3, [r3, #4]
 801b774:	b2db      	uxtb	r3, r3
 801b776:	4619      	mov	r1, r3
 801b778:	6878      	ldr	r0, [r7, #4]
 801b77a:	f7fe fa05 	bl	8019b88 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801b77e:	683b      	ldr	r3, [r7, #0]
 801b780:	889b      	ldrh	r3, [r3, #4]
 801b782:	b2db      	uxtb	r3, r3
 801b784:	4619      	mov	r1, r3
 801b786:	6878      	ldr	r0, [r7, #4]
 801b788:	f000 fa42 	bl	801bc10 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801b78c:	e006      	b.n	801b79c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801b78e:	6839      	ldr	r1, [r7, #0]
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	f7ff fc93 	bl	801b0bc <USBD_CtlError>
          ret = USBD_FAIL;
 801b796:	2303      	movs	r3, #3
 801b798:	75fb      	strb	r3, [r7, #23]
          break;
 801b79a:	e000      	b.n	801b79e <USBD_MSC_Setup+0x1ca>
          break;
 801b79c:	bf00      	nop
      }
      break;
 801b79e:	e006      	b.n	801b7ae <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801b7a0:	6839      	ldr	r1, [r7, #0]
 801b7a2:	6878      	ldr	r0, [r7, #4]
 801b7a4:	f7ff fc8a 	bl	801b0bc <USBD_CtlError>
      ret = USBD_FAIL;
 801b7a8:	2303      	movs	r3, #3
 801b7aa:	75fb      	strb	r3, [r7, #23]
      break;
 801b7ac:	bf00      	nop
  }

  return (uint8_t)ret;
 801b7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	3718      	adds	r7, #24
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	bd80      	pop	{r7, pc}

0801b7b8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b082      	sub	sp, #8
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	6078      	str	r0, [r7, #4]
 801b7c0:	460b      	mov	r3, r1
 801b7c2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801b7c4:	78fb      	ldrb	r3, [r7, #3]
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	6878      	ldr	r0, [r7, #4]
 801b7ca:	f000 f89c 	bl	801b906 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801b7ce:	2300      	movs	r3, #0
}
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	3708      	adds	r7, #8
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	bd80      	pop	{r7, pc}

0801b7d8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b082      	sub	sp, #8
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	460b      	mov	r3, r1
 801b7e2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801b7e4:	78fb      	ldrb	r3, [r7, #3]
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	6878      	ldr	r0, [r7, #4]
 801b7ea:	f000 f8c2 	bl	801b972 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801b7ee:	2300      	movs	r3, #0
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	3708      	adds	r7, #8
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd80      	pop	{r7, pc}

0801b7f8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801b7f8:	b480      	push	{r7}
 801b7fa:	b083      	sub	sp, #12
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
 801b800:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801b802:	683b      	ldr	r3, [r7, #0]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d101      	bne.n	801b80c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801b808:	2303      	movs	r3, #3
 801b80a:	e004      	b.n	801b816 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserDataMSC = fops;
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	683a      	ldr	r2, [r7, #0]
 801b810:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801b814:	2300      	movs	r3, #0
}
 801b816:	4618      	mov	r0, r3
 801b818:	370c      	adds	r7, #12
 801b81a:	46bd      	mov	sp, r7
 801b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b820:	4770      	bx	lr

0801b822 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801b822:	b580      	push	{r7, lr}
 801b824:	b084      	sub	sp, #16
 801b826:	af00      	add	r7, sp, #0
 801b828:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b830:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d028      	beq.n	801b88a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	2200      	movs	r2, #0
 801b83c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	2200      	movs	r2, #0
 801b842:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	2200      	movs	r2, #0
 801b848:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	2200      	movs	r2, #0
 801b850:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	2200      	movs	r2, #0
 801b858:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Init(0U);
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	2000      	movs	r0, #0
 801b866:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 801b868:	2101      	movs	r1, #1
 801b86a:	6878      	ldr	r0, [r7, #4]
 801b86c:	f7fe f98c 	bl	8019b88 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 801b870:	2181      	movs	r1, #129	; 0x81
 801b872:	6878      	ldr	r0, [r7, #4]
 801b874:	f7fe f988 	bl	8019b88 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b87e:	231f      	movs	r3, #31
 801b880:	2101      	movs	r1, #1
 801b882:	6878      	ldr	r0, [r7, #4]
 801b884:	f7fe fabc 	bl	8019e00 <USBD_LL_PrepareReceive>
 801b888:	e000      	b.n	801b88c <MSC_BOT_Init+0x6a>
    return;
 801b88a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b88c:	3710      	adds	r7, #16
 801b88e:	46bd      	mov	sp, r7
 801b890:	bd80      	pop	{r7, pc}

0801b892 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801b892:	b580      	push	{r7, lr}
 801b894:	b084      	sub	sp, #16
 801b896:	af00      	add	r7, sp, #0
 801b898:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b8a0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d016      	beq.n	801b8d6 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801b8a8:	68fb      	ldr	r3, [r7, #12]
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	2201      	movs	r2, #1
 801b8b2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 801b8b4:	2181      	movs	r1, #129	; 0x81
 801b8b6:	6878      	ldr	r0, [r7, #4]
 801b8b8:	f7fe f9d2 	bl	8019c60 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 801b8bc:	2101      	movs	r1, #1
 801b8be:	6878      	ldr	r0, [r7, #4]
 801b8c0:	f7fe f9ce 	bl	8019c60 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b8ca:	231f      	movs	r3, #31
 801b8cc:	2101      	movs	r1, #1
 801b8ce:	6878      	ldr	r0, [r7, #4]
 801b8d0:	f7fe fa96 	bl	8019e00 <USBD_LL_PrepareReceive>
 801b8d4:	e000      	b.n	801b8d8 <MSC_BOT_Reset+0x46>
    return;
 801b8d6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b8d8:	3710      	adds	r7, #16
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	bd80      	pop	{r7, pc}

0801b8de <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801b8de:	b480      	push	{r7}
 801b8e0:	b085      	sub	sp, #20
 801b8e2:	af00      	add	r7, sp, #0
 801b8e4:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b8ec:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d002      	beq.n	801b8fa <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	721a      	strb	r2, [r3, #8]
  }
}
 801b8fa:	bf00      	nop
 801b8fc:	3714      	adds	r7, #20
 801b8fe:	46bd      	mov	sp, r7
 801b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b904:	4770      	bx	lr

0801b906 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b906:	b580      	push	{r7, lr}
 801b908:	b084      	sub	sp, #16
 801b90a:	af00      	add	r7, sp, #0
 801b90c:	6078      	str	r0, [r7, #4]
 801b90e:	460b      	mov	r3, r1
 801b910:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b918:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d020      	beq.n	801b962 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	7a1b      	ldrb	r3, [r3, #8]
 801b924:	2b02      	cmp	r3, #2
 801b926:	d005      	beq.n	801b934 <MSC_BOT_DataIn+0x2e>
 801b928:	2b02      	cmp	r3, #2
 801b92a:	db1c      	blt.n	801b966 <MSC_BOT_DataIn+0x60>
 801b92c:	3b03      	subs	r3, #3
 801b92e:	2b01      	cmp	r3, #1
 801b930:	d819      	bhi.n	801b966 <MSC_BOT_DataIn+0x60>
 801b932:	e011      	b.n	801b958 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b940:	461a      	mov	r2, r3
 801b942:	6878      	ldr	r0, [r7, #4]
 801b944:	f000 f992 	bl	801bc6c <SCSI_ProcessCmd>
 801b948:	4603      	mov	r3, r0
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	da0d      	bge.n	801b96a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b94e:	2101      	movs	r1, #1
 801b950:	6878      	ldr	r0, [r7, #4]
 801b952:	f000 f8fb 	bl	801bb4c <MSC_BOT_SendCSW>
      }
      break;
 801b956:	e008      	b.n	801b96a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b958:	2100      	movs	r1, #0
 801b95a:	6878      	ldr	r0, [r7, #4]
 801b95c:	f000 f8f6 	bl	801bb4c <MSC_BOT_SendCSW>
      break;
 801b960:	e004      	b.n	801b96c <MSC_BOT_DataIn+0x66>
    return;
 801b962:	bf00      	nop
 801b964:	e002      	b.n	801b96c <MSC_BOT_DataIn+0x66>

    default:
      break;
 801b966:	bf00      	nop
 801b968:	e000      	b.n	801b96c <MSC_BOT_DataIn+0x66>
      break;
 801b96a:	bf00      	nop
  }
}
 801b96c:	3710      	adds	r7, #16
 801b96e:	46bd      	mov	sp, r7
 801b970:	bd80      	pop	{r7, pc}

0801b972 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b972:	b580      	push	{r7, lr}
 801b974:	b084      	sub	sp, #16
 801b976:	af00      	add	r7, sp, #0
 801b978:	6078      	str	r0, [r7, #4]
 801b97a:	460b      	mov	r3, r1
 801b97c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b984:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d01c      	beq.n	801b9c6 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	7a1b      	ldrb	r3, [r3, #8]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d002      	beq.n	801b99a <MSC_BOT_DataOut+0x28>
 801b994:	2b01      	cmp	r3, #1
 801b996:	d004      	beq.n	801b9a2 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801b998:	e018      	b.n	801b9cc <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801b99a:	6878      	ldr	r0, [r7, #4]
 801b99c:	f000 f81a 	bl	801b9d4 <MSC_BOT_CBW_Decode>
      break;
 801b9a0:	e014      	b.n	801b9cc <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b9ae:	461a      	mov	r2, r3
 801b9b0:	6878      	ldr	r0, [r7, #4]
 801b9b2:	f000 f95b 	bl	801bc6c <SCSI_ProcessCmd>
 801b9b6:	4603      	mov	r3, r0
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	da06      	bge.n	801b9ca <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b9bc:	2101      	movs	r1, #1
 801b9be:	6878      	ldr	r0, [r7, #4]
 801b9c0:	f000 f8c4 	bl	801bb4c <MSC_BOT_SendCSW>
      break;
 801b9c4:	e001      	b.n	801b9ca <MSC_BOT_DataOut+0x58>
    return;
 801b9c6:	bf00      	nop
 801b9c8:	e000      	b.n	801b9cc <MSC_BOT_DataOut+0x5a>
      break;
 801b9ca:	bf00      	nop
  }
}
 801b9cc:	3710      	adds	r7, #16
 801b9ce:	46bd      	mov	sp, r7
 801b9d0:	bd80      	pop	{r7, pc}
	...

0801b9d4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b084      	sub	sp, #16
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b9e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d077      	beq.n	801bada <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801b9fc:	68fb      	ldr	r3, [r7, #12]
 801b9fe:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801ba02:	2101      	movs	r1, #1
 801ba04:	6878      	ldr	r0, [r7, #4]
 801ba06:	f7fe fa33 	bl	8019e70 <USBD_LL_GetRxDataSize>
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	2b1f      	cmp	r3, #31
 801ba0e:	d114      	bne.n	801ba3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801ba16:	4a34      	ldr	r2, [pc, #208]	; (801bae8 <MSC_BOT_CBW_Decode+0x114>)
 801ba18:	4293      	cmp	r3, r2
 801ba1a:	d10e      	bne.n	801ba3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801ba22:	2b01      	cmp	r3, #1
 801ba24:	d809      	bhi.n	801ba3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d004      	beq.n	801ba3a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801ba36:	2b10      	cmp	r3, #16
 801ba38:	d90e      	bls.n	801ba58 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ba40:	2320      	movs	r3, #32
 801ba42:	2205      	movs	r2, #5
 801ba44:	6878      	ldr	r0, [r7, #4]
 801ba46:	f000 fdbc 	bl	801c5c2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	2202      	movs	r2, #2
 801ba4e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801ba50:	6878      	ldr	r0, [r7, #4]
 801ba52:	f000 f8ab 	bl	801bbac <MSC_BOT_Abort>
 801ba56:	e043      	b.n	801bae0 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801ba64:	461a      	mov	r2, r3
 801ba66:	6878      	ldr	r0, [r7, #4]
 801ba68:	f000 f900 	bl	801bc6c <SCSI_ProcessCmd>
 801ba6c:	4603      	mov	r3, r0
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	da0c      	bge.n	801ba8c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	7a1b      	ldrb	r3, [r3, #8]
 801ba76:	2b05      	cmp	r3, #5
 801ba78:	d104      	bne.n	801ba84 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801ba7a:	2101      	movs	r1, #1
 801ba7c:	6878      	ldr	r0, [r7, #4]
 801ba7e:	f000 f865 	bl	801bb4c <MSC_BOT_SendCSW>
 801ba82:	e02d      	b.n	801bae0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801ba84:	6878      	ldr	r0, [r7, #4]
 801ba86:	f000 f891 	bl	801bbac <MSC_BOT_Abort>
 801ba8a:	e029      	b.n	801bae0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	7a1b      	ldrb	r3, [r3, #8]
 801ba90:	2b02      	cmp	r3, #2
 801ba92:	d024      	beq.n	801bade <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801ba98:	2b01      	cmp	r3, #1
 801ba9a:	d020      	beq.n	801bade <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801baa0:	2b03      	cmp	r3, #3
 801baa2:	d01c      	beq.n	801bade <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	68db      	ldr	r3, [r3, #12]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d009      	beq.n	801bac0 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	f103 0110 	add.w	r1, r3, #16
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	68db      	ldr	r3, [r3, #12]
 801bab6:	461a      	mov	r2, r3
 801bab8:	6878      	ldr	r0, [r7, #4]
 801baba:	f000 f817 	bl	801baec <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801babe:	e00f      	b.n	801bae0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	68db      	ldr	r3, [r3, #12]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d104      	bne.n	801bad2 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801bac8:	2100      	movs	r1, #0
 801baca:	6878      	ldr	r0, [r7, #4]
 801bacc:	f000 f83e 	bl	801bb4c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801bad0:	e006      	b.n	801bae0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801bad2:	6878      	ldr	r0, [r7, #4]
 801bad4:	f000 f86a 	bl	801bbac <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801bad8:	e002      	b.n	801bae0 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801bada:	bf00      	nop
 801badc:	e000      	b.n	801bae0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801bade:	bf00      	nop
    }
  }
}
 801bae0:	3710      	adds	r7, #16
 801bae2:	46bd      	mov	sp, r7
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	bf00      	nop
 801bae8:	43425355 	.word	0x43425355

0801baec <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b086      	sub	sp, #24
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	60f8      	str	r0, [r7, #12]
 801baf4:	60b9      	str	r1, [r7, #8]
 801baf6:	607a      	str	r2, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bafe:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801bb00:	697b      	ldr	r3, [r7, #20]
 801bb02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bb06:	687a      	ldr	r2, [r7, #4]
 801bb08:	4293      	cmp	r3, r2
 801bb0a:	bf28      	it	cs
 801bb0c:	4613      	movcs	r3, r2
 801bb0e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801bb10:	697b      	ldr	r3, [r7, #20]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d015      	beq.n	801bb42 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801bb16:	697b      	ldr	r3, [r7, #20]
 801bb18:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	1ad2      	subs	r2, r2, r3
 801bb20:	697b      	ldr	r3, [r7, #20]
 801bb22:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801bb26:	697b      	ldr	r3, [r7, #20]
 801bb28:	2200      	movs	r2, #0
 801bb2a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	2204      	movs	r2, #4
 801bb32:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 801bb34:	693b      	ldr	r3, [r7, #16]
 801bb36:	68ba      	ldr	r2, [r7, #8]
 801bb38:	2181      	movs	r1, #129	; 0x81
 801bb3a:	68f8      	ldr	r0, [r7, #12]
 801bb3c:	f7fe f928 	bl	8019d90 <USBD_LL_Transmit>
 801bb40:	e000      	b.n	801bb44 <MSC_BOT_SendData+0x58>
    return;
 801bb42:	bf00      	nop
}
 801bb44:	3718      	adds	r7, #24
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd80      	pop	{r7, pc}
	...

0801bb4c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b084      	sub	sp, #16
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	6078      	str	r0, [r7, #4]
 801bb54:	460b      	mov	r3, r1
 801bb56:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bb5e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d01b      	beq.n	801bb9e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	4a0f      	ldr	r2, [pc, #60]	; (801bba8 <MSC_BOT_SendCSW+0x5c>)
 801bb6a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	78fa      	ldrb	r2, [r7, #3]
 801bb72:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	2200      	movs	r2, #0
 801bb7a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801bb82:	230d      	movs	r3, #13
 801bb84:	2181      	movs	r1, #129	; 0x81
 801bb86:	6878      	ldr	r0, [r7, #4]
 801bb88:	f7fe f902 	bl	8019d90 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801bb92:	231f      	movs	r3, #31
 801bb94:	2101      	movs	r1, #1
 801bb96:	6878      	ldr	r0, [r7, #4]
 801bb98:	f7fe f932 	bl	8019e00 <USBD_LL_PrepareReceive>
 801bb9c:	e000      	b.n	801bba0 <MSC_BOT_SendCSW+0x54>
    return;
 801bb9e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801bba0:	3710      	adds	r7, #16
 801bba2:	46bd      	mov	sp, r7
 801bba4:	bd80      	pop	{r7, pc}
 801bba6:	bf00      	nop
 801bba8:	53425355 	.word	0x53425355

0801bbac <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801bbac:	b580      	push	{r7, lr}
 801bbae:	b084      	sub	sp, #16
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bbba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d022      	beq.n	801bc08 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d10c      	bne.n	801bbe6 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d007      	beq.n	801bbe6 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d103      	bne.n	801bbe6 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bbde:	2101      	movs	r1, #1
 801bbe0:	6878      	ldr	r0, [r7, #4]
 801bbe2:	f7fe f807 	bl	8019bf4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bbe6:	2181      	movs	r1, #129	; 0x81
 801bbe8:	6878      	ldr	r0, [r7, #4]
 801bbea:	f7fe f803 	bl	8019bf4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	7a5b      	ldrb	r3, [r3, #9]
 801bbf2:	2b02      	cmp	r3, #2
 801bbf4:	d109      	bne.n	801bc0a <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bbf6:	2181      	movs	r1, #129	; 0x81
 801bbf8:	6878      	ldr	r0, [r7, #4]
 801bbfa:	f7fd fffb 	bl	8019bf4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bbfe:	2101      	movs	r1, #1
 801bc00:	6878      	ldr	r0, [r7, #4]
 801bc02:	f7fd fff7 	bl	8019bf4 <USBD_LL_StallEP>
 801bc06:	e000      	b.n	801bc0a <MSC_BOT_Abort+0x5e>
    return;
 801bc08:	bf00      	nop
  }
}
 801bc0a:	3710      	adds	r7, #16
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	bd80      	pop	{r7, pc}

0801bc10 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801bc10:	b580      	push	{r7, lr}
 801bc12:	b084      	sub	sp, #16
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
 801bc18:	460b      	mov	r3, r1
 801bc1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bc22:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bc24:	68fb      	ldr	r3, [r7, #12]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d019      	beq.n	801bc5e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	7a5b      	ldrb	r3, [r3, #9]
 801bc2e:	2b02      	cmp	r3, #2
 801bc30:	d108      	bne.n	801bc44 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bc32:	2181      	movs	r1, #129	; 0x81
 801bc34:	6878      	ldr	r0, [r7, #4]
 801bc36:	f7fd ffdd 	bl	8019bf4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bc3a:	2101      	movs	r1, #1
 801bc3c:	6878      	ldr	r0, [r7, #4]
 801bc3e:	f7fd ffd9 	bl	8019bf4 <USBD_LL_StallEP>
 801bc42:	e00f      	b.n	801bc64 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801bc44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	da0a      	bge.n	801bc62 <MSC_BOT_CplClrFeature+0x52>
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	7a5b      	ldrb	r3, [r3, #9]
 801bc50:	2b01      	cmp	r3, #1
 801bc52:	d006      	beq.n	801bc62 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801bc54:	2101      	movs	r1, #1
 801bc56:	6878      	ldr	r0, [r7, #4]
 801bc58:	f7ff ff78 	bl	801bb4c <MSC_BOT_SendCSW>
 801bc5c:	e002      	b.n	801bc64 <MSC_BOT_CplClrFeature+0x54>
    return;
 801bc5e:	bf00      	nop
 801bc60:	e000      	b.n	801bc64 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801bc62:	bf00      	nop
  }
}
 801bc64:	3710      	adds	r7, #16
 801bc66:	46bd      	mov	sp, r7
 801bc68:	bd80      	pop	{r7, pc}
	...

0801bc6c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b086      	sub	sp, #24
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	60f8      	str	r0, [r7, #12]
 801bc74:	460b      	mov	r3, r1
 801bc76:	607a      	str	r2, [r7, #4]
 801bc78:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bc80:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801bc82:	693b      	ldr	r3, [r7, #16]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d102      	bne.n	801bc8e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801bc88:	f04f 33ff 	mov.w	r3, #4294967295
 801bc8c:	e168      	b.n	801bf60 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	781b      	ldrb	r3, [r3, #0]
 801bc92:	2baa      	cmp	r3, #170	; 0xaa
 801bc94:	f000 8144 	beq.w	801bf20 <SCSI_ProcessCmd+0x2b4>
 801bc98:	2baa      	cmp	r3, #170	; 0xaa
 801bc9a:	f300 8153 	bgt.w	801bf44 <SCSI_ProcessCmd+0x2d8>
 801bc9e:	2ba8      	cmp	r3, #168	; 0xa8
 801bca0:	f000 812c 	beq.w	801befc <SCSI_ProcessCmd+0x290>
 801bca4:	2ba8      	cmp	r3, #168	; 0xa8
 801bca6:	f300 814d 	bgt.w	801bf44 <SCSI_ProcessCmd+0x2d8>
 801bcaa:	2b5a      	cmp	r3, #90	; 0x5a
 801bcac:	f300 80c0 	bgt.w	801be30 <SCSI_ProcessCmd+0x1c4>
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	f2c0 8147 	blt.w	801bf44 <SCSI_ProcessCmd+0x2d8>
 801bcb6:	2b5a      	cmp	r3, #90	; 0x5a
 801bcb8:	f200 8144 	bhi.w	801bf44 <SCSI_ProcessCmd+0x2d8>
 801bcbc:	a201      	add	r2, pc, #4	; (adr r2, 801bcc4 <SCSI_ProcessCmd+0x58>)
 801bcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcc2:	bf00      	nop
 801bcc4:	0801be37 	.word	0x0801be37
 801bcc8:	0801bf45 	.word	0x0801bf45
 801bccc:	0801bf45 	.word	0x0801bf45
 801bcd0:	0801be49 	.word	0x0801be49
 801bcd4:	0801bf45 	.word	0x0801bf45
 801bcd8:	0801bf45 	.word	0x0801bf45
 801bcdc:	0801bf45 	.word	0x0801bf45
 801bce0:	0801bf45 	.word	0x0801bf45
 801bce4:	0801bf45 	.word	0x0801bf45
 801bce8:	0801bf45 	.word	0x0801bf45
 801bcec:	0801bf45 	.word	0x0801bf45
 801bcf0:	0801bf45 	.word	0x0801bf45
 801bcf4:	0801bf45 	.word	0x0801bf45
 801bcf8:	0801bf45 	.word	0x0801bf45
 801bcfc:	0801bf45 	.word	0x0801bf45
 801bd00:	0801bf45 	.word	0x0801bf45
 801bd04:	0801bf45 	.word	0x0801bf45
 801bd08:	0801bf45 	.word	0x0801bf45
 801bd0c:	0801be5b 	.word	0x0801be5b
 801bd10:	0801bf45 	.word	0x0801bf45
 801bd14:	0801bf45 	.word	0x0801bf45
 801bd18:	0801bf45 	.word	0x0801bf45
 801bd1c:	0801bf45 	.word	0x0801bf45
 801bd20:	0801bf45 	.word	0x0801bf45
 801bd24:	0801bf45 	.word	0x0801bf45
 801bd28:	0801bf45 	.word	0x0801bf45
 801bd2c:	0801be91 	.word	0x0801be91
 801bd30:	0801be6d 	.word	0x0801be6d
 801bd34:	0801bf45 	.word	0x0801bf45
 801bd38:	0801bf45 	.word	0x0801bf45
 801bd3c:	0801be7f 	.word	0x0801be7f
 801bd40:	0801bf45 	.word	0x0801bf45
 801bd44:	0801bf45 	.word	0x0801bf45
 801bd48:	0801bf45 	.word	0x0801bf45
 801bd4c:	0801bf45 	.word	0x0801bf45
 801bd50:	0801beb5 	.word	0x0801beb5
 801bd54:	0801bf45 	.word	0x0801bf45
 801bd58:	0801bec7 	.word	0x0801bec7
 801bd5c:	0801bf45 	.word	0x0801bf45
 801bd60:	0801bf45 	.word	0x0801bf45
 801bd64:	0801beeb 	.word	0x0801beeb
 801bd68:	0801bf45 	.word	0x0801bf45
 801bd6c:	0801bf0f 	.word	0x0801bf0f
 801bd70:	0801bf45 	.word	0x0801bf45
 801bd74:	0801bf45 	.word	0x0801bf45
 801bd78:	0801bf45 	.word	0x0801bf45
 801bd7c:	0801bf45 	.word	0x0801bf45
 801bd80:	0801bf33 	.word	0x0801bf33
 801bd84:	0801bf45 	.word	0x0801bf45
 801bd88:	0801bf45 	.word	0x0801bf45
 801bd8c:	0801bf45 	.word	0x0801bf45
 801bd90:	0801bf45 	.word	0x0801bf45
 801bd94:	0801bf45 	.word	0x0801bf45
 801bd98:	0801bf45 	.word	0x0801bf45
 801bd9c:	0801bf45 	.word	0x0801bf45
 801bda0:	0801bf45 	.word	0x0801bf45
 801bda4:	0801bf45 	.word	0x0801bf45
 801bda8:	0801bf45 	.word	0x0801bf45
 801bdac:	0801bf45 	.word	0x0801bf45
 801bdb0:	0801bf45 	.word	0x0801bf45
 801bdb4:	0801bf45 	.word	0x0801bf45
 801bdb8:	0801bf45 	.word	0x0801bf45
 801bdbc:	0801bf45 	.word	0x0801bf45
 801bdc0:	0801bf45 	.word	0x0801bf45
 801bdc4:	0801bf45 	.word	0x0801bf45
 801bdc8:	0801bf45 	.word	0x0801bf45
 801bdcc:	0801bf45 	.word	0x0801bf45
 801bdd0:	0801bf45 	.word	0x0801bf45
 801bdd4:	0801bf45 	.word	0x0801bf45
 801bdd8:	0801bf45 	.word	0x0801bf45
 801bddc:	0801bf45 	.word	0x0801bf45
 801bde0:	0801bf45 	.word	0x0801bf45
 801bde4:	0801bf45 	.word	0x0801bf45
 801bde8:	0801bf45 	.word	0x0801bf45
 801bdec:	0801bf45 	.word	0x0801bf45
 801bdf0:	0801bf45 	.word	0x0801bf45
 801bdf4:	0801bf45 	.word	0x0801bf45
 801bdf8:	0801bf45 	.word	0x0801bf45
 801bdfc:	0801bf45 	.word	0x0801bf45
 801be00:	0801bf45 	.word	0x0801bf45
 801be04:	0801bf45 	.word	0x0801bf45
 801be08:	0801bf45 	.word	0x0801bf45
 801be0c:	0801bf45 	.word	0x0801bf45
 801be10:	0801bf45 	.word	0x0801bf45
 801be14:	0801bf45 	.word	0x0801bf45
 801be18:	0801bf45 	.word	0x0801bf45
 801be1c:	0801bf45 	.word	0x0801bf45
 801be20:	0801bf45 	.word	0x0801bf45
 801be24:	0801bf45 	.word	0x0801bf45
 801be28:	0801bf45 	.word	0x0801bf45
 801be2c:	0801bea3 	.word	0x0801bea3
 801be30:	2b9e      	cmp	r3, #158	; 0x9e
 801be32:	d051      	beq.n	801bed8 <SCSI_ProcessCmd+0x26c>
 801be34:	e086      	b.n	801bf44 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801be36:	7afb      	ldrb	r3, [r7, #11]
 801be38:	687a      	ldr	r2, [r7, #4]
 801be3a:	4619      	mov	r1, r3
 801be3c:	68f8      	ldr	r0, [r7, #12]
 801be3e:	f000 f893 	bl	801bf68 <SCSI_TestUnitReady>
 801be42:	4603      	mov	r3, r0
 801be44:	75fb      	strb	r3, [r7, #23]
      break;
 801be46:	e089      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801be48:	7afb      	ldrb	r3, [r7, #11]
 801be4a:	687a      	ldr	r2, [r7, #4]
 801be4c:	4619      	mov	r1, r3
 801be4e:	68f8      	ldr	r0, [r7, #12]
 801be50:	f000 fb38 	bl	801c4c4 <SCSI_RequestSense>
 801be54:	4603      	mov	r3, r0
 801be56:	75fb      	strb	r3, [r7, #23]
      break;
 801be58:	e080      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801be5a:	7afb      	ldrb	r3, [r7, #11]
 801be5c:	687a      	ldr	r2, [r7, #4]
 801be5e:	4619      	mov	r1, r3
 801be60:	68f8      	ldr	r0, [r7, #12]
 801be62:	f000 f8d1 	bl	801c008 <SCSI_Inquiry>
 801be66:	4603      	mov	r3, r0
 801be68:	75fb      	strb	r3, [r7, #23]
      break;
 801be6a:	e077      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801be6c:	7afb      	ldrb	r3, [r7, #11]
 801be6e:	687a      	ldr	r2, [r7, #4]
 801be70:	4619      	mov	r1, r3
 801be72:	68f8      	ldr	r0, [r7, #12]
 801be74:	f000 fbec 	bl	801c650 <SCSI_StartStopUnit>
 801be78:	4603      	mov	r3, r0
 801be7a:	75fb      	strb	r3, [r7, #23]
      break;
 801be7c:	e06e      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801be7e:	7afb      	ldrb	r3, [r7, #11]
 801be80:	687a      	ldr	r2, [r7, #4]
 801be82:	4619      	mov	r1, r3
 801be84:	68f8      	ldr	r0, [r7, #12]
 801be86:	f000 fc34 	bl	801c6f2 <SCSI_AllowPreventRemovable>
 801be8a:	4603      	mov	r3, r0
 801be8c:	75fb      	strb	r3, [r7, #23]
      break;
 801be8e:	e065      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801be90:	7afb      	ldrb	r3, [r7, #11]
 801be92:	687a      	ldr	r2, [r7, #4]
 801be94:	4619      	mov	r1, r3
 801be96:	68f8      	ldr	r0, [r7, #12]
 801be98:	f000 fabc 	bl	801c414 <SCSI_ModeSense6>
 801be9c:	4603      	mov	r3, r0
 801be9e:	75fb      	strb	r3, [r7, #23]
      break;
 801bea0:	e05c      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801bea2:	7afb      	ldrb	r3, [r7, #11]
 801bea4:	687a      	ldr	r2, [r7, #4]
 801bea6:	4619      	mov	r1, r3
 801bea8:	68f8      	ldr	r0, [r7, #12]
 801beaa:	f000 fadf 	bl	801c46c <SCSI_ModeSense10>
 801beae:	4603      	mov	r3, r0
 801beb0:	75fb      	strb	r3, [r7, #23]
      break;
 801beb2:	e053      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801beb4:	7afb      	ldrb	r3, [r7, #11]
 801beb6:	687a      	ldr	r2, [r7, #4]
 801beb8:	4619      	mov	r1, r3
 801beba:	68f8      	ldr	r0, [r7, #12]
 801bebc:	f000 fa37 	bl	801c32e <SCSI_ReadFormatCapacity>
 801bec0:	4603      	mov	r3, r0
 801bec2:	75fb      	strb	r3, [r7, #23]
      break;
 801bec4:	e04a      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801bec6:	7afb      	ldrb	r3, [r7, #11]
 801bec8:	687a      	ldr	r2, [r7, #4]
 801beca:	4619      	mov	r1, r3
 801becc:	68f8      	ldr	r0, [r7, #12]
 801bece:	f000 f90f 	bl	801c0f0 <SCSI_ReadCapacity10>
 801bed2:	4603      	mov	r3, r0
 801bed4:	75fb      	strb	r3, [r7, #23]
      break;
 801bed6:	e041      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801bed8:	7afb      	ldrb	r3, [r7, #11]
 801beda:	687a      	ldr	r2, [r7, #4]
 801bedc:	4619      	mov	r1, r3
 801bede:	68f8      	ldr	r0, [r7, #12]
 801bee0:	f000 f97b 	bl	801c1da <SCSI_ReadCapacity16>
 801bee4:	4603      	mov	r3, r0
 801bee6:	75fb      	strb	r3, [r7, #23]
      break;
 801bee8:	e038      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801beea:	7afb      	ldrb	r3, [r7, #11]
 801beec:	687a      	ldr	r2, [r7, #4]
 801beee:	4619      	mov	r1, r3
 801bef0:	68f8      	ldr	r0, [r7, #12]
 801bef2:	f000 fc27 	bl	801c744 <SCSI_Read10>
 801bef6:	4603      	mov	r3, r0
 801bef8:	75fb      	strb	r3, [r7, #23]
      break;
 801befa:	e02f      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801befc:	7afb      	ldrb	r3, [r7, #11]
 801befe:	687a      	ldr	r2, [r7, #4]
 801bf00:	4619      	mov	r1, r3
 801bf02:	68f8      	ldr	r0, [r7, #12]
 801bf04:	f000 fcbe 	bl	801c884 <SCSI_Read12>
 801bf08:	4603      	mov	r3, r0
 801bf0a:	75fb      	strb	r3, [r7, #23]
      break;
 801bf0c:	e026      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801bf0e:	7afb      	ldrb	r3, [r7, #11]
 801bf10:	687a      	ldr	r2, [r7, #4]
 801bf12:	4619      	mov	r1, r3
 801bf14:	68f8      	ldr	r0, [r7, #12]
 801bf16:	f000 fd60 	bl	801c9da <SCSI_Write10>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	75fb      	strb	r3, [r7, #23]
      break;
 801bf1e:	e01d      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801bf20:	7afb      	ldrb	r3, [r7, #11]
 801bf22:	687a      	ldr	r2, [r7, #4]
 801bf24:	4619      	mov	r1, r3
 801bf26:	68f8      	ldr	r0, [r7, #12]
 801bf28:	f000 fe1c 	bl	801cb64 <SCSI_Write12>
 801bf2c:	4603      	mov	r3, r0
 801bf2e:	75fb      	strb	r3, [r7, #23]
      break;
 801bf30:	e014      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801bf32:	7afb      	ldrb	r3, [r7, #11]
 801bf34:	687a      	ldr	r2, [r7, #4]
 801bf36:	4619      	mov	r1, r3
 801bf38:	68f8      	ldr	r0, [r7, #12]
 801bf3a:	f000 fee8 	bl	801cd0e <SCSI_Verify10>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	75fb      	strb	r3, [r7, #23]
      break;
 801bf42:	e00b      	b.n	801bf5c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801bf44:	7af9      	ldrb	r1, [r7, #11]
 801bf46:	2320      	movs	r3, #32
 801bf48:	2205      	movs	r2, #5
 801bf4a:	68f8      	ldr	r0, [r7, #12]
 801bf4c:	f000 fb39 	bl	801c5c2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801bf50:	693b      	ldr	r3, [r7, #16]
 801bf52:	2202      	movs	r2, #2
 801bf54:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801bf56:	23ff      	movs	r3, #255	; 0xff
 801bf58:	75fb      	strb	r3, [r7, #23]
      break;
 801bf5a:	bf00      	nop
  }

  return ret;
 801bf5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bf60:	4618      	mov	r0, r3
 801bf62:	3718      	adds	r7, #24
 801bf64:	46bd      	mov	sp, r7
 801bf66:	bd80      	pop	{r7, pc}

0801bf68 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	b086      	sub	sp, #24
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	60f8      	str	r0, [r7, #12]
 801bf70:	460b      	mov	r3, r1
 801bf72:	607a      	str	r2, [r7, #4]
 801bf74:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bf7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d102      	bne.n	801bf8a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801bf84:	f04f 33ff 	mov.w	r3, #4294967295
 801bf88:	e03a      	b.n	801c000 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801bf8a:	697b      	ldr	r3, [r7, #20]
 801bf8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d00a      	beq.n	801bfaa <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801bf94:	697b      	ldr	r3, [r7, #20]
 801bf96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bf9a:	2320      	movs	r3, #32
 801bf9c:	2205      	movs	r2, #5
 801bf9e:	68f8      	ldr	r0, [r7, #12]
 801bfa0:	f000 fb0f 	bl	801c5c2 <SCSI_SenseCode>

    return -1;
 801bfa4:	f04f 33ff 	mov.w	r3, #4294967295
 801bfa8:	e02a      	b.n	801c000 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801bfaa:	697b      	ldr	r3, [r7, #20]
 801bfac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801bfb0:	2b02      	cmp	r3, #2
 801bfb2:	d10b      	bne.n	801bfcc <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bfb4:	7af9      	ldrb	r1, [r7, #11]
 801bfb6:	233a      	movs	r3, #58	; 0x3a
 801bfb8:	2202      	movs	r2, #2
 801bfba:	68f8      	ldr	r0, [r7, #12]
 801bfbc:	f000 fb01 	bl	801c5c2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801bfc0:	697b      	ldr	r3, [r7, #20]
 801bfc2:	2205      	movs	r2, #5
 801bfc4:	721a      	strb	r2, [r3, #8]
    return -1;
 801bfc6:	f04f 33ff 	mov.w	r3, #4294967295
 801bfca:	e019      	b.n	801c000 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bfd2:	689b      	ldr	r3, [r3, #8]
 801bfd4:	7afa      	ldrb	r2, [r7, #11]
 801bfd6:	4610      	mov	r0, r2
 801bfd8:	4798      	blx	r3
 801bfda:	4603      	mov	r3, r0
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d00b      	beq.n	801bff8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bfe0:	7af9      	ldrb	r1, [r7, #11]
 801bfe2:	233a      	movs	r3, #58	; 0x3a
 801bfe4:	2202      	movs	r2, #2
 801bfe6:	68f8      	ldr	r0, [r7, #12]
 801bfe8:	f000 faeb 	bl	801c5c2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801bfec:	697b      	ldr	r3, [r7, #20]
 801bfee:	2205      	movs	r2, #5
 801bff0:	721a      	strb	r2, [r3, #8]

    return -1;
 801bff2:	f04f 33ff 	mov.w	r3, #4294967295
 801bff6:	e003      	b.n	801c000 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801bff8:	697b      	ldr	r3, [r7, #20]
 801bffa:	2200      	movs	r2, #0
 801bffc:	60da      	str	r2, [r3, #12]

  return 0;
 801bffe:	2300      	movs	r3, #0
}
 801c000:	4618      	mov	r0, r3
 801c002:	3718      	adds	r7, #24
 801c004:	46bd      	mov	sp, r7
 801c006:	bd80      	pop	{r7, pc}

0801c008 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b088      	sub	sp, #32
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	60f8      	str	r0, [r7, #12]
 801c010:	460b      	mov	r3, r1
 801c012:	607a      	str	r2, [r7, #4]
 801c014:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c01c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c01e:	69bb      	ldr	r3, [r7, #24]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d102      	bne.n	801c02a <SCSI_Inquiry+0x22>
  {
    return -1;
 801c024:	f04f 33ff 	mov.w	r3, #4294967295
 801c028:	e05a      	b.n	801c0e0 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c02a:	69bb      	ldr	r3, [r7, #24]
 801c02c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c030:	2b00      	cmp	r3, #0
 801c032:	d10a      	bne.n	801c04a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c034:	69bb      	ldr	r3, [r7, #24]
 801c036:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c03a:	2320      	movs	r3, #32
 801c03c:	2205      	movs	r2, #5
 801c03e:	68f8      	ldr	r0, [r7, #12]
 801c040:	f000 fabf 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801c044:	f04f 33ff 	mov.w	r3, #4294967295
 801c048:	e04a      	b.n	801c0e0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	3301      	adds	r3, #1
 801c04e:	781b      	ldrb	r3, [r3, #0]
 801c050:	f003 0301 	and.w	r3, r3, #1
 801c054:	2b00      	cmp	r3, #0
 801c056:	d020      	beq.n	801c09a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	3302      	adds	r3, #2
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d105      	bne.n	801c06e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801c062:	2206      	movs	r2, #6
 801c064:	4920      	ldr	r1, [pc, #128]	; (801c0e8 <SCSI_Inquiry+0xe0>)
 801c066:	69b8      	ldr	r0, [r7, #24]
 801c068:	f000 ffb4 	bl	801cfd4 <SCSI_UpdateBotData>
 801c06c:	e037      	b.n	801c0de <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	3302      	adds	r3, #2
 801c072:	781b      	ldrb	r3, [r3, #0]
 801c074:	2b80      	cmp	r3, #128	; 0x80
 801c076:	d105      	bne.n	801c084 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801c078:	2208      	movs	r2, #8
 801c07a:	491c      	ldr	r1, [pc, #112]	; (801c0ec <SCSI_Inquiry+0xe4>)
 801c07c:	69b8      	ldr	r0, [r7, #24]
 801c07e:	f000 ffa9 	bl	801cfd4 <SCSI_UpdateBotData>
 801c082:	e02c      	b.n	801c0de <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801c084:	69bb      	ldr	r3, [r7, #24]
 801c086:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c08a:	2324      	movs	r3, #36	; 0x24
 801c08c:	2205      	movs	r2, #5
 801c08e:	68f8      	ldr	r0, [r7, #12]
 801c090:	f000 fa97 	bl	801c5c2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801c094:	f04f 33ff 	mov.w	r3, #4294967295
 801c098:	e022      	b.n	801c0e0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserDataMSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c0a0:	69d9      	ldr	r1, [r3, #28]
 801c0a2:	7afa      	ldrb	r2, [r7, #11]
 801c0a4:	4613      	mov	r3, r2
 801c0a6:	00db      	lsls	r3, r3, #3
 801c0a8:	4413      	add	r3, r2
 801c0aa:	009b      	lsls	r3, r3, #2
 801c0ac:	440b      	add	r3, r1
 801c0ae:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801c0b0:	697b      	ldr	r3, [r7, #20]
 801c0b2:	3304      	adds	r3, #4
 801c0b4:	781b      	ldrb	r3, [r3, #0]
 801c0b6:	b29b      	uxth	r3, r3
 801c0b8:	3305      	adds	r3, #5
 801c0ba:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	3304      	adds	r3, #4
 801c0c0:	781b      	ldrb	r3, [r3, #0]
 801c0c2:	b29b      	uxth	r3, r3
 801c0c4:	8bfa      	ldrh	r2, [r7, #30]
 801c0c6:	429a      	cmp	r2, r3
 801c0c8:	d303      	bcc.n	801c0d2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	3304      	adds	r3, #4
 801c0ce:	781b      	ldrb	r3, [r3, #0]
 801c0d0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801c0d2:	8bfb      	ldrh	r3, [r7, #30]
 801c0d4:	461a      	mov	r2, r3
 801c0d6:	6979      	ldr	r1, [r7, #20]
 801c0d8:	69b8      	ldr	r0, [r7, #24]
 801c0da:	f000 ff7b 	bl	801cfd4 <SCSI_UpdateBotData>
  }

  return 0;
 801c0de:	2300      	movs	r3, #0
}
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	3720      	adds	r7, #32
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	bd80      	pop	{r7, pc}
 801c0e8:	20000688 	.word	0x20000688
 801c0ec:	20000690 	.word	0x20000690

0801c0f0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b086      	sub	sp, #24
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	60f8      	str	r0, [r7, #12]
 801c0f8:	460b      	mov	r3, r1
 801c0fa:	607a      	str	r2, [r7, #4]
 801c0fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c104:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c106:	697b      	ldr	r3, [r7, #20]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d102      	bne.n	801c112 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801c10c:	f04f 33ff 	mov.w	r3, #4294967295
 801c110:	e05f      	b.n	801c1d2 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c118:	685b      	ldr	r3, [r3, #4]
 801c11a:	697a      	ldr	r2, [r7, #20]
 801c11c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c120:	697a      	ldr	r2, [r7, #20]
 801c122:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c126:	7af8      	ldrb	r0, [r7, #11]
 801c128:	4798      	blx	r3
 801c12a:	4603      	mov	r3, r0
 801c12c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c12e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d104      	bne.n	801c140 <SCSI_ReadCapacity10+0x50>
 801c136:	697b      	ldr	r3, [r7, #20]
 801c138:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c13c:	2b02      	cmp	r3, #2
 801c13e:	d108      	bne.n	801c152 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c140:	7af9      	ldrb	r1, [r7, #11]
 801c142:	233a      	movs	r3, #58	; 0x3a
 801c144:	2202      	movs	r2, #2
 801c146:	68f8      	ldr	r0, [r7, #12]
 801c148:	f000 fa3b 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801c14c:	f04f 33ff 	mov.w	r3, #4294967295
 801c150:	e03f      	b.n	801c1d2 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c152:	697b      	ldr	r3, [r7, #20]
 801c154:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c158:	3b01      	subs	r3, #1
 801c15a:	0e1b      	lsrs	r3, r3, #24
 801c15c:	b2da      	uxtb	r2, r3
 801c15e:	697b      	ldr	r3, [r7, #20]
 801c160:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c162:	697b      	ldr	r3, [r7, #20]
 801c164:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c168:	3b01      	subs	r3, #1
 801c16a:	0c1b      	lsrs	r3, r3, #16
 801c16c:	b2da      	uxtb	r2, r3
 801c16e:	697b      	ldr	r3, [r7, #20]
 801c170:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c178:	3b01      	subs	r3, #1
 801c17a:	0a1b      	lsrs	r3, r3, #8
 801c17c:	b2da      	uxtb	r2, r3
 801c17e:	697b      	ldr	r3, [r7, #20]
 801c180:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c182:	697b      	ldr	r3, [r7, #20]
 801c184:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c188:	b2db      	uxtb	r3, r3
 801c18a:	3b01      	subs	r3, #1
 801c18c:	b2da      	uxtb	r2, r3
 801c18e:	697b      	ldr	r3, [r7, #20]
 801c190:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c192:	697b      	ldr	r3, [r7, #20]
 801c194:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c198:	161b      	asrs	r3, r3, #24
 801c19a:	b2da      	uxtb	r2, r3
 801c19c:	697b      	ldr	r3, [r7, #20]
 801c19e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c1a0:	697b      	ldr	r3, [r7, #20]
 801c1a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c1a6:	141b      	asrs	r3, r3, #16
 801c1a8:	b2da      	uxtb	r2, r3
 801c1aa:	697b      	ldr	r3, [r7, #20]
 801c1ac:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c1ae:	697b      	ldr	r3, [r7, #20]
 801c1b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c1b4:	0a1b      	lsrs	r3, r3, #8
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	b2da      	uxtb	r2, r3
 801c1ba:	697b      	ldr	r3, [r7, #20]
 801c1bc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801c1be:	697b      	ldr	r3, [r7, #20]
 801c1c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c1c4:	b2da      	uxtb	r2, r3
 801c1c6:	697b      	ldr	r3, [r7, #20]
 801c1c8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801c1ca:	697b      	ldr	r3, [r7, #20]
 801c1cc:	2208      	movs	r2, #8
 801c1ce:	60da      	str	r2, [r3, #12]

  return 0;
 801c1d0:	2300      	movs	r3, #0

}
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	3718      	adds	r7, #24
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd80      	pop	{r7, pc}

0801c1da <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c1da:	b580      	push	{r7, lr}
 801c1dc:	b088      	sub	sp, #32
 801c1de:	af00      	add	r7, sp, #0
 801c1e0:	60f8      	str	r0, [r7, #12]
 801c1e2:	460b      	mov	r3, r1
 801c1e4:	607a      	str	r2, [r7, #4]
 801c1e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c1ee:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c1f0:	69bb      	ldr	r3, [r7, #24]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d102      	bne.n	801c1fc <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801c1f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c1fa:	e094      	b.n	801c326 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c202:	685b      	ldr	r3, [r3, #4]
 801c204:	69ba      	ldr	r2, [r7, #24]
 801c206:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c20a:	69ba      	ldr	r2, [r7, #24]
 801c20c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c210:	7af8      	ldrb	r0, [r7, #11]
 801c212:	4798      	blx	r3
 801c214:	4603      	mov	r3, r0
 801c216:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d104      	bne.n	801c22a <SCSI_ReadCapacity16+0x50>
 801c220:	69bb      	ldr	r3, [r7, #24]
 801c222:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c226:	2b02      	cmp	r3, #2
 801c228:	d108      	bne.n	801c23c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c22a:	7af9      	ldrb	r1, [r7, #11]
 801c22c:	233a      	movs	r3, #58	; 0x3a
 801c22e:	2202      	movs	r2, #2
 801c230:	68f8      	ldr	r0, [r7, #12]
 801c232:	f000 f9c6 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801c236:	f04f 33ff 	mov.w	r3, #4294967295
 801c23a:	e074      	b.n	801c326 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	330a      	adds	r3, #10
 801c240:	781b      	ldrb	r3, [r3, #0]
 801c242:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	330b      	adds	r3, #11
 801c248:	781b      	ldrb	r3, [r3, #0]
 801c24a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c24c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	330c      	adds	r3, #12
 801c252:	781b      	ldrb	r3, [r3, #0]
 801c254:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c256:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c258:	687a      	ldr	r2, [r7, #4]
 801c25a:	320d      	adds	r2, #13
 801c25c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c25e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c260:	69bb      	ldr	r3, [r7, #24]
 801c262:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c264:	2300      	movs	r3, #0
 801c266:	77fb      	strb	r3, [r7, #31]
 801c268:	e007      	b.n	801c27a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801c26a:	7ffb      	ldrb	r3, [r7, #31]
 801c26c:	69ba      	ldr	r2, [r7, #24]
 801c26e:	4413      	add	r3, r2
 801c270:	2200      	movs	r2, #0
 801c272:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c274:	7ffb      	ldrb	r3, [r7, #31]
 801c276:	3301      	adds	r3, #1
 801c278:	77fb      	strb	r3, [r7, #31]
 801c27a:	7ffa      	ldrb	r2, [r7, #31]
 801c27c:	69bb      	ldr	r3, [r7, #24]
 801c27e:	68db      	ldr	r3, [r3, #12]
 801c280:	429a      	cmp	r2, r3
 801c282:	d3f2      	bcc.n	801c26a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c284:	69bb      	ldr	r3, [r7, #24]
 801c286:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c28a:	3b01      	subs	r3, #1
 801c28c:	0e1b      	lsrs	r3, r3, #24
 801c28e:	b2da      	uxtb	r2, r3
 801c290:	69bb      	ldr	r3, [r7, #24]
 801c292:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c294:	69bb      	ldr	r3, [r7, #24]
 801c296:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c29a:	3b01      	subs	r3, #1
 801c29c:	0c1b      	lsrs	r3, r3, #16
 801c29e:	b2da      	uxtb	r2, r3
 801c2a0:	69bb      	ldr	r3, [r7, #24]
 801c2a2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c2a4:	69bb      	ldr	r3, [r7, #24]
 801c2a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c2aa:	3b01      	subs	r3, #1
 801c2ac:	0a1b      	lsrs	r3, r3, #8
 801c2ae:	b2da      	uxtb	r2, r3
 801c2b0:	69bb      	ldr	r3, [r7, #24]
 801c2b2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c2b4:	69bb      	ldr	r3, [r7, #24]
 801c2b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c2ba:	b2db      	uxtb	r3, r3
 801c2bc:	3b01      	subs	r3, #1
 801c2be:	b2da      	uxtb	r2, r3
 801c2c0:	69bb      	ldr	r3, [r7, #24]
 801c2c2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c2c4:	69bb      	ldr	r3, [r7, #24]
 801c2c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c2ca:	161b      	asrs	r3, r3, #24
 801c2cc:	b2da      	uxtb	r2, r3
 801c2ce:	69bb      	ldr	r3, [r7, #24]
 801c2d0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c2d2:	69bb      	ldr	r3, [r7, #24]
 801c2d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c2d8:	141b      	asrs	r3, r3, #16
 801c2da:	b2da      	uxtb	r2, r3
 801c2dc:	69bb      	ldr	r3, [r7, #24]
 801c2de:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c2e0:	69bb      	ldr	r3, [r7, #24]
 801c2e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c2e6:	0a1b      	lsrs	r3, r3, #8
 801c2e8:	b29b      	uxth	r3, r3
 801c2ea:	b2da      	uxtb	r2, r3
 801c2ec:	69bb      	ldr	r3, [r7, #24]
 801c2ee:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801c2f0:	69bb      	ldr	r3, [r7, #24]
 801c2f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c2f6:	b2da      	uxtb	r2, r3
 801c2f8:	69bb      	ldr	r3, [r7, #24]
 801c2fa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	330a      	adds	r3, #10
 801c300:	781b      	ldrb	r3, [r3, #0]
 801c302:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	330b      	adds	r3, #11
 801c308:	781b      	ldrb	r3, [r3, #0]
 801c30a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c30c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	330c      	adds	r3, #12
 801c312:	781b      	ldrb	r3, [r3, #0]
 801c314:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c316:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c318:	687a      	ldr	r2, [r7, #4]
 801c31a:	320d      	adds	r2, #13
 801c31c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c31e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c320:	69bb      	ldr	r3, [r7, #24]
 801c322:	60da      	str	r2, [r3, #12]

  return 0;
 801c324:	2300      	movs	r3, #0
}
 801c326:	4618      	mov	r0, r3
 801c328:	3720      	adds	r7, #32
 801c32a:	46bd      	mov	sp, r7
 801c32c:	bd80      	pop	{r7, pc}

0801c32e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c32e:	b580      	push	{r7, lr}
 801c330:	b088      	sub	sp, #32
 801c332:	af00      	add	r7, sp, #0
 801c334:	60f8      	str	r0, [r7, #12]
 801c336:	460b      	mov	r3, r1
 801c338:	607a      	str	r2, [r7, #4]
 801c33a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c342:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c344:	69bb      	ldr	r3, [r7, #24]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d102      	bne.n	801c350 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801c34a:	f04f 33ff 	mov.w	r3, #4294967295
 801c34e:	e05c      	b.n	801c40a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c356:	685b      	ldr	r3, [r3, #4]
 801c358:	f107 0214 	add.w	r2, r7, #20
 801c35c:	f107 0110 	add.w	r1, r7, #16
 801c360:	7af8      	ldrb	r0, [r7, #11]
 801c362:	4798      	blx	r3
 801c364:	4603      	mov	r3, r0
 801c366:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d104      	bne.n	801c37a <SCSI_ReadFormatCapacity+0x4c>
 801c370:	69bb      	ldr	r3, [r7, #24]
 801c372:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c376:	2b02      	cmp	r3, #2
 801c378:	d108      	bne.n	801c38c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c37a:	7af9      	ldrb	r1, [r7, #11]
 801c37c:	233a      	movs	r3, #58	; 0x3a
 801c37e:	2202      	movs	r2, #2
 801c380:	68f8      	ldr	r0, [r7, #12]
 801c382:	f000 f91e 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801c386:	f04f 33ff 	mov.w	r3, #4294967295
 801c38a:	e03e      	b.n	801c40a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 801c38c:	2300      	movs	r3, #0
 801c38e:	83fb      	strh	r3, [r7, #30]
 801c390:	e007      	b.n	801c3a2 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801c392:	8bfb      	ldrh	r3, [r7, #30]
 801c394:	69ba      	ldr	r2, [r7, #24]
 801c396:	4413      	add	r3, r2
 801c398:	2200      	movs	r2, #0
 801c39a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801c39c:	8bfb      	ldrh	r3, [r7, #30]
 801c39e:	3301      	adds	r3, #1
 801c3a0:	83fb      	strh	r3, [r7, #30]
 801c3a2:	8bfb      	ldrh	r3, [r7, #30]
 801c3a4:	2b0b      	cmp	r3, #11
 801c3a6:	d9f4      	bls.n	801c392 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 801c3a8:	69bb      	ldr	r3, [r7, #24]
 801c3aa:	2208      	movs	r2, #8
 801c3ac:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801c3ae:	693b      	ldr	r3, [r7, #16]
 801c3b0:	3b01      	subs	r3, #1
 801c3b2:	0e1b      	lsrs	r3, r3, #24
 801c3b4:	b2da      	uxtb	r2, r3
 801c3b6:	69bb      	ldr	r3, [r7, #24]
 801c3b8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801c3ba:	693b      	ldr	r3, [r7, #16]
 801c3bc:	3b01      	subs	r3, #1
 801c3be:	0c1b      	lsrs	r3, r3, #16
 801c3c0:	b2da      	uxtb	r2, r3
 801c3c2:	69bb      	ldr	r3, [r7, #24]
 801c3c4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801c3c6:	693b      	ldr	r3, [r7, #16]
 801c3c8:	3b01      	subs	r3, #1
 801c3ca:	0a1b      	lsrs	r3, r3, #8
 801c3cc:	b2da      	uxtb	r2, r3
 801c3ce:	69bb      	ldr	r3, [r7, #24]
 801c3d0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801c3d2:	693b      	ldr	r3, [r7, #16]
 801c3d4:	b2db      	uxtb	r3, r3
 801c3d6:	3b01      	subs	r3, #1
 801c3d8:	b2da      	uxtb	r2, r3
 801c3da:	69bb      	ldr	r3, [r7, #24]
 801c3dc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801c3de:	69bb      	ldr	r3, [r7, #24]
 801c3e0:	2202      	movs	r2, #2
 801c3e2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801c3e4:	8abb      	ldrh	r3, [r7, #20]
 801c3e6:	141b      	asrs	r3, r3, #16
 801c3e8:	b2da      	uxtb	r2, r3
 801c3ea:	69bb      	ldr	r3, [r7, #24]
 801c3ec:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801c3ee:	8abb      	ldrh	r3, [r7, #20]
 801c3f0:	0a1b      	lsrs	r3, r3, #8
 801c3f2:	b29b      	uxth	r3, r3
 801c3f4:	b2da      	uxtb	r2, r3
 801c3f6:	69bb      	ldr	r3, [r7, #24]
 801c3f8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801c3fa:	8abb      	ldrh	r3, [r7, #20]
 801c3fc:	b2da      	uxtb	r2, r3
 801c3fe:	69bb      	ldr	r3, [r7, #24]
 801c400:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801c402:	69bb      	ldr	r3, [r7, #24]
 801c404:	220c      	movs	r2, #12
 801c406:	60da      	str	r2, [r3, #12]

  return 0;
 801c408:	2300      	movs	r3, #0
}
 801c40a:	4618      	mov	r0, r3
 801c40c:	3720      	adds	r7, #32
 801c40e:	46bd      	mov	sp, r7
 801c410:	bd80      	pop	{r7, pc}
	...

0801c414 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b086      	sub	sp, #24
 801c418:	af00      	add	r7, sp, #0
 801c41a:	60f8      	str	r0, [r7, #12]
 801c41c:	460b      	mov	r3, r1
 801c41e:	607a      	str	r2, [r7, #4]
 801c420:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c428:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801c42a:	2317      	movs	r3, #23
 801c42c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c42e:	693b      	ldr	r3, [r7, #16]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d102      	bne.n	801c43a <SCSI_ModeSense6+0x26>
  {
    return -1;
 801c434:	f04f 33ff 	mov.w	r3, #4294967295
 801c438:	e011      	b.n	801c45e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	3304      	adds	r3, #4
 801c43e:	781b      	ldrb	r3, [r3, #0]
 801c440:	b29b      	uxth	r3, r3
 801c442:	8afa      	ldrh	r2, [r7, #22]
 801c444:	429a      	cmp	r2, r3
 801c446:	d303      	bcc.n	801c450 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	3304      	adds	r3, #4
 801c44c:	781b      	ldrb	r3, [r3, #0]
 801c44e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801c450:	8afb      	ldrh	r3, [r7, #22]
 801c452:	461a      	mov	r2, r3
 801c454:	4904      	ldr	r1, [pc, #16]	; (801c468 <SCSI_ModeSense6+0x54>)
 801c456:	6938      	ldr	r0, [r7, #16]
 801c458:	f000 fdbc 	bl	801cfd4 <SCSI_UpdateBotData>

  return 0;
 801c45c:	2300      	movs	r3, #0
}
 801c45e:	4618      	mov	r0, r3
 801c460:	3718      	adds	r7, #24
 801c462:	46bd      	mov	sp, r7
 801c464:	bd80      	pop	{r7, pc}
 801c466:	bf00      	nop
 801c468:	20000698 	.word	0x20000698

0801c46c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c46c:	b580      	push	{r7, lr}
 801c46e:	b086      	sub	sp, #24
 801c470:	af00      	add	r7, sp, #0
 801c472:	60f8      	str	r0, [r7, #12]
 801c474:	460b      	mov	r3, r1
 801c476:	607a      	str	r2, [r7, #4]
 801c478:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c480:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801c482:	231b      	movs	r3, #27
 801c484:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c486:	693b      	ldr	r3, [r7, #16]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d102      	bne.n	801c492 <SCSI_ModeSense10+0x26>
  {
    return -1;
 801c48c:	f04f 33ff 	mov.w	r3, #4294967295
 801c490:	e011      	b.n	801c4b6 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	3308      	adds	r3, #8
 801c496:	781b      	ldrb	r3, [r3, #0]
 801c498:	b29b      	uxth	r3, r3
 801c49a:	8afa      	ldrh	r2, [r7, #22]
 801c49c:	429a      	cmp	r2, r3
 801c49e:	d303      	bcc.n	801c4a8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	3308      	adds	r3, #8
 801c4a4:	781b      	ldrb	r3, [r3, #0]
 801c4a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 801c4a8:	8afb      	ldrh	r3, [r7, #22]
 801c4aa:	461a      	mov	r2, r3
 801c4ac:	4904      	ldr	r1, [pc, #16]	; (801c4c0 <SCSI_ModeSense10+0x54>)
 801c4ae:	6938      	ldr	r0, [r7, #16]
 801c4b0:	f000 fd90 	bl	801cfd4 <SCSI_UpdateBotData>

  return 0;
 801c4b4:	2300      	movs	r3, #0
}
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	3718      	adds	r7, #24
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bd80      	pop	{r7, pc}
 801c4be:	bf00      	nop
 801c4c0:	200006b0 	.word	0x200006b0

0801c4c4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b086      	sub	sp, #24
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	60f8      	str	r0, [r7, #12]
 801c4cc:	460b      	mov	r3, r1
 801c4ce:	607a      	str	r2, [r7, #4]
 801c4d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c4d8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801c4da:	693b      	ldr	r3, [r7, #16]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d102      	bne.n	801c4e6 <SCSI_RequestSense+0x22>
  {
    return -1;
 801c4e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c4e4:	e069      	b.n	801c5ba <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c4e6:	693b      	ldr	r3, [r7, #16]
 801c4e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d10a      	bne.n	801c506 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c4f0:	693b      	ldr	r3, [r7, #16]
 801c4f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c4f6:	2320      	movs	r3, #32
 801c4f8:	2205      	movs	r2, #5
 801c4fa:	68f8      	ldr	r0, [r7, #12]
 801c4fc:	f000 f861 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801c500:	f04f 33ff 	mov.w	r3, #4294967295
 801c504:	e059      	b.n	801c5ba <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c506:	2300      	movs	r3, #0
 801c508:	75fb      	strb	r3, [r7, #23]
 801c50a:	e007      	b.n	801c51c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801c50c:	7dfb      	ldrb	r3, [r7, #23]
 801c50e:	693a      	ldr	r2, [r7, #16]
 801c510:	4413      	add	r3, r2
 801c512:	2200      	movs	r2, #0
 801c514:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c516:	7dfb      	ldrb	r3, [r7, #23]
 801c518:	3301      	adds	r3, #1
 801c51a:	75fb      	strb	r3, [r7, #23]
 801c51c:	7dfb      	ldrb	r3, [r7, #23]
 801c51e:	2b11      	cmp	r3, #17
 801c520:	d9f4      	bls.n	801c50c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 801c522:	693b      	ldr	r3, [r7, #16]
 801c524:	2270      	movs	r2, #112	; 0x70
 801c526:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801c528:	693b      	ldr	r3, [r7, #16]
 801c52a:	220c      	movs	r2, #12
 801c52c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801c52e:	693b      	ldr	r3, [r7, #16]
 801c530:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801c534:	693b      	ldr	r3, [r7, #16]
 801c536:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c53a:	429a      	cmp	r2, r3
 801c53c:	d02e      	beq.n	801c59c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801c53e:	693b      	ldr	r3, [r7, #16]
 801c540:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c544:	461a      	mov	r2, r3
 801c546:	693b      	ldr	r3, [r7, #16]
 801c548:	3248      	adds	r2, #72	; 0x48
 801c54a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801c54e:	693b      	ldr	r3, [r7, #16]
 801c550:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801c552:	693b      	ldr	r3, [r7, #16]
 801c554:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c558:	693a      	ldr	r2, [r7, #16]
 801c55a:	3348      	adds	r3, #72	; 0x48
 801c55c:	00db      	lsls	r3, r3, #3
 801c55e:	4413      	add	r3, r2
 801c560:	791a      	ldrb	r2, [r3, #4]
 801c562:	693b      	ldr	r3, [r7, #16]
 801c564:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801c566:	693b      	ldr	r3, [r7, #16]
 801c568:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c56c:	693a      	ldr	r2, [r7, #16]
 801c56e:	3348      	adds	r3, #72	; 0x48
 801c570:	00db      	lsls	r3, r3, #3
 801c572:	4413      	add	r3, r2
 801c574:	795a      	ldrb	r2, [r3, #5]
 801c576:	693b      	ldr	r3, [r7, #16]
 801c578:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801c57a:	693b      	ldr	r3, [r7, #16]
 801c57c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c580:	3301      	adds	r3, #1
 801c582:	b2da      	uxtb	r2, r3
 801c584:	693b      	ldr	r3, [r7, #16]
 801c586:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801c58a:	693b      	ldr	r3, [r7, #16]
 801c58c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c590:	2b04      	cmp	r3, #4
 801c592:	d103      	bne.n	801c59c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 801c594:	693b      	ldr	r3, [r7, #16]
 801c596:	2200      	movs	r2, #0
 801c598:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801c59c:	693b      	ldr	r3, [r7, #16]
 801c59e:	2212      	movs	r2, #18
 801c5a0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	3304      	adds	r3, #4
 801c5a6:	781b      	ldrb	r3, [r3, #0]
 801c5a8:	2b12      	cmp	r3, #18
 801c5aa:	d805      	bhi.n	801c5b8 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	3304      	adds	r3, #4
 801c5b0:	781b      	ldrb	r3, [r3, #0]
 801c5b2:	461a      	mov	r2, r3
 801c5b4:	693b      	ldr	r3, [r7, #16]
 801c5b6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801c5b8:	2300      	movs	r3, #0
}
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	3718      	adds	r7, #24
 801c5be:	46bd      	mov	sp, r7
 801c5c0:	bd80      	pop	{r7, pc}

0801c5c2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801c5c2:	b480      	push	{r7}
 801c5c4:	b085      	sub	sp, #20
 801c5c6:	af00      	add	r7, sp, #0
 801c5c8:	6078      	str	r0, [r7, #4]
 801c5ca:	4608      	mov	r0, r1
 801c5cc:	4611      	mov	r1, r2
 801c5ce:	461a      	mov	r2, r3
 801c5d0:	4603      	mov	r3, r0
 801c5d2:	70fb      	strb	r3, [r7, #3]
 801c5d4:	460b      	mov	r3, r1
 801c5d6:	70bb      	strb	r3, [r7, #2]
 801c5d8:	4613      	mov	r3, r2
 801c5da:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c5e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d02c      	beq.n	801c644 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c5f0:	461a      	mov	r2, r3
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	3248      	adds	r2, #72	; 0x48
 801c5f6:	78b9      	ldrb	r1, [r7, #2]
 801c5f8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c602:	68fa      	ldr	r2, [r7, #12]
 801c604:	3348      	adds	r3, #72	; 0x48
 801c606:	00db      	lsls	r3, r3, #3
 801c608:	4413      	add	r3, r2
 801c60a:	787a      	ldrb	r2, [r7, #1]
 801c60c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c614:	68fa      	ldr	r2, [r7, #12]
 801c616:	3348      	adds	r3, #72	; 0x48
 801c618:	00db      	lsls	r3, r3, #3
 801c61a:	4413      	add	r3, r2
 801c61c:	2200      	movs	r2, #0
 801c61e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c626:	3301      	adds	r3, #1
 801c628:	b2da      	uxtb	r2, r3
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c636:	2b04      	cmp	r3, #4
 801c638:	d105      	bne.n	801c646 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	2200      	movs	r2, #0
 801c63e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801c642:	e000      	b.n	801c646 <SCSI_SenseCode+0x84>
    return;
 801c644:	bf00      	nop
  }
}
 801c646:	3714      	adds	r7, #20
 801c648:	46bd      	mov	sp, r7
 801c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c64e:	4770      	bx	lr

0801c650 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b086      	sub	sp, #24
 801c654:	af00      	add	r7, sp, #0
 801c656:	60f8      	str	r0, [r7, #12]
 801c658:	460b      	mov	r3, r1
 801c65a:	607a      	str	r2, [r7, #4]
 801c65c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c664:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c666:	697b      	ldr	r3, [r7, #20]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d102      	bne.n	801c672 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801c66c:	f04f 33ff 	mov.w	r3, #4294967295
 801c670:	e03b      	b.n	801c6ea <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801c672:	697b      	ldr	r3, [r7, #20]
 801c674:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c678:	2b01      	cmp	r3, #1
 801c67a:	d10f      	bne.n	801c69c <SCSI_StartStopUnit+0x4c>
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	3304      	adds	r3, #4
 801c680:	781b      	ldrb	r3, [r3, #0]
 801c682:	f003 0303 	and.w	r3, r3, #3
 801c686:	2b02      	cmp	r3, #2
 801c688:	d108      	bne.n	801c69c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801c68a:	7af9      	ldrb	r1, [r7, #11]
 801c68c:	2324      	movs	r3, #36	; 0x24
 801c68e:	2205      	movs	r2, #5
 801c690:	68f8      	ldr	r0, [r7, #12]
 801c692:	f7ff ff96 	bl	801c5c2 <SCSI_SenseCode>

    return -1;
 801c696:	f04f 33ff 	mov.w	r3, #4294967295
 801c69a:	e026      	b.n	801c6ea <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	3304      	adds	r3, #4
 801c6a0:	781b      	ldrb	r3, [r3, #0]
 801c6a2:	f003 0303 	and.w	r3, r3, #3
 801c6a6:	2b01      	cmp	r3, #1
 801c6a8:	d104      	bne.n	801c6b4 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c6aa:	697b      	ldr	r3, [r7, #20]
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c6b2:	e016      	b.n	801c6e2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	3304      	adds	r3, #4
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	f003 0303 	and.w	r3, r3, #3
 801c6be:	2b02      	cmp	r3, #2
 801c6c0:	d104      	bne.n	801c6cc <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	2202      	movs	r2, #2
 801c6c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c6ca:	e00a      	b.n	801c6e2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	3304      	adds	r3, #4
 801c6d0:	781b      	ldrb	r3, [r3, #0]
 801c6d2:	f003 0303 	and.w	r3, r3, #3
 801c6d6:	2b03      	cmp	r3, #3
 801c6d8:	d103      	bne.n	801c6e2 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	2200      	movs	r2, #0
 801c6de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801c6e2:	697b      	ldr	r3, [r7, #20]
 801c6e4:	2200      	movs	r2, #0
 801c6e6:	60da      	str	r2, [r3, #12]

  return 0;
 801c6e8:	2300      	movs	r3, #0
}
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	3718      	adds	r7, #24
 801c6ee:	46bd      	mov	sp, r7
 801c6f0:	bd80      	pop	{r7, pc}

0801c6f2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c6f2:	b480      	push	{r7}
 801c6f4:	b087      	sub	sp, #28
 801c6f6:	af00      	add	r7, sp, #0
 801c6f8:	60f8      	str	r0, [r7, #12]
 801c6fa:	460b      	mov	r3, r1
 801c6fc:	607a      	str	r2, [r7, #4]
 801c6fe:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c706:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c708:	697b      	ldr	r3, [r7, #20]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d102      	bne.n	801c714 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801c70e:	f04f 33ff 	mov.w	r3, #4294967295
 801c712:	e011      	b.n	801c738 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	3304      	adds	r3, #4
 801c718:	781b      	ldrb	r3, [r3, #0]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d104      	bne.n	801c728 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c71e:	697b      	ldr	r3, [r7, #20]
 801c720:	2200      	movs	r2, #0
 801c722:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c726:	e003      	b.n	801c730 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801c728:	697b      	ldr	r3, [r7, #20]
 801c72a:	2201      	movs	r2, #1
 801c72c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801c730:	697b      	ldr	r3, [r7, #20]
 801c732:	2200      	movs	r2, #0
 801c734:	60da      	str	r2, [r3, #12]

  return 0;
 801c736:	2300      	movs	r3, #0
}
 801c738:	4618      	mov	r0, r3
 801c73a:	371c      	adds	r7, #28
 801c73c:	46bd      	mov	sp, r7
 801c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c742:	4770      	bx	lr

0801c744 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b086      	sub	sp, #24
 801c748:	af00      	add	r7, sp, #0
 801c74a:	60f8      	str	r0, [r7, #12]
 801c74c:	460b      	mov	r3, r1
 801c74e:	607a      	str	r2, [r7, #4]
 801c750:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c758:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c75a:	697b      	ldr	r3, [r7, #20]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d102      	bne.n	801c766 <SCSI_Read10+0x22>
  {
    return -1;
 801c760:	f04f 33ff 	mov.w	r3, #4294967295
 801c764:	e08a      	b.n	801c87c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c766:	697b      	ldr	r3, [r7, #20]
 801c768:	7a1b      	ldrb	r3, [r3, #8]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d17c      	bne.n	801c868 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c76e:	697b      	ldr	r3, [r7, #20]
 801c770:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c774:	b25b      	sxtb	r3, r3
 801c776:	2b00      	cmp	r3, #0
 801c778:	db0a      	blt.n	801c790 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c77a:	697b      	ldr	r3, [r7, #20]
 801c77c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c780:	2320      	movs	r3, #32
 801c782:	2205      	movs	r2, #5
 801c784:	68f8      	ldr	r0, [r7, #12]
 801c786:	f7ff ff1c 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801c78a:	f04f 33ff 	mov.w	r3, #4294967295
 801c78e:	e075      	b.n	801c87c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c790:	697b      	ldr	r3, [r7, #20]
 801c792:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c796:	2b02      	cmp	r3, #2
 801c798:	d108      	bne.n	801c7ac <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c79a:	7af9      	ldrb	r1, [r7, #11]
 801c79c:	233a      	movs	r3, #58	; 0x3a
 801c79e:	2202      	movs	r2, #2
 801c7a0:	68f8      	ldr	r0, [r7, #12]
 801c7a2:	f7ff ff0e 	bl	801c5c2 <SCSI_SenseCode>

      return -1;
 801c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c7aa:	e067      	b.n	801c87c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c7b2:	689b      	ldr	r3, [r3, #8]
 801c7b4:	7afa      	ldrb	r2, [r7, #11]
 801c7b6:	4610      	mov	r0, r2
 801c7b8:	4798      	blx	r3
 801c7ba:	4603      	mov	r3, r0
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d008      	beq.n	801c7d2 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c7c0:	7af9      	ldrb	r1, [r7, #11]
 801c7c2:	233a      	movs	r3, #58	; 0x3a
 801c7c4:	2202      	movs	r2, #2
 801c7c6:	68f8      	ldr	r0, [r7, #12]
 801c7c8:	f7ff fefb 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801c7cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d0:	e054      	b.n	801c87c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	3302      	adds	r3, #2
 801c7d6:	781b      	ldrb	r3, [r3, #0]
 801c7d8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	3303      	adds	r3, #3
 801c7de:	781b      	ldrb	r3, [r3, #0]
 801c7e0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c7e2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	3304      	adds	r3, #4
 801c7e8:	781b      	ldrb	r3, [r3, #0]
 801c7ea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c7ec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	3205      	adds	r2, #5
 801c7f2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c7f4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c7f6:	697b      	ldr	r3, [r7, #20]
 801c7f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	3307      	adds	r3, #7
 801c800:	781b      	ldrb	r3, [r3, #0]
 801c802:	021b      	lsls	r3, r3, #8
 801c804:	687a      	ldr	r2, [r7, #4]
 801c806:	3208      	adds	r2, #8
 801c808:	7812      	ldrb	r2, [r2, #0]
 801c80a:	431a      	orrs	r2, r3
 801c80c:	697b      	ldr	r3, [r7, #20]
 801c80e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c812:	697b      	ldr	r3, [r7, #20]
 801c814:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c818:	697b      	ldr	r3, [r7, #20]
 801c81a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c81e:	7af9      	ldrb	r1, [r7, #11]
 801c820:	68f8      	ldr	r0, [r7, #12]
 801c822:	f000 faad 	bl	801cd80 <SCSI_CheckAddressRange>
 801c826:	4603      	mov	r3, r0
 801c828:	2b00      	cmp	r3, #0
 801c82a:	da02      	bge.n	801c832 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c82c:	f04f 33ff 	mov.w	r3, #4294967295
 801c830:	e024      	b.n	801c87c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c832:	697b      	ldr	r3, [r7, #20]
 801c834:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c838:	697b      	ldr	r3, [r7, #20]
 801c83a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c83e:	6979      	ldr	r1, [r7, #20]
 801c840:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c844:	fb01 f303 	mul.w	r3, r1, r3
 801c848:	429a      	cmp	r2, r3
 801c84a:	d00a      	beq.n	801c862 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c852:	2320      	movs	r3, #32
 801c854:	2205      	movs	r2, #5
 801c856:	68f8      	ldr	r0, [r7, #12]
 801c858:	f7ff feb3 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801c85c:	f04f 33ff 	mov.w	r3, #4294967295
 801c860:	e00c      	b.n	801c87c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c862:	697b      	ldr	r3, [r7, #20]
 801c864:	2202      	movs	r2, #2
 801c866:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c868:	697b      	ldr	r3, [r7, #20]
 801c86a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c86e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c870:	7afb      	ldrb	r3, [r7, #11]
 801c872:	4619      	mov	r1, r3
 801c874:	68f8      	ldr	r0, [r7, #12]
 801c876:	f000 faab 	bl	801cdd0 <SCSI_ProcessRead>
 801c87a:	4603      	mov	r3, r0
}
 801c87c:	4618      	mov	r0, r3
 801c87e:	3718      	adds	r7, #24
 801c880:	46bd      	mov	sp, r7
 801c882:	bd80      	pop	{r7, pc}

0801c884 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c884:	b580      	push	{r7, lr}
 801c886:	b086      	sub	sp, #24
 801c888:	af00      	add	r7, sp, #0
 801c88a:	60f8      	str	r0, [r7, #12]
 801c88c:	460b      	mov	r3, r1
 801c88e:	607a      	str	r2, [r7, #4]
 801c890:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c898:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c89a:	697b      	ldr	r3, [r7, #20]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d102      	bne.n	801c8a6 <SCSI_Read12+0x22>
  {
    return -1;
 801c8a0:	f04f 33ff 	mov.w	r3, #4294967295
 801c8a4:	e095      	b.n	801c9d2 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	7a1b      	ldrb	r3, [r3, #8]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	f040 8087 	bne.w	801c9be <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c8b0:	697b      	ldr	r3, [r7, #20]
 801c8b2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c8b6:	b25b      	sxtb	r3, r3
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	db0a      	blt.n	801c8d2 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c8bc:	697b      	ldr	r3, [r7, #20]
 801c8be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c8c2:	2320      	movs	r3, #32
 801c8c4:	2205      	movs	r2, #5
 801c8c6:	68f8      	ldr	r0, [r7, #12]
 801c8c8:	f7ff fe7b 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801c8cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c8d0:	e07f      	b.n	801c9d2 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c8d2:	697b      	ldr	r3, [r7, #20]
 801c8d4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c8d8:	2b02      	cmp	r3, #2
 801c8da:	d108      	bne.n	801c8ee <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c8dc:	7af9      	ldrb	r1, [r7, #11]
 801c8de:	233a      	movs	r3, #58	; 0x3a
 801c8e0:	2202      	movs	r2, #2
 801c8e2:	68f8      	ldr	r0, [r7, #12]
 801c8e4:	f7ff fe6d 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801c8e8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8ec:	e071      	b.n	801c9d2 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c8f4:	689b      	ldr	r3, [r3, #8]
 801c8f6:	7afa      	ldrb	r2, [r7, #11]
 801c8f8:	4610      	mov	r0, r2
 801c8fa:	4798      	blx	r3
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d008      	beq.n	801c914 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c902:	7af9      	ldrb	r1, [r7, #11]
 801c904:	233a      	movs	r3, #58	; 0x3a
 801c906:	2202      	movs	r2, #2
 801c908:	68f8      	ldr	r0, [r7, #12]
 801c90a:	f7ff fe5a 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801c90e:	f04f 33ff 	mov.w	r3, #4294967295
 801c912:	e05e      	b.n	801c9d2 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	3302      	adds	r3, #2
 801c918:	781b      	ldrb	r3, [r3, #0]
 801c91a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	3303      	adds	r3, #3
 801c920:	781b      	ldrb	r3, [r3, #0]
 801c922:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c924:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	3304      	adds	r3, #4
 801c92a:	781b      	ldrb	r3, [r3, #0]
 801c92c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c92e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c930:	687a      	ldr	r2, [r7, #4]
 801c932:	3205      	adds	r2, #5
 801c934:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c936:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c938:	697b      	ldr	r3, [r7, #20]
 801c93a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	3306      	adds	r3, #6
 801c942:	781b      	ldrb	r3, [r3, #0]
 801c944:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	3307      	adds	r3, #7
 801c94a:	781b      	ldrb	r3, [r3, #0]
 801c94c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c94e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	3308      	adds	r3, #8
 801c954:	781b      	ldrb	r3, [r3, #0]
 801c956:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801c958:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801c95a:	687a      	ldr	r2, [r7, #4]
 801c95c:	3209      	adds	r2, #9
 801c95e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801c960:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c962:	697b      	ldr	r3, [r7, #20]
 801c964:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c968:	697b      	ldr	r3, [r7, #20]
 801c96a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c96e:	697b      	ldr	r3, [r7, #20]
 801c970:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c974:	7af9      	ldrb	r1, [r7, #11]
 801c976:	68f8      	ldr	r0, [r7, #12]
 801c978:	f000 fa02 	bl	801cd80 <SCSI_CheckAddressRange>
 801c97c:	4603      	mov	r3, r0
 801c97e:	2b00      	cmp	r3, #0
 801c980:	da02      	bge.n	801c988 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c982:	f04f 33ff 	mov.w	r3, #4294967295
 801c986:	e024      	b.n	801c9d2 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c988:	697b      	ldr	r3, [r7, #20]
 801c98a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c98e:	697b      	ldr	r3, [r7, #20]
 801c990:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c994:	6979      	ldr	r1, [r7, #20]
 801c996:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c99a:	fb01 f303 	mul.w	r3, r1, r3
 801c99e:	429a      	cmp	r2, r3
 801c9a0:	d00a      	beq.n	801c9b8 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c9a2:	697b      	ldr	r3, [r7, #20]
 801c9a4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c9a8:	2320      	movs	r3, #32
 801c9aa:	2205      	movs	r2, #5
 801c9ac:	68f8      	ldr	r0, [r7, #12]
 801c9ae:	f7ff fe08 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801c9b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c9b6:	e00c      	b.n	801c9d2 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c9b8:	697b      	ldr	r3, [r7, #20]
 801c9ba:	2202      	movs	r2, #2
 801c9bc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c9be:	697b      	ldr	r3, [r7, #20]
 801c9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c9c4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c9c6:	7afb      	ldrb	r3, [r7, #11]
 801c9c8:	4619      	mov	r1, r3
 801c9ca:	68f8      	ldr	r0, [r7, #12]
 801c9cc:	f000 fa00 	bl	801cdd0 <SCSI_ProcessRead>
 801c9d0:	4603      	mov	r3, r0
}
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	3718      	adds	r7, #24
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	bd80      	pop	{r7, pc}

0801c9da <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c9da:	b580      	push	{r7, lr}
 801c9dc:	b086      	sub	sp, #24
 801c9de:	af00      	add	r7, sp, #0
 801c9e0:	60f8      	str	r0, [r7, #12]
 801c9e2:	460b      	mov	r3, r1
 801c9e4:	607a      	str	r2, [r7, #4]
 801c9e6:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c9ee:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801c9f0:	697b      	ldr	r3, [r7, #20]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d102      	bne.n	801c9fc <SCSI_Write10+0x22>
  {
    return -1;
 801c9f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c9fa:	e0af      	b.n	801cb5c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c9fc:	697b      	ldr	r3, [r7, #20]
 801c9fe:	7a1b      	ldrb	r3, [r3, #8]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	f040 80a5 	bne.w	801cb50 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801ca06:	697b      	ldr	r3, [r7, #20]
 801ca08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d10a      	bne.n	801ca26 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ca10:	697b      	ldr	r3, [r7, #20]
 801ca12:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ca16:	2320      	movs	r3, #32
 801ca18:	2205      	movs	r2, #5
 801ca1a:	68f8      	ldr	r0, [r7, #12]
 801ca1c:	f7ff fdd1 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801ca20:	f04f 33ff 	mov.w	r3, #4294967295
 801ca24:	e09a      	b.n	801cb5c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801ca26:	697b      	ldr	r3, [r7, #20]
 801ca28:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801ca2c:	b25b      	sxtb	r3, r3
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	da0a      	bge.n	801ca48 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ca32:	697b      	ldr	r3, [r7, #20]
 801ca34:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ca38:	2320      	movs	r3, #32
 801ca3a:	2205      	movs	r2, #5
 801ca3c:	68f8      	ldr	r0, [r7, #12]
 801ca3e:	f7ff fdc0 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801ca42:	f04f 33ff 	mov.w	r3, #4294967295
 801ca46:	e089      	b.n	801cb5c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca4e:	689b      	ldr	r3, [r3, #8]
 801ca50:	7afa      	ldrb	r2, [r7, #11]
 801ca52:	4610      	mov	r0, r2
 801ca54:	4798      	blx	r3
 801ca56:	4603      	mov	r3, r0
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d008      	beq.n	801ca6e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ca5c:	7af9      	ldrb	r1, [r7, #11]
 801ca5e:	233a      	movs	r3, #58	; 0x3a
 801ca60:	2202      	movs	r2, #2
 801ca62:	68f8      	ldr	r0, [r7, #12]
 801ca64:	f7ff fdad 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801ca68:	f04f 33ff 	mov.w	r3, #4294967295
 801ca6c:	e076      	b.n	801cb5c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca74:	68db      	ldr	r3, [r3, #12]
 801ca76:	7afa      	ldrb	r2, [r7, #11]
 801ca78:	4610      	mov	r0, r2
 801ca7a:	4798      	blx	r3
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d008      	beq.n	801ca94 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801ca82:	7af9      	ldrb	r1, [r7, #11]
 801ca84:	2327      	movs	r3, #39	; 0x27
 801ca86:	2202      	movs	r2, #2
 801ca88:	68f8      	ldr	r0, [r7, #12]
 801ca8a:	f7ff fd9a 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801ca8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca92:	e063      	b.n	801cb5c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	3302      	adds	r3, #2
 801ca98:	781b      	ldrb	r3, [r3, #0]
 801ca9a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	3303      	adds	r3, #3
 801caa0:	781b      	ldrb	r3, [r3, #0]
 801caa2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801caa4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	3304      	adds	r3, #4
 801caaa:	781b      	ldrb	r3, [r3, #0]
 801caac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801caae:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801cab0:	687a      	ldr	r2, [r7, #4]
 801cab2:	3205      	adds	r2, #5
 801cab4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801cab6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cab8:	697b      	ldr	r3, [r7, #20]
 801caba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	3307      	adds	r3, #7
 801cac2:	781b      	ldrb	r3, [r3, #0]
 801cac4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801cac6:	687a      	ldr	r2, [r7, #4]
 801cac8:	3208      	adds	r2, #8
 801caca:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801cacc:	431a      	orrs	r2, r3
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801cad4:	697b      	ldr	r3, [r7, #20]
 801cad6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cada:	697b      	ldr	r3, [r7, #20]
 801cadc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cae0:	7af9      	ldrb	r1, [r7, #11]
 801cae2:	68f8      	ldr	r0, [r7, #12]
 801cae4:	f000 f94c 	bl	801cd80 <SCSI_CheckAddressRange>
 801cae8:	4603      	mov	r3, r0
 801caea:	2b00      	cmp	r3, #0
 801caec:	da02      	bge.n	801caf4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801caee:	f04f 33ff 	mov.w	r3, #4294967295
 801caf2:	e033      	b.n	801cb5c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801caf4:	697b      	ldr	r3, [r7, #20]
 801caf6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cafa:	697a      	ldr	r2, [r7, #20]
 801cafc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cb00:	fb02 f303 	mul.w	r3, r2, r3
 801cb04:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801cb06:	697b      	ldr	r3, [r7, #20]
 801cb08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cb0c:	693a      	ldr	r2, [r7, #16]
 801cb0e:	429a      	cmp	r2, r3
 801cb10:	d00a      	beq.n	801cb28 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cb12:	697b      	ldr	r3, [r7, #20]
 801cb14:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cb18:	2320      	movs	r3, #32
 801cb1a:	2205      	movs	r2, #5
 801cb1c:	68f8      	ldr	r0, [r7, #12]
 801cb1e:	f7ff fd50 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801cb22:	f04f 33ff 	mov.w	r3, #4294967295
 801cb26:	e019      	b.n	801cb5c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801cb28:	693b      	ldr	r3, [r7, #16]
 801cb2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb2e:	bf28      	it	cs
 801cb30:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cb34:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cb36:	697b      	ldr	r3, [r7, #20]
 801cb38:	2201      	movs	r2, #1
 801cb3a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cb3c:	697b      	ldr	r3, [r7, #20]
 801cb3e:	f103 0210 	add.w	r2, r3, #16
 801cb42:	693b      	ldr	r3, [r7, #16]
 801cb44:	2101      	movs	r1, #1
 801cb46:	68f8      	ldr	r0, [r7, #12]
 801cb48:	f7fd f95a 	bl	8019e00 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	e005      	b.n	801cb5c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 801cb50:	7afb      	ldrb	r3, [r7, #11]
 801cb52:	4619      	mov	r1, r3
 801cb54:	68f8      	ldr	r0, [r7, #12]
 801cb56:	f000 f9b4 	bl	801cec2 <SCSI_ProcessWrite>
 801cb5a:	4603      	mov	r3, r0
}
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	3718      	adds	r7, #24
 801cb60:	46bd      	mov	sp, r7
 801cb62:	bd80      	pop	{r7, pc}

0801cb64 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b086      	sub	sp, #24
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	60f8      	str	r0, [r7, #12]
 801cb6c:	460b      	mov	r3, r1
 801cb6e:	607a      	str	r2, [r7, #4]
 801cb70:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cb78:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801cb7a:	697b      	ldr	r3, [r7, #20]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d102      	bne.n	801cb86 <SCSI_Write12+0x22>
  {
    return -1;
 801cb80:	f04f 33ff 	mov.w	r3, #4294967295
 801cb84:	e0bf      	b.n	801cd06 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801cb86:	697b      	ldr	r3, [r7, #20]
 801cb88:	7a1b      	ldrb	r3, [r3, #8]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	f040 80b5 	bne.w	801ccfa <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d10a      	bne.n	801cbb0 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cb9a:	697b      	ldr	r3, [r7, #20]
 801cb9c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cba0:	2320      	movs	r3, #32
 801cba2:	2205      	movs	r2, #5
 801cba4:	68f8      	ldr	r0, [r7, #12]
 801cba6:	f7ff fd0c 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801cbaa:	f04f 33ff 	mov.w	r3, #4294967295
 801cbae:	e0aa      	b.n	801cd06 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801cbb6:	b25b      	sxtb	r3, r3
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	da0a      	bge.n	801cbd2 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cbbc:	697b      	ldr	r3, [r7, #20]
 801cbbe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cbc2:	2320      	movs	r3, #32
 801cbc4:	2205      	movs	r2, #5
 801cbc6:	68f8      	ldr	r0, [r7, #12]
 801cbc8:	f7ff fcfb 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801cbcc:	f04f 33ff 	mov.w	r3, #4294967295
 801cbd0:	e099      	b.n	801cd06 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cbd8:	689b      	ldr	r3, [r3, #8]
 801cbda:	7afa      	ldrb	r2, [r7, #11]
 801cbdc:	4610      	mov	r0, r2
 801cbde:	4798      	blx	r3
 801cbe0:	4603      	mov	r3, r0
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d00b      	beq.n	801cbfe <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801cbe6:	7af9      	ldrb	r1, [r7, #11]
 801cbe8:	233a      	movs	r3, #58	; 0x3a
 801cbea:	2202      	movs	r2, #2
 801cbec:	68f8      	ldr	r0, [r7, #12]
 801cbee:	f7ff fce8 	bl	801c5c2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801cbf2:	697b      	ldr	r3, [r7, #20]
 801cbf4:	2205      	movs	r2, #5
 801cbf6:	721a      	strb	r2, [r3, #8]
      return -1;
 801cbf8:	f04f 33ff 	mov.w	r3, #4294967295
 801cbfc:	e083      	b.n	801cd06 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801cbfe:	68fb      	ldr	r3, [r7, #12]
 801cc00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cc04:	68db      	ldr	r3, [r3, #12]
 801cc06:	7afa      	ldrb	r2, [r7, #11]
 801cc08:	4610      	mov	r0, r2
 801cc0a:	4798      	blx	r3
 801cc0c:	4603      	mov	r3, r0
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d00b      	beq.n	801cc2a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801cc12:	7af9      	ldrb	r1, [r7, #11]
 801cc14:	2327      	movs	r3, #39	; 0x27
 801cc16:	2202      	movs	r2, #2
 801cc18:	68f8      	ldr	r0, [r7, #12]
 801cc1a:	f7ff fcd2 	bl	801c5c2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801cc1e:	697b      	ldr	r3, [r7, #20]
 801cc20:	2205      	movs	r2, #5
 801cc22:	721a      	strb	r2, [r3, #8]
      return -1;
 801cc24:	f04f 33ff 	mov.w	r3, #4294967295
 801cc28:	e06d      	b.n	801cd06 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	3302      	adds	r3, #2
 801cc2e:	781b      	ldrb	r3, [r3, #0]
 801cc30:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	3303      	adds	r3, #3
 801cc36:	781b      	ldrb	r3, [r3, #0]
 801cc38:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cc3a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	3304      	adds	r3, #4
 801cc40:	781b      	ldrb	r3, [r3, #0]
 801cc42:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801cc44:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801cc46:	687a      	ldr	r2, [r7, #4]
 801cc48:	3205      	adds	r2, #5
 801cc4a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801cc4c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cc4e:	697b      	ldr	r3, [r7, #20]
 801cc50:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	3306      	adds	r3, #6
 801cc58:	781b      	ldrb	r3, [r3, #0]
 801cc5a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	3307      	adds	r3, #7
 801cc60:	781b      	ldrb	r3, [r3, #0]
 801cc62:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cc64:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	3308      	adds	r3, #8
 801cc6a:	781b      	ldrb	r3, [r3, #0]
 801cc6c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801cc6e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801cc70:	687a      	ldr	r2, [r7, #4]
 801cc72:	3209      	adds	r2, #9
 801cc74:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801cc76:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cc78:	697b      	ldr	r3, [r7, #20]
 801cc7a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cc84:	697b      	ldr	r3, [r7, #20]
 801cc86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cc8a:	7af9      	ldrb	r1, [r7, #11]
 801cc8c:	68f8      	ldr	r0, [r7, #12]
 801cc8e:	f000 f877 	bl	801cd80 <SCSI_CheckAddressRange>
 801cc92:	4603      	mov	r3, r0
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	da02      	bge.n	801cc9e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801cc98:	f04f 33ff 	mov.w	r3, #4294967295
 801cc9c:	e033      	b.n	801cd06 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cc9e:	697b      	ldr	r3, [r7, #20]
 801cca0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cca4:	697a      	ldr	r2, [r7, #20]
 801cca6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801ccaa:	fb02 f303 	mul.w	r3, r2, r3
 801ccae:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801ccb6:	693a      	ldr	r2, [r7, #16]
 801ccb8:	429a      	cmp	r2, r3
 801ccba:	d00a      	beq.n	801ccd2 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ccbc:	697b      	ldr	r3, [r7, #20]
 801ccbe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ccc2:	2320      	movs	r3, #32
 801ccc4:	2205      	movs	r2, #5
 801ccc6:	68f8      	ldr	r0, [r7, #12]
 801ccc8:	f7ff fc7b 	bl	801c5c2 <SCSI_SenseCode>
      return -1;
 801cccc:	f04f 33ff 	mov.w	r3, #4294967295
 801ccd0:	e019      	b.n	801cd06 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801ccd2:	693b      	ldr	r3, [r7, #16]
 801ccd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ccd8:	bf28      	it	cs
 801ccda:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801ccde:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cce0:	697b      	ldr	r3, [r7, #20]
 801cce2:	2201      	movs	r2, #1
 801cce4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cce6:	697b      	ldr	r3, [r7, #20]
 801cce8:	f103 0210 	add.w	r2, r3, #16
 801ccec:	693b      	ldr	r3, [r7, #16]
 801ccee:	2101      	movs	r1, #1
 801ccf0:	68f8      	ldr	r0, [r7, #12]
 801ccf2:	f7fd f885 	bl	8019e00 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801ccf6:	2300      	movs	r3, #0
 801ccf8:	e005      	b.n	801cd06 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 801ccfa:	7afb      	ldrb	r3, [r7, #11]
 801ccfc:	4619      	mov	r1, r3
 801ccfe:	68f8      	ldr	r0, [r7, #12]
 801cd00:	f000 f8df 	bl	801cec2 <SCSI_ProcessWrite>
 801cd04:	4603      	mov	r3, r0
}
 801cd06:	4618      	mov	r0, r3
 801cd08:	3718      	adds	r7, #24
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	bd80      	pop	{r7, pc}

0801cd0e <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cd0e:	b580      	push	{r7, lr}
 801cd10:	b086      	sub	sp, #24
 801cd12:	af00      	add	r7, sp, #0
 801cd14:	60f8      	str	r0, [r7, #12]
 801cd16:	460b      	mov	r3, r1
 801cd18:	607a      	str	r2, [r7, #4]
 801cd1a:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cd22:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cd24:	697b      	ldr	r3, [r7, #20]
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d102      	bne.n	801cd30 <SCSI_Verify10+0x22>
  {
    return -1;
 801cd2a:	f04f 33ff 	mov.w	r3, #4294967295
 801cd2e:	e023      	b.n	801cd78 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	3301      	adds	r3, #1
 801cd34:	781b      	ldrb	r3, [r3, #0]
 801cd36:	f003 0302 	and.w	r3, r3, #2
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d008      	beq.n	801cd50 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801cd3e:	7af9      	ldrb	r1, [r7, #11]
 801cd40:	2324      	movs	r3, #36	; 0x24
 801cd42:	2205      	movs	r2, #5
 801cd44:	68f8      	ldr	r0, [r7, #12]
 801cd46:	f7ff fc3c 	bl	801c5c2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801cd4a:	f04f 33ff 	mov.w	r3, #4294967295
 801cd4e:	e013      	b.n	801cd78 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801cd50:	697b      	ldr	r3, [r7, #20]
 801cd52:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cd56:	697b      	ldr	r3, [r7, #20]
 801cd58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cd5c:	7af9      	ldrb	r1, [r7, #11]
 801cd5e:	68f8      	ldr	r0, [r7, #12]
 801cd60:	f000 f80e 	bl	801cd80 <SCSI_CheckAddressRange>
 801cd64:	4603      	mov	r3, r0
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	da02      	bge.n	801cd70 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801cd6a:	f04f 33ff 	mov.w	r3, #4294967295
 801cd6e:	e003      	b.n	801cd78 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 801cd70:	697b      	ldr	r3, [r7, #20]
 801cd72:	2200      	movs	r2, #0
 801cd74:	60da      	str	r2, [r3, #12]

  return 0;
 801cd76:	2300      	movs	r3, #0
}
 801cd78:	4618      	mov	r0, r3
 801cd7a:	3718      	adds	r7, #24
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd80      	pop	{r7, pc}

0801cd80 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801cd80:	b580      	push	{r7, lr}
 801cd82:	b086      	sub	sp, #24
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	60f8      	str	r0, [r7, #12]
 801cd88:	607a      	str	r2, [r7, #4]
 801cd8a:	603b      	str	r3, [r7, #0]
 801cd8c:	460b      	mov	r3, r1
 801cd8e:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cd96:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cd98:	697b      	ldr	r3, [r7, #20]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d102      	bne.n	801cda4 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801cd9e:	f04f 33ff 	mov.w	r3, #4294967295
 801cda2:	e011      	b.n	801cdc8 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801cda4:	687a      	ldr	r2, [r7, #4]
 801cda6:	683b      	ldr	r3, [r7, #0]
 801cda8:	441a      	add	r2, r3
 801cdaa:	697b      	ldr	r3, [r7, #20]
 801cdac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801cdb0:	429a      	cmp	r2, r3
 801cdb2:	d908      	bls.n	801cdc6 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801cdb4:	7af9      	ldrb	r1, [r7, #11]
 801cdb6:	2321      	movs	r3, #33	; 0x21
 801cdb8:	2205      	movs	r2, #5
 801cdba:	68f8      	ldr	r0, [r7, #12]
 801cdbc:	f7ff fc01 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801cdc0:	f04f 33ff 	mov.w	r3, #4294967295
 801cdc4:	e000      	b.n	801cdc8 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 801cdc6:	2300      	movs	r3, #0
}
 801cdc8:	4618      	mov	r0, r3
 801cdca:	3718      	adds	r7, #24
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}

0801cdd0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cdd0:	b590      	push	{r4, r7, lr}
 801cdd2:	b085      	sub	sp, #20
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
 801cdd8:	460b      	mov	r3, r1
 801cdda:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cde2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cdea:	68fa      	ldr	r2, [r7, #12]
 801cdec:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cdf0:	fb02 f303 	mul.w	r3, r2, r3
 801cdf4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d102      	bne.n	801ce02 <SCSI_ProcessRead+0x32>
  {
    return -1;
 801cdfc:	f04f 33ff 	mov.w	r3, #4294967295
 801ce00:	e05b      	b.n	801ceba <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801ce02:	68bb      	ldr	r3, [r7, #8]
 801ce04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce08:	bf28      	it	cs
 801ce0a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801ce0e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ce16:	691c      	ldr	r4, [r3, #16]
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	f103 0110 	add.w	r1, r3, #16
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ce2a:	4618      	mov	r0, r3
 801ce2c:	68bb      	ldr	r3, [r7, #8]
 801ce2e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801ce32:	b29b      	uxth	r3, r3
 801ce34:	78f8      	ldrb	r0, [r7, #3]
 801ce36:	47a0      	blx	r4
 801ce38:	4603      	mov	r3, r0
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	da08      	bge.n	801ce50 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801ce3e:	78f9      	ldrb	r1, [r7, #3]
 801ce40:	2311      	movs	r3, #17
 801ce42:	2204      	movs	r2, #4
 801ce44:	6878      	ldr	r0, [r7, #4]
 801ce46:	f7ff fbbc 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801ce4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce4e:	e034      	b.n	801ceba <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	f103 0210 	add.w	r2, r3, #16
 801ce56:	68bb      	ldr	r3, [r7, #8]
 801ce58:	2181      	movs	r1, #129	; 0x81
 801ce5a:	6878      	ldr	r0, [r7, #4]
 801ce5c:	f7fc ff98 	bl	8019d90 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ce6c:	4619      	mov	r1, r3
 801ce6e:	68bb      	ldr	r3, [r7, #8]
 801ce70:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce74:	441a      	add	r2, r3
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ce88:	4619      	mov	r1, r3
 801ce8a:	68bb      	ldr	r3, [r7, #8]
 801ce8c:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce90:	1ad2      	subs	r2, r2, r3
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801ce9e:	68bb      	ldr	r3, [r7, #8]
 801cea0:	1ad2      	subs	r2, r2, r3
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d102      	bne.n	801ceb8 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	2203      	movs	r2, #3
 801ceb6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801ceb8:	2300      	movs	r3, #0
}
 801ceba:	4618      	mov	r0, r3
 801cebc:	3714      	adds	r7, #20
 801cebe:	46bd      	mov	sp, r7
 801cec0:	bd90      	pop	{r4, r7, pc}

0801cec2 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cec2:	b590      	push	{r4, r7, lr}
 801cec4:	b085      	sub	sp, #20
 801cec6:	af00      	add	r7, sp, #0
 801cec8:	6078      	str	r0, [r7, #4]
 801ceca:	460b      	mov	r3, r1
 801cecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ced4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cedc:	68fa      	ldr	r2, [r7, #12]
 801cede:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cee2:	fb02 f303 	mul.w	r3, r2, r3
 801cee6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d102      	bne.n	801cef4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801ceee:	f04f 33ff 	mov.w	r3, #4294967295
 801cef2:	e06b      	b.n	801cfcc <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cef4:	68bb      	ldr	r3, [r7, #8]
 801cef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cefa:	bf28      	it	cs
 801cefc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cf00:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cf08:	695c      	ldr	r4, [r3, #20]
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	f103 0110 	add.w	r1, r3, #16
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	68bb      	ldr	r3, [r7, #8]
 801cf20:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cf24:	b29b      	uxth	r3, r3
 801cf26:	78f8      	ldrb	r0, [r7, #3]
 801cf28:	47a0      	blx	r4
 801cf2a:	4603      	mov	r3, r0
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	da08      	bge.n	801cf42 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801cf30:	78f9      	ldrb	r1, [r7, #3]
 801cf32:	2303      	movs	r3, #3
 801cf34:	2204      	movs	r2, #4
 801cf36:	6878      	ldr	r0, [r7, #4]
 801cf38:	f7ff fb43 	bl	801c5c2 <SCSI_SenseCode>
    return -1;
 801cf3c:	f04f 33ff 	mov.w	r3, #4294967295
 801cf40:	e044      	b.n	801cfcc <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cf4e:	4619      	mov	r1, r3
 801cf50:	68bb      	ldr	r3, [r7, #8]
 801cf52:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf56:	441a      	add	r2, r3
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cf6a:	4619      	mov	r1, r3
 801cf6c:	68bb      	ldr	r3, [r7, #8]
 801cf6e:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf72:	1ad2      	subs	r2, r2, r3
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	1ad2      	subs	r2, r2, r3
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d104      	bne.n	801cf9e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801cf94:	2100      	movs	r1, #0
 801cf96:	6878      	ldr	r0, [r7, #4]
 801cf98:	f7fe fdd8 	bl	801bb4c <MSC_BOT_SendCSW>
 801cf9c:	e015      	b.n	801cfca <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cfa4:	68fa      	ldr	r2, [r7, #12]
 801cfa6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cfaa:	fb02 f303 	mul.w	r3, r2, r3
 801cfae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cfb2:	bf28      	it	cs
 801cfb4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cfb8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	f103 0210 	add.w	r2, r3, #16
 801cfc0:	68bb      	ldr	r3, [r7, #8]
 801cfc2:	2101      	movs	r1, #1
 801cfc4:	6878      	ldr	r0, [r7, #4]
 801cfc6:	f7fc ff1b 	bl	8019e00 <USBD_LL_PrepareReceive>
  }

  return 0;
 801cfca:	2300      	movs	r3, #0
}
 801cfcc:	4618      	mov	r0, r3
 801cfce:	3714      	adds	r7, #20
 801cfd0:	46bd      	mov	sp, r7
 801cfd2:	bd90      	pop	{r4, r7, pc}

0801cfd4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_CDCMSC_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801cfd4:	b480      	push	{r7}
 801cfd6:	b087      	sub	sp, #28
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	60f8      	str	r0, [r7, #12]
 801cfdc:	60b9      	str	r1, [r7, #8]
 801cfde:	4613      	mov	r3, r2
 801cfe0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801cfe2:	88fb      	ldrh	r3, [r7, #6]
 801cfe4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d102      	bne.n	801cff2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801cfec:	f04f 33ff 	mov.w	r3, #4294967295
 801cff0:	e013      	b.n	801d01a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801cff2:	8afa      	ldrh	r2, [r7, #22]
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801cff8:	e00b      	b.n	801d012 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801cffa:	8afb      	ldrh	r3, [r7, #22]
 801cffc:	3b01      	subs	r3, #1
 801cffe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801d000:	8afb      	ldrh	r3, [r7, #22]
 801d002:	68ba      	ldr	r2, [r7, #8]
 801d004:	441a      	add	r2, r3
 801d006:	8afb      	ldrh	r3, [r7, #22]
 801d008:	7811      	ldrb	r1, [r2, #0]
 801d00a:	68fa      	ldr	r2, [r7, #12]
 801d00c:	4413      	add	r3, r2
 801d00e:	460a      	mov	r2, r1
 801d010:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801d012:	8afb      	ldrh	r3, [r7, #22]
 801d014:	2b00      	cmp	r3, #0
 801d016:	d1f0      	bne.n	801cffa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801d018:	2300      	movs	r3, #0
}
 801d01a:	4618      	mov	r0, r3
 801d01c:	371c      	adds	r7, #28
 801d01e:	46bd      	mov	sp, r7
 801d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d024:	4770      	bx	lr

0801d026 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801d026:	b480      	push	{r7}
 801d028:	b083      	sub	sp, #12
 801d02a:	af00      	add	r7, sp, #0
 801d02c:	4603      	mov	r3, r0
 801d02e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801d030:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801d032:	4618      	mov	r0, r3
 801d034:	370c      	adds	r7, #12
 801d036:	46bd      	mov	sp, r7
 801d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d03c:	4770      	bx	lr

0801d03e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801d03e:	b480      	push	{r7}
 801d040:	b085      	sub	sp, #20
 801d042:	af00      	add	r7, sp, #0
 801d044:	4603      	mov	r3, r0
 801d046:	60b9      	str	r1, [r7, #8]
 801d048:	607a      	str	r2, [r7, #4]
 801d04a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 801d04c:	68bb      	ldr	r3, [r7, #8]
 801d04e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d052:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d05a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801d05c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d05e:	4618      	mov	r0, r3
 801d060:	3714      	adds	r7, #20
 801d062:	46bd      	mov	sp, r7
 801d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d068:	4770      	bx	lr

0801d06a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801d06a:	b480      	push	{r7}
 801d06c:	b083      	sub	sp, #12
 801d06e:	af00      	add	r7, sp, #0
 801d070:	4603      	mov	r3, r0
 801d072:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d074:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d076:	4618      	mov	r0, r3
 801d078:	370c      	adds	r7, #12
 801d07a:	46bd      	mov	sp, r7
 801d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d080:	4770      	bx	lr

0801d082 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801d082:	b480      	push	{r7}
 801d084:	b083      	sub	sp, #12
 801d086:	af00      	add	r7, sp, #0
 801d088:	4603      	mov	r3, r0
 801d08a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801d08c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d08e:	4618      	mov	r0, r3
 801d090:	370c      	adds	r7, #12
 801d092:	46bd      	mov	sp, r7
 801d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d098:	4770      	bx	lr

0801d09a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d09a:	b580      	push	{r7, lr}
 801d09c:	b086      	sub	sp, #24
 801d09e:	af00      	add	r7, sp, #0
 801d0a0:	60b9      	str	r1, [r7, #8]
 801d0a2:	607a      	str	r2, [r7, #4]
 801d0a4:	461a      	mov	r2, r3
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	73fb      	strb	r3, [r7, #15]
 801d0aa:	4613      	mov	r3, r2
 801d0ac:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	uint16_t block_cntr=0;
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	82fb      	strh	r3, [r7, #22]
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	82fb      	strh	r3, [r7, #22]
 801d0b6:	e00f      	b.n	801d0d8 <STORAGE_Read_FS+0x3e>
				W25_ReadBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801d0b8:	8afb      	ldrh	r3, [r7, #22]
 801d0ba:	025b      	lsls	r3, r3, #9
 801d0bc:	461a      	mov	r2, r3
 801d0be:	68bb      	ldr	r3, [r7, #8]
 801d0c0:	1898      	adds	r0, r3, r2
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	b29a      	uxth	r2, r3
 801d0c6:	8afb      	ldrh	r3, [r7, #22]
 801d0c8:	4413      	add	r3, r2
 801d0ca:	b29b      	uxth	r3, r3
 801d0cc:	4619      	mov	r1, r3
 801d0ce:	f7e7 fa5d 	bl	800458c <W25_ReadBuf>
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d0d2:	8afb      	ldrh	r3, [r7, #22]
 801d0d4:	3301      	adds	r3, #1
 801d0d6:	82fb      	strh	r3, [r7, #22]
 801d0d8:	8afa      	ldrh	r2, [r7, #22]
 801d0da:	89bb      	ldrh	r3, [r7, #12]
 801d0dc:	429a      	cmp	r2, r3
 801d0de:	d3eb      	bcc.n	801d0b8 <STORAGE_Read_FS+0x1e>
	  return (USBD_OK);
 801d0e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	3718      	adds	r7, #24
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	bd80      	pop	{r7, pc}

0801d0ea <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d0ea:	b580      	push	{r7, lr}
 801d0ec:	b086      	sub	sp, #24
 801d0ee:	af00      	add	r7, sp, #0
 801d0f0:	60b9      	str	r1, [r7, #8]
 801d0f2:	607a      	str	r2, [r7, #4]
 801d0f4:	461a      	mov	r2, r3
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	73fb      	strb	r3, [r7, #15]
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint16_t block_cntr=0;
 801d0fe:	2300      	movs	r3, #0
 801d100:	82fb      	strh	r3, [r7, #22]
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d102:	2300      	movs	r3, #0
 801d104:	82fb      	strh	r3, [r7, #22]
 801d106:	e00f      	b.n	801d128 <STORAGE_Write_FS+0x3e>
					W25_WriteBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801d108:	8afb      	ldrh	r3, [r7, #22]
 801d10a:	025b      	lsls	r3, r3, #9
 801d10c:	461a      	mov	r2, r3
 801d10e:	68bb      	ldr	r3, [r7, #8]
 801d110:	1898      	adds	r0, r3, r2
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	b29a      	uxth	r2, r3
 801d116:	8afb      	ldrh	r3, [r7, #22]
 801d118:	4413      	add	r3, r2
 801d11a:	b29b      	uxth	r3, r3
 801d11c:	4619      	mov	r1, r3
 801d11e:	f7e7 faa5 	bl	800466c <W25_WriteBuf>
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d122:	8afb      	ldrh	r3, [r7, #22]
 801d124:	3301      	adds	r3, #1
 801d126:	82fb      	strh	r3, [r7, #22]
 801d128:	8afa      	ldrh	r2, [r7, #22]
 801d12a:	89bb      	ldrh	r3, [r7, #12]
 801d12c:	429a      	cmp	r2, r3
 801d12e:	d3eb      	bcc.n	801d108 <STORAGE_Write_FS+0x1e>
	  return (USBD_OK);
 801d130:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801d132:	4618      	mov	r0, r3
 801d134:	3718      	adds	r7, #24
 801d136:	46bd      	mov	sp, r7
 801d138:	bd80      	pop	{r7, pc}

0801d13a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d13a:	b480      	push	{r7}
 801d13c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d13e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d140:	4618      	mov	r0, r3
 801d142:	46bd      	mov	sp, r7
 801d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d148:	4770      	bx	lr
	...

0801d14c <__errno>:
 801d14c:	4b01      	ldr	r3, [pc, #4]	; (801d154 <__errno+0x8>)
 801d14e:	6818      	ldr	r0, [r3, #0]
 801d150:	4770      	bx	lr
 801d152:	bf00      	nop
 801d154:	200006ec 	.word	0x200006ec

0801d158 <__libc_init_array>:
 801d158:	b570      	push	{r4, r5, r6, lr}
 801d15a:	4d0d      	ldr	r5, [pc, #52]	; (801d190 <__libc_init_array+0x38>)
 801d15c:	4c0d      	ldr	r4, [pc, #52]	; (801d194 <__libc_init_array+0x3c>)
 801d15e:	1b64      	subs	r4, r4, r5
 801d160:	10a4      	asrs	r4, r4, #2
 801d162:	2600      	movs	r6, #0
 801d164:	42a6      	cmp	r6, r4
 801d166:	d109      	bne.n	801d17c <__libc_init_array+0x24>
 801d168:	4d0b      	ldr	r5, [pc, #44]	; (801d198 <__libc_init_array+0x40>)
 801d16a:	4c0c      	ldr	r4, [pc, #48]	; (801d19c <__libc_init_array+0x44>)
 801d16c:	f004 fd40 	bl	8021bf0 <_init>
 801d170:	1b64      	subs	r4, r4, r5
 801d172:	10a4      	asrs	r4, r4, #2
 801d174:	2600      	movs	r6, #0
 801d176:	42a6      	cmp	r6, r4
 801d178:	d105      	bne.n	801d186 <__libc_init_array+0x2e>
 801d17a:	bd70      	pop	{r4, r5, r6, pc}
 801d17c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d180:	4798      	blx	r3
 801d182:	3601      	adds	r6, #1
 801d184:	e7ee      	b.n	801d164 <__libc_init_array+0xc>
 801d186:	f855 3b04 	ldr.w	r3, [r5], #4
 801d18a:	4798      	blx	r3
 801d18c:	3601      	adds	r6, #1
 801d18e:	e7f2      	b.n	801d176 <__libc_init_array+0x1e>
 801d190:	0802ba4c 	.word	0x0802ba4c
 801d194:	0802ba4c 	.word	0x0802ba4c
 801d198:	0802ba4c 	.word	0x0802ba4c
 801d19c:	0802ba50 	.word	0x0802ba50

0801d1a0 <memset>:
 801d1a0:	4402      	add	r2, r0
 801d1a2:	4603      	mov	r3, r0
 801d1a4:	4293      	cmp	r3, r2
 801d1a6:	d100      	bne.n	801d1aa <memset+0xa>
 801d1a8:	4770      	bx	lr
 801d1aa:	f803 1b01 	strb.w	r1, [r3], #1
 801d1ae:	e7f9      	b.n	801d1a4 <memset+0x4>

0801d1b0 <__cvt>:
 801d1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d1b4:	ec55 4b10 	vmov	r4, r5, d0
 801d1b8:	2d00      	cmp	r5, #0
 801d1ba:	460e      	mov	r6, r1
 801d1bc:	4619      	mov	r1, r3
 801d1be:	462b      	mov	r3, r5
 801d1c0:	bfbb      	ittet	lt
 801d1c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d1c6:	461d      	movlt	r5, r3
 801d1c8:	2300      	movge	r3, #0
 801d1ca:	232d      	movlt	r3, #45	; 0x2d
 801d1cc:	700b      	strb	r3, [r1, #0]
 801d1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d1d4:	4691      	mov	r9, r2
 801d1d6:	f023 0820 	bic.w	r8, r3, #32
 801d1da:	bfbc      	itt	lt
 801d1dc:	4622      	movlt	r2, r4
 801d1de:	4614      	movlt	r4, r2
 801d1e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d1e4:	d005      	beq.n	801d1f2 <__cvt+0x42>
 801d1e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d1ea:	d100      	bne.n	801d1ee <__cvt+0x3e>
 801d1ec:	3601      	adds	r6, #1
 801d1ee:	2102      	movs	r1, #2
 801d1f0:	e000      	b.n	801d1f4 <__cvt+0x44>
 801d1f2:	2103      	movs	r1, #3
 801d1f4:	ab03      	add	r3, sp, #12
 801d1f6:	9301      	str	r3, [sp, #4]
 801d1f8:	ab02      	add	r3, sp, #8
 801d1fa:	9300      	str	r3, [sp, #0]
 801d1fc:	ec45 4b10 	vmov	d0, r4, r5
 801d200:	4653      	mov	r3, sl
 801d202:	4632      	mov	r2, r6
 801d204:	f001 fdc8 	bl	801ed98 <_dtoa_r>
 801d208:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d20c:	4607      	mov	r7, r0
 801d20e:	d102      	bne.n	801d216 <__cvt+0x66>
 801d210:	f019 0f01 	tst.w	r9, #1
 801d214:	d022      	beq.n	801d25c <__cvt+0xac>
 801d216:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d21a:	eb07 0906 	add.w	r9, r7, r6
 801d21e:	d110      	bne.n	801d242 <__cvt+0x92>
 801d220:	783b      	ldrb	r3, [r7, #0]
 801d222:	2b30      	cmp	r3, #48	; 0x30
 801d224:	d10a      	bne.n	801d23c <__cvt+0x8c>
 801d226:	2200      	movs	r2, #0
 801d228:	2300      	movs	r3, #0
 801d22a:	4620      	mov	r0, r4
 801d22c:	4629      	mov	r1, r5
 801d22e:	f7e3 fc5b 	bl	8000ae8 <__aeabi_dcmpeq>
 801d232:	b918      	cbnz	r0, 801d23c <__cvt+0x8c>
 801d234:	f1c6 0601 	rsb	r6, r6, #1
 801d238:	f8ca 6000 	str.w	r6, [sl]
 801d23c:	f8da 3000 	ldr.w	r3, [sl]
 801d240:	4499      	add	r9, r3
 801d242:	2200      	movs	r2, #0
 801d244:	2300      	movs	r3, #0
 801d246:	4620      	mov	r0, r4
 801d248:	4629      	mov	r1, r5
 801d24a:	f7e3 fc4d 	bl	8000ae8 <__aeabi_dcmpeq>
 801d24e:	b108      	cbz	r0, 801d254 <__cvt+0xa4>
 801d250:	f8cd 900c 	str.w	r9, [sp, #12]
 801d254:	2230      	movs	r2, #48	; 0x30
 801d256:	9b03      	ldr	r3, [sp, #12]
 801d258:	454b      	cmp	r3, r9
 801d25a:	d307      	bcc.n	801d26c <__cvt+0xbc>
 801d25c:	9b03      	ldr	r3, [sp, #12]
 801d25e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d260:	1bdb      	subs	r3, r3, r7
 801d262:	4638      	mov	r0, r7
 801d264:	6013      	str	r3, [r2, #0]
 801d266:	b004      	add	sp, #16
 801d268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d26c:	1c59      	adds	r1, r3, #1
 801d26e:	9103      	str	r1, [sp, #12]
 801d270:	701a      	strb	r2, [r3, #0]
 801d272:	e7f0      	b.n	801d256 <__cvt+0xa6>

0801d274 <__exponent>:
 801d274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d276:	4603      	mov	r3, r0
 801d278:	2900      	cmp	r1, #0
 801d27a:	bfb8      	it	lt
 801d27c:	4249      	neglt	r1, r1
 801d27e:	f803 2b02 	strb.w	r2, [r3], #2
 801d282:	bfb4      	ite	lt
 801d284:	222d      	movlt	r2, #45	; 0x2d
 801d286:	222b      	movge	r2, #43	; 0x2b
 801d288:	2909      	cmp	r1, #9
 801d28a:	7042      	strb	r2, [r0, #1]
 801d28c:	dd2a      	ble.n	801d2e4 <__exponent+0x70>
 801d28e:	f10d 0407 	add.w	r4, sp, #7
 801d292:	46a4      	mov	ip, r4
 801d294:	270a      	movs	r7, #10
 801d296:	46a6      	mov	lr, r4
 801d298:	460a      	mov	r2, r1
 801d29a:	fb91 f6f7 	sdiv	r6, r1, r7
 801d29e:	fb07 1516 	mls	r5, r7, r6, r1
 801d2a2:	3530      	adds	r5, #48	; 0x30
 801d2a4:	2a63      	cmp	r2, #99	; 0x63
 801d2a6:	f104 34ff 	add.w	r4, r4, #4294967295
 801d2aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d2ae:	4631      	mov	r1, r6
 801d2b0:	dcf1      	bgt.n	801d296 <__exponent+0x22>
 801d2b2:	3130      	adds	r1, #48	; 0x30
 801d2b4:	f1ae 0502 	sub.w	r5, lr, #2
 801d2b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d2bc:	1c44      	adds	r4, r0, #1
 801d2be:	4629      	mov	r1, r5
 801d2c0:	4561      	cmp	r1, ip
 801d2c2:	d30a      	bcc.n	801d2da <__exponent+0x66>
 801d2c4:	f10d 0209 	add.w	r2, sp, #9
 801d2c8:	eba2 020e 	sub.w	r2, r2, lr
 801d2cc:	4565      	cmp	r5, ip
 801d2ce:	bf88      	it	hi
 801d2d0:	2200      	movhi	r2, #0
 801d2d2:	4413      	add	r3, r2
 801d2d4:	1a18      	subs	r0, r3, r0
 801d2d6:	b003      	add	sp, #12
 801d2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2da:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d2de:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d2e2:	e7ed      	b.n	801d2c0 <__exponent+0x4c>
 801d2e4:	2330      	movs	r3, #48	; 0x30
 801d2e6:	3130      	adds	r1, #48	; 0x30
 801d2e8:	7083      	strb	r3, [r0, #2]
 801d2ea:	70c1      	strb	r1, [r0, #3]
 801d2ec:	1d03      	adds	r3, r0, #4
 801d2ee:	e7f1      	b.n	801d2d4 <__exponent+0x60>

0801d2f0 <_printf_float>:
 801d2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2f4:	ed2d 8b02 	vpush	{d8}
 801d2f8:	b08d      	sub	sp, #52	; 0x34
 801d2fa:	460c      	mov	r4, r1
 801d2fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d300:	4616      	mov	r6, r2
 801d302:	461f      	mov	r7, r3
 801d304:	4605      	mov	r5, r0
 801d306:	f002 ff97 	bl	8020238 <_localeconv_r>
 801d30a:	f8d0 a000 	ldr.w	sl, [r0]
 801d30e:	4650      	mov	r0, sl
 801d310:	f7e2 ff6e 	bl	80001f0 <strlen>
 801d314:	2300      	movs	r3, #0
 801d316:	930a      	str	r3, [sp, #40]	; 0x28
 801d318:	6823      	ldr	r3, [r4, #0]
 801d31a:	9305      	str	r3, [sp, #20]
 801d31c:	f8d8 3000 	ldr.w	r3, [r8]
 801d320:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d324:	3307      	adds	r3, #7
 801d326:	f023 0307 	bic.w	r3, r3, #7
 801d32a:	f103 0208 	add.w	r2, r3, #8
 801d32e:	f8c8 2000 	str.w	r2, [r8]
 801d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d336:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d33a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801d33e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d342:	9307      	str	r3, [sp, #28]
 801d344:	f8cd 8018 	str.w	r8, [sp, #24]
 801d348:	ee08 0a10 	vmov	s16, r0
 801d34c:	4b9f      	ldr	r3, [pc, #636]	; (801d5cc <_printf_float+0x2dc>)
 801d34e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d352:	f04f 32ff 	mov.w	r2, #4294967295
 801d356:	f7e3 fbf9 	bl	8000b4c <__aeabi_dcmpun>
 801d35a:	bb88      	cbnz	r0, 801d3c0 <_printf_float+0xd0>
 801d35c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d360:	4b9a      	ldr	r3, [pc, #616]	; (801d5cc <_printf_float+0x2dc>)
 801d362:	f04f 32ff 	mov.w	r2, #4294967295
 801d366:	f7e3 fbd3 	bl	8000b10 <__aeabi_dcmple>
 801d36a:	bb48      	cbnz	r0, 801d3c0 <_printf_float+0xd0>
 801d36c:	2200      	movs	r2, #0
 801d36e:	2300      	movs	r3, #0
 801d370:	4640      	mov	r0, r8
 801d372:	4649      	mov	r1, r9
 801d374:	f7e3 fbc2 	bl	8000afc <__aeabi_dcmplt>
 801d378:	b110      	cbz	r0, 801d380 <_printf_float+0x90>
 801d37a:	232d      	movs	r3, #45	; 0x2d
 801d37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d380:	4b93      	ldr	r3, [pc, #588]	; (801d5d0 <_printf_float+0x2e0>)
 801d382:	4894      	ldr	r0, [pc, #592]	; (801d5d4 <_printf_float+0x2e4>)
 801d384:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d388:	bf94      	ite	ls
 801d38a:	4698      	movls	r8, r3
 801d38c:	4680      	movhi	r8, r0
 801d38e:	2303      	movs	r3, #3
 801d390:	6123      	str	r3, [r4, #16]
 801d392:	9b05      	ldr	r3, [sp, #20]
 801d394:	f023 0204 	bic.w	r2, r3, #4
 801d398:	6022      	str	r2, [r4, #0]
 801d39a:	f04f 0900 	mov.w	r9, #0
 801d39e:	9700      	str	r7, [sp, #0]
 801d3a0:	4633      	mov	r3, r6
 801d3a2:	aa0b      	add	r2, sp, #44	; 0x2c
 801d3a4:	4621      	mov	r1, r4
 801d3a6:	4628      	mov	r0, r5
 801d3a8:	f000 f9d8 	bl	801d75c <_printf_common>
 801d3ac:	3001      	adds	r0, #1
 801d3ae:	f040 8090 	bne.w	801d4d2 <_printf_float+0x1e2>
 801d3b2:	f04f 30ff 	mov.w	r0, #4294967295
 801d3b6:	b00d      	add	sp, #52	; 0x34
 801d3b8:	ecbd 8b02 	vpop	{d8}
 801d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3c0:	4642      	mov	r2, r8
 801d3c2:	464b      	mov	r3, r9
 801d3c4:	4640      	mov	r0, r8
 801d3c6:	4649      	mov	r1, r9
 801d3c8:	f7e3 fbc0 	bl	8000b4c <__aeabi_dcmpun>
 801d3cc:	b140      	cbz	r0, 801d3e0 <_printf_float+0xf0>
 801d3ce:	464b      	mov	r3, r9
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	bfbc      	itt	lt
 801d3d4:	232d      	movlt	r3, #45	; 0x2d
 801d3d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d3da:	487f      	ldr	r0, [pc, #508]	; (801d5d8 <_printf_float+0x2e8>)
 801d3dc:	4b7f      	ldr	r3, [pc, #508]	; (801d5dc <_printf_float+0x2ec>)
 801d3de:	e7d1      	b.n	801d384 <_printf_float+0x94>
 801d3e0:	6863      	ldr	r3, [r4, #4]
 801d3e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d3e6:	9206      	str	r2, [sp, #24]
 801d3e8:	1c5a      	adds	r2, r3, #1
 801d3ea:	d13f      	bne.n	801d46c <_printf_float+0x17c>
 801d3ec:	2306      	movs	r3, #6
 801d3ee:	6063      	str	r3, [r4, #4]
 801d3f0:	9b05      	ldr	r3, [sp, #20]
 801d3f2:	6861      	ldr	r1, [r4, #4]
 801d3f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d3f8:	2300      	movs	r3, #0
 801d3fa:	9303      	str	r3, [sp, #12]
 801d3fc:	ab0a      	add	r3, sp, #40	; 0x28
 801d3fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d402:	ab09      	add	r3, sp, #36	; 0x24
 801d404:	ec49 8b10 	vmov	d0, r8, r9
 801d408:	9300      	str	r3, [sp, #0]
 801d40a:	6022      	str	r2, [r4, #0]
 801d40c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d410:	4628      	mov	r0, r5
 801d412:	f7ff fecd 	bl	801d1b0 <__cvt>
 801d416:	9b06      	ldr	r3, [sp, #24]
 801d418:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d41a:	2b47      	cmp	r3, #71	; 0x47
 801d41c:	4680      	mov	r8, r0
 801d41e:	d108      	bne.n	801d432 <_printf_float+0x142>
 801d420:	1cc8      	adds	r0, r1, #3
 801d422:	db02      	blt.n	801d42a <_printf_float+0x13a>
 801d424:	6863      	ldr	r3, [r4, #4]
 801d426:	4299      	cmp	r1, r3
 801d428:	dd41      	ble.n	801d4ae <_printf_float+0x1be>
 801d42a:	f1ab 0b02 	sub.w	fp, fp, #2
 801d42e:	fa5f fb8b 	uxtb.w	fp, fp
 801d432:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d436:	d820      	bhi.n	801d47a <_printf_float+0x18a>
 801d438:	3901      	subs	r1, #1
 801d43a:	465a      	mov	r2, fp
 801d43c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d440:	9109      	str	r1, [sp, #36]	; 0x24
 801d442:	f7ff ff17 	bl	801d274 <__exponent>
 801d446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d448:	1813      	adds	r3, r2, r0
 801d44a:	2a01      	cmp	r2, #1
 801d44c:	4681      	mov	r9, r0
 801d44e:	6123      	str	r3, [r4, #16]
 801d450:	dc02      	bgt.n	801d458 <_printf_float+0x168>
 801d452:	6822      	ldr	r2, [r4, #0]
 801d454:	07d2      	lsls	r2, r2, #31
 801d456:	d501      	bpl.n	801d45c <_printf_float+0x16c>
 801d458:	3301      	adds	r3, #1
 801d45a:	6123      	str	r3, [r4, #16]
 801d45c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d460:	2b00      	cmp	r3, #0
 801d462:	d09c      	beq.n	801d39e <_printf_float+0xae>
 801d464:	232d      	movs	r3, #45	; 0x2d
 801d466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d46a:	e798      	b.n	801d39e <_printf_float+0xae>
 801d46c:	9a06      	ldr	r2, [sp, #24]
 801d46e:	2a47      	cmp	r2, #71	; 0x47
 801d470:	d1be      	bne.n	801d3f0 <_printf_float+0x100>
 801d472:	2b00      	cmp	r3, #0
 801d474:	d1bc      	bne.n	801d3f0 <_printf_float+0x100>
 801d476:	2301      	movs	r3, #1
 801d478:	e7b9      	b.n	801d3ee <_printf_float+0xfe>
 801d47a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d47e:	d118      	bne.n	801d4b2 <_printf_float+0x1c2>
 801d480:	2900      	cmp	r1, #0
 801d482:	6863      	ldr	r3, [r4, #4]
 801d484:	dd0b      	ble.n	801d49e <_printf_float+0x1ae>
 801d486:	6121      	str	r1, [r4, #16]
 801d488:	b913      	cbnz	r3, 801d490 <_printf_float+0x1a0>
 801d48a:	6822      	ldr	r2, [r4, #0]
 801d48c:	07d0      	lsls	r0, r2, #31
 801d48e:	d502      	bpl.n	801d496 <_printf_float+0x1a6>
 801d490:	3301      	adds	r3, #1
 801d492:	440b      	add	r3, r1
 801d494:	6123      	str	r3, [r4, #16]
 801d496:	65a1      	str	r1, [r4, #88]	; 0x58
 801d498:	f04f 0900 	mov.w	r9, #0
 801d49c:	e7de      	b.n	801d45c <_printf_float+0x16c>
 801d49e:	b913      	cbnz	r3, 801d4a6 <_printf_float+0x1b6>
 801d4a0:	6822      	ldr	r2, [r4, #0]
 801d4a2:	07d2      	lsls	r2, r2, #31
 801d4a4:	d501      	bpl.n	801d4aa <_printf_float+0x1ba>
 801d4a6:	3302      	adds	r3, #2
 801d4a8:	e7f4      	b.n	801d494 <_printf_float+0x1a4>
 801d4aa:	2301      	movs	r3, #1
 801d4ac:	e7f2      	b.n	801d494 <_printf_float+0x1a4>
 801d4ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4b4:	4299      	cmp	r1, r3
 801d4b6:	db05      	blt.n	801d4c4 <_printf_float+0x1d4>
 801d4b8:	6823      	ldr	r3, [r4, #0]
 801d4ba:	6121      	str	r1, [r4, #16]
 801d4bc:	07d8      	lsls	r0, r3, #31
 801d4be:	d5ea      	bpl.n	801d496 <_printf_float+0x1a6>
 801d4c0:	1c4b      	adds	r3, r1, #1
 801d4c2:	e7e7      	b.n	801d494 <_printf_float+0x1a4>
 801d4c4:	2900      	cmp	r1, #0
 801d4c6:	bfd4      	ite	le
 801d4c8:	f1c1 0202 	rsble	r2, r1, #2
 801d4cc:	2201      	movgt	r2, #1
 801d4ce:	4413      	add	r3, r2
 801d4d0:	e7e0      	b.n	801d494 <_printf_float+0x1a4>
 801d4d2:	6823      	ldr	r3, [r4, #0]
 801d4d4:	055a      	lsls	r2, r3, #21
 801d4d6:	d407      	bmi.n	801d4e8 <_printf_float+0x1f8>
 801d4d8:	6923      	ldr	r3, [r4, #16]
 801d4da:	4642      	mov	r2, r8
 801d4dc:	4631      	mov	r1, r6
 801d4de:	4628      	mov	r0, r5
 801d4e0:	47b8      	blx	r7
 801d4e2:	3001      	adds	r0, #1
 801d4e4:	d12c      	bne.n	801d540 <_printf_float+0x250>
 801d4e6:	e764      	b.n	801d3b2 <_printf_float+0xc2>
 801d4e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d4ec:	f240 80e0 	bls.w	801d6b0 <_printf_float+0x3c0>
 801d4f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	f7e3 faf6 	bl	8000ae8 <__aeabi_dcmpeq>
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	d034      	beq.n	801d56a <_printf_float+0x27a>
 801d500:	4a37      	ldr	r2, [pc, #220]	; (801d5e0 <_printf_float+0x2f0>)
 801d502:	2301      	movs	r3, #1
 801d504:	4631      	mov	r1, r6
 801d506:	4628      	mov	r0, r5
 801d508:	47b8      	blx	r7
 801d50a:	3001      	adds	r0, #1
 801d50c:	f43f af51 	beq.w	801d3b2 <_printf_float+0xc2>
 801d510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d514:	429a      	cmp	r2, r3
 801d516:	db02      	blt.n	801d51e <_printf_float+0x22e>
 801d518:	6823      	ldr	r3, [r4, #0]
 801d51a:	07d8      	lsls	r0, r3, #31
 801d51c:	d510      	bpl.n	801d540 <_printf_float+0x250>
 801d51e:	ee18 3a10 	vmov	r3, s16
 801d522:	4652      	mov	r2, sl
 801d524:	4631      	mov	r1, r6
 801d526:	4628      	mov	r0, r5
 801d528:	47b8      	blx	r7
 801d52a:	3001      	adds	r0, #1
 801d52c:	f43f af41 	beq.w	801d3b2 <_printf_float+0xc2>
 801d530:	f04f 0800 	mov.w	r8, #0
 801d534:	f104 091a 	add.w	r9, r4, #26
 801d538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d53a:	3b01      	subs	r3, #1
 801d53c:	4543      	cmp	r3, r8
 801d53e:	dc09      	bgt.n	801d554 <_printf_float+0x264>
 801d540:	6823      	ldr	r3, [r4, #0]
 801d542:	079b      	lsls	r3, r3, #30
 801d544:	f100 8105 	bmi.w	801d752 <_printf_float+0x462>
 801d548:	68e0      	ldr	r0, [r4, #12]
 801d54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d54c:	4298      	cmp	r0, r3
 801d54e:	bfb8      	it	lt
 801d550:	4618      	movlt	r0, r3
 801d552:	e730      	b.n	801d3b6 <_printf_float+0xc6>
 801d554:	2301      	movs	r3, #1
 801d556:	464a      	mov	r2, r9
 801d558:	4631      	mov	r1, r6
 801d55a:	4628      	mov	r0, r5
 801d55c:	47b8      	blx	r7
 801d55e:	3001      	adds	r0, #1
 801d560:	f43f af27 	beq.w	801d3b2 <_printf_float+0xc2>
 801d564:	f108 0801 	add.w	r8, r8, #1
 801d568:	e7e6      	b.n	801d538 <_printf_float+0x248>
 801d56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	dc39      	bgt.n	801d5e4 <_printf_float+0x2f4>
 801d570:	4a1b      	ldr	r2, [pc, #108]	; (801d5e0 <_printf_float+0x2f0>)
 801d572:	2301      	movs	r3, #1
 801d574:	4631      	mov	r1, r6
 801d576:	4628      	mov	r0, r5
 801d578:	47b8      	blx	r7
 801d57a:	3001      	adds	r0, #1
 801d57c:	f43f af19 	beq.w	801d3b2 <_printf_float+0xc2>
 801d580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d584:	4313      	orrs	r3, r2
 801d586:	d102      	bne.n	801d58e <_printf_float+0x29e>
 801d588:	6823      	ldr	r3, [r4, #0]
 801d58a:	07d9      	lsls	r1, r3, #31
 801d58c:	d5d8      	bpl.n	801d540 <_printf_float+0x250>
 801d58e:	ee18 3a10 	vmov	r3, s16
 801d592:	4652      	mov	r2, sl
 801d594:	4631      	mov	r1, r6
 801d596:	4628      	mov	r0, r5
 801d598:	47b8      	blx	r7
 801d59a:	3001      	adds	r0, #1
 801d59c:	f43f af09 	beq.w	801d3b2 <_printf_float+0xc2>
 801d5a0:	f04f 0900 	mov.w	r9, #0
 801d5a4:	f104 0a1a 	add.w	sl, r4, #26
 801d5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5aa:	425b      	negs	r3, r3
 801d5ac:	454b      	cmp	r3, r9
 801d5ae:	dc01      	bgt.n	801d5b4 <_printf_float+0x2c4>
 801d5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5b2:	e792      	b.n	801d4da <_printf_float+0x1ea>
 801d5b4:	2301      	movs	r3, #1
 801d5b6:	4652      	mov	r2, sl
 801d5b8:	4631      	mov	r1, r6
 801d5ba:	4628      	mov	r0, r5
 801d5bc:	47b8      	blx	r7
 801d5be:	3001      	adds	r0, #1
 801d5c0:	f43f aef7 	beq.w	801d3b2 <_printf_float+0xc2>
 801d5c4:	f109 0901 	add.w	r9, r9, #1
 801d5c8:	e7ee      	b.n	801d5a8 <_printf_float+0x2b8>
 801d5ca:	bf00      	nop
 801d5cc:	7fefffff 	.word	0x7fefffff
 801d5d0:	0802b590 	.word	0x0802b590
 801d5d4:	0802b594 	.word	0x0802b594
 801d5d8:	0802b59c 	.word	0x0802b59c
 801d5dc:	0802b598 	.word	0x0802b598
 801d5e0:	0802b5a0 	.word	0x0802b5a0
 801d5e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d5e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d5e8:	429a      	cmp	r2, r3
 801d5ea:	bfa8      	it	ge
 801d5ec:	461a      	movge	r2, r3
 801d5ee:	2a00      	cmp	r2, #0
 801d5f0:	4691      	mov	r9, r2
 801d5f2:	dc37      	bgt.n	801d664 <_printf_float+0x374>
 801d5f4:	f04f 0b00 	mov.w	fp, #0
 801d5f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d5fc:	f104 021a 	add.w	r2, r4, #26
 801d600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d602:	9305      	str	r3, [sp, #20]
 801d604:	eba3 0309 	sub.w	r3, r3, r9
 801d608:	455b      	cmp	r3, fp
 801d60a:	dc33      	bgt.n	801d674 <_printf_float+0x384>
 801d60c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d610:	429a      	cmp	r2, r3
 801d612:	db3b      	blt.n	801d68c <_printf_float+0x39c>
 801d614:	6823      	ldr	r3, [r4, #0]
 801d616:	07da      	lsls	r2, r3, #31
 801d618:	d438      	bmi.n	801d68c <_printf_float+0x39c>
 801d61a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d61c:	9b05      	ldr	r3, [sp, #20]
 801d61e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d620:	1ad3      	subs	r3, r2, r3
 801d622:	eba2 0901 	sub.w	r9, r2, r1
 801d626:	4599      	cmp	r9, r3
 801d628:	bfa8      	it	ge
 801d62a:	4699      	movge	r9, r3
 801d62c:	f1b9 0f00 	cmp.w	r9, #0
 801d630:	dc35      	bgt.n	801d69e <_printf_float+0x3ae>
 801d632:	f04f 0800 	mov.w	r8, #0
 801d636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d63a:	f104 0a1a 	add.w	sl, r4, #26
 801d63e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d642:	1a9b      	subs	r3, r3, r2
 801d644:	eba3 0309 	sub.w	r3, r3, r9
 801d648:	4543      	cmp	r3, r8
 801d64a:	f77f af79 	ble.w	801d540 <_printf_float+0x250>
 801d64e:	2301      	movs	r3, #1
 801d650:	4652      	mov	r2, sl
 801d652:	4631      	mov	r1, r6
 801d654:	4628      	mov	r0, r5
 801d656:	47b8      	blx	r7
 801d658:	3001      	adds	r0, #1
 801d65a:	f43f aeaa 	beq.w	801d3b2 <_printf_float+0xc2>
 801d65e:	f108 0801 	add.w	r8, r8, #1
 801d662:	e7ec      	b.n	801d63e <_printf_float+0x34e>
 801d664:	4613      	mov	r3, r2
 801d666:	4631      	mov	r1, r6
 801d668:	4642      	mov	r2, r8
 801d66a:	4628      	mov	r0, r5
 801d66c:	47b8      	blx	r7
 801d66e:	3001      	adds	r0, #1
 801d670:	d1c0      	bne.n	801d5f4 <_printf_float+0x304>
 801d672:	e69e      	b.n	801d3b2 <_printf_float+0xc2>
 801d674:	2301      	movs	r3, #1
 801d676:	4631      	mov	r1, r6
 801d678:	4628      	mov	r0, r5
 801d67a:	9205      	str	r2, [sp, #20]
 801d67c:	47b8      	blx	r7
 801d67e:	3001      	adds	r0, #1
 801d680:	f43f ae97 	beq.w	801d3b2 <_printf_float+0xc2>
 801d684:	9a05      	ldr	r2, [sp, #20]
 801d686:	f10b 0b01 	add.w	fp, fp, #1
 801d68a:	e7b9      	b.n	801d600 <_printf_float+0x310>
 801d68c:	ee18 3a10 	vmov	r3, s16
 801d690:	4652      	mov	r2, sl
 801d692:	4631      	mov	r1, r6
 801d694:	4628      	mov	r0, r5
 801d696:	47b8      	blx	r7
 801d698:	3001      	adds	r0, #1
 801d69a:	d1be      	bne.n	801d61a <_printf_float+0x32a>
 801d69c:	e689      	b.n	801d3b2 <_printf_float+0xc2>
 801d69e:	9a05      	ldr	r2, [sp, #20]
 801d6a0:	464b      	mov	r3, r9
 801d6a2:	4442      	add	r2, r8
 801d6a4:	4631      	mov	r1, r6
 801d6a6:	4628      	mov	r0, r5
 801d6a8:	47b8      	blx	r7
 801d6aa:	3001      	adds	r0, #1
 801d6ac:	d1c1      	bne.n	801d632 <_printf_float+0x342>
 801d6ae:	e680      	b.n	801d3b2 <_printf_float+0xc2>
 801d6b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d6b2:	2a01      	cmp	r2, #1
 801d6b4:	dc01      	bgt.n	801d6ba <_printf_float+0x3ca>
 801d6b6:	07db      	lsls	r3, r3, #31
 801d6b8:	d538      	bpl.n	801d72c <_printf_float+0x43c>
 801d6ba:	2301      	movs	r3, #1
 801d6bc:	4642      	mov	r2, r8
 801d6be:	4631      	mov	r1, r6
 801d6c0:	4628      	mov	r0, r5
 801d6c2:	47b8      	blx	r7
 801d6c4:	3001      	adds	r0, #1
 801d6c6:	f43f ae74 	beq.w	801d3b2 <_printf_float+0xc2>
 801d6ca:	ee18 3a10 	vmov	r3, s16
 801d6ce:	4652      	mov	r2, sl
 801d6d0:	4631      	mov	r1, r6
 801d6d2:	4628      	mov	r0, r5
 801d6d4:	47b8      	blx	r7
 801d6d6:	3001      	adds	r0, #1
 801d6d8:	f43f ae6b 	beq.w	801d3b2 <_printf_float+0xc2>
 801d6dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	f7e3 fa00 	bl	8000ae8 <__aeabi_dcmpeq>
 801d6e8:	b9d8      	cbnz	r0, 801d722 <_printf_float+0x432>
 801d6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6ec:	f108 0201 	add.w	r2, r8, #1
 801d6f0:	3b01      	subs	r3, #1
 801d6f2:	4631      	mov	r1, r6
 801d6f4:	4628      	mov	r0, r5
 801d6f6:	47b8      	blx	r7
 801d6f8:	3001      	adds	r0, #1
 801d6fa:	d10e      	bne.n	801d71a <_printf_float+0x42a>
 801d6fc:	e659      	b.n	801d3b2 <_printf_float+0xc2>
 801d6fe:	2301      	movs	r3, #1
 801d700:	4652      	mov	r2, sl
 801d702:	4631      	mov	r1, r6
 801d704:	4628      	mov	r0, r5
 801d706:	47b8      	blx	r7
 801d708:	3001      	adds	r0, #1
 801d70a:	f43f ae52 	beq.w	801d3b2 <_printf_float+0xc2>
 801d70e:	f108 0801 	add.w	r8, r8, #1
 801d712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d714:	3b01      	subs	r3, #1
 801d716:	4543      	cmp	r3, r8
 801d718:	dcf1      	bgt.n	801d6fe <_printf_float+0x40e>
 801d71a:	464b      	mov	r3, r9
 801d71c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d720:	e6dc      	b.n	801d4dc <_printf_float+0x1ec>
 801d722:	f04f 0800 	mov.w	r8, #0
 801d726:	f104 0a1a 	add.w	sl, r4, #26
 801d72a:	e7f2      	b.n	801d712 <_printf_float+0x422>
 801d72c:	2301      	movs	r3, #1
 801d72e:	4642      	mov	r2, r8
 801d730:	e7df      	b.n	801d6f2 <_printf_float+0x402>
 801d732:	2301      	movs	r3, #1
 801d734:	464a      	mov	r2, r9
 801d736:	4631      	mov	r1, r6
 801d738:	4628      	mov	r0, r5
 801d73a:	47b8      	blx	r7
 801d73c:	3001      	adds	r0, #1
 801d73e:	f43f ae38 	beq.w	801d3b2 <_printf_float+0xc2>
 801d742:	f108 0801 	add.w	r8, r8, #1
 801d746:	68e3      	ldr	r3, [r4, #12]
 801d748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d74a:	1a5b      	subs	r3, r3, r1
 801d74c:	4543      	cmp	r3, r8
 801d74e:	dcf0      	bgt.n	801d732 <_printf_float+0x442>
 801d750:	e6fa      	b.n	801d548 <_printf_float+0x258>
 801d752:	f04f 0800 	mov.w	r8, #0
 801d756:	f104 0919 	add.w	r9, r4, #25
 801d75a:	e7f4      	b.n	801d746 <_printf_float+0x456>

0801d75c <_printf_common>:
 801d75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d760:	4616      	mov	r6, r2
 801d762:	4699      	mov	r9, r3
 801d764:	688a      	ldr	r2, [r1, #8]
 801d766:	690b      	ldr	r3, [r1, #16]
 801d768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d76c:	4293      	cmp	r3, r2
 801d76e:	bfb8      	it	lt
 801d770:	4613      	movlt	r3, r2
 801d772:	6033      	str	r3, [r6, #0]
 801d774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d778:	4607      	mov	r7, r0
 801d77a:	460c      	mov	r4, r1
 801d77c:	b10a      	cbz	r2, 801d782 <_printf_common+0x26>
 801d77e:	3301      	adds	r3, #1
 801d780:	6033      	str	r3, [r6, #0]
 801d782:	6823      	ldr	r3, [r4, #0]
 801d784:	0699      	lsls	r1, r3, #26
 801d786:	bf42      	ittt	mi
 801d788:	6833      	ldrmi	r3, [r6, #0]
 801d78a:	3302      	addmi	r3, #2
 801d78c:	6033      	strmi	r3, [r6, #0]
 801d78e:	6825      	ldr	r5, [r4, #0]
 801d790:	f015 0506 	ands.w	r5, r5, #6
 801d794:	d106      	bne.n	801d7a4 <_printf_common+0x48>
 801d796:	f104 0a19 	add.w	sl, r4, #25
 801d79a:	68e3      	ldr	r3, [r4, #12]
 801d79c:	6832      	ldr	r2, [r6, #0]
 801d79e:	1a9b      	subs	r3, r3, r2
 801d7a0:	42ab      	cmp	r3, r5
 801d7a2:	dc26      	bgt.n	801d7f2 <_printf_common+0x96>
 801d7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d7a8:	1e13      	subs	r3, r2, #0
 801d7aa:	6822      	ldr	r2, [r4, #0]
 801d7ac:	bf18      	it	ne
 801d7ae:	2301      	movne	r3, #1
 801d7b0:	0692      	lsls	r2, r2, #26
 801d7b2:	d42b      	bmi.n	801d80c <_printf_common+0xb0>
 801d7b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d7b8:	4649      	mov	r1, r9
 801d7ba:	4638      	mov	r0, r7
 801d7bc:	47c0      	blx	r8
 801d7be:	3001      	adds	r0, #1
 801d7c0:	d01e      	beq.n	801d800 <_printf_common+0xa4>
 801d7c2:	6823      	ldr	r3, [r4, #0]
 801d7c4:	68e5      	ldr	r5, [r4, #12]
 801d7c6:	6832      	ldr	r2, [r6, #0]
 801d7c8:	f003 0306 	and.w	r3, r3, #6
 801d7cc:	2b04      	cmp	r3, #4
 801d7ce:	bf08      	it	eq
 801d7d0:	1aad      	subeq	r5, r5, r2
 801d7d2:	68a3      	ldr	r3, [r4, #8]
 801d7d4:	6922      	ldr	r2, [r4, #16]
 801d7d6:	bf0c      	ite	eq
 801d7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d7dc:	2500      	movne	r5, #0
 801d7de:	4293      	cmp	r3, r2
 801d7e0:	bfc4      	itt	gt
 801d7e2:	1a9b      	subgt	r3, r3, r2
 801d7e4:	18ed      	addgt	r5, r5, r3
 801d7e6:	2600      	movs	r6, #0
 801d7e8:	341a      	adds	r4, #26
 801d7ea:	42b5      	cmp	r5, r6
 801d7ec:	d11a      	bne.n	801d824 <_printf_common+0xc8>
 801d7ee:	2000      	movs	r0, #0
 801d7f0:	e008      	b.n	801d804 <_printf_common+0xa8>
 801d7f2:	2301      	movs	r3, #1
 801d7f4:	4652      	mov	r2, sl
 801d7f6:	4649      	mov	r1, r9
 801d7f8:	4638      	mov	r0, r7
 801d7fa:	47c0      	blx	r8
 801d7fc:	3001      	adds	r0, #1
 801d7fe:	d103      	bne.n	801d808 <_printf_common+0xac>
 801d800:	f04f 30ff 	mov.w	r0, #4294967295
 801d804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d808:	3501      	adds	r5, #1
 801d80a:	e7c6      	b.n	801d79a <_printf_common+0x3e>
 801d80c:	18e1      	adds	r1, r4, r3
 801d80e:	1c5a      	adds	r2, r3, #1
 801d810:	2030      	movs	r0, #48	; 0x30
 801d812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d816:	4422      	add	r2, r4
 801d818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d81c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d820:	3302      	adds	r3, #2
 801d822:	e7c7      	b.n	801d7b4 <_printf_common+0x58>
 801d824:	2301      	movs	r3, #1
 801d826:	4622      	mov	r2, r4
 801d828:	4649      	mov	r1, r9
 801d82a:	4638      	mov	r0, r7
 801d82c:	47c0      	blx	r8
 801d82e:	3001      	adds	r0, #1
 801d830:	d0e6      	beq.n	801d800 <_printf_common+0xa4>
 801d832:	3601      	adds	r6, #1
 801d834:	e7d9      	b.n	801d7ea <_printf_common+0x8e>
	...

0801d838 <_printf_i>:
 801d838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d83c:	460c      	mov	r4, r1
 801d83e:	4691      	mov	r9, r2
 801d840:	7e27      	ldrb	r7, [r4, #24]
 801d842:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d844:	2f78      	cmp	r7, #120	; 0x78
 801d846:	4680      	mov	r8, r0
 801d848:	469a      	mov	sl, r3
 801d84a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d84e:	d807      	bhi.n	801d860 <_printf_i+0x28>
 801d850:	2f62      	cmp	r7, #98	; 0x62
 801d852:	d80a      	bhi.n	801d86a <_printf_i+0x32>
 801d854:	2f00      	cmp	r7, #0
 801d856:	f000 80d8 	beq.w	801da0a <_printf_i+0x1d2>
 801d85a:	2f58      	cmp	r7, #88	; 0x58
 801d85c:	f000 80a3 	beq.w	801d9a6 <_printf_i+0x16e>
 801d860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d868:	e03a      	b.n	801d8e0 <_printf_i+0xa8>
 801d86a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d86e:	2b15      	cmp	r3, #21
 801d870:	d8f6      	bhi.n	801d860 <_printf_i+0x28>
 801d872:	a001      	add	r0, pc, #4	; (adr r0, 801d878 <_printf_i+0x40>)
 801d874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d878:	0801d8d1 	.word	0x0801d8d1
 801d87c:	0801d8e5 	.word	0x0801d8e5
 801d880:	0801d861 	.word	0x0801d861
 801d884:	0801d861 	.word	0x0801d861
 801d888:	0801d861 	.word	0x0801d861
 801d88c:	0801d861 	.word	0x0801d861
 801d890:	0801d8e5 	.word	0x0801d8e5
 801d894:	0801d861 	.word	0x0801d861
 801d898:	0801d861 	.word	0x0801d861
 801d89c:	0801d861 	.word	0x0801d861
 801d8a0:	0801d861 	.word	0x0801d861
 801d8a4:	0801d9f1 	.word	0x0801d9f1
 801d8a8:	0801d915 	.word	0x0801d915
 801d8ac:	0801d9d3 	.word	0x0801d9d3
 801d8b0:	0801d861 	.word	0x0801d861
 801d8b4:	0801d861 	.word	0x0801d861
 801d8b8:	0801da13 	.word	0x0801da13
 801d8bc:	0801d861 	.word	0x0801d861
 801d8c0:	0801d915 	.word	0x0801d915
 801d8c4:	0801d861 	.word	0x0801d861
 801d8c8:	0801d861 	.word	0x0801d861
 801d8cc:	0801d9db 	.word	0x0801d9db
 801d8d0:	680b      	ldr	r3, [r1, #0]
 801d8d2:	1d1a      	adds	r2, r3, #4
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	600a      	str	r2, [r1, #0]
 801d8d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d8dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d8e0:	2301      	movs	r3, #1
 801d8e2:	e0a3      	b.n	801da2c <_printf_i+0x1f4>
 801d8e4:	6825      	ldr	r5, [r4, #0]
 801d8e6:	6808      	ldr	r0, [r1, #0]
 801d8e8:	062e      	lsls	r6, r5, #24
 801d8ea:	f100 0304 	add.w	r3, r0, #4
 801d8ee:	d50a      	bpl.n	801d906 <_printf_i+0xce>
 801d8f0:	6805      	ldr	r5, [r0, #0]
 801d8f2:	600b      	str	r3, [r1, #0]
 801d8f4:	2d00      	cmp	r5, #0
 801d8f6:	da03      	bge.n	801d900 <_printf_i+0xc8>
 801d8f8:	232d      	movs	r3, #45	; 0x2d
 801d8fa:	426d      	negs	r5, r5
 801d8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d900:	485e      	ldr	r0, [pc, #376]	; (801da7c <_printf_i+0x244>)
 801d902:	230a      	movs	r3, #10
 801d904:	e019      	b.n	801d93a <_printf_i+0x102>
 801d906:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d90a:	6805      	ldr	r5, [r0, #0]
 801d90c:	600b      	str	r3, [r1, #0]
 801d90e:	bf18      	it	ne
 801d910:	b22d      	sxthne	r5, r5
 801d912:	e7ef      	b.n	801d8f4 <_printf_i+0xbc>
 801d914:	680b      	ldr	r3, [r1, #0]
 801d916:	6825      	ldr	r5, [r4, #0]
 801d918:	1d18      	adds	r0, r3, #4
 801d91a:	6008      	str	r0, [r1, #0]
 801d91c:	0628      	lsls	r0, r5, #24
 801d91e:	d501      	bpl.n	801d924 <_printf_i+0xec>
 801d920:	681d      	ldr	r5, [r3, #0]
 801d922:	e002      	b.n	801d92a <_printf_i+0xf2>
 801d924:	0669      	lsls	r1, r5, #25
 801d926:	d5fb      	bpl.n	801d920 <_printf_i+0xe8>
 801d928:	881d      	ldrh	r5, [r3, #0]
 801d92a:	4854      	ldr	r0, [pc, #336]	; (801da7c <_printf_i+0x244>)
 801d92c:	2f6f      	cmp	r7, #111	; 0x6f
 801d92e:	bf0c      	ite	eq
 801d930:	2308      	moveq	r3, #8
 801d932:	230a      	movne	r3, #10
 801d934:	2100      	movs	r1, #0
 801d936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d93a:	6866      	ldr	r6, [r4, #4]
 801d93c:	60a6      	str	r6, [r4, #8]
 801d93e:	2e00      	cmp	r6, #0
 801d940:	bfa2      	ittt	ge
 801d942:	6821      	ldrge	r1, [r4, #0]
 801d944:	f021 0104 	bicge.w	r1, r1, #4
 801d948:	6021      	strge	r1, [r4, #0]
 801d94a:	b90d      	cbnz	r5, 801d950 <_printf_i+0x118>
 801d94c:	2e00      	cmp	r6, #0
 801d94e:	d04d      	beq.n	801d9ec <_printf_i+0x1b4>
 801d950:	4616      	mov	r6, r2
 801d952:	fbb5 f1f3 	udiv	r1, r5, r3
 801d956:	fb03 5711 	mls	r7, r3, r1, r5
 801d95a:	5dc7      	ldrb	r7, [r0, r7]
 801d95c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d960:	462f      	mov	r7, r5
 801d962:	42bb      	cmp	r3, r7
 801d964:	460d      	mov	r5, r1
 801d966:	d9f4      	bls.n	801d952 <_printf_i+0x11a>
 801d968:	2b08      	cmp	r3, #8
 801d96a:	d10b      	bne.n	801d984 <_printf_i+0x14c>
 801d96c:	6823      	ldr	r3, [r4, #0]
 801d96e:	07df      	lsls	r7, r3, #31
 801d970:	d508      	bpl.n	801d984 <_printf_i+0x14c>
 801d972:	6923      	ldr	r3, [r4, #16]
 801d974:	6861      	ldr	r1, [r4, #4]
 801d976:	4299      	cmp	r1, r3
 801d978:	bfde      	ittt	le
 801d97a:	2330      	movle	r3, #48	; 0x30
 801d97c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d980:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d984:	1b92      	subs	r2, r2, r6
 801d986:	6122      	str	r2, [r4, #16]
 801d988:	f8cd a000 	str.w	sl, [sp]
 801d98c:	464b      	mov	r3, r9
 801d98e:	aa03      	add	r2, sp, #12
 801d990:	4621      	mov	r1, r4
 801d992:	4640      	mov	r0, r8
 801d994:	f7ff fee2 	bl	801d75c <_printf_common>
 801d998:	3001      	adds	r0, #1
 801d99a:	d14c      	bne.n	801da36 <_printf_i+0x1fe>
 801d99c:	f04f 30ff 	mov.w	r0, #4294967295
 801d9a0:	b004      	add	sp, #16
 801d9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9a6:	4835      	ldr	r0, [pc, #212]	; (801da7c <_printf_i+0x244>)
 801d9a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d9ac:	6823      	ldr	r3, [r4, #0]
 801d9ae:	680e      	ldr	r6, [r1, #0]
 801d9b0:	061f      	lsls	r7, r3, #24
 801d9b2:	f856 5b04 	ldr.w	r5, [r6], #4
 801d9b6:	600e      	str	r6, [r1, #0]
 801d9b8:	d514      	bpl.n	801d9e4 <_printf_i+0x1ac>
 801d9ba:	07d9      	lsls	r1, r3, #31
 801d9bc:	bf44      	itt	mi
 801d9be:	f043 0320 	orrmi.w	r3, r3, #32
 801d9c2:	6023      	strmi	r3, [r4, #0]
 801d9c4:	b91d      	cbnz	r5, 801d9ce <_printf_i+0x196>
 801d9c6:	6823      	ldr	r3, [r4, #0]
 801d9c8:	f023 0320 	bic.w	r3, r3, #32
 801d9cc:	6023      	str	r3, [r4, #0]
 801d9ce:	2310      	movs	r3, #16
 801d9d0:	e7b0      	b.n	801d934 <_printf_i+0xfc>
 801d9d2:	6823      	ldr	r3, [r4, #0]
 801d9d4:	f043 0320 	orr.w	r3, r3, #32
 801d9d8:	6023      	str	r3, [r4, #0]
 801d9da:	2378      	movs	r3, #120	; 0x78
 801d9dc:	4828      	ldr	r0, [pc, #160]	; (801da80 <_printf_i+0x248>)
 801d9de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d9e2:	e7e3      	b.n	801d9ac <_printf_i+0x174>
 801d9e4:	065e      	lsls	r6, r3, #25
 801d9e6:	bf48      	it	mi
 801d9e8:	b2ad      	uxthmi	r5, r5
 801d9ea:	e7e6      	b.n	801d9ba <_printf_i+0x182>
 801d9ec:	4616      	mov	r6, r2
 801d9ee:	e7bb      	b.n	801d968 <_printf_i+0x130>
 801d9f0:	680b      	ldr	r3, [r1, #0]
 801d9f2:	6826      	ldr	r6, [r4, #0]
 801d9f4:	6960      	ldr	r0, [r4, #20]
 801d9f6:	1d1d      	adds	r5, r3, #4
 801d9f8:	600d      	str	r5, [r1, #0]
 801d9fa:	0635      	lsls	r5, r6, #24
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	d501      	bpl.n	801da04 <_printf_i+0x1cc>
 801da00:	6018      	str	r0, [r3, #0]
 801da02:	e002      	b.n	801da0a <_printf_i+0x1d2>
 801da04:	0671      	lsls	r1, r6, #25
 801da06:	d5fb      	bpl.n	801da00 <_printf_i+0x1c8>
 801da08:	8018      	strh	r0, [r3, #0]
 801da0a:	2300      	movs	r3, #0
 801da0c:	6123      	str	r3, [r4, #16]
 801da0e:	4616      	mov	r6, r2
 801da10:	e7ba      	b.n	801d988 <_printf_i+0x150>
 801da12:	680b      	ldr	r3, [r1, #0]
 801da14:	1d1a      	adds	r2, r3, #4
 801da16:	600a      	str	r2, [r1, #0]
 801da18:	681e      	ldr	r6, [r3, #0]
 801da1a:	6862      	ldr	r2, [r4, #4]
 801da1c:	2100      	movs	r1, #0
 801da1e:	4630      	mov	r0, r6
 801da20:	f7e2 fbee 	bl	8000200 <memchr>
 801da24:	b108      	cbz	r0, 801da2a <_printf_i+0x1f2>
 801da26:	1b80      	subs	r0, r0, r6
 801da28:	6060      	str	r0, [r4, #4]
 801da2a:	6863      	ldr	r3, [r4, #4]
 801da2c:	6123      	str	r3, [r4, #16]
 801da2e:	2300      	movs	r3, #0
 801da30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801da34:	e7a8      	b.n	801d988 <_printf_i+0x150>
 801da36:	6923      	ldr	r3, [r4, #16]
 801da38:	4632      	mov	r2, r6
 801da3a:	4649      	mov	r1, r9
 801da3c:	4640      	mov	r0, r8
 801da3e:	47d0      	blx	sl
 801da40:	3001      	adds	r0, #1
 801da42:	d0ab      	beq.n	801d99c <_printf_i+0x164>
 801da44:	6823      	ldr	r3, [r4, #0]
 801da46:	079b      	lsls	r3, r3, #30
 801da48:	d413      	bmi.n	801da72 <_printf_i+0x23a>
 801da4a:	68e0      	ldr	r0, [r4, #12]
 801da4c:	9b03      	ldr	r3, [sp, #12]
 801da4e:	4298      	cmp	r0, r3
 801da50:	bfb8      	it	lt
 801da52:	4618      	movlt	r0, r3
 801da54:	e7a4      	b.n	801d9a0 <_printf_i+0x168>
 801da56:	2301      	movs	r3, #1
 801da58:	4632      	mov	r2, r6
 801da5a:	4649      	mov	r1, r9
 801da5c:	4640      	mov	r0, r8
 801da5e:	47d0      	blx	sl
 801da60:	3001      	adds	r0, #1
 801da62:	d09b      	beq.n	801d99c <_printf_i+0x164>
 801da64:	3501      	adds	r5, #1
 801da66:	68e3      	ldr	r3, [r4, #12]
 801da68:	9903      	ldr	r1, [sp, #12]
 801da6a:	1a5b      	subs	r3, r3, r1
 801da6c:	42ab      	cmp	r3, r5
 801da6e:	dcf2      	bgt.n	801da56 <_printf_i+0x21e>
 801da70:	e7eb      	b.n	801da4a <_printf_i+0x212>
 801da72:	2500      	movs	r5, #0
 801da74:	f104 0619 	add.w	r6, r4, #25
 801da78:	e7f5      	b.n	801da66 <_printf_i+0x22e>
 801da7a:	bf00      	nop
 801da7c:	0802b5a2 	.word	0x0802b5a2
 801da80:	0802b5b3 	.word	0x0802b5b3

0801da84 <_scanf_float>:
 801da84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da88:	b087      	sub	sp, #28
 801da8a:	4617      	mov	r7, r2
 801da8c:	9303      	str	r3, [sp, #12]
 801da8e:	688b      	ldr	r3, [r1, #8]
 801da90:	1e5a      	subs	r2, r3, #1
 801da92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801da96:	bf83      	ittte	hi
 801da98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801da9c:	195b      	addhi	r3, r3, r5
 801da9e:	9302      	strhi	r3, [sp, #8]
 801daa0:	2300      	movls	r3, #0
 801daa2:	bf86      	itte	hi
 801daa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801daa8:	608b      	strhi	r3, [r1, #8]
 801daaa:	9302      	strls	r3, [sp, #8]
 801daac:	680b      	ldr	r3, [r1, #0]
 801daae:	468b      	mov	fp, r1
 801dab0:	2500      	movs	r5, #0
 801dab2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801dab6:	f84b 3b1c 	str.w	r3, [fp], #28
 801daba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801dabe:	4680      	mov	r8, r0
 801dac0:	460c      	mov	r4, r1
 801dac2:	465e      	mov	r6, fp
 801dac4:	46aa      	mov	sl, r5
 801dac6:	46a9      	mov	r9, r5
 801dac8:	9501      	str	r5, [sp, #4]
 801daca:	68a2      	ldr	r2, [r4, #8]
 801dacc:	b152      	cbz	r2, 801dae4 <_scanf_float+0x60>
 801dace:	683b      	ldr	r3, [r7, #0]
 801dad0:	781b      	ldrb	r3, [r3, #0]
 801dad2:	2b4e      	cmp	r3, #78	; 0x4e
 801dad4:	d864      	bhi.n	801dba0 <_scanf_float+0x11c>
 801dad6:	2b40      	cmp	r3, #64	; 0x40
 801dad8:	d83c      	bhi.n	801db54 <_scanf_float+0xd0>
 801dada:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801dade:	b2c8      	uxtb	r0, r1
 801dae0:	280e      	cmp	r0, #14
 801dae2:	d93a      	bls.n	801db5a <_scanf_float+0xd6>
 801dae4:	f1b9 0f00 	cmp.w	r9, #0
 801dae8:	d003      	beq.n	801daf2 <_scanf_float+0x6e>
 801daea:	6823      	ldr	r3, [r4, #0]
 801daec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801daf0:	6023      	str	r3, [r4, #0]
 801daf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801daf6:	f1ba 0f01 	cmp.w	sl, #1
 801dafa:	f200 8113 	bhi.w	801dd24 <_scanf_float+0x2a0>
 801dafe:	455e      	cmp	r6, fp
 801db00:	f200 8105 	bhi.w	801dd0e <_scanf_float+0x28a>
 801db04:	2501      	movs	r5, #1
 801db06:	4628      	mov	r0, r5
 801db08:	b007      	add	sp, #28
 801db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801db12:	2a0d      	cmp	r2, #13
 801db14:	d8e6      	bhi.n	801dae4 <_scanf_float+0x60>
 801db16:	a101      	add	r1, pc, #4	; (adr r1, 801db1c <_scanf_float+0x98>)
 801db18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801db1c:	0801dc5b 	.word	0x0801dc5b
 801db20:	0801dae5 	.word	0x0801dae5
 801db24:	0801dae5 	.word	0x0801dae5
 801db28:	0801dae5 	.word	0x0801dae5
 801db2c:	0801dcbb 	.word	0x0801dcbb
 801db30:	0801dc93 	.word	0x0801dc93
 801db34:	0801dae5 	.word	0x0801dae5
 801db38:	0801dae5 	.word	0x0801dae5
 801db3c:	0801dc69 	.word	0x0801dc69
 801db40:	0801dae5 	.word	0x0801dae5
 801db44:	0801dae5 	.word	0x0801dae5
 801db48:	0801dae5 	.word	0x0801dae5
 801db4c:	0801dae5 	.word	0x0801dae5
 801db50:	0801dc21 	.word	0x0801dc21
 801db54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801db58:	e7db      	b.n	801db12 <_scanf_float+0x8e>
 801db5a:	290e      	cmp	r1, #14
 801db5c:	d8c2      	bhi.n	801dae4 <_scanf_float+0x60>
 801db5e:	a001      	add	r0, pc, #4	; (adr r0, 801db64 <_scanf_float+0xe0>)
 801db60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801db64:	0801dc13 	.word	0x0801dc13
 801db68:	0801dae5 	.word	0x0801dae5
 801db6c:	0801dc13 	.word	0x0801dc13
 801db70:	0801dca7 	.word	0x0801dca7
 801db74:	0801dae5 	.word	0x0801dae5
 801db78:	0801dbc1 	.word	0x0801dbc1
 801db7c:	0801dbfd 	.word	0x0801dbfd
 801db80:	0801dbfd 	.word	0x0801dbfd
 801db84:	0801dbfd 	.word	0x0801dbfd
 801db88:	0801dbfd 	.word	0x0801dbfd
 801db8c:	0801dbfd 	.word	0x0801dbfd
 801db90:	0801dbfd 	.word	0x0801dbfd
 801db94:	0801dbfd 	.word	0x0801dbfd
 801db98:	0801dbfd 	.word	0x0801dbfd
 801db9c:	0801dbfd 	.word	0x0801dbfd
 801dba0:	2b6e      	cmp	r3, #110	; 0x6e
 801dba2:	d809      	bhi.n	801dbb8 <_scanf_float+0x134>
 801dba4:	2b60      	cmp	r3, #96	; 0x60
 801dba6:	d8b2      	bhi.n	801db0e <_scanf_float+0x8a>
 801dba8:	2b54      	cmp	r3, #84	; 0x54
 801dbaa:	d077      	beq.n	801dc9c <_scanf_float+0x218>
 801dbac:	2b59      	cmp	r3, #89	; 0x59
 801dbae:	d199      	bne.n	801dae4 <_scanf_float+0x60>
 801dbb0:	2d07      	cmp	r5, #7
 801dbb2:	d197      	bne.n	801dae4 <_scanf_float+0x60>
 801dbb4:	2508      	movs	r5, #8
 801dbb6:	e029      	b.n	801dc0c <_scanf_float+0x188>
 801dbb8:	2b74      	cmp	r3, #116	; 0x74
 801dbba:	d06f      	beq.n	801dc9c <_scanf_float+0x218>
 801dbbc:	2b79      	cmp	r3, #121	; 0x79
 801dbbe:	e7f6      	b.n	801dbae <_scanf_float+0x12a>
 801dbc0:	6821      	ldr	r1, [r4, #0]
 801dbc2:	05c8      	lsls	r0, r1, #23
 801dbc4:	d51a      	bpl.n	801dbfc <_scanf_float+0x178>
 801dbc6:	9b02      	ldr	r3, [sp, #8]
 801dbc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801dbcc:	6021      	str	r1, [r4, #0]
 801dbce:	f109 0901 	add.w	r9, r9, #1
 801dbd2:	b11b      	cbz	r3, 801dbdc <_scanf_float+0x158>
 801dbd4:	3b01      	subs	r3, #1
 801dbd6:	3201      	adds	r2, #1
 801dbd8:	9302      	str	r3, [sp, #8]
 801dbda:	60a2      	str	r2, [r4, #8]
 801dbdc:	68a3      	ldr	r3, [r4, #8]
 801dbde:	3b01      	subs	r3, #1
 801dbe0:	60a3      	str	r3, [r4, #8]
 801dbe2:	6923      	ldr	r3, [r4, #16]
 801dbe4:	3301      	adds	r3, #1
 801dbe6:	6123      	str	r3, [r4, #16]
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	3b01      	subs	r3, #1
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	607b      	str	r3, [r7, #4]
 801dbf0:	f340 8084 	ble.w	801dcfc <_scanf_float+0x278>
 801dbf4:	683b      	ldr	r3, [r7, #0]
 801dbf6:	3301      	adds	r3, #1
 801dbf8:	603b      	str	r3, [r7, #0]
 801dbfa:	e766      	b.n	801daca <_scanf_float+0x46>
 801dbfc:	eb1a 0f05 	cmn.w	sl, r5
 801dc00:	f47f af70 	bne.w	801dae4 <_scanf_float+0x60>
 801dc04:	6822      	ldr	r2, [r4, #0]
 801dc06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801dc0a:	6022      	str	r2, [r4, #0]
 801dc0c:	f806 3b01 	strb.w	r3, [r6], #1
 801dc10:	e7e4      	b.n	801dbdc <_scanf_float+0x158>
 801dc12:	6822      	ldr	r2, [r4, #0]
 801dc14:	0610      	lsls	r0, r2, #24
 801dc16:	f57f af65 	bpl.w	801dae4 <_scanf_float+0x60>
 801dc1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801dc1e:	e7f4      	b.n	801dc0a <_scanf_float+0x186>
 801dc20:	f1ba 0f00 	cmp.w	sl, #0
 801dc24:	d10e      	bne.n	801dc44 <_scanf_float+0x1c0>
 801dc26:	f1b9 0f00 	cmp.w	r9, #0
 801dc2a:	d10e      	bne.n	801dc4a <_scanf_float+0x1c6>
 801dc2c:	6822      	ldr	r2, [r4, #0]
 801dc2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dc32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dc36:	d108      	bne.n	801dc4a <_scanf_float+0x1c6>
 801dc38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dc3c:	6022      	str	r2, [r4, #0]
 801dc3e:	f04f 0a01 	mov.w	sl, #1
 801dc42:	e7e3      	b.n	801dc0c <_scanf_float+0x188>
 801dc44:	f1ba 0f02 	cmp.w	sl, #2
 801dc48:	d055      	beq.n	801dcf6 <_scanf_float+0x272>
 801dc4a:	2d01      	cmp	r5, #1
 801dc4c:	d002      	beq.n	801dc54 <_scanf_float+0x1d0>
 801dc4e:	2d04      	cmp	r5, #4
 801dc50:	f47f af48 	bne.w	801dae4 <_scanf_float+0x60>
 801dc54:	3501      	adds	r5, #1
 801dc56:	b2ed      	uxtb	r5, r5
 801dc58:	e7d8      	b.n	801dc0c <_scanf_float+0x188>
 801dc5a:	f1ba 0f01 	cmp.w	sl, #1
 801dc5e:	f47f af41 	bne.w	801dae4 <_scanf_float+0x60>
 801dc62:	f04f 0a02 	mov.w	sl, #2
 801dc66:	e7d1      	b.n	801dc0c <_scanf_float+0x188>
 801dc68:	b97d      	cbnz	r5, 801dc8a <_scanf_float+0x206>
 801dc6a:	f1b9 0f00 	cmp.w	r9, #0
 801dc6e:	f47f af3c 	bne.w	801daea <_scanf_float+0x66>
 801dc72:	6822      	ldr	r2, [r4, #0]
 801dc74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dc78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dc7c:	f47f af39 	bne.w	801daf2 <_scanf_float+0x6e>
 801dc80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dc84:	6022      	str	r2, [r4, #0]
 801dc86:	2501      	movs	r5, #1
 801dc88:	e7c0      	b.n	801dc0c <_scanf_float+0x188>
 801dc8a:	2d03      	cmp	r5, #3
 801dc8c:	d0e2      	beq.n	801dc54 <_scanf_float+0x1d0>
 801dc8e:	2d05      	cmp	r5, #5
 801dc90:	e7de      	b.n	801dc50 <_scanf_float+0x1cc>
 801dc92:	2d02      	cmp	r5, #2
 801dc94:	f47f af26 	bne.w	801dae4 <_scanf_float+0x60>
 801dc98:	2503      	movs	r5, #3
 801dc9a:	e7b7      	b.n	801dc0c <_scanf_float+0x188>
 801dc9c:	2d06      	cmp	r5, #6
 801dc9e:	f47f af21 	bne.w	801dae4 <_scanf_float+0x60>
 801dca2:	2507      	movs	r5, #7
 801dca4:	e7b2      	b.n	801dc0c <_scanf_float+0x188>
 801dca6:	6822      	ldr	r2, [r4, #0]
 801dca8:	0591      	lsls	r1, r2, #22
 801dcaa:	f57f af1b 	bpl.w	801dae4 <_scanf_float+0x60>
 801dcae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801dcb2:	6022      	str	r2, [r4, #0]
 801dcb4:	f8cd 9004 	str.w	r9, [sp, #4]
 801dcb8:	e7a8      	b.n	801dc0c <_scanf_float+0x188>
 801dcba:	6822      	ldr	r2, [r4, #0]
 801dcbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801dcc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801dcc4:	d006      	beq.n	801dcd4 <_scanf_float+0x250>
 801dcc6:	0550      	lsls	r0, r2, #21
 801dcc8:	f57f af0c 	bpl.w	801dae4 <_scanf_float+0x60>
 801dccc:	f1b9 0f00 	cmp.w	r9, #0
 801dcd0:	f43f af0f 	beq.w	801daf2 <_scanf_float+0x6e>
 801dcd4:	0591      	lsls	r1, r2, #22
 801dcd6:	bf58      	it	pl
 801dcd8:	9901      	ldrpl	r1, [sp, #4]
 801dcda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dcde:	bf58      	it	pl
 801dce0:	eba9 0101 	subpl.w	r1, r9, r1
 801dce4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801dce8:	bf58      	it	pl
 801dcea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801dcee:	6022      	str	r2, [r4, #0]
 801dcf0:	f04f 0900 	mov.w	r9, #0
 801dcf4:	e78a      	b.n	801dc0c <_scanf_float+0x188>
 801dcf6:	f04f 0a03 	mov.w	sl, #3
 801dcfa:	e787      	b.n	801dc0c <_scanf_float+0x188>
 801dcfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801dd00:	4639      	mov	r1, r7
 801dd02:	4640      	mov	r0, r8
 801dd04:	4798      	blx	r3
 801dd06:	2800      	cmp	r0, #0
 801dd08:	f43f aedf 	beq.w	801daca <_scanf_float+0x46>
 801dd0c:	e6ea      	b.n	801dae4 <_scanf_float+0x60>
 801dd0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dd12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dd16:	463a      	mov	r2, r7
 801dd18:	4640      	mov	r0, r8
 801dd1a:	4798      	blx	r3
 801dd1c:	6923      	ldr	r3, [r4, #16]
 801dd1e:	3b01      	subs	r3, #1
 801dd20:	6123      	str	r3, [r4, #16]
 801dd22:	e6ec      	b.n	801dafe <_scanf_float+0x7a>
 801dd24:	1e6b      	subs	r3, r5, #1
 801dd26:	2b06      	cmp	r3, #6
 801dd28:	d825      	bhi.n	801dd76 <_scanf_float+0x2f2>
 801dd2a:	2d02      	cmp	r5, #2
 801dd2c:	d836      	bhi.n	801dd9c <_scanf_float+0x318>
 801dd2e:	455e      	cmp	r6, fp
 801dd30:	f67f aee8 	bls.w	801db04 <_scanf_float+0x80>
 801dd34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dd38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dd3c:	463a      	mov	r2, r7
 801dd3e:	4640      	mov	r0, r8
 801dd40:	4798      	blx	r3
 801dd42:	6923      	ldr	r3, [r4, #16]
 801dd44:	3b01      	subs	r3, #1
 801dd46:	6123      	str	r3, [r4, #16]
 801dd48:	e7f1      	b.n	801dd2e <_scanf_float+0x2aa>
 801dd4a:	9802      	ldr	r0, [sp, #8]
 801dd4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dd50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801dd54:	9002      	str	r0, [sp, #8]
 801dd56:	463a      	mov	r2, r7
 801dd58:	4640      	mov	r0, r8
 801dd5a:	4798      	blx	r3
 801dd5c:	6923      	ldr	r3, [r4, #16]
 801dd5e:	3b01      	subs	r3, #1
 801dd60:	6123      	str	r3, [r4, #16]
 801dd62:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd66:	fa5f fa8a 	uxtb.w	sl, sl
 801dd6a:	f1ba 0f02 	cmp.w	sl, #2
 801dd6e:	d1ec      	bne.n	801dd4a <_scanf_float+0x2c6>
 801dd70:	3d03      	subs	r5, #3
 801dd72:	b2ed      	uxtb	r5, r5
 801dd74:	1b76      	subs	r6, r6, r5
 801dd76:	6823      	ldr	r3, [r4, #0]
 801dd78:	05da      	lsls	r2, r3, #23
 801dd7a:	d52f      	bpl.n	801dddc <_scanf_float+0x358>
 801dd7c:	055b      	lsls	r3, r3, #21
 801dd7e:	d510      	bpl.n	801dda2 <_scanf_float+0x31e>
 801dd80:	455e      	cmp	r6, fp
 801dd82:	f67f aebf 	bls.w	801db04 <_scanf_float+0x80>
 801dd86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dd8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dd8e:	463a      	mov	r2, r7
 801dd90:	4640      	mov	r0, r8
 801dd92:	4798      	blx	r3
 801dd94:	6923      	ldr	r3, [r4, #16]
 801dd96:	3b01      	subs	r3, #1
 801dd98:	6123      	str	r3, [r4, #16]
 801dd9a:	e7f1      	b.n	801dd80 <_scanf_float+0x2fc>
 801dd9c:	46aa      	mov	sl, r5
 801dd9e:	9602      	str	r6, [sp, #8]
 801dda0:	e7df      	b.n	801dd62 <_scanf_float+0x2de>
 801dda2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dda6:	6923      	ldr	r3, [r4, #16]
 801dda8:	2965      	cmp	r1, #101	; 0x65
 801ddaa:	f103 33ff 	add.w	r3, r3, #4294967295
 801ddae:	f106 35ff 	add.w	r5, r6, #4294967295
 801ddb2:	6123      	str	r3, [r4, #16]
 801ddb4:	d00c      	beq.n	801ddd0 <_scanf_float+0x34c>
 801ddb6:	2945      	cmp	r1, #69	; 0x45
 801ddb8:	d00a      	beq.n	801ddd0 <_scanf_float+0x34c>
 801ddba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ddbe:	463a      	mov	r2, r7
 801ddc0:	4640      	mov	r0, r8
 801ddc2:	4798      	blx	r3
 801ddc4:	6923      	ldr	r3, [r4, #16]
 801ddc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ddca:	3b01      	subs	r3, #1
 801ddcc:	1eb5      	subs	r5, r6, #2
 801ddce:	6123      	str	r3, [r4, #16]
 801ddd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ddd4:	463a      	mov	r2, r7
 801ddd6:	4640      	mov	r0, r8
 801ddd8:	4798      	blx	r3
 801ddda:	462e      	mov	r6, r5
 801dddc:	6825      	ldr	r5, [r4, #0]
 801ddde:	f015 0510 	ands.w	r5, r5, #16
 801dde2:	d158      	bne.n	801de96 <_scanf_float+0x412>
 801dde4:	7035      	strb	r5, [r6, #0]
 801dde6:	6823      	ldr	r3, [r4, #0]
 801dde8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ddec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ddf0:	d11c      	bne.n	801de2c <_scanf_float+0x3a8>
 801ddf2:	9b01      	ldr	r3, [sp, #4]
 801ddf4:	454b      	cmp	r3, r9
 801ddf6:	eba3 0209 	sub.w	r2, r3, r9
 801ddfa:	d124      	bne.n	801de46 <_scanf_float+0x3c2>
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	4659      	mov	r1, fp
 801de00:	4640      	mov	r0, r8
 801de02:	f000 feaf 	bl	801eb64 <_strtod_r>
 801de06:	9b03      	ldr	r3, [sp, #12]
 801de08:	6821      	ldr	r1, [r4, #0]
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	f011 0f02 	tst.w	r1, #2
 801de10:	ec57 6b10 	vmov	r6, r7, d0
 801de14:	f103 0204 	add.w	r2, r3, #4
 801de18:	d020      	beq.n	801de5c <_scanf_float+0x3d8>
 801de1a:	9903      	ldr	r1, [sp, #12]
 801de1c:	600a      	str	r2, [r1, #0]
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	e9c3 6700 	strd	r6, r7, [r3]
 801de24:	68e3      	ldr	r3, [r4, #12]
 801de26:	3301      	adds	r3, #1
 801de28:	60e3      	str	r3, [r4, #12]
 801de2a:	e66c      	b.n	801db06 <_scanf_float+0x82>
 801de2c:	9b04      	ldr	r3, [sp, #16]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d0e4      	beq.n	801ddfc <_scanf_float+0x378>
 801de32:	9905      	ldr	r1, [sp, #20]
 801de34:	230a      	movs	r3, #10
 801de36:	462a      	mov	r2, r5
 801de38:	3101      	adds	r1, #1
 801de3a:	4640      	mov	r0, r8
 801de3c:	f000 ff1c 	bl	801ec78 <_strtol_r>
 801de40:	9b04      	ldr	r3, [sp, #16]
 801de42:	9e05      	ldr	r6, [sp, #20]
 801de44:	1ac2      	subs	r2, r0, r3
 801de46:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801de4a:	429e      	cmp	r6, r3
 801de4c:	bf28      	it	cs
 801de4e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801de52:	4912      	ldr	r1, [pc, #72]	; (801de9c <_scanf_float+0x418>)
 801de54:	4630      	mov	r0, r6
 801de56:	f000 f82b 	bl	801deb0 <siprintf>
 801de5a:	e7cf      	b.n	801ddfc <_scanf_float+0x378>
 801de5c:	f011 0f04 	tst.w	r1, #4
 801de60:	9903      	ldr	r1, [sp, #12]
 801de62:	600a      	str	r2, [r1, #0]
 801de64:	d1db      	bne.n	801de1e <_scanf_float+0x39a>
 801de66:	f8d3 8000 	ldr.w	r8, [r3]
 801de6a:	ee10 2a10 	vmov	r2, s0
 801de6e:	ee10 0a10 	vmov	r0, s0
 801de72:	463b      	mov	r3, r7
 801de74:	4639      	mov	r1, r7
 801de76:	f7e2 fe69 	bl	8000b4c <__aeabi_dcmpun>
 801de7a:	b128      	cbz	r0, 801de88 <_scanf_float+0x404>
 801de7c:	4808      	ldr	r0, [pc, #32]	; (801dea0 <_scanf_float+0x41c>)
 801de7e:	f000 f811 	bl	801dea4 <nanf>
 801de82:	ed88 0a00 	vstr	s0, [r8]
 801de86:	e7cd      	b.n	801de24 <_scanf_float+0x3a0>
 801de88:	4630      	mov	r0, r6
 801de8a:	4639      	mov	r1, r7
 801de8c:	f7e2 febc 	bl	8000c08 <__aeabi_d2f>
 801de90:	f8c8 0000 	str.w	r0, [r8]
 801de94:	e7c6      	b.n	801de24 <_scanf_float+0x3a0>
 801de96:	2500      	movs	r5, #0
 801de98:	e635      	b.n	801db06 <_scanf_float+0x82>
 801de9a:	bf00      	nop
 801de9c:	0802b5c4 	.word	0x0802b5c4
 801dea0:	0802ba40 	.word	0x0802ba40

0801dea4 <nanf>:
 801dea4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801deac <nanf+0x8>
 801dea8:	4770      	bx	lr
 801deaa:	bf00      	nop
 801deac:	7fc00000 	.word	0x7fc00000

0801deb0 <siprintf>:
 801deb0:	b40e      	push	{r1, r2, r3}
 801deb2:	b500      	push	{lr}
 801deb4:	b09c      	sub	sp, #112	; 0x70
 801deb6:	ab1d      	add	r3, sp, #116	; 0x74
 801deb8:	9002      	str	r0, [sp, #8]
 801deba:	9006      	str	r0, [sp, #24]
 801debc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dec0:	4809      	ldr	r0, [pc, #36]	; (801dee8 <siprintf+0x38>)
 801dec2:	9107      	str	r1, [sp, #28]
 801dec4:	9104      	str	r1, [sp, #16]
 801dec6:	4909      	ldr	r1, [pc, #36]	; (801deec <siprintf+0x3c>)
 801dec8:	f853 2b04 	ldr.w	r2, [r3], #4
 801decc:	9105      	str	r1, [sp, #20]
 801dece:	6800      	ldr	r0, [r0, #0]
 801ded0:	9301      	str	r3, [sp, #4]
 801ded2:	a902      	add	r1, sp, #8
 801ded4:	f002 ffb0 	bl	8020e38 <_svfiprintf_r>
 801ded8:	9b02      	ldr	r3, [sp, #8]
 801deda:	2200      	movs	r2, #0
 801dedc:	701a      	strb	r2, [r3, #0]
 801dede:	b01c      	add	sp, #112	; 0x70
 801dee0:	f85d eb04 	ldr.w	lr, [sp], #4
 801dee4:	b003      	add	sp, #12
 801dee6:	4770      	bx	lr
 801dee8:	200006ec 	.word	0x200006ec
 801deec:	ffff0208 	.word	0xffff0208

0801def0 <strncpy>:
 801def0:	b510      	push	{r4, lr}
 801def2:	3901      	subs	r1, #1
 801def4:	4603      	mov	r3, r0
 801def6:	b132      	cbz	r2, 801df06 <strncpy+0x16>
 801def8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801defc:	f803 4b01 	strb.w	r4, [r3], #1
 801df00:	3a01      	subs	r2, #1
 801df02:	2c00      	cmp	r4, #0
 801df04:	d1f7      	bne.n	801def6 <strncpy+0x6>
 801df06:	441a      	add	r2, r3
 801df08:	2100      	movs	r1, #0
 801df0a:	4293      	cmp	r3, r2
 801df0c:	d100      	bne.n	801df10 <strncpy+0x20>
 801df0e:	bd10      	pop	{r4, pc}
 801df10:	f803 1b01 	strb.w	r1, [r3], #1
 801df14:	e7f9      	b.n	801df0a <strncpy+0x1a>

0801df16 <sulp>:
 801df16:	b570      	push	{r4, r5, r6, lr}
 801df18:	4604      	mov	r4, r0
 801df1a:	460d      	mov	r5, r1
 801df1c:	ec45 4b10 	vmov	d0, r4, r5
 801df20:	4616      	mov	r6, r2
 801df22:	f002 fd25 	bl	8020970 <__ulp>
 801df26:	ec51 0b10 	vmov	r0, r1, d0
 801df2a:	b17e      	cbz	r6, 801df4c <sulp+0x36>
 801df2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801df30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801df34:	2b00      	cmp	r3, #0
 801df36:	dd09      	ble.n	801df4c <sulp+0x36>
 801df38:	051b      	lsls	r3, r3, #20
 801df3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801df3e:	2400      	movs	r4, #0
 801df40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801df44:	4622      	mov	r2, r4
 801df46:	462b      	mov	r3, r5
 801df48:	f7e2 fb66 	bl	8000618 <__aeabi_dmul>
 801df4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801df50 <_strtod_l>:
 801df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df54:	b0a3      	sub	sp, #140	; 0x8c
 801df56:	461f      	mov	r7, r3
 801df58:	2300      	movs	r3, #0
 801df5a:	931e      	str	r3, [sp, #120]	; 0x78
 801df5c:	4ba4      	ldr	r3, [pc, #656]	; (801e1f0 <_strtod_l+0x2a0>)
 801df5e:	9219      	str	r2, [sp, #100]	; 0x64
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	9307      	str	r3, [sp, #28]
 801df64:	4604      	mov	r4, r0
 801df66:	4618      	mov	r0, r3
 801df68:	4688      	mov	r8, r1
 801df6a:	f7e2 f941 	bl	80001f0 <strlen>
 801df6e:	f04f 0a00 	mov.w	sl, #0
 801df72:	4605      	mov	r5, r0
 801df74:	f04f 0b00 	mov.w	fp, #0
 801df78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801df7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df7e:	781a      	ldrb	r2, [r3, #0]
 801df80:	2a2b      	cmp	r2, #43	; 0x2b
 801df82:	d04c      	beq.n	801e01e <_strtod_l+0xce>
 801df84:	d839      	bhi.n	801dffa <_strtod_l+0xaa>
 801df86:	2a0d      	cmp	r2, #13
 801df88:	d832      	bhi.n	801dff0 <_strtod_l+0xa0>
 801df8a:	2a08      	cmp	r2, #8
 801df8c:	d832      	bhi.n	801dff4 <_strtod_l+0xa4>
 801df8e:	2a00      	cmp	r2, #0
 801df90:	d03c      	beq.n	801e00c <_strtod_l+0xbc>
 801df92:	2300      	movs	r3, #0
 801df94:	930e      	str	r3, [sp, #56]	; 0x38
 801df96:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801df98:	7833      	ldrb	r3, [r6, #0]
 801df9a:	2b30      	cmp	r3, #48	; 0x30
 801df9c:	f040 80b4 	bne.w	801e108 <_strtod_l+0x1b8>
 801dfa0:	7873      	ldrb	r3, [r6, #1]
 801dfa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801dfa6:	2b58      	cmp	r3, #88	; 0x58
 801dfa8:	d16c      	bne.n	801e084 <_strtod_l+0x134>
 801dfaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfac:	9301      	str	r3, [sp, #4]
 801dfae:	ab1e      	add	r3, sp, #120	; 0x78
 801dfb0:	9702      	str	r7, [sp, #8]
 801dfb2:	9300      	str	r3, [sp, #0]
 801dfb4:	4a8f      	ldr	r2, [pc, #572]	; (801e1f4 <_strtod_l+0x2a4>)
 801dfb6:	ab1f      	add	r3, sp, #124	; 0x7c
 801dfb8:	a91d      	add	r1, sp, #116	; 0x74
 801dfba:	4620      	mov	r0, r4
 801dfbc:	f001 fe34 	bl	801fc28 <__gethex>
 801dfc0:	f010 0707 	ands.w	r7, r0, #7
 801dfc4:	4605      	mov	r5, r0
 801dfc6:	d005      	beq.n	801dfd4 <_strtod_l+0x84>
 801dfc8:	2f06      	cmp	r7, #6
 801dfca:	d12a      	bne.n	801e022 <_strtod_l+0xd2>
 801dfcc:	3601      	adds	r6, #1
 801dfce:	2300      	movs	r3, #0
 801dfd0:	961d      	str	r6, [sp, #116]	; 0x74
 801dfd2:	930e      	str	r3, [sp, #56]	; 0x38
 801dfd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	f040 8596 	bne.w	801eb08 <_strtod_l+0xbb8>
 801dfdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfde:	b1db      	cbz	r3, 801e018 <_strtod_l+0xc8>
 801dfe0:	4652      	mov	r2, sl
 801dfe2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801dfe6:	ec43 2b10 	vmov	d0, r2, r3
 801dfea:	b023      	add	sp, #140	; 0x8c
 801dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dff0:	2a20      	cmp	r2, #32
 801dff2:	d1ce      	bne.n	801df92 <_strtod_l+0x42>
 801dff4:	3301      	adds	r3, #1
 801dff6:	931d      	str	r3, [sp, #116]	; 0x74
 801dff8:	e7c0      	b.n	801df7c <_strtod_l+0x2c>
 801dffa:	2a2d      	cmp	r2, #45	; 0x2d
 801dffc:	d1c9      	bne.n	801df92 <_strtod_l+0x42>
 801dffe:	2201      	movs	r2, #1
 801e000:	920e      	str	r2, [sp, #56]	; 0x38
 801e002:	1c5a      	adds	r2, r3, #1
 801e004:	921d      	str	r2, [sp, #116]	; 0x74
 801e006:	785b      	ldrb	r3, [r3, #1]
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d1c4      	bne.n	801df96 <_strtod_l+0x46>
 801e00c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e00e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801e012:	2b00      	cmp	r3, #0
 801e014:	f040 8576 	bne.w	801eb04 <_strtod_l+0xbb4>
 801e018:	4652      	mov	r2, sl
 801e01a:	465b      	mov	r3, fp
 801e01c:	e7e3      	b.n	801dfe6 <_strtod_l+0x96>
 801e01e:	2200      	movs	r2, #0
 801e020:	e7ee      	b.n	801e000 <_strtod_l+0xb0>
 801e022:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e024:	b13a      	cbz	r2, 801e036 <_strtod_l+0xe6>
 801e026:	2135      	movs	r1, #53	; 0x35
 801e028:	a820      	add	r0, sp, #128	; 0x80
 801e02a:	f002 fdac 	bl	8020b86 <__copybits>
 801e02e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e030:	4620      	mov	r0, r4
 801e032:	f002 f971 	bl	8020318 <_Bfree>
 801e036:	3f01      	subs	r7, #1
 801e038:	2f05      	cmp	r7, #5
 801e03a:	d807      	bhi.n	801e04c <_strtod_l+0xfc>
 801e03c:	e8df f007 	tbb	[pc, r7]
 801e040:	1d180b0e 	.word	0x1d180b0e
 801e044:	030e      	.short	0x030e
 801e046:	f04f 0b00 	mov.w	fp, #0
 801e04a:	46da      	mov	sl, fp
 801e04c:	0728      	lsls	r0, r5, #28
 801e04e:	d5c1      	bpl.n	801dfd4 <_strtod_l+0x84>
 801e050:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801e054:	e7be      	b.n	801dfd4 <_strtod_l+0x84>
 801e056:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801e05a:	e7f7      	b.n	801e04c <_strtod_l+0xfc>
 801e05c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801e060:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e062:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801e066:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801e06a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801e06e:	e7ed      	b.n	801e04c <_strtod_l+0xfc>
 801e070:	f8df b184 	ldr.w	fp, [pc, #388]	; 801e1f8 <_strtod_l+0x2a8>
 801e074:	f04f 0a00 	mov.w	sl, #0
 801e078:	e7e8      	b.n	801e04c <_strtod_l+0xfc>
 801e07a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801e07e:	f04f 3aff 	mov.w	sl, #4294967295
 801e082:	e7e3      	b.n	801e04c <_strtod_l+0xfc>
 801e084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e086:	1c5a      	adds	r2, r3, #1
 801e088:	921d      	str	r2, [sp, #116]	; 0x74
 801e08a:	785b      	ldrb	r3, [r3, #1]
 801e08c:	2b30      	cmp	r3, #48	; 0x30
 801e08e:	d0f9      	beq.n	801e084 <_strtod_l+0x134>
 801e090:	2b00      	cmp	r3, #0
 801e092:	d09f      	beq.n	801dfd4 <_strtod_l+0x84>
 801e094:	2301      	movs	r3, #1
 801e096:	f04f 0900 	mov.w	r9, #0
 801e09a:	9304      	str	r3, [sp, #16]
 801e09c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e09e:	930a      	str	r3, [sp, #40]	; 0x28
 801e0a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e0a4:	464f      	mov	r7, r9
 801e0a6:	220a      	movs	r2, #10
 801e0a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e0aa:	7806      	ldrb	r6, [r0, #0]
 801e0ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801e0b0:	b2d9      	uxtb	r1, r3
 801e0b2:	2909      	cmp	r1, #9
 801e0b4:	d92a      	bls.n	801e10c <_strtod_l+0x1bc>
 801e0b6:	9907      	ldr	r1, [sp, #28]
 801e0b8:	462a      	mov	r2, r5
 801e0ba:	f003 f818 	bl	80210ee <strncmp>
 801e0be:	b398      	cbz	r0, 801e128 <_strtod_l+0x1d8>
 801e0c0:	2000      	movs	r0, #0
 801e0c2:	4633      	mov	r3, r6
 801e0c4:	463d      	mov	r5, r7
 801e0c6:	9007      	str	r0, [sp, #28]
 801e0c8:	4602      	mov	r2, r0
 801e0ca:	2b65      	cmp	r3, #101	; 0x65
 801e0cc:	d001      	beq.n	801e0d2 <_strtod_l+0x182>
 801e0ce:	2b45      	cmp	r3, #69	; 0x45
 801e0d0:	d118      	bne.n	801e104 <_strtod_l+0x1b4>
 801e0d2:	b91d      	cbnz	r5, 801e0dc <_strtod_l+0x18c>
 801e0d4:	9b04      	ldr	r3, [sp, #16]
 801e0d6:	4303      	orrs	r3, r0
 801e0d8:	d098      	beq.n	801e00c <_strtod_l+0xbc>
 801e0da:	2500      	movs	r5, #0
 801e0dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801e0e0:	f108 0301 	add.w	r3, r8, #1
 801e0e4:	931d      	str	r3, [sp, #116]	; 0x74
 801e0e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e0ea:	2b2b      	cmp	r3, #43	; 0x2b
 801e0ec:	d075      	beq.n	801e1da <_strtod_l+0x28a>
 801e0ee:	2b2d      	cmp	r3, #45	; 0x2d
 801e0f0:	d07b      	beq.n	801e1ea <_strtod_l+0x29a>
 801e0f2:	f04f 0c00 	mov.w	ip, #0
 801e0f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801e0fa:	2909      	cmp	r1, #9
 801e0fc:	f240 8082 	bls.w	801e204 <_strtod_l+0x2b4>
 801e100:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801e104:	2600      	movs	r6, #0
 801e106:	e09d      	b.n	801e244 <_strtod_l+0x2f4>
 801e108:	2300      	movs	r3, #0
 801e10a:	e7c4      	b.n	801e096 <_strtod_l+0x146>
 801e10c:	2f08      	cmp	r7, #8
 801e10e:	bfd8      	it	le
 801e110:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801e112:	f100 0001 	add.w	r0, r0, #1
 801e116:	bfda      	itte	le
 801e118:	fb02 3301 	mlale	r3, r2, r1, r3
 801e11c:	9309      	strle	r3, [sp, #36]	; 0x24
 801e11e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801e122:	3701      	adds	r7, #1
 801e124:	901d      	str	r0, [sp, #116]	; 0x74
 801e126:	e7bf      	b.n	801e0a8 <_strtod_l+0x158>
 801e128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e12a:	195a      	adds	r2, r3, r5
 801e12c:	921d      	str	r2, [sp, #116]	; 0x74
 801e12e:	5d5b      	ldrb	r3, [r3, r5]
 801e130:	2f00      	cmp	r7, #0
 801e132:	d037      	beq.n	801e1a4 <_strtod_l+0x254>
 801e134:	9007      	str	r0, [sp, #28]
 801e136:	463d      	mov	r5, r7
 801e138:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801e13c:	2a09      	cmp	r2, #9
 801e13e:	d912      	bls.n	801e166 <_strtod_l+0x216>
 801e140:	2201      	movs	r2, #1
 801e142:	e7c2      	b.n	801e0ca <_strtod_l+0x17a>
 801e144:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e146:	1c5a      	adds	r2, r3, #1
 801e148:	921d      	str	r2, [sp, #116]	; 0x74
 801e14a:	785b      	ldrb	r3, [r3, #1]
 801e14c:	3001      	adds	r0, #1
 801e14e:	2b30      	cmp	r3, #48	; 0x30
 801e150:	d0f8      	beq.n	801e144 <_strtod_l+0x1f4>
 801e152:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801e156:	2a08      	cmp	r2, #8
 801e158:	f200 84db 	bhi.w	801eb12 <_strtod_l+0xbc2>
 801e15c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e15e:	9007      	str	r0, [sp, #28]
 801e160:	2000      	movs	r0, #0
 801e162:	920a      	str	r2, [sp, #40]	; 0x28
 801e164:	4605      	mov	r5, r0
 801e166:	3b30      	subs	r3, #48	; 0x30
 801e168:	f100 0201 	add.w	r2, r0, #1
 801e16c:	d014      	beq.n	801e198 <_strtod_l+0x248>
 801e16e:	9907      	ldr	r1, [sp, #28]
 801e170:	4411      	add	r1, r2
 801e172:	9107      	str	r1, [sp, #28]
 801e174:	462a      	mov	r2, r5
 801e176:	eb00 0e05 	add.w	lr, r0, r5
 801e17a:	210a      	movs	r1, #10
 801e17c:	4572      	cmp	r2, lr
 801e17e:	d113      	bne.n	801e1a8 <_strtod_l+0x258>
 801e180:	182a      	adds	r2, r5, r0
 801e182:	2a08      	cmp	r2, #8
 801e184:	f105 0501 	add.w	r5, r5, #1
 801e188:	4405      	add	r5, r0
 801e18a:	dc1c      	bgt.n	801e1c6 <_strtod_l+0x276>
 801e18c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e18e:	220a      	movs	r2, #10
 801e190:	fb02 3301 	mla	r3, r2, r1, r3
 801e194:	9309      	str	r3, [sp, #36]	; 0x24
 801e196:	2200      	movs	r2, #0
 801e198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e19a:	1c59      	adds	r1, r3, #1
 801e19c:	911d      	str	r1, [sp, #116]	; 0x74
 801e19e:	785b      	ldrb	r3, [r3, #1]
 801e1a0:	4610      	mov	r0, r2
 801e1a2:	e7c9      	b.n	801e138 <_strtod_l+0x1e8>
 801e1a4:	4638      	mov	r0, r7
 801e1a6:	e7d2      	b.n	801e14e <_strtod_l+0x1fe>
 801e1a8:	2a08      	cmp	r2, #8
 801e1aa:	dc04      	bgt.n	801e1b6 <_strtod_l+0x266>
 801e1ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e1ae:	434e      	muls	r6, r1
 801e1b0:	9609      	str	r6, [sp, #36]	; 0x24
 801e1b2:	3201      	adds	r2, #1
 801e1b4:	e7e2      	b.n	801e17c <_strtod_l+0x22c>
 801e1b6:	f102 0c01 	add.w	ip, r2, #1
 801e1ba:	f1bc 0f10 	cmp.w	ip, #16
 801e1be:	bfd8      	it	le
 801e1c0:	fb01 f909 	mulle.w	r9, r1, r9
 801e1c4:	e7f5      	b.n	801e1b2 <_strtod_l+0x262>
 801e1c6:	2d10      	cmp	r5, #16
 801e1c8:	bfdc      	itt	le
 801e1ca:	220a      	movle	r2, #10
 801e1cc:	fb02 3909 	mlale	r9, r2, r9, r3
 801e1d0:	e7e1      	b.n	801e196 <_strtod_l+0x246>
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	9307      	str	r3, [sp, #28]
 801e1d6:	2201      	movs	r2, #1
 801e1d8:	e77c      	b.n	801e0d4 <_strtod_l+0x184>
 801e1da:	f04f 0c00 	mov.w	ip, #0
 801e1de:	f108 0302 	add.w	r3, r8, #2
 801e1e2:	931d      	str	r3, [sp, #116]	; 0x74
 801e1e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e1e8:	e785      	b.n	801e0f6 <_strtod_l+0x1a6>
 801e1ea:	f04f 0c01 	mov.w	ip, #1
 801e1ee:	e7f6      	b.n	801e1de <_strtod_l+0x28e>
 801e1f0:	0802b884 	.word	0x0802b884
 801e1f4:	0802b5cc 	.word	0x0802b5cc
 801e1f8:	7ff00000 	.word	0x7ff00000
 801e1fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1fe:	1c59      	adds	r1, r3, #1
 801e200:	911d      	str	r1, [sp, #116]	; 0x74
 801e202:	785b      	ldrb	r3, [r3, #1]
 801e204:	2b30      	cmp	r3, #48	; 0x30
 801e206:	d0f9      	beq.n	801e1fc <_strtod_l+0x2ac>
 801e208:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801e20c:	2908      	cmp	r1, #8
 801e20e:	f63f af79 	bhi.w	801e104 <_strtod_l+0x1b4>
 801e212:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801e216:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e218:	9308      	str	r3, [sp, #32]
 801e21a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e21c:	1c59      	adds	r1, r3, #1
 801e21e:	911d      	str	r1, [sp, #116]	; 0x74
 801e220:	785b      	ldrb	r3, [r3, #1]
 801e222:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801e226:	2e09      	cmp	r6, #9
 801e228:	d937      	bls.n	801e29a <_strtod_l+0x34a>
 801e22a:	9e08      	ldr	r6, [sp, #32]
 801e22c:	1b89      	subs	r1, r1, r6
 801e22e:	2908      	cmp	r1, #8
 801e230:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801e234:	dc02      	bgt.n	801e23c <_strtod_l+0x2ec>
 801e236:	4576      	cmp	r6, lr
 801e238:	bfa8      	it	ge
 801e23a:	4676      	movge	r6, lr
 801e23c:	f1bc 0f00 	cmp.w	ip, #0
 801e240:	d000      	beq.n	801e244 <_strtod_l+0x2f4>
 801e242:	4276      	negs	r6, r6
 801e244:	2d00      	cmp	r5, #0
 801e246:	d14f      	bne.n	801e2e8 <_strtod_l+0x398>
 801e248:	9904      	ldr	r1, [sp, #16]
 801e24a:	4301      	orrs	r1, r0
 801e24c:	f47f aec2 	bne.w	801dfd4 <_strtod_l+0x84>
 801e250:	2a00      	cmp	r2, #0
 801e252:	f47f aedb 	bne.w	801e00c <_strtod_l+0xbc>
 801e256:	2b69      	cmp	r3, #105	; 0x69
 801e258:	d027      	beq.n	801e2aa <_strtod_l+0x35a>
 801e25a:	dc24      	bgt.n	801e2a6 <_strtod_l+0x356>
 801e25c:	2b49      	cmp	r3, #73	; 0x49
 801e25e:	d024      	beq.n	801e2aa <_strtod_l+0x35a>
 801e260:	2b4e      	cmp	r3, #78	; 0x4e
 801e262:	f47f aed3 	bne.w	801e00c <_strtod_l+0xbc>
 801e266:	499e      	ldr	r1, [pc, #632]	; (801e4e0 <_strtod_l+0x590>)
 801e268:	a81d      	add	r0, sp, #116	; 0x74
 801e26a:	f001 ff35 	bl	80200d8 <__match>
 801e26e:	2800      	cmp	r0, #0
 801e270:	f43f aecc 	beq.w	801e00c <_strtod_l+0xbc>
 801e274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e276:	781b      	ldrb	r3, [r3, #0]
 801e278:	2b28      	cmp	r3, #40	; 0x28
 801e27a:	d12d      	bne.n	801e2d8 <_strtod_l+0x388>
 801e27c:	4999      	ldr	r1, [pc, #612]	; (801e4e4 <_strtod_l+0x594>)
 801e27e:	aa20      	add	r2, sp, #128	; 0x80
 801e280:	a81d      	add	r0, sp, #116	; 0x74
 801e282:	f001 ff3d 	bl	8020100 <__hexnan>
 801e286:	2805      	cmp	r0, #5
 801e288:	d126      	bne.n	801e2d8 <_strtod_l+0x388>
 801e28a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e28c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801e290:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801e294:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801e298:	e69c      	b.n	801dfd4 <_strtod_l+0x84>
 801e29a:	210a      	movs	r1, #10
 801e29c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801e2a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801e2a4:	e7b9      	b.n	801e21a <_strtod_l+0x2ca>
 801e2a6:	2b6e      	cmp	r3, #110	; 0x6e
 801e2a8:	e7db      	b.n	801e262 <_strtod_l+0x312>
 801e2aa:	498f      	ldr	r1, [pc, #572]	; (801e4e8 <_strtod_l+0x598>)
 801e2ac:	a81d      	add	r0, sp, #116	; 0x74
 801e2ae:	f001 ff13 	bl	80200d8 <__match>
 801e2b2:	2800      	cmp	r0, #0
 801e2b4:	f43f aeaa 	beq.w	801e00c <_strtod_l+0xbc>
 801e2b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e2ba:	498c      	ldr	r1, [pc, #560]	; (801e4ec <_strtod_l+0x59c>)
 801e2bc:	3b01      	subs	r3, #1
 801e2be:	a81d      	add	r0, sp, #116	; 0x74
 801e2c0:	931d      	str	r3, [sp, #116]	; 0x74
 801e2c2:	f001 ff09 	bl	80200d8 <__match>
 801e2c6:	b910      	cbnz	r0, 801e2ce <_strtod_l+0x37e>
 801e2c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e2ca:	3301      	adds	r3, #1
 801e2cc:	931d      	str	r3, [sp, #116]	; 0x74
 801e2ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801e4fc <_strtod_l+0x5ac>
 801e2d2:	f04f 0a00 	mov.w	sl, #0
 801e2d6:	e67d      	b.n	801dfd4 <_strtod_l+0x84>
 801e2d8:	4885      	ldr	r0, [pc, #532]	; (801e4f0 <_strtod_l+0x5a0>)
 801e2da:	f002 fead 	bl	8021038 <nan>
 801e2de:	ed8d 0b04 	vstr	d0, [sp, #16]
 801e2e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e2e6:	e675      	b.n	801dfd4 <_strtod_l+0x84>
 801e2e8:	9b07      	ldr	r3, [sp, #28]
 801e2ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e2ec:	1af3      	subs	r3, r6, r3
 801e2ee:	2f00      	cmp	r7, #0
 801e2f0:	bf08      	it	eq
 801e2f2:	462f      	moveq	r7, r5
 801e2f4:	2d10      	cmp	r5, #16
 801e2f6:	9308      	str	r3, [sp, #32]
 801e2f8:	46a8      	mov	r8, r5
 801e2fa:	bfa8      	it	ge
 801e2fc:	f04f 0810 	movge.w	r8, #16
 801e300:	f7e2 f910 	bl	8000524 <__aeabi_ui2d>
 801e304:	2d09      	cmp	r5, #9
 801e306:	4682      	mov	sl, r0
 801e308:	468b      	mov	fp, r1
 801e30a:	dd13      	ble.n	801e334 <_strtod_l+0x3e4>
 801e30c:	4b79      	ldr	r3, [pc, #484]	; (801e4f4 <_strtod_l+0x5a4>)
 801e30e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e312:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e316:	f7e2 f97f 	bl	8000618 <__aeabi_dmul>
 801e31a:	4682      	mov	sl, r0
 801e31c:	4648      	mov	r0, r9
 801e31e:	468b      	mov	fp, r1
 801e320:	f7e2 f900 	bl	8000524 <__aeabi_ui2d>
 801e324:	4602      	mov	r2, r0
 801e326:	460b      	mov	r3, r1
 801e328:	4650      	mov	r0, sl
 801e32a:	4659      	mov	r1, fp
 801e32c:	f7e1 ffbe 	bl	80002ac <__adddf3>
 801e330:	4682      	mov	sl, r0
 801e332:	468b      	mov	fp, r1
 801e334:	2d0f      	cmp	r5, #15
 801e336:	dc38      	bgt.n	801e3aa <_strtod_l+0x45a>
 801e338:	9b08      	ldr	r3, [sp, #32]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	f43f ae4a 	beq.w	801dfd4 <_strtod_l+0x84>
 801e340:	dd24      	ble.n	801e38c <_strtod_l+0x43c>
 801e342:	2b16      	cmp	r3, #22
 801e344:	dc0b      	bgt.n	801e35e <_strtod_l+0x40e>
 801e346:	4d6b      	ldr	r5, [pc, #428]	; (801e4f4 <_strtod_l+0x5a4>)
 801e348:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801e34c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e350:	4652      	mov	r2, sl
 801e352:	465b      	mov	r3, fp
 801e354:	f7e2 f960 	bl	8000618 <__aeabi_dmul>
 801e358:	4682      	mov	sl, r0
 801e35a:	468b      	mov	fp, r1
 801e35c:	e63a      	b.n	801dfd4 <_strtod_l+0x84>
 801e35e:	9a08      	ldr	r2, [sp, #32]
 801e360:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801e364:	4293      	cmp	r3, r2
 801e366:	db20      	blt.n	801e3aa <_strtod_l+0x45a>
 801e368:	4c62      	ldr	r4, [pc, #392]	; (801e4f4 <_strtod_l+0x5a4>)
 801e36a:	f1c5 050f 	rsb	r5, r5, #15
 801e36e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e372:	4652      	mov	r2, sl
 801e374:	465b      	mov	r3, fp
 801e376:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e37a:	f7e2 f94d 	bl	8000618 <__aeabi_dmul>
 801e37e:	9b08      	ldr	r3, [sp, #32]
 801e380:	1b5d      	subs	r5, r3, r5
 801e382:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e386:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e38a:	e7e3      	b.n	801e354 <_strtod_l+0x404>
 801e38c:	9b08      	ldr	r3, [sp, #32]
 801e38e:	3316      	adds	r3, #22
 801e390:	db0b      	blt.n	801e3aa <_strtod_l+0x45a>
 801e392:	9b07      	ldr	r3, [sp, #28]
 801e394:	4a57      	ldr	r2, [pc, #348]	; (801e4f4 <_strtod_l+0x5a4>)
 801e396:	1b9e      	subs	r6, r3, r6
 801e398:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801e39c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e3a0:	4650      	mov	r0, sl
 801e3a2:	4659      	mov	r1, fp
 801e3a4:	f7e2 fa62 	bl	800086c <__aeabi_ddiv>
 801e3a8:	e7d6      	b.n	801e358 <_strtod_l+0x408>
 801e3aa:	9b08      	ldr	r3, [sp, #32]
 801e3ac:	eba5 0808 	sub.w	r8, r5, r8
 801e3b0:	4498      	add	r8, r3
 801e3b2:	f1b8 0f00 	cmp.w	r8, #0
 801e3b6:	dd71      	ble.n	801e49c <_strtod_l+0x54c>
 801e3b8:	f018 030f 	ands.w	r3, r8, #15
 801e3bc:	d00a      	beq.n	801e3d4 <_strtod_l+0x484>
 801e3be:	494d      	ldr	r1, [pc, #308]	; (801e4f4 <_strtod_l+0x5a4>)
 801e3c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e3c4:	4652      	mov	r2, sl
 801e3c6:	465b      	mov	r3, fp
 801e3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e3cc:	f7e2 f924 	bl	8000618 <__aeabi_dmul>
 801e3d0:	4682      	mov	sl, r0
 801e3d2:	468b      	mov	fp, r1
 801e3d4:	f038 080f 	bics.w	r8, r8, #15
 801e3d8:	d04d      	beq.n	801e476 <_strtod_l+0x526>
 801e3da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801e3de:	dd22      	ble.n	801e426 <_strtod_l+0x4d6>
 801e3e0:	2500      	movs	r5, #0
 801e3e2:	462e      	mov	r6, r5
 801e3e4:	9509      	str	r5, [sp, #36]	; 0x24
 801e3e6:	9507      	str	r5, [sp, #28]
 801e3e8:	2322      	movs	r3, #34	; 0x22
 801e3ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 801e4fc <_strtod_l+0x5ac>
 801e3ee:	6023      	str	r3, [r4, #0]
 801e3f0:	f04f 0a00 	mov.w	sl, #0
 801e3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	f43f adec 	beq.w	801dfd4 <_strtod_l+0x84>
 801e3fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e3fe:	4620      	mov	r0, r4
 801e400:	f001 ff8a 	bl	8020318 <_Bfree>
 801e404:	9907      	ldr	r1, [sp, #28]
 801e406:	4620      	mov	r0, r4
 801e408:	f001 ff86 	bl	8020318 <_Bfree>
 801e40c:	4631      	mov	r1, r6
 801e40e:	4620      	mov	r0, r4
 801e410:	f001 ff82 	bl	8020318 <_Bfree>
 801e414:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e416:	4620      	mov	r0, r4
 801e418:	f001 ff7e 	bl	8020318 <_Bfree>
 801e41c:	4629      	mov	r1, r5
 801e41e:	4620      	mov	r0, r4
 801e420:	f001 ff7a 	bl	8020318 <_Bfree>
 801e424:	e5d6      	b.n	801dfd4 <_strtod_l+0x84>
 801e426:	2300      	movs	r3, #0
 801e428:	ea4f 1828 	mov.w	r8, r8, asr #4
 801e42c:	4650      	mov	r0, sl
 801e42e:	4659      	mov	r1, fp
 801e430:	4699      	mov	r9, r3
 801e432:	f1b8 0f01 	cmp.w	r8, #1
 801e436:	dc21      	bgt.n	801e47c <_strtod_l+0x52c>
 801e438:	b10b      	cbz	r3, 801e43e <_strtod_l+0x4ee>
 801e43a:	4682      	mov	sl, r0
 801e43c:	468b      	mov	fp, r1
 801e43e:	4b2e      	ldr	r3, [pc, #184]	; (801e4f8 <_strtod_l+0x5a8>)
 801e440:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801e444:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801e448:	4652      	mov	r2, sl
 801e44a:	465b      	mov	r3, fp
 801e44c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801e450:	f7e2 f8e2 	bl	8000618 <__aeabi_dmul>
 801e454:	4b29      	ldr	r3, [pc, #164]	; (801e4fc <_strtod_l+0x5ac>)
 801e456:	460a      	mov	r2, r1
 801e458:	400b      	ands	r3, r1
 801e45a:	4929      	ldr	r1, [pc, #164]	; (801e500 <_strtod_l+0x5b0>)
 801e45c:	428b      	cmp	r3, r1
 801e45e:	4682      	mov	sl, r0
 801e460:	d8be      	bhi.n	801e3e0 <_strtod_l+0x490>
 801e462:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e466:	428b      	cmp	r3, r1
 801e468:	bf86      	itte	hi
 801e46a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801e504 <_strtod_l+0x5b4>
 801e46e:	f04f 3aff 	movhi.w	sl, #4294967295
 801e472:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801e476:	2300      	movs	r3, #0
 801e478:	9304      	str	r3, [sp, #16]
 801e47a:	e081      	b.n	801e580 <_strtod_l+0x630>
 801e47c:	f018 0f01 	tst.w	r8, #1
 801e480:	d007      	beq.n	801e492 <_strtod_l+0x542>
 801e482:	4b1d      	ldr	r3, [pc, #116]	; (801e4f8 <_strtod_l+0x5a8>)
 801e484:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e48c:	f7e2 f8c4 	bl	8000618 <__aeabi_dmul>
 801e490:	2301      	movs	r3, #1
 801e492:	f109 0901 	add.w	r9, r9, #1
 801e496:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e49a:	e7ca      	b.n	801e432 <_strtod_l+0x4e2>
 801e49c:	d0eb      	beq.n	801e476 <_strtod_l+0x526>
 801e49e:	f1c8 0800 	rsb	r8, r8, #0
 801e4a2:	f018 020f 	ands.w	r2, r8, #15
 801e4a6:	d00a      	beq.n	801e4be <_strtod_l+0x56e>
 801e4a8:	4b12      	ldr	r3, [pc, #72]	; (801e4f4 <_strtod_l+0x5a4>)
 801e4aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e4ae:	4650      	mov	r0, sl
 801e4b0:	4659      	mov	r1, fp
 801e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b6:	f7e2 f9d9 	bl	800086c <__aeabi_ddiv>
 801e4ba:	4682      	mov	sl, r0
 801e4bc:	468b      	mov	fp, r1
 801e4be:	ea5f 1828 	movs.w	r8, r8, asr #4
 801e4c2:	d0d8      	beq.n	801e476 <_strtod_l+0x526>
 801e4c4:	f1b8 0f1f 	cmp.w	r8, #31
 801e4c8:	dd1e      	ble.n	801e508 <_strtod_l+0x5b8>
 801e4ca:	2500      	movs	r5, #0
 801e4cc:	462e      	mov	r6, r5
 801e4ce:	9509      	str	r5, [sp, #36]	; 0x24
 801e4d0:	9507      	str	r5, [sp, #28]
 801e4d2:	2322      	movs	r3, #34	; 0x22
 801e4d4:	f04f 0a00 	mov.w	sl, #0
 801e4d8:	f04f 0b00 	mov.w	fp, #0
 801e4dc:	6023      	str	r3, [r4, #0]
 801e4de:	e789      	b.n	801e3f4 <_strtod_l+0x4a4>
 801e4e0:	0802b59d 	.word	0x0802b59d
 801e4e4:	0802b5e0 	.word	0x0802b5e0
 801e4e8:	0802b595 	.word	0x0802b595
 801e4ec:	0802b724 	.word	0x0802b724
 801e4f0:	0802ba40 	.word	0x0802ba40
 801e4f4:	0802b920 	.word	0x0802b920
 801e4f8:	0802b8f8 	.word	0x0802b8f8
 801e4fc:	7ff00000 	.word	0x7ff00000
 801e500:	7ca00000 	.word	0x7ca00000
 801e504:	7fefffff 	.word	0x7fefffff
 801e508:	f018 0310 	ands.w	r3, r8, #16
 801e50c:	bf18      	it	ne
 801e50e:	236a      	movne	r3, #106	; 0x6a
 801e510:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e8c8 <_strtod_l+0x978>
 801e514:	9304      	str	r3, [sp, #16]
 801e516:	4650      	mov	r0, sl
 801e518:	4659      	mov	r1, fp
 801e51a:	2300      	movs	r3, #0
 801e51c:	f018 0f01 	tst.w	r8, #1
 801e520:	d004      	beq.n	801e52c <_strtod_l+0x5dc>
 801e522:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e526:	f7e2 f877 	bl	8000618 <__aeabi_dmul>
 801e52a:	2301      	movs	r3, #1
 801e52c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e530:	f109 0908 	add.w	r9, r9, #8
 801e534:	d1f2      	bne.n	801e51c <_strtod_l+0x5cc>
 801e536:	b10b      	cbz	r3, 801e53c <_strtod_l+0x5ec>
 801e538:	4682      	mov	sl, r0
 801e53a:	468b      	mov	fp, r1
 801e53c:	9b04      	ldr	r3, [sp, #16]
 801e53e:	b1bb      	cbz	r3, 801e570 <_strtod_l+0x620>
 801e540:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e544:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e548:	2b00      	cmp	r3, #0
 801e54a:	4659      	mov	r1, fp
 801e54c:	dd10      	ble.n	801e570 <_strtod_l+0x620>
 801e54e:	2b1f      	cmp	r3, #31
 801e550:	f340 8128 	ble.w	801e7a4 <_strtod_l+0x854>
 801e554:	2b34      	cmp	r3, #52	; 0x34
 801e556:	bfde      	ittt	le
 801e558:	3b20      	suble	r3, #32
 801e55a:	f04f 32ff 	movle.w	r2, #4294967295
 801e55e:	fa02 f303 	lslle.w	r3, r2, r3
 801e562:	f04f 0a00 	mov.w	sl, #0
 801e566:	bfcc      	ite	gt
 801e568:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e56c:	ea03 0b01 	andle.w	fp, r3, r1
 801e570:	2200      	movs	r2, #0
 801e572:	2300      	movs	r3, #0
 801e574:	4650      	mov	r0, sl
 801e576:	4659      	mov	r1, fp
 801e578:	f7e2 fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 801e57c:	2800      	cmp	r0, #0
 801e57e:	d1a4      	bne.n	801e4ca <_strtod_l+0x57a>
 801e580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e582:	9300      	str	r3, [sp, #0]
 801e584:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e586:	462b      	mov	r3, r5
 801e588:	463a      	mov	r2, r7
 801e58a:	4620      	mov	r0, r4
 801e58c:	f001 ff30 	bl	80203f0 <__s2b>
 801e590:	9009      	str	r0, [sp, #36]	; 0x24
 801e592:	2800      	cmp	r0, #0
 801e594:	f43f af24 	beq.w	801e3e0 <_strtod_l+0x490>
 801e598:	9b07      	ldr	r3, [sp, #28]
 801e59a:	1b9e      	subs	r6, r3, r6
 801e59c:	9b08      	ldr	r3, [sp, #32]
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	bfb4      	ite	lt
 801e5a2:	4633      	movlt	r3, r6
 801e5a4:	2300      	movge	r3, #0
 801e5a6:	9310      	str	r3, [sp, #64]	; 0x40
 801e5a8:	9b08      	ldr	r3, [sp, #32]
 801e5aa:	2500      	movs	r5, #0
 801e5ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5b0:	9318      	str	r3, [sp, #96]	; 0x60
 801e5b2:	462e      	mov	r6, r5
 801e5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5b6:	4620      	mov	r0, r4
 801e5b8:	6859      	ldr	r1, [r3, #4]
 801e5ba:	f001 fe6d 	bl	8020298 <_Balloc>
 801e5be:	9007      	str	r0, [sp, #28]
 801e5c0:	2800      	cmp	r0, #0
 801e5c2:	f43f af11 	beq.w	801e3e8 <_strtod_l+0x498>
 801e5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5c8:	691a      	ldr	r2, [r3, #16]
 801e5ca:	3202      	adds	r2, #2
 801e5cc:	f103 010c 	add.w	r1, r3, #12
 801e5d0:	0092      	lsls	r2, r2, #2
 801e5d2:	300c      	adds	r0, #12
 801e5d4:	f001 fe52 	bl	802027c <memcpy>
 801e5d8:	ec4b ab10 	vmov	d0, sl, fp
 801e5dc:	aa20      	add	r2, sp, #128	; 0x80
 801e5de:	a91f      	add	r1, sp, #124	; 0x7c
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e5e6:	f002 fa3f 	bl	8020a68 <__d2b>
 801e5ea:	901e      	str	r0, [sp, #120]	; 0x78
 801e5ec:	2800      	cmp	r0, #0
 801e5ee:	f43f aefb 	beq.w	801e3e8 <_strtod_l+0x498>
 801e5f2:	2101      	movs	r1, #1
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f001 ff95 	bl	8020524 <__i2b>
 801e5fa:	4606      	mov	r6, r0
 801e5fc:	2800      	cmp	r0, #0
 801e5fe:	f43f aef3 	beq.w	801e3e8 <_strtod_l+0x498>
 801e602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e604:	9904      	ldr	r1, [sp, #16]
 801e606:	2b00      	cmp	r3, #0
 801e608:	bfab      	itete	ge
 801e60a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e60c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e60e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e610:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e614:	bfac      	ite	ge
 801e616:	eb03 0902 	addge.w	r9, r3, r2
 801e61a:	1ad7      	sublt	r7, r2, r3
 801e61c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e61e:	eba3 0801 	sub.w	r8, r3, r1
 801e622:	4490      	add	r8, r2
 801e624:	4ba3      	ldr	r3, [pc, #652]	; (801e8b4 <_strtod_l+0x964>)
 801e626:	f108 38ff 	add.w	r8, r8, #4294967295
 801e62a:	4598      	cmp	r8, r3
 801e62c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e630:	f280 80cc 	bge.w	801e7cc <_strtod_l+0x87c>
 801e634:	eba3 0308 	sub.w	r3, r3, r8
 801e638:	2b1f      	cmp	r3, #31
 801e63a:	eba2 0203 	sub.w	r2, r2, r3
 801e63e:	f04f 0101 	mov.w	r1, #1
 801e642:	f300 80b6 	bgt.w	801e7b2 <_strtod_l+0x862>
 801e646:	fa01 f303 	lsl.w	r3, r1, r3
 801e64a:	9311      	str	r3, [sp, #68]	; 0x44
 801e64c:	2300      	movs	r3, #0
 801e64e:	930c      	str	r3, [sp, #48]	; 0x30
 801e650:	eb09 0802 	add.w	r8, r9, r2
 801e654:	9b04      	ldr	r3, [sp, #16]
 801e656:	45c1      	cmp	r9, r8
 801e658:	4417      	add	r7, r2
 801e65a:	441f      	add	r7, r3
 801e65c:	464b      	mov	r3, r9
 801e65e:	bfa8      	it	ge
 801e660:	4643      	movge	r3, r8
 801e662:	42bb      	cmp	r3, r7
 801e664:	bfa8      	it	ge
 801e666:	463b      	movge	r3, r7
 801e668:	2b00      	cmp	r3, #0
 801e66a:	bfc2      	ittt	gt
 801e66c:	eba8 0803 	subgt.w	r8, r8, r3
 801e670:	1aff      	subgt	r7, r7, r3
 801e672:	eba9 0903 	subgt.w	r9, r9, r3
 801e676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e678:	2b00      	cmp	r3, #0
 801e67a:	dd17      	ble.n	801e6ac <_strtod_l+0x75c>
 801e67c:	4631      	mov	r1, r6
 801e67e:	461a      	mov	r2, r3
 801e680:	4620      	mov	r0, r4
 801e682:	f002 f80b 	bl	802069c <__pow5mult>
 801e686:	4606      	mov	r6, r0
 801e688:	2800      	cmp	r0, #0
 801e68a:	f43f aead 	beq.w	801e3e8 <_strtod_l+0x498>
 801e68e:	4601      	mov	r1, r0
 801e690:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e692:	4620      	mov	r0, r4
 801e694:	f001 ff5c 	bl	8020550 <__multiply>
 801e698:	900f      	str	r0, [sp, #60]	; 0x3c
 801e69a:	2800      	cmp	r0, #0
 801e69c:	f43f aea4 	beq.w	801e3e8 <_strtod_l+0x498>
 801e6a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e6a2:	4620      	mov	r0, r4
 801e6a4:	f001 fe38 	bl	8020318 <_Bfree>
 801e6a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e6aa:	931e      	str	r3, [sp, #120]	; 0x78
 801e6ac:	f1b8 0f00 	cmp.w	r8, #0
 801e6b0:	f300 8091 	bgt.w	801e7d6 <_strtod_l+0x886>
 801e6b4:	9b08      	ldr	r3, [sp, #32]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	dd08      	ble.n	801e6cc <_strtod_l+0x77c>
 801e6ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e6bc:	9907      	ldr	r1, [sp, #28]
 801e6be:	4620      	mov	r0, r4
 801e6c0:	f001 ffec 	bl	802069c <__pow5mult>
 801e6c4:	9007      	str	r0, [sp, #28]
 801e6c6:	2800      	cmp	r0, #0
 801e6c8:	f43f ae8e 	beq.w	801e3e8 <_strtod_l+0x498>
 801e6cc:	2f00      	cmp	r7, #0
 801e6ce:	dd08      	ble.n	801e6e2 <_strtod_l+0x792>
 801e6d0:	9907      	ldr	r1, [sp, #28]
 801e6d2:	463a      	mov	r2, r7
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	f002 f83b 	bl	8020750 <__lshift>
 801e6da:	9007      	str	r0, [sp, #28]
 801e6dc:	2800      	cmp	r0, #0
 801e6de:	f43f ae83 	beq.w	801e3e8 <_strtod_l+0x498>
 801e6e2:	f1b9 0f00 	cmp.w	r9, #0
 801e6e6:	dd08      	ble.n	801e6fa <_strtod_l+0x7aa>
 801e6e8:	4631      	mov	r1, r6
 801e6ea:	464a      	mov	r2, r9
 801e6ec:	4620      	mov	r0, r4
 801e6ee:	f002 f82f 	bl	8020750 <__lshift>
 801e6f2:	4606      	mov	r6, r0
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	f43f ae77 	beq.w	801e3e8 <_strtod_l+0x498>
 801e6fa:	9a07      	ldr	r2, [sp, #28]
 801e6fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e6fe:	4620      	mov	r0, r4
 801e700:	f002 f8ae 	bl	8020860 <__mdiff>
 801e704:	4605      	mov	r5, r0
 801e706:	2800      	cmp	r0, #0
 801e708:	f43f ae6e 	beq.w	801e3e8 <_strtod_l+0x498>
 801e70c:	68c3      	ldr	r3, [r0, #12]
 801e70e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e710:	2300      	movs	r3, #0
 801e712:	60c3      	str	r3, [r0, #12]
 801e714:	4631      	mov	r1, r6
 801e716:	f002 f887 	bl	8020828 <__mcmp>
 801e71a:	2800      	cmp	r0, #0
 801e71c:	da65      	bge.n	801e7ea <_strtod_l+0x89a>
 801e71e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e720:	ea53 030a 	orrs.w	r3, r3, sl
 801e724:	f040 8087 	bne.w	801e836 <_strtod_l+0x8e6>
 801e728:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	f040 8082 	bne.w	801e836 <_strtod_l+0x8e6>
 801e732:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e736:	0d1b      	lsrs	r3, r3, #20
 801e738:	051b      	lsls	r3, r3, #20
 801e73a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e73e:	d97a      	bls.n	801e836 <_strtod_l+0x8e6>
 801e740:	696b      	ldr	r3, [r5, #20]
 801e742:	b913      	cbnz	r3, 801e74a <_strtod_l+0x7fa>
 801e744:	692b      	ldr	r3, [r5, #16]
 801e746:	2b01      	cmp	r3, #1
 801e748:	dd75      	ble.n	801e836 <_strtod_l+0x8e6>
 801e74a:	4629      	mov	r1, r5
 801e74c:	2201      	movs	r2, #1
 801e74e:	4620      	mov	r0, r4
 801e750:	f001 fffe 	bl	8020750 <__lshift>
 801e754:	4631      	mov	r1, r6
 801e756:	4605      	mov	r5, r0
 801e758:	f002 f866 	bl	8020828 <__mcmp>
 801e75c:	2800      	cmp	r0, #0
 801e75e:	dd6a      	ble.n	801e836 <_strtod_l+0x8e6>
 801e760:	9904      	ldr	r1, [sp, #16]
 801e762:	4a55      	ldr	r2, [pc, #340]	; (801e8b8 <_strtod_l+0x968>)
 801e764:	465b      	mov	r3, fp
 801e766:	2900      	cmp	r1, #0
 801e768:	f000 8085 	beq.w	801e876 <_strtod_l+0x926>
 801e76c:	ea02 010b 	and.w	r1, r2, fp
 801e770:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e774:	dc7f      	bgt.n	801e876 <_strtod_l+0x926>
 801e776:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e77a:	f77f aeaa 	ble.w	801e4d2 <_strtod_l+0x582>
 801e77e:	4a4f      	ldr	r2, [pc, #316]	; (801e8bc <_strtod_l+0x96c>)
 801e780:	2300      	movs	r3, #0
 801e782:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e786:	4650      	mov	r0, sl
 801e788:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e78c:	4659      	mov	r1, fp
 801e78e:	f7e1 ff43 	bl	8000618 <__aeabi_dmul>
 801e792:	460b      	mov	r3, r1
 801e794:	4303      	orrs	r3, r0
 801e796:	bf08      	it	eq
 801e798:	2322      	moveq	r3, #34	; 0x22
 801e79a:	4682      	mov	sl, r0
 801e79c:	468b      	mov	fp, r1
 801e79e:	bf08      	it	eq
 801e7a0:	6023      	streq	r3, [r4, #0]
 801e7a2:	e62b      	b.n	801e3fc <_strtod_l+0x4ac>
 801e7a4:	f04f 32ff 	mov.w	r2, #4294967295
 801e7a8:	fa02 f303 	lsl.w	r3, r2, r3
 801e7ac:	ea03 0a0a 	and.w	sl, r3, sl
 801e7b0:	e6de      	b.n	801e570 <_strtod_l+0x620>
 801e7b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e7b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e7ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e7be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e7c2:	fa01 f308 	lsl.w	r3, r1, r8
 801e7c6:	930c      	str	r3, [sp, #48]	; 0x30
 801e7c8:	9111      	str	r1, [sp, #68]	; 0x44
 801e7ca:	e741      	b.n	801e650 <_strtod_l+0x700>
 801e7cc:	2300      	movs	r3, #0
 801e7ce:	930c      	str	r3, [sp, #48]	; 0x30
 801e7d0:	2301      	movs	r3, #1
 801e7d2:	9311      	str	r3, [sp, #68]	; 0x44
 801e7d4:	e73c      	b.n	801e650 <_strtod_l+0x700>
 801e7d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e7d8:	4642      	mov	r2, r8
 801e7da:	4620      	mov	r0, r4
 801e7dc:	f001 ffb8 	bl	8020750 <__lshift>
 801e7e0:	901e      	str	r0, [sp, #120]	; 0x78
 801e7e2:	2800      	cmp	r0, #0
 801e7e4:	f47f af66 	bne.w	801e6b4 <_strtod_l+0x764>
 801e7e8:	e5fe      	b.n	801e3e8 <_strtod_l+0x498>
 801e7ea:	465f      	mov	r7, fp
 801e7ec:	d16e      	bne.n	801e8cc <_strtod_l+0x97c>
 801e7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e7f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e7f4:	b342      	cbz	r2, 801e848 <_strtod_l+0x8f8>
 801e7f6:	4a32      	ldr	r2, [pc, #200]	; (801e8c0 <_strtod_l+0x970>)
 801e7f8:	4293      	cmp	r3, r2
 801e7fa:	d128      	bne.n	801e84e <_strtod_l+0x8fe>
 801e7fc:	9b04      	ldr	r3, [sp, #16]
 801e7fe:	4650      	mov	r0, sl
 801e800:	b1eb      	cbz	r3, 801e83e <_strtod_l+0x8ee>
 801e802:	4a2d      	ldr	r2, [pc, #180]	; (801e8b8 <_strtod_l+0x968>)
 801e804:	403a      	ands	r2, r7
 801e806:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e80a:	f04f 31ff 	mov.w	r1, #4294967295
 801e80e:	d819      	bhi.n	801e844 <_strtod_l+0x8f4>
 801e810:	0d12      	lsrs	r2, r2, #20
 801e812:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e816:	fa01 f303 	lsl.w	r3, r1, r3
 801e81a:	4298      	cmp	r0, r3
 801e81c:	d117      	bne.n	801e84e <_strtod_l+0x8fe>
 801e81e:	4b29      	ldr	r3, [pc, #164]	; (801e8c4 <_strtod_l+0x974>)
 801e820:	429f      	cmp	r7, r3
 801e822:	d102      	bne.n	801e82a <_strtod_l+0x8da>
 801e824:	3001      	adds	r0, #1
 801e826:	f43f addf 	beq.w	801e3e8 <_strtod_l+0x498>
 801e82a:	4b23      	ldr	r3, [pc, #140]	; (801e8b8 <_strtod_l+0x968>)
 801e82c:	403b      	ands	r3, r7
 801e82e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e832:	f04f 0a00 	mov.w	sl, #0
 801e836:	9b04      	ldr	r3, [sp, #16]
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d1a0      	bne.n	801e77e <_strtod_l+0x82e>
 801e83c:	e5de      	b.n	801e3fc <_strtod_l+0x4ac>
 801e83e:	f04f 33ff 	mov.w	r3, #4294967295
 801e842:	e7ea      	b.n	801e81a <_strtod_l+0x8ca>
 801e844:	460b      	mov	r3, r1
 801e846:	e7e8      	b.n	801e81a <_strtod_l+0x8ca>
 801e848:	ea53 030a 	orrs.w	r3, r3, sl
 801e84c:	d088      	beq.n	801e760 <_strtod_l+0x810>
 801e84e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e850:	b1db      	cbz	r3, 801e88a <_strtod_l+0x93a>
 801e852:	423b      	tst	r3, r7
 801e854:	d0ef      	beq.n	801e836 <_strtod_l+0x8e6>
 801e856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e858:	9a04      	ldr	r2, [sp, #16]
 801e85a:	4650      	mov	r0, sl
 801e85c:	4659      	mov	r1, fp
 801e85e:	b1c3      	cbz	r3, 801e892 <_strtod_l+0x942>
 801e860:	f7ff fb59 	bl	801df16 <sulp>
 801e864:	4602      	mov	r2, r0
 801e866:	460b      	mov	r3, r1
 801e868:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e86c:	f7e1 fd1e 	bl	80002ac <__adddf3>
 801e870:	4682      	mov	sl, r0
 801e872:	468b      	mov	fp, r1
 801e874:	e7df      	b.n	801e836 <_strtod_l+0x8e6>
 801e876:	4013      	ands	r3, r2
 801e878:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e87c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e880:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e884:	f04f 3aff 	mov.w	sl, #4294967295
 801e888:	e7d5      	b.n	801e836 <_strtod_l+0x8e6>
 801e88a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e88c:	ea13 0f0a 	tst.w	r3, sl
 801e890:	e7e0      	b.n	801e854 <_strtod_l+0x904>
 801e892:	f7ff fb40 	bl	801df16 <sulp>
 801e896:	4602      	mov	r2, r0
 801e898:	460b      	mov	r3, r1
 801e89a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e89e:	f7e1 fd03 	bl	80002a8 <__aeabi_dsub>
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	2300      	movs	r3, #0
 801e8a6:	4682      	mov	sl, r0
 801e8a8:	468b      	mov	fp, r1
 801e8aa:	f7e2 f91d 	bl	8000ae8 <__aeabi_dcmpeq>
 801e8ae:	2800      	cmp	r0, #0
 801e8b0:	d0c1      	beq.n	801e836 <_strtod_l+0x8e6>
 801e8b2:	e60e      	b.n	801e4d2 <_strtod_l+0x582>
 801e8b4:	fffffc02 	.word	0xfffffc02
 801e8b8:	7ff00000 	.word	0x7ff00000
 801e8bc:	39500000 	.word	0x39500000
 801e8c0:	000fffff 	.word	0x000fffff
 801e8c4:	7fefffff 	.word	0x7fefffff
 801e8c8:	0802b5f8 	.word	0x0802b5f8
 801e8cc:	4631      	mov	r1, r6
 801e8ce:	4628      	mov	r0, r5
 801e8d0:	f002 f926 	bl	8020b20 <__ratio>
 801e8d4:	ec59 8b10 	vmov	r8, r9, d0
 801e8d8:	ee10 0a10 	vmov	r0, s0
 801e8dc:	2200      	movs	r2, #0
 801e8de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e8e2:	4649      	mov	r1, r9
 801e8e4:	f7e2 f914 	bl	8000b10 <__aeabi_dcmple>
 801e8e8:	2800      	cmp	r0, #0
 801e8ea:	d07c      	beq.n	801e9e6 <_strtod_l+0xa96>
 801e8ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8ee:	2b00      	cmp	r3, #0
 801e8f0:	d04c      	beq.n	801e98c <_strtod_l+0xa3c>
 801e8f2:	4b95      	ldr	r3, [pc, #596]	; (801eb48 <_strtod_l+0xbf8>)
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e8fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801eb48 <_strtod_l+0xbf8>
 801e8fe:	f04f 0800 	mov.w	r8, #0
 801e902:	4b92      	ldr	r3, [pc, #584]	; (801eb4c <_strtod_l+0xbfc>)
 801e904:	403b      	ands	r3, r7
 801e906:	9311      	str	r3, [sp, #68]	; 0x44
 801e908:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e90a:	4b91      	ldr	r3, [pc, #580]	; (801eb50 <_strtod_l+0xc00>)
 801e90c:	429a      	cmp	r2, r3
 801e90e:	f040 80b2 	bne.w	801ea76 <_strtod_l+0xb26>
 801e912:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e91a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e91e:	ec4b ab10 	vmov	d0, sl, fp
 801e922:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e926:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e92a:	f002 f821 	bl	8020970 <__ulp>
 801e92e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e932:	ec53 2b10 	vmov	r2, r3, d0
 801e936:	f7e1 fe6f 	bl	8000618 <__aeabi_dmul>
 801e93a:	4652      	mov	r2, sl
 801e93c:	465b      	mov	r3, fp
 801e93e:	f7e1 fcb5 	bl	80002ac <__adddf3>
 801e942:	460b      	mov	r3, r1
 801e944:	4981      	ldr	r1, [pc, #516]	; (801eb4c <_strtod_l+0xbfc>)
 801e946:	4a83      	ldr	r2, [pc, #524]	; (801eb54 <_strtod_l+0xc04>)
 801e948:	4019      	ands	r1, r3
 801e94a:	4291      	cmp	r1, r2
 801e94c:	4682      	mov	sl, r0
 801e94e:	d95e      	bls.n	801ea0e <_strtod_l+0xabe>
 801e950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e952:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e956:	4293      	cmp	r3, r2
 801e958:	d103      	bne.n	801e962 <_strtod_l+0xa12>
 801e95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e95c:	3301      	adds	r3, #1
 801e95e:	f43f ad43 	beq.w	801e3e8 <_strtod_l+0x498>
 801e962:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801eb60 <_strtod_l+0xc10>
 801e966:	f04f 3aff 	mov.w	sl, #4294967295
 801e96a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e96c:	4620      	mov	r0, r4
 801e96e:	f001 fcd3 	bl	8020318 <_Bfree>
 801e972:	9907      	ldr	r1, [sp, #28]
 801e974:	4620      	mov	r0, r4
 801e976:	f001 fccf 	bl	8020318 <_Bfree>
 801e97a:	4631      	mov	r1, r6
 801e97c:	4620      	mov	r0, r4
 801e97e:	f001 fccb 	bl	8020318 <_Bfree>
 801e982:	4629      	mov	r1, r5
 801e984:	4620      	mov	r0, r4
 801e986:	f001 fcc7 	bl	8020318 <_Bfree>
 801e98a:	e613      	b.n	801e5b4 <_strtod_l+0x664>
 801e98c:	f1ba 0f00 	cmp.w	sl, #0
 801e990:	d11b      	bne.n	801e9ca <_strtod_l+0xa7a>
 801e992:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e996:	b9f3      	cbnz	r3, 801e9d6 <_strtod_l+0xa86>
 801e998:	4b6b      	ldr	r3, [pc, #428]	; (801eb48 <_strtod_l+0xbf8>)
 801e99a:	2200      	movs	r2, #0
 801e99c:	4640      	mov	r0, r8
 801e99e:	4649      	mov	r1, r9
 801e9a0:	f7e2 f8ac 	bl	8000afc <__aeabi_dcmplt>
 801e9a4:	b9d0      	cbnz	r0, 801e9dc <_strtod_l+0xa8c>
 801e9a6:	4640      	mov	r0, r8
 801e9a8:	4649      	mov	r1, r9
 801e9aa:	4b6b      	ldr	r3, [pc, #428]	; (801eb58 <_strtod_l+0xc08>)
 801e9ac:	2200      	movs	r2, #0
 801e9ae:	f7e1 fe33 	bl	8000618 <__aeabi_dmul>
 801e9b2:	4680      	mov	r8, r0
 801e9b4:	4689      	mov	r9, r1
 801e9b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e9ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801e9be:	931b      	str	r3, [sp, #108]	; 0x6c
 801e9c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801e9c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e9c8:	e79b      	b.n	801e902 <_strtod_l+0x9b2>
 801e9ca:	f1ba 0f01 	cmp.w	sl, #1
 801e9ce:	d102      	bne.n	801e9d6 <_strtod_l+0xa86>
 801e9d0:	2f00      	cmp	r7, #0
 801e9d2:	f43f ad7e 	beq.w	801e4d2 <_strtod_l+0x582>
 801e9d6:	4b61      	ldr	r3, [pc, #388]	; (801eb5c <_strtod_l+0xc0c>)
 801e9d8:	2200      	movs	r2, #0
 801e9da:	e78c      	b.n	801e8f6 <_strtod_l+0x9a6>
 801e9dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801eb58 <_strtod_l+0xc08>
 801e9e0:	f04f 0800 	mov.w	r8, #0
 801e9e4:	e7e7      	b.n	801e9b6 <_strtod_l+0xa66>
 801e9e6:	4b5c      	ldr	r3, [pc, #368]	; (801eb58 <_strtod_l+0xc08>)
 801e9e8:	4640      	mov	r0, r8
 801e9ea:	4649      	mov	r1, r9
 801e9ec:	2200      	movs	r2, #0
 801e9ee:	f7e1 fe13 	bl	8000618 <__aeabi_dmul>
 801e9f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9f4:	4680      	mov	r8, r0
 801e9f6:	4689      	mov	r9, r1
 801e9f8:	b933      	cbnz	r3, 801ea08 <_strtod_l+0xab8>
 801e9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e9fe:	9012      	str	r0, [sp, #72]	; 0x48
 801ea00:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801ea06:	e7dd      	b.n	801e9c4 <_strtod_l+0xa74>
 801ea08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801ea0c:	e7f9      	b.n	801ea02 <_strtod_l+0xab2>
 801ea0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ea12:	9b04      	ldr	r3, [sp, #16]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d1a8      	bne.n	801e96a <_strtod_l+0xa1a>
 801ea18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ea1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea1e:	0d1b      	lsrs	r3, r3, #20
 801ea20:	051b      	lsls	r3, r3, #20
 801ea22:	429a      	cmp	r2, r3
 801ea24:	d1a1      	bne.n	801e96a <_strtod_l+0xa1a>
 801ea26:	4640      	mov	r0, r8
 801ea28:	4649      	mov	r1, r9
 801ea2a:	f7e2 f9a5 	bl	8000d78 <__aeabi_d2lz>
 801ea2e:	f7e1 fdc5 	bl	80005bc <__aeabi_l2d>
 801ea32:	4602      	mov	r2, r0
 801ea34:	460b      	mov	r3, r1
 801ea36:	4640      	mov	r0, r8
 801ea38:	4649      	mov	r1, r9
 801ea3a:	f7e1 fc35 	bl	80002a8 <__aeabi_dsub>
 801ea3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ea44:	ea43 030a 	orr.w	r3, r3, sl
 801ea48:	4313      	orrs	r3, r2
 801ea4a:	4680      	mov	r8, r0
 801ea4c:	4689      	mov	r9, r1
 801ea4e:	d053      	beq.n	801eaf8 <_strtod_l+0xba8>
 801ea50:	a335      	add	r3, pc, #212	; (adr r3, 801eb28 <_strtod_l+0xbd8>)
 801ea52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea56:	f7e2 f851 	bl	8000afc <__aeabi_dcmplt>
 801ea5a:	2800      	cmp	r0, #0
 801ea5c:	f47f acce 	bne.w	801e3fc <_strtod_l+0x4ac>
 801ea60:	a333      	add	r3, pc, #204	; (adr r3, 801eb30 <_strtod_l+0xbe0>)
 801ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea66:	4640      	mov	r0, r8
 801ea68:	4649      	mov	r1, r9
 801ea6a:	f7e2 f865 	bl	8000b38 <__aeabi_dcmpgt>
 801ea6e:	2800      	cmp	r0, #0
 801ea70:	f43f af7b 	beq.w	801e96a <_strtod_l+0xa1a>
 801ea74:	e4c2      	b.n	801e3fc <_strtod_l+0x4ac>
 801ea76:	9b04      	ldr	r3, [sp, #16]
 801ea78:	b333      	cbz	r3, 801eac8 <_strtod_l+0xb78>
 801ea7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ea80:	d822      	bhi.n	801eac8 <_strtod_l+0xb78>
 801ea82:	a32d      	add	r3, pc, #180	; (adr r3, 801eb38 <_strtod_l+0xbe8>)
 801ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea88:	4640      	mov	r0, r8
 801ea8a:	4649      	mov	r1, r9
 801ea8c:	f7e2 f840 	bl	8000b10 <__aeabi_dcmple>
 801ea90:	b1a0      	cbz	r0, 801eabc <_strtod_l+0xb6c>
 801ea92:	4649      	mov	r1, r9
 801ea94:	4640      	mov	r0, r8
 801ea96:	f7e2 f897 	bl	8000bc8 <__aeabi_d2uiz>
 801ea9a:	2801      	cmp	r0, #1
 801ea9c:	bf38      	it	cc
 801ea9e:	2001      	movcc	r0, #1
 801eaa0:	f7e1 fd40 	bl	8000524 <__aeabi_ui2d>
 801eaa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eaa6:	4680      	mov	r8, r0
 801eaa8:	4689      	mov	r9, r1
 801eaaa:	bb13      	cbnz	r3, 801eaf2 <_strtod_l+0xba2>
 801eaac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eab0:	9014      	str	r0, [sp, #80]	; 0x50
 801eab2:	9315      	str	r3, [sp, #84]	; 0x54
 801eab4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801eab8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801eabc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eabe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eac0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801eac4:	1a9b      	subs	r3, r3, r2
 801eac6:	930d      	str	r3, [sp, #52]	; 0x34
 801eac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801eacc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ead0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ead4:	f001 ff4c 	bl	8020970 <__ulp>
 801ead8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801eadc:	ec53 2b10 	vmov	r2, r3, d0
 801eae0:	f7e1 fd9a 	bl	8000618 <__aeabi_dmul>
 801eae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801eae8:	f7e1 fbe0 	bl	80002ac <__adddf3>
 801eaec:	4682      	mov	sl, r0
 801eaee:	468b      	mov	fp, r1
 801eaf0:	e78f      	b.n	801ea12 <_strtod_l+0xac2>
 801eaf2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801eaf6:	e7dd      	b.n	801eab4 <_strtod_l+0xb64>
 801eaf8:	a311      	add	r3, pc, #68	; (adr r3, 801eb40 <_strtod_l+0xbf0>)
 801eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eafe:	f7e1 fffd 	bl	8000afc <__aeabi_dcmplt>
 801eb02:	e7b4      	b.n	801ea6e <_strtod_l+0xb1e>
 801eb04:	2300      	movs	r3, #0
 801eb06:	930e      	str	r3, [sp, #56]	; 0x38
 801eb08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801eb0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eb0c:	6013      	str	r3, [r2, #0]
 801eb0e:	f7ff ba65 	b.w	801dfdc <_strtod_l+0x8c>
 801eb12:	2b65      	cmp	r3, #101	; 0x65
 801eb14:	f43f ab5d 	beq.w	801e1d2 <_strtod_l+0x282>
 801eb18:	2b45      	cmp	r3, #69	; 0x45
 801eb1a:	f43f ab5a 	beq.w	801e1d2 <_strtod_l+0x282>
 801eb1e:	2201      	movs	r2, #1
 801eb20:	f7ff bb92 	b.w	801e248 <_strtod_l+0x2f8>
 801eb24:	f3af 8000 	nop.w
 801eb28:	94a03595 	.word	0x94a03595
 801eb2c:	3fdfffff 	.word	0x3fdfffff
 801eb30:	35afe535 	.word	0x35afe535
 801eb34:	3fe00000 	.word	0x3fe00000
 801eb38:	ffc00000 	.word	0xffc00000
 801eb3c:	41dfffff 	.word	0x41dfffff
 801eb40:	94a03595 	.word	0x94a03595
 801eb44:	3fcfffff 	.word	0x3fcfffff
 801eb48:	3ff00000 	.word	0x3ff00000
 801eb4c:	7ff00000 	.word	0x7ff00000
 801eb50:	7fe00000 	.word	0x7fe00000
 801eb54:	7c9fffff 	.word	0x7c9fffff
 801eb58:	3fe00000 	.word	0x3fe00000
 801eb5c:	bff00000 	.word	0xbff00000
 801eb60:	7fefffff 	.word	0x7fefffff

0801eb64 <_strtod_r>:
 801eb64:	4b01      	ldr	r3, [pc, #4]	; (801eb6c <_strtod_r+0x8>)
 801eb66:	f7ff b9f3 	b.w	801df50 <_strtod_l>
 801eb6a:	bf00      	nop
 801eb6c:	20000754 	.word	0x20000754

0801eb70 <_strtol_l.isra.0>:
 801eb70:	2b01      	cmp	r3, #1
 801eb72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb76:	d001      	beq.n	801eb7c <_strtol_l.isra.0+0xc>
 801eb78:	2b24      	cmp	r3, #36	; 0x24
 801eb7a:	d906      	bls.n	801eb8a <_strtol_l.isra.0+0x1a>
 801eb7c:	f7fe fae6 	bl	801d14c <__errno>
 801eb80:	2316      	movs	r3, #22
 801eb82:	6003      	str	r3, [r0, #0]
 801eb84:	2000      	movs	r0, #0
 801eb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb8a:	4f3a      	ldr	r7, [pc, #232]	; (801ec74 <_strtol_l.isra.0+0x104>)
 801eb8c:	468e      	mov	lr, r1
 801eb8e:	4676      	mov	r6, lr
 801eb90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801eb94:	5de5      	ldrb	r5, [r4, r7]
 801eb96:	f015 0508 	ands.w	r5, r5, #8
 801eb9a:	d1f8      	bne.n	801eb8e <_strtol_l.isra.0+0x1e>
 801eb9c:	2c2d      	cmp	r4, #45	; 0x2d
 801eb9e:	d134      	bne.n	801ec0a <_strtol_l.isra.0+0x9a>
 801eba0:	f89e 4000 	ldrb.w	r4, [lr]
 801eba4:	f04f 0801 	mov.w	r8, #1
 801eba8:	f106 0e02 	add.w	lr, r6, #2
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	d05c      	beq.n	801ec6a <_strtol_l.isra.0+0xfa>
 801ebb0:	2b10      	cmp	r3, #16
 801ebb2:	d10c      	bne.n	801ebce <_strtol_l.isra.0+0x5e>
 801ebb4:	2c30      	cmp	r4, #48	; 0x30
 801ebb6:	d10a      	bne.n	801ebce <_strtol_l.isra.0+0x5e>
 801ebb8:	f89e 4000 	ldrb.w	r4, [lr]
 801ebbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ebc0:	2c58      	cmp	r4, #88	; 0x58
 801ebc2:	d14d      	bne.n	801ec60 <_strtol_l.isra.0+0xf0>
 801ebc4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ebc8:	2310      	movs	r3, #16
 801ebca:	f10e 0e02 	add.w	lr, lr, #2
 801ebce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ebd2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ebd6:	2600      	movs	r6, #0
 801ebd8:	fbbc f9f3 	udiv	r9, ip, r3
 801ebdc:	4635      	mov	r5, r6
 801ebde:	fb03 ca19 	mls	sl, r3, r9, ip
 801ebe2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ebe6:	2f09      	cmp	r7, #9
 801ebe8:	d818      	bhi.n	801ec1c <_strtol_l.isra.0+0xac>
 801ebea:	463c      	mov	r4, r7
 801ebec:	42a3      	cmp	r3, r4
 801ebee:	dd24      	ble.n	801ec3a <_strtol_l.isra.0+0xca>
 801ebf0:	2e00      	cmp	r6, #0
 801ebf2:	db1f      	blt.n	801ec34 <_strtol_l.isra.0+0xc4>
 801ebf4:	45a9      	cmp	r9, r5
 801ebf6:	d31d      	bcc.n	801ec34 <_strtol_l.isra.0+0xc4>
 801ebf8:	d101      	bne.n	801ebfe <_strtol_l.isra.0+0x8e>
 801ebfa:	45a2      	cmp	sl, r4
 801ebfc:	db1a      	blt.n	801ec34 <_strtol_l.isra.0+0xc4>
 801ebfe:	fb05 4503 	mla	r5, r5, r3, r4
 801ec02:	2601      	movs	r6, #1
 801ec04:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ec08:	e7eb      	b.n	801ebe2 <_strtol_l.isra.0+0x72>
 801ec0a:	2c2b      	cmp	r4, #43	; 0x2b
 801ec0c:	bf08      	it	eq
 801ec0e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ec12:	46a8      	mov	r8, r5
 801ec14:	bf08      	it	eq
 801ec16:	f106 0e02 	addeq.w	lr, r6, #2
 801ec1a:	e7c7      	b.n	801ebac <_strtol_l.isra.0+0x3c>
 801ec1c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ec20:	2f19      	cmp	r7, #25
 801ec22:	d801      	bhi.n	801ec28 <_strtol_l.isra.0+0xb8>
 801ec24:	3c37      	subs	r4, #55	; 0x37
 801ec26:	e7e1      	b.n	801ebec <_strtol_l.isra.0+0x7c>
 801ec28:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ec2c:	2f19      	cmp	r7, #25
 801ec2e:	d804      	bhi.n	801ec3a <_strtol_l.isra.0+0xca>
 801ec30:	3c57      	subs	r4, #87	; 0x57
 801ec32:	e7db      	b.n	801ebec <_strtol_l.isra.0+0x7c>
 801ec34:	f04f 36ff 	mov.w	r6, #4294967295
 801ec38:	e7e4      	b.n	801ec04 <_strtol_l.isra.0+0x94>
 801ec3a:	2e00      	cmp	r6, #0
 801ec3c:	da05      	bge.n	801ec4a <_strtol_l.isra.0+0xda>
 801ec3e:	2322      	movs	r3, #34	; 0x22
 801ec40:	6003      	str	r3, [r0, #0]
 801ec42:	4665      	mov	r5, ip
 801ec44:	b942      	cbnz	r2, 801ec58 <_strtol_l.isra.0+0xe8>
 801ec46:	4628      	mov	r0, r5
 801ec48:	e79d      	b.n	801eb86 <_strtol_l.isra.0+0x16>
 801ec4a:	f1b8 0f00 	cmp.w	r8, #0
 801ec4e:	d000      	beq.n	801ec52 <_strtol_l.isra.0+0xe2>
 801ec50:	426d      	negs	r5, r5
 801ec52:	2a00      	cmp	r2, #0
 801ec54:	d0f7      	beq.n	801ec46 <_strtol_l.isra.0+0xd6>
 801ec56:	b10e      	cbz	r6, 801ec5c <_strtol_l.isra.0+0xec>
 801ec58:	f10e 31ff 	add.w	r1, lr, #4294967295
 801ec5c:	6011      	str	r1, [r2, #0]
 801ec5e:	e7f2      	b.n	801ec46 <_strtol_l.isra.0+0xd6>
 801ec60:	2430      	movs	r4, #48	; 0x30
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d1b3      	bne.n	801ebce <_strtol_l.isra.0+0x5e>
 801ec66:	2308      	movs	r3, #8
 801ec68:	e7b1      	b.n	801ebce <_strtol_l.isra.0+0x5e>
 801ec6a:	2c30      	cmp	r4, #48	; 0x30
 801ec6c:	d0a4      	beq.n	801ebb8 <_strtol_l.isra.0+0x48>
 801ec6e:	230a      	movs	r3, #10
 801ec70:	e7ad      	b.n	801ebce <_strtol_l.isra.0+0x5e>
 801ec72:	bf00      	nop
 801ec74:	0802b621 	.word	0x0802b621

0801ec78 <_strtol_r>:
 801ec78:	f7ff bf7a 	b.w	801eb70 <_strtol_l.isra.0>

0801ec7c <quorem>:
 801ec7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec80:	6903      	ldr	r3, [r0, #16]
 801ec82:	690c      	ldr	r4, [r1, #16]
 801ec84:	42a3      	cmp	r3, r4
 801ec86:	4607      	mov	r7, r0
 801ec88:	f2c0 8081 	blt.w	801ed8e <quorem+0x112>
 801ec8c:	3c01      	subs	r4, #1
 801ec8e:	f101 0814 	add.w	r8, r1, #20
 801ec92:	f100 0514 	add.w	r5, r0, #20
 801ec96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ec9a:	9301      	str	r3, [sp, #4]
 801ec9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801eca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eca4:	3301      	adds	r3, #1
 801eca6:	429a      	cmp	r2, r3
 801eca8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ecac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ecb0:	fbb2 f6f3 	udiv	r6, r2, r3
 801ecb4:	d331      	bcc.n	801ed1a <quorem+0x9e>
 801ecb6:	f04f 0e00 	mov.w	lr, #0
 801ecba:	4640      	mov	r0, r8
 801ecbc:	46ac      	mov	ip, r5
 801ecbe:	46f2      	mov	sl, lr
 801ecc0:	f850 2b04 	ldr.w	r2, [r0], #4
 801ecc4:	b293      	uxth	r3, r2
 801ecc6:	fb06 e303 	mla	r3, r6, r3, lr
 801ecca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ecce:	b29b      	uxth	r3, r3
 801ecd0:	ebaa 0303 	sub.w	r3, sl, r3
 801ecd4:	0c12      	lsrs	r2, r2, #16
 801ecd6:	f8dc a000 	ldr.w	sl, [ip]
 801ecda:	fb06 e202 	mla	r2, r6, r2, lr
 801ecde:	fa13 f38a 	uxtah	r3, r3, sl
 801ece2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ece6:	fa1f fa82 	uxth.w	sl, r2
 801ecea:	f8dc 2000 	ldr.w	r2, [ip]
 801ecee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ecf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ecf6:	b29b      	uxth	r3, r3
 801ecf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ecfc:	4581      	cmp	r9, r0
 801ecfe:	f84c 3b04 	str.w	r3, [ip], #4
 801ed02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ed06:	d2db      	bcs.n	801ecc0 <quorem+0x44>
 801ed08:	f855 300b 	ldr.w	r3, [r5, fp]
 801ed0c:	b92b      	cbnz	r3, 801ed1a <quorem+0x9e>
 801ed0e:	9b01      	ldr	r3, [sp, #4]
 801ed10:	3b04      	subs	r3, #4
 801ed12:	429d      	cmp	r5, r3
 801ed14:	461a      	mov	r2, r3
 801ed16:	d32e      	bcc.n	801ed76 <quorem+0xfa>
 801ed18:	613c      	str	r4, [r7, #16]
 801ed1a:	4638      	mov	r0, r7
 801ed1c:	f001 fd84 	bl	8020828 <__mcmp>
 801ed20:	2800      	cmp	r0, #0
 801ed22:	db24      	blt.n	801ed6e <quorem+0xf2>
 801ed24:	3601      	adds	r6, #1
 801ed26:	4628      	mov	r0, r5
 801ed28:	f04f 0c00 	mov.w	ip, #0
 801ed2c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ed30:	f8d0 e000 	ldr.w	lr, [r0]
 801ed34:	b293      	uxth	r3, r2
 801ed36:	ebac 0303 	sub.w	r3, ip, r3
 801ed3a:	0c12      	lsrs	r2, r2, #16
 801ed3c:	fa13 f38e 	uxtah	r3, r3, lr
 801ed40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ed44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ed48:	b29b      	uxth	r3, r3
 801ed4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed4e:	45c1      	cmp	r9, r8
 801ed50:	f840 3b04 	str.w	r3, [r0], #4
 801ed54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ed58:	d2e8      	bcs.n	801ed2c <quorem+0xb0>
 801ed5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ed5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ed62:	b922      	cbnz	r2, 801ed6e <quorem+0xf2>
 801ed64:	3b04      	subs	r3, #4
 801ed66:	429d      	cmp	r5, r3
 801ed68:	461a      	mov	r2, r3
 801ed6a:	d30a      	bcc.n	801ed82 <quorem+0x106>
 801ed6c:	613c      	str	r4, [r7, #16]
 801ed6e:	4630      	mov	r0, r6
 801ed70:	b003      	add	sp, #12
 801ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed76:	6812      	ldr	r2, [r2, #0]
 801ed78:	3b04      	subs	r3, #4
 801ed7a:	2a00      	cmp	r2, #0
 801ed7c:	d1cc      	bne.n	801ed18 <quorem+0x9c>
 801ed7e:	3c01      	subs	r4, #1
 801ed80:	e7c7      	b.n	801ed12 <quorem+0x96>
 801ed82:	6812      	ldr	r2, [r2, #0]
 801ed84:	3b04      	subs	r3, #4
 801ed86:	2a00      	cmp	r2, #0
 801ed88:	d1f0      	bne.n	801ed6c <quorem+0xf0>
 801ed8a:	3c01      	subs	r4, #1
 801ed8c:	e7eb      	b.n	801ed66 <quorem+0xea>
 801ed8e:	2000      	movs	r0, #0
 801ed90:	e7ee      	b.n	801ed70 <quorem+0xf4>
 801ed92:	0000      	movs	r0, r0
 801ed94:	0000      	movs	r0, r0
	...

0801ed98 <_dtoa_r>:
 801ed98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed9c:	ed2d 8b02 	vpush	{d8}
 801eda0:	ec57 6b10 	vmov	r6, r7, d0
 801eda4:	b095      	sub	sp, #84	; 0x54
 801eda6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801eda8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801edac:	9105      	str	r1, [sp, #20]
 801edae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801edb2:	4604      	mov	r4, r0
 801edb4:	9209      	str	r2, [sp, #36]	; 0x24
 801edb6:	930f      	str	r3, [sp, #60]	; 0x3c
 801edb8:	b975      	cbnz	r5, 801edd8 <_dtoa_r+0x40>
 801edba:	2010      	movs	r0, #16
 801edbc:	f001 fa44 	bl	8020248 <malloc>
 801edc0:	4602      	mov	r2, r0
 801edc2:	6260      	str	r0, [r4, #36]	; 0x24
 801edc4:	b920      	cbnz	r0, 801edd0 <_dtoa_r+0x38>
 801edc6:	4bb2      	ldr	r3, [pc, #712]	; (801f090 <_dtoa_r+0x2f8>)
 801edc8:	21ea      	movs	r1, #234	; 0xea
 801edca:	48b2      	ldr	r0, [pc, #712]	; (801f094 <_dtoa_r+0x2fc>)
 801edcc:	f002 fa82 	bl	80212d4 <__assert_func>
 801edd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801edd4:	6005      	str	r5, [r0, #0]
 801edd6:	60c5      	str	r5, [r0, #12]
 801edd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801edda:	6819      	ldr	r1, [r3, #0]
 801eddc:	b151      	cbz	r1, 801edf4 <_dtoa_r+0x5c>
 801edde:	685a      	ldr	r2, [r3, #4]
 801ede0:	604a      	str	r2, [r1, #4]
 801ede2:	2301      	movs	r3, #1
 801ede4:	4093      	lsls	r3, r2
 801ede6:	608b      	str	r3, [r1, #8]
 801ede8:	4620      	mov	r0, r4
 801edea:	f001 fa95 	bl	8020318 <_Bfree>
 801edee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801edf0:	2200      	movs	r2, #0
 801edf2:	601a      	str	r2, [r3, #0]
 801edf4:	1e3b      	subs	r3, r7, #0
 801edf6:	bfb9      	ittee	lt
 801edf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801edfc:	9303      	strlt	r3, [sp, #12]
 801edfe:	2300      	movge	r3, #0
 801ee00:	f8c8 3000 	strge.w	r3, [r8]
 801ee04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ee08:	4ba3      	ldr	r3, [pc, #652]	; (801f098 <_dtoa_r+0x300>)
 801ee0a:	bfbc      	itt	lt
 801ee0c:	2201      	movlt	r2, #1
 801ee0e:	f8c8 2000 	strlt.w	r2, [r8]
 801ee12:	ea33 0309 	bics.w	r3, r3, r9
 801ee16:	d11b      	bne.n	801ee50 <_dtoa_r+0xb8>
 801ee18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee1a:	f242 730f 	movw	r3, #9999	; 0x270f
 801ee1e:	6013      	str	r3, [r2, #0]
 801ee20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ee24:	4333      	orrs	r3, r6
 801ee26:	f000 857a 	beq.w	801f91e <_dtoa_r+0xb86>
 801ee2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee2c:	b963      	cbnz	r3, 801ee48 <_dtoa_r+0xb0>
 801ee2e:	4b9b      	ldr	r3, [pc, #620]	; (801f09c <_dtoa_r+0x304>)
 801ee30:	e024      	b.n	801ee7c <_dtoa_r+0xe4>
 801ee32:	4b9b      	ldr	r3, [pc, #620]	; (801f0a0 <_dtoa_r+0x308>)
 801ee34:	9300      	str	r3, [sp, #0]
 801ee36:	3308      	adds	r3, #8
 801ee38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ee3a:	6013      	str	r3, [r2, #0]
 801ee3c:	9800      	ldr	r0, [sp, #0]
 801ee3e:	b015      	add	sp, #84	; 0x54
 801ee40:	ecbd 8b02 	vpop	{d8}
 801ee44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee48:	4b94      	ldr	r3, [pc, #592]	; (801f09c <_dtoa_r+0x304>)
 801ee4a:	9300      	str	r3, [sp, #0]
 801ee4c:	3303      	adds	r3, #3
 801ee4e:	e7f3      	b.n	801ee38 <_dtoa_r+0xa0>
 801ee50:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee54:	2200      	movs	r2, #0
 801ee56:	ec51 0b17 	vmov	r0, r1, d7
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ee60:	f7e1 fe42 	bl	8000ae8 <__aeabi_dcmpeq>
 801ee64:	4680      	mov	r8, r0
 801ee66:	b158      	cbz	r0, 801ee80 <_dtoa_r+0xe8>
 801ee68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee6a:	2301      	movs	r3, #1
 801ee6c:	6013      	str	r3, [r2, #0]
 801ee6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	f000 8551 	beq.w	801f918 <_dtoa_r+0xb80>
 801ee76:	488b      	ldr	r0, [pc, #556]	; (801f0a4 <_dtoa_r+0x30c>)
 801ee78:	6018      	str	r0, [r3, #0]
 801ee7a:	1e43      	subs	r3, r0, #1
 801ee7c:	9300      	str	r3, [sp, #0]
 801ee7e:	e7dd      	b.n	801ee3c <_dtoa_r+0xa4>
 801ee80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ee84:	aa12      	add	r2, sp, #72	; 0x48
 801ee86:	a913      	add	r1, sp, #76	; 0x4c
 801ee88:	4620      	mov	r0, r4
 801ee8a:	f001 fded 	bl	8020a68 <__d2b>
 801ee8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ee92:	4683      	mov	fp, r0
 801ee94:	2d00      	cmp	r5, #0
 801ee96:	d07c      	beq.n	801ef92 <_dtoa_r+0x1fa>
 801ee98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ee9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eea2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801eea6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801eeaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801eeae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801eeb2:	4b7d      	ldr	r3, [pc, #500]	; (801f0a8 <_dtoa_r+0x310>)
 801eeb4:	2200      	movs	r2, #0
 801eeb6:	4630      	mov	r0, r6
 801eeb8:	4639      	mov	r1, r7
 801eeba:	f7e1 f9f5 	bl	80002a8 <__aeabi_dsub>
 801eebe:	a36e      	add	r3, pc, #440	; (adr r3, 801f078 <_dtoa_r+0x2e0>)
 801eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eec4:	f7e1 fba8 	bl	8000618 <__aeabi_dmul>
 801eec8:	a36d      	add	r3, pc, #436	; (adr r3, 801f080 <_dtoa_r+0x2e8>)
 801eeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eece:	f7e1 f9ed 	bl	80002ac <__adddf3>
 801eed2:	4606      	mov	r6, r0
 801eed4:	4628      	mov	r0, r5
 801eed6:	460f      	mov	r7, r1
 801eed8:	f7e1 fb34 	bl	8000544 <__aeabi_i2d>
 801eedc:	a36a      	add	r3, pc, #424	; (adr r3, 801f088 <_dtoa_r+0x2f0>)
 801eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eee2:	f7e1 fb99 	bl	8000618 <__aeabi_dmul>
 801eee6:	4602      	mov	r2, r0
 801eee8:	460b      	mov	r3, r1
 801eeea:	4630      	mov	r0, r6
 801eeec:	4639      	mov	r1, r7
 801eeee:	f7e1 f9dd 	bl	80002ac <__adddf3>
 801eef2:	4606      	mov	r6, r0
 801eef4:	460f      	mov	r7, r1
 801eef6:	f7e1 fe3f 	bl	8000b78 <__aeabi_d2iz>
 801eefa:	2200      	movs	r2, #0
 801eefc:	4682      	mov	sl, r0
 801eefe:	2300      	movs	r3, #0
 801ef00:	4630      	mov	r0, r6
 801ef02:	4639      	mov	r1, r7
 801ef04:	f7e1 fdfa 	bl	8000afc <__aeabi_dcmplt>
 801ef08:	b148      	cbz	r0, 801ef1e <_dtoa_r+0x186>
 801ef0a:	4650      	mov	r0, sl
 801ef0c:	f7e1 fb1a 	bl	8000544 <__aeabi_i2d>
 801ef10:	4632      	mov	r2, r6
 801ef12:	463b      	mov	r3, r7
 801ef14:	f7e1 fde8 	bl	8000ae8 <__aeabi_dcmpeq>
 801ef18:	b908      	cbnz	r0, 801ef1e <_dtoa_r+0x186>
 801ef1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ef1e:	f1ba 0f16 	cmp.w	sl, #22
 801ef22:	d854      	bhi.n	801efce <_dtoa_r+0x236>
 801ef24:	4b61      	ldr	r3, [pc, #388]	; (801f0ac <_dtoa_r+0x314>)
 801ef26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ef32:	f7e1 fde3 	bl	8000afc <__aeabi_dcmplt>
 801ef36:	2800      	cmp	r0, #0
 801ef38:	d04b      	beq.n	801efd2 <_dtoa_r+0x23a>
 801ef3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ef3e:	2300      	movs	r3, #0
 801ef40:	930e      	str	r3, [sp, #56]	; 0x38
 801ef42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ef44:	1b5d      	subs	r5, r3, r5
 801ef46:	1e6b      	subs	r3, r5, #1
 801ef48:	9304      	str	r3, [sp, #16]
 801ef4a:	bf43      	ittte	mi
 801ef4c:	2300      	movmi	r3, #0
 801ef4e:	f1c5 0801 	rsbmi	r8, r5, #1
 801ef52:	9304      	strmi	r3, [sp, #16]
 801ef54:	f04f 0800 	movpl.w	r8, #0
 801ef58:	f1ba 0f00 	cmp.w	sl, #0
 801ef5c:	db3b      	blt.n	801efd6 <_dtoa_r+0x23e>
 801ef5e:	9b04      	ldr	r3, [sp, #16]
 801ef60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ef64:	4453      	add	r3, sl
 801ef66:	9304      	str	r3, [sp, #16]
 801ef68:	2300      	movs	r3, #0
 801ef6a:	9306      	str	r3, [sp, #24]
 801ef6c:	9b05      	ldr	r3, [sp, #20]
 801ef6e:	2b09      	cmp	r3, #9
 801ef70:	d869      	bhi.n	801f046 <_dtoa_r+0x2ae>
 801ef72:	2b05      	cmp	r3, #5
 801ef74:	bfc4      	itt	gt
 801ef76:	3b04      	subgt	r3, #4
 801ef78:	9305      	strgt	r3, [sp, #20]
 801ef7a:	9b05      	ldr	r3, [sp, #20]
 801ef7c:	f1a3 0302 	sub.w	r3, r3, #2
 801ef80:	bfcc      	ite	gt
 801ef82:	2500      	movgt	r5, #0
 801ef84:	2501      	movle	r5, #1
 801ef86:	2b03      	cmp	r3, #3
 801ef88:	d869      	bhi.n	801f05e <_dtoa_r+0x2c6>
 801ef8a:	e8df f003 	tbb	[pc, r3]
 801ef8e:	4e2c      	.short	0x4e2c
 801ef90:	5a4c      	.short	0x5a4c
 801ef92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801ef96:	441d      	add	r5, r3
 801ef98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ef9c:	2b20      	cmp	r3, #32
 801ef9e:	bfc1      	itttt	gt
 801efa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801efa4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801efa8:	fa09 f303 	lslgt.w	r3, r9, r3
 801efac:	fa26 f000 	lsrgt.w	r0, r6, r0
 801efb0:	bfda      	itte	le
 801efb2:	f1c3 0320 	rsble	r3, r3, #32
 801efb6:	fa06 f003 	lslle.w	r0, r6, r3
 801efba:	4318      	orrgt	r0, r3
 801efbc:	f7e1 fab2 	bl	8000524 <__aeabi_ui2d>
 801efc0:	2301      	movs	r3, #1
 801efc2:	4606      	mov	r6, r0
 801efc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801efc8:	3d01      	subs	r5, #1
 801efca:	9310      	str	r3, [sp, #64]	; 0x40
 801efcc:	e771      	b.n	801eeb2 <_dtoa_r+0x11a>
 801efce:	2301      	movs	r3, #1
 801efd0:	e7b6      	b.n	801ef40 <_dtoa_r+0x1a8>
 801efd2:	900e      	str	r0, [sp, #56]	; 0x38
 801efd4:	e7b5      	b.n	801ef42 <_dtoa_r+0x1aa>
 801efd6:	f1ca 0300 	rsb	r3, sl, #0
 801efda:	9306      	str	r3, [sp, #24]
 801efdc:	2300      	movs	r3, #0
 801efde:	eba8 080a 	sub.w	r8, r8, sl
 801efe2:	930d      	str	r3, [sp, #52]	; 0x34
 801efe4:	e7c2      	b.n	801ef6c <_dtoa_r+0x1d4>
 801efe6:	2300      	movs	r3, #0
 801efe8:	9308      	str	r3, [sp, #32]
 801efea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efec:	2b00      	cmp	r3, #0
 801efee:	dc39      	bgt.n	801f064 <_dtoa_r+0x2cc>
 801eff0:	f04f 0901 	mov.w	r9, #1
 801eff4:	f8cd 9004 	str.w	r9, [sp, #4]
 801eff8:	464b      	mov	r3, r9
 801effa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801effe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f000:	2200      	movs	r2, #0
 801f002:	6042      	str	r2, [r0, #4]
 801f004:	2204      	movs	r2, #4
 801f006:	f102 0614 	add.w	r6, r2, #20
 801f00a:	429e      	cmp	r6, r3
 801f00c:	6841      	ldr	r1, [r0, #4]
 801f00e:	d92f      	bls.n	801f070 <_dtoa_r+0x2d8>
 801f010:	4620      	mov	r0, r4
 801f012:	f001 f941 	bl	8020298 <_Balloc>
 801f016:	9000      	str	r0, [sp, #0]
 801f018:	2800      	cmp	r0, #0
 801f01a:	d14b      	bne.n	801f0b4 <_dtoa_r+0x31c>
 801f01c:	4b24      	ldr	r3, [pc, #144]	; (801f0b0 <_dtoa_r+0x318>)
 801f01e:	4602      	mov	r2, r0
 801f020:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f024:	e6d1      	b.n	801edca <_dtoa_r+0x32>
 801f026:	2301      	movs	r3, #1
 801f028:	e7de      	b.n	801efe8 <_dtoa_r+0x250>
 801f02a:	2300      	movs	r3, #0
 801f02c:	9308      	str	r3, [sp, #32]
 801f02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f030:	eb0a 0903 	add.w	r9, sl, r3
 801f034:	f109 0301 	add.w	r3, r9, #1
 801f038:	2b01      	cmp	r3, #1
 801f03a:	9301      	str	r3, [sp, #4]
 801f03c:	bfb8      	it	lt
 801f03e:	2301      	movlt	r3, #1
 801f040:	e7dd      	b.n	801effe <_dtoa_r+0x266>
 801f042:	2301      	movs	r3, #1
 801f044:	e7f2      	b.n	801f02c <_dtoa_r+0x294>
 801f046:	2501      	movs	r5, #1
 801f048:	2300      	movs	r3, #0
 801f04a:	9305      	str	r3, [sp, #20]
 801f04c:	9508      	str	r5, [sp, #32]
 801f04e:	f04f 39ff 	mov.w	r9, #4294967295
 801f052:	2200      	movs	r2, #0
 801f054:	f8cd 9004 	str.w	r9, [sp, #4]
 801f058:	2312      	movs	r3, #18
 801f05a:	9209      	str	r2, [sp, #36]	; 0x24
 801f05c:	e7cf      	b.n	801effe <_dtoa_r+0x266>
 801f05e:	2301      	movs	r3, #1
 801f060:	9308      	str	r3, [sp, #32]
 801f062:	e7f4      	b.n	801f04e <_dtoa_r+0x2b6>
 801f064:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f068:	f8cd 9004 	str.w	r9, [sp, #4]
 801f06c:	464b      	mov	r3, r9
 801f06e:	e7c6      	b.n	801effe <_dtoa_r+0x266>
 801f070:	3101      	adds	r1, #1
 801f072:	6041      	str	r1, [r0, #4]
 801f074:	0052      	lsls	r2, r2, #1
 801f076:	e7c6      	b.n	801f006 <_dtoa_r+0x26e>
 801f078:	636f4361 	.word	0x636f4361
 801f07c:	3fd287a7 	.word	0x3fd287a7
 801f080:	8b60c8b3 	.word	0x8b60c8b3
 801f084:	3fc68a28 	.word	0x3fc68a28
 801f088:	509f79fb 	.word	0x509f79fb
 801f08c:	3fd34413 	.word	0x3fd34413
 801f090:	0802b72e 	.word	0x0802b72e
 801f094:	0802b745 	.word	0x0802b745
 801f098:	7ff00000 	.word	0x7ff00000
 801f09c:	0802b72a 	.word	0x0802b72a
 801f0a0:	0802b721 	.word	0x0802b721
 801f0a4:	0802b5a1 	.word	0x0802b5a1
 801f0a8:	3ff80000 	.word	0x3ff80000
 801f0ac:	0802b920 	.word	0x0802b920
 801f0b0:	0802b7a4 	.word	0x0802b7a4
 801f0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f0b6:	9a00      	ldr	r2, [sp, #0]
 801f0b8:	601a      	str	r2, [r3, #0]
 801f0ba:	9b01      	ldr	r3, [sp, #4]
 801f0bc:	2b0e      	cmp	r3, #14
 801f0be:	f200 80ad 	bhi.w	801f21c <_dtoa_r+0x484>
 801f0c2:	2d00      	cmp	r5, #0
 801f0c4:	f000 80aa 	beq.w	801f21c <_dtoa_r+0x484>
 801f0c8:	f1ba 0f00 	cmp.w	sl, #0
 801f0cc:	dd36      	ble.n	801f13c <_dtoa_r+0x3a4>
 801f0ce:	4ac3      	ldr	r2, [pc, #780]	; (801f3dc <_dtoa_r+0x644>)
 801f0d0:	f00a 030f 	and.w	r3, sl, #15
 801f0d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f0d8:	ed93 7b00 	vldr	d7, [r3]
 801f0dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801f0e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801f0e4:	eeb0 8a47 	vmov.f32	s16, s14
 801f0e8:	eef0 8a67 	vmov.f32	s17, s15
 801f0ec:	d016      	beq.n	801f11c <_dtoa_r+0x384>
 801f0ee:	4bbc      	ldr	r3, [pc, #752]	; (801f3e0 <_dtoa_r+0x648>)
 801f0f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f0f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f0f8:	f7e1 fbb8 	bl	800086c <__aeabi_ddiv>
 801f0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f100:	f007 070f 	and.w	r7, r7, #15
 801f104:	2503      	movs	r5, #3
 801f106:	4eb6      	ldr	r6, [pc, #728]	; (801f3e0 <_dtoa_r+0x648>)
 801f108:	b957      	cbnz	r7, 801f120 <_dtoa_r+0x388>
 801f10a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f10e:	ec53 2b18 	vmov	r2, r3, d8
 801f112:	f7e1 fbab 	bl	800086c <__aeabi_ddiv>
 801f116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f11a:	e029      	b.n	801f170 <_dtoa_r+0x3d8>
 801f11c:	2502      	movs	r5, #2
 801f11e:	e7f2      	b.n	801f106 <_dtoa_r+0x36e>
 801f120:	07f9      	lsls	r1, r7, #31
 801f122:	d508      	bpl.n	801f136 <_dtoa_r+0x39e>
 801f124:	ec51 0b18 	vmov	r0, r1, d8
 801f128:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f12c:	f7e1 fa74 	bl	8000618 <__aeabi_dmul>
 801f130:	ec41 0b18 	vmov	d8, r0, r1
 801f134:	3501      	adds	r5, #1
 801f136:	107f      	asrs	r7, r7, #1
 801f138:	3608      	adds	r6, #8
 801f13a:	e7e5      	b.n	801f108 <_dtoa_r+0x370>
 801f13c:	f000 80a6 	beq.w	801f28c <_dtoa_r+0x4f4>
 801f140:	f1ca 0600 	rsb	r6, sl, #0
 801f144:	4ba5      	ldr	r3, [pc, #660]	; (801f3dc <_dtoa_r+0x644>)
 801f146:	4fa6      	ldr	r7, [pc, #664]	; (801f3e0 <_dtoa_r+0x648>)
 801f148:	f006 020f 	and.w	r2, r6, #15
 801f14c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f154:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f158:	f7e1 fa5e 	bl	8000618 <__aeabi_dmul>
 801f15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f160:	1136      	asrs	r6, r6, #4
 801f162:	2300      	movs	r3, #0
 801f164:	2502      	movs	r5, #2
 801f166:	2e00      	cmp	r6, #0
 801f168:	f040 8085 	bne.w	801f276 <_dtoa_r+0x4de>
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d1d2      	bne.n	801f116 <_dtoa_r+0x37e>
 801f170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f172:	2b00      	cmp	r3, #0
 801f174:	f000 808c 	beq.w	801f290 <_dtoa_r+0x4f8>
 801f178:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f17c:	4b99      	ldr	r3, [pc, #612]	; (801f3e4 <_dtoa_r+0x64c>)
 801f17e:	2200      	movs	r2, #0
 801f180:	4630      	mov	r0, r6
 801f182:	4639      	mov	r1, r7
 801f184:	f7e1 fcba 	bl	8000afc <__aeabi_dcmplt>
 801f188:	2800      	cmp	r0, #0
 801f18a:	f000 8081 	beq.w	801f290 <_dtoa_r+0x4f8>
 801f18e:	9b01      	ldr	r3, [sp, #4]
 801f190:	2b00      	cmp	r3, #0
 801f192:	d07d      	beq.n	801f290 <_dtoa_r+0x4f8>
 801f194:	f1b9 0f00 	cmp.w	r9, #0
 801f198:	dd3c      	ble.n	801f214 <_dtoa_r+0x47c>
 801f19a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f19e:	9307      	str	r3, [sp, #28]
 801f1a0:	2200      	movs	r2, #0
 801f1a2:	4b91      	ldr	r3, [pc, #580]	; (801f3e8 <_dtoa_r+0x650>)
 801f1a4:	4630      	mov	r0, r6
 801f1a6:	4639      	mov	r1, r7
 801f1a8:	f7e1 fa36 	bl	8000618 <__aeabi_dmul>
 801f1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1b0:	3501      	adds	r5, #1
 801f1b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f1b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f1ba:	4628      	mov	r0, r5
 801f1bc:	f7e1 f9c2 	bl	8000544 <__aeabi_i2d>
 801f1c0:	4632      	mov	r2, r6
 801f1c2:	463b      	mov	r3, r7
 801f1c4:	f7e1 fa28 	bl	8000618 <__aeabi_dmul>
 801f1c8:	4b88      	ldr	r3, [pc, #544]	; (801f3ec <_dtoa_r+0x654>)
 801f1ca:	2200      	movs	r2, #0
 801f1cc:	f7e1 f86e 	bl	80002ac <__adddf3>
 801f1d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f1d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1d8:	9303      	str	r3, [sp, #12]
 801f1da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d15c      	bne.n	801f29a <_dtoa_r+0x502>
 801f1e0:	4b83      	ldr	r3, [pc, #524]	; (801f3f0 <_dtoa_r+0x658>)
 801f1e2:	2200      	movs	r2, #0
 801f1e4:	4630      	mov	r0, r6
 801f1e6:	4639      	mov	r1, r7
 801f1e8:	f7e1 f85e 	bl	80002a8 <__aeabi_dsub>
 801f1ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f1f0:	4606      	mov	r6, r0
 801f1f2:	460f      	mov	r7, r1
 801f1f4:	f7e1 fca0 	bl	8000b38 <__aeabi_dcmpgt>
 801f1f8:	2800      	cmp	r0, #0
 801f1fa:	f040 8296 	bne.w	801f72a <_dtoa_r+0x992>
 801f1fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f202:	4630      	mov	r0, r6
 801f204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f208:	4639      	mov	r1, r7
 801f20a:	f7e1 fc77 	bl	8000afc <__aeabi_dcmplt>
 801f20e:	2800      	cmp	r0, #0
 801f210:	f040 8288 	bne.w	801f724 <_dtoa_r+0x98c>
 801f214:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f218:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f21c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f21e:	2b00      	cmp	r3, #0
 801f220:	f2c0 8158 	blt.w	801f4d4 <_dtoa_r+0x73c>
 801f224:	f1ba 0f0e 	cmp.w	sl, #14
 801f228:	f300 8154 	bgt.w	801f4d4 <_dtoa_r+0x73c>
 801f22c:	4b6b      	ldr	r3, [pc, #428]	; (801f3dc <_dtoa_r+0x644>)
 801f22e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f232:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f238:	2b00      	cmp	r3, #0
 801f23a:	f280 80e3 	bge.w	801f404 <_dtoa_r+0x66c>
 801f23e:	9b01      	ldr	r3, [sp, #4]
 801f240:	2b00      	cmp	r3, #0
 801f242:	f300 80df 	bgt.w	801f404 <_dtoa_r+0x66c>
 801f246:	f040 826d 	bne.w	801f724 <_dtoa_r+0x98c>
 801f24a:	4b69      	ldr	r3, [pc, #420]	; (801f3f0 <_dtoa_r+0x658>)
 801f24c:	2200      	movs	r2, #0
 801f24e:	4640      	mov	r0, r8
 801f250:	4649      	mov	r1, r9
 801f252:	f7e1 f9e1 	bl	8000618 <__aeabi_dmul>
 801f256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f25a:	f7e1 fc63 	bl	8000b24 <__aeabi_dcmpge>
 801f25e:	9e01      	ldr	r6, [sp, #4]
 801f260:	4637      	mov	r7, r6
 801f262:	2800      	cmp	r0, #0
 801f264:	f040 8243 	bne.w	801f6ee <_dtoa_r+0x956>
 801f268:	9d00      	ldr	r5, [sp, #0]
 801f26a:	2331      	movs	r3, #49	; 0x31
 801f26c:	f805 3b01 	strb.w	r3, [r5], #1
 801f270:	f10a 0a01 	add.w	sl, sl, #1
 801f274:	e23f      	b.n	801f6f6 <_dtoa_r+0x95e>
 801f276:	07f2      	lsls	r2, r6, #31
 801f278:	d505      	bpl.n	801f286 <_dtoa_r+0x4ee>
 801f27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f27e:	f7e1 f9cb 	bl	8000618 <__aeabi_dmul>
 801f282:	3501      	adds	r5, #1
 801f284:	2301      	movs	r3, #1
 801f286:	1076      	asrs	r6, r6, #1
 801f288:	3708      	adds	r7, #8
 801f28a:	e76c      	b.n	801f166 <_dtoa_r+0x3ce>
 801f28c:	2502      	movs	r5, #2
 801f28e:	e76f      	b.n	801f170 <_dtoa_r+0x3d8>
 801f290:	9b01      	ldr	r3, [sp, #4]
 801f292:	f8cd a01c 	str.w	sl, [sp, #28]
 801f296:	930c      	str	r3, [sp, #48]	; 0x30
 801f298:	e78d      	b.n	801f1b6 <_dtoa_r+0x41e>
 801f29a:	9900      	ldr	r1, [sp, #0]
 801f29c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f29e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f2a0:	4b4e      	ldr	r3, [pc, #312]	; (801f3dc <_dtoa_r+0x644>)
 801f2a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2a6:	4401      	add	r1, r0
 801f2a8:	9102      	str	r1, [sp, #8]
 801f2aa:	9908      	ldr	r1, [sp, #32]
 801f2ac:	eeb0 8a47 	vmov.f32	s16, s14
 801f2b0:	eef0 8a67 	vmov.f32	s17, s15
 801f2b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f2b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f2bc:	2900      	cmp	r1, #0
 801f2be:	d045      	beq.n	801f34c <_dtoa_r+0x5b4>
 801f2c0:	494c      	ldr	r1, [pc, #304]	; (801f3f4 <_dtoa_r+0x65c>)
 801f2c2:	2000      	movs	r0, #0
 801f2c4:	f7e1 fad2 	bl	800086c <__aeabi_ddiv>
 801f2c8:	ec53 2b18 	vmov	r2, r3, d8
 801f2cc:	f7e0 ffec 	bl	80002a8 <__aeabi_dsub>
 801f2d0:	9d00      	ldr	r5, [sp, #0]
 801f2d2:	ec41 0b18 	vmov	d8, r0, r1
 801f2d6:	4639      	mov	r1, r7
 801f2d8:	4630      	mov	r0, r6
 801f2da:	f7e1 fc4d 	bl	8000b78 <__aeabi_d2iz>
 801f2de:	900c      	str	r0, [sp, #48]	; 0x30
 801f2e0:	f7e1 f930 	bl	8000544 <__aeabi_i2d>
 801f2e4:	4602      	mov	r2, r0
 801f2e6:	460b      	mov	r3, r1
 801f2e8:	4630      	mov	r0, r6
 801f2ea:	4639      	mov	r1, r7
 801f2ec:	f7e0 ffdc 	bl	80002a8 <__aeabi_dsub>
 801f2f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2f2:	3330      	adds	r3, #48	; 0x30
 801f2f4:	f805 3b01 	strb.w	r3, [r5], #1
 801f2f8:	ec53 2b18 	vmov	r2, r3, d8
 801f2fc:	4606      	mov	r6, r0
 801f2fe:	460f      	mov	r7, r1
 801f300:	f7e1 fbfc 	bl	8000afc <__aeabi_dcmplt>
 801f304:	2800      	cmp	r0, #0
 801f306:	d165      	bne.n	801f3d4 <_dtoa_r+0x63c>
 801f308:	4632      	mov	r2, r6
 801f30a:	463b      	mov	r3, r7
 801f30c:	4935      	ldr	r1, [pc, #212]	; (801f3e4 <_dtoa_r+0x64c>)
 801f30e:	2000      	movs	r0, #0
 801f310:	f7e0 ffca 	bl	80002a8 <__aeabi_dsub>
 801f314:	ec53 2b18 	vmov	r2, r3, d8
 801f318:	f7e1 fbf0 	bl	8000afc <__aeabi_dcmplt>
 801f31c:	2800      	cmp	r0, #0
 801f31e:	f040 80b9 	bne.w	801f494 <_dtoa_r+0x6fc>
 801f322:	9b02      	ldr	r3, [sp, #8]
 801f324:	429d      	cmp	r5, r3
 801f326:	f43f af75 	beq.w	801f214 <_dtoa_r+0x47c>
 801f32a:	4b2f      	ldr	r3, [pc, #188]	; (801f3e8 <_dtoa_r+0x650>)
 801f32c:	ec51 0b18 	vmov	r0, r1, d8
 801f330:	2200      	movs	r2, #0
 801f332:	f7e1 f971 	bl	8000618 <__aeabi_dmul>
 801f336:	4b2c      	ldr	r3, [pc, #176]	; (801f3e8 <_dtoa_r+0x650>)
 801f338:	ec41 0b18 	vmov	d8, r0, r1
 801f33c:	2200      	movs	r2, #0
 801f33e:	4630      	mov	r0, r6
 801f340:	4639      	mov	r1, r7
 801f342:	f7e1 f969 	bl	8000618 <__aeabi_dmul>
 801f346:	4606      	mov	r6, r0
 801f348:	460f      	mov	r7, r1
 801f34a:	e7c4      	b.n	801f2d6 <_dtoa_r+0x53e>
 801f34c:	ec51 0b17 	vmov	r0, r1, d7
 801f350:	f7e1 f962 	bl	8000618 <__aeabi_dmul>
 801f354:	9b02      	ldr	r3, [sp, #8]
 801f356:	9d00      	ldr	r5, [sp, #0]
 801f358:	930c      	str	r3, [sp, #48]	; 0x30
 801f35a:	ec41 0b18 	vmov	d8, r0, r1
 801f35e:	4639      	mov	r1, r7
 801f360:	4630      	mov	r0, r6
 801f362:	f7e1 fc09 	bl	8000b78 <__aeabi_d2iz>
 801f366:	9011      	str	r0, [sp, #68]	; 0x44
 801f368:	f7e1 f8ec 	bl	8000544 <__aeabi_i2d>
 801f36c:	4602      	mov	r2, r0
 801f36e:	460b      	mov	r3, r1
 801f370:	4630      	mov	r0, r6
 801f372:	4639      	mov	r1, r7
 801f374:	f7e0 ff98 	bl	80002a8 <__aeabi_dsub>
 801f378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f37a:	3330      	adds	r3, #48	; 0x30
 801f37c:	f805 3b01 	strb.w	r3, [r5], #1
 801f380:	9b02      	ldr	r3, [sp, #8]
 801f382:	429d      	cmp	r5, r3
 801f384:	4606      	mov	r6, r0
 801f386:	460f      	mov	r7, r1
 801f388:	f04f 0200 	mov.w	r2, #0
 801f38c:	d134      	bne.n	801f3f8 <_dtoa_r+0x660>
 801f38e:	4b19      	ldr	r3, [pc, #100]	; (801f3f4 <_dtoa_r+0x65c>)
 801f390:	ec51 0b18 	vmov	r0, r1, d8
 801f394:	f7e0 ff8a 	bl	80002ac <__adddf3>
 801f398:	4602      	mov	r2, r0
 801f39a:	460b      	mov	r3, r1
 801f39c:	4630      	mov	r0, r6
 801f39e:	4639      	mov	r1, r7
 801f3a0:	f7e1 fbca 	bl	8000b38 <__aeabi_dcmpgt>
 801f3a4:	2800      	cmp	r0, #0
 801f3a6:	d175      	bne.n	801f494 <_dtoa_r+0x6fc>
 801f3a8:	ec53 2b18 	vmov	r2, r3, d8
 801f3ac:	4911      	ldr	r1, [pc, #68]	; (801f3f4 <_dtoa_r+0x65c>)
 801f3ae:	2000      	movs	r0, #0
 801f3b0:	f7e0 ff7a 	bl	80002a8 <__aeabi_dsub>
 801f3b4:	4602      	mov	r2, r0
 801f3b6:	460b      	mov	r3, r1
 801f3b8:	4630      	mov	r0, r6
 801f3ba:	4639      	mov	r1, r7
 801f3bc:	f7e1 fb9e 	bl	8000afc <__aeabi_dcmplt>
 801f3c0:	2800      	cmp	r0, #0
 801f3c2:	f43f af27 	beq.w	801f214 <_dtoa_r+0x47c>
 801f3c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f3c8:	1e6b      	subs	r3, r5, #1
 801f3ca:	930c      	str	r3, [sp, #48]	; 0x30
 801f3cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f3d0:	2b30      	cmp	r3, #48	; 0x30
 801f3d2:	d0f8      	beq.n	801f3c6 <_dtoa_r+0x62e>
 801f3d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f3d8:	e04a      	b.n	801f470 <_dtoa_r+0x6d8>
 801f3da:	bf00      	nop
 801f3dc:	0802b920 	.word	0x0802b920
 801f3e0:	0802b8f8 	.word	0x0802b8f8
 801f3e4:	3ff00000 	.word	0x3ff00000
 801f3e8:	40240000 	.word	0x40240000
 801f3ec:	401c0000 	.word	0x401c0000
 801f3f0:	40140000 	.word	0x40140000
 801f3f4:	3fe00000 	.word	0x3fe00000
 801f3f8:	4baf      	ldr	r3, [pc, #700]	; (801f6b8 <_dtoa_r+0x920>)
 801f3fa:	f7e1 f90d 	bl	8000618 <__aeabi_dmul>
 801f3fe:	4606      	mov	r6, r0
 801f400:	460f      	mov	r7, r1
 801f402:	e7ac      	b.n	801f35e <_dtoa_r+0x5c6>
 801f404:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f408:	9d00      	ldr	r5, [sp, #0]
 801f40a:	4642      	mov	r2, r8
 801f40c:	464b      	mov	r3, r9
 801f40e:	4630      	mov	r0, r6
 801f410:	4639      	mov	r1, r7
 801f412:	f7e1 fa2b 	bl	800086c <__aeabi_ddiv>
 801f416:	f7e1 fbaf 	bl	8000b78 <__aeabi_d2iz>
 801f41a:	9002      	str	r0, [sp, #8]
 801f41c:	f7e1 f892 	bl	8000544 <__aeabi_i2d>
 801f420:	4642      	mov	r2, r8
 801f422:	464b      	mov	r3, r9
 801f424:	f7e1 f8f8 	bl	8000618 <__aeabi_dmul>
 801f428:	4602      	mov	r2, r0
 801f42a:	460b      	mov	r3, r1
 801f42c:	4630      	mov	r0, r6
 801f42e:	4639      	mov	r1, r7
 801f430:	f7e0 ff3a 	bl	80002a8 <__aeabi_dsub>
 801f434:	9e02      	ldr	r6, [sp, #8]
 801f436:	9f01      	ldr	r7, [sp, #4]
 801f438:	3630      	adds	r6, #48	; 0x30
 801f43a:	f805 6b01 	strb.w	r6, [r5], #1
 801f43e:	9e00      	ldr	r6, [sp, #0]
 801f440:	1bae      	subs	r6, r5, r6
 801f442:	42b7      	cmp	r7, r6
 801f444:	4602      	mov	r2, r0
 801f446:	460b      	mov	r3, r1
 801f448:	d137      	bne.n	801f4ba <_dtoa_r+0x722>
 801f44a:	f7e0 ff2f 	bl	80002ac <__adddf3>
 801f44e:	4642      	mov	r2, r8
 801f450:	464b      	mov	r3, r9
 801f452:	4606      	mov	r6, r0
 801f454:	460f      	mov	r7, r1
 801f456:	f7e1 fb6f 	bl	8000b38 <__aeabi_dcmpgt>
 801f45a:	b9c8      	cbnz	r0, 801f490 <_dtoa_r+0x6f8>
 801f45c:	4642      	mov	r2, r8
 801f45e:	464b      	mov	r3, r9
 801f460:	4630      	mov	r0, r6
 801f462:	4639      	mov	r1, r7
 801f464:	f7e1 fb40 	bl	8000ae8 <__aeabi_dcmpeq>
 801f468:	b110      	cbz	r0, 801f470 <_dtoa_r+0x6d8>
 801f46a:	9b02      	ldr	r3, [sp, #8]
 801f46c:	07d9      	lsls	r1, r3, #31
 801f46e:	d40f      	bmi.n	801f490 <_dtoa_r+0x6f8>
 801f470:	4620      	mov	r0, r4
 801f472:	4659      	mov	r1, fp
 801f474:	f000 ff50 	bl	8020318 <_Bfree>
 801f478:	2300      	movs	r3, #0
 801f47a:	702b      	strb	r3, [r5, #0]
 801f47c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f47e:	f10a 0001 	add.w	r0, sl, #1
 801f482:	6018      	str	r0, [r3, #0]
 801f484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f486:	2b00      	cmp	r3, #0
 801f488:	f43f acd8 	beq.w	801ee3c <_dtoa_r+0xa4>
 801f48c:	601d      	str	r5, [r3, #0]
 801f48e:	e4d5      	b.n	801ee3c <_dtoa_r+0xa4>
 801f490:	f8cd a01c 	str.w	sl, [sp, #28]
 801f494:	462b      	mov	r3, r5
 801f496:	461d      	mov	r5, r3
 801f498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f49c:	2a39      	cmp	r2, #57	; 0x39
 801f49e:	d108      	bne.n	801f4b2 <_dtoa_r+0x71a>
 801f4a0:	9a00      	ldr	r2, [sp, #0]
 801f4a2:	429a      	cmp	r2, r3
 801f4a4:	d1f7      	bne.n	801f496 <_dtoa_r+0x6fe>
 801f4a6:	9a07      	ldr	r2, [sp, #28]
 801f4a8:	9900      	ldr	r1, [sp, #0]
 801f4aa:	3201      	adds	r2, #1
 801f4ac:	9207      	str	r2, [sp, #28]
 801f4ae:	2230      	movs	r2, #48	; 0x30
 801f4b0:	700a      	strb	r2, [r1, #0]
 801f4b2:	781a      	ldrb	r2, [r3, #0]
 801f4b4:	3201      	adds	r2, #1
 801f4b6:	701a      	strb	r2, [r3, #0]
 801f4b8:	e78c      	b.n	801f3d4 <_dtoa_r+0x63c>
 801f4ba:	4b7f      	ldr	r3, [pc, #508]	; (801f6b8 <_dtoa_r+0x920>)
 801f4bc:	2200      	movs	r2, #0
 801f4be:	f7e1 f8ab 	bl	8000618 <__aeabi_dmul>
 801f4c2:	2200      	movs	r2, #0
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	4606      	mov	r6, r0
 801f4c8:	460f      	mov	r7, r1
 801f4ca:	f7e1 fb0d 	bl	8000ae8 <__aeabi_dcmpeq>
 801f4ce:	2800      	cmp	r0, #0
 801f4d0:	d09b      	beq.n	801f40a <_dtoa_r+0x672>
 801f4d2:	e7cd      	b.n	801f470 <_dtoa_r+0x6d8>
 801f4d4:	9a08      	ldr	r2, [sp, #32]
 801f4d6:	2a00      	cmp	r2, #0
 801f4d8:	f000 80c4 	beq.w	801f664 <_dtoa_r+0x8cc>
 801f4dc:	9a05      	ldr	r2, [sp, #20]
 801f4de:	2a01      	cmp	r2, #1
 801f4e0:	f300 80a8 	bgt.w	801f634 <_dtoa_r+0x89c>
 801f4e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f4e6:	2a00      	cmp	r2, #0
 801f4e8:	f000 80a0 	beq.w	801f62c <_dtoa_r+0x894>
 801f4ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f4f0:	9e06      	ldr	r6, [sp, #24]
 801f4f2:	4645      	mov	r5, r8
 801f4f4:	9a04      	ldr	r2, [sp, #16]
 801f4f6:	2101      	movs	r1, #1
 801f4f8:	441a      	add	r2, r3
 801f4fa:	4620      	mov	r0, r4
 801f4fc:	4498      	add	r8, r3
 801f4fe:	9204      	str	r2, [sp, #16]
 801f500:	f001 f810 	bl	8020524 <__i2b>
 801f504:	4607      	mov	r7, r0
 801f506:	2d00      	cmp	r5, #0
 801f508:	dd0b      	ble.n	801f522 <_dtoa_r+0x78a>
 801f50a:	9b04      	ldr	r3, [sp, #16]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	dd08      	ble.n	801f522 <_dtoa_r+0x78a>
 801f510:	42ab      	cmp	r3, r5
 801f512:	9a04      	ldr	r2, [sp, #16]
 801f514:	bfa8      	it	ge
 801f516:	462b      	movge	r3, r5
 801f518:	eba8 0803 	sub.w	r8, r8, r3
 801f51c:	1aed      	subs	r5, r5, r3
 801f51e:	1ad3      	subs	r3, r2, r3
 801f520:	9304      	str	r3, [sp, #16]
 801f522:	9b06      	ldr	r3, [sp, #24]
 801f524:	b1fb      	cbz	r3, 801f566 <_dtoa_r+0x7ce>
 801f526:	9b08      	ldr	r3, [sp, #32]
 801f528:	2b00      	cmp	r3, #0
 801f52a:	f000 809f 	beq.w	801f66c <_dtoa_r+0x8d4>
 801f52e:	2e00      	cmp	r6, #0
 801f530:	dd11      	ble.n	801f556 <_dtoa_r+0x7be>
 801f532:	4639      	mov	r1, r7
 801f534:	4632      	mov	r2, r6
 801f536:	4620      	mov	r0, r4
 801f538:	f001 f8b0 	bl	802069c <__pow5mult>
 801f53c:	465a      	mov	r2, fp
 801f53e:	4601      	mov	r1, r0
 801f540:	4607      	mov	r7, r0
 801f542:	4620      	mov	r0, r4
 801f544:	f001 f804 	bl	8020550 <__multiply>
 801f548:	4659      	mov	r1, fp
 801f54a:	9007      	str	r0, [sp, #28]
 801f54c:	4620      	mov	r0, r4
 801f54e:	f000 fee3 	bl	8020318 <_Bfree>
 801f552:	9b07      	ldr	r3, [sp, #28]
 801f554:	469b      	mov	fp, r3
 801f556:	9b06      	ldr	r3, [sp, #24]
 801f558:	1b9a      	subs	r2, r3, r6
 801f55a:	d004      	beq.n	801f566 <_dtoa_r+0x7ce>
 801f55c:	4659      	mov	r1, fp
 801f55e:	4620      	mov	r0, r4
 801f560:	f001 f89c 	bl	802069c <__pow5mult>
 801f564:	4683      	mov	fp, r0
 801f566:	2101      	movs	r1, #1
 801f568:	4620      	mov	r0, r4
 801f56a:	f000 ffdb 	bl	8020524 <__i2b>
 801f56e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f570:	2b00      	cmp	r3, #0
 801f572:	4606      	mov	r6, r0
 801f574:	dd7c      	ble.n	801f670 <_dtoa_r+0x8d8>
 801f576:	461a      	mov	r2, r3
 801f578:	4601      	mov	r1, r0
 801f57a:	4620      	mov	r0, r4
 801f57c:	f001 f88e 	bl	802069c <__pow5mult>
 801f580:	9b05      	ldr	r3, [sp, #20]
 801f582:	2b01      	cmp	r3, #1
 801f584:	4606      	mov	r6, r0
 801f586:	dd76      	ble.n	801f676 <_dtoa_r+0x8de>
 801f588:	2300      	movs	r3, #0
 801f58a:	9306      	str	r3, [sp, #24]
 801f58c:	6933      	ldr	r3, [r6, #16]
 801f58e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f592:	6918      	ldr	r0, [r3, #16]
 801f594:	f000 ff76 	bl	8020484 <__hi0bits>
 801f598:	f1c0 0020 	rsb	r0, r0, #32
 801f59c:	9b04      	ldr	r3, [sp, #16]
 801f59e:	4418      	add	r0, r3
 801f5a0:	f010 001f 	ands.w	r0, r0, #31
 801f5a4:	f000 8086 	beq.w	801f6b4 <_dtoa_r+0x91c>
 801f5a8:	f1c0 0320 	rsb	r3, r0, #32
 801f5ac:	2b04      	cmp	r3, #4
 801f5ae:	dd7f      	ble.n	801f6b0 <_dtoa_r+0x918>
 801f5b0:	f1c0 001c 	rsb	r0, r0, #28
 801f5b4:	9b04      	ldr	r3, [sp, #16]
 801f5b6:	4403      	add	r3, r0
 801f5b8:	4480      	add	r8, r0
 801f5ba:	4405      	add	r5, r0
 801f5bc:	9304      	str	r3, [sp, #16]
 801f5be:	f1b8 0f00 	cmp.w	r8, #0
 801f5c2:	dd05      	ble.n	801f5d0 <_dtoa_r+0x838>
 801f5c4:	4659      	mov	r1, fp
 801f5c6:	4642      	mov	r2, r8
 801f5c8:	4620      	mov	r0, r4
 801f5ca:	f001 f8c1 	bl	8020750 <__lshift>
 801f5ce:	4683      	mov	fp, r0
 801f5d0:	9b04      	ldr	r3, [sp, #16]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	dd05      	ble.n	801f5e2 <_dtoa_r+0x84a>
 801f5d6:	4631      	mov	r1, r6
 801f5d8:	461a      	mov	r2, r3
 801f5da:	4620      	mov	r0, r4
 801f5dc:	f001 f8b8 	bl	8020750 <__lshift>
 801f5e0:	4606      	mov	r6, r0
 801f5e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d069      	beq.n	801f6bc <_dtoa_r+0x924>
 801f5e8:	4631      	mov	r1, r6
 801f5ea:	4658      	mov	r0, fp
 801f5ec:	f001 f91c 	bl	8020828 <__mcmp>
 801f5f0:	2800      	cmp	r0, #0
 801f5f2:	da63      	bge.n	801f6bc <_dtoa_r+0x924>
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	4659      	mov	r1, fp
 801f5f8:	220a      	movs	r2, #10
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	f000 feae 	bl	802035c <__multadd>
 801f600:	9b08      	ldr	r3, [sp, #32]
 801f602:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f606:	4683      	mov	fp, r0
 801f608:	2b00      	cmp	r3, #0
 801f60a:	f000 818f 	beq.w	801f92c <_dtoa_r+0xb94>
 801f60e:	4639      	mov	r1, r7
 801f610:	2300      	movs	r3, #0
 801f612:	220a      	movs	r2, #10
 801f614:	4620      	mov	r0, r4
 801f616:	f000 fea1 	bl	802035c <__multadd>
 801f61a:	f1b9 0f00 	cmp.w	r9, #0
 801f61e:	4607      	mov	r7, r0
 801f620:	f300 808e 	bgt.w	801f740 <_dtoa_r+0x9a8>
 801f624:	9b05      	ldr	r3, [sp, #20]
 801f626:	2b02      	cmp	r3, #2
 801f628:	dc50      	bgt.n	801f6cc <_dtoa_r+0x934>
 801f62a:	e089      	b.n	801f740 <_dtoa_r+0x9a8>
 801f62c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f62e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f632:	e75d      	b.n	801f4f0 <_dtoa_r+0x758>
 801f634:	9b01      	ldr	r3, [sp, #4]
 801f636:	1e5e      	subs	r6, r3, #1
 801f638:	9b06      	ldr	r3, [sp, #24]
 801f63a:	42b3      	cmp	r3, r6
 801f63c:	bfbf      	itttt	lt
 801f63e:	9b06      	ldrlt	r3, [sp, #24]
 801f640:	9606      	strlt	r6, [sp, #24]
 801f642:	1af2      	sublt	r2, r6, r3
 801f644:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f646:	bfb6      	itet	lt
 801f648:	189b      	addlt	r3, r3, r2
 801f64a:	1b9e      	subge	r6, r3, r6
 801f64c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f64e:	9b01      	ldr	r3, [sp, #4]
 801f650:	bfb8      	it	lt
 801f652:	2600      	movlt	r6, #0
 801f654:	2b00      	cmp	r3, #0
 801f656:	bfb5      	itete	lt
 801f658:	eba8 0503 	sublt.w	r5, r8, r3
 801f65c:	9b01      	ldrge	r3, [sp, #4]
 801f65e:	2300      	movlt	r3, #0
 801f660:	4645      	movge	r5, r8
 801f662:	e747      	b.n	801f4f4 <_dtoa_r+0x75c>
 801f664:	9e06      	ldr	r6, [sp, #24]
 801f666:	9f08      	ldr	r7, [sp, #32]
 801f668:	4645      	mov	r5, r8
 801f66a:	e74c      	b.n	801f506 <_dtoa_r+0x76e>
 801f66c:	9a06      	ldr	r2, [sp, #24]
 801f66e:	e775      	b.n	801f55c <_dtoa_r+0x7c4>
 801f670:	9b05      	ldr	r3, [sp, #20]
 801f672:	2b01      	cmp	r3, #1
 801f674:	dc18      	bgt.n	801f6a8 <_dtoa_r+0x910>
 801f676:	9b02      	ldr	r3, [sp, #8]
 801f678:	b9b3      	cbnz	r3, 801f6a8 <_dtoa_r+0x910>
 801f67a:	9b03      	ldr	r3, [sp, #12]
 801f67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f680:	b9a3      	cbnz	r3, 801f6ac <_dtoa_r+0x914>
 801f682:	9b03      	ldr	r3, [sp, #12]
 801f684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f688:	0d1b      	lsrs	r3, r3, #20
 801f68a:	051b      	lsls	r3, r3, #20
 801f68c:	b12b      	cbz	r3, 801f69a <_dtoa_r+0x902>
 801f68e:	9b04      	ldr	r3, [sp, #16]
 801f690:	3301      	adds	r3, #1
 801f692:	9304      	str	r3, [sp, #16]
 801f694:	f108 0801 	add.w	r8, r8, #1
 801f698:	2301      	movs	r3, #1
 801f69a:	9306      	str	r3, [sp, #24]
 801f69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	f47f af74 	bne.w	801f58c <_dtoa_r+0x7f4>
 801f6a4:	2001      	movs	r0, #1
 801f6a6:	e779      	b.n	801f59c <_dtoa_r+0x804>
 801f6a8:	2300      	movs	r3, #0
 801f6aa:	e7f6      	b.n	801f69a <_dtoa_r+0x902>
 801f6ac:	9b02      	ldr	r3, [sp, #8]
 801f6ae:	e7f4      	b.n	801f69a <_dtoa_r+0x902>
 801f6b0:	d085      	beq.n	801f5be <_dtoa_r+0x826>
 801f6b2:	4618      	mov	r0, r3
 801f6b4:	301c      	adds	r0, #28
 801f6b6:	e77d      	b.n	801f5b4 <_dtoa_r+0x81c>
 801f6b8:	40240000 	.word	0x40240000
 801f6bc:	9b01      	ldr	r3, [sp, #4]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	dc38      	bgt.n	801f734 <_dtoa_r+0x99c>
 801f6c2:	9b05      	ldr	r3, [sp, #20]
 801f6c4:	2b02      	cmp	r3, #2
 801f6c6:	dd35      	ble.n	801f734 <_dtoa_r+0x99c>
 801f6c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f6cc:	f1b9 0f00 	cmp.w	r9, #0
 801f6d0:	d10d      	bne.n	801f6ee <_dtoa_r+0x956>
 801f6d2:	4631      	mov	r1, r6
 801f6d4:	464b      	mov	r3, r9
 801f6d6:	2205      	movs	r2, #5
 801f6d8:	4620      	mov	r0, r4
 801f6da:	f000 fe3f 	bl	802035c <__multadd>
 801f6de:	4601      	mov	r1, r0
 801f6e0:	4606      	mov	r6, r0
 801f6e2:	4658      	mov	r0, fp
 801f6e4:	f001 f8a0 	bl	8020828 <__mcmp>
 801f6e8:	2800      	cmp	r0, #0
 801f6ea:	f73f adbd 	bgt.w	801f268 <_dtoa_r+0x4d0>
 801f6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6f0:	9d00      	ldr	r5, [sp, #0]
 801f6f2:	ea6f 0a03 	mvn.w	sl, r3
 801f6f6:	f04f 0800 	mov.w	r8, #0
 801f6fa:	4631      	mov	r1, r6
 801f6fc:	4620      	mov	r0, r4
 801f6fe:	f000 fe0b 	bl	8020318 <_Bfree>
 801f702:	2f00      	cmp	r7, #0
 801f704:	f43f aeb4 	beq.w	801f470 <_dtoa_r+0x6d8>
 801f708:	f1b8 0f00 	cmp.w	r8, #0
 801f70c:	d005      	beq.n	801f71a <_dtoa_r+0x982>
 801f70e:	45b8      	cmp	r8, r7
 801f710:	d003      	beq.n	801f71a <_dtoa_r+0x982>
 801f712:	4641      	mov	r1, r8
 801f714:	4620      	mov	r0, r4
 801f716:	f000 fdff 	bl	8020318 <_Bfree>
 801f71a:	4639      	mov	r1, r7
 801f71c:	4620      	mov	r0, r4
 801f71e:	f000 fdfb 	bl	8020318 <_Bfree>
 801f722:	e6a5      	b.n	801f470 <_dtoa_r+0x6d8>
 801f724:	2600      	movs	r6, #0
 801f726:	4637      	mov	r7, r6
 801f728:	e7e1      	b.n	801f6ee <_dtoa_r+0x956>
 801f72a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f72c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f730:	4637      	mov	r7, r6
 801f732:	e599      	b.n	801f268 <_dtoa_r+0x4d0>
 801f734:	9b08      	ldr	r3, [sp, #32]
 801f736:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	f000 80fd 	beq.w	801f93a <_dtoa_r+0xba2>
 801f740:	2d00      	cmp	r5, #0
 801f742:	dd05      	ble.n	801f750 <_dtoa_r+0x9b8>
 801f744:	4639      	mov	r1, r7
 801f746:	462a      	mov	r2, r5
 801f748:	4620      	mov	r0, r4
 801f74a:	f001 f801 	bl	8020750 <__lshift>
 801f74e:	4607      	mov	r7, r0
 801f750:	9b06      	ldr	r3, [sp, #24]
 801f752:	2b00      	cmp	r3, #0
 801f754:	d05c      	beq.n	801f810 <_dtoa_r+0xa78>
 801f756:	6879      	ldr	r1, [r7, #4]
 801f758:	4620      	mov	r0, r4
 801f75a:	f000 fd9d 	bl	8020298 <_Balloc>
 801f75e:	4605      	mov	r5, r0
 801f760:	b928      	cbnz	r0, 801f76e <_dtoa_r+0x9d6>
 801f762:	4b80      	ldr	r3, [pc, #512]	; (801f964 <_dtoa_r+0xbcc>)
 801f764:	4602      	mov	r2, r0
 801f766:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f76a:	f7ff bb2e 	b.w	801edca <_dtoa_r+0x32>
 801f76e:	693a      	ldr	r2, [r7, #16]
 801f770:	3202      	adds	r2, #2
 801f772:	0092      	lsls	r2, r2, #2
 801f774:	f107 010c 	add.w	r1, r7, #12
 801f778:	300c      	adds	r0, #12
 801f77a:	f000 fd7f 	bl	802027c <memcpy>
 801f77e:	2201      	movs	r2, #1
 801f780:	4629      	mov	r1, r5
 801f782:	4620      	mov	r0, r4
 801f784:	f000 ffe4 	bl	8020750 <__lshift>
 801f788:	9b00      	ldr	r3, [sp, #0]
 801f78a:	3301      	adds	r3, #1
 801f78c:	9301      	str	r3, [sp, #4]
 801f78e:	9b00      	ldr	r3, [sp, #0]
 801f790:	444b      	add	r3, r9
 801f792:	9307      	str	r3, [sp, #28]
 801f794:	9b02      	ldr	r3, [sp, #8]
 801f796:	f003 0301 	and.w	r3, r3, #1
 801f79a:	46b8      	mov	r8, r7
 801f79c:	9306      	str	r3, [sp, #24]
 801f79e:	4607      	mov	r7, r0
 801f7a0:	9b01      	ldr	r3, [sp, #4]
 801f7a2:	4631      	mov	r1, r6
 801f7a4:	3b01      	subs	r3, #1
 801f7a6:	4658      	mov	r0, fp
 801f7a8:	9302      	str	r3, [sp, #8]
 801f7aa:	f7ff fa67 	bl	801ec7c <quorem>
 801f7ae:	4603      	mov	r3, r0
 801f7b0:	3330      	adds	r3, #48	; 0x30
 801f7b2:	9004      	str	r0, [sp, #16]
 801f7b4:	4641      	mov	r1, r8
 801f7b6:	4658      	mov	r0, fp
 801f7b8:	9308      	str	r3, [sp, #32]
 801f7ba:	f001 f835 	bl	8020828 <__mcmp>
 801f7be:	463a      	mov	r2, r7
 801f7c0:	4681      	mov	r9, r0
 801f7c2:	4631      	mov	r1, r6
 801f7c4:	4620      	mov	r0, r4
 801f7c6:	f001 f84b 	bl	8020860 <__mdiff>
 801f7ca:	68c2      	ldr	r2, [r0, #12]
 801f7cc:	9b08      	ldr	r3, [sp, #32]
 801f7ce:	4605      	mov	r5, r0
 801f7d0:	bb02      	cbnz	r2, 801f814 <_dtoa_r+0xa7c>
 801f7d2:	4601      	mov	r1, r0
 801f7d4:	4658      	mov	r0, fp
 801f7d6:	f001 f827 	bl	8020828 <__mcmp>
 801f7da:	9b08      	ldr	r3, [sp, #32]
 801f7dc:	4602      	mov	r2, r0
 801f7de:	4629      	mov	r1, r5
 801f7e0:	4620      	mov	r0, r4
 801f7e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f7e6:	f000 fd97 	bl	8020318 <_Bfree>
 801f7ea:	9b05      	ldr	r3, [sp, #20]
 801f7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f7ee:	9d01      	ldr	r5, [sp, #4]
 801f7f0:	ea43 0102 	orr.w	r1, r3, r2
 801f7f4:	9b06      	ldr	r3, [sp, #24]
 801f7f6:	430b      	orrs	r3, r1
 801f7f8:	9b08      	ldr	r3, [sp, #32]
 801f7fa:	d10d      	bne.n	801f818 <_dtoa_r+0xa80>
 801f7fc:	2b39      	cmp	r3, #57	; 0x39
 801f7fe:	d029      	beq.n	801f854 <_dtoa_r+0xabc>
 801f800:	f1b9 0f00 	cmp.w	r9, #0
 801f804:	dd01      	ble.n	801f80a <_dtoa_r+0xa72>
 801f806:	9b04      	ldr	r3, [sp, #16]
 801f808:	3331      	adds	r3, #49	; 0x31
 801f80a:	9a02      	ldr	r2, [sp, #8]
 801f80c:	7013      	strb	r3, [r2, #0]
 801f80e:	e774      	b.n	801f6fa <_dtoa_r+0x962>
 801f810:	4638      	mov	r0, r7
 801f812:	e7b9      	b.n	801f788 <_dtoa_r+0x9f0>
 801f814:	2201      	movs	r2, #1
 801f816:	e7e2      	b.n	801f7de <_dtoa_r+0xa46>
 801f818:	f1b9 0f00 	cmp.w	r9, #0
 801f81c:	db06      	blt.n	801f82c <_dtoa_r+0xa94>
 801f81e:	9905      	ldr	r1, [sp, #20]
 801f820:	ea41 0909 	orr.w	r9, r1, r9
 801f824:	9906      	ldr	r1, [sp, #24]
 801f826:	ea59 0101 	orrs.w	r1, r9, r1
 801f82a:	d120      	bne.n	801f86e <_dtoa_r+0xad6>
 801f82c:	2a00      	cmp	r2, #0
 801f82e:	ddec      	ble.n	801f80a <_dtoa_r+0xa72>
 801f830:	4659      	mov	r1, fp
 801f832:	2201      	movs	r2, #1
 801f834:	4620      	mov	r0, r4
 801f836:	9301      	str	r3, [sp, #4]
 801f838:	f000 ff8a 	bl	8020750 <__lshift>
 801f83c:	4631      	mov	r1, r6
 801f83e:	4683      	mov	fp, r0
 801f840:	f000 fff2 	bl	8020828 <__mcmp>
 801f844:	2800      	cmp	r0, #0
 801f846:	9b01      	ldr	r3, [sp, #4]
 801f848:	dc02      	bgt.n	801f850 <_dtoa_r+0xab8>
 801f84a:	d1de      	bne.n	801f80a <_dtoa_r+0xa72>
 801f84c:	07da      	lsls	r2, r3, #31
 801f84e:	d5dc      	bpl.n	801f80a <_dtoa_r+0xa72>
 801f850:	2b39      	cmp	r3, #57	; 0x39
 801f852:	d1d8      	bne.n	801f806 <_dtoa_r+0xa6e>
 801f854:	9a02      	ldr	r2, [sp, #8]
 801f856:	2339      	movs	r3, #57	; 0x39
 801f858:	7013      	strb	r3, [r2, #0]
 801f85a:	462b      	mov	r3, r5
 801f85c:	461d      	mov	r5, r3
 801f85e:	3b01      	subs	r3, #1
 801f860:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f864:	2a39      	cmp	r2, #57	; 0x39
 801f866:	d050      	beq.n	801f90a <_dtoa_r+0xb72>
 801f868:	3201      	adds	r2, #1
 801f86a:	701a      	strb	r2, [r3, #0]
 801f86c:	e745      	b.n	801f6fa <_dtoa_r+0x962>
 801f86e:	2a00      	cmp	r2, #0
 801f870:	dd03      	ble.n	801f87a <_dtoa_r+0xae2>
 801f872:	2b39      	cmp	r3, #57	; 0x39
 801f874:	d0ee      	beq.n	801f854 <_dtoa_r+0xabc>
 801f876:	3301      	adds	r3, #1
 801f878:	e7c7      	b.n	801f80a <_dtoa_r+0xa72>
 801f87a:	9a01      	ldr	r2, [sp, #4]
 801f87c:	9907      	ldr	r1, [sp, #28]
 801f87e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f882:	428a      	cmp	r2, r1
 801f884:	d02a      	beq.n	801f8dc <_dtoa_r+0xb44>
 801f886:	4659      	mov	r1, fp
 801f888:	2300      	movs	r3, #0
 801f88a:	220a      	movs	r2, #10
 801f88c:	4620      	mov	r0, r4
 801f88e:	f000 fd65 	bl	802035c <__multadd>
 801f892:	45b8      	cmp	r8, r7
 801f894:	4683      	mov	fp, r0
 801f896:	f04f 0300 	mov.w	r3, #0
 801f89a:	f04f 020a 	mov.w	r2, #10
 801f89e:	4641      	mov	r1, r8
 801f8a0:	4620      	mov	r0, r4
 801f8a2:	d107      	bne.n	801f8b4 <_dtoa_r+0xb1c>
 801f8a4:	f000 fd5a 	bl	802035c <__multadd>
 801f8a8:	4680      	mov	r8, r0
 801f8aa:	4607      	mov	r7, r0
 801f8ac:	9b01      	ldr	r3, [sp, #4]
 801f8ae:	3301      	adds	r3, #1
 801f8b0:	9301      	str	r3, [sp, #4]
 801f8b2:	e775      	b.n	801f7a0 <_dtoa_r+0xa08>
 801f8b4:	f000 fd52 	bl	802035c <__multadd>
 801f8b8:	4639      	mov	r1, r7
 801f8ba:	4680      	mov	r8, r0
 801f8bc:	2300      	movs	r3, #0
 801f8be:	220a      	movs	r2, #10
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	f000 fd4b 	bl	802035c <__multadd>
 801f8c6:	4607      	mov	r7, r0
 801f8c8:	e7f0      	b.n	801f8ac <_dtoa_r+0xb14>
 801f8ca:	f1b9 0f00 	cmp.w	r9, #0
 801f8ce:	9a00      	ldr	r2, [sp, #0]
 801f8d0:	bfcc      	ite	gt
 801f8d2:	464d      	movgt	r5, r9
 801f8d4:	2501      	movle	r5, #1
 801f8d6:	4415      	add	r5, r2
 801f8d8:	f04f 0800 	mov.w	r8, #0
 801f8dc:	4659      	mov	r1, fp
 801f8de:	2201      	movs	r2, #1
 801f8e0:	4620      	mov	r0, r4
 801f8e2:	9301      	str	r3, [sp, #4]
 801f8e4:	f000 ff34 	bl	8020750 <__lshift>
 801f8e8:	4631      	mov	r1, r6
 801f8ea:	4683      	mov	fp, r0
 801f8ec:	f000 ff9c 	bl	8020828 <__mcmp>
 801f8f0:	2800      	cmp	r0, #0
 801f8f2:	dcb2      	bgt.n	801f85a <_dtoa_r+0xac2>
 801f8f4:	d102      	bne.n	801f8fc <_dtoa_r+0xb64>
 801f8f6:	9b01      	ldr	r3, [sp, #4]
 801f8f8:	07db      	lsls	r3, r3, #31
 801f8fa:	d4ae      	bmi.n	801f85a <_dtoa_r+0xac2>
 801f8fc:	462b      	mov	r3, r5
 801f8fe:	461d      	mov	r5, r3
 801f900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f904:	2a30      	cmp	r2, #48	; 0x30
 801f906:	d0fa      	beq.n	801f8fe <_dtoa_r+0xb66>
 801f908:	e6f7      	b.n	801f6fa <_dtoa_r+0x962>
 801f90a:	9a00      	ldr	r2, [sp, #0]
 801f90c:	429a      	cmp	r2, r3
 801f90e:	d1a5      	bne.n	801f85c <_dtoa_r+0xac4>
 801f910:	f10a 0a01 	add.w	sl, sl, #1
 801f914:	2331      	movs	r3, #49	; 0x31
 801f916:	e779      	b.n	801f80c <_dtoa_r+0xa74>
 801f918:	4b13      	ldr	r3, [pc, #76]	; (801f968 <_dtoa_r+0xbd0>)
 801f91a:	f7ff baaf 	b.w	801ee7c <_dtoa_r+0xe4>
 801f91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f920:	2b00      	cmp	r3, #0
 801f922:	f47f aa86 	bne.w	801ee32 <_dtoa_r+0x9a>
 801f926:	4b11      	ldr	r3, [pc, #68]	; (801f96c <_dtoa_r+0xbd4>)
 801f928:	f7ff baa8 	b.w	801ee7c <_dtoa_r+0xe4>
 801f92c:	f1b9 0f00 	cmp.w	r9, #0
 801f930:	dc03      	bgt.n	801f93a <_dtoa_r+0xba2>
 801f932:	9b05      	ldr	r3, [sp, #20]
 801f934:	2b02      	cmp	r3, #2
 801f936:	f73f aec9 	bgt.w	801f6cc <_dtoa_r+0x934>
 801f93a:	9d00      	ldr	r5, [sp, #0]
 801f93c:	4631      	mov	r1, r6
 801f93e:	4658      	mov	r0, fp
 801f940:	f7ff f99c 	bl	801ec7c <quorem>
 801f944:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f948:	f805 3b01 	strb.w	r3, [r5], #1
 801f94c:	9a00      	ldr	r2, [sp, #0]
 801f94e:	1aaa      	subs	r2, r5, r2
 801f950:	4591      	cmp	r9, r2
 801f952:	ddba      	ble.n	801f8ca <_dtoa_r+0xb32>
 801f954:	4659      	mov	r1, fp
 801f956:	2300      	movs	r3, #0
 801f958:	220a      	movs	r2, #10
 801f95a:	4620      	mov	r0, r4
 801f95c:	f000 fcfe 	bl	802035c <__multadd>
 801f960:	4683      	mov	fp, r0
 801f962:	e7eb      	b.n	801f93c <_dtoa_r+0xba4>
 801f964:	0802b7a4 	.word	0x0802b7a4
 801f968:	0802b5a0 	.word	0x0802b5a0
 801f96c:	0802b721 	.word	0x0802b721

0801f970 <std>:
 801f970:	2300      	movs	r3, #0
 801f972:	b510      	push	{r4, lr}
 801f974:	4604      	mov	r4, r0
 801f976:	e9c0 3300 	strd	r3, r3, [r0]
 801f97a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f97e:	6083      	str	r3, [r0, #8]
 801f980:	8181      	strh	r1, [r0, #12]
 801f982:	6643      	str	r3, [r0, #100]	; 0x64
 801f984:	81c2      	strh	r2, [r0, #14]
 801f986:	6183      	str	r3, [r0, #24]
 801f988:	4619      	mov	r1, r3
 801f98a:	2208      	movs	r2, #8
 801f98c:	305c      	adds	r0, #92	; 0x5c
 801f98e:	f7fd fc07 	bl	801d1a0 <memset>
 801f992:	4b05      	ldr	r3, [pc, #20]	; (801f9a8 <std+0x38>)
 801f994:	6263      	str	r3, [r4, #36]	; 0x24
 801f996:	4b05      	ldr	r3, [pc, #20]	; (801f9ac <std+0x3c>)
 801f998:	62a3      	str	r3, [r4, #40]	; 0x28
 801f99a:	4b05      	ldr	r3, [pc, #20]	; (801f9b0 <std+0x40>)
 801f99c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f99e:	4b05      	ldr	r3, [pc, #20]	; (801f9b4 <std+0x44>)
 801f9a0:	6224      	str	r4, [r4, #32]
 801f9a2:	6323      	str	r3, [r4, #48]	; 0x30
 801f9a4:	bd10      	pop	{r4, pc}
 801f9a6:	bf00      	nop
 801f9a8:	08021069 	.word	0x08021069
 801f9ac:	0802108b 	.word	0x0802108b
 801f9b0:	080210c3 	.word	0x080210c3
 801f9b4:	080210e7 	.word	0x080210e7

0801f9b8 <_cleanup_r>:
 801f9b8:	4901      	ldr	r1, [pc, #4]	; (801f9c0 <_cleanup_r+0x8>)
 801f9ba:	f000 b8af 	b.w	801fb1c <_fwalk_reent>
 801f9be:	bf00      	nop
 801f9c0:	0802143d 	.word	0x0802143d

0801f9c4 <__sfmoreglue>:
 801f9c4:	b570      	push	{r4, r5, r6, lr}
 801f9c6:	1e4a      	subs	r2, r1, #1
 801f9c8:	2568      	movs	r5, #104	; 0x68
 801f9ca:	4355      	muls	r5, r2
 801f9cc:	460e      	mov	r6, r1
 801f9ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f9d2:	f001 f97b 	bl	8020ccc <_malloc_r>
 801f9d6:	4604      	mov	r4, r0
 801f9d8:	b140      	cbz	r0, 801f9ec <__sfmoreglue+0x28>
 801f9da:	2100      	movs	r1, #0
 801f9dc:	e9c0 1600 	strd	r1, r6, [r0]
 801f9e0:	300c      	adds	r0, #12
 801f9e2:	60a0      	str	r0, [r4, #8]
 801f9e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f9e8:	f7fd fbda 	bl	801d1a0 <memset>
 801f9ec:	4620      	mov	r0, r4
 801f9ee:	bd70      	pop	{r4, r5, r6, pc}

0801f9f0 <__sfp_lock_acquire>:
 801f9f0:	4801      	ldr	r0, [pc, #4]	; (801f9f8 <__sfp_lock_acquire+0x8>)
 801f9f2:	f000 bc26 	b.w	8020242 <__retarget_lock_acquire_recursive>
 801f9f6:	bf00      	nop
 801f9f8:	2000a140 	.word	0x2000a140

0801f9fc <__sfp_lock_release>:
 801f9fc:	4801      	ldr	r0, [pc, #4]	; (801fa04 <__sfp_lock_release+0x8>)
 801f9fe:	f000 bc21 	b.w	8020244 <__retarget_lock_release_recursive>
 801fa02:	bf00      	nop
 801fa04:	2000a140 	.word	0x2000a140

0801fa08 <__sinit_lock_acquire>:
 801fa08:	4801      	ldr	r0, [pc, #4]	; (801fa10 <__sinit_lock_acquire+0x8>)
 801fa0a:	f000 bc1a 	b.w	8020242 <__retarget_lock_acquire_recursive>
 801fa0e:	bf00      	nop
 801fa10:	2000a13f 	.word	0x2000a13f

0801fa14 <__sinit_lock_release>:
 801fa14:	4801      	ldr	r0, [pc, #4]	; (801fa1c <__sinit_lock_release+0x8>)
 801fa16:	f000 bc15 	b.w	8020244 <__retarget_lock_release_recursive>
 801fa1a:	bf00      	nop
 801fa1c:	2000a13f 	.word	0x2000a13f

0801fa20 <__sinit>:
 801fa20:	b510      	push	{r4, lr}
 801fa22:	4604      	mov	r4, r0
 801fa24:	f7ff fff0 	bl	801fa08 <__sinit_lock_acquire>
 801fa28:	69a3      	ldr	r3, [r4, #24]
 801fa2a:	b11b      	cbz	r3, 801fa34 <__sinit+0x14>
 801fa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa30:	f7ff bff0 	b.w	801fa14 <__sinit_lock_release>
 801fa34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fa38:	6523      	str	r3, [r4, #80]	; 0x50
 801fa3a:	4b13      	ldr	r3, [pc, #76]	; (801fa88 <__sinit+0x68>)
 801fa3c:	4a13      	ldr	r2, [pc, #76]	; (801fa8c <__sinit+0x6c>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	62a2      	str	r2, [r4, #40]	; 0x28
 801fa42:	42a3      	cmp	r3, r4
 801fa44:	bf04      	itt	eq
 801fa46:	2301      	moveq	r3, #1
 801fa48:	61a3      	streq	r3, [r4, #24]
 801fa4a:	4620      	mov	r0, r4
 801fa4c:	f000 f820 	bl	801fa90 <__sfp>
 801fa50:	6060      	str	r0, [r4, #4]
 801fa52:	4620      	mov	r0, r4
 801fa54:	f000 f81c 	bl	801fa90 <__sfp>
 801fa58:	60a0      	str	r0, [r4, #8]
 801fa5a:	4620      	mov	r0, r4
 801fa5c:	f000 f818 	bl	801fa90 <__sfp>
 801fa60:	2200      	movs	r2, #0
 801fa62:	60e0      	str	r0, [r4, #12]
 801fa64:	2104      	movs	r1, #4
 801fa66:	6860      	ldr	r0, [r4, #4]
 801fa68:	f7ff ff82 	bl	801f970 <std>
 801fa6c:	68a0      	ldr	r0, [r4, #8]
 801fa6e:	2201      	movs	r2, #1
 801fa70:	2109      	movs	r1, #9
 801fa72:	f7ff ff7d 	bl	801f970 <std>
 801fa76:	68e0      	ldr	r0, [r4, #12]
 801fa78:	2202      	movs	r2, #2
 801fa7a:	2112      	movs	r1, #18
 801fa7c:	f7ff ff78 	bl	801f970 <std>
 801fa80:	2301      	movs	r3, #1
 801fa82:	61a3      	str	r3, [r4, #24]
 801fa84:	e7d2      	b.n	801fa2c <__sinit+0xc>
 801fa86:	bf00      	nop
 801fa88:	0802b58c 	.word	0x0802b58c
 801fa8c:	0801f9b9 	.word	0x0801f9b9

0801fa90 <__sfp>:
 801fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa92:	4607      	mov	r7, r0
 801fa94:	f7ff ffac 	bl	801f9f0 <__sfp_lock_acquire>
 801fa98:	4b1e      	ldr	r3, [pc, #120]	; (801fb14 <__sfp+0x84>)
 801fa9a:	681e      	ldr	r6, [r3, #0]
 801fa9c:	69b3      	ldr	r3, [r6, #24]
 801fa9e:	b913      	cbnz	r3, 801faa6 <__sfp+0x16>
 801faa0:	4630      	mov	r0, r6
 801faa2:	f7ff ffbd 	bl	801fa20 <__sinit>
 801faa6:	3648      	adds	r6, #72	; 0x48
 801faa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801faac:	3b01      	subs	r3, #1
 801faae:	d503      	bpl.n	801fab8 <__sfp+0x28>
 801fab0:	6833      	ldr	r3, [r6, #0]
 801fab2:	b30b      	cbz	r3, 801faf8 <__sfp+0x68>
 801fab4:	6836      	ldr	r6, [r6, #0]
 801fab6:	e7f7      	b.n	801faa8 <__sfp+0x18>
 801fab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fabc:	b9d5      	cbnz	r5, 801faf4 <__sfp+0x64>
 801fabe:	4b16      	ldr	r3, [pc, #88]	; (801fb18 <__sfp+0x88>)
 801fac0:	60e3      	str	r3, [r4, #12]
 801fac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fac6:	6665      	str	r5, [r4, #100]	; 0x64
 801fac8:	f000 fbba 	bl	8020240 <__retarget_lock_init_recursive>
 801facc:	f7ff ff96 	bl	801f9fc <__sfp_lock_release>
 801fad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fad8:	6025      	str	r5, [r4, #0]
 801fada:	61a5      	str	r5, [r4, #24]
 801fadc:	2208      	movs	r2, #8
 801fade:	4629      	mov	r1, r5
 801fae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fae4:	f7fd fb5c 	bl	801d1a0 <memset>
 801fae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801faec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801faf0:	4620      	mov	r0, r4
 801faf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801faf4:	3468      	adds	r4, #104	; 0x68
 801faf6:	e7d9      	b.n	801faac <__sfp+0x1c>
 801faf8:	2104      	movs	r1, #4
 801fafa:	4638      	mov	r0, r7
 801fafc:	f7ff ff62 	bl	801f9c4 <__sfmoreglue>
 801fb00:	4604      	mov	r4, r0
 801fb02:	6030      	str	r0, [r6, #0]
 801fb04:	2800      	cmp	r0, #0
 801fb06:	d1d5      	bne.n	801fab4 <__sfp+0x24>
 801fb08:	f7ff ff78 	bl	801f9fc <__sfp_lock_release>
 801fb0c:	230c      	movs	r3, #12
 801fb0e:	603b      	str	r3, [r7, #0]
 801fb10:	e7ee      	b.n	801faf0 <__sfp+0x60>
 801fb12:	bf00      	nop
 801fb14:	0802b58c 	.word	0x0802b58c
 801fb18:	ffff0001 	.word	0xffff0001

0801fb1c <_fwalk_reent>:
 801fb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb20:	4606      	mov	r6, r0
 801fb22:	4688      	mov	r8, r1
 801fb24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fb28:	2700      	movs	r7, #0
 801fb2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fb2e:	f1b9 0901 	subs.w	r9, r9, #1
 801fb32:	d505      	bpl.n	801fb40 <_fwalk_reent+0x24>
 801fb34:	6824      	ldr	r4, [r4, #0]
 801fb36:	2c00      	cmp	r4, #0
 801fb38:	d1f7      	bne.n	801fb2a <_fwalk_reent+0xe>
 801fb3a:	4638      	mov	r0, r7
 801fb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb40:	89ab      	ldrh	r3, [r5, #12]
 801fb42:	2b01      	cmp	r3, #1
 801fb44:	d907      	bls.n	801fb56 <_fwalk_reent+0x3a>
 801fb46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fb4a:	3301      	adds	r3, #1
 801fb4c:	d003      	beq.n	801fb56 <_fwalk_reent+0x3a>
 801fb4e:	4629      	mov	r1, r5
 801fb50:	4630      	mov	r0, r6
 801fb52:	47c0      	blx	r8
 801fb54:	4307      	orrs	r7, r0
 801fb56:	3568      	adds	r5, #104	; 0x68
 801fb58:	e7e9      	b.n	801fb2e <_fwalk_reent+0x12>

0801fb5a <rshift>:
 801fb5a:	6903      	ldr	r3, [r0, #16]
 801fb5c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801fb60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fb64:	ea4f 1261 	mov.w	r2, r1, asr #5
 801fb68:	f100 0414 	add.w	r4, r0, #20
 801fb6c:	dd45      	ble.n	801fbfa <rshift+0xa0>
 801fb6e:	f011 011f 	ands.w	r1, r1, #31
 801fb72:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801fb76:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fb7a:	d10c      	bne.n	801fb96 <rshift+0x3c>
 801fb7c:	f100 0710 	add.w	r7, r0, #16
 801fb80:	4629      	mov	r1, r5
 801fb82:	42b1      	cmp	r1, r6
 801fb84:	d334      	bcc.n	801fbf0 <rshift+0x96>
 801fb86:	1a9b      	subs	r3, r3, r2
 801fb88:	009b      	lsls	r3, r3, #2
 801fb8a:	1eea      	subs	r2, r5, #3
 801fb8c:	4296      	cmp	r6, r2
 801fb8e:	bf38      	it	cc
 801fb90:	2300      	movcc	r3, #0
 801fb92:	4423      	add	r3, r4
 801fb94:	e015      	b.n	801fbc2 <rshift+0x68>
 801fb96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801fb9a:	f1c1 0820 	rsb	r8, r1, #32
 801fb9e:	40cf      	lsrs	r7, r1
 801fba0:	f105 0e04 	add.w	lr, r5, #4
 801fba4:	46a1      	mov	r9, r4
 801fba6:	4576      	cmp	r6, lr
 801fba8:	46f4      	mov	ip, lr
 801fbaa:	d815      	bhi.n	801fbd8 <rshift+0x7e>
 801fbac:	1a9b      	subs	r3, r3, r2
 801fbae:	009a      	lsls	r2, r3, #2
 801fbb0:	3a04      	subs	r2, #4
 801fbb2:	3501      	adds	r5, #1
 801fbb4:	42ae      	cmp	r6, r5
 801fbb6:	bf38      	it	cc
 801fbb8:	2200      	movcc	r2, #0
 801fbba:	18a3      	adds	r3, r4, r2
 801fbbc:	50a7      	str	r7, [r4, r2]
 801fbbe:	b107      	cbz	r7, 801fbc2 <rshift+0x68>
 801fbc0:	3304      	adds	r3, #4
 801fbc2:	1b1a      	subs	r2, r3, r4
 801fbc4:	42a3      	cmp	r3, r4
 801fbc6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801fbca:	bf08      	it	eq
 801fbcc:	2300      	moveq	r3, #0
 801fbce:	6102      	str	r2, [r0, #16]
 801fbd0:	bf08      	it	eq
 801fbd2:	6143      	streq	r3, [r0, #20]
 801fbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fbd8:	f8dc c000 	ldr.w	ip, [ip]
 801fbdc:	fa0c fc08 	lsl.w	ip, ip, r8
 801fbe0:	ea4c 0707 	orr.w	r7, ip, r7
 801fbe4:	f849 7b04 	str.w	r7, [r9], #4
 801fbe8:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fbec:	40cf      	lsrs	r7, r1
 801fbee:	e7da      	b.n	801fba6 <rshift+0x4c>
 801fbf0:	f851 cb04 	ldr.w	ip, [r1], #4
 801fbf4:	f847 cf04 	str.w	ip, [r7, #4]!
 801fbf8:	e7c3      	b.n	801fb82 <rshift+0x28>
 801fbfa:	4623      	mov	r3, r4
 801fbfc:	e7e1      	b.n	801fbc2 <rshift+0x68>

0801fbfe <__hexdig_fun>:
 801fbfe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fc02:	2b09      	cmp	r3, #9
 801fc04:	d802      	bhi.n	801fc0c <__hexdig_fun+0xe>
 801fc06:	3820      	subs	r0, #32
 801fc08:	b2c0      	uxtb	r0, r0
 801fc0a:	4770      	bx	lr
 801fc0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801fc10:	2b05      	cmp	r3, #5
 801fc12:	d801      	bhi.n	801fc18 <__hexdig_fun+0x1a>
 801fc14:	3847      	subs	r0, #71	; 0x47
 801fc16:	e7f7      	b.n	801fc08 <__hexdig_fun+0xa>
 801fc18:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801fc1c:	2b05      	cmp	r3, #5
 801fc1e:	d801      	bhi.n	801fc24 <__hexdig_fun+0x26>
 801fc20:	3827      	subs	r0, #39	; 0x27
 801fc22:	e7f1      	b.n	801fc08 <__hexdig_fun+0xa>
 801fc24:	2000      	movs	r0, #0
 801fc26:	4770      	bx	lr

0801fc28 <__gethex>:
 801fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc2c:	ed2d 8b02 	vpush	{d8}
 801fc30:	b089      	sub	sp, #36	; 0x24
 801fc32:	ee08 0a10 	vmov	s16, r0
 801fc36:	9304      	str	r3, [sp, #16]
 801fc38:	4bbc      	ldr	r3, [pc, #752]	; (801ff2c <__gethex+0x304>)
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	9301      	str	r3, [sp, #4]
 801fc3e:	4618      	mov	r0, r3
 801fc40:	468b      	mov	fp, r1
 801fc42:	4690      	mov	r8, r2
 801fc44:	f7e0 fad4 	bl	80001f0 <strlen>
 801fc48:	9b01      	ldr	r3, [sp, #4]
 801fc4a:	f8db 2000 	ldr.w	r2, [fp]
 801fc4e:	4403      	add	r3, r0
 801fc50:	4682      	mov	sl, r0
 801fc52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fc56:	9305      	str	r3, [sp, #20]
 801fc58:	1c93      	adds	r3, r2, #2
 801fc5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801fc5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801fc62:	32fe      	adds	r2, #254	; 0xfe
 801fc64:	18d1      	adds	r1, r2, r3
 801fc66:	461f      	mov	r7, r3
 801fc68:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fc6c:	9100      	str	r1, [sp, #0]
 801fc6e:	2830      	cmp	r0, #48	; 0x30
 801fc70:	d0f8      	beq.n	801fc64 <__gethex+0x3c>
 801fc72:	f7ff ffc4 	bl	801fbfe <__hexdig_fun>
 801fc76:	4604      	mov	r4, r0
 801fc78:	2800      	cmp	r0, #0
 801fc7a:	d13a      	bne.n	801fcf2 <__gethex+0xca>
 801fc7c:	9901      	ldr	r1, [sp, #4]
 801fc7e:	4652      	mov	r2, sl
 801fc80:	4638      	mov	r0, r7
 801fc82:	f001 fa34 	bl	80210ee <strncmp>
 801fc86:	4605      	mov	r5, r0
 801fc88:	2800      	cmp	r0, #0
 801fc8a:	d168      	bne.n	801fd5e <__gethex+0x136>
 801fc8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801fc90:	eb07 060a 	add.w	r6, r7, sl
 801fc94:	f7ff ffb3 	bl	801fbfe <__hexdig_fun>
 801fc98:	2800      	cmp	r0, #0
 801fc9a:	d062      	beq.n	801fd62 <__gethex+0x13a>
 801fc9c:	4633      	mov	r3, r6
 801fc9e:	7818      	ldrb	r0, [r3, #0]
 801fca0:	2830      	cmp	r0, #48	; 0x30
 801fca2:	461f      	mov	r7, r3
 801fca4:	f103 0301 	add.w	r3, r3, #1
 801fca8:	d0f9      	beq.n	801fc9e <__gethex+0x76>
 801fcaa:	f7ff ffa8 	bl	801fbfe <__hexdig_fun>
 801fcae:	2301      	movs	r3, #1
 801fcb0:	fab0 f480 	clz	r4, r0
 801fcb4:	0964      	lsrs	r4, r4, #5
 801fcb6:	4635      	mov	r5, r6
 801fcb8:	9300      	str	r3, [sp, #0]
 801fcba:	463a      	mov	r2, r7
 801fcbc:	4616      	mov	r6, r2
 801fcbe:	3201      	adds	r2, #1
 801fcc0:	7830      	ldrb	r0, [r6, #0]
 801fcc2:	f7ff ff9c 	bl	801fbfe <__hexdig_fun>
 801fcc6:	2800      	cmp	r0, #0
 801fcc8:	d1f8      	bne.n	801fcbc <__gethex+0x94>
 801fcca:	9901      	ldr	r1, [sp, #4]
 801fccc:	4652      	mov	r2, sl
 801fcce:	4630      	mov	r0, r6
 801fcd0:	f001 fa0d 	bl	80210ee <strncmp>
 801fcd4:	b980      	cbnz	r0, 801fcf8 <__gethex+0xd0>
 801fcd6:	b94d      	cbnz	r5, 801fcec <__gethex+0xc4>
 801fcd8:	eb06 050a 	add.w	r5, r6, sl
 801fcdc:	462a      	mov	r2, r5
 801fcde:	4616      	mov	r6, r2
 801fce0:	3201      	adds	r2, #1
 801fce2:	7830      	ldrb	r0, [r6, #0]
 801fce4:	f7ff ff8b 	bl	801fbfe <__hexdig_fun>
 801fce8:	2800      	cmp	r0, #0
 801fcea:	d1f8      	bne.n	801fcde <__gethex+0xb6>
 801fcec:	1bad      	subs	r5, r5, r6
 801fcee:	00ad      	lsls	r5, r5, #2
 801fcf0:	e004      	b.n	801fcfc <__gethex+0xd4>
 801fcf2:	2400      	movs	r4, #0
 801fcf4:	4625      	mov	r5, r4
 801fcf6:	e7e0      	b.n	801fcba <__gethex+0x92>
 801fcf8:	2d00      	cmp	r5, #0
 801fcfa:	d1f7      	bne.n	801fcec <__gethex+0xc4>
 801fcfc:	7833      	ldrb	r3, [r6, #0]
 801fcfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fd02:	2b50      	cmp	r3, #80	; 0x50
 801fd04:	d13b      	bne.n	801fd7e <__gethex+0x156>
 801fd06:	7873      	ldrb	r3, [r6, #1]
 801fd08:	2b2b      	cmp	r3, #43	; 0x2b
 801fd0a:	d02c      	beq.n	801fd66 <__gethex+0x13e>
 801fd0c:	2b2d      	cmp	r3, #45	; 0x2d
 801fd0e:	d02e      	beq.n	801fd6e <__gethex+0x146>
 801fd10:	1c71      	adds	r1, r6, #1
 801fd12:	f04f 0900 	mov.w	r9, #0
 801fd16:	7808      	ldrb	r0, [r1, #0]
 801fd18:	f7ff ff71 	bl	801fbfe <__hexdig_fun>
 801fd1c:	1e43      	subs	r3, r0, #1
 801fd1e:	b2db      	uxtb	r3, r3
 801fd20:	2b18      	cmp	r3, #24
 801fd22:	d82c      	bhi.n	801fd7e <__gethex+0x156>
 801fd24:	f1a0 0210 	sub.w	r2, r0, #16
 801fd28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fd2c:	f7ff ff67 	bl	801fbfe <__hexdig_fun>
 801fd30:	1e43      	subs	r3, r0, #1
 801fd32:	b2db      	uxtb	r3, r3
 801fd34:	2b18      	cmp	r3, #24
 801fd36:	d91d      	bls.n	801fd74 <__gethex+0x14c>
 801fd38:	f1b9 0f00 	cmp.w	r9, #0
 801fd3c:	d000      	beq.n	801fd40 <__gethex+0x118>
 801fd3e:	4252      	negs	r2, r2
 801fd40:	4415      	add	r5, r2
 801fd42:	f8cb 1000 	str.w	r1, [fp]
 801fd46:	b1e4      	cbz	r4, 801fd82 <__gethex+0x15a>
 801fd48:	9b00      	ldr	r3, [sp, #0]
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	bf14      	ite	ne
 801fd4e:	2700      	movne	r7, #0
 801fd50:	2706      	moveq	r7, #6
 801fd52:	4638      	mov	r0, r7
 801fd54:	b009      	add	sp, #36	; 0x24
 801fd56:	ecbd 8b02 	vpop	{d8}
 801fd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd5e:	463e      	mov	r6, r7
 801fd60:	4625      	mov	r5, r4
 801fd62:	2401      	movs	r4, #1
 801fd64:	e7ca      	b.n	801fcfc <__gethex+0xd4>
 801fd66:	f04f 0900 	mov.w	r9, #0
 801fd6a:	1cb1      	adds	r1, r6, #2
 801fd6c:	e7d3      	b.n	801fd16 <__gethex+0xee>
 801fd6e:	f04f 0901 	mov.w	r9, #1
 801fd72:	e7fa      	b.n	801fd6a <__gethex+0x142>
 801fd74:	230a      	movs	r3, #10
 801fd76:	fb03 0202 	mla	r2, r3, r2, r0
 801fd7a:	3a10      	subs	r2, #16
 801fd7c:	e7d4      	b.n	801fd28 <__gethex+0x100>
 801fd7e:	4631      	mov	r1, r6
 801fd80:	e7df      	b.n	801fd42 <__gethex+0x11a>
 801fd82:	1bf3      	subs	r3, r6, r7
 801fd84:	3b01      	subs	r3, #1
 801fd86:	4621      	mov	r1, r4
 801fd88:	2b07      	cmp	r3, #7
 801fd8a:	dc0b      	bgt.n	801fda4 <__gethex+0x17c>
 801fd8c:	ee18 0a10 	vmov	r0, s16
 801fd90:	f000 fa82 	bl	8020298 <_Balloc>
 801fd94:	4604      	mov	r4, r0
 801fd96:	b940      	cbnz	r0, 801fdaa <__gethex+0x182>
 801fd98:	4b65      	ldr	r3, [pc, #404]	; (801ff30 <__gethex+0x308>)
 801fd9a:	4602      	mov	r2, r0
 801fd9c:	21de      	movs	r1, #222	; 0xde
 801fd9e:	4865      	ldr	r0, [pc, #404]	; (801ff34 <__gethex+0x30c>)
 801fda0:	f001 fa98 	bl	80212d4 <__assert_func>
 801fda4:	3101      	adds	r1, #1
 801fda6:	105b      	asrs	r3, r3, #1
 801fda8:	e7ee      	b.n	801fd88 <__gethex+0x160>
 801fdaa:	f100 0914 	add.w	r9, r0, #20
 801fdae:	f04f 0b00 	mov.w	fp, #0
 801fdb2:	f1ca 0301 	rsb	r3, sl, #1
 801fdb6:	f8cd 9008 	str.w	r9, [sp, #8]
 801fdba:	f8cd b000 	str.w	fp, [sp]
 801fdbe:	9306      	str	r3, [sp, #24]
 801fdc0:	42b7      	cmp	r7, r6
 801fdc2:	d340      	bcc.n	801fe46 <__gethex+0x21e>
 801fdc4:	9802      	ldr	r0, [sp, #8]
 801fdc6:	9b00      	ldr	r3, [sp, #0]
 801fdc8:	f840 3b04 	str.w	r3, [r0], #4
 801fdcc:	eba0 0009 	sub.w	r0, r0, r9
 801fdd0:	1080      	asrs	r0, r0, #2
 801fdd2:	0146      	lsls	r6, r0, #5
 801fdd4:	6120      	str	r0, [r4, #16]
 801fdd6:	4618      	mov	r0, r3
 801fdd8:	f000 fb54 	bl	8020484 <__hi0bits>
 801fddc:	1a30      	subs	r0, r6, r0
 801fdde:	f8d8 6000 	ldr.w	r6, [r8]
 801fde2:	42b0      	cmp	r0, r6
 801fde4:	dd63      	ble.n	801feae <__gethex+0x286>
 801fde6:	1b87      	subs	r7, r0, r6
 801fde8:	4639      	mov	r1, r7
 801fdea:	4620      	mov	r0, r4
 801fdec:	f000 feee 	bl	8020bcc <__any_on>
 801fdf0:	4682      	mov	sl, r0
 801fdf2:	b1a8      	cbz	r0, 801fe20 <__gethex+0x1f8>
 801fdf4:	1e7b      	subs	r3, r7, #1
 801fdf6:	1159      	asrs	r1, r3, #5
 801fdf8:	f003 021f 	and.w	r2, r3, #31
 801fdfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801fe00:	f04f 0a01 	mov.w	sl, #1
 801fe04:	fa0a f202 	lsl.w	r2, sl, r2
 801fe08:	420a      	tst	r2, r1
 801fe0a:	d009      	beq.n	801fe20 <__gethex+0x1f8>
 801fe0c:	4553      	cmp	r3, sl
 801fe0e:	dd05      	ble.n	801fe1c <__gethex+0x1f4>
 801fe10:	1eb9      	subs	r1, r7, #2
 801fe12:	4620      	mov	r0, r4
 801fe14:	f000 feda 	bl	8020bcc <__any_on>
 801fe18:	2800      	cmp	r0, #0
 801fe1a:	d145      	bne.n	801fea8 <__gethex+0x280>
 801fe1c:	f04f 0a02 	mov.w	sl, #2
 801fe20:	4639      	mov	r1, r7
 801fe22:	4620      	mov	r0, r4
 801fe24:	f7ff fe99 	bl	801fb5a <rshift>
 801fe28:	443d      	add	r5, r7
 801fe2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fe2e:	42ab      	cmp	r3, r5
 801fe30:	da4c      	bge.n	801fecc <__gethex+0x2a4>
 801fe32:	ee18 0a10 	vmov	r0, s16
 801fe36:	4621      	mov	r1, r4
 801fe38:	f000 fa6e 	bl	8020318 <_Bfree>
 801fe3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe3e:	2300      	movs	r3, #0
 801fe40:	6013      	str	r3, [r2, #0]
 801fe42:	27a3      	movs	r7, #163	; 0xa3
 801fe44:	e785      	b.n	801fd52 <__gethex+0x12a>
 801fe46:	1e73      	subs	r3, r6, #1
 801fe48:	9a05      	ldr	r2, [sp, #20]
 801fe4a:	9303      	str	r3, [sp, #12]
 801fe4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fe50:	4293      	cmp	r3, r2
 801fe52:	d019      	beq.n	801fe88 <__gethex+0x260>
 801fe54:	f1bb 0f20 	cmp.w	fp, #32
 801fe58:	d107      	bne.n	801fe6a <__gethex+0x242>
 801fe5a:	9b02      	ldr	r3, [sp, #8]
 801fe5c:	9a00      	ldr	r2, [sp, #0]
 801fe5e:	f843 2b04 	str.w	r2, [r3], #4
 801fe62:	9302      	str	r3, [sp, #8]
 801fe64:	2300      	movs	r3, #0
 801fe66:	9300      	str	r3, [sp, #0]
 801fe68:	469b      	mov	fp, r3
 801fe6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fe6e:	f7ff fec6 	bl	801fbfe <__hexdig_fun>
 801fe72:	9b00      	ldr	r3, [sp, #0]
 801fe74:	f000 000f 	and.w	r0, r0, #15
 801fe78:	fa00 f00b 	lsl.w	r0, r0, fp
 801fe7c:	4303      	orrs	r3, r0
 801fe7e:	9300      	str	r3, [sp, #0]
 801fe80:	f10b 0b04 	add.w	fp, fp, #4
 801fe84:	9b03      	ldr	r3, [sp, #12]
 801fe86:	e00d      	b.n	801fea4 <__gethex+0x27c>
 801fe88:	9b03      	ldr	r3, [sp, #12]
 801fe8a:	9a06      	ldr	r2, [sp, #24]
 801fe8c:	4413      	add	r3, r2
 801fe8e:	42bb      	cmp	r3, r7
 801fe90:	d3e0      	bcc.n	801fe54 <__gethex+0x22c>
 801fe92:	4618      	mov	r0, r3
 801fe94:	9901      	ldr	r1, [sp, #4]
 801fe96:	9307      	str	r3, [sp, #28]
 801fe98:	4652      	mov	r2, sl
 801fe9a:	f001 f928 	bl	80210ee <strncmp>
 801fe9e:	9b07      	ldr	r3, [sp, #28]
 801fea0:	2800      	cmp	r0, #0
 801fea2:	d1d7      	bne.n	801fe54 <__gethex+0x22c>
 801fea4:	461e      	mov	r6, r3
 801fea6:	e78b      	b.n	801fdc0 <__gethex+0x198>
 801fea8:	f04f 0a03 	mov.w	sl, #3
 801feac:	e7b8      	b.n	801fe20 <__gethex+0x1f8>
 801feae:	da0a      	bge.n	801fec6 <__gethex+0x29e>
 801feb0:	1a37      	subs	r7, r6, r0
 801feb2:	4621      	mov	r1, r4
 801feb4:	ee18 0a10 	vmov	r0, s16
 801feb8:	463a      	mov	r2, r7
 801feba:	f000 fc49 	bl	8020750 <__lshift>
 801febe:	1bed      	subs	r5, r5, r7
 801fec0:	4604      	mov	r4, r0
 801fec2:	f100 0914 	add.w	r9, r0, #20
 801fec6:	f04f 0a00 	mov.w	sl, #0
 801feca:	e7ae      	b.n	801fe2a <__gethex+0x202>
 801fecc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fed0:	42a8      	cmp	r0, r5
 801fed2:	dd72      	ble.n	801ffba <__gethex+0x392>
 801fed4:	1b45      	subs	r5, r0, r5
 801fed6:	42ae      	cmp	r6, r5
 801fed8:	dc36      	bgt.n	801ff48 <__gethex+0x320>
 801feda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fede:	2b02      	cmp	r3, #2
 801fee0:	d02a      	beq.n	801ff38 <__gethex+0x310>
 801fee2:	2b03      	cmp	r3, #3
 801fee4:	d02c      	beq.n	801ff40 <__gethex+0x318>
 801fee6:	2b01      	cmp	r3, #1
 801fee8:	d115      	bne.n	801ff16 <__gethex+0x2ee>
 801feea:	42ae      	cmp	r6, r5
 801feec:	d113      	bne.n	801ff16 <__gethex+0x2ee>
 801feee:	2e01      	cmp	r6, #1
 801fef0:	d10b      	bne.n	801ff0a <__gethex+0x2e2>
 801fef2:	9a04      	ldr	r2, [sp, #16]
 801fef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fef8:	6013      	str	r3, [r2, #0]
 801fefa:	2301      	movs	r3, #1
 801fefc:	6123      	str	r3, [r4, #16]
 801fefe:	f8c9 3000 	str.w	r3, [r9]
 801ff02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ff04:	2762      	movs	r7, #98	; 0x62
 801ff06:	601c      	str	r4, [r3, #0]
 801ff08:	e723      	b.n	801fd52 <__gethex+0x12a>
 801ff0a:	1e71      	subs	r1, r6, #1
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f000 fe5d 	bl	8020bcc <__any_on>
 801ff12:	2800      	cmp	r0, #0
 801ff14:	d1ed      	bne.n	801fef2 <__gethex+0x2ca>
 801ff16:	ee18 0a10 	vmov	r0, s16
 801ff1a:	4621      	mov	r1, r4
 801ff1c:	f000 f9fc 	bl	8020318 <_Bfree>
 801ff20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff22:	2300      	movs	r3, #0
 801ff24:	6013      	str	r3, [r2, #0]
 801ff26:	2750      	movs	r7, #80	; 0x50
 801ff28:	e713      	b.n	801fd52 <__gethex+0x12a>
 801ff2a:	bf00      	nop
 801ff2c:	0802b884 	.word	0x0802b884
 801ff30:	0802b7a4 	.word	0x0802b7a4
 801ff34:	0802b818 	.word	0x0802b818
 801ff38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	d1eb      	bne.n	801ff16 <__gethex+0x2ee>
 801ff3e:	e7d8      	b.n	801fef2 <__gethex+0x2ca>
 801ff40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	d1d5      	bne.n	801fef2 <__gethex+0x2ca>
 801ff46:	e7e6      	b.n	801ff16 <__gethex+0x2ee>
 801ff48:	1e6f      	subs	r7, r5, #1
 801ff4a:	f1ba 0f00 	cmp.w	sl, #0
 801ff4e:	d131      	bne.n	801ffb4 <__gethex+0x38c>
 801ff50:	b127      	cbz	r7, 801ff5c <__gethex+0x334>
 801ff52:	4639      	mov	r1, r7
 801ff54:	4620      	mov	r0, r4
 801ff56:	f000 fe39 	bl	8020bcc <__any_on>
 801ff5a:	4682      	mov	sl, r0
 801ff5c:	117b      	asrs	r3, r7, #5
 801ff5e:	2101      	movs	r1, #1
 801ff60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ff64:	f007 071f 	and.w	r7, r7, #31
 801ff68:	fa01 f707 	lsl.w	r7, r1, r7
 801ff6c:	421f      	tst	r7, r3
 801ff6e:	4629      	mov	r1, r5
 801ff70:	4620      	mov	r0, r4
 801ff72:	bf18      	it	ne
 801ff74:	f04a 0a02 	orrne.w	sl, sl, #2
 801ff78:	1b76      	subs	r6, r6, r5
 801ff7a:	f7ff fdee 	bl	801fb5a <rshift>
 801ff7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ff82:	2702      	movs	r7, #2
 801ff84:	f1ba 0f00 	cmp.w	sl, #0
 801ff88:	d048      	beq.n	802001c <__gethex+0x3f4>
 801ff8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ff8e:	2b02      	cmp	r3, #2
 801ff90:	d015      	beq.n	801ffbe <__gethex+0x396>
 801ff92:	2b03      	cmp	r3, #3
 801ff94:	d017      	beq.n	801ffc6 <__gethex+0x39e>
 801ff96:	2b01      	cmp	r3, #1
 801ff98:	d109      	bne.n	801ffae <__gethex+0x386>
 801ff9a:	f01a 0f02 	tst.w	sl, #2
 801ff9e:	d006      	beq.n	801ffae <__gethex+0x386>
 801ffa0:	f8d9 0000 	ldr.w	r0, [r9]
 801ffa4:	ea4a 0a00 	orr.w	sl, sl, r0
 801ffa8:	f01a 0f01 	tst.w	sl, #1
 801ffac:	d10e      	bne.n	801ffcc <__gethex+0x3a4>
 801ffae:	f047 0710 	orr.w	r7, r7, #16
 801ffb2:	e033      	b.n	802001c <__gethex+0x3f4>
 801ffb4:	f04f 0a01 	mov.w	sl, #1
 801ffb8:	e7d0      	b.n	801ff5c <__gethex+0x334>
 801ffba:	2701      	movs	r7, #1
 801ffbc:	e7e2      	b.n	801ff84 <__gethex+0x35c>
 801ffbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ffc0:	f1c3 0301 	rsb	r3, r3, #1
 801ffc4:	9315      	str	r3, [sp, #84]	; 0x54
 801ffc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d0f0      	beq.n	801ffae <__gethex+0x386>
 801ffcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ffd0:	f104 0314 	add.w	r3, r4, #20
 801ffd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ffd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ffdc:	f04f 0c00 	mov.w	ip, #0
 801ffe0:	4618      	mov	r0, r3
 801ffe2:	f853 2b04 	ldr.w	r2, [r3], #4
 801ffe6:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ffea:	d01c      	beq.n	8020026 <__gethex+0x3fe>
 801ffec:	3201      	adds	r2, #1
 801ffee:	6002      	str	r2, [r0, #0]
 801fff0:	2f02      	cmp	r7, #2
 801fff2:	f104 0314 	add.w	r3, r4, #20
 801fff6:	d13f      	bne.n	8020078 <__gethex+0x450>
 801fff8:	f8d8 2000 	ldr.w	r2, [r8]
 801fffc:	3a01      	subs	r2, #1
 801fffe:	42b2      	cmp	r2, r6
 8020000:	d10a      	bne.n	8020018 <__gethex+0x3f0>
 8020002:	1171      	asrs	r1, r6, #5
 8020004:	2201      	movs	r2, #1
 8020006:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802000a:	f006 061f 	and.w	r6, r6, #31
 802000e:	fa02 f606 	lsl.w	r6, r2, r6
 8020012:	421e      	tst	r6, r3
 8020014:	bf18      	it	ne
 8020016:	4617      	movne	r7, r2
 8020018:	f047 0720 	orr.w	r7, r7, #32
 802001c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802001e:	601c      	str	r4, [r3, #0]
 8020020:	9b04      	ldr	r3, [sp, #16]
 8020022:	601d      	str	r5, [r3, #0]
 8020024:	e695      	b.n	801fd52 <__gethex+0x12a>
 8020026:	4299      	cmp	r1, r3
 8020028:	f843 cc04 	str.w	ip, [r3, #-4]
 802002c:	d8d8      	bhi.n	801ffe0 <__gethex+0x3b8>
 802002e:	68a3      	ldr	r3, [r4, #8]
 8020030:	459b      	cmp	fp, r3
 8020032:	db19      	blt.n	8020068 <__gethex+0x440>
 8020034:	6861      	ldr	r1, [r4, #4]
 8020036:	ee18 0a10 	vmov	r0, s16
 802003a:	3101      	adds	r1, #1
 802003c:	f000 f92c 	bl	8020298 <_Balloc>
 8020040:	4681      	mov	r9, r0
 8020042:	b918      	cbnz	r0, 802004c <__gethex+0x424>
 8020044:	4b1a      	ldr	r3, [pc, #104]	; (80200b0 <__gethex+0x488>)
 8020046:	4602      	mov	r2, r0
 8020048:	2184      	movs	r1, #132	; 0x84
 802004a:	e6a8      	b.n	801fd9e <__gethex+0x176>
 802004c:	6922      	ldr	r2, [r4, #16]
 802004e:	3202      	adds	r2, #2
 8020050:	f104 010c 	add.w	r1, r4, #12
 8020054:	0092      	lsls	r2, r2, #2
 8020056:	300c      	adds	r0, #12
 8020058:	f000 f910 	bl	802027c <memcpy>
 802005c:	4621      	mov	r1, r4
 802005e:	ee18 0a10 	vmov	r0, s16
 8020062:	f000 f959 	bl	8020318 <_Bfree>
 8020066:	464c      	mov	r4, r9
 8020068:	6923      	ldr	r3, [r4, #16]
 802006a:	1c5a      	adds	r2, r3, #1
 802006c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020070:	6122      	str	r2, [r4, #16]
 8020072:	2201      	movs	r2, #1
 8020074:	615a      	str	r2, [r3, #20]
 8020076:	e7bb      	b.n	801fff0 <__gethex+0x3c8>
 8020078:	6922      	ldr	r2, [r4, #16]
 802007a:	455a      	cmp	r2, fp
 802007c:	dd0b      	ble.n	8020096 <__gethex+0x46e>
 802007e:	2101      	movs	r1, #1
 8020080:	4620      	mov	r0, r4
 8020082:	f7ff fd6a 	bl	801fb5a <rshift>
 8020086:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802008a:	3501      	adds	r5, #1
 802008c:	42ab      	cmp	r3, r5
 802008e:	f6ff aed0 	blt.w	801fe32 <__gethex+0x20a>
 8020092:	2701      	movs	r7, #1
 8020094:	e7c0      	b.n	8020018 <__gethex+0x3f0>
 8020096:	f016 061f 	ands.w	r6, r6, #31
 802009a:	d0fa      	beq.n	8020092 <__gethex+0x46a>
 802009c:	449a      	add	sl, r3
 802009e:	f1c6 0620 	rsb	r6, r6, #32
 80200a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80200a6:	f000 f9ed 	bl	8020484 <__hi0bits>
 80200aa:	42b0      	cmp	r0, r6
 80200ac:	dbe7      	blt.n	802007e <__gethex+0x456>
 80200ae:	e7f0      	b.n	8020092 <__gethex+0x46a>
 80200b0:	0802b7a4 	.word	0x0802b7a4

080200b4 <L_shift>:
 80200b4:	f1c2 0208 	rsb	r2, r2, #8
 80200b8:	0092      	lsls	r2, r2, #2
 80200ba:	b570      	push	{r4, r5, r6, lr}
 80200bc:	f1c2 0620 	rsb	r6, r2, #32
 80200c0:	6843      	ldr	r3, [r0, #4]
 80200c2:	6804      	ldr	r4, [r0, #0]
 80200c4:	fa03 f506 	lsl.w	r5, r3, r6
 80200c8:	432c      	orrs	r4, r5
 80200ca:	40d3      	lsrs	r3, r2
 80200cc:	6004      	str	r4, [r0, #0]
 80200ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80200d2:	4288      	cmp	r0, r1
 80200d4:	d3f4      	bcc.n	80200c0 <L_shift+0xc>
 80200d6:	bd70      	pop	{r4, r5, r6, pc}

080200d8 <__match>:
 80200d8:	b530      	push	{r4, r5, lr}
 80200da:	6803      	ldr	r3, [r0, #0]
 80200dc:	3301      	adds	r3, #1
 80200de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80200e2:	b914      	cbnz	r4, 80200ea <__match+0x12>
 80200e4:	6003      	str	r3, [r0, #0]
 80200e6:	2001      	movs	r0, #1
 80200e8:	bd30      	pop	{r4, r5, pc}
 80200ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80200ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80200f2:	2d19      	cmp	r5, #25
 80200f4:	bf98      	it	ls
 80200f6:	3220      	addls	r2, #32
 80200f8:	42a2      	cmp	r2, r4
 80200fa:	d0f0      	beq.n	80200de <__match+0x6>
 80200fc:	2000      	movs	r0, #0
 80200fe:	e7f3      	b.n	80200e8 <__match+0x10>

08020100 <__hexnan>:
 8020100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020104:	680b      	ldr	r3, [r1, #0]
 8020106:	6801      	ldr	r1, [r0, #0]
 8020108:	115e      	asrs	r6, r3, #5
 802010a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802010e:	f013 031f 	ands.w	r3, r3, #31
 8020112:	b087      	sub	sp, #28
 8020114:	bf18      	it	ne
 8020116:	3604      	addne	r6, #4
 8020118:	2500      	movs	r5, #0
 802011a:	1f37      	subs	r7, r6, #4
 802011c:	4682      	mov	sl, r0
 802011e:	4690      	mov	r8, r2
 8020120:	9301      	str	r3, [sp, #4]
 8020122:	f846 5c04 	str.w	r5, [r6, #-4]
 8020126:	46b9      	mov	r9, r7
 8020128:	463c      	mov	r4, r7
 802012a:	9502      	str	r5, [sp, #8]
 802012c:	46ab      	mov	fp, r5
 802012e:	784a      	ldrb	r2, [r1, #1]
 8020130:	1c4b      	adds	r3, r1, #1
 8020132:	9303      	str	r3, [sp, #12]
 8020134:	b342      	cbz	r2, 8020188 <__hexnan+0x88>
 8020136:	4610      	mov	r0, r2
 8020138:	9105      	str	r1, [sp, #20]
 802013a:	9204      	str	r2, [sp, #16]
 802013c:	f7ff fd5f 	bl	801fbfe <__hexdig_fun>
 8020140:	2800      	cmp	r0, #0
 8020142:	d14f      	bne.n	80201e4 <__hexnan+0xe4>
 8020144:	9a04      	ldr	r2, [sp, #16]
 8020146:	9905      	ldr	r1, [sp, #20]
 8020148:	2a20      	cmp	r2, #32
 802014a:	d818      	bhi.n	802017e <__hexnan+0x7e>
 802014c:	9b02      	ldr	r3, [sp, #8]
 802014e:	459b      	cmp	fp, r3
 8020150:	dd13      	ble.n	802017a <__hexnan+0x7a>
 8020152:	454c      	cmp	r4, r9
 8020154:	d206      	bcs.n	8020164 <__hexnan+0x64>
 8020156:	2d07      	cmp	r5, #7
 8020158:	dc04      	bgt.n	8020164 <__hexnan+0x64>
 802015a:	462a      	mov	r2, r5
 802015c:	4649      	mov	r1, r9
 802015e:	4620      	mov	r0, r4
 8020160:	f7ff ffa8 	bl	80200b4 <L_shift>
 8020164:	4544      	cmp	r4, r8
 8020166:	d950      	bls.n	802020a <__hexnan+0x10a>
 8020168:	2300      	movs	r3, #0
 802016a:	f1a4 0904 	sub.w	r9, r4, #4
 802016e:	f844 3c04 	str.w	r3, [r4, #-4]
 8020172:	f8cd b008 	str.w	fp, [sp, #8]
 8020176:	464c      	mov	r4, r9
 8020178:	461d      	mov	r5, r3
 802017a:	9903      	ldr	r1, [sp, #12]
 802017c:	e7d7      	b.n	802012e <__hexnan+0x2e>
 802017e:	2a29      	cmp	r2, #41	; 0x29
 8020180:	d156      	bne.n	8020230 <__hexnan+0x130>
 8020182:	3102      	adds	r1, #2
 8020184:	f8ca 1000 	str.w	r1, [sl]
 8020188:	f1bb 0f00 	cmp.w	fp, #0
 802018c:	d050      	beq.n	8020230 <__hexnan+0x130>
 802018e:	454c      	cmp	r4, r9
 8020190:	d206      	bcs.n	80201a0 <__hexnan+0xa0>
 8020192:	2d07      	cmp	r5, #7
 8020194:	dc04      	bgt.n	80201a0 <__hexnan+0xa0>
 8020196:	462a      	mov	r2, r5
 8020198:	4649      	mov	r1, r9
 802019a:	4620      	mov	r0, r4
 802019c:	f7ff ff8a 	bl	80200b4 <L_shift>
 80201a0:	4544      	cmp	r4, r8
 80201a2:	d934      	bls.n	802020e <__hexnan+0x10e>
 80201a4:	f1a8 0204 	sub.w	r2, r8, #4
 80201a8:	4623      	mov	r3, r4
 80201aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80201ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80201b2:	429f      	cmp	r7, r3
 80201b4:	d2f9      	bcs.n	80201aa <__hexnan+0xaa>
 80201b6:	1b3b      	subs	r3, r7, r4
 80201b8:	f023 0303 	bic.w	r3, r3, #3
 80201bc:	3304      	adds	r3, #4
 80201be:	3401      	adds	r4, #1
 80201c0:	3e03      	subs	r6, #3
 80201c2:	42b4      	cmp	r4, r6
 80201c4:	bf88      	it	hi
 80201c6:	2304      	movhi	r3, #4
 80201c8:	4443      	add	r3, r8
 80201ca:	2200      	movs	r2, #0
 80201cc:	f843 2b04 	str.w	r2, [r3], #4
 80201d0:	429f      	cmp	r7, r3
 80201d2:	d2fb      	bcs.n	80201cc <__hexnan+0xcc>
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	b91b      	cbnz	r3, 80201e0 <__hexnan+0xe0>
 80201d8:	4547      	cmp	r7, r8
 80201da:	d127      	bne.n	802022c <__hexnan+0x12c>
 80201dc:	2301      	movs	r3, #1
 80201de:	603b      	str	r3, [r7, #0]
 80201e0:	2005      	movs	r0, #5
 80201e2:	e026      	b.n	8020232 <__hexnan+0x132>
 80201e4:	3501      	adds	r5, #1
 80201e6:	2d08      	cmp	r5, #8
 80201e8:	f10b 0b01 	add.w	fp, fp, #1
 80201ec:	dd06      	ble.n	80201fc <__hexnan+0xfc>
 80201ee:	4544      	cmp	r4, r8
 80201f0:	d9c3      	bls.n	802017a <__hexnan+0x7a>
 80201f2:	2300      	movs	r3, #0
 80201f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80201f8:	2501      	movs	r5, #1
 80201fa:	3c04      	subs	r4, #4
 80201fc:	6822      	ldr	r2, [r4, #0]
 80201fe:	f000 000f 	and.w	r0, r0, #15
 8020202:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8020206:	6022      	str	r2, [r4, #0]
 8020208:	e7b7      	b.n	802017a <__hexnan+0x7a>
 802020a:	2508      	movs	r5, #8
 802020c:	e7b5      	b.n	802017a <__hexnan+0x7a>
 802020e:	9b01      	ldr	r3, [sp, #4]
 8020210:	2b00      	cmp	r3, #0
 8020212:	d0df      	beq.n	80201d4 <__hexnan+0xd4>
 8020214:	f04f 32ff 	mov.w	r2, #4294967295
 8020218:	f1c3 0320 	rsb	r3, r3, #32
 802021c:	fa22 f303 	lsr.w	r3, r2, r3
 8020220:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020224:	401a      	ands	r2, r3
 8020226:	f846 2c04 	str.w	r2, [r6, #-4]
 802022a:	e7d3      	b.n	80201d4 <__hexnan+0xd4>
 802022c:	3f04      	subs	r7, #4
 802022e:	e7d1      	b.n	80201d4 <__hexnan+0xd4>
 8020230:	2004      	movs	r0, #4
 8020232:	b007      	add	sp, #28
 8020234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020238 <_localeconv_r>:
 8020238:	4800      	ldr	r0, [pc, #0]	; (802023c <_localeconv_r+0x4>)
 802023a:	4770      	bx	lr
 802023c:	20000844 	.word	0x20000844

08020240 <__retarget_lock_init_recursive>:
 8020240:	4770      	bx	lr

08020242 <__retarget_lock_acquire_recursive>:
 8020242:	4770      	bx	lr

08020244 <__retarget_lock_release_recursive>:
 8020244:	4770      	bx	lr
	...

08020248 <malloc>:
 8020248:	4b02      	ldr	r3, [pc, #8]	; (8020254 <malloc+0xc>)
 802024a:	4601      	mov	r1, r0
 802024c:	6818      	ldr	r0, [r3, #0]
 802024e:	f000 bd3d 	b.w	8020ccc <_malloc_r>
 8020252:	bf00      	nop
 8020254:	200006ec 	.word	0x200006ec

08020258 <__ascii_mbtowc>:
 8020258:	b082      	sub	sp, #8
 802025a:	b901      	cbnz	r1, 802025e <__ascii_mbtowc+0x6>
 802025c:	a901      	add	r1, sp, #4
 802025e:	b142      	cbz	r2, 8020272 <__ascii_mbtowc+0x1a>
 8020260:	b14b      	cbz	r3, 8020276 <__ascii_mbtowc+0x1e>
 8020262:	7813      	ldrb	r3, [r2, #0]
 8020264:	600b      	str	r3, [r1, #0]
 8020266:	7812      	ldrb	r2, [r2, #0]
 8020268:	1e10      	subs	r0, r2, #0
 802026a:	bf18      	it	ne
 802026c:	2001      	movne	r0, #1
 802026e:	b002      	add	sp, #8
 8020270:	4770      	bx	lr
 8020272:	4610      	mov	r0, r2
 8020274:	e7fb      	b.n	802026e <__ascii_mbtowc+0x16>
 8020276:	f06f 0001 	mvn.w	r0, #1
 802027a:	e7f8      	b.n	802026e <__ascii_mbtowc+0x16>

0802027c <memcpy>:
 802027c:	440a      	add	r2, r1
 802027e:	4291      	cmp	r1, r2
 8020280:	f100 33ff 	add.w	r3, r0, #4294967295
 8020284:	d100      	bne.n	8020288 <memcpy+0xc>
 8020286:	4770      	bx	lr
 8020288:	b510      	push	{r4, lr}
 802028a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802028e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020292:	4291      	cmp	r1, r2
 8020294:	d1f9      	bne.n	802028a <memcpy+0xe>
 8020296:	bd10      	pop	{r4, pc}

08020298 <_Balloc>:
 8020298:	b570      	push	{r4, r5, r6, lr}
 802029a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802029c:	4604      	mov	r4, r0
 802029e:	460d      	mov	r5, r1
 80202a0:	b976      	cbnz	r6, 80202c0 <_Balloc+0x28>
 80202a2:	2010      	movs	r0, #16
 80202a4:	f7ff ffd0 	bl	8020248 <malloc>
 80202a8:	4602      	mov	r2, r0
 80202aa:	6260      	str	r0, [r4, #36]	; 0x24
 80202ac:	b920      	cbnz	r0, 80202b8 <_Balloc+0x20>
 80202ae:	4b18      	ldr	r3, [pc, #96]	; (8020310 <_Balloc+0x78>)
 80202b0:	4818      	ldr	r0, [pc, #96]	; (8020314 <_Balloc+0x7c>)
 80202b2:	2166      	movs	r1, #102	; 0x66
 80202b4:	f001 f80e 	bl	80212d4 <__assert_func>
 80202b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80202bc:	6006      	str	r6, [r0, #0]
 80202be:	60c6      	str	r6, [r0, #12]
 80202c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80202c2:	68f3      	ldr	r3, [r6, #12]
 80202c4:	b183      	cbz	r3, 80202e8 <_Balloc+0x50>
 80202c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80202c8:	68db      	ldr	r3, [r3, #12]
 80202ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80202ce:	b9b8      	cbnz	r0, 8020300 <_Balloc+0x68>
 80202d0:	2101      	movs	r1, #1
 80202d2:	fa01 f605 	lsl.w	r6, r1, r5
 80202d6:	1d72      	adds	r2, r6, #5
 80202d8:	0092      	lsls	r2, r2, #2
 80202da:	4620      	mov	r0, r4
 80202dc:	f000 fc97 	bl	8020c0e <_calloc_r>
 80202e0:	b160      	cbz	r0, 80202fc <_Balloc+0x64>
 80202e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80202e6:	e00e      	b.n	8020306 <_Balloc+0x6e>
 80202e8:	2221      	movs	r2, #33	; 0x21
 80202ea:	2104      	movs	r1, #4
 80202ec:	4620      	mov	r0, r4
 80202ee:	f000 fc8e 	bl	8020c0e <_calloc_r>
 80202f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80202f4:	60f0      	str	r0, [r6, #12]
 80202f6:	68db      	ldr	r3, [r3, #12]
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d1e4      	bne.n	80202c6 <_Balloc+0x2e>
 80202fc:	2000      	movs	r0, #0
 80202fe:	bd70      	pop	{r4, r5, r6, pc}
 8020300:	6802      	ldr	r2, [r0, #0]
 8020302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020306:	2300      	movs	r3, #0
 8020308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802030c:	e7f7      	b.n	80202fe <_Balloc+0x66>
 802030e:	bf00      	nop
 8020310:	0802b72e 	.word	0x0802b72e
 8020314:	0802b898 	.word	0x0802b898

08020318 <_Bfree>:
 8020318:	b570      	push	{r4, r5, r6, lr}
 802031a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802031c:	4605      	mov	r5, r0
 802031e:	460c      	mov	r4, r1
 8020320:	b976      	cbnz	r6, 8020340 <_Bfree+0x28>
 8020322:	2010      	movs	r0, #16
 8020324:	f7ff ff90 	bl	8020248 <malloc>
 8020328:	4602      	mov	r2, r0
 802032a:	6268      	str	r0, [r5, #36]	; 0x24
 802032c:	b920      	cbnz	r0, 8020338 <_Bfree+0x20>
 802032e:	4b09      	ldr	r3, [pc, #36]	; (8020354 <_Bfree+0x3c>)
 8020330:	4809      	ldr	r0, [pc, #36]	; (8020358 <_Bfree+0x40>)
 8020332:	218a      	movs	r1, #138	; 0x8a
 8020334:	f000 ffce 	bl	80212d4 <__assert_func>
 8020338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802033c:	6006      	str	r6, [r0, #0]
 802033e:	60c6      	str	r6, [r0, #12]
 8020340:	b13c      	cbz	r4, 8020352 <_Bfree+0x3a>
 8020342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020344:	6862      	ldr	r2, [r4, #4]
 8020346:	68db      	ldr	r3, [r3, #12]
 8020348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802034c:	6021      	str	r1, [r4, #0]
 802034e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020352:	bd70      	pop	{r4, r5, r6, pc}
 8020354:	0802b72e 	.word	0x0802b72e
 8020358:	0802b898 	.word	0x0802b898

0802035c <__multadd>:
 802035c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020360:	690e      	ldr	r6, [r1, #16]
 8020362:	4607      	mov	r7, r0
 8020364:	4698      	mov	r8, r3
 8020366:	460c      	mov	r4, r1
 8020368:	f101 0014 	add.w	r0, r1, #20
 802036c:	2300      	movs	r3, #0
 802036e:	6805      	ldr	r5, [r0, #0]
 8020370:	b2a9      	uxth	r1, r5
 8020372:	fb02 8101 	mla	r1, r2, r1, r8
 8020376:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802037a:	0c2d      	lsrs	r5, r5, #16
 802037c:	fb02 c505 	mla	r5, r2, r5, ip
 8020380:	b289      	uxth	r1, r1
 8020382:	3301      	adds	r3, #1
 8020384:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020388:	429e      	cmp	r6, r3
 802038a:	f840 1b04 	str.w	r1, [r0], #4
 802038e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020392:	dcec      	bgt.n	802036e <__multadd+0x12>
 8020394:	f1b8 0f00 	cmp.w	r8, #0
 8020398:	d022      	beq.n	80203e0 <__multadd+0x84>
 802039a:	68a3      	ldr	r3, [r4, #8]
 802039c:	42b3      	cmp	r3, r6
 802039e:	dc19      	bgt.n	80203d4 <__multadd+0x78>
 80203a0:	6861      	ldr	r1, [r4, #4]
 80203a2:	4638      	mov	r0, r7
 80203a4:	3101      	adds	r1, #1
 80203a6:	f7ff ff77 	bl	8020298 <_Balloc>
 80203aa:	4605      	mov	r5, r0
 80203ac:	b928      	cbnz	r0, 80203ba <__multadd+0x5e>
 80203ae:	4602      	mov	r2, r0
 80203b0:	4b0d      	ldr	r3, [pc, #52]	; (80203e8 <__multadd+0x8c>)
 80203b2:	480e      	ldr	r0, [pc, #56]	; (80203ec <__multadd+0x90>)
 80203b4:	21b5      	movs	r1, #181	; 0xb5
 80203b6:	f000 ff8d 	bl	80212d4 <__assert_func>
 80203ba:	6922      	ldr	r2, [r4, #16]
 80203bc:	3202      	adds	r2, #2
 80203be:	f104 010c 	add.w	r1, r4, #12
 80203c2:	0092      	lsls	r2, r2, #2
 80203c4:	300c      	adds	r0, #12
 80203c6:	f7ff ff59 	bl	802027c <memcpy>
 80203ca:	4621      	mov	r1, r4
 80203cc:	4638      	mov	r0, r7
 80203ce:	f7ff ffa3 	bl	8020318 <_Bfree>
 80203d2:	462c      	mov	r4, r5
 80203d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80203d8:	3601      	adds	r6, #1
 80203da:	f8c3 8014 	str.w	r8, [r3, #20]
 80203de:	6126      	str	r6, [r4, #16]
 80203e0:	4620      	mov	r0, r4
 80203e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203e6:	bf00      	nop
 80203e8:	0802b7a4 	.word	0x0802b7a4
 80203ec:	0802b898 	.word	0x0802b898

080203f0 <__s2b>:
 80203f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203f4:	460c      	mov	r4, r1
 80203f6:	4615      	mov	r5, r2
 80203f8:	461f      	mov	r7, r3
 80203fa:	2209      	movs	r2, #9
 80203fc:	3308      	adds	r3, #8
 80203fe:	4606      	mov	r6, r0
 8020400:	fb93 f3f2 	sdiv	r3, r3, r2
 8020404:	2100      	movs	r1, #0
 8020406:	2201      	movs	r2, #1
 8020408:	429a      	cmp	r2, r3
 802040a:	db09      	blt.n	8020420 <__s2b+0x30>
 802040c:	4630      	mov	r0, r6
 802040e:	f7ff ff43 	bl	8020298 <_Balloc>
 8020412:	b940      	cbnz	r0, 8020426 <__s2b+0x36>
 8020414:	4602      	mov	r2, r0
 8020416:	4b19      	ldr	r3, [pc, #100]	; (802047c <__s2b+0x8c>)
 8020418:	4819      	ldr	r0, [pc, #100]	; (8020480 <__s2b+0x90>)
 802041a:	21ce      	movs	r1, #206	; 0xce
 802041c:	f000 ff5a 	bl	80212d4 <__assert_func>
 8020420:	0052      	lsls	r2, r2, #1
 8020422:	3101      	adds	r1, #1
 8020424:	e7f0      	b.n	8020408 <__s2b+0x18>
 8020426:	9b08      	ldr	r3, [sp, #32]
 8020428:	6143      	str	r3, [r0, #20]
 802042a:	2d09      	cmp	r5, #9
 802042c:	f04f 0301 	mov.w	r3, #1
 8020430:	6103      	str	r3, [r0, #16]
 8020432:	dd16      	ble.n	8020462 <__s2b+0x72>
 8020434:	f104 0909 	add.w	r9, r4, #9
 8020438:	46c8      	mov	r8, r9
 802043a:	442c      	add	r4, r5
 802043c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020440:	4601      	mov	r1, r0
 8020442:	3b30      	subs	r3, #48	; 0x30
 8020444:	220a      	movs	r2, #10
 8020446:	4630      	mov	r0, r6
 8020448:	f7ff ff88 	bl	802035c <__multadd>
 802044c:	45a0      	cmp	r8, r4
 802044e:	d1f5      	bne.n	802043c <__s2b+0x4c>
 8020450:	f1a5 0408 	sub.w	r4, r5, #8
 8020454:	444c      	add	r4, r9
 8020456:	1b2d      	subs	r5, r5, r4
 8020458:	1963      	adds	r3, r4, r5
 802045a:	42bb      	cmp	r3, r7
 802045c:	db04      	blt.n	8020468 <__s2b+0x78>
 802045e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020462:	340a      	adds	r4, #10
 8020464:	2509      	movs	r5, #9
 8020466:	e7f6      	b.n	8020456 <__s2b+0x66>
 8020468:	f814 3b01 	ldrb.w	r3, [r4], #1
 802046c:	4601      	mov	r1, r0
 802046e:	3b30      	subs	r3, #48	; 0x30
 8020470:	220a      	movs	r2, #10
 8020472:	4630      	mov	r0, r6
 8020474:	f7ff ff72 	bl	802035c <__multadd>
 8020478:	e7ee      	b.n	8020458 <__s2b+0x68>
 802047a:	bf00      	nop
 802047c:	0802b7a4 	.word	0x0802b7a4
 8020480:	0802b898 	.word	0x0802b898

08020484 <__hi0bits>:
 8020484:	0c03      	lsrs	r3, r0, #16
 8020486:	041b      	lsls	r3, r3, #16
 8020488:	b9d3      	cbnz	r3, 80204c0 <__hi0bits+0x3c>
 802048a:	0400      	lsls	r0, r0, #16
 802048c:	2310      	movs	r3, #16
 802048e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020492:	bf04      	itt	eq
 8020494:	0200      	lsleq	r0, r0, #8
 8020496:	3308      	addeq	r3, #8
 8020498:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802049c:	bf04      	itt	eq
 802049e:	0100      	lsleq	r0, r0, #4
 80204a0:	3304      	addeq	r3, #4
 80204a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80204a6:	bf04      	itt	eq
 80204a8:	0080      	lsleq	r0, r0, #2
 80204aa:	3302      	addeq	r3, #2
 80204ac:	2800      	cmp	r0, #0
 80204ae:	db05      	blt.n	80204bc <__hi0bits+0x38>
 80204b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80204b4:	f103 0301 	add.w	r3, r3, #1
 80204b8:	bf08      	it	eq
 80204ba:	2320      	moveq	r3, #32
 80204bc:	4618      	mov	r0, r3
 80204be:	4770      	bx	lr
 80204c0:	2300      	movs	r3, #0
 80204c2:	e7e4      	b.n	802048e <__hi0bits+0xa>

080204c4 <__lo0bits>:
 80204c4:	6803      	ldr	r3, [r0, #0]
 80204c6:	f013 0207 	ands.w	r2, r3, #7
 80204ca:	4601      	mov	r1, r0
 80204cc:	d00b      	beq.n	80204e6 <__lo0bits+0x22>
 80204ce:	07da      	lsls	r2, r3, #31
 80204d0:	d424      	bmi.n	802051c <__lo0bits+0x58>
 80204d2:	0798      	lsls	r0, r3, #30
 80204d4:	bf49      	itett	mi
 80204d6:	085b      	lsrmi	r3, r3, #1
 80204d8:	089b      	lsrpl	r3, r3, #2
 80204da:	2001      	movmi	r0, #1
 80204dc:	600b      	strmi	r3, [r1, #0]
 80204de:	bf5c      	itt	pl
 80204e0:	600b      	strpl	r3, [r1, #0]
 80204e2:	2002      	movpl	r0, #2
 80204e4:	4770      	bx	lr
 80204e6:	b298      	uxth	r0, r3
 80204e8:	b9b0      	cbnz	r0, 8020518 <__lo0bits+0x54>
 80204ea:	0c1b      	lsrs	r3, r3, #16
 80204ec:	2010      	movs	r0, #16
 80204ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80204f2:	bf04      	itt	eq
 80204f4:	0a1b      	lsreq	r3, r3, #8
 80204f6:	3008      	addeq	r0, #8
 80204f8:	071a      	lsls	r2, r3, #28
 80204fa:	bf04      	itt	eq
 80204fc:	091b      	lsreq	r3, r3, #4
 80204fe:	3004      	addeq	r0, #4
 8020500:	079a      	lsls	r2, r3, #30
 8020502:	bf04      	itt	eq
 8020504:	089b      	lsreq	r3, r3, #2
 8020506:	3002      	addeq	r0, #2
 8020508:	07da      	lsls	r2, r3, #31
 802050a:	d403      	bmi.n	8020514 <__lo0bits+0x50>
 802050c:	085b      	lsrs	r3, r3, #1
 802050e:	f100 0001 	add.w	r0, r0, #1
 8020512:	d005      	beq.n	8020520 <__lo0bits+0x5c>
 8020514:	600b      	str	r3, [r1, #0]
 8020516:	4770      	bx	lr
 8020518:	4610      	mov	r0, r2
 802051a:	e7e8      	b.n	80204ee <__lo0bits+0x2a>
 802051c:	2000      	movs	r0, #0
 802051e:	4770      	bx	lr
 8020520:	2020      	movs	r0, #32
 8020522:	4770      	bx	lr

08020524 <__i2b>:
 8020524:	b510      	push	{r4, lr}
 8020526:	460c      	mov	r4, r1
 8020528:	2101      	movs	r1, #1
 802052a:	f7ff feb5 	bl	8020298 <_Balloc>
 802052e:	4602      	mov	r2, r0
 8020530:	b928      	cbnz	r0, 802053e <__i2b+0x1a>
 8020532:	4b05      	ldr	r3, [pc, #20]	; (8020548 <__i2b+0x24>)
 8020534:	4805      	ldr	r0, [pc, #20]	; (802054c <__i2b+0x28>)
 8020536:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802053a:	f000 fecb 	bl	80212d4 <__assert_func>
 802053e:	2301      	movs	r3, #1
 8020540:	6144      	str	r4, [r0, #20]
 8020542:	6103      	str	r3, [r0, #16]
 8020544:	bd10      	pop	{r4, pc}
 8020546:	bf00      	nop
 8020548:	0802b7a4 	.word	0x0802b7a4
 802054c:	0802b898 	.word	0x0802b898

08020550 <__multiply>:
 8020550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020554:	4614      	mov	r4, r2
 8020556:	690a      	ldr	r2, [r1, #16]
 8020558:	6923      	ldr	r3, [r4, #16]
 802055a:	429a      	cmp	r2, r3
 802055c:	bfb8      	it	lt
 802055e:	460b      	movlt	r3, r1
 8020560:	460d      	mov	r5, r1
 8020562:	bfbc      	itt	lt
 8020564:	4625      	movlt	r5, r4
 8020566:	461c      	movlt	r4, r3
 8020568:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802056c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020570:	68ab      	ldr	r3, [r5, #8]
 8020572:	6869      	ldr	r1, [r5, #4]
 8020574:	eb0a 0709 	add.w	r7, sl, r9
 8020578:	42bb      	cmp	r3, r7
 802057a:	b085      	sub	sp, #20
 802057c:	bfb8      	it	lt
 802057e:	3101      	addlt	r1, #1
 8020580:	f7ff fe8a 	bl	8020298 <_Balloc>
 8020584:	b930      	cbnz	r0, 8020594 <__multiply+0x44>
 8020586:	4602      	mov	r2, r0
 8020588:	4b42      	ldr	r3, [pc, #264]	; (8020694 <__multiply+0x144>)
 802058a:	4843      	ldr	r0, [pc, #268]	; (8020698 <__multiply+0x148>)
 802058c:	f240 115d 	movw	r1, #349	; 0x15d
 8020590:	f000 fea0 	bl	80212d4 <__assert_func>
 8020594:	f100 0614 	add.w	r6, r0, #20
 8020598:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802059c:	4633      	mov	r3, r6
 802059e:	2200      	movs	r2, #0
 80205a0:	4543      	cmp	r3, r8
 80205a2:	d31e      	bcc.n	80205e2 <__multiply+0x92>
 80205a4:	f105 0c14 	add.w	ip, r5, #20
 80205a8:	f104 0314 	add.w	r3, r4, #20
 80205ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80205b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80205b4:	9202      	str	r2, [sp, #8]
 80205b6:	ebac 0205 	sub.w	r2, ip, r5
 80205ba:	3a15      	subs	r2, #21
 80205bc:	f022 0203 	bic.w	r2, r2, #3
 80205c0:	3204      	adds	r2, #4
 80205c2:	f105 0115 	add.w	r1, r5, #21
 80205c6:	458c      	cmp	ip, r1
 80205c8:	bf38      	it	cc
 80205ca:	2204      	movcc	r2, #4
 80205cc:	9201      	str	r2, [sp, #4]
 80205ce:	9a02      	ldr	r2, [sp, #8]
 80205d0:	9303      	str	r3, [sp, #12]
 80205d2:	429a      	cmp	r2, r3
 80205d4:	d808      	bhi.n	80205e8 <__multiply+0x98>
 80205d6:	2f00      	cmp	r7, #0
 80205d8:	dc55      	bgt.n	8020686 <__multiply+0x136>
 80205da:	6107      	str	r7, [r0, #16]
 80205dc:	b005      	add	sp, #20
 80205de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205e2:	f843 2b04 	str.w	r2, [r3], #4
 80205e6:	e7db      	b.n	80205a0 <__multiply+0x50>
 80205e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80205ec:	f1ba 0f00 	cmp.w	sl, #0
 80205f0:	d020      	beq.n	8020634 <__multiply+0xe4>
 80205f2:	f105 0e14 	add.w	lr, r5, #20
 80205f6:	46b1      	mov	r9, r6
 80205f8:	2200      	movs	r2, #0
 80205fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80205fe:	f8d9 b000 	ldr.w	fp, [r9]
 8020602:	b2a1      	uxth	r1, r4
 8020604:	fa1f fb8b 	uxth.w	fp, fp
 8020608:	fb0a b101 	mla	r1, sl, r1, fp
 802060c:	4411      	add	r1, r2
 802060e:	f8d9 2000 	ldr.w	r2, [r9]
 8020612:	0c24      	lsrs	r4, r4, #16
 8020614:	0c12      	lsrs	r2, r2, #16
 8020616:	fb0a 2404 	mla	r4, sl, r4, r2
 802061a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802061e:	b289      	uxth	r1, r1
 8020620:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020624:	45f4      	cmp	ip, lr
 8020626:	f849 1b04 	str.w	r1, [r9], #4
 802062a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802062e:	d8e4      	bhi.n	80205fa <__multiply+0xaa>
 8020630:	9901      	ldr	r1, [sp, #4]
 8020632:	5072      	str	r2, [r6, r1]
 8020634:	9a03      	ldr	r2, [sp, #12]
 8020636:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802063a:	3304      	adds	r3, #4
 802063c:	f1b9 0f00 	cmp.w	r9, #0
 8020640:	d01f      	beq.n	8020682 <__multiply+0x132>
 8020642:	6834      	ldr	r4, [r6, #0]
 8020644:	f105 0114 	add.w	r1, r5, #20
 8020648:	46b6      	mov	lr, r6
 802064a:	f04f 0a00 	mov.w	sl, #0
 802064e:	880a      	ldrh	r2, [r1, #0]
 8020650:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020654:	fb09 b202 	mla	r2, r9, r2, fp
 8020658:	4492      	add	sl, r2
 802065a:	b2a4      	uxth	r4, r4
 802065c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020660:	f84e 4b04 	str.w	r4, [lr], #4
 8020664:	f851 4b04 	ldr.w	r4, [r1], #4
 8020668:	f8be 2000 	ldrh.w	r2, [lr]
 802066c:	0c24      	lsrs	r4, r4, #16
 802066e:	fb09 2404 	mla	r4, r9, r4, r2
 8020672:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020676:	458c      	cmp	ip, r1
 8020678:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802067c:	d8e7      	bhi.n	802064e <__multiply+0xfe>
 802067e:	9a01      	ldr	r2, [sp, #4]
 8020680:	50b4      	str	r4, [r6, r2]
 8020682:	3604      	adds	r6, #4
 8020684:	e7a3      	b.n	80205ce <__multiply+0x7e>
 8020686:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802068a:	2b00      	cmp	r3, #0
 802068c:	d1a5      	bne.n	80205da <__multiply+0x8a>
 802068e:	3f01      	subs	r7, #1
 8020690:	e7a1      	b.n	80205d6 <__multiply+0x86>
 8020692:	bf00      	nop
 8020694:	0802b7a4 	.word	0x0802b7a4
 8020698:	0802b898 	.word	0x0802b898

0802069c <__pow5mult>:
 802069c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206a0:	4615      	mov	r5, r2
 80206a2:	f012 0203 	ands.w	r2, r2, #3
 80206a6:	4606      	mov	r6, r0
 80206a8:	460f      	mov	r7, r1
 80206aa:	d007      	beq.n	80206bc <__pow5mult+0x20>
 80206ac:	4c25      	ldr	r4, [pc, #148]	; (8020744 <__pow5mult+0xa8>)
 80206ae:	3a01      	subs	r2, #1
 80206b0:	2300      	movs	r3, #0
 80206b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80206b6:	f7ff fe51 	bl	802035c <__multadd>
 80206ba:	4607      	mov	r7, r0
 80206bc:	10ad      	asrs	r5, r5, #2
 80206be:	d03d      	beq.n	802073c <__pow5mult+0xa0>
 80206c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80206c2:	b97c      	cbnz	r4, 80206e4 <__pow5mult+0x48>
 80206c4:	2010      	movs	r0, #16
 80206c6:	f7ff fdbf 	bl	8020248 <malloc>
 80206ca:	4602      	mov	r2, r0
 80206cc:	6270      	str	r0, [r6, #36]	; 0x24
 80206ce:	b928      	cbnz	r0, 80206dc <__pow5mult+0x40>
 80206d0:	4b1d      	ldr	r3, [pc, #116]	; (8020748 <__pow5mult+0xac>)
 80206d2:	481e      	ldr	r0, [pc, #120]	; (802074c <__pow5mult+0xb0>)
 80206d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80206d8:	f000 fdfc 	bl	80212d4 <__assert_func>
 80206dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80206e0:	6004      	str	r4, [r0, #0]
 80206e2:	60c4      	str	r4, [r0, #12]
 80206e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80206e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80206ec:	b94c      	cbnz	r4, 8020702 <__pow5mult+0x66>
 80206ee:	f240 2171 	movw	r1, #625	; 0x271
 80206f2:	4630      	mov	r0, r6
 80206f4:	f7ff ff16 	bl	8020524 <__i2b>
 80206f8:	2300      	movs	r3, #0
 80206fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80206fe:	4604      	mov	r4, r0
 8020700:	6003      	str	r3, [r0, #0]
 8020702:	f04f 0900 	mov.w	r9, #0
 8020706:	07eb      	lsls	r3, r5, #31
 8020708:	d50a      	bpl.n	8020720 <__pow5mult+0x84>
 802070a:	4639      	mov	r1, r7
 802070c:	4622      	mov	r2, r4
 802070e:	4630      	mov	r0, r6
 8020710:	f7ff ff1e 	bl	8020550 <__multiply>
 8020714:	4639      	mov	r1, r7
 8020716:	4680      	mov	r8, r0
 8020718:	4630      	mov	r0, r6
 802071a:	f7ff fdfd 	bl	8020318 <_Bfree>
 802071e:	4647      	mov	r7, r8
 8020720:	106d      	asrs	r5, r5, #1
 8020722:	d00b      	beq.n	802073c <__pow5mult+0xa0>
 8020724:	6820      	ldr	r0, [r4, #0]
 8020726:	b938      	cbnz	r0, 8020738 <__pow5mult+0x9c>
 8020728:	4622      	mov	r2, r4
 802072a:	4621      	mov	r1, r4
 802072c:	4630      	mov	r0, r6
 802072e:	f7ff ff0f 	bl	8020550 <__multiply>
 8020732:	6020      	str	r0, [r4, #0]
 8020734:	f8c0 9000 	str.w	r9, [r0]
 8020738:	4604      	mov	r4, r0
 802073a:	e7e4      	b.n	8020706 <__pow5mult+0x6a>
 802073c:	4638      	mov	r0, r7
 802073e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020742:	bf00      	nop
 8020744:	0802b9e8 	.word	0x0802b9e8
 8020748:	0802b72e 	.word	0x0802b72e
 802074c:	0802b898 	.word	0x0802b898

08020750 <__lshift>:
 8020750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020754:	460c      	mov	r4, r1
 8020756:	6849      	ldr	r1, [r1, #4]
 8020758:	6923      	ldr	r3, [r4, #16]
 802075a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802075e:	68a3      	ldr	r3, [r4, #8]
 8020760:	4607      	mov	r7, r0
 8020762:	4691      	mov	r9, r2
 8020764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020768:	f108 0601 	add.w	r6, r8, #1
 802076c:	42b3      	cmp	r3, r6
 802076e:	db0b      	blt.n	8020788 <__lshift+0x38>
 8020770:	4638      	mov	r0, r7
 8020772:	f7ff fd91 	bl	8020298 <_Balloc>
 8020776:	4605      	mov	r5, r0
 8020778:	b948      	cbnz	r0, 802078e <__lshift+0x3e>
 802077a:	4602      	mov	r2, r0
 802077c:	4b28      	ldr	r3, [pc, #160]	; (8020820 <__lshift+0xd0>)
 802077e:	4829      	ldr	r0, [pc, #164]	; (8020824 <__lshift+0xd4>)
 8020780:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020784:	f000 fda6 	bl	80212d4 <__assert_func>
 8020788:	3101      	adds	r1, #1
 802078a:	005b      	lsls	r3, r3, #1
 802078c:	e7ee      	b.n	802076c <__lshift+0x1c>
 802078e:	2300      	movs	r3, #0
 8020790:	f100 0114 	add.w	r1, r0, #20
 8020794:	f100 0210 	add.w	r2, r0, #16
 8020798:	4618      	mov	r0, r3
 802079a:	4553      	cmp	r3, sl
 802079c:	db33      	blt.n	8020806 <__lshift+0xb6>
 802079e:	6920      	ldr	r0, [r4, #16]
 80207a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80207a4:	f104 0314 	add.w	r3, r4, #20
 80207a8:	f019 091f 	ands.w	r9, r9, #31
 80207ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80207b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80207b4:	d02b      	beq.n	802080e <__lshift+0xbe>
 80207b6:	f1c9 0e20 	rsb	lr, r9, #32
 80207ba:	468a      	mov	sl, r1
 80207bc:	2200      	movs	r2, #0
 80207be:	6818      	ldr	r0, [r3, #0]
 80207c0:	fa00 f009 	lsl.w	r0, r0, r9
 80207c4:	4302      	orrs	r2, r0
 80207c6:	f84a 2b04 	str.w	r2, [sl], #4
 80207ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80207ce:	459c      	cmp	ip, r3
 80207d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80207d4:	d8f3      	bhi.n	80207be <__lshift+0x6e>
 80207d6:	ebac 0304 	sub.w	r3, ip, r4
 80207da:	3b15      	subs	r3, #21
 80207dc:	f023 0303 	bic.w	r3, r3, #3
 80207e0:	3304      	adds	r3, #4
 80207e2:	f104 0015 	add.w	r0, r4, #21
 80207e6:	4584      	cmp	ip, r0
 80207e8:	bf38      	it	cc
 80207ea:	2304      	movcc	r3, #4
 80207ec:	50ca      	str	r2, [r1, r3]
 80207ee:	b10a      	cbz	r2, 80207f4 <__lshift+0xa4>
 80207f0:	f108 0602 	add.w	r6, r8, #2
 80207f4:	3e01      	subs	r6, #1
 80207f6:	4638      	mov	r0, r7
 80207f8:	612e      	str	r6, [r5, #16]
 80207fa:	4621      	mov	r1, r4
 80207fc:	f7ff fd8c 	bl	8020318 <_Bfree>
 8020800:	4628      	mov	r0, r5
 8020802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020806:	f842 0f04 	str.w	r0, [r2, #4]!
 802080a:	3301      	adds	r3, #1
 802080c:	e7c5      	b.n	802079a <__lshift+0x4a>
 802080e:	3904      	subs	r1, #4
 8020810:	f853 2b04 	ldr.w	r2, [r3], #4
 8020814:	f841 2f04 	str.w	r2, [r1, #4]!
 8020818:	459c      	cmp	ip, r3
 802081a:	d8f9      	bhi.n	8020810 <__lshift+0xc0>
 802081c:	e7ea      	b.n	80207f4 <__lshift+0xa4>
 802081e:	bf00      	nop
 8020820:	0802b7a4 	.word	0x0802b7a4
 8020824:	0802b898 	.word	0x0802b898

08020828 <__mcmp>:
 8020828:	b530      	push	{r4, r5, lr}
 802082a:	6902      	ldr	r2, [r0, #16]
 802082c:	690c      	ldr	r4, [r1, #16]
 802082e:	1b12      	subs	r2, r2, r4
 8020830:	d10e      	bne.n	8020850 <__mcmp+0x28>
 8020832:	f100 0314 	add.w	r3, r0, #20
 8020836:	3114      	adds	r1, #20
 8020838:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802083c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020840:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020844:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020848:	42a5      	cmp	r5, r4
 802084a:	d003      	beq.n	8020854 <__mcmp+0x2c>
 802084c:	d305      	bcc.n	802085a <__mcmp+0x32>
 802084e:	2201      	movs	r2, #1
 8020850:	4610      	mov	r0, r2
 8020852:	bd30      	pop	{r4, r5, pc}
 8020854:	4283      	cmp	r3, r0
 8020856:	d3f3      	bcc.n	8020840 <__mcmp+0x18>
 8020858:	e7fa      	b.n	8020850 <__mcmp+0x28>
 802085a:	f04f 32ff 	mov.w	r2, #4294967295
 802085e:	e7f7      	b.n	8020850 <__mcmp+0x28>

08020860 <__mdiff>:
 8020860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020864:	460c      	mov	r4, r1
 8020866:	4606      	mov	r6, r0
 8020868:	4611      	mov	r1, r2
 802086a:	4620      	mov	r0, r4
 802086c:	4617      	mov	r7, r2
 802086e:	f7ff ffdb 	bl	8020828 <__mcmp>
 8020872:	1e05      	subs	r5, r0, #0
 8020874:	d110      	bne.n	8020898 <__mdiff+0x38>
 8020876:	4629      	mov	r1, r5
 8020878:	4630      	mov	r0, r6
 802087a:	f7ff fd0d 	bl	8020298 <_Balloc>
 802087e:	b930      	cbnz	r0, 802088e <__mdiff+0x2e>
 8020880:	4b39      	ldr	r3, [pc, #228]	; (8020968 <__mdiff+0x108>)
 8020882:	4602      	mov	r2, r0
 8020884:	f240 2132 	movw	r1, #562	; 0x232
 8020888:	4838      	ldr	r0, [pc, #224]	; (802096c <__mdiff+0x10c>)
 802088a:	f000 fd23 	bl	80212d4 <__assert_func>
 802088e:	2301      	movs	r3, #1
 8020890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020898:	bfa4      	itt	ge
 802089a:	463b      	movge	r3, r7
 802089c:	4627      	movge	r7, r4
 802089e:	4630      	mov	r0, r6
 80208a0:	6879      	ldr	r1, [r7, #4]
 80208a2:	bfa6      	itte	ge
 80208a4:	461c      	movge	r4, r3
 80208a6:	2500      	movge	r5, #0
 80208a8:	2501      	movlt	r5, #1
 80208aa:	f7ff fcf5 	bl	8020298 <_Balloc>
 80208ae:	b920      	cbnz	r0, 80208ba <__mdiff+0x5a>
 80208b0:	4b2d      	ldr	r3, [pc, #180]	; (8020968 <__mdiff+0x108>)
 80208b2:	4602      	mov	r2, r0
 80208b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80208b8:	e7e6      	b.n	8020888 <__mdiff+0x28>
 80208ba:	693e      	ldr	r6, [r7, #16]
 80208bc:	60c5      	str	r5, [r0, #12]
 80208be:	6925      	ldr	r5, [r4, #16]
 80208c0:	f107 0114 	add.w	r1, r7, #20
 80208c4:	f104 0914 	add.w	r9, r4, #20
 80208c8:	f100 0e14 	add.w	lr, r0, #20
 80208cc:	f107 0210 	add.w	r2, r7, #16
 80208d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80208d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80208d8:	46f2      	mov	sl, lr
 80208da:	2700      	movs	r7, #0
 80208dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80208e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80208e4:	fa1f f883 	uxth.w	r8, r3
 80208e8:	fa17 f78b 	uxtah	r7, r7, fp
 80208ec:	0c1b      	lsrs	r3, r3, #16
 80208ee:	eba7 0808 	sub.w	r8, r7, r8
 80208f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80208f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80208fa:	fa1f f888 	uxth.w	r8, r8
 80208fe:	141f      	asrs	r7, r3, #16
 8020900:	454d      	cmp	r5, r9
 8020902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020906:	f84a 3b04 	str.w	r3, [sl], #4
 802090a:	d8e7      	bhi.n	80208dc <__mdiff+0x7c>
 802090c:	1b2b      	subs	r3, r5, r4
 802090e:	3b15      	subs	r3, #21
 8020910:	f023 0303 	bic.w	r3, r3, #3
 8020914:	3304      	adds	r3, #4
 8020916:	3415      	adds	r4, #21
 8020918:	42a5      	cmp	r5, r4
 802091a:	bf38      	it	cc
 802091c:	2304      	movcc	r3, #4
 802091e:	4419      	add	r1, r3
 8020920:	4473      	add	r3, lr
 8020922:	469e      	mov	lr, r3
 8020924:	460d      	mov	r5, r1
 8020926:	4565      	cmp	r5, ip
 8020928:	d30e      	bcc.n	8020948 <__mdiff+0xe8>
 802092a:	f10c 0203 	add.w	r2, ip, #3
 802092e:	1a52      	subs	r2, r2, r1
 8020930:	f022 0203 	bic.w	r2, r2, #3
 8020934:	3903      	subs	r1, #3
 8020936:	458c      	cmp	ip, r1
 8020938:	bf38      	it	cc
 802093a:	2200      	movcc	r2, #0
 802093c:	441a      	add	r2, r3
 802093e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020942:	b17b      	cbz	r3, 8020964 <__mdiff+0x104>
 8020944:	6106      	str	r6, [r0, #16]
 8020946:	e7a5      	b.n	8020894 <__mdiff+0x34>
 8020948:	f855 8b04 	ldr.w	r8, [r5], #4
 802094c:	fa17 f488 	uxtah	r4, r7, r8
 8020950:	1422      	asrs	r2, r4, #16
 8020952:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020956:	b2a4      	uxth	r4, r4
 8020958:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802095c:	f84e 4b04 	str.w	r4, [lr], #4
 8020960:	1417      	asrs	r7, r2, #16
 8020962:	e7e0      	b.n	8020926 <__mdiff+0xc6>
 8020964:	3e01      	subs	r6, #1
 8020966:	e7ea      	b.n	802093e <__mdiff+0xde>
 8020968:	0802b7a4 	.word	0x0802b7a4
 802096c:	0802b898 	.word	0x0802b898

08020970 <__ulp>:
 8020970:	b082      	sub	sp, #8
 8020972:	ed8d 0b00 	vstr	d0, [sp]
 8020976:	9b01      	ldr	r3, [sp, #4]
 8020978:	4912      	ldr	r1, [pc, #72]	; (80209c4 <__ulp+0x54>)
 802097a:	4019      	ands	r1, r3
 802097c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020980:	2900      	cmp	r1, #0
 8020982:	dd05      	ble.n	8020990 <__ulp+0x20>
 8020984:	2200      	movs	r2, #0
 8020986:	460b      	mov	r3, r1
 8020988:	ec43 2b10 	vmov	d0, r2, r3
 802098c:	b002      	add	sp, #8
 802098e:	4770      	bx	lr
 8020990:	4249      	negs	r1, r1
 8020992:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8020996:	ea4f 5021 	mov.w	r0, r1, asr #20
 802099a:	f04f 0200 	mov.w	r2, #0
 802099e:	f04f 0300 	mov.w	r3, #0
 80209a2:	da04      	bge.n	80209ae <__ulp+0x3e>
 80209a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80209a8:	fa41 f300 	asr.w	r3, r1, r0
 80209ac:	e7ec      	b.n	8020988 <__ulp+0x18>
 80209ae:	f1a0 0114 	sub.w	r1, r0, #20
 80209b2:	291e      	cmp	r1, #30
 80209b4:	bfda      	itte	le
 80209b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80209ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80209be:	2101      	movgt	r1, #1
 80209c0:	460a      	mov	r2, r1
 80209c2:	e7e1      	b.n	8020988 <__ulp+0x18>
 80209c4:	7ff00000 	.word	0x7ff00000

080209c8 <__b2d>:
 80209c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209ca:	6905      	ldr	r5, [r0, #16]
 80209cc:	f100 0714 	add.w	r7, r0, #20
 80209d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80209d4:	1f2e      	subs	r6, r5, #4
 80209d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80209da:	4620      	mov	r0, r4
 80209dc:	f7ff fd52 	bl	8020484 <__hi0bits>
 80209e0:	f1c0 0320 	rsb	r3, r0, #32
 80209e4:	280a      	cmp	r0, #10
 80209e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020a64 <__b2d+0x9c>
 80209ea:	600b      	str	r3, [r1, #0]
 80209ec:	dc14      	bgt.n	8020a18 <__b2d+0x50>
 80209ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80209f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80209f6:	42b7      	cmp	r7, r6
 80209f8:	ea41 030c 	orr.w	r3, r1, ip
 80209fc:	bf34      	ite	cc
 80209fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020a02:	2100      	movcs	r1, #0
 8020a04:	3015      	adds	r0, #21
 8020a06:	fa04 f000 	lsl.w	r0, r4, r0
 8020a0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8020a0e:	ea40 0201 	orr.w	r2, r0, r1
 8020a12:	ec43 2b10 	vmov	d0, r2, r3
 8020a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a18:	42b7      	cmp	r7, r6
 8020a1a:	bf3a      	itte	cc
 8020a1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020a20:	f1a5 0608 	subcc.w	r6, r5, #8
 8020a24:	2100      	movcs	r1, #0
 8020a26:	380b      	subs	r0, #11
 8020a28:	d017      	beq.n	8020a5a <__b2d+0x92>
 8020a2a:	f1c0 0c20 	rsb	ip, r0, #32
 8020a2e:	fa04 f500 	lsl.w	r5, r4, r0
 8020a32:	42be      	cmp	r6, r7
 8020a34:	fa21 f40c 	lsr.w	r4, r1, ip
 8020a38:	ea45 0504 	orr.w	r5, r5, r4
 8020a3c:	bf8c      	ite	hi
 8020a3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020a42:	2400      	movls	r4, #0
 8020a44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8020a48:	fa01 f000 	lsl.w	r0, r1, r0
 8020a4c:	fa24 f40c 	lsr.w	r4, r4, ip
 8020a50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020a54:	ea40 0204 	orr.w	r2, r0, r4
 8020a58:	e7db      	b.n	8020a12 <__b2d+0x4a>
 8020a5a:	ea44 030c 	orr.w	r3, r4, ip
 8020a5e:	460a      	mov	r2, r1
 8020a60:	e7d7      	b.n	8020a12 <__b2d+0x4a>
 8020a62:	bf00      	nop
 8020a64:	3ff00000 	.word	0x3ff00000

08020a68 <__d2b>:
 8020a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020a6c:	4689      	mov	r9, r1
 8020a6e:	2101      	movs	r1, #1
 8020a70:	ec57 6b10 	vmov	r6, r7, d0
 8020a74:	4690      	mov	r8, r2
 8020a76:	f7ff fc0f 	bl	8020298 <_Balloc>
 8020a7a:	4604      	mov	r4, r0
 8020a7c:	b930      	cbnz	r0, 8020a8c <__d2b+0x24>
 8020a7e:	4602      	mov	r2, r0
 8020a80:	4b25      	ldr	r3, [pc, #148]	; (8020b18 <__d2b+0xb0>)
 8020a82:	4826      	ldr	r0, [pc, #152]	; (8020b1c <__d2b+0xb4>)
 8020a84:	f240 310a 	movw	r1, #778	; 0x30a
 8020a88:	f000 fc24 	bl	80212d4 <__assert_func>
 8020a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020a94:	bb35      	cbnz	r5, 8020ae4 <__d2b+0x7c>
 8020a96:	2e00      	cmp	r6, #0
 8020a98:	9301      	str	r3, [sp, #4]
 8020a9a:	d028      	beq.n	8020aee <__d2b+0x86>
 8020a9c:	4668      	mov	r0, sp
 8020a9e:	9600      	str	r6, [sp, #0]
 8020aa0:	f7ff fd10 	bl	80204c4 <__lo0bits>
 8020aa4:	9900      	ldr	r1, [sp, #0]
 8020aa6:	b300      	cbz	r0, 8020aea <__d2b+0x82>
 8020aa8:	9a01      	ldr	r2, [sp, #4]
 8020aaa:	f1c0 0320 	rsb	r3, r0, #32
 8020aae:	fa02 f303 	lsl.w	r3, r2, r3
 8020ab2:	430b      	orrs	r3, r1
 8020ab4:	40c2      	lsrs	r2, r0
 8020ab6:	6163      	str	r3, [r4, #20]
 8020ab8:	9201      	str	r2, [sp, #4]
 8020aba:	9b01      	ldr	r3, [sp, #4]
 8020abc:	61a3      	str	r3, [r4, #24]
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	bf14      	ite	ne
 8020ac2:	2202      	movne	r2, #2
 8020ac4:	2201      	moveq	r2, #1
 8020ac6:	6122      	str	r2, [r4, #16]
 8020ac8:	b1d5      	cbz	r5, 8020b00 <__d2b+0x98>
 8020aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020ace:	4405      	add	r5, r0
 8020ad0:	f8c9 5000 	str.w	r5, [r9]
 8020ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020ad8:	f8c8 0000 	str.w	r0, [r8]
 8020adc:	4620      	mov	r0, r4
 8020ade:	b003      	add	sp, #12
 8020ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020ae8:	e7d5      	b.n	8020a96 <__d2b+0x2e>
 8020aea:	6161      	str	r1, [r4, #20]
 8020aec:	e7e5      	b.n	8020aba <__d2b+0x52>
 8020aee:	a801      	add	r0, sp, #4
 8020af0:	f7ff fce8 	bl	80204c4 <__lo0bits>
 8020af4:	9b01      	ldr	r3, [sp, #4]
 8020af6:	6163      	str	r3, [r4, #20]
 8020af8:	2201      	movs	r2, #1
 8020afa:	6122      	str	r2, [r4, #16]
 8020afc:	3020      	adds	r0, #32
 8020afe:	e7e3      	b.n	8020ac8 <__d2b+0x60>
 8020b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020b08:	f8c9 0000 	str.w	r0, [r9]
 8020b0c:	6918      	ldr	r0, [r3, #16]
 8020b0e:	f7ff fcb9 	bl	8020484 <__hi0bits>
 8020b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020b16:	e7df      	b.n	8020ad8 <__d2b+0x70>
 8020b18:	0802b7a4 	.word	0x0802b7a4
 8020b1c:	0802b898 	.word	0x0802b898

08020b20 <__ratio>:
 8020b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b24:	4688      	mov	r8, r1
 8020b26:	4669      	mov	r1, sp
 8020b28:	4681      	mov	r9, r0
 8020b2a:	f7ff ff4d 	bl	80209c8 <__b2d>
 8020b2e:	a901      	add	r1, sp, #4
 8020b30:	4640      	mov	r0, r8
 8020b32:	ec55 4b10 	vmov	r4, r5, d0
 8020b36:	f7ff ff47 	bl	80209c8 <__b2d>
 8020b3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020b3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8020b42:	eba3 0c02 	sub.w	ip, r3, r2
 8020b46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020b4a:	1a9b      	subs	r3, r3, r2
 8020b4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020b50:	ec51 0b10 	vmov	r0, r1, d0
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	bfd6      	itet	le
 8020b58:	460a      	movle	r2, r1
 8020b5a:	462a      	movgt	r2, r5
 8020b5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020b60:	468b      	mov	fp, r1
 8020b62:	462f      	mov	r7, r5
 8020b64:	bfd4      	ite	le
 8020b66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8020b6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020b6e:	4620      	mov	r0, r4
 8020b70:	ee10 2a10 	vmov	r2, s0
 8020b74:	465b      	mov	r3, fp
 8020b76:	4639      	mov	r1, r7
 8020b78:	f7df fe78 	bl	800086c <__aeabi_ddiv>
 8020b7c:	ec41 0b10 	vmov	d0, r0, r1
 8020b80:	b003      	add	sp, #12
 8020b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b86 <__copybits>:
 8020b86:	3901      	subs	r1, #1
 8020b88:	b570      	push	{r4, r5, r6, lr}
 8020b8a:	1149      	asrs	r1, r1, #5
 8020b8c:	6914      	ldr	r4, [r2, #16]
 8020b8e:	3101      	adds	r1, #1
 8020b90:	f102 0314 	add.w	r3, r2, #20
 8020b94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020b98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020b9c:	1f05      	subs	r5, r0, #4
 8020b9e:	42a3      	cmp	r3, r4
 8020ba0:	d30c      	bcc.n	8020bbc <__copybits+0x36>
 8020ba2:	1aa3      	subs	r3, r4, r2
 8020ba4:	3b11      	subs	r3, #17
 8020ba6:	f023 0303 	bic.w	r3, r3, #3
 8020baa:	3211      	adds	r2, #17
 8020bac:	42a2      	cmp	r2, r4
 8020bae:	bf88      	it	hi
 8020bb0:	2300      	movhi	r3, #0
 8020bb2:	4418      	add	r0, r3
 8020bb4:	2300      	movs	r3, #0
 8020bb6:	4288      	cmp	r0, r1
 8020bb8:	d305      	bcc.n	8020bc6 <__copybits+0x40>
 8020bba:	bd70      	pop	{r4, r5, r6, pc}
 8020bbc:	f853 6b04 	ldr.w	r6, [r3], #4
 8020bc0:	f845 6f04 	str.w	r6, [r5, #4]!
 8020bc4:	e7eb      	b.n	8020b9e <__copybits+0x18>
 8020bc6:	f840 3b04 	str.w	r3, [r0], #4
 8020bca:	e7f4      	b.n	8020bb6 <__copybits+0x30>

08020bcc <__any_on>:
 8020bcc:	f100 0214 	add.w	r2, r0, #20
 8020bd0:	6900      	ldr	r0, [r0, #16]
 8020bd2:	114b      	asrs	r3, r1, #5
 8020bd4:	4298      	cmp	r0, r3
 8020bd6:	b510      	push	{r4, lr}
 8020bd8:	db11      	blt.n	8020bfe <__any_on+0x32>
 8020bda:	dd0a      	ble.n	8020bf2 <__any_on+0x26>
 8020bdc:	f011 011f 	ands.w	r1, r1, #31
 8020be0:	d007      	beq.n	8020bf2 <__any_on+0x26>
 8020be2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020be6:	fa24 f001 	lsr.w	r0, r4, r1
 8020bea:	fa00 f101 	lsl.w	r1, r0, r1
 8020bee:	428c      	cmp	r4, r1
 8020bf0:	d10b      	bne.n	8020c0a <__any_on+0x3e>
 8020bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020bf6:	4293      	cmp	r3, r2
 8020bf8:	d803      	bhi.n	8020c02 <__any_on+0x36>
 8020bfa:	2000      	movs	r0, #0
 8020bfc:	bd10      	pop	{r4, pc}
 8020bfe:	4603      	mov	r3, r0
 8020c00:	e7f7      	b.n	8020bf2 <__any_on+0x26>
 8020c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020c06:	2900      	cmp	r1, #0
 8020c08:	d0f5      	beq.n	8020bf6 <__any_on+0x2a>
 8020c0a:	2001      	movs	r0, #1
 8020c0c:	e7f6      	b.n	8020bfc <__any_on+0x30>

08020c0e <_calloc_r>:
 8020c0e:	b513      	push	{r0, r1, r4, lr}
 8020c10:	434a      	muls	r2, r1
 8020c12:	4611      	mov	r1, r2
 8020c14:	9201      	str	r2, [sp, #4]
 8020c16:	f000 f859 	bl	8020ccc <_malloc_r>
 8020c1a:	4604      	mov	r4, r0
 8020c1c:	b118      	cbz	r0, 8020c26 <_calloc_r+0x18>
 8020c1e:	9a01      	ldr	r2, [sp, #4]
 8020c20:	2100      	movs	r1, #0
 8020c22:	f7fc fabd 	bl	801d1a0 <memset>
 8020c26:	4620      	mov	r0, r4
 8020c28:	b002      	add	sp, #8
 8020c2a:	bd10      	pop	{r4, pc}

08020c2c <_free_r>:
 8020c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020c2e:	2900      	cmp	r1, #0
 8020c30:	d048      	beq.n	8020cc4 <_free_r+0x98>
 8020c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020c36:	9001      	str	r0, [sp, #4]
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8020c3e:	bfb8      	it	lt
 8020c40:	18e4      	addlt	r4, r4, r3
 8020c42:	f000 fcd9 	bl	80215f8 <__malloc_lock>
 8020c46:	4a20      	ldr	r2, [pc, #128]	; (8020cc8 <_free_r+0x9c>)
 8020c48:	9801      	ldr	r0, [sp, #4]
 8020c4a:	6813      	ldr	r3, [r2, #0]
 8020c4c:	4615      	mov	r5, r2
 8020c4e:	b933      	cbnz	r3, 8020c5e <_free_r+0x32>
 8020c50:	6063      	str	r3, [r4, #4]
 8020c52:	6014      	str	r4, [r2, #0]
 8020c54:	b003      	add	sp, #12
 8020c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020c5a:	f000 bcd3 	b.w	8021604 <__malloc_unlock>
 8020c5e:	42a3      	cmp	r3, r4
 8020c60:	d90b      	bls.n	8020c7a <_free_r+0x4e>
 8020c62:	6821      	ldr	r1, [r4, #0]
 8020c64:	1862      	adds	r2, r4, r1
 8020c66:	4293      	cmp	r3, r2
 8020c68:	bf04      	itt	eq
 8020c6a:	681a      	ldreq	r2, [r3, #0]
 8020c6c:	685b      	ldreq	r3, [r3, #4]
 8020c6e:	6063      	str	r3, [r4, #4]
 8020c70:	bf04      	itt	eq
 8020c72:	1852      	addeq	r2, r2, r1
 8020c74:	6022      	streq	r2, [r4, #0]
 8020c76:	602c      	str	r4, [r5, #0]
 8020c78:	e7ec      	b.n	8020c54 <_free_r+0x28>
 8020c7a:	461a      	mov	r2, r3
 8020c7c:	685b      	ldr	r3, [r3, #4]
 8020c7e:	b10b      	cbz	r3, 8020c84 <_free_r+0x58>
 8020c80:	42a3      	cmp	r3, r4
 8020c82:	d9fa      	bls.n	8020c7a <_free_r+0x4e>
 8020c84:	6811      	ldr	r1, [r2, #0]
 8020c86:	1855      	adds	r5, r2, r1
 8020c88:	42a5      	cmp	r5, r4
 8020c8a:	d10b      	bne.n	8020ca4 <_free_r+0x78>
 8020c8c:	6824      	ldr	r4, [r4, #0]
 8020c8e:	4421      	add	r1, r4
 8020c90:	1854      	adds	r4, r2, r1
 8020c92:	42a3      	cmp	r3, r4
 8020c94:	6011      	str	r1, [r2, #0]
 8020c96:	d1dd      	bne.n	8020c54 <_free_r+0x28>
 8020c98:	681c      	ldr	r4, [r3, #0]
 8020c9a:	685b      	ldr	r3, [r3, #4]
 8020c9c:	6053      	str	r3, [r2, #4]
 8020c9e:	4421      	add	r1, r4
 8020ca0:	6011      	str	r1, [r2, #0]
 8020ca2:	e7d7      	b.n	8020c54 <_free_r+0x28>
 8020ca4:	d902      	bls.n	8020cac <_free_r+0x80>
 8020ca6:	230c      	movs	r3, #12
 8020ca8:	6003      	str	r3, [r0, #0]
 8020caa:	e7d3      	b.n	8020c54 <_free_r+0x28>
 8020cac:	6825      	ldr	r5, [r4, #0]
 8020cae:	1961      	adds	r1, r4, r5
 8020cb0:	428b      	cmp	r3, r1
 8020cb2:	bf04      	itt	eq
 8020cb4:	6819      	ldreq	r1, [r3, #0]
 8020cb6:	685b      	ldreq	r3, [r3, #4]
 8020cb8:	6063      	str	r3, [r4, #4]
 8020cba:	bf04      	itt	eq
 8020cbc:	1949      	addeq	r1, r1, r5
 8020cbe:	6021      	streq	r1, [r4, #0]
 8020cc0:	6054      	str	r4, [r2, #4]
 8020cc2:	e7c7      	b.n	8020c54 <_free_r+0x28>
 8020cc4:	b003      	add	sp, #12
 8020cc6:	bd30      	pop	{r4, r5, pc}
 8020cc8:	20001ffc 	.word	0x20001ffc

08020ccc <_malloc_r>:
 8020ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cce:	1ccd      	adds	r5, r1, #3
 8020cd0:	f025 0503 	bic.w	r5, r5, #3
 8020cd4:	3508      	adds	r5, #8
 8020cd6:	2d0c      	cmp	r5, #12
 8020cd8:	bf38      	it	cc
 8020cda:	250c      	movcc	r5, #12
 8020cdc:	2d00      	cmp	r5, #0
 8020cde:	4606      	mov	r6, r0
 8020ce0:	db01      	blt.n	8020ce6 <_malloc_r+0x1a>
 8020ce2:	42a9      	cmp	r1, r5
 8020ce4:	d903      	bls.n	8020cee <_malloc_r+0x22>
 8020ce6:	230c      	movs	r3, #12
 8020ce8:	6033      	str	r3, [r6, #0]
 8020cea:	2000      	movs	r0, #0
 8020cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020cee:	f000 fc83 	bl	80215f8 <__malloc_lock>
 8020cf2:	4921      	ldr	r1, [pc, #132]	; (8020d78 <_malloc_r+0xac>)
 8020cf4:	680a      	ldr	r2, [r1, #0]
 8020cf6:	4614      	mov	r4, r2
 8020cf8:	b99c      	cbnz	r4, 8020d22 <_malloc_r+0x56>
 8020cfa:	4f20      	ldr	r7, [pc, #128]	; (8020d7c <_malloc_r+0xb0>)
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	b923      	cbnz	r3, 8020d0a <_malloc_r+0x3e>
 8020d00:	4621      	mov	r1, r4
 8020d02:	4630      	mov	r0, r6
 8020d04:	f000 f9a0 	bl	8021048 <_sbrk_r>
 8020d08:	6038      	str	r0, [r7, #0]
 8020d0a:	4629      	mov	r1, r5
 8020d0c:	4630      	mov	r0, r6
 8020d0e:	f000 f99b 	bl	8021048 <_sbrk_r>
 8020d12:	1c43      	adds	r3, r0, #1
 8020d14:	d123      	bne.n	8020d5e <_malloc_r+0x92>
 8020d16:	230c      	movs	r3, #12
 8020d18:	6033      	str	r3, [r6, #0]
 8020d1a:	4630      	mov	r0, r6
 8020d1c:	f000 fc72 	bl	8021604 <__malloc_unlock>
 8020d20:	e7e3      	b.n	8020cea <_malloc_r+0x1e>
 8020d22:	6823      	ldr	r3, [r4, #0]
 8020d24:	1b5b      	subs	r3, r3, r5
 8020d26:	d417      	bmi.n	8020d58 <_malloc_r+0x8c>
 8020d28:	2b0b      	cmp	r3, #11
 8020d2a:	d903      	bls.n	8020d34 <_malloc_r+0x68>
 8020d2c:	6023      	str	r3, [r4, #0]
 8020d2e:	441c      	add	r4, r3
 8020d30:	6025      	str	r5, [r4, #0]
 8020d32:	e004      	b.n	8020d3e <_malloc_r+0x72>
 8020d34:	6863      	ldr	r3, [r4, #4]
 8020d36:	42a2      	cmp	r2, r4
 8020d38:	bf0c      	ite	eq
 8020d3a:	600b      	streq	r3, [r1, #0]
 8020d3c:	6053      	strne	r3, [r2, #4]
 8020d3e:	4630      	mov	r0, r6
 8020d40:	f000 fc60 	bl	8021604 <__malloc_unlock>
 8020d44:	f104 000b 	add.w	r0, r4, #11
 8020d48:	1d23      	adds	r3, r4, #4
 8020d4a:	f020 0007 	bic.w	r0, r0, #7
 8020d4e:	1ac2      	subs	r2, r0, r3
 8020d50:	d0cc      	beq.n	8020cec <_malloc_r+0x20>
 8020d52:	1a1b      	subs	r3, r3, r0
 8020d54:	50a3      	str	r3, [r4, r2]
 8020d56:	e7c9      	b.n	8020cec <_malloc_r+0x20>
 8020d58:	4622      	mov	r2, r4
 8020d5a:	6864      	ldr	r4, [r4, #4]
 8020d5c:	e7cc      	b.n	8020cf8 <_malloc_r+0x2c>
 8020d5e:	1cc4      	adds	r4, r0, #3
 8020d60:	f024 0403 	bic.w	r4, r4, #3
 8020d64:	42a0      	cmp	r0, r4
 8020d66:	d0e3      	beq.n	8020d30 <_malloc_r+0x64>
 8020d68:	1a21      	subs	r1, r4, r0
 8020d6a:	4630      	mov	r0, r6
 8020d6c:	f000 f96c 	bl	8021048 <_sbrk_r>
 8020d70:	3001      	adds	r0, #1
 8020d72:	d1dd      	bne.n	8020d30 <_malloc_r+0x64>
 8020d74:	e7cf      	b.n	8020d16 <_malloc_r+0x4a>
 8020d76:	bf00      	nop
 8020d78:	20001ffc 	.word	0x20001ffc
 8020d7c:	20002000 	.word	0x20002000

08020d80 <__ssputs_r>:
 8020d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d84:	688e      	ldr	r6, [r1, #8]
 8020d86:	429e      	cmp	r6, r3
 8020d88:	4682      	mov	sl, r0
 8020d8a:	460c      	mov	r4, r1
 8020d8c:	4690      	mov	r8, r2
 8020d8e:	461f      	mov	r7, r3
 8020d90:	d838      	bhi.n	8020e04 <__ssputs_r+0x84>
 8020d92:	898a      	ldrh	r2, [r1, #12]
 8020d94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020d98:	d032      	beq.n	8020e00 <__ssputs_r+0x80>
 8020d9a:	6825      	ldr	r5, [r4, #0]
 8020d9c:	6909      	ldr	r1, [r1, #16]
 8020d9e:	eba5 0901 	sub.w	r9, r5, r1
 8020da2:	6965      	ldr	r5, [r4, #20]
 8020da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020dac:	3301      	adds	r3, #1
 8020dae:	444b      	add	r3, r9
 8020db0:	106d      	asrs	r5, r5, #1
 8020db2:	429d      	cmp	r5, r3
 8020db4:	bf38      	it	cc
 8020db6:	461d      	movcc	r5, r3
 8020db8:	0553      	lsls	r3, r2, #21
 8020dba:	d531      	bpl.n	8020e20 <__ssputs_r+0xa0>
 8020dbc:	4629      	mov	r1, r5
 8020dbe:	f7ff ff85 	bl	8020ccc <_malloc_r>
 8020dc2:	4606      	mov	r6, r0
 8020dc4:	b950      	cbnz	r0, 8020ddc <__ssputs_r+0x5c>
 8020dc6:	230c      	movs	r3, #12
 8020dc8:	f8ca 3000 	str.w	r3, [sl]
 8020dcc:	89a3      	ldrh	r3, [r4, #12]
 8020dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020dd2:	81a3      	strh	r3, [r4, #12]
 8020dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8020dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ddc:	6921      	ldr	r1, [r4, #16]
 8020dde:	464a      	mov	r2, r9
 8020de0:	f7ff fa4c 	bl	802027c <memcpy>
 8020de4:	89a3      	ldrh	r3, [r4, #12]
 8020de6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020dee:	81a3      	strh	r3, [r4, #12]
 8020df0:	6126      	str	r6, [r4, #16]
 8020df2:	6165      	str	r5, [r4, #20]
 8020df4:	444e      	add	r6, r9
 8020df6:	eba5 0509 	sub.w	r5, r5, r9
 8020dfa:	6026      	str	r6, [r4, #0]
 8020dfc:	60a5      	str	r5, [r4, #8]
 8020dfe:	463e      	mov	r6, r7
 8020e00:	42be      	cmp	r6, r7
 8020e02:	d900      	bls.n	8020e06 <__ssputs_r+0x86>
 8020e04:	463e      	mov	r6, r7
 8020e06:	4632      	mov	r2, r6
 8020e08:	6820      	ldr	r0, [r4, #0]
 8020e0a:	4641      	mov	r1, r8
 8020e0c:	f000 fbda 	bl	80215c4 <memmove>
 8020e10:	68a3      	ldr	r3, [r4, #8]
 8020e12:	6822      	ldr	r2, [r4, #0]
 8020e14:	1b9b      	subs	r3, r3, r6
 8020e16:	4432      	add	r2, r6
 8020e18:	60a3      	str	r3, [r4, #8]
 8020e1a:	6022      	str	r2, [r4, #0]
 8020e1c:	2000      	movs	r0, #0
 8020e1e:	e7db      	b.n	8020dd8 <__ssputs_r+0x58>
 8020e20:	462a      	mov	r2, r5
 8020e22:	f000 fbf5 	bl	8021610 <_realloc_r>
 8020e26:	4606      	mov	r6, r0
 8020e28:	2800      	cmp	r0, #0
 8020e2a:	d1e1      	bne.n	8020df0 <__ssputs_r+0x70>
 8020e2c:	6921      	ldr	r1, [r4, #16]
 8020e2e:	4650      	mov	r0, sl
 8020e30:	f7ff fefc 	bl	8020c2c <_free_r>
 8020e34:	e7c7      	b.n	8020dc6 <__ssputs_r+0x46>
	...

08020e38 <_svfiprintf_r>:
 8020e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e3c:	4698      	mov	r8, r3
 8020e3e:	898b      	ldrh	r3, [r1, #12]
 8020e40:	061b      	lsls	r3, r3, #24
 8020e42:	b09d      	sub	sp, #116	; 0x74
 8020e44:	4607      	mov	r7, r0
 8020e46:	460d      	mov	r5, r1
 8020e48:	4614      	mov	r4, r2
 8020e4a:	d50e      	bpl.n	8020e6a <_svfiprintf_r+0x32>
 8020e4c:	690b      	ldr	r3, [r1, #16]
 8020e4e:	b963      	cbnz	r3, 8020e6a <_svfiprintf_r+0x32>
 8020e50:	2140      	movs	r1, #64	; 0x40
 8020e52:	f7ff ff3b 	bl	8020ccc <_malloc_r>
 8020e56:	6028      	str	r0, [r5, #0]
 8020e58:	6128      	str	r0, [r5, #16]
 8020e5a:	b920      	cbnz	r0, 8020e66 <_svfiprintf_r+0x2e>
 8020e5c:	230c      	movs	r3, #12
 8020e5e:	603b      	str	r3, [r7, #0]
 8020e60:	f04f 30ff 	mov.w	r0, #4294967295
 8020e64:	e0d1      	b.n	802100a <_svfiprintf_r+0x1d2>
 8020e66:	2340      	movs	r3, #64	; 0x40
 8020e68:	616b      	str	r3, [r5, #20]
 8020e6a:	2300      	movs	r3, #0
 8020e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8020e6e:	2320      	movs	r3, #32
 8020e70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8020e78:	2330      	movs	r3, #48	; 0x30
 8020e7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021024 <_svfiprintf_r+0x1ec>
 8020e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020e82:	f04f 0901 	mov.w	r9, #1
 8020e86:	4623      	mov	r3, r4
 8020e88:	469a      	mov	sl, r3
 8020e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020e8e:	b10a      	cbz	r2, 8020e94 <_svfiprintf_r+0x5c>
 8020e90:	2a25      	cmp	r2, #37	; 0x25
 8020e92:	d1f9      	bne.n	8020e88 <_svfiprintf_r+0x50>
 8020e94:	ebba 0b04 	subs.w	fp, sl, r4
 8020e98:	d00b      	beq.n	8020eb2 <_svfiprintf_r+0x7a>
 8020e9a:	465b      	mov	r3, fp
 8020e9c:	4622      	mov	r2, r4
 8020e9e:	4629      	mov	r1, r5
 8020ea0:	4638      	mov	r0, r7
 8020ea2:	f7ff ff6d 	bl	8020d80 <__ssputs_r>
 8020ea6:	3001      	adds	r0, #1
 8020ea8:	f000 80aa 	beq.w	8021000 <_svfiprintf_r+0x1c8>
 8020eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020eae:	445a      	add	r2, fp
 8020eb0:	9209      	str	r2, [sp, #36]	; 0x24
 8020eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	f000 80a2 	beq.w	8021000 <_svfiprintf_r+0x1c8>
 8020ebc:	2300      	movs	r3, #0
 8020ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8020ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020ec6:	f10a 0a01 	add.w	sl, sl, #1
 8020eca:	9304      	str	r3, [sp, #16]
 8020ecc:	9307      	str	r3, [sp, #28]
 8020ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8020ed4:	4654      	mov	r4, sl
 8020ed6:	2205      	movs	r2, #5
 8020ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020edc:	4851      	ldr	r0, [pc, #324]	; (8021024 <_svfiprintf_r+0x1ec>)
 8020ede:	f7df f98f 	bl	8000200 <memchr>
 8020ee2:	9a04      	ldr	r2, [sp, #16]
 8020ee4:	b9d8      	cbnz	r0, 8020f1e <_svfiprintf_r+0xe6>
 8020ee6:	06d0      	lsls	r0, r2, #27
 8020ee8:	bf44      	itt	mi
 8020eea:	2320      	movmi	r3, #32
 8020eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020ef0:	0711      	lsls	r1, r2, #28
 8020ef2:	bf44      	itt	mi
 8020ef4:	232b      	movmi	r3, #43	; 0x2b
 8020ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020efa:	f89a 3000 	ldrb.w	r3, [sl]
 8020efe:	2b2a      	cmp	r3, #42	; 0x2a
 8020f00:	d015      	beq.n	8020f2e <_svfiprintf_r+0xf6>
 8020f02:	9a07      	ldr	r2, [sp, #28]
 8020f04:	4654      	mov	r4, sl
 8020f06:	2000      	movs	r0, #0
 8020f08:	f04f 0c0a 	mov.w	ip, #10
 8020f0c:	4621      	mov	r1, r4
 8020f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020f12:	3b30      	subs	r3, #48	; 0x30
 8020f14:	2b09      	cmp	r3, #9
 8020f16:	d94e      	bls.n	8020fb6 <_svfiprintf_r+0x17e>
 8020f18:	b1b0      	cbz	r0, 8020f48 <_svfiprintf_r+0x110>
 8020f1a:	9207      	str	r2, [sp, #28]
 8020f1c:	e014      	b.n	8020f48 <_svfiprintf_r+0x110>
 8020f1e:	eba0 0308 	sub.w	r3, r0, r8
 8020f22:	fa09 f303 	lsl.w	r3, r9, r3
 8020f26:	4313      	orrs	r3, r2
 8020f28:	9304      	str	r3, [sp, #16]
 8020f2a:	46a2      	mov	sl, r4
 8020f2c:	e7d2      	b.n	8020ed4 <_svfiprintf_r+0x9c>
 8020f2e:	9b03      	ldr	r3, [sp, #12]
 8020f30:	1d19      	adds	r1, r3, #4
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	9103      	str	r1, [sp, #12]
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	bfbb      	ittet	lt
 8020f3a:	425b      	neglt	r3, r3
 8020f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8020f40:	9307      	strge	r3, [sp, #28]
 8020f42:	9307      	strlt	r3, [sp, #28]
 8020f44:	bfb8      	it	lt
 8020f46:	9204      	strlt	r2, [sp, #16]
 8020f48:	7823      	ldrb	r3, [r4, #0]
 8020f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8020f4c:	d10c      	bne.n	8020f68 <_svfiprintf_r+0x130>
 8020f4e:	7863      	ldrb	r3, [r4, #1]
 8020f50:	2b2a      	cmp	r3, #42	; 0x2a
 8020f52:	d135      	bne.n	8020fc0 <_svfiprintf_r+0x188>
 8020f54:	9b03      	ldr	r3, [sp, #12]
 8020f56:	1d1a      	adds	r2, r3, #4
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	9203      	str	r2, [sp, #12]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	bfb8      	it	lt
 8020f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8020f64:	3402      	adds	r4, #2
 8020f66:	9305      	str	r3, [sp, #20]
 8020f68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021034 <_svfiprintf_r+0x1fc>
 8020f6c:	7821      	ldrb	r1, [r4, #0]
 8020f6e:	2203      	movs	r2, #3
 8020f70:	4650      	mov	r0, sl
 8020f72:	f7df f945 	bl	8000200 <memchr>
 8020f76:	b140      	cbz	r0, 8020f8a <_svfiprintf_r+0x152>
 8020f78:	2340      	movs	r3, #64	; 0x40
 8020f7a:	eba0 000a 	sub.w	r0, r0, sl
 8020f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8020f82:	9b04      	ldr	r3, [sp, #16]
 8020f84:	4303      	orrs	r3, r0
 8020f86:	3401      	adds	r4, #1
 8020f88:	9304      	str	r3, [sp, #16]
 8020f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f8e:	4826      	ldr	r0, [pc, #152]	; (8021028 <_svfiprintf_r+0x1f0>)
 8020f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020f94:	2206      	movs	r2, #6
 8020f96:	f7df f933 	bl	8000200 <memchr>
 8020f9a:	2800      	cmp	r0, #0
 8020f9c:	d038      	beq.n	8021010 <_svfiprintf_r+0x1d8>
 8020f9e:	4b23      	ldr	r3, [pc, #140]	; (802102c <_svfiprintf_r+0x1f4>)
 8020fa0:	bb1b      	cbnz	r3, 8020fea <_svfiprintf_r+0x1b2>
 8020fa2:	9b03      	ldr	r3, [sp, #12]
 8020fa4:	3307      	adds	r3, #7
 8020fa6:	f023 0307 	bic.w	r3, r3, #7
 8020faa:	3308      	adds	r3, #8
 8020fac:	9303      	str	r3, [sp, #12]
 8020fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fb0:	4433      	add	r3, r6
 8020fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8020fb4:	e767      	b.n	8020e86 <_svfiprintf_r+0x4e>
 8020fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8020fba:	460c      	mov	r4, r1
 8020fbc:	2001      	movs	r0, #1
 8020fbe:	e7a5      	b.n	8020f0c <_svfiprintf_r+0xd4>
 8020fc0:	2300      	movs	r3, #0
 8020fc2:	3401      	adds	r4, #1
 8020fc4:	9305      	str	r3, [sp, #20]
 8020fc6:	4619      	mov	r1, r3
 8020fc8:	f04f 0c0a 	mov.w	ip, #10
 8020fcc:	4620      	mov	r0, r4
 8020fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020fd2:	3a30      	subs	r2, #48	; 0x30
 8020fd4:	2a09      	cmp	r2, #9
 8020fd6:	d903      	bls.n	8020fe0 <_svfiprintf_r+0x1a8>
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d0c5      	beq.n	8020f68 <_svfiprintf_r+0x130>
 8020fdc:	9105      	str	r1, [sp, #20]
 8020fde:	e7c3      	b.n	8020f68 <_svfiprintf_r+0x130>
 8020fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8020fe4:	4604      	mov	r4, r0
 8020fe6:	2301      	movs	r3, #1
 8020fe8:	e7f0      	b.n	8020fcc <_svfiprintf_r+0x194>
 8020fea:	ab03      	add	r3, sp, #12
 8020fec:	9300      	str	r3, [sp, #0]
 8020fee:	462a      	mov	r2, r5
 8020ff0:	4b0f      	ldr	r3, [pc, #60]	; (8021030 <_svfiprintf_r+0x1f8>)
 8020ff2:	a904      	add	r1, sp, #16
 8020ff4:	4638      	mov	r0, r7
 8020ff6:	f7fc f97b 	bl	801d2f0 <_printf_float>
 8020ffa:	1c42      	adds	r2, r0, #1
 8020ffc:	4606      	mov	r6, r0
 8020ffe:	d1d6      	bne.n	8020fae <_svfiprintf_r+0x176>
 8021000:	89ab      	ldrh	r3, [r5, #12]
 8021002:	065b      	lsls	r3, r3, #25
 8021004:	f53f af2c 	bmi.w	8020e60 <_svfiprintf_r+0x28>
 8021008:	9809      	ldr	r0, [sp, #36]	; 0x24
 802100a:	b01d      	add	sp, #116	; 0x74
 802100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021010:	ab03      	add	r3, sp, #12
 8021012:	9300      	str	r3, [sp, #0]
 8021014:	462a      	mov	r2, r5
 8021016:	4b06      	ldr	r3, [pc, #24]	; (8021030 <_svfiprintf_r+0x1f8>)
 8021018:	a904      	add	r1, sp, #16
 802101a:	4638      	mov	r0, r7
 802101c:	f7fc fc0c 	bl	801d838 <_printf_i>
 8021020:	e7eb      	b.n	8020ffa <_svfiprintf_r+0x1c2>
 8021022:	bf00      	nop
 8021024:	0802b9f4 	.word	0x0802b9f4
 8021028:	0802b9fe 	.word	0x0802b9fe
 802102c:	0801d2f1 	.word	0x0801d2f1
 8021030:	08020d81 	.word	0x08020d81
 8021034:	0802b9fa 	.word	0x0802b9fa

08021038 <nan>:
 8021038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021040 <nan+0x8>
 802103c:	4770      	bx	lr
 802103e:	bf00      	nop
 8021040:	00000000 	.word	0x00000000
 8021044:	7ff80000 	.word	0x7ff80000

08021048 <_sbrk_r>:
 8021048:	b538      	push	{r3, r4, r5, lr}
 802104a:	4d06      	ldr	r5, [pc, #24]	; (8021064 <_sbrk_r+0x1c>)
 802104c:	2300      	movs	r3, #0
 802104e:	4604      	mov	r4, r0
 8021050:	4608      	mov	r0, r1
 8021052:	602b      	str	r3, [r5, #0]
 8021054:	f7e6 faba 	bl	80075cc <_sbrk>
 8021058:	1c43      	adds	r3, r0, #1
 802105a:	d102      	bne.n	8021062 <_sbrk_r+0x1a>
 802105c:	682b      	ldr	r3, [r5, #0]
 802105e:	b103      	cbz	r3, 8021062 <_sbrk_r+0x1a>
 8021060:	6023      	str	r3, [r4, #0]
 8021062:	bd38      	pop	{r3, r4, r5, pc}
 8021064:	2000a148 	.word	0x2000a148

08021068 <__sread>:
 8021068:	b510      	push	{r4, lr}
 802106a:	460c      	mov	r4, r1
 802106c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021070:	f000 fc4e 	bl	8021910 <_read_r>
 8021074:	2800      	cmp	r0, #0
 8021076:	bfab      	itete	ge
 8021078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802107a:	89a3      	ldrhlt	r3, [r4, #12]
 802107c:	181b      	addge	r3, r3, r0
 802107e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021082:	bfac      	ite	ge
 8021084:	6563      	strge	r3, [r4, #84]	; 0x54
 8021086:	81a3      	strhlt	r3, [r4, #12]
 8021088:	bd10      	pop	{r4, pc}

0802108a <__swrite>:
 802108a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802108e:	461f      	mov	r7, r3
 8021090:	898b      	ldrh	r3, [r1, #12]
 8021092:	05db      	lsls	r3, r3, #23
 8021094:	4605      	mov	r5, r0
 8021096:	460c      	mov	r4, r1
 8021098:	4616      	mov	r6, r2
 802109a:	d505      	bpl.n	80210a8 <__swrite+0x1e>
 802109c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80210a0:	2302      	movs	r3, #2
 80210a2:	2200      	movs	r2, #0
 80210a4:	f000 fa18 	bl	80214d8 <_lseek_r>
 80210a8:	89a3      	ldrh	r3, [r4, #12]
 80210aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80210ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80210b2:	81a3      	strh	r3, [r4, #12]
 80210b4:	4632      	mov	r2, r6
 80210b6:	463b      	mov	r3, r7
 80210b8:	4628      	mov	r0, r5
 80210ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80210be:	f000 b889 	b.w	80211d4 <_write_r>

080210c2 <__sseek>:
 80210c2:	b510      	push	{r4, lr}
 80210c4:	460c      	mov	r4, r1
 80210c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80210ca:	f000 fa05 	bl	80214d8 <_lseek_r>
 80210ce:	1c43      	adds	r3, r0, #1
 80210d0:	89a3      	ldrh	r3, [r4, #12]
 80210d2:	bf15      	itete	ne
 80210d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80210d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80210da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80210de:	81a3      	strheq	r3, [r4, #12]
 80210e0:	bf18      	it	ne
 80210e2:	81a3      	strhne	r3, [r4, #12]
 80210e4:	bd10      	pop	{r4, pc}

080210e6 <__sclose>:
 80210e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80210ea:	f000 b911 	b.w	8021310 <_close_r>

080210ee <strncmp>:
 80210ee:	b510      	push	{r4, lr}
 80210f0:	b16a      	cbz	r2, 802110e <strncmp+0x20>
 80210f2:	3901      	subs	r1, #1
 80210f4:	1884      	adds	r4, r0, r2
 80210f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80210fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80210fe:	4293      	cmp	r3, r2
 8021100:	d103      	bne.n	802110a <strncmp+0x1c>
 8021102:	42a0      	cmp	r0, r4
 8021104:	d001      	beq.n	802110a <strncmp+0x1c>
 8021106:	2b00      	cmp	r3, #0
 8021108:	d1f5      	bne.n	80210f6 <strncmp+0x8>
 802110a:	1a98      	subs	r0, r3, r2
 802110c:	bd10      	pop	{r4, pc}
 802110e:	4610      	mov	r0, r2
 8021110:	e7fc      	b.n	802110c <strncmp+0x1e>
	...

08021114 <__swbuf_r>:
 8021114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021116:	460e      	mov	r6, r1
 8021118:	4614      	mov	r4, r2
 802111a:	4605      	mov	r5, r0
 802111c:	b118      	cbz	r0, 8021126 <__swbuf_r+0x12>
 802111e:	6983      	ldr	r3, [r0, #24]
 8021120:	b90b      	cbnz	r3, 8021126 <__swbuf_r+0x12>
 8021122:	f7fe fc7d 	bl	801fa20 <__sinit>
 8021126:	4b21      	ldr	r3, [pc, #132]	; (80211ac <__swbuf_r+0x98>)
 8021128:	429c      	cmp	r4, r3
 802112a:	d12b      	bne.n	8021184 <__swbuf_r+0x70>
 802112c:	686c      	ldr	r4, [r5, #4]
 802112e:	69a3      	ldr	r3, [r4, #24]
 8021130:	60a3      	str	r3, [r4, #8]
 8021132:	89a3      	ldrh	r3, [r4, #12]
 8021134:	071a      	lsls	r2, r3, #28
 8021136:	d52f      	bpl.n	8021198 <__swbuf_r+0x84>
 8021138:	6923      	ldr	r3, [r4, #16]
 802113a:	b36b      	cbz	r3, 8021198 <__swbuf_r+0x84>
 802113c:	6923      	ldr	r3, [r4, #16]
 802113e:	6820      	ldr	r0, [r4, #0]
 8021140:	1ac0      	subs	r0, r0, r3
 8021142:	6963      	ldr	r3, [r4, #20]
 8021144:	b2f6      	uxtb	r6, r6
 8021146:	4283      	cmp	r3, r0
 8021148:	4637      	mov	r7, r6
 802114a:	dc04      	bgt.n	8021156 <__swbuf_r+0x42>
 802114c:	4621      	mov	r1, r4
 802114e:	4628      	mov	r0, r5
 8021150:	f000 f974 	bl	802143c <_fflush_r>
 8021154:	bb30      	cbnz	r0, 80211a4 <__swbuf_r+0x90>
 8021156:	68a3      	ldr	r3, [r4, #8]
 8021158:	3b01      	subs	r3, #1
 802115a:	60a3      	str	r3, [r4, #8]
 802115c:	6823      	ldr	r3, [r4, #0]
 802115e:	1c5a      	adds	r2, r3, #1
 8021160:	6022      	str	r2, [r4, #0]
 8021162:	701e      	strb	r6, [r3, #0]
 8021164:	6963      	ldr	r3, [r4, #20]
 8021166:	3001      	adds	r0, #1
 8021168:	4283      	cmp	r3, r0
 802116a:	d004      	beq.n	8021176 <__swbuf_r+0x62>
 802116c:	89a3      	ldrh	r3, [r4, #12]
 802116e:	07db      	lsls	r3, r3, #31
 8021170:	d506      	bpl.n	8021180 <__swbuf_r+0x6c>
 8021172:	2e0a      	cmp	r6, #10
 8021174:	d104      	bne.n	8021180 <__swbuf_r+0x6c>
 8021176:	4621      	mov	r1, r4
 8021178:	4628      	mov	r0, r5
 802117a:	f000 f95f 	bl	802143c <_fflush_r>
 802117e:	b988      	cbnz	r0, 80211a4 <__swbuf_r+0x90>
 8021180:	4638      	mov	r0, r7
 8021182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021184:	4b0a      	ldr	r3, [pc, #40]	; (80211b0 <__swbuf_r+0x9c>)
 8021186:	429c      	cmp	r4, r3
 8021188:	d101      	bne.n	802118e <__swbuf_r+0x7a>
 802118a:	68ac      	ldr	r4, [r5, #8]
 802118c:	e7cf      	b.n	802112e <__swbuf_r+0x1a>
 802118e:	4b09      	ldr	r3, [pc, #36]	; (80211b4 <__swbuf_r+0xa0>)
 8021190:	429c      	cmp	r4, r3
 8021192:	bf08      	it	eq
 8021194:	68ec      	ldreq	r4, [r5, #12]
 8021196:	e7ca      	b.n	802112e <__swbuf_r+0x1a>
 8021198:	4621      	mov	r1, r4
 802119a:	4628      	mov	r0, r5
 802119c:	f000 f82c 	bl	80211f8 <__swsetup_r>
 80211a0:	2800      	cmp	r0, #0
 80211a2:	d0cb      	beq.n	802113c <__swbuf_r+0x28>
 80211a4:	f04f 37ff 	mov.w	r7, #4294967295
 80211a8:	e7ea      	b.n	8021180 <__swbuf_r+0x6c>
 80211aa:	bf00      	nop
 80211ac:	0802b7d8 	.word	0x0802b7d8
 80211b0:	0802b7f8 	.word	0x0802b7f8
 80211b4:	0802b7b8 	.word	0x0802b7b8

080211b8 <__ascii_wctomb>:
 80211b8:	b149      	cbz	r1, 80211ce <__ascii_wctomb+0x16>
 80211ba:	2aff      	cmp	r2, #255	; 0xff
 80211bc:	bf85      	ittet	hi
 80211be:	238a      	movhi	r3, #138	; 0x8a
 80211c0:	6003      	strhi	r3, [r0, #0]
 80211c2:	700a      	strbls	r2, [r1, #0]
 80211c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80211c8:	bf98      	it	ls
 80211ca:	2001      	movls	r0, #1
 80211cc:	4770      	bx	lr
 80211ce:	4608      	mov	r0, r1
 80211d0:	4770      	bx	lr
	...

080211d4 <_write_r>:
 80211d4:	b538      	push	{r3, r4, r5, lr}
 80211d6:	4d07      	ldr	r5, [pc, #28]	; (80211f4 <_write_r+0x20>)
 80211d8:	4604      	mov	r4, r0
 80211da:	4608      	mov	r0, r1
 80211dc:	4611      	mov	r1, r2
 80211de:	2200      	movs	r2, #0
 80211e0:	602a      	str	r2, [r5, #0]
 80211e2:	461a      	mov	r2, r3
 80211e4:	f7e6 f9a1 	bl	800752a <_write>
 80211e8:	1c43      	adds	r3, r0, #1
 80211ea:	d102      	bne.n	80211f2 <_write_r+0x1e>
 80211ec:	682b      	ldr	r3, [r5, #0]
 80211ee:	b103      	cbz	r3, 80211f2 <_write_r+0x1e>
 80211f0:	6023      	str	r3, [r4, #0]
 80211f2:	bd38      	pop	{r3, r4, r5, pc}
 80211f4:	2000a148 	.word	0x2000a148

080211f8 <__swsetup_r>:
 80211f8:	4b32      	ldr	r3, [pc, #200]	; (80212c4 <__swsetup_r+0xcc>)
 80211fa:	b570      	push	{r4, r5, r6, lr}
 80211fc:	681d      	ldr	r5, [r3, #0]
 80211fe:	4606      	mov	r6, r0
 8021200:	460c      	mov	r4, r1
 8021202:	b125      	cbz	r5, 802120e <__swsetup_r+0x16>
 8021204:	69ab      	ldr	r3, [r5, #24]
 8021206:	b913      	cbnz	r3, 802120e <__swsetup_r+0x16>
 8021208:	4628      	mov	r0, r5
 802120a:	f7fe fc09 	bl	801fa20 <__sinit>
 802120e:	4b2e      	ldr	r3, [pc, #184]	; (80212c8 <__swsetup_r+0xd0>)
 8021210:	429c      	cmp	r4, r3
 8021212:	d10f      	bne.n	8021234 <__swsetup_r+0x3c>
 8021214:	686c      	ldr	r4, [r5, #4]
 8021216:	89a3      	ldrh	r3, [r4, #12]
 8021218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802121c:	0719      	lsls	r1, r3, #28
 802121e:	d42c      	bmi.n	802127a <__swsetup_r+0x82>
 8021220:	06dd      	lsls	r5, r3, #27
 8021222:	d411      	bmi.n	8021248 <__swsetup_r+0x50>
 8021224:	2309      	movs	r3, #9
 8021226:	6033      	str	r3, [r6, #0]
 8021228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802122c:	81a3      	strh	r3, [r4, #12]
 802122e:	f04f 30ff 	mov.w	r0, #4294967295
 8021232:	e03e      	b.n	80212b2 <__swsetup_r+0xba>
 8021234:	4b25      	ldr	r3, [pc, #148]	; (80212cc <__swsetup_r+0xd4>)
 8021236:	429c      	cmp	r4, r3
 8021238:	d101      	bne.n	802123e <__swsetup_r+0x46>
 802123a:	68ac      	ldr	r4, [r5, #8]
 802123c:	e7eb      	b.n	8021216 <__swsetup_r+0x1e>
 802123e:	4b24      	ldr	r3, [pc, #144]	; (80212d0 <__swsetup_r+0xd8>)
 8021240:	429c      	cmp	r4, r3
 8021242:	bf08      	it	eq
 8021244:	68ec      	ldreq	r4, [r5, #12]
 8021246:	e7e6      	b.n	8021216 <__swsetup_r+0x1e>
 8021248:	0758      	lsls	r0, r3, #29
 802124a:	d512      	bpl.n	8021272 <__swsetup_r+0x7a>
 802124c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802124e:	b141      	cbz	r1, 8021262 <__swsetup_r+0x6a>
 8021250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021254:	4299      	cmp	r1, r3
 8021256:	d002      	beq.n	802125e <__swsetup_r+0x66>
 8021258:	4630      	mov	r0, r6
 802125a:	f7ff fce7 	bl	8020c2c <_free_r>
 802125e:	2300      	movs	r3, #0
 8021260:	6363      	str	r3, [r4, #52]	; 0x34
 8021262:	89a3      	ldrh	r3, [r4, #12]
 8021264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021268:	81a3      	strh	r3, [r4, #12]
 802126a:	2300      	movs	r3, #0
 802126c:	6063      	str	r3, [r4, #4]
 802126e:	6923      	ldr	r3, [r4, #16]
 8021270:	6023      	str	r3, [r4, #0]
 8021272:	89a3      	ldrh	r3, [r4, #12]
 8021274:	f043 0308 	orr.w	r3, r3, #8
 8021278:	81a3      	strh	r3, [r4, #12]
 802127a:	6923      	ldr	r3, [r4, #16]
 802127c:	b94b      	cbnz	r3, 8021292 <__swsetup_r+0x9a>
 802127e:	89a3      	ldrh	r3, [r4, #12]
 8021280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021288:	d003      	beq.n	8021292 <__swsetup_r+0x9a>
 802128a:	4621      	mov	r1, r4
 802128c:	4630      	mov	r0, r6
 802128e:	f000 f959 	bl	8021544 <__smakebuf_r>
 8021292:	89a0      	ldrh	r0, [r4, #12]
 8021294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021298:	f010 0301 	ands.w	r3, r0, #1
 802129c:	d00a      	beq.n	80212b4 <__swsetup_r+0xbc>
 802129e:	2300      	movs	r3, #0
 80212a0:	60a3      	str	r3, [r4, #8]
 80212a2:	6963      	ldr	r3, [r4, #20]
 80212a4:	425b      	negs	r3, r3
 80212a6:	61a3      	str	r3, [r4, #24]
 80212a8:	6923      	ldr	r3, [r4, #16]
 80212aa:	b943      	cbnz	r3, 80212be <__swsetup_r+0xc6>
 80212ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80212b0:	d1ba      	bne.n	8021228 <__swsetup_r+0x30>
 80212b2:	bd70      	pop	{r4, r5, r6, pc}
 80212b4:	0781      	lsls	r1, r0, #30
 80212b6:	bf58      	it	pl
 80212b8:	6963      	ldrpl	r3, [r4, #20]
 80212ba:	60a3      	str	r3, [r4, #8]
 80212bc:	e7f4      	b.n	80212a8 <__swsetup_r+0xb0>
 80212be:	2000      	movs	r0, #0
 80212c0:	e7f7      	b.n	80212b2 <__swsetup_r+0xba>
 80212c2:	bf00      	nop
 80212c4:	200006ec 	.word	0x200006ec
 80212c8:	0802b7d8 	.word	0x0802b7d8
 80212cc:	0802b7f8 	.word	0x0802b7f8
 80212d0:	0802b7b8 	.word	0x0802b7b8

080212d4 <__assert_func>:
 80212d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80212d6:	4614      	mov	r4, r2
 80212d8:	461a      	mov	r2, r3
 80212da:	4b09      	ldr	r3, [pc, #36]	; (8021300 <__assert_func+0x2c>)
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	4605      	mov	r5, r0
 80212e0:	68d8      	ldr	r0, [r3, #12]
 80212e2:	b14c      	cbz	r4, 80212f8 <__assert_func+0x24>
 80212e4:	4b07      	ldr	r3, [pc, #28]	; (8021304 <__assert_func+0x30>)
 80212e6:	9100      	str	r1, [sp, #0]
 80212e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80212ec:	4906      	ldr	r1, [pc, #24]	; (8021308 <__assert_func+0x34>)
 80212ee:	462b      	mov	r3, r5
 80212f0:	f000 f8e0 	bl	80214b4 <fiprintf>
 80212f4:	f000 fb1e 	bl	8021934 <abort>
 80212f8:	4b04      	ldr	r3, [pc, #16]	; (802130c <__assert_func+0x38>)
 80212fa:	461c      	mov	r4, r3
 80212fc:	e7f3      	b.n	80212e6 <__assert_func+0x12>
 80212fe:	bf00      	nop
 8021300:	200006ec 	.word	0x200006ec
 8021304:	0802ba05 	.word	0x0802ba05
 8021308:	0802ba12 	.word	0x0802ba12
 802130c:	0802ba40 	.word	0x0802ba40

08021310 <_close_r>:
 8021310:	b538      	push	{r3, r4, r5, lr}
 8021312:	4d06      	ldr	r5, [pc, #24]	; (802132c <_close_r+0x1c>)
 8021314:	2300      	movs	r3, #0
 8021316:	4604      	mov	r4, r0
 8021318:	4608      	mov	r0, r1
 802131a:	602b      	str	r3, [r5, #0]
 802131c:	f7e6 f921 	bl	8007562 <_close>
 8021320:	1c43      	adds	r3, r0, #1
 8021322:	d102      	bne.n	802132a <_close_r+0x1a>
 8021324:	682b      	ldr	r3, [r5, #0]
 8021326:	b103      	cbz	r3, 802132a <_close_r+0x1a>
 8021328:	6023      	str	r3, [r4, #0]
 802132a:	bd38      	pop	{r3, r4, r5, pc}
 802132c:	2000a148 	.word	0x2000a148

08021330 <__sflush_r>:
 8021330:	898a      	ldrh	r2, [r1, #12]
 8021332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021336:	4605      	mov	r5, r0
 8021338:	0710      	lsls	r0, r2, #28
 802133a:	460c      	mov	r4, r1
 802133c:	d458      	bmi.n	80213f0 <__sflush_r+0xc0>
 802133e:	684b      	ldr	r3, [r1, #4]
 8021340:	2b00      	cmp	r3, #0
 8021342:	dc05      	bgt.n	8021350 <__sflush_r+0x20>
 8021344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021346:	2b00      	cmp	r3, #0
 8021348:	dc02      	bgt.n	8021350 <__sflush_r+0x20>
 802134a:	2000      	movs	r0, #0
 802134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021352:	2e00      	cmp	r6, #0
 8021354:	d0f9      	beq.n	802134a <__sflush_r+0x1a>
 8021356:	2300      	movs	r3, #0
 8021358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802135c:	682f      	ldr	r7, [r5, #0]
 802135e:	602b      	str	r3, [r5, #0]
 8021360:	d032      	beq.n	80213c8 <__sflush_r+0x98>
 8021362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021364:	89a3      	ldrh	r3, [r4, #12]
 8021366:	075a      	lsls	r2, r3, #29
 8021368:	d505      	bpl.n	8021376 <__sflush_r+0x46>
 802136a:	6863      	ldr	r3, [r4, #4]
 802136c:	1ac0      	subs	r0, r0, r3
 802136e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021370:	b10b      	cbz	r3, 8021376 <__sflush_r+0x46>
 8021372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021374:	1ac0      	subs	r0, r0, r3
 8021376:	2300      	movs	r3, #0
 8021378:	4602      	mov	r2, r0
 802137a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802137c:	6a21      	ldr	r1, [r4, #32]
 802137e:	4628      	mov	r0, r5
 8021380:	47b0      	blx	r6
 8021382:	1c43      	adds	r3, r0, #1
 8021384:	89a3      	ldrh	r3, [r4, #12]
 8021386:	d106      	bne.n	8021396 <__sflush_r+0x66>
 8021388:	6829      	ldr	r1, [r5, #0]
 802138a:	291d      	cmp	r1, #29
 802138c:	d82c      	bhi.n	80213e8 <__sflush_r+0xb8>
 802138e:	4a2a      	ldr	r2, [pc, #168]	; (8021438 <__sflush_r+0x108>)
 8021390:	40ca      	lsrs	r2, r1
 8021392:	07d6      	lsls	r6, r2, #31
 8021394:	d528      	bpl.n	80213e8 <__sflush_r+0xb8>
 8021396:	2200      	movs	r2, #0
 8021398:	6062      	str	r2, [r4, #4]
 802139a:	04d9      	lsls	r1, r3, #19
 802139c:	6922      	ldr	r2, [r4, #16]
 802139e:	6022      	str	r2, [r4, #0]
 80213a0:	d504      	bpl.n	80213ac <__sflush_r+0x7c>
 80213a2:	1c42      	adds	r2, r0, #1
 80213a4:	d101      	bne.n	80213aa <__sflush_r+0x7a>
 80213a6:	682b      	ldr	r3, [r5, #0]
 80213a8:	b903      	cbnz	r3, 80213ac <__sflush_r+0x7c>
 80213aa:	6560      	str	r0, [r4, #84]	; 0x54
 80213ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80213ae:	602f      	str	r7, [r5, #0]
 80213b0:	2900      	cmp	r1, #0
 80213b2:	d0ca      	beq.n	802134a <__sflush_r+0x1a>
 80213b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80213b8:	4299      	cmp	r1, r3
 80213ba:	d002      	beq.n	80213c2 <__sflush_r+0x92>
 80213bc:	4628      	mov	r0, r5
 80213be:	f7ff fc35 	bl	8020c2c <_free_r>
 80213c2:	2000      	movs	r0, #0
 80213c4:	6360      	str	r0, [r4, #52]	; 0x34
 80213c6:	e7c1      	b.n	802134c <__sflush_r+0x1c>
 80213c8:	6a21      	ldr	r1, [r4, #32]
 80213ca:	2301      	movs	r3, #1
 80213cc:	4628      	mov	r0, r5
 80213ce:	47b0      	blx	r6
 80213d0:	1c41      	adds	r1, r0, #1
 80213d2:	d1c7      	bne.n	8021364 <__sflush_r+0x34>
 80213d4:	682b      	ldr	r3, [r5, #0]
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d0c4      	beq.n	8021364 <__sflush_r+0x34>
 80213da:	2b1d      	cmp	r3, #29
 80213dc:	d001      	beq.n	80213e2 <__sflush_r+0xb2>
 80213de:	2b16      	cmp	r3, #22
 80213e0:	d101      	bne.n	80213e6 <__sflush_r+0xb6>
 80213e2:	602f      	str	r7, [r5, #0]
 80213e4:	e7b1      	b.n	802134a <__sflush_r+0x1a>
 80213e6:	89a3      	ldrh	r3, [r4, #12]
 80213e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80213ec:	81a3      	strh	r3, [r4, #12]
 80213ee:	e7ad      	b.n	802134c <__sflush_r+0x1c>
 80213f0:	690f      	ldr	r7, [r1, #16]
 80213f2:	2f00      	cmp	r7, #0
 80213f4:	d0a9      	beq.n	802134a <__sflush_r+0x1a>
 80213f6:	0793      	lsls	r3, r2, #30
 80213f8:	680e      	ldr	r6, [r1, #0]
 80213fa:	bf08      	it	eq
 80213fc:	694b      	ldreq	r3, [r1, #20]
 80213fe:	600f      	str	r7, [r1, #0]
 8021400:	bf18      	it	ne
 8021402:	2300      	movne	r3, #0
 8021404:	eba6 0807 	sub.w	r8, r6, r7
 8021408:	608b      	str	r3, [r1, #8]
 802140a:	f1b8 0f00 	cmp.w	r8, #0
 802140e:	dd9c      	ble.n	802134a <__sflush_r+0x1a>
 8021410:	6a21      	ldr	r1, [r4, #32]
 8021412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021414:	4643      	mov	r3, r8
 8021416:	463a      	mov	r2, r7
 8021418:	4628      	mov	r0, r5
 802141a:	47b0      	blx	r6
 802141c:	2800      	cmp	r0, #0
 802141e:	dc06      	bgt.n	802142e <__sflush_r+0xfe>
 8021420:	89a3      	ldrh	r3, [r4, #12]
 8021422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021426:	81a3      	strh	r3, [r4, #12]
 8021428:	f04f 30ff 	mov.w	r0, #4294967295
 802142c:	e78e      	b.n	802134c <__sflush_r+0x1c>
 802142e:	4407      	add	r7, r0
 8021430:	eba8 0800 	sub.w	r8, r8, r0
 8021434:	e7e9      	b.n	802140a <__sflush_r+0xda>
 8021436:	bf00      	nop
 8021438:	20400001 	.word	0x20400001

0802143c <_fflush_r>:
 802143c:	b538      	push	{r3, r4, r5, lr}
 802143e:	690b      	ldr	r3, [r1, #16]
 8021440:	4605      	mov	r5, r0
 8021442:	460c      	mov	r4, r1
 8021444:	b913      	cbnz	r3, 802144c <_fflush_r+0x10>
 8021446:	2500      	movs	r5, #0
 8021448:	4628      	mov	r0, r5
 802144a:	bd38      	pop	{r3, r4, r5, pc}
 802144c:	b118      	cbz	r0, 8021456 <_fflush_r+0x1a>
 802144e:	6983      	ldr	r3, [r0, #24]
 8021450:	b90b      	cbnz	r3, 8021456 <_fflush_r+0x1a>
 8021452:	f7fe fae5 	bl	801fa20 <__sinit>
 8021456:	4b14      	ldr	r3, [pc, #80]	; (80214a8 <_fflush_r+0x6c>)
 8021458:	429c      	cmp	r4, r3
 802145a:	d11b      	bne.n	8021494 <_fflush_r+0x58>
 802145c:	686c      	ldr	r4, [r5, #4]
 802145e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021462:	2b00      	cmp	r3, #0
 8021464:	d0ef      	beq.n	8021446 <_fflush_r+0xa>
 8021466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021468:	07d0      	lsls	r0, r2, #31
 802146a:	d404      	bmi.n	8021476 <_fflush_r+0x3a>
 802146c:	0599      	lsls	r1, r3, #22
 802146e:	d402      	bmi.n	8021476 <_fflush_r+0x3a>
 8021470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021472:	f7fe fee6 	bl	8020242 <__retarget_lock_acquire_recursive>
 8021476:	4628      	mov	r0, r5
 8021478:	4621      	mov	r1, r4
 802147a:	f7ff ff59 	bl	8021330 <__sflush_r>
 802147e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021480:	07da      	lsls	r2, r3, #31
 8021482:	4605      	mov	r5, r0
 8021484:	d4e0      	bmi.n	8021448 <_fflush_r+0xc>
 8021486:	89a3      	ldrh	r3, [r4, #12]
 8021488:	059b      	lsls	r3, r3, #22
 802148a:	d4dd      	bmi.n	8021448 <_fflush_r+0xc>
 802148c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802148e:	f7fe fed9 	bl	8020244 <__retarget_lock_release_recursive>
 8021492:	e7d9      	b.n	8021448 <_fflush_r+0xc>
 8021494:	4b05      	ldr	r3, [pc, #20]	; (80214ac <_fflush_r+0x70>)
 8021496:	429c      	cmp	r4, r3
 8021498:	d101      	bne.n	802149e <_fflush_r+0x62>
 802149a:	68ac      	ldr	r4, [r5, #8]
 802149c:	e7df      	b.n	802145e <_fflush_r+0x22>
 802149e:	4b04      	ldr	r3, [pc, #16]	; (80214b0 <_fflush_r+0x74>)
 80214a0:	429c      	cmp	r4, r3
 80214a2:	bf08      	it	eq
 80214a4:	68ec      	ldreq	r4, [r5, #12]
 80214a6:	e7da      	b.n	802145e <_fflush_r+0x22>
 80214a8:	0802b7d8 	.word	0x0802b7d8
 80214ac:	0802b7f8 	.word	0x0802b7f8
 80214b0:	0802b7b8 	.word	0x0802b7b8

080214b4 <fiprintf>:
 80214b4:	b40e      	push	{r1, r2, r3}
 80214b6:	b503      	push	{r0, r1, lr}
 80214b8:	4601      	mov	r1, r0
 80214ba:	ab03      	add	r3, sp, #12
 80214bc:	4805      	ldr	r0, [pc, #20]	; (80214d4 <fiprintf+0x20>)
 80214be:	f853 2b04 	ldr.w	r2, [r3], #4
 80214c2:	6800      	ldr	r0, [r0, #0]
 80214c4:	9301      	str	r3, [sp, #4]
 80214c6:	f000 f8f3 	bl	80216b0 <_vfiprintf_r>
 80214ca:	b002      	add	sp, #8
 80214cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80214d0:	b003      	add	sp, #12
 80214d2:	4770      	bx	lr
 80214d4:	200006ec 	.word	0x200006ec

080214d8 <_lseek_r>:
 80214d8:	b538      	push	{r3, r4, r5, lr}
 80214da:	4d07      	ldr	r5, [pc, #28]	; (80214f8 <_lseek_r+0x20>)
 80214dc:	4604      	mov	r4, r0
 80214de:	4608      	mov	r0, r1
 80214e0:	4611      	mov	r1, r2
 80214e2:	2200      	movs	r2, #0
 80214e4:	602a      	str	r2, [r5, #0]
 80214e6:	461a      	mov	r2, r3
 80214e8:	f7e6 f862 	bl	80075b0 <_lseek>
 80214ec:	1c43      	adds	r3, r0, #1
 80214ee:	d102      	bne.n	80214f6 <_lseek_r+0x1e>
 80214f0:	682b      	ldr	r3, [r5, #0]
 80214f2:	b103      	cbz	r3, 80214f6 <_lseek_r+0x1e>
 80214f4:	6023      	str	r3, [r4, #0]
 80214f6:	bd38      	pop	{r3, r4, r5, pc}
 80214f8:	2000a148 	.word	0x2000a148

080214fc <__swhatbuf_r>:
 80214fc:	b570      	push	{r4, r5, r6, lr}
 80214fe:	460e      	mov	r6, r1
 8021500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021504:	2900      	cmp	r1, #0
 8021506:	b096      	sub	sp, #88	; 0x58
 8021508:	4614      	mov	r4, r2
 802150a:	461d      	mov	r5, r3
 802150c:	da07      	bge.n	802151e <__swhatbuf_r+0x22>
 802150e:	2300      	movs	r3, #0
 8021510:	602b      	str	r3, [r5, #0]
 8021512:	89b3      	ldrh	r3, [r6, #12]
 8021514:	061a      	lsls	r2, r3, #24
 8021516:	d410      	bmi.n	802153a <__swhatbuf_r+0x3e>
 8021518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802151c:	e00e      	b.n	802153c <__swhatbuf_r+0x40>
 802151e:	466a      	mov	r2, sp
 8021520:	f000 fa10 	bl	8021944 <_fstat_r>
 8021524:	2800      	cmp	r0, #0
 8021526:	dbf2      	blt.n	802150e <__swhatbuf_r+0x12>
 8021528:	9a01      	ldr	r2, [sp, #4]
 802152a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802152e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021532:	425a      	negs	r2, r3
 8021534:	415a      	adcs	r2, r3
 8021536:	602a      	str	r2, [r5, #0]
 8021538:	e7ee      	b.n	8021518 <__swhatbuf_r+0x1c>
 802153a:	2340      	movs	r3, #64	; 0x40
 802153c:	2000      	movs	r0, #0
 802153e:	6023      	str	r3, [r4, #0]
 8021540:	b016      	add	sp, #88	; 0x58
 8021542:	bd70      	pop	{r4, r5, r6, pc}

08021544 <__smakebuf_r>:
 8021544:	898b      	ldrh	r3, [r1, #12]
 8021546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021548:	079d      	lsls	r5, r3, #30
 802154a:	4606      	mov	r6, r0
 802154c:	460c      	mov	r4, r1
 802154e:	d507      	bpl.n	8021560 <__smakebuf_r+0x1c>
 8021550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021554:	6023      	str	r3, [r4, #0]
 8021556:	6123      	str	r3, [r4, #16]
 8021558:	2301      	movs	r3, #1
 802155a:	6163      	str	r3, [r4, #20]
 802155c:	b002      	add	sp, #8
 802155e:	bd70      	pop	{r4, r5, r6, pc}
 8021560:	ab01      	add	r3, sp, #4
 8021562:	466a      	mov	r2, sp
 8021564:	f7ff ffca 	bl	80214fc <__swhatbuf_r>
 8021568:	9900      	ldr	r1, [sp, #0]
 802156a:	4605      	mov	r5, r0
 802156c:	4630      	mov	r0, r6
 802156e:	f7ff fbad 	bl	8020ccc <_malloc_r>
 8021572:	b948      	cbnz	r0, 8021588 <__smakebuf_r+0x44>
 8021574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021578:	059a      	lsls	r2, r3, #22
 802157a:	d4ef      	bmi.n	802155c <__smakebuf_r+0x18>
 802157c:	f023 0303 	bic.w	r3, r3, #3
 8021580:	f043 0302 	orr.w	r3, r3, #2
 8021584:	81a3      	strh	r3, [r4, #12]
 8021586:	e7e3      	b.n	8021550 <__smakebuf_r+0xc>
 8021588:	4b0d      	ldr	r3, [pc, #52]	; (80215c0 <__smakebuf_r+0x7c>)
 802158a:	62b3      	str	r3, [r6, #40]	; 0x28
 802158c:	89a3      	ldrh	r3, [r4, #12]
 802158e:	6020      	str	r0, [r4, #0]
 8021590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021594:	81a3      	strh	r3, [r4, #12]
 8021596:	9b00      	ldr	r3, [sp, #0]
 8021598:	6163      	str	r3, [r4, #20]
 802159a:	9b01      	ldr	r3, [sp, #4]
 802159c:	6120      	str	r0, [r4, #16]
 802159e:	b15b      	cbz	r3, 80215b8 <__smakebuf_r+0x74>
 80215a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80215a4:	4630      	mov	r0, r6
 80215a6:	f000 f9df 	bl	8021968 <_isatty_r>
 80215aa:	b128      	cbz	r0, 80215b8 <__smakebuf_r+0x74>
 80215ac:	89a3      	ldrh	r3, [r4, #12]
 80215ae:	f023 0303 	bic.w	r3, r3, #3
 80215b2:	f043 0301 	orr.w	r3, r3, #1
 80215b6:	81a3      	strh	r3, [r4, #12]
 80215b8:	89a0      	ldrh	r0, [r4, #12]
 80215ba:	4305      	orrs	r5, r0
 80215bc:	81a5      	strh	r5, [r4, #12]
 80215be:	e7cd      	b.n	802155c <__smakebuf_r+0x18>
 80215c0:	0801f9b9 	.word	0x0801f9b9

080215c4 <memmove>:
 80215c4:	4288      	cmp	r0, r1
 80215c6:	b510      	push	{r4, lr}
 80215c8:	eb01 0402 	add.w	r4, r1, r2
 80215cc:	d902      	bls.n	80215d4 <memmove+0x10>
 80215ce:	4284      	cmp	r4, r0
 80215d0:	4623      	mov	r3, r4
 80215d2:	d807      	bhi.n	80215e4 <memmove+0x20>
 80215d4:	1e43      	subs	r3, r0, #1
 80215d6:	42a1      	cmp	r1, r4
 80215d8:	d008      	beq.n	80215ec <memmove+0x28>
 80215da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80215de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80215e2:	e7f8      	b.n	80215d6 <memmove+0x12>
 80215e4:	4402      	add	r2, r0
 80215e6:	4601      	mov	r1, r0
 80215e8:	428a      	cmp	r2, r1
 80215ea:	d100      	bne.n	80215ee <memmove+0x2a>
 80215ec:	bd10      	pop	{r4, pc}
 80215ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80215f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80215f6:	e7f7      	b.n	80215e8 <memmove+0x24>

080215f8 <__malloc_lock>:
 80215f8:	4801      	ldr	r0, [pc, #4]	; (8021600 <__malloc_lock+0x8>)
 80215fa:	f7fe be22 	b.w	8020242 <__retarget_lock_acquire_recursive>
 80215fe:	bf00      	nop
 8021600:	2000a13c 	.word	0x2000a13c

08021604 <__malloc_unlock>:
 8021604:	4801      	ldr	r0, [pc, #4]	; (802160c <__malloc_unlock+0x8>)
 8021606:	f7fe be1d 	b.w	8020244 <__retarget_lock_release_recursive>
 802160a:	bf00      	nop
 802160c:	2000a13c 	.word	0x2000a13c

08021610 <_realloc_r>:
 8021610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021612:	4607      	mov	r7, r0
 8021614:	4614      	mov	r4, r2
 8021616:	460e      	mov	r6, r1
 8021618:	b921      	cbnz	r1, 8021624 <_realloc_r+0x14>
 802161a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802161e:	4611      	mov	r1, r2
 8021620:	f7ff bb54 	b.w	8020ccc <_malloc_r>
 8021624:	b922      	cbnz	r2, 8021630 <_realloc_r+0x20>
 8021626:	f7ff fb01 	bl	8020c2c <_free_r>
 802162a:	4625      	mov	r5, r4
 802162c:	4628      	mov	r0, r5
 802162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021630:	f000 f9aa 	bl	8021988 <_malloc_usable_size_r>
 8021634:	42a0      	cmp	r0, r4
 8021636:	d20f      	bcs.n	8021658 <_realloc_r+0x48>
 8021638:	4621      	mov	r1, r4
 802163a:	4638      	mov	r0, r7
 802163c:	f7ff fb46 	bl	8020ccc <_malloc_r>
 8021640:	4605      	mov	r5, r0
 8021642:	2800      	cmp	r0, #0
 8021644:	d0f2      	beq.n	802162c <_realloc_r+0x1c>
 8021646:	4631      	mov	r1, r6
 8021648:	4622      	mov	r2, r4
 802164a:	f7fe fe17 	bl	802027c <memcpy>
 802164e:	4631      	mov	r1, r6
 8021650:	4638      	mov	r0, r7
 8021652:	f7ff faeb 	bl	8020c2c <_free_r>
 8021656:	e7e9      	b.n	802162c <_realloc_r+0x1c>
 8021658:	4635      	mov	r5, r6
 802165a:	e7e7      	b.n	802162c <_realloc_r+0x1c>

0802165c <__sfputc_r>:
 802165c:	6893      	ldr	r3, [r2, #8]
 802165e:	3b01      	subs	r3, #1
 8021660:	2b00      	cmp	r3, #0
 8021662:	b410      	push	{r4}
 8021664:	6093      	str	r3, [r2, #8]
 8021666:	da08      	bge.n	802167a <__sfputc_r+0x1e>
 8021668:	6994      	ldr	r4, [r2, #24]
 802166a:	42a3      	cmp	r3, r4
 802166c:	db01      	blt.n	8021672 <__sfputc_r+0x16>
 802166e:	290a      	cmp	r1, #10
 8021670:	d103      	bne.n	802167a <__sfputc_r+0x1e>
 8021672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021676:	f7ff bd4d 	b.w	8021114 <__swbuf_r>
 802167a:	6813      	ldr	r3, [r2, #0]
 802167c:	1c58      	adds	r0, r3, #1
 802167e:	6010      	str	r0, [r2, #0]
 8021680:	7019      	strb	r1, [r3, #0]
 8021682:	4608      	mov	r0, r1
 8021684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021688:	4770      	bx	lr

0802168a <__sfputs_r>:
 802168a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802168c:	4606      	mov	r6, r0
 802168e:	460f      	mov	r7, r1
 8021690:	4614      	mov	r4, r2
 8021692:	18d5      	adds	r5, r2, r3
 8021694:	42ac      	cmp	r4, r5
 8021696:	d101      	bne.n	802169c <__sfputs_r+0x12>
 8021698:	2000      	movs	r0, #0
 802169a:	e007      	b.n	80216ac <__sfputs_r+0x22>
 802169c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216a0:	463a      	mov	r2, r7
 80216a2:	4630      	mov	r0, r6
 80216a4:	f7ff ffda 	bl	802165c <__sfputc_r>
 80216a8:	1c43      	adds	r3, r0, #1
 80216aa:	d1f3      	bne.n	8021694 <__sfputs_r+0xa>
 80216ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080216b0 <_vfiprintf_r>:
 80216b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216b4:	460d      	mov	r5, r1
 80216b6:	b09d      	sub	sp, #116	; 0x74
 80216b8:	4614      	mov	r4, r2
 80216ba:	4698      	mov	r8, r3
 80216bc:	4606      	mov	r6, r0
 80216be:	b118      	cbz	r0, 80216c8 <_vfiprintf_r+0x18>
 80216c0:	6983      	ldr	r3, [r0, #24]
 80216c2:	b90b      	cbnz	r3, 80216c8 <_vfiprintf_r+0x18>
 80216c4:	f7fe f9ac 	bl	801fa20 <__sinit>
 80216c8:	4b89      	ldr	r3, [pc, #548]	; (80218f0 <_vfiprintf_r+0x240>)
 80216ca:	429d      	cmp	r5, r3
 80216cc:	d11b      	bne.n	8021706 <_vfiprintf_r+0x56>
 80216ce:	6875      	ldr	r5, [r6, #4]
 80216d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80216d2:	07d9      	lsls	r1, r3, #31
 80216d4:	d405      	bmi.n	80216e2 <_vfiprintf_r+0x32>
 80216d6:	89ab      	ldrh	r3, [r5, #12]
 80216d8:	059a      	lsls	r2, r3, #22
 80216da:	d402      	bmi.n	80216e2 <_vfiprintf_r+0x32>
 80216dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80216de:	f7fe fdb0 	bl	8020242 <__retarget_lock_acquire_recursive>
 80216e2:	89ab      	ldrh	r3, [r5, #12]
 80216e4:	071b      	lsls	r3, r3, #28
 80216e6:	d501      	bpl.n	80216ec <_vfiprintf_r+0x3c>
 80216e8:	692b      	ldr	r3, [r5, #16]
 80216ea:	b9eb      	cbnz	r3, 8021728 <_vfiprintf_r+0x78>
 80216ec:	4629      	mov	r1, r5
 80216ee:	4630      	mov	r0, r6
 80216f0:	f7ff fd82 	bl	80211f8 <__swsetup_r>
 80216f4:	b1c0      	cbz	r0, 8021728 <_vfiprintf_r+0x78>
 80216f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80216f8:	07dc      	lsls	r4, r3, #31
 80216fa:	d50e      	bpl.n	802171a <_vfiprintf_r+0x6a>
 80216fc:	f04f 30ff 	mov.w	r0, #4294967295
 8021700:	b01d      	add	sp, #116	; 0x74
 8021702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021706:	4b7b      	ldr	r3, [pc, #492]	; (80218f4 <_vfiprintf_r+0x244>)
 8021708:	429d      	cmp	r5, r3
 802170a:	d101      	bne.n	8021710 <_vfiprintf_r+0x60>
 802170c:	68b5      	ldr	r5, [r6, #8]
 802170e:	e7df      	b.n	80216d0 <_vfiprintf_r+0x20>
 8021710:	4b79      	ldr	r3, [pc, #484]	; (80218f8 <_vfiprintf_r+0x248>)
 8021712:	429d      	cmp	r5, r3
 8021714:	bf08      	it	eq
 8021716:	68f5      	ldreq	r5, [r6, #12]
 8021718:	e7da      	b.n	80216d0 <_vfiprintf_r+0x20>
 802171a:	89ab      	ldrh	r3, [r5, #12]
 802171c:	0598      	lsls	r0, r3, #22
 802171e:	d4ed      	bmi.n	80216fc <_vfiprintf_r+0x4c>
 8021720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021722:	f7fe fd8f 	bl	8020244 <__retarget_lock_release_recursive>
 8021726:	e7e9      	b.n	80216fc <_vfiprintf_r+0x4c>
 8021728:	2300      	movs	r3, #0
 802172a:	9309      	str	r3, [sp, #36]	; 0x24
 802172c:	2320      	movs	r3, #32
 802172e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021732:	f8cd 800c 	str.w	r8, [sp, #12]
 8021736:	2330      	movs	r3, #48	; 0x30
 8021738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80218fc <_vfiprintf_r+0x24c>
 802173c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021740:	f04f 0901 	mov.w	r9, #1
 8021744:	4623      	mov	r3, r4
 8021746:	469a      	mov	sl, r3
 8021748:	f813 2b01 	ldrb.w	r2, [r3], #1
 802174c:	b10a      	cbz	r2, 8021752 <_vfiprintf_r+0xa2>
 802174e:	2a25      	cmp	r2, #37	; 0x25
 8021750:	d1f9      	bne.n	8021746 <_vfiprintf_r+0x96>
 8021752:	ebba 0b04 	subs.w	fp, sl, r4
 8021756:	d00b      	beq.n	8021770 <_vfiprintf_r+0xc0>
 8021758:	465b      	mov	r3, fp
 802175a:	4622      	mov	r2, r4
 802175c:	4629      	mov	r1, r5
 802175e:	4630      	mov	r0, r6
 8021760:	f7ff ff93 	bl	802168a <__sfputs_r>
 8021764:	3001      	adds	r0, #1
 8021766:	f000 80aa 	beq.w	80218be <_vfiprintf_r+0x20e>
 802176a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802176c:	445a      	add	r2, fp
 802176e:	9209      	str	r2, [sp, #36]	; 0x24
 8021770:	f89a 3000 	ldrb.w	r3, [sl]
 8021774:	2b00      	cmp	r3, #0
 8021776:	f000 80a2 	beq.w	80218be <_vfiprintf_r+0x20e>
 802177a:	2300      	movs	r3, #0
 802177c:	f04f 32ff 	mov.w	r2, #4294967295
 8021780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021784:	f10a 0a01 	add.w	sl, sl, #1
 8021788:	9304      	str	r3, [sp, #16]
 802178a:	9307      	str	r3, [sp, #28]
 802178c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021790:	931a      	str	r3, [sp, #104]	; 0x68
 8021792:	4654      	mov	r4, sl
 8021794:	2205      	movs	r2, #5
 8021796:	f814 1b01 	ldrb.w	r1, [r4], #1
 802179a:	4858      	ldr	r0, [pc, #352]	; (80218fc <_vfiprintf_r+0x24c>)
 802179c:	f7de fd30 	bl	8000200 <memchr>
 80217a0:	9a04      	ldr	r2, [sp, #16]
 80217a2:	b9d8      	cbnz	r0, 80217dc <_vfiprintf_r+0x12c>
 80217a4:	06d1      	lsls	r1, r2, #27
 80217a6:	bf44      	itt	mi
 80217a8:	2320      	movmi	r3, #32
 80217aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80217ae:	0713      	lsls	r3, r2, #28
 80217b0:	bf44      	itt	mi
 80217b2:	232b      	movmi	r3, #43	; 0x2b
 80217b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80217b8:	f89a 3000 	ldrb.w	r3, [sl]
 80217bc:	2b2a      	cmp	r3, #42	; 0x2a
 80217be:	d015      	beq.n	80217ec <_vfiprintf_r+0x13c>
 80217c0:	9a07      	ldr	r2, [sp, #28]
 80217c2:	4654      	mov	r4, sl
 80217c4:	2000      	movs	r0, #0
 80217c6:	f04f 0c0a 	mov.w	ip, #10
 80217ca:	4621      	mov	r1, r4
 80217cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80217d0:	3b30      	subs	r3, #48	; 0x30
 80217d2:	2b09      	cmp	r3, #9
 80217d4:	d94e      	bls.n	8021874 <_vfiprintf_r+0x1c4>
 80217d6:	b1b0      	cbz	r0, 8021806 <_vfiprintf_r+0x156>
 80217d8:	9207      	str	r2, [sp, #28]
 80217da:	e014      	b.n	8021806 <_vfiprintf_r+0x156>
 80217dc:	eba0 0308 	sub.w	r3, r0, r8
 80217e0:	fa09 f303 	lsl.w	r3, r9, r3
 80217e4:	4313      	orrs	r3, r2
 80217e6:	9304      	str	r3, [sp, #16]
 80217e8:	46a2      	mov	sl, r4
 80217ea:	e7d2      	b.n	8021792 <_vfiprintf_r+0xe2>
 80217ec:	9b03      	ldr	r3, [sp, #12]
 80217ee:	1d19      	adds	r1, r3, #4
 80217f0:	681b      	ldr	r3, [r3, #0]
 80217f2:	9103      	str	r1, [sp, #12]
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	bfbb      	ittet	lt
 80217f8:	425b      	neglt	r3, r3
 80217fa:	f042 0202 	orrlt.w	r2, r2, #2
 80217fe:	9307      	strge	r3, [sp, #28]
 8021800:	9307      	strlt	r3, [sp, #28]
 8021802:	bfb8      	it	lt
 8021804:	9204      	strlt	r2, [sp, #16]
 8021806:	7823      	ldrb	r3, [r4, #0]
 8021808:	2b2e      	cmp	r3, #46	; 0x2e
 802180a:	d10c      	bne.n	8021826 <_vfiprintf_r+0x176>
 802180c:	7863      	ldrb	r3, [r4, #1]
 802180e:	2b2a      	cmp	r3, #42	; 0x2a
 8021810:	d135      	bne.n	802187e <_vfiprintf_r+0x1ce>
 8021812:	9b03      	ldr	r3, [sp, #12]
 8021814:	1d1a      	adds	r2, r3, #4
 8021816:	681b      	ldr	r3, [r3, #0]
 8021818:	9203      	str	r2, [sp, #12]
 802181a:	2b00      	cmp	r3, #0
 802181c:	bfb8      	it	lt
 802181e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021822:	3402      	adds	r4, #2
 8021824:	9305      	str	r3, [sp, #20]
 8021826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802190c <_vfiprintf_r+0x25c>
 802182a:	7821      	ldrb	r1, [r4, #0]
 802182c:	2203      	movs	r2, #3
 802182e:	4650      	mov	r0, sl
 8021830:	f7de fce6 	bl	8000200 <memchr>
 8021834:	b140      	cbz	r0, 8021848 <_vfiprintf_r+0x198>
 8021836:	2340      	movs	r3, #64	; 0x40
 8021838:	eba0 000a 	sub.w	r0, r0, sl
 802183c:	fa03 f000 	lsl.w	r0, r3, r0
 8021840:	9b04      	ldr	r3, [sp, #16]
 8021842:	4303      	orrs	r3, r0
 8021844:	3401      	adds	r4, #1
 8021846:	9304      	str	r3, [sp, #16]
 8021848:	f814 1b01 	ldrb.w	r1, [r4], #1
 802184c:	482c      	ldr	r0, [pc, #176]	; (8021900 <_vfiprintf_r+0x250>)
 802184e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021852:	2206      	movs	r2, #6
 8021854:	f7de fcd4 	bl	8000200 <memchr>
 8021858:	2800      	cmp	r0, #0
 802185a:	d03f      	beq.n	80218dc <_vfiprintf_r+0x22c>
 802185c:	4b29      	ldr	r3, [pc, #164]	; (8021904 <_vfiprintf_r+0x254>)
 802185e:	bb1b      	cbnz	r3, 80218a8 <_vfiprintf_r+0x1f8>
 8021860:	9b03      	ldr	r3, [sp, #12]
 8021862:	3307      	adds	r3, #7
 8021864:	f023 0307 	bic.w	r3, r3, #7
 8021868:	3308      	adds	r3, #8
 802186a:	9303      	str	r3, [sp, #12]
 802186c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802186e:	443b      	add	r3, r7
 8021870:	9309      	str	r3, [sp, #36]	; 0x24
 8021872:	e767      	b.n	8021744 <_vfiprintf_r+0x94>
 8021874:	fb0c 3202 	mla	r2, ip, r2, r3
 8021878:	460c      	mov	r4, r1
 802187a:	2001      	movs	r0, #1
 802187c:	e7a5      	b.n	80217ca <_vfiprintf_r+0x11a>
 802187e:	2300      	movs	r3, #0
 8021880:	3401      	adds	r4, #1
 8021882:	9305      	str	r3, [sp, #20]
 8021884:	4619      	mov	r1, r3
 8021886:	f04f 0c0a 	mov.w	ip, #10
 802188a:	4620      	mov	r0, r4
 802188c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021890:	3a30      	subs	r2, #48	; 0x30
 8021892:	2a09      	cmp	r2, #9
 8021894:	d903      	bls.n	802189e <_vfiprintf_r+0x1ee>
 8021896:	2b00      	cmp	r3, #0
 8021898:	d0c5      	beq.n	8021826 <_vfiprintf_r+0x176>
 802189a:	9105      	str	r1, [sp, #20]
 802189c:	e7c3      	b.n	8021826 <_vfiprintf_r+0x176>
 802189e:	fb0c 2101 	mla	r1, ip, r1, r2
 80218a2:	4604      	mov	r4, r0
 80218a4:	2301      	movs	r3, #1
 80218a6:	e7f0      	b.n	802188a <_vfiprintf_r+0x1da>
 80218a8:	ab03      	add	r3, sp, #12
 80218aa:	9300      	str	r3, [sp, #0]
 80218ac:	462a      	mov	r2, r5
 80218ae:	4b16      	ldr	r3, [pc, #88]	; (8021908 <_vfiprintf_r+0x258>)
 80218b0:	a904      	add	r1, sp, #16
 80218b2:	4630      	mov	r0, r6
 80218b4:	f7fb fd1c 	bl	801d2f0 <_printf_float>
 80218b8:	4607      	mov	r7, r0
 80218ba:	1c78      	adds	r0, r7, #1
 80218bc:	d1d6      	bne.n	802186c <_vfiprintf_r+0x1bc>
 80218be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80218c0:	07d9      	lsls	r1, r3, #31
 80218c2:	d405      	bmi.n	80218d0 <_vfiprintf_r+0x220>
 80218c4:	89ab      	ldrh	r3, [r5, #12]
 80218c6:	059a      	lsls	r2, r3, #22
 80218c8:	d402      	bmi.n	80218d0 <_vfiprintf_r+0x220>
 80218ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80218cc:	f7fe fcba 	bl	8020244 <__retarget_lock_release_recursive>
 80218d0:	89ab      	ldrh	r3, [r5, #12]
 80218d2:	065b      	lsls	r3, r3, #25
 80218d4:	f53f af12 	bmi.w	80216fc <_vfiprintf_r+0x4c>
 80218d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80218da:	e711      	b.n	8021700 <_vfiprintf_r+0x50>
 80218dc:	ab03      	add	r3, sp, #12
 80218de:	9300      	str	r3, [sp, #0]
 80218e0:	462a      	mov	r2, r5
 80218e2:	4b09      	ldr	r3, [pc, #36]	; (8021908 <_vfiprintf_r+0x258>)
 80218e4:	a904      	add	r1, sp, #16
 80218e6:	4630      	mov	r0, r6
 80218e8:	f7fb ffa6 	bl	801d838 <_printf_i>
 80218ec:	e7e4      	b.n	80218b8 <_vfiprintf_r+0x208>
 80218ee:	bf00      	nop
 80218f0:	0802b7d8 	.word	0x0802b7d8
 80218f4:	0802b7f8 	.word	0x0802b7f8
 80218f8:	0802b7b8 	.word	0x0802b7b8
 80218fc:	0802b9f4 	.word	0x0802b9f4
 8021900:	0802b9fe 	.word	0x0802b9fe
 8021904:	0801d2f1 	.word	0x0801d2f1
 8021908:	0802168b 	.word	0x0802168b
 802190c:	0802b9fa 	.word	0x0802b9fa

08021910 <_read_r>:
 8021910:	b538      	push	{r3, r4, r5, lr}
 8021912:	4d07      	ldr	r5, [pc, #28]	; (8021930 <_read_r+0x20>)
 8021914:	4604      	mov	r4, r0
 8021916:	4608      	mov	r0, r1
 8021918:	4611      	mov	r1, r2
 802191a:	2200      	movs	r2, #0
 802191c:	602a      	str	r2, [r5, #0]
 802191e:	461a      	mov	r2, r3
 8021920:	f7e5 fde6 	bl	80074f0 <_read>
 8021924:	1c43      	adds	r3, r0, #1
 8021926:	d102      	bne.n	802192e <_read_r+0x1e>
 8021928:	682b      	ldr	r3, [r5, #0]
 802192a:	b103      	cbz	r3, 802192e <_read_r+0x1e>
 802192c:	6023      	str	r3, [r4, #0]
 802192e:	bd38      	pop	{r3, r4, r5, pc}
 8021930:	2000a148 	.word	0x2000a148

08021934 <abort>:
 8021934:	b508      	push	{r3, lr}
 8021936:	2006      	movs	r0, #6
 8021938:	f000 f856 	bl	80219e8 <raise>
 802193c:	2001      	movs	r0, #1
 802193e:	f7e5 fdcd 	bl	80074dc <_exit>
	...

08021944 <_fstat_r>:
 8021944:	b538      	push	{r3, r4, r5, lr}
 8021946:	4d07      	ldr	r5, [pc, #28]	; (8021964 <_fstat_r+0x20>)
 8021948:	2300      	movs	r3, #0
 802194a:	4604      	mov	r4, r0
 802194c:	4608      	mov	r0, r1
 802194e:	4611      	mov	r1, r2
 8021950:	602b      	str	r3, [r5, #0]
 8021952:	f7e5 fe12 	bl	800757a <_fstat>
 8021956:	1c43      	adds	r3, r0, #1
 8021958:	d102      	bne.n	8021960 <_fstat_r+0x1c>
 802195a:	682b      	ldr	r3, [r5, #0]
 802195c:	b103      	cbz	r3, 8021960 <_fstat_r+0x1c>
 802195e:	6023      	str	r3, [r4, #0]
 8021960:	bd38      	pop	{r3, r4, r5, pc}
 8021962:	bf00      	nop
 8021964:	2000a148 	.word	0x2000a148

08021968 <_isatty_r>:
 8021968:	b538      	push	{r3, r4, r5, lr}
 802196a:	4d06      	ldr	r5, [pc, #24]	; (8021984 <_isatty_r+0x1c>)
 802196c:	2300      	movs	r3, #0
 802196e:	4604      	mov	r4, r0
 8021970:	4608      	mov	r0, r1
 8021972:	602b      	str	r3, [r5, #0]
 8021974:	f7e5 fe11 	bl	800759a <_isatty>
 8021978:	1c43      	adds	r3, r0, #1
 802197a:	d102      	bne.n	8021982 <_isatty_r+0x1a>
 802197c:	682b      	ldr	r3, [r5, #0]
 802197e:	b103      	cbz	r3, 8021982 <_isatty_r+0x1a>
 8021980:	6023      	str	r3, [r4, #0]
 8021982:	bd38      	pop	{r3, r4, r5, pc}
 8021984:	2000a148 	.word	0x2000a148

08021988 <_malloc_usable_size_r>:
 8021988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802198c:	1f18      	subs	r0, r3, #4
 802198e:	2b00      	cmp	r3, #0
 8021990:	bfbc      	itt	lt
 8021992:	580b      	ldrlt	r3, [r1, r0]
 8021994:	18c0      	addlt	r0, r0, r3
 8021996:	4770      	bx	lr

08021998 <_raise_r>:
 8021998:	291f      	cmp	r1, #31
 802199a:	b538      	push	{r3, r4, r5, lr}
 802199c:	4604      	mov	r4, r0
 802199e:	460d      	mov	r5, r1
 80219a0:	d904      	bls.n	80219ac <_raise_r+0x14>
 80219a2:	2316      	movs	r3, #22
 80219a4:	6003      	str	r3, [r0, #0]
 80219a6:	f04f 30ff 	mov.w	r0, #4294967295
 80219aa:	bd38      	pop	{r3, r4, r5, pc}
 80219ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80219ae:	b112      	cbz	r2, 80219b6 <_raise_r+0x1e>
 80219b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80219b4:	b94b      	cbnz	r3, 80219ca <_raise_r+0x32>
 80219b6:	4620      	mov	r0, r4
 80219b8:	f000 f830 	bl	8021a1c <_getpid_r>
 80219bc:	462a      	mov	r2, r5
 80219be:	4601      	mov	r1, r0
 80219c0:	4620      	mov	r0, r4
 80219c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80219c6:	f000 b817 	b.w	80219f8 <_kill_r>
 80219ca:	2b01      	cmp	r3, #1
 80219cc:	d00a      	beq.n	80219e4 <_raise_r+0x4c>
 80219ce:	1c59      	adds	r1, r3, #1
 80219d0:	d103      	bne.n	80219da <_raise_r+0x42>
 80219d2:	2316      	movs	r3, #22
 80219d4:	6003      	str	r3, [r0, #0]
 80219d6:	2001      	movs	r0, #1
 80219d8:	e7e7      	b.n	80219aa <_raise_r+0x12>
 80219da:	2400      	movs	r4, #0
 80219dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80219e0:	4628      	mov	r0, r5
 80219e2:	4798      	blx	r3
 80219e4:	2000      	movs	r0, #0
 80219e6:	e7e0      	b.n	80219aa <_raise_r+0x12>

080219e8 <raise>:
 80219e8:	4b02      	ldr	r3, [pc, #8]	; (80219f4 <raise+0xc>)
 80219ea:	4601      	mov	r1, r0
 80219ec:	6818      	ldr	r0, [r3, #0]
 80219ee:	f7ff bfd3 	b.w	8021998 <_raise_r>
 80219f2:	bf00      	nop
 80219f4:	200006ec 	.word	0x200006ec

080219f8 <_kill_r>:
 80219f8:	b538      	push	{r3, r4, r5, lr}
 80219fa:	4d07      	ldr	r5, [pc, #28]	; (8021a18 <_kill_r+0x20>)
 80219fc:	2300      	movs	r3, #0
 80219fe:	4604      	mov	r4, r0
 8021a00:	4608      	mov	r0, r1
 8021a02:	4611      	mov	r1, r2
 8021a04:	602b      	str	r3, [r5, #0]
 8021a06:	f7e5 fd59 	bl	80074bc <_kill>
 8021a0a:	1c43      	adds	r3, r0, #1
 8021a0c:	d102      	bne.n	8021a14 <_kill_r+0x1c>
 8021a0e:	682b      	ldr	r3, [r5, #0]
 8021a10:	b103      	cbz	r3, 8021a14 <_kill_r+0x1c>
 8021a12:	6023      	str	r3, [r4, #0]
 8021a14:	bd38      	pop	{r3, r4, r5, pc}
 8021a16:	bf00      	nop
 8021a18:	2000a148 	.word	0x2000a148

08021a1c <_getpid_r>:
 8021a1c:	f7e5 bd46 	b.w	80074ac <_getpid>

08021a20 <sqrt>:
 8021a20:	b538      	push	{r3, r4, r5, lr}
 8021a22:	ed2d 8b02 	vpush	{d8}
 8021a26:	ec55 4b10 	vmov	r4, r5, d0
 8021a2a:	f000 f82d 	bl	8021a88 <__ieee754_sqrt>
 8021a2e:	4b15      	ldr	r3, [pc, #84]	; (8021a84 <sqrt+0x64>)
 8021a30:	eeb0 8a40 	vmov.f32	s16, s0
 8021a34:	eef0 8a60 	vmov.f32	s17, s1
 8021a38:	f993 3000 	ldrsb.w	r3, [r3]
 8021a3c:	3301      	adds	r3, #1
 8021a3e:	d019      	beq.n	8021a74 <sqrt+0x54>
 8021a40:	4622      	mov	r2, r4
 8021a42:	462b      	mov	r3, r5
 8021a44:	4620      	mov	r0, r4
 8021a46:	4629      	mov	r1, r5
 8021a48:	f7df f880 	bl	8000b4c <__aeabi_dcmpun>
 8021a4c:	b990      	cbnz	r0, 8021a74 <sqrt+0x54>
 8021a4e:	2200      	movs	r2, #0
 8021a50:	2300      	movs	r3, #0
 8021a52:	4620      	mov	r0, r4
 8021a54:	4629      	mov	r1, r5
 8021a56:	f7df f851 	bl	8000afc <__aeabi_dcmplt>
 8021a5a:	b158      	cbz	r0, 8021a74 <sqrt+0x54>
 8021a5c:	f7fb fb76 	bl	801d14c <__errno>
 8021a60:	2321      	movs	r3, #33	; 0x21
 8021a62:	6003      	str	r3, [r0, #0]
 8021a64:	2200      	movs	r2, #0
 8021a66:	2300      	movs	r3, #0
 8021a68:	4610      	mov	r0, r2
 8021a6a:	4619      	mov	r1, r3
 8021a6c:	f7de fefe 	bl	800086c <__aeabi_ddiv>
 8021a70:	ec41 0b18 	vmov	d8, r0, r1
 8021a74:	eeb0 0a48 	vmov.f32	s0, s16
 8021a78:	eef0 0a68 	vmov.f32	s1, s17
 8021a7c:	ecbd 8b02 	vpop	{d8}
 8021a80:	bd38      	pop	{r3, r4, r5, pc}
 8021a82:	bf00      	nop
 8021a84:	200008c0 	.word	0x200008c0

08021a88 <__ieee754_sqrt>:
 8021a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a8c:	ec55 4b10 	vmov	r4, r5, d0
 8021a90:	4e56      	ldr	r6, [pc, #344]	; (8021bec <__ieee754_sqrt+0x164>)
 8021a92:	43ae      	bics	r6, r5
 8021a94:	ee10 0a10 	vmov	r0, s0
 8021a98:	ee10 3a10 	vmov	r3, s0
 8021a9c:	4629      	mov	r1, r5
 8021a9e:	462a      	mov	r2, r5
 8021aa0:	d110      	bne.n	8021ac4 <__ieee754_sqrt+0x3c>
 8021aa2:	ee10 2a10 	vmov	r2, s0
 8021aa6:	462b      	mov	r3, r5
 8021aa8:	f7de fdb6 	bl	8000618 <__aeabi_dmul>
 8021aac:	4602      	mov	r2, r0
 8021aae:	460b      	mov	r3, r1
 8021ab0:	4620      	mov	r0, r4
 8021ab2:	4629      	mov	r1, r5
 8021ab4:	f7de fbfa 	bl	80002ac <__adddf3>
 8021ab8:	4604      	mov	r4, r0
 8021aba:	460d      	mov	r5, r1
 8021abc:	ec45 4b10 	vmov	d0, r4, r5
 8021ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ac4:	2d00      	cmp	r5, #0
 8021ac6:	dc10      	bgt.n	8021aea <__ieee754_sqrt+0x62>
 8021ac8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021acc:	4330      	orrs	r0, r6
 8021ace:	d0f5      	beq.n	8021abc <__ieee754_sqrt+0x34>
 8021ad0:	b15d      	cbz	r5, 8021aea <__ieee754_sqrt+0x62>
 8021ad2:	ee10 2a10 	vmov	r2, s0
 8021ad6:	462b      	mov	r3, r5
 8021ad8:	ee10 0a10 	vmov	r0, s0
 8021adc:	f7de fbe4 	bl	80002a8 <__aeabi_dsub>
 8021ae0:	4602      	mov	r2, r0
 8021ae2:	460b      	mov	r3, r1
 8021ae4:	f7de fec2 	bl	800086c <__aeabi_ddiv>
 8021ae8:	e7e6      	b.n	8021ab8 <__ieee754_sqrt+0x30>
 8021aea:	1509      	asrs	r1, r1, #20
 8021aec:	d076      	beq.n	8021bdc <__ieee754_sqrt+0x154>
 8021aee:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8021af2:	07ce      	lsls	r6, r1, #31
 8021af4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8021af8:	bf5e      	ittt	pl
 8021afa:	0fda      	lsrpl	r2, r3, #31
 8021afc:	005b      	lslpl	r3, r3, #1
 8021afe:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8021b02:	0fda      	lsrs	r2, r3, #31
 8021b04:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8021b08:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8021b0c:	2000      	movs	r0, #0
 8021b0e:	106d      	asrs	r5, r5, #1
 8021b10:	005b      	lsls	r3, r3, #1
 8021b12:	f04f 0e16 	mov.w	lr, #22
 8021b16:	4684      	mov	ip, r0
 8021b18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021b1c:	eb0c 0401 	add.w	r4, ip, r1
 8021b20:	4294      	cmp	r4, r2
 8021b22:	bfde      	ittt	le
 8021b24:	1b12      	suble	r2, r2, r4
 8021b26:	eb04 0c01 	addle.w	ip, r4, r1
 8021b2a:	1840      	addle	r0, r0, r1
 8021b2c:	0052      	lsls	r2, r2, #1
 8021b2e:	f1be 0e01 	subs.w	lr, lr, #1
 8021b32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021b36:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021b3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021b3e:	d1ed      	bne.n	8021b1c <__ieee754_sqrt+0x94>
 8021b40:	4671      	mov	r1, lr
 8021b42:	2720      	movs	r7, #32
 8021b44:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021b48:	4562      	cmp	r2, ip
 8021b4a:	eb04 060e 	add.w	r6, r4, lr
 8021b4e:	dc02      	bgt.n	8021b56 <__ieee754_sqrt+0xce>
 8021b50:	d113      	bne.n	8021b7a <__ieee754_sqrt+0xf2>
 8021b52:	429e      	cmp	r6, r3
 8021b54:	d811      	bhi.n	8021b7a <__ieee754_sqrt+0xf2>
 8021b56:	2e00      	cmp	r6, #0
 8021b58:	eb06 0e04 	add.w	lr, r6, r4
 8021b5c:	da43      	bge.n	8021be6 <__ieee754_sqrt+0x15e>
 8021b5e:	f1be 0f00 	cmp.w	lr, #0
 8021b62:	db40      	blt.n	8021be6 <__ieee754_sqrt+0x15e>
 8021b64:	f10c 0801 	add.w	r8, ip, #1
 8021b68:	eba2 020c 	sub.w	r2, r2, ip
 8021b6c:	429e      	cmp	r6, r3
 8021b6e:	bf88      	it	hi
 8021b70:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8021b74:	1b9b      	subs	r3, r3, r6
 8021b76:	4421      	add	r1, r4
 8021b78:	46c4      	mov	ip, r8
 8021b7a:	0052      	lsls	r2, r2, #1
 8021b7c:	3f01      	subs	r7, #1
 8021b7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021b82:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021b86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021b8a:	d1dd      	bne.n	8021b48 <__ieee754_sqrt+0xc0>
 8021b8c:	4313      	orrs	r3, r2
 8021b8e:	d006      	beq.n	8021b9e <__ieee754_sqrt+0x116>
 8021b90:	1c4c      	adds	r4, r1, #1
 8021b92:	bf13      	iteet	ne
 8021b94:	3101      	addne	r1, #1
 8021b96:	3001      	addeq	r0, #1
 8021b98:	4639      	moveq	r1, r7
 8021b9a:	f021 0101 	bicne.w	r1, r1, #1
 8021b9e:	1043      	asrs	r3, r0, #1
 8021ba0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021ba4:	0849      	lsrs	r1, r1, #1
 8021ba6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021baa:	07c2      	lsls	r2, r0, #31
 8021bac:	bf48      	it	mi
 8021bae:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8021bb2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8021bb6:	460c      	mov	r4, r1
 8021bb8:	463d      	mov	r5, r7
 8021bba:	e77f      	b.n	8021abc <__ieee754_sqrt+0x34>
 8021bbc:	0ada      	lsrs	r2, r3, #11
 8021bbe:	3815      	subs	r0, #21
 8021bc0:	055b      	lsls	r3, r3, #21
 8021bc2:	2a00      	cmp	r2, #0
 8021bc4:	d0fa      	beq.n	8021bbc <__ieee754_sqrt+0x134>
 8021bc6:	02d7      	lsls	r7, r2, #11
 8021bc8:	d50a      	bpl.n	8021be0 <__ieee754_sqrt+0x158>
 8021bca:	f1c1 0420 	rsb	r4, r1, #32
 8021bce:	fa23 f404 	lsr.w	r4, r3, r4
 8021bd2:	1e4d      	subs	r5, r1, #1
 8021bd4:	408b      	lsls	r3, r1
 8021bd6:	4322      	orrs	r2, r4
 8021bd8:	1b41      	subs	r1, r0, r5
 8021bda:	e788      	b.n	8021aee <__ieee754_sqrt+0x66>
 8021bdc:	4608      	mov	r0, r1
 8021bde:	e7f0      	b.n	8021bc2 <__ieee754_sqrt+0x13a>
 8021be0:	0052      	lsls	r2, r2, #1
 8021be2:	3101      	adds	r1, #1
 8021be4:	e7ef      	b.n	8021bc6 <__ieee754_sqrt+0x13e>
 8021be6:	46e0      	mov	r8, ip
 8021be8:	e7be      	b.n	8021b68 <__ieee754_sqrt+0xe0>
 8021bea:	bf00      	nop
 8021bec:	7ff00000 	.word	0x7ff00000

08021bf0 <_init>:
 8021bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bf2:	bf00      	nop
 8021bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021bf6:	bc08      	pop	{r3}
 8021bf8:	469e      	mov	lr, r3
 8021bfa:	4770      	bx	lr

08021bfc <_fini>:
 8021bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bfe:	bf00      	nop
 8021c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021c02:	bc08      	pop	{r3}
 8021c04:	469e      	mov	lr, r3
 8021c06:	4770      	bx	lr
