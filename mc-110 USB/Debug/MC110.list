
MC110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000218b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000080cc  08021a68  08021a68  00031a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029b34  08029b34  00040804  2**0
                  CONTENTS
  4 .ARM          00000008  08029b34  08029b34  00039b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029b3c  08029b3c  00040804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029b3c  08029b3c  00039b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029b40  08029b40  00039b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000804  20000000  08029b44  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009840  20000808  0802a348  00040808  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a048  0802a348  0004a048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040804  2**0
                  CONTENTS, READONLY
 12 .debug_info   001ead90  00000000  00000000  00040834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cc0b  00000000  00000000  0022b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005320  00000000  00000000  002381d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004db8  00000000  00000000  0023d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000401af  00000000  00000000  002422a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005d3e1  00000000  00000000  00282457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142625  00000000  00000000  002df838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00421e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001760c  00000000  00000000  00421eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000808 	.word	0x20000808
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021a50 	.word	0x08021a50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000080c 	.word	0x2000080c
 80001ec:	08021a50 	.word	0x08021a50

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <ADC_Read_REG>:

void Measure_Kdiv(void);


uint32_t ADC_Read_REG(uint8_t REG, uint8_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	uint32_t RES;
	ADC_NCS_ACTIVE();
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4820      	ldr	r0, [pc, #128]	; (8001144 <ADC_Read_REG+0x98>)
 80010c2:	f009 f88d 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((REG)<<1);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b3f      	subs	r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	747b      	strb	r3, [r7, #17]
	aTxBuffer[2] = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	74bb      	strb	r3, [r7, #18]
	aTxBuffer[3] = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 0110 	add.w	r1, r7, #16
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	9000      	str	r0, [sp, #0]
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <ADC_Read_REG+0x9c>)
 80010f6:	f00d f92e 	bl	800e356 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Read_REG+0x98>)
 8001100:	f009 f86e 	bl	800a1e0 <HAL_GPIO_WritePin>

	RES=aRxBuffer[1];
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[3];
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	461a      	mov	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
	RES = RES>>(8*(3-len));
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f1c3 0303 	rsb	r3, r3, #3
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]

	return RES;
 8001138:	697b      	ldr	r3, [r7, #20]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800
 8001148:	20007874 	.word	0x20007874

0800114c <ADC_Conversion>:


void ADC_Conversion(uint8_t RATE)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	ADC_NCS_ACTIVE();
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <ADC_Conversion+0x44>)
 800115c:	f009 f840 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b50      	subs	r3, #80	; 0x50
 8001164:	b2db      	uxtb	r3, r3
 8001166:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Conversion+0x48>)
 800117a:	f00d f8ec 	bl	800e356 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ADC_Conversion+0x44>)
 8001184:	f009 f82c 	bl	800a1e0 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000800 	.word	0x48000800
 8001194:	20007874 	.word	0x20007874

08001198 <ADC_Read_DATA>:

int32_t ADC_Read_DATA(uint8_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <ADC_Read_DATA+0x98>)
 80011a8:	f009 f81a 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((14+Channel)<<1);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	330e      	adds	r3, #14
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b3f      	subs	r3, #63	; 0x3f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	74bb      	strb	r3, [r7, #18]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	747b      	strb	r3, [r7, #17]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f107 0110 	add.w	r1, r7, #16
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <ADC_Read_DATA+0x9c>)
 80011da:	f00d f8bc 	bl	800e356 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <ADC_Read_DATA+0x98>)
 80011e4:	f008 fffc 	bl	800a1e0 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[2];
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[3];
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	461a      	mov	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
	if((data32>>23)==1) return -(8388608-(data32&0x7FFFFF));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	0ddb      	lsrs	r3, r3, #23
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <ADC_Read_DATA+0x88>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800121a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800121e:	e002      	b.n	8001226 <ADC_Read_DATA+0x8e>
	else return (data32&0x7FFFFF);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	48000800 	.word	0x48000800
 8001234:	20007874 	.word	0x20007874

08001238 <ADC_Read_STAT>:

uint32_t ADC_Read_STAT(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001244:	f008 ffcc 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((STAT_REG)<<1);
 8001248:	23c1      	movs	r3, #193	; 0xc1
 800124a:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	72bb      	strb	r3, [r7, #10]
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	727b      	strb	r3, [r7, #9]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2304      	movs	r3, #4
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <ADC_Read_STAT+0x70>)
 8001268:	f00d f875 	bl	800e356 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001272:	f008 ffb5 	bl	800a1e0 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[2];
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[3];
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
	return data32;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	20007874 	.word	0x20007874

080012ac <ADC_Write_REG>:

void ADC_Write_REG(uint8_t REG, uint8_t*DATA, uint8_t len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[10], aRxBuffer[10];
	uint8_t i=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
	ADC_NCS_ACTIVE();
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <ADC_Write_REG+0x84>)
 80012c6:	f008 ff8b 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC0+((REG)<<1);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b40      	subs	r3, #64	; 0x40
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	753b      	strb	r3, [r7, #20]
	for(i=0;i<len;i++)aTxBuffer[i+1] = DATA[i];
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	e00d      	b.n	80012f8 <ADC_Write_REG+0x4c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	441a      	add	r2, r3
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ed      	bcc.n	80012dc <ADC_Write_REG+0x30>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	f107 0114 	add.w	r1, r7, #20
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	9000      	str	r0, [sp, #0]
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <ADC_Write_REG+0x88>)
 8001318:	f00d f81d 	bl	800e356 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <ADC_Write_REG+0x84>)
 8001322:	f008 ff5d 	bl	800a1e0 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	48000800 	.word	0x48000800
 8001334:	20007874 	.word	0x20007874

08001338 <Auto_System_Calibration>:
	ADC_NCS_NOT_ACTIVE();
}


void Auto_System_Calibration(void)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b0a1      	sub	sp, #132	; 0x84
 800133c:	af00      	add	r7, sp, #0
	uint16_t i,j;
	int32_t DYNAMIC_BAND_MAX[9]={0,0,0,0,0,0,0,0,0};
 800133e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01b fe5a 	bl	801d000 <memset>
	int32_t DYNAMIC_BAND_MIN[9]={0,0,0,0,0,0,0,0,0};
 800134c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001350:	2224      	movs	r2, #36	; 0x24
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f01b fe53 	bl	801d000 <memset>
	uint8_t RES=0;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	int64_t SUM[6]={0,0,0,0,0,0};
 8001360:	463b      	mov	r3, r7
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f01b fe4a 	bl	801d000 <memset>

	// Читаем калибровочные данные из внешнего регистра
//	aTxBuffer[0] = 0x10;
//	ADC_Write_REG(CTRL3_REG, aTxBuffer, 1);

	calibr_process=1;
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <Auto_System_Calibration+0x180>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
//		DYNAMIC_BAND_MAX[i]=ADC_middle[5];
//		DYNAMIC_BAND_MIN[i]=ADC_middle[0];
//	}


	ADC_PGA_Set(PGA_GAIN128);
 8001372:	2008      	movs	r0, #8
 8001374:	f000 f98c 	bl	8001690 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <Auto_System_Calibration+0x184>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fee5 	bl	800114c <ADC_Conversion>
	ADC_Buff_size=256;
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <Auto_System_Calibration+0x188>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	801a      	strh	r2, [r3, #0]
	adc_full_buff=0;
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <Auto_System_Calibration+0x18c>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	while(adc_full_buff<ADC_Buff_size)
 8001390:	e00a      	b.n	80013a8 <Auto_System_Calibration+0x70>
	{
		Gauge_loading((uint8_t*)"Калибровка АЦП..",  (uint8_t)((adc_full_buff*100)/256));
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <Auto_System_Calibration+0x18c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4849      	ldr	r0, [pc, #292]	; (80014c8 <Auto_System_Calibration+0x190>)
 80013a4:	f001 fcc4 	bl	8002d30 <Gauge_loading>
	while(adc_full_buff<ADC_Buff_size)
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <Auto_System_Calibration+0x18c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8ed      	bhi.n	8001392 <Auto_System_Calibration+0x5a>
//	OldData=ADC_middle[5];



	// Расчитываем коэффициенты для SYSTEM калибровки GAIN и OFFSET
	adc_mux[0]=1.0;
 80013b6:	4945      	ldr	r1, [pc, #276]	; (80014cc <Auto_System_Calibration+0x194>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <Auto_System_Calibration+0x198>)
 80013be:	e9c1 2300 	strd	r2, r3, [r1]
	//for(i=1;i<9;i++)adc_mux[i]=(double)(DYNAMIC_BAND_MAX[0]*(1<<(i-1)))/(double)(DYNAMIC_BAND_MAX[i]-DYNAMIC_BAND_MIN[i]);
	for(i=1;i<9;i++)adc_mux[i]=(double)DYNAMIC_BAND_MAX[i]/(double)DYNAMIC_BAND_MAX[1];
 80013c2:	2301      	movs	r3, #1
 80013c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80013c8:	e024      	b.n	8001414 <Auto_System_Calibration+0xdc>
 80013ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80013d4:	4413      	add	r3, r2
 80013d6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8b2 	bl	8000544 <__aeabi_i2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8ac 	bl	8000544 <__aeabi_i2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	f8b7 607e 	ldrh.w	r6, [r7, #126]	; 0x7e
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fa38 	bl	800086c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <Auto_System_Calibration+0x194>)
 8001402:	00f1      	lsls	r1, r6, #3
 8001404:	4401      	add	r1, r0
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
 800140a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800140e:	3301      	adds	r3, #1
 8001410:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001414:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001418:	2b08      	cmp	r3, #8
 800141a:	d9d6      	bls.n	80013ca <Auto_System_Calibration+0x92>
	for(i=0;i<9;i++)adc_system_offset[i]=DYNAMIC_BAND_MIN[i];
 800141c:	2300      	movs	r3, #0
 800141e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001422:	e011      	b.n	8001448 <Auto_System_Calibration+0x110>
 8001424:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001428:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001432:	440b      	add	r3, r1
 8001434:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001438:	4926      	ldr	r1, [pc, #152]	; (80014d4 <Auto_System_Calibration+0x19c>)
 800143a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800143e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001442:	3301      	adds	r3, #1
 8001444:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800144c:	2b08      	cmp	r3, #8
 800144e:	d9e9      	bls.n	8001424 <Auto_System_Calibration+0xec>

	// Проверяем правильность показаний усиления
	for(i=2;i<9;i++) {if(DYNAMIC_BAND_MAX[i-1]<DYNAMIC_BAND_MAX[i])RES=1;}
 8001450:	2302      	movs	r3, #2
 8001452:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001456:	e01a      	b.n	800148e <Auto_System_Calibration+0x156>
 8001458:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800145c:	3b01      	subs	r3, #1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001464:	4413      	add	r3, r2
 8001466:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800146a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001474:	440b      	add	r3, r1
 8001476:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800147a:	429a      	cmp	r2, r3
 800147c:	da02      	bge.n	8001484 <Auto_System_Calibration+0x14c>
 800147e:	2301      	movs	r3, #1
 8001480:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8001484:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001488:	3301      	adds	r3, #1
 800148a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800148e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001492:	2b08      	cmp	r3, #8
 8001494:	d9e0      	bls.n	8001458 <Auto_System_Calibration+0x120>
	if(RES==1)ERROR_REG|=(0x01<<ADC_cal_err);
 8001496:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <Auto_System_Calibration+0x172>
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a8:	6013      	str	r3, [r2, #0]

	//OldData=(double)DYNAMIC_BAND_MAX[1];

	calibr_process=0;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <Auto_System_Calibration+0x180>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3784      	adds	r7, #132	; 0x84
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	20000851 	.word	0x20000851
 80014bc:	2000009b 	.word	0x2000009b
 80014c0:	2000009c 	.word	0x2000009c
 80014c4:	20000828 	.word	0x20000828
 80014c8:	08021a68 	.word	0x08021a68
 80014cc:	20000000 	.word	0x20000000
 80014d0:	3ff00000 	.word	0x3ff00000
 80014d4:	2000082c 	.word	0x2000082c
 80014d8:	20000890 	.word	0x20000890

080014dc <ADC_Calibration>:


void ADC_Calibration(uint8_t CAL)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	aTxBuffer[0]=((CAL)<<6)+0x02;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3302      	adds	r3, #2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	733b      	strb	r3, [r7, #12]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2201      	movs	r2, #1
 80014f8:	4619      	mov	r1, r3
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fed6 	bl	80012ac <ADC_Write_REG>

	ADC_NCS_ACTIVE();
 8001500:	2200      	movs	r2, #0
 8001502:	2110      	movs	r1, #16
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <ADC_Calibration+0x5c>)
 8001506:	f008 fe6b 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xA0;
 800150a:	23a0      	movs	r3, #160	; 0xa0
 800150c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	f107 010c 	add.w	r1, r7, #12
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <ADC_Calibration+0x60>)
 8001520:	f00c ff19 	bl	800e356 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <ADC_Calibration+0x5c>)
 800152a:	f008 fe59 	bl	800a1e0 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	48000800 	.word	0x48000800
 800153c:	20007874 	.word	0x20007874

08001540 <ADC_init>:
}



void ADC_init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data=0xFFFFFFFF;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	60fb      	str	r3, [r7, #12]
	uint16_t i;

	// Reset
	aTxBuffer[0] = 0x30;
 800154c:	2330      	movs	r3, #48	; 0x30
 800154e:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fea8 	bl	80012ac <ADC_Write_REG>
	ADC_NCS_ACTIVE();
 800155c:	2200      	movs	r2, #0
 800155e:	2110      	movs	r1, #16
 8001560:	4845      	ldr	r0, [pc, #276]	; (8001678 <ADC_init+0x138>)
 8001562:	f008 fe3d 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x90;
 8001566:	2390      	movs	r3, #144	; 0x90
 8001568:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800156a:	463a      	mov	r2, r7
 800156c:	1d39      	adds	r1, r7, #4
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	4841      	ldr	r0, [pc, #260]	; (800167c <ADC_init+0x13c>)
 8001578:	f00c feed 	bl	800e356 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800157c:	2201      	movs	r2, #1
 800157e:	2110      	movs	r1, #16
 8001580:	483d      	ldr	r0, [pc, #244]	; (8001678 <ADC_init+0x138>)
 8001582:	f008 fe2d 	bl	800a1e0 <HAL_GPIO_WritePin>

	while(i<10000)
 8001586:	e005      	b.n	8001594 <ADC_init+0x54>
	{
		data=ADC_Read_STAT();
 8001588:	f7ff fe56 	bl	8001238 <ADC_Read_STAT>
 800158c:	60f8      	str	r0, [r7, #12]
		i++;
 800158e:	897b      	ldrh	r3, [r7, #10]
 8001590:	3301      	adds	r3, #1
 8001592:	817b      	strh	r3, [r7, #10]
	while(i<10000)
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	f242 720f 	movw	r2, #9999	; 0x270f
 800159a:	4293      	cmp	r3, r2
 800159c:	d9f4      	bls.n	8001588 <ADC_init+0x48>
	}
	if(data!=152) ERROR_REG=(1<<ADC_err);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b98      	cmp	r3, #152	; 0x98
 80015a2:	d002      	beq.n	80015aa <ADC_init+0x6a>
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <ADC_init+0x140>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]

	// Настройка АЦП
	aTxBuffer[0] = 0x09;
 80015aa:	2309      	movs	r3, #9
 80015ac:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	2008      	movs	r0, #8
 80015b6:	f7ff fe79 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x0E;
 80015ba:	230e      	movs	r3, #14
 80015bc:	713b      	strb	r3, [r7, #4]
	aTxBuffer[1] = 0x0A;
 80015be:	230a      	movs	r3, #10
 80015c0:	717b      	strb	r3, [r7, #5]
	aTxBuffer[2] = 0x06;
 80015c2:	2306      	movs	r3, #6
 80015c4:	71bb      	strb	r3, [r7, #6]
	ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2203      	movs	r2, #3
 80015ca:	4619      	mov	r1, r3
 80015cc:	2007      	movs	r0, #7
 80015ce:	f7ff fe6d 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x1A;
 80015d2:	231a      	movs	r3, #26
 80015d4:	713b      	strb	r3, [r7, #4]
	aTxBuffer[1] = 0x16;
 80015d6:	2316      	movs	r3, #22
 80015d8:	717b      	strb	r3, [r7, #5]
	aTxBuffer[2] = 0x12;
 80015da:	2312      	movs	r3, #18
 80015dc:	71bb      	strb	r3, [r7, #6]
	ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2203      	movs	r2, #3
 80015e2:	4619      	mov	r1, r3
 80015e4:	2006      	movs	r0, #6
 80015e6:	f7ff fe61 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x02;
 80015ea:	2302      	movs	r3, #2
 80015ec:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fe59 	bl	80012ac <ADC_Write_REG>

	// Self calibration
	LED(1,0,0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fdba 	bl	8002178 <LED>
	aTxBuffer[0] = 0x01;
 8001604:	2301      	movs	r3, #1
 8001606:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	2008      	movs	r0, #8
 8001610:	f7ff fe4c 	bl	80012ac <ADC_Write_REG>
	ADC_Calibration(adc_calibration_mode);
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <ADC_init+0x144>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <ADC_Calibration>
	delay_ms(300);
 800161e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001622:	f001 fe07 	bl	8003234 <delay_ms>
	aTxBuffer[0] = 0x09;
 8001626:	2309      	movs	r3, #9
 8001628:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	2008      	movs	r0, #8
 8001632:	f7ff fe3b 	bl	80012ac <ADC_Write_REG>

	ADC_PGA_Set(PGA_GAIN);
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <ADC_init+0x148>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f828 	bl	8001690 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <ADC_init+0x14c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd81 	bl	800114c <ADC_Conversion>

	delay_ms(1500);
 800164a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800164e:	f001 fdf1 	bl	8003234 <delay_ms>
	//Auto_System_Calibration();

	ADC_PGA_Set(PGA_GAIN);
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <ADC_init+0x148>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f81a 	bl	8001690 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <ADC_init+0x14c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fd73 	bl	800114c <ADC_Conversion>

	LED(0,0,0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	2000      	movs	r0, #0
 800166c:	f000 fd84 	bl	8002178 <LED>
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	48000800 	.word	0x48000800
 800167c:	20007874 	.word	0x20007874
 8001680:	20000890 	.word	0x20000890
 8001684:	200008a7 	.word	0x200008a7
 8001688:	2000009a 	.word	0x2000009a
 800168c:	2000009b 	.word	0x2000009b

08001690 <ADC_PGA_Set>:


void ADC_PGA_Set(uint8_t pga_data)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4];
	uint8_t CTRL=ADC_Read_REG(CTRL2_REG, 1);
 800169a:	2101      	movs	r1, #1
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff fd05 	bl	80010ac <ADC_Read_REG>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
	CTRL&=0xF0;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	f023 030f 	bic.w	r3, r3, #15
 80016ac:	73fb      	strb	r3, [r7, #15]
	if(pga_data==0) aTxBuffer[0]=CTRL;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <ADC_PGA_Set+0x2a>
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	723b      	strb	r3, [r7, #8]
 80016b8:	e006      	b.n	80016c8 <ADC_PGA_Set+0x38>
	else aTxBuffer[0]=CTRL+0x08+(pga_data-1);
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4413      	add	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3307      	adds	r3, #7
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL2_REG, aTxBuffer, 1);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2201      	movs	r2, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	2002      	movs	r0, #2
 80016d2:	f7ff fdeb 	bl	80012ac <ADC_Write_REG>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <ADC_EXT>:


void ADC_EXT(void)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	80fb      	strh	r3, [r7, #6]

//	if(adc_full_buff>2)
//	{
		if(read_off_gain==0)
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <ADC_EXT+0x1d4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 8086 	bne.w	8001800 <ADC_EXT+0x120>
		{
			for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 80016f4:	2300      	movs	r3, #0
 80016f6:	80fb      	strh	r3, [r7, #6]
 80016f8:	e00c      	b.n	8001714 <ADC_EXT+0x34>
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	88fc      	ldrh	r4, [r7, #6]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd49 	bl	8001198 <ADC_Read_DATA>
 8001706:	4603      	mov	r3, r0
 8001708:	4a6b      	ldr	r2, [pc, #428]	; (80018b8 <ADC_EXT+0x1d8>)
 800170a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	3301      	adds	r3, #1
 8001712:	80fb      	strh	r3, [r7, #6]
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d9ef      	bls.n	80016fa <ADC_EXT+0x1a>

//			if(start_packet==0)
//			{
				for(i=0;i<ADC_Buff_size-1;i++)
 800171a:	2300      	movs	r3, #0
 800171c:	80fb      	strh	r3, [r7, #6]
 800171e:	e038      	b.n	8001792 <ADC_EXT+0xb2>
				{
					ADC_channel_0[i]=ADC_channel_0[i+1];
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4965      	ldr	r1, [pc, #404]	; (80018bc <ADC_EXT+0x1dc>)
 8001728:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800172c:	4963      	ldr	r1, [pc, #396]	; (80018bc <ADC_EXT+0x1dc>)
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_1[i]=ADC_channel_1[i+1];
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4961      	ldr	r1, [pc, #388]	; (80018c0 <ADC_EXT+0x1e0>)
 800173a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800173e:	4960      	ldr	r1, [pc, #384]	; (80018c0 <ADC_EXT+0x1e0>)
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_2[i]=ADC_channel_2[i+1];
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	495e      	ldr	r1, [pc, #376]	; (80018c4 <ADC_EXT+0x1e4>)
 800174c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001750:	495c      	ldr	r1, [pc, #368]	; (80018c4 <ADC_EXT+0x1e4>)
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_3[i]=ADC_channel_3[i+1];
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	495a      	ldr	r1, [pc, #360]	; (80018c8 <ADC_EXT+0x1e8>)
 800175e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001762:	4959      	ldr	r1, [pc, #356]	; (80018c8 <ADC_EXT+0x1e8>)
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_4[i]=ADC_channel_4[i+1];
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4957      	ldr	r1, [pc, #348]	; (80018cc <ADC_EXT+0x1ec>)
 8001770:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001774:	4955      	ldr	r1, [pc, #340]	; (80018cc <ADC_EXT+0x1ec>)
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_5[i]=ADC_channel_5[i+1];
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4953      	ldr	r1, [pc, #332]	; (80018d0 <ADC_EXT+0x1f0>)
 8001782:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001786:	4952      	ldr	r1, [pc, #328]	; (80018d0 <ADC_EXT+0x1f0>)
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=0;i<ADC_Buff_size-1;i++)
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	3301      	adds	r3, #1
 8001790:	80fb      	strh	r3, [r7, #6]
 8001792:	88fa      	ldrh	r2, [r7, #6]
 8001794:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <ADC_EXT+0x1f4>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	429a      	cmp	r2, r3
 800179c:	dbc0      	blt.n	8001720 <ADC_EXT+0x40>
				}

				ADC_channel_0[ADC_Buff_size-1]=ADC_data[0];
 800179e:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <ADC_EXT+0x1f4>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <ADC_EXT+0x1d8>)
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	4944      	ldr	r1, [pc, #272]	; (80018bc <ADC_EXT+0x1dc>)
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_1[ADC_Buff_size-1]=ADC_data[1];
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <ADC_EXT+0x1f4>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	4a40      	ldr	r2, [pc, #256]	; (80018b8 <ADC_EXT+0x1d8>)
 80017b6:	6852      	ldr	r2, [r2, #4]
 80017b8:	4941      	ldr	r1, [pc, #260]	; (80018c0 <ADC_EXT+0x1e0>)
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_2[ADC_Buff_size-1]=ADC_data[2];
 80017be:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <ADC_EXT+0x1f4>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a3c      	ldr	r2, [pc, #240]	; (80018b8 <ADC_EXT+0x1d8>)
 80017c6:	6892      	ldr	r2, [r2, #8]
 80017c8:	493e      	ldr	r1, [pc, #248]	; (80018c4 <ADC_EXT+0x1e4>)
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_3[ADC_Buff_size-1]=ADC_data[3];
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <ADC_EXT+0x1f4>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <ADC_EXT+0x1d8>)
 80017d6:	68d2      	ldr	r2, [r2, #12]
 80017d8:	493b      	ldr	r1, [pc, #236]	; (80018c8 <ADC_EXT+0x1e8>)
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_4[ADC_Buff_size-1]=ADC_data[4];
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <ADC_EXT+0x1f4>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <ADC_EXT+0x1d8>)
 80017e6:	6912      	ldr	r2, [r2, #16]
 80017e8:	4938      	ldr	r1, [pc, #224]	; (80018cc <ADC_EXT+0x1ec>)
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_5[ADC_Buff_size-1]=ADC_data[5];
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <ADC_EXT+0x1f4>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <ADC_EXT+0x1d8>)
 80017f6:	6952      	ldr	r2, [r2, #20]
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <ADC_EXT+0x1f0>)
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017fe:	e02e      	b.n	800185e <ADC_EXT+0x17e>
//			{
//				read_off_gain=2;
//			}
//			else
//			{
				for(i=1;i<ADC_Buff_size;i++)
 8001800:	2301      	movs	r3, #1
 8001802:	80fb      	strh	r3, [r7, #6]
 8001804:	e00b      	b.n	800181e <ADC_EXT+0x13e>
				{ ADC_channel_OFF[i-1]=ADC_channel_OFF[i]; }
 8001806:	88fa      	ldrh	r2, [r7, #6]
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	3b01      	subs	r3, #1
 800180c:	4932      	ldr	r1, [pc, #200]	; (80018d8 <ADC_EXT+0x1f8>)
 800180e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001812:	4931      	ldr	r1, [pc, #196]	; (80018d8 <ADC_EXT+0x1f8>)
 8001814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=1;i<ADC_Buff_size;i++)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	3301      	adds	r3, #1
 800181c:	80fb      	strh	r3, [r7, #6]
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <ADC_EXT+0x1f4>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	88fa      	ldrh	r2, [r7, #6]
 8001824:	429a      	cmp	r2, r3
 8001826:	d3ee      	bcc.n	8001806 <ADC_EXT+0x126>
				for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 8001828:	2300      	movs	r3, #0
 800182a:	80fb      	strh	r3, [r7, #6]
 800182c:	e00c      	b.n	8001848 <ADC_EXT+0x168>
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	88fc      	ldrh	r4, [r7, #6]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fcaf 	bl	8001198 <ADC_Read_DATA>
 800183a:	4603      	mov	r3, r0
 800183c:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <ADC_EXT+0x1d8>)
 800183e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	3301      	adds	r3, #1
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d9ef      	bls.n	800182e <ADC_EXT+0x14e>
				ADC_channel_OFF[ADC_Buff_size-1]=ADC_data[5];
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <ADC_EXT+0x1f4>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	3b01      	subs	r3, #1
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <ADC_EXT+0x1d8>)
 8001856:	6952      	ldr	r2, [r2, #20]
 8001858:	491f      	ldr	r1, [pc, #124]	; (80018d8 <ADC_EXT+0x1f8>)
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

//	if(adc_full_buff<ADC_Buff_size)adc_full_buff++;
//	else{if(cal_ag<10)cal_ag++;}
//	if(cal_ag==10){cal_ag=20; for(i=0;i<6;i++) Kag[i]=(double)CALag[i]/(double)ADC_middle[i];}

	if(start_packet==0)adc_full_buff++;
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <ADC_EXT+0x1fc>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <ADC_EXT+0x192>
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <ADC_EXT+0x200>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <ADC_EXT+0x200>)
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e002      	b.n	8001878 <ADC_EXT+0x198>
	else start_packet=0;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <ADC_EXT+0x1fc>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]

	// Расчитываем Kdiv
	//Kdiv = 128.0/(OldData/(double)ADC_middle[5]);
	if(AutoAmpCoef==1)Measure_Kdiv();
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <ADC_EXT+0x204>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <ADC_EXT+0x1a6>
 8001880:	f000 f83a 	bl	80018f8 <Measure_Kdiv>
 8001884:	e009      	b.n	800189a <ADC_EXT+0x1ba>
	else Kdiv=devider;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <ADC_EXT+0x208>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe4a 	bl	8000524 <__aeabi_ui2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4915      	ldr	r1, [pc, #84]	; (80018ec <ADC_EXT+0x20c>)
 8001896:	e9c1 2300 	strd	r2, r3, [r1]

	adc_timeout=adc_timeout_const;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <ADC_EXT+0x210>)
 800189c:	2205      	movs	r2, #5
 800189e:	701a      	strb	r2, [r3, #0]
	ADC_Conversion(ADC_SPS);
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <ADC_EXT+0x214>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc51 	bl	800114c <ADC_Conversion>
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000852 	.word	0x20000852
 80018b8:	200052a8 	.word	0x200052a8
 80018bc:	20004aa8 	.word	0x20004aa8
 80018c0:	200022a8 	.word	0x200022a8
 80018c4:	20002aa8 	.word	0x20002aa8
 80018c8:	200032a8 	.word	0x200032a8
 80018cc:	200042a8 	.word	0x200042a8
 80018d0:	20003aa8 	.word	0x20003aa8
 80018d4:	2000009c 	.word	0x2000009c
 80018d8:	20005300 	.word	0x20005300
 80018dc:	20000853 	.word	0x20000853
 80018e0:	20000828 	.word	0x20000828
 80018e4:	200008a1 	.word	0x200008a1
 80018e8:	20000850 	.word	0x20000850
 80018ec:	20000090 	.word	0x20000090
 80018f0:	20000048 	.word	0x20000048
 80018f4:	2000009b 	.word	0x2000009b

080018f8 <Measure_Kdiv>:


void Measure_Kdiv(void)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	// Gain
	if(read_off_gain==0)
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <Measure_Kdiv+0xa4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d118      	bne.n	8001936 <Measure_Kdiv+0x3e>
	{
		if(adc_full_buff>=AutoGainCoef_period)
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <Measure_Kdiv+0xa8>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <Measure_Kdiv+0xac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d82b      	bhi.n	800196a <Measure_Kdiv+0x72>
		{
			ADC_PGA_Set(PGA_GAIN_OFF);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff febc 	bl	8001690 <ADC_PGA_Set>
			ADC_Conversion(ADC_SPS);
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <Measure_Kdiv+0xb0>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fc15 	bl	800114c <ADC_Conversion>
			read_off_gain=1;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <Measure_Kdiv+0xa4>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
			adc_full_buff=0;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <Measure_Kdiv+0xac>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
			start_packet=1;
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <Measure_Kdiv+0xb4>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e019      	b.n	800196a <Measure_Kdiv+0x72>
		}
	}
	// Gain OFF
	else
	{
		if(adc_full_buff>=AutoOffCoef_period)
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <Measure_Kdiv+0xb8>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <Measure_Kdiv+0xac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d812      	bhi.n	800196a <Measure_Kdiv+0x72>
		{
			ADC_PGA_Set(PGA_GAIN);
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <Measure_Kdiv+0xbc>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fea1 	bl	8001690 <ADC_PGA_Set>
			ADC_Conversion(ADC_SPS);
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <Measure_Kdiv+0xb0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fbfa 	bl	800114c <ADC_Conversion>
			adc_full_buff=0;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <Measure_Kdiv+0xac>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
			read_off_gain=0;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <Measure_Kdiv+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
			start_packet=1;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <Measure_Kdiv+0xb4>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
		}
	}
	Kdiv=(double)ADC_middle[5]/(double)ADC_middle[6];
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <Measure_Kdiv+0xc0>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fde8 	bl	8000544 <__aeabi_i2d>
 8001974:	4604      	mov	r4, r0
 8001976:	460d      	mov	r5, r1
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <Measure_Kdiv+0xc0>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fde1 	bl	8000544 <__aeabi_i2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f7fe ff6f 	bl	800086c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	490a      	ldr	r1, [pc, #40]	; (80019bc <Measure_Kdiv+0xc4>)
 8001994:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001998:	bf00      	nop
 800199a:	bdb0      	pop	{r4, r5, r7, pc}
 800199c:	20000852 	.word	0x20000852
 80019a0:	2000210c 	.word	0x2000210c
 80019a4:	20000828 	.word	0x20000828
 80019a8:	2000009b 	.word	0x2000009b
 80019ac:	20000853 	.word	0x20000853
 80019b0:	20002174 	.word	0x20002174
 80019b4:	2000009a 	.word	0x2000009a
 80019b8:	200020f0 	.word	0x200020f0
 80019bc:	20000090 	.word	0x20000090

080019c0 <ADC_process>:


void ADC_process(void)
{
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	b099      	sub	sp, #100	; 0x64
 80019c6:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t aTxBuffer[4];
	int64_t SUM[7]={0,0,0,0,0,0};
 80019ce:	f107 0020 	add.w	r0, r7, #32
 80019d2:	2338      	movs	r3, #56	; 0x38
 80019d4:	461a      	mov	r2, r3
 80019d6:	2100      	movs	r1, #0
 80019d8:	f01b fb12 	bl	801d000 <memset>

	// Скользящее среднее
	for(i=0;i<ADC_Buff_size;i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80019e2:	e07f      	b.n	8001ae4 <ADC_process+0x124>
	{
		SUM[0]+=ADC_channel_0[i];
 80019e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019ec:	4bb6      	ldr	r3, [pc, #728]	; (8001cc8 <ADC_process+0x308>)
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	461a      	mov	r2, r3
 80019f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019f8:	1884      	adds	r4, r0, r2
 80019fa:	eb41 0503 	adc.w	r5, r1, r3
 80019fe:	e9c7 4508 	strd	r4, r5, [r7, #32]
		SUM[1]+=ADC_channel_1[i];
 8001a02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a06:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a0a:	4bb0      	ldr	r3, [pc, #704]	; (8001ccc <ADC_process+0x30c>)
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	461a      	mov	r2, r3
 8001a12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a16:	eb10 0802 	adds.w	r8, r0, r2
 8001a1a:	eb41 0903 	adc.w	r9, r1, r3
 8001a1e:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
		SUM[2]+=ADC_channel_2[i];
 8001a22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a26:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a2a:	4ba9      	ldr	r3, [pc, #676]	; (8001cd0 <ADC_process+0x310>)
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	461a      	mov	r2, r3
 8001a32:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a36:	eb10 0a02 	adds.w	sl, r0, r2
 8001a3a:	eb41 0b03 	adc.w	fp, r1, r3
 8001a3e:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
		SUM[3]+=ADC_channel_3[i];
 8001a42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a46:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a4a:	4ba2      	ldr	r3, [pc, #648]	; (8001cd4 <ADC_process+0x314>)
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	461a      	mov	r2, r3
 8001a52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a56:	1886      	adds	r6, r0, r2
 8001a58:	61be      	str	r6, [r7, #24]
 8001a5a:	eb41 0303 	adc.w	r3, r1, r3
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a64:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		SUM[4]+=ADC_channel_4[i];
 8001a68:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a6c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a70:	4b99      	ldr	r3, [pc, #612]	; (8001cd8 <ADC_process+0x318>)
 8001a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a76:	461a      	mov	r2, r3
 8001a78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a7c:	1886      	adds	r6, r0, r2
 8001a7e:	613e      	str	r6, [r7, #16]
 8001a80:	eb41 0303 	adc.w	r3, r1, r3
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		SUM[5]+=ADC_channel_5[i];
 8001a8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a92:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a96:	4b91      	ldr	r3, [pc, #580]	; (8001cdc <ADC_process+0x31c>)
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001aa2:	1886      	adds	r6, r0, r2
 8001aa4:	60be      	str	r6, [r7, #8]
 8001aa6:	eb41 0303 	adc.w	r3, r1, r3
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ab0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		SUM[6]+=ADC_channel_OFF[i];
 8001ab4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ab8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001abc:	4b88      	ldr	r3, [pc, #544]	; (8001ce0 <ADC_process+0x320>)
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ac8:	1886      	adds	r6, r0, r2
 8001aca:	603e      	str	r6, [r7, #0]
 8001acc:	eb41 0303 	adc.w	r3, r1, r3
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ad6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(i=0;i<ADC_Buff_size;i++)
 8001ada:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001ae4:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <ADC_process+0x324>)
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001aec:	4293      	cmp	r3, r2
 8001aee:	f4ff af79 	bcc.w	80019e4 <ADC_process+0x24>
	}
	for(i=0;i<7;i++) ADC_middle[i]=SUM[i]/ADC_Buff_size;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001af8:	e01e      	b.n	8001b38 <ADC_process+0x178>
 8001afa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b04:	4413      	add	r3, r2
 8001b06:	3b40      	subs	r3, #64	; 0x40
 8001b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b0c:	4b75      	ldr	r3, [pc, #468]	; (8001ce4 <ADC_process+0x324>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f7ff f8c7 	bl	8000ca8 <__aeabi_ldivmod>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b26:	4601      	mov	r1, r0
 8001b28:	4a6f      	ldr	r2, [pc, #444]	; (8001ce8 <ADC_process+0x328>)
 8001b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b32:	3301      	adds	r3, #1
 8001b34:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001b38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d9dc      	bls.n	8001afa <ADC_process+0x13a>

	//for(i=0;i<7;i++) ADC_middle[i]*=Kag[i];

	// Перезапуск АЦП если нет ответа в течении adc_timeout_const
	if(adc_timeout>0)adc_timeout--;
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <ADC_process+0x32c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <ADC_process+0x196>
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <ADC_process+0x32c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <ADC_process+0x32c>)
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e05e      	b.n	8001c14 <ADC_process+0x254>
	else
	{
		// Настройка АЦП
		aTxBuffer[0] = 0x09;
 8001b56:	2309      	movs	r3, #9
 8001b58:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b60:	2201      	movs	r2, #1
 8001b62:	4619      	mov	r1, r3
 8001b64:	2008      	movs	r0, #8
 8001b66:	f7ff fba1 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x0E;
 8001b6a:	230e      	movs	r3, #14
 8001b6c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x0A;
 8001b70:	230a      	movs	r3, #10
 8001b72:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x06;
 8001b76:	2306      	movs	r3, #6
 8001b78:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 8001b7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b80:	2203      	movs	r2, #3
 8001b82:	4619      	mov	r1, r3
 8001b84:	2007      	movs	r0, #7
 8001b86:	f7ff fb91 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x1A;
 8001b8a:	231a      	movs	r3, #26
 8001b8c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x16;
 8001b90:	2316      	movs	r3, #22
 8001b92:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x12;
 8001b96:	2312      	movs	r3, #18
 8001b98:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 8001b9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	2006      	movs	r0, #6
 8001ba6:	f7ff fb81 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x02;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001bb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff fb77 	bl	80012ac <ADC_Write_REG>
		// Self calibration
		aTxBuffer[0] = 0x01;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001bc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	2008      	movs	r0, #8
 8001bce:	f7ff fb6d 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <ADC_process+0x330>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fc80 	bl	80014dc <ADC_Calibration>
		delay_ms(300);
 8001bdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001be0:	f001 fb28 	bl	8003234 <delay_ms>
		aTxBuffer[0] = 0x09;
 8001be4:	2309      	movs	r3, #9
 8001be6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001bea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2008      	movs	r0, #8
 8001bf4:	f7ff fb5a 	bl	80012ac <ADC_Write_REG>

		ADC_Conversion(ADC_SPS);
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <ADC_process+0x334>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff faa5 	bl	800114c <ADC_Conversion>
		adc_timeout=adc_timeout_const;
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <ADC_process+0x32c>)
 8001c04:	2205      	movs	r2, #5
 8001c06:	701a      	strb	r2, [r3, #0]
		ERROR_REG|=(0x01<<ADC_err);
 8001c08:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <ADC_process+0x338>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	4a39      	ldr	r2, [pc, #228]	; (8001cf8 <ADC_process+0x338>)
 8001c12:	6013      	str	r3, [r2, #0]
	}


	if(adc_start_calibration==0)
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <ADC_process+0x33c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d120      	bne.n	8001c5e <ADC_process+0x29e>
	{
		if(adc_timeout_cal>0)
 8001c1c:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <ADC_process+0x340>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d048      	beq.n	8001cb6 <ADC_process+0x2f6>
		{
			adc_timeout_cal--;
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <ADC_process+0x340>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <ADC_process+0x340>)
 8001c2e:	801a      	strh	r2, [r3, #0]
			if(adc_timeout_cal==0)
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <ADC_process+0x340>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d13e      	bne.n	8001cb6 <ADC_process+0x2f6>
			{
				// Стартуем преобразование
				aTxBuffer[0] = 0x09;
 8001c38:	2309      	movs	r3, #9
 8001c3a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001c3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c42:	2201      	movs	r2, #1
 8001c44:	4619      	mov	r1, r3
 8001c46:	2008      	movs	r0, #8
 8001c48:	f7ff fb30 	bl	80012ac <ADC_Write_REG>
				ADC_Conversion(DATA_RATE_16SPS);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f7ff fa7d 	bl	800114c <ADC_Conversion>
				LED(0,0,0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 fa8e 	bl	8002178 <LED>
 8001c5c:	e02b      	b.n	8001cb6 <ADC_process+0x2f6>
		}
	}
	// Калибровка
	else
	{
		LED(1,0,0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 fa88 	bl	8002178 <LED>
		adc_start_calibration=0;
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <ADC_process+0x33c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
		aTxBuffer[0] = 0x01;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==offset_calibration)aTxBuffer[0]+=(0<<5); 		// Ноль это канал по которому производится калибровка
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <ADC_process+0x330>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d103      	bne.n	8001c84 <ADC_process+0x2c4>
 8001c7c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c80:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==full_scale_calibration)aTxBuffer[0]+=(5<<5);	// Ноль это канал по которому производится калибровка
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <ADC_process+0x330>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d105      	bne.n	8001c98 <ADC_process+0x2d8>
 8001c8c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c90:	3b60      	subs	r3, #96	; 0x60
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001c98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2008      	movs	r0, #8
 8001ca2:	f7ff fb03 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <ADC_process+0x330>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fc16 	bl	80014dc <ADC_Calibration>
		adc_timeout_cal=50;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <ADC_process+0x340>)
 8001cb2:	2232      	movs	r2, #50	; 0x32
 8001cb4:	801a      	strh	r2, [r3, #0]
	}
	// Делитель для PGA
	if(PGA_GAIN==0)devider=1;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <ADC_process+0x344>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d126      	bne.n	8001d0c <ADC_process+0x34c>
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <ADC_process+0x348>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e02b      	b.n	8001d1e <ADC_process+0x35e>
 8001cc6:	bf00      	nop
 8001cc8:	20004aa8 	.word	0x20004aa8
 8001ccc:	200022a8 	.word	0x200022a8
 8001cd0:	20002aa8 	.word	0x20002aa8
 8001cd4:	200032a8 	.word	0x200032a8
 8001cd8:	200042a8 	.word	0x200042a8
 8001cdc:	20003aa8 	.word	0x20003aa8
 8001ce0:	20005300 	.word	0x20005300
 8001ce4:	2000009c 	.word	0x2000009c
 8001ce8:	200020f0 	.word	0x200020f0
 8001cec:	20000048 	.word	0x20000048
 8001cf0:	200008a7 	.word	0x200008a7
 8001cf4:	2000009b 	.word	0x2000009b
 8001cf8:	20000890 	.word	0x20000890
 8001cfc:	20000824 	.word	0x20000824
 8001d00:	20000826 	.word	0x20000826
 8001d04:	2000009a 	.word	0x2000009a
 8001d08:	20000850 	.word	0x20000850
	else devider= (0x01<<(PGA_GAIN-1));
 8001d0c:	4ba4      	ldr	r3, [pc, #656]	; (8001fa0 <ADC_process+0x5e0>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	2201      	movs	r2, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4ba2      	ldr	r3, [pc, #648]	; (8001fa4 <ADC_process+0x5e4>)
 8001d1c:	701a      	strb	r2, [r3, #0]


	ADC_volt[0]=ADC_middle[0]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d1e:	4ba2      	ldr	r3, [pc, #648]	; (8001fa8 <ADC_process+0x5e8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc0e 	bl	8000544 <__aeabi_i2d>
 8001d28:	4604      	mov	r4, r0
 8001d2a:	460d      	mov	r5, r1
 8001d2c:	4b9f      	ldr	r3, [pc, #636]	; (8001fac <ADC_process+0x5ec>)
 8001d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b9e      	ldr	r3, [pc, #632]	; (8001fb0 <ADC_process+0x5f0>)
 8001d38:	f7fe fc6e 	bl	8000618 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4690      	mov	r8, r2
 8001d42:	4699      	mov	r9, r3
 8001d44:	4b9b      	ldr	r3, [pc, #620]	; (8001fb4 <ADC_process+0x5f4>)
 8001d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b9a      	ldr	r3, [pc, #616]	; (8001fb8 <ADC_process+0x5f8>)
 8001d50:	f7fe fc62 	bl	8000618 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	f7fe fd86 	bl	800086c <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f7fe fc56 	bl	8000618 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4992      	ldr	r1, [pc, #584]	; (8001fbc <ADC_process+0x5fc>)
 8001d72:	e9c1 2300 	strd	r2, r3, [r1]
	ADC_volt[1]=ADC_middle[1]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d76:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <ADC_process+0x5e8>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbe2 	bl	8000544 <__aeabi_i2d>
 8001d80:	4604      	mov	r4, r0
 8001d82:	460d      	mov	r5, r1
 8001d84:	4b89      	ldr	r3, [pc, #548]	; (8001fac <ADC_process+0x5ec>)
 8001d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <ADC_process+0x5f0>)
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4690      	mov	r8, r2
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <ADC_process+0x5f4>)
 8001d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <ADC_process+0x5f8>)
 8001da8:	f7fe fc36 	bl	8000618 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4640      	mov	r0, r8
 8001db2:	4649      	mov	r1, r9
 8001db4:	f7fe fd5a 	bl	800086c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fc2a 	bl	8000618 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	497c      	ldr	r1, [pc, #496]	; (8001fbc <ADC_process+0x5fc>)
 8001dca:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ADC_volt[2]=ADC_middle[2]*((RefVoltage*1000)/(8388608*Kdiv));
 8001dce:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <ADC_process+0x5e8>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fbb6 	bl	8000544 <__aeabi_i2d>
 8001dd8:	4604      	mov	r4, r0
 8001dda:	460d      	mov	r5, r1
 8001ddc:	4b73      	ldr	r3, [pc, #460]	; (8001fac <ADC_process+0x5ec>)
 8001dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <ADC_process+0x5f0>)
 8001de8:	f7fe fc16 	bl	8000618 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4690      	mov	r8, r2
 8001df2:	4699      	mov	r9, r3
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <ADC_process+0x5f4>)
 8001df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <ADC_process+0x5f8>)
 8001e00:	f7fe fc0a 	bl	8000618 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4640      	mov	r0, r8
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	f7fe fd2e 	bl	800086c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fbfe 	bl	8000618 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4966      	ldr	r1, [pc, #408]	; (8001fbc <ADC_process+0x5fc>)
 8001e22:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ADC_volt[3]=ADC_middle[3]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <ADC_process+0x5e8>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb8a 	bl	8000544 <__aeabi_i2d>
 8001e30:	4604      	mov	r4, r0
 8001e32:	460d      	mov	r5, r1
 8001e34:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <ADC_process+0x5ec>)
 8001e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <ADC_process+0x5f0>)
 8001e40:	f7fe fbea 	bl	8000618 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4690      	mov	r8, r2
 8001e4a:	4699      	mov	r9, r3
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <ADC_process+0x5f4>)
 8001e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <ADC_process+0x5f8>)
 8001e58:	f7fe fbde 	bl	8000618 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4640      	mov	r0, r8
 8001e62:	4649      	mov	r1, r9
 8001e64:	f7fe fd02 	bl	800086c <__aeabi_ddiv>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe fbd2 	bl	8000618 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4950      	ldr	r1, [pc, #320]	; (8001fbc <ADC_process+0x5fc>)
 8001e7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ADC_volt[4]=ADC_middle[4]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <ADC_process+0x5e8>)
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb5e 	bl	8000544 <__aeabi_i2d>
 8001e88:	4604      	mov	r4, r0
 8001e8a:	460d      	mov	r5, r1
 8001e8c:	4b47      	ldr	r3, [pc, #284]	; (8001fac <ADC_process+0x5ec>)
 8001e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <ADC_process+0x5f0>)
 8001e98:	f7fe fbbe 	bl	8000618 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4690      	mov	r8, r2
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <ADC_process+0x5f4>)
 8001ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <ADC_process+0x5f8>)
 8001eb0:	f7fe fbb2 	bl	8000618 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4640      	mov	r0, r8
 8001eba:	4649      	mov	r1, r9
 8001ebc:	f7fe fcd6 	bl	800086c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe fba6 	bl	8000618 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	493a      	ldr	r1, [pc, #232]	; (8001fbc <ADC_process+0x5fc>)
 8001ed2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ADC_volt[5]=ADC_middle[5]*((RefVoltage*1000)/(8388608*Kdiv));
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <ADC_process+0x5e8>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb32 	bl	8000544 <__aeabi_i2d>
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	460d      	mov	r5, r1
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <ADC_process+0x5ec>)
 8001ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <ADC_process+0x5f0>)
 8001ef0:	f7fe fb92 	bl	8000618 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4690      	mov	r8, r2
 8001efa:	4699      	mov	r9, r3
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <ADC_process+0x5f4>)
 8001efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <ADC_process+0x5f8>)
 8001f08:	f7fe fb86 	bl	8000618 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4640      	mov	r0, r8
 8001f12:	4649      	mov	r1, r9
 8001f14:	f7fe fcaa 	bl	800086c <__aeabi_ddiv>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe fb7a 	bl	8000618 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4924      	ldr	r1, [pc, #144]	; (8001fbc <ADC_process+0x5fc>)
 8001f2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Заводской номер 001
	current_4_20mA = calculate_current(ADC_volt[0]);
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <ADC_process+0x5fc>)
 8001f30:	ed93 7b00 	vldr	d7, [r3]
 8001f34:	eeb0 0a47 	vmov.f32	s0, s14
 8001f38:	eef0 0a67 	vmov.f32	s1, s15
 8001f3c:	f003 f8fc 	bl	8005138 <calculate_current>
 8001f40:	eeb0 7a40 	vmov.f32	s14, s0
 8001f44:	eef0 7a60 	vmov.f32	s15, s1
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <ADC_process+0x600>)
 8001f4a:	ed83 7b00 	vstr	d7, [r3]
	voltage_measure = calculate_voltage(ADC_volt[1]);
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <ADC_process+0x5fc>)
 8001f50:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f54:	eeb0 0a47 	vmov.f32	s0, s14
 8001f58:	eef0 0a67 	vmov.f32	s1, s15
 8001f5c:	f003 f958 	bl	8005210 <calculate_voltage>
 8001f60:	eeb0 7a40 	vmov.f32	s14, s0
 8001f64:	eef0 7a60 	vmov.f32	s15, s1
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <ADC_process+0x604>)
 8001f6a:	ed83 7b00 	vstr	d7, [r3]

	Approximation_MC110(ADC_middle[3], ADC_middle[4]);
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <ADC_process+0x5e8>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <ADC_process+0x5e8>)
 8001f74:	6912      	ldr	r2, [r2, #16]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fd69 	bl	8004a50 <Approximation_MC110>
	Calculate(ADC_middle[3], ADC_middle[4]);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <ADC_process+0x5e8>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <ADC_process+0x5e8>)
 8001f84:	6912      	ldr	r2, [r2, #16]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fded 	bl	8004b68 <Calculate>

	sleep(100);
 8001f8e:	2064      	movs	r0, #100	; 0x64
 8001f90:	f001 f904 	bl	800319c <sleep>
}
 8001f94:	bf00      	nop
 8001f96:	3764      	adds	r7, #100	; 0x64
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000009a 	.word	0x2000009a
 8001fa4:	20000850 	.word	0x20000850
 8001fa8:	200020f0 	.word	0x200020f0
 8001fac:	20000088 	.word	0x20000088
 8001fb0:	408f4000 	.word	0x408f4000
 8001fb4:	20000090 	.word	0x20000090
 8001fb8:	41600000 	.word	0x41600000
 8001fbc:	200052c8 	.word	0x200052c8
 8001fc0:	200052c0 	.word	0x200052c0
 8001fc4:	20002178 	.word	0x20002178

08001fc8 <Buttons_init>:
//--------------------------------------------------------------------------------------------------------
//									Инициализация расширителя
//--------------------------------------------------------------------------------------------------------

void Buttons_init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af02      	add	r7, sp, #8
	uint8_t tx_buf[2], rx_buf[2];

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	483c      	ldr	r0, [pc, #240]	; (80020c4 <Buttons_init+0xfc>)
 8001fd4:	f008 f904 	bl	800a1e0 <HAL_GPIO_WritePin>


	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001fd8:	2303      	movs	r3, #3
 8001fda:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x18;
 8001fdc:	2318      	movs	r3, #24
 8001fde:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 1000);
 8001fe0:	1d3a      	adds	r2, r7, #4
 8001fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	4836      	ldr	r0, [pc, #216]	; (80020c8 <Buttons_init+0x100>)
 8001fee:	f008 f9c1 	bl	800a374 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT0; // rd from out-reg port0
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001ff6:	1d3a      	adds	r2, r7, #4
 8001ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2301      	movs	r3, #1
 8002000:	2140      	movs	r1, #64	; 0x40
 8002002:	4831      	ldr	r0, [pc, #196]	; (80020c8 <Buttons_init+0x100>)
 8002004:	f008 f9b6 	bl	800a374 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, &rx_buf[0], 0x02, 1000);
 8002008:	463a      	mov	r2, r7
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2302      	movs	r3, #2
 8002012:	2141      	movs	r1, #65	; 0x41
 8002014:	482c      	ldr	r0, [pc, #176]	; (80020c8 <Buttons_init+0x100>)
 8002016:	f008 faa1 	bl	800a55c <HAL_I2C_Master_Receive>

	tx_buf[0] = PI4IOE5V6416_REG_IO_DIR1; // set pin dir to be out
 800201a:	2307      	movs	r3, #7
 800201c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x07;
 800201e:	2307      	movs	r3, #7
 8002020:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002022:	1d3a      	adds	r2, r7, #4
 8002024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2302      	movs	r3, #2
 800202c:	2140      	movs	r1, #64	; 0x40
 800202e:	4826      	ldr	r0, [pc, #152]	; (80020c8 <Buttons_init+0x100>)
 8002030:	f008 f9a0 	bl	800a374 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD0; // pull-up port0
 8002034:	2348      	movs	r3, #72	; 0x48
 8002036:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002038:	23ff      	movs	r3, #255	; 0xff
 800203a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 800203c:	1d3a      	adds	r2, r7, #4
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2302      	movs	r3, #2
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	481f      	ldr	r0, [pc, #124]	; (80020c8 <Buttons_init+0x100>)
 800204a:	f008 f993 	bl	800a374 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD1; // pull-up port1
 800204e:	2349      	movs	r3, #73	; 0x49
 8002050:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002052:	23ff      	movs	r3, #255	; 0xff
 8002054:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002056:	1d3a      	adds	r2, r7, #4
 8002058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2302      	movs	r3, #2
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	4819      	ldr	r0, [pc, #100]	; (80020c8 <Buttons_init+0x100>)
 8002064:	f008 f986 	bl	800a374 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN0; // pull-up enable on port0
 8002068:	2346      	movs	r3, #70	; 0x46
 800206a:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002070:	1d3a      	adds	r2, r7, #4
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2302      	movs	r3, #2
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	4812      	ldr	r0, [pc, #72]	; (80020c8 <Buttons_init+0x100>)
 800207e:	f008 f979 	bl	800a374 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN1; // pull-up enable on port1
 8002082:	2347      	movs	r3, #71	; 0x47
 8002084:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002086:	23ff      	movs	r3, #255	; 0xff
 8002088:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 800208a:	1d3a      	adds	r2, r7, #4
 800208c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2302      	movs	r3, #2
 8002094:	2140      	movs	r1, #64	; 0x40
 8002096:	480c      	ldr	r0, [pc, #48]	; (80020c8 <Buttons_init+0x100>)
 8002098:	f008 f96c 	bl	800a374 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_MNTR0; // rd pins state port0
 800209c:	2300      	movs	r3, #0
 800209e:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 80020a0:	1d3a      	adds	r2, r7, #4
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2301      	movs	r3, #1
 80020aa:	2140      	movs	r1, #64	; 0x40
 80020ac:	4806      	ldr	r0, [pc, #24]	; (80020c8 <Buttons_init+0x100>)
 80020ae:	f008 f961 	bl	800a374 <HAL_I2C_Master_Transmit>

	LED(0,0,0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 f85e 	bl	8002178 <LED>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	48000400 	.word	0x48000400
 80020c8:	20007924 	.word	0x20007924

080020cc <BLueTooth_Configuration>:
//--------------------------------------------------------------------------------------------------------
//										Выбор режима работы блютус
//--------------------------------------------------------------------------------------------------------

void BLueTooth_Configuration(uint8_t state)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint8_t BlueTooth_State = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
	// Читаем порт P1
	aTxBuffer[0] = 0x01;
 80020da:	2301      	movs	r3, #1
 80020dc:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80020de:	f107 0210 	add.w	r2, r7, #16
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	4821      	ldr	r0, [pc, #132]	; (8002174 <BLueTooth_Configuration+0xa8>)
 80020ee:	f008 f941 	bl	800a374 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	2141      	movs	r1, #65	; 0x41
 8002100:	481c      	ldr	r0, [pc, #112]	; (8002174 <BLueTooth_Configuration+0xa8>)
 8002102:	f008 fa2b 	bl	800a55c <HAL_I2C_Master_Receive>
	BlueTooth_State=aRxBuffer[0];
 8002106:	7b3b      	ldrb	r3, [r7, #12]
 8002108:	75fb      	strb	r3, [r7, #23]

	// Очищаем P1_3 и P1_4
	BlueTooth_State&=0xE7;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	f023 0318 	bic.w	r3, r3, #24
 8002110:	75fb      	strb	r3, [r7, #23]
	// Записываем значение config
	BlueTooth_State|=(state<<4);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	b25a      	sxtb	r2, r3
 8002118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800211c:	4313      	orrs	r3, r2
 800211e:	b25b      	sxtb	r3, r3
 8002120:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8002122:	2303      	movs	r3, #3
 8002124:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 800212a:	f107 0210 	add.w	r2, r7, #16
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2302      	movs	r3, #2
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	480e      	ldr	r0, [pc, #56]	; (8002174 <BLueTooth_Configuration+0xa8>)
 800213a:	f008 f91b 	bl	800a374 <HAL_I2C_Master_Transmit>

	delay_ms(500);
 800213e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002142:	f001 f877 	bl	8003234 <delay_ms>

	// Reset
	BlueTooth_State|=(0x01<<5);
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 800214e:	2303      	movs	r3, #3
 8002150:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8002156:	f107 0210 	add.w	r2, r7, #16
 800215a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2302      	movs	r3, #2
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <BLueTooth_Configuration+0xa8>)
 8002166:	f008 f905 	bl	800a374 <HAL_I2C_Master_Transmit>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20007924 	.word	0x20007924

08002178 <LED>:
//--------------------------------------------------------------------------------------------------------
//											Управление светодиодом
//--------------------------------------------------------------------------------------------------------

void LED(uint8_t RED, uint8_t GREEN, uint8_t BLUE)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	460b      	mov	r3, r1
 8002184:	71bb      	strb	r3, [r7, #6]
 8002186:	4613      	mov	r3, r2
 8002188:	717b      	strb	r3, [r7, #5]
	uint8_t color=0;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[4];
	color=(RED<<7)+(GREEN<<6)+(BLUE<<5)+0x1F;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	b2da      	uxtb	r2, r3
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	b2da      	uxtb	r2, r3
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	331f      	adds	r3, #31
 80021aa:	73fb      	strb	r3, [r7, #15]
	color=~color;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	73fb      	strb	r3, [r7, #15]
	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 80021b2:	2303      	movs	r3, #3
 80021b4:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = color;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 10000);
 80021ba:	f107 0208 	add.w	r2, r7, #8
 80021be:	f242 7310 	movw	r3, #10000	; 0x2710
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2302      	movs	r3, #2
 80021c6:	2140      	movs	r1, #64	; 0x40
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <LED+0x60>)
 80021ca:	f008 f8d3 	bl	800a374 <HAL_I2C_Master_Transmit>
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20007924 	.word	0x20007924

080021dc <Button_S1_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										ON / OFF
//--------------------------------------------------------------------------------------------------------

void Button_S1_press_callback(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	if(OnOffCntr==-1)
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <Button_S1_press_callback+0x34>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d10f      	bne.n	800220c <Button_S1_press_callback+0x30>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==1)
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <Button_S1_press_callback+0x38>)
 80021f0:	f007 ffde 	bl	800a1b0 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <Button_S1_press_callback+0x30>
		{
			old_active_string=0xFF; OnOffCntr=on_off_time; screen=Off_screen;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <Button_S1_press_callback+0x3c>)
 80021fc:	22ff      	movs	r2, #255	; 0xff
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <Button_S1_press_callback+0x34>)
 8002202:	22c8      	movs	r2, #200	; 0xc8
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <Button_S1_press_callback+0x40>)
 8002208:	2203      	movs	r2, #3
 800220a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000004a 	.word	0x2000004a
 8002214:	48001000 	.word	0x48001000
 8002218:	200003a0 	.word	0x200003a0
 800221c:	2000004c 	.word	0x2000004c

08002220 <Button_S2_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										P zero
//--------------------------------------------------------------------------------------------------------

void Button_S2_press_callback(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <Button_S2_press_callback+0x70>)
 8002226:	2200      	movs	r2, #0
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <Button_S2_press_callback+0x70>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <Button_S2_press_callback+0x74>)
 8002230:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <Button_S2_press_callback+0x78>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <Button_S2_press_callback+0x78>)
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <Button_S2_press_callback+0x7c>)
 800223e:	701a      	strb	r2, [r3, #0]
	// Таррирование давления
	if(Pressure_zero==0)Pressure_zero=Pressure;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f7fe fc4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <Button_S2_press_callback+0x46>
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <Button_S2_press_callback+0x84>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	4910      	ldr	r1, [pc, #64]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002260:	e9c1 2300 	strd	r2, r3, [r1]
 8002264:	e006      	b.n	8002274 <Button_S2_press_callback+0x54>
	else Pressure_zero=0;
 8002266:	490e      	ldr	r1, [pc, #56]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9c1 2300 	strd	r2, r3, [r1]

	// Обнуление АЦП
	if(zero_ADC[0]==0)zero_ADC[0]=ADC_middle[3];
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <Button_S2_press_callback+0x66>
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <Button_S2_press_callback+0x8c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002282:	6013      	str	r3, [r2, #0]
		else zero_ADC[0]=0;

}
 8002284:	e002      	b.n	800228c <Button_S2_press_callback+0x6c>
		else zero_ADC[0]=0;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20001c46 	.word	0x20001c46
 8002294:	20001c44 	.word	0x20001c44
 8002298:	20001c49 	.word	0x20001c49
 800229c:	20001c48 	.word	0x20001c48
 80022a0:	20000878 	.word	0x20000878
 80022a4:	20002298 	.word	0x20002298
 80022a8:	20002280 	.word	0x20002280
 80022ac:	200020f0 	.word	0x200020f0

080022b0 <Button_S3_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E zero
//--------------------------------------------------------------------------------------------------------

void Button_S3_press_callback(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <Button_S3_press_callback+0x8c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <Button_S3_press_callback+0x8c>)
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <Button_S3_press_callback+0x90>)
 80022c0:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <Button_S3_press_callback+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <Button_S3_press_callback+0x94>)
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <Button_S3_press_callback+0x98>)
 80022ce:	701a      	strb	r2, [r3, #0]
	// Таррирование электрики
	if(Electric_zero==0)
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <Button_S3_press_callback+0x9c>)
 80022d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	f7fe fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <Button_S3_press_callback+0x78>
	switch(E_fun)
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <Button_S3_press_callback+0xa0>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d014      	beq.n	800231a <Button_S3_press_callback+0x6a>
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	dc21      	bgt.n	8002338 <Button_S3_press_callback+0x88>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <Button_S3_press_callback+0x4e>
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d007      	beq.n	800230c <Button_S3_press_callback+0x5c>
		case 0: Electric_zero=Test_Pressure; break;
		case 1: Electric_zero=current_4_20mA; break;
		case 2: Electric_zero=voltage_measure; break;
	}
	else Electric_zero=0;
}
 80022fc:	e01c      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 0: Electric_zero=Test_Pressure; break;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <Button_S3_press_callback+0xa4>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	4911      	ldr	r1, [pc, #68]	; (800234c <Button_S3_press_callback+0x9c>)
 8002306:	e9c1 2300 	strd	r2, r3, [r1]
 800230a:	e015      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 1: Electric_zero=current_4_20mA; break;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <Button_S3_press_callback+0xa8>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <Button_S3_press_callback+0x9c>)
 8002314:	e9c1 2300 	strd	r2, r3, [r1]
 8002318:	e00e      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 2: Electric_zero=voltage_measure; break;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <Button_S3_press_callback+0xac>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	490a      	ldr	r1, [pc, #40]	; (800234c <Button_S3_press_callback+0x9c>)
 8002322:	e9c1 2300 	strd	r2, r3, [r1]
 8002326:	e007      	b.n	8002338 <Button_S3_press_callback+0x88>
	else Electric_zero=0;
 8002328:	4908      	ldr	r1, [pc, #32]	; (800234c <Button_S3_press_callback+0x9c>)
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002336:	e7ff      	b.n	8002338 <Button_S3_press_callback+0x88>
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20001c46 	.word	0x20001c46
 8002340:	20001c44 	.word	0x20001c44
 8002344:	20001c49 	.word	0x20001c49
 8002348:	20001c48 	.word	0x20001c48
 800234c:	20000880 	.word	0x20000880
 8002350:	200008a0 	.word	0x200008a0
 8002354:	200022a0 	.word	0x200022a0
 8002358:	200052c0 	.word	0x200052c0
 800235c:	20002178 	.word	0x20002178

08002360 <Button_S4_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											ENTER
//--------------------------------------------------------------------------------------------------------

void Button_S4_press_callback(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	 switch(screen)
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <Button_S4_press_callback+0x6c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3b04      	subs	r3, #4
 800236a:	2b05      	cmp	r3, #5
 800236c:	d81d      	bhi.n	80023aa <Button_S4_press_callback+0x4a>
 800236e:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <Button_S4_press_callback+0x14>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	08002393 	.word	0x08002393
 8002378:	080023a5 	.word	0x080023a5
 800237c:	0800239f 	.word	0x0800239f
 8002380:	080023ab 	.word	0x080023ab
 8002384:	0800238d 	.word	0x0800238d
 8002388:	08002399 	.word	0x08002399
	 {
	 	 case Parameter_screen: Parameter_screen_S4(); break;
 800238c:	f016 fa70 	bl	8018870 <Parameter_screen_S4>
 8002390:	e00b      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case Option_screen: Option_screen_S4(); break;
 8002392:	f016 fb3b 	bl	8018a0c <Option_screen_S4>
 8002396:	e008      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case RTC_screen: RTC_screen_S4(); break;
 8002398:	f015 fef2 	bl	8018180 <RTC_screen_S4>
 800239c:	e005      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case ADC_options_screen: ADC_options_screen_S4(); break;
 800239e:	f014 fbd9 	bl	8016b54 <ADC_options_screen_S4>
 80023a2:	e002      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case Display_options_screen: Display_options_screen_S4(); break;
 80023a4:	f014 fed8 	bl	8017158 <Display_options_screen_S4>
 80023a8:	bf00      	nop
	 }
	 off_sec=off_min=0;
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <Button_S4_press_callback+0x70>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <Button_S4_press_callback+0x70>)
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <Button_S4_press_callback+0x74>)
 80023b6:	801a      	strh	r2, [r3, #0]
	 light_sec=light_min=0;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <Button_S4_press_callback+0x78>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <Button_S4_press_callback+0x78>)
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <Button_S4_press_callback+0x7c>)
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000004c 	.word	0x2000004c
 80023d0:	20001c46 	.word	0x20001c46
 80023d4:	20001c44 	.word	0x20001c44
 80023d8:	20001c49 	.word	0x20001c49
 80023dc:	20001c48 	.word	0x20001c48

080023e0 <Button_S5_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											FORWARD
//--------------------------------------------------------------------------------------------------------

void Button_S5_press_callback(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	switch(screen)
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <Button_S5_press_callback+0x78>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3b05      	subs	r3, #5
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	d824      	bhi.n	8002438 <Button_S5_press_callback+0x58>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <Button_S5_press_callback+0x14>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800241b 	.word	0x0800241b
 80023f8:	08002415 	.word	0x08002415
 80023fc:	08002421 	.word	0x08002421
 8002400:	08002439 	.word	0x08002439
 8002404:	08002427 	.word	0x08002427
 8002408:	0800242d 	.word	0x0800242d
 800240c:	08002439 	.word	0x08002439
 8002410:	08002433 	.word	0x08002433
	{
		case ADC_options_screen: ADC_options_screen_S5(); break;
 8002414:	f014 fc70 	bl	8016cf8 <ADC_options_screen_S5>
 8002418:	e00e      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S5(); break;
 800241a:	f014 ff09 	bl	8017230 <Display_options_screen_S5>
 800241e:	e00b      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S5(); break;
 8002420:	f015 f984 	bl	801772c <Measure_options_screen_S5>
 8002424:	e008      	b.n	8002438 <Button_S5_press_callback+0x58>
		case RTC_screen: RTC_screen_S5(); break;
 8002426:	f015 fd97 	bl	8017f58 <RTC_screen_S5>
 800242a:	e005      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S5(); break;
 800242c:	f014 fd42 	bl	8016eb4 <Auto_Off_option_screen_S5>
 8002430:	e002      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S5(); break;
 8002432:	f016 f8dd 	bl	80185f0 <Logging_options_screen_S5>
 8002436:	bf00      	nop
	}
	off_sec=off_min=0;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <Button_S5_press_callback+0x7c>)
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <Button_S5_press_callback+0x7c>)
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <Button_S5_press_callback+0x80>)
 8002444:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <Button_S5_press_callback+0x84>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <Button_S5_press_callback+0x84>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <Button_S5_press_callback+0x88>)
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000004c 	.word	0x2000004c
 800245c:	20001c46 	.word	0x20001c46
 8002460:	20001c44 	.word	0x20001c44
 8002464:	20001c49 	.word	0x20001c49
 8002468:	20001c48 	.word	0x20001c48

0800246c <Button_S6_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											UP
//--------------------------------------------------------------------------------------------------------

void Button_S6_press_callback(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	switch(screen)
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <Button_S6_press_callback+0x84>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3b04      	subs	r3, #4
 8002476:	2b08      	cmp	r3, #8
 8002478:	d829      	bhi.n	80024ce <Button_S6_press_callback+0x62>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <Button_S6_press_callback+0x14>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	080024ab 	.word	0x080024ab
 8002484:	080024b7 	.word	0x080024b7
 8002488:	080024b1 	.word	0x080024b1
 800248c:	080024bd 	.word	0x080024bd
 8002490:	080024a5 	.word	0x080024a5
 8002494:	080024c3 	.word	0x080024c3
 8002498:	080024cf 	.word	0x080024cf
 800249c:	080024cf 	.word	0x080024cf
 80024a0:	080024c9 	.word	0x080024c9
	{
		case Parameter_screen: Parameter_screen_S6(); break;
 80024a4:	f016 fa40 	bl	8018928 <Parameter_screen_S6>
 80024a8:	e011      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Option_screen: Option_screen_S6(); break;
 80024aa:	f016 fa99 	bl	80189e0 <Option_screen_S6>
 80024ae:	e00e      	b.n	80024ce <Button_S6_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S6(); break;
 80024b0:	f014 fb12 	bl	8016ad8 <ADC_options_screen_S6>
 80024b4:	e00b      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S6(); break;
 80024b6:	f014 fe27 	bl	8017108 <Display_options_screen_S6>
 80024ba:	e008      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S6(); break;
 80024bc:	f015 f892 	bl	80175e4 <Measure_options_screen_S6>
 80024c0:	e005      	b.n	80024ce <Button_S6_press_callback+0x62>
		case RTC_screen: RTC_screen_S6(); break;
 80024c2:	f015 fd71 	bl	8017fa8 <RTC_screen_S6>
 80024c6:	e002      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S6(); break;
 80024c8:	f015 ffde 	bl	8018488 <Logging_options_screen_S6>
 80024cc:	bf00      	nop
	}
	off_sec=off_min=0;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <Button_S6_press_callback+0x88>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <Button_S6_press_callback+0x88>)
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <Button_S6_press_callback+0x8c>)
 80024da:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <Button_S6_press_callback+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <Button_S6_press_callback+0x90>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <Button_S6_press_callback+0x94>)
 80024e8:	701a      	strb	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000004c 	.word	0x2000004c
 80024f4:	20001c46 	.word	0x20001c46
 80024f8:	20001c44 	.word	0x20001c44
 80024fc:	20001c49 	.word	0x20001c49
 8002500:	20001c48 	.word	0x20001c48

08002504 <Button_S7_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										DOWN
//--------------------------------------------------------------------------------------------------------

void Button_S7_press_callback(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	switch(screen)
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <Button_S7_press_callback+0x84>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3b04      	subs	r3, #4
 800250e:	2b08      	cmp	r3, #8
 8002510:	d829      	bhi.n	8002566 <Button_S7_press_callback+0x62>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <Button_S7_press_callback+0x14>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002543 	.word	0x08002543
 800251c:	0800254f 	.word	0x0800254f
 8002520:	08002549 	.word	0x08002549
 8002524:	08002555 	.word	0x08002555
 8002528:	0800253d 	.word	0x0800253d
 800252c:	0800255b 	.word	0x0800255b
 8002530:	08002567 	.word	0x08002567
 8002534:	08002567 	.word	0x08002567
 8002538:	08002561 	.word	0x08002561
	{
		case Parameter_screen: Parameter_screen_S7(); break;
 800253c:	f016 f9dc 	bl	80188f8 <Parameter_screen_S7>
 8002540:	e011      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Option_screen: Option_screen_S7(); break;
 8002542:	f016 fa35 	bl	80189b0 <Option_screen_S7>
 8002546:	e00e      	b.n	8002566 <Button_S7_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S7(); break;
 8002548:	f014 fada 	bl	8016b00 <ADC_options_screen_S7>
 800254c:	e00b      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S7(); break;
 800254e:	f014 fdef 	bl	8017130 <Display_options_screen_S7>
 8002552:	e008      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S7(); break;
 8002554:	f015 f85a 	bl	801760c <Measure_options_screen_S7>
 8002558:	e005      	b.n	8002566 <Button_S7_press_callback+0x62>
		case RTC_screen: RTC_screen_S7(); break;
 800255a:	f015 fd9b 	bl	8018094 <RTC_screen_S7>
 800255e:	e002      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S7(); break;
 8002560:	f015 ffa6 	bl	80184b0 <Logging_options_screen_S7>
 8002564:	bf00      	nop
	}
	off_sec=off_min=0;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <Button_S7_press_callback+0x88>)
 8002568:	2200      	movs	r2, #0
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <Button_S7_press_callback+0x88>)
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <Button_S7_press_callback+0x8c>)
 8002572:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <Button_S7_press_callback+0x90>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <Button_S7_press_callback+0x90>)
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <Button_S7_press_callback+0x94>)
 8002580:	701a      	strb	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000004c 	.word	0x2000004c
 800258c:	20001c46 	.word	0x20001c46
 8002590:	20001c44 	.word	0x20001c44
 8002594:	20001c49 	.word	0x20001c49
 8002598:	20001c48 	.word	0x20001c48

0800259c <Button_S8_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											BACKWARD
//--------------------------------------------------------------------------------------------------------

void Button_S8_press_callback(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	switch(screen)
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <Button_S8_press_callback+0x78>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	3b05      	subs	r3, #5
 80025a6:	2b07      	cmp	r3, #7
 80025a8:	d824      	bhi.n	80025f4 <Button_S8_press_callback+0x58>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <Button_S8_press_callback+0x14>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025d7 	.word	0x080025d7
 80025b4:	080025d1 	.word	0x080025d1
 80025b8:	080025dd 	.word	0x080025dd
 80025bc:	080025f5 	.word	0x080025f5
 80025c0:	080025e3 	.word	0x080025e3
 80025c4:	080025e9 	.word	0x080025e9
 80025c8:	080025f5 	.word	0x080025f5
 80025cc:	080025ef 	.word	0x080025ef
	{
		case ADC_options_screen: ADC_options_screen_S8(); break;
 80025d0:	f014 fb16 	bl	8016c00 <ADC_options_screen_S8>
 80025d4:	e00e      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S8(); break;
 80025d6:	f014 fdeb 	bl	80171b0 <Display_options_screen_S8>
 80025da:	e00b      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S8(); break;
 80025dc:	f015 f840 	bl	8017660 <Measure_options_screen_S8>
 80025e0:	e008      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case RTC_screen: RTC_screen_S8(); break;
 80025e2:	f015 fccd 	bl	8017f80 <RTC_screen_S8>
 80025e6:	e005      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S8(); break;
 80025e8:	f014 fc50 	bl	8016e8c <Auto_Off_option_screen_S8>
 80025ec:	e002      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S8(); break;
 80025ee:	f015 ff89 	bl	8018504 <Logging_options_screen_S8>
 80025f2:	bf00      	nop
	}
	off_sec=off_min=0;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <Button_S8_press_callback+0x7c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <Button_S8_press_callback+0x7c>)
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <Button_S8_press_callback+0x80>)
 8002600:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <Button_S8_press_callback+0x84>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <Button_S8_press_callback+0x84>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <Button_S8_press_callback+0x88>)
 800260e:	701a      	strb	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000004c 	.word	0x2000004c
 8002618:	20001c46 	.word	0x20001c46
 800261c:	20001c44 	.word	0x20001c44
 8002620:	20001c49 	.word	0x20001c49
 8002624:	20001c48 	.word	0x20001c48

08002628 <Button_S9_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											MENU
//--------------------------------------------------------------------------------------------------------

void Button_S9_press_callback(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	switch(screen)
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <Button_S9_press_callback+0xa0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	3b01      	subs	r3, #1
 8002632:	2b0b      	cmp	r3, #11
 8002634:	d838      	bhi.n	80026a8 <Button_S9_press_callback+0x80>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <Button_S9_press_callback+0x14>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800268b 	.word	0x0800268b
 8002640:	080026a9 	.word	0x080026a9
 8002644:	080026a9 	.word	0x080026a9
 8002648:	08002673 	.word	0x08002673
 800264c:	0800267f 	.word	0x0800267f
 8002650:	08002679 	.word	0x08002679
 8002654:	08002685 	.word	0x08002685
 8002658:	0800266d 	.word	0x0800266d
 800265c:	08002691 	.word	0x08002691
 8002660:	08002697 	.word	0x08002697
 8002664:	0800269d 	.word	0x0800269d
 8002668:	080026a3 	.word	0x080026a3
	{
		case Parameter_screen: Parameter_screen_S9(); break;
 800266c:	f016 f8ea 	bl	8018844 <Parameter_screen_S9>
 8002670:	e01a      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Option_screen: Option_screen_S9(); break;
 8002672:	f016 f98b 	bl	801898c <Option_screen_S9>
 8002676:	e017      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case ADC_options_screen: ADC_options_screen_S9(); break;
 8002678:	f014 fa56 	bl	8016b28 <ADC_options_screen_S9>
 800267c:	e014      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Display_options_screen: Display_options_screen_S9(); break;
 800267e:	f014 fd2d 	bl	80170dc <Display_options_screen_S9>
 8002682:	e011      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Measure_options_screen: Measure_options_screen_S9(); break;
 8002684:	f014 ffd6 	bl	8017634 <Measure_options_screen_S9>
 8002688:	e00e      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Main_screen: Main_screen_S9(); break;
 800268a:	f015 f9ab 	bl	80179e4 <Main_screen_S9>
 800268e:	e00b      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case RTC_screen: RTC_screen_S9(); break;
 8002690:	f015 fc4c 	bl	8017f2c <RTC_screen_S9>
 8002694:	e008      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Auto_Off_option_screen: Auto_Off_option_screen_S9(); break;
 8002696:	f014 fbe3 	bl	8016e60 <Auto_Off_option_screen_S9>
 800269a:	e005      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case About_options_screen: About_options_screen_S9(); break;
 800269c:	f015 fe0c 	bl	80182b8 <About_options_screen_S9>
 80026a0:	e002      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Logging_options_screen: Logging_options_screen_S9(); break;
 80026a2:	f015 ff19 	bl	80184d8 <Logging_options_screen_S9>
 80026a6:	bf00      	nop
	}
	off_sec=off_min=0;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <Button_S9_press_callback+0xa4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	801a      	strh	r2, [r3, #0]
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <Button_S9_press_callback+0xa4>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <Button_S9_press_callback+0xa8>)
 80026b4:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <Button_S9_press_callback+0xac>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <Button_S9_press_callback+0xac>)
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <Button_S9_press_callback+0xb0>)
 80026c2:	701a      	strb	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	2000004c 	.word	0x2000004c
 80026cc:	20001c46 	.word	0x20001c46
 80026d0:	20001c44 	.word	0x20001c44
 80026d4:	20001c49 	.word	0x20001c49
 80026d8:	20001c48 	.word	0x20001c48

080026dc <Button_S10_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E func
//--------------------------------------------------------------------------------------------------------

void Button_S10_press_callback(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <Button_S10_press_callback+0x54>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <Button_S10_press_callback+0x54>)
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <Button_S10_press_callback+0x58>)
 80026ec:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <Button_S10_press_callback+0x5c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <Button_S10_press_callback+0x5c>)
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <Button_S10_press_callback+0x60>)
 80026fa:	701a      	strb	r2, [r3, #0]
	// Переключение отображения второй строки
	if(++E_fun==3)E_fun=0;
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <Button_S10_press_callback+0x64>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <Button_S10_press_callback+0x64>)
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <Button_S10_press_callback+0x64>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d102      	bne.n	8002716 <Button_S10_press_callback+0x3a>
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <Button_S10_press_callback+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
	Electric_zero=0;
 8002716:	490b      	ldr	r1, [pc, #44]	; (8002744 <Button_S10_press_callback+0x68>)
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20001c46 	.word	0x20001c46
 8002734:	20001c44 	.word	0x20001c44
 8002738:	20001c49 	.word	0x20001c49
 800273c:	20001c48 	.word	0x20001c48
 8002740:	200008a0 	.word	0x200008a0
 8002744:	20000880 	.word	0x20000880

08002748 <Button_S11_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											P units
//--------------------------------------------------------------------------------------------------------

void Button_S11_press_callback(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	if(screen==Main_screen) screen=Test_screen;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <Button_S11_press_callback+0x50>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d103      	bne.n	800275c <Button_S11_press_callback+0x14>
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <Button_S11_press_callback+0x50>)
 8002756:	2202      	movs	r2, #2
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e00a      	b.n	8002772 <Button_S11_press_callback+0x2a>
	else if(screen==Test_screen)screen=ADC_options_screen;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <Button_S11_press_callback+0x50>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d103      	bne.n	800276c <Button_S11_press_callback+0x24>
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <Button_S11_press_callback+0x50>)
 8002766:	2206      	movs	r2, #6
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e002      	b.n	8002772 <Button_S11_press_callback+0x2a>
	else screen=Main_screen;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <Button_S11_press_callback+0x50>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]

	off_sec=off_min=0;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <Button_S11_press_callback+0x54>)
 8002774:	2200      	movs	r2, #0
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <Button_S11_press_callback+0x54>)
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <Button_S11_press_callback+0x58>)
 800277e:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <Button_S11_press_callback+0x5c>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <Button_S11_press_callback+0x5c>)
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <Button_S11_press_callback+0x60>)
 800278c:	701a      	strb	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	2000004c 	.word	0x2000004c
 800279c:	20001c46 	.word	0x20001c46
 80027a0:	20001c44 	.word	0x20001c44
 80027a4:	20001c49 	.word	0x20001c49
 80027a8:	20001c48 	.word	0x20001c48

080027ac <Buttons_process>:
//--------------------------------------------------------------------------------------------------------
//											Обработчик кнопок
//--------------------------------------------------------------------------------------------------------

void Buttons_process(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
	uint16_t keypad = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	81fb      	strh	r3, [r7, #14]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	aTxBuffer[0] = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer, 1, 1000);
 80027ba:	f107 0208 	add.w	r2, r7, #8
 80027be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	488b      	ldr	r0, [pc, #556]	; (80029f8 <Buttons_process+0x24c>)
 80027ca:	f007 fdd3 	bl	800a374 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80027ce:	1d3a      	adds	r2, r7, #4
 80027d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	2141      	movs	r1, #65	; 0x41
 80027da:	4887      	ldr	r0, [pc, #540]	; (80029f8 <Buttons_process+0x24c>)
 80027dc:	f007 febe 	bl	800a55c <HAL_I2C_Master_Receive>
	keypad=aRxBuffer[0];
 80027e0:	793b      	ldrb	r3, [r7, #4]
 80027e2:	81fb      	strh	r3, [r7, #14]
	keypad<<=8;
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	81fb      	strh	r3, [r7, #14]
	aTxBuffer[0] = 0x01;
 80027ea:	2301      	movs	r3, #1
 80027ec:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer, 1, 1000);
 80027ee:	f107 0208 	add.w	r2, r7, #8
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	2140      	movs	r1, #64	; 0x40
 80027fc:	487e      	ldr	r0, [pc, #504]	; (80029f8 <Buttons_process+0x24c>)
 80027fe:	f007 fdb9 	bl	800a374 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002802:	1d3a      	adds	r2, r7, #4
 8002804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	2141      	movs	r1, #65	; 0x41
 800280e:	487a      	ldr	r0, [pc, #488]	; (80029f8 <Buttons_process+0x24c>)
 8002810:	f007 fea4 	bl	800a55c <HAL_I2C_Master_Receive>
	keypad+=(aRxBuffer[0]&0x07);
 8002814:	793b      	ldrb	r3, [r7, #4]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	b29a      	uxth	r2, r3
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	4413      	add	r3, r2
 8002822:	81fb      	strh	r3, [r7, #14]

	keypad_code=keypad;
 8002824:	4a75      	ldr	r2, [pc, #468]	; (80029fc <Buttons_process+0x250>)
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	8013      	strh	r3, [r2, #0]
	switch(keypad)
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	f64f 7207 	movw	r2, #65287	; 0xff07
 8002830:	4293      	cmp	r3, r2
 8002832:	f000 80bb 	beq.w	80029ac <Buttons_process+0x200>
 8002836:	f64f 7207 	movw	r2, #65287	; 0xff07
 800283a:	4293      	cmp	r3, r2
 800283c:	f300 80c0 	bgt.w	80029c0 <Buttons_process+0x214>
 8002840:	f64f 6206 	movw	r2, #65030	; 0xfe06
 8002844:	4293      	cmp	r3, r2
 8002846:	f000 8093 	beq.w	8002970 <Buttons_process+0x1c4>
 800284a:	f64f 6206 	movw	r2, #65030	; 0xfe06
 800284e:	4293      	cmp	r3, r2
 8002850:	f300 80b6 	bgt.w	80029c0 <Buttons_process+0x214>
 8002854:	f64f 6205 	movw	r2, #65029	; 0xfe05
 8002858:	4293      	cmp	r3, r2
 800285a:	f000 8093 	beq.w	8002984 <Buttons_process+0x1d8>
 800285e:	f64f 6205 	movw	r2, #65029	; 0xfe05
 8002862:	4293      	cmp	r3, r2
 8002864:	f300 80ac 	bgt.w	80029c0 <Buttons_process+0x214>
 8002868:	f64f 6203 	movw	r2, #65027	; 0xfe03
 800286c:	4293      	cmp	r3, r2
 800286e:	f000 8093 	beq.w	8002998 <Buttons_process+0x1ec>
 8002872:	f64f 6203 	movw	r2, #65027	; 0xfe03
 8002876:	4293      	cmp	r3, r2
 8002878:	f300 80a2 	bgt.w	80029c0 <Buttons_process+0x214>
 800287c:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002880:	4293      	cmp	r3, r2
 8002882:	d02f      	beq.n	80028e4 <Buttons_process+0x138>
 8002884:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002888:	4293      	cmp	r3, r2
 800288a:	f300 8099 	bgt.w	80029c0 <Buttons_process+0x214>
 800288e:	f64f 2207 	movw	r2, #64007	; 0xfa07
 8002892:	4293      	cmp	r3, r2
 8002894:	d030      	beq.n	80028f8 <Buttons_process+0x14c>
 8002896:	f64f 2207 	movw	r2, #64007	; 0xfa07
 800289a:	4293      	cmp	r3, r2
 800289c:	f300 8090 	bgt.w	80029c0 <Buttons_process+0x214>
 80028a0:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <Buttons_process+0x160>
 80028a8:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028ac:	4293      	cmp	r3, r2
 80028ae:	f300 8087 	bgt.w	80029c0 <Buttons_process+0x214>
 80028b2:	f64e 6207 	movw	r2, #60935	; 0xee07
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d032      	beq.n	8002920 <Buttons_process+0x174>
 80028ba:	f64e 6207 	movw	r2, #60935	; 0xee07
 80028be:	4293      	cmp	r3, r2
 80028c0:	dc7e      	bgt.n	80029c0 <Buttons_process+0x214>
 80028c2:	f64d 6207 	movw	r2, #56839	; 0xde07
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d034      	beq.n	8002934 <Buttons_process+0x188>
 80028ca:	f64d 6207 	movw	r2, #56839	; 0xde07
 80028ce:	4293      	cmp	r3, r2
 80028d0:	dc76      	bgt.n	80029c0 <Buttons_process+0x214>
 80028d2:	f647 6207 	movw	r2, #32263	; 0x7e07
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d040      	beq.n	800295c <Buttons_process+0x1b0>
 80028da:	f64b 6207 	movw	r2, #48647	; 0xbe07
 80028de:	4293      	cmp	r3, r2
 80028e0:	d032      	beq.n	8002948 <Buttons_process+0x19c>
 80028e2:	e06d      	b.n	80029c0 <Buttons_process+0x214>
	{
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 80028e4:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <Buttons_process+0x254>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d170      	bne.n	80029ce <Buttons_process+0x222>
 80028ec:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <Buttons_process+0x254>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	f7ff fc95 	bl	8002220 <Button_S2_press_callback>
 80028f6:	e06a      	b.n	80029ce <Buttons_process+0x222>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <Buttons_process+0x254>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d168      	bne.n	80029d2 <Buttons_process+0x226>
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <Buttons_process+0x254>)
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	f7ff fcd3 	bl	80022b0 <Button_S3_press_callback>
 800290a:	e062      	b.n	80029d2 <Buttons_process+0x226>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 800290c:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <Buttons_process+0x254>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d160      	bne.n	80029d6 <Buttons_process+0x22a>
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <Buttons_process+0x254>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	f7ff fd21 	bl	8002360 <Button_S4_press_callback>
 800291e:	e05a      	b.n	80029d6 <Buttons_process+0x22a>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <Buttons_process+0x254>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d158      	bne.n	80029da <Buttons_process+0x22e>
 8002928:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <Buttons_process+0x254>)
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	f7ff fd57 	bl	80023e0 <Button_S5_press_callback>
 8002932:	e052      	b.n	80029da <Buttons_process+0x22e>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <Buttons_process+0x254>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d150      	bne.n	80029de <Buttons_process+0x232>
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <Buttons_process+0x254>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	f7ff fd93 	bl	800246c <Button_S6_press_callback>
 8002946:	e04a      	b.n	80029de <Buttons_process+0x232>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <Buttons_process+0x254>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d148      	bne.n	80029e2 <Buttons_process+0x236>
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <Buttons_process+0x254>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	f7ff fdd5 	bl	8002504 <Button_S7_press_callback>
 800295a:	e042      	b.n	80029e2 <Buttons_process+0x236>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <Buttons_process+0x254>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d140      	bne.n	80029e6 <Buttons_process+0x23a>
 8002964:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <Buttons_process+0x254>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	f7ff fe17 	bl	800259c <Button_S8_press_callback>
 800296e:	e03a      	b.n	80029e6 <Buttons_process+0x23a>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <Buttons_process+0x254>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d138      	bne.n	80029ea <Buttons_process+0x23e>
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <Buttons_process+0x254>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	f7ff fe53 	bl	8002628 <Button_S9_press_callback>
 8002982:	e032      	b.n	80029ea <Buttons_process+0x23e>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <Buttons_process+0x254>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d130      	bne.n	80029ee <Buttons_process+0x242>
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <Buttons_process+0x254>)
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	f7ff fea3 	bl	80026dc <Button_S10_press_callback>
 8002996:	e02a      	b.n	80029ee <Buttons_process+0x242>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <Buttons_process+0x254>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d128      	bne.n	80029f2 <Buttons_process+0x246>
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <Buttons_process+0x254>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	f7ff fecf 	bl	8002748 <Button_S11_press_callback>
 80029aa:	e022      	b.n	80029f2 <Buttons_process+0x246>
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <Buttons_process+0x254>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d129      	bne.n	8002a08 <Buttons_process+0x25c>
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <Buttons_process+0x254>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	f7ff fc0f 	bl	80021dc <Button_S1_press_callback>
 80029be:	e023      	b.n	8002a08 <Buttons_process+0x25c>
		default: buttons_press=Button_State=0; break;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <Buttons_process+0x254>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <Buttons_process+0x258>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	801a      	strh	r2, [r3, #0]
 80029cc:	e01d      	b.n	8002a0a <Buttons_process+0x25e>
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 80029ce:	bf00      	nop
 80029d0:	e01b      	b.n	8002a0a <Buttons_process+0x25e>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 80029d2:	bf00      	nop
 80029d4:	e019      	b.n	8002a0a <Buttons_process+0x25e>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 80029d6:	bf00      	nop
 80029d8:	e017      	b.n	8002a0a <Buttons_process+0x25e>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 80029da:	bf00      	nop
 80029dc:	e015      	b.n	8002a0a <Buttons_process+0x25e>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 80029de:	bf00      	nop
 80029e0:	e013      	b.n	8002a0a <Buttons_process+0x25e>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 80029e2:	bf00      	nop
 80029e4:	e011      	b.n	8002a0a <Buttons_process+0x25e>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 80029e6:	bf00      	nop
 80029e8:	e00f      	b.n	8002a0a <Buttons_process+0x25e>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 80029ea:	bf00      	nop
 80029ec:	e00d      	b.n	8002a0a <Buttons_process+0x25e>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 80029ee:	bf00      	nop
 80029f0:	e00b      	b.n	8002a0a <Buttons_process+0x25e>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 80029f2:	bf00      	nop
 80029f4:	e009      	b.n	8002a0a <Buttons_process+0x25e>
 80029f6:	bf00      	nop
 80029f8:	20007924 	.word	0x20007924
 80029fc:	2000085a 	.word	0x2000085a
 8002a00:	20000854 	.word	0x20000854
 8002a04:	20000856 	.word	0x20000856
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002a08:	bf00      	nop
	}

	if((Button_State==1)&&(buttons_press<20))buttons_press++;
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <Buttons_process+0x31c>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d109      	bne.n	8002a26 <Buttons_process+0x27a>
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <Buttons_process+0x320>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	2b13      	cmp	r3, #19
 8002a18:	d805      	bhi.n	8002a26 <Buttons_process+0x27a>
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <Buttons_process+0x320>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <Buttons_process+0x320>)
 8002a24:	801a      	strh	r2, [r3, #0]

	// Задержка на обработку кнопки включения
	if(OnOffCntr>on_off_time){ if(--OnOffCntr==on_off_time) OnOffCntr=-1; }
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <Buttons_process+0x324>)
 8002a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2c:	2bc8      	cmp	r3, #200	; 0xc8
 8002a2e:	dd11      	ble.n	8002a54 <Buttons_process+0x2a8>
 8002a30:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <Buttons_process+0x324>)
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <Buttons_process+0x324>)
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <Buttons_process+0x324>)
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a48:	2bc8      	cmp	r3, #200	; 0xc8
 8002a4a:	d103      	bne.n	8002a54 <Buttons_process+0x2a8>
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <Buttons_process+0x324>)
 8002a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a52:	801a      	strh	r2, [r3, #0]
	if((OnOffCntr>0)&&(OnOffCntr<=on_off_time)) if(--OnOffCntr==0)
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <Buttons_process+0x324>)
 8002a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	dd2c      	ble.n	8002ab8 <Buttons_process+0x30c>
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <Buttons_process+0x324>)
 8002a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a64:	2bc8      	cmp	r3, #200	; 0xc8
 8002a66:	dc27      	bgt.n	8002ab8 <Buttons_process+0x30c>
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <Buttons_process+0x324>)
 8002a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <Buttons_process+0x324>)
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <Buttons_process+0x324>)
 8002a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d119      	bne.n	8002ab8 <Buttons_process+0x30c>
	{
		// Выключение
		TURN_OFF_ADC_POWER();
 8002a84:	2200      	movs	r2, #0
 8002a86:	2140      	movs	r1, #64	; 0x40
 8002a88:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <Buttons_process+0x328>)
 8002a8a:	f007 fba9 	bl	800a1e0 <HAL_GPIO_WritePin>
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a94:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <Buttons_process+0x32c>)
 8002a96:	f007 fba3 	bl	800a1e0 <HAL_GPIO_WritePin>
		delay_ms(200);
 8002a9a:	20c8      	movs	r0, #200	; 0xc8
 8002a9c:	f000 fbca 	bl	8003234 <delay_ms>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa6:	480b      	ldr	r0, [pc, #44]	; (8002ad4 <Buttons_process+0x328>)
 8002aa8:	f007 fb9a 	bl	800a1e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LCD_reserv_GPIO_Port, EN_LCD_reserv_Pin, GPIO_PIN_RESET);
 8002aac:	2200      	movs	r2, #0
 8002aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ab2:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <Buttons_process+0x32c>)
 8002ab4:	f007 fb94 	bl	800a1e0 <HAL_GPIO_WritePin>
	}

	sleep(5);
 8002ab8:	2005      	movs	r0, #5
 8002aba:	f000 fb6f 	bl	800319c <sleep>
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000854 	.word	0x20000854
 8002acc:	20000856 	.word	0x20000856
 8002ad0:	2000004a 	.word	0x2000004a
 8002ad4:	48000800 	.word	0x48000800
 8002ad8:	48000c00 	.word	0x48000c00

08002adc <Buttons_timer>:
//--------------------------------------------------------------------------------------------------------
//											Таймер долгого нажатия
//--------------------------------------------------------------------------------------------------------

void Buttons_timer(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
	if(buttons_press==20)
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <Buttons_timer+0x44>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	2b14      	cmp	r3, #20
 8002ae6:	d112      	bne.n	8002b0e <Buttons_timer+0x32>
	{
		if(++buttons_ms>=1000)
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <Buttons_timer+0x48>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <Buttons_timer+0x48>)
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <Buttons_timer+0x48>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002afc:	d30a      	bcc.n	8002b14 <Buttons_timer+0x38>
		{
			buttons_ms=1000-100;
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <Buttons_timer+0x48>)
 8002b00:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002b04:	801a      	strh	r2, [r3, #0]
			Button_State=0;
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <Buttons_timer+0x4c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
		}
	}
	else {buttons_ms=0;}
}
 8002b0c:	e002      	b.n	8002b14 <Buttons_timer+0x38>
	else {buttons_ms=0;}
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <Buttons_timer+0x48>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	801a      	strh	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000856 	.word	0x20000856
 8002b24:	20000858 	.word	0x20000858
 8002b28:	20000854 	.word	0x20000854

08002b2c <DrawImage>:
const char *PGA_name[9]={ "PGA OFF", "PGA 1", "PGA 2", "PGA 4", "PGA 8", "PGA 16", "PGA 32", "PGA 64", "PGA 128" };



void DrawImage(const uint8_t *image, uint16_t x, uint16_t y, uint8_t inverse)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	813b      	strh	r3, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	71fb      	strb	r3, [r7, #7]
	uint16_t xi = 0, yi = 0, bitnum=0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	83fb      	strh	r3, [r7, #30]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	83bb      	strh	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	837b      	strh	r3, [r7, #26]
	uint8_t color;
	uint16_t SIZE_X, SIZE_Y;
	// Размер картинки
	SIZE_X = (uint16_t)(((image[0]<<8) + image[1])>>3);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	3201      	adds	r2, #1
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	10db      	asrs	r3, r3, #3
 8002b62:	833b      	strh	r3, [r7, #24]
	SIZE_Y = (uint16_t)(image[2]<<8) + image[3];
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3302      	adds	r3, #2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3303      	adds	r3, #3
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	82fb      	strh	r3, [r7, #22]
	for(yi = 0; yi < SIZE_Y; yi++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	83bb      	strh	r3, [r7, #28]
 8002b80:	e03e      	b.n	8002c00 <DrawImage+0xd4>
	{
		for(xi = 0; xi < SIZE_X; xi++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	83fb      	strh	r3, [r7, #30]
 8002b86:	e034      	b.n	8002bf2 <DrawImage+0xc6>
		{
			for(bitnum=0;bitnum<8;bitnum++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	837b      	strh	r3, [r7, #26]
 8002b8c:	e02b      	b.n	8002be6 <DrawImage+0xba>
			{
				color=((image[xi+yi*SIZE_X+4])>>(7-bitnum))&0x01;
 8002b8e:	8bfa      	ldrh	r2, [r7, #30]
 8002b90:	8bbb      	ldrh	r3, [r7, #28]
 8002b92:	8b39      	ldrh	r1, [r7, #24]
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	8b7b      	ldrh	r3, [r7, #26]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	fa42 f303 	asr.w	r3, r2, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	757b      	strb	r3, [r7, #21]
				if(color==inverse)u8g2_DrawPixel(&u8g2, x+(xi*8)+bitnum, y+yi);
 8002bb6:	7d7a      	ldrb	r2, [r7, #21]
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d110      	bne.n	8002be0 <DrawImage+0xb4>
 8002bbe:	8bfb      	ldrh	r3, [r7, #30]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	897b      	ldrh	r3, [r7, #10]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	8b7b      	ldrh	r3, [r7, #26]
 8002bcc:	4413      	add	r3, r2
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	8bbb      	ldrh	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	480e      	ldr	r0, [pc, #56]	; (8002c14 <DrawImage+0xe8>)
 8002bdc:	f013 f84e 	bl	8015c7c <u8g2_DrawPixel>
			for(bitnum=0;bitnum<8;bitnum++)
 8002be0:	8b7b      	ldrh	r3, [r7, #26]
 8002be2:	3301      	adds	r3, #1
 8002be4:	837b      	strh	r3, [r7, #26]
 8002be6:	8b7b      	ldrh	r3, [r7, #26]
 8002be8:	2b07      	cmp	r3, #7
 8002bea:	d9d0      	bls.n	8002b8e <DrawImage+0x62>
		for(xi = 0; xi < SIZE_X; xi++)
 8002bec:	8bfb      	ldrh	r3, [r7, #30]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	83fb      	strh	r3, [r7, #30]
 8002bf2:	8bfa      	ldrh	r2, [r7, #30]
 8002bf4:	8b3b      	ldrh	r3, [r7, #24]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3c6      	bcc.n	8002b88 <DrawImage+0x5c>
	for(yi = 0; yi < SIZE_Y; yi++)
 8002bfa:	8bbb      	ldrh	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	83bb      	strh	r3, [r7, #28]
 8002c00:	8bba      	ldrh	r2, [r7, #28]
 8002c02:	8afb      	ldrh	r3, [r7, #22]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3bc      	bcc.n	8002b82 <DrawImage+0x56>
			}
		}
	}
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20001fcc 	.word	0x20001fcc

08002c18 <Display_init>:




void Display_init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	u8g2_Setup_uc1638_240x160_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_cb_stm32l4);
 8002c1e:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <Display_init+0xe8>)
 8002c20:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <Display_init+0xec>)
 8002c22:	4939      	ldr	r1, [pc, #228]	; (8002d08 <Display_init+0xf0>)
 8002c24:	4839      	ldr	r0, [pc, #228]	; (8002d0c <Display_init+0xf4>)
 8002c26:	f012 f965 	bl	8014ef4 <u8g2_Setup_uc1638_240x160_f>
	u8g2_InitDisplay(&u8g2);
 8002c2a:	4838      	ldr	r0, [pc, #224]	; (8002d0c <Display_init+0xf4>)
 8002c2c:	f013 fdde 	bl	80167ec <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002c30:	2100      	movs	r1, #0
 8002c32:	4836      	ldr	r0, [pc, #216]	; (8002d0c <Display_init+0xf4>)
 8002c34:	f013 fde9 	bl	801680a <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 8002c38:	4834      	ldr	r0, [pc, #208]	; (8002d0c <Display_init+0xf4>)
 8002c3a:	f012 f936 	bl	8014eaa <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002c3e:	4934      	ldr	r1, [pc, #208]	; (8002d10 <Display_init+0xf8>)
 8002c40:	4832      	ldr	r0, [pc, #200]	; (8002d0c <Display_init+0xf4>)
 8002c42:	f012 ff07 	bl	8015a54 <u8g2_SetFont>

	//Подсветка
	temp_light=display_brightness;
 8002c46:	4b33      	ldr	r3, [pc, #204]	; (8002d14 <Display_init+0xfc>)
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <Display_init+0x100>)
 8002c4c:	701a      	strb	r2, [r3, #0]
	TIM2->CCR1=display_brightness;
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <Display_init+0xfc>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34

	// Контрастность
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c5e:	482f      	ldr	r0, [pc, #188]	; (8002d1c <Display_init+0x104>)
 8002c60:	f007 fabe 	bl	800a1e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2101      	movs	r1, #1
 8002c68:	482d      	ldr	r0, [pc, #180]	; (8002d20 <Display_init+0x108>)
 8002c6a:	f007 fab9 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+1;
 8002c6e:	23e9      	movs	r3, #233	; 0xe9
 8002c70:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002c72:	463a      	mov	r2, r7
 8002c74:	1d39      	adds	r1, r7, #4
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4829      	ldr	r0, [pc, #164]	; (8002d24 <Display_init+0x10c>)
 8002c80:	f00b fb69 	bl	800e356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002c84:	2201      	movs	r2, #1
 8002c86:	2101      	movs	r1, #1
 8002c88:	4825      	ldr	r0, [pc, #148]	; (8002d20 <Display_init+0x108>)
 8002c8a:	f007 faa9 	bl	800a1e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2101      	movs	r1, #1
 8002c92:	4823      	ldr	r0, [pc, #140]	; (8002d20 <Display_init+0x108>)
 8002c94:	f007 faa4 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8002c98:	2381      	movs	r3, #129	; 0x81
 8002c9a:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002c9c:	463a      	mov	r2, r7
 8002c9e:	1d39      	adds	r1, r7, #4
 8002ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	481e      	ldr	r0, [pc, #120]	; (8002d24 <Display_init+0x10c>)
 8002caa:	f00b fb54 	bl	800e356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cb4:	4819      	ldr	r0, [pc, #100]	; (8002d1c <Display_init+0x104>)
 8002cb6:	f007 fa93 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <Display_init+0x110>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	337d      	adds	r3, #125	; 0x7d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002cc4:	463a      	mov	r2, r7
 8002cc6:	1d39      	adds	r1, r7, #4
 8002cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4814      	ldr	r0, [pc, #80]	; (8002d24 <Display_init+0x10c>)
 8002cd2:	f00b fb40 	bl	800e356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4811      	ldr	r0, [pc, #68]	; (8002d20 <Display_init+0x108>)
 8002cdc:	f007 fa80 	bl	800a1e0 <HAL_GPIO_WritePin>

	DrawImage(img1, 16, 61, 1);
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	223d      	movs	r2, #61	; 0x3d
 8002ce4:	2110      	movs	r1, #16
 8002ce6:	4811      	ldr	r0, [pc, #68]	; (8002d2c <Display_init+0x114>)
 8002ce8:	f7ff ff20 	bl	8002b2c <DrawImage>
	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002cec:	4807      	ldr	r0, [pc, #28]	; (8002d0c <Display_init+0xf4>)
 8002cee:	f012 f874 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002cf2:	4806      	ldr	r0, [pc, #24]	; (8002d0c <Display_init+0xf4>)
 8002cf4:	f011 fffe 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	080078b9 	.word	0x080078b9
 8002d04:	080079d9 	.word	0x080079d9
 8002d08:	08029108 	.word	0x08029108
 8002d0c:	20001fcc 	.word	0x20001fcc
 8002d10:	080271c4 	.word	0x080271c4
 8002d14:	20000098 	.word	0x20000098
 8002d18:	20001c4c 	.word	0x20001c4c
 8002d1c:	48000400 	.word	0x48000400
 8002d20:	48001000 	.word	0x48001000
 8002d24:	20001f68 	.word	0x20001f68
 8002d28:	20000099 	.word	0x20000099
 8002d2c:	08022498 	.word	0x08022498

08002d30 <Gauge_loading>:



void Gauge_loading(uint8_t*text, uint8_t percent)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
	DrawImage(img1, 16, 61, 1);
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	223d      	movs	r2, #61	; 0x3d
 8002d40:	2110      	movs	r1, #16
 8002d42:	481d      	ldr	r0, [pc, #116]	; (8002db8 <Gauge_loading+0x88>)
 8002d44:	f7ff fef2 	bl	8002b2c <DrawImage>

	u8g2_DrawFrame(&u8g2, 40, 120, 160, 12);
 8002d48:	230c      	movs	r3, #12
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	23a0      	movs	r3, #160	; 0xa0
 8002d4e:	2278      	movs	r2, #120	; 0x78
 8002d50:	2128      	movs	r1, #40	; 0x28
 8002d52:	481a      	ldr	r0, [pc, #104]	; (8002dbc <Gauge_loading+0x8c>)
 8002d54:	f011 ff71 	bl	8014c3a <u8g2_DrawFrame>
	u8g2_DrawBox(&u8g2, 40,120, percent*1.6, 12);
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fbf2 	bl	8000544 <__aeabi_i2d>
 8002d60:	a313      	add	r3, pc, #76	; (adr r3, 8002db0 <Gauge_loading+0x80>)
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fc57 	bl	8000618 <__aeabi_dmul>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff29 	bl	8000bc8 <__aeabi_d2uiz>
 8002d76:	4603      	mov	r3, r0
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	9200      	str	r2, [sp, #0]
 8002d7e:	2278      	movs	r2, #120	; 0x78
 8002d80:	2128      	movs	r1, #40	; 0x28
 8002d82:	480e      	ldr	r0, [pc, #56]	; (8002dbc <Gauge_loading+0x8c>)
 8002d84:	f011 ff23 	bl	8014bce <u8g2_DrawBox>

	//sprintf(RAM,"%d", percent);
	//u8g2_DrawUTF8(&u8g2, 50, 120, RAM);
	u8g2_SetFont(&u8g2, u8g2_font_8x13_t_cyrillic);
 8002d88:	490d      	ldr	r1, [pc, #52]	; (8002dc0 <Gauge_loading+0x90>)
 8002d8a:	480c      	ldr	r0, [pc, #48]	; (8002dbc <Gauge_loading+0x8c>)
 8002d8c:	f012 fe62 	bl	8015a54 <u8g2_SetFont>
	u8g2_DrawUTF8(&u8g2, 40, 145, (char *)text);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2291      	movs	r2, #145	; 0x91
 8002d94:	2128      	movs	r1, #40	; 0x28
 8002d96:	4809      	ldr	r0, [pc, #36]	; (8002dbc <Gauge_loading+0x8c>)
 8002d98:	f012 fdba 	bl	8015910 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002d9c:	4807      	ldr	r0, [pc, #28]	; (8002dbc <Gauge_loading+0x8c>)
 8002d9e:	f012 f81c 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <Gauge_loading+0x8c>)
 8002da4:	f011 ffa6 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	9999999a 	.word	0x9999999a
 8002db4:	3ff99999 	.word	0x3ff99999
 8002db8:	08022498 	.word	0x08022498
 8002dbc:	20001fcc 	.word	0x20001fcc
 8002dc0:	08024768 	.word	0x08024768

08002dc4 <Off_screen_func>:




void Off_screen_func(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
	// static
	if(old_active_string==0xFF)
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <Off_screen_func+0x30>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2bff      	cmp	r3, #255	; 0xff
 8002dce:	d10e      	bne.n	8002dee <Off_screen_func+0x2a>
	{
		DrawImage(img2, 0, 0, 0);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4808      	ldr	r0, [pc, #32]	; (8002df8 <Off_screen_func+0x34>)
 8002dd8:	f7ff fea8 	bl	8002b2c <DrawImage>
		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8002ddc:	4807      	ldr	r0, [pc, #28]	; (8002dfc <Off_screen_func+0x38>)
 8002dde:	f011 fffc 	bl	8014dda <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8002de2:	4806      	ldr	r0, [pc, #24]	; (8002dfc <Off_screen_func+0x38>)
 8002de4:	f011 ff86 	bl	8014cf4 <u8g2_ClearBuffer>
		old_active_string=0;
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <Off_screen_func+0x30>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
	}
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200003a0 	.word	0x200003a0
 8002df8:	08022878 	.word	0x08022878
 8002dfc:	20001fcc 	.word	0x20001fcc

08002e00 <Blink_Edit_Parameter_timer>:

uint16_t blink_timer=0;
uint8_t blink_trig=0;
void Blink_Edit_Parameter_timer(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
	if(++blink_timer==200)blink_trig=1;
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <Blink_Edit_Parameter_timer+0x40>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <Blink_Edit_Parameter_timer+0x40>)
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <Blink_Edit_Parameter_timer+0x40>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	2bc8      	cmp	r3, #200	; 0xc8
 8002e16:	d102      	bne.n	8002e1e <Blink_Edit_Parameter_timer+0x1e>
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <Blink_Edit_Parameter_timer+0x44>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
	if(blink_timer>=500){blink_timer=blink_trig=0;}
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <Blink_Edit_Parameter_timer+0x40>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e26:	d305      	bcc.n	8002e34 <Blink_Edit_Parameter_timer+0x34>
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <Blink_Edit_Parameter_timer+0x44>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <Blink_Edit_Parameter_timer+0x40>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	801a      	strh	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000085e 	.word	0x2000085e
 8002e44:	20000860 	.word	0x20000860

08002e48 <Blink_Edit_Parameter>:


void Blink_Edit_Parameter(uint8_t x, uint8_t y, const char* text, uint8_t param_num, uint8_t curr_param)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	603a      	str	r2, [r7, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	460b      	mov	r3, r1
 8002e58:	71bb      	strb	r3, [r7, #6]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	717b      	strb	r3, [r7, #5]
	if(param_num==curr_param)
 8002e5e:	797a      	ldrb	r2, [r7, #5]
 8002e60:	7c3b      	ldrb	r3, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d10c      	bne.n	8002e80 <Blink_Edit_Parameter+0x38>
	{if(blink_trig==1)u8g2_DrawUTF8(&u8g2, x, y, text);}
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <Blink_Edit_Parameter+0x50>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d110      	bne.n	8002e90 <Blink_Edit_Parameter+0x48>
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	b299      	uxth	r1, r3
 8002e72:	79bb      	ldrb	r3, [r7, #6]
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	4808      	ldr	r0, [pc, #32]	; (8002e9c <Blink_Edit_Parameter+0x54>)
 8002e7a:	f012 fd49 	bl	8015910 <u8g2_DrawUTF8>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
}
 8002e7e:	e007      	b.n	8002e90 <Blink_Edit_Parameter+0x48>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	b299      	uxth	r1, r3
 8002e84:	79bb      	ldrb	r3, [r7, #6]
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <Blink_Edit_Parameter+0x54>)
 8002e8c:	f012 fd40 	bl	8015910 <u8g2_DrawUTF8>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000860 	.word	0x20000860
 8002e9c:	20001fcc 	.word	0x20001fcc

08002ea0 <Test_screen_func>:


void Test_screen_func(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	71fb      	strb	r3, [r7, #7]
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002eaa:	4942      	ldr	r1, [pc, #264]	; (8002fb4 <Test_screen_func+0x114>)
 8002eac:	4842      	ldr	r0, [pc, #264]	; (8002fb8 <Test_screen_func+0x118>)
 8002eae:	f012 fdd1 	bl	8015a54 <u8g2_SetFont>

	// Индикация напряжения
	for(i=0;i<6;i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	71fb      	strb	r3, [r7, #7]
 8002eb6:	e019      	b.n	8002eec <Test_screen_func+0x4c>
	{
		sprintf((char *)RAM,"%+fmV", ADC_volt[i]);
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <Test_screen_func+0x11c>)
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	493e      	ldr	r1, [pc, #248]	; (8002fc0 <Test_screen_func+0x120>)
 8002ec6:	483f      	ldr	r0, [pc, #252]	; (8002fc4 <Test_screen_func+0x124>)
 8002ec8:	f01a ff22 	bl	801dd10 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 30+i*15, (char *)RAM);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	331e      	adds	r3, #30
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <Test_screen_func+0x124>)
 8002ede:	2178      	movs	r1, #120	; 0x78
 8002ee0:	4835      	ldr	r0, [pc, #212]	; (8002fb8 <Test_screen_func+0x118>)
 8002ee2:	f012 fd15 	bl	8015910 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d9e2      	bls.n	8002eb8 <Test_screen_func+0x18>
	}

	// Индикация АЦП
	for(i=0;i<6;i++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	71fb      	strb	r3, [r7, #7]
 8002ef6:	e018      	b.n	8002f2a <Test_screen_func+0x8a>
	{
		//sprintf(RAM,"%d %+d", i, ADC_channel_0[i]);
		sprintf((char *)RAM,"%d %+d", i, ADC_middle[i]);
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	4932      	ldr	r1, [pc, #200]	; (8002fc8 <Test_screen_func+0x128>)
 8002efe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f02:	4932      	ldr	r1, [pc, #200]	; (8002fcc <Test_screen_func+0x12c>)
 8002f04:	482f      	ldr	r0, [pc, #188]	; (8002fc4 <Test_screen_func+0x124>)
 8002f06:	f01a ff03 	bl	801dd10 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 30+i*15, (char *)RAM);
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	331e      	adds	r3, #30
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <Test_screen_func+0x124>)
 8002f1c:	2105      	movs	r1, #5
 8002f1e:	4826      	ldr	r0, [pc, #152]	; (8002fb8 <Test_screen_func+0x118>)
 8002f20:	f012 fcf6 	bl	8015910 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	3301      	adds	r3, #1
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d9e3      	bls.n	8002ef8 <Test_screen_func+0x58>
	}

	switch(adc_calibration_mode)
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <Test_screen_func+0x130>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d014      	beq.n	8002f62 <Test_screen_func+0xc2>
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	dc19      	bgt.n	8002f70 <Test_screen_func+0xd0>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <Test_screen_func+0xa6>
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d007      	beq.n	8002f54 <Test_screen_func+0xb4>
 8002f44:	e014      	b.n	8002f70 <Test_screen_func+0xd0>
	{
		case 0: u8g2_DrawUTF8(&u8g2, 5, 130, "self_calibration"); break;
 8002f46:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <Test_screen_func+0x134>)
 8002f48:	2282      	movs	r2, #130	; 0x82
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	481a      	ldr	r0, [pc, #104]	; (8002fb8 <Test_screen_func+0x118>)
 8002f4e:	f012 fcdf 	bl	8015910 <u8g2_DrawUTF8>
 8002f52:	e00d      	b.n	8002f70 <Test_screen_func+0xd0>
		case 1: u8g2_DrawUTF8(&u8g2, 5, 130, "offset_calibration"); break;
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <Test_screen_func+0x138>)
 8002f56:	2282      	movs	r2, #130	; 0x82
 8002f58:	2105      	movs	r1, #5
 8002f5a:	4817      	ldr	r0, [pc, #92]	; (8002fb8 <Test_screen_func+0x118>)
 8002f5c:	f012 fcd8 	bl	8015910 <u8g2_DrawUTF8>
 8002f60:	e006      	b.n	8002f70 <Test_screen_func+0xd0>
		case 2: u8g2_DrawUTF8(&u8g2, 5, 130, "full_scale_calibration"); break;
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <Test_screen_func+0x13c>)
 8002f64:	2282      	movs	r2, #130	; 0x82
 8002f66:	2105      	movs	r1, #5
 8002f68:	4813      	ldr	r0, [pc, #76]	; (8002fb8 <Test_screen_func+0x118>)
 8002f6a:	f012 fcd1 	bl	8015910 <u8g2_DrawUTF8>
 8002f6e:	bf00      	nop
	}

	// �?ндикация PGA
	u8g2_DrawUTF8(&u8g2, 5, 145, PGA_name[PGA_GAIN]);
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <Test_screen_func+0x140>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <Test_screen_func+0x144>)
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	2291      	movs	r2, #145	; 0x91
 8002f7e:	2105      	movs	r1, #5
 8002f80:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <Test_screen_func+0x118>)
 8002f82:	f012 fcc5 	bl	8015910 <u8g2_DrawUTF8>

	sprintf((char *)RAM,"%f", Kdiv);
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <Test_screen_func+0x148>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	4917      	ldr	r1, [pc, #92]	; (8002fec <Test_screen_func+0x14c>)
 8002f8e:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <Test_screen_func+0x124>)
 8002f90:	f01a febe 	bl	801dd10 <siprintf>
	u8g2_DrawUTF8(&u8g2, 120, 145, (char *)RAM);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <Test_screen_func+0x124>)
 8002f96:	2291      	movs	r2, #145	; 0x91
 8002f98:	2178      	movs	r1, #120	; 0x78
 8002f9a:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <Test_screen_func+0x118>)
 8002f9c:	f012 fcb8 	bl	8015910 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <Test_screen_func+0x118>)
 8002fa2:	f011 ff1a 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002fa6:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <Test_screen_func+0x118>)
 8002fa8:	f011 fea4 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	080271c4 	.word	0x080271c4
 8002fb8:	20001fcc 	.word	0x20001fcc
 8002fbc:	200052c8 	.word	0x200052c8
 8002fc0:	08021ad0 	.word	0x08021ad0
 8002fc4:	20002088 	.word	0x20002088
 8002fc8:	200020f0 	.word	0x200020f0
 8002fcc:	08021ad8 	.word	0x08021ad8
 8002fd0:	200008a7 	.word	0x200008a7
 8002fd4:	08021ae0 	.word	0x08021ae0
 8002fd8:	08021af4 	.word	0x08021af4
 8002fdc:	08021b08 	.word	0x08021b08
 8002fe0:	2000009a 	.word	0x2000009a
 8002fe4:	20000050 	.word	0x20000050
 8002fe8:	20000090 	.word	0x20000090
 8002fec:	08021b20 	.word	0x08021b20

08002ff0 <Display_process>:




void Display_process(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	switch(screen)
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <Display_process+0x98>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	2b0b      	cmp	r3, #11
 8002ffc:	d83e      	bhi.n	800307c <Display_process+0x8c>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <Display_process+0x14>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003035 	.word	0x08003035
 8003008:	0800303b 	.word	0x0800303b
 800300c:	08003041 	.word	0x08003041
 8003010:	08003047 	.word	0x08003047
 8003014:	0800304d 	.word	0x0800304d
 8003018:	08003053 	.word	0x08003053
 800301c:	08003059 	.word	0x08003059
 8003020:	0800305f 	.word	0x0800305f
 8003024:	08003065 	.word	0x08003065
 8003028:	0800306b 	.word	0x0800306b
 800302c:	08003071 	.word	0x08003071
 8003030:	08003077 	.word	0x08003077
	{
		case Main_screen: Main_screen_func(); break;
 8003034:	f014 fbe0 	bl	80177f8 <Main_screen_func>
 8003038:	e020      	b.n	800307c <Display_process+0x8c>
		case Test_screen: Test_screen_func(); break;
 800303a:	f7ff ff31 	bl	8002ea0 <Test_screen_func>
 800303e:	e01d      	b.n	800307c <Display_process+0x8c>
		case Off_screen: Off_screen_func(); break;
 8003040:	f7ff fec0 	bl	8002dc4 <Off_screen_func>
 8003044:	e01a      	b.n	800307c <Display_process+0x8c>
		case Option_screen: Option_screen_func(); break;
 8003046:	f015 fc87 	bl	8018958 <Option_screen_func>
 800304a:	e017      	b.n	800307c <Display_process+0x8c>
		case Display_options_screen: Display_options_screen_func(); break;
 800304c:	f013 ff84 	bl	8016f58 <Display_options_screen_func>
 8003050:	e014      	b.n	800307c <Display_process+0x8c>
		case ADC_options_screen: ADC_options_screen_func(); break;
 8003052:	f013 fc69 	bl	8016928 <ADC_options_screen_func>
 8003056:	e011      	b.n	800307c <Display_process+0x8c>
		case Measure_options_screen: Measure_options_screen_func(); break;
 8003058:	f014 f9aa 	bl	80173b0 <Measure_options_screen_func>
 800305c:	e00e      	b.n	800307c <Display_process+0x8c>
		case Parameter_screen: Parameter_screen_func(); break;
 800305e:	f015 fbd7 	bl	8018810 <Parameter_screen_func>
 8003062:	e00b      	b.n	800307c <Display_process+0x8c>
		case RTC_screen: RTC_screen_func(); break;
 8003064:	f014 fe98 	bl	8017d98 <RTC_screen_func>
 8003068:	e008      	b.n	800307c <Display_process+0x8c>
		case Auto_Off_option_screen: Auto_Off_option_screen_func(); break;
 800306a:	f013 fec3 	bl	8016df4 <Auto_Off_option_screen_func>
 800306e:	e005      	b.n	800307c <Display_process+0x8c>
		case About_options_screen: About_options_screen_func(); break;
 8003070:	f015 f8aa 	bl	80181c8 <About_options_screen_func>
 8003074:	e002      	b.n	800307c <Display_process+0x8c>
		case Logging_options_screen: Logging_options_screen_func(); break;
 8003076:	f015 f935 	bl	80182e4 <Logging_options_screen_func>
 800307a:	bf00      	nop
	}
	sleep(10);
 800307c:	200a      	movs	r0, #10
 800307e:	f000 f88d 	bl	800319c <sleep>
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000004c 	.word	0x2000004c

0800308c <wait_scheduler>:
unsigned int delay_count=0;
unsigned char RAM[100];
unsigned int j=0;

void wait_scheduler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
	if(tasks_timer[task_ready_cnt]==0)task=task_ready_cnt+1;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <wait_scheduler+0x44>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <wait_scheduler+0x48>)
 8003098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <wait_scheduler+0x20>
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <wait_scheduler+0x44>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <wait_scheduler+0x4c>)
 80030aa:	701a      	strb	r2, [r3, #0]
	if(++task_ready_cnt==num_of_tasks)task_ready_cnt=0;
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <wait_scheduler+0x44>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <wait_scheduler+0x44>)
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <wait_scheduler+0x44>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b0a      	cmp	r3, #10
 80030be:	d102      	bne.n	80030c6 <wait_scheduler+0x3a>
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <wait_scheduler+0x44>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000862 	.word	0x20000862
 80030d4:	20002060 	.word	0x20002060
 80030d8:	20000861 	.word	0x20000861

080030dc <ELSPIRE_OS_KERNEL>:

void ELSPIRE_OS_KERNEL(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
	new_task[0]=wait_scheduler;
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <ELSPIRE_OS_KERNEL+0x40>)
 80030e2:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <ELSPIRE_OS_KERNEL+0x44>)
 80030e4:	601a      	str	r2, [r3, #0]
	while (1) for(j=0;j<=num_of_tasks;j++)if(task==j)new_task[j]();
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <ELSPIRE_OS_KERNEL+0x48>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e011      	b.n	8003112 <ELSPIRE_OS_KERNEL+0x36>
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <ELSPIRE_OS_KERNEL+0x4c>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <ELSPIRE_OS_KERNEL+0x48>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d105      	bne.n	8003108 <ELSPIRE_OS_KERNEL+0x2c>
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <ELSPIRE_OS_KERNEL+0x48>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <ELSPIRE_OS_KERNEL+0x40>)
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	4798      	blx	r3
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <ELSPIRE_OS_KERNEL+0x48>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a05      	ldr	r2, [pc, #20]	; (8003124 <ELSPIRE_OS_KERNEL+0x48>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <ELSPIRE_OS_KERNEL+0x48>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b0a      	cmp	r3, #10
 8003118:	d9e9      	bls.n	80030ee <ELSPIRE_OS_KERNEL+0x12>
 800311a:	e7e4      	b.n	80030e6 <ELSPIRE_OS_KERNEL+0xa>
 800311c:	20001f3c 	.word	0x20001f3c
 8003120:	0800308d 	.word	0x0800308d
 8003124:	20000868 	.word	0x20000868
 8003128:	20000861 	.word	0x20000861

0800312c <ELSPIRE_OS_TIMER>:
	for(i=1;i<=num_of_tasks;i++)
	tasks_timer[i]=0xFFFF;
}

void ELSPIRE_OS_TIMER(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<num_of_tasks;i++)
 8003136:	2300      	movs	r3, #0
 8003138:	71fb      	strb	r3, [r7, #7]
 800313a:	e018      	b.n	800316e <ELSPIRE_OS_TIMER+0x42>
	{
		if(tasks_timer[i]>0)
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <ELSPIRE_OS_TIMER+0x68>)
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00f      	beq.n	8003168 <ELSPIRE_OS_TIMER+0x3c>
		{
			if(tasks_timer[i]!=0xFFFF) tasks_timer[i]--;
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <ELSPIRE_OS_TIMER+0x68>)
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <ELSPIRE_OS_TIMER+0x3c>
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <ELSPIRE_OS_TIMER+0x68>)
 800315c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003160:	3a01      	subs	r2, #1
 8003162:	490c      	ldr	r1, [pc, #48]	; (8003194 <ELSPIRE_OS_TIMER+0x68>)
 8003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<num_of_tasks;i++)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	3301      	adds	r3, #1
 800316c:	71fb      	strb	r3, [r7, #7]
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b09      	cmp	r3, #9
 8003172:	d9e3      	bls.n	800313c <ELSPIRE_OS_TIMER+0x10>
		}
	}
	// Задержка
	if (delay_count > 0)
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <ELSPIRE_OS_TIMER+0x6c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <ELSPIRE_OS_TIMER+0x5a>
	{ delay_count--; }
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <ELSPIRE_OS_TIMER+0x6c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3b01      	subs	r3, #1
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <ELSPIRE_OS_TIMER+0x6c>)
 8003184:	6013      	str	r3, [r2, #0]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20002060 	.word	0x20002060
 8003198:	20000864 	.word	0x20000864

0800319c <sleep>:

void sleep(unsigned int ms)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	tasks_timer[task-1] = ms;
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <sleep+0x28>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	4907      	ldr	r1, [pc, #28]	; (80031c8 <sleep+0x2c>)
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task = wait;
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <sleep+0x28>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	20000861 	.word	0x20000861
 80031c8:	20002060 	.word	0x20002060

080031cc <Task_STOP>:

void Task_STOP(unsigned char task_num)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=0xFFFF;
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	3b01      	subs	r3, #1
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <Task_STOP+0x2c>)
 80031dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	task=wait;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <Task_STOP+0x30>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20002060 	.word	0x20002060
 80031fc:	20000861 	.word	0x20000861

08003200 <Task_RUN>:

void Task_RUN(unsigned char task_num, unsigned int del)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=del;
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	3b01      	subs	r3, #1
 8003210:	4906      	ldr	r1, [pc, #24]	; (800322c <Task_RUN+0x2c>)
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task=wait;
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <Task_RUN+0x30>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20002060 	.word	0x20002060
 8003230:	20000861 	.word	0x20000861

08003234 <delay_ms>:

void delay_ms(unsigned int ms)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	delay_count = ms;
 800323c:	4a07      	ldr	r2, [pc, #28]	; (800325c <delay_ms+0x28>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6013      	str	r3, [r2, #0]
	while (delay_count){}
 8003242:	bf00      	nop
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <delay_ms+0x28>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1fb      	bne.n	8003244 <delay_ms+0x10>
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000864 	.word	0x20000864

08003260 <MAX77960_Read_Reg>:

extern I2C_HandleTypeDef hi2c2;


uint8_t MAX77960_Read_Reg(uint8_t REG)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af02      	add	r7, sp, #8
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[1], rx_buf[1];
	tx_buf[0]=REG;
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	733b      	strb	r3, [r7, #12]
	rx_buf[0]=0xFF;
 800326e:	23ff      	movs	r3, #255	; 0xff
 8003270:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, 0xDE, tx_buf, 1, 10000);
 8003272:	f107 020c 	add.w	r2, r7, #12
 8003276:	f242 7310 	movw	r3, #10000	; 0x2710
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2301      	movs	r3, #1
 800327e:	21de      	movs	r1, #222	; 0xde
 8003280:	4808      	ldr	r0, [pc, #32]	; (80032a4 <MAX77960_Read_Reg+0x44>)
 8003282:	f007 f877 	bl	800a374 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0xDE, (uint8_t *)rx_buf, 1, 10000);
 8003286:	f107 0208 	add.w	r2, r7, #8
 800328a:	f242 7310 	movw	r3, #10000	; 0x2710
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2301      	movs	r3, #1
 8003292:	21de      	movs	r1, #222	; 0xde
 8003294:	4803      	ldr	r0, [pc, #12]	; (80032a4 <MAX77960_Read_Reg+0x44>)
 8003296:	f007 f961 	bl	800a55c <HAL_I2C_Master_Receive>
	return rx_buf[0];
 800329a:	7a3b      	ldrb	r3, [r7, #8]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200078d8 	.word	0x200078d8

080032a8 <clear_buf>:
uint16_t ANSWER=0xFFFF;
uint8_t BSFlag=0;


void clear_buf(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i=0;i<APP_RX_DATA_SIZE;i++)rx_buf[i]=0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	80fb      	strh	r3, [r7, #6]
 80032b2:	e006      	b.n	80032c2 <clear_buf+0x1a>
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <clear_buf+0x3c>)
 80032b8:	2100      	movs	r1, #0
 80032ba:	54d1      	strb	r1, [r2, r3]
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	3301      	adds	r3, #1
 80032c0:	80fb      	strh	r3, [r7, #6]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c8:	d3f4      	bcc.n	80032b4 <clear_buf+0xc>
	rxcntr=0;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <clear_buf+0x40>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	801a      	strh	r2, [r3, #0]
	ANSWER=0xFFFF;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <clear_buf+0x44>)
 80032d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032d6:	801a      	strh	r2, [r3, #0]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	20005b64 	.word	0x20005b64
 80032e8:	200008ba 	.word	0x200008ba
 80032ec:	2000018e 	.word	0x2000018e

080032f0 <scan_num32>:

int64_t scan_num32(uint8_t offset)
{
 80032f0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80032f4:	b089      	sub	sp, #36	; 0x24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]
	int64_t res=0;
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t i=0,sign=0;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]
 800330c:	2300      	movs	r3, #0
 800330e:	75bb      	strb	r3, [r7, #22]
	if(rx_buf[offset]=='-')sign=1;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <scan_num32+0xf4>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	2b2d      	cmp	r3, #45	; 0x2d
 8003318:	d101      	bne.n	800331e <scan_num32+0x2e>
 800331a:	2301      	movs	r3, #1
 800331c:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<15;i++){
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]
 8003322:	e049      	b.n	80033b8 <scan_num32+0xc8>
	if((rx_buf[offset+i+sign]>=48)&&(rx_buf[offset+i+sign]<=58))res=(rx_buf[offset+i+sign]-48)+res*10;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	441a      	add	r2, r3
 800332a:	7dbb      	ldrb	r3, [r7, #22]
 800332c:	4413      	add	r3, r2
 800332e:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <scan_num32+0xf4>)
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	2b2f      	cmp	r3, #47	; 0x2f
 8003334:	d934      	bls.n	80033a0 <scan_num32+0xb0>
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	441a      	add	r2, r3
 800333c:	7dbb      	ldrb	r3, [r7, #22]
 800333e:	4413      	add	r3, r2
 8003340:	4a28      	ldr	r2, [pc, #160]	; (80033e4 <scan_num32+0xf4>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
 8003344:	2b3a      	cmp	r3, #58	; 0x3a
 8003346:	d82b      	bhi.n	80033a0 <scan_num32+0xb0>
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	441a      	add	r2, r3
 800334e:	7dbb      	ldrb	r3, [r7, #22]
 8003350:	4413      	add	r3, r2
 8003352:	4a24      	ldr	r2, [pc, #144]	; (80033e4 <scan_num32+0xf4>)
 8003354:	5cd3      	ldrb	r3, [r2, r3]
 8003356:	3b30      	subs	r3, #48	; 0x30
 8003358:	4698      	mov	r8, r3
 800335a:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800335e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	f04f 0000 	mov.w	r0, #0
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	0099      	lsls	r1, r3, #2
 8003370:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003374:	0090      	lsls	r0, r2, #2
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	1912      	adds	r2, r2, r4
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	1891      	adds	r1, r2, r2
 8003382:	6039      	str	r1, [r7, #0]
 8003384:	415b      	adcs	r3, r3
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800338c:	eb18 0a02 	adds.w	sl, r8, r2
 8003390:	eb49 0b03 	adc.w	fp, r9, r3
 8003394:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(i=0;i<15;i++){
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	3301      	adds	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
 800339e:	e00b      	b.n	80033b8 <scan_num32+0xc8>
	else {if(sign==1)return -res; else return res;}}
 80033a0:	7dbb      	ldrb	r3, [r7, #22]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <scan_num32+0xc2>
 80033a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033aa:	4252      	negs	r2, r2
 80033ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80033b0:	e010      	b.n	80033d4 <scan_num32+0xe4>
 80033b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b6:	e00d      	b.n	80033d4 <scan_num32+0xe4>
	for(i=0;i<15;i++){
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b0e      	cmp	r3, #14
 80033bc:	d9b2      	bls.n	8003324 <scan_num32+0x34>
	if(sign==1)return -res;
 80033be:	7dbb      	ldrb	r3, [r7, #22]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <scan_num32+0xe0>
 80033c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c8:	4252      	negs	r2, r2
 80033ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80033ce:	e001      	b.n	80033d4 <scan_num32+0xe4>
	else return res;
 80033d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	3724      	adds	r7, #36	; 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20005b64 	.word	0x20005b64

080033e8 <scan_float>:

float scan_float(uint8_t offset)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
//	if(devider==0)devider=1;
//	RES = (float)res32/devider;
//	if(sign==1) return (float)-RES;
//	else return RES;

	return scan_double(offset, (uint8_t*)rx_buf);
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4909      	ldr	r1, [pc, #36]	; (800341c <scan_float+0x34>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 f839 	bl	8005470 <scan_double>
 80033fe:	ec53 2b10 	vmov	r2, r3, d0
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f7fd fbff 	bl	8000c08 <__aeabi_d2f>
 800340a:	4603      	mov	r3, r0
 800340c:	ee07 3a90 	vmov	s15, r3
}
 8003410:	eeb0 0a67 	vmov.f32	s0, s15
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20005b64 	.word	0x20005b64

08003420 <scan_num16>:

uint16_t scan_num16(uint8_t offset)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0,i=0;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	2300      	movs	r3, #0
 8003430:	73bb      	strb	r3, [r7, #14]
	if((rx_buf[offset]=='A')&&(rx_buf[offset+1]=='L')&&(rx_buf[offset+2]=='L'))return 0xFFFF;
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <scan_num16+0xa0>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	2b41      	cmp	r3, #65	; 0x41
 800343a:	d10e      	bne.n	800345a <scan_num16+0x3a>
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	3301      	adds	r3, #1
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <scan_num16+0xa0>)
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	2b4c      	cmp	r3, #76	; 0x4c
 8003446:	d108      	bne.n	800345a <scan_num16+0x3a>
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	3302      	adds	r3, #2
 800344c:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <scan_num16+0xa0>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	2b4c      	cmp	r3, #76	; 0x4c
 8003452:	d102      	bne.n	800345a <scan_num16+0x3a>
 8003454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003458:	e02b      	b.n	80034b2 <scan_num16+0x92>
	for(i=0;i<10;i++){
 800345a:	2300      	movs	r3, #0
 800345c:	73bb      	strb	r3, [r7, #14]
 800345e:	e023      	b.n	80034a8 <scan_num16+0x88>
	if((rx_buf[offset+i]>=48)&&(rx_buf[offset+i]<=58))res=(rx_buf[offset+i]-48)+res*10;
 8003460:	79fa      	ldrb	r2, [r7, #7]
 8003462:	7bbb      	ldrb	r3, [r7, #14]
 8003464:	4413      	add	r3, r2
 8003466:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <scan_num16+0xa0>)
 8003468:	5cd3      	ldrb	r3, [r2, r3]
 800346a:	2b2f      	cmp	r3, #47	; 0x2f
 800346c:	d919      	bls.n	80034a2 <scan_num16+0x82>
 800346e:	79fa      	ldrb	r2, [r7, #7]
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	4413      	add	r3, r2
 8003474:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <scan_num16+0xa0>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	2b3a      	cmp	r3, #58	; 0x3a
 800347a:	d812      	bhi.n	80034a2 <scan_num16+0x82>
 800347c:	79fa      	ldrb	r2, [r7, #7]
 800347e:	7bbb      	ldrb	r3, [r7, #14]
 8003480:	4413      	add	r3, r2
 8003482:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <scan_num16+0xa0>)
 8003484:	5cd2      	ldrb	r2, [r2, r3]
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	4619      	mov	r1, r3
 800348a:	0089      	lsls	r1, r1, #2
 800348c:	440b      	add	r3, r1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4413      	add	r3, r2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3b30      	subs	r3, #48	; 0x30
 8003498:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<10;i++){
 800349a:	7bbb      	ldrb	r3, [r7, #14]
 800349c:	3301      	adds	r3, #1
 800349e:	73bb      	strb	r3, [r7, #14]
 80034a0:	e002      	b.n	80034a8 <scan_num16+0x88>
	else return res;}
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	e004      	b.n	80034b2 <scan_num16+0x92>
	for(i=0;i<10;i++){
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	2b09      	cmp	r3, #9
 80034ac:	d9d8      	bls.n	8003460 <scan_num16+0x40>
	return res;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	b29b      	uxth	r3, r3
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20005b64 	.word	0x20005b64

080034c4 <OneCommParseCycle>:

void OneCommParseCycle(uint8_t com, const char* compare, uint8_t offset, uint8_t len)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6039      	str	r1, [r7, #0]
 80034cc:	4611      	mov	r1, r2
 80034ce:	461a      	mov	r2, r3
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
 80034d4:	460b      	mov	r3, r1
 80034d6:	71bb      	strb	r3, [r7, #6]
 80034d8:	4613      	mov	r3, r2
 80034da:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	if(ANSWER==0xFFFF){
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <OneCommParseCycle+0x70>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d11f      	bne.n	8003528 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e018      	b.n	8003520 <OneCommParseCycle+0x5c>
	{
		if(rx_buf[i+offset]==compare[i]) ANSWER = com;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	79bb      	ldrb	r3, [r7, #6]
 80034f2:	4413      	add	r3, r2
 80034f4:	4a10      	ldr	r2, [pc, #64]	; (8003538 <OneCommParseCycle+0x74>)
 80034f6:	5cd2      	ldrb	r2, [r2, r3]
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	440b      	add	r3, r1
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d104      	bne.n	800350e <OneCommParseCycle+0x4a>
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	b29a      	uxth	r2, r3
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <OneCommParseCycle+0x70>)
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	e005      	b.n	800351a <OneCommParseCycle+0x56>
		else {ANSWER=0xFFFF; break;}
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <OneCommParseCycle+0x70>)
 8003510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	bf00      	nop
	}}
}
 8003518:	e006      	b.n	8003528 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	3301      	adds	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	797b      	ldrb	r3, [r7, #5]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3e2      	bcc.n	80034ee <OneCommParseCycle+0x2a>
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	2000018e 	.word	0x2000018e
 8003538:	20005b64 	.word	0x20005b64

0800353c <parser>:

uint8_t parser(uint8_t offset)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	ANSWER=0xFFFF;
 8003546:	4b21      	ldr	r3, [pc, #132]	; (80035cc <parser+0x90>)
 8003548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800354c:	801a      	strh	r2, [r3, #0]
	// Commands
	for(i=2;i<NUMBER_OF_COMMANDS;i++) OneCommParseCycle(i, COMMAND_STRING[i], offset, COMMAND_NUM_OF_SYM[i]);
 800354e:	2302      	movs	r3, #2
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e00d      	b.n	8003570 <parser+0x34>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <parser+0x94>)
 8003558:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <parser+0x98>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
 8003562:	79fa      	ldrb	r2, [r7, #7]
 8003564:	7bf8      	ldrb	r0, [r7, #15]
 8003566:	f7ff ffad 	bl	80034c4 <OneCommParseCycle>
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	3301      	adds	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b0d      	cmp	r3, #13
 8003574:	d9ee      	bls.n	8003554 <parser+0x18>
	// Variables
	for(i=0;i<NUMBER_OF_VARIABLES;i++) OneCommParseCycle(i, GV_STRING[i], offset, GV_NUM_OF_SYM[i]);
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e00d      	b.n	8003598 <parser+0x5c>
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <parser+0x9c>)
 8003580:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <parser+0xa0>)
 8003588:	5cd3      	ldrb	r3, [r2, r3]
 800358a:	79fa      	ldrb	r2, [r7, #7]
 800358c:	7bf8      	ldrb	r0, [r7, #15]
 800358e:	f7ff ff99 	bl	80034c4 <OneCommParseCycle>
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	3301      	adds	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d9ee      	bls.n	800357c <parser+0x40>
	// UNKNOWING_CMD
	if((rx_buf[offset]!=0)&&(ANSWER==0xFFFF))ANSWER=0xFFFE;
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <parser+0xa4>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <parser+0x80>
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <parser+0x90>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d103      	bne.n	80035bc <parser+0x80>
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <parser+0x90>)
 80035b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035ba:	801a      	strh	r2, [r3, #0]
	return ANSWER;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <parser+0x90>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000018e 	.word	0x2000018e
 80035d0:	20000154 	.word	0x20000154
 80035d4:	08023b7c 	.word	0x08023b7c
 80035d8:	200000f4 	.word	0x200000f4
 80035dc:	08023b3c 	.word	0x08023b3c
 80035e0:	20005b64 	.word	0x20005b64

080035e4 <Set_uint8>:


void Set_uint8(uint8_t*arr, uint8_t offset)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff14 	bl	8003420 <scan_num16>
 80035f8:	4603      	mov	r3, r0
 80035fa:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80035fc:	2300      	movs	r3, #0
 80035fe:	82fb      	strh	r3, [r7, #22]
 8003600:	e019      	b.n	8003636 <Set_uint8+0x52>
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	8afb      	ldrh	r3, [r7, #22]
 8003606:	4413      	add	r3, r2
 8003608:	4a1c      	ldr	r2, [pc, #112]	; (800367c <Set_uint8+0x98>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	2b20      	cmp	r3, #32
 800360e:	d006      	beq.n	800361e <Set_uint8+0x3a>
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	8afb      	ldrh	r3, [r7, #22]
 8003614:	4413      	add	r3, r2
 8003616:	4a19      	ldr	r2, [pc, #100]	; (800367c <Set_uint8+0x98>)
 8003618:	5cd3      	ldrb	r3, [r2, r3]
 800361a:	2b3d      	cmp	r3, #61	; 0x3d
 800361c:	d108      	bne.n	8003630 <Set_uint8+0x4c>
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	b29a      	uxth	r2, r3
 8003622:	8afb      	ldrh	r3, [r7, #22]
 8003624:	4413      	add	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	3301      	adds	r3, #1
 800362a:	82bb      	strh	r3, [r7, #20]
 800362c:	2364      	movs	r3, #100	; 0x64
 800362e:	82fb      	strh	r3, [r7, #22]
 8003630:	8afb      	ldrh	r3, [r7, #22]
 8003632:	3301      	adds	r3, #1
 8003634:	82fb      	strh	r3, [r7, #22]
 8003636:	8afb      	ldrh	r3, [r7, #22]
 8003638:	2b63      	cmp	r3, #99	; 0x63
 800363a:	d9e2      	bls.n	8003602 <Set_uint8+0x1e>
	data=scan_num32(equal);
 800363c:	8abb      	ldrh	r3, [r7, #20]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fe55 	bl	80032f0 <scan_num32>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4613      	mov	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
	if(data>255)CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2bff      	cmp	r3, #255	; 0xff
 8003652:	d904      	bls.n	800365e <Set_uint8+0x7a>
 8003654:	2117      	movs	r1, #23
 8003656:	480a      	ldr	r0, [pc, #40]	; (8003680 <Set_uint8+0x9c>)
 8003658:	f015 fee4 	bl	8019424 <CDC_Transmit_FS>
	else
	{
		arr[index]=data;
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}
 800365c:	e009      	b.n	8003672 <Set_uint8+0x8e>
		arr[index]=data;
 800365e:	8a7b      	ldrh	r3, [r7, #18]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800366a:	2104      	movs	r1, #4
 800366c:	4805      	ldr	r0, [pc, #20]	; (8003684 <Set_uint8+0xa0>)
 800366e:	f015 fed9 	bl	8019424 <CDC_Transmit_FS>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20005b64 	.word	0x20005b64
 8003680:	08021cd4 	.word	0x08021cd4
 8003684:	08021cec 	.word	0x08021cec

08003688 <Set_int8>:
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}

void Set_int8(int8_t*arr, uint8_t offset)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fec2 	bl	8003420 <scan_num16>
 800369c:	4603      	mov	r3, r0
 800369e:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80036a0:	2300      	movs	r3, #0
 80036a2:	82fb      	strh	r3, [r7, #22]
 80036a4:	e019      	b.n	80036da <Set_int8+0x52>
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	8afb      	ldrh	r3, [r7, #22]
 80036aa:	4413      	add	r3, r2
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <Set_int8+0xa0>)
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d006      	beq.n	80036c2 <Set_int8+0x3a>
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	8afb      	ldrh	r3, [r7, #22]
 80036b8:	4413      	add	r3, r2
 80036ba:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <Set_int8+0xa0>)
 80036bc:	5cd3      	ldrb	r3, [r2, r3]
 80036be:	2b3d      	cmp	r3, #61	; 0x3d
 80036c0:	d108      	bne.n	80036d4 <Set_int8+0x4c>
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	8afb      	ldrh	r3, [r7, #22]
 80036c8:	4413      	add	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	82bb      	strh	r3, [r7, #20]
 80036d0:	2364      	movs	r3, #100	; 0x64
 80036d2:	82fb      	strh	r3, [r7, #22]
 80036d4:	8afb      	ldrh	r3, [r7, #22]
 80036d6:	3301      	adds	r3, #1
 80036d8:	82fb      	strh	r3, [r7, #22]
 80036da:	8afb      	ldrh	r3, [r7, #22]
 80036dc:	2b63      	cmp	r3, #99	; 0x63
 80036de:	d9e2      	bls.n	80036a6 <Set_int8+0x1e>
	data=scan_num32(equal);
 80036e0:	8abb      	ldrh	r3, [r7, #20]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fe03 	bl	80032f0 <scan_num32>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4613      	mov	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
	if((data>127)||(data<-127))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b7f      	cmp	r3, #127	; 0x7f
 80036f6:	d803      	bhi.n	8003700 <Set_int8+0x78>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80036fe:	d804      	bhi.n	800370a <Set_int8+0x82>
 8003700:	2117      	movs	r1, #23
 8003702:	480a      	ldr	r0, [pc, #40]	; (800372c <Set_int8+0xa4>)
 8003704:	f015 fe8e 	bl	8019424 <CDC_Transmit_FS>
 8003708:	e00a      	b.n	8003720 <Set_int8+0x98>
	else
	{
		arr[index]=data;
 800370a:	8a7b      	ldrh	r3, [r7, #18]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	b252      	sxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003716:	2104      	movs	r1, #4
 8003718:	4805      	ldr	r0, [pc, #20]	; (8003730 <Set_int8+0xa8>)
 800371a:	f015 fe83 	bl	8019424 <CDC_Transmit_FS>
	}
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20005b64 	.word	0x20005b64
 800372c:	08021cd4 	.word	0x08021cd4
 8003730:	08021cec 	.word	0x08021cec

08003734 <Set_int16>:

void Set_int16(int16_t*arr, uint8_t offset)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fe6c 	bl	8003420 <scan_num16>
 8003748:	4603      	mov	r3, r0
 800374a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800374c:	2300      	movs	r3, #0
 800374e:	82fb      	strh	r3, [r7, #22]
 8003750:	e019      	b.n	8003786 <Set_int16+0x52>
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	8afb      	ldrh	r3, [r7, #22]
 8003756:	4413      	add	r3, r2
 8003758:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <Set_int16+0xa4>)
 800375a:	5cd3      	ldrb	r3, [r2, r3]
 800375c:	2b20      	cmp	r3, #32
 800375e:	d006      	beq.n	800376e <Set_int16+0x3a>
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	8afb      	ldrh	r3, [r7, #22]
 8003764:	4413      	add	r3, r2
 8003766:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <Set_int16+0xa4>)
 8003768:	5cd3      	ldrb	r3, [r2, r3]
 800376a:	2b3d      	cmp	r3, #61	; 0x3d
 800376c:	d108      	bne.n	8003780 <Set_int16+0x4c>
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	b29a      	uxth	r2, r3
 8003772:	8afb      	ldrh	r3, [r7, #22]
 8003774:	4413      	add	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	82bb      	strh	r3, [r7, #20]
 800377c:	2364      	movs	r3, #100	; 0x64
 800377e:	82fb      	strh	r3, [r7, #22]
 8003780:	8afb      	ldrh	r3, [r7, #22]
 8003782:	3301      	adds	r3, #1
 8003784:	82fb      	strh	r3, [r7, #22]
 8003786:	8afb      	ldrh	r3, [r7, #22]
 8003788:	2b63      	cmp	r3, #99	; 0x63
 800378a:	d9e2      	bls.n	8003752 <Set_int16+0x1e>
	data=scan_num32(equal);
 800378c:	8abb      	ldrh	r3, [r7, #20]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fdad 	bl	80032f0 <scan_num32>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4613      	mov	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
	if((data>32767)||(data<-32767))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a4:	d203      	bcs.n	80037ae <Set_int16+0x7a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80037ac:	d804      	bhi.n	80037b8 <Set_int16+0x84>
 80037ae:	2117      	movs	r1, #23
 80037b0:	480a      	ldr	r0, [pc, #40]	; (80037dc <Set_int16+0xa8>)
 80037b2:	f015 fe37 	bl	8019424 <CDC_Transmit_FS>
 80037b6:	e00b      	b.n	80037d0 <Set_int16+0x9c>
	else
	{
		arr[index]=data;
 80037b8:	8a7b      	ldrh	r3, [r7, #18]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	b212      	sxth	r2, r2
 80037c4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80037c6:	2104      	movs	r1, #4
 80037c8:	4805      	ldr	r0, [pc, #20]	; (80037e0 <Set_int16+0xac>)
 80037ca:	f015 fe2b 	bl	8019424 <CDC_Transmit_FS>
	}
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20005b64 	.word	0x20005b64
 80037dc:	08021cd4 	.word	0x08021cd4
 80037e0:	08021cec 	.word	0x08021cec

080037e4 <Set_int32>:

void Set_int32(int32_t*arr, uint8_t offset)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int64_t data;
	index=scan_num16(offset);
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fe14 	bl	8003420 <scan_num16>
 80037f8:	4603      	mov	r3, r0
 80037fa:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80037fc:	2300      	movs	r3, #0
 80037fe:	82fb      	strh	r3, [r7, #22]
 8003800:	e019      	b.n	8003836 <Set_int32+0x52>
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	8afb      	ldrh	r3, [r7, #22]
 8003806:	4413      	add	r3, r2
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <Set_int32+0xb8>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	2b20      	cmp	r3, #32
 800380e:	d006      	beq.n	800381e <Set_int32+0x3a>
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	8afb      	ldrh	r3, [r7, #22]
 8003814:	4413      	add	r3, r2
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <Set_int32+0xb8>)
 8003818:	5cd3      	ldrb	r3, [r2, r3]
 800381a:	2b3d      	cmp	r3, #61	; 0x3d
 800381c:	d108      	bne.n	8003830 <Set_int32+0x4c>
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	b29a      	uxth	r2, r3
 8003822:	8afb      	ldrh	r3, [r7, #22]
 8003824:	4413      	add	r3, r2
 8003826:	b29b      	uxth	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	82bb      	strh	r3, [r7, #20]
 800382c:	2364      	movs	r3, #100	; 0x64
 800382e:	82fb      	strh	r3, [r7, #22]
 8003830:	8afb      	ldrh	r3, [r7, #22]
 8003832:	3301      	adds	r3, #1
 8003834:	82fb      	strh	r3, [r7, #22]
 8003836:	8afb      	ldrh	r3, [r7, #22]
 8003838:	2b63      	cmp	r3, #99	; 0x63
 800383a:	d9e2      	bls.n	8003802 <Set_int32+0x1e>
	data=scan_num32(equal);
 800383c:	8abb      	ldrh	r3, [r7, #20]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fd55 	bl	80032f0 <scan_num32>
 8003846:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if((data>2147483647)||(data<-2147483647))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800384a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800384e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	4290      	cmp	r0, r2
 8003858:	eb71 0303 	sbcs.w	r3, r1, r3
 800385c:	db09      	blt.n	8003872 <Set_int32+0x8e>
 800385e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003862:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003866:	f04f 31ff 	mov.w	r1, #4294967295
 800386a:	4290      	cmp	r0, r2
 800386c:	eb71 0303 	sbcs.w	r3, r1, r3
 8003870:	db04      	blt.n	800387c <Set_int32+0x98>
 8003872:	2117      	movs	r1, #23
 8003874:	480a      	ldr	r0, [pc, #40]	; (80038a0 <Set_int32+0xbc>)
 8003876:	f015 fdd5 	bl	8019424 <CDC_Transmit_FS>
 800387a:	e00a      	b.n	8003892 <Set_int32+0xae>
	else
	{
		arr[index]=(int32_t)data;
 800387c:	8a7b      	ldrh	r3, [r7, #18]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003888:	2104      	movs	r1, #4
 800388a:	4806      	ldr	r0, [pc, #24]	; (80038a4 <Set_int32+0xc0>)
 800388c:	f015 fdca 	bl	8019424 <CDC_Transmit_FS>
	}

//	arr[index]=data;
//	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20005b64 	.word	0x20005b64
 80038a0:	08021cd4 	.word	0x08021cd4
 80038a4:	08021cec 	.word	0x08021cec

080038a8 <Set_uint32>:

void Set_uint32(uint32_t*arr, uint8_t offset)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int32_t data;
	index=scan_num16(offset);
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fdb2 	bl	8003420 <scan_num16>
 80038bc:	4603      	mov	r3, r0
 80038be:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80038c0:	2300      	movs	r3, #0
 80038c2:	82fb      	strh	r3, [r7, #22]
 80038c4:	e019      	b.n	80038fa <Set_uint32+0x52>
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	4413      	add	r3, r2
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <Set_uint32+0x88>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d006      	beq.n	80038e2 <Set_uint32+0x3a>
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	8afb      	ldrh	r3, [r7, #22]
 80038d8:	4413      	add	r3, r2
 80038da:	4a15      	ldr	r2, [pc, #84]	; (8003930 <Set_uint32+0x88>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	2b3d      	cmp	r3, #61	; 0x3d
 80038e0:	d108      	bne.n	80038f4 <Set_uint32+0x4c>
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	8afb      	ldrh	r3, [r7, #22]
 80038e8:	4413      	add	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	82bb      	strh	r3, [r7, #20]
 80038f0:	2364      	movs	r3, #100	; 0x64
 80038f2:	82fb      	strh	r3, [r7, #22]
 80038f4:	8afb      	ldrh	r3, [r7, #22]
 80038f6:	3301      	adds	r3, #1
 80038f8:	82fb      	strh	r3, [r7, #22]
 80038fa:	8afb      	ldrh	r3, [r7, #22]
 80038fc:	2b63      	cmp	r3, #99	; 0x63
 80038fe:	d9e2      	bls.n	80038c6 <Set_uint32+0x1e>
	data=scan_num32(equal);
 8003900:	8abb      	ldrh	r3, [r7, #20]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fcf3 	bl	80032f0 <scan_num32>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4613      	mov	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
	arr[index]=data;
 8003912:	8a7b      	ldrh	r3, [r7, #18]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800391e:	2104      	movs	r1, #4
 8003920:	4804      	ldr	r0, [pc, #16]	; (8003934 <Set_uint32+0x8c>)
 8003922:	f015 fd7f 	bl	8019424 <CDC_Transmit_FS>
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20005b64 	.word	0x20005b64
 8003934:	08021cec 	.word	0x08021cec

08003938 <Set_float>:

void Set_float(float*arr, uint8_t offset)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	float data;
	index=scan_num16(offset);
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fd6a 	bl	8003420 <scan_num16>
 800394c:	4603      	mov	r3, r0
 800394e:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003950:	2300      	movs	r3, #0
 8003952:	82fb      	strh	r3, [r7, #22]
 8003954:	e019      	b.n	800398a <Set_float+0x52>
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	8afb      	ldrh	r3, [r7, #22]
 800395a:	4413      	add	r3, r2
 800395c:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <Set_float+0x94>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	2b20      	cmp	r3, #32
 8003962:	d006      	beq.n	8003972 <Set_float+0x3a>
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	4413      	add	r3, r2
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <Set_float+0x94>)
 800396c:	5cd3      	ldrb	r3, [r2, r3]
 800396e:	2b3d      	cmp	r3, #61	; 0x3d
 8003970:	d108      	bne.n	8003984 <Set_float+0x4c>
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	b29a      	uxth	r2, r3
 8003976:	8afb      	ldrh	r3, [r7, #22]
 8003978:	4413      	add	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	82bb      	strh	r3, [r7, #20]
 8003980:	2364      	movs	r3, #100	; 0x64
 8003982:	82fb      	strh	r3, [r7, #22]
 8003984:	8afb      	ldrh	r3, [r7, #22]
 8003986:	3301      	adds	r3, #1
 8003988:	82fb      	strh	r3, [r7, #22]
 800398a:	8afb      	ldrh	r3, [r7, #22]
 800398c:	2b63      	cmp	r3, #99	; 0x63
 800398e:	d9e2      	bls.n	8003956 <Set_float+0x1e>
	data=scan_float(equal);
 8003990:	8abb      	ldrh	r3, [r7, #20]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fd27 	bl	80033e8 <scan_float>
 800399a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(!BSFlag){
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <Set_float+0x98>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <Set_float+0x84>
	arr[index]=data;
 80039a6:	8a7b      	ldrh	r3, [r7, #18]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);}
 80039b2:	2104      	movs	r1, #4
 80039b4:	4807      	ldr	r0, [pc, #28]	; (80039d4 <Set_float+0x9c>)
 80039b6:	f015 fd35 	bl	8019424 <CDC_Transmit_FS>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
}
 80039ba:	e003      	b.n	80039c4 <Set_float+0x8c>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80039bc:	2117      	movs	r1, #23
 80039be:	4806      	ldr	r0, [pc, #24]	; (80039d8 <Set_float+0xa0>)
 80039c0:	f015 fd30 	bl	8019424 <CDC_Transmit_FS>
}
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20005b64 	.word	0x20005b64
 80039d0:	200008bc 	.word	0x200008bc
 80039d4:	08021cec 	.word	0x08021cec
 80039d8:	08021cd4 	.word	0x08021cd4

080039dc <Get_uint8>:




void Get_uint8(uint8_t*arr, uint8_t offset, uint16_t size)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
 80039e8:	4613      	mov	r3, r2
 80039ea:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 80039ec:	2300      	movs	r3, #0
 80039ee:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fd14 	bl	8003420 <scan_num16>
 80039f8:	4603      	mov	r3, r0
 80039fa:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 80039fc:	89bb      	ldrh	r3, [r7, #12]
 80039fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d132      	bne.n	8003a6c <Get_uint8+0x90>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003a06:	210e      	movs	r1, #14
 8003a08:	482a      	ldr	r0, [pc, #168]	; (8003ab4 <Get_uint8+0xd8>)
 8003a0a:	f015 fd0b 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	81fb      	strh	r3, [r7, #14]
 8003a12:	e022      	b.n	8003a5a <Get_uint8+0x7e>
		{
			if(!CSV_format)sprintf(RAM, "%d\t", arr[i]);
 8003a14:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <Get_uint8+0xdc>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <Get_uint8+0x54>
 8003a1c:	89fb      	ldrh	r3, [r7, #14]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	4925      	ldr	r1, [pc, #148]	; (8003abc <Get_uint8+0xe0>)
 8003a28:	4825      	ldr	r0, [pc, #148]	; (8003ac0 <Get_uint8+0xe4>)
 8003a2a:	f01a f971 	bl	801dd10 <siprintf>
 8003a2e:	e008      	b.n	8003a42 <Get_uint8+0x66>
			else sprintf(RAM, "%d;", arr[i]);
 8003a30:	89fb      	ldrh	r3, [r7, #14]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4922      	ldr	r1, [pc, #136]	; (8003ac4 <Get_uint8+0xe8>)
 8003a3c:	4820      	ldr	r0, [pc, #128]	; (8003ac0 <Get_uint8+0xe4>)
 8003a3e:	f01a f967 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003a42:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <Get_uint8+0xe4>)
 8003a44:	f7fc fbd4 	bl	80001f0 <strlen>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	481c      	ldr	r0, [pc, #112]	; (8003ac0 <Get_uint8+0xe4>)
 8003a50:	f015 fce8 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	3301      	adds	r3, #1
 8003a58:	81fb      	strh	r3, [r7, #14]
 8003a5a:	89fa      	ldrh	r2, [r7, #14]
 8003a5c:	883b      	ldrh	r3, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d3d8      	bcc.n	8003a14 <Get_uint8+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003a62:	2102      	movs	r1, #2
 8003a64:	4818      	ldr	r0, [pc, #96]	; (8003ac8 <Get_uint8+0xec>)
 8003a66:	f015 fcdd 	bl	8019424 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%d\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003a6a:	e01e      	b.n	8003aaa <Get_uint8+0xce>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003a6c:	883a      	ldrh	r2, [r7, #0]
 8003a6e:	89bb      	ldrh	r3, [r7, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d808      	bhi.n	8003a86 <Get_uint8+0xaa>
 8003a74:	4b15      	ldr	r3, [pc, #84]	; (8003acc <Get_uint8+0xf0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2209      	movs	r2, #9
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f015 fcd0 	bl	8019424 <CDC_Transmit_FS>
}
 8003a84:	e011      	b.n	8003aaa <Get_uint8+0xce>
			sprintf(RAM, "%d\r\n", arr[index]);
 8003a86:	89bb      	ldrh	r3, [r7, #12]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	490f      	ldr	r1, [pc, #60]	; (8003ad0 <Get_uint8+0xf4>)
 8003a92:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <Get_uint8+0xe4>)
 8003a94:	f01a f93c 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003a98:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <Get_uint8+0xe4>)
 8003a9a:	f7fc fba9 	bl	80001f0 <strlen>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <Get_uint8+0xe4>)
 8003aa6:	f015 fcbd 	bl	8019424 <CDC_Transmit_FS>
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	08021cf4 	.word	0x08021cf4
 8003ab8:	200008b7 	.word	0x200008b7
 8003abc:	08021d04 	.word	0x08021d04
 8003ac0:	20002088 	.word	0x20002088
 8003ac4:	08021d08 	.word	0x08021d08
 8003ac8:	08021c70 	.word	0x08021c70
 8003acc:	20000154 	.word	0x20000154
 8003ad0:	08021d0c 	.word	0x08021d0c

08003ad4 <Get_int32>:


void Get_int32(int32_t*arr, uint8_t offset, uint16_t size)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	70fb      	strb	r3, [r7, #3]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fc98 	bl	8003420 <scan_num16>
 8003af0:	4603      	mov	r3, r0
 8003af2:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003af4:	89bb      	ldrh	r3, [r7, #12]
 8003af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d134      	bne.n	8003b68 <Get_int32+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003afe:	210e      	movs	r1, #14
 8003b00:	482b      	ldr	r0, [pc, #172]	; (8003bb0 <Get_int32+0xdc>)
 8003b02:	f015 fc8f 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	81fb      	strh	r3, [r7, #14]
 8003b0a:	e024      	b.n	8003b56 <Get_int32+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%i\t", arr[i]);
 8003b0c:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <Get_int32+0xe0>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <Get_int32+0x56>
 8003b14:	89fb      	ldrh	r3, [r7, #14]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4925      	ldr	r1, [pc, #148]	; (8003bb8 <Get_int32+0xe4>)
 8003b22:	4826      	ldr	r0, [pc, #152]	; (8003bbc <Get_int32+0xe8>)
 8003b24:	f01a f8f4 	bl	801dd10 <siprintf>
 8003b28:	e009      	b.n	8003b3e <Get_int32+0x6a>
			else sprintf(RAM, "%i;", arr[i]);
 8003b2a:	89fb      	ldrh	r3, [r7, #14]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	4922      	ldr	r1, [pc, #136]	; (8003bc0 <Get_int32+0xec>)
 8003b38:	4820      	ldr	r0, [pc, #128]	; (8003bbc <Get_int32+0xe8>)
 8003b3a:	f01a f8e9 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003b3e:	481f      	ldr	r0, [pc, #124]	; (8003bbc <Get_int32+0xe8>)
 8003b40:	f7fc fb56 	bl	80001f0 <strlen>
 8003b44:	4603      	mov	r3, r0
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	4619      	mov	r1, r3
 8003b4a:	481c      	ldr	r0, [pc, #112]	; (8003bbc <Get_int32+0xe8>)
 8003b4c:	f015 fc6a 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003b50:	89fb      	ldrh	r3, [r7, #14]
 8003b52:	3301      	adds	r3, #1
 8003b54:	81fb      	strh	r3, [r7, #14]
 8003b56:	89fa      	ldrh	r2, [r7, #14]
 8003b58:	883b      	ldrh	r3, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3d6      	bcc.n	8003b0c <Get_int32+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4818      	ldr	r0, [pc, #96]	; (8003bc4 <Get_int32+0xf0>)
 8003b62:	f015 fc5f 	bl	8019424 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%i\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003b66:	e01f      	b.n	8003ba8 <Get_int32+0xd4>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003b68:	883a      	ldrh	r2, [r7, #0]
 8003b6a:	89bb      	ldrh	r3, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d808      	bhi.n	8003b82 <Get_int32+0xae>
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <Get_int32+0xf4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2209      	movs	r2, #9
 8003b76:	b292      	uxth	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f015 fc52 	bl	8019424 <CDC_Transmit_FS>
}
 8003b80:	e012      	b.n	8003ba8 <Get_int32+0xd4>
			sprintf(RAM, "%i\r\n", arr[index]);
 8003b82:	89bb      	ldrh	r3, [r7, #12]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	490f      	ldr	r1, [pc, #60]	; (8003bcc <Get_int32+0xf8>)
 8003b90:	480a      	ldr	r0, [pc, #40]	; (8003bbc <Get_int32+0xe8>)
 8003b92:	f01a f8bd 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003b96:	4809      	ldr	r0, [pc, #36]	; (8003bbc <Get_int32+0xe8>)
 8003b98:	f7fc fb2a 	bl	80001f0 <strlen>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4806      	ldr	r0, [pc, #24]	; (8003bbc <Get_int32+0xe8>)
 8003ba4:	f015 fc3e 	bl	8019424 <CDC_Transmit_FS>
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08021cf4 	.word	0x08021cf4
 8003bb4:	200008b7 	.word	0x200008b7
 8003bb8:	08021d14 	.word	0x08021d14
 8003bbc:	20002088 	.word	0x20002088
 8003bc0:	08021d18 	.word	0x08021d18
 8003bc4:	08021c70 	.word	0x08021c70
 8003bc8:	20000154 	.word	0x20000154
 8003bcc:	08021d1c 	.word	0x08021d1c

08003bd0 <Get_float>:

void Get_float(float*arr, uint8_t offset, uint16_t size)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003be0:	2300      	movs	r3, #0
 8003be2:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fc1a 	bl	8003420 <scan_num16>
 8003bec:	4603      	mov	r3, r0
 8003bee:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003bf0:	89bb      	ldrh	r3, [r7, #12]
 8003bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d13c      	bne.n	8003c74 <Get_float+0xa4>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003bfa:	210e      	movs	r1, #14
 8003bfc:	4831      	ldr	r0, [pc, #196]	; (8003cc4 <Get_float+0xf4>)
 8003bfe:	f015 fc11 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	81fb      	strh	r3, [r7, #14]
 8003c06:	e02c      	b.n	8003c62 <Get_float+0x92>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <Get_float+0xf8>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10e      	bne.n	8003c2e <Get_float+0x5e>
 8003c10:	89fb      	ldrh	r3, [r7, #14]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc fca4 	bl	8000568 <__aeabi_f2d>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4929      	ldr	r1, [pc, #164]	; (8003ccc <Get_float+0xfc>)
 8003c26:	482a      	ldr	r0, [pc, #168]	; (8003cd0 <Get_float+0x100>)
 8003c28:	f01a f872 	bl	801dd10 <siprintf>
 8003c2c:	e00d      	b.n	8003c4a <Get_float+0x7a>
			else sprintf(RAM, "%f;", arr[i]);
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fc fc95 	bl	8000568 <__aeabi_f2d>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4924      	ldr	r1, [pc, #144]	; (8003cd4 <Get_float+0x104>)
 8003c44:	4822      	ldr	r0, [pc, #136]	; (8003cd0 <Get_float+0x100>)
 8003c46:	f01a f863 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003c4a:	4821      	ldr	r0, [pc, #132]	; (8003cd0 <Get_float+0x100>)
 8003c4c:	f7fc fad0 	bl	80001f0 <strlen>
 8003c50:	4603      	mov	r3, r0
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	481e      	ldr	r0, [pc, #120]	; (8003cd0 <Get_float+0x100>)
 8003c58:	f015 fbe4 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003c5c:	89fb      	ldrh	r3, [r7, #14]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	81fb      	strh	r3, [r7, #14]
 8003c62:	89fa      	ldrh	r2, [r7, #14]
 8003c64:	883b      	ldrh	r3, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d3ce      	bcc.n	8003c08 <Get_float+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	481a      	ldr	r0, [pc, #104]	; (8003cd8 <Get_float+0x108>)
 8003c6e:	f015 fbd9 	bl	8019424 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003c72:	e023      	b.n	8003cbc <Get_float+0xec>
		if(index>size-1)
 8003c74:	883a      	ldrh	r2, [r7, #0]
 8003c76:	89bb      	ldrh	r3, [r7, #12]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d808      	bhi.n	8003c8e <Get_float+0xbe>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003c7c:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <Get_float+0x10c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2209      	movs	r2, #9
 8003c82:	b292      	uxth	r2, r2
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f015 fbcc 	bl	8019424 <CDC_Transmit_FS>
}
 8003c8c:	e016      	b.n	8003cbc <Get_float+0xec>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003c8e:	89bb      	ldrh	r3, [r7, #12]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fc65 	bl	8000568 <__aeabi_f2d>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	490f      	ldr	r1, [pc, #60]	; (8003ce0 <Get_float+0x110>)
 8003ca4:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <Get_float+0x100>)
 8003ca6:	f01a f833 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003caa:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <Get_float+0x100>)
 8003cac:	f7fc faa0 	bl	80001f0 <strlen>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4806      	ldr	r0, [pc, #24]	; (8003cd0 <Get_float+0x100>)
 8003cb8:	f015 fbb4 	bl	8019424 <CDC_Transmit_FS>
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	08021cf4 	.word	0x08021cf4
 8003cc8:	200008b7 	.word	0x200008b7
 8003ccc:	08021d24 	.word	0x08021d24
 8003cd0:	20002088 	.word	0x20002088
 8003cd4:	08021d28 	.word	0x08021d28
 8003cd8:	08021c70 	.word	0x08021c70
 8003cdc:	20000154 	.word	0x20000154
 8003ce0:	08021d2c 	.word	0x08021d2c

08003ce4 <Get_double>:


void Get_double(double*arr, uint8_t offset, uint16_t size)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fb90 	bl	8003420 <scan_num16>
 8003d00:	4603      	mov	r3, r0
 8003d02:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003d04:	89bb      	ldrh	r3, [r7, #12]
 8003d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d134      	bne.n	8003d78 <Get_double+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003d0e:	210e      	movs	r1, #14
 8003d10:	482b      	ldr	r0, [pc, #172]	; (8003dc0 <Get_double+0xdc>)
 8003d12:	f015 fb87 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	81fb      	strh	r3, [r7, #14]
 8003d1a:	e024      	b.n	8003d66 <Get_double+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <Get_double+0xe0>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <Get_double+0x56>
 8003d24:	89fb      	ldrh	r3, [r7, #14]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	4925      	ldr	r1, [pc, #148]	; (8003dc8 <Get_double+0xe4>)
 8003d32:	4826      	ldr	r0, [pc, #152]	; (8003dcc <Get_double+0xe8>)
 8003d34:	f019 ffec 	bl	801dd10 <siprintf>
 8003d38:	e009      	b.n	8003d4e <Get_double+0x6a>
			else sprintf(RAM, "%f;", (double)arr[i]);
 8003d3a:	89fb      	ldrh	r3, [r7, #14]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	4922      	ldr	r1, [pc, #136]	; (8003dd0 <Get_double+0xec>)
 8003d48:	4820      	ldr	r0, [pc, #128]	; (8003dcc <Get_double+0xe8>)
 8003d4a:	f019 ffe1 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003d4e:	481f      	ldr	r0, [pc, #124]	; (8003dcc <Get_double+0xe8>)
 8003d50:	f7fc fa4e 	bl	80001f0 <strlen>
 8003d54:	4603      	mov	r3, r0
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	481c      	ldr	r0, [pc, #112]	; (8003dcc <Get_double+0xe8>)
 8003d5c:	f015 fb62 	bl	8019424 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003d60:	89fb      	ldrh	r3, [r7, #14]
 8003d62:	3301      	adds	r3, #1
 8003d64:	81fb      	strh	r3, [r7, #14]
 8003d66:	89fa      	ldrh	r2, [r7, #14]
 8003d68:	883b      	ldrh	r3, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d3d6      	bcc.n	8003d1c <Get_double+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4818      	ldr	r0, [pc, #96]	; (8003dd4 <Get_double+0xf0>)
 8003d72:	f015 fb57 	bl	8019424 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003d76:	e01f      	b.n	8003db8 <Get_double+0xd4>
		if(index>size-1)
 8003d78:	883a      	ldrh	r2, [r7, #0]
 8003d7a:	89bb      	ldrh	r3, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d808      	bhi.n	8003d92 <Get_double+0xae>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <Get_double+0xf4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2209      	movs	r2, #9
 8003d86:	b292      	uxth	r2, r2
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f015 fb4a 	bl	8019424 <CDC_Transmit_FS>
}
 8003d90:	e012      	b.n	8003db8 <Get_double+0xd4>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003d92:	89bb      	ldrh	r3, [r7, #12]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	490f      	ldr	r1, [pc, #60]	; (8003ddc <Get_double+0xf8>)
 8003da0:	480a      	ldr	r0, [pc, #40]	; (8003dcc <Get_double+0xe8>)
 8003da2:	f019 ffb5 	bl	801dd10 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003da6:	4809      	ldr	r0, [pc, #36]	; (8003dcc <Get_double+0xe8>)
 8003da8:	f7fc fa22 	bl	80001f0 <strlen>
 8003dac:	4603      	mov	r3, r0
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	4806      	ldr	r0, [pc, #24]	; (8003dcc <Get_double+0xe8>)
 8003db4:	f015 fb36 	bl	8019424 <CDC_Transmit_FS>
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	08021cf4 	.word	0x08021cf4
 8003dc4:	200008b7 	.word	0x200008b7
 8003dc8:	08021d24 	.word	0x08021d24
 8003dcc:	20002088 	.word	0x20002088
 8003dd0:	08021d28 	.word	0x08021d28
 8003dd4:	08021c70 	.word	0x08021c70
 8003dd8:	20000154 	.word	0x20000154
 8003ddc:	08021d2c 	.word	0x08021d2c

08003de0 <Parser_process>:




void Parser_process(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
	uint16_t RES=0,i;
 8003de6:	2300      	movs	r3, #0
 8003de8:	80bb      	strh	r3, [r7, #4]

	if(BLE_bridge!=0)
 8003dea:	4bb4      	ldr	r3, [pc, #720]	; (80040bc <Parser_process+0x2dc>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d015      	beq.n	8003e1e <Parser_process+0x3e>
	{
		if(usart1_counter!=0)
 8003df2:	4bb3      	ldr	r3, [pc, #716]	; (80040c0 <Parser_process+0x2e0>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <Parser_process+0x3e>
		{
			if(rx_cmplt==0)
 8003dfa:	4bb2      	ldr	r3, [pc, #712]	; (80040c4 <Parser_process+0x2e4>)
 8003dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10c      	bne.n	8003e1e <Parser_process+0x3e>
			{
				CDC_Transmit_FS((unsigned char*)usart1_data, usart1_counter);
 8003e04:	4bae      	ldr	r3, [pc, #696]	; (80040c0 <Parser_process+0x2e0>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	48ae      	ldr	r0, [pc, #696]	; (80040c8 <Parser_process+0x2e8>)
 8003e0e:	f015 fb09 	bl	8019424 <CDC_Transmit_FS>
				usart1_counter=0;
 8003e12:	4bab      	ldr	r3, [pc, #684]	; (80040c0 <Parser_process+0x2e0>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
				rx_cmplt=-1;
 8003e18:	4baa      	ldr	r3, [pc, #680]	; (80040c4 <Parser_process+0x2e4>)
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(USBTimeOutRX>0)USBTimeOutRX--;
 8003e1e:	4bab      	ldr	r3, [pc, #684]	; (80040cc <Parser_process+0x2ec>)
 8003e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	dd08      	ble.n	8003e3a <Parser_process+0x5a>
 8003e28:	4ba8      	ldr	r3, [pc, #672]	; (80040cc <Parser_process+0x2ec>)
 8003e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	b21a      	sxth	r2, r3
 8003e36:	4ba5      	ldr	r3, [pc, #660]	; (80040cc <Parser_process+0x2ec>)
 8003e38:	801a      	strh	r2, [r3, #0]
	if(USBTimeOutRX==0)
 8003e3a:	4ba4      	ldr	r3, [pc, #656]	; (80040cc <Parser_process+0x2ec>)
 8003e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 8361 	bne.w	8004508 <Parser_process+0x728>
	{
		// Bluetooth bridge
		if(BLE_bridge!=0)
 8003e46:	4b9d      	ldr	r3, [pc, #628]	; (80040bc <Parser_process+0x2dc>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d024      	beq.n	8003e98 <Parser_process+0xb8>
		{
			for(i=0;i<rxcntr;i++)bluetoothbuf[i]=rx_buf[i];
 8003e4e:	2300      	movs	r3, #0
 8003e50:	80fb      	strh	r3, [r7, #6]
 8003e52:	e008      	b.n	8003e66 <Parser_process+0x86>
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	499d      	ldr	r1, [pc, #628]	; (80040d0 <Parser_process+0x2f0>)
 8003e5a:	5c89      	ldrb	r1, [r1, r2]
 8003e5c:	4a9d      	ldr	r2, [pc, #628]	; (80040d4 <Parser_process+0x2f4>)
 8003e5e:	54d1      	strb	r1, [r2, r3]
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	3301      	adds	r3, #1
 8003e64:	80fb      	strh	r3, [r7, #6]
 8003e66:	4b9c      	ldr	r3, [pc, #624]	; (80040d8 <Parser_process+0x2f8>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3f1      	bcc.n	8003e54 <Parser_process+0x74>
			bluetoothcntr=rxcntr;
 8003e70:	4b99      	ldr	r3, [pc, #612]	; (80040d8 <Parser_process+0x2f8>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4b99      	ldr	r3, [pc, #612]	; (80040dc <Parser_process+0x2fc>)
 8003e78:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)rx_buf, rxcntr, 1000);
 8003e7a:	4b97      	ldr	r3, [pc, #604]	; (80040d8 <Parser_process+0x2f8>)
 8003e7c:	881a      	ldrh	r2, [r3, #0]
 8003e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e82:	4993      	ldr	r1, [pc, #588]	; (80040d0 <Parser_process+0x2f0>)
 8003e84:	4896      	ldr	r0, [pc, #600]	; (80040e0 <Parser_process+0x300>)
 8003e86:	f00b ffa1 	bl	800fdcc <HAL_UART_Transmit>
			clear_buf();
 8003e8a:	f7ff fa0d 	bl	80032a8 <clear_buf>
			USBTimeOutRX=-1;
 8003e8e:	4b8f      	ldr	r3, [pc, #572]	; (80040cc <Parser_process+0x2ec>)
 8003e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	e337      	b.n	8004508 <Parser_process+0x728>
		}
		// Parser
		else
		{
			switch(parser(0))
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7ff fb4f 	bl	800353c <parser>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	3b02      	subs	r3, #2
 8003ea2:	2b0b      	cmp	r3, #11
 8003ea4:	f200 831d 	bhi.w	80044e2 <Parser_process+0x702>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <Parser_process+0xd0>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	080041dd 	.word	0x080041dd
 8003eb4:	08004359 	.word	0x08004359
 8003eb8:	080044d5 	.word	0x080044d5
 8003ebc:	08004029 	.word	0x08004029
 8003ec0:	08003f9f 	.word	0x08003f9f
 8003ec4:	08003fc1 	.word	0x08003fc1
 8003ec8:	08003fe3 	.word	0x08003fe3
 8003ecc:	08003f51 	.word	0x08003f51
 8003ed0:	08003f6b 	.word	0x08003f6b
 8003ed4:	08003ee1 	.word	0x08003ee1
 8003ed8:	08003f07 	.word	0x08003f07
 8003edc:	08003f01 	.word	0x08003f01
			{
				case 0xFFFF: break;
				case 0xFFFE: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;

				case BL_BRIDGE:
					CDC_Transmit_FS((unsigned char*)"BlueTooth Bridge Enabled", 24);
 8003ee0:	2118      	movs	r1, #24
 8003ee2:	4880      	ldr	r0, [pc, #512]	; (80040e4 <Parser_process+0x304>)
 8003ee4:	f015 fa9e 	bl	8019424 <CDC_Transmit_FS>
					BLE_bridge=1;
 8003ee8:	4b74      	ldr	r3, [pc, #464]	; (80040bc <Parser_process+0x2dc>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
					usart1_counter=0;
 8003eee:	4b74      	ldr	r3, [pc, #464]	; (80040c0 <Parser_process+0x2e0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
					rx_cmplt=-1;
 8003ef4:	4b73      	ldr	r3, [pc, #460]	; (80040c4 <Parser_process+0x2e4>)
 8003ef6:	22ff      	movs	r2, #255	; 0xff
 8003ef8:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003efa:	f7ff f9d5 	bl	80032a8 <clear_buf>
					break;
 8003efe:	e2fb      	b.n	80044f8 <Parser_process+0x718>

				case CREATE:

					clear_buf();
 8003f00:	f7ff f9d2 	bl	80032a8 <clear_buf>
					break;
 8003f04:	e2f8      	b.n	80044f8 <Parser_process+0x718>

				case BL_CONFIG:
					if(BLE_config==1)BLE_config=0;
 8003f06:	4b78      	ldr	r3, [pc, #480]	; (80040e8 <Parser_process+0x308>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d103      	bne.n	8003f16 <Parser_process+0x136>
 8003f0e:	4b76      	ldr	r3, [pc, #472]	; (80040e8 <Parser_process+0x308>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <Parser_process+0x13c>
					else BLE_config=1;
 8003f16:	4b74      	ldr	r3, [pc, #464]	; (80040e8 <Parser_process+0x308>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
					BLueTooth_Configuration(BLE_config);
 8003f1c:	4b72      	ldr	r3, [pc, #456]	; (80040e8 <Parser_process+0x308>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe f8d3 	bl	80020cc <BLueTooth_Configuration>
					sprintf(RAM, "BlueTooth Config = %d", BLE_config);
 8003f26:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <Parser_process+0x308>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	496f      	ldr	r1, [pc, #444]	; (80040ec <Parser_process+0x30c>)
 8003f2e:	4870      	ldr	r0, [pc, #448]	; (80040f0 <Parser_process+0x310>)
 8003f30:	f019 feee 	bl	801dd10 <siprintf>
					CDC_Transmit_FS((unsigned char*)RAM, 20);
 8003f34:	2114      	movs	r1, #20
 8003f36:	486e      	ldr	r0, [pc, #440]	; (80040f0 <Parser_process+0x310>)
 8003f38:	f015 fa74 	bl	8019424 <CDC_Transmit_FS>
					HAL_UART_Transmit(&huart1, (unsigned char*)RAM, 20, 1000);
 8003f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f40:	2214      	movs	r2, #20
 8003f42:	496b      	ldr	r1, [pc, #428]	; (80040f0 <Parser_process+0x310>)
 8003f44:	4866      	ldr	r0, [pc, #408]	; (80040e0 <Parser_process+0x300>)
 8003f46:	f00b ff41 	bl	800fdcc <HAL_UART_Transmit>
					clear_buf();
 8003f4a:	f7ff f9ad 	bl	80032a8 <clear_buf>
					break;
 8003f4e:	e2d3      	b.n	80044f8 <Parser_process+0x718>

				case SELF_CAL:
					clear_buf();
 8003f50:	f7ff f9aa 	bl	80032a8 <clear_buf>
					adc_calibration_mode=self_calibration;
 8003f54:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <Parser_process+0x314>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
					adc_start_calibration=1;
 8003f5a:	4b67      	ldr	r3, [pc, #412]	; (80040f8 <Parser_process+0x318>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003f60:	2102      	movs	r1, #2
 8003f62:	4866      	ldr	r0, [pc, #408]	; (80040fc <Parser_process+0x31c>)
 8003f64:	f015 fa5e 	bl	8019424 <CDC_Transmit_FS>
				break;
 8003f68:	e2c6      	b.n	80044f8 <Parser_process+0x718>
				case SYS_CAL:
					RES=screen;
 8003f6a:	4b65      	ldr	r3, [pc, #404]	; (8004100 <Parser_process+0x320>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	80bb      	strh	r3, [r7, #4]
					Auto_System_Calibration();
 8003f70:	f7fd f9e2 	bl	8001338 <Auto_System_Calibration>
						ADC_Conversion(ADC_SPS);
 8003f74:	4b63      	ldr	r3, [pc, #396]	; (8004104 <Parser_process+0x324>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd f8e7 	bl	800114c <ADC_Conversion>
						LED(0,0,0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	2000      	movs	r0, #0
 8003f84:	f7fe f8f8 	bl	8002178 <LED>
						screen=RES;
 8003f88:	88bb      	ldrh	r3, [r7, #4]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b5c      	ldr	r3, [pc, #368]	; (8004100 <Parser_process+0x320>)
 8003f8e:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003f90:	f7ff f98a 	bl	80032a8 <clear_buf>
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003f94:	2102      	movs	r1, #2
 8003f96:	4859      	ldr	r0, [pc, #356]	; (80040fc <Parser_process+0x31c>)
 8003f98:	f015 fa44 	bl	8019424 <CDC_Transmit_FS>
					break;
 8003f9c:	e2ac      	b.n	80044f8 <Parser_process+0x718>

				case CSV_ON: CSV_format=1; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV enabled", 11); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV enabled", 11, 1000); break;
 8003f9e:	4b5a      	ldr	r3, [pc, #360]	; (8004108 <Parser_process+0x328>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	f7ff f980 	bl	80032a8 <clear_buf>
 8003fa8:	210b      	movs	r1, #11
 8003faa:	4858      	ldr	r0, [pc, #352]	; (800410c <Parser_process+0x32c>)
 8003fac:	f015 fa3a 	bl	8019424 <CDC_Transmit_FS>
 8003fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb4:	220b      	movs	r2, #11
 8003fb6:	4955      	ldr	r1, [pc, #340]	; (800410c <Parser_process+0x32c>)
 8003fb8:	4849      	ldr	r0, [pc, #292]	; (80040e0 <Parser_process+0x300>)
 8003fba:	f00b ff07 	bl	800fdcc <HAL_UART_Transmit>
 8003fbe:	e29b      	b.n	80044f8 <Parser_process+0x718>
				case CSV_OFF: CSV_format=0; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV disabled", 12); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV disabled", 12, 1000); break;
 8003fc0:	4b51      	ldr	r3, [pc, #324]	; (8004108 <Parser_process+0x328>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	f7ff f96f 	bl	80032a8 <clear_buf>
 8003fca:	210c      	movs	r1, #12
 8003fcc:	4850      	ldr	r0, [pc, #320]	; (8004110 <Parser_process+0x330>)
 8003fce:	f015 fa29 	bl	8019424 <CDC_Transmit_FS>
 8003fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fd6:	220c      	movs	r2, #12
 8003fd8:	494d      	ldr	r1, [pc, #308]	; (8004110 <Parser_process+0x330>)
 8003fda:	4841      	ldr	r0, [pc, #260]	; (80040e0 <Parser_process+0x300>)
 8003fdc:	f00b fef6 	bl	800fdcc <HAL_UART_Transmit>
 8003fe0:	e28a      	b.n	80044f8 <Parser_process+0x718>

				case HELP:
					CDC_Transmit_FS((unsigned char*)CSV_ON_instruction, strlen(CSV_ON_instruction));
 8003fe2:	215a      	movs	r1, #90	; 0x5a
 8003fe4:	484b      	ldr	r0, [pc, #300]	; (8004114 <Parser_process+0x334>)
 8003fe6:	f015 fa1d 	bl	8019424 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)CSV_OFF_instruction, strlen(CSV_OFF_instruction));
 8003fea:	215d      	movs	r1, #93	; 0x5d
 8003fec:	484a      	ldr	r0, [pc, #296]	; (8004118 <Parser_process+0x338>)
 8003fee:	f015 fa19 	bl	8019424 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)HELP_instruction, strlen(HELP_instruction));
 8003ff2:	212d      	movs	r1, #45	; 0x2d
 8003ff4:	4849      	ldr	r0, [pc, #292]	; (800411c <Parser_process+0x33c>)
 8003ff6:	f015 fa15 	bl	8019424 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GV_instruction, strlen(GV_instruction));
 8003ffa:	214f      	movs	r1, #79	; 0x4f
 8003ffc:	4848      	ldr	r0, [pc, #288]	; (8004120 <Parser_process+0x340>)
 8003ffe:	f015 fa11 	bl	8019424 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SET_instruction, strlen(SET_instruction));
 8004002:	215e      	movs	r1, #94	; 0x5e
 8004004:	4847      	ldr	r0, [pc, #284]	; (8004124 <Parser_process+0x344>)
 8004006:	f015 fa0d 	bl	8019424 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GET_instruction, strlen(GET_instruction));
 800400a:	215d      	movs	r1, #93	; 0x5d
 800400c:	4846      	ldr	r0, [pc, #280]	; (8004128 <Parser_process+0x348>)
 800400e:	f015 fa09 	bl	8019424 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)ALL_instruction, strlen(ALL_instruction));
 8004012:	2150      	movs	r1, #80	; 0x50
 8004014:	4845      	ldr	r0, [pc, #276]	; (800412c <Parser_process+0x34c>)
 8004016:	f015 fa05 	bl	8019424 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SAVE_instruction, strlen(SAVE_instruction));
 800401a:	2158      	movs	r1, #88	; 0x58
 800401c:	4844      	ldr	r0, [pc, #272]	; (8004130 <Parser_process+0x350>)
 800401e:	f015 fa01 	bl	8019424 <CDC_Transmit_FS>

					clear_buf(); break;
 8004022:	f7ff f941 	bl	80032a8 <clear_buf>
 8004026:	e267      	b.n	80044f8 <Parser_process+0x718>

				case GV:
					if(CSV_format==0)
 8004028:	4b37      	ldr	r3, [pc, #220]	; (8004108 <Parser_process+0x328>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d142      	bne.n	80040b6 <Parser_process+0x2d6>
					{
						CDC_Transmit_FS((unsigned char*)"Available Global Variables:\n", 28);
 8004030:	211c      	movs	r1, #28
 8004032:	4840      	ldr	r0, [pc, #256]	; (8004134 <Parser_process+0x354>)
 8004034:	f015 f9f6 	bl	8019424 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8004038:	2300      	movs	r3, #0
 800403a:	80fb      	strh	r3, [r7, #6]
 800403c:	e037      	b.n	80040ae <Parser_process+0x2ce>
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <Parser_process+0x358>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	461a      	mov	r2, r3
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <Parser_process+0x35c>)
 8004048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404c:	210b      	movs	r1, #11
 800404e:	4618      	mov	r0, r3
 8004050:	f015 f9e8 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 8004054:	2101      	movs	r1, #1
 8004056:	483a      	ldr	r0, [pc, #232]	; (8004140 <Parser_process+0x360>)
 8004058:	f015 f9e4 	bl	8019424 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	4a39      	ldr	r2, [pc, #228]	; (8004144 <Parser_process+0x364>)
 8004060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004064:	461a      	mov	r2, r3
 8004066:	4938      	ldr	r1, [pc, #224]	; (8004148 <Parser_process+0x368>)
 8004068:	4821      	ldr	r0, [pc, #132]	; (80040f0 <Parser_process+0x310>)
 800406a:	f019 fe51 	bl	801dd10 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 800406e:	4820      	ldr	r0, [pc, #128]	; (80040f0 <Parser_process+0x310>)
 8004070:	f7fc f8be 	bl	80001f0 <strlen>
 8004074:	4603      	mov	r3, r0
 8004076:	b29b      	uxth	r3, r3
 8004078:	4619      	mov	r1, r3
 800407a:	481d      	ldr	r0, [pc, #116]	; (80040f0 <Parser_process+0x310>)
 800407c:	f015 f9d2 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 8004080:	2101      	movs	r1, #1
 8004082:	482f      	ldr	r0, [pc, #188]	; (8004140 <Parser_process+0x360>)
 8004084:	f015 f9ce 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	4a30      	ldr	r2, [pc, #192]	; (800414c <Parser_process+0x36c>)
 800408c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	492f      	ldr	r1, [pc, #188]	; (8004150 <Parser_process+0x370>)
 8004094:	5ccb      	ldrb	r3, [r1, r3]
 8004096:	b29b      	uxth	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f015 f9c2 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 80040a0:	2101      	movs	r1, #1
 80040a2:	482c      	ldr	r0, [pc, #176]	; (8004154 <Parser_process+0x374>)
 80040a4:	f015 f9be 	bl	8019424 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	3301      	adds	r3, #1
 80040ac:	80fb      	strh	r3, [r7, #6]
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b0f      	cmp	r3, #15
 80040b2:	d9c4      	bls.n	800403e <Parser_process+0x25e>
 80040b4:	e08b      	b.n	80041ce <Parser_process+0x3ee>
						}
					}
					else
					{
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	80fb      	strh	r3, [r7, #6]
 80040ba:	e085      	b.n	80041c8 <Parser_process+0x3e8>
 80040bc:	20000894 	.word	0x20000894
 80040c0:	20000895 	.word	0x20000895
 80040c4:	20000896 	.word	0x20000896
 80040c8:	20002110 	.word	0x20002110
 80040cc:	2000018c 	.word	0x2000018c
 80040d0:	20005b64 	.word	0x20005b64
 80040d4:	20005b00 	.word	0x20005b00
 80040d8:	200008ba 	.word	0x200008ba
 80040dc:	200008b8 	.word	0x200008b8
 80040e0:	20007a48 	.word	0x20007a48
 80040e4:	08021d34 	.word	0x08021d34
 80040e8:	20000080 	.word	0x20000080
 80040ec:	08021d50 	.word	0x08021d50
 80040f0:	20002088 	.word	0x20002088
 80040f4:	200008a7 	.word	0x200008a7
 80040f8:	20000824 	.word	0x20000824
 80040fc:	08021d68 	.word	0x08021d68
 8004100:	2000004c 	.word	0x2000004c
 8004104:	2000009b 	.word	0x2000009b
 8004108:	200008b7 	.word	0x200008b7
 800410c:	08021d6c 	.word	0x08021d6c
 8004110:	08021d78 	.word	0x08021d78
 8004114:	08023b8c 	.word	0x08023b8c
 8004118:	08023be8 	.word	0x08023be8
 800411c:	08023c48 	.word	0x08023c48
 8004120:	08023c78 	.word	0x08023c78
 8004124:	08023cc8 	.word	0x08023cc8
 8004128:	08023d28 	.word	0x08023d28
 800412c:	08023d88 	.word	0x08023d88
 8004130:	08023ddc 	.word	0x08023ddc
 8004134:	08021d88 	.word	0x08021d88
 8004138:	08023b4c 	.word	0x08023b4c
 800413c:	20000134 	.word	0x20000134
 8004140:	08021da8 	.word	0x08021da8
 8004144:	08023b5c 	.word	0x08023b5c
 8004148:	08021dac 	.word	0x08021dac
 800414c:	200000f4 	.word	0x200000f4
 8004150:	08023b3c 	.word	0x08023b3c
 8004154:	08021db0 	.word	0x08021db0
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	4ab5      	ldr	r2, [pc, #724]	; (8004430 <Parser_process+0x650>)
 800415c:	5cd3      	ldrb	r3, [r2, r3]
 800415e:	461a      	mov	r2, r3
 8004160:	4bb4      	ldr	r3, [pc, #720]	; (8004434 <Parser_process+0x654>)
 8004162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004166:	210b      	movs	r1, #11
 8004168:	4618      	mov	r0, r3
 800416a:	f015 f95b 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 800416e:	2101      	movs	r1, #1
 8004170:	48b1      	ldr	r0, [pc, #708]	; (8004438 <Parser_process+0x658>)
 8004172:	f015 f957 	bl	8019424 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	4ab0      	ldr	r2, [pc, #704]	; (800443c <Parser_process+0x65c>)
 800417a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800417e:	461a      	mov	r2, r3
 8004180:	49af      	ldr	r1, [pc, #700]	; (8004440 <Parser_process+0x660>)
 8004182:	48b0      	ldr	r0, [pc, #704]	; (8004444 <Parser_process+0x664>)
 8004184:	f019 fdc4 	bl	801dd10 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8004188:	48ae      	ldr	r0, [pc, #696]	; (8004444 <Parser_process+0x664>)
 800418a:	f7fc f831 	bl	80001f0 <strlen>
 800418e:	4603      	mov	r3, r0
 8004190:	b29b      	uxth	r3, r3
 8004192:	4619      	mov	r1, r3
 8004194:	48ab      	ldr	r0, [pc, #684]	; (8004444 <Parser_process+0x664>)
 8004196:	f015 f945 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 800419a:	2101      	movs	r1, #1
 800419c:	48a6      	ldr	r0, [pc, #664]	; (8004438 <Parser_process+0x658>)
 800419e:	f015 f941 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	4aa8      	ldr	r2, [pc, #672]	; (8004448 <Parser_process+0x668>)
 80041a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	49a7      	ldr	r1, [pc, #668]	; (800444c <Parser_process+0x66c>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f015 f935 	bl	8019424 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 80041ba:	2101      	movs	r1, #1
 80041bc:	48a4      	ldr	r0, [pc, #656]	; (8004450 <Parser_process+0x670>)
 80041be:	f015 f931 	bl	8019424 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	3301      	adds	r3, #1
 80041c6:	80fb      	strh	r3, [r7, #6]
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d9c4      	bls.n	8004158 <Parser_process+0x378>
						}
					}

					CDC_Transmit_FS((unsigned char*)"\r\n", 1);
 80041ce:	2101      	movs	r1, #1
 80041d0:	48a0      	ldr	r0, [pc, #640]	; (8004454 <Parser_process+0x674>)
 80041d2:	f015 f927 	bl	8019424 <CDC_Transmit_FS>
					clear_buf();
 80041d6:	f7ff f867 	bl	80032a8 <clear_buf>
					break;
 80041da:	e18d      	b.n	80044f8 <Parser_process+0x718>

				case GET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 80041dc:	2303      	movs	r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff f9aa 	bl	800353c <parser>
 80041e8:	4603      	mov	r3, r0
 80041ea:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 80041ec:	88bb      	ldrh	r3, [r7, #4]
 80041ee:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80041f2:	4293      	cmp	r3, r2
 80041f4:	f200 80a3 	bhi.w	800433e <Parser_process+0x55e>
					{
						switch(GV_TYPE[RES])
 80041f8:	88bb      	ldrh	r3, [r7, #4]
 80041fa:	4a8d      	ldr	r2, [pc, #564]	; (8004430 <Parser_process+0x650>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	2b07      	cmp	r3, #7
 8004200:	f200 8092 	bhi.w	8004328 <Parser_process+0x548>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <Parser_process+0x42c>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	0800422d 	.word	0x0800422d
 8004210:	08004351 	.word	0x08004351
 8004214:	08004257 	.word	0x08004257
 8004218:	08004281 	.word	0x08004281
 800421c:	08004351 	.word	0x08004351
 8004220:	080042ab 	.word	0x080042ab
 8004224:	080042ff 	.word	0x080042ff
 8004228:	080042d5 	.word	0x080042d5
						{
							case type_INT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800422c:	88bb      	ldrh	r3, [r7, #4]
 800422e:	4a8a      	ldr	r2, [pc, #552]	; (8004458 <Parser_process+0x678>)
 8004230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004234:	4618      	mov	r0, r3
 8004236:	2203      	movs	r2, #3
 8004238:	88bb      	ldrh	r3, [r7, #4]
 800423a:	4984      	ldr	r1, [pc, #528]	; (800444c <Parser_process+0x66c>)
 800423c:	5ccb      	ldrb	r3, [r1, r3]
 800423e:	4413      	add	r3, r2
 8004240:	b2db      	uxtb	r3, r3
 8004242:	3302      	adds	r3, #2
 8004244:	b2d9      	uxtb	r1, r3
 8004246:	88bb      	ldrh	r3, [r7, #4]
 8004248:	4a7c      	ldr	r2, [pc, #496]	; (800443c <Parser_process+0x65c>)
 800424a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424e:	461a      	mov	r2, r3
 8004250:	f7ff fbc4 	bl	80039dc <Get_uint8>
 8004254:	e07d      	b.n	8004352 <Parser_process+0x572>
							case type_INT16: break;
							case type_INT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004256:	88bb      	ldrh	r3, [r7, #4]
 8004258:	4a7f      	ldr	r2, [pc, #508]	; (8004458 <Parser_process+0x678>)
 800425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425e:	4618      	mov	r0, r3
 8004260:	2203      	movs	r2, #3
 8004262:	88bb      	ldrh	r3, [r7, #4]
 8004264:	4979      	ldr	r1, [pc, #484]	; (800444c <Parser_process+0x66c>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	4413      	add	r3, r2
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3302      	adds	r3, #2
 800426e:	b2d9      	uxtb	r1, r3
 8004270:	88bb      	ldrh	r3, [r7, #4]
 8004272:	4a72      	ldr	r2, [pc, #456]	; (800443c <Parser_process+0x65c>)
 8004274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004278:	461a      	mov	r2, r3
 800427a:	f7ff fc2b 	bl	8003ad4 <Get_int32>
 800427e:	e068      	b.n	8004352 <Parser_process+0x572>
							case type_UINT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004280:	88bb      	ldrh	r3, [r7, #4]
 8004282:	4a75      	ldr	r2, [pc, #468]	; (8004458 <Parser_process+0x678>)
 8004284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004288:	4618      	mov	r0, r3
 800428a:	2203      	movs	r2, #3
 800428c:	88bb      	ldrh	r3, [r7, #4]
 800428e:	496f      	ldr	r1, [pc, #444]	; (800444c <Parser_process+0x66c>)
 8004290:	5ccb      	ldrb	r3, [r1, r3]
 8004292:	4413      	add	r3, r2
 8004294:	b2db      	uxtb	r3, r3
 8004296:	3302      	adds	r3, #2
 8004298:	b2d9      	uxtb	r1, r3
 800429a:	88bb      	ldrh	r3, [r7, #4]
 800429c:	4a67      	ldr	r2, [pc, #412]	; (800443c <Parser_process+0x65c>)
 800429e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f7ff fb9a 	bl	80039dc <Get_uint8>
 80042a8:	e053      	b.n	8004352 <Parser_process+0x572>
							case type_UINT16: break;
							case type_UINT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042aa:	88bb      	ldrh	r3, [r7, #4]
 80042ac:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <Parser_process+0x678>)
 80042ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b2:	4618      	mov	r0, r3
 80042b4:	2203      	movs	r2, #3
 80042b6:	88bb      	ldrh	r3, [r7, #4]
 80042b8:	4964      	ldr	r1, [pc, #400]	; (800444c <Parser_process+0x66c>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	4413      	add	r3, r2
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	3302      	adds	r3, #2
 80042c2:	b2d9      	uxtb	r1, r3
 80042c4:	88bb      	ldrh	r3, [r7, #4]
 80042c6:	4a5d      	ldr	r2, [pc, #372]	; (800443c <Parser_process+0x65c>)
 80042c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f7ff fc01 	bl	8003ad4 <Get_int32>
 80042d2:	e03e      	b.n	8004352 <Parser_process+0x572>
							case type_DOUBLE: Get_double((double*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042d4:	88bb      	ldrh	r3, [r7, #4]
 80042d6:	4a60      	ldr	r2, [pc, #384]	; (8004458 <Parser_process+0x678>)
 80042d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042dc:	4618      	mov	r0, r3
 80042de:	2203      	movs	r2, #3
 80042e0:	88bb      	ldrh	r3, [r7, #4]
 80042e2:	495a      	ldr	r1, [pc, #360]	; (800444c <Parser_process+0x66c>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	4413      	add	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	3302      	adds	r3, #2
 80042ec:	b2d9      	uxtb	r1, r3
 80042ee:	88bb      	ldrh	r3, [r7, #4]
 80042f0:	4a52      	ldr	r2, [pc, #328]	; (800443c <Parser_process+0x65c>)
 80042f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f7ff fcf4 	bl	8003ce4 <Get_double>
 80042fc:	e029      	b.n	8004352 <Parser_process+0x572>
							case type_FLOAT:  Get_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042fe:	88bb      	ldrh	r3, [r7, #4]
 8004300:	4a55      	ldr	r2, [pc, #340]	; (8004458 <Parser_process+0x678>)
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	4618      	mov	r0, r3
 8004308:	2203      	movs	r2, #3
 800430a:	88bb      	ldrh	r3, [r7, #4]
 800430c:	494f      	ldr	r1, [pc, #316]	; (800444c <Parser_process+0x66c>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	4413      	add	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3302      	adds	r3, #2
 8004316:	b2d9      	uxtb	r1, r3
 8004318:	88bb      	ldrh	r3, [r7, #4]
 800431a:	4a48      	ldr	r2, [pc, #288]	; (800443c <Parser_process+0x65c>)
 800431c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004320:	461a      	mov	r2, r3
 8004322:	f7ff fc55 	bl	8003bd0 <Get_float>
 8004326:	e014      	b.n	8004352 <Parser_process+0x572>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004328:	4b4c      	ldr	r3, [pc, #304]	; (800445c <Parser_process+0x67c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2209      	movs	r2, #9
 800432e:	b292      	uxth	r2, r2
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f015 f876 	bl	8019424 <CDC_Transmit_FS>
 8004338:	f7fe ffb6 	bl	80032a8 <clear_buf>
 800433c:	e009      	b.n	8004352 <Parser_process+0x572>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <Parser_process+0x67c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2209      	movs	r2, #9
 8004344:	b292      	uxth	r2, r2
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f015 f86b 	bl	8019424 <CDC_Transmit_FS>
 800434e:	e000      	b.n	8004352 <Parser_process+0x572>
							case type_INT16: break;
 8004350:	bf00      	nop
					}
					clear_buf(); break;
 8004352:	f7fe ffa9 	bl	80032a8 <clear_buf>
 8004356:	e0cf      	b.n	80044f8 <Parser_process+0x718>


				case SET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 8004358:	2303      	movs	r3, #3
 800435a:	3301      	adds	r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff f8ec 	bl	800353c <parser>
 8004364:	4603      	mov	r3, r0
 8004366:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 8004368:	88bb      	ldrh	r3, [r7, #4]
 800436a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800436e:	4293      	cmp	r3, r2
 8004370:	f200 80a3 	bhi.w	80044ba <Parser_process+0x6da>
					{
						switch(GV_TYPE[RES])
 8004374:	88bb      	ldrh	r3, [r7, #4]
 8004376:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <Parser_process+0x650>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	2b07      	cmp	r3, #7
 800437c:	f200 8092 	bhi.w	80044a4 <Parser_process+0x6c4>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <Parser_process+0x5a8>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043a9 	.word	0x080043a9
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043ed 	.word	0x080043ed
 8004394:	0800440f 	.word	0x0800440f
 8004398:	080044cd 	.word	0x080044cd
 800439c:	08004461 	.word	0x08004461
 80043a0:	08004483 	.word	0x08004483
 80043a4:	080044cd 	.word	0x080044cd
						{
							case type_INT8: Set_int8((int8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80043a8:	88bb      	ldrh	r3, [r7, #4]
 80043aa:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <Parser_process+0x678>)
 80043ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b0:	4618      	mov	r0, r3
 80043b2:	2203      	movs	r2, #3
 80043b4:	88bb      	ldrh	r3, [r7, #4]
 80043b6:	4925      	ldr	r1, [pc, #148]	; (800444c <Parser_process+0x66c>)
 80043b8:	5ccb      	ldrb	r3, [r1, r3]
 80043ba:	4413      	add	r3, r2
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	3302      	adds	r3, #2
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7ff f960 	bl	8003688 <Set_int8>
 80043c8:	e081      	b.n	80044ce <Parser_process+0x6ee>
							case type_INT16: Set_int16((int16_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80043ca:	88bb      	ldrh	r3, [r7, #4]
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <Parser_process+0x678>)
 80043ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d2:	4618      	mov	r0, r3
 80043d4:	2203      	movs	r2, #3
 80043d6:	88bb      	ldrh	r3, [r7, #4]
 80043d8:	491c      	ldr	r1, [pc, #112]	; (800444c <Parser_process+0x66c>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	4413      	add	r3, r2
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	3302      	adds	r3, #2
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	f7ff f9a5 	bl	8003734 <Set_int16>
 80043ea:	e070      	b.n	80044ce <Parser_process+0x6ee>
							case type_INT32: Set_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80043ec:	88bb      	ldrh	r3, [r7, #4]
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <Parser_process+0x678>)
 80043f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f4:	4618      	mov	r0, r3
 80043f6:	2203      	movs	r2, #3
 80043f8:	88bb      	ldrh	r3, [r7, #4]
 80043fa:	4914      	ldr	r1, [pc, #80]	; (800444c <Parser_process+0x66c>)
 80043fc:	5ccb      	ldrb	r3, [r1, r3]
 80043fe:	4413      	add	r3, r2
 8004400:	b2db      	uxtb	r3, r3
 8004402:	3302      	adds	r3, #2
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	f7ff f9ec 	bl	80037e4 <Set_int32>
 800440c:	e05f      	b.n	80044ce <Parser_process+0x6ee>
							case type_UINT8: Set_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800440e:	88bb      	ldrh	r3, [r7, #4]
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <Parser_process+0x678>)
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	4618      	mov	r0, r3
 8004418:	2203      	movs	r2, #3
 800441a:	88bb      	ldrh	r3, [r7, #4]
 800441c:	490b      	ldr	r1, [pc, #44]	; (800444c <Parser_process+0x66c>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	4413      	add	r3, r2
 8004422:	b2db      	uxtb	r3, r3
 8004424:	3302      	adds	r3, #2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	f7ff f8db 	bl	80035e4 <Set_uint8>
 800442e:	e04e      	b.n	80044ce <Parser_process+0x6ee>
 8004430:	08023b4c 	.word	0x08023b4c
 8004434:	20000134 	.word	0x20000134
 8004438:	08021db4 	.word	0x08021db4
 800443c:	08023b5c 	.word	0x08023b5c
 8004440:	08021dac 	.word	0x08021dac
 8004444:	20002088 	.word	0x20002088
 8004448:	200000f4 	.word	0x200000f4
 800444c:	08023b3c 	.word	0x08023b3c
 8004450:	08021db0 	.word	0x08021db0
 8004454:	08021c70 	.word	0x08021c70
 8004458:	200000b4 	.word	0x200000b4
 800445c:	20000154 	.word	0x20000154
							case type_UINT16: break;
							case type_UINT32: Set_uint32((uint32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004460:	88bb      	ldrh	r3, [r7, #4]
 8004462:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <Parser_process+0x738>)
 8004464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004468:	4618      	mov	r0, r3
 800446a:	2203      	movs	r2, #3
 800446c:	88bb      	ldrh	r3, [r7, #4]
 800446e:	492b      	ldr	r1, [pc, #172]	; (800451c <Parser_process+0x73c>)
 8004470:	5ccb      	ldrb	r3, [r1, r3]
 8004472:	4413      	add	r3, r2
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3302      	adds	r3, #2
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4619      	mov	r1, r3
 800447c:	f7ff fa14 	bl	80038a8 <Set_uint32>
 8004480:	e025      	b.n	80044ce <Parser_process+0x6ee>
							case type_DOUBLE: break;
							case type_FLOAT: Set_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004482:	88bb      	ldrh	r3, [r7, #4]
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <Parser_process+0x738>)
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	4618      	mov	r0, r3
 800448c:	2203      	movs	r2, #3
 800448e:	88bb      	ldrh	r3, [r7, #4]
 8004490:	4922      	ldr	r1, [pc, #136]	; (800451c <Parser_process+0x73c>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	4413      	add	r3, r2
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3302      	adds	r3, #2
 800449a:	b2db      	uxtb	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	f7ff fa4b 	bl	8003938 <Set_float>
 80044a2:	e014      	b.n	80044ce <Parser_process+0x6ee>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <Parser_process+0x740>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2209      	movs	r2, #9
 80044aa:	b292      	uxth	r2, r2
 80044ac:	4611      	mov	r1, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f014 ffb8 	bl	8019424 <CDC_Transmit_FS>
 80044b4:	f7fe fef8 	bl	80032a8 <clear_buf>
 80044b8:	e009      	b.n	80044ce <Parser_process+0x6ee>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <Parser_process+0x740>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2209      	movs	r2, #9
 80044c0:	b292      	uxth	r2, r2
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f014 ffad 	bl	8019424 <CDC_Transmit_FS>
 80044ca:	e000      	b.n	80044ce <Parser_process+0x6ee>
							case type_UINT16: break;
 80044cc:	bf00      	nop
					}
					clear_buf(); break;
 80044ce:	f7fe feeb 	bl	80032a8 <clear_buf>
 80044d2:	e011      	b.n	80044f8 <Parser_process+0x718>


				case SAVE_CMD:
					CDC_Transmit_FS((unsigned char*)"FLASH MEMORY IS BROKEN!!", 24);
 80044d4:	2118      	movs	r1, #24
 80044d6:	4813      	ldr	r0, [pc, #76]	; (8004524 <Parser_process+0x744>)
 80044d8:	f014 ffa4 	bl	8019424 <CDC_Transmit_FS>
					clear_buf(); break;
 80044dc:	f7fe fee4 	bl	80032a8 <clear_buf>
 80044e0:	e00a      	b.n	80044f8 <Parser_process+0x718>

				default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <Parser_process+0x740>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2209      	movs	r2, #9
 80044e8:	b292      	uxth	r2, r2
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f014 ff99 	bl	8019424 <CDC_Transmit_FS>
 80044f2:	f7fe fed9 	bl	80032a8 <clear_buf>
 80044f6:	bf00      	nop

			}
			CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 80044f8:	2102      	movs	r1, #2
 80044fa:	480b      	ldr	r0, [pc, #44]	; (8004528 <Parser_process+0x748>)
 80044fc:	f014 ff92 	bl	8019424 <CDC_Transmit_FS>
			USBTimeOutRX=-1;
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <Parser_process+0x74c>)
 8004502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004506:	801a      	strh	r2, [r3, #0]
		}
	}
	sleep(5);
 8004508:	2005      	movs	r0, #5
 800450a:	f7fe fe47 	bl	800319c <sleep>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200000b4 	.word	0x200000b4
 800451c:	08023b3c 	.word	0x08023b3c
 8004520:	20000154 	.word	0x20000154
 8004524:	08021db8 	.word	0x08021db8
 8004528:	08021c70 	.word	0x08021c70
 800452c:	2000018c 	.word	0x2000018c

08004530 <SPI1_Send>:
w25_info_t  w25_info;


//-------------------------------------------------------------
void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit (&hspi3, dt, cnt, 5000);
 800453c:	887a      	ldrh	r2, [r7, #2]
 800453e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4803      	ldr	r0, [pc, #12]	; (8004554 <SPI1_Send+0x24>)
 8004546:	f009 fc68 	bl	800de1a <HAL_SPI_Transmit>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20006384 	.word	0x20006384

08004558 <SPI1_Recv>:
//-------------------------------------------------------------
void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive (&hspi3, dt, cnt, 5000);
 8004564:	887a      	ldrh	r2, [r7, #2]
 8004566:	f241 3388 	movw	r3, #5000	; 0x1388
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4803      	ldr	r0, [pc, #12]	; (800457c <SPI1_Recv+0x24>)
 800456e:	f009 fdc2 	bl	800e0f6 <HAL_SPI_Receive>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20006384 	.word	0x20006384

08004580 <W25_WriteEnable>:
//-------------------------------------------------------------

void W25_WriteEnable(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
	uint8_t command[1];
	cs_set();
 8004586:	2200      	movs	r2, #0
 8004588:	2104      	movs	r1, #4
 800458a:	4809      	ldr	r0, [pc, #36]	; (80045b0 <W25_WriteEnable+0x30>)
 800458c:	f005 fe28 	bl	800a1e0 <HAL_GPIO_WritePin>
	command[0]=0x06;
 8004590:	2306      	movs	r3, #6
 8004592:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ffc9 	bl	8004530 <SPI1_Send>
	cs_reset();
 800459e:	2201      	movs	r2, #1
 80045a0:	2104      	movs	r1, #4
 80045a2:	4803      	ldr	r0, [pc, #12]	; (80045b0 <W25_WriteEnable+0x30>)
 80045a4:	f005 fe1c 	bl	800a1e0 <HAL_GPIO_WritePin>
}
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	48000c00 	.word	0x48000c00

080045b4 <W25_Reset>:
	SPI1_Send(command, 1);
	cs_reset();
}

void W25_Reset (void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
	uint8_t command[1];
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80045ba:	bf00      	nop
 80045bc:	20c0      	movs	r0, #192	; 0xc0
 80045be:	f000 f81d 	bl	80045fc <W25_Read_Status>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d0f7      	beq.n	80045bc <W25_Reset+0x8>
	cs_set();
 80045cc:	2200      	movs	r2, #0
 80045ce:	2104      	movs	r1, #4
 80045d0:	4809      	ldr	r0, [pc, #36]	; (80045f8 <W25_Reset+0x44>)
 80045d2:	f005 fe05 	bl	800a1e0 <HAL_GPIO_WritePin>
	command[0] = W25_RESET;
 80045d6:	23ff      	movs	r3, #255	; 0xff
 80045d8:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ffa6 	bl	8004530 <SPI1_Send>
	cs_reset();
 80045e4:	2201      	movs	r2, #1
 80045e6:	2104      	movs	r1, #4
 80045e8:	4803      	ldr	r0, [pc, #12]	; (80045f8 <W25_Reset+0x44>)
 80045ea:	f005 fdf9 	bl	800a1e0 <HAL_GPIO_WritePin>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	48000c00 	.word	0x48000c00

080045fc <W25_Read_Status>:
//-------------------------------------------------------------

uint8_t W25_Read_Status(uint8_t StatusRegAdd)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint8_t data[1];
	command[0] = 0x0F; 		// Read Status Register
 8004606:	230f      	movs	r3, #15
 8004608:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	737b      	strb	r3, [r7, #13]
	cs_set();
 800460e:	2200      	movs	r2, #0
 8004610:	2104      	movs	r1, #4
 8004612:	480c      	ldr	r0, [pc, #48]	; (8004644 <W25_Read_Status+0x48>)
 8004614:	f005 fde4 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 8004618:	f107 030c 	add.w	r3, r7, #12
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff86 	bl	8004530 <SPI1_Send>
	SPI1_Recv(data, 1);
 8004624:	f107 0308 	add.w	r3, r7, #8
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ff94 	bl	8004558 <SPI1_Recv>
	cs_reset();
 8004630:	2201      	movs	r2, #1
 8004632:	2104      	movs	r1, #4
 8004634:	4803      	ldr	r0, [pc, #12]	; (8004644 <W25_Read_Status+0x48>)
 8004636:	f005 fdd3 	bl	800a1e0 <HAL_GPIO_WritePin>
	return data[0];
 800463a:	7a3b      	ldrb	r3, [r7, #8]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	48000c00 	.word	0x48000c00

08004648 <W25_Write_Status>:

void W25_Write_Status(uint8_t StatusRegAdd, uint8_t data)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	460a      	mov	r2, r1
 8004652:	71fb      	strb	r3, [r7, #7]
 8004654:	4613      	mov	r3, r2
 8004656:	71bb      	strb	r3, [r7, #6]
	uint8_t command[3];
	command[0] = 0x1F; 		// Write Status Register
 8004658:	231f      	movs	r3, #31
 800465a:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	737b      	strb	r3, [r7, #13]
	command[2] = data;
 8004660:	79bb      	ldrb	r3, [r7, #6]
 8004662:	73bb      	strb	r3, [r7, #14]
	cs_set();
 8004664:	2200      	movs	r2, #0
 8004666:	2104      	movs	r1, #4
 8004668:	4808      	ldr	r0, [pc, #32]	; (800468c <W25_Write_Status+0x44>)
 800466a:	f005 fdb9 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 800466e:	f107 030c 	add.w	r3, r7, #12
 8004672:	2103      	movs	r1, #3
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff5b 	bl	8004530 <SPI1_Send>
	cs_reset();
 800467a:	2201      	movs	r2, #1
 800467c:	2104      	movs	r1, #4
 800467e:	4803      	ldr	r0, [pc, #12]	; (800468c <W25_Write_Status+0x44>)
 8004680:	f005 fdae 	bl	800a1e0 <HAL_GPIO_WritePin>
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	48000c00 	.word	0x48000c00

08004690 <W25_Block_Erase>:


void W25_Block_Erase(uint32_t page_addr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	uint8_t command[4];

	W25_WriteEnable();
 8004698:	f7ff ff72 	bl	8004580 <W25_WriteEnable>

	command[0] = 0xD8;						// Block erase
 800469c:	23d8      	movs	r3, #216	; 0xd8
 800469e:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;						// Dummy byte
 80046a0:	2300      	movs	r3, #0
 80046a2:	737b      	strb	r3, [r7, #13]
	command[2] = (page_addr >> 8) & 0xFF;	// Start page address
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	73bb      	strb	r3, [r7, #14]
	command[3] = page_addr & 0xFF;			// Start page address
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	73fb      	strb	r3, [r7, #15]

	cs_set();
 80046b2:	2200      	movs	r2, #0
 80046b4:	2104      	movs	r1, #4
 80046b6:	480e      	ldr	r0, [pc, #56]	; (80046f0 <W25_Block_Erase+0x60>)
 80046b8:	f005 fd92 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80046bc:	f107 030c 	add.w	r3, r7, #12
 80046c0:	2104      	movs	r1, #4
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff ff34 	bl	8004530 <SPI1_Send>
	cs_reset();
 80046c8:	2201      	movs	r2, #1
 80046ca:	2104      	movs	r1, #4
 80046cc:	4808      	ldr	r0, [pc, #32]	; (80046f0 <W25_Block_Erase+0x60>)
 80046ce:	f005 fd87 	bl	800a1e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(3)&0x01)==1);
 80046d2:	bf00      	nop
 80046d4:	2003      	movs	r0, #3
 80046d6:	f7ff ff91 	bl	80045fc <W25_Read_Status>
 80046da:	4603      	mov	r3, r0
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d0f7      	beq.n	80046d4 <W25_Block_Erase+0x44>
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	48000c00 	.word	0x48000c00

080046f4 <W25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
//-------------------------------------------------------------
uint32_t W25_Read_ID(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
	uint8_t command[4];
	uint8_t dt[3];
	command[0] = W25_GET_JEDEC_ID;
 80046fa:	239f      	movs	r3, #159	; 0x9f
 80046fc:	713b      	strb	r3, [r7, #4]
	command[1] = 0x00;
 80046fe:	2300      	movs	r3, #0
 8004700:	717b      	strb	r3, [r7, #5]
	cs_set();
 8004702:	2200      	movs	r2, #0
 8004704:	2104      	movs	r1, #4
 8004706:	480e      	ldr	r0, [pc, #56]	; (8004740 <W25_Read_ID+0x4c>)
 8004708:	f005 fd6a 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff0d 	bl	8004530 <SPI1_Send>
	SPI1_Recv(dt,3);
 8004716:	463b      	mov	r3, r7
 8004718:	2103      	movs	r1, #3
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff1c 	bl	8004558 <SPI1_Recv>
	cs_reset();
 8004720:	2201      	movs	r2, #1
 8004722:	2104      	movs	r1, #4
 8004724:	4806      	ldr	r0, [pc, #24]	; (8004740 <W25_Read_ID+0x4c>)
 8004726:	f005 fd5b 	bl	800a1e0 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800472a:	783b      	ldrb	r3, [r7, #0]
 800472c:	041a      	lsls	r2, r3, #16
 800472e:	787b      	ldrb	r3, [r7, #1]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	4313      	orrs	r3, r2
 8004734:	78ba      	ldrb	r2, [r7, #2]
 8004736:	4313      	orrs	r3, r2
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	48000c00 	.word	0x48000c00

08004744 <W25_ReadBuf>:


void W25_ReadBuf(uint8_t*data, uint16_t blk_addr)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t address=(blk_addr>>2)*64;
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	b29b      	uxth	r3, r3
 8004756:	019b      	lsls	r3, r3, #6
 8004758:	81fb      	strh	r3, [r7, #14]
	uint16_t column=(blk_addr&0x03)*512;
 800475a:	887b      	ldrh	r3, [r7, #2]
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	b29b      	uxth	r3, r3
 8004762:	025b      	lsls	r3, r3, #9
 8004764:	81bb      	strh	r3, [r7, #12]

	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004766:	bf00      	nop
 8004768:	20c0      	movs	r0, #192	; 0xc0
 800476a:	f7ff ff47 	bl	80045fc <W25_Read_Status>
 800476e:	4603      	mov	r3, r0
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d0f7      	beq.n	8004768 <W25_ReadBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 8004778:	2313      	movs	r3, #19
 800477a:	723b      	strb	r3, [r7, #8]
	command[1] = W25_DUMMY;
 800477c:	2300      	movs	r3, #0
 800477e:	727b      	strb	r3, [r7, #9]
	command[2] = (address >> 8) & 0xFF;
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b29b      	uxth	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	72bb      	strb	r3, [r7, #10]
	command[3] = address & 0xFF;
 800478a:	89fb      	ldrh	r3, [r7, #14]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	72fb      	strb	r3, [r7, #11]
	cs_set();
 8004790:	2200      	movs	r2, #0
 8004792:	2104      	movs	r1, #4
 8004794:	4822      	ldr	r0, [pc, #136]	; (8004820 <W25_ReadBuf+0xdc>)
 8004796:	f005 fd23 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	2104      	movs	r1, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fec5 	bl	8004530 <SPI1_Send>
	cs_reset();
 80047a6:	2201      	movs	r2, #1
 80047a8:	2104      	movs	r1, #4
 80047aa:	481d      	ldr	r0, [pc, #116]	; (8004820 <W25_ReadBuf+0xdc>)
 80047ac:	f005 fd18 	bl	800a1e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80047b0:	bf00      	nop
 80047b2:	20c0      	movs	r0, #192	; 0xc0
 80047b4:	f7ff ff22 	bl	80045fc <W25_Read_Status>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d0f7      	beq.n	80047b2 <W25_ReadBuf+0x6e>

	// Read from buffer
	command[0] = W25_FAST_READ;
 80047c2:	230b      	movs	r3, #11
 80047c4:	723b      	strb	r3, [r7, #8]
	command[1] = (column >> 8) & 0xFF;
 80047c6:	89bb      	ldrh	r3, [r7, #12]
 80047c8:	0a1b      	lsrs	r3, r3, #8
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	727b      	strb	r3, [r7, #9]
	command[2] = column & 0xFF;
 80047d0:	89bb      	ldrh	r3, [r7, #12]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	72bb      	strb	r3, [r7, #10]
	command[3] = W25_DUMMY;
 80047d6:	2300      	movs	r3, #0
 80047d8:	72fb      	strb	r3, [r7, #11]
	cs_set();
 80047da:	2200      	movs	r2, #0
 80047dc:	2104      	movs	r1, #4
 80047de:	4810      	ldr	r0, [pc, #64]	; (8004820 <W25_ReadBuf+0xdc>)
 80047e0:	f005 fcfe 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80047e4:	f107 0308 	add.w	r3, r7, #8
 80047e8:	2104      	movs	r1, #4
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fea0 	bl	8004530 <SPI1_Send>
	SPI1_Recv(data, 512);
 80047f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff feaf 	bl	8004558 <SPI1_Recv>
	cs_reset();
 80047fa:	2201      	movs	r2, #1
 80047fc:	2104      	movs	r1, #4
 80047fe:	4808      	ldr	r0, [pc, #32]	; (8004820 <W25_ReadBuf+0xdc>)
 8004800:	f005 fcee 	bl	800a1e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004804:	bf00      	nop
 8004806:	20c0      	movs	r0, #192	; 0xc0
 8004808:	f7ff fef8 	bl	80045fc <W25_Read_Status>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d0f7      	beq.n	8004806 <W25_ReadBuf+0xc2>
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	48000c00 	.word	0x48000c00

08004824 <W25_WriteBuf>:

void W25_WriteBuf(uint8_t*data, uint16_t blk_addr)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t i;
	uint16_t address=(blk_addr>>2)*64;
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	b29b      	uxth	r3, r3
 8004836:	019b      	lsls	r3, r3, #6
 8004838:	82bb      	strh	r3, [r7, #20]
	uint16_t column=(blk_addr&0x03)*512;
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	b29b      	uxth	r3, r3
 8004842:	025b      	lsls	r3, r3, #9
 8004844:	827b      	strh	r3, [r7, #18]

	// Прочитаем блок 2048 прежде чем стереть
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004846:	bf00      	nop
 8004848:	20c0      	movs	r0, #192	; 0xc0
 800484a:	f7ff fed7 	bl	80045fc <W25_Read_Status>
 800484e:	4603      	mov	r3, r0
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d0f7      	beq.n	8004848 <W25_WriteBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 8004858:	2313      	movs	r3, #19
 800485a:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 800485c:	2300      	movs	r3, #0
 800485e:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;
 8004860:	8abb      	ldrh	r3, [r7, #20]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	b29b      	uxth	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;
 800486a:	8abb      	ldrh	r3, [r7, #20]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004870:	2200      	movs	r2, #0
 8004872:	2104      	movs	r1, #4
 8004874:	4857      	ldr	r0, [pc, #348]	; (80049d4 <W25_WriteBuf+0x1b0>)
 8004876:	f005 fcb3 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800487a:	f107 030c 	add.w	r3, r7, #12
 800487e:	2104      	movs	r1, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fe55 	bl	8004530 <SPI1_Send>
	cs_reset();
 8004886:	2201      	movs	r2, #1
 8004888:	2104      	movs	r1, #4
 800488a:	4852      	ldr	r0, [pc, #328]	; (80049d4 <W25_WriteBuf+0x1b0>)
 800488c:	f005 fca8 	bl	800a1e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004890:	bf00      	nop
 8004892:	20c0      	movs	r0, #192	; 0xc0
 8004894:	f7ff feb2 	bl	80045fc <W25_Read_Status>
 8004898:	4603      	mov	r3, r0
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d0f7      	beq.n	8004892 <W25_WriteBuf+0x6e>
	// Read from buffer
	command[0] = W25_FAST_READ;
 80048a2:	230b      	movs	r3, #11
 80048a4:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73bb      	strb	r3, [r7, #14]
	command[3] = W25_DUMMY;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80048b2:	2200      	movs	r2, #0
 80048b4:	2104      	movs	r1, #4
 80048b6:	4847      	ldr	r0, [pc, #284]	; (80049d4 <W25_WriteBuf+0x1b0>)
 80048b8:	f005 fc92 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80048bc:	f107 030c 	add.w	r3, r7, #12
 80048c0:	2104      	movs	r1, #4
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fe34 	bl	8004530 <SPI1_Send>
	SPI1_Recv(buf, 2048);
 80048c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048cc:	4842      	ldr	r0, [pc, #264]	; (80049d8 <W25_WriteBuf+0x1b4>)
 80048ce:	f7ff fe43 	bl	8004558 <SPI1_Recv>
	cs_reset();
 80048d2:	2201      	movs	r2, #1
 80048d4:	2104      	movs	r1, #4
 80048d6:	483f      	ldr	r0, [pc, #252]	; (80049d4 <W25_WriteBuf+0x1b0>)
 80048d8:	f005 fc82 	bl	800a1e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80048dc:	bf00      	nop
 80048de:	20c0      	movs	r0, #192	; 0xc0
 80048e0:	f7ff fe8c 	bl	80045fc <W25_Read_Status>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d0f7      	beq.n	80048de <W25_WriteBuf+0xba>

	for(i=0;i<512;i++)buf[column+i]=data[i];
 80048ee:	2300      	movs	r3, #0
 80048f0:	82fb      	strh	r3, [r7, #22]
 80048f2:	e00b      	b.n	800490c <W25_WriteBuf+0xe8>
 80048f4:	8afb      	ldrh	r3, [r7, #22]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	441a      	add	r2, r3
 80048fa:	8a79      	ldrh	r1, [r7, #18]
 80048fc:	8afb      	ldrh	r3, [r7, #22]
 80048fe:	440b      	add	r3, r1
 8004900:	7811      	ldrb	r1, [r2, #0]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <W25_WriteBuf+0x1b4>)
 8004904:	54d1      	strb	r1, [r2, r3]
 8004906:	8afb      	ldrh	r3, [r7, #22]
 8004908:	3301      	adds	r3, #1
 800490a:	82fb      	strh	r3, [r7, #22]
 800490c:	8afb      	ldrh	r3, [r7, #22]
 800490e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004912:	d3ef      	bcc.n	80048f4 <W25_WriteBuf+0xd0>

	//memcpy(buf[column], data, 512);

	// Сотрем блок 128кБ
	W25_Block_Erase(address);
 8004914:	8abb      	ldrh	r3, [r7, #20]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff feba 	bl	8004690 <W25_Block_Erase>

	while ((W25_Read_Status(0xC0)&0x01)==1);
 800491c:	bf00      	nop
 800491e:	20c0      	movs	r0, #192	; 0xc0
 8004920:	f7ff fe6c 	bl	80045fc <W25_Read_Status>
 8004924:	4603      	mov	r3, r0
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d0f7      	beq.n	800491e <W25_WriteBuf+0xfa>
	// Пишем в буфер
	W25_WriteEnable();
 800492e:	f7ff fe27 	bl	8004580 <W25_WriteEnable>
	command[0] = PROGRAM_DATA_LOAD;
 8004932:	2302      	movs	r3, #2
 8004934:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	73bb      	strb	r3, [r7, #14]
	cs_set();
 800493e:	2200      	movs	r2, #0
 8004940:	2104      	movs	r1, #4
 8004942:	4824      	ldr	r0, [pc, #144]	; (80049d4 <W25_WriteBuf+0x1b0>)
 8004944:	f005 fc4c 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 8004948:	f107 030c 	add.w	r3, r7, #12
 800494c:	2103      	movs	r1, #3
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fdee 	bl	8004530 <SPI1_Send>
	SPI1_Send(buf, 2048);
 8004954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004958:	481f      	ldr	r0, [pc, #124]	; (80049d8 <W25_WriteBuf+0x1b4>)
 800495a:	f7ff fde9 	bl	8004530 <SPI1_Send>
	cs_reset();
 800495e:	2201      	movs	r2, #1
 8004960:	2104      	movs	r1, #4
 8004962:	481c      	ldr	r0, [pc, #112]	; (80049d4 <W25_WriteBuf+0x1b0>)
 8004964:	f005 fc3c 	bl	800a1e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004968:	bf00      	nop
 800496a:	20c0      	movs	r0, #192	; 0xc0
 800496c:	f7ff fe46 	bl	80045fc <W25_Read_Status>
 8004970:	4603      	mov	r3, r0
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d0f7      	beq.n	800496a <W25_WriteBuf+0x146>

	// Переносим во внутреннюю память
	W25_WriteEnable();
 800497a:	f7ff fe01 	bl	8004580 <W25_WriteEnable>
	command[0] = PROGRAM_EXECUTE;
 800497e:	2310      	movs	r3, #16
 8004980:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 8004982:	2300      	movs	r3, #0
 8004984:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;	// Адрес страницы
 8004986:	8abb      	ldrh	r3, [r7, #20]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	b29b      	uxth	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;			// Адрес страницы
 8004990:	8abb      	ldrh	r3, [r7, #20]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004996:	2200      	movs	r2, #0
 8004998:	2104      	movs	r1, #4
 800499a:	480e      	ldr	r0, [pc, #56]	; (80049d4 <W25_WriteBuf+0x1b0>)
 800499c:	f005 fc20 	bl	800a1e0 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	2104      	movs	r1, #4
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fdc2 	bl	8004530 <SPI1_Send>
	cs_reset();
 80049ac:	2201      	movs	r2, #1
 80049ae:	2104      	movs	r1, #4
 80049b0:	4808      	ldr	r0, [pc, #32]	; (80049d4 <W25_WriteBuf+0x1b0>)
 80049b2:	f005 fc15 	bl	800a1e0 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80049b6:	bf00      	nop
 80049b8:	20c0      	movs	r0, #192	; 0xc0
 80049ba:	f7ff fe1f 	bl	80045fc <W25_Read_Status>
 80049be:	4603      	mov	r3, r0
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d0f7      	beq.n	80049b8 <W25_WriteBuf+0x194>
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	48000c00 	.word	0x48000c00
 80049d8:	200063e8 	.word	0x200063e8

080049dc <W25_Init>:

//-------------------------------------------------------------
void W25_Init(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80049e2:	2064      	movs	r0, #100	; 0x64
 80049e4:	f003 f912 	bl	8007c0c <HAL_Delay>
	W25_Reset();
 80049e8:	f7ff fde4 	bl	80045b4 <W25_Reset>
	HAL_Delay(100);
 80049ec:	2064      	movs	r0, #100	; 0x64
 80049ee:	f003 f90d 	bl	8007c0c <HAL_Delay>
	unsigned int id = W25_Read_ID();
 80049f2:	f7ff fe7f 	bl	80046f4 <W25_Read_ID>
 80049f6:	6078      	str	r0, [r7, #4]

	if(id!=0xEFAA21)ERROR_REG|=(0x01<<Memory_err);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <W25_Init+0x68>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d005      	beq.n	8004a0c <W25_Init+0x30>
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <W25_Init+0x6c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <W25_Init+0x6c>)
 8004a0a:	6013      	str	r3, [r2, #0]

	w25_info.PageSize=2048;
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <W25_Init+0x70>)
 8004a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a12:	801a      	strh	r2, [r3, #0]
	w25_info.PageCount=0xFFFF;
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <W25_Init+0x70>)
 8004a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a1a:	605a      	str	r2, [r3, #4]
	w25_info.BlockSize=w25_info.PageSize*64;
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <W25_Init+0x70>)
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	461a      	mov	r2, r3
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <W25_Init+0x70>)
 8004a26:	611a      	str	r2, [r3, #16]
	w25_info.NumKB=(w25_info.BlockSize*128)/8;
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <W25_Init+0x70>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	01db      	lsls	r3, r3, #7
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <W25_Init+0x70>)
 8004a32:	6193      	str	r3, [r2, #24]

	W25_Write_Status(0xA0, 0x00);
 8004a34:	2100      	movs	r1, #0
 8004a36:	20a0      	movs	r0, #160	; 0xa0
 8004a38:	f7ff fe06 	bl	8004648 <W25_Write_Status>
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	00efaa21 	.word	0x00efaa21
 8004a48:	20000890 	.word	0x20000890
 8004a4c:	20006364 	.word	0x20006364

08004a50 <Approximation_MC110>:
double Temperature_correction(double uncorrect_Pressure, double affect_temp);



void Approximation_MC110(int32_t meas_data, int32_t power_data)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
	double LSB;
	double temp_diff;

	int32_t ADC_MEAS_ZERO = meas_data-zero_ADC[0];
 8004a5a:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <Approximation_MC110+0x108>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	61fb      	str	r3, [r7, #28]

	// Считаем LSB
	LSB=0.00000000028857241176*(double)ADC_MEAS_ZERO+1.41200835380823000000;
 8004a64:	69f8      	ldr	r0, [r7, #28]
 8004a66:	f7fb fd6d 	bl	8000544 <__aeabi_i2d>
 8004a6a:	a32f      	add	r3, pc, #188	; (adr r3, 8004b28 <Approximation_MC110+0xd8>)
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f7fb fdd2 	bl	8000618 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	a32c      	add	r3, pc, #176	; (adr r3, 8004b30 <Approximation_MC110+0xe0>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f7fb fc13 	bl	80002ac <__adddf3>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим температуру
	Temperature2=0.000128471469464*(double)power_data-420.277295988542;
 8004a8e:	6838      	ldr	r0, [r7, #0]
 8004a90:	f7fb fd58 	bl	8000544 <__aeabi_i2d>
 8004a94:	a328      	add	r3, pc, #160	; (adr r3, 8004b38 <Approximation_MC110+0xe8>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fdbd 	bl	8000618 <__aeabi_dmul>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	a326      	add	r3, pc, #152	; (adr r3, 8004b40 <Approximation_MC110+0xf0>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fbfc 	bl	80002a8 <__aeabi_dsub>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4929      	ldr	r1, [pc, #164]	; (8004b5c <Approximation_MC110+0x10c>)
 8004ab6:	e9c1 2300 	strd	r2, r3, [r1]
	// Дифференциал температуры
	temp_diff=Temperature2-cal_temperature;
 8004aba:	4b28      	ldr	r3, [pc, #160]	; (8004b5c <Approximation_MC110+0x10c>)
 8004abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <Approximation_MC110+0x110>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fbef 	bl	80002a8 <__aeabi_dsub>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// Находим термостабилизированное LSB
	LSB=LSB-(temp_diff*0.0000418240259295);
 8004ad2:	a31d      	add	r3, pc, #116	; (adr r3, 8004b48 <Approximation_MC110+0xf8>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004adc:	f7fb fd9c 	bl	8000618 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ae8:	f7fb fbde 	bl	80002a8 <__aeabi_dsub>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим давление
	Pressure=(LSB*(double)ADC_MEAS_ZERO)/1000000.0;
 8004af4:	69f8      	ldr	r0, [r7, #28]
 8004af6:	f7fb fd25 	bl	8000544 <__aeabi_i2d>
 8004afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004afe:	f7fb fd8b 	bl	8000618 <__aeabi_dmul>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	a311      	add	r3, pc, #68	; (adr r3, 8004b50 <Approximation_MC110+0x100>)
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f7fb feac 	bl	800086c <__aeabi_ddiv>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4912      	ldr	r1, [pc, #72]	; (8004b64 <Approximation_MC110+0x114>)
 8004b1a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004b1e:	bf00      	nop
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	9b278484 	.word	0x9b278484
 8004b2c:	3df3d49e 	.word	0x3df3d49e
 8004b30:	12548ff4 	.word	0x12548ff4
 8004b34:	3ff69796 	.word	0x3ff69796
 8004b38:	8506b9ef 	.word	0x8506b9ef
 8004b3c:	3f20d6c9 	.word	0x3f20d6c9
 8004b40:	cdeb2199 	.word	0xcdeb2199
 8004b44:	407a446f 	.word	0x407a446f
 8004b48:	96a39d76 	.word	0x96a39d76
 8004b4c:	3f05ed86 	.word	0x3f05ed86
 8004b50:	00000000 	.word	0x00000000
 8004b54:	412e8480 	.word	0x412e8480
 8004b58:	20002280 	.word	0x20002280
 8004b5c:	20000870 	.word	0x20000870
 8004b60:	20000280 	.word	0x20000280
 8004b64:	20002298 	.word	0x20002298

08004b68 <Calculate>:



void Calculate(int32_t adc_press, int32_t adc_pow)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	static double Press_old=0;
	// Считаем давлени
	Test_Pressure = Approximation_pressure(adc_press);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f85a 	bl	8004c2c <Approximation_pressure>
 8004b78:	eeb0 7a40 	vmov.f32	s14, s0
 8004b7c:	eef0 7a60 	vmov.f32	s15, s1
 8004b80:	4b26      	ldr	r3, [pc, #152]	; (8004c1c <Calculate+0xb4>)
 8004b82:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температурный коэффициент
	Temperature_coeff_25 = Approximation_Tcoef(adc_press, adc_pow);
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f921 	bl	8004dd0 <Approximation_Tcoef>
 8004b8e:	eeb0 7a40 	vmov.f32	s14, s0
 8004b92:	eef0 7a60 	vmov.f32	s15, s1
 8004b96:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <Calculate+0xb8>)
 8004b98:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температуру
	Temperature = Approximation_temperature(Temperature_coeff_25);
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <Calculate+0xb8>)
 8004b9e:	ed93 7b00 	vldr	d7, [r3]
 8004ba2:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba6:	eef0 0a67 	vmov.f32	s1, s15
 8004baa:	f000 f9db 	bl	8004f64 <Approximation_temperature>
 8004bae:	eeb0 7a40 	vmov.f32	s14, s0
 8004bb2:	eef0 7a60 	vmov.f32	s15, s1
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <Calculate+0xbc>)
 8004bb8:	ed83 7b00 	vstr	d7, [r3]
	// Корректируем давление по температуре
	Test_Pressure = (Temperature_correction(Test_Pressure, Temperature) + Press_old)/2.0;
 8004bbc:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <Calculate+0xb4>)
 8004bbe:	ed93 7b00 	vldr	d7, [r3]
 8004bc2:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <Calculate+0xbc>)
 8004bc4:	ed93 6b00 	vldr	d6, [r3]
 8004bc8:	eeb0 1a46 	vmov.f32	s2, s12
 8004bcc:	eef0 1a66 	vmov.f32	s3, s13
 8004bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8004bd4:	eef0 0a67 	vmov.f32	s1, s15
 8004bd8:	f000 fa80 	bl	80050dc <Temperature_correction>
 8004bdc:	ec51 0b10 	vmov	r0, r1, d0
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <Calculate+0xc0>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fb61 	bl	80002ac <__adddf3>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bfa:	f7fb fe37 	bl	800086c <__aeabi_ddiv>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4906      	ldr	r1, [pc, #24]	; (8004c1c <Calculate+0xb4>)
 8004c04:	e9c1 2300 	strd	r2, r3, [r1]
	Press_old = Test_Pressure;
 8004c08:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <Calculate+0xb4>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	4906      	ldr	r1, [pc, #24]	; (8004c28 <Calculate+0xc0>)
 8004c10:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	200022a0 	.word	0x200022a0
 8004c20:	20000078 	.word	0x20000078
 8004c24:	20000888 	.word	0x20000888
 8004c28:	200008c8 	.word	0x200008c8

08004c2c <Approximation_pressure>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация давления
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_pressure(int32_t current_ADC_measure)
{
 8004c2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c30:	b08c      	sub	sp, #48	; 0x30
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
	double RES=0, a, b;
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004c4a:	4b5e      	ldr	r3, [pc, #376]	; (8004dc4 <Approximation_pressure+0x198>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <Approximation_pressure+0x38>
 8004c52:	4b5d      	ldr	r3, [pc, #372]	; (8004dc8 <Approximation_pressure+0x19c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	441a      	add	r2, r3
 8004c5a:	4b5a      	ldr	r3, [pc, #360]	; (8004dc4 <Approximation_pressure+0x198>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	e001      	b.n	8004c68 <Approximation_pressure+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if(ADC_MEAS_ZERO>ADC_measure_cal_points[i])index++;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e00c      	b.n	8004c88 <Approximation_pressure+0x5c>
 8004c6e:	4a56      	ldr	r2, [pc, #344]	; (8004dc8 <Approximation_pressure+0x19c>)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c76:	6a3a      	ldr	r2, [r7, #32]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	dd02      	ble.n	8004c82 <Approximation_pressure+0x56>
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	3301      	adds	r3, #1
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3301      	adds	r3, #1
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	ddef      	ble.n	8004c6e <Approximation_pressure+0x42>

	if(index==0) a = (Pressure_cal_points[index+1] - Pressure_cal_points[index]) / (double)(ADC_measure_cal_points[index+1] - ADC_measure_cal_points[index]);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d12a      	bne.n	8004cea <Approximation_pressure+0xbe>
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	3301      	adds	r3, #1
 8004c98:	4a4c      	ldr	r2, [pc, #304]	; (8004dcc <Approximation_pressure+0x1a0>)
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ca2:	4a4a      	ldr	r2, [pc, #296]	; (8004dcc <Approximation_pressure+0x1a0>)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fafb 	bl	80002a8 <__aeabi_dsub>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4614      	mov	r4, r2
 8004cb8:	461d      	mov	r5, r3
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a42      	ldr	r2, [pc, #264]	; (8004dc8 <Approximation_pressure+0x19c>)
 8004cc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cc4:	4940      	ldr	r1, [pc, #256]	; (8004dc8 <Approximation_pressure+0x19c>)
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fc38 	bl	8000544 <__aeabi_i2d>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7fb fdc6 	bl	800086c <__aeabi_ddiv>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004ce8:	e033      	b.n	8004d52 <Approximation_pressure+0x126>
	else a = (Pressure_cal_points[index]-Pressure_cal_points[index-1]) / ((double)ADC_measure_cal_points[index]-(double)ADC_measure_cal_points[index-1]);
 8004cea:	4a38      	ldr	r2, [pc, #224]	; (8004dcc <Approximation_pressure+0x1a0>)
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	4a34      	ldr	r2, [pc, #208]	; (8004dcc <Approximation_pressure+0x1a0>)
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f7fb fad0 	bl	80002a8 <__aeabi_dsub>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4690      	mov	r8, r2
 8004d0e:	4699      	mov	r9, r3
 8004d10:	4a2d      	ldr	r2, [pc, #180]	; (8004dc8 <Approximation_pressure+0x19c>)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fc13 	bl	8000544 <__aeabi_i2d>
 8004d1e:	4604      	mov	r4, r0
 8004d20:	460d      	mov	r5, r1
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	3b01      	subs	r3, #1
 8004d26:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <Approximation_pressure+0x19c>)
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb fc09 	bl	8000544 <__aeabi_i2d>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4620      	mov	r0, r4
 8004d38:	4629      	mov	r1, r5
 8004d3a:	f7fb fab5 	bl	80002a8 <__aeabi_dsub>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4640      	mov	r0, r8
 8004d44:	4649      	mov	r1, r9
 8004d46:	f7fb fd91 	bl	800086c <__aeabi_ddiv>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	b = (double)Pressure_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004d52:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <Approximation_pressure+0x1a0>)
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4413      	add	r3, r2
 8004d5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <Approximation_pressure+0x19c>)
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fb fbec 	bl	8000544 <__aeabi_i2d>
 8004d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d70:	f7fb fc52 	bl	8000618 <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f7fb fa94 	bl	80002a8 <__aeabi_dsub>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004d88:	6a38      	ldr	r0, [r7, #32]
 8004d8a:	f7fb fbdb 	bl	8000544 <__aeabi_i2d>
 8004d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d92:	f7fb fc41 	bl	8000618 <__aeabi_dmul>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d9e:	f7fb fa85 	bl	80002ac <__adddf3>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8004daa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dae:	ec43 2b17 	vmov	d7, r2, r3
}
 8004db2:	eeb0 0a47 	vmov.f32	s0, s14
 8004db6:	eef0 0a67 	vmov.f32	s1, s15
 8004dba:	3730      	adds	r7, #48	; 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20002280 	.word	0x20002280
 8004dc8:	200001e8 	.word	0x200001e8
 8004dcc:	20000190 	.word	0x20000190

08004dd0 <Approximation_Tcoef>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температурного коэффициента
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_Tcoef(int32_t current_ADC_measure, int32_t current_ADC_power)
{
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	double RES = 0, a, b;
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004dee:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <Approximation_Tcoef+0x188>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <Approximation_Tcoef+0x38>
 8004df6:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <Approximation_Tcoef+0x18c>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <Approximation_Tcoef+0x188>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	623b      	str	r3, [r7, #32]
 8004e06:	e001      	b.n	8004e0c <Approximation_Tcoef+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if (ADC_MEAS_ZERO > ADC_measure_cal_points[i]) index++;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e00c      	b.n	8004e2c <Approximation_Tcoef+0x5c>
 8004e12:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <Approximation_Tcoef+0x18c>)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	6a3a      	ldr	r2, [r7, #32]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	dd02      	ble.n	8004e26 <Approximation_Tcoef+0x56>
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	3301      	adds	r3, #1
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	ddef      	ble.n	8004e12 <Approximation_Tcoef+0x42>

	if (index == 0) a = (double)(ADC_power_cal_points[index + 1] - ADC_power_cal_points[index]) / (double)(ADC_measure_cal_points[index + 1] - ADC_measure_cal_points[index]);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d126      	bne.n	8004e86 <Approximation_Tcoef+0xb6>
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	4a48      	ldr	r2, [pc, #288]	; (8004f60 <Approximation_Tcoef+0x190>)
 8004e3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e42:	4947      	ldr	r1, [pc, #284]	; (8004f60 <Approximation_Tcoef+0x190>)
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb fb79 	bl	8000544 <__aeabi_i2d>
 8004e52:	4604      	mov	r4, r0
 8004e54:	460d      	mov	r5, r1
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	3301      	adds	r3, #1
 8004e5a:	4a40      	ldr	r2, [pc, #256]	; (8004f5c <Approximation_Tcoef+0x18c>)
 8004e5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e60:	493e      	ldr	r1, [pc, #248]	; (8004f5c <Approximation_Tcoef+0x18c>)
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb fb6a 	bl	8000544 <__aeabi_i2d>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f7fb fcf8 	bl	800086c <__aeabi_ddiv>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004e84:	e025      	b.n	8004ed2 <Approximation_Tcoef+0x102>
	else a = (double)(ADC_power_cal_points[index] - ADC_power_cal_points[index - 1]) / (double)(ADC_measure_cal_points[index] - ADC_measure_cal_points[index - 1]);
 8004e86:	4a36      	ldr	r2, [pc, #216]	; (8004f60 <Approximation_Tcoef+0x190>)
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	3b01      	subs	r3, #1
 8004e92:	4933      	ldr	r1, [pc, #204]	; (8004f60 <Approximation_Tcoef+0x190>)
 8004e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb fb52 	bl	8000544 <__aeabi_i2d>
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	4a2d      	ldr	r2, [pc, #180]	; (8004f5c <Approximation_Tcoef+0x18c>)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	492a      	ldr	r1, [pc, #168]	; (8004f5c <Approximation_Tcoef+0x18c>)
 8004eb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fb fb43 	bl	8000544 <__aeabi_i2d>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f7fb fcd1 	bl	800086c <__aeabi_ddiv>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	b = (double)ADC_power_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004ed2:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <Approximation_Tcoef+0x190>)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fb fb32 	bl	8000544 <__aeabi_i2d>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	460d      	mov	r5, r1
 8004ee4:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <Approximation_Tcoef+0x18c>)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fb fb29 	bl	8000544 <__aeabi_i2d>
 8004ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ef6:	f7fb fb8f 	bl	8000618 <__aeabi_dmul>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7fb f9d1 	bl	80002a8 <__aeabi_dsub>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004f0e:	6a38      	ldr	r0, [r7, #32]
 8004f10:	f7fb fb18 	bl	8000544 <__aeabi_i2d>
 8004f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f18:	f7fb fb7e 	bl	8000618 <__aeabi_dmul>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f24:	f7fb f9c2 	bl	80002ac <__adddf3>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES/current_ADC_power;
 8004f30:	6838      	ldr	r0, [r7, #0]
 8004f32:	f7fb fb07 	bl	8000544 <__aeabi_i2d>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f3e:	f7fb fc95 	bl	800086c <__aeabi_ddiv>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f4e:	eef0 0a67 	vmov.f32	s1, s15
 8004f52:	3730      	adds	r7, #48	; 0x30
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bdb0      	pop	{r4, r5, r7, pc}
 8004f58:	20002280 	.word	0x20002280
 8004f5c:	200001e8 	.word	0x200001e8
 8004f60:	20000214 	.word	0x20000214

08004f64 <Approximation_temperature>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температуры
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_temperature(double T_coef)
{
 8004f64:	b5b0      	push	{r4, r5, r7, lr}
 8004f66:	b08a      	sub	sp, #40	; 0x28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	ed87 0b00 	vstr	d0, [r7]
	double RES = 0, a, b;
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < (num_of_temperature_cal_points-1); i++) if (T_coef > T_coef_cal[i]) index++;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e012      	b.n	8004faa <Approximation_temperature+0x46>
 8004f84:	4a53      	ldr	r2, [pc, #332]	; (80050d4 <Approximation_temperature+0x170>)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f94:	f7fb fdd0 	bl	8000b38 <__aeabi_dcmpgt>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <Approximation_temperature+0x40>
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	dde9      	ble.n	8004f84 <Approximation_temperature+0x20>

	if (index == 0) a = (double)(Temperature_cal_points[index + 1] - Temperature_cal_points[index]) / (double)(T_coef_cal[index + 1] - T_coef_cal[index]);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d12c      	bne.n	8005010 <Approximation_temperature+0xac>
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4a47      	ldr	r2, [pc, #284]	; (80050d8 <Approximation_temperature+0x174>)
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fc4:	4a44      	ldr	r2, [pc, #272]	; (80050d8 <Approximation_temperature+0x174>)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb f96a 	bl	80002a8 <__aeabi_dsub>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <Approximation_temperature+0x170>)
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fea:	4a3a      	ldr	r2, [pc, #232]	; (80050d4 <Approximation_temperature+0x170>)
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb f957 	bl	80002a8 <__aeabi_dsub>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4620      	mov	r0, r4
 8005000:	4629      	mov	r1, r5
 8005002:	f7fb fc33 	bl	800086c <__aeabi_ddiv>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800500e:	e02b      	b.n	8005068 <Approximation_temperature+0x104>
	else a = (double)(Temperature_cal_points[index] - Temperature_cal_points[index - 1]) / (double)(T_coef_cal[index] - T_coef_cal[index - 1]);
 8005010:	4a31      	ldr	r2, [pc, #196]	; (80050d8 <Approximation_temperature+0x174>)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	4413      	add	r3, r2
 8005018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3b01      	subs	r3, #1
 8005020:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <Approximation_temperature+0x174>)
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f7fb f93d 	bl	80002a8 <__aeabi_dsub>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4614      	mov	r4, r2
 8005034:	461d      	mov	r5, r3
 8005036:	4a27      	ldr	r2, [pc, #156]	; (80050d4 <Approximation_temperature+0x170>)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3b01      	subs	r3, #1
 8005046:	4a23      	ldr	r2, [pc, #140]	; (80050d4 <Approximation_temperature+0x170>)
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4413      	add	r3, r2
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb f92a 	bl	80002a8 <__aeabi_dsub>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4620      	mov	r0, r4
 800505a:	4629      	mov	r1, r5
 800505c:	f7fb fc06 	bl	800086c <__aeabi_ddiv>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = (double)Temperature_cal_points[index] - (double)T_coef_cal[index] * a;
 8005068:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <Approximation_temperature+0x174>)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <Approximation_temperature+0x170>)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4413      	add	r3, r2
 800507c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005080:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005084:	f7fb fac8 	bl	8000618 <__aeabi_dmul>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	f7fb f90a 	bl	80002a8 <__aeabi_dsub>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * T_coef;
 800509c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050a4:	f7fb fab8 	bl	8000618 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050b0:	f7fb f8fc 	bl	80002ac <__adddf3>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 80050bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80050c4:	eeb0 0a47 	vmov.f32	s0, s14
 80050c8:	eef0 0a67 	vmov.f32	s1, s15
 80050cc:	3728      	adds	r7, #40	; 0x28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bdb0      	pop	{r4, r5, r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000240 	.word	0x20000240
 80050d8:	20000260 	.word	0x20000260

080050dc <Temperature_correction>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Коррекция давления по температуре
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Temperature_correction(double uncorrect_Pressure, double affect_temp)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	ed87 0b02 	vstr	d0, [r7, #8]
 80050e6:	ed87 1b00 	vstr	d1, [r7]
	return (uncorrect_Pressure + (cal_temperature - affect_temp) * affect);
 80050ea:	4b11      	ldr	r3, [pc, #68]	; (8005130 <Temperature_correction+0x54>)
 80050ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f4:	f7fb f8d8 	bl	80002a8 <__aeabi_dsub>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <Temperature_correction+0x58>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb fa87 	bl	8000618 <__aeabi_dmul>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4610      	mov	r0, r2
 8005110:	4619      	mov	r1, r3
 8005112:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005116:	f7fb f8c9 	bl	80002ac <__adddf3>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005122:	eeb0 0a47 	vmov.f32	s0, s14
 8005126:	eef0 0a67 	vmov.f32	s1, s15
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000280 	.word	0x20000280
 8005134:	200008c0 	.word	0x200008c0

08005138 <calculate_current>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Расчет тока и напряжения, формулы Тимура
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double calculate_current(double data)
{
 8005138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_current = -0.0000741921796439735;
	//b_current = 9.9684133071094100000;
	//c_current = 0.0080740815705555100;
	RES = (-b_current+(sqrt((b_current*b_current)-(4*a_current*(c_current-data)))))/(2*a_current);
 8005144:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <calculate_current+0xc8>)
 8005146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800514a:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <calculate_current+0xc8>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb fa62 	bl	8000618 <__aeabi_dmul>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4614      	mov	r4, r2
 800515a:	461d      	mov	r5, r3
 800515c:	4b29      	ldr	r3, [pc, #164]	; (8005204 <calculate_current+0xcc>)
 800515e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	4b28      	ldr	r3, [pc, #160]	; (8005208 <calculate_current+0xd0>)
 8005168:	f7fb fa56 	bl	8000618 <__aeabi_dmul>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4690      	mov	r8, r2
 8005172:	4699      	mov	r9, r3
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <calculate_current+0xd4>)
 8005176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800517a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800517e:	f7fb f893 	bl	80002a8 <__aeabi_dsub>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4640      	mov	r0, r8
 8005188:	4649      	mov	r1, r9
 800518a:	f7fb fa45 	bl	8000618 <__aeabi_dmul>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	f7fb f887 	bl	80002a8 <__aeabi_dsub>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	ec43 2b17 	vmov	d7, r2, r3
 80051a2:	eeb0 0a47 	vmov.f32	s0, s14
 80051a6:	eef0 0a67 	vmov.f32	s1, s15
 80051aa:	f01c fb69 	bl	8021880 <sqrt>
 80051ae:	ec51 0b10 	vmov	r0, r1, d0
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <calculate_current+0xc8>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f7fb f876 	bl	80002a8 <__aeabi_dsub>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4614      	mov	r4, r2
 80051c2:	461d      	mov	r5, r3
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <calculate_current+0xcc>)
 80051c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	f7fb f86d 	bl	80002ac <__adddf3>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f7fb fb47 	bl	800086c <__aeabi_ddiv>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 80051e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80051ee:	eeb0 0a47 	vmov.f32	s0, s14
 80051f2:	eef0 0a67 	vmov.f32	s1, s15
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051fe:	bf00      	nop
 8005200:	20006c10 	.word	0x20006c10
 8005204:	20006bf8 	.word	0x20006bf8
 8005208:	40100000 	.word	0x40100000
 800520c:	20006bf0 	.word	0x20006bf0

08005210 <calculate_voltage>:

double calculate_voltage(double data)
{
 8005210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_voltage = 0.0000160989032721161;
	//b_voltage = 9.6660275246403800000;
	//c_voltage = 0.0066157945677234600;
	RES = (-b_voltage+(sqrt((b_voltage*b_voltage)-(4*a_voltage*(c_voltage-data)))))/(2*a_voltage);
 800521c:	4b2e      	ldr	r3, [pc, #184]	; (80052d8 <calculate_voltage+0xc8>)
 800521e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005222:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <calculate_voltage+0xc8>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f9f6 	bl	8000618 <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4b29      	ldr	r3, [pc, #164]	; (80052dc <calculate_voltage+0xcc>)
 8005236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <calculate_voltage+0xd0>)
 8005240:	f7fb f9ea 	bl	8000618 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4690      	mov	r8, r2
 800524a:	4699      	mov	r9, r3
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <calculate_voltage+0xd4>)
 800524e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005256:	f7fb f827 	bl	80002a8 <__aeabi_dsub>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4640      	mov	r0, r8
 8005260:	4649      	mov	r1, r9
 8005262:	f7fb f9d9 	bl	8000618 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4620      	mov	r0, r4
 800526c:	4629      	mov	r1, r5
 800526e:	f7fb f81b 	bl	80002a8 <__aeabi_dsub>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	ec43 2b17 	vmov	d7, r2, r3
 800527a:	eeb0 0a47 	vmov.f32	s0, s14
 800527e:	eef0 0a67 	vmov.f32	s1, s15
 8005282:	f01c fafd 	bl	8021880 <sqrt>
 8005286:	ec51 0b10 	vmov	r0, r1, d0
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <calculate_voltage+0xc8>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fb f80a 	bl	80002a8 <__aeabi_dsub>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4614      	mov	r4, r2
 800529a:	461d      	mov	r5, r3
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <calculate_voltage+0xcc>)
 800529e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	f7fb f801 	bl	80002ac <__adddf3>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb fadb 	bl	800086c <__aeabi_ddiv>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 80052be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80052c6:	eeb0 0a47 	vmov.f32	s0, s14
 80052ca:	eef0 0a67 	vmov.f32	s1, s15
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052d6:	bf00      	nop
 80052d8:	20006be8 	.word	0x20006be8
 80052dc:	20006c00 	.word	0x20006c00
 80052e0:	40100000 	.word	0x40100000
 80052e4:	20006c08 	.word	0x20006c08

080052e8 <Logging_init>:
	[RefVoltage_tag]=10,
	[AutoGainCoef_period_tag]=19,
};

void Logging_init(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
	disk_initialize(W25FatFs.drv);
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <Logging_init+0x14>)
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f00c ff83 	bl	80121fc <disk_initialize>
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20007618 	.word	0x20007618

08005300 <Create_File>:



void Create_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	461a      	mov	r2, r3
 800530c:	460b      	mov	r3, r1
 800530e:	72fb      	strb	r3, [r7, #11]
 8005310:	4613      	mov	r3, r2
 8005312:	813b      	strh	r3, [r7, #8]
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8005314:	2200      	movs	r2, #0
 8005316:	490b      	ldr	r1, [pc, #44]	; (8005344 <Create_File+0x44>)
 8005318:	480b      	ldr	r0, [pc, #44]	; (8005348 <Create_File+0x48>)
 800531a:	f00e fc93 	bl	8013c44 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_WRITE|FA_CREATE_ALWAYS);
 800531e:	220a      	movs	r2, #10
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	480a      	ldr	r0, [pc, #40]	; (800534c <Create_File+0x4c>)
 8005324:	f00e fcd4 	bl	8013cd0 <f_open>
	f_write(&MyFile, FileText, FileSize, &testBytes);
 8005328:	893a      	ldrh	r2, [r7, #8]
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <Create_File+0x50>)
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4807      	ldr	r0, [pc, #28]	; (800534c <Create_File+0x4c>)
 8005330:	f00e ffcb 	bl	80142ca <f_write>
	f_close(&MyFile);
 8005334:	4805      	ldr	r0, [pc, #20]	; (800534c <Create_File+0x4c>)
 8005336:	f00f f9bb 	bl	80146b0 <f_close>
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20008748 	.word	0x20008748
 8005348:	20007618 	.word	0x20007618
 800534c:	200073e8 	.word	0x200073e8
 8005350:	20007848 	.word	0x20007848

08005354 <Read_File>:



uint8_t Read_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	461a      	mov	r2, r3
 8005360:	460b      	mov	r3, r1
 8005362:	72fb      	strb	r3, [r7, #11]
 8005364:	4613      	mov	r3, r2
 8005366:	813b      	strh	r3, [r7, #8]
	uint8_t RES;
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8005368:	2200      	movs	r2, #0
 800536a:	490c      	ldr	r1, [pc, #48]	; (800539c <Read_File+0x48>)
 800536c:	480c      	ldr	r0, [pc, #48]	; (80053a0 <Read_File+0x4c>)
 800536e:	f00e fc69 	bl	8013c44 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_READ|FA_OPEN_ALWAYS);
 8005372:	2211      	movs	r2, #17
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	480b      	ldr	r0, [pc, #44]	; (80053a4 <Read_File+0x50>)
 8005378:	f00e fcaa 	bl	8013cd0 <f_open>
	RES=f_read(&MyFile, FileText, FileSize, &testBytes);
 800537c:	893a      	ldrh	r2, [r7, #8]
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <Read_File+0x54>)
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4808      	ldr	r0, [pc, #32]	; (80053a4 <Read_File+0x50>)
 8005384:	f00e fe62 	bl	801404c <f_read>
 8005388:	4603      	mov	r3, r0
 800538a:	75fb      	strb	r3, [r7, #23]
	f_close(&MyFile);
 800538c:	4805      	ldr	r0, [pc, #20]	; (80053a4 <Read_File+0x50>)
 800538e:	f00f f98f 	bl	80146b0 <f_close>
	return RES;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20008748 	.word	0x20008748
 80053a0:	20007618 	.word	0x20007618
 80053a4:	200073e8 	.word	0x200073e8
 80053a8:	20007848 	.word	0x20007848

080053ac <FileParser>:

uint16_t FileParser(uint8_t tag)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	81fb      	strh	r3, [r7, #14]
	uint16_t RES=0, Sym_cntr=0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	81bb      	strh	r3, [r7, #12]
 80053be:	2300      	movs	r3, #0
 80053c0:	817b      	strh	r3, [r7, #10]

	for(i=0;i<file_size;i++)
 80053c2:	2300      	movs	r3, #0
 80053c4:	81fb      	strh	r3, [r7, #14]
 80053c6:	e042      	b.n	800544e <FileParser+0xa2>
	{
		if(ReadFileBuf[i]==TAG_STRING[tag][Sym_cntr])
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	4a26      	ldr	r2, [pc, #152]	; (8005464 <FileParser+0xb8>)
 80053cc:	5cd2      	ldrb	r2, [r2, r3]
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	4925      	ldr	r1, [pc, #148]	; (8005468 <FileParser+0xbc>)
 80053d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053d6:	897b      	ldrh	r3, [r7, #10]
 80053d8:	440b      	add	r3, r1
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d133      	bne.n	8005448 <FileParser+0x9c>
		{
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 80053e0:	e013      	b.n	800540a <FileParser+0x5e>
			{
				if(ReadFileBuf[i+Sym_cntr]==TAG_STRING[tag][Sym_cntr])
 80053e2:	89fa      	ldrh	r2, [r7, #14]
 80053e4:	897b      	ldrh	r3, [r7, #10]
 80053e6:	4413      	add	r3, r2
 80053e8:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <FileParser+0xb8>)
 80053ea:	5cd2      	ldrb	r2, [r2, r3]
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	491e      	ldr	r1, [pc, #120]	; (8005468 <FileParser+0xbc>)
 80053f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053f4:	897b      	ldrh	r3, [r7, #10]
 80053f6:	440b      	add	r3, r1
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d102      	bne.n	8005404 <FileParser+0x58>
				{RES++;}
 80053fe:	89bb      	ldrh	r3, [r7, #12]
 8005400:	3301      	adds	r3, #1
 8005402:	81bb      	strh	r3, [r7, #12]
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005404:	897b      	ldrh	r3, [r7, #10]
 8005406:	3301      	adds	r3, #1
 8005408:	817b      	strh	r3, [r7, #10]
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	4a17      	ldr	r2, [pc, #92]	; (800546c <FileParser+0xc0>)
 800540e:	5cd3      	ldrb	r3, [r2, r3]
 8005410:	b29b      	uxth	r3, r3
 8005412:	897a      	ldrh	r2, [r7, #10]
 8005414:	429a      	cmp	r2, r3
 8005416:	d3e4      	bcc.n	80053e2 <FileParser+0x36>
			}
			if(RES==TAG_NUM_OF_SYM[tag])
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <FileParser+0xc0>)
 800541c:	5cd3      	ldrb	r3, [r2, r3]
 800541e:	b29b      	uxth	r3, r3
 8005420:	89ba      	ldrh	r2, [r7, #12]
 8005422:	429a      	cmp	r2, r3
 8005424:	d10c      	bne.n	8005440 <FileParser+0x94>
			{RES=i+TAG_NUM_OF_SYM[tag]+1; i=file_size;}
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <FileParser+0xc0>)
 800542a:	5cd3      	ldrb	r3, [r2, r3]
 800542c:	b29a      	uxth	r2, r3
 800542e:	89fb      	ldrh	r3, [r7, #14]
 8005430:	4413      	add	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	3301      	adds	r3, #1
 8005436:	81bb      	strh	r3, [r7, #12]
 8005438:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800543c:	81fb      	strh	r3, [r7, #14]
 800543e:	e003      	b.n	8005448 <FileParser+0x9c>
			else {RES=Sym_cntr=0;}
 8005440:	2300      	movs	r3, #0
 8005442:	817b      	strh	r3, [r7, #10]
 8005444:	897b      	ldrh	r3, [r7, #10]
 8005446:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<file_size;i++)
 8005448:	89fb      	ldrh	r3, [r7, #14]
 800544a:	3301      	adds	r3, #1
 800544c:	81fb      	strh	r3, [r7, #14]
 800544e:	89fb      	ldrh	r3, [r7, #14]
 8005450:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005454:	d3b8      	bcc.n	80053c8 <FileParser+0x1c>
		}
	}

	return RES;
 8005456:	89bb      	ldrh	r3, [r7, #12]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	20006c18 	.word	0x20006c18
 8005468:	20000288 	.word	0x20000288
 800546c:	08023e38 	.word	0x08023e38

08005470 <scan_double>:
	}
}


double scan_double(uint16_t offset, uint8_t *buff)
{
 8005470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005474:	b088      	sub	sp, #32
 8005476:	af00      	add	r7, sp, #0
 8005478:	4603      	mov	r3, r0
 800547a:	6039      	str	r1, [r7, #0]
 800547c:	80fb      	strh	r3, [r7, #6]
	uint64_t res64=0;
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t i=0, point=0, sign=0, after_size=0;
 800548a:	2300      	movs	r3, #0
 800548c:	82fb      	strh	r3, [r7, #22]
 800548e:	2300      	movs	r3, #0
 8005490:	82bb      	strh	r3, [r7, #20]
 8005492:	2300      	movs	r3, #0
 8005494:	827b      	strh	r3, [r7, #18]
 8005496:	2300      	movs	r3, #0
 8005498:	823b      	strh	r3, [r7, #16]
	double RES=0;
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(buff[offset]=='-')sign=1;
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	4413      	add	r3, r2
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b2d      	cmp	r3, #45	; 0x2d
 80054b0:	d101      	bne.n	80054b6 <scan_double+0x46>
 80054b2:	2301      	movs	r3, #1
 80054b4:	827b      	strh	r3, [r7, #18]

	// Find point
	for(i=0;i<30;i++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	82fb      	strh	r3, [r7, #22]
 80054ba:	e034      	b.n	8005526 <scan_double+0xb6>
	{
		if((buff[i+sign+offset]==',')||(buff[i+sign+offset]=='.')) point=i;
 80054bc:	8afa      	ldrh	r2, [r7, #22]
 80054be:	8a7b      	ldrh	r3, [r7, #18]
 80054c0:	441a      	add	r2, r3
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	4413      	add	r3, r2
 80054c6:	461a      	mov	r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b2c      	cmp	r3, #44	; 0x2c
 80054d0:	d00a      	beq.n	80054e8 <scan_double+0x78>
 80054d2:	8afa      	ldrh	r2, [r7, #22]
 80054d4:	8a7b      	ldrh	r3, [r7, #18]
 80054d6:	441a      	add	r2, r3
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	4413      	add	r3, r2
 80054dc:	461a      	mov	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	4413      	add	r3, r2
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b2e      	cmp	r3, #46	; 0x2e
 80054e6:	d101      	bne.n	80054ec <scan_double+0x7c>
 80054e8:	8afb      	ldrh	r3, [r7, #22]
 80054ea:	82bb      	strh	r3, [r7, #20]
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) {after_size=i; i=30;}
 80054ec:	8afa      	ldrh	r2, [r7, #22]
 80054ee:	8a7b      	ldrh	r3, [r7, #18]
 80054f0:	441a      	add	r2, r3
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	4413      	add	r3, r2
 80054f6:	461a      	mov	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b0d      	cmp	r3, #13
 8005500:	d00a      	beq.n	8005518 <scan_double+0xa8>
 8005502:	8afa      	ldrh	r2, [r7, #22]
 8005504:	8a7b      	ldrh	r3, [r7, #18]
 8005506:	441a      	add	r2, r3
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	4413      	add	r3, r2
 800550c:	461a      	mov	r2, r3
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b0a      	cmp	r3, #10
 8005516:	d103      	bne.n	8005520 <scan_double+0xb0>
 8005518:	8afb      	ldrh	r3, [r7, #22]
 800551a:	823b      	strh	r3, [r7, #16]
 800551c:	231e      	movs	r3, #30
 800551e:	82fb      	strh	r3, [r7, #22]
	for(i=0;i<30;i++)
 8005520:	8afb      	ldrh	r3, [r7, #22]
 8005522:	3301      	adds	r3, #1
 8005524:	82fb      	strh	r3, [r7, #22]
 8005526:	8afb      	ldrh	r3, [r7, #22]
 8005528:	2b1d      	cmp	r3, #29
 800552a:	d9c7      	bls.n	80054bc <scan_double+0x4c>
	}

	if(after_size>19)after_size=19;
 800552c:	8a3b      	ldrh	r3, [r7, #16]
 800552e:	2b13      	cmp	r3, #19
 8005530:	d901      	bls.n	8005536 <scan_double+0xc6>
 8005532:	2313      	movs	r3, #19
 8005534:	823b      	strh	r3, [r7, #16]
	for(i=0;i<after_size;i++)
 8005536:	2300      	movs	r3, #0
 8005538:	82fb      	strh	r3, [r7, #22]
 800553a:	e04d      	b.n	80055d8 <scan_double+0x168>
	{
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) break;
 800553c:	8afa      	ldrh	r2, [r7, #22]
 800553e:	8a7b      	ldrh	r3, [r7, #18]
 8005540:	441a      	add	r2, r3
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	4413      	add	r3, r2
 8005546:	461a      	mov	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4413      	add	r3, r2
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b0d      	cmp	r3, #13
 8005550:	d046      	beq.n	80055e0 <scan_double+0x170>
 8005552:	8afa      	ldrh	r2, [r7, #22]
 8005554:	8a7b      	ldrh	r3, [r7, #18]
 8005556:	441a      	add	r2, r3
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	4413      	add	r3, r2
 800555c:	461a      	mov	r2, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	4413      	add	r3, r2
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b0a      	cmp	r3, #10
 8005566:	d03b      	beq.n	80055e0 <scan_double+0x170>
		if((i!=point)||(point==0))
 8005568:	8afa      	ldrh	r2, [r7, #22]
 800556a:	8abb      	ldrh	r3, [r7, #20]
 800556c:	429a      	cmp	r2, r3
 800556e:	d102      	bne.n	8005576 <scan_double+0x106>
 8005570:	8abb      	ldrh	r3, [r7, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d12d      	bne.n	80055d2 <scan_double+0x162>
		{
			res64*=10;
 8005576:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800557a:	4622      	mov	r2, r4
 800557c:	462b      	mov	r3, r5
 800557e:	f04f 0000 	mov.w	r0, #0
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	0099      	lsls	r1, r3, #2
 8005588:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800558c:	0090      	lsls	r0, r2, #2
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	1912      	adds	r2, r2, r4
 8005594:	eb45 0303 	adc.w	r3, r5, r3
 8005598:	eb12 0a02 	adds.w	sl, r2, r2
 800559c:	eb43 0b03 	adc.w	fp, r3, r3
 80055a0:	4652      	mov	r2, sl
 80055a2:	465b      	mov	r3, fp
 80055a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			res64+=buff[i+sign+offset]-48;
 80055a8:	8afa      	ldrh	r2, [r7, #22]
 80055aa:	8a7b      	ldrh	r3, [r7, #18]
 80055ac:	441a      	add	r2, r3
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	4413      	add	r3, r2
 80055b2:	461a      	mov	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	3b30      	subs	r3, #48	; 0x30
 80055bc:	461a      	mov	r2, r3
 80055be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80055c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055c6:	eb10 0802 	adds.w	r8, r0, r2
 80055ca:	eb41 0903 	adc.w	r9, r1, r3
 80055ce:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i=0;i<after_size;i++)
 80055d2:	8afb      	ldrh	r3, [r7, #22]
 80055d4:	3301      	adds	r3, #1
 80055d6:	82fb      	strh	r3, [r7, #22]
 80055d8:	8afa      	ldrh	r2, [r7, #22]
 80055da:	8a3b      	ldrh	r3, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3ad      	bcc.n	800553c <scan_double+0xcc>
		}
	}

	if(point!=0){after_size-=1;
 80055e0:	8abb      	ldrh	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d022      	beq.n	800562c <scan_double+0x1bc>
 80055e6:	8a3b      	ldrh	r3, [r7, #16]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	823b      	strh	r3, [r7, #16]
	RES = (double)res64;
 80055ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055f0:	f7fa ffdc 	bl	80005ac <__aeabi_ul2d>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<(after_size-point);i++)RES *= 0.1;}
 80055fc:	2300      	movs	r3, #0
 80055fe:	82fb      	strh	r3, [r7, #22]
 8005600:	e00d      	b.n	800561e <scan_double+0x1ae>
 8005602:	a319      	add	r3, pc, #100	; (adr r3, 8005668 <scan_double+0x1f8>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800560c:	f7fb f804 	bl	8000618 <__aeabi_dmul>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005618:	8afb      	ldrh	r3, [r7, #22]
 800561a:	3301      	adds	r3, #1
 800561c:	82fb      	strh	r3, [r7, #22]
 800561e:	8afa      	ldrh	r2, [r7, #22]
 8005620:	8a39      	ldrh	r1, [r7, #16]
 8005622:	8abb      	ldrh	r3, [r7, #20]
 8005624:	1acb      	subs	r3, r1, r3
 8005626:	429a      	cmp	r2, r3
 8005628:	dbeb      	blt.n	8005602 <scan_double+0x192>
 800562a:	e007      	b.n	800563c <scan_double+0x1cc>
	else RES = (double)res64;
 800562c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005630:	f7fa ffbc 	bl	80005ac <__aeabi_ul2d>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(sign==1)RES=-RES;
 800563c:	8a7b      	ldrh	r3, [r7, #18]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d105      	bne.n	800564e <scan_double+0x1de>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800564c:	60fb      	str	r3, [r7, #12]
	return RES;
 800564e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005652:	ec43 2b17 	vmov	d7, r2, r3
}
 8005656:	eeb0 0a47 	vmov.f32	s0, s14
 800565a:	eef0 0a67 	vmov.f32	s1, s15
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005666:	bf00      	nop
 8005668:	9999999a 	.word	0x9999999a
 800566c:	3fb99999 	.word	0x3fb99999

08005670 <Save_Settings>:

void Save_Settings(uint8_t TAG, int32_t data)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	71fb      	strb	r3, [r7, #7]
	uint8_t Name[11]="CONFIG.CSV\0";
 800567c:	4a4c      	ldr	r2, [pc, #304]	; (80057b0 <Save_Settings+0x140>)
 800567e:	f107 030c 	add.w	r3, r7, #12
 8005682:	ca07      	ldmia	r2, {r0, r1, r2}
 8005684:	c303      	stmia	r3!, {r0, r1}
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	3302      	adds	r3, #2
 800568a:	0c12      	lsrs	r2, r2, #16
 800568c:	701a      	strb	r2, [r3, #0]
	uint16_t index, i, end_index;
	while(Read_File(Name, 11, ReadFileBuf, file_size)!=FR_OK){};
 800568e:	bf00      	nop
 8005690:	f107 000c 	add.w	r0, r7, #12
 8005694:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005698:	4a46      	ldr	r2, [pc, #280]	; (80057b4 <Save_Settings+0x144>)
 800569a:	210b      	movs	r1, #11
 800569c:	f7ff fe5a 	bl	8005354 <Read_File>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f4      	bne.n	8005690 <Save_Settings+0x20>
	//{
		index=FileParser(TAG);
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fe7f 	bl	80053ac <FileParser>
 80056ae:	4603      	mov	r3, r0
 80056b0:	837b      	strh	r3, [r7, #26]
		for(i=index;i<file_size-1;i++)
 80056b2:	8b7b      	ldrh	r3, [r7, #26]
 80056b4:	83fb      	strh	r3, [r7, #30]
 80056b6:	e013      	b.n	80056e0 <Save_Settings+0x70>
		{
			if((ReadFileBuf[i]==0x0D)&&(ReadFileBuf[i+1]==0x0A))
 80056b8:	8bfb      	ldrh	r3, [r7, #30]
 80056ba:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <Save_Settings+0x144>)
 80056bc:	5cd3      	ldrb	r3, [r2, r3]
 80056be:	2b0d      	cmp	r3, #13
 80056c0:	d10b      	bne.n	80056da <Save_Settings+0x6a>
 80056c2:	8bfb      	ldrh	r3, [r7, #30]
 80056c4:	3301      	adds	r3, #1
 80056c6:	4a3b      	ldr	r2, [pc, #236]	; (80057b4 <Save_Settings+0x144>)
 80056c8:	5cd3      	ldrb	r3, [r2, r3]
 80056ca:	2b0a      	cmp	r3, #10
 80056cc:	d105      	bne.n	80056da <Save_Settings+0x6a>
			{
				end_index=i+2;
 80056ce:	8bfb      	ldrh	r3, [r7, #30]
 80056d0:	3302      	adds	r3, #2
 80056d2:	83bb      	strh	r3, [r7, #28]
				i=file_size-1;
 80056d4:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80056d8:	83fb      	strh	r3, [r7, #30]
		for(i=index;i<file_size-1;i++)
 80056da:	8bfb      	ldrh	r3, [r7, #30]
 80056dc:	3301      	adds	r3, #1
 80056de:	83fb      	strh	r3, [r7, #30]
 80056e0:	8bfb      	ldrh	r3, [r7, #30]
 80056e2:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d9e6      	bls.n	80056b8 <Save_Settings+0x48>
			}
		}

		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	4a32      	ldr	r2, [pc, #200]	; (80057b8 <Save_Settings+0x148>)
 80056ee:	5cd3      	ldrb	r3, [r2, r3]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8b7a      	ldrh	r2, [r7, #26]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	83fb      	strh	r3, [r7, #30]
 80056fc:	e011      	b.n	8005722 <Save_Settings+0xb2>
		{
			ReadFileBuf[i]=ReadFileBuf[i+end_index-(index-TAG_NUM_OF_SYM[TAG]-1)];
 80056fe:	8bfa      	ldrh	r2, [r7, #30]
 8005700:	8bbb      	ldrh	r3, [r7, #28]
 8005702:	441a      	add	r2, r3
 8005704:	8b7b      	ldrh	r3, [r7, #26]
 8005706:	79f9      	ldrb	r1, [r7, #7]
 8005708:	482b      	ldr	r0, [pc, #172]	; (80057b8 <Save_Settings+0x148>)
 800570a:	5c41      	ldrb	r1, [r0, r1]
 800570c:	1a5b      	subs	r3, r3, r1
 800570e:	3b01      	subs	r3, #1
 8005710:	1ad2      	subs	r2, r2, r3
 8005712:	8bfb      	ldrh	r3, [r7, #30]
 8005714:	4927      	ldr	r1, [pc, #156]	; (80057b4 <Save_Settings+0x144>)
 8005716:	5c89      	ldrb	r1, [r1, r2]
 8005718:	4a26      	ldr	r2, [pc, #152]	; (80057b4 <Save_Settings+0x144>)
 800571a:	54d1      	strb	r1, [r2, r3]
		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 800571c:	8bfb      	ldrh	r3, [r7, #30]
 800571e:	3301      	adds	r3, #1
 8005720:	83fb      	strh	r3, [r7, #30]
 8005722:	8bfa      	ldrh	r2, [r7, #30]
 8005724:	8bbb      	ldrh	r3, [r7, #28]
 8005726:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800572a:	429a      	cmp	r2, r3
 800572c:	dbe7      	blt.n	80056fe <Save_Settings+0x8e>
		}

		index=FileParser(end_of_file_tag)-TAG_NUM_OF_SYM[end_of_file_tag]-1;
 800572e:	2000      	movs	r0, #0
 8005730:	f7ff fe3c 	bl	80053ac <FileParser>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	230b      	movs	r3, #11
 800573a:	b29b      	uxth	r3, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	837b      	strh	r3, [r7, #26]

		for(i=0;i<TAG_NUM_OF_SYM[TAG];i++)ReadFileBuf[i+index]=TAG_STRING[TAG][i];
 8005744:	2300      	movs	r3, #0
 8005746:	83fb      	strh	r3, [r7, #30]
 8005748:	e00e      	b.n	8005768 <Save_Settings+0xf8>
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <Save_Settings+0x14c>)
 800574e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005752:	8bfb      	ldrh	r3, [r7, #30]
 8005754:	441a      	add	r2, r3
 8005756:	8bf9      	ldrh	r1, [r7, #30]
 8005758:	8b7b      	ldrh	r3, [r7, #26]
 800575a:	440b      	add	r3, r1
 800575c:	7811      	ldrb	r1, [r2, #0]
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <Save_Settings+0x144>)
 8005760:	54d1      	strb	r1, [r2, r3]
 8005762:	8bfb      	ldrh	r3, [r7, #30]
 8005764:	3301      	adds	r3, #1
 8005766:	83fb      	strh	r3, [r7, #30]
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <Save_Settings+0x148>)
 800576c:	5cd3      	ldrb	r3, [r2, r3]
 800576e:	b29b      	uxth	r3, r3
 8005770:	8bfa      	ldrh	r2, [r7, #30]
 8005772:	429a      	cmp	r2, r3
 8005774:	d3e9      	bcc.n	800574a <Save_Settings+0xda>
		sprintf(ReadFileBuf+index+TAG_NUM_OF_SYM[TAG],";%d\r\nend_of_file;\r\n", data);
 8005776:	8b7b      	ldrh	r3, [r7, #26]
 8005778:	79fa      	ldrb	r2, [r7, #7]
 800577a:	490f      	ldr	r1, [pc, #60]	; (80057b8 <Save_Settings+0x148>)
 800577c:	5c8a      	ldrb	r2, [r1, r2]
 800577e:	4413      	add	r3, r2
 8005780:	4a0c      	ldr	r2, [pc, #48]	; (80057b4 <Save_Settings+0x144>)
 8005782:	4413      	add	r3, r2
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	490e      	ldr	r1, [pc, #56]	; (80057c0 <Save_Settings+0x150>)
 8005788:	4618      	mov	r0, r3
 800578a:	f018 fac1 	bl	801dd10 <siprintf>
		ReadFileBuf[file_size-1]="\0";
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <Save_Settings+0x154>)
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <Save_Settings+0x144>)
 8005794:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
		Create_File(Name, 11, ReadFileBuf, file_size);
 8005798:	f107 000c 	add.w	r0, r7, #12
 800579c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <Save_Settings+0x144>)
 80057a2:	210b      	movs	r1, #11
 80057a4:	f7ff fdac 	bl	8005300 <Create_File>
	//}
}
 80057a8:	bf00      	nop
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	08021fc4 	.word	0x08021fc4
 80057b4:	20006c18 	.word	0x20006c18
 80057b8:	08023e38 	.word	0x08023e38
 80057bc:	20000288 	.word	0x20000288
 80057c0:	08021fac 	.word	0x08021fac
 80057c4:	08021fc0 	.word	0x08021fc0

080057c8 <Read_Variable_From_File>:



double Read_Variable_From_File(uint8_t name)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
	return scan_double(FileParser(name), ReadFileBuf);
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fde9 	bl	80053ac <FileParser>
 80057da:	4603      	mov	r3, r0
 80057dc:	4907      	ldr	r1, [pc, #28]	; (80057fc <Read_Variable_From_File+0x34>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fe46 	bl	8005470 <scan_double>
 80057e4:	eeb0 7a40 	vmov.f32	s14, s0
 80057e8:	eef0 7a60 	vmov.f32	s15, s1
}
 80057ec:	eeb0 0a47 	vmov.f32	s0, s14
 80057f0:	eef0 0a67 	vmov.f32	s1, s15
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20006c18 	.word	0x20006c18

08005800 <Load_Settings>:



void Load_Settings(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
	uint8_t Name_settings[11]="CONFIG.CSV\0";
 8005806:	4ad2      	ldr	r2, [pc, #840]	; (8005b50 <Load_Settings+0x350>)
 8005808:	f107 030c 	add.w	r3, r7, #12
 800580c:	ca07      	ldmia	r2, {r0, r1, r2}
 800580e:	c303      	stmia	r3!, {r0, r1}
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	3302      	adds	r3, #2
 8005814:	0c12      	lsrs	r2, r2, #16
 8005816:	701a      	strb	r2, [r3, #0]
	uint8_t Name_calibr[8]="CAL.CSV\0";
 8005818:	4ace      	ldr	r2, [pc, #824]	; (8005b54 <Load_Settings+0x354>)
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005820:	e883 0003 	stmia.w	r3, {r0, r1}

	// Читаем конфигурационный файл
	while(Read_File(Name_settings, 11, ReadFileBuf, file_size)!=FR_OK){};
 8005824:	bf00      	nop
 8005826:	f107 000c 	add.w	r0, r7, #12
 800582a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800582e:	4aca      	ldr	r2, [pc, #808]	; (8005b58 <Load_Settings+0x358>)
 8005830:	210b      	movs	r1, #11
 8005832:	f7ff fd8f 	bl	8005354 <Read_File>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f4      	bne.n	8005826 <Load_Settings+0x26>
	//{
		gauge_error = Read_Variable_From_File(gauge_error_tag);
 800583c:	200f      	movs	r0, #15
 800583e:	f7ff ffc3 	bl	80057c8 <Read_Variable_From_File>
 8005842:	eeb0 7a40 	vmov.f32	s14, s0
 8005846:	eef0 7a60 	vmov.f32	s15, s1
 800584a:	4bc4      	ldr	r3, [pc, #784]	; (8005b5c <Load_Settings+0x35c>)
 800584c:	ed83 7b00 	vstr	d7, [r3]
		display_brightness = (uint16_t)Read_Variable_From_File(display_brightness_tag);
 8005850:	2001      	movs	r0, #1
 8005852:	f7ff ffb9 	bl	80057c8 <Read_Variable_From_File>
 8005856:	ec53 2b10 	vmov	r2, r3, d0
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	f7fb f9b3 	bl	8000bc8 <__aeabi_d2uiz>
 8005862:	4603      	mov	r3, r0
 8005864:	b29b      	uxth	r3, r3
 8005866:	b2da      	uxtb	r2, r3
 8005868:	4bbd      	ldr	r3, [pc, #756]	; (8005b60 <Load_Settings+0x360>)
 800586a:	701a      	strb	r2, [r3, #0]
		display_contrast = (uint16_t)Read_Variable_From_File(display_contrast_tag);
 800586c:	2002      	movs	r0, #2
 800586e:	f7ff ffab 	bl	80057c8 <Read_Variable_From_File>
 8005872:	ec53 2b10 	vmov	r2, r3, d0
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	f7fb f9a5 	bl	8000bc8 <__aeabi_d2uiz>
 800587e:	4603      	mov	r3, r0
 8005880:	b29b      	uxth	r3, r3
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4bb7      	ldr	r3, [pc, #732]	; (8005b64 <Load_Settings+0x364>)
 8005886:	701a      	strb	r2, [r3, #0]
		mm_peak = (uint16_t)Read_Variable_From_File(mm_peak_tag);
 8005888:	2003      	movs	r0, #3
 800588a:	f7ff ff9d 	bl	80057c8 <Read_Variable_From_File>
 800588e:	ec53 2b10 	vmov	r2, r3, d0
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	f7fb f997 	bl	8000bc8 <__aeabi_d2uiz>
 800589a:	4603      	mov	r3, r0
 800589c:	b29b      	uxth	r3, r3
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	4bb1      	ldr	r3, [pc, #708]	; (8005b68 <Load_Settings+0x368>)
 80058a2:	701a      	strb	r2, [r3, #0]
		leak_detect = (uint16_t)Read_Variable_From_File(leak_detect_tag);
 80058a4:	2004      	movs	r0, #4
 80058a6:	f7ff ff8f 	bl	80057c8 <Read_Variable_From_File>
 80058aa:	ec53 2b10 	vmov	r2, r3, d0
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	f7fb f989 	bl	8000bc8 <__aeabi_d2uiz>
 80058b6:	4603      	mov	r3, r0
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4bab      	ldr	r3, [pc, #684]	; (8005b6c <Load_Settings+0x36c>)
 80058be:	701a      	strb	r2, [r3, #0]
		PV = (uint16_t)Read_Variable_From_File(PV_tag);
 80058c0:	2005      	movs	r0, #5
 80058c2:	f7ff ff81 	bl	80057c8 <Read_Variable_From_File>
 80058c6:	ec53 2b10 	vmov	r2, r3, d0
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	f7fb f97b 	bl	8000bc8 <__aeabi_d2uiz>
 80058d2:	4603      	mov	r3, r0
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4ba5      	ldr	r3, [pc, #660]	; (8005b70 <Load_Settings+0x370>)
 80058da:	701a      	strb	r2, [r3, #0]
		PI = (uint16_t)Read_Variable_From_File(PI_tag);
 80058dc:	2006      	movs	r0, #6
 80058de:	f7ff ff73 	bl	80057c8 <Read_Variable_From_File>
 80058e2:	ec53 2b10 	vmov	r2, r3, d0
 80058e6:	4610      	mov	r0, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	f7fb f96d 	bl	8000bc8 <__aeabi_d2uiz>
 80058ee:	4603      	mov	r3, r0
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	4b9f      	ldr	r3, [pc, #636]	; (8005b74 <Load_Settings+0x374>)
 80058f6:	701a      	strb	r2, [r3, #0]
		PE = (uint16_t)Read_Variable_From_File(PE_tag);
 80058f8:	2007      	movs	r0, #7
 80058fa:	f7ff ff65 	bl	80057c8 <Read_Variable_From_File>
 80058fe:	ec53 2b10 	vmov	r2, r3, d0
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	f7fb f95f 	bl	8000bc8 <__aeabi_d2uiz>
 800590a:	4603      	mov	r3, r0
 800590c:	b29b      	uxth	r3, r3
 800590e:	b2da      	uxtb	r2, r3
 8005910:	4b99      	ldr	r3, [pc, #612]	; (8005b78 <Load_Settings+0x378>)
 8005912:	701a      	strb	r2, [r3, #0]
		PGA_GAIN = (uint16_t)Read_Variable_From_File(PGA_GAIN_tag);
 8005914:	2008      	movs	r0, #8
 8005916:	f7ff ff57 	bl	80057c8 <Read_Variable_From_File>
 800591a:	ec53 2b10 	vmov	r2, r3, d0
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	f7fb f951 	bl	8000bc8 <__aeabi_d2uiz>
 8005926:	4603      	mov	r3, r0
 8005928:	b29b      	uxth	r3, r3
 800592a:	b2da      	uxtb	r2, r3
 800592c:	4b93      	ldr	r3, [pc, #588]	; (8005b7c <Load_Settings+0x37c>)
 800592e:	701a      	strb	r2, [r3, #0]
		ADC_SPS = (uint16_t)Read_Variable_From_File(ADC_SPS_tag);
 8005930:	2009      	movs	r0, #9
 8005932:	f7ff ff49 	bl	80057c8 <Read_Variable_From_File>
 8005936:	ec53 2b10 	vmov	r2, r3, d0
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f7fb f943 	bl	8000bc8 <__aeabi_d2uiz>
 8005942:	4603      	mov	r3, r0
 8005944:	b29b      	uxth	r3, r3
 8005946:	b2da      	uxtb	r2, r3
 8005948:	4b8d      	ldr	r3, [pc, #564]	; (8005b80 <Load_Settings+0x380>)
 800594a:	701a      	strb	r2, [r3, #0]
		adc_calibration_mode = (uint16_t)Read_Variable_From_File(adc_calibration_mode_tag);
 800594c:	200a      	movs	r0, #10
 800594e:	f7ff ff3b 	bl	80057c8 <Read_Variable_From_File>
 8005952:	ec53 2b10 	vmov	r2, r3, d0
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	f7fb f935 	bl	8000bc8 <__aeabi_d2uiz>
 800595e:	4603      	mov	r3, r0
 8005960:	b29b      	uxth	r3, r3
 8005962:	b2da      	uxtb	r2, r3
 8005964:	4b87      	ldr	r3, [pc, #540]	; (8005b84 <Load_Settings+0x384>)
 8005966:	701a      	strb	r2, [r3, #0]
		ADC_Buff_size = (uint16_t)Read_Variable_From_File(ADC_Buff_size_tag);
 8005968:	200b      	movs	r0, #11
 800596a:	f7ff ff2d 	bl	80057c8 <Read_Variable_From_File>
 800596e:	ec53 2b10 	vmov	r2, r3, d0
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	f7fb f927 	bl	8000bc8 <__aeabi_d2uiz>
 800597a:	4603      	mov	r3, r0
 800597c:	b29a      	uxth	r2, r3
 800597e:	4b82      	ldr	r3, [pc, #520]	; (8005b88 <Load_Settings+0x388>)
 8005980:	801a      	strh	r2, [r3, #0]
		Auto_Off_Time = (uint16_t)Read_Variable_From_File(Auto_Off_Time_tag);
 8005982:	200c      	movs	r0, #12
 8005984:	f7ff ff20 	bl	80057c8 <Read_Variable_From_File>
 8005988:	ec53 2b10 	vmov	r2, r3, d0
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	f7fb f91a 	bl	8000bc8 <__aeabi_d2uiz>
 8005994:	4603      	mov	r3, r0
 8005996:	b29a      	uxth	r2, r3
 8005998:	4b7c      	ldr	r3, [pc, #496]	; (8005b8c <Load_Settings+0x38c>)
 800599a:	801a      	strh	r2, [r3, #0]
		serial_num = (uint16_t)Read_Variable_From_File(serial_num_tag);
 800599c:	200d      	movs	r0, #13
 800599e:	f7ff ff13 	bl	80057c8 <Read_Variable_From_File>
 80059a2:	ec53 2b10 	vmov	r2, r3, d0
 80059a6:	4610      	mov	r0, r2
 80059a8:	4619      	mov	r1, r3
 80059aa:	f7fb f90d 	bl	8000bc8 <__aeabi_d2uiz>
 80059ae:	4603      	mov	r3, r0
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	4b76      	ldr	r3, [pc, #472]	; (8005b90 <Load_Settings+0x390>)
 80059b6:	601a      	str	r2, [r3, #0]
		gauge_range = (uint16_t)Read_Variable_From_File(gauge_range_tag);
 80059b8:	200e      	movs	r0, #14
 80059ba:	f7ff ff05 	bl	80057c8 <Read_Variable_From_File>
 80059be:	ec53 2b10 	vmov	r2, r3, d0
 80059c2:	4610      	mov	r0, r2
 80059c4:	4619      	mov	r1, r3
 80059c6:	f7fb f8ff 	bl	8000bc8 <__aeabi_d2uiz>
 80059ca:	4603      	mov	r3, r0
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <Load_Settings+0x394>)
 80059d2:	601a      	str	r2, [r3, #0]
		light_delay = (uint16_t)Read_Variable_From_File(light_delay_tag);
 80059d4:	2010      	movs	r0, #16
 80059d6:	f7ff fef7 	bl	80057c8 <Read_Variable_From_File>
 80059da:	ec53 2b10 	vmov	r2, r3, d0
 80059de:	4610      	mov	r0, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	f7fb f8f1 	bl	8000bc8 <__aeabi_d2uiz>
 80059e6:	4603      	mov	r3, r0
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	4b6b      	ldr	r3, [pc, #428]	; (8005b98 <Load_Settings+0x398>)
 80059ec:	801a      	strh	r2, [r3, #0]
		logging = (uint16_t)Read_Variable_From_File(logging_tag);
 80059ee:	2011      	movs	r0, #17
 80059f0:	f7ff feea 	bl	80057c8 <Read_Variable_From_File>
 80059f4:	ec53 2b10 	vmov	r2, r3, d0
 80059f8:	4610      	mov	r0, r2
 80059fa:	4619      	mov	r1, r3
 80059fc:	f7fb f8e4 	bl	8000bc8 <__aeabi_d2uiz>
 8005a00:	4603      	mov	r3, r0
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4b65      	ldr	r3, [pc, #404]	; (8005b9c <Load_Settings+0x39c>)
 8005a08:	701a      	strb	r2, [r3, #0]
		logging_start_hour = (uint16_t)Read_Variable_From_File(logging_start_hour_tag);
 8005a0a:	2012      	movs	r0, #18
 8005a0c:	f7ff fedc 	bl	80057c8 <Read_Variable_From_File>
 8005a10:	ec53 2b10 	vmov	r2, r3, d0
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	f7fb f8d6 	bl	8000bc8 <__aeabi_d2uiz>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4b5f      	ldr	r3, [pc, #380]	; (8005ba0 <Load_Settings+0x3a0>)
 8005a24:	701a      	strb	r2, [r3, #0]
		logging_start_min = (uint16_t)Read_Variable_From_File(logging_start_min_tag);
 8005a26:	2013      	movs	r0, #19
 8005a28:	f7ff fece 	bl	80057c8 <Read_Variable_From_File>
 8005a2c:	ec53 2b10 	vmov	r2, r3, d0
 8005a30:	4610      	mov	r0, r2
 8005a32:	4619      	mov	r1, r3
 8005a34:	f7fb f8c8 	bl	8000bc8 <__aeabi_d2uiz>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b59      	ldr	r3, [pc, #356]	; (8005ba4 <Load_Settings+0x3a4>)
 8005a40:	701a      	strb	r2, [r3, #0]
		logging_start_sec = (uint16_t)Read_Variable_From_File(logging_start_sec_tag);
 8005a42:	2014      	movs	r0, #20
 8005a44:	f7ff fec0 	bl	80057c8 <Read_Variable_From_File>
 8005a48:	ec53 2b10 	vmov	r2, r3, d0
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f7fb f8ba 	bl	8000bc8 <__aeabi_d2uiz>
 8005a54:	4603      	mov	r3, r0
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <Load_Settings+0x3a8>)
 8005a5c:	701a      	strb	r2, [r3, #0]
		logging_period = (uint16_t)Read_Variable_From_File(logging_period_tag);
 8005a5e:	2015      	movs	r0, #21
 8005a60:	f7ff feb2 	bl	80057c8 <Read_Variable_From_File>
 8005a64:	ec53 2b10 	vmov	r2, r3, d0
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f7fb f8ac 	bl	8000bc8 <__aeabi_d2uiz>
 8005a70:	4603      	mov	r3, r0
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4b4d      	ldr	r3, [pc, #308]	; (8005bac <Load_Settings+0x3ac>)
 8005a78:	701a      	strb	r2, [r3, #0]
		logging_len = (uint16_t)Read_Variable_From_File(logging_len_tag);
 8005a7a:	2016      	movs	r0, #22
 8005a7c:	f7ff fea4 	bl	80057c8 <Read_Variable_From_File>
 8005a80:	ec53 2b10 	vmov	r2, r3, d0
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f7fb f89e 	bl	8000bc8 <__aeabi_d2uiz>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4b47      	ldr	r3, [pc, #284]	; (8005bb0 <Load_Settings+0x3b0>)
 8005a94:	701a      	strb	r2, [r3, #0]
		logging_num = (uint16_t)Read_Variable_From_File(logging_num_tag);
 8005a96:	2017      	movs	r0, #23
 8005a98:	f7ff fe96 	bl	80057c8 <Read_Variable_From_File>
 8005a9c:	ec53 2b10 	vmov	r2, r3, d0
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f7fb f890 	bl	8000bc8 <__aeabi_d2uiz>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b41      	ldr	r3, [pc, #260]	; (8005bb4 <Load_Settings+0x3b4>)
 8005ab0:	701a      	strb	r2, [r3, #0]
		AutoAmpCoef=(uint8_t)Read_Variable_From_File(AutoAmpCoef_tag);
 8005ab2:	201e      	movs	r0, #30
 8005ab4:	f7ff fe88 	bl	80057c8 <Read_Variable_From_File>
 8005ab8:	ec53 2b10 	vmov	r2, r3, d0
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f7fb f882 	bl	8000bc8 <__aeabi_d2uiz>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b3b      	ldr	r3, [pc, #236]	; (8005bb8 <Load_Settings+0x3b8>)
 8005aca:	701a      	strb	r2, [r3, #0]
		AutoOffCoef_period=(uint16_t)Read_Variable_From_File(AutoOffCoef_period_tag);
 8005acc:	201f      	movs	r0, #31
 8005ace:	f7ff fe7b 	bl	80057c8 <Read_Variable_From_File>
 8005ad2:	ec53 2b10 	vmov	r2, r3, d0
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7fb f875 	bl	8000bc8 <__aeabi_d2uiz>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <Load_Settings+0x3bc>)
 8005ae4:	801a      	strh	r2, [r3, #0]
		AutoGainCoef_period=(uint16_t)Read_Variable_From_File(AutoGainCoef_period_tag);
 8005ae6:	2021      	movs	r0, #33	; 0x21
 8005ae8:	f7ff fe6e 	bl	80057c8 <Read_Variable_From_File>
 8005aec:	ec53 2b10 	vmov	r2, r3, d0
 8005af0:	4610      	mov	r0, r2
 8005af2:	4619      	mov	r1, r3
 8005af4:	f7fb f868 	bl	8000bc8 <__aeabi_d2uiz>
 8005af8:	4603      	mov	r3, r0
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	4b30      	ldr	r3, [pc, #192]	; (8005bc0 <Load_Settings+0x3c0>)
 8005afe:	801a      	strh	r2, [r3, #0]

	//}

		// Читаем калибровочный файл
		while(Read_File(Name_calibr, 8, ReadFileBuf, file_size)!=FR_OK){};
 8005b00:	bf00      	nop
 8005b02:	1d38      	adds	r0, r7, #4
 8005b04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b08:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <Load_Settings+0x358>)
 8005b0a:	2108      	movs	r1, #8
 8005b0c:	f7ff fc22 	bl	8005354 <Read_File>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f5      	bne.n	8005b02 <Load_Settings+0x302>
		a_current=Read_Variable_From_File(a_current_tag);
 8005b16:	2018      	movs	r0, #24
 8005b18:	f7ff fe56 	bl	80057c8 <Read_Variable_From_File>
 8005b1c:	eeb0 7a40 	vmov.f32	s14, s0
 8005b20:	eef0 7a60 	vmov.f32	s15, s1
 8005b24:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <Load_Settings+0x3c4>)
 8005b26:	ed83 7b00 	vstr	d7, [r3]
		b_current=Read_Variable_From_File(b_current_tag);
 8005b2a:	2019      	movs	r0, #25
 8005b2c:	f7ff fe4c 	bl	80057c8 <Read_Variable_From_File>
 8005b30:	eeb0 7a40 	vmov.f32	s14, s0
 8005b34:	eef0 7a60 	vmov.f32	s15, s1
 8005b38:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <Load_Settings+0x3c8>)
 8005b3a:	ed83 7b00 	vstr	d7, [r3]
		c_current=Read_Variable_From_File(c_current_tag);
 8005b3e:	201a      	movs	r0, #26
 8005b40:	f7ff fe42 	bl	80057c8 <Read_Variable_From_File>
 8005b44:	eeb0 7a40 	vmov.f32	s14, s0
 8005b48:	eef0 7a60 	vmov.f32	s15, s1
 8005b4c:	e03e      	b.n	8005bcc <Load_Settings+0x3cc>
 8005b4e:	bf00      	nop
 8005b50:	08021fc4 	.word	0x08021fc4
 8005b54:	08021fd0 	.word	0x08021fd0
 8005b58:	20006c18 	.word	0x20006c18
 8005b5c:	200000a8 	.word	0x200000a8
 8005b60:	20000098 	.word	0x20000098
 8005b64:	20000099 	.word	0x20000099
 8005b68:	200008a2 	.word	0x200008a2
 8005b6c:	200008a3 	.word	0x200008a3
 8005b70:	200008a4 	.word	0x200008a4
 8005b74:	200008a5 	.word	0x200008a5
 8005b78:	200008a6 	.word	0x200008a6
 8005b7c:	2000009a 	.word	0x2000009a
 8005b80:	2000009b 	.word	0x2000009b
 8005b84:	200008a7 	.word	0x200008a7
 8005b88:	2000009c 	.word	0x2000009c
 8005b8c:	200008a8 	.word	0x200008a8
 8005b90:	200000a0 	.word	0x200000a0
 8005b94:	200008ac 	.word	0x200008ac
 8005b98:	200000b0 	.word	0x200000b0
 8005b9c:	200008b0 	.word	0x200008b0
 8005ba0:	200008b1 	.word	0x200008b1
 8005ba4:	200008b2 	.word	0x200008b2
 8005ba8:	200008b3 	.word	0x200008b3
 8005bac:	200008b4 	.word	0x200008b4
 8005bb0:	200008b5 	.word	0x200008b5
 8005bb4:	200008b6 	.word	0x200008b6
 8005bb8:	200008a1 	.word	0x200008a1
 8005bbc:	20002174 	.word	0x20002174
 8005bc0:	2000210c 	.word	0x2000210c
 8005bc4:	20006bf8 	.word	0x20006bf8
 8005bc8:	20006c10 	.word	0x20006c10
 8005bcc:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <Load_Settings+0x42c>)
 8005bce:	ed83 7b00 	vstr	d7, [r3]
		a_voltage=Read_Variable_From_File(a_voltage_tag);
 8005bd2:	201b      	movs	r0, #27
 8005bd4:	f7ff fdf8 	bl	80057c8 <Read_Variable_From_File>
 8005bd8:	eeb0 7a40 	vmov.f32	s14, s0
 8005bdc:	eef0 7a60 	vmov.f32	s15, s1
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <Load_Settings+0x430>)
 8005be2:	ed83 7b00 	vstr	d7, [r3]
		b_voltage=Read_Variable_From_File(b_voltage_tag);
 8005be6:	201c      	movs	r0, #28
 8005be8:	f7ff fdee 	bl	80057c8 <Read_Variable_From_File>
 8005bec:	eeb0 7a40 	vmov.f32	s14, s0
 8005bf0:	eef0 7a60 	vmov.f32	s15, s1
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <Load_Settings+0x434>)
 8005bf6:	ed83 7b00 	vstr	d7, [r3]
		c_voltage=Read_Variable_From_File(c_voltage_tag);
 8005bfa:	201d      	movs	r0, #29
 8005bfc:	f7ff fde4 	bl	80057c8 <Read_Variable_From_File>
 8005c00:	eeb0 7a40 	vmov.f32	s14, s0
 8005c04:	eef0 7a60 	vmov.f32	s15, s1
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <Load_Settings+0x438>)
 8005c0a:	ed83 7b00 	vstr	d7, [r3]
		RefVoltage=Read_Variable_From_File(RefVoltage_tag);
 8005c0e:	2020      	movs	r0, #32
 8005c10:	f7ff fdda 	bl	80057c8 <Read_Variable_From_File>
 8005c14:	eeb0 7a40 	vmov.f32	s14, s0
 8005c18:	eef0 7a60 	vmov.f32	s15, s1
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <Load_Settings+0x43c>)
 8005c1e:	ed83 7b00 	vstr	d7, [r3]
//		my_itoa(123456.654321, RAM, 0, 20);
//		my_itoa(-654321.123456, RAM, 0, 20);
//		my_itoa(555555, RAM, 0, 20);
//		my_itoa(-444444, RAM, 0, 20);
//		RAM[0]=0;
}
 8005c22:	bf00      	nop
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20006bf0 	.word	0x20006bf0
 8005c30:	20006c00 	.word	0x20006c00
 8005c34:	20006be8 	.word	0x20006be8
 8005c38:	20006c08 	.word	0x20006c08
 8005c3c:	20000088 	.word	0x20000088

08005c40 <led_on>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_on(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
	LED(0,1,0);
 8005c44:	2200      	movs	r2, #0
 8005c46:	2101      	movs	r1, #1
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f7fc fa95 	bl	8002178 <LED>
	Task_STOP(9);
 8005c4e:	2009      	movs	r0, #9
 8005c50:	f7fd fabc 	bl	80031cc <Task_STOP>
	Task_RUN(10, 500);
 8005c54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005c58:	200a      	movs	r0, #10
 8005c5a:	f7fd fad1 	bl	8003200 <Task_RUN>
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <led_off>:
void led_off(void)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	af00      	add	r7, sp, #0
	LED(0,0,0);
 8005c66:	2200      	movs	r2, #0
 8005c68:	2100      	movs	r1, #0
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f7fc fa84 	bl	8002178 <LED>
	Task_STOP(10);
 8005c70:	200a      	movs	r0, #10
 8005c72:	f7fd faab 	bl	80031cc <Task_STOP>
	Task_RUN(9, 500);
 8005c76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005c7a:	2009      	movs	r0, #9
 8005c7c:	f7fd fac0 	bl	8003200 <Task_RUN>
}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c8a:	f001 ff86 	bl	8007b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c8e:	f000 f891 	bl	8005db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c92:	f000 fcb7 	bl	8006604 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005c96:	f000 f9fd 	bl	8006094 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005c9a:	f000 fa3b 	bl	8006114 <MX_I2C2_Init>
  MX_RTC_Init();
 8005c9e:	f000 fa79 	bl	8006194 <MX_RTC_Init>
  MX_SPI1_Init();
 8005ca2:	f000 faa3 	bl	80061ec <MX_SPI1_Init>
  MX_SPI2_Init();
 8005ca6:	f000 fadf 	bl	8006268 <MX_SPI2_Init>
  MX_SPI3_Init();
 8005caa:	f000 fb1b 	bl	80062e4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8005cae:	f000 fb57 	bl	8006360 <MX_TIM2_Init>
  MX_TIM4_Init();
 8005cb2:	f000 fbb1 	bl	8006418 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005cb6:	f000 fc3f 	bl	8006538 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8005cba:	f00c f9ab 	bl	8012014 <MX_FATFS_Init>
  MX_DMA_Init();
 8005cbe:	f000 fc73 	bl	80065a8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8005cc2:	f012 ff19 	bl	8018af8 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8005cc6:	f000 f94f 	bl	8005f68 <MX_ADC2_Init>
  MX_ADC1_Init();
 8005cca:	f000 f8d3 	bl	8005e74 <MX_ADC1_Init>
  MX_TIM6_Init();
 8005cce:	f000 fbfd 	bl	80064cc <MX_TIM6_Init>
  MX_DAC1_Init();
 8005cd2:	f000 f9ad 	bl	8006030 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Таски
  	new_task[1]=Parser_process;			// Парсинг команд через виртуальный компорт
 8005cd6:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <main+0xf4>)
 8005cd8:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <main+0xf8>)
 8005cda:	605a      	str	r2, [r3, #4]
	new_task[2]=ADC_process;			// АЦП
 8005cdc:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <main+0xf4>)
 8005cde:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <main+0xfc>)
 8005ce0:	609a      	str	r2, [r3, #8]
	new_task[3]=Display_process;		// Дисплей
 8005ce2:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <main+0xf4>)
 8005ce4:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <main+0x100>)
 8005ce6:	60da      	str	r2, [r3, #12]
	new_task[4]=Buttons_process;		// Кнопки
 8005ce8:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <main+0xf4>)
 8005cea:	4a27      	ldr	r2, [pc, #156]	; (8005d88 <main+0x104>)
 8005cec:	611a      	str	r2, [r3, #16]
	new_task[5]=RTC_process;			// Часы реального времени
 8005cee:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <main+0xf4>)
 8005cf0:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <main+0x108>)
 8005cf2:	615a      	str	r2, [r3, #20]
	new_task[6]=Auto_OFF_process;		// Автовыключение
 8005cf4:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <main+0xf4>)
 8005cf6:	4a26      	ldr	r2, [pc, #152]	; (8005d90 <main+0x10c>)
 8005cf8:	619a      	str	r2, [r3, #24]
	new_task[7]=Temperature_process;	// Температура МКУ
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	; (8005d78 <main+0xf4>)
 8005cfc:	4a25      	ldr	r2, [pc, #148]	; (8005d94 <main+0x110>)
 8005cfe:	61da      	str	r2, [r3, #28]
	new_task[8]=Battery_process;		// Напряжение на батарее
 8005d00:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <main+0xf4>)
 8005d02:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <main+0x114>)
 8005d04:	621a      	str	r2, [r3, #32]

	new_task[9]=led_on;
 8005d06:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <main+0xf4>)
 8005d08:	4a24      	ldr	r2, [pc, #144]	; (8005d9c <main+0x118>)
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24
	new_task[10]=led_off;
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <main+0xf4>)
 8005d0e:	4a24      	ldr	r2, [pc, #144]	; (8005da0 <main+0x11c>)
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Питание на самоблокировку
 8005d12:	2201      	movs	r2, #1
 8005d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d18:	4822      	ldr	r0, [pc, #136]	; (8005da4 <main+0x120>)
 8005d1a:	f004 fa61 	bl	800a1e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Питание на самоблокировку
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d24:	4820      	ldr	r0, [pc, #128]	; (8005da8 <main+0x124>)
 8005d26:	f004 fa5b 	bl	800a1e0 <HAL_GPIO_WritePin>
  TURN_ON_ADC_POWER();
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	481d      	ldr	r0, [pc, #116]	; (8005da4 <main+0x120>)
 8005d30:	f004 fa56 	bl	800a1e0 <HAL_GPIO_WritePin>
 8005d34:	2201      	movs	r2, #1
 8005d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d3a:	481b      	ldr	r0, [pc, #108]	; (8005da8 <main+0x124>)
 8005d3c:	f004 fa50 	bl	800a1e0 <HAL_GPIO_WritePin>

  Buttons_init();
 8005d40:	f7fc f942 	bl	8001fc8 <Buttons_init>
  Display_init();
 8005d44:	f7fc ff68 	bl	8002c18 <Display_init>
  ADC_init();
 8005d48:	f7fb fbfa 	bl	8001540 <ADC_init>
  W25_Init();
 8005d4c:	f7fe fe46 	bl	80049dc <W25_Init>
  BLueTooth_Configuration(BLE_config);
 8005d50:	4b16      	ldr	r3, [pc, #88]	; (8005dac <main+0x128>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fc f9b9 	bl	80020cc <BLueTooth_Configuration>
  Logging_init();
 8005d5a:	f7ff fac5 	bl	80052e8 <Logging_init>
  Load_Settings();
 8005d5e:	f7ff fd4f 	bl	8005800 <Load_Settings>

  uint8_t CID = MAX77960_Read_Reg(MAX77960_CID);
 8005d62:	2000      	movs	r0, #0
 8005d64:	f7fd fa7c 	bl	8003260 <MAX77960_Read_Reg>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	71fb      	strb	r3, [r7, #7]

  Play_Sound((char*)"INTRO.WAV");
 8005d6c:	4810      	ldr	r0, [pc, #64]	; (8005db0 <main+0x12c>)
 8005d6e:	f000 fd7b 	bl	8006868 <Play_Sound>
  ELSPIRE_OS_KERNEL();
 8005d72:	f7fd f9b3 	bl	80030dc <ELSPIRE_OS_KERNEL>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005d76:	e7fe      	b.n	8005d76 <main+0xf2>
 8005d78:	20001f3c 	.word	0x20001f3c
 8005d7c:	08003de1 	.word	0x08003de1
 8005d80:	080019c1 	.word	0x080019c1
 8005d84:	08002ff1 	.word	0x08002ff1
 8005d88:	080027ad 	.word	0x080027ad
 8005d8c:	08017c31 	.word	0x08017c31
 8005d90:	08016edd 	.word	0x08016edd
 8005d94:	08007799 	.word	0x08007799
 8005d98:	08017a51 	.word	0x08017a51
 8005d9c:	08005c41 	.word	0x08005c41
 8005da0:	08005c63 	.word	0x08005c63
 8005da4:	48000800 	.word	0x48000800
 8005da8:	48000c00 	.word	0x48000c00
 8005dac:	20000080 	.word	0x20000080
 8005db0:	08021fd8 	.word	0x08021fd8

08005db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b096      	sub	sp, #88	; 0x58
 8005db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dba:	f107 0314 	add.w	r3, r7, #20
 8005dbe:	2244      	movs	r2, #68	; 0x44
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f017 f91c 	bl	801d000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005dc8:	463b      	mov	r3, r7
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	605a      	str	r2, [r3, #4]
 8005dd0:	609a      	str	r2, [r3, #8]
 8005dd2:	60da      	str	r2, [r3, #12]
 8005dd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005dd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005dda:	f006 f817 	bl	800be0c <HAL_PWREx_ControlVoltageScaling>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005de4:	f000 fd3a 	bl	800685c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005de8:	f005 fff2 	bl	800bdd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005dec:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <SystemClock_Config+0xbc>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <SystemClock_Config+0xbc>)
 8005df4:	f023 0318 	bic.w	r3, r3, #24
 8005df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005dfc:	2305      	movs	r3, #5
 8005dfe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005e06:	2301      	movs	r3, #1
 8005e08:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005e12:	2301      	movs	r3, #1
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005e16:	2314      	movs	r3, #20
 8005e18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005e22:	2302      	movs	r3, #2
 8005e24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f006 f854 	bl	800bed8 <HAL_RCC_OscConfig>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005e36:	f000 fd11 	bl	800685c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e3a:	230f      	movs	r3, #15
 8005e3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005e4e:	463b      	mov	r3, r7
 8005e50:	2104      	movs	r1, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f006 fc66 	bl	800c724 <HAL_RCC_ClockConfig>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005e5e:	f000 fcfd 	bl	800685c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8005e62:	f007 f993 	bl	800d18c <HAL_RCCEx_EnableLSECSS>
}
 8005e66:	bf00      	nop
 8005e68:	3758      	adds	r7, #88	; 0x58
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40021000 	.word	0x40021000

08005e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	; 0x28
 8005e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005e7a:	f107 031c 	add.w	r3, r7, #28
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	605a      	str	r2, [r3, #4]
 8005e84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	609a      	str	r2, [r3, #8]
 8005e90:	60da      	str	r2, [r3, #12]
 8005e92:	611a      	str	r2, [r3, #16]
 8005e94:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005e96:	4b31      	ldr	r3, [pc, #196]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005e98:	4a31      	ldr	r2, [pc, #196]	; (8005f60 <MX_ADC1_Init+0xec>)
 8005e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005e9c:	4b2f      	ldr	r3, [pc, #188]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ea2:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ea8:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005eae:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005eb4:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005eba:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005ec0:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005ec6:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ecc:	4b23      	ldr	r3, [pc, #140]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ed4:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005eda:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005ee0:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005ee8:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005eee:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005ef6:	4819      	ldr	r0, [pc, #100]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005ef8:	f002 f894 	bl	8008024 <HAL_ADC_Init>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8005f02:	f000 fcab 	bl	800685c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005f0a:	f107 031c 	add.w	r3, r7, #28
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4812      	ldr	r0, [pc, #72]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005f12:	f003 f895 	bl	8009040 <HAL_ADCEx_MultiModeConfigChannel>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005f1c:	f000 fc9e 	bl	800685c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005f20:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <MX_ADC1_Init+0xf0>)
 8005f22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005f24:	2306      	movs	r3, #6
 8005f26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005f28:	2304      	movs	r3, #4
 8005f2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005f2c:	237f      	movs	r3, #127	; 0x7f
 8005f2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005f30:	2304      	movs	r3, #4
 8005f32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f38:	1d3b      	adds	r3, r7, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4807      	ldr	r0, [pc, #28]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005f3e:	f002 fb57 	bl	80085f0 <HAL_ADC_ConfigChannel>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005f48:	f000 fc88 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start(&hadc1);
 8005f4c:	4803      	ldr	r0, [pc, #12]	; (8005f5c <MX_ADC1_Init+0xe8>)
 8005f4e:	f002 f9c3 	bl	80082d8 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8005f52:	bf00      	nop
 8005f54:	3728      	adds	r7, #40	; 0x28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20007b34 	.word	0x20007b34
 8005f60:	50040000 	.word	0x50040000
 8005f64:	c7520000 	.word	0xc7520000

08005f68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f6e:	463b      	mov	r3, r7
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	611a      	str	r2, [r3, #16]
 8005f7c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8005f7e:	4b29      	ldr	r3, [pc, #164]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005f80:	4a29      	ldr	r2, [pc, #164]	; (8006028 <MX_ADC2_Init+0xc0>)
 8005f82:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005f84:	4b27      	ldr	r3, [pc, #156]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f90:	4b24      	ldr	r3, [pc, #144]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f96:	4b23      	ldr	r3, [pc, #140]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f9c:	4b21      	ldr	r3, [pc, #132]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8005fae:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005fd0:	4b14      	ldr	r3, [pc, #80]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005fd6:	4b13      	ldr	r3, [pc, #76]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005fde:	4811      	ldr	r0, [pc, #68]	; (8006024 <MX_ADC2_Init+0xbc>)
 8005fe0:	f002 f820 	bl	8008024 <HAL_ADC_Init>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8005fea:	f000 fc37 	bl	800685c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <MX_ADC2_Init+0xc4>)
 8005ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005ff2:	2306      	movs	r3, #6
 8005ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005ffa:	237f      	movs	r3, #127	; 0x7f
 8005ffc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005ffe:	2304      	movs	r3, #4
 8006000:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006006:	463b      	mov	r3, r7
 8006008:	4619      	mov	r1, r3
 800600a:	4806      	ldr	r0, [pc, #24]	; (8006024 <MX_ADC2_Init+0xbc>)
 800600c:	f002 faf0 	bl	80085f0 <HAL_ADC_ConfigChannel>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8006016:	f000 fc21 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800601a:	bf00      	nop
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20007acc 	.word	0x20007acc
 8006028:	50040100 	.word	0x50040100
 800602c:	21800100 	.word	0x21800100

08006030 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	2224      	movs	r2, #36	; 0x24
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f016 ffdf 	bl	801d000 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <MX_DAC1_Init+0x5c>)
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <MX_DAC1_Init+0x60>)
 8006046:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006048:	4810      	ldr	r0, [pc, #64]	; (800608c <MX_DAC1_Init+0x5c>)
 800604a:	f003 f98b 	bl	8009364 <HAL_DAC_Init>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006054:	f000 fc02 	bl	800685c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006058:	2300      	movs	r3, #0
 800605a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800605c:	2304      	movs	r3, #4
 800605e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800606c:	1d3b      	adds	r3, r7, #4
 800606e:	2210      	movs	r2, #16
 8006070:	4619      	mov	r1, r3
 8006072:	4806      	ldr	r0, [pc, #24]	; (800608c <MX_DAC1_Init+0x5c>)
 8006074:	f003 fae6 	bl	8009644 <HAL_DAC_ConfigChannel>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800607e:	f000 fbed 	bl	800685c <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//  HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf, 512, DAC_ALIGN_12B_R);
  /* USER CODE END DAC1_Init 2 */

}
 8006082:	bf00      	nop
 8006084:	3728      	adds	r7, #40	; 0x28
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20007b9c 	.word	0x20007b9c
 8006090:	40007400 	.word	0x40007400

08006094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006098:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <MX_I2C1_Init+0x74>)
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <MX_I2C1_Init+0x78>)
 800609c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800609e:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <MX_I2C1_Init+0x74>)
 80060a0:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <MX_I2C1_Init+0x7c>)
 80060a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80060a4:	4b18      	ldr	r3, [pc, #96]	; (8006108 <MX_I2C1_Init+0x74>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060aa:	4b17      	ldr	r3, [pc, #92]	; (8006108 <MX_I2C1_Init+0x74>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060b0:	4b15      	ldr	r3, [pc, #84]	; (8006108 <MX_I2C1_Init+0x74>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <MX_I2C1_Init+0x74>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <MX_I2C1_Init+0x74>)
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <MX_I2C1_Init+0x74>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <MX_I2C1_Init+0x74>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80060ce:	480e      	ldr	r0, [pc, #56]	; (8006108 <MX_I2C1_Init+0x74>)
 80060d0:	f004 f8c1 	bl	800a256 <HAL_I2C_Init>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80060da:	f000 fbbf 	bl	800685c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80060de:	2100      	movs	r1, #0
 80060e0:	4809      	ldr	r0, [pc, #36]	; (8006108 <MX_I2C1_Init+0x74>)
 80060e2:	f004 fd11 	bl	800ab08 <HAL_I2CEx_ConfigAnalogFilter>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80060ec:	f000 fbb6 	bl	800685c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80060f0:	2100      	movs	r1, #0
 80060f2:	4805      	ldr	r0, [pc, #20]	; (8006108 <MX_I2C1_Init+0x74>)
 80060f4:	f004 fd53 	bl	800ab9e <HAL_I2CEx_ConfigDigitalFilter>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80060fe:	f000 fbad 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20007924 	.word	0x20007924
 800610c:	40005400 	.word	0x40005400
 8006110:	10909cec 	.word	0x10909cec

08006114 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <MX_I2C2_Init+0x74>)
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <MX_I2C2_Init+0x78>)
 800611c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <MX_I2C2_Init+0x74>)
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <MX_I2C2_Init+0x7c>)
 8006122:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006124:	4b18      	ldr	r3, [pc, #96]	; (8006188 <MX_I2C2_Init+0x74>)
 8006126:	2200      	movs	r2, #0
 8006128:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800612a:	4b17      	ldr	r3, [pc, #92]	; (8006188 <MX_I2C2_Init+0x74>)
 800612c:	2201      	movs	r2, #1
 800612e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006130:	4b15      	ldr	r3, [pc, #84]	; (8006188 <MX_I2C2_Init+0x74>)
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <MX_I2C2_Init+0x74>)
 8006138:	2200      	movs	r2, #0
 800613a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <MX_I2C2_Init+0x74>)
 800613e:	2200      	movs	r2, #0
 8006140:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <MX_I2C2_Init+0x74>)
 8006144:	2200      	movs	r2, #0
 8006146:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006148:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <MX_I2C2_Init+0x74>)
 800614a:	2200      	movs	r2, #0
 800614c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800614e:	480e      	ldr	r0, [pc, #56]	; (8006188 <MX_I2C2_Init+0x74>)
 8006150:	f004 f881 	bl	800a256 <HAL_I2C_Init>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800615a:	f000 fb7f 	bl	800685c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800615e:	2100      	movs	r1, #0
 8006160:	4809      	ldr	r0, [pc, #36]	; (8006188 <MX_I2C2_Init+0x74>)
 8006162:	f004 fcd1 	bl	800ab08 <HAL_I2CEx_ConfigAnalogFilter>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800616c:	f000 fb76 	bl	800685c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006170:	2100      	movs	r1, #0
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <MX_I2C2_Init+0x74>)
 8006174:	f004 fd13 	bl	800ab9e <HAL_I2CEx_ConfigDigitalFilter>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800617e:	f000 fb6d 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200078d8 	.word	0x200078d8
 800618c:	40005800 	.word	0x40005800
 8006190:	10909cec 	.word	0x10909cec

08006194 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <MX_RTC_Init+0x50>)
 800619a:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <MX_RTC_Init+0x54>)
 800619c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <MX_RTC_Init+0x50>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <MX_RTC_Init+0x50>)
 80061a6:	227f      	movs	r2, #127	; 0x7f
 80061a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <MX_RTC_Init+0x50>)
 80061ac:	22ff      	movs	r2, #255	; 0xff
 80061ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <MX_RTC_Init+0x50>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <MX_RTC_Init+0x50>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <MX_RTC_Init+0x50>)
 80061be:	2200      	movs	r2, #0
 80061c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <MX_RTC_Init+0x50>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80061c8:	4806      	ldr	r0, [pc, #24]	; (80061e4 <MX_RTC_Init+0x50>)
 80061ca:	f007 f9bf 	bl	800d54c <HAL_RTC_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80061d4:	f000 fb42 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_EnableBypassShadow(&hrtc);
 80061d8:	4802      	ldr	r0, [pc, #8]	; (80061e4 <MX_RTC_Init+0x50>)
 80061da:	f007 fd45 	bl	800dc68 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_Init 2 */

}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20007850 	.word	0x20007850
 80061e8:	40002800 	.word	0x40002800

080061ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <MX_SPI1_Init+0x74>)
 80061f2:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <MX_SPI1_Init+0x78>)
 80061f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <MX_SPI1_Init+0x74>)
 80061f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <MX_SPI1_Init+0x74>)
 8006200:	2200      	movs	r2, #0
 8006202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006204:	4b16      	ldr	r3, [pc, #88]	; (8006260 <MX_SPI1_Init+0x74>)
 8006206:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800620a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <MX_SPI1_Init+0x74>)
 800620e:	2200      	movs	r2, #0
 8006210:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006212:	4b13      	ldr	r3, [pc, #76]	; (8006260 <MX_SPI1_Init+0x74>)
 8006214:	2200      	movs	r2, #0
 8006216:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006218:	4b11      	ldr	r3, [pc, #68]	; (8006260 <MX_SPI1_Init+0x74>)
 800621a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <MX_SPI1_Init+0x74>)
 8006222:	2230      	movs	r2, #48	; 0x30
 8006224:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006226:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <MX_SPI1_Init+0x74>)
 8006228:	2200      	movs	r2, #0
 800622a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <MX_SPI1_Init+0x74>)
 800622e:	2200      	movs	r2, #0
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <MX_SPI1_Init+0x74>)
 8006234:	2200      	movs	r2, #0
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <MX_SPI1_Init+0x74>)
 800623a:	2207      	movs	r2, #7
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800623e:	4b08      	ldr	r3, [pc, #32]	; (8006260 <MX_SPI1_Init+0x74>)
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <MX_SPI1_Init+0x74>)
 8006246:	2208      	movs	r2, #8
 8006248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800624a:	4805      	ldr	r0, [pc, #20]	; (8006260 <MX_SPI1_Init+0x74>)
 800624c:	f007 fd42 	bl	800dcd4 <HAL_SPI_Init>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006256:	f000 fb01 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800625a:	bf00      	nop
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20007874 	.word	0x20007874
 8006264:	40013000 	.word	0x40013000

08006268 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800626c:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <MX_SPI2_Init+0x74>)
 800626e:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <MX_SPI2_Init+0x78>)
 8006270:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006272:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <MX_SPI2_Init+0x74>)
 8006274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006278:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800627a:	4b18      	ldr	r3, [pc, #96]	; (80062dc <MX_SPI2_Init+0x74>)
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006280:	4b16      	ldr	r3, [pc, #88]	; (80062dc <MX_SPI2_Init+0x74>)
 8006282:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006286:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <MX_SPI2_Init+0x74>)
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <MX_SPI2_Init+0x74>)
 8006290:	2200      	movs	r2, #0
 8006292:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <MX_SPI2_Init+0x74>)
 8006296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800629a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800629c:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <MX_SPI2_Init+0x74>)
 800629e:	2230      	movs	r2, #48	; 0x30
 80062a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062a2:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <MX_SPI2_Init+0x74>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <MX_SPI2_Init+0x74>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <MX_SPI2_Init+0x74>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <MX_SPI2_Init+0x74>)
 80062b6:	2207      	movs	r2, #7
 80062b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <MX_SPI2_Init+0x74>)
 80062bc:	2200      	movs	r2, #0
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <MX_SPI2_Init+0x74>)
 80062c2:	2208      	movs	r2, #8
 80062c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062c6:	4805      	ldr	r0, [pc, #20]	; (80062dc <MX_SPI2_Init+0x74>)
 80062c8:	f007 fd04 	bl	800dcd4 <HAL_SPI_Init>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80062d2:	f000 fac3 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20001f68 	.word	0x20001f68
 80062e0:	40003800 	.word	0x40003800

080062e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <MX_SPI3_Init+0x74>)
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <MX_SPI3_Init+0x78>)
 80062ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80062ee:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <MX_SPI3_Init+0x74>)
 80062f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80062f6:	4b18      	ldr	r3, [pc, #96]	; (8006358 <MX_SPI3_Init+0x74>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80062fc:	4b16      	ldr	r3, [pc, #88]	; (8006358 <MX_SPI3_Init+0x74>)
 80062fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006302:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006304:	4b14      	ldr	r3, [pc, #80]	; (8006358 <MX_SPI3_Init+0x74>)
 8006306:	2200      	movs	r2, #0
 8006308:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <MX_SPI3_Init+0x74>)
 800630c:	2200      	movs	r2, #0
 800630e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006310:	4b11      	ldr	r3, [pc, #68]	; (8006358 <MX_SPI3_Init+0x74>)
 8006312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006316:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <MX_SPI3_Init+0x74>)
 800631a:	2220      	movs	r2, #32
 800631c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <MX_SPI3_Init+0x74>)
 8006320:	2200      	movs	r2, #0
 8006322:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006324:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <MX_SPI3_Init+0x74>)
 8006326:	2200      	movs	r2, #0
 8006328:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <MX_SPI3_Init+0x74>)
 800632c:	2200      	movs	r2, #0
 800632e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006330:	4b09      	ldr	r3, [pc, #36]	; (8006358 <MX_SPI3_Init+0x74>)
 8006332:	2207      	movs	r2, #7
 8006334:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006336:	4b08      	ldr	r3, [pc, #32]	; (8006358 <MX_SPI3_Init+0x74>)
 8006338:	2200      	movs	r2, #0
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <MX_SPI3_Init+0x74>)
 800633e:	2208      	movs	r2, #8
 8006340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006342:	4805      	ldr	r0, [pc, #20]	; (8006358 <MX_SPI3_Init+0x74>)
 8006344:	f007 fcc6 	bl	800dcd4 <HAL_SPI_Init>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800634e:	f000 fa85 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006352:	bf00      	nop
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20006384 	.word	0x20006384
 800635c:	40003c00 	.word	0x40003c00

08006360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006366:	f107 031c 	add.w	r3, r7, #28
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006372:	463b      	mov	r3, r7
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	605a      	str	r2, [r3, #4]
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	611a      	str	r2, [r3, #16]
 8006380:	615a      	str	r2, [r3, #20]
 8006382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006384:	4b23      	ldr	r3, [pc, #140]	; (8006414 <MX_TIM2_Init+0xb4>)
 8006386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800638a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 800638c:	4b21      	ldr	r3, [pc, #132]	; (8006414 <MX_TIM2_Init+0xb4>)
 800638e:	2202      	movs	r2, #2
 8006390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <MX_TIM2_Init+0xb4>)
 8006394:	2200      	movs	r2, #0
 8006396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8006398:	4b1e      	ldr	r3, [pc, #120]	; (8006414 <MX_TIM2_Init+0xb4>)
 800639a:	2264      	movs	r2, #100	; 0x64
 800639c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <MX_TIM2_Init+0xb4>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <MX_TIM2_Init+0xb4>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80063aa:	481a      	ldr	r0, [pc, #104]	; (8006414 <MX_TIM2_Init+0xb4>)
 80063ac:	f008 fcce 	bl	800ed4c <HAL_TIM_PWM_Init>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80063b6:	f000 fa51 	bl	800685c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80063c2:	f107 031c 	add.w	r3, r7, #28
 80063c6:	4619      	mov	r1, r3
 80063c8:	4812      	ldr	r0, [pc, #72]	; (8006414 <MX_TIM2_Init+0xb4>)
 80063ca:	f009 fc0b 	bl	800fbe4 <HAL_TIMEx_MasterConfigSynchronization>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80063d4:	f000 fa42 	bl	800685c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063d8:	2360      	movs	r3, #96	; 0x60
 80063da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80063dc:	2332      	movs	r3, #50	; 0x32
 80063de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063e8:	463b      	mov	r3, r7
 80063ea:	2200      	movs	r2, #0
 80063ec:	4619      	mov	r1, r3
 80063ee:	4809      	ldr	r0, [pc, #36]	; (8006414 <MX_TIM2_Init+0xb4>)
 80063f0:	f008 ff2a 	bl	800f248 <HAL_TIM_PWM_ConfigChannel>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80063fa:	f000 fa2f 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80063fe:	2100      	movs	r1, #0
 8006400:	4804      	ldr	r0, [pc, #16]	; (8006414 <MX_TIM2_Init+0xb4>)
 8006402:	f008 fcfb 	bl	800edfc <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006406:	4803      	ldr	r0, [pc, #12]	; (8006414 <MX_TIM2_Init+0xb4>)
 8006408:	f000 ff0e 	bl	8007228 <HAL_TIM_MspPostInit>

}
 800640c:	bf00      	nop
 800640e:	3728      	adds	r7, #40	; 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20007c48 	.word	0x20007c48

08006418 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800641e:	f107 031c 	add.w	r3, r7, #28
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800642a:	463b      	mov	r3, r7
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	611a      	str	r2, [r3, #16]
 8006438:	615a      	str	r2, [r3, #20]
 800643a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800643c:	4b21      	ldr	r3, [pc, #132]	; (80064c4 <MX_TIM4_Init+0xac>)
 800643e:	4a22      	ldr	r2, [pc, #136]	; (80064c8 <MX_TIM4_Init+0xb0>)
 8006440:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006442:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <MX_TIM4_Init+0xac>)
 8006444:	2200      	movs	r2, #0
 8006446:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <MX_TIM4_Init+0xac>)
 800644a:	2200      	movs	r2, #0
 800644c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800644e:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <MX_TIM4_Init+0xac>)
 8006450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006454:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006456:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <MX_TIM4_Init+0xac>)
 8006458:	2200      	movs	r2, #0
 800645a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800645c:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <MX_TIM4_Init+0xac>)
 800645e:	2200      	movs	r2, #0
 8006460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006462:	4818      	ldr	r0, [pc, #96]	; (80064c4 <MX_TIM4_Init+0xac>)
 8006464:	f008 fc72 	bl	800ed4c <HAL_TIM_PWM_Init>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800646e:	f000 f9f5 	bl	800685c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006476:	2300      	movs	r3, #0
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800647a:	f107 031c 	add.w	r3, r7, #28
 800647e:	4619      	mov	r1, r3
 8006480:	4810      	ldr	r0, [pc, #64]	; (80064c4 <MX_TIM4_Init+0xac>)
 8006482:	f009 fbaf 	bl	800fbe4 <HAL_TIMEx_MasterConfigSynchronization>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800648c:	f000 f9e6 	bl	800685c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006490:	2360      	movs	r3, #96	; 0x60
 8006492:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006498:	2300      	movs	r3, #0
 800649a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064a0:	463b      	mov	r3, r7
 80064a2:	2204      	movs	r2, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4807      	ldr	r0, [pc, #28]	; (80064c4 <MX_TIM4_Init+0xac>)
 80064a8:	f008 fece 	bl	800f248 <HAL_TIM_PWM_ConfigChannel>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80064b2:	f000 f9d3 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80064b6:	4803      	ldr	r0, [pc, #12]	; (80064c4 <MX_TIM4_Init+0xac>)
 80064b8:	f000 feb6 	bl	8007228 <HAL_TIM_MspPostInit>

}
 80064bc:	bf00      	nop
 80064be:	3728      	adds	r7, #40	; 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20007bfc 	.word	0x20007bfc
 80064c8:	40000800 	.word	0x40000800

080064cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064d2:	1d3b      	adds	r3, r7, #4
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80064dc:	4b14      	ldr	r3, [pc, #80]	; (8006530 <MX_TIM6_Init+0x64>)
 80064de:	4a15      	ldr	r2, [pc, #84]	; (8006534 <MX_TIM6_Init+0x68>)
 80064e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <MX_TIM6_Init+0x64>)
 80064e4:	2202      	movs	r2, #2
 80064e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064e8:	4b11      	ldr	r3, [pc, #68]	; (8006530 <MX_TIM6_Init+0x64>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1666;
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <MX_TIM6_Init+0x64>)
 80064f0:	f240 6282 	movw	r2, #1666	; 0x682
 80064f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064f6:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <MX_TIM6_Init+0x64>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80064fc:	480c      	ldr	r0, [pc, #48]	; (8006530 <MX_TIM6_Init+0x64>)
 80064fe:	f008 faf5 	bl	800eaec <HAL_TIM_Base_Init>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8006508:	f000 f9a8 	bl	800685c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800650c:	2320      	movs	r3, #32
 800650e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006514:	1d3b      	adds	r3, r7, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4805      	ldr	r0, [pc, #20]	; (8006530 <MX_TIM6_Init+0x64>)
 800651a:	f009 fb63 	bl	800fbe4 <HAL_TIMEx_MasterConfigSynchronization>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8006524:	f000 f99a 	bl	800685c <Error_Handler>
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//    HAL_TIM_Base_Start_IT(&htim6);
 //   HAL_TIM_Base_Start(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20007bb0 	.word	0x20007bb0
 8006534:	40001000 	.word	0x40001000

08006538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800653c:	4b18      	ldr	r3, [pc, #96]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 800653e:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <MX_USART1_UART_Init+0x6c>)
 8006540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006542:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 8006544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 800654c:	2200      	movs	r2, #0
 800654e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006550:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 8006552:	2200      	movs	r2, #0
 8006554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 8006558:	2200      	movs	r2, #0
 800655a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800655c:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 800655e:	220c      	movs	r2, #12
 8006560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006562:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 8006564:	2200      	movs	r2, #0
 8006566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 800656a:	2200      	movs	r2, #0
 800656c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 8006570:	2200      	movs	r2, #0
 8006572:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 8006576:	2200      	movs	r2, #0
 8006578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800657a:	4809      	ldr	r0, [pc, #36]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 800657c:	f009 fbd8 	bl	800fd30 <HAL_UART_Init>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006586:	f000 f969 	bl	800685c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <MX_USART1_UART_Init+0x68>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0220 	orr.w	r2, r2, #32
 8006598:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20007a48 	.word	0x20007a48
 80065a4:	40013800 	.word	0x40013800

080065a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <MX_DMA_Init+0x58>)
 80065b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b2:	4a13      	ldr	r2, [pc, #76]	; (8006600 <MX_DMA_Init+0x58>)
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	6493      	str	r3, [r2, #72]	; 0x48
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <MX_DMA_Init+0x58>)
 80065bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	607b      	str	r3, [r7, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80065c6:	2200      	movs	r2, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	200b      	movs	r0, #11
 80065cc:	f002 fea0 	bl	8009310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80065d0:	200b      	movs	r0, #11
 80065d2:	f002 feb9 	bl	8009348 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	200c      	movs	r0, #12
 80065dc:	f002 fe98 	bl	8009310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80065e0:	200c      	movs	r0, #12
 80065e2:	f002 feb1 	bl	8009348 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80065e6:	2200      	movs	r2, #0
 80065e8:	2100      	movs	r1, #0
 80065ea:	200e      	movs	r0, #14
 80065ec:	f002 fe90 	bl	8009310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80065f0:	200e      	movs	r0, #14
 80065f2:	f002 fea9 	bl	8009348 <HAL_NVIC_EnableIRQ>

}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40021000 	.word	0x40021000

08006604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08c      	sub	sp, #48	; 0x30
 8006608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800660a:	f107 031c 	add.w	r3, r7, #28
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	609a      	str	r2, [r3, #8]
 8006616:	60da      	str	r2, [r3, #12]
 8006618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800661a:	4b71      	ldr	r3, [pc, #452]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 800661c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661e:	4a70      	ldr	r2, [pc, #448]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006620:	f043 0310 	orr.w	r3, r3, #16
 8006624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006626:	4b6e      	ldr	r3, [pc, #440]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006632:	4b6b      	ldr	r3, [pc, #428]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	4a6a      	ldr	r2, [pc, #424]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800663e:	4b68      	ldr	r3, [pc, #416]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800664a:	4b65      	ldr	r3, [pc, #404]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 800664c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664e:	4a64      	ldr	r2, [pc, #400]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006656:	4b62      	ldr	r3, [pc, #392]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006662:	4b5f      	ldr	r3, [pc, #380]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	4a5e      	ldr	r2, [pc, #376]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800666e:	4b5c      	ldr	r3, [pc, #368]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800667a:	4b59      	ldr	r3, [pc, #356]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 800667c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667e:	4a58      	ldr	r2, [pc, #352]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006686:	4b56      	ldr	r3, [pc, #344]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006692:	4b53      	ldr	r3, [pc, #332]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006696:	4a52      	ldr	r2, [pc, #328]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 8006698:	f043 0308 	orr.w	r3, r3, #8
 800669c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800669e:	4b50      	ldr	r3, [pc, #320]	; (80067e0 <MX_GPIO_Init+0x1dc>)
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	607b      	str	r3, [r7, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2115      	movs	r1, #21
 80066ae:	484d      	ldr	r0, [pc, #308]	; (80067e4 <MX_GPIO_Init+0x1e0>)
 80066b0:	f003 fd96 	bl	800a1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin, GPIO_PIN_RESET);
 80066b4:	2200      	movs	r2, #0
 80066b6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80066ba:	484b      	ldr	r0, [pc, #300]	; (80067e8 <MX_GPIO_Init+0x1e4>)
 80066bc:	f003 fd90 	bl	800a1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 80066c0:	2200      	movs	r2, #0
 80066c2:	f241 3126 	movw	r1, #4902	; 0x1326
 80066c6:	4849      	ldr	r0, [pc, #292]	; (80067ec <MX_GPIO_Init+0x1e8>)
 80066c8:	f003 fd8a 	bl	800a1e0 <HAL_GPIO_WritePin>
                          |I2C_ADDR_Pin|LCD_CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 80066cc:	2200      	movs	r2, #0
 80066ce:	f24c 014c 	movw	r1, #49228	; 0xc04c
 80066d2:	4847      	ldr	r0, [pc, #284]	; (80067f0 <MX_GPIO_Init+0x1ec>)
 80066d4:	f003 fd84 	bl	800a1e0 <HAL_GPIO_WritePin>
                          |LCD_BL_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_ARK_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80066d8:	2315      	movs	r3, #21
 80066da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066dc:	2301      	movs	r3, #1
 80066de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e4:	2300      	movs	r3, #0
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066e8:	f107 031c 	add.w	r3, r7, #28
 80066ec:	4619      	mov	r1, r3
 80066ee:	483d      	ldr	r0, [pc, #244]	; (80067e4 <MX_GPIO_Init+0x1e0>)
 80066f0:	f003 fbcc 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Reserved_Pin */
  GPIO_InitStruct.Pin = Reserved_Pin;
 80066f4:	2308      	movs	r3, #8
 80066f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066f8:	2300      	movs	r3, #0
 80066fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reserved_GPIO_Port, &GPIO_InitStruct);
 8006700:	f107 031c 	add.w	r3, r7, #28
 8006704:	4619      	mov	r1, r3
 8006706:	4837      	ldr	r0, [pc, #220]	; (80067e4 <MX_GPIO_Init+0x1e0>)
 8006708:	f003 fbc0 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006710:	2300      	movs	r3, #0
 8006712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006714:	2302      	movs	r3, #2
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006718:	f107 031c 	add.w	r3, r7, #28
 800671c:	4619      	mov	r1, r3
 800671e:	4831      	ldr	r0, [pc, #196]	; (80067e4 <MX_GPIO_Init+0x1e0>)
 8006720:	f003 fbb4 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RDYB_Pin */
  GPIO_InitStruct.Pin = ADC_RDYB_Pin;
 8006724:	2310      	movs	r3, #16
 8006726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006728:	4b32      	ldr	r3, [pc, #200]	; (80067f4 <MX_GPIO_Init+0x1f0>)
 800672a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672c:	2300      	movs	r3, #0
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_RDYB_GPIO_Port, &GPIO_InitStruct);
 8006730:	f107 031c 	add.w	r3, r7, #28
 8006734:	4619      	mov	r1, r3
 8006736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800673a:	f003 fba7 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin EN_AV6_Pin EN_V24_Pin EN_LCD_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin;
 800673e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8006742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006744:	2301      	movs	r3, #1
 8006746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006748:	2300      	movs	r3, #0
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800674c:	2300      	movs	r3, #0
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006750:	f107 031c 	add.w	r3, r7, #28
 8006754:	4619      	mov	r1, r3
 8006756:	4824      	ldr	r0, [pc, #144]	; (80067e8 <MX_GPIO_Init+0x1e4>)
 8006758:	f003 fb98 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_P_Pin */
  GPIO_InitStruct.Pin = SW_P_Pin;
 800675c:	2320      	movs	r3, #32
 800675e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006760:	4b25      	ldr	r3, [pc, #148]	; (80067f8 <MX_GPIO_Init+0x1f4>)
 8006762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006764:	2300      	movs	r3, #0
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_P_GPIO_Port, &GPIO_InitStruct);
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	4619      	mov	r1, r3
 800676e:	481e      	ldr	r0, [pc, #120]	; (80067e8 <MX_GPIO_Init+0x1e4>)
 8006770:	f003 fb8c 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : I_P_ERROR_Pin */
  GPIO_InitStruct.Pin = I_P_ERROR_Pin;
 8006774:	2301      	movs	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006778:	4b1f      	ldr	r3, [pc, #124]	; (80067f8 <MX_GPIO_Init+0x1f4>)
 800677a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677c:	2300      	movs	r3, #0
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I_P_ERROR_GPIO_Port, &GPIO_InitStruct);
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	4619      	mov	r1, r3
 8006786:	4819      	ldr	r0, [pc, #100]	; (80067ec <MX_GPIO_Init+0x1e8>)
 8006788:	f003 fb80 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_EN_Pin INT_CHARGER_Pin LCD_SPI_CS_Pin PB5
                           I2C_ADDR_Pin LCD_CD_Pin */
  GPIO_InitStruct.Pin = Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 800678c:	f241 3326 	movw	r3, #4902	; 0x1326
 8006790:	61fb      	str	r3, [r7, #28]
                          |I2C_ADDR_Pin|LCD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006792:	2301      	movs	r3, #1
 8006794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800679a:	2300      	movs	r3, #0
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800679e:	f107 031c 	add.w	r3, r7, #28
 80067a2:	4619      	mov	r1, r3
 80067a4:	4811      	ldr	r0, [pc, #68]	; (80067ec <MX_GPIO_Init+0x1e8>)
 80067a6:	f003 fb71 	bl	8009e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LCD_reserv_Pin EN_AV6_reserv_Pin MEM1_CS_Pin MEM2_CS_Pin
                           LCD_BL_EN2_Pin */
  GPIO_InitStruct.Pin = EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 80067aa:	f24c 034c 	movw	r3, #49228	; 0xc04c
 80067ae:	61fb      	str	r3, [r7, #28]
                          |LCD_BL_EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b0:	2301      	movs	r3, #1
 80067b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b8:	2300      	movs	r3, #0
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067bc:	f107 031c 	add.w	r3, r7, #28
 80067c0:	4619      	mov	r1, r3
 80067c2:	480b      	ldr	r0, [pc, #44]	; (80067f0 <MX_GPIO_Init+0x1ec>)
 80067c4:	f003 fb62 	bl	8009e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067c8:	2200      	movs	r2, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	200a      	movs	r0, #10
 80067ce:	f002 fd9f 	bl	8009310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80067d2:	200a      	movs	r0, #10
 80067d4:	f002 fdb8 	bl	8009348 <HAL_NVIC_EnableIRQ>

}
 80067d8:	bf00      	nop
 80067da:	3730      	adds	r7, #48	; 0x30
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40021000 	.word	0x40021000
 80067e4:	48001000 	.word	0x48001000
 80067e8:	48000800 	.word	0x48000800
 80067ec:	48000400 	.word	0x48000400
 80067f0:	48000c00 	.word	0x48000c00
 80067f4:	10210000 	.word	0x10210000
 80067f8:	10110000 	.word	0x10110000

080067fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	ELSPIRE_OS_TIMER();
 8006804:	f7fc fc92 	bl	800312c <ELSPIRE_OS_TIMER>

	Buttons_timer();
 8006808:	f7fc f968 	bl	8002adc <Buttons_timer>
	Blink_Edit_Parameter_timer();
 800680c:	f7fc faf8 	bl	8002e00 <Blink_Edit_Parameter_timer>
	menu_timer();
 8006810:	f012 f93e 	bl	8018a90 <menu_timer>
	Viewer_timer();
 8006814:	f011 f900 	bl	8017a18 <Viewer_timer>
	Light_OFF_process();
 8006818:	f010 fd4a 	bl	80172b0 <Light_OFF_process>
	if(rx_cmplt>0)rx_cmplt--;
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800681e:	f993 3000 	ldrsb.w	r3, [r3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	dd08      	ble.n	8006838 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8006826:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006828:	f993 3000 	ldrsb.w	r3, [r3]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	b25a      	sxtb	r2, r3
 8006834:	4b07      	ldr	r3, [pc, #28]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006836:	701a      	strb	r2, [r3, #0]
	spi_timeout();
 8006838:	f001 f828 	bl	800788c <spi_timeout>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8006846:	f001 f9c1 	bl	8007bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000896 	.word	0x20000896
 8006858:	40012c00 	.word	0x40012c00

0800685c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006860:	b672      	cpsid	i
}
 8006862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006864:	e7fe      	b.n	8006864 <Error_Handler+0x8>
	...

08006868 <Play_Sound>:
uint8_t ReadComplete=0;			// Выставляется в 1, когда прочитана очередная порция данных
uint16_t sizecntr=0; 			// Счетчик байт
uint32_t wavcounter=0;

void Play_Sound(char*name)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af02      	add	r7, sp, #8
 800686e:	6078      	str	r0, [r7, #4]
	//uint8_t path[11] = "AUDIO_5.WAV";
	uint16_t i;

	// Открываем файл

	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8006870:	2200      	movs	r2, #0
 8006872:	4934      	ldr	r1, [pc, #208]	; (8006944 <Play_Sound+0xdc>)
 8006874:	4834      	ldr	r0, [pc, #208]	; (8006948 <Play_Sound+0xe0>)
 8006876:	f00d f9e5 	bl	8013c44 <f_mount>
	f_open(&MyFile, (char*)name, FA_READ|FA_OPEN_ALWAYS);
 800687a:	2211      	movs	r2, #17
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4833      	ldr	r0, [pc, #204]	; (800694c <Play_Sound+0xe4>)
 8006880:	f00d fa26 	bl	8013cd0 <f_open>
	f_read(&MyFile, sound_buf, WAV_BUF_SIZE, &testBytes);
 8006884:	4b32      	ldr	r3, [pc, #200]	; (8006950 <Play_Sound+0xe8>)
 8006886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800688a:	4932      	ldr	r1, [pc, #200]	; (8006954 <Play_Sound+0xec>)
 800688c:	482f      	ldr	r0, [pc, #188]	; (800694c <Play_Sound+0xe4>)
 800688e:	f00d fbdd 	bl	801404c <f_read>

	// Находим начало данных
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 8006892:	2300      	movs	r3, #0
 8006894:	81fb      	strh	r3, [r7, #14]
 8006896:	e01f      	b.n	80068d8 <Play_Sound+0x70>
	{
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 8006898:	89fb      	ldrh	r3, [r7, #14]
 800689a:	4a2e      	ldr	r2, [pc, #184]	; (8006954 <Play_Sound+0xec>)
 800689c:	5cd3      	ldrb	r3, [r2, r3]
 800689e:	2b64      	cmp	r3, #100	; 0x64
 80068a0:	d117      	bne.n	80068d2 <Play_Sound+0x6a>
 80068a2:	89fb      	ldrh	r3, [r7, #14]
 80068a4:	3301      	adds	r3, #1
 80068a6:	4a2b      	ldr	r2, [pc, #172]	; (8006954 <Play_Sound+0xec>)
 80068a8:	5cd3      	ldrb	r3, [r2, r3]
 80068aa:	2b61      	cmp	r3, #97	; 0x61
 80068ac:	d111      	bne.n	80068d2 <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	3302      	adds	r3, #2
 80068b2:	4a28      	ldr	r2, [pc, #160]	; (8006954 <Play_Sound+0xec>)
 80068b4:	5cd3      	ldrb	r3, [r2, r3]
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 80068b6:	2b74      	cmp	r3, #116	; 0x74
 80068b8:	d10b      	bne.n	80068d2 <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 80068ba:	89fb      	ldrh	r3, [r7, #14]
 80068bc:	3303      	adds	r3, #3
 80068be:	4a25      	ldr	r2, [pc, #148]	; (8006954 <Play_Sound+0xec>)
 80068c0:	5cd3      	ldrb	r3, [r2, r3]
 80068c2:	2b61      	cmp	r3, #97	; 0x61
 80068c4:	d105      	bne.n	80068d2 <Play_Sound+0x6a>
	    {
	        dataOffset = i + 8;
 80068c6:	89fb      	ldrh	r3, [r7, #14]
 80068c8:	3308      	adds	r3, #8
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	4b22      	ldr	r3, [pc, #136]	; (8006958 <Play_Sound+0xf0>)
 80068ce:	801a      	strh	r2, [r3, #0]
	        break;
 80068d0:	e006      	b.n	80068e0 <Play_Sound+0x78>
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 80068d2:	89fb      	ldrh	r3, [r7, #14]
 80068d4:	3301      	adds	r3, #1
 80068d6:	81fb      	strh	r3, [r7, #14]
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80068de:	d9db      	bls.n	8006898 <Play_Sound+0x30>
	    }
	}

	//  перемещаем указатель FatFs
	f_lseek(&MyFile, dataOffset);
 80068e0:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <Play_Sound+0xf0>)
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	4619      	mov	r1, r3
 80068e6:	4819      	ldr	r0, [pc, #100]	; (800694c <Play_Sound+0xe4>)
 80068e8:	f00d ff0c 	bl	8014704 <f_lseek>
	// определяем количество байт данных
	wavDataSize = f_size(&MyFile) - dataOffset;
 80068ec:	4b17      	ldr	r3, [pc, #92]	; (800694c <Play_Sound+0xe4>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	4a19      	ldr	r2, [pc, #100]	; (8006958 <Play_Sound+0xf0>)
 80068f2:	8812      	ldrh	r2, [r2, #0]
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	4a19      	ldr	r2, [pc, #100]	; (800695c <Play_Sound+0xf4>)
 80068f8:	6013      	str	r3, [r2, #0]

	// Заполняем оба буфера данными
	f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <Play_Sound+0xe8>)
 80068fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006900:	4914      	ldr	r1, [pc, #80]	; (8006954 <Play_Sound+0xec>)
 8006902:	4812      	ldr	r0, [pc, #72]	; (800694c <Play_Sound+0xe4>)
 8006904:	f00d fba2 	bl	801404c <f_read>

	ReadComplete=1;
 8006908:	4b15      	ldr	r3, [pc, #84]	; (8006960 <Play_Sound+0xf8>)
 800690a:	2201      	movs	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]

	TURN_ON_SOUND();
 800690e:	2201      	movs	r2, #1
 8006910:	2102      	movs	r1, #2
 8006912:	4814      	ldr	r0, [pc, #80]	; (8006964 <Play_Sound+0xfc>)
 8006914:	f003 fc64 	bl	800a1e0 <HAL_GPIO_WritePin>
	//HAL_TIM_Base_Start_IT(&htim6);
	HAL_TIM_Base_Start(&htim6);
 8006918:	4813      	ldr	r0, [pc, #76]	; (8006968 <Play_Sound+0x100>)
 800691a:	f008 f93f 	bl	800eb9c <HAL_TIM_Base_Start>
	DMA1_Channel4->CCR |= (DMA_CCR_TCIE_Msk);
 800691e:	4b13      	ldr	r3, [pc, #76]	; (800696c <Play_Sound+0x104>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <Play_Sound+0x104>)
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	6013      	str	r3, [r2, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf[0], WAV_BUF_SIZE, DAC_ALIGN_8B_R);
 800692a:	2308      	movs	r3, #8
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006932:	4a08      	ldr	r2, [pc, #32]	; (8006954 <Play_Sound+0xec>)
 8006934:	2110      	movs	r1, #16
 8006936:	480e      	ldr	r0, [pc, #56]	; (8006970 <Play_Sound+0x108>)
 8006938:	f002 fd36 	bl	80093a8 <HAL_DAC_Start_DMA>
}
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20008748 	.word	0x20008748
 8006948:	20007618 	.word	0x20007618
 800694c:	200073e8 	.word	0x200073e8
 8006950:	20007848 	.word	0x20007848
 8006954:	20007c94 	.word	0x20007c94
 8006958:	200008d0 	.word	0x200008d0
 800695c:	200008d4 	.word	0x200008d4
 8006960:	200008d8 	.word	0x200008d8
 8006964:	48000400 	.word	0x48000400
 8006968:	20007bb0 	.word	0x20007bb0
 800696c:	40020044 	.word	0x40020044
 8006970:	20007b9c 	.word	0x20007b9c

08006974 <StartReadNextSoundBuf>:


void StartReadNextSoundBuf(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
	if((DMA1->ISR&DMA_ISR_TCIF4_Msk)!=0)
 8006978:	4b18      	ldr	r3, [pc, #96]	; (80069dc <StartReadNextSoundBuf+0x68>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d028      	beq.n	80069d6 <StartReadNextSoundBuf+0x62>
	{

		ReadComplete=0;
 8006984:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <StartReadNextSoundBuf+0x6c>)
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
		if(buf_num==1)buf_num=0;
 800698a:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <StartReadNextSoundBuf+0x70>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d103      	bne.n	800699a <StartReadNextSoundBuf+0x26>
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <StartReadNextSoundBuf+0x70>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	e002      	b.n	80069a0 <StartReadNextSoundBuf+0x2c>
		else buf_num=1;
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <StartReadNextSoundBuf+0x70>)
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]

		DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 80069a0:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <StartReadNextSoundBuf+0x74>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a10      	ldr	r2, [pc, #64]	; (80069e8 <StartReadNextSoundBuf+0x74>)
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	6013      	str	r3, [r2, #0]
		DMA1_Channel4->CMAR=(uint32_t)sound_buf[buf_num];
 80069ac:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <StartReadNextSoundBuf+0x70>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	025b      	lsls	r3, r3, #9
 80069b2:	4a0e      	ldr	r2, [pc, #56]	; (80069ec <StartReadNextSoundBuf+0x78>)
 80069b4:	441a      	add	r2, r3
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <StartReadNextSoundBuf+0x74>)
 80069b8:	60da      	str	r2, [r3, #12]
		//DMA1_Channel4->CNDTR=(uint32_t)WAV_BUF_SIZE;
		DMA1_Channel4->CCR |= (1 << DMA_CCR_EN_Pos);
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <StartReadNextSoundBuf+0x74>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <StartReadNextSoundBuf+0x74>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	6013      	str	r3, [r2, #0]

		wavcounter+=WAV_BUF_SIZE;
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <StartReadNextSoundBuf+0x7c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80069ce:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <StartReadNextSoundBuf+0x7c>)
 80069d0:	6013      	str	r3, [r2, #0]
		Sound_process();
 80069d2:	f000 f80f 	bl	80069f4 <Sound_process>
	}
}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40020000 	.word	0x40020000
 80069e0:	200008d8 	.word	0x200008d8
 80069e4:	200008d2 	.word	0x200008d2
 80069e8:	40020044 	.word	0x40020044
 80069ec:	20007c94 	.word	0x20007c94
 80069f0:	200008dc 	.word	0x200008dc

080069f4 <Sound_process>:


void Sound_process(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	80fb      	strh	r3, [r7, #6]
	uint8_t sign=0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	717b      	strb	r3, [r7, #5]
	if(ReadComplete==0)
 8006a02:	4b2c      	ldr	r3, [pc, #176]	; (8006ab4 <Sound_process+0xc0>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d14f      	bne.n	8006aaa <Sound_process+0xb6>
	{
		if(wavDataSize>wavcounter)
 8006a0a:	4b2b      	ldr	r3, [pc, #172]	; (8006ab8 <Sound_process+0xc4>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b2b      	ldr	r3, [pc, #172]	; (8006abc <Sound_process+0xc8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d938      	bls.n	8006a88 <Sound_process+0x94>
		{
			if(buf_num==0)
 8006a16:	4b2a      	ldr	r3, [pc, #168]	; (8006ac0 <Sound_process+0xcc>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d117      	bne.n	8006a4e <Sound_process+0x5a>
			{
				f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 8006a1e:	4b29      	ldr	r3, [pc, #164]	; (8006ac4 <Sound_process+0xd0>)
 8006a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a24:	4928      	ldr	r1, [pc, #160]	; (8006ac8 <Sound_process+0xd4>)
 8006a26:	4829      	ldr	r0, [pc, #164]	; (8006acc <Sound_process+0xd8>)
 8006a28:	f00d fb10 	bl	801404c <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	80fb      	strh	r3, [r7, #6]
 8006a30:	e008      	b.n	8006a44 <Sound_process+0x50>
				{
					//sign=sound_buf[0][i]&0x80;
					//sound_buf[0][i]=(sound_buf[0][i]&0x7F);
					//sound_buf[0][i]|=sign;
					sound_buf[0][i]=(sound_buf[0][i])&0xFF;
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	4924      	ldr	r1, [pc, #144]	; (8006ac8 <Sound_process+0xd4>)
 8006a38:	5c89      	ldrb	r1, [r1, r2]
 8006a3a:	4a23      	ldr	r2, [pc, #140]	; (8006ac8 <Sound_process+0xd4>)
 8006a3c:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	3301      	adds	r3, #1
 8006a42:	80fb      	strh	r3, [r7, #6]
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4a:	d3f2      	bcc.n	8006a32 <Sound_process+0x3e>
 8006a4c:	e02a      	b.n	8006aa4 <Sound_process+0xb0>
				}
			}
			else
			{
				f_read(&MyFile, sound_buf[1], WAV_BUF_SIZE, &testBytes);
 8006a4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <Sound_process+0xd0>)
 8006a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a54:	491e      	ldr	r1, [pc, #120]	; (8006ad0 <Sound_process+0xdc>)
 8006a56:	481d      	ldr	r0, [pc, #116]	; (8006acc <Sound_process+0xd8>)
 8006a58:	f00d faf8 	bl	801404c <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	80fb      	strh	r3, [r7, #6]
 8006a60:	e00d      	b.n	8006a7e <Sound_process+0x8a>
				{
					//sign=sound_buf[1][i]&0x80;
					//sound_buf[1][i]=(sound_buf[1][i]&0x7F);
					//sound_buf[1][i]|=sign;
					sound_buf[1][i]=(sound_buf[1][i])&0xFF;
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	4918      	ldr	r1, [pc, #96]	; (8006ac8 <Sound_process+0xd4>)
 8006a68:	440a      	add	r2, r1
 8006a6a:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8006a6e:	4a16      	ldr	r2, [pc, #88]	; (8006ac8 <Sound_process+0xd4>)
 8006a70:	4413      	add	r3, r2
 8006a72:	460a      	mov	r2, r1
 8006a74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	80fb      	strh	r3, [r7, #6]
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a84:	d3ed      	bcc.n	8006a62 <Sound_process+0x6e>
 8006a86:	e00d      	b.n	8006aa4 <Sound_process+0xb0>
				}
			}
		}
		else
		{
			TURN_OFF_SOUND();
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2102      	movs	r1, #2
 8006a8c:	4811      	ldr	r0, [pc, #68]	; (8006ad4 <Sound_process+0xe0>)
 8006a8e:	f003 fba7 	bl	800a1e0 <HAL_GPIO_WritePin>
			DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <Sound_process+0xe4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a10      	ldr	r2, [pc, #64]	; (8006ad8 <Sound_process+0xe4>)
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	6013      	str	r3, [r2, #0]
			f_close(&MyFile);
 8006a9e:	480b      	ldr	r0, [pc, #44]	; (8006acc <Sound_process+0xd8>)
 8006aa0:	f00d fe06 	bl	80146b0 <f_close>
		}
		ReadComplete=1;
 8006aa4:	4b03      	ldr	r3, [pc, #12]	; (8006ab4 <Sound_process+0xc0>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
	}
}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200008d8 	.word	0x200008d8
 8006ab8:	200008d4 	.word	0x200008d4
 8006abc:	200008dc 	.word	0x200008dc
 8006ac0:	200008d2 	.word	0x200008d2
 8006ac4:	20007848 	.word	0x20007848
 8006ac8:	20007c94 	.word	0x20007c94
 8006acc:	200073e8 	.word	0x200073e8
 8006ad0:	20007e94 	.word	0x20007e94
 8006ad4:	48000400 	.word	0x48000400
 8006ad8:	40020044 	.word	0x40020044

08006adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <HAL_MspInit+0x44>)
 8006ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae6:	4a0e      	ldr	r2, [pc, #56]	; (8006b20 <HAL_MspInit+0x44>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	6613      	str	r3, [r2, #96]	; 0x60
 8006aee:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <HAL_MspInit+0x44>)
 8006af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <HAL_MspInit+0x44>)
 8006afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afe:	4a08      	ldr	r2, [pc, #32]	; (8006b20 <HAL_MspInit+0x44>)
 8006b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b04:	6593      	str	r3, [r2, #88]	; 0x58
 8006b06:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <HAL_MspInit+0x44>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000

08006b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b0ae      	sub	sp, #184	; 0xb8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	609a      	str	r2, [r3, #8]
 8006b38:	60da      	str	r2, [r3, #12]
 8006b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b3c:	f107 0318 	add.w	r3, r7, #24
 8006b40:	228c      	movs	r2, #140	; 0x8c
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f016 fa5b 	bl	801d000 <memset>
  if(hadc->Instance==ADC1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a66      	ldr	r2, [pc, #408]	; (8006ce8 <HAL_ADC_MspInit+0x1c4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d152      	bne.n	8006bfa <HAL_ADC_MspInit+0xd6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006b5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b62:	f107 0318 	add.w	r3, r7, #24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f006 f814 	bl	800cb94 <HAL_RCCEx_PeriphCLKConfig>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8006b72:	f7ff fe73 	bl	800685c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8006b76:	4b5d      	ldr	r3, [pc, #372]	; (8006cec <HAL_ADC_MspInit+0x1c8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	4a5b      	ldr	r2, [pc, #364]	; (8006cec <HAL_ADC_MspInit+0x1c8>)
 8006b7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006b80:	4b5a      	ldr	r3, [pc, #360]	; (8006cec <HAL_ADC_MspInit+0x1c8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d10b      	bne.n	8006ba0 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006b88:	4b59      	ldr	r3, [pc, #356]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8c:	4a58      	ldr	r2, [pc, #352]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b94:	4b56      	ldr	r3, [pc, #344]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006ba0:	4b54      	ldr	r3, [pc, #336]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006ba2:	4a55      	ldr	r2, [pc, #340]	; (8006cf8 <HAL_ADC_MspInit+0x1d4>)
 8006ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006ba6:	4b53      	ldr	r3, [pc, #332]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bac:	4b51      	ldr	r3, [pc, #324]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bb2:	4b50      	ldr	r3, [pc, #320]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006bb8:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bbe:	4b4d      	ldr	r3, [pc, #308]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bc6:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006bce:	4b49      	ldr	r3, [pc, #292]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bd4:	4b47      	ldr	r3, [pc, #284]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bdc:	4845      	ldr	r0, [pc, #276]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bde:	f002 fedf 	bl	80099a0 <HAL_DMA_Init>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8006be8:	f7ff fe38 	bl	800685c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a41      	ldr	r2, [pc, #260]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bf0:	651a      	str	r2, [r3, #80]	; 0x50
 8006bf2:	4a40      	ldr	r2, [pc, #256]	; (8006cf4 <HAL_ADC_MspInit+0x1d0>)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006bf8:	e072      	b.n	8006ce0 <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a3f      	ldr	r2, [pc, #252]	; (8006cfc <HAL_ADC_MspInit+0x1d8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d16d      	bne.n	8006ce0 <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006c04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006c0a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c12:	f107 0318 	add.w	r3, r7, #24
 8006c16:	4618      	mov	r0, r3
 8006c18:	f005 ffbc 	bl	800cb94 <HAL_RCCEx_PeriphCLKConfig>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_ADC_MspInit+0x102>
      Error_Handler();
 8006c22:	f7ff fe1b 	bl	800685c <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006c26:	4b31      	ldr	r3, [pc, #196]	; (8006cec <HAL_ADC_MspInit+0x1c8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <HAL_ADC_MspInit+0x1c8>)
 8006c2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006c30:	4b2e      	ldr	r3, [pc, #184]	; (8006cec <HAL_ADC_MspInit+0x1c8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d10b      	bne.n	8006c50 <HAL_ADC_MspInit+0x12c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006c38:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3c:	4a2c      	ldr	r2, [pc, #176]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006c3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c44:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c50:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c54:	4a26      	ldr	r2, [pc, #152]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c5c:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_ADC_MspInit+0x1cc>)
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006c68:	2308      	movs	r3, #8
 8006c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006c6e:	230b      	movs	r3, #11
 8006c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c84:	f003 f902 	bl	8009e8c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8006c88:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <HAL_ADC_MspInit+0x1e0>)
 8006c8c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8006c8e:	4b1c      	ldr	r3, [pc, #112]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c94:	4b1a      	ldr	r3, [pc, #104]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c9a:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006ca0:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006ca2:	2280      	movs	r2, #128	; 0x80
 8006ca4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ca6:	4b16      	ldr	r3, [pc, #88]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006cae:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cb4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006cb8:	2220      	movs	r2, #32
 8006cba:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006cbc:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006cbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006cc4:	480e      	ldr	r0, [pc, #56]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006cc6:	f002 fe6b 	bl	80099a0 <HAL_DMA_Init>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8006cd0:	f7ff fdc4 	bl	800685c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006cd8:	651a      	str	r2, [r3, #80]	; 0x50
 8006cda:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <HAL_ADC_MspInit+0x1dc>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006ce0:	bf00      	nop
 8006ce2:	37b8      	adds	r7, #184	; 0xb8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	50040000 	.word	0x50040000
 8006cec:	200008e0 	.word	0x200008e0
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	20007970 	.word	0x20007970
 8006cf8:	40020008 	.word	0x40020008
 8006cfc:	50040100 	.word	0x50040100
 8006d00:	200079b8 	.word	0x200079b8
 8006d04:	4002001c 	.word	0x4002001c

08006d08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	; 0x28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d10:	f107 0314 	add.w	r3, r7, #20
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	609a      	str	r2, [r3, #8]
 8006d1c:	60da      	str	r2, [r3, #12]
 8006d1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2e      	ldr	r2, [pc, #184]	; (8006de0 <HAL_DAC_MspInit+0xd8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d156      	bne.n	8006dd8 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006d2a:	4b2e      	ldr	r3, [pc, #184]	; (8006de4 <HAL_DAC_MspInit+0xdc>)
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <HAL_DAC_MspInit+0xdc>)
 8006d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d34:	6593      	str	r3, [r2, #88]	; 0x58
 8006d36:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <HAL_DAC_MspInit+0xdc>)
 8006d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d42:	4b28      	ldr	r3, [pc, #160]	; (8006de4 <HAL_DAC_MspInit+0xdc>)
 8006d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d46:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <HAL_DAC_MspInit+0xdc>)
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d4e:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <HAL_DAC_MspInit+0xdc>)
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 8006d5a:	2320      	movs	r3, #32
 8006d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 8006d66:	f107 0314 	add.w	r3, r7, #20
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d70:	f003 f88c 	bl	8009e8c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <HAL_DAC_MspInit+0xe4>)
 8006d78:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006d7c:	2205      	movs	r2, #5
 8006d7e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d80:	4b19      	ldr	r3, [pc, #100]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006d82:	2210      	movs	r2, #16
 8006d84:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d86:	4b18      	ldr	r3, [pc, #96]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006d8c:	4b16      	ldr	r3, [pc, #88]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006d8e:	2280      	movs	r2, #128	; 0x80
 8006d90:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d92:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006da0:	2220      	movs	r2, #32
 8006da2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006da4:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006da6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006daa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8006dac:	480e      	ldr	r0, [pc, #56]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006dae:	f002 fdf7 	bl	80099a0 <HAL_DMA_Init>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8006db8:	f7ff fd50 	bl	800685c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a0a      	ldr	r2, [pc, #40]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006dc0:	60da      	str	r2, [r3, #12]
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <HAL_DAC_MspInit+0xe0>)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2100      	movs	r1, #0
 8006dcc:	2036      	movs	r0, #54	; 0x36
 8006dce:	f002 fa9f 	bl	8009310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006dd2:	2036      	movs	r0, #54	; 0x36
 8006dd4:	f002 fab8 	bl	8009348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006dd8:	bf00      	nop
 8006dda:	3728      	adds	r7, #40	; 0x28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	40007400 	.word	0x40007400
 8006de4:	40021000 	.word	0x40021000
 8006de8:	20007a00 	.word	0x20007a00
 8006dec:	40020044 	.word	0x40020044

08006df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b0ae      	sub	sp, #184	; 0xb8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e08:	f107 0318 	add.w	r3, r7, #24
 8006e0c:	228c      	movs	r2, #140	; 0x8c
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f016 f8f5 	bl	801d000 <memset>
  if(hi2c->Instance==I2C1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a42      	ldr	r2, [pc, #264]	; (8006f24 <HAL_I2C_MspInit+0x134>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d13b      	bne.n	8006e98 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006e20:	2340      	movs	r3, #64	; 0x40
 8006e22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006e24:	2300      	movs	r3, #0
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e28:	f107 0318 	add.w	r3, r7, #24
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f005 feb1 	bl	800cb94 <HAL_RCCEx_PeriphCLKConfig>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006e38:	f7ff fd10 	bl	800685c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e3c:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e40:	4a39      	ldr	r2, [pc, #228]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006e42:	f043 0302 	orr.w	r3, r3, #2
 8006e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e48:	4b37      	ldr	r3, [pc, #220]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = KEYPAD_SCL_Pin|KEYPAD_SDA_Pin;
 8006e54:	23c0      	movs	r3, #192	; 0xc0
 8006e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e5a:	2312      	movs	r3, #18
 8006e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e66:	2303      	movs	r3, #3
 8006e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e76:	4619      	mov	r1, r3
 8006e78:	482c      	ldr	r0, [pc, #176]	; (8006f2c <HAL_I2C_MspInit+0x13c>)
 8006e7a:	f003 f807 	bl	8009e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e7e:	4b2a      	ldr	r3, [pc, #168]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	4a29      	ldr	r2, [pc, #164]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e88:	6593      	str	r3, [r2, #88]	; 0x58
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006e96:	e040      	b.n	8006f1a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a24      	ldr	r2, [pc, #144]	; (8006f30 <HAL_I2C_MspInit+0x140>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d13b      	bne.n	8006f1a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006ea2:	2380      	movs	r3, #128	; 0x80
 8006ea4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006eaa:	f107 0318 	add.w	r3, r7, #24
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f005 fe70 	bl	800cb94 <HAL_RCCEx_PeriphCLKConfig>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8006eba:	f7ff fccf 	bl	800685c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ebe:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006ec4:	f043 0302 	orr.w	r3, r3, #2
 8006ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006eca:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POWER_SCL_Pin|POWER_SDA_Pin;
 8006ed6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ede:	2312      	movs	r3, #18
 8006ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eea:	2303      	movs	r3, #3
 8006eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006efa:	4619      	mov	r1, r3
 8006efc:	480b      	ldr	r0, [pc, #44]	; (8006f2c <HAL_I2C_MspInit+0x13c>)
 8006efe:	f002 ffc5 	bl	8009e8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f02:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	4a08      	ldr	r2, [pc, #32]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <HAL_I2C_MspInit+0x138>)
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	68bb      	ldr	r3, [r7, #8]
}
 8006f1a:	bf00      	nop
 8006f1c:	37b8      	adds	r7, #184	; 0xb8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	40005400 	.word	0x40005400
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	48000400 	.word	0x48000400
 8006f30:	40005800 	.word	0x40005800

08006f34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b0a6      	sub	sp, #152	; 0x98
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f3c:	f107 030c 	add.w	r3, r7, #12
 8006f40:	228c      	movs	r2, #140	; 0x8c
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f016 f85b 	bl	801d000 <memset>
  if(hrtc->Instance==RTC)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a10      	ldr	r2, [pc, #64]	; (8006f90 <HAL_RTC_MspInit+0x5c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d118      	bne.n	8006f86 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f58:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	4618      	mov	r0, r3
 8006f68:	f005 fe14 	bl	800cb94 <HAL_RCCEx_PeriphCLKConfig>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006f72:	f7ff fc73 	bl	800685c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <HAL_RTC_MspInit+0x60>)
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7c:	4a05      	ldr	r2, [pc, #20]	; (8006f94 <HAL_RTC_MspInit+0x60>)
 8006f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006f86:	bf00      	nop
 8006f88:	3798      	adds	r7, #152	; 0x98
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40002800 	.word	0x40002800
 8006f94:	40021000 	.word	0x40021000

08006f98 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <HAL_RTC_MspDeInit+0x30>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d107      	bne.n	8006fba <HAL_RTC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <HAL_RTC_MspDeInit+0x34>)
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	4a06      	ldr	r2, [pc, #24]	; (8006fcc <HAL_RTC_MspDeInit+0x34>)
 8006fb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40002800 	.word	0x40002800
 8006fcc:	40021000 	.word	0x40021000

08006fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08e      	sub	sp, #56	; 0x38
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	609a      	str	r2, [r3, #8]
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a5c      	ldr	r2, [pc, #368]	; (8007160 <HAL_SPI_MspInit+0x190>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d129      	bne.n	8007046 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ff2:	4b5c      	ldr	r3, [pc, #368]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8006ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff6:	4a5b      	ldr	r2, [pc, #364]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8006ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8006ffe:	4b59      	ldr	r3, [pc, #356]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007006:	623b      	str	r3, [r7, #32]
 8007008:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800700a:	4b56      	ldr	r3, [pc, #344]	; (8007164 <HAL_SPI_MspInit+0x194>)
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	4a55      	ldr	r2, [pc, #340]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007016:	4b53      	ldr	r3, [pc, #332]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 8007022:	23c2      	movs	r3, #194	; 0xc2
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007026:	2302      	movs	r3, #2
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702a:	2300      	movs	r3, #0
 800702c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800702e:	2303      	movs	r3, #3
 8007030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007032:	2305      	movs	r3, #5
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800703a:	4619      	mov	r1, r3
 800703c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007040:	f002 ff24 	bl	8009e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007044:	e088      	b.n	8007158 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a47      	ldr	r2, [pc, #284]	; (8007168 <HAL_SPI_MspInit+0x198>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d155      	bne.n	80070fc <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007050:	4b44      	ldr	r3, [pc, #272]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007054:	4a43      	ldr	r2, [pc, #268]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800705a:	6593      	str	r3, [r2, #88]	; 0x58
 800705c:	4b41      	ldr	r3, [pc, #260]	; (8007164 <HAL_SPI_MspInit+0x194>)
 800705e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007068:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <HAL_SPI_MspInit+0x194>)
 800706a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706c:	4a3d      	ldr	r2, [pc, #244]	; (8007164 <HAL_SPI_MspInit+0x194>)
 800706e:	f043 0304 	orr.w	r3, r3, #4
 8007072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007074:	4b3b      	ldr	r3, [pc, #236]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007080:	4b38      	ldr	r3, [pc, #224]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007084:	4a37      	ldr	r2, [pc, #220]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007086:	f043 0302 	orr.w	r3, r3, #2
 800708a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800708c:	4b35      	ldr	r3, [pc, #212]	; (8007164 <HAL_SPI_MspInit+0x194>)
 800708e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8007098:	2302      	movs	r3, #2
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800709c:	2302      	movs	r3, #2
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a4:	2303      	movs	r3, #3
 80070a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80070a8:	2303      	movs	r3, #3
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 80070ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b0:	4619      	mov	r1, r3
 80070b2:	482e      	ldr	r0, [pc, #184]	; (800716c <HAL_SPI_MspInit+0x19c>)
 80070b4:	f002 feea 	bl	8009e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80070b8:	2304      	movs	r3, #4
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070bc:	2302      	movs	r3, #2
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070c4:	2303      	movs	r3, #3
 80070c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070c8:	2305      	movs	r3, #5
 80070ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80070cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d0:	4619      	mov	r1, r3
 80070d2:	4826      	ldr	r0, [pc, #152]	; (800716c <HAL_SPI_MspInit+0x19c>)
 80070d4:	f002 feda 	bl	8009e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SCK_Pin;
 80070d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070de:	2302      	movs	r3, #2
 80070e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070e6:	2303      	movs	r3, #3
 80070e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070ea:	2305      	movs	r3, #5
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 80070ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070f2:	4619      	mov	r1, r3
 80070f4:	481e      	ldr	r0, [pc, #120]	; (8007170 <HAL_SPI_MspInit+0x1a0>)
 80070f6:	f002 fec9 	bl	8009e8c <HAL_GPIO_Init>
}
 80070fa:	e02d      	b.n	8007158 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI3)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1c      	ldr	r2, [pc, #112]	; (8007174 <HAL_SPI_MspInit+0x1a4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d128      	bne.n	8007158 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007106:	4b17      	ldr	r3, [pc, #92]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710a:	4a16      	ldr	r2, [pc, #88]	; (8007164 <HAL_SPI_MspInit+0x194>)
 800710c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007110:	6593      	str	r3, [r2, #88]	; 0x58
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800711e:	4b11      	ldr	r3, [pc, #68]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007122:	4a10      	ldr	r2, [pc, #64]	; (8007164 <HAL_SPI_MspInit+0x194>)
 8007124:	f043 0304 	orr.w	r3, r3, #4
 8007128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800712a:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <HAL_SPI_MspInit+0x194>)
 800712c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MEM_SCK_Pin|MEM_MISO_Pin|MEM_MOSI_Pin;
 8007136:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713c:	2302      	movs	r3, #2
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007140:	2300      	movs	r3, #0
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007144:	2303      	movs	r3, #3
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007148:	2306      	movs	r3, #6
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800714c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007150:	4619      	mov	r1, r3
 8007152:	4806      	ldr	r0, [pc, #24]	; (800716c <HAL_SPI_MspInit+0x19c>)
 8007154:	f002 fe9a 	bl	8009e8c <HAL_GPIO_Init>
}
 8007158:	bf00      	nop
 800715a:	3738      	adds	r7, #56	; 0x38
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40013000 	.word	0x40013000
 8007164:	40021000 	.word	0x40021000
 8007168:	40003800 	.word	0x40003800
 800716c:	48000800 	.word	0x48000800
 8007170:	48000400 	.word	0x48000400
 8007174:	40003c00 	.word	0x40003c00

08007178 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007188:	d10c      	bne.n	80071a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <HAL_TIM_PWM_MspInit+0x5c>)
 800718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718e:	4a11      	ldr	r2, [pc, #68]	; (80071d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	6593      	str	r3, [r2, #88]	; 0x58
 8007196:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8007198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80071a2:	e010      	b.n	80071c6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a0b      	ldr	r2, [pc, #44]	; (80071d8 <HAL_TIM_PWM_MspInit+0x60>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d10b      	bne.n	80071c6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80071b4:	f043 0304 	orr.w	r3, r3, #4
 80071b8:	6593      	str	r3, [r2, #88]	; 0x58
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80071bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	68bb      	ldr	r3, [r7, #8]
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40000800 	.word	0x40000800

080071dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a0d      	ldr	r2, [pc, #52]	; (8007220 <HAL_TIM_Base_MspInit+0x44>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d113      	bne.n	8007216 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071ee:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <HAL_TIM_Base_MspInit+0x48>)
 80071f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f2:	4a0c      	ldr	r2, [pc, #48]	; (8007224 <HAL_TIM_Base_MspInit+0x48>)
 80071f4:	f043 0310 	orr.w	r3, r3, #16
 80071f8:	6593      	str	r3, [r2, #88]	; 0x58
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <HAL_TIM_Base_MspInit+0x48>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007206:	2200      	movs	r2, #0
 8007208:	2100      	movs	r1, #0
 800720a:	2036      	movs	r0, #54	; 0x36
 800720c:	f002 f880 	bl	8009310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007210:	2036      	movs	r0, #54	; 0x36
 8007212:	f002 f899 	bl	8009348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40001000 	.word	0x40001000
 8007224:	40021000 	.word	0x40021000

08007228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007230:	f107 0314 	add.w	r3, r7, #20
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	609a      	str	r2, [r3, #8]
 800723c:	60da      	str	r2, [r3, #12]
 800723e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007248:	d11d      	bne.n	8007286 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800724a:	4b22      	ldr	r3, [pc, #136]	; (80072d4 <HAL_TIM_MspPostInit+0xac>)
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	4a21      	ldr	r2, [pc, #132]	; (80072d4 <HAL_TIM_MspPostInit+0xac>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007256:	4b1f      	ldr	r3, [pc, #124]	; (80072d4 <HAL_TIM_MspPostInit+0xac>)
 8007258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8007262:	2301      	movs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007266:	2302      	movs	r3, #2
 8007268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800726e:	2300      	movs	r3, #0
 8007270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007272:	2301      	movs	r3, #1
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8007276:	f107 0314 	add.w	r3, r7, #20
 800727a:	4619      	mov	r1, r3
 800727c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007280:	f002 fe04 	bl	8009e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007284:	e021      	b.n	80072ca <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <HAL_TIM_MspPostInit+0xb0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d11c      	bne.n	80072ca <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <HAL_TIM_MspPostInit+0xac>)
 8007292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007294:	4a0f      	ldr	r2, [pc, #60]	; (80072d4 <HAL_TIM_MspPostInit+0xac>)
 8007296:	f043 0308 	orr.w	r3, r3, #8
 800729a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <HAL_TIM_MspPostInit+0xac>)
 800729e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_meter_UGen_Pin;
 80072a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ae:	2302      	movs	r3, #2
 80072b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b6:	2300      	movs	r3, #0
 80072b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80072ba:	2302      	movs	r3, #2
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P_meter_UGen_GPIO_Port, &GPIO_InitStruct);
 80072be:	f107 0314 	add.w	r3, r7, #20
 80072c2:	4619      	mov	r1, r3
 80072c4:	4805      	ldr	r0, [pc, #20]	; (80072dc <HAL_TIM_MspPostInit+0xb4>)
 80072c6:	f002 fde1 	bl	8009e8c <HAL_GPIO_Init>
}
 80072ca:	bf00      	nop
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40000800 	.word	0x40000800
 80072dc:	48000c00 	.word	0x48000c00

080072e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b0ac      	sub	sp, #176	; 0xb0
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	609a      	str	r2, [r3, #8]
 80072f4:	60da      	str	r2, [r3, #12]
 80072f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072f8:	f107 0310 	add.w	r3, r7, #16
 80072fc:	228c      	movs	r2, #140	; 0x8c
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f015 fe7d 	bl	801d000 <memset>
  if(huart->Instance==USART1)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a26      	ldr	r2, [pc, #152]	; (80073a4 <HAL_UART_MspInit+0xc4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d144      	bne.n	800739a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007310:	2301      	movs	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007314:	2300      	movs	r3, #0
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007318:	f107 0310 	add.w	r3, r7, #16
 800731c:	4618      	mov	r0, r3
 800731e:	f005 fc39 	bl	800cb94 <HAL_RCCEx_PeriphCLKConfig>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007328:	f7ff fa98 	bl	800685c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800732c:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <HAL_UART_MspInit+0xc8>)
 800732e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007330:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_UART_MspInit+0xc8>)
 8007332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007336:	6613      	str	r3, [r2, #96]	; 0x60
 8007338:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <HAL_UART_MspInit+0xc8>)
 800733a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007344:	4b18      	ldr	r3, [pc, #96]	; (80073a8 <HAL_UART_MspInit+0xc8>)
 8007346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_UART_MspInit+0xc8>)
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007350:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <HAL_UART_MspInit+0xc8>)
 8007352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800735c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007364:	2302      	movs	r3, #2
 8007366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800736a:	2300      	movs	r3, #0
 800736c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007370:	2303      	movs	r3, #3
 8007372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007376:	2307      	movs	r3, #7
 8007378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800737c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007380:	4619      	mov	r1, r3
 8007382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007386:	f002 fd81 	bl	8009e8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	2025      	movs	r0, #37	; 0x25
 8007390:	f001 ffbe 	bl	8009310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007394:	2025      	movs	r0, #37	; 0x25
 8007396:	f001 ffd7 	bl	8009348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800739a:	bf00      	nop
 800739c:	37b0      	adds	r7, #176	; 0xb0
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40013800 	.word	0x40013800
 80073a8:	40021000 	.word	0x40021000

080073ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	; 0x30
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80073bc:	2200      	movs	r2, #0
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	2019      	movs	r0, #25
 80073c2:	f001 ffa5 	bl	8009310 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80073c6:	2019      	movs	r0, #25
 80073c8:	f001 ffbe 	bl	8009348 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80073cc:	4b1e      	ldr	r3, [pc, #120]	; (8007448 <HAL_InitTick+0x9c>)
 80073ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d0:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <HAL_InitTick+0x9c>)
 80073d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073d6:	6613      	str	r3, [r2, #96]	; 0x60
 80073d8:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <HAL_InitTick+0x9c>)
 80073da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80073e4:	f107 0210 	add.w	r2, r7, #16
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	4611      	mov	r1, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f005 fb3e 	bl	800ca70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80073f4:	f005 fb26 	bl	800ca44 <HAL_RCC_GetPCLK2Freq>
 80073f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	4a13      	ldr	r2, [pc, #76]	; (800744c <HAL_InitTick+0xa0>)
 80073fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007402:	0c9b      	lsrs	r3, r3, #18
 8007404:	3b01      	subs	r3, #1
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007408:	4b11      	ldr	r3, [pc, #68]	; (8007450 <HAL_InitTick+0xa4>)
 800740a:	4a12      	ldr	r2, [pc, #72]	; (8007454 <HAL_InitTick+0xa8>)
 800740c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <HAL_InitTick+0xa4>)
 8007410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007414:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007416:	4a0e      	ldr	r2, [pc, #56]	; (8007450 <HAL_InitTick+0xa4>)
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800741c:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <HAL_InitTick+0xa4>)
 800741e:	2200      	movs	r2, #0
 8007420:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007422:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <HAL_InitTick+0xa4>)
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007428:	4809      	ldr	r0, [pc, #36]	; (8007450 <HAL_InitTick+0xa4>)
 800742a:	f007 fb5f 	bl	800eaec <HAL_TIM_Base_Init>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007434:	4806      	ldr	r0, [pc, #24]	; (8007450 <HAL_InitTick+0xa4>)
 8007436:	f007 fc19 	bl	800ec6c <HAL_TIM_Base_Start_IT>
 800743a:	4603      	mov	r3, r0
 800743c:	e000      	b.n	8007440 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
}
 8007440:	4618      	mov	r0, r3
 8007442:	3730      	adds	r7, #48	; 0x30
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40021000 	.word	0x40021000
 800744c:	431bde83 	.word	0x431bde83
 8007450:	20008094 	.word	0x20008094
 8007454:	40012c00 	.word	0x40012c00

08007458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800745c:	e7fe      	b.n	800745c <NMI_Handler+0x4>

0800745e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007462:	e7fe      	b.n	8007462 <HardFault_Handler+0x4>

08007464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007468:	e7fe      	b.n	8007468 <MemManage_Handler+0x4>

0800746a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800746a:	b480      	push	{r7}
 800746c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800746e:	e7fe      	b.n	800746e <BusFault_Handler+0x4>

08007470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007474:	e7fe      	b.n	8007474 <UsageFault_Handler+0x4>

08007476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007488:	bf00      	nop
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007496:	bf00      	nop
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  ADC_EXT();
 80074b2:	f7fa f915 	bl	80016e0 <ADC_EXT>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80074b6:	2010      	movs	r0, #16
 80074b8:	f002 feaa 	bl	800a210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80074bc:	bf00      	nop
 80074be:	bd80      	pop	{r7, pc}

080074c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80074c4:	4802      	ldr	r0, [pc, #8]	; (80074d0 <DMA1_Channel1_IRQHandler+0x10>)
 80074c6:	f002 fc02 	bl	8009cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20007970 	.word	0x20007970

080074d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <DMA1_Channel2_IRQHandler+0x10>)
 80074da:	f002 fbf8 	bl	8009cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	200079b8 	.word	0x200079b8

080074e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	//
	StartReadNextSoundBuf();
 80074ec:	f7ff fa42 	bl	8006974 <StartReadNextSoundBuf>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80074f0:	4802      	ldr	r0, [pc, #8]	; (80074fc <DMA1_Channel4_IRQHandler+0x14>)
 80074f2:	f002 fbec 	bl	8009cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20007a00 	.word	0x20007a00

08007500 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007504:	4802      	ldr	r0, [pc, #8]	; (8007510 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007506:	f007 fd7f 	bl	800f008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20008094 	.word	0x20008094

08007514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1, UART_IT_RXNE)==SET)
 8007518:	4b11      	ldr	r3, [pc, #68]	; (8007560 <USART1_IRQHandler+0x4c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d016      	beq.n	8007554 <USART1_IRQHandler+0x40>
	{
		usart1_data[usart1_counter]=(uint8_t)USART1->RDR;
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <USART1_IRQHandler+0x50>)
 8007528:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800752a:	b299      	uxth	r1, r3
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <USART1_IRQHandler+0x54>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	b2c9      	uxtb	r1, r1
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <USART1_IRQHandler+0x58>)
 8007536:	5499      	strb	r1, [r3, r2]
		usart1_counter++;
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <USART1_IRQHandler+0x54>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	4b09      	ldr	r3, [pc, #36]	; (8007568 <USART1_IRQHandler+0x54>)
 8007542:	701a      	strb	r2, [r3, #0]
		rx_cmplt=5;
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <USART1_IRQHandler+0x5c>)
 8007546:	2205      	movs	r2, #5
 8007548:	701a      	strb	r2, [r3, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_IT_RXNE);
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <USART1_IRQHandler+0x4c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f240 5225 	movw	r2, #1317	; 0x525
 8007552:	621a      	str	r2, [r3, #32]
//		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007554:	4802      	ldr	r0, [pc, #8]	; (8007560 <USART1_IRQHandler+0x4c>)
 8007556:	f008 fccd 	bl	800fef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20007a48 	.word	0x20007a48
 8007564:	40013800 	.word	0x40013800
 8007568:	20000895 	.word	0x20000895
 800756c:	20002110 	.word	0x20002110
 8007570:	20000896 	.word	0x20000896

08007574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//StartReadNextSoundBuf();
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007578:	4803      	ldr	r0, [pc, #12]	; (8007588 <TIM6_DAC_IRQHandler+0x14>)
 800757a:	f007 fd45 	bl	800f008 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800757e:	4803      	ldr	r0, [pc, #12]	; (800758c <TIM6_DAC_IRQHandler+0x18>)
 8007580:	f001 ffde 	bl	8009540 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007584:	bf00      	nop
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20007bb0 	.word	0x20007bb0
 800758c:	20007b9c 	.word	0x20007b9c

08007590 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007594:	4802      	ldr	r0, [pc, #8]	; (80075a0 <OTG_FS_IRQHandler+0x10>)
 8007596:	f003 fca1 	bl	800aedc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800759a:	bf00      	nop
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20009a30 	.word	0x20009a30

080075a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
	return 1;
 80075a8:	2301      	movs	r3, #1
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <_kill>:

int _kill(int pid, int sig)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80075be:	f015 fcf5 	bl	801cfac <__errno>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2216      	movs	r2, #22
 80075c6:	601a      	str	r2, [r3, #0]
	return -1;
 80075c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <_exit>:

void _exit (int status)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80075dc:	f04f 31ff 	mov.w	r1, #4294967295
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff ffe7 	bl	80075b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80075e6:	e7fe      	b.n	80075e6 <_exit+0x12>

080075e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	e00a      	b.n	8007610 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80075fa:	f3af 8000 	nop.w
 80075fe:	4601      	mov	r1, r0
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	60ba      	str	r2, [r7, #8]
 8007606:	b2ca      	uxtb	r2, r1
 8007608:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	3301      	adds	r3, #1
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	dbf0      	blt.n	80075fa <_read+0x12>
	}

return len;
 8007618:	687b      	ldr	r3, [r7, #4]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e009      	b.n	8007648 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	60ba      	str	r2, [r7, #8]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3301      	adds	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	429a      	cmp	r2, r3
 800764e:	dbf1      	blt.n	8007634 <_write+0x12>
	}
	return len;
 8007650:	687b      	ldr	r3, [r7, #4]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <_close>:

int _close(int file)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
	return -1;
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007682:	605a      	str	r2, [r3, #4]
	return 0;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <_isatty>:

int _isatty(int file)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
	return 1;
 800769a:	2301      	movs	r3, #1
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
	return 0;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076cc:	4a14      	ldr	r2, [pc, #80]	; (8007720 <_sbrk+0x5c>)
 80076ce:	4b15      	ldr	r3, [pc, #84]	; (8007724 <_sbrk+0x60>)
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076d8:	4b13      	ldr	r3, [pc, #76]	; (8007728 <_sbrk+0x64>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076e0:	4b11      	ldr	r3, [pc, #68]	; (8007728 <_sbrk+0x64>)
 80076e2:	4a12      	ldr	r2, [pc, #72]	; (800772c <_sbrk+0x68>)
 80076e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <_sbrk+0x64>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4413      	add	r3, r2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d207      	bcs.n	8007704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076f4:	f015 fc5a 	bl	801cfac <__errno>
 80076f8:	4603      	mov	r3, r0
 80076fa:	220c      	movs	r2, #12
 80076fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007702:	e009      	b.n	8007718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007704:	4b08      	ldr	r3, [pc, #32]	; (8007728 <_sbrk+0x64>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800770a:	4b07      	ldr	r3, [pc, #28]	; (8007728 <_sbrk+0x64>)
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	4a05      	ldr	r2, [pc, #20]	; (8007728 <_sbrk+0x64>)
 8007714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20040000 	.word	0x20040000
 8007724:	00000400 	.word	0x00000400
 8007728:	200008e4 	.word	0x200008e4
 800772c:	2000a048 	.word	0x2000a048

08007730 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007734:	4b15      	ldr	r3, [pc, #84]	; (800778c <SystemInit+0x5c>)
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	4a14      	ldr	r2, [pc, #80]	; (800778c <SystemInit+0x5c>)
 800773c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <SystemInit+0x60>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a11      	ldr	r2, [pc, #68]	; (8007790 <SystemInit+0x60>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007750:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <SystemInit+0x60>)
 8007752:	2200      	movs	r2, #0
 8007754:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <SystemInit+0x60>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a0d      	ldr	r2, [pc, #52]	; (8007790 <SystemInit+0x60>)
 800775c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007760:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007764:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007766:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <SystemInit+0x60>)
 8007768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800776c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800776e:	4b08      	ldr	r3, [pc, #32]	; (8007790 <SystemInit+0x60>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a07      	ldr	r2, [pc, #28]	; (8007790 <SystemInit+0x60>)
 8007774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007778:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <SystemInit+0x60>)
 800777c:	2200      	movs	r2, #0
 800777e:	619a      	str	r2, [r3, #24]
}
 8007780:	bf00      	nop
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	e000ed00 	.word	0xe000ed00
 8007790:	40021000 	.word	0x40021000
 8007794:	00000000 	.word	0x00000000

08007798 <Temperature_process>:
extern ADC_HandleTypeDef hadc1;

uint16_t temperature_buf[256];

void Temperature_process(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_sum=0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
	uint16_t temperature_middle = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &temperature_buf, 128);
 80077aa:	2280      	movs	r2, #128	; 0x80
 80077ac:	4932      	ldr	r1, [pc, #200]	; (8007878 <Temperature_process+0xe0>)
 80077ae:	4833      	ldr	r0, [pc, #204]	; (800787c <Temperature_process+0xe4>)
 80077b0:	f000 fe4c 	bl	800844c <HAL_ADC_Start_DMA>

	for(i=0;i<128;i++)temp_sum+=temperature_buf[i];
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
 80077b8:	e00a      	b.n	80077d0 <Temperature_process+0x38>
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	4a2e      	ldr	r2, [pc, #184]	; (8007878 <Temperature_process+0xe0>)
 80077be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c2:	461a      	mov	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4413      	add	r3, r2
 80077c8:	60bb      	str	r3, [r7, #8]
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	3301      	adds	r3, #1
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	daf0      	bge.n	80077ba <Temperature_process+0x22>
	temperature_middle = (temp_sum>>7);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	09db      	lsrs	r3, r3, #7
 80077dc:	80fb      	strh	r3, [r7, #6]

	MCU_temp = (double)(temperature_middle/4096.0)*Vref;   // Напряжение в вольтах на датчике.
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7f8 feaf 	bl	8000544 <__aeabi_i2d>
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	4b25      	ldr	r3, [pc, #148]	; (8007880 <Temperature_process+0xe8>)
 80077ec:	f7f9 f83e 	bl	800086c <__aeabi_ddiv>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4610      	mov	r0, r2
 80077f6:	4619      	mov	r1, r3
 80077f8:	a319      	add	r3, pc, #100	; (adr r3, 8007860 <Temperature_process+0xc8>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 ff0b 	bl	8000618 <__aeabi_dmul>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	491f      	ldr	r1, [pc, #124]	; (8007884 <Temperature_process+0xec>)
 8007808:	e9c1 2300 	strd	r2, r3, [r1]
	MCU_temp = (tV_25-MCU_temp)/tSlope + 25.0;             // Температура в градусах.
 800780c:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <Temperature_process+0xec>)
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	a115      	add	r1, pc, #84	; (adr r1, 8007868 <Temperature_process+0xd0>)
 8007814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007818:	f7f8 fd46 	bl	80002a8 <__aeabi_dsub>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	a312      	add	r3, pc, #72	; (adr r3, 8007870 <Temperature_process+0xd8>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f9 f81f 	bl	800086c <__aeabi_ddiv>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	4b13      	ldr	r3, [pc, #76]	; (8007888 <Temperature_process+0xf0>)
 800783c:	f7f8 fd36 	bl	80002ac <__adddf3>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	490f      	ldr	r1, [pc, #60]	; (8007884 <Temperature_process+0xec>)
 8007846:	e9c1 2300 	strd	r2, r3, [r1]


	sleep(1000);
 800784a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800784e:	f7fb fca5 	bl	800319c <sleep>
}
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w
 8007860:	66666666 	.word	0x66666666
 8007864:	400a6666 	.word	0x400a6666
 8007868:	22d0e560 	.word	0x22d0e560
 800786c:	3ff2f9db 	.word	0x3ff2f9db
 8007870:	75f6fd22 	.word	0x75f6fd22
 8007874:	3f719ce0 	.word	0x3f719ce0
 8007878:	200080e0 	.word	0x200080e0
 800787c:	20007b34 	.word	0x20007b34
 8007880:	40b00000 	.word	0x40b00000
 8007884:	20000898 	.word	0x20000898
 8007888:	40390000 	.word	0x40390000

0800788c <spi_timeout>:
static SPI_HandleTypeDef hdisplayspi;



uint8_t spi_timeout(void)
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
	if(++spitimeout==100) return 1;
 8007890:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <spi_timeout+0x28>)
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <spi_timeout+0x28>)
 800789a:	801a      	strh	r2, [r3, #0]
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <spi_timeout+0x28>)
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	2b64      	cmp	r3, #100	; 0x64
 80078a2:	d101      	bne.n	80078a8 <spi_timeout+0x1c>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <spi_timeout+0x1e>
	else return 0;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	200008e8 	.word	0x200008e8

080078b8 <u8x8_gpio_and_delay_cb_stm32l4>:
/** @addtogroup _Exported_Functions
  * @{
  */
uint8_t u8x8_gpio_and_delay_cb_stm32l4 (U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg,
		U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	72fb      	strb	r3, [r7, #11]
 80078c6:	4613      	mov	r3, r2
 80078c8:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ca:	f107 0314 	add.w	r3, r7, #20
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	609a      	str	r2, [r3, #8]
 80078d6:	60da      	str	r2, [r3, #12]
 80078d8:	611a      	str	r2, [r3, #16]
	  switch (msg)
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	3b28      	subs	r3, #40	; 0x28
 80078de:	2b23      	cmp	r3, #35	; 0x23
 80078e0:	d870      	bhi.n	80079c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <u8x8_gpio_and_delay_cb_stm32l4+0x30>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007979 	.word	0x08007979
 80078ec:	0800798f 	.word	0x0800798f
 80078f0:	080079c5 	.word	0x080079c5
 80078f4:	080079c5 	.word	0x080079c5
 80078f8:	080079c5 	.word	0x080079c5
 80078fc:	080079c5 	.word	0x080079c5
 8007900:	080079c5 	.word	0x080079c5
 8007904:	080079c5 	.word	0x080079c5
 8007908:	080079c5 	.word	0x080079c5
 800790c:	080079c5 	.word	0x080079c5
 8007910:	080079c5 	.word	0x080079c5
 8007914:	080079c5 	.word	0x080079c5
 8007918:	080079c5 	.word	0x080079c5
 800791c:	080079c5 	.word	0x080079c5
 8007920:	080079c5 	.word	0x080079c5
 8007924:	080079c5 	.word	0x080079c5
 8007928:	080079c5 	.word	0x080079c5
 800792c:	080079c5 	.word	0x080079c5
 8007930:	080079c5 	.word	0x080079c5
 8007934:	080079c5 	.word	0x080079c5
 8007938:	080079c5 	.word	0x080079c5
 800793c:	080079c5 	.word	0x080079c5
 8007940:	080079c5 	.word	0x080079c5
 8007944:	080079c5 	.word	0x080079c5
 8007948:	080079c5 	.word	0x080079c5
 800794c:	080079c5 	.word	0x080079c5
 8007950:	080079c5 	.word	0x080079c5
 8007954:	080079c5 	.word	0x080079c5
 8007958:	080079c5 	.word	0x080079c5
 800795c:	080079c5 	.word	0x080079c5
 8007960:	080079c5 	.word	0x080079c5
 8007964:	080079c5 	.word	0x080079c5
 8007968:	080079c5 	.word	0x080079c5
 800796c:	080079a9 	.word	0x080079a9
 8007970:	08007999 	.word	0x08007999
 8007974:	080079b7 	.word	0x080079b7
	  {
	  case U8X8_MSG_GPIO_AND_DELAY_INIT:
		  LCD_NRST_NOT_ACTIVE();
 8007978:	2201      	movs	r2, #1
 800797a:	2110      	movs	r1, #16
 800797c:	4814      	ldr	r0, [pc, #80]	; (80079d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 800797e:	f002 fc2f 	bl	800a1e0 <HAL_GPIO_WritePin>
		  LCD_NCS_NOT_ACTIVE();
 8007982:	2201      	movs	r2, #1
 8007984:	2101      	movs	r1, #1
 8007986:	4812      	ldr	r0, [pc, #72]	; (80079d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007988:	f002 fc2a 	bl	800a1e0 <HAL_GPIO_WritePin>
	    break;
 800798c:	e01a      	b.n	80079c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_DELAY_MILLI:
		  delay_ms(arg_int);
 800798e:	7abb      	ldrb	r3, [r7, #10]
 8007990:	4618      	mov	r0, r3
 8007992:	f7fb fc4f 	bl	8003234 <delay_ms>
	    break;
 8007996:	e015      	b.n	80079c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_DC:
	    HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, arg_int); //?
 8007998:	7abb      	ldrb	r3, [r7, #10]
 800799a:	461a      	mov	r2, r3
 800799c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079a0:	480c      	ldr	r0, [pc, #48]	; (80079d4 <u8x8_gpio_and_delay_cb_stm32l4+0x11c>)
 80079a2:	f002 fc1d 	bl	800a1e0 <HAL_GPIO_WritePin>
	    break;
 80079a6:	e00d      	b.n	80079c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_CS:
	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, arg_int); //?
 80079a8:	7abb      	ldrb	r3, [r7, #10]
 80079aa:	461a      	mov	r2, r3
 80079ac:	2101      	movs	r1, #1
 80079ae:	4808      	ldr	r0, [pc, #32]	; (80079d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079b0:	f002 fc16 	bl	800a1e0 <HAL_GPIO_WritePin>
	    break;
 80079b4:	e006      	b.n	80079c4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_RESET:
	    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, arg_int);
 80079b6:	7abb      	ldrb	r3, [r7, #10]
 80079b8:	461a      	mov	r2, r3
 80079ba:	2110      	movs	r1, #16
 80079bc:	4804      	ldr	r0, [pc, #16]	; (80079d0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079be:	f002 fc0f 	bl	800a1e0 <HAL_GPIO_WritePin>
	    break;
 80079c2:	bf00      	nop
	  }
	  return 1;
 80079c4:	2301      	movs	r3, #1
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3728      	adds	r7, #40	; 0x28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	48001000 	.word	0x48001000
 80079d4:	48000400 	.word	0x48000400

080079d8 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	72fb      	strb	r3, [r7, #11]
 80079e6:	4613      	mov	r3, r2
 80079e8:	72bb      	strb	r3, [r7, #10]
	uint8_t *data;//, a_flag;
#ifdef  USE_BSP_SPI2
 hdisplayspi.Instance = huc1638_hspi.Instance;
#else
 hdisplayspi.Instance = hspi2.Instance;
 80079ea:	4b54      	ldr	r3, [pc, #336]	; (8007b3c <u8x8_byte_4wire_hw_spi+0x164>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a54      	ldr	r2, [pc, #336]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 80079f0:	6013      	str	r3, [r2, #0]
#endif

  switch (msg)
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	3b14      	subs	r3, #20
 80079f6:	2b0c      	cmp	r3, #12
 80079f8:	f200 8098 	bhi.w	8007b2c <u8x8_byte_4wire_hw_spi+0x154>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <u8x8_byte_4wire_hw_spi+0x2c>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007ac9 	.word	0x08007ac9
 8007a08:	08007b2d 	.word	0x08007b2d
 8007a0c:	08007b2d 	.word	0x08007b2d
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007ae9 	.word	0x08007ae9
 8007a18:	08007b0b 	.word	0x08007b0b
 8007a1c:	08007b2d 	.word	0x08007b2d
 8007a20:	08007b2d 	.word	0x08007b2d
 8007a24:	08007b2d 	.word	0x08007b2d
 8007a28:	08007b2d 	.word	0x08007b2d
 8007a2c:	08007b2d 	.word	0x08007b2d
 8007a30:	08007b2d 	.word	0x08007b2d
 8007a34:	08007adb 	.word	0x08007adb
  {
  case U8X8_MSG_BYTE_SEND:
	data = (uint8_t *)arg_ptr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	617b      	str	r3, [r7, #20]
    while (arg_int > 0)
 8007a3c:	e040      	b.n	8007ac0 <u8x8_byte_4wire_hw_spi+0xe8>
    {
    	/* check TXE flag */
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
    	{
    		spitimeout = 0;
 8007a3e:	4b41      	ldr	r3, [pc, #260]	; (8007b44 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007a44:	f7ff ff22 	bl	800788c <spi_timeout>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d007      	beq.n	8007a5e <u8x8_byte_4wire_hw_spi+0x86>
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8007a4e:	4b3c      	ldr	r3, [pc, #240]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d1f0      	bne.n	8007a3e <u8x8_byte_4wire_hw_spi+0x66>
 8007a5c:	e000      	b.n	8007a60 <u8x8_byte_4wire_hw_spi+0x88>
    		if(spi_timeout()==1) break;
 8007a5e:	bf00      	nop
    	}
    	/* Write the data */
    	*((__IO uint8_t*) &hdisplayspi.Instance->DR ) = (uint8_t) * data;
 8007a60:	4b37      	ldr	r3, [pc, #220]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	7812      	ldrb	r2, [r2, #0]
 8007a6a:	701a      	strb	r2, [r3, #0]
    	/* Wait BSY flag */
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a6c:	e007      	b.n	8007a7e <u8x8_byte_4wire_hw_spi+0xa6>
    		{
    			spitimeout = 0;
 8007a6e:	4b35      	ldr	r3, [pc, #212]	; (8007b44 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	801a      	strh	r2, [r3, #0]
    		    if(spi_timeout()==1) break;
 8007a74:	f7ff ff0a 	bl	800788c <spi_timeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d007      	beq.n	8007a8e <u8x8_byte_4wire_hw_spi+0xb6>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a7e:	4b30      	ldr	r3, [pc, #192]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f0      	bne.n	8007a6e <u8x8_byte_4wire_hw_spi+0x96>
 8007a8c:	e009      	b.n	8007aa2 <u8x8_byte_4wire_hw_spi+0xca>
    		    if(spi_timeout()==1) break;
 8007a8e:	bf00      	nop
    		}
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007a90:	e007      	b.n	8007aa2 <u8x8_byte_4wire_hw_spi+0xca>
    	{
    		spitimeout = 0;
 8007a92:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007a98:	f7ff fef8 	bl	800788c <spi_timeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d007      	beq.n	8007ab2 <u8x8_byte_4wire_hw_spi+0xda>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007aa2:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d0f0      	beq.n	8007a92 <u8x8_byte_4wire_hw_spi+0xba>
 8007ab0:	e000      	b.n	8007ab4 <u8x8_byte_4wire_hw_spi+0xdc>
    		if(spi_timeout()==1) break;
 8007ab2:	bf00      	nop
    	}
        data++;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
        arg_int--;
 8007aba:	7abb      	ldrb	r3, [r7, #10]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	72bb      	strb	r3, [r7, #10]
    while (arg_int > 0)
 8007ac0:	7abb      	ldrb	r3, [r7, #10]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1c3      	bne.n	8007a4e <u8x8_byte_4wire_hw_spi+0x76>
    }
//	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, arg_int, 1000);
    break;
 8007ac6:	e033      	b.n	8007b30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_INIT:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2149      	movs	r1, #73	; 0x49
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f00e feb9 	bl	801684a <u8x8_gpio_call>
    break;
 8007ad8:	e02a      	b.n	8007b30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_SET_DC:
	  u8x8_gpio_SetDC(u8x8, arg_int);
 8007ada:	7abb      	ldrb	r3, [r7, #10]
 8007adc:	461a      	mov	r2, r3
 8007ade:	214a      	movs	r1, #74	; 0x4a
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f00e feb2 	bl	801684a <u8x8_gpio_call>
    break;
 8007ae6:	e023      	b.n	8007b30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_START_TRANSFER:
	  __HAL_SPI_ENABLE(&hdisplayspi);
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b14      	ldr	r3, [pc, #80]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af6:	601a      	str	r2, [r3, #0]
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	2149      	movs	r1, #73	; 0x49
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f00e fea1 	bl	801684a <u8x8_gpio_call>
    break;
 8007b08:	e012      	b.n	8007b30 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_END_TRANSFER:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	785b      	ldrb	r3, [r3, #1]
 8007b10:	461a      	mov	r2, r3
 8007b12:	2149      	movs	r1, #73	; 0x49
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f00e fe98 	bl	801684a <u8x8_gpio_call>
	  __HAL_SPI_DISABLE(&hdisplayspi);
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b28:	601a      	str	r2, [r3, #0]
    break;
 8007b2a:	e001      	b.n	8007b30 <u8x8_byte_4wire_hw_spi+0x158>
  default:
    return 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e000      	b.n	8007b32 <u8x8_byte_4wire_hw_spi+0x15a>
  }
  return 1;
 8007b30:	2301      	movs	r3, #1
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20001f68 	.word	0x20001f68
 8007b40:	200008ec 	.word	0x200008ec
 8007b44:	200008e8 	.word	0x200008e8

08007b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007b4c:	f7ff fdf0 	bl	8007730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007b52:	e003      	b.n	8007b5c <LoopCopyDataInit>

08007b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007b54:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007b5a:	3104      	adds	r1, #4

08007b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007b5c:	480a      	ldr	r0, [pc, #40]	; (8007b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007b5e:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8007b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007b64:	d3f6      	bcc.n	8007b54 <CopyDataInit>
	ldr	r2, =_sbss
 8007b66:	4a0a      	ldr	r2, [pc, #40]	; (8007b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007b68:	e002      	b.n	8007b70 <LoopFillZerobss>

08007b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007b6c:	f842 3b04 	str.w	r3, [r2], #4

08007b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007b70:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <LoopForever+0x16>)
	cmp	r2, r3
 8007b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007b74:	d3f9      	bcc.n	8007b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007b76:	f015 fa1f 	bl	801cfb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b7a:	f7fe f883 	bl	8005c84 <main>

08007b7e <LoopForever>:

LoopForever:
    b LoopForever
 8007b7e:	e7fe      	b.n	8007b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007b80:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8007b84:	08029b44 	.word	0x08029b44
	ldr	r0, =_sdata
 8007b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007b8c:	20000804 	.word	0x20000804
	ldr	r2, =_sbss
 8007b90:	20000808 	.word	0x20000808
	ldr	r3, = _ebss
 8007b94:	2000a048 	.word	0x2000a048

08007b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007b98:	e7fe      	b.n	8007b98 <ADC1_2_IRQHandler>

08007b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ba4:	2003      	movs	r0, #3
 8007ba6:	f001 fba8 	bl	80092fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007baa:	200f      	movs	r0, #15
 8007bac:	f7ff fbfe 	bl	80073ac <HAL_InitTick>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	71fb      	strb	r3, [r7, #7]
 8007bba:	e001      	b.n	8007bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007bbc:	f7fe ff8e 	bl	8006adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <HAL_IncTick+0x20>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <HAL_IncTick+0x24>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4413      	add	r3, r2
 8007bdc:	4a04      	ldr	r2, [pc, #16]	; (8007bf0 <HAL_IncTick+0x24>)
 8007bde:	6013      	str	r3, [r2, #0]
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000318 	.word	0x20000318
 8007bf0:	200082e0 	.word	0x200082e0

08007bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8007bf8:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <HAL_GetTick+0x14>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	200082e0 	.word	0x200082e0

08007c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c14:	f7ff ffee 	bl	8007bf4 <HAL_GetTick>
 8007c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d005      	beq.n	8007c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <HAL_Delay+0x44>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c32:	bf00      	nop
 8007c34:	f7ff ffde 	bl	8007bf4 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d8f7      	bhi.n	8007c34 <HAL_Delay+0x28>
  {
  }
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000318 	.word	0x20000318

08007c54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	609a      	str	r2, [r3, #8]
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	609a      	str	r2, [r3, #8]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3360      	adds	r3, #96	; 0x60
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <LL_ADC_SetOffset+0x44>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	03fff000 	.word	0x03fff000

08007d04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3360      	adds	r3, #96	; 0x60
 8007d12:	461a      	mov	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3360      	adds	r3, #96	; 0x60
 8007d40:	461a      	mov	r2, r3
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	615a      	str	r2, [r3, #20]
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e000      	b.n	8007da6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b087      	sub	sp, #28
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3330      	adds	r3, #48	; 0x30
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	0a1b      	lsrs	r3, r3, #8
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	f003 030c 	and.w	r3, r3, #12
 8007dce:	4413      	add	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	211f      	movs	r1, #31
 8007dde:	fa01 f303 	lsl.w	r3, r1, r3
 8007de2:	43db      	mvns	r3, r3
 8007de4:	401a      	ands	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0e9b      	lsrs	r3, r3, #26
 8007dea:	f003 011f 	and.w	r1, r3, #31
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	fa01 f303 	lsl.w	r3, r1, r3
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	0e5b      	lsrs	r3, r3, #25
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	4413      	add	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	0d1b      	lsrs	r3, r3, #20
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	2107      	movs	r1, #7
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	401a      	ands	r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	0d1b      	lsrs	r3, r3, #20
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007e54:	bf00      	nop
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	401a      	ands	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f003 0318 	and.w	r3, r3, #24
 8007e82:	4908      	ldr	r1, [pc, #32]	; (8007ea4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007e84:	40d9      	lsrs	r1, r3
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	400b      	ands	r3, r1
 8007e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	0007ffff 	.word	0x0007ffff

08007ea8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 031f 	and.w	r3, r3, #31
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6093      	str	r3, [r2, #8]
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007efc:	d101      	bne.n	8007f02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f4c:	d101      	bne.n	8007f52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f74:	f043 0201 	orr.w	r2, r3, #1
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <LL_ADC_IsEnabled+0x18>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <LL_ADC_IsEnabled+0x1a>
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fc2:	f043 0204 	orr.w	r2, r3, #4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d101      	bne.n	8007fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b08      	cmp	r3, #8
 800800e:	d101      	bne.n	8008014 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008024:	b590      	push	{r4, r7, lr}
 8008026:	b089      	sub	sp, #36	; 0x24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008030:	2300      	movs	r3, #0
 8008032:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e139      	b.n	80082b2 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008048:	2b00      	cmp	r3, #0
 800804a:	d109      	bne.n	8008060 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7fe fd69 	bl	8006b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff ff3f 	bl	8007ee8 <LL_ADC_IsDeepPowerDownEnabled>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff ff25 	bl	8007ec4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff ff5a 	bl	8007f38 <LL_ADC_IsInternalRegulatorEnabled>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d115      	bne.n	80080b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff ff3e 	bl	8007f10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008094:	4b89      	ldr	r3, [pc, #548]	; (80082bc <HAL_ADC_Init+0x298>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	099b      	lsrs	r3, r3, #6
 800809a:	4a89      	ldr	r2, [pc, #548]	; (80082c0 <HAL_ADC_Init+0x29c>)
 800809c:	fba2 2303 	umull	r2, r3, r2, r3
 80080a0:	099b      	lsrs	r3, r3, #6
 80080a2:	3301      	adds	r3, #1
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080a8:	e002      	b.n	80080b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1f9      	bne.n	80080aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff ff3c 	bl	8007f38 <LL_ADC_IsInternalRegulatorEnabled>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ca:	f043 0210 	orr.w	r2, r3, #16
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	f043 0201 	orr.w	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff ff75 	bl	8007fd6 <LL_ADC_REG_IsConversionOngoing>
 80080ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f040 80d2 	bne.w	80082a0 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f040 80ce 	bne.w	80082a0 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008108:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800810c:	f043 0202 	orr.w	r2, r3, #2
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff ff35 	bl	8007f88 <LL_ADC_IsEnabled>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d115      	bne.n	8008150 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008124:	4867      	ldr	r0, [pc, #412]	; (80082c4 <HAL_ADC_Init+0x2a0>)
 8008126:	f7ff ff2f 	bl	8007f88 <LL_ADC_IsEnabled>
 800812a:	4604      	mov	r4, r0
 800812c:	4866      	ldr	r0, [pc, #408]	; (80082c8 <HAL_ADC_Init+0x2a4>)
 800812e:	f7ff ff2b 	bl	8007f88 <LL_ADC_IsEnabled>
 8008132:	4603      	mov	r3, r0
 8008134:	431c      	orrs	r4, r3
 8008136:	4865      	ldr	r0, [pc, #404]	; (80082cc <HAL_ADC_Init+0x2a8>)
 8008138:	f7ff ff26 	bl	8007f88 <LL_ADC_IsEnabled>
 800813c:	4603      	mov	r3, r0
 800813e:	4323      	orrs	r3, r4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4619      	mov	r1, r3
 800814a:	4861      	ldr	r0, [pc, #388]	; (80082d0 <HAL_ADC_Init+0x2ac>)
 800814c:	f7ff fd82 	bl	8007c54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7e5b      	ldrb	r3, [r3, #25]
 8008154:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800815a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008160:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008166:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800816e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008170:	4313      	orrs	r3, r2
 8008172:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d106      	bne.n	800818c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	3b01      	subs	r3, #1
 8008184:	045b      	lsls	r3, r3, #17
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	4313      	orrs	r3, r2
 800818a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	4b49      	ldr	r3, [pc, #292]	; (80082d4 <HAL_ADC_Init+0x2b0>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	69b9      	ldr	r1, [r7, #24]
 80081b8:	430b      	orrs	r3, r1
 80081ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff ff08 	bl	8007fd6 <LL_ADC_REG_IsConversionOngoing>
 80081c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff ff15 	bl	8007ffc <LL_ADC_INJ_IsConversionOngoing>
 80081d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d140      	bne.n	800825c <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d13d      	bne.n	800825c <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7e1b      	ldrb	r3, [r3, #24]
 80081e8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081ea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081f4:	4313      	orrs	r3, r2
 80081f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008202:	f023 0306 	bic.w	r3, r3, #6
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	69b9      	ldr	r1, [r7, #24]
 800820c:	430b      	orrs	r3, r1
 800820e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008216:	2b01      	cmp	r3, #1
 8008218:	d118      	bne.n	800824c <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008224:	f023 0304 	bic.w	r3, r3, #4
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008230:	4311      	orrs	r1, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008236:	4311      	orrs	r1, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800823c:	430a      	orrs	r2, r1
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f042 0201 	orr.w	r2, r2, #1
 8008248:	611a      	str	r2, [r3, #16]
 800824a:	e007      	b.n	800825c <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0201 	bic.w	r2, r2, #1
 800825a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d10c      	bne.n	800827e <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	f023 010f 	bic.w	r1, r3, #15
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	1e5a      	subs	r2, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
 800827c:	e007      	b.n	800828e <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 020f 	bic.w	r2, r2, #15
 800828c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	f043 0201 	orr.w	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	659a      	str	r2, [r3, #88]	; 0x58
 800829e:	e007      	b.n	80082b0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a4:	f043 0210 	orr.w	r2, r3, #16
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80082b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3724      	adds	r7, #36	; 0x24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd90      	pop	{r4, r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000310 	.word	0x20000310
 80082c0:	053e2d63 	.word	0x053e2d63
 80082c4:	50040000 	.word	0x50040000
 80082c8:	50040100 	.word	0x50040100
 80082cc:	50040200 	.word	0x50040200
 80082d0:	50040300 	.word	0x50040300
 80082d4:	fff0c007 	.word	0xfff0c007

080082d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80082e0:	4857      	ldr	r0, [pc, #348]	; (8008440 <HAL_ADC_Start+0x168>)
 80082e2:	f7ff fde1 	bl	8007ea8 <LL_ADC_GetMultimode>
 80082e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fe72 	bl	8007fd6 <LL_ADC_REG_IsConversionOngoing>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 809c 	bne.w	8008432 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_ADC_Start+0x30>
 8008304:	2302      	movs	r3, #2
 8008306:	e097      	b.n	8008438 <HAL_ADC_Start+0x160>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fd79 	bl	8008e08 <ADC_Enable>
 8008316:	4603      	mov	r3, r0
 8008318:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 8083 	bne.w	8008428 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008326:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800832a:	f023 0301 	bic.w	r3, r3, #1
 800832e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a42      	ldr	r2, [pc, #264]	; (8008444 <HAL_ADC_Start+0x16c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d002      	beq.n	8008346 <HAL_ADC_Start+0x6e>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	e000      	b.n	8008348 <HAL_ADC_Start+0x70>
 8008346:	4b40      	ldr	r3, [pc, #256]	; (8008448 <HAL_ADC_Start+0x170>)
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	4293      	cmp	r3, r2
 800834e:	d002      	beq.n	8008356 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d105      	bne.n	8008362 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800836a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836e:	d106      	bne.n	800837e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008374:	f023 0206 	bic.w	r2, r3, #6
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	65da      	str	r2, [r3, #92]	; 0x5c
 800837c:	e002      	b.n	8008384 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	221c      	movs	r2, #28
 800838a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a2a      	ldr	r2, [pc, #168]	; (8008444 <HAL_ADC_Start+0x16c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d002      	beq.n	80083a4 <HAL_ADC_Start+0xcc>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	e000      	b.n	80083a6 <HAL_ADC_Start+0xce>
 80083a4:	4b28      	ldr	r3, [pc, #160]	; (8008448 <HAL_ADC_Start+0x170>)
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6812      	ldr	r2, [r2, #0]
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d008      	beq.n	80083c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d002      	beq.n	80083c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	2b09      	cmp	r3, #9
 80083be:	d114      	bne.n	80083ea <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80083d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff fde3 	bl	8007fae <LL_ADC_REG_StartConversion>
 80083e8:	e025      	b.n	8008436 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a12      	ldr	r2, [pc, #72]	; (8008444 <HAL_ADC_Start+0x16c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d002      	beq.n	8008406 <HAL_ADC_Start+0x12e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	e000      	b.n	8008408 <HAL_ADC_Start+0x130>
 8008406:	4b10      	ldr	r3, [pc, #64]	; (8008448 <HAL_ADC_Start+0x170>)
 8008408:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00f      	beq.n	8008436 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800841e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	659a      	str	r2, [r3, #88]	; 0x58
 8008426:	e006      	b.n	8008436 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008430:	e001      	b.n	8008436 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008432:	2302      	movs	r3, #2
 8008434:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	50040300 	.word	0x50040300
 8008444:	50040100 	.word	0x50040100
 8008448:	50040000 	.word	0x50040000

0800844c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008458:	4850      	ldr	r0, [pc, #320]	; (800859c <HAL_ADC_Start_DMA+0x150>)
 800845a:	f7ff fd25 	bl	8007ea8 <LL_ADC_GetMultimode>
 800845e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fdb6 	bl	8007fd6 <LL_ADC_REG_IsConversionOngoing>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 808e 	bne.w	800858e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <HAL_ADC_Start_DMA+0x34>
 800847c:	2302      	movs	r3, #2
 800847e:	e089      	b.n	8008594 <HAL_ADC_Start_DMA+0x148>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b05      	cmp	r3, #5
 8008492:	d002      	beq.n	800849a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b09      	cmp	r3, #9
 8008498:	d172      	bne.n	8008580 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fcb4 	bl	8008e08 <ADC_Enable>
 80084a0:	4603      	mov	r3, r0
 80084a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d165      	bne.n	8008576 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084b2:	f023 0301 	bic.w	r3, r3, #1
 80084b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a37      	ldr	r2, [pc, #220]	; (80085a0 <HAL_ADC_Start_DMA+0x154>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d002      	beq.n	80084ce <HAL_ADC_Start_DMA+0x82>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	e000      	b.n	80084d0 <HAL_ADC_Start_DMA+0x84>
 80084ce:	4b35      	ldr	r3, [pc, #212]	; (80085a4 <HAL_ADC_Start_DMA+0x158>)
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	6812      	ldr	r2, [r2, #0]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d002      	beq.n	80084de <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d006      	beq.n	8008504 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fa:	f023 0206 	bic.w	r2, r3, #6
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	65da      	str	r2, [r3, #92]	; 0x5c
 8008502:	e002      	b.n	800850a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <HAL_ADC_Start_DMA+0x15c>)
 8008510:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	4a25      	ldr	r2, [pc, #148]	; (80085ac <HAL_ADC_Start_DMA+0x160>)
 8008518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851e:	4a24      	ldr	r2, [pc, #144]	; (80085b0 <HAL_ADC_Start_DMA+0x164>)
 8008520:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	221c      	movs	r2, #28
 8008528:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0210 	orr.w	r2, r2, #16
 8008540:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f042 0201 	orr.w	r2, r2, #1
 8008550:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3340      	adds	r3, #64	; 0x40
 800855c:	4619      	mov	r1, r3
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f001 fad5 	bl	8009b10 <HAL_DMA_Start_IT>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fd1d 	bl	8007fae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008574:	e00d      	b.n	8008592 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800857e:	e008      	b.n	8008592 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800858c:	e001      	b.n	8008592 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800858e:	2302      	movs	r3, #2
 8008590:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008592:	7dfb      	ldrb	r3, [r7, #23]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	50040300 	.word	0x50040300
 80085a0:	50040100 	.word	0x50040100
 80085a4:	50040000 	.word	0x50040000
 80085a8:	08008ecd 	.word	0x08008ecd
 80085ac:	08008fa5 	.word	0x08008fa5
 80085b0:	08008fc1 	.word	0x08008fc1

080085b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b0b6      	sub	sp, #216	; 0xd8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <HAL_ADC_ConfigChannel+0x22>
 800860e:	2302      	movs	r3, #2
 8008610:	e3e3      	b.n	8008dda <HAL_ADC_ConfigChannel+0x7ea>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fcd9 	bl	8007fd6 <LL_ADC_REG_IsConversionOngoing>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 83c4 	bne.w	8008db4 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b05      	cmp	r3, #5
 8008632:	d824      	bhi.n	800867e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	3b02      	subs	r3, #2
 800863a:	2b03      	cmp	r3, #3
 800863c:	d81b      	bhi.n	8008676 <HAL_ADC_ConfigChannel+0x86>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <HAL_ADC_ConfigChannel+0x54>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008655 	.word	0x08008655
 8008648:	0800865d 	.word	0x0800865d
 800864c:	08008665 	.word	0x08008665
 8008650:	0800866d 	.word	0x0800866d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	220c      	movs	r2, #12
 8008658:	605a      	str	r2, [r3, #4]
          break;
 800865a:	e011      	b.n	8008680 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2212      	movs	r2, #18
 8008660:	605a      	str	r2, [r3, #4]
          break;
 8008662:	e00d      	b.n	8008680 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2218      	movs	r2, #24
 8008668:	605a      	str	r2, [r3, #4]
          break;
 800866a:	e009      	b.n	8008680 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008672:	605a      	str	r2, [r3, #4]
          break;
 8008674:	e004      	b.n	8008680 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2206      	movs	r2, #6
 800867a:	605a      	str	r2, [r3, #4]
          break;
 800867c:	e000      	b.n	8008680 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800867e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	6859      	ldr	r1, [r3, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	f7ff fb90 	bl	8007db2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fc9d 	bl	8007fd6 <LL_ADC_REG_IsConversionOngoing>
 800869c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff fca9 	bl	8007ffc <LL_ADC_INJ_IsConversionOngoing>
 80086aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f040 81c1 	bne.w	8008a3a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f040 81bc 	bne.w	8008a3a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086ca:	d10f      	bne.n	80086ec <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6818      	ldr	r0, [r3, #0]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2200      	movs	r2, #0
 80086d6:	4619      	mov	r1, r3
 80086d8:	f7ff fb97 	bl	8007e0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fb3e 	bl	8007d66 <LL_ADC_SetSamplingTimeCommonConfig>
 80086ea:	e00e      	b.n	800870a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	461a      	mov	r2, r3
 80086fa:	f7ff fb86 	bl	8007e0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff fb2e 	bl	8007d66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	695a      	ldr	r2, [r3, #20]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	08db      	lsrs	r3, r3, #3
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	2b04      	cmp	r3, #4
 800872a:	d00a      	beq.n	8008742 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6919      	ldr	r1, [r3, #16]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800873c:	f7ff fabe 	bl	8007cbc <LL_ADC_SetOffset>
 8008740:	e17b      	b.n	8008a3a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2100      	movs	r1, #0
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fadb 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 800874e:	4603      	mov	r3, r0
 8008750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <HAL_ADC_ConfigChannel+0x17e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2100      	movs	r1, #0
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fad0 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 8008764:	4603      	mov	r3, r0
 8008766:	0e9b      	lsrs	r3, r3, #26
 8008768:	f003 021f 	and.w	r2, r3, #31
 800876c:	e01e      	b.n	80087ac <HAL_ADC_ConfigChannel+0x1bc>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff fac5 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 800877a:	4603      	mov	r3, r0
 800877c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008784:	fa93 f3a3 	rbit	r3, r3
 8008788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800878c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800879c:	2320      	movs	r3, #32
 800879e:	e004      	b.n	80087aa <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80087a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087a4:	fab3 f383 	clz	r3, r3
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d105      	bne.n	80087c4 <HAL_ADC_ConfigChannel+0x1d4>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	0e9b      	lsrs	r3, r3, #26
 80087be:	f003 031f 	and.w	r3, r3, #31
 80087c2:	e018      	b.n	80087f6 <HAL_ADC_ConfigChannel+0x206>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087d0:	fa93 f3a3 	rbit	r3, r3
 80087d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80087d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80087e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80087e8:	2320      	movs	r3, #32
 80087ea:	e004      	b.n	80087f6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80087ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087f0:	fab3 f383 	clz	r3, r3
 80087f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d106      	bne.n	8008808 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2200      	movs	r2, #0
 8008800:	2100      	movs	r1, #0
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fa94 	bl	8007d30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2101      	movs	r1, #1
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fa78 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 8008814:	4603      	mov	r3, r0
 8008816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <HAL_ADC_ConfigChannel+0x244>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2101      	movs	r1, #1
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fa6d 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 800882a:	4603      	mov	r3, r0
 800882c:	0e9b      	lsrs	r3, r3, #26
 800882e:	f003 021f 	and.w	r2, r3, #31
 8008832:	e01e      	b.n	8008872 <HAL_ADC_ConfigChannel+0x282>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2101      	movs	r1, #1
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff fa62 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 8008840:	4603      	mov	r3, r0
 8008842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800884a:	fa93 f3a3 	rbit	r3, r3
 800884e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800885a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8008862:	2320      	movs	r3, #32
 8008864:	e004      	b.n	8008870 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8008866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800886a:	fab3 f383 	clz	r3, r3
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800887a:	2b00      	cmp	r3, #0
 800887c:	d105      	bne.n	800888a <HAL_ADC_ConfigChannel+0x29a>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	0e9b      	lsrs	r3, r3, #26
 8008884:	f003 031f 	and.w	r3, r3, #31
 8008888:	e018      	b.n	80088bc <HAL_ADC_ConfigChannel+0x2cc>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008896:	fa93 f3a3 	rbit	r3, r3
 800889a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800889e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80088a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80088ae:	2320      	movs	r3, #32
 80088b0:	e004      	b.n	80088bc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80088b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088b6:	fab3 f383 	clz	r3, r3
 80088ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80088bc:	429a      	cmp	r2, r3
 80088be:	d106      	bne.n	80088ce <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2200      	movs	r2, #0
 80088c6:	2101      	movs	r1, #1
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fa31 	bl	8007d30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2102      	movs	r1, #2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff fa15 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 80088da:	4603      	mov	r3, r0
 80088dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <HAL_ADC_ConfigChannel+0x30a>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2102      	movs	r1, #2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fa0a 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 80088f0:	4603      	mov	r3, r0
 80088f2:	0e9b      	lsrs	r3, r3, #26
 80088f4:	f003 021f 	and.w	r2, r3, #31
 80088f8:	e01e      	b.n	8008938 <HAL_ADC_ConfigChannel+0x348>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2102      	movs	r1, #2
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff f9ff 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 8008906:	4603      	mov	r3, r0
 8008908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008910:	fa93 f3a3 	rbit	r3, r3
 8008914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800891c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8008928:	2320      	movs	r3, #32
 800892a:	e004      	b.n	8008936 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800892c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008930:	fab3 f383 	clz	r3, r3
 8008934:	b2db      	uxtb	r3, r3
 8008936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008940:	2b00      	cmp	r3, #0
 8008942:	d105      	bne.n	8008950 <HAL_ADC_ConfigChannel+0x360>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	0e9b      	lsrs	r3, r3, #26
 800894a:	f003 031f 	and.w	r3, r3, #31
 800894e:	e016      	b.n	800897e <HAL_ADC_ConfigChannel+0x38e>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008958:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800895c:	fa93 f3a3 	rbit	r3, r3
 8008960:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8008970:	2320      	movs	r3, #32
 8008972:	e004      	b.n	800897e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8008974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008978:	fab3 f383 	clz	r3, r3
 800897c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800897e:	429a      	cmp	r2, r3
 8008980:	d106      	bne.n	8008990 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2200      	movs	r2, #0
 8008988:	2102      	movs	r1, #2
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff f9d0 	bl	8007d30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2103      	movs	r1, #3
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f9b4 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 800899c:	4603      	mov	r3, r0
 800899e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <HAL_ADC_ConfigChannel+0x3cc>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2103      	movs	r1, #3
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff f9a9 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 80089b2:	4603      	mov	r3, r0
 80089b4:	0e9b      	lsrs	r3, r3, #26
 80089b6:	f003 021f 	and.w	r2, r3, #31
 80089ba:	e017      	b.n	80089ec <HAL_ADC_ConfigChannel+0x3fc>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2103      	movs	r1, #3
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff f99e 	bl	8007d04 <LL_ADC_GetOffsetChannel>
 80089c8:	4603      	mov	r3, r0
 80089ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ce:	fa93 f3a3 	rbit	r3, r3
 80089d2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80089d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089d6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80089d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80089de:	2320      	movs	r3, #32
 80089e0:	e003      	b.n	80089ea <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80089e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089e4:	fab3 f383 	clz	r3, r3
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d105      	bne.n	8008a04 <HAL_ADC_ConfigChannel+0x414>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	0e9b      	lsrs	r3, r3, #26
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	e011      	b.n	8008a28 <HAL_ADC_ConfigChannel+0x438>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a0c:	fa93 f3a3 	rbit	r3, r3
 8008a10:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8008a1c:	2320      	movs	r3, #32
 8008a1e:	e003      	b.n	8008a28 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8008a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a22:	fab3 f383 	clz	r3, r3
 8008a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d106      	bne.n	8008a3a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2200      	movs	r2, #0
 8008a32:	2103      	movs	r1, #3
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff f97b 	bl	8007d30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff faa2 	bl	8007f88 <LL_ADC_IsEnabled>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 8140 	bne.w	8008ccc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6818      	ldr	r0, [r3, #0]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f7ff fa01 	bl	8007e60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	4a8f      	ldr	r2, [pc, #572]	; (8008ca0 <HAL_ADC_ConfigChannel+0x6b0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	f040 8131 	bne.w	8008ccc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10b      	bne.n	8008a92 <HAL_ADC_ConfigChannel+0x4a2>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	0e9b      	lsrs	r3, r3, #26
 8008a80:	3301      	adds	r3, #1
 8008a82:	f003 031f 	and.w	r3, r3, #31
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	bf94      	ite	ls
 8008a8a:	2301      	movls	r3, #1
 8008a8c:	2300      	movhi	r3, #0
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	e019      	b.n	8008ac6 <HAL_ADC_ConfigChannel+0x4d6>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a9a:	fa93 f3a3 	rbit	r3, r3
 8008a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008aa2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8008aaa:	2320      	movs	r3, #32
 8008aac:	e003      	b.n	8008ab6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8008aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ab0:	fab3 f383 	clz	r3, r3
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f003 031f 	and.w	r3, r3, #31
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	bf94      	ite	ls
 8008ac0:	2301      	movls	r3, #1
 8008ac2:	2300      	movhi	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d079      	beq.n	8008bbe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d107      	bne.n	8008ae6 <HAL_ADC_ConfigChannel+0x4f6>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	0e9b      	lsrs	r3, r3, #26
 8008adc:	3301      	adds	r3, #1
 8008ade:	069b      	lsls	r3, r3, #26
 8008ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ae4:	e015      	b.n	8008b12 <HAL_ADC_ConfigChannel+0x522>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aee:	fa93 f3a3 	rbit	r3, r3
 8008af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8008afe:	2320      	movs	r3, #32
 8008b00:	e003      	b.n	8008b0a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8008b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b04:	fab3 f383 	clz	r3, r3
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	069b      	lsls	r3, r3, #26
 8008b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <HAL_ADC_ConfigChannel+0x542>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	0e9b      	lsrs	r3, r3, #26
 8008b24:	3301      	adds	r3, #1
 8008b26:	f003 031f 	and.w	r3, r3, #31
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b30:	e017      	b.n	8008b62 <HAL_ADC_ConfigChannel+0x572>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b3a:	fa93 f3a3 	rbit	r3, r3
 8008b3e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8008b4a:	2320      	movs	r3, #32
 8008b4c:	e003      	b.n	8008b56 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8008b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b50:	fab3 f383 	clz	r3, r3
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	3301      	adds	r3, #1
 8008b58:	f003 031f 	and.w	r3, r3, #31
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b62:	ea42 0103 	orr.w	r1, r2, r3
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10a      	bne.n	8008b88 <HAL_ADC_ConfigChannel+0x598>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	0e9b      	lsrs	r3, r3, #26
 8008b78:	3301      	adds	r3, #1
 8008b7a:	f003 021f 	and.w	r2, r3, #31
 8008b7e:	4613      	mov	r3, r2
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	4413      	add	r3, r2
 8008b84:	051b      	lsls	r3, r3, #20
 8008b86:	e018      	b.n	8008bba <HAL_ADC_ConfigChannel+0x5ca>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	fa93 f3a3 	rbit	r3, r3
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	e003      	b.n	8008bac <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8008ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba6:	fab3 f383 	clz	r3, r3
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	3301      	adds	r3, #1
 8008bae:	f003 021f 	and.w	r2, r3, #31
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bba:	430b      	orrs	r3, r1
 8008bbc:	e081      	b.n	8008cc2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d107      	bne.n	8008bda <HAL_ADC_ConfigChannel+0x5ea>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	0e9b      	lsrs	r3, r3, #26
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	069b      	lsls	r3, r3, #26
 8008bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bd8:	e015      	b.n	8008c06 <HAL_ADC_ConfigChannel+0x616>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	fa93 f3a3 	rbit	r3, r3
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	e003      	b.n	8008bfe <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	fab3 f383 	clz	r3, r3
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	069b      	lsls	r3, r3, #26
 8008c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <HAL_ADC_ConfigChannel+0x636>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	0e9b      	lsrs	r3, r3, #26
 8008c18:	3301      	adds	r3, #1
 8008c1a:	f003 031f 	and.w	r3, r3, #31
 8008c1e:	2101      	movs	r1, #1
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	e017      	b.n	8008c56 <HAL_ADC_ConfigChannel+0x666>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	fa93 f3a3 	rbit	r3, r3
 8008c32:	61fb      	str	r3, [r7, #28]
  return result;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8008c3e:	2320      	movs	r3, #32
 8008c40:	e003      	b.n	8008c4a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	fab3 f383 	clz	r3, r3
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f003 031f 	and.w	r3, r3, #31
 8008c50:	2101      	movs	r1, #1
 8008c52:	fa01 f303 	lsl.w	r3, r1, r3
 8008c56:	ea42 0103 	orr.w	r1, r2, r3
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10d      	bne.n	8008c82 <HAL_ADC_ConfigChannel+0x692>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	0e9b      	lsrs	r3, r3, #26
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	f003 021f 	and.w	r2, r3, #31
 8008c72:	4613      	mov	r3, r2
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	4413      	add	r3, r2
 8008c78:	3b1e      	subs	r3, #30
 8008c7a:	051b      	lsls	r3, r3, #20
 8008c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c80:	e01e      	b.n	8008cc0 <HAL_ADC_ConfigChannel+0x6d0>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	fa93 f3a3 	rbit	r3, r3
 8008c8e:	613b      	str	r3, [r7, #16]
  return result;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8008c9a:	2320      	movs	r3, #32
 8008c9c:	e006      	b.n	8008cac <HAL_ADC_ConfigChannel+0x6bc>
 8008c9e:	bf00      	nop
 8008ca0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	fab3 f383 	clz	r3, r3
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	3301      	adds	r3, #1
 8008cae:	f003 021f 	and.w	r2, r3, #31
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3b1e      	subs	r3, #30
 8008cba:	051b      	lsls	r3, r3, #20
 8008cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	6892      	ldr	r2, [r2, #8]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f7ff f89f 	bl	8007e0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	4b44      	ldr	r3, [pc, #272]	; (8008de4 <HAL_ADC_ConfigChannel+0x7f4>)
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d07a      	beq.n	8008dce <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008cd8:	4843      	ldr	r0, [pc, #268]	; (8008de8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008cda:	f7fe ffe1 	bl	8007ca0 <LL_ADC_GetCommonPathInternalCh>
 8008cde:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a41      	ldr	r2, [pc, #260]	; (8008dec <HAL_ADC_ConfigChannel+0x7fc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d12c      	bne.n	8008d46 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d126      	bne.n	8008d46 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a3c      	ldr	r2, [pc, #240]	; (8008df0 <HAL_ADC_ConfigChannel+0x800>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d004      	beq.n	8008d0c <HAL_ADC_ConfigChannel+0x71c>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a3b      	ldr	r2, [pc, #236]	; (8008df4 <HAL_ADC_ConfigChannel+0x804>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d15d      	bne.n	8008dc8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d14:	4619      	mov	r1, r3
 8008d16:	4834      	ldr	r0, [pc, #208]	; (8008de8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d18:	f7fe ffaf 	bl	8007c7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008d1c:	4b36      	ldr	r3, [pc, #216]	; (8008df8 <HAL_ADC_ConfigChannel+0x808>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	099b      	lsrs	r3, r3, #6
 8008d22:	4a36      	ldr	r2, [pc, #216]	; (8008dfc <HAL_ADC_ConfigChannel+0x80c>)
 8008d24:	fba2 2303 	umull	r2, r3, r2, r3
 8008d28:	099b      	lsrs	r3, r3, #6
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008d36:	e002      	b.n	8008d3e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f9      	bne.n	8008d38 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d44:	e040      	b.n	8008dc8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a2d      	ldr	r2, [pc, #180]	; (8008e00 <HAL_ADC_ConfigChannel+0x810>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d118      	bne.n	8008d82 <HAL_ADC_ConfigChannel+0x792>
 8008d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d112      	bne.n	8008d82 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a23      	ldr	r2, [pc, #140]	; (8008df0 <HAL_ADC_ConfigChannel+0x800>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d004      	beq.n	8008d70 <HAL_ADC_ConfigChannel+0x780>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a22      	ldr	r2, [pc, #136]	; (8008df4 <HAL_ADC_ConfigChannel+0x804>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d12d      	bne.n	8008dcc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d78:	4619      	mov	r1, r3
 8008d7a:	481b      	ldr	r0, [pc, #108]	; (8008de8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d7c:	f7fe ff7d 	bl	8007c7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d80:	e024      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <HAL_ADC_ConfigChannel+0x814>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d120      	bne.n	8008dce <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11a      	bne.n	8008dce <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a14      	ldr	r2, [pc, #80]	; (8008df0 <HAL_ADC_ConfigChannel+0x800>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d115      	bne.n	8008dce <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008daa:	4619      	mov	r1, r3
 8008dac:	480e      	ldr	r0, [pc, #56]	; (8008de8 <HAL_ADC_ConfigChannel+0x7f8>)
 8008dae:	f7fe ff64 	bl	8007c7a <LL_ADC_SetCommonPathInternalCh>
 8008db2:	e00c      	b.n	8008dce <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db8:	f043 0220 	orr.w	r2, r3, #32
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008dc6:	e002      	b.n	8008dce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008dc8:	bf00      	nop
 8008dca:	e000      	b.n	8008dce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008dcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008dd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	37d8      	adds	r7, #216	; 0xd8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	80080000 	.word	0x80080000
 8008de8:	50040300 	.word	0x50040300
 8008dec:	c7520000 	.word	0xc7520000
 8008df0:	50040000 	.word	0x50040000
 8008df4:	50040200 	.word	0x50040200
 8008df8:	20000310 	.word	0x20000310
 8008dfc:	053e2d63 	.word	0x053e2d63
 8008e00:	cb840000 	.word	0xcb840000
 8008e04:	80000001 	.word	0x80000001

08008e08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff f8b7 	bl	8007f88 <LL_ADC_IsEnabled>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d14d      	bne.n	8008ebc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	4b28      	ldr	r3, [pc, #160]	; (8008ec8 <ADC_Enable+0xc0>)
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e32:	f043 0210 	orr.w	r2, r3, #16
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3e:	f043 0201 	orr.w	r2, r3, #1
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e039      	b.n	8008ebe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff f886 	bl	8007f60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008e54:	f7fe fece 	bl	8007bf4 <HAL_GetTick>
 8008e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e5a:	e028      	b.n	8008eae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7ff f891 	bl	8007f88 <LL_ADC_IsEnabled>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff f875 	bl	8007f60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008e76:	f7fe febd 	bl	8007bf4 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d914      	bls.n	8008eae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d00d      	beq.n	8008eae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e96:	f043 0210 	orr.w	r2, r3, #16
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea2:	f043 0201 	orr.w	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e007      	b.n	8008ebe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d1cf      	bne.n	8008e5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	8000003f 	.word	0x8000003f

08008ecc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ede:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d14b      	bne.n	8008f7e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0308 	and.w	r3, r3, #8
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d021      	beq.n	8008f44 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fe ff41 	bl	8007d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d032      	beq.n	8008f76 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d12b      	bne.n	8008f76 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d11f      	bne.n	8008f76 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3a:	f043 0201 	orr.w	r2, r3, #1
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	659a      	str	r2, [r3, #88]	; 0x58
 8008f42:	e018      	b.n	8008f76 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d111      	bne.n	8008f76 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d105      	bne.n	8008f76 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6e:	f043 0201 	orr.w	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fb1c 	bl	80085b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008f7c:	e00e      	b.n	8008f9c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f82:	f003 0310 	and.w	r3, r3, #16
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff fb26 	bl	80085dc <HAL_ADC_ErrorCallback>
}
 8008f90:	e004      	b.n	8008f9c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fb08 	bl	80085c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fde:	f043 0204 	orr.w	r2, r3, #4
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff faf8 	bl	80085dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <LL_ADC_IsEnabled>:
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <LL_ADC_IsEnabled+0x18>
 8009008:	2301      	movs	r3, #1
 800900a:	e000      	b.n	800900e <LL_ADC_IsEnabled+0x1a>
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <LL_ADC_REG_IsConversionOngoing>:
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b04      	cmp	r3, #4
 800902c:	d101      	bne.n	8009032 <LL_ADC_REG_IsConversionOngoing+0x18>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009040:	b590      	push	{r4, r7, lr}
 8009042:	b0a1      	sub	sp, #132	; 0x84
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009056:	2b01      	cmp	r3, #1
 8009058:	d101      	bne.n	800905e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800905a:	2302      	movs	r3, #2
 800905c:	e093      	b.n	8009186 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8009066:	2300      	movs	r3, #0
 8009068:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800906a:	2300      	movs	r3, #0
 800906c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a47      	ldr	r2, [pc, #284]	; (8009190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d102      	bne.n	800907e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009078:	4b46      	ldr	r3, [pc, #280]	; (8009194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e001      	b.n	8009082 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10b      	bne.n	80090a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908c:	f043 0220 	orr.w	r2, r3, #32
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e072      	b.n	8009186 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff ffb9 	bl	800901a <LL_ADC_REG_IsConversionOngoing>
 80090a8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff ffb3 	bl	800901a <LL_ADC_REG_IsConversionOngoing>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d154      	bne.n	8009164 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80090ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d151      	bne.n	8009164 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80090c0:	4b35      	ldr	r3, [pc, #212]	; (8009198 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80090c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02c      	beq.n	8009126 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	6859      	ldr	r1, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090de:	035b      	lsls	r3, r3, #13
 80090e0:	430b      	orrs	r3, r1
 80090e2:	431a      	orrs	r2, r3
 80090e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090e8:	4829      	ldr	r0, [pc, #164]	; (8009190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80090ea:	f7ff ff83 	bl	8008ff4 <LL_ADC_IsEnabled>
 80090ee:	4604      	mov	r4, r0
 80090f0:	4828      	ldr	r0, [pc, #160]	; (8009194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80090f2:	f7ff ff7f 	bl	8008ff4 <LL_ADC_IsEnabled>
 80090f6:	4603      	mov	r3, r0
 80090f8:	431c      	orrs	r4, r3
 80090fa:	4828      	ldr	r0, [pc, #160]	; (800919c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80090fc:	f7ff ff7a 	bl	8008ff4 <LL_ADC_IsEnabled>
 8009100:	4603      	mov	r3, r0
 8009102:	4323      	orrs	r3, r4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d137      	bne.n	8009178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009110:	f023 030f 	bic.w	r3, r3, #15
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	6811      	ldr	r1, [r2, #0]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	6892      	ldr	r2, [r2, #8]
 800911c:	430a      	orrs	r2, r1
 800911e:	431a      	orrs	r2, r3
 8009120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009122:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009124:	e028      	b.n	8009178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800912e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009130:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009132:	4817      	ldr	r0, [pc, #92]	; (8009190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009134:	f7ff ff5e 	bl	8008ff4 <LL_ADC_IsEnabled>
 8009138:	4604      	mov	r4, r0
 800913a:	4816      	ldr	r0, [pc, #88]	; (8009194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800913c:	f7ff ff5a 	bl	8008ff4 <LL_ADC_IsEnabled>
 8009140:	4603      	mov	r3, r0
 8009142:	431c      	orrs	r4, r3
 8009144:	4815      	ldr	r0, [pc, #84]	; (800919c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009146:	f7ff ff55 	bl	8008ff4 <LL_ADC_IsEnabled>
 800914a:	4603      	mov	r3, r0
 800914c:	4323      	orrs	r3, r4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d112      	bne.n	8009178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800915a:	f023 030f 	bic.w	r3, r3, #15
 800915e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009160:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009162:	e009      	b.n	8009178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009168:	f043 0220 	orr.w	r2, r3, #32
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009176:	e000      	b.n	800917a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009178:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8009182:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009186:	4618      	mov	r0, r3
 8009188:	3784      	adds	r7, #132	; 0x84
 800918a:	46bd      	mov	sp, r7
 800918c:	bd90      	pop	{r4, r7, pc}
 800918e:	bf00      	nop
 8009190:	50040000 	.word	0x50040000
 8009194:	50040100 	.word	0x50040100
 8009198:	50040300 	.word	0x50040300
 800919c:	50040200 	.word	0x50040200

080091a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091b0:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <__NVIC_SetPriorityGrouping+0x44>)
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091bc:	4013      	ands	r3, r2
 80091be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80091cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091d2:	4a04      	ldr	r2, [pc, #16]	; (80091e4 <__NVIC_SetPriorityGrouping+0x44>)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	60d3      	str	r3, [r2, #12]
}
 80091d8:	bf00      	nop
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	e000ed00 	.word	0xe000ed00

080091e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091e8:	b480      	push	{r7}
 80091ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091ec:	4b04      	ldr	r3, [pc, #16]	; (8009200 <__NVIC_GetPriorityGrouping+0x18>)
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	0a1b      	lsrs	r3, r3, #8
 80091f2:	f003 0307 	and.w	r3, r3, #7
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	e000ed00 	.word	0xe000ed00

08009204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800920e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	db0b      	blt.n	800922e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	f003 021f 	and.w	r2, r3, #31
 800921c:	4907      	ldr	r1, [pc, #28]	; (800923c <__NVIC_EnableIRQ+0x38>)
 800921e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	2001      	movs	r0, #1
 8009226:	fa00 f202 	lsl.w	r2, r0, r2
 800922a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	e000e100 	.word	0xe000e100

08009240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800924c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009250:	2b00      	cmp	r3, #0
 8009252:	db0a      	blt.n	800926a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	b2da      	uxtb	r2, r3
 8009258:	490c      	ldr	r1, [pc, #48]	; (800928c <__NVIC_SetPriority+0x4c>)
 800925a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800925e:	0112      	lsls	r2, r2, #4
 8009260:	b2d2      	uxtb	r2, r2
 8009262:	440b      	add	r3, r1
 8009264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009268:	e00a      	b.n	8009280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	b2da      	uxtb	r2, r3
 800926e:	4908      	ldr	r1, [pc, #32]	; (8009290 <__NVIC_SetPriority+0x50>)
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	3b04      	subs	r3, #4
 8009278:	0112      	lsls	r2, r2, #4
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	440b      	add	r3, r1
 800927e:	761a      	strb	r2, [r3, #24]
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	e000e100 	.word	0xe000e100
 8009290:	e000ed00 	.word	0xe000ed00

08009294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009294:	b480      	push	{r7}
 8009296:	b089      	sub	sp, #36	; 0x24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	f1c3 0307 	rsb	r3, r3, #7
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	bf28      	it	cs
 80092b2:	2304      	movcs	r3, #4
 80092b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	3304      	adds	r3, #4
 80092ba:	2b06      	cmp	r3, #6
 80092bc:	d902      	bls.n	80092c4 <NVIC_EncodePriority+0x30>
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	3b03      	subs	r3, #3
 80092c2:	e000      	b.n	80092c6 <NVIC_EncodePriority+0x32>
 80092c4:	2300      	movs	r3, #0
 80092c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	43da      	mvns	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	401a      	ands	r2, r3
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092dc:	f04f 31ff 	mov.w	r1, #4294967295
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	fa01 f303 	lsl.w	r3, r1, r3
 80092e6:	43d9      	mvns	r1, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092ec:	4313      	orrs	r3, r2
         );
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3724      	adds	r7, #36	; 0x24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff ff4c 	bl	80091a0 <__NVIC_SetPriorityGrouping>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800931e:	2300      	movs	r3, #0
 8009320:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009322:	f7ff ff61 	bl	80091e8 <__NVIC_GetPriorityGrouping>
 8009326:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	6978      	ldr	r0, [r7, #20]
 800932e:	f7ff ffb1 	bl	8009294 <NVIC_EncodePriority>
 8009332:	4602      	mov	r2, r0
 8009334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff ff80 	bl	8009240 <__NVIC_SetPriority>
}
 8009340:	bf00      	nop
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff ff54 	bl	8009204 <__NVIC_EnableIRQ>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e014      	b.n	80093a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	791b      	ldrb	r3, [r3, #4]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d105      	bne.n	800938c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7fd fcbe 	bl	8006d08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	795b      	ldrb	r3, [r3, #5]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <HAL_DAC_Start_DMA+0x1e>
 80093c2:	2302      	movs	r3, #2
 80093c4:	e0ab      	b.n	800951e <HAL_DAC_Start_DMA+0x176>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2202      	movs	r2, #2
 80093d0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d12f      	bne.n	8009438 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	4a52      	ldr	r2, [pc, #328]	; (8009528 <HAL_DAC_Start_DMA+0x180>)
 80093de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	4a51      	ldr	r2, [pc, #324]	; (800952c <HAL_DAC_Start_DMA+0x184>)
 80093e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	4a50      	ldr	r2, [pc, #320]	; (8009530 <HAL_DAC_Start_DMA+0x188>)
 80093ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093fe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	2b08      	cmp	r3, #8
 8009404:	d013      	beq.n	800942e <HAL_DAC_Start_DMA+0x86>
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	2b08      	cmp	r3, #8
 800940a:	d845      	bhi.n	8009498 <HAL_DAC_Start_DMA+0xf0>
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_DAC_Start_DMA+0x72>
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	2b04      	cmp	r3, #4
 8009416:	d005      	beq.n	8009424 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009418:	e03e      	b.n	8009498 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	613b      	str	r3, [r7, #16]
        break;
 8009422:	e03c      	b.n	800949e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	330c      	adds	r3, #12
 800942a:	613b      	str	r3, [r7, #16]
        break;
 800942c:	e037      	b.n	800949e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3310      	adds	r3, #16
 8009434:	613b      	str	r3, [r7, #16]
        break;
 8009436:	e032      	b.n	800949e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4a3d      	ldr	r2, [pc, #244]	; (8009534 <HAL_DAC_Start_DMA+0x18c>)
 800943e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	4a3c      	ldr	r2, [pc, #240]	; (8009538 <HAL_DAC_Start_DMA+0x190>)
 8009446:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	4a3b      	ldr	r2, [pc, #236]	; (800953c <HAL_DAC_Start_DMA+0x194>)
 800944e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800945e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	2b08      	cmp	r3, #8
 8009464:	d013      	beq.n	800948e <HAL_DAC_Start_DMA+0xe6>
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2b08      	cmp	r3, #8
 800946a:	d817      	bhi.n	800949c <HAL_DAC_Start_DMA+0xf4>
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_DAC_Start_DMA+0xd2>
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	2b04      	cmp	r3, #4
 8009476:	d005      	beq.n	8009484 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009478:	e010      	b.n	800949c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3314      	adds	r3, #20
 8009480:	613b      	str	r3, [r7, #16]
        break;
 8009482:	e00c      	b.n	800949e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3318      	adds	r3, #24
 800948a:	613b      	str	r3, [r7, #16]
        break;
 800948c:	e007      	b.n	800949e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	331c      	adds	r3, #28
 8009494:	613b      	str	r3, [r7, #16]
        break;
 8009496:	e002      	b.n	800949e <HAL_DAC_Start_DMA+0xf6>
        break;
 8009498:	bf00      	nop
 800949a:	e000      	b.n	800949e <HAL_DAC_Start_DMA+0xf6>
        break;
 800949c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d111      	bne.n	80094c8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6898      	ldr	r0, [r3, #8]
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	f000 fb27 	bl	8009b10 <HAL_DMA_Start_IT>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75fb      	strb	r3, [r7, #23]
 80094c6:	e010      	b.n	80094ea <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80094d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68d8      	ldr	r0, [r3, #12]
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	f000 fb15 	bl	8009b10 <HAL_DMA_Start_IT>
 80094e6:	4603      	mov	r3, r0
 80094e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10c      	bne.n	8009510 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6819      	ldr	r1, [r3, #0]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f003 0310 	and.w	r3, r3, #16
 8009502:	2201      	movs	r2, #1
 8009504:	409a      	lsls	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	e005      	b.n	800951c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	f043 0204 	orr.w	r2, r3, #4
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	08009879 	.word	0x08009879
 800952c:	0800989b 	.word	0x0800989b
 8009530:	080098b7 	.word	0x080098b7
 8009534:	08009935 	.word	0x08009935
 8009538:	08009957 	.word	0x08009957
 800953c:	08009973 	.word	0x08009973

08009540 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009556:	d120      	bne.n	800959a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009566:	d118      	bne.n	800959a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2204      	movs	r2, #4
 800956c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f043 0201 	orr.w	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009582:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009592:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f84b 	bl	8009630 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a8:	d120      	bne.n	80095ec <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b8:	d118      	bne.n	80095ec <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2204      	movs	r2, #4
 80095be:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f043 0202 	orr.w	r2, r3, #2
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80095d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80095e4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f99a 	bl	8009920 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009650:	2300      	movs	r3, #0
 8009652:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	795b      	ldrb	r3, [r3, #5]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_DAC_ConfigChannel+0x1c>
 800965c:	2302      	movs	r3, #2
 800965e:	e107      	b.n	8009870 <HAL_DAC_ConfigChannel+0x22c>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2202      	movs	r2, #2
 800966a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b04      	cmp	r3, #4
 8009672:	d174      	bne.n	800975e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009674:	f7fe fabe 	bl	8007bf4 <HAL_GetTick>
 8009678:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d134      	bne.n	80096ea <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009680:	e011      	b.n	80096a6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009682:	f7fe fab7 	bl	8007bf4 <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	2b01      	cmp	r3, #1
 800968e:	d90a      	bls.n	80096a6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	f043 0208 	orr.w	r2, r3, #8
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2203      	movs	r2, #3
 80096a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e0e4      	b.n	8009870 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e6      	bne.n	8009682 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80096b4:	2001      	movs	r0, #1
 80096b6:	f7fe faa9 	bl	8007c0c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	6992      	ldr	r2, [r2, #24]
 80096c2:	641a      	str	r2, [r3, #64]	; 0x40
 80096c4:	e01e      	b.n	8009704 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80096c6:	f7fe fa95 	bl	8007bf4 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d90a      	bls.n	80096ea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f043 0208 	orr.w	r2, r3, #8
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2203      	movs	r2, #3
 80096e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e0c2      	b.n	8009870 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dbe8      	blt.n	80096c6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80096f4:	2001      	movs	r0, #1
 80096f6:	f7fe fa89 	bl	8007c0c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	6992      	ldr	r2, [r2, #24]
 8009702:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009714:	fa01 f303 	lsl.w	r3, r1, r3
 8009718:	43db      	mvns	r3, r3
 800971a:	ea02 0103 	and.w	r1, r2, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	69da      	ldr	r2, [r3, #28]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	409a      	lsls	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f003 0310 	and.w	r3, r3, #16
 800973e:	21ff      	movs	r1, #255	; 0xff
 8009740:	fa01 f303 	lsl.w	r3, r1, r3
 8009744:	43db      	mvns	r3, r3
 8009746:	ea02 0103 	and.w	r1, r2, r3
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	6a1a      	ldr	r2, [r3, #32]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	409a      	lsls	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d11d      	bne.n	80097a2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	221f      	movs	r2, #31
 8009776:	fa02 f303 	lsl.w	r3, r2, r3
 800977a:	43db      	mvns	r3, r3
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	4013      	ands	r3, r2
 8009780:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f003 0310 	and.w	r3, r3, #16
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	69ba      	ldr	r2, [r7, #24]
 8009796:	4313      	orrs	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2207      	movs	r2, #7
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	43db      	mvns	r3, r3
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	4013      	ands	r3, r2
 80097bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	431a      	orrs	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	fa02 f303 	lsl.w	r3, r2, r3
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	4313      	orrs	r3, r2
 80097e0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6819      	ldr	r1, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f003 0310 	and.w	r3, r3, #16
 80097f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80097fa:	fa02 f303 	lsl.w	r3, r2, r3
 80097fe:	43da      	mvns	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	400a      	ands	r2, r1
 8009806:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	f640 72fc 	movw	r2, #4092	; 0xffc
 800981a:	fa02 f303 	lsl.w	r3, r2, r3
 800981e:	43db      	mvns	r3, r3
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	4013      	ands	r3, r2
 8009824:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f003 0310 	and.w	r3, r3, #16
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	fa02 f303 	lsl.w	r3, r2, r3
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	4313      	orrs	r3, r2
 800983c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6819      	ldr	r1, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f003 0310 	and.w	r3, r3, #16
 8009852:	22c0      	movs	r2, #192	; 0xc0
 8009854:	fa02 f303 	lsl.w	r3, r2, r3
 8009858:	43da      	mvns	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	400a      	ands	r2, r1
 8009860:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2201      	movs	r2, #1
 8009866:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff feb4 	bl	80095f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2201      	movs	r2, #1
 8009890:	711a      	strb	r2, [r3, #4]
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7ff fead 	bl	8009608 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	f043 0204 	orr.w	r2, r3, #4
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff fea3 	bl	800961c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2201      	movs	r2, #1
 80098da:	711a      	strb	r2, [r3, #4]
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009940:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7ff ffce 	bl	80098e4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2201      	movs	r2, #1
 800994c:	711a      	strb	r2, [r3, #4]
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009962:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff ffc7 	bl	80098f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	f043 0204 	orr.w	r2, r3, #4
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff ffbd 	bl	800990c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2201      	movs	r2, #1
 8009996:	711a      	strb	r2, [r3, #4]
}
 8009998:	bf00      	nop
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e098      	b.n	8009ae4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	4b4d      	ldr	r3, [pc, #308]	; (8009af0 <HAL_DMA_Init+0x150>)
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d80f      	bhi.n	80099de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	4b4b      	ldr	r3, [pc, #300]	; (8009af4 <HAL_DMA_Init+0x154>)
 80099c6:	4413      	add	r3, r2
 80099c8:	4a4b      	ldr	r2, [pc, #300]	; (8009af8 <HAL_DMA_Init+0x158>)
 80099ca:	fba2 2303 	umull	r2, r3, r2, r3
 80099ce:	091b      	lsrs	r3, r3, #4
 80099d0:	009a      	lsls	r2, r3, #2
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a48      	ldr	r2, [pc, #288]	; (8009afc <HAL_DMA_Init+0x15c>)
 80099da:	641a      	str	r2, [r3, #64]	; 0x40
 80099dc:	e00e      	b.n	80099fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	4b46      	ldr	r3, [pc, #280]	; (8009b00 <HAL_DMA_Init+0x160>)
 80099e6:	4413      	add	r3, r2
 80099e8:	4a43      	ldr	r2, [pc, #268]	; (8009af8 <HAL_DMA_Init+0x158>)
 80099ea:	fba2 2303 	umull	r2, r3, r2, r3
 80099ee:	091b      	lsrs	r3, r3, #4
 80099f0:	009a      	lsls	r2, r3, #2
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a42      	ldr	r2, [pc, #264]	; (8009b04 <HAL_DMA_Init+0x164>)
 80099fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a56:	d039      	beq.n	8009acc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5c:	4a27      	ldr	r2, [pc, #156]	; (8009afc <HAL_DMA_Init+0x15c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d11a      	bne.n	8009a98 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a62:	4b29      	ldr	r3, [pc, #164]	; (8009b08 <HAL_DMA_Init+0x168>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6a:	f003 031c 	and.w	r3, r3, #28
 8009a6e:	210f      	movs	r1, #15
 8009a70:	fa01 f303 	lsl.w	r3, r1, r3
 8009a74:	43db      	mvns	r3, r3
 8009a76:	4924      	ldr	r1, [pc, #144]	; (8009b08 <HAL_DMA_Init+0x168>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009a7c:	4b22      	ldr	r3, [pc, #136]	; (8009b08 <HAL_DMA_Init+0x168>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6859      	ldr	r1, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a88:	f003 031c 	and.w	r3, r3, #28
 8009a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a90:	491d      	ldr	r1, [pc, #116]	; (8009b08 <HAL_DMA_Init+0x168>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	600b      	str	r3, [r1, #0]
 8009a96:	e019      	b.n	8009acc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a98:	4b1c      	ldr	r3, [pc, #112]	; (8009b0c <HAL_DMA_Init+0x16c>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa0:	f003 031c 	and.w	r3, r3, #28
 8009aa4:	210f      	movs	r1, #15
 8009aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aaa:	43db      	mvns	r3, r3
 8009aac:	4917      	ldr	r1, [pc, #92]	; (8009b0c <HAL_DMA_Init+0x16c>)
 8009aae:	4013      	ands	r3, r2
 8009ab0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009ab2:	4b16      	ldr	r3, [pc, #88]	; (8009b0c <HAL_DMA_Init+0x16c>)
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6859      	ldr	r1, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abe:	f003 031c 	and.w	r3, r3, #28
 8009ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac6:	4911      	ldr	r1, [pc, #68]	; (8009b0c <HAL_DMA_Init+0x16c>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	40020407 	.word	0x40020407
 8009af4:	bffdfff8 	.word	0xbffdfff8
 8009af8:	cccccccd 	.word	0xcccccccd
 8009afc:	40020000 	.word	0x40020000
 8009b00:	bffdfbf8 	.word	0xbffdfbf8
 8009b04:	40020400 	.word	0x40020400
 8009b08:	400200a8 	.word	0x400200a8
 8009b0c:	400204a8 	.word	0x400204a8

08009b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_DMA_Start_IT+0x20>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e04b      	b.n	8009bc8 <HAL_DMA_Start_IT+0xb8>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d13a      	bne.n	8009bba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0201 	bic.w	r2, r2, #1
 8009b60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 f95f 	bl	8009e2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d008      	beq.n	8009b88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 020e 	orr.w	r2, r2, #14
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	e00f      	b.n	8009ba8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0204 	bic.w	r2, r2, #4
 8009b96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f042 020a 	orr.w	r2, r2, #10
 8009ba6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	e005      	b.n	8009bc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d008      	beq.n	8009bfa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2204      	movs	r2, #4
 8009bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e022      	b.n	8009c40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 020e 	bic.w	r2, r2, #14
 8009c08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0201 	bic.w	r2, r2, #1
 8009c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1e:	f003 021c 	and.w	r2, r3, #28
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	2101      	movs	r1, #1
 8009c28:	fa01 f202 	lsl.w	r2, r1, r2
 8009c2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d005      	beq.n	8009c70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2204      	movs	r2, #4
 8009c68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	73fb      	strb	r3, [r7, #15]
 8009c6e:	e029      	b.n	8009cc4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 020e 	bic.w	r2, r2, #14
 8009c7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0201 	bic.w	r2, r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c94:	f003 021c 	and.w	r2, r3, #28
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8009ca2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	4798      	blx	r3
    }
  }
  return status;
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cea:	f003 031c 	and.w	r3, r3, #28
 8009cee:	2204      	movs	r2, #4
 8009cf0:	409a      	lsls	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d026      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x7a>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d021      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0320 	and.w	r3, r3, #32
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d107      	bne.n	8009d22 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 0204 	bic.w	r2, r2, #4
 8009d20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d26:	f003 021c 	and.w	r2, r3, #28
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	2104      	movs	r1, #4
 8009d30:	fa01 f202 	lsl.w	r2, r1, r2
 8009d34:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d071      	beq.n	8009e22 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009d46:	e06c      	b.n	8009e22 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4c:	f003 031c 	and.w	r3, r3, #28
 8009d50:	2202      	movs	r2, #2
 8009d52:	409a      	lsls	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4013      	ands	r3, r2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d02e      	beq.n	8009dba <HAL_DMA_IRQHandler+0xec>
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f003 0302 	and.w	r3, r3, #2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d029      	beq.n	8009dba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0320 	and.w	r3, r3, #32
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10b      	bne.n	8009d8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 020a 	bic.w	r2, r2, #10
 8009d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d90:	f003 021c 	and.w	r2, r3, #28
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	2102      	movs	r1, #2
 8009d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8009d9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d038      	beq.n	8009e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009db8:	e033      	b.n	8009e22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dbe:	f003 031c 	and.w	r3, r3, #28
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	409a      	lsls	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4013      	ands	r3, r2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d02a      	beq.n	8009e24 <HAL_DMA_IRQHandler+0x156>
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d025      	beq.n	8009e24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 020e 	bic.w	r2, r2, #14
 8009de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dec:	f003 021c 	and.w	r2, r3, #28
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df4:	2101      	movs	r1, #1
 8009df6:	fa01 f202 	lsl.w	r2, r1, r2
 8009dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
}
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3e:	f003 021c 	and.w	r2, r3, #28
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	2101      	movs	r1, #1
 8009e48:	fa01 f202 	lsl.w	r2, r1, r2
 8009e4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	2b10      	cmp	r3, #16
 8009e5c:	d108      	bne.n	8009e70 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e6e:	e007      	b.n	8009e80 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	60da      	str	r2, [r3, #12]
}
 8009e80:	bf00      	nop
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e9a:	e166      	b.n	800a16a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 8158 	beq.w	800a164 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d00b      	beq.n	8009ed4 <HAL_GPIO_Init+0x48>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d007      	beq.n	8009ed4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ec8:	2b11      	cmp	r3, #17
 8009eca:	d003      	beq.n	8009ed4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	2b12      	cmp	r3, #18
 8009ed2:	d130      	bne.n	8009f36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	2203      	movs	r2, #3
 8009ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee4:	43db      	mvns	r3, r3
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f12:	43db      	mvns	r3, r3
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4013      	ands	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	091b      	lsrs	r3, r3, #4
 8009f20:	f003 0201 	and.w	r2, r3, #1
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	fa02 f303 	lsl.w	r3, r2, r3
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	2203      	movs	r2, #3
 8009f42:	fa02 f303 	lsl.w	r3, r2, r3
 8009f46:	43db      	mvns	r3, r3
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d003      	beq.n	8009f76 <HAL_GPIO_Init+0xea>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	2b12      	cmp	r3, #18
 8009f74:	d123      	bne.n	8009fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	08da      	lsrs	r2, r3, #3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3208      	adds	r2, #8
 8009f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	220f      	movs	r2, #15
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	43db      	mvns	r3, r3
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	4013      	ands	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f003 0307 	and.w	r3, r3, #7
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	08da      	lsrs	r2, r3, #3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3208      	adds	r2, #8
 8009fb8:	6939      	ldr	r1, [r7, #16]
 8009fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	2203      	movs	r2, #3
 8009fca:	fa02 f303 	lsl.w	r3, r2, r3
 8009fce:	43db      	mvns	r3, r3
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f003 0203 	and.w	r2, r3, #3
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 80b2 	beq.w	800a164 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a000:	4b61      	ldr	r3, [pc, #388]	; (800a188 <HAL_GPIO_Init+0x2fc>)
 800a002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a004:	4a60      	ldr	r2, [pc, #384]	; (800a188 <HAL_GPIO_Init+0x2fc>)
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	6613      	str	r3, [r2, #96]	; 0x60
 800a00c:	4b5e      	ldr	r3, [pc, #376]	; (800a188 <HAL_GPIO_Init+0x2fc>)
 800a00e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	60bb      	str	r3, [r7, #8]
 800a016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a018:	4a5c      	ldr	r2, [pc, #368]	; (800a18c <HAL_GPIO_Init+0x300>)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	089b      	lsrs	r3, r3, #2
 800a01e:	3302      	adds	r3, #2
 800a020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f003 0303 	and.w	r3, r3, #3
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	220f      	movs	r2, #15
 800a030:	fa02 f303 	lsl.w	r3, r2, r3
 800a034:	43db      	mvns	r3, r3
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	4013      	ands	r3, r2
 800a03a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a042:	d02b      	beq.n	800a09c <HAL_GPIO_Init+0x210>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a52      	ldr	r2, [pc, #328]	; (800a190 <HAL_GPIO_Init+0x304>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d025      	beq.n	800a098 <HAL_GPIO_Init+0x20c>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a51      	ldr	r2, [pc, #324]	; (800a194 <HAL_GPIO_Init+0x308>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d01f      	beq.n	800a094 <HAL_GPIO_Init+0x208>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a50      	ldr	r2, [pc, #320]	; (800a198 <HAL_GPIO_Init+0x30c>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d019      	beq.n	800a090 <HAL_GPIO_Init+0x204>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a4f      	ldr	r2, [pc, #316]	; (800a19c <HAL_GPIO_Init+0x310>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d013      	beq.n	800a08c <HAL_GPIO_Init+0x200>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a4e      	ldr	r2, [pc, #312]	; (800a1a0 <HAL_GPIO_Init+0x314>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d00d      	beq.n	800a088 <HAL_GPIO_Init+0x1fc>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a4d      	ldr	r2, [pc, #308]	; (800a1a4 <HAL_GPIO_Init+0x318>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d007      	beq.n	800a084 <HAL_GPIO_Init+0x1f8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a4c      	ldr	r2, [pc, #304]	; (800a1a8 <HAL_GPIO_Init+0x31c>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d101      	bne.n	800a080 <HAL_GPIO_Init+0x1f4>
 800a07c:	2307      	movs	r3, #7
 800a07e:	e00e      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a080:	2308      	movs	r3, #8
 800a082:	e00c      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a084:	2306      	movs	r3, #6
 800a086:	e00a      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a088:	2305      	movs	r3, #5
 800a08a:	e008      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a08c:	2304      	movs	r3, #4
 800a08e:	e006      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a090:	2303      	movs	r3, #3
 800a092:	e004      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a094:	2302      	movs	r3, #2
 800a096:	e002      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <HAL_GPIO_Init+0x212>
 800a09c:	2300      	movs	r3, #0
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	f002 0203 	and.w	r2, r2, #3
 800a0a4:	0092      	lsls	r2, r2, #2
 800a0a6:	4093      	lsls	r3, r2
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a0ae:	4937      	ldr	r1, [pc, #220]	; (800a18c <HAL_GPIO_Init+0x300>)
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	089b      	lsrs	r3, r3, #2
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a0bc:	4b3b      	ldr	r3, [pc, #236]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	43db      	mvns	r3, r3
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a0e0:	4a32      	ldr	r2, [pc, #200]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a0e6:	4b31      	ldr	r3, [pc, #196]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	43db      	mvns	r3, r3
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a10a:	4a28      	ldr	r2, [pc, #160]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a110:	4b26      	ldr	r3, [pc, #152]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	43db      	mvns	r3, r3
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	4013      	ands	r3, r2
 800a11e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4313      	orrs	r3, r2
 800a132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a134:	4a1d      	ldr	r2, [pc, #116]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a13a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	43db      	mvns	r3, r3
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	4013      	ands	r3, r2
 800a148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a15e:	4a13      	ldr	r2, [pc, #76]	; (800a1ac <HAL_GPIO_Init+0x320>)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	3301      	adds	r3, #1
 800a168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	fa22 f303 	lsr.w	r3, r2, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f ae91 	bne.w	8009e9c <HAL_GPIO_Init+0x10>
  }
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	371c      	adds	r7, #28
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	40021000 	.word	0x40021000
 800a18c:	40010000 	.word	0x40010000
 800a190:	48000400 	.word	0x48000400
 800a194:	48000800 	.word	0x48000800
 800a198:	48000c00 	.word	0x48000c00
 800a19c:	48001000 	.word	0x48001000
 800a1a0:	48001400 	.word	0x48001400
 800a1a4:	48001800 	.word	0x48001800
 800a1a8:	48001c00 	.word	0x48001c00
 800a1ac:	40010400 	.word	0x40010400

0800a1b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691a      	ldr	r2, [r3, #16]
 800a1c0:	887b      	ldrh	r3, [r7, #2]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	73fb      	strb	r3, [r7, #15]
 800a1cc:	e001      	b.n	800a1d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	807b      	strh	r3, [r7, #2]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a1f0:	787b      	ldrb	r3, [r7, #1]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a1f6:	887a      	ldrh	r2, [r7, #2]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a1fc:	e002      	b.n	800a204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a1fe:	887a      	ldrh	r2, [r7, #2]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a21a:	4b08      	ldr	r3, [pc, #32]	; (800a23c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a21c:	695a      	ldr	r2, [r3, #20]
 800a21e:	88fb      	ldrh	r3, [r7, #6]
 800a220:	4013      	ands	r3, r2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d006      	beq.n	800a234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a226:	4a05      	ldr	r2, [pc, #20]	; (800a23c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 f806 	bl	800a240 <HAL_GPIO_EXTI_Callback>
  }
}
 800a234:	bf00      	nop
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	40010400 	.word	0x40010400

0800a240 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a24a:	bf00      	nop
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e081      	b.n	800a36c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7fc fdb7 	bl	8006df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2224      	movs	r2, #36	; 0x24
 800a286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0201 	bic.w	r2, r2, #1
 800a298:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d107      	bne.n	800a2d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2cc:	609a      	str	r2, [r3, #8]
 800a2ce:	e006      	b.n	800a2de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a2dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d104      	bne.n	800a2f0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a302:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a312:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691a      	ldr	r2, [r3, #16]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	ea42 0103 	orr.w	r1, r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	021a      	lsls	r2, r3, #8
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	69d9      	ldr	r1, [r3, #28]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1a      	ldr	r2, [r3, #32]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0201 	orr.w	r2, r2, #1
 800a34c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af02      	add	r7, sp, #8
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	607a      	str	r2, [r7, #4]
 800a37e:	461a      	mov	r2, r3
 800a380:	460b      	mov	r3, r1
 800a382:	817b      	strh	r3, [r7, #10]
 800a384:	4613      	mov	r3, r2
 800a386:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b20      	cmp	r3, #32
 800a392:	f040 80da 	bne.w	800a54a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d101      	bne.n	800a3a4 <HAL_I2C_Master_Transmit+0x30>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	e0d3      	b.n	800a54c <HAL_I2C_Master_Transmit+0x1d8>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a3ac:	f7fd fc22 	bl	8007bf4 <HAL_GetTick>
 800a3b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	2319      	movs	r3, #25
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f9e6 	bl	800a790 <I2C_WaitOnFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e0be      	b.n	800a54c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2221      	movs	r2, #33	; 0x21
 800a3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2210      	movs	r2, #16
 800a3da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	893a      	ldrh	r2, [r7, #8]
 800a3ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	2bff      	cmp	r3, #255	; 0xff
 800a3fe:	d90e      	bls.n	800a41e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	22ff      	movs	r2, #255	; 0xff
 800a404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	8979      	ldrh	r1, [r7, #10]
 800a40e:	4b51      	ldr	r3, [pc, #324]	; (800a554 <HAL_I2C_Master_Transmit+0x1e0>)
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 fb48 	bl	800aaac <I2C_TransferConfig>
 800a41c:	e06c      	b.n	800a4f8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	8979      	ldrh	r1, [r7, #10]
 800a430:	4b48      	ldr	r3, [pc, #288]	; (800a554 <HAL_I2C_Master_Transmit+0x1e0>)
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 fb37 	bl	800aaac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a43e:	e05b      	b.n	800a4f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	6a39      	ldr	r1, [r7, #32]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 f9e3 	bl	800a810 <I2C_WaitOnTXISFlagUntilTimeout>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e07b      	b.n	800a54c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	781a      	ldrb	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a46e:	b29b      	uxth	r3, r3
 800a470:	3b01      	subs	r3, #1
 800a472:	b29a      	uxth	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a47c:	3b01      	subs	r3, #1
 800a47e:	b29a      	uxth	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a488:	b29b      	uxth	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d034      	beq.n	800a4f8 <HAL_I2C_Master_Transmit+0x184>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a492:	2b00      	cmp	r3, #0
 800a494:	d130      	bne.n	800a4f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	2200      	movs	r2, #0
 800a49e:	2180      	movs	r1, #128	; 0x80
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f975 	bl	800a790 <I2C_WaitOnFlagUntilTimeout>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e04d      	b.n	800a54c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	2bff      	cmp	r3, #255	; 0xff
 800a4b8:	d90e      	bls.n	800a4d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	22ff      	movs	r2, #255	; 0xff
 800a4be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	8979      	ldrh	r1, [r7, #10]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 faeb 	bl	800aaac <I2C_TransferConfig>
 800a4d6:	e00f      	b.n	800a4f8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	8979      	ldrh	r1, [r7, #10]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 fada 	bl	800aaac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d19e      	bne.n	800a440 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	6a39      	ldr	r1, [r7, #32]
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 f9c2 	bl	800a890 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e01a      	b.n	800a54c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2220      	movs	r2, #32
 800a51c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6859      	ldr	r1, [r3, #4]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <HAL_I2C_Master_Transmit+0x1e4>)
 800a52a:	400b      	ands	r3, r1
 800a52c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2220      	movs	r2, #32
 800a532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	e000      	b.n	800a54c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a54a:	2302      	movs	r3, #2
  }
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	80002000 	.word	0x80002000
 800a558:	fe00e800 	.word	0xfe00e800

0800a55c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af02      	add	r7, sp, #8
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	607a      	str	r2, [r7, #4]
 800a566:	461a      	mov	r2, r3
 800a568:	460b      	mov	r3, r1
 800a56a:	817b      	strh	r3, [r7, #10]
 800a56c:	4613      	mov	r3, r2
 800a56e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b20      	cmp	r3, #32
 800a57a:	f040 80db 	bne.w	800a734 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_I2C_Master_Receive+0x30>
 800a588:	2302      	movs	r3, #2
 800a58a:	e0d4      	b.n	800a736 <HAL_I2C_Master_Receive+0x1da>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a594:	f7fd fb2e 	bl	8007bf4 <HAL_GetTick>
 800a598:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	2319      	movs	r3, #25
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f8f2 	bl	800a790 <I2C_WaitOnFlagUntilTimeout>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e0bf      	b.n	800a736 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2222      	movs	r2, #34	; 0x22
 800a5ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2210      	movs	r2, #16
 800a5c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	893a      	ldrh	r2, [r7, #8]
 800a5d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	2bff      	cmp	r3, #255	; 0xff
 800a5e6:	d90e      	bls.n	800a606 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	22ff      	movs	r2, #255	; 0xff
 800a5ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	8979      	ldrh	r1, [r7, #10]
 800a5f6:	4b52      	ldr	r3, [pc, #328]	; (800a740 <HAL_I2C_Master_Receive+0x1e4>)
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fa54 	bl	800aaac <I2C_TransferConfig>
 800a604:	e06d      	b.n	800a6e2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a614:	b2da      	uxtb	r2, r3
 800a616:	8979      	ldrh	r1, [r7, #10]
 800a618:	4b49      	ldr	r3, [pc, #292]	; (800a740 <HAL_I2C_Master_Receive+0x1e4>)
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 fa43 	bl	800aaac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a626:	e05c      	b.n	800a6e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	6a39      	ldr	r1, [r7, #32]
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f96b 	bl	800a908 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e07c      	b.n	800a736 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	b2d2      	uxtb	r2, r2
 800a648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a658:	3b01      	subs	r3, #1
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a664:	b29b      	uxth	r3, r3
 800a666:	3b01      	subs	r3, #1
 800a668:	b29a      	uxth	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a672:	b29b      	uxth	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	d034      	beq.n	800a6e2 <HAL_I2C_Master_Receive+0x186>
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d130      	bne.n	800a6e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	2200      	movs	r2, #0
 800a688:	2180      	movs	r1, #128	; 0x80
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f880 	bl	800a790 <I2C_WaitOnFlagUntilTimeout>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e04d      	b.n	800a736 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	2bff      	cmp	r3, #255	; 0xff
 800a6a2:	d90e      	bls.n	800a6c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	22ff      	movs	r2, #255	; 0xff
 800a6a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	8979      	ldrh	r1, [r7, #10]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f9f6 	bl	800aaac <I2C_TransferConfig>
 800a6c0:	e00f      	b.n	800a6e2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d0:	b2da      	uxtb	r2, r3
 800a6d2:	8979      	ldrh	r1, [r7, #10]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 f9e5 	bl	800aaac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d19d      	bne.n	800a628 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	6a39      	ldr	r1, [r7, #32]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 f8cd 	bl	800a890 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e01a      	b.n	800a736 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2220      	movs	r2, #32
 800a706:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6859      	ldr	r1, [r3, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <HAL_I2C_Master_Receive+0x1e8>)
 800a714:	400b      	ands	r3, r1
 800a716:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e000      	b.n	800a736 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a734:	2302      	movs	r3, #2
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	80002400 	.word	0x80002400
 800a744:	fe00e800 	.word	0xfe00e800

0800a748 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d103      	bne.n	800a766 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b01      	cmp	r3, #1
 800a772:	d007      	beq.n	800a784 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0201 	orr.w	r2, r2, #1
 800a782:	619a      	str	r2, [r3, #24]
  }
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	4613      	mov	r3, r2
 800a79e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7a0:	e022      	b.n	800a7e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a8:	d01e      	beq.n	800a7e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7aa:	f7fd fa23 	bl	8007bf4 <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d302      	bcc.n	800a7c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d113      	bne.n	800a7e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c4:	f043 0220 	orr.w	r2, r3, #32
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e00f      	b.n	800a808 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	bf0c      	ite	eq
 800a7f8:	2301      	moveq	r3, #1
 800a7fa:	2300      	movne	r3, #0
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	461a      	mov	r2, r3
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	429a      	cmp	r2, r3
 800a804:	d0cd      	beq.n	800a7a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a81c:	e02c      	b.n	800a878 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	68b9      	ldr	r1, [r7, #8]
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 f8dc 	bl	800a9e0 <I2C_IsAcknowledgeFailed>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e02a      	b.n	800a888 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a838:	d01e      	beq.n	800a878 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a83a:	f7fd f9db 	bl	8007bf4 <HAL_GetTick>
 800a83e:	4602      	mov	r2, r0
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	429a      	cmp	r2, r3
 800a848:	d302      	bcc.n	800a850 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d113      	bne.n	800a878 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a854:	f043 0220 	orr.w	r2, r3, #32
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2220      	movs	r2, #32
 800a860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e007      	b.n	800a888 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	f003 0302 	and.w	r3, r3, #2
 800a882:	2b02      	cmp	r3, #2
 800a884:	d1cb      	bne.n	800a81e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a89c:	e028      	b.n	800a8f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 f89c 	bl	800a9e0 <I2C_IsAcknowledgeFailed>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e026      	b.n	800a900 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8b2:	f7fd f99f 	bl	8007bf4 <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d302      	bcc.n	800a8c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d113      	bne.n	800a8f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8cc:	f043 0220 	orr.w	r2, r3, #32
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e007      	b.n	800a900 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	d1cf      	bne.n	800a89e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a914:	e055      	b.n	800a9c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f860 	bl	800a9e0 <I2C_IsAcknowledgeFailed>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e053      	b.n	800a9d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f003 0320 	and.w	r3, r3, #32
 800a934:	2b20      	cmp	r3, #32
 800a936:	d129      	bne.n	800a98c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f003 0304 	and.w	r3, r3, #4
 800a942:	2b04      	cmp	r3, #4
 800a944:	d105      	bne.n	800a952 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	e03f      	b.n	800a9d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2220      	movs	r2, #32
 800a958:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6859      	ldr	r1, [r3, #4]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a966:	400b      	ands	r3, r1
 800a968:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2220      	movs	r2, #32
 800a974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e022      	b.n	800a9d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a98c:	f7fd f932 	bl	8007bf4 <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d302      	bcc.n	800a9a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10f      	bne.n	800a9c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a6:	f043 0220 	orr.w	r2, r3, #32
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e007      	b.n	800a9d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d1a2      	bne.n	800a916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	fe00e800 	.word	0xfe00e800

0800a9e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	f003 0310 	and.w	r3, r3, #16
 800a9f6:	2b10      	cmp	r3, #16
 800a9f8:	d151      	bne.n	800aa9e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9fa:	e022      	b.n	800aa42 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa02:	d01e      	beq.n	800aa42 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa04:	f7fd f8f6 	bl	8007bf4 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d302      	bcc.n	800aa1a <I2C_IsAcknowledgeFailed+0x3a>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d113      	bne.n	800aa42 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1e:	f043 0220 	orr.w	r2, r3, #32
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e02e      	b.n	800aaa0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	f003 0320 	and.w	r3, r3, #32
 800aa4c:	2b20      	cmp	r3, #32
 800aa4e:	d1d5      	bne.n	800a9fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2210      	movs	r2, #16
 800aa56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff fe71 	bl	800a748 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6859      	ldr	r1, [r3, #4]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	4b0d      	ldr	r3, [pc, #52]	; (800aaa8 <I2C_IsAcknowledgeFailed+0xc8>)
 800aa72:	400b      	ands	r3, r1
 800aa74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7a:	f043 0204 	orr.w	r2, r3, #4
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2220      	movs	r2, #32
 800aa86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	fe00e800 	.word	0xfe00e800

0800aaac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	607b      	str	r3, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	817b      	strh	r3, [r7, #10]
 800aaba:	4613      	mov	r3, r2
 800aabc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	0d5b      	lsrs	r3, r3, #21
 800aac8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aacc:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <I2C_TransferConfig+0x58>)
 800aace:	430b      	orrs	r3, r1
 800aad0:	43db      	mvns	r3, r3
 800aad2:	ea02 0103 	and.w	r1, r2, r3
 800aad6:	897b      	ldrh	r3, [r7, #10]
 800aad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aadc:	7a7b      	ldrb	r3, [r7, #9]
 800aade:	041b      	lsls	r3, r3, #16
 800aae0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	431a      	orrs	r2, r3
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	431a      	orrs	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	03ff63ff 	.word	0x03ff63ff

0800ab08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b20      	cmp	r3, #32
 800ab1c:	d138      	bne.n	800ab90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e032      	b.n	800ab92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2224      	movs	r2, #36	; 0x24
 800ab38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0201 	bic.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6819      	ldr	r1, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e000      	b.n	800ab92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab90:	2302      	movs	r3, #2
  }
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b085      	sub	sp, #20
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b20      	cmp	r3, #32
 800abb2:	d139      	bne.n	800ac28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d101      	bne.n	800abc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800abbe:	2302      	movs	r3, #2
 800abc0:	e033      	b.n	800ac2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2224      	movs	r2, #36	; 0x24
 800abce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0201 	bic.w	r2, r2, #1
 800abe0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800abf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	021b      	lsls	r3, r3, #8
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0201 	orr.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2220      	movs	r2, #32
 800ac18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	e000      	b.n	800ac2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ac28:	2302      	movs	r3, #2
  }
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ac36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac38:	b08f      	sub	sp, #60	; 0x3c
 800ac3a:	af0a      	add	r7, sp, #40	; 0x28
 800ac3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e116      	b.n	800ae76 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f00e fc30 	bl	80194c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2203      	movs	r2, #3
 800ac6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f006 f889 	bl	8010d9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	603b      	str	r3, [r7, #0]
 800ac92:	687e      	ldr	r6, [r7, #4]
 800ac94:	466d      	mov	r5, sp
 800ac96:	f106 0410 	add.w	r4, r6, #16
 800ac9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aca2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aca6:	e885 0003 	stmia.w	r5, {r0, r1}
 800acaa:	1d33      	adds	r3, r6, #4
 800acac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800acae:	6838      	ldr	r0, [r7, #0]
 800acb0:	f005 ff9b 	bl	8010bea <USB_CoreInit>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d005      	beq.n	800acc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2202      	movs	r2, #2
 800acbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e0d7      	b.n	800ae76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2100      	movs	r1, #0
 800accc:	4618      	mov	r0, r3
 800acce:	f006 f877 	bl	8010dc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
 800acd6:	e04a      	b.n	800ad6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800acd8:	7bfa      	ldrb	r2, [r7, #15]
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	333d      	adds	r3, #61	; 0x3d
 800ace8:	2201      	movs	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800acec:	7bfa      	ldrb	r2, [r7, #15]
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	333c      	adds	r3, #60	; 0x3c
 800acfc:	7bfa      	ldrb	r2, [r7, #15]
 800acfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ad00:	7bfa      	ldrb	r2, [r7, #15]
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	b298      	uxth	r0, r3
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	1a9b      	subs	r3, r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	440b      	add	r3, r1
 800ad12:	3342      	adds	r3, #66	; 0x42
 800ad14:	4602      	mov	r2, r0
 800ad16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad18:	7bfa      	ldrb	r2, [r7, #15]
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	1a9b      	subs	r3, r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	333f      	adds	r3, #63	; 0x3f
 800ad28:	2200      	movs	r2, #0
 800ad2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad2c:	7bfa      	ldrb	r2, [r7, #15]
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	4613      	mov	r3, r2
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	1a9b      	subs	r3, r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	440b      	add	r3, r1
 800ad3a:	3344      	adds	r3, #68	; 0x44
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad40:	7bfa      	ldrb	r2, [r7, #15]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	1a9b      	subs	r3, r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	3348      	adds	r3, #72	; 0x48
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad54:	7bfa      	ldrb	r2, [r7, #15]
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	1a9b      	subs	r3, r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	440b      	add	r3, r1
 800ad62:	3350      	adds	r3, #80	; 0x50
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	73fb      	strb	r3, [r7, #15]
 800ad6e:	7bfa      	ldrb	r2, [r7, #15]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d3af      	bcc.n	800acd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73fb      	strb	r3, [r7, #15]
 800ad7c:	e044      	b.n	800ae08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad7e:	7bfa      	ldrb	r2, [r7, #15]
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	4613      	mov	r3, r2
 800ad84:	00db      	lsls	r3, r3, #3
 800ad86:	1a9b      	subs	r3, r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	440b      	add	r3, r1
 800ad8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad94:	7bfa      	ldrb	r2, [r7, #15]
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ada6:	7bfa      	ldrb	r2, [r7, #15]
 800ada8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800adaa:	7bfa      	ldrb	r2, [r7, #15]
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	4613      	mov	r3, r2
 800adb0:	00db      	lsls	r3, r3, #3
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	440b      	add	r3, r1
 800adb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800adbc:	2200      	movs	r2, #0
 800adbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800adc0:	7bfa      	ldrb	r2, [r7, #15]
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800add6:	7bfa      	ldrb	r2, [r7, #15]
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	4613      	mov	r3, r2
 800addc:	00db      	lsls	r3, r3, #3
 800adde:	1a9b      	subs	r3, r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	440b      	add	r3, r1
 800ade4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800adec:	7bfa      	ldrb	r2, [r7, #15]
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	4613      	mov	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	1a9b      	subs	r3, r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	440b      	add	r3, r1
 800adfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800adfe:	2200      	movs	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	3301      	adds	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]
 800ae08:	7bfa      	ldrb	r2, [r7, #15]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d3b5      	bcc.n	800ad7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	603b      	str	r3, [r7, #0]
 800ae18:	687e      	ldr	r6, [r7, #4]
 800ae1a:	466d      	mov	r5, sp
 800ae1c:	f106 0410 	add.w	r4, r6, #16
 800ae20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae28:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae2c:	e885 0003 	stmia.w	r5, {r0, r1}
 800ae30:	1d33      	adds	r3, r6, #4
 800ae32:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae34:	6838      	ldr	r0, [r7, #0]
 800ae36:	f005 ffed 	bl	8010e14 <USB_DevInit>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e014      	b.n	800ae76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d102      	bne.n	800ae6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 ff8f 	bl	800bd88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f006 ff6f 	bl	8011d52 <USB_DevDisconnect>

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d101      	bne.n	800ae9a <HAL_PCD_Start+0x1c>
 800ae96:	2302      	movs	r3, #2
 800ae98:	e01c      	b.n	800aed4 <HAL_PCD_Start+0x56>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d105      	bne.n	800aeb6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f005 ff5e 	bl	8010d7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f006 ff23 	bl	8011d10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800aedc:	b590      	push	{r4, r7, lr}
 800aede:	b08d      	sub	sp, #52	; 0x34
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f006 ffe1 	bl	8011eba <USB_GetMode>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f040 838f 	bne.w	800b61e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f006 ff45 	bl	8011d94 <USB_ReadInterrupts>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 8385 	beq.w	800b61c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4618      	mov	r0, r3
 800af18:	f006 ff3c 	bl	8011d94 <USB_ReadInterrupts>
 800af1c:	4603      	mov	r3, r0
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b02      	cmp	r3, #2
 800af24:	d107      	bne.n	800af36 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	695a      	ldr	r2, [r3, #20]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f002 0202 	and.w	r2, r2, #2
 800af34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f006 ff2a 	bl	8011d94 <USB_ReadInterrupts>
 800af40:	4603      	mov	r3, r0
 800af42:	f003 0310 	and.w	r3, r3, #16
 800af46:	2b10      	cmp	r3, #16
 800af48:	d161      	bne.n	800b00e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f022 0210 	bic.w	r2, r2, #16
 800af58:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	f003 020f 	and.w	r2, r3, #15
 800af66:	4613      	mov	r3, r2
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	1a9b      	subs	r3, r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	4413      	add	r3, r2
 800af76:	3304      	adds	r3, #4
 800af78:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	0c5b      	lsrs	r3, r3, #17
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	2b02      	cmp	r3, #2
 800af84:	d124      	bne.n	800afd0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800af8c:	4013      	ands	r3, r2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d035      	beq.n	800affe <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	091b      	lsrs	r3, r3, #4
 800af9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	461a      	mov	r2, r3
 800afa4:	6a38      	ldr	r0, [r7, #32]
 800afa6:	f006 fd90 	bl	8011aca <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	091b      	lsrs	r3, r3, #4
 800afb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afb6:	441a      	add	r2, r3
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	699a      	ldr	r2, [r3, #24]
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	091b      	lsrs	r3, r3, #4
 800afc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afc8:	441a      	add	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	619a      	str	r2, [r3, #24]
 800afce:	e016      	b.n	800affe <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	0c5b      	lsrs	r3, r3, #17
 800afd4:	f003 030f 	and.w	r3, r3, #15
 800afd8:	2b06      	cmp	r3, #6
 800afda:	d110      	bne.n	800affe <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afe2:	2208      	movs	r2, #8
 800afe4:	4619      	mov	r1, r3
 800afe6:	6a38      	ldr	r0, [r7, #32]
 800afe8:	f006 fd6f 	bl	8011aca <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	699a      	ldr	r2, [r3, #24]
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	091b      	lsrs	r3, r3, #4
 800aff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aff8:	441a      	add	r2, r3
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	699a      	ldr	r2, [r3, #24]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f042 0210 	orr.w	r2, r2, #16
 800b00c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4618      	mov	r0, r3
 800b014:	f006 febe 	bl	8011d94 <USB_ReadInterrupts>
 800b018:	4603      	mov	r3, r0
 800b01a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b01e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b022:	d16e      	bne.n	800b102 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f006 fec4 	bl	8011dba <USB_ReadDevAllOutEpInterrupt>
 800b032:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b034:	e062      	b.n	800b0fc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d057      	beq.n	800b0f0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b046:	b2d2      	uxtb	r2, r2
 800b048:	4611      	mov	r1, r2
 800b04a:	4618      	mov	r0, r3
 800b04c:	f006 fee9 	bl	8011e22 <USB_ReadDevOutEPInterrupt>
 800b050:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00c      	beq.n	800b076 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b068:	461a      	mov	r2, r3
 800b06a:	2301      	movs	r3, #1
 800b06c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b06e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fdaf 	bl	800bbd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f003 0308 	and.w	r3, r3, #8
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00c      	beq.n	800b09a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	015a      	lsls	r2, r3, #5
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	4413      	add	r3, r2
 800b088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b08c:	461a      	mov	r2, r3
 800b08e:	2308      	movs	r3, #8
 800b090:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fdeb 	bl	800bc70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f003 0310 	and.w	r3, r3, #16
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d008      	beq.n	800b0b6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	015a      	lsls	r2, r3, #5
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	2310      	movs	r3, #16
 800b0b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f003 0320 	and.w	r3, r3, #32
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d008      	beq.n	800b0d2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	2320      	movs	r3, #32
 800b0d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	085b      	lsrs	r3, r3, #1
 800b0fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d199      	bne.n	800b036 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f006 fe44 	bl	8011d94 <USB_ReadInterrupts>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b112:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b116:	f040 8087 	bne.w	800b228 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f006 fe65 	bl	8011dee <USB_ReadDevAllInEpInterrupt>
 800b124:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b12a:	e07a      	b.n	800b222 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d06f      	beq.n	800b216 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13c:	b2d2      	uxtb	r2, r2
 800b13e:	4611      	mov	r1, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f006 fe8c 	bl	8011e5e <USB_ReadDevInEPInterrupt>
 800b146:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d020      	beq.n	800b194 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	2201      	movs	r2, #1
 800b15a:	fa02 f303 	lsl.w	r3, r2, r3
 800b15e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	43db      	mvns	r3, r3
 800b16c:	69f9      	ldr	r1, [r7, #28]
 800b16e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b172:	4013      	ands	r3, r2
 800b174:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b182:	461a      	mov	r2, r3
 800b184:	2301      	movs	r3, #1
 800b186:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f00e fa59 	bl	8019646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f003 0308 	and.w	r3, r3, #8
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d008      	beq.n	800b1b0 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	2308      	movs	r3, #8
 800b1ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f003 0310 	and.w	r3, r3, #16
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d008      	beq.n	800b1cc <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2310      	movs	r3, #16
 800b1ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d008      	beq.n	800b1e8 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	015a      	lsls	r2, r3, #5
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	4413      	add	r3, r2
 800b1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	2340      	movs	r3, #64	; 0x40
 800b1e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d008      	beq.n	800b204 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fe:	461a      	mov	r2, r3
 800b200:	2302      	movs	r3, #2
 800b202:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b20e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fc56 	bl	800bac2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	3301      	adds	r3, #1
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	085b      	lsrs	r3, r3, #1
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	2b00      	cmp	r3, #0
 800b226:	d181      	bne.n	800b12c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f006 fdb1 	bl	8011d94 <USB_ReadInterrupts>
 800b232:	4603      	mov	r3, r0
 800b234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b23c:	d122      	bne.n	800b284 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	69fa      	ldr	r2, [r7, #28]
 800b248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b24c:	f023 0301 	bic.w	r3, r3, #1
 800b250:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d108      	bne.n	800b26e <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b264:	2100      	movs	r1, #0
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f00e fd46 	bl	8019cf8 <HAL_PCDEx_LPM_Callback>
 800b26c:	e002      	b.n	800b274 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f00e fa56 	bl	8019720 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	695a      	ldr	r2, [r3, #20]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4618      	mov	r0, r3
 800b28a:	f006 fd83 	bl	8011d94 <USB_ReadInterrupts>
 800b28e:	4603      	mov	r3, r0
 800b290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b298:	d112      	bne.n	800b2c0 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d102      	bne.n	800b2b0 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f00e fa12 	bl	80196d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	695a      	ldr	r2, [r3, #20]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b2be:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f006 fd65 	bl	8011d94 <USB_ReadInterrupts>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2d4:	d121      	bne.n	800b31a <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	695a      	ldr	r2, [r3, #20]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b2e4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d111      	bne.n	800b314 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2fe:	089b      	lsrs	r3, r3, #2
 800b300:	f003 020f 	and.w	r2, r3, #15
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b30a:	2101      	movs	r1, #1
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f00e fcf3 	bl	8019cf8 <HAL_PCDEx_LPM_Callback>
 800b312:	e002      	b.n	800b31a <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f00e f9dd 	bl	80196d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4618      	mov	r0, r3
 800b320:	f006 fd38 	bl	8011d94 <USB_ReadInterrupts>
 800b324:	4603      	mov	r3, r0
 800b326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b32a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b32e:	f040 80c5 	bne.w	800b4bc <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	69fa      	ldr	r2, [r7, #28]
 800b33c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b340:	f023 0301 	bic.w	r3, r3, #1
 800b344:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2110      	movs	r1, #16
 800b34c:	4618      	mov	r0, r3
 800b34e:	f005 fead 	bl	80110ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b352:	2300      	movs	r3, #0
 800b354:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b356:	e056      	b.n	800b406 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	015a      	lsls	r2, r3, #5
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	4413      	add	r3, r2
 800b360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b364:	461a      	mov	r2, r3
 800b366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b36a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	4413      	add	r3, r2
 800b374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b37c:	0151      	lsls	r1, r2, #5
 800b37e:	69fa      	ldr	r2, [r7, #28]
 800b380:	440a      	add	r2, r1
 800b382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b38a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d0:	0151      	lsls	r1, r2, #5
 800b3d2:	69fa      	ldr	r2, [r7, #28]
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3f0:	0151      	lsls	r1, r2, #5
 800b3f2:	69fa      	ldr	r2, [r7, #28]
 800b3f4:	440a      	add	r2, r1
 800b3f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	3301      	adds	r3, #1
 800b404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d3a3      	bcc.n	800b358 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b416:	69db      	ldr	r3, [r3, #28]
 800b418:	69fa      	ldr	r2, [r7, #28]
 800b41a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b41e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b422:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d016      	beq.n	800b45a <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b43c:	f043 030b 	orr.w	r3, r3, #11
 800b440:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44c:	69fa      	ldr	r2, [r7, #28]
 800b44e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b452:	f043 030b 	orr.w	r3, r3, #11
 800b456:	6453      	str	r3, [r2, #68]	; 0x44
 800b458:	e015      	b.n	800b486 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	69fa      	ldr	r2, [r7, #28]
 800b464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b46c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b470:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b480:	f043 030b 	orr.w	r3, r3, #11
 800b484:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	69fa      	ldr	r2, [r7, #28]
 800b490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b494:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b498:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f006 fd38 	bl	8011f1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	695a      	ldr	r2, [r3, #20]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b4ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f006 fc67 	bl	8011d94 <USB_ReadInterrupts>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d0:	d124      	bne.n	800b51c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f006 fcfd 	bl	8011ed6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f005 fe44 	bl	801116e <USB_GetDevSpeed>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681c      	ldr	r4, [r3, #0]
 800b4f2:	f001 fa85 	bl	800ca00 <HAL_RCC_GetHCLKFreq>
 800b4f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	461a      	mov	r2, r3
 800b500:	4620      	mov	r0, r4
 800b502:	f005 fb9f 	bl	8010c44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f00e f8c5 	bl	8019696 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	695a      	ldr	r2, [r3, #20]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b51a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	f006 fc37 	bl	8011d94 <USB_ReadInterrupts>
 800b526:	4603      	mov	r3, r0
 800b528:	f003 0308 	and.w	r3, r3, #8
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d10a      	bne.n	800b546 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f00e f8a2 	bl	801967a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	695a      	ldr	r2, [r3, #20]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f002 0208 	and.w	r2, r2, #8
 800b544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f006 fc22 	bl	8011d94 <USB_ReadInterrupts>
 800b550:	4603      	mov	r3, r0
 800b552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b55a:	d10f      	bne.n	800b57c <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	b2db      	uxtb	r3, r3
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f00e f914 	bl	8019794 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	695a      	ldr	r2, [r3, #20]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b57a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4618      	mov	r0, r3
 800b582:	f006 fc07 	bl	8011d94 <USB_ReadInterrupts>
 800b586:	4603      	mov	r3, r0
 800b588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b58c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b590:	d10f      	bne.n	800b5b2 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f00e f8e7 	bl	8019770 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	695a      	ldr	r2, [r3, #20]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b5b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f006 fbec 	bl	8011d94 <USB_ReadInterrupts>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c6:	d10a      	bne.n	800b5de <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f00e f8f5 	bl	80197b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	695a      	ldr	r2, [r3, #20]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b5dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f006 fbd6 	bl	8011d94 <USB_ReadInterrupts>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f003 0304 	and.w	r3, r3, #4
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d115      	bne.n	800b61e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f00e f8e5 	bl	80197d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6859      	ldr	r1, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	69ba      	ldr	r2, [r7, #24]
 800b616:	430a      	orrs	r2, r1
 800b618:	605a      	str	r2, [r3, #4]
 800b61a:	e000      	b.n	800b61e <HAL_PCD_IRQHandler+0x742>
      return;
 800b61c:	bf00      	nop
    }
  }
}
 800b61e:	3734      	adds	r7, #52	; 0x34
 800b620:	46bd      	mov	sp, r7
 800b622:	bd90      	pop	{r4, r7, pc}

0800b624 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <HAL_PCD_SetAddress+0x1a>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e013      	b.n	800b666 <HAL_PCD_SetAddress+0x42>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	78fa      	ldrb	r2, [r7, #3]
 800b654:	4611      	mov	r1, r2
 800b656:	4618      	mov	r0, r3
 800b658:	f006 fb34 	bl	8011cc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	4608      	mov	r0, r1
 800b678:	4611      	mov	r1, r2
 800b67a:	461a      	mov	r2, r3
 800b67c:	4603      	mov	r3, r0
 800b67e:	70fb      	strb	r3, [r7, #3]
 800b680:	460b      	mov	r3, r1
 800b682:	803b      	strh	r3, [r7, #0]
 800b684:	4613      	mov	r3, r2
 800b686:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b68c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b690:	2b00      	cmp	r3, #0
 800b692:	da0f      	bge.n	800b6b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	f003 020f 	and.w	r2, r3, #15
 800b69a:	4613      	mov	r3, r2
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	1a9b      	subs	r3, r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	3338      	adds	r3, #56	; 0x38
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	705a      	strb	r2, [r3, #1]
 800b6b2:	e00f      	b.n	800b6d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	f003 030f 	and.w	r3, r3, #15
 800b6da:	b2da      	uxtb	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b6e0:	883a      	ldrh	r2, [r7, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	78ba      	ldrb	r2, [r7, #2]
 800b6ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b6fe:	78bb      	ldrb	r3, [r7, #2]
 800b700:	2b02      	cmp	r3, #2
 800b702:	d102      	bne.n	800b70a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <HAL_PCD_EP_Open+0xaa>
 800b714:	2302      	movs	r3, #2
 800b716:	e00e      	b.n	800b736 <HAL_PCD_EP_Open+0xc8>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68f9      	ldr	r1, [r7, #12]
 800b726:	4618      	mov	r0, r3
 800b728:	f005 fd40 	bl	80111ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b734:	7afb      	ldrb	r3, [r7, #11]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b74a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	da0f      	bge.n	800b772 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	f003 020f 	and.w	r2, r3, #15
 800b758:	4613      	mov	r3, r2
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	1a9b      	subs	r3, r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	3338      	adds	r3, #56	; 0x38
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	4413      	add	r3, r2
 800b766:	3304      	adds	r3, #4
 800b768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2201      	movs	r2, #1
 800b76e:	705a      	strb	r2, [r3, #1]
 800b770:	e00f      	b.n	800b792 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	f003 020f 	and.w	r2, r3, #15
 800b778:	4613      	mov	r3, r2
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	4413      	add	r3, r2
 800b788:	3304      	adds	r3, #4
 800b78a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b792:	78fb      	ldrb	r3, [r7, #3]
 800b794:	f003 030f 	and.w	r3, r3, #15
 800b798:	b2da      	uxtb	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d101      	bne.n	800b7ac <HAL_PCD_EP_Close+0x6e>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e00e      	b.n	800b7ca <HAL_PCD_EP_Close+0x8c>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68f9      	ldr	r1, [r7, #12]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f005 fd7e 	bl	80112bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b086      	sub	sp, #24
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	60f8      	str	r0, [r7, #12]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
 800b7e4:	f003 020f 	and.w	r2, r3, #15
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	1a9b      	subs	r3, r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2200      	movs	r2, #0
 800b80c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2200      	movs	r2, #0
 800b812:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b814:	7afb      	ldrb	r3, [r7, #11]
 800b816:	f003 030f 	and.w	r3, r3, #15
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b820:	7afb      	ldrb	r3, [r7, #11]
 800b822:	f003 030f 	and.w	r3, r3, #15
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6979      	ldr	r1, [r7, #20]
 800b830:	4618      	mov	r0, r3
 800b832:	f005 fffb 	bl	801182c <USB_EP0StartXfer>
 800b836:	e005      	b.n	800b844 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6979      	ldr	r1, [r7, #20]
 800b83e:	4618      	mov	r0, r3
 800b840:	f005 fe18 	bl	8011474 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3718      	adds	r7, #24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	460b      	mov	r3, r1
 800b858:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	f003 020f 	and.w	r2, r3, #15
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	4613      	mov	r3, r2
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	1a9b      	subs	r3, r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	440b      	add	r3, r1
 800b86c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b870:	681b      	ldr	r3, [r3, #0]
}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b086      	sub	sp, #24
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
 800b88a:	460b      	mov	r3, r1
 800b88c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b88e:	7afb      	ldrb	r3, [r7, #11]
 800b890:	f003 020f 	and.w	r2, r3, #15
 800b894:	4613      	mov	r3, r2
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	1a9b      	subs	r3, r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	3338      	adds	r3, #56	; 0x38
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8be:	7afb      	ldrb	r3, [r7, #11]
 800b8c0:	f003 030f 	and.w	r3, r3, #15
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8ca:	7afb      	ldrb	r3, [r7, #11]
 800b8cc:	f003 030f 	and.w	r3, r3, #15
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d106      	bne.n	800b8e2 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6979      	ldr	r1, [r7, #20]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f005 ffa6 	bl	801182c <USB_EP0StartXfer>
 800b8e0:	e005      	b.n	800b8ee <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6979      	ldr	r1, [r7, #20]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f005 fdc3 	bl	8011474 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b904:	78fb      	ldrb	r3, [r7, #3]
 800b906:	f003 020f 	and.w	r2, r3, #15
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d901      	bls.n	800b916 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e04e      	b.n	800b9b4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	da0f      	bge.n	800b93e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b91e:	78fb      	ldrb	r3, [r7, #3]
 800b920:	f003 020f 	and.w	r2, r3, #15
 800b924:	4613      	mov	r3, r2
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	1a9b      	subs	r3, r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	3338      	adds	r3, #56	; 0x38
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	4413      	add	r3, r2
 800b932:	3304      	adds	r3, #4
 800b934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2201      	movs	r2, #1
 800b93a:	705a      	strb	r2, [r3, #1]
 800b93c:	e00d      	b.n	800b95a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b93e:	78fa      	ldrb	r2, [r7, #3]
 800b940:	4613      	mov	r3, r2
 800b942:	00db      	lsls	r3, r3, #3
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	4413      	add	r3, r2
 800b950:	3304      	adds	r3, #4
 800b952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2201      	movs	r2, #1
 800b95e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	f003 030f 	and.w	r3, r3, #15
 800b966:	b2da      	uxtb	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b972:	2b01      	cmp	r3, #1
 800b974:	d101      	bne.n	800b97a <HAL_PCD_EP_SetStall+0x82>
 800b976:	2302      	movs	r3, #2
 800b978:	e01c      	b.n	800b9b4 <HAL_PCD_EP_SetStall+0xbc>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68f9      	ldr	r1, [r7, #12]
 800b988:	4618      	mov	r0, r3
 800b98a:	f006 f8c7 	bl	8011b1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b98e:	78fb      	ldrb	r3, [r7, #3]
 800b990:	f003 030f 	and.w	r3, r3, #15
 800b994:	2b00      	cmp	r3, #0
 800b996:	d108      	bne.n	800b9aa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	f006 fab9 	bl	8011f1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	f003 020f 	and.w	r2, r3, #15
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d901      	bls.n	800b9da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e042      	b.n	800ba60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b9da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	da0f      	bge.n	800ba02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9e2:	78fb      	ldrb	r3, [r7, #3]
 800b9e4:	f003 020f 	and.w	r2, r3, #15
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	3338      	adds	r3, #56	; 0x38
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	705a      	strb	r2, [r3, #1]
 800ba00:	e00f      	b.n	800ba22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba02:	78fb      	ldrb	r3, [r7, #3]
 800ba04:	f003 020f 	and.w	r2, r3, #15
 800ba08:	4613      	mov	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	1a9b      	subs	r3, r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	4413      	add	r3, r2
 800ba18:	3304      	adds	r3, #4
 800ba1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	f003 030f 	and.w	r3, r3, #15
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d101      	bne.n	800ba42 <HAL_PCD_EP_ClrStall+0x86>
 800ba3e:	2302      	movs	r3, #2
 800ba40:	e00e      	b.n	800ba60 <HAL_PCD_EP_ClrStall+0xa4>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68f9      	ldr	r1, [r7, #12]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f006 f8d1 	bl	8011bf8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d101      	bne.n	800ba82 <HAL_PCD_EP_Flush+0x1a>
 800ba7e:	2302      	movs	r3, #2
 800ba80:	e01b      	b.n	800baba <HAL_PCD_EP_Flush+0x52>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800ba8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	da09      	bge.n	800baa6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	78fb      	ldrb	r3, [r7, #3]
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f005 fb04 	bl	80110ac <USB_FlushTxFifo>
 800baa4:	e004      	b.n	800bab0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4618      	mov	r0, r3
 800baac:	f005 fb24 	bl	80110f8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b088      	sub	sp, #32
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4613      	mov	r3, r2
 800bada:	00db      	lsls	r3, r3, #3
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	3338      	adds	r3, #56	; 0x38
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	4413      	add	r3, r2
 800bae6:	3304      	adds	r3, #4
 800bae8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	699a      	ldr	r2, [r3, #24]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d901      	bls.n	800bafa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e067      	b.n	800bbca <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	695a      	ldr	r2, [r3, #20]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	69fa      	ldr	r2, [r7, #28]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d902      	bls.n	800bb16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	3303      	adds	r3, #3
 800bb1a:	089b      	lsrs	r3, r3, #2
 800bb1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb1e:	e026      	b.n	800bb6e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	695a      	ldr	r2, [r3, #20]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	69fa      	ldr	r2, [r7, #28]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d902      	bls.n	800bb3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	3303      	adds	r3, #3
 800bb40:	089b      	lsrs	r3, r3, #2
 800bb42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	68d9      	ldr	r1, [r3, #12]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	6978      	ldr	r0, [r7, #20]
 800bb52:	f005 ff89 	bl	8011a68 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	441a      	add	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	699a      	ldr	r2, [r3, #24]
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	441a      	add	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d809      	bhi.n	800bb98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	699a      	ldr	r2, [r3, #24]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d203      	bcs.n	800bb98 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1c3      	bne.n	800bb20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	695a      	ldr	r2, [r3, #20]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d811      	bhi.n	800bbc8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	f003 030f 	and.w	r3, r3, #15
 800bbaa:	2201      	movs	r2, #1
 800bbac:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	43db      	mvns	r3, r3
 800bbbe:	6939      	ldr	r1, [r7, #16]
 800bbc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3720      	adds	r7, #32
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	333c      	adds	r3, #60	; 0x3c
 800bbec:	3304      	adds	r3, #4
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4a19      	ldr	r2, [pc, #100]	; (800bc6c <PCD_EP_OutXfrComplete_int+0x98>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d124      	bne.n	800bc54 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00a      	beq.n	800bc2a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc20:	461a      	mov	r2, r3
 800bc22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc26:	6093      	str	r3, [r2, #8]
 800bc28:	e01a      	b.n	800bc60 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f003 0320 	and.w	r3, r3, #32
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d008      	beq.n	800bc46 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	015a      	lsls	r2, r3, #5
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc40:	461a      	mov	r2, r3
 800bc42:	2320      	movs	r3, #32
 800bc44:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f00d fcdf 	bl	8019610 <HAL_PCD_DataOutStageCallback>
 800bc52:	e005      	b.n	800bc60 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f00d fcd8 	bl	8019610 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	4f54310a 	.word	0x4f54310a

0800bc70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	333c      	adds	r3, #60	; 0x3c
 800bc88:	3304      	adds	r3, #4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	015a      	lsls	r2, r3, #5
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	4413      	add	r3, r2
 800bc96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4a0c      	ldr	r2, [pc, #48]	; (800bcd4 <PCD_EP_OutSetupPacket_int+0x64>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d90e      	bls.n	800bcc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d009      	beq.n	800bcc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f00d fc91 	bl	80195ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	4f54300a 	.word	0x4f54300a

0800bcd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
 800bce4:	4613      	mov	r3, r2
 800bce6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d107      	bne.n	800bd06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bcf6:	883b      	ldrh	r3, [r7, #0]
 800bcf8:	0419      	lsls	r1, r3, #16
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	430a      	orrs	r2, r1
 800bd02:	629a      	str	r2, [r3, #40]	; 0x28
 800bd04:	e028      	b.n	800bd58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0c:	0c1b      	lsrs	r3, r3, #16
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]
 800bd18:	e00d      	b.n	800bd36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	3340      	adds	r3, #64	; 0x40
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	0c1b      	lsrs	r3, r3, #16
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	3301      	adds	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]
 800bd36:	7bfa      	ldrb	r2, [r7, #15]
 800bd38:	78fb      	ldrb	r3, [r7, #3]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d3ec      	bcc.n	800bd1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bd40:	883b      	ldrh	r3, [r7, #0]
 800bd42:	0418      	lsls	r0, r3, #16
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6819      	ldr	r1, [r3, #0]
 800bd48:	78fb      	ldrb	r3, [r7, #3]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	4302      	orrs	r2, r0
 800bd50:	3340      	adds	r3, #64	; 0x40
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	887a      	ldrh	r2, [r7, #2]
 800bd78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdba:	f043 0303 	orr.w	r3, r3, #3
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdd4:	4b05      	ldr	r3, [pc, #20]	; (800bdec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a04      	ldr	r2, [pc, #16]	; (800bdec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdde:	6013      	str	r3, [r2, #0]
}
 800bde0:	bf00      	nop
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	40007000 	.word	0x40007000

0800bdf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bdf4:	4b04      	ldr	r3, [pc, #16]	; (800be08 <HAL_PWREx_GetVoltageRange+0x18>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40007000 	.word	0x40007000

0800be0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be1a:	d130      	bne.n	800be7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800be1c:	4b23      	ldr	r3, [pc, #140]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be28:	d038      	beq.n	800be9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800be2a:	4b20      	ldr	r3, [pc, #128]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be32:	4a1e      	ldr	r2, [pc, #120]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800be3a:	4b1d      	ldr	r3, [pc, #116]	; (800beb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2232      	movs	r2, #50	; 0x32
 800be40:	fb02 f303 	mul.w	r3, r2, r3
 800be44:	4a1b      	ldr	r2, [pc, #108]	; (800beb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800be46:	fba2 2303 	umull	r2, r3, r2, r3
 800be4a:	0c9b      	lsrs	r3, r3, #18
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be50:	e002      	b.n	800be58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3b01      	subs	r3, #1
 800be56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be58:	4b14      	ldr	r3, [pc, #80]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be5a:	695b      	ldr	r3, [r3, #20]
 800be5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be64:	d102      	bne.n	800be6c <HAL_PWREx_ControlVoltageScaling+0x60>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1f2      	bne.n	800be52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800be6c:	4b0f      	ldr	r3, [pc, #60]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be78:	d110      	bne.n	800be9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e00f      	b.n	800be9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800be7e:	4b0b      	ldr	r3, [pc, #44]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be8a:	d007      	beq.n	800be9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800be8c:	4b07      	ldr	r3, [pc, #28]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be94:	4a05      	ldr	r2, [pc, #20]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	40007000 	.word	0x40007000
 800beb0:	20000310 	.word	0x20000310
 800beb4:	431bde83 	.word	0x431bde83

0800beb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800beb8:	b480      	push	{r7}
 800beba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bebc:	4b05      	ldr	r3, [pc, #20]	; (800bed4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	4a04      	ldr	r2, [pc, #16]	; (800bed4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bec6:	6053      	str	r3, [r2, #4]
}
 800bec8:	bf00      	nop
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	40007000 	.word	0x40007000

0800bed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d102      	bne.n	800beec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f000 bc16 	b.w	800c718 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800beec:	4ba0      	ldr	r3, [pc, #640]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f003 030c 	and.w	r3, r3, #12
 800bef4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bef6:	4b9e      	ldr	r3, [pc, #632]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f003 0303 	and.w	r3, r3, #3
 800befe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0310 	and.w	r3, r3, #16
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 80e4 	beq.w	800c0d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d007      	beq.n	800bf24 <HAL_RCC_OscConfig+0x4c>
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	2b0c      	cmp	r3, #12
 800bf18:	f040 808b 	bne.w	800c032 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	f040 8087 	bne.w	800c032 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf24:	4b92      	ldr	r3, [pc, #584]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d005      	beq.n	800bf3c <HAL_RCC_OscConfig+0x64>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e3ed      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a1a      	ldr	r2, [r3, #32]
 800bf40:	4b8b      	ldr	r3, [pc, #556]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 0308 	and.w	r3, r3, #8
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d004      	beq.n	800bf56 <HAL_RCC_OscConfig+0x7e>
 800bf4c:	4b88      	ldr	r3, [pc, #544]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf54:	e005      	b.n	800bf62 <HAL_RCC_OscConfig+0x8a>
 800bf56:	4b86      	ldr	r3, [pc, #536]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf5c:	091b      	lsrs	r3, r3, #4
 800bf5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d223      	bcs.n	800bfae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 fdb2 	bl	800cad4 <RCC_SetFlashLatencyFromMSIRange>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e3ce      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf7a:	4b7d      	ldr	r3, [pc, #500]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a7c      	ldr	r2, [pc, #496]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf80:	f043 0308 	orr.w	r3, r3, #8
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	4b7a      	ldr	r3, [pc, #488]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	4977      	ldr	r1, [pc, #476]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf98:	4b75      	ldr	r3, [pc, #468]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	69db      	ldr	r3, [r3, #28]
 800bfa4:	021b      	lsls	r3, r3, #8
 800bfa6:	4972      	ldr	r1, [pc, #456]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	604b      	str	r3, [r1, #4]
 800bfac:	e025      	b.n	800bffa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bfae:	4b70      	ldr	r3, [pc, #448]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a6f      	ldr	r2, [pc, #444]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bfb4:	f043 0308 	orr.w	r3, r3, #8
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	4b6d      	ldr	r3, [pc, #436]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	496a      	ldr	r1, [pc, #424]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfcc:	4b68      	ldr	r3, [pc, #416]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	021b      	lsls	r3, r3, #8
 800bfda:	4965      	ldr	r1, [pc, #404]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d109      	bne.n	800bffa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 fd72 	bl	800cad4 <RCC_SetFlashLatencyFromMSIRange>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e38e      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bffa:	f000 fc75 	bl	800c8e8 <HAL_RCC_GetSysClockFreq>
 800bffe:	4602      	mov	r2, r0
 800c000:	4b5b      	ldr	r3, [pc, #364]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	091b      	lsrs	r3, r3, #4
 800c006:	f003 030f 	and.w	r3, r3, #15
 800c00a:	495a      	ldr	r1, [pc, #360]	; (800c174 <HAL_RCC_OscConfig+0x29c>)
 800c00c:	5ccb      	ldrb	r3, [r1, r3]
 800c00e:	f003 031f 	and.w	r3, r3, #31
 800c012:	fa22 f303 	lsr.w	r3, r2, r3
 800c016:	4a58      	ldr	r2, [pc, #352]	; (800c178 <HAL_RCC_OscConfig+0x2a0>)
 800c018:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c01a:	4b58      	ldr	r3, [pc, #352]	; (800c17c <HAL_RCC_OscConfig+0x2a4>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fb f9c4 	bl	80073ac <HAL_InitTick>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d052      	beq.n	800c0d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
 800c030:	e372      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d032      	beq.n	800c0a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c03a:	4b4d      	ldr	r3, [pc, #308]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a4c      	ldr	r2, [pc, #304]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c040:	f043 0301 	orr.w	r3, r3, #1
 800c044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c046:	f7fb fdd5 	bl	8007bf4 <HAL_GetTick>
 800c04a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c04c:	e008      	b.n	800c060 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c04e:	f7fb fdd1 	bl	8007bf4 <HAL_GetTick>
 800c052:	4602      	mov	r2, r0
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d901      	bls.n	800c060 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e35b      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c060:	4b43      	ldr	r3, [pc, #268]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0302 	and.w	r3, r3, #2
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d0f0      	beq.n	800c04e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c06c:	4b40      	ldr	r3, [pc, #256]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a3f      	ldr	r2, [pc, #252]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c072:	f043 0308 	orr.w	r3, r3, #8
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	4b3d      	ldr	r3, [pc, #244]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	493a      	ldr	r1, [pc, #232]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c086:	4313      	orrs	r3, r2
 800c088:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c08a:	4b39      	ldr	r3, [pc, #228]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	021b      	lsls	r3, r3, #8
 800c098:	4935      	ldr	r1, [pc, #212]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c09a:	4313      	orrs	r3, r2
 800c09c:	604b      	str	r3, [r1, #4]
 800c09e:	e01a      	b.n	800c0d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c0a0:	4b33      	ldr	r3, [pc, #204]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a32      	ldr	r2, [pc, #200]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c0a6:	f023 0301 	bic.w	r3, r3, #1
 800c0aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c0ac:	f7fb fda2 	bl	8007bf4 <HAL_GetTick>
 800c0b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c0b2:	e008      	b.n	800c0c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0b4:	f7fb fd9e 	bl	8007bf4 <HAL_GetTick>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d901      	bls.n	800c0c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e328      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c0c6:	4b2a      	ldr	r3, [pc, #168]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 0302 	and.w	r3, r3, #2
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1f0      	bne.n	800c0b4 <HAL_RCC_OscConfig+0x1dc>
 800c0d2:	e000      	b.n	800c0d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c0d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d073      	beq.n	800c1ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	2b08      	cmp	r3, #8
 800c0e6:	d005      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x21c>
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	2b0c      	cmp	r3, #12
 800c0ec:	d10e      	bne.n	800c10c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d10b      	bne.n	800c10c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0f4:	4b1e      	ldr	r3, [pc, #120]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d063      	beq.n	800c1c8 <HAL_RCC_OscConfig+0x2f0>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d15f      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	e305      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c114:	d106      	bne.n	800c124 <HAL_RCC_OscConfig+0x24c>
 800c116:	4b16      	ldr	r3, [pc, #88]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a15      	ldr	r2, [pc, #84]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c11c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c120:	6013      	str	r3, [r2, #0]
 800c122:	e01d      	b.n	800c160 <HAL_RCC_OscConfig+0x288>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c12c:	d10c      	bne.n	800c148 <HAL_RCC_OscConfig+0x270>
 800c12e:	4b10      	ldr	r3, [pc, #64]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a0f      	ldr	r2, [pc, #60]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a0c      	ldr	r2, [pc, #48]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	e00b      	b.n	800c160 <HAL_RCC_OscConfig+0x288>
 800c148:	4b09      	ldr	r3, [pc, #36]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a08      	ldr	r2, [pc, #32]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c14e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	4b06      	ldr	r3, [pc, #24]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a05      	ldr	r2, [pc, #20]	; (800c170 <HAL_RCC_OscConfig+0x298>)
 800c15a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c15e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d01b      	beq.n	800c1a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c168:	f7fb fd44 	bl	8007bf4 <HAL_GetTick>
 800c16c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c16e:	e010      	b.n	800c192 <HAL_RCC_OscConfig+0x2ba>
 800c170:	40021000 	.word	0x40021000
 800c174:	08023e5c 	.word	0x08023e5c
 800c178:	20000310 	.word	0x20000310
 800c17c:	20000314 	.word	0x20000314
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c180:	f7fb fd38 	bl	8007bf4 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b64      	cmp	r3, #100	; 0x64
 800c18c:	d901      	bls.n	800c192 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e2c2      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c192:	4baf      	ldr	r3, [pc, #700]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d0f0      	beq.n	800c180 <HAL_RCC_OscConfig+0x2a8>
 800c19e:	e014      	b.n	800c1ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1a0:	f7fb fd28 	bl	8007bf4 <HAL_GetTick>
 800c1a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1a6:	e008      	b.n	800c1ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1a8:	f7fb fd24 	bl	8007bf4 <HAL_GetTick>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	2b64      	cmp	r3, #100	; 0x64
 800c1b4:	d901      	bls.n	800c1ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	e2ae      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1ba:	4ba5      	ldr	r3, [pc, #660]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1f0      	bne.n	800c1a8 <HAL_RCC_OscConfig+0x2d0>
 800c1c6:	e000      	b.n	800c1ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0302 	and.w	r3, r3, #2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d060      	beq.n	800c298 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	2b04      	cmp	r3, #4
 800c1da:	d005      	beq.n	800c1e8 <HAL_RCC_OscConfig+0x310>
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	2b0c      	cmp	r3, #12
 800c1e0:	d119      	bne.n	800c216 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d116      	bne.n	800c216 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c1e8:	4b99      	ldr	r3, [pc, #612]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d005      	beq.n	800c200 <HAL_RCC_OscConfig+0x328>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e28b      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c200:	4b93      	ldr	r3, [pc, #588]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	061b      	lsls	r3, r3, #24
 800c20e:	4990      	ldr	r1, [pc, #576]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c210:	4313      	orrs	r3, r2
 800c212:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c214:	e040      	b.n	800c298 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d023      	beq.n	800c266 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c21e:	4b8c      	ldr	r3, [pc, #560]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a8b      	ldr	r2, [pc, #556]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c22a:	f7fb fce3 	bl	8007bf4 <HAL_GetTick>
 800c22e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c230:	e008      	b.n	800c244 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c232:	f7fb fcdf 	bl	8007bf4 <HAL_GetTick>
 800c236:	4602      	mov	r2, r0
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d901      	bls.n	800c244 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e269      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c244:	4b82      	ldr	r3, [pc, #520]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0f0      	beq.n	800c232 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c250:	4b7f      	ldr	r3, [pc, #508]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	061b      	lsls	r3, r3, #24
 800c25e:	497c      	ldr	r1, [pc, #496]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c260:	4313      	orrs	r3, r2
 800c262:	604b      	str	r3, [r1, #4]
 800c264:	e018      	b.n	800c298 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c266:	4b7a      	ldr	r3, [pc, #488]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a79      	ldr	r2, [pc, #484]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c26c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c272:	f7fb fcbf 	bl	8007bf4 <HAL_GetTick>
 800c276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c278:	e008      	b.n	800c28c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c27a:	f7fb fcbb 	bl	8007bf4 <HAL_GetTick>
 800c27e:	4602      	mov	r2, r0
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	2b02      	cmp	r3, #2
 800c286:	d901      	bls.n	800c28c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c288:	2303      	movs	r3, #3
 800c28a:	e245      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c28c:	4b70      	ldr	r3, [pc, #448]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1f0      	bne.n	800c27a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 0308 	and.w	r3, r3, #8
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d03c      	beq.n	800c31e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d01c      	beq.n	800c2e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c2ac:	4b68      	ldr	r3, [pc, #416]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c2ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2b2:	4a67      	ldr	r2, [pc, #412]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c2b4:	f043 0301 	orr.w	r3, r3, #1
 800c2b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2bc:	f7fb fc9a 	bl	8007bf4 <HAL_GetTick>
 800c2c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2c2:	e008      	b.n	800c2d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2c4:	f7fb fc96 	bl	8007bf4 <HAL_GetTick>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d901      	bls.n	800c2d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e220      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2d6:	4b5e      	ldr	r3, [pc, #376]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c2d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d0ef      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x3ec>
 800c2e4:	e01b      	b.n	800c31e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c2e6:	4b5a      	ldr	r3, [pc, #360]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c2e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2ec:	4a58      	ldr	r2, [pc, #352]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c2ee:	f023 0301 	bic.w	r3, r3, #1
 800c2f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2f6:	f7fb fc7d 	bl	8007bf4 <HAL_GetTick>
 800c2fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c2fc:	e008      	b.n	800c310 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2fe:	f7fb fc79 	bl	8007bf4 <HAL_GetTick>
 800c302:	4602      	mov	r2, r0
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d901      	bls.n	800c310 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e203      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c310:	4b4f      	ldr	r3, [pc, #316]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1ef      	bne.n	800c2fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0304 	and.w	r3, r3, #4
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 80a6 	beq.w	800c478 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c32c:	2300      	movs	r3, #0
 800c32e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c330:	4b47      	ldr	r3, [pc, #284]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10d      	bne.n	800c358 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c33c:	4b44      	ldr	r3, [pc, #272]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c340:	4a43      	ldr	r2, [pc, #268]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c346:	6593      	str	r3, [r2, #88]	; 0x58
 800c348:	4b41      	ldr	r3, [pc, #260]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c34c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c350:	60bb      	str	r3, [r7, #8]
 800c352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c354:	2301      	movs	r3, #1
 800c356:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c358:	4b3e      	ldr	r3, [pc, #248]	; (800c454 <HAL_RCC_OscConfig+0x57c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c360:	2b00      	cmp	r3, #0
 800c362:	d118      	bne.n	800c396 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c364:	4b3b      	ldr	r3, [pc, #236]	; (800c454 <HAL_RCC_OscConfig+0x57c>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a3a      	ldr	r2, [pc, #232]	; (800c454 <HAL_RCC_OscConfig+0x57c>)
 800c36a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c36e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c370:	f7fb fc40 	bl	8007bf4 <HAL_GetTick>
 800c374:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c376:	e008      	b.n	800c38a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c378:	f7fb fc3c 	bl	8007bf4 <HAL_GetTick>
 800c37c:	4602      	mov	r2, r0
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b02      	cmp	r3, #2
 800c384:	d901      	bls.n	800c38a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e1c6      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c38a:	4b32      	ldr	r3, [pc, #200]	; (800c454 <HAL_RCC_OscConfig+0x57c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0f0      	beq.n	800c378 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d108      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x4d8>
 800c39e:	4b2c      	ldr	r3, [pc, #176]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a4:	4a2a      	ldr	r2, [pc, #168]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3a6:	f043 0301 	orr.w	r3, r3, #1
 800c3aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3ae:	e024      	b.n	800c3fa <HAL_RCC_OscConfig+0x522>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	2b05      	cmp	r3, #5
 800c3b6:	d110      	bne.n	800c3da <HAL_RCC_OscConfig+0x502>
 800c3b8:	4b25      	ldr	r3, [pc, #148]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3be:	4a24      	ldr	r2, [pc, #144]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3c0:	f043 0304 	orr.w	r3, r3, #4
 800c3c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3c8:	4b21      	ldr	r3, [pc, #132]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3ce:	4a20      	ldr	r2, [pc, #128]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3d0:	f043 0301 	orr.w	r3, r3, #1
 800c3d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3d8:	e00f      	b.n	800c3fa <HAL_RCC_OscConfig+0x522>
 800c3da:	4b1d      	ldr	r3, [pc, #116]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3e0:	4a1b      	ldr	r2, [pc, #108]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3e2:	f023 0301 	bic.w	r3, r3, #1
 800c3e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3ea:	4b19      	ldr	r3, [pc, #100]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3f0:	4a17      	ldr	r2, [pc, #92]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c3f2:	f023 0304 	bic.w	r3, r3, #4
 800c3f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d016      	beq.n	800c430 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c402:	f7fb fbf7 	bl	8007bf4 <HAL_GetTick>
 800c406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c408:	e00a      	b.n	800c420 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c40a:	f7fb fbf3 	bl	8007bf4 <HAL_GetTick>
 800c40e:	4602      	mov	r2, r0
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	f241 3288 	movw	r2, #5000	; 0x1388
 800c418:	4293      	cmp	r3, r2
 800c41a:	d901      	bls.n	800c420 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e17b      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c420:	4b0b      	ldr	r3, [pc, #44]	; (800c450 <HAL_RCC_OscConfig+0x578>)
 800c422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c426:	f003 0302 	and.w	r3, r3, #2
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0ed      	beq.n	800c40a <HAL_RCC_OscConfig+0x532>
 800c42e:	e01a      	b.n	800c466 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c430:	f7fb fbe0 	bl	8007bf4 <HAL_GetTick>
 800c434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c436:	e00f      	b.n	800c458 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c438:	f7fb fbdc 	bl	8007bf4 <HAL_GetTick>
 800c43c:	4602      	mov	r2, r0
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	f241 3288 	movw	r2, #5000	; 0x1388
 800c446:	4293      	cmp	r3, r2
 800c448:	d906      	bls.n	800c458 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c44a:	2303      	movs	r3, #3
 800c44c:	e164      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
 800c44e:	bf00      	nop
 800c450:	40021000 	.word	0x40021000
 800c454:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c458:	4ba8      	ldr	r3, [pc, #672]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1e8      	bne.n	800c438 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c466:	7ffb      	ldrb	r3, [r7, #31]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d105      	bne.n	800c478 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c46c:	4ba3      	ldr	r3, [pc, #652]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c470:	4aa2      	ldr	r2, [pc, #648]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0320 	and.w	r3, r3, #32
 800c480:	2b00      	cmp	r3, #0
 800c482:	d03c      	beq.n	800c4fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d01c      	beq.n	800c4c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c48c:	4b9b      	ldr	r3, [pc, #620]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c48e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c492:	4a9a      	ldr	r2, [pc, #616]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c494:	f043 0301 	orr.w	r3, r3, #1
 800c498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c49c:	f7fb fbaa 	bl	8007bf4 <HAL_GetTick>
 800c4a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c4a2:	e008      	b.n	800c4b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4a4:	f7fb fba6 	bl	8007bf4 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d901      	bls.n	800c4b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e130      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c4b6:	4b91      	ldr	r3, [pc, #580]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c4b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0ef      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x5cc>
 800c4c4:	e01b      	b.n	800c4fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c4c6:	4b8d      	ldr	r3, [pc, #564]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c4c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4cc:	4a8b      	ldr	r2, [pc, #556]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c4ce:	f023 0301 	bic.w	r3, r3, #1
 800c4d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4d6:	f7fb fb8d 	bl	8007bf4 <HAL_GetTick>
 800c4da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4dc:	e008      	b.n	800c4f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4de:	f7fb fb89 	bl	8007bf4 <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d901      	bls.n	800c4f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e113      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4f0:	4b82      	ldr	r3, [pc, #520]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c4f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4f6:	f003 0302 	and.w	r3, r3, #2
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1ef      	bne.n	800c4de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 8107 	beq.w	800c716 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	f040 80cb 	bne.w	800c6a8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c512:	4b7a      	ldr	r3, [pc, #488]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	f003 0203 	and.w	r2, r3, #3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c522:	429a      	cmp	r2, r3
 800c524:	d12c      	bne.n	800c580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c530:	3b01      	subs	r3, #1
 800c532:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c534:	429a      	cmp	r2, r3
 800c536:	d123      	bne.n	800c580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c542:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c544:	429a      	cmp	r2, r3
 800c546:	d11b      	bne.n	800c580 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c552:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c554:	429a      	cmp	r2, r3
 800c556:	d113      	bne.n	800c580 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c562:	085b      	lsrs	r3, r3, #1
 800c564:	3b01      	subs	r3, #1
 800c566:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c568:	429a      	cmp	r2, r3
 800c56a:	d109      	bne.n	800c580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c576:	085b      	lsrs	r3, r3, #1
 800c578:	3b01      	subs	r3, #1
 800c57a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d06d      	beq.n	800c65c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2b0c      	cmp	r3, #12
 800c584:	d068      	beq.n	800c658 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c586:	4b5d      	ldr	r3, [pc, #372]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d105      	bne.n	800c59e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c592:	4b5a      	ldr	r3, [pc, #360]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e0ba      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c5a2:	4b56      	ldr	r3, [pc, #344]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a55      	ldr	r2, [pc, #340]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c5a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c5ae:	f7fb fb21 	bl	8007bf4 <HAL_GetTick>
 800c5b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c5b4:	e008      	b.n	800c5c8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5b6:	f7fb fb1d 	bl	8007bf4 <HAL_GetTick>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d901      	bls.n	800c5c8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e0a7      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c5c8:	4b4c      	ldr	r3, [pc, #304]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1f0      	bne.n	800c5b6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c5d4:	4b49      	ldr	r3, [pc, #292]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c5d6:	68da      	ldr	r2, [r3, #12]
 800c5d8:	4b49      	ldr	r3, [pc, #292]	; (800c700 <HAL_RCC_OscConfig+0x828>)
 800c5da:	4013      	ands	r3, r2
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c5e4:	3a01      	subs	r2, #1
 800c5e6:	0112      	lsls	r2, r2, #4
 800c5e8:	4311      	orrs	r1, r2
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c5ee:	0212      	lsls	r2, r2, #8
 800c5f0:	4311      	orrs	r1, r2
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c5f6:	0852      	lsrs	r2, r2, #1
 800c5f8:	3a01      	subs	r2, #1
 800c5fa:	0552      	lsls	r2, r2, #21
 800c5fc:	4311      	orrs	r1, r2
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c602:	0852      	lsrs	r2, r2, #1
 800c604:	3a01      	subs	r2, #1
 800c606:	0652      	lsls	r2, r2, #25
 800c608:	4311      	orrs	r1, r2
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c60e:	06d2      	lsls	r2, r2, #27
 800c610:	430a      	orrs	r2, r1
 800c612:	493a      	ldr	r1, [pc, #232]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c614:	4313      	orrs	r3, r2
 800c616:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c618:	4b38      	ldr	r3, [pc, #224]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a37      	ldr	r2, [pc, #220]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c61e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c622:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c624:	4b35      	ldr	r3, [pc, #212]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	4a34      	ldr	r2, [pc, #208]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c62a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c62e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c630:	f7fb fae0 	bl	8007bf4 <HAL_GetTick>
 800c634:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c636:	e008      	b.n	800c64a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c638:	f7fb fadc 	bl	8007bf4 <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	2b02      	cmp	r3, #2
 800c644:	d901      	bls.n	800c64a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800c646:	2303      	movs	r3, #3
 800c648:	e066      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c64a:	4b2c      	ldr	r3, [pc, #176]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0f0      	beq.n	800c638 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c656:	e05e      	b.n	800c716 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e05d      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c65c:	4b27      	ldr	r3, [pc, #156]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c664:	2b00      	cmp	r3, #0
 800c666:	d156      	bne.n	800c716 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c668:	4b24      	ldr	r3, [pc, #144]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a23      	ldr	r2, [pc, #140]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c66e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c672:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c674:	4b21      	ldr	r3, [pc, #132]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	4a20      	ldr	r2, [pc, #128]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c67a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c67e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c680:	f7fb fab8 	bl	8007bf4 <HAL_GetTick>
 800c684:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c686:	e008      	b.n	800c69a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c688:	f7fb fab4 	bl	8007bf4 <HAL_GetTick>
 800c68c:	4602      	mov	r2, r0
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	2b02      	cmp	r3, #2
 800c694:	d901      	bls.n	800c69a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	e03e      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c69a:	4b18      	ldr	r3, [pc, #96]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0f0      	beq.n	800c688 <HAL_RCC_OscConfig+0x7b0>
 800c6a6:	e036      	b.n	800c716 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	2b0c      	cmp	r3, #12
 800c6ac:	d031      	beq.n	800c712 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a12      	ldr	r2, [pc, #72]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c6b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c6ba:	4b10      	ldr	r3, [pc, #64]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d105      	bne.n	800c6d2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c6c6:	4b0d      	ldr	r3, [pc, #52]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	4a0c      	ldr	r2, [pc, #48]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c6cc:	f023 0303 	bic.w	r3, r3, #3
 800c6d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c6d2:	4b0a      	ldr	r3, [pc, #40]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	4a09      	ldr	r2, [pc, #36]	; (800c6fc <HAL_RCC_OscConfig+0x824>)
 800c6d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c6dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6e2:	f7fb fa87 	bl	8007bf4 <HAL_GetTick>
 800c6e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6e8:	e00c      	b.n	800c704 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6ea:	f7fb fa83 	bl	8007bf4 <HAL_GetTick>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d905      	bls.n	800c704 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e00d      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
 800c6fc:	40021000 	.word	0x40021000
 800c700:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c704:	4b06      	ldr	r3, [pc, #24]	; (800c720 <HAL_RCC_OscConfig+0x848>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1ec      	bne.n	800c6ea <HAL_RCC_OscConfig+0x812>
 800c710:	e001      	b.n	800c716 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e000      	b.n	800c718 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	40021000 	.word	0x40021000

0800c724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d101      	bne.n	800c738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	e0c8      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c738:	4b66      	ldr	r3, [pc, #408]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0307 	and.w	r3, r3, #7
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	429a      	cmp	r2, r3
 800c744:	d910      	bls.n	800c768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c746:	4b63      	ldr	r3, [pc, #396]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f023 0207 	bic.w	r2, r3, #7
 800c74e:	4961      	ldr	r1, [pc, #388]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	4313      	orrs	r3, r2
 800c754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c756:	4b5f      	ldr	r3, [pc, #380]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0307 	and.w	r3, r3, #7
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d001      	beq.n	800c768 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	e0b0      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	2b00      	cmp	r3, #0
 800c772:	d04c      	beq.n	800c80e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d107      	bne.n	800c78c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c77c:	4b56      	ldr	r3, [pc, #344]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d121      	bne.n	800c7cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	e09e      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d107      	bne.n	800c7a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c794:	4b50      	ldr	r3, [pc, #320]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d115      	bne.n	800c7cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e092      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d107      	bne.n	800c7bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c7ac:	4b4a      	ldr	r3, [pc, #296]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0302 	and.w	r3, r3, #2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d109      	bne.n	800c7cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e086      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7bc:	4b46      	ldr	r3, [pc, #280]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e07e      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c7cc:	4b42      	ldr	r3, [pc, #264]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f023 0203 	bic.w	r2, r3, #3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	493f      	ldr	r1, [pc, #252]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7de:	f7fb fa09 	bl	8007bf4 <HAL_GetTick>
 800c7e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7e4:	e00a      	b.n	800c7fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7e6:	f7fb fa05 	bl	8007bf4 <HAL_GetTick>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d901      	bls.n	800c7fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	e066      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7fc:	4b36      	ldr	r3, [pc, #216]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f003 020c 	and.w	r2, r3, #12
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d1eb      	bne.n	800c7e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 0302 	and.w	r3, r3, #2
 800c816:	2b00      	cmp	r3, #0
 800c818:	d008      	beq.n	800c82c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c81a:	4b2f      	ldr	r3, [pc, #188]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	492c      	ldr	r1, [pc, #176]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c828:	4313      	orrs	r3, r2
 800c82a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c82c:	4b29      	ldr	r3, [pc, #164]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0307 	and.w	r3, r3, #7
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	429a      	cmp	r2, r3
 800c838:	d210      	bcs.n	800c85c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c83a:	4b26      	ldr	r3, [pc, #152]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f023 0207 	bic.w	r2, r3, #7
 800c842:	4924      	ldr	r1, [pc, #144]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	4313      	orrs	r3, r2
 800c848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c84a:	4b22      	ldr	r3, [pc, #136]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	d001      	beq.n	800c85c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	e036      	b.n	800c8ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f003 0304 	and.w	r3, r3, #4
 800c864:	2b00      	cmp	r3, #0
 800c866:	d008      	beq.n	800c87a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c868:	4b1b      	ldr	r3, [pc, #108]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	4918      	ldr	r1, [pc, #96]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c876:	4313      	orrs	r3, r2
 800c878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0308 	and.w	r3, r3, #8
 800c882:	2b00      	cmp	r3, #0
 800c884:	d009      	beq.n	800c89a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c886:	4b14      	ldr	r3, [pc, #80]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	4910      	ldr	r1, [pc, #64]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c896:	4313      	orrs	r3, r2
 800c898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c89a:	f000 f825 	bl	800c8e8 <HAL_RCC_GetSysClockFreq>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	4b0d      	ldr	r3, [pc, #52]	; (800c8d8 <HAL_RCC_ClockConfig+0x1b4>)
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	091b      	lsrs	r3, r3, #4
 800c8a6:	f003 030f 	and.w	r3, r3, #15
 800c8aa:	490c      	ldr	r1, [pc, #48]	; (800c8dc <HAL_RCC_ClockConfig+0x1b8>)
 800c8ac:	5ccb      	ldrb	r3, [r1, r3]
 800c8ae:	f003 031f 	and.w	r3, r3, #31
 800c8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b6:	4a0a      	ldr	r2, [pc, #40]	; (800c8e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c8b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fa fd74 	bl	80073ac <HAL_InitTick>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	72fb      	strb	r3, [r7, #11]

  return status;
 800c8c8:	7afb      	ldrb	r3, [r7, #11]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	40022000 	.word	0x40022000
 800c8d8:	40021000 	.word	0x40021000
 800c8dc:	08023e5c 	.word	0x08023e5c
 800c8e0:	20000310 	.word	0x20000310
 800c8e4:	20000314 	.word	0x20000314

0800c8e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b089      	sub	sp, #36	; 0x24
 800c8ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61fb      	str	r3, [r7, #28]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8f6:	4b3e      	ldr	r3, [pc, #248]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	f003 030c 	and.w	r3, r3, #12
 800c8fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c900:	4b3b      	ldr	r3, [pc, #236]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	f003 0303 	and.w	r3, r3, #3
 800c908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d005      	beq.n	800c91c <HAL_RCC_GetSysClockFreq+0x34>
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	2b0c      	cmp	r3, #12
 800c914:	d121      	bne.n	800c95a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d11e      	bne.n	800c95a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c91c:	4b34      	ldr	r3, [pc, #208]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0308 	and.w	r3, r3, #8
 800c924:	2b00      	cmp	r3, #0
 800c926:	d107      	bne.n	800c938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c928:	4b31      	ldr	r3, [pc, #196]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c92a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c92e:	0a1b      	lsrs	r3, r3, #8
 800c930:	f003 030f 	and.w	r3, r3, #15
 800c934:	61fb      	str	r3, [r7, #28]
 800c936:	e005      	b.n	800c944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c938:	4b2d      	ldr	r3, [pc, #180]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	091b      	lsrs	r3, r3, #4
 800c93e:	f003 030f 	and.w	r3, r3, #15
 800c942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c944:	4a2b      	ldr	r2, [pc, #172]	; (800c9f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c94c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10d      	bne.n	800c970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c958:	e00a      	b.n	800c970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	2b04      	cmp	r3, #4
 800c95e:	d102      	bne.n	800c966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c960:	4b25      	ldr	r3, [pc, #148]	; (800c9f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c962:	61bb      	str	r3, [r7, #24]
 800c964:	e004      	b.n	800c970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2b08      	cmp	r3, #8
 800c96a:	d101      	bne.n	800c970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c96c:	4b23      	ldr	r3, [pc, #140]	; (800c9fc <HAL_RCC_GetSysClockFreq+0x114>)
 800c96e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2b0c      	cmp	r3, #12
 800c974:	d134      	bne.n	800c9e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c976:	4b1e      	ldr	r3, [pc, #120]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	f003 0303 	and.w	r3, r3, #3
 800c97e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d003      	beq.n	800c98e <HAL_RCC_GetSysClockFreq+0xa6>
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b03      	cmp	r3, #3
 800c98a:	d003      	beq.n	800c994 <HAL_RCC_GetSysClockFreq+0xac>
 800c98c:	e005      	b.n	800c99a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c98e:	4b1a      	ldr	r3, [pc, #104]	; (800c9f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c990:	617b      	str	r3, [r7, #20]
      break;
 800c992:	e005      	b.n	800c9a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c994:	4b19      	ldr	r3, [pc, #100]	; (800c9fc <HAL_RCC_GetSysClockFreq+0x114>)
 800c996:	617b      	str	r3, [r7, #20]
      break;
 800c998:	e002      	b.n	800c9a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	617b      	str	r3, [r7, #20]
      break;
 800c99e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c9a0:	4b13      	ldr	r3, [pc, #76]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	091b      	lsrs	r3, r3, #4
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c9ae:	4b10      	ldr	r3, [pc, #64]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	0a1b      	lsrs	r3, r3, #8
 800c9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	fb02 f203 	mul.w	r2, r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c9c6:	4b0a      	ldr	r3, [pc, #40]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	0e5b      	lsrs	r3, r3, #25
 800c9cc:	f003 0303 	and.w	r3, r3, #3
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c9e0:	69bb      	ldr	r3, [r7, #24]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3724      	adds	r7, #36	; 0x24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	40021000 	.word	0x40021000
 800c9f4:	08023e74 	.word	0x08023e74
 800c9f8:	00f42400 	.word	0x00f42400
 800c9fc:	007a1200 	.word	0x007a1200

0800ca00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ca00:	b480      	push	{r7}
 800ca02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ca04:	4b03      	ldr	r3, [pc, #12]	; (800ca14 <HAL_RCC_GetHCLKFreq+0x14>)
 800ca06:	681b      	ldr	r3, [r3, #0]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	20000310 	.word	0x20000310

0800ca18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ca1c:	f7ff fff0 	bl	800ca00 <HAL_RCC_GetHCLKFreq>
 800ca20:	4602      	mov	r2, r0
 800ca22:	4b06      	ldr	r3, [pc, #24]	; (800ca3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	0a1b      	lsrs	r3, r3, #8
 800ca28:	f003 0307 	and.w	r3, r3, #7
 800ca2c:	4904      	ldr	r1, [pc, #16]	; (800ca40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ca2e:	5ccb      	ldrb	r3, [r1, r3]
 800ca30:	f003 031f 	and.w	r3, r3, #31
 800ca34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	40021000 	.word	0x40021000
 800ca40:	08023e6c 	.word	0x08023e6c

0800ca44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ca48:	f7ff ffda 	bl	800ca00 <HAL_RCC_GetHCLKFreq>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	0adb      	lsrs	r3, r3, #11
 800ca54:	f003 0307 	and.w	r3, r3, #7
 800ca58:	4904      	ldr	r1, [pc, #16]	; (800ca6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca5a:	5ccb      	ldrb	r3, [r1, r3]
 800ca5c:	f003 031f 	and.w	r3, r3, #31
 800ca60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	40021000 	.word	0x40021000
 800ca6c:	08023e6c 	.word	0x08023e6c

0800ca70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	220f      	movs	r2, #15
 800ca7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ca80:	4b12      	ldr	r3, [pc, #72]	; (800cacc <HAL_RCC_GetClockConfig+0x5c>)
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f003 0203 	and.w	r2, r3, #3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ca8c:	4b0f      	ldr	r3, [pc, #60]	; (800cacc <HAL_RCC_GetClockConfig+0x5c>)
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ca98:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <HAL_RCC_GetClockConfig+0x5c>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800caa4:	4b09      	ldr	r3, [pc, #36]	; (800cacc <HAL_RCC_GetClockConfig+0x5c>)
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	08db      	lsrs	r3, r3, #3
 800caaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cab2:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <HAL_RCC_GetClockConfig+0x60>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 0207 	and.w	r2, r3, #7
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	601a      	str	r2, [r3, #0]
}
 800cabe:	bf00      	nop
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	40021000 	.word	0x40021000
 800cad0:	40022000 	.word	0x40022000

0800cad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cadc:	2300      	movs	r3, #0
 800cade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cae0:	4b2a      	ldr	r3, [pc, #168]	; (800cb8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800caec:	f7ff f980 	bl	800bdf0 <HAL_PWREx_GetVoltageRange>
 800caf0:	6178      	str	r0, [r7, #20]
 800caf2:	e014      	b.n	800cb1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800caf4:	4b25      	ldr	r3, [pc, #148]	; (800cb8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf8:	4a24      	ldr	r2, [pc, #144]	; (800cb8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cafa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cafe:	6593      	str	r3, [r2, #88]	; 0x58
 800cb00:	4b22      	ldr	r3, [pc, #136]	; (800cb8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb08:	60fb      	str	r3, [r7, #12]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cb0c:	f7ff f970 	bl	800bdf0 <HAL_PWREx_GetVoltageRange>
 800cb10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cb12:	4b1e      	ldr	r3, [pc, #120]	; (800cb8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb16:	4a1d      	ldr	r2, [pc, #116]	; (800cb8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb24:	d10b      	bne.n	800cb3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b80      	cmp	r3, #128	; 0x80
 800cb2a:	d919      	bls.n	800cb60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2ba0      	cmp	r3, #160	; 0xa0
 800cb30:	d902      	bls.n	800cb38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb32:	2302      	movs	r3, #2
 800cb34:	613b      	str	r3, [r7, #16]
 800cb36:	e013      	b.n	800cb60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb38:	2301      	movs	r3, #1
 800cb3a:	613b      	str	r3, [r7, #16]
 800cb3c:	e010      	b.n	800cb60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b80      	cmp	r3, #128	; 0x80
 800cb42:	d902      	bls.n	800cb4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cb44:	2303      	movs	r3, #3
 800cb46:	613b      	str	r3, [r7, #16]
 800cb48:	e00a      	b.n	800cb60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b80      	cmp	r3, #128	; 0x80
 800cb4e:	d102      	bne.n	800cb56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb50:	2302      	movs	r3, #2
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	e004      	b.n	800cb60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b70      	cmp	r3, #112	; 0x70
 800cb5a:	d101      	bne.n	800cb60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cb60:	4b0b      	ldr	r3, [pc, #44]	; (800cb90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f023 0207 	bic.w	r2, r3, #7
 800cb68:	4909      	ldr	r1, [pc, #36]	; (800cb90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0307 	and.w	r3, r3, #7
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d001      	beq.n	800cb82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e000      	b.n	800cb84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	40021000 	.word	0x40021000
 800cb90:	40022000 	.word	0x40022000

0800cb94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cba0:	2300      	movs	r3, #0
 800cba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d041      	beq.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cbb8:	d02a      	beq.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cbba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cbbe:	d824      	bhi.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cbc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbc4:	d008      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cbc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbca:	d81e      	bhi.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00a      	beq.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cbd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbd4:	d010      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cbd6:	e018      	b.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cbd8:	4b86      	ldr	r3, [pc, #536]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	4a85      	ldr	r2, [pc, #532]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbe2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbe4:	e015      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	3304      	adds	r3, #4
 800cbea:	2100      	movs	r1, #0
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 fadf 	bl	800d1b0 <RCCEx_PLLSAI1_Config>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbf6:	e00c      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3320      	adds	r3, #32
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 fbc8 	bl	800d394 <RCCEx_PLLSAI2_Config>
 800cc04:	4603      	mov	r3, r0
 800cc06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc08:	e003      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	74fb      	strb	r3, [r7, #19]
      break;
 800cc0e:	e000      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cc10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc12:	7cfb      	ldrb	r3, [r7, #19]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10b      	bne.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc18:	4b76      	ldr	r3, [pc, #472]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc26:	4973      	ldr	r1, [pc, #460]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cc2e:	e001      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc30:	7cfb      	ldrb	r3, [r7, #19]
 800cc32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d041      	beq.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc48:	d02a      	beq.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cc4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc4e:	d824      	bhi.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc54:	d008      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cc56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc5a:	d81e      	bhi.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800cc60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc64:	d010      	beq.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cc66:	e018      	b.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cc68:	4b62      	ldr	r3, [pc, #392]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	4a61      	ldr	r2, [pc, #388]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc74:	e015      	b.n	800cca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3304      	adds	r3, #4
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fa97 	bl	800d1b0 <RCCEx_PLLSAI1_Config>
 800cc82:	4603      	mov	r3, r0
 800cc84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc86:	e00c      	b.n	800cca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3320      	adds	r3, #32
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 fb80 	bl	800d394 <RCCEx_PLLSAI2_Config>
 800cc94:	4603      	mov	r3, r0
 800cc96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc98:	e003      	b.n	800cca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	74fb      	strb	r3, [r7, #19]
      break;
 800cc9e:	e000      	b.n	800cca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800cca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cca2:	7cfb      	ldrb	r3, [r7, #19]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10b      	bne.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cca8:	4b52      	ldr	r3, [pc, #328]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb6:	494f      	ldr	r1, [pc, #316]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ccbe:	e001      	b.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccc0:	7cfb      	ldrb	r3, [r7, #19]
 800ccc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 80a0 	beq.w	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ccd6:	4b47      	ldr	r3, [pc, #284]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800cce2:	2301      	movs	r3, #1
 800cce4:	e000      	b.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800cce6:	2300      	movs	r3, #0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00d      	beq.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ccec:	4b41      	ldr	r3, [pc, #260]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf0:	4a40      	ldr	r2, [pc, #256]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf6:	6593      	str	r3, [r2, #88]	; 0x58
 800ccf8:	4b3e      	ldr	r3, [pc, #248]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd00:	60bb      	str	r3, [r7, #8]
 800cd02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd04:	2301      	movs	r3, #1
 800cd06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd08:	4b3b      	ldr	r3, [pc, #236]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a3a      	ldr	r2, [pc, #232]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd14:	f7fa ff6e 	bl	8007bf4 <HAL_GetTick>
 800cd18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd1a:	e009      	b.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd1c:	f7fa ff6a 	bl	8007bf4 <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	d902      	bls.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	74fb      	strb	r3, [r7, #19]
        break;
 800cd2e:	e005      	b.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd30:	4b31      	ldr	r3, [pc, #196]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d0ef      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800cd3c:	7cfb      	ldrb	r3, [r7, #19]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d15c      	bne.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd42:	4b2c      	ldr	r3, [pc, #176]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d01f      	beq.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd5a:	697a      	ldr	r2, [r7, #20]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d019      	beq.n	800cd94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd60:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd6c:	4b21      	ldr	r3, [pc, #132]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd72:	4a20      	ldr	r2, [pc, #128]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd7c:	4b1d      	ldr	r3, [pc, #116]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd82:	4a1c      	ldr	r2, [pc, #112]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cd8c:	4a19      	ldr	r2, [pc, #100]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d016      	beq.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd9e:	f7fa ff29 	bl	8007bf4 <HAL_GetTick>
 800cda2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cda4:	e00b      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cda6:	f7fa ff25 	bl	8007bf4 <HAL_GetTick>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	1ad3      	subs	r3, r2, r3
 800cdb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d902      	bls.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	74fb      	strb	r3, [r7, #19]
            break;
 800cdbc:	e006      	b.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdbe:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d0ec      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800cdcc:	7cfb      	ldrb	r3, [r7, #19]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10c      	bne.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cde2:	4904      	ldr	r1, [pc, #16]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cde4:	4313      	orrs	r3, r2
 800cde6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cdea:	e009      	b.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cdec:	7cfb      	ldrb	r3, [r7, #19]
 800cdee:	74bb      	strb	r3, [r7, #18]
 800cdf0:	e006      	b.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800cdf2:	bf00      	nop
 800cdf4:	40021000 	.word	0x40021000
 800cdf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdfc:	7cfb      	ldrb	r3, [r7, #19]
 800cdfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce00:	7c7b      	ldrb	r3, [r7, #17]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d105      	bne.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce06:	4ba6      	ldr	r3, [pc, #664]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce0a:	4aa5      	ldr	r2, [pc, #660]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce1e:	4ba0      	ldr	r3, [pc, #640]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce24:	f023 0203 	bic.w	r2, r3, #3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2c:	499c      	ldr	r1, [pc, #624]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 0302 	and.w	r3, r3, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce40:	4b97      	ldr	r3, [pc, #604]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce46:	f023 020c 	bic.w	r2, r3, #12
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce4e:	4994      	ldr	r1, [pc, #592]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce50:	4313      	orrs	r3, r2
 800ce52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 0304 	and.w	r3, r3, #4
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce62:	4b8f      	ldr	r3, [pc, #572]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce70:	498b      	ldr	r1, [pc, #556]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0308 	and.w	r3, r3, #8
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00a      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce84:	4b86      	ldr	r3, [pc, #536]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce92:	4983      	ldr	r1, [pc, #524]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 0310 	and.w	r3, r3, #16
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00a      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cea6:	4b7e      	ldr	r3, [pc, #504]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceb4:	497a      	ldr	r1, [pc, #488]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f003 0320 	and.w	r3, r3, #32
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00a      	beq.n	800cede <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cec8:	4b75      	ldr	r3, [pc, #468]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced6:	4972      	ldr	r1, [pc, #456]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ceea:	4b6d      	ldr	r3, [pc, #436]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cef8:	4969      	ldr	r1, [pc, #420]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cefa:	4313      	orrs	r3, r2
 800cefc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00a      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf0c:	4b64      	ldr	r3, [pc, #400]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf1a:	4961      	ldr	r1, [pc, #388]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00a      	beq.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf2e:	4b5c      	ldr	r3, [pc, #368]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf3c:	4958      	ldr	r1, [pc, #352]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00a      	beq.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf50:	4b53      	ldr	r3, [pc, #332]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5e:	4950      	ldr	r1, [pc, #320]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf60:	4313      	orrs	r3, r2
 800cf62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf72:	4b4b      	ldr	r3, [pc, #300]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf80:	4947      	ldr	r1, [pc, #284]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf82:	4313      	orrs	r3, r2
 800cf84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00a      	beq.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf94:	4b42      	ldr	r3, [pc, #264]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf9a:	f023 0203 	bic.w	r2, r3, #3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfa2:	493f      	ldr	r1, [pc, #252]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d028      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cfb6:	4b3a      	ldr	r3, [pc, #232]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc4:	4936      	ldr	r1, [pc, #216]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfd4:	d106      	bne.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfd6:	4b32      	ldr	r3, [pc, #200]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	4a31      	ldr	r2, [pc, #196]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfe0:	60d3      	str	r3, [r2, #12]
 800cfe2:	e011      	b.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfec:	d10c      	bne.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	3304      	adds	r3, #4
 800cff2:	2101      	movs	r1, #1
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 f8db 	bl	800d1b0 <RCCEx_PLLSAI1_Config>
 800cffa:	4603      	mov	r3, r0
 800cffc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cffe:	7cfb      	ldrb	r3, [r7, #19]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d001      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800d004:	7cfb      	ldrb	r3, [r7, #19]
 800d006:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d028      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d014:	4b22      	ldr	r3, [pc, #136]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d01a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d022:	491f      	ldr	r1, [pc, #124]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d024:	4313      	orrs	r3, r2
 800d026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d02e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d032:	d106      	bne.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d034:	4b1a      	ldr	r3, [pc, #104]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	4a19      	ldr	r2, [pc, #100]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d03a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d03e:	60d3      	str	r3, [r2, #12]
 800d040:	e011      	b.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d04a:	d10c      	bne.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3304      	adds	r3, #4
 800d050:	2101      	movs	r1, #1
 800d052:	4618      	mov	r0, r3
 800d054:	f000 f8ac 	bl	800d1b0 <RCCEx_PLLSAI1_Config>
 800d058:	4603      	mov	r3, r0
 800d05a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d05c:	7cfb      	ldrb	r3, [r7, #19]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800d062:	7cfb      	ldrb	r3, [r7, #19]
 800d064:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d02a      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d072:	4b0b      	ldr	r3, [pc, #44]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d078:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d080:	4907      	ldr	r1, [pc, #28]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d082:	4313      	orrs	r3, r2
 800d084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d08c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d090:	d108      	bne.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d092:	4b03      	ldr	r3, [pc, #12]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	4a02      	ldr	r2, [pc, #8]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d09c:	60d3      	str	r3, [r2, #12]
 800d09e:	e013      	b.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800d0a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d0ac:	d10c      	bne.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 f87b 	bl	800d1b0 <RCCEx_PLLSAI1_Config>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0be:	7cfb      	ldrb	r3, [r7, #19]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800d0c4:	7cfb      	ldrb	r3, [r7, #19]
 800d0c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d02f      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0d4:	4b2c      	ldr	r3, [pc, #176]	; (800d188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e2:	4929      	ldr	r1, [pc, #164]	; (800d188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0f2:	d10d      	bne.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3304      	adds	r3, #4
 800d0f8:	2102      	movs	r1, #2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 f858 	bl	800d1b0 <RCCEx_PLLSAI1_Config>
 800d100:	4603      	mov	r3, r0
 800d102:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d104:	7cfb      	ldrb	r3, [r7, #19]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d014      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d10a:	7cfb      	ldrb	r3, [r7, #19]
 800d10c:	74bb      	strb	r3, [r7, #18]
 800d10e:	e011      	b.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d118:	d10c      	bne.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3320      	adds	r3, #32
 800d11e:	2102      	movs	r1, #2
 800d120:	4618      	mov	r0, r3
 800d122:	f000 f937 	bl	800d394 <RCCEx_PLLSAI2_Config>
 800d126:	4603      	mov	r3, r0
 800d128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d12a:	7cfb      	ldrb	r3, [r7, #19]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d130:	7cfb      	ldrb	r3, [r7, #19]
 800d132:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d140:	4b11      	ldr	r3, [pc, #68]	; (800d188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d146:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d150:	490d      	ldr	r1, [pc, #52]	; (800d188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d152:	4313      	orrs	r3, r2
 800d154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d164:	4b08      	ldr	r3, [pc, #32]	; (800d188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d16a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d174:	4904      	ldr	r1, [pc, #16]	; (800d188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d176:	4313      	orrs	r3, r2
 800d178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d17c:	7cbb      	ldrb	r3, [r7, #18]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3718      	adds	r7, #24
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	40021000 	.word	0x40021000

0800d18c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800d18c:	b480      	push	{r7}
 800d18e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800d190:	4b06      	ldr	r3, [pc, #24]	; (800d1ac <HAL_RCCEx_EnableLSECSS+0x20>)
 800d192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d196:	4a05      	ldr	r2, [pc, #20]	; (800d1ac <HAL_RCCEx_EnableLSECSS+0x20>)
 800d198:	f043 0320 	orr.w	r3, r3, #32
 800d19c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d1a0:	bf00      	nop
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	40021000 	.word	0x40021000

0800d1b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d1be:	4b74      	ldr	r3, [pc, #464]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f003 0303 	and.w	r3, r3, #3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d018      	beq.n	800d1fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d1ca:	4b71      	ldr	r3, [pc, #452]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f003 0203 	and.w	r2, r3, #3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d10d      	bne.n	800d1f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
       ||
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d009      	beq.n	800d1f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d1e2:	4b6b      	ldr	r3, [pc, #428]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	091b      	lsrs	r3, r3, #4
 800d1e8:	f003 0307 	and.w	r3, r3, #7
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
       ||
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d047      	beq.n	800d286 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	73fb      	strb	r3, [r7, #15]
 800d1fa:	e044      	b.n	800d286 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b03      	cmp	r3, #3
 800d202:	d018      	beq.n	800d236 <RCCEx_PLLSAI1_Config+0x86>
 800d204:	2b03      	cmp	r3, #3
 800d206:	d825      	bhi.n	800d254 <RCCEx_PLLSAI1_Config+0xa4>
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d002      	beq.n	800d212 <RCCEx_PLLSAI1_Config+0x62>
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d009      	beq.n	800d224 <RCCEx_PLLSAI1_Config+0x74>
 800d210:	e020      	b.n	800d254 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d212:	4b5f      	ldr	r3, [pc, #380]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0302 	and.w	r3, r3, #2
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d11d      	bne.n	800d25a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d222:	e01a      	b.n	800d25a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d224:	4b5a      	ldr	r3, [pc, #360]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d116      	bne.n	800d25e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d234:	e013      	b.n	800d25e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d236:	4b56      	ldr	r3, [pc, #344]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10f      	bne.n	800d262 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d242:	4b53      	ldr	r3, [pc, #332]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d109      	bne.n	800d262 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d252:	e006      	b.n	800d262 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	73fb      	strb	r3, [r7, #15]
      break;
 800d258:	e004      	b.n	800d264 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d25a:	bf00      	nop
 800d25c:	e002      	b.n	800d264 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d25e:	bf00      	nop
 800d260:	e000      	b.n	800d264 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d262:	bf00      	nop
    }

    if(status == HAL_OK)
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10d      	bne.n	800d286 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d26a:	4b49      	ldr	r3, [pc, #292]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6819      	ldr	r1, [r3, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	011b      	lsls	r3, r3, #4
 800d27e:	430b      	orrs	r3, r1
 800d280:	4943      	ldr	r1, [pc, #268]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d282:	4313      	orrs	r3, r2
 800d284:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d286:	7bfb      	ldrb	r3, [r7, #15]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d17c      	bne.n	800d386 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d28c:	4b40      	ldr	r3, [pc, #256]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a3f      	ldr	r2, [pc, #252]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d292:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d298:	f7fa fcac 	bl	8007bf4 <HAL_GetTick>
 800d29c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d29e:	e009      	b.n	800d2b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d2a0:	f7fa fca8 	bl	8007bf4 <HAL_GetTick>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d902      	bls.n	800d2b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	73fb      	strb	r3, [r7, #15]
        break;
 800d2b2:	e005      	b.n	800d2c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d2b4:	4b36      	ldr	r3, [pc, #216]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1ef      	bne.n	800d2a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d15f      	bne.n	800d386 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d110      	bne.n	800d2ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2cc:	4b30      	ldr	r3, [pc, #192]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d2d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	6892      	ldr	r2, [r2, #8]
 800d2dc:	0211      	lsls	r1, r2, #8
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	68d2      	ldr	r2, [r2, #12]
 800d2e2:	06d2      	lsls	r2, r2, #27
 800d2e4:	430a      	orrs	r2, r1
 800d2e6:	492a      	ldr	r1, [pc, #168]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	610b      	str	r3, [r1, #16]
 800d2ec:	e027      	b.n	800d33e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d112      	bne.n	800d31a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2f4:	4b26      	ldr	r3, [pc, #152]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d2fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	6892      	ldr	r2, [r2, #8]
 800d304:	0211      	lsls	r1, r2, #8
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	6912      	ldr	r2, [r2, #16]
 800d30a:	0852      	lsrs	r2, r2, #1
 800d30c:	3a01      	subs	r2, #1
 800d30e:	0552      	lsls	r2, r2, #21
 800d310:	430a      	orrs	r2, r1
 800d312:	491f      	ldr	r1, [pc, #124]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d314:	4313      	orrs	r3, r2
 800d316:	610b      	str	r3, [r1, #16]
 800d318:	e011      	b.n	800d33e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d31a:	4b1d      	ldr	r3, [pc, #116]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d322:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	6892      	ldr	r2, [r2, #8]
 800d32a:	0211      	lsls	r1, r2, #8
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	6952      	ldr	r2, [r2, #20]
 800d330:	0852      	lsrs	r2, r2, #1
 800d332:	3a01      	subs	r2, #1
 800d334:	0652      	lsls	r2, r2, #25
 800d336:	430a      	orrs	r2, r1
 800d338:	4915      	ldr	r1, [pc, #84]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d33a:	4313      	orrs	r3, r2
 800d33c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d33e:	4b14      	ldr	r3, [pc, #80]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a13      	ldr	r2, [pc, #76]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d348:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d34a:	f7fa fc53 	bl	8007bf4 <HAL_GetTick>
 800d34e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d350:	e009      	b.n	800d366 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d352:	f7fa fc4f 	bl	8007bf4 <HAL_GetTick>
 800d356:	4602      	mov	r2, r0
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d902      	bls.n	800d366 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	73fb      	strb	r3, [r7, #15]
          break;
 800d364:	e005      	b.n	800d372 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d366:	4b0a      	ldr	r3, [pc, #40]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d0ef      	beq.n	800d352 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d372:	7bfb      	ldrb	r3, [r7, #15]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d106      	bne.n	800d386 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d378:	4b05      	ldr	r3, [pc, #20]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d37a:	691a      	ldr	r2, [r3, #16]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	4903      	ldr	r1, [pc, #12]	; (800d390 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d382:	4313      	orrs	r3, r2
 800d384:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d386:	7bfb      	ldrb	r3, [r7, #15]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	40021000 	.word	0x40021000

0800d394 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d3a2:	4b69      	ldr	r3, [pc, #420]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	f003 0303 	and.w	r3, r3, #3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d018      	beq.n	800d3e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d3ae:	4b66      	ldr	r3, [pc, #408]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	f003 0203 	and.w	r2, r3, #3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d10d      	bne.n	800d3da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
       ||
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d009      	beq.n	800d3da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d3c6:	4b60      	ldr	r3, [pc, #384]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	091b      	lsrs	r3, r3, #4
 800d3cc:	f003 0307 	and.w	r3, r3, #7
 800d3d0:	1c5a      	adds	r2, r3, #1
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685b      	ldr	r3, [r3, #4]
       ||
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d047      	beq.n	800d46a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	73fb      	strb	r3, [r7, #15]
 800d3de:	e044      	b.n	800d46a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d018      	beq.n	800d41a <RCCEx_PLLSAI2_Config+0x86>
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d825      	bhi.n	800d438 <RCCEx_PLLSAI2_Config+0xa4>
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d002      	beq.n	800d3f6 <RCCEx_PLLSAI2_Config+0x62>
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d009      	beq.n	800d408 <RCCEx_PLLSAI2_Config+0x74>
 800d3f4:	e020      	b.n	800d438 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d3f6:	4b54      	ldr	r3, [pc, #336]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 0302 	and.w	r3, r3, #2
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d11d      	bne.n	800d43e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d406:	e01a      	b.n	800d43e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d408:	4b4f      	ldr	r3, [pc, #316]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d410:	2b00      	cmp	r3, #0
 800d412:	d116      	bne.n	800d442 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d418:	e013      	b.n	800d442 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d41a:	4b4b      	ldr	r3, [pc, #300]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10f      	bne.n	800d446 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d426:	4b48      	ldr	r3, [pc, #288]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d109      	bne.n	800d446 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d436:	e006      	b.n	800d446 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	73fb      	strb	r3, [r7, #15]
      break;
 800d43c:	e004      	b.n	800d448 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d43e:	bf00      	nop
 800d440:	e002      	b.n	800d448 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d442:	bf00      	nop
 800d444:	e000      	b.n	800d448 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d446:	bf00      	nop
    }

    if(status == HAL_OK)
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10d      	bne.n	800d46a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d44e:	4b3e      	ldr	r3, [pc, #248]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6819      	ldr	r1, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	3b01      	subs	r3, #1
 800d460:	011b      	lsls	r3, r3, #4
 800d462:	430b      	orrs	r3, r1
 800d464:	4938      	ldr	r1, [pc, #224]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d466:	4313      	orrs	r3, r2
 800d468:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d166      	bne.n	800d53e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d470:	4b35      	ldr	r3, [pc, #212]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a34      	ldr	r2, [pc, #208]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d47a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d47c:	f7fa fbba 	bl	8007bf4 <HAL_GetTick>
 800d480:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d482:	e009      	b.n	800d498 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d484:	f7fa fbb6 	bl	8007bf4 <HAL_GetTick>
 800d488:	4602      	mov	r2, r0
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d902      	bls.n	800d498 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d492:	2303      	movs	r3, #3
 800d494:	73fb      	strb	r3, [r7, #15]
        break;
 800d496:	e005      	b.n	800d4a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d498:	4b2b      	ldr	r3, [pc, #172]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1ef      	bne.n	800d484 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d149      	bne.n	800d53e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d110      	bne.n	800d4d2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d4b0:	4b25      	ldr	r3, [pc, #148]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4b2:	695b      	ldr	r3, [r3, #20]
 800d4b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d4b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	6892      	ldr	r2, [r2, #8]
 800d4c0:	0211      	lsls	r1, r2, #8
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	68d2      	ldr	r2, [r2, #12]
 800d4c6:	06d2      	lsls	r2, r2, #27
 800d4c8:	430a      	orrs	r2, r1
 800d4ca:	491f      	ldr	r1, [pc, #124]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	614b      	str	r3, [r1, #20]
 800d4d0:	e011      	b.n	800d4f6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d4d2:	4b1d      	ldr	r3, [pc, #116]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d4da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	6892      	ldr	r2, [r2, #8]
 800d4e2:	0211      	lsls	r1, r2, #8
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	6912      	ldr	r2, [r2, #16]
 800d4e8:	0852      	lsrs	r2, r2, #1
 800d4ea:	3a01      	subs	r2, #1
 800d4ec:	0652      	lsls	r2, r2, #25
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	4915      	ldr	r1, [pc, #84]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d4f6:	4b14      	ldr	r3, [pc, #80]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a13      	ldr	r2, [pc, #76]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d500:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d502:	f7fa fb77 	bl	8007bf4 <HAL_GetTick>
 800d506:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d508:	e009      	b.n	800d51e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d50a:	f7fa fb73 	bl	8007bf4 <HAL_GetTick>
 800d50e:	4602      	mov	r2, r0
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	2b02      	cmp	r3, #2
 800d516:	d902      	bls.n	800d51e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d518:	2303      	movs	r3, #3
 800d51a:	73fb      	strb	r3, [r7, #15]
          break;
 800d51c:	e005      	b.n	800d52a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d51e:	4b0a      	ldr	r3, [pc, #40]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d526:	2b00      	cmp	r3, #0
 800d528:	d0ef      	beq.n	800d50a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d106      	bne.n	800d53e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d530:	4b05      	ldr	r3, [pc, #20]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d532:	695a      	ldr	r2, [r3, #20]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	4903      	ldr	r1, [pc, #12]	; (800d548 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d53a:	4313      	orrs	r3, r2
 800d53c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	40021000 	.word	0x40021000

0800d54c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d06c      	beq.n	800d638 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7f9 fcde 	bl	8006f34 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2202      	movs	r2, #2
 800d57c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	22ca      	movs	r2, #202	; 0xca
 800d586:	625a      	str	r2, [r3, #36]	; 0x24
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2253      	movs	r2, #83	; 0x53
 800d58e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 fabe 	bl	800db12 <RTC_EnterInitMode>
 800d596:	4603      	mov	r3, r0
 800d598:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d14b      	bne.n	800d638 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	6812      	ldr	r2, [r2, #0]
 800d5aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5b2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	6899      	ldr	r1, [r3, #8]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	431a      	orrs	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	68d2      	ldr	r2, [r2, #12]
 800d5da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6919      	ldr	r1, [r3, #16]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	041a      	lsls	r2, r3, #16
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	430a      	orrs	r2, r1
 800d5ee:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fac1 	bl	800db78 <RTC_ExitInitMode>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d11b      	bne.n	800d638 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f022 0203 	bic.w	r2, r2, #3
 800d60e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	69da      	ldr	r2, [r3, #28]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	695b      	ldr	r3, [r3, #20]
 800d61e:	431a      	orrs	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	430a      	orrs	r2, r1
 800d626:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	22ff      	movs	r2, #255	; 0xff
 800d62e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <HAL_RTC_DeInit>:
  * @note   This function does not reset the RTC Backup Data registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d063      	beq.n	800d71e <HAL_RTC_DeInit+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2202      	movs	r2, #2
 800d65a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	22ca      	movs	r2, #202	; 0xca
 800d664:	625a      	str	r2, [r3, #36]	; 0x24
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2253      	movs	r2, #83	; 0x53
 800d66c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fa4f 	bl	800db12 <RTC_EnterInitMode>
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d678:	7bfb      	ldrb	r3, [r7, #15]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d14f      	bne.n	800d71e <HAL_RTC_DeInit+0xda>
    {
      /* Reset all RTC CR register bits */
      hrtc->Instance->TR = 0x00000000U;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
      hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f242 1201 	movw	r2, #8449	; 0x2101
 800d68e:	605a      	str	r2, [r3, #4]
      hrtc->Instance->CR &= 0x00000000U;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	609a      	str	r2, [r3, #8]

      hrtc->Instance->WUTR = RTC_WUTR_WUT;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6a6:	615a      	str	r2, [r3, #20]
      hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a1e      	ldr	r2, [pc, #120]	; (800d728 <HAL_RTC_DeInit+0xe4>)
 800d6ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->ALRMAR = 0x00000000U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	61da      	str	r2, [r3, #28]
      hrtc->Instance->ALRMBR = 0x00000000U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	621a      	str	r2, [r3, #32]
      hrtc->Instance->SHIFTR = 0x00000000U;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->Instance->CALR = 0x00000000U;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Instance->ALRMASSR = 0x00000000U;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Instance->ALRMBSSR = 0x00000000U;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	649a      	str	r2, [r3, #72]	; 0x48

      /* Exit initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fa49 	bl	800db78 <RTC_ExitInitMode>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	73fb      	strb	r3, [r7, #15]


      if (status == HAL_OK)
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d116      	bne.n	800d71e <HAL_RTC_DeInit+0xda>
        /* Reset TAMP registers */
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR1 = 0xFFFF0000U;
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR2 = 0x00000000U;
#else
        /* Reset Tamper configuration register */
        hrtc->Instance->TAMPCR = 0x00000000U;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Reset Option register */
        hrtc->Instance->OR = 0x00000000U;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	22ff      	movs	r2, #255	; 0xff
 800d706:	625a      	str	r2, [r3, #36]	; 0x24

        /* DeInit the low level hardware: CLOCK, NVIC.*/
        hrtc->MspDeInitCallback(hrtc);
#else
        /* De-Initialize RTC MSP */
        HAL_RTC_MspDeInit(hrtc);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7f9 fc45 	bl	8006f98 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

        hrtc->State = HAL_RTC_STATE_RESET;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Release Lock */
        __HAL_UNLOCK(hrtc);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 2020 	strb.w	r2, [r3, #32]
      }
    }
  }

  return status;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	007f00ff 	.word	0x007f00ff

0800d72c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d72c:	b590      	push	{r4, r7, lr}
 800d72e:	b087      	sub	sp, #28
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d101      	bne.n	800d746 <HAL_RTC_SetTime+0x1a>
 800d742:	2302      	movs	r3, #2
 800d744:	e08b      	b.n	800d85e <HAL_RTC_SetTime+0x132>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2201      	movs	r2, #1
 800d74a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2202      	movs	r2, #2
 800d752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	22ca      	movs	r2, #202	; 0xca
 800d75c:	625a      	str	r2, [r3, #36]	; 0x24
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2253      	movs	r2, #83	; 0x53
 800d764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f000 f9d3 	bl	800db12 <RTC_EnterInitMode>
 800d76c:	4603      	mov	r3, r0
 800d76e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d770:	7cfb      	ldrb	r3, [r7, #19]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d163      	bne.n	800d83e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d126      	bne.n	800d7ca <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2200      	movs	r2, #0
 800d78e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	4618      	mov	r0, r3
 800d796:	f000 fa2d 	bl	800dbf4 <RTC_ByteToBcd2>
 800d79a:	4603      	mov	r3, r0
 800d79c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	785b      	ldrb	r3, [r3, #1]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f000 fa26 	bl	800dbf4 <RTC_ByteToBcd2>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7ac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	789b      	ldrb	r3, [r3, #2]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 fa1e 	bl	800dbf4 <RTC_ByteToBcd2>
 800d7b8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7ba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	78db      	ldrb	r3, [r3, #3]
 800d7c2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	617b      	str	r3, [r7, #20]
 800d7c8:	e018      	b.n	800d7fc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d102      	bne.n	800d7de <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	785b      	ldrb	r3, [r3, #1]
 800d7e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d7ec:	68ba      	ldr	r2, [r7, #8]
 800d7ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	78db      	ldrb	r3, [r3, #3]
 800d7f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d806:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d80a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689a      	ldr	r2, [r3, #8]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d81a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	6899      	ldr	r1, [r3, #8]
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	68da      	ldr	r2, [r3, #12]
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	431a      	orrs	r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	430a      	orrs	r2, r1
 800d832:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f000 f99f 	bl	800db78 <RTC_ExitInitMode>
 800d83a:	4603      	mov	r3, r0
 800d83c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	22ff      	movs	r2, #255	; 0xff
 800d844:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d846:	7cfb      	ldrb	r3, [r7, #19]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d103      	bne.n	800d854 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d85c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	371c      	adds	r7, #28
 800d862:	46bd      	mov	sp, r7
 800d864:	bd90      	pop	{r4, r7, pc}

0800d866 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b086      	sub	sp, #24
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	60f8      	str	r0, [r7, #12]
 800d86e:	60b9      	str	r1, [r7, #8]
 800d870:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d894:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d898:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	0c1b      	lsrs	r3, r3, #16
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	0a1b      	lsrs	r3, r3, #8
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	0d9b      	lsrs	r3, r3, #22
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	f003 0301 	and.w	r3, r3, #1
 800d8d2:	b2da      	uxtb	r2, r3
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d11a      	bne.n	800d914 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f000 f9a6 	bl	800dc34 <RTC_Bcd2ToByte>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	785b      	ldrb	r3, [r3, #1]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 f99d 	bl	800dc34 <RTC_Bcd2ToByte>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	789b      	ldrb	r3, [r3, #2]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 f994 	bl	800dc34 <RTC_Bcd2ToByte>
 800d90c:	4603      	mov	r3, r0
 800d90e:	461a      	mov	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3718      	adds	r7, #24
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d91e:	b590      	push	{r4, r7, lr}
 800d920:	b087      	sub	sp, #28
 800d922:	af00      	add	r7, sp, #0
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d101      	bne.n	800d938 <HAL_RTC_SetDate+0x1a>
 800d934:	2302      	movs	r3, #2
 800d936:	e075      	b.n	800da24 <HAL_RTC_SetDate+0x106>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2202      	movs	r2, #2
 800d944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10e      	bne.n	800d96c <HAL_RTC_SetDate+0x4e>
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	785b      	ldrb	r3, [r3, #1]
 800d952:	f003 0310 	and.w	r3, r3, #16
 800d956:	2b00      	cmp	r3, #0
 800d958:	d008      	beq.n	800d96c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	785b      	ldrb	r3, [r3, #1]
 800d95e:	f023 0310 	bic.w	r3, r3, #16
 800d962:	b2db      	uxtb	r3, r3
 800d964:	330a      	adds	r3, #10
 800d966:	b2da      	uxtb	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d11c      	bne.n	800d9ac <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	78db      	ldrb	r3, [r3, #3]
 800d976:	4618      	mov	r0, r3
 800d978:	f000 f93c 	bl	800dbf4 <RTC_ByteToBcd2>
 800d97c:	4603      	mov	r3, r0
 800d97e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	785b      	ldrb	r3, [r3, #1]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 f935 	bl	800dbf4 <RTC_ByteToBcd2>
 800d98a:	4603      	mov	r3, r0
 800d98c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d98e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	789b      	ldrb	r3, [r3, #2]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f92d 	bl	800dbf4 <RTC_ByteToBcd2>
 800d99a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d99c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	617b      	str	r3, [r7, #20]
 800d9aa:	e00e      	b.n	800d9ca <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	78db      	ldrb	r3, [r3, #3]
 800d9b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	785b      	ldrb	r3, [r3, #1]
 800d9b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9b8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d9be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	22ca      	movs	r2, #202	; 0xca
 800d9d0:	625a      	str	r2, [r3, #36]	; 0x24
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2253      	movs	r2, #83	; 0x53
 800d9d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f000 f899 	bl	800db12 <RTC_EnterInitMode>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d9e4:	7cfb      	ldrb	r3, [r7, #19]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10c      	bne.n	800da04 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 f8bc 	bl	800db78 <RTC_ExitInitMode>
 800da00:	4603      	mov	r3, r0
 800da02:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	22ff      	movs	r2, #255	; 0xff
 800da0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da0c:	7cfb      	ldrb	r3, [r7, #19]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d103      	bne.n	800da1a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da22:	7cfb      	ldrb	r3, [r7, #19]
}
 800da24:	4618      	mov	r0, r3
 800da26:	371c      	adds	r7, #28
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd90      	pop	{r4, r7, pc}

0800da2c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	0c1b      	lsrs	r3, r3, #16
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	0a1b      	lsrs	r3, r3, #8
 800da56:	b2db      	uxtb	r3, r3
 800da58:	f003 031f 	and.w	r3, r3, #31
 800da5c:	b2da      	uxtb	r2, r3
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	0b5b      	lsrs	r3, r3, #13
 800da74:	b2db      	uxtb	r3, r3
 800da76:	f003 0307 	and.w	r3, r3, #7
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d11a      	bne.n	800dabc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	78db      	ldrb	r3, [r3, #3]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 f8d2 	bl	800dc34 <RTC_Bcd2ToByte>
 800da90:	4603      	mov	r3, r0
 800da92:	461a      	mov	r2, r3
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	785b      	ldrb	r3, [r3, #1]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 f8c9 	bl	800dc34 <RTC_Bcd2ToByte>
 800daa2:	4603      	mov	r3, r0
 800daa4:	461a      	mov	r2, r3
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	789b      	ldrb	r3, [r3, #2]
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 f8c0 	bl	800dc34 <RTC_Bcd2ToByte>
 800dab4:	4603      	mov	r3, r0
 800dab6:	461a      	mov	r2, r3
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3718      	adds	r7, #24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b084      	sub	sp, #16
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68da      	ldr	r2, [r3, #12]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dadc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800dade:	f7fa f889 	bl	8007bf4 <HAL_GetTick>
 800dae2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dae4:	e009      	b.n	800dafa <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dae6:	f7fa f885 	bl	8007bf4 <HAL_GetTick>
 800daea:	4602      	mov	r2, r0
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800daf4:	d901      	bls.n	800dafa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800daf6:	2303      	movs	r3, #3
 800daf8:	e007      	b.n	800db0a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	f003 0320 	and.w	r3, r3, #32
 800db04:	2b00      	cmp	r3, #0
 800db06:	d0ee      	beq.n	800dae6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b084      	sub	sp, #16
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d120      	bne.n	800db6e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f04f 32ff 	mov.w	r2, #4294967295
 800db34:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800db36:	f7fa f85d 	bl	8007bf4 <HAL_GetTick>
 800db3a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db3c:	e00d      	b.n	800db5a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800db3e:	f7fa f859 	bl	8007bf4 <HAL_GetTick>
 800db42:	4602      	mov	r2, r0
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db4c:	d905      	bls.n	800db5a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800db4e:	2303      	movs	r3, #3
 800db50:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2203      	movs	r2, #3
 800db56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db64:	2b00      	cmp	r3, #0
 800db66:	d102      	bne.n	800db6e <RTC_EnterInitMode+0x5c>
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d1e7      	bne.n	800db3e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800db84:	4b1a      	ldr	r3, [pc, #104]	; (800dbf0 <RTC_ExitInitMode+0x78>)
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	4a19      	ldr	r2, [pc, #100]	; (800dbf0 <RTC_ExitInitMode+0x78>)
 800db8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db8e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800db90:	4b17      	ldr	r3, [pc, #92]	; (800dbf0 <RTC_ExitInitMode+0x78>)
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	f003 0320 	and.w	r3, r3, #32
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10c      	bne.n	800dbb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff ff92 	bl	800dac6 <HAL_RTC_WaitForSynchro>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d01e      	beq.n	800dbe6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2203      	movs	r2, #3
 800dbac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dbb0:	2303      	movs	r3, #3
 800dbb2:	73fb      	strb	r3, [r7, #15]
 800dbb4:	e017      	b.n	800dbe6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbb6:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <RTC_ExitInitMode+0x78>)
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	4a0d      	ldr	r2, [pc, #52]	; (800dbf0 <RTC_ExitInitMode+0x78>)
 800dbbc:	f023 0320 	bic.w	r3, r3, #32
 800dbc0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7ff ff7f 	bl	800dac6 <HAL_RTC_WaitForSynchro>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d005      	beq.n	800dbda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2203      	movs	r2, #3
 800dbd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dbd6:	2303      	movs	r3, #3
 800dbd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbda:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <RTC_ExitInitMode+0x78>)
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	4a04      	ldr	r2, [pc, #16]	; (800dbf0 <RTC_ExitInitMode+0x78>)
 800dbe0:	f043 0320 	orr.w	r3, r3, #32
 800dbe4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	40002800 	.word	0x40002800

0800dbf4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800dc06:	e005      	b.n	800dc14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
 800dc10:	3b0a      	subs	r3, #10
 800dc12:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800dc14:	7afb      	ldrb	r3, [r7, #11]
 800dc16:	2b09      	cmp	r3, #9
 800dc18:	d8f6      	bhi.n	800dc08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	011b      	lsls	r3, r3, #4
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	7afb      	ldrb	r3, [r7, #11]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	b2db      	uxtb	r3, r3
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dc3e:	79fb      	ldrb	r3, [r7, #7]
 800dc40:	091b      	lsrs	r3, r3, #4
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	461a      	mov	r2, r3
 800dc46:	0092      	lsls	r2, r2, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	f003 030f 	and.w	r3, r3, #15
 800dc54:	b2da      	uxtb	r2, r3
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
 800dc58:	4413      	add	r3, r2
 800dc5a:	b2db      	uxtb	r3, r3
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d101      	bne.n	800dc7e <HAL_RTCEx_EnableBypassShadow+0x16>
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	e024      	b.n	800dcc8 <HAL_RTCEx_EnableBypassShadow+0x60>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2202      	movs	r2, #2
 800dc8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	22ca      	movs	r2, #202	; 0xca
 800dc94:	625a      	str	r2, [r3, #36]	; 0x24
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2253      	movs	r2, #83	; 0x53
 800dc9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	689a      	ldr	r2, [r3, #8]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f042 0220 	orr.w	r2, r2, #32
 800dcac:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	22ff      	movs	r2, #255	; 0xff
 800dcb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d101      	bne.n	800dce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dce2:	2301      	movs	r3, #1
 800dce4:	e095      	b.n	800de12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d108      	bne.n	800dd00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcf6:	d009      	beq.n	800dd0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	61da      	str	r2, [r3, #28]
 800dcfe:	e005      	b.n	800dd0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d106      	bne.n	800dd2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7f9 f952 	bl	8006fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd4c:	d902      	bls.n	800dd54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60fb      	str	r3, [r7, #12]
 800dd52:	e002      	b.n	800dd5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dd62:	d007      	beq.n	800dd74 <HAL_SPI_Init+0xa0>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd6c:	d002      	beq.n	800dd74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dd84:	431a      	orrs	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	f003 0302 	and.w	r3, r3, #2
 800dd8e:	431a      	orrs	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	431a      	orrs	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dda2:	431a      	orrs	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	69db      	ldr	r3, [r3, #28]
 800dda8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ddac:	431a      	orrs	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddb6:	ea42 0103 	orr.w	r1, r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	430a      	orrs	r2, r1
 800ddc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	0c1b      	lsrs	r3, r3, #16
 800ddd0:	f003 0204 	and.w	r2, r3, #4
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd8:	f003 0310 	and.w	r3, r3, #16
 800dddc:	431a      	orrs	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde2:	f003 0308 	and.w	r3, r3, #8
 800dde6:	431a      	orrs	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ddf0:	ea42 0103 	orr.w	r1, r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	430a      	orrs	r2, r1
 800de00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b088      	sub	sp, #32
 800de1e:	af00      	add	r7, sp, #0
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	60b9      	str	r1, [r7, #8]
 800de24:	603b      	str	r3, [r7, #0]
 800de26:	4613      	mov	r3, r2
 800de28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de34:	2b01      	cmp	r3, #1
 800de36:	d101      	bne.n	800de3c <HAL_SPI_Transmit+0x22>
 800de38:	2302      	movs	r3, #2
 800de3a:	e158      	b.n	800e0ee <HAL_SPI_Transmit+0x2d4>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de44:	f7f9 fed6 	bl	8007bf4 <HAL_GetTick>
 800de48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de4a:	88fb      	ldrh	r3, [r7, #6]
 800de4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b01      	cmp	r3, #1
 800de58:	d002      	beq.n	800de60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de5a:	2302      	movs	r3, #2
 800de5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de5e:	e13d      	b.n	800e0dc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <HAL_SPI_Transmit+0x52>
 800de66:	88fb      	ldrh	r3, [r7, #6]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d102      	bne.n	800de72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de70:	e134      	b.n	800e0dc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2203      	movs	r2, #3
 800de76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	88fa      	ldrh	r2, [r7, #6]
 800de8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	88fa      	ldrh	r2, [r7, #6]
 800de90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2200      	movs	r2, #0
 800deac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2200      	movs	r2, #0
 800deb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800debc:	d10f      	bne.n	800dede <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800decc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dedc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dee8:	2b40      	cmp	r3, #64	; 0x40
 800deea:	d007      	beq.n	800defc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800defa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df04:	d94b      	bls.n	800df9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d002      	beq.n	800df14 <HAL_SPI_Transmit+0xfa>
 800df0e:	8afb      	ldrh	r3, [r7, #22]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d13e      	bne.n	800df92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df18:	881a      	ldrh	r2, [r3, #0]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df24:	1c9a      	adds	r2, r3, #2
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df2e:	b29b      	uxth	r3, r3
 800df30:	3b01      	subs	r3, #1
 800df32:	b29a      	uxth	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df38:	e02b      	b.n	800df92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f003 0302 	and.w	r3, r3, #2
 800df44:	2b02      	cmp	r3, #2
 800df46:	d112      	bne.n	800df6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4c:	881a      	ldrh	r2, [r3, #0]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df58:	1c9a      	adds	r2, r3, #2
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df62:	b29b      	uxth	r3, r3
 800df64:	3b01      	subs	r3, #1
 800df66:	b29a      	uxth	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df6c:	e011      	b.n	800df92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df6e:	f7f9 fe41 	bl	8007bf4 <HAL_GetTick>
 800df72:	4602      	mov	r2, r0
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d803      	bhi.n	800df86 <HAL_SPI_Transmit+0x16c>
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df84:	d102      	bne.n	800df8c <HAL_SPI_Transmit+0x172>
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d102      	bne.n	800df92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df90:	e0a4      	b.n	800e0dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df96:	b29b      	uxth	r3, r3
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1ce      	bne.n	800df3a <HAL_SPI_Transmit+0x120>
 800df9c:	e07c      	b.n	800e098 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d002      	beq.n	800dfac <HAL_SPI_Transmit+0x192>
 800dfa6:	8afb      	ldrh	r3, [r7, #22]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d170      	bne.n	800e08e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d912      	bls.n	800dfdc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfba:	881a      	ldrh	r2, [r3, #0]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc6:	1c9a      	adds	r2, r3, #2
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	3b02      	subs	r3, #2
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfda:	e058      	b.n	800e08e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	330c      	adds	r3, #12
 800dfe6:	7812      	ldrb	r2, [r2, #0]
 800dfe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	3b01      	subs	r3, #1
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e002:	e044      	b.n	800e08e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	f003 0302 	and.w	r3, r3, #2
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d12b      	bne.n	800e06a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e016:	b29b      	uxth	r3, r3
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d912      	bls.n	800e042 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e020:	881a      	ldrh	r2, [r3, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02c:	1c9a      	adds	r2, r3, #2
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e036:	b29b      	uxth	r3, r3
 800e038:	3b02      	subs	r3, #2
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e040:	e025      	b.n	800e08e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	330c      	adds	r3, #12
 800e04c:	7812      	ldrb	r2, [r2, #0]
 800e04e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e054:	1c5a      	adds	r2, r3, #1
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e05e:	b29b      	uxth	r3, r3
 800e060:	3b01      	subs	r3, #1
 800e062:	b29a      	uxth	r2, r3
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e068:	e011      	b.n	800e08e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e06a:	f7f9 fdc3 	bl	8007bf4 <HAL_GetTick>
 800e06e:	4602      	mov	r2, r0
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	1ad3      	subs	r3, r2, r3
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	429a      	cmp	r2, r3
 800e078:	d803      	bhi.n	800e082 <HAL_SPI_Transmit+0x268>
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e080:	d102      	bne.n	800e088 <HAL_SPI_Transmit+0x26e>
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d102      	bne.n	800e08e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e088:	2303      	movs	r3, #3
 800e08a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e08c:	e026      	b.n	800e0dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e092:	b29b      	uxth	r3, r3
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1b5      	bne.n	800e004 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e098:	69ba      	ldr	r2, [r7, #24]
 800e09a:	6839      	ldr	r1, [r7, #0]
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 fcdf 	bl	800ea60 <SPI_EndRxTxTransaction>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2220      	movs	r2, #32
 800e0ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10a      	bne.n	800e0cc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	613b      	str	r3, [r7, #16]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	613b      	str	r3, [r7, #16]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	613b      	str	r3, [r7, #16]
 800e0ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	77fb      	strb	r3, [r7, #31]
 800e0d8:	e000      	b.n	800e0dc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e0da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e0ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3720      	adds	r7, #32
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b088      	sub	sp, #32
 800e0fa:	af02      	add	r7, sp, #8
 800e0fc:	60f8      	str	r0, [r7, #12]
 800e0fe:	60b9      	str	r1, [r7, #8]
 800e100:	603b      	str	r3, [r7, #0]
 800e102:	4613      	mov	r3, r2
 800e104:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e112:	d112      	bne.n	800e13a <HAL_SPI_Receive+0x44>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10e      	bne.n	800e13a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2204      	movs	r2, #4
 800e120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e124:	88fa      	ldrh	r2, [r7, #6]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	4613      	mov	r3, r2
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	68b9      	ldr	r1, [r7, #8]
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f000 f910 	bl	800e356 <HAL_SPI_TransmitReceive>
 800e136:	4603      	mov	r3, r0
 800e138:	e109      	b.n	800e34e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e140:	2b01      	cmp	r3, #1
 800e142:	d101      	bne.n	800e148 <HAL_SPI_Receive+0x52>
 800e144:	2302      	movs	r3, #2
 800e146:	e102      	b.n	800e34e <HAL_SPI_Receive+0x258>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e150:	f7f9 fd50 	bl	8007bf4 <HAL_GetTick>
 800e154:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d002      	beq.n	800e168 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e162:	2302      	movs	r3, #2
 800e164:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e166:	e0e9      	b.n	800e33c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <HAL_SPI_Receive+0x7e>
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d102      	bne.n	800e17a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e178:	e0e0      	b.n	800e33c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2204      	movs	r2, #4
 800e17e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	68ba      	ldr	r2, [r7, #8]
 800e18c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	88fa      	ldrh	r2, [r7, #6]
 800e192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	88fa      	ldrh	r2, [r7, #6]
 800e19a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1c4:	d908      	bls.n	800e1d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1d4:	605a      	str	r2, [r3, #4]
 800e1d6:	e007      	b.n	800e1e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e1e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1f0:	d10f      	bne.n	800e212 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e210:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e21c:	2b40      	cmp	r3, #64	; 0x40
 800e21e:	d007      	beq.n	800e230 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e22e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e238:	d867      	bhi.n	800e30a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e23a:	e030      	b.n	800e29e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	f003 0301 	and.w	r3, r3, #1
 800e246:	2b01      	cmp	r3, #1
 800e248:	d117      	bne.n	800e27a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f103 020c 	add.w	r2, r3, #12
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e256:	7812      	ldrb	r2, [r2, #0]
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	3b01      	subs	r3, #1
 800e270:	b29a      	uxth	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e278:	e011      	b.n	800e29e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e27a:	f7f9 fcbb 	bl	8007bf4 <HAL_GetTick>
 800e27e:	4602      	mov	r2, r0
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	429a      	cmp	r2, r3
 800e288:	d803      	bhi.n	800e292 <HAL_SPI_Receive+0x19c>
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e290:	d102      	bne.n	800e298 <HAL_SPI_Receive+0x1a2>
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e298:	2303      	movs	r3, #3
 800e29a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e29c:	e04e      	b.n	800e33c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1c8      	bne.n	800e23c <HAL_SPI_Receive+0x146>
 800e2aa:	e034      	b.n	800e316 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	f003 0301 	and.w	r3, r3, #1
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d115      	bne.n	800e2e6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68da      	ldr	r2, [r3, #12]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c4:	b292      	uxth	r2, r2
 800e2c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2cc:	1c9a      	adds	r2, r3, #2
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e2e4:	e011      	b.n	800e30a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2e6:	f7f9 fc85 	bl	8007bf4 <HAL_GetTick>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	683a      	ldr	r2, [r7, #0]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d803      	bhi.n	800e2fe <HAL_SPI_Receive+0x208>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fc:	d102      	bne.n	800e304 <HAL_SPI_Receive+0x20e>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d102      	bne.n	800e30a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e304:	2303      	movs	r3, #3
 800e306:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e308:	e018      	b.n	800e33c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e310:	b29b      	uxth	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1ca      	bne.n	800e2ac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e316:	693a      	ldr	r2, [r7, #16]
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f000 fb48 	bl	800e9b0 <SPI_EndRxTransaction>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d002      	beq.n	800e32c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2220      	movs	r2, #32
 800e32a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	75fb      	strb	r3, [r7, #23]
 800e338:	e000      	b.n	800e33c <HAL_SPI_Receive+0x246>
  }

error :
 800e33a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3718      	adds	r7, #24
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b08a      	sub	sp, #40	; 0x28
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	607a      	str	r2, [r7, #4]
 800e362:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e364:	2301      	movs	r3, #1
 800e366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e368:	2300      	movs	r3, #0
 800e36a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e374:	2b01      	cmp	r3, #1
 800e376:	d101      	bne.n	800e37c <HAL_SPI_TransmitReceive+0x26>
 800e378:	2302      	movs	r3, #2
 800e37a:	e1fb      	b.n	800e774 <HAL_SPI_TransmitReceive+0x41e>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e384:	f7f9 fc36 	bl	8007bf4 <HAL_GetTick>
 800e388:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e390:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e398:	887b      	ldrh	r3, [r7, #2]
 800e39a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e39c:	887b      	ldrh	r3, [r7, #2]
 800e39e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e3a0:	7efb      	ldrb	r3, [r7, #27]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d00e      	beq.n	800e3c4 <HAL_SPI_TransmitReceive+0x6e>
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3ac:	d106      	bne.n	800e3bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d102      	bne.n	800e3bc <HAL_SPI_TransmitReceive+0x66>
 800e3b6:	7efb      	ldrb	r3, [r7, #27]
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d003      	beq.n	800e3c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e3bc:	2302      	movs	r3, #2
 800e3be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3c2:	e1cd      	b.n	800e760 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d005      	beq.n	800e3d6 <HAL_SPI_TransmitReceive+0x80>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d002      	beq.n	800e3d6 <HAL_SPI_TransmitReceive+0x80>
 800e3d0:	887b      	ldrh	r3, [r7, #2]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d103      	bne.n	800e3de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3dc:	e1c0      	b.n	800e760 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b04      	cmp	r3, #4
 800e3e8:	d003      	beq.n	800e3f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2205      	movs	r2, #5
 800e3ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	887a      	ldrh	r2, [r7, #2]
 800e402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	887a      	ldrh	r2, [r7, #2]
 800e40a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	887a      	ldrh	r2, [r7, #2]
 800e418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	887a      	ldrh	r2, [r7, #2]
 800e41e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2200      	movs	r2, #0
 800e424:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e434:	d802      	bhi.n	800e43c <HAL_SPI_TransmitReceive+0xe6>
 800e436:	8a3b      	ldrh	r3, [r7, #16]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d908      	bls.n	800e44e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	685a      	ldr	r2, [r3, #4]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e44a:	605a      	str	r2, [r3, #4]
 800e44c:	e007      	b.n	800e45e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	685a      	ldr	r2, [r3, #4]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e45c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e468:	2b40      	cmp	r3, #64	; 0x40
 800e46a:	d007      	beq.n	800e47c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e47a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e484:	d97c      	bls.n	800e580 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d002      	beq.n	800e494 <HAL_SPI_TransmitReceive+0x13e>
 800e48e:	8a7b      	ldrh	r3, [r7, #18]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d169      	bne.n	800e568 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e498:	881a      	ldrh	r2, [r3, #0]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a4:	1c9a      	adds	r2, r3, #2
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4b8:	e056      	b.n	800e568 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	f003 0302 	and.w	r3, r3, #2
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d11b      	bne.n	800e500 <HAL_SPI_TransmitReceive+0x1aa>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d016      	beq.n	800e500 <HAL_SPI_TransmitReceive+0x1aa>
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d113      	bne.n	800e500 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4dc:	881a      	ldrh	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e8:	1c9a      	adds	r2, r3, #2
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d11c      	bne.n	800e548 <HAL_SPI_TransmitReceive+0x1f2>
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e514:	b29b      	uxth	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d016      	beq.n	800e548 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68da      	ldr	r2, [r3, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e524:	b292      	uxth	r2, r2
 800e526:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e52c:	1c9a      	adds	r2, r3, #2
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3b01      	subs	r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e544:	2301      	movs	r3, #1
 800e546:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e548:	f7f9 fb54 	bl	8007bf4 <HAL_GetTick>
 800e54c:	4602      	mov	r2, r0
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e554:	429a      	cmp	r2, r3
 800e556:	d807      	bhi.n	800e568 <HAL_SPI_TransmitReceive+0x212>
 800e558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55e:	d003      	beq.n	800e568 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e560:	2303      	movs	r3, #3
 800e562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e566:	e0fb      	b.n	800e760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1a3      	bne.n	800e4ba <HAL_SPI_TransmitReceive+0x164>
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e578:	b29b      	uxth	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d19d      	bne.n	800e4ba <HAL_SPI_TransmitReceive+0x164>
 800e57e:	e0df      	b.n	800e740 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d003      	beq.n	800e590 <HAL_SPI_TransmitReceive+0x23a>
 800e588:	8a7b      	ldrh	r3, [r7, #18]
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	f040 80cb 	bne.w	800e726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e594:	b29b      	uxth	r3, r3
 800e596:	2b01      	cmp	r3, #1
 800e598:	d912      	bls.n	800e5c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59e:	881a      	ldrh	r2, [r3, #0]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5aa:	1c9a      	adds	r2, r3, #2
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	3b02      	subs	r3, #2
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5be:	e0b2      	b.n	800e726 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	330c      	adds	r3, #12
 800e5ca:	7812      	ldrb	r2, [r2, #0]
 800e5cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5e6:	e09e      	b.n	800e726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f003 0302 	and.w	r3, r3, #2
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	d134      	bne.n	800e660 <HAL_SPI_TransmitReceive+0x30a>
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d02f      	beq.n	800e660 <HAL_SPI_TransmitReceive+0x30a>
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	2b01      	cmp	r3, #1
 800e604:	d12c      	bne.n	800e660 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d912      	bls.n	800e636 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e614:	881a      	ldrh	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e620:	1c9a      	adds	r2, r3, #2
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	3b02      	subs	r3, #2
 800e62e:	b29a      	uxth	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e634:	e012      	b.n	800e65c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	330c      	adds	r3, #12
 800e640:	7812      	ldrb	r2, [r2, #0]
 800e642:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e648:	1c5a      	adds	r2, r3, #1
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e652:	b29b      	uxth	r3, r3
 800e654:	3b01      	subs	r3, #1
 800e656:	b29a      	uxth	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e65c:	2300      	movs	r3, #0
 800e65e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d148      	bne.n	800e700 <HAL_SPI_TransmitReceive+0x3aa>
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e674:	b29b      	uxth	r3, r3
 800e676:	2b00      	cmp	r3, #0
 800e678:	d042      	beq.n	800e700 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e680:	b29b      	uxth	r3, r3
 800e682:	2b01      	cmp	r3, #1
 800e684:	d923      	bls.n	800e6ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68da      	ldr	r2, [r3, #12]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e690:	b292      	uxth	r2, r2
 800e692:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e698:	1c9a      	adds	r2, r3, #2
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	3b02      	subs	r3, #2
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d81f      	bhi.n	800e6fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e6ca:	605a      	str	r2, [r3, #4]
 800e6cc:	e016      	b.n	800e6fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f103 020c 	add.w	r2, r3, #12
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6da:	7812      	ldrb	r2, [r2, #0]
 800e6dc:	b2d2      	uxtb	r2, r2
 800e6de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e4:	1c5a      	adds	r2, r3, #1
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e700:	f7f9 fa78 	bl	8007bf4 <HAL_GetTick>
 800e704:	4602      	mov	r2, r0
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d803      	bhi.n	800e718 <HAL_SPI_TransmitReceive+0x3c2>
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e716:	d102      	bne.n	800e71e <HAL_SPI_TransmitReceive+0x3c8>
 800e718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d103      	bne.n	800e726 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e71e:	2303      	movs	r3, #3
 800e720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e724:	e01c      	b.n	800e760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f47f af5b 	bne.w	800e5e8 <HAL_SPI_TransmitReceive+0x292>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e738:	b29b      	uxth	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	f47f af54 	bne.w	800e5e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f000 f98b 	bl	800ea60 <SPI_EndRxTxTransaction>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d006      	beq.n	800e75e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2220      	movs	r2, #32
 800e75a:	661a      	str	r2, [r3, #96]	; 0x60
 800e75c:	e000      	b.n	800e760 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e75e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e774:	4618      	mov	r0, r3
 800e776:	3728      	adds	r7, #40	; 0x28
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b088      	sub	sp, #32
 800e780:	af00      	add	r7, sp, #0
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	603b      	str	r3, [r7, #0]
 800e788:	4613      	mov	r3, r2
 800e78a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e78c:	f7f9 fa32 	bl	8007bf4 <HAL_GetTick>
 800e790:	4602      	mov	r2, r0
 800e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e794:	1a9b      	subs	r3, r3, r2
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	4413      	add	r3, r2
 800e79a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e79c:	f7f9 fa2a 	bl	8007bf4 <HAL_GetTick>
 800e7a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e7a2:	4b39      	ldr	r3, [pc, #228]	; (800e888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	015b      	lsls	r3, r3, #5
 800e7a8:	0d1b      	lsrs	r3, r3, #20
 800e7aa:	69fa      	ldr	r2, [r7, #28]
 800e7ac:	fb02 f303 	mul.w	r3, r2, r3
 800e7b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7b2:	e054      	b.n	800e85e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ba:	d050      	beq.n	800e85e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e7bc:	f7f9 fa1a 	bl	8007bf4 <HAL_GetTick>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	1ad3      	subs	r3, r2, r3
 800e7c6:	69fa      	ldr	r2, [r7, #28]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d902      	bls.n	800e7d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d13d      	bne.n	800e84e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	685a      	ldr	r2, [r3, #4]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e7e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7ea:	d111      	bne.n	800e810 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7f4:	d004      	beq.n	800e800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7fe:	d107      	bne.n	800e810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e80e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e818:	d10f      	bne.n	800e83a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e828:	601a      	str	r2, [r3, #0]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2200      	movs	r2, #0
 800e846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e017      	b.n	800e87e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d101      	bne.n	800e858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e854:	2300      	movs	r3, #0
 800e856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	689a      	ldr	r2, [r3, #8]
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	4013      	ands	r3, r2
 800e868:	68ba      	ldr	r2, [r7, #8]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	bf0c      	ite	eq
 800e86e:	2301      	moveq	r3, #1
 800e870:	2300      	movne	r3, #0
 800e872:	b2db      	uxtb	r3, r3
 800e874:	461a      	mov	r2, r3
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d19b      	bne.n	800e7b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3720      	adds	r7, #32
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	20000310 	.word	0x20000310

0800e88c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	60b9      	str	r1, [r7, #8]
 800e896:	607a      	str	r2, [r7, #4]
 800e898:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e89a:	f7f9 f9ab 	bl	8007bf4 <HAL_GetTick>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	1a9b      	subs	r3, r3, r2
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e8aa:	f7f9 f9a3 	bl	8007bf4 <HAL_GetTick>
 800e8ae:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8b0:	4b3e      	ldr	r3, [pc, #248]	; (800e9ac <SPI_WaitFifoStateUntilTimeout+0x120>)
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4413      	add	r3, r2
 800e8ba:	00da      	lsls	r2, r3, #3
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	0d1b      	lsrs	r3, r3, #20
 800e8c0:	69fa      	ldr	r2, [r7, #28]
 800e8c2:	fb02 f303 	mul.w	r3, r2, r3
 800e8c6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8c8:	e062      	b.n	800e990 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e8d0:	d109      	bne.n	800e8e6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d106      	bne.n	800e8e6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	330c      	adds	r3, #12
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800e8e4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ec:	d050      	beq.n	800e990 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e8ee:	f7f9 f981 	bl	8007bf4 <HAL_GetTick>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	69fa      	ldr	r2, [r7, #28]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d902      	bls.n	800e904 <SPI_WaitFifoStateUntilTimeout+0x78>
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d13d      	bne.n	800e980 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e91c:	d111      	bne.n	800e942 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e926:	d004      	beq.n	800e932 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	689b      	ldr	r3, [r3, #8]
 800e92c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e930:	d107      	bne.n	800e942 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e940:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e94a:	d10f      	bne.n	800e96c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e96a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e010      	b.n	800e9a2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d101      	bne.n	800e98a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800e986:	2300      	movs	r3, #0
 800e988:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	689a      	ldr	r2, [r3, #8]
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	4013      	ands	r3, r2
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d194      	bne.n	800e8ca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3720      	adds	r7, #32
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20000310 	.word	0x20000310

0800e9b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9c4:	d111      	bne.n	800e9ea <SPI_EndRxTransaction+0x3a>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ce:	d004      	beq.n	800e9da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9d8:	d107      	bne.n	800e9ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	9300      	str	r3, [sp, #0]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2180      	movs	r1, #128	; 0x80
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7ff fec1 	bl	800e77c <SPI_WaitFlagStateUntilTimeout>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d007      	beq.n	800ea10 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea04:	f043 0220 	orr.w	r2, r3, #32
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea0c:	2303      	movs	r3, #3
 800ea0e:	e023      	b.n	800ea58 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea18:	d11d      	bne.n	800ea56 <SPI_EndRxTransaction+0xa6>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea22:	d004      	beq.n	800ea2e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea2c:	d113      	bne.n	800ea56 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f7ff ff26 	bl	800e88c <SPI_WaitFifoStateUntilTimeout>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d007      	beq.n	800ea56 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea4a:	f043 0220 	orr.w	r2, r3, #32
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ea52:	2303      	movs	r3, #3
 800ea54:	e000      	b.n	800ea58 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af02      	add	r7, sp, #8
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f7ff ff07 	bl	800e88c <SPI_WaitFifoStateUntilTimeout>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d007      	beq.n	800ea94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea88:	f043 0220 	orr.w	r2, r3, #32
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea90:	2303      	movs	r3, #3
 800ea92:	e027      	b.n	800eae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	2180      	movs	r1, #128	; 0x80
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f7ff fe6c 	bl	800e77c <SPI_WaitFlagStateUntilTimeout>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d007      	beq.n	800eaba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaae:	f043 0220 	orr.w	r2, r3, #32
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eab6:	2303      	movs	r3, #3
 800eab8:	e014      	b.n	800eae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7ff fee0 	bl	800e88c <SPI_WaitFifoStateUntilTimeout>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d007      	beq.n	800eae2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ead6:	f043 0220 	orr.w	r2, r3, #32
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eade:	2303      	movs	r3, #3
 800eae0:	e000      	b.n	800eae4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e049      	b.n	800eb92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7f8 fb62 	bl	80071dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3304      	adds	r3, #4
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	f000 fcc4 	bl	800f4b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3708      	adds	r7, #8
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
	...

0800eb9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d001      	beq.n	800ebb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e047      	b.n	800ec44 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2202      	movs	r2, #2
 800ebb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a23      	ldr	r2, [pc, #140]	; (800ec50 <HAL_TIM_Base_Start+0xb4>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d01d      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebce:	d018      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a1f      	ldr	r2, [pc, #124]	; (800ec54 <HAL_TIM_Base_Start+0xb8>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d013      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a1e      	ldr	r2, [pc, #120]	; (800ec58 <HAL_TIM_Base_Start+0xbc>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d00e      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a1c      	ldr	r2, [pc, #112]	; (800ec5c <HAL_TIM_Base_Start+0xc0>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d009      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a1b      	ldr	r2, [pc, #108]	; (800ec60 <HAL_TIM_Base_Start+0xc4>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d004      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a19      	ldr	r2, [pc, #100]	; (800ec64 <HAL_TIM_Base_Start+0xc8>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d115      	bne.n	800ec2e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	689a      	ldr	r2, [r3, #8]
 800ec08:	4b17      	ldr	r3, [pc, #92]	; (800ec68 <HAL_TIM_Base_Start+0xcc>)
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b06      	cmp	r3, #6
 800ec12:	d015      	beq.n	800ec40 <HAL_TIM_Base_Start+0xa4>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec1a:	d011      	beq.n	800ec40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f042 0201 	orr.w	r2, r2, #1
 800ec2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2c:	e008      	b.n	800ec40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f042 0201 	orr.w	r2, r2, #1
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	e000      	b.n	800ec42 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3714      	adds	r7, #20
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	40012c00 	.word	0x40012c00
 800ec54:	40000400 	.word	0x40000400
 800ec58:	40000800 	.word	0x40000800
 800ec5c:	40000c00 	.word	0x40000c00
 800ec60:	40013400 	.word	0x40013400
 800ec64:	40014000 	.word	0x40014000
 800ec68:	00010007 	.word	0x00010007

0800ec6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d001      	beq.n	800ec84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e04f      	b.n	800ed24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2202      	movs	r2, #2
 800ec88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68da      	ldr	r2, [r3, #12]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f042 0201 	orr.w	r2, r2, #1
 800ec9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a23      	ldr	r2, [pc, #140]	; (800ed30 <HAL_TIM_Base_Start_IT+0xc4>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d01d      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecae:	d018      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a1f      	ldr	r2, [pc, #124]	; (800ed34 <HAL_TIM_Base_Start_IT+0xc8>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d013      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a1e      	ldr	r2, [pc, #120]	; (800ed38 <HAL_TIM_Base_Start_IT+0xcc>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d00e      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a1c      	ldr	r2, [pc, #112]	; (800ed3c <HAL_TIM_Base_Start_IT+0xd0>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d009      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a1b      	ldr	r2, [pc, #108]	; (800ed40 <HAL_TIM_Base_Start_IT+0xd4>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d004      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a19      	ldr	r2, [pc, #100]	; (800ed44 <HAL_TIM_Base_Start_IT+0xd8>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d115      	bne.n	800ed0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	689a      	ldr	r2, [r3, #8]
 800ece8:	4b17      	ldr	r3, [pc, #92]	; (800ed48 <HAL_TIM_Base_Start_IT+0xdc>)
 800ecea:	4013      	ands	r3, r2
 800ecec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2b06      	cmp	r3, #6
 800ecf2:	d015      	beq.n	800ed20 <HAL_TIM_Base_Start_IT+0xb4>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecfa:	d011      	beq.n	800ed20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f042 0201 	orr.w	r2, r2, #1
 800ed0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed0c:	e008      	b.n	800ed20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f042 0201 	orr.w	r2, r2, #1
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	e000      	b.n	800ed22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr
 800ed30:	40012c00 	.word	0x40012c00
 800ed34:	40000400 	.word	0x40000400
 800ed38:	40000800 	.word	0x40000800
 800ed3c:	40000c00 	.word	0x40000c00
 800ed40:	40013400 	.word	0x40013400
 800ed44:	40014000 	.word	0x40014000
 800ed48:	00010007 	.word	0x00010007

0800ed4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e049      	b.n	800edf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d106      	bne.n	800ed78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7f8 fa00 	bl	8007178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2202      	movs	r2, #2
 800ed7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	3304      	adds	r3, #4
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	f000 fb94 	bl	800f4b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
	...

0800edfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d109      	bne.n	800ee20 <HAL_TIM_PWM_Start+0x24>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	bf14      	ite	ne
 800ee18:	2301      	movne	r3, #1
 800ee1a:	2300      	moveq	r3, #0
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	e03c      	b.n	800ee9a <HAL_TIM_PWM_Start+0x9e>
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	2b04      	cmp	r3, #4
 800ee24:	d109      	bne.n	800ee3a <HAL_TIM_PWM_Start+0x3e>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	bf14      	ite	ne
 800ee32:	2301      	movne	r3, #1
 800ee34:	2300      	moveq	r3, #0
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	e02f      	b.n	800ee9a <HAL_TIM_PWM_Start+0x9e>
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b08      	cmp	r3, #8
 800ee3e:	d109      	bne.n	800ee54 <HAL_TIM_PWM_Start+0x58>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	bf14      	ite	ne
 800ee4c:	2301      	movne	r3, #1
 800ee4e:	2300      	moveq	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	e022      	b.n	800ee9a <HAL_TIM_PWM_Start+0x9e>
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	2b0c      	cmp	r3, #12
 800ee58:	d109      	bne.n	800ee6e <HAL_TIM_PWM_Start+0x72>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	bf14      	ite	ne
 800ee66:	2301      	movne	r3, #1
 800ee68:	2300      	moveq	r3, #0
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	e015      	b.n	800ee9a <HAL_TIM_PWM_Start+0x9e>
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2b10      	cmp	r3, #16
 800ee72:	d109      	bne.n	800ee88 <HAL_TIM_PWM_Start+0x8c>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	bf14      	ite	ne
 800ee80:	2301      	movne	r3, #1
 800ee82:	2300      	moveq	r3, #0
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	e008      	b.n	800ee9a <HAL_TIM_PWM_Start+0x9e>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	bf14      	ite	ne
 800ee94:	2301      	movne	r3, #1
 800ee96:	2300      	moveq	r3, #0
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e09c      	b.n	800efdc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d104      	bne.n	800eeb2 <HAL_TIM_PWM_Start+0xb6>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eeb0:	e023      	b.n	800eefa <HAL_TIM_PWM_Start+0xfe>
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b04      	cmp	r3, #4
 800eeb6:	d104      	bne.n	800eec2 <HAL_TIM_PWM_Start+0xc6>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2202      	movs	r2, #2
 800eebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eec0:	e01b      	b.n	800eefa <HAL_TIM_PWM_Start+0xfe>
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	2b08      	cmp	r3, #8
 800eec6:	d104      	bne.n	800eed2 <HAL_TIM_PWM_Start+0xd6>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2202      	movs	r2, #2
 800eecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eed0:	e013      	b.n	800eefa <HAL_TIM_PWM_Start+0xfe>
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b0c      	cmp	r3, #12
 800eed6:	d104      	bne.n	800eee2 <HAL_TIM_PWM_Start+0xe6>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2202      	movs	r2, #2
 800eedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eee0:	e00b      	b.n	800eefa <HAL_TIM_PWM_Start+0xfe>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b10      	cmp	r3, #16
 800eee6:	d104      	bne.n	800eef2 <HAL_TIM_PWM_Start+0xf6>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2202      	movs	r2, #2
 800eeec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eef0:	e003      	b.n	800eefa <HAL_TIM_PWM_Start+0xfe>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2202      	movs	r2, #2
 800eef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2201      	movs	r2, #1
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 fe48 	bl	800fb98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a35      	ldr	r2, [pc, #212]	; (800efe4 <HAL_TIM_PWM_Start+0x1e8>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d013      	beq.n	800ef3a <HAL_TIM_PWM_Start+0x13e>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a34      	ldr	r2, [pc, #208]	; (800efe8 <HAL_TIM_PWM_Start+0x1ec>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d00e      	beq.n	800ef3a <HAL_TIM_PWM_Start+0x13e>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a32      	ldr	r2, [pc, #200]	; (800efec <HAL_TIM_PWM_Start+0x1f0>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d009      	beq.n	800ef3a <HAL_TIM_PWM_Start+0x13e>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a31      	ldr	r2, [pc, #196]	; (800eff0 <HAL_TIM_PWM_Start+0x1f4>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d004      	beq.n	800ef3a <HAL_TIM_PWM_Start+0x13e>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a2f      	ldr	r2, [pc, #188]	; (800eff4 <HAL_TIM_PWM_Start+0x1f8>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d101      	bne.n	800ef3e <HAL_TIM_PWM_Start+0x142>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e000      	b.n	800ef40 <HAL_TIM_PWM_Start+0x144>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d007      	beq.n	800ef54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a22      	ldr	r2, [pc, #136]	; (800efe4 <HAL_TIM_PWM_Start+0x1e8>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d01d      	beq.n	800ef9a <HAL_TIM_PWM_Start+0x19e>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef66:	d018      	beq.n	800ef9a <HAL_TIM_PWM_Start+0x19e>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a22      	ldr	r2, [pc, #136]	; (800eff8 <HAL_TIM_PWM_Start+0x1fc>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d013      	beq.n	800ef9a <HAL_TIM_PWM_Start+0x19e>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a21      	ldr	r2, [pc, #132]	; (800effc <HAL_TIM_PWM_Start+0x200>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d00e      	beq.n	800ef9a <HAL_TIM_PWM_Start+0x19e>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a1f      	ldr	r2, [pc, #124]	; (800f000 <HAL_TIM_PWM_Start+0x204>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d009      	beq.n	800ef9a <HAL_TIM_PWM_Start+0x19e>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4a17      	ldr	r2, [pc, #92]	; (800efe8 <HAL_TIM_PWM_Start+0x1ec>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d004      	beq.n	800ef9a <HAL_TIM_PWM_Start+0x19e>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a15      	ldr	r2, [pc, #84]	; (800efec <HAL_TIM_PWM_Start+0x1f0>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d115      	bne.n	800efc6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	689a      	ldr	r2, [r3, #8]
 800efa0:	4b18      	ldr	r3, [pc, #96]	; (800f004 <HAL_TIM_PWM_Start+0x208>)
 800efa2:	4013      	ands	r3, r2
 800efa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b06      	cmp	r3, #6
 800efaa:	d015      	beq.n	800efd8 <HAL_TIM_PWM_Start+0x1dc>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efb2:	d011      	beq.n	800efd8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f042 0201 	orr.w	r2, r2, #1
 800efc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efc4:	e008      	b.n	800efd8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f042 0201 	orr.w	r2, r2, #1
 800efd4:	601a      	str	r2, [r3, #0]
 800efd6:	e000      	b.n	800efda <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	40012c00 	.word	0x40012c00
 800efe8:	40013400 	.word	0x40013400
 800efec:	40014000 	.word	0x40014000
 800eff0:	40014400 	.word	0x40014400
 800eff4:	40014800 	.word	0x40014800
 800eff8:	40000400 	.word	0x40000400
 800effc:	40000800 	.word	0x40000800
 800f000:	40000c00 	.word	0x40000c00
 800f004:	00010007 	.word	0x00010007

0800f008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	f003 0302 	and.w	r3, r3, #2
 800f01a:	2b02      	cmp	r3, #2
 800f01c:	d122      	bne.n	800f064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	f003 0302 	and.w	r3, r3, #2
 800f028:	2b02      	cmp	r3, #2
 800f02a:	d11b      	bne.n	800f064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f06f 0202 	mvn.w	r2, #2
 800f034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	699b      	ldr	r3, [r3, #24]
 800f042:	f003 0303 	and.w	r3, r3, #3
 800f046:	2b00      	cmp	r3, #0
 800f048:	d003      	beq.n	800f052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 fa16 	bl	800f47c <HAL_TIM_IC_CaptureCallback>
 800f050:	e005      	b.n	800f05e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 fa08 	bl	800f468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fa19 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2200      	movs	r2, #0
 800f062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	691b      	ldr	r3, [r3, #16]
 800f06a:	f003 0304 	and.w	r3, r3, #4
 800f06e:	2b04      	cmp	r3, #4
 800f070:	d122      	bne.n	800f0b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	f003 0304 	and.w	r3, r3, #4
 800f07c:	2b04      	cmp	r3, #4
 800f07e:	d11b      	bne.n	800f0b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f06f 0204 	mvn.w	r2, #4
 800f088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2202      	movs	r2, #2
 800f08e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	699b      	ldr	r3, [r3, #24]
 800f096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d003      	beq.n	800f0a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 f9ec 	bl	800f47c <HAL_TIM_IC_CaptureCallback>
 800f0a4:	e005      	b.n	800f0b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 f9de 	bl	800f468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 f9ef 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	f003 0308 	and.w	r3, r3, #8
 800f0c2:	2b08      	cmp	r3, #8
 800f0c4:	d122      	bne.n	800f10c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68db      	ldr	r3, [r3, #12]
 800f0cc:	f003 0308 	and.w	r3, r3, #8
 800f0d0:	2b08      	cmp	r3, #8
 800f0d2:	d11b      	bne.n	800f10c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f06f 0208 	mvn.w	r2, #8
 800f0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2204      	movs	r2, #4
 800f0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	69db      	ldr	r3, [r3, #28]
 800f0ea:	f003 0303 	and.w	r3, r3, #3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d003      	beq.n	800f0fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f9c2 	bl	800f47c <HAL_TIM_IC_CaptureCallback>
 800f0f8:	e005      	b.n	800f106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 f9b4 	bl	800f468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f9c5 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	f003 0310 	and.w	r3, r3, #16
 800f116:	2b10      	cmp	r3, #16
 800f118:	d122      	bne.n	800f160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	f003 0310 	and.w	r3, r3, #16
 800f124:	2b10      	cmp	r3, #16
 800f126:	d11b      	bne.n	800f160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f06f 0210 	mvn.w	r2, #16
 800f130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2208      	movs	r2, #8
 800f136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	69db      	ldr	r3, [r3, #28]
 800f13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f142:	2b00      	cmp	r3, #0
 800f144:	d003      	beq.n	800f14e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f998 	bl	800f47c <HAL_TIM_IC_CaptureCallback>
 800f14c:	e005      	b.n	800f15a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 f98a 	bl	800f468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f99b 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2200      	movs	r2, #0
 800f15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	691b      	ldr	r3, [r3, #16]
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d10e      	bne.n	800f18c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d107      	bne.n	800f18c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f06f 0201 	mvn.w	r2, #1
 800f184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f7f7 fb38 	bl	80067fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	691b      	ldr	r3, [r3, #16]
 800f192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f196:	2b80      	cmp	r3, #128	; 0x80
 800f198:	d10e      	bne.n	800f1b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1a4:	2b80      	cmp	r3, #128	; 0x80
 800f1a6:	d107      	bne.n	800f1b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 fda8 	bl	800fd08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1c6:	d10e      	bne.n	800f1e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1d2:	2b80      	cmp	r3, #128	; 0x80
 800f1d4:	d107      	bne.n	800f1e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 fd9b 	bl	800fd1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1f0:	2b40      	cmp	r3, #64	; 0x40
 800f1f2:	d10e      	bne.n	800f212 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1fe:	2b40      	cmp	r3, #64	; 0x40
 800f200:	d107      	bne.n	800f212 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 f949 	bl	800f4a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	691b      	ldr	r3, [r3, #16]
 800f218:	f003 0320 	and.w	r3, r3, #32
 800f21c:	2b20      	cmp	r3, #32
 800f21e:	d10e      	bne.n	800f23e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	f003 0320 	and.w	r3, r3, #32
 800f22a:	2b20      	cmp	r3, #32
 800f22c:	d107      	bne.n	800f23e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f06f 0220 	mvn.w	r2, #32
 800f236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fd5b 	bl	800fcf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f23e:	bf00      	nop
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
	...

0800f248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d101      	bne.n	800f262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f25e:	2302      	movs	r3, #2
 800f260:	e0fd      	b.n	800f45e <HAL_TIM_PWM_ConfigChannel+0x216>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2201      	movs	r2, #1
 800f266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b14      	cmp	r3, #20
 800f26e:	f200 80f0 	bhi.w	800f452 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f272:	a201      	add	r2, pc, #4	; (adr r2, 800f278 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f278:	0800f2cd 	.word	0x0800f2cd
 800f27c:	0800f453 	.word	0x0800f453
 800f280:	0800f453 	.word	0x0800f453
 800f284:	0800f453 	.word	0x0800f453
 800f288:	0800f30d 	.word	0x0800f30d
 800f28c:	0800f453 	.word	0x0800f453
 800f290:	0800f453 	.word	0x0800f453
 800f294:	0800f453 	.word	0x0800f453
 800f298:	0800f34f 	.word	0x0800f34f
 800f29c:	0800f453 	.word	0x0800f453
 800f2a0:	0800f453 	.word	0x0800f453
 800f2a4:	0800f453 	.word	0x0800f453
 800f2a8:	0800f38f 	.word	0x0800f38f
 800f2ac:	0800f453 	.word	0x0800f453
 800f2b0:	0800f453 	.word	0x0800f453
 800f2b4:	0800f453 	.word	0x0800f453
 800f2b8:	0800f3d1 	.word	0x0800f3d1
 800f2bc:	0800f453 	.word	0x0800f453
 800f2c0:	0800f453 	.word	0x0800f453
 800f2c4:	0800f453 	.word	0x0800f453
 800f2c8:	0800f411 	.word	0x0800f411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	68b9      	ldr	r1, [r7, #8]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f000 f98a 	bl	800f5ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	699a      	ldr	r2, [r3, #24]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f042 0208 	orr.w	r2, r2, #8
 800f2e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	699a      	ldr	r2, [r3, #24]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f022 0204 	bic.w	r2, r2, #4
 800f2f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	6999      	ldr	r1, [r3, #24]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	691a      	ldr	r2, [r3, #16]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	430a      	orrs	r2, r1
 800f308:	619a      	str	r2, [r3, #24]
      break;
 800f30a:	e0a3      	b.n	800f454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68b9      	ldr	r1, [r7, #8]
 800f312:	4618      	mov	r0, r3
 800f314:	f000 f9fa 	bl	800f70c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	699a      	ldr	r2, [r3, #24]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	6999      	ldr	r1, [r3, #24]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	691b      	ldr	r3, [r3, #16]
 800f342:	021a      	lsls	r2, r3, #8
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	430a      	orrs	r2, r1
 800f34a:	619a      	str	r2, [r3, #24]
      break;
 800f34c:	e082      	b.n	800f454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68b9      	ldr	r1, [r7, #8]
 800f354:	4618      	mov	r0, r3
 800f356:	f000 fa63 	bl	800f820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	69da      	ldr	r2, [r3, #28]
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f042 0208 	orr.w	r2, r2, #8
 800f368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	69da      	ldr	r2, [r3, #28]
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f022 0204 	bic.w	r2, r2, #4
 800f378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	69d9      	ldr	r1, [r3, #28]
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	691a      	ldr	r2, [r3, #16]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	430a      	orrs	r2, r1
 800f38a:	61da      	str	r2, [r3, #28]
      break;
 800f38c:	e062      	b.n	800f454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	4618      	mov	r0, r3
 800f396:	f000 facb 	bl	800f930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	69da      	ldr	r2, [r3, #28]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	69da      	ldr	r2, [r3, #28]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	69d9      	ldr	r1, [r3, #28]
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	021a      	lsls	r2, r3, #8
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	430a      	orrs	r2, r1
 800f3cc:	61da      	str	r2, [r3, #28]
      break;
 800f3ce:	e041      	b.n	800f454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68b9      	ldr	r1, [r7, #8]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fb14 	bl	800fa04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f042 0208 	orr.w	r2, r2, #8
 800f3ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f022 0204 	bic.w	r2, r2, #4
 800f3fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	691a      	ldr	r2, [r3, #16]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	430a      	orrs	r2, r1
 800f40c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f40e:	e021      	b.n	800f454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68b9      	ldr	r1, [r7, #8]
 800f416:	4618      	mov	r0, r3
 800f418:	f000 fb58 	bl	800facc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f42a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f43a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	021a      	lsls	r2, r3, #8
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	430a      	orrs	r2, r1
 800f44e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f450:	e000      	b.n	800f454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f452:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2200      	movs	r2, #0
 800f458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3710      	adds	r7, #16
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop

0800f468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f484:	bf00      	nop
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f498:	bf00      	nop
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4ac:	bf00      	nop
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a40      	ldr	r2, [pc, #256]	; (800f5cc <TIM_Base_SetConfig+0x114>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d013      	beq.n	800f4f8 <TIM_Base_SetConfig+0x40>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4d6:	d00f      	beq.n	800f4f8 <TIM_Base_SetConfig+0x40>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a3d      	ldr	r2, [pc, #244]	; (800f5d0 <TIM_Base_SetConfig+0x118>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d00b      	beq.n	800f4f8 <TIM_Base_SetConfig+0x40>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a3c      	ldr	r2, [pc, #240]	; (800f5d4 <TIM_Base_SetConfig+0x11c>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d007      	beq.n	800f4f8 <TIM_Base_SetConfig+0x40>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a3b      	ldr	r2, [pc, #236]	; (800f5d8 <TIM_Base_SetConfig+0x120>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d003      	beq.n	800f4f8 <TIM_Base_SetConfig+0x40>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a3a      	ldr	r2, [pc, #232]	; (800f5dc <TIM_Base_SetConfig+0x124>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d108      	bne.n	800f50a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	4313      	orrs	r3, r2
 800f508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a2f      	ldr	r2, [pc, #188]	; (800f5cc <TIM_Base_SetConfig+0x114>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d01f      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f518:	d01b      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a2c      	ldr	r2, [pc, #176]	; (800f5d0 <TIM_Base_SetConfig+0x118>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d017      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a2b      	ldr	r2, [pc, #172]	; (800f5d4 <TIM_Base_SetConfig+0x11c>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d013      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a2a      	ldr	r2, [pc, #168]	; (800f5d8 <TIM_Base_SetConfig+0x120>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d00f      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a29      	ldr	r2, [pc, #164]	; (800f5dc <TIM_Base_SetConfig+0x124>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d00b      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a28      	ldr	r2, [pc, #160]	; (800f5e0 <TIM_Base_SetConfig+0x128>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d007      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a27      	ldr	r2, [pc, #156]	; (800f5e4 <TIM_Base_SetConfig+0x12c>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d003      	beq.n	800f552 <TIM_Base_SetConfig+0x9a>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4a26      	ldr	r2, [pc, #152]	; (800f5e8 <TIM_Base_SetConfig+0x130>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d108      	bne.n	800f564 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	4313      	orrs	r3, r2
 800f562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	4313      	orrs	r3, r2
 800f570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	689a      	ldr	r2, [r3, #8]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a10      	ldr	r2, [pc, #64]	; (800f5cc <TIM_Base_SetConfig+0x114>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d00f      	beq.n	800f5b0 <TIM_Base_SetConfig+0xf8>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a12      	ldr	r2, [pc, #72]	; (800f5dc <TIM_Base_SetConfig+0x124>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d00b      	beq.n	800f5b0 <TIM_Base_SetConfig+0xf8>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a11      	ldr	r2, [pc, #68]	; (800f5e0 <TIM_Base_SetConfig+0x128>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d007      	beq.n	800f5b0 <TIM_Base_SetConfig+0xf8>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a10      	ldr	r2, [pc, #64]	; (800f5e4 <TIM_Base_SetConfig+0x12c>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d003      	beq.n	800f5b0 <TIM_Base_SetConfig+0xf8>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a0f      	ldr	r2, [pc, #60]	; (800f5e8 <TIM_Base_SetConfig+0x130>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d103      	bne.n	800f5b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	691a      	ldr	r2, [r3, #16]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	615a      	str	r2, [r3, #20]
}
 800f5be:	bf00      	nop
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	40012c00 	.word	0x40012c00
 800f5d0:	40000400 	.word	0x40000400
 800f5d4:	40000800 	.word	0x40000800
 800f5d8:	40000c00 	.word	0x40000c00
 800f5dc:	40013400 	.word	0x40013400
 800f5e0:	40014000 	.word	0x40014000
 800f5e4:	40014400 	.word	0x40014400
 800f5e8:	40014800 	.word	0x40014800

0800f5ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b087      	sub	sp, #28
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	f023 0201 	bic.w	r2, r3, #1
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6a1b      	ldr	r3, [r3, #32]
 800f606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	699b      	ldr	r3, [r3, #24]
 800f612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f61e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f023 0303 	bic.w	r3, r3, #3
 800f626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	4313      	orrs	r3, r2
 800f630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	f023 0302 	bic.w	r3, r3, #2
 800f638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	697a      	ldr	r2, [r7, #20]
 800f640:	4313      	orrs	r3, r2
 800f642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4a2c      	ldr	r2, [pc, #176]	; (800f6f8 <TIM_OC1_SetConfig+0x10c>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d00f      	beq.n	800f66c <TIM_OC1_SetConfig+0x80>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4a2b      	ldr	r2, [pc, #172]	; (800f6fc <TIM_OC1_SetConfig+0x110>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d00b      	beq.n	800f66c <TIM_OC1_SetConfig+0x80>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a2a      	ldr	r2, [pc, #168]	; (800f700 <TIM_OC1_SetConfig+0x114>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d007      	beq.n	800f66c <TIM_OC1_SetConfig+0x80>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a29      	ldr	r2, [pc, #164]	; (800f704 <TIM_OC1_SetConfig+0x118>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d003      	beq.n	800f66c <TIM_OC1_SetConfig+0x80>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4a28      	ldr	r2, [pc, #160]	; (800f708 <TIM_OC1_SetConfig+0x11c>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d10c      	bne.n	800f686 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	f023 0308 	bic.w	r3, r3, #8
 800f672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	f023 0304 	bic.w	r3, r3, #4
 800f684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a1b      	ldr	r2, [pc, #108]	; (800f6f8 <TIM_OC1_SetConfig+0x10c>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d00f      	beq.n	800f6ae <TIM_OC1_SetConfig+0xc2>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a1a      	ldr	r2, [pc, #104]	; (800f6fc <TIM_OC1_SetConfig+0x110>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d00b      	beq.n	800f6ae <TIM_OC1_SetConfig+0xc2>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a19      	ldr	r2, [pc, #100]	; (800f700 <TIM_OC1_SetConfig+0x114>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d007      	beq.n	800f6ae <TIM_OC1_SetConfig+0xc2>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a18      	ldr	r2, [pc, #96]	; (800f704 <TIM_OC1_SetConfig+0x118>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d003      	beq.n	800f6ae <TIM_OC1_SetConfig+0xc2>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4a17      	ldr	r2, [pc, #92]	; (800f708 <TIM_OC1_SetConfig+0x11c>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d111      	bne.n	800f6d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	695b      	ldr	r3, [r3, #20]
 800f6c2:	693a      	ldr	r2, [r7, #16]
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	699b      	ldr	r3, [r3, #24]
 800f6cc:	693a      	ldr	r2, [r7, #16]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	693a      	ldr	r2, [r7, #16]
 800f6d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	685a      	ldr	r2, [r3, #4]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	621a      	str	r2, [r3, #32]
}
 800f6ec:	bf00      	nop
 800f6ee:	371c      	adds	r7, #28
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	40012c00 	.word	0x40012c00
 800f6fc:	40013400 	.word	0x40013400
 800f700:	40014000 	.word	0x40014000
 800f704:	40014400 	.word	0x40014400
 800f708:	40014800 	.word	0x40014800

0800f70c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b087      	sub	sp, #28
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	f023 0210 	bic.w	r2, r3, #16
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a1b      	ldr	r3, [r3, #32]
 800f726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f73e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	021b      	lsls	r3, r3, #8
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	4313      	orrs	r3, r2
 800f752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	f023 0320 	bic.w	r3, r3, #32
 800f75a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	011b      	lsls	r3, r3, #4
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	4313      	orrs	r3, r2
 800f766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a28      	ldr	r2, [pc, #160]	; (800f80c <TIM_OC2_SetConfig+0x100>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d003      	beq.n	800f778 <TIM_OC2_SetConfig+0x6c>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a27      	ldr	r2, [pc, #156]	; (800f810 <TIM_OC2_SetConfig+0x104>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d10d      	bne.n	800f794 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f77e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	011b      	lsls	r3, r3, #4
 800f786:	697a      	ldr	r2, [r7, #20]
 800f788:	4313      	orrs	r3, r2
 800f78a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f792:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a1d      	ldr	r2, [pc, #116]	; (800f80c <TIM_OC2_SetConfig+0x100>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d00f      	beq.n	800f7bc <TIM_OC2_SetConfig+0xb0>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a1c      	ldr	r2, [pc, #112]	; (800f810 <TIM_OC2_SetConfig+0x104>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d00b      	beq.n	800f7bc <TIM_OC2_SetConfig+0xb0>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a1b      	ldr	r2, [pc, #108]	; (800f814 <TIM_OC2_SetConfig+0x108>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d007      	beq.n	800f7bc <TIM_OC2_SetConfig+0xb0>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a1a      	ldr	r2, [pc, #104]	; (800f818 <TIM_OC2_SetConfig+0x10c>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d003      	beq.n	800f7bc <TIM_OC2_SetConfig+0xb0>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a19      	ldr	r2, [pc, #100]	; (800f81c <TIM_OC2_SetConfig+0x110>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d113      	bne.n	800f7e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	695b      	ldr	r3, [r3, #20]
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	699b      	ldr	r3, [r3, #24]
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	685a      	ldr	r2, [r3, #4]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	621a      	str	r2, [r3, #32]
}
 800f7fe:	bf00      	nop
 800f800:	371c      	adds	r7, #28
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	40012c00 	.word	0x40012c00
 800f810:	40013400 	.word	0x40013400
 800f814:	40014000 	.word	0x40014000
 800f818:	40014400 	.word	0x40014400
 800f81c:	40014800 	.word	0x40014800

0800f820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f820:	b480      	push	{r7}
 800f822:	b087      	sub	sp, #28
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a1b      	ldr	r3, [r3, #32]
 800f83a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	69db      	ldr	r3, [r3, #28]
 800f846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f023 0303 	bic.w	r3, r3, #3
 800f85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	4313      	orrs	r3, r2
 800f864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f86c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	021b      	lsls	r3, r3, #8
 800f874:	697a      	ldr	r2, [r7, #20]
 800f876:	4313      	orrs	r3, r2
 800f878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a27      	ldr	r2, [pc, #156]	; (800f91c <TIM_OC3_SetConfig+0xfc>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d003      	beq.n	800f88a <TIM_OC3_SetConfig+0x6a>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4a26      	ldr	r2, [pc, #152]	; (800f920 <TIM_OC3_SetConfig+0x100>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d10d      	bne.n	800f8a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	021b      	lsls	r3, r3, #8
 800f898:	697a      	ldr	r2, [r7, #20]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a1c      	ldr	r2, [pc, #112]	; (800f91c <TIM_OC3_SetConfig+0xfc>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d00f      	beq.n	800f8ce <TIM_OC3_SetConfig+0xae>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a1b      	ldr	r2, [pc, #108]	; (800f920 <TIM_OC3_SetConfig+0x100>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d00b      	beq.n	800f8ce <TIM_OC3_SetConfig+0xae>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a1a      	ldr	r2, [pc, #104]	; (800f924 <TIM_OC3_SetConfig+0x104>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d007      	beq.n	800f8ce <TIM_OC3_SetConfig+0xae>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a19      	ldr	r2, [pc, #100]	; (800f928 <TIM_OC3_SetConfig+0x108>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d003      	beq.n	800f8ce <TIM_OC3_SetConfig+0xae>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a18      	ldr	r2, [pc, #96]	; (800f92c <TIM_OC3_SetConfig+0x10c>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d113      	bne.n	800f8f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	011b      	lsls	r3, r3, #4
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	011b      	lsls	r3, r3, #4
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	693a      	ldr	r2, [r7, #16]
 800f8fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	685a      	ldr	r2, [r3, #4]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	697a      	ldr	r2, [r7, #20]
 800f90e:	621a      	str	r2, [r3, #32]
}
 800f910:	bf00      	nop
 800f912:	371c      	adds	r7, #28
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr
 800f91c:	40012c00 	.word	0x40012c00
 800f920:	40013400 	.word	0x40013400
 800f924:	40014000 	.word	0x40014000
 800f928:	40014400 	.word	0x40014400
 800f92c:	40014800 	.word	0x40014800

0800f930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f930:	b480      	push	{r7}
 800f932:	b087      	sub	sp, #28
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	69db      	ldr	r3, [r3, #28]
 800f956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f96a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	021b      	lsls	r3, r3, #8
 800f972:	68fa      	ldr	r2, [r7, #12]
 800f974:	4313      	orrs	r3, r2
 800f976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f97e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	031b      	lsls	r3, r3, #12
 800f986:	693a      	ldr	r2, [r7, #16]
 800f988:	4313      	orrs	r3, r2
 800f98a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a18      	ldr	r2, [pc, #96]	; (800f9f0 <TIM_OC4_SetConfig+0xc0>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d00f      	beq.n	800f9b4 <TIM_OC4_SetConfig+0x84>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a17      	ldr	r2, [pc, #92]	; (800f9f4 <TIM_OC4_SetConfig+0xc4>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d00b      	beq.n	800f9b4 <TIM_OC4_SetConfig+0x84>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a16      	ldr	r2, [pc, #88]	; (800f9f8 <TIM_OC4_SetConfig+0xc8>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d007      	beq.n	800f9b4 <TIM_OC4_SetConfig+0x84>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4a15      	ldr	r2, [pc, #84]	; (800f9fc <TIM_OC4_SetConfig+0xcc>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d003      	beq.n	800f9b4 <TIM_OC4_SetConfig+0x84>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4a14      	ldr	r2, [pc, #80]	; (800fa00 <TIM_OC4_SetConfig+0xd0>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d109      	bne.n	800f9c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	695b      	ldr	r3, [r3, #20]
 800f9c0:	019b      	lsls	r3, r3, #6
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	685a      	ldr	r2, [r3, #4]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	693a      	ldr	r2, [r7, #16]
 800f9e0:	621a      	str	r2, [r3, #32]
}
 800f9e2:	bf00      	nop
 800f9e4:	371c      	adds	r7, #28
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ec:	4770      	bx	lr
 800f9ee:	bf00      	nop
 800f9f0:	40012c00 	.word	0x40012c00
 800f9f4:	40013400 	.word	0x40013400
 800f9f8:	40014000 	.word	0x40014000
 800f9fc:	40014400 	.word	0x40014400
 800fa00:	40014800 	.word	0x40014800

0800fa04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b087      	sub	sp, #28
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a1b      	ldr	r3, [r3, #32]
 800fa12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	041b      	lsls	r3, r3, #16
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	4313      	orrs	r3, r2
 800fa54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a17      	ldr	r2, [pc, #92]	; (800fab8 <TIM_OC5_SetConfig+0xb4>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d00f      	beq.n	800fa7e <TIM_OC5_SetConfig+0x7a>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a16      	ldr	r2, [pc, #88]	; (800fabc <TIM_OC5_SetConfig+0xb8>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d00b      	beq.n	800fa7e <TIM_OC5_SetConfig+0x7a>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a15      	ldr	r2, [pc, #84]	; (800fac0 <TIM_OC5_SetConfig+0xbc>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d007      	beq.n	800fa7e <TIM_OC5_SetConfig+0x7a>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a14      	ldr	r2, [pc, #80]	; (800fac4 <TIM_OC5_SetConfig+0xc0>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d003      	beq.n	800fa7e <TIM_OC5_SetConfig+0x7a>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a13      	ldr	r2, [pc, #76]	; (800fac8 <TIM_OC5_SetConfig+0xc4>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d109      	bne.n	800fa92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	021b      	lsls	r3, r3, #8
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	697a      	ldr	r2, [r7, #20]
 800fa96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	693a      	ldr	r2, [r7, #16]
 800faaa:	621a      	str	r2, [r3, #32]
}
 800faac:	bf00      	nop
 800faae:	371c      	adds	r7, #28
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	40012c00 	.word	0x40012c00
 800fabc:	40013400 	.word	0x40013400
 800fac0:	40014000 	.word	0x40014000
 800fac4:	40014400 	.word	0x40014400
 800fac8:	40014800 	.word	0x40014800

0800facc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800facc:	b480      	push	{r7}
 800face:	b087      	sub	sp, #28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fafe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	021b      	lsls	r3, r3, #8
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	051b      	lsls	r3, r3, #20
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a18      	ldr	r2, [pc, #96]	; (800fb84 <TIM_OC6_SetConfig+0xb8>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d00f      	beq.n	800fb48 <TIM_OC6_SetConfig+0x7c>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a17      	ldr	r2, [pc, #92]	; (800fb88 <TIM_OC6_SetConfig+0xbc>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d00b      	beq.n	800fb48 <TIM_OC6_SetConfig+0x7c>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a16      	ldr	r2, [pc, #88]	; (800fb8c <TIM_OC6_SetConfig+0xc0>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d007      	beq.n	800fb48 <TIM_OC6_SetConfig+0x7c>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a15      	ldr	r2, [pc, #84]	; (800fb90 <TIM_OC6_SetConfig+0xc4>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d003      	beq.n	800fb48 <TIM_OC6_SetConfig+0x7c>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a14      	ldr	r2, [pc, #80]	; (800fb94 <TIM_OC6_SetConfig+0xc8>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d109      	bne.n	800fb5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	029b      	lsls	r3, r3, #10
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	697a      	ldr	r2, [r7, #20]
 800fb60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	621a      	str	r2, [r3, #32]
}
 800fb76:	bf00      	nop
 800fb78:	371c      	adds	r7, #28
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	40012c00 	.word	0x40012c00
 800fb88:	40013400 	.word	0x40013400
 800fb8c:	40014000 	.word	0x40014000
 800fb90:	40014400 	.word	0x40014400
 800fb94:	40014800 	.word	0x40014800

0800fb98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	f003 031f 	and.w	r3, r3, #31
 800fbaa:	2201      	movs	r2, #1
 800fbac:	fa02 f303 	lsl.w	r3, r2, r3
 800fbb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	6a1a      	ldr	r2, [r3, #32]
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	43db      	mvns	r3, r3
 800fbba:	401a      	ands	r2, r3
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6a1a      	ldr	r2, [r3, #32]
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	f003 031f 	and.w	r3, r3, #31
 800fbca:	6879      	ldr	r1, [r7, #4]
 800fbcc:	fa01 f303 	lsl.w	r3, r1, r3
 800fbd0:	431a      	orrs	r2, r3
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	621a      	str	r2, [r3, #32]
}
 800fbd6:	bf00      	nop
 800fbd8:	371c      	adds	r7, #28
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
	...

0800fbe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d101      	bne.n	800fbfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	e068      	b.n	800fcce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2202      	movs	r2, #2
 800fc08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a2e      	ldr	r2, [pc, #184]	; (800fcdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d004      	beq.n	800fc30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a2d      	ldr	r2, [pc, #180]	; (800fce0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d108      	bne.n	800fc42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68fa      	ldr	r2, [r7, #12]
 800fc50:	4313      	orrs	r3, r2
 800fc52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a1e      	ldr	r2, [pc, #120]	; (800fcdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d01d      	beq.n	800fca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc6e:	d018      	beq.n	800fca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4a1b      	ldr	r2, [pc, #108]	; (800fce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d013      	beq.n	800fca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4a1a      	ldr	r2, [pc, #104]	; (800fce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d00e      	beq.n	800fca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a18      	ldr	r2, [pc, #96]	; (800fcec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d009      	beq.n	800fca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4a13      	ldr	r2, [pc, #76]	; (800fce0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d004      	beq.n	800fca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a14      	ldr	r2, [pc, #80]	; (800fcf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d10c      	bne.n	800fcbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	689b      	ldr	r3, [r3, #8]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3714      	adds	r7, #20
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop
 800fcdc:	40012c00 	.word	0x40012c00
 800fce0:	40013400 	.word	0x40013400
 800fce4:	40000400 	.word	0x40000400
 800fce8:	40000800 	.word	0x40000800
 800fcec:	40000c00 	.word	0x40000c00
 800fcf0:	40014000 	.word	0x40014000

0800fcf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fcfc:	bf00      	nop
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fd24:	bf00      	nop
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d101      	bne.n	800fd42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e040      	b.n	800fdc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d106      	bne.n	800fd58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7f7 fac4 	bl	80072e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2224      	movs	r2, #36	; 0x24
 800fd5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f022 0201 	bic.w	r2, r2, #1
 800fd6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fae2 	bl	8010338 <UART_SetConfig>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d101      	bne.n	800fd7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e022      	b.n	800fdc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fd60 	bl	801084c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	689a      	ldr	r2, [r3, #8]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fdaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f042 0201 	orr.w	r2, r2, #1
 800fdba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fde7 	bl	8010990 <UART_CheckIdleState>
 800fdc2:	4603      	mov	r3, r0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08a      	sub	sp, #40	; 0x28
 800fdd0:	af02      	add	r7, sp, #8
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	603b      	str	r3, [r7, #0]
 800fdd8:	4613      	mov	r3, r2
 800fdda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fde0:	2b20      	cmp	r3, #32
 800fde2:	f040 8082 	bne.w	800feea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d002      	beq.n	800fdf2 <HAL_UART_Transmit+0x26>
 800fdec:	88fb      	ldrh	r3, [r7, #6]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e07a      	b.n	800feec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d101      	bne.n	800fe04 <HAL_UART_Transmit+0x38>
 800fe00:	2302      	movs	r3, #2
 800fe02:	e073      	b.n	800feec <HAL_UART_Transmit+0x120>
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2201      	movs	r2, #1
 800fe08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2221      	movs	r2, #33	; 0x21
 800fe18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe1a:	f7f7 feeb 	bl	8007bf4 <HAL_GetTick>
 800fe1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	88fa      	ldrh	r2, [r7, #6]
 800fe24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	88fa      	ldrh	r2, [r7, #6]
 800fe2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe38:	d108      	bne.n	800fe4c <HAL_UART_Transmit+0x80>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	691b      	ldr	r3, [r3, #16]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d104      	bne.n	800fe4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800fe42:	2300      	movs	r3, #0
 800fe44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	61bb      	str	r3, [r7, #24]
 800fe4a:	e003      	b.n	800fe54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe50:	2300      	movs	r3, #0
 800fe52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fe5c:	e02d      	b.n	800feba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	2200      	movs	r2, #0
 800fe66:	2180      	movs	r1, #128	; 0x80
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f000 fdda 	bl	8010a22 <UART_WaitOnFlagUntilTimeout>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d001      	beq.n	800fe78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fe74:	2303      	movs	r3, #3
 800fe76:	e039      	b.n	800feec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d10b      	bne.n	800fe96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe7e:	69bb      	ldr	r3, [r7, #24]
 800fe80:	881a      	ldrh	r2, [r3, #0]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe8a:	b292      	uxth	r2, r2
 800fe8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	3302      	adds	r3, #2
 800fe92:	61bb      	str	r3, [r7, #24]
 800fe94:	e008      	b.n	800fea8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	781a      	ldrb	r2, [r3, #0]
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	b292      	uxth	r2, r2
 800fea0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	3301      	adds	r3, #1
 800fea6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800feae:	b29b      	uxth	r3, r3
 800feb0:	3b01      	subs	r3, #1
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1cb      	bne.n	800fe5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	2200      	movs	r2, #0
 800fece:	2140      	movs	r1, #64	; 0x40
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f000 fda6 	bl	8010a22 <UART_WaitOnFlagUntilTimeout>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800fedc:	2303      	movs	r3, #3
 800fede:	e005      	b.n	800feec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2220      	movs	r2, #32
 800fee4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800fee6:	2300      	movs	r3, #0
 800fee8:	e000      	b.n	800feec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800feea:	2302      	movs	r3, #2
  }
}
 800feec:	4618      	mov	r0, r3
 800feee:	3720      	adds	r7, #32
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b088      	sub	sp, #32
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff14:	69fa      	ldr	r2, [r7, #28]
 800ff16:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff1a:	4013      	ands	r3, r2
 800ff1c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d113      	bne.n	800ff4c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	f003 0320 	and.w	r3, r3, #32
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d00e      	beq.n	800ff4c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	f003 0320 	and.w	r3, r3, #32
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d009      	beq.n	800ff4c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f000 81ce 	beq.w	80102de <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	4798      	blx	r3
      }
      return;
 800ff4a:	e1c8      	b.n	80102de <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f000 80e3 	beq.w	801011a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	f003 0301 	and.w	r3, r3, #1
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d105      	bne.n	800ff6a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ff5e:	69ba      	ldr	r2, [r7, #24]
 800ff60:	4ba6      	ldr	r3, [pc, #664]	; (80101fc <HAL_UART_IRQHandler+0x308>)
 800ff62:	4013      	ands	r3, r2
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f000 80d8 	beq.w	801011a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	f003 0301 	and.w	r3, r3, #1
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d010      	beq.n	800ff96 <HAL_UART_IRQHandler+0xa2>
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d00b      	beq.n	800ff96 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2201      	movs	r2, #1
 800ff84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff8c:	f043 0201 	orr.w	r2, r3, #1
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	f003 0302 	and.w	r3, r3, #2
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d010      	beq.n	800ffc2 <HAL_UART_IRQHandler+0xce>
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	f003 0301 	and.w	r3, r3, #1
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00b      	beq.n	800ffc2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2202      	movs	r2, #2
 800ffb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffb8:	f043 0204 	orr.w	r2, r3, #4
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	f003 0304 	and.w	r3, r3, #4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d010      	beq.n	800ffee <HAL_UART_IRQHandler+0xfa>
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	f003 0301 	and.w	r3, r3, #1
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00b      	beq.n	800ffee <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2204      	movs	r2, #4
 800ffdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffe4:	f043 0202 	orr.w	r2, r3, #2
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	f003 0308 	and.w	r3, r3, #8
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d015      	beq.n	8010024 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	f003 0320 	and.w	r3, r3, #32
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d104      	bne.n	801000c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00b      	beq.n	8010024 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2208      	movs	r2, #8
 8010012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801001a:	f043 0208 	orr.w	r2, r3, #8
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801002a:	2b00      	cmp	r3, #0
 801002c:	d011      	beq.n	8010052 <HAL_UART_IRQHandler+0x15e>
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00c      	beq.n	8010052 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010048:	f043 0220 	orr.w	r2, r3, #32
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 8142 	beq.w	80102e2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	f003 0320 	and.w	r3, r3, #32
 8010064:	2b00      	cmp	r3, #0
 8010066:	d00c      	beq.n	8010082 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	f003 0320 	and.w	r3, r3, #32
 801006e:	2b00      	cmp	r3, #0
 8010070:	d007      	beq.n	8010082 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010076:	2b00      	cmp	r3, #0
 8010078:	d003      	beq.n	8010082 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010088:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	689b      	ldr	r3, [r3, #8]
 8010090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010094:	2b40      	cmp	r3, #64	; 0x40
 8010096:	d004      	beq.n	80100a2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d031      	beq.n	8010106 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fd39 	bl	8010b1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100b2:	2b40      	cmp	r3, #64	; 0x40
 80100b4:	d123      	bne.n	80100fe <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	689a      	ldr	r2, [r3, #8]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100c4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d013      	beq.n	80100f6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100d2:	4a4b      	ldr	r2, [pc, #300]	; (8010200 <HAL_UART_IRQHandler+0x30c>)
 80100d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100da:	4618      	mov	r0, r3
 80100dc:	f7f9 fdb6 	bl	8009c4c <HAL_DMA_Abort_IT>
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d017      	beq.n	8010116 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80100f0:	4610      	mov	r0, r2
 80100f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100f4:	e00f      	b.n	8010116 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f908 	bl	801030c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100fc:	e00b      	b.n	8010116 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 f904 	bl	801030c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010104:	e007      	b.n	8010116 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 f900 	bl	801030c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8010114:	e0e5      	b.n	80102e2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010116:	bf00      	nop
    return;
 8010118:	e0e3      	b.n	80102e2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801011e:	2b01      	cmp	r3, #1
 8010120:	f040 80a9 	bne.w	8010276 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	f003 0310 	and.w	r3, r3, #16
 801012a:	2b00      	cmp	r3, #0
 801012c:	f000 80a3 	beq.w	8010276 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	f003 0310 	and.w	r3, r3, #16
 8010136:	2b00      	cmp	r3, #0
 8010138:	f000 809d 	beq.w	8010276 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2210      	movs	r2, #16
 8010142:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801014e:	2b40      	cmp	r3, #64	; 0x40
 8010150:	d158      	bne.n	8010204 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 801015c:	893b      	ldrh	r3, [r7, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	f000 80c1 	beq.w	80102e6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801016a:	893a      	ldrh	r2, [r7, #8]
 801016c:	429a      	cmp	r2, r3
 801016e:	f080 80ba 	bcs.w	80102e6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	893a      	ldrh	r2, [r7, #8]
 8010176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f003 0320 	and.w	r3, r3, #32
 8010186:	2b00      	cmp	r3, #0
 8010188:	d12a      	bne.n	80101e0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010198:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	689a      	ldr	r2, [r3, #8]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f022 0201 	bic.w	r2, r2, #1
 80101a8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	689a      	ldr	r2, [r3, #8]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101b8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2220      	movs	r2, #32
 80101be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f022 0210 	bic.w	r2, r2, #16
 80101d4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101da:	4618      	mov	r0, r3
 80101dc:	f7f9 fcf8 	bl	8009bd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f893 	bl	8010320 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80101fa:	e074      	b.n	80102e6 <HAL_UART_IRQHandler+0x3f2>
 80101fc:	04000120 	.word	0x04000120
 8010200:	08010b79 	.word	0x08010b79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010210:	b29b      	uxth	r3, r3
 8010212:	1ad3      	subs	r3, r2, r3
 8010214:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801021c:	b29b      	uxth	r3, r3
 801021e:	2b00      	cmp	r3, #0
 8010220:	d063      	beq.n	80102ea <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8010222:	897b      	ldrh	r3, [r7, #10]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d060      	beq.n	80102ea <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010236:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	689a      	ldr	r2, [r3, #8]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f022 0201 	bic.w	r2, r2, #1
 8010246:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2220      	movs	r2, #32
 801024c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2200      	movs	r2, #0
 8010252:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2200      	movs	r2, #0
 8010258:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f022 0210 	bic.w	r2, r2, #16
 8010268:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801026a:	897b      	ldrh	r3, [r7, #10]
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 f856 	bl	8010320 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8010274:	e039      	b.n	80102ea <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00d      	beq.n	801029c <HAL_UART_IRQHandler+0x3a8>
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010286:	2b00      	cmp	r3, #0
 8010288:	d008      	beq.n	801029c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010292:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 fc9e 	bl	8010bd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801029a:	e029      	b.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00d      	beq.n	80102c2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d008      	beq.n	80102c2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d01a      	beq.n	80102ee <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	4798      	blx	r3
    }
    return;
 80102c0:	e015      	b.n	80102ee <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d011      	beq.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d00c      	beq.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 fc64 	bl	8010ba4 <UART_EndTransmit_IT>
    return;
 80102dc:	e008      	b.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80102de:	bf00      	nop
 80102e0:	e006      	b.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80102e2:	bf00      	nop
 80102e4:	e004      	b.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80102e6:	bf00      	nop
 80102e8:	e002      	b.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80102ea:	bf00      	nop
 80102ec:	e000      	b.n	80102f0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80102ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80102f0:	3720      	adds	r7, #32
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop

080102f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010300:	bf00      	nop
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010314:	bf00      	nop
 8010316:	370c      	adds	r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr

08010320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	460b      	mov	r3, r1
 801032a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801032c:	bf00      	nop
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010338:	b5b0      	push	{r4, r5, r7, lr}
 801033a:	b088      	sub	sp, #32
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	689a      	ldr	r2, [r3, #8]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	691b      	ldr	r3, [r3, #16]
 801034c:	431a      	orrs	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	695b      	ldr	r3, [r3, #20]
 8010352:	431a      	orrs	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	4313      	orrs	r3, r2
 801035a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	4bad      	ldr	r3, [pc, #692]	; (8010618 <UART_SetConfig+0x2e0>)
 8010364:	4013      	ands	r3, r2
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	6812      	ldr	r2, [r2, #0]
 801036a:	69f9      	ldr	r1, [r7, #28]
 801036c:	430b      	orrs	r3, r1
 801036e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	68da      	ldr	r2, [r3, #12]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	430a      	orrs	r2, r1
 8010384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	699b      	ldr	r3, [r3, #24]
 801038a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4aa2      	ldr	r2, [pc, #648]	; (801061c <UART_SetConfig+0x2e4>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d004      	beq.n	80103a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a1b      	ldr	r3, [r3, #32]
 801039a:	69fa      	ldr	r2, [r7, #28]
 801039c:	4313      	orrs	r3, r2
 801039e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	69fa      	ldr	r2, [r7, #28]
 80103b0:	430a      	orrs	r2, r1
 80103b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4a99      	ldr	r2, [pc, #612]	; (8010620 <UART_SetConfig+0x2e8>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d121      	bne.n	8010402 <UART_SetConfig+0xca>
 80103be:	4b99      	ldr	r3, [pc, #612]	; (8010624 <UART_SetConfig+0x2ec>)
 80103c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103c4:	f003 0303 	and.w	r3, r3, #3
 80103c8:	2b03      	cmp	r3, #3
 80103ca:	d817      	bhi.n	80103fc <UART_SetConfig+0xc4>
 80103cc:	a201      	add	r2, pc, #4	; (adr r2, 80103d4 <UART_SetConfig+0x9c>)
 80103ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103d2:	bf00      	nop
 80103d4:	080103e5 	.word	0x080103e5
 80103d8:	080103f1 	.word	0x080103f1
 80103dc:	080103eb 	.word	0x080103eb
 80103e0:	080103f7 	.word	0x080103f7
 80103e4:	2301      	movs	r3, #1
 80103e6:	76fb      	strb	r3, [r7, #27]
 80103e8:	e0e7      	b.n	80105ba <UART_SetConfig+0x282>
 80103ea:	2302      	movs	r3, #2
 80103ec:	76fb      	strb	r3, [r7, #27]
 80103ee:	e0e4      	b.n	80105ba <UART_SetConfig+0x282>
 80103f0:	2304      	movs	r3, #4
 80103f2:	76fb      	strb	r3, [r7, #27]
 80103f4:	e0e1      	b.n	80105ba <UART_SetConfig+0x282>
 80103f6:	2308      	movs	r3, #8
 80103f8:	76fb      	strb	r3, [r7, #27]
 80103fa:	e0de      	b.n	80105ba <UART_SetConfig+0x282>
 80103fc:	2310      	movs	r3, #16
 80103fe:	76fb      	strb	r3, [r7, #27]
 8010400:	e0db      	b.n	80105ba <UART_SetConfig+0x282>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4a88      	ldr	r2, [pc, #544]	; (8010628 <UART_SetConfig+0x2f0>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d132      	bne.n	8010472 <UART_SetConfig+0x13a>
 801040c:	4b85      	ldr	r3, [pc, #532]	; (8010624 <UART_SetConfig+0x2ec>)
 801040e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010412:	f003 030c 	and.w	r3, r3, #12
 8010416:	2b0c      	cmp	r3, #12
 8010418:	d828      	bhi.n	801046c <UART_SetConfig+0x134>
 801041a:	a201      	add	r2, pc, #4	; (adr r2, 8010420 <UART_SetConfig+0xe8>)
 801041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010420:	08010455 	.word	0x08010455
 8010424:	0801046d 	.word	0x0801046d
 8010428:	0801046d 	.word	0x0801046d
 801042c:	0801046d 	.word	0x0801046d
 8010430:	08010461 	.word	0x08010461
 8010434:	0801046d 	.word	0x0801046d
 8010438:	0801046d 	.word	0x0801046d
 801043c:	0801046d 	.word	0x0801046d
 8010440:	0801045b 	.word	0x0801045b
 8010444:	0801046d 	.word	0x0801046d
 8010448:	0801046d 	.word	0x0801046d
 801044c:	0801046d 	.word	0x0801046d
 8010450:	08010467 	.word	0x08010467
 8010454:	2300      	movs	r3, #0
 8010456:	76fb      	strb	r3, [r7, #27]
 8010458:	e0af      	b.n	80105ba <UART_SetConfig+0x282>
 801045a:	2302      	movs	r3, #2
 801045c:	76fb      	strb	r3, [r7, #27]
 801045e:	e0ac      	b.n	80105ba <UART_SetConfig+0x282>
 8010460:	2304      	movs	r3, #4
 8010462:	76fb      	strb	r3, [r7, #27]
 8010464:	e0a9      	b.n	80105ba <UART_SetConfig+0x282>
 8010466:	2308      	movs	r3, #8
 8010468:	76fb      	strb	r3, [r7, #27]
 801046a:	e0a6      	b.n	80105ba <UART_SetConfig+0x282>
 801046c:	2310      	movs	r3, #16
 801046e:	76fb      	strb	r3, [r7, #27]
 8010470:	e0a3      	b.n	80105ba <UART_SetConfig+0x282>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4a6d      	ldr	r2, [pc, #436]	; (801062c <UART_SetConfig+0x2f4>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d120      	bne.n	80104be <UART_SetConfig+0x186>
 801047c:	4b69      	ldr	r3, [pc, #420]	; (8010624 <UART_SetConfig+0x2ec>)
 801047e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010486:	2b30      	cmp	r3, #48	; 0x30
 8010488:	d013      	beq.n	80104b2 <UART_SetConfig+0x17a>
 801048a:	2b30      	cmp	r3, #48	; 0x30
 801048c:	d814      	bhi.n	80104b8 <UART_SetConfig+0x180>
 801048e:	2b20      	cmp	r3, #32
 8010490:	d009      	beq.n	80104a6 <UART_SetConfig+0x16e>
 8010492:	2b20      	cmp	r3, #32
 8010494:	d810      	bhi.n	80104b8 <UART_SetConfig+0x180>
 8010496:	2b00      	cmp	r3, #0
 8010498:	d002      	beq.n	80104a0 <UART_SetConfig+0x168>
 801049a:	2b10      	cmp	r3, #16
 801049c:	d006      	beq.n	80104ac <UART_SetConfig+0x174>
 801049e:	e00b      	b.n	80104b8 <UART_SetConfig+0x180>
 80104a0:	2300      	movs	r3, #0
 80104a2:	76fb      	strb	r3, [r7, #27]
 80104a4:	e089      	b.n	80105ba <UART_SetConfig+0x282>
 80104a6:	2302      	movs	r3, #2
 80104a8:	76fb      	strb	r3, [r7, #27]
 80104aa:	e086      	b.n	80105ba <UART_SetConfig+0x282>
 80104ac:	2304      	movs	r3, #4
 80104ae:	76fb      	strb	r3, [r7, #27]
 80104b0:	e083      	b.n	80105ba <UART_SetConfig+0x282>
 80104b2:	2308      	movs	r3, #8
 80104b4:	76fb      	strb	r3, [r7, #27]
 80104b6:	e080      	b.n	80105ba <UART_SetConfig+0x282>
 80104b8:	2310      	movs	r3, #16
 80104ba:	76fb      	strb	r3, [r7, #27]
 80104bc:	e07d      	b.n	80105ba <UART_SetConfig+0x282>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4a5b      	ldr	r2, [pc, #364]	; (8010630 <UART_SetConfig+0x2f8>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d120      	bne.n	801050a <UART_SetConfig+0x1d2>
 80104c8:	4b56      	ldr	r3, [pc, #344]	; (8010624 <UART_SetConfig+0x2ec>)
 80104ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80104d2:	2bc0      	cmp	r3, #192	; 0xc0
 80104d4:	d013      	beq.n	80104fe <UART_SetConfig+0x1c6>
 80104d6:	2bc0      	cmp	r3, #192	; 0xc0
 80104d8:	d814      	bhi.n	8010504 <UART_SetConfig+0x1cc>
 80104da:	2b80      	cmp	r3, #128	; 0x80
 80104dc:	d009      	beq.n	80104f2 <UART_SetConfig+0x1ba>
 80104de:	2b80      	cmp	r3, #128	; 0x80
 80104e0:	d810      	bhi.n	8010504 <UART_SetConfig+0x1cc>
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <UART_SetConfig+0x1b4>
 80104e6:	2b40      	cmp	r3, #64	; 0x40
 80104e8:	d006      	beq.n	80104f8 <UART_SetConfig+0x1c0>
 80104ea:	e00b      	b.n	8010504 <UART_SetConfig+0x1cc>
 80104ec:	2300      	movs	r3, #0
 80104ee:	76fb      	strb	r3, [r7, #27]
 80104f0:	e063      	b.n	80105ba <UART_SetConfig+0x282>
 80104f2:	2302      	movs	r3, #2
 80104f4:	76fb      	strb	r3, [r7, #27]
 80104f6:	e060      	b.n	80105ba <UART_SetConfig+0x282>
 80104f8:	2304      	movs	r3, #4
 80104fa:	76fb      	strb	r3, [r7, #27]
 80104fc:	e05d      	b.n	80105ba <UART_SetConfig+0x282>
 80104fe:	2308      	movs	r3, #8
 8010500:	76fb      	strb	r3, [r7, #27]
 8010502:	e05a      	b.n	80105ba <UART_SetConfig+0x282>
 8010504:	2310      	movs	r3, #16
 8010506:	76fb      	strb	r3, [r7, #27]
 8010508:	e057      	b.n	80105ba <UART_SetConfig+0x282>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a49      	ldr	r2, [pc, #292]	; (8010634 <UART_SetConfig+0x2fc>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d125      	bne.n	8010560 <UART_SetConfig+0x228>
 8010514:	4b43      	ldr	r3, [pc, #268]	; (8010624 <UART_SetConfig+0x2ec>)
 8010516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801051a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801051e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010522:	d017      	beq.n	8010554 <UART_SetConfig+0x21c>
 8010524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010528:	d817      	bhi.n	801055a <UART_SetConfig+0x222>
 801052a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801052e:	d00b      	beq.n	8010548 <UART_SetConfig+0x210>
 8010530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010534:	d811      	bhi.n	801055a <UART_SetConfig+0x222>
 8010536:	2b00      	cmp	r3, #0
 8010538:	d003      	beq.n	8010542 <UART_SetConfig+0x20a>
 801053a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801053e:	d006      	beq.n	801054e <UART_SetConfig+0x216>
 8010540:	e00b      	b.n	801055a <UART_SetConfig+0x222>
 8010542:	2300      	movs	r3, #0
 8010544:	76fb      	strb	r3, [r7, #27]
 8010546:	e038      	b.n	80105ba <UART_SetConfig+0x282>
 8010548:	2302      	movs	r3, #2
 801054a:	76fb      	strb	r3, [r7, #27]
 801054c:	e035      	b.n	80105ba <UART_SetConfig+0x282>
 801054e:	2304      	movs	r3, #4
 8010550:	76fb      	strb	r3, [r7, #27]
 8010552:	e032      	b.n	80105ba <UART_SetConfig+0x282>
 8010554:	2308      	movs	r3, #8
 8010556:	76fb      	strb	r3, [r7, #27]
 8010558:	e02f      	b.n	80105ba <UART_SetConfig+0x282>
 801055a:	2310      	movs	r3, #16
 801055c:	76fb      	strb	r3, [r7, #27]
 801055e:	e02c      	b.n	80105ba <UART_SetConfig+0x282>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	4a2d      	ldr	r2, [pc, #180]	; (801061c <UART_SetConfig+0x2e4>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d125      	bne.n	80105b6 <UART_SetConfig+0x27e>
 801056a:	4b2e      	ldr	r3, [pc, #184]	; (8010624 <UART_SetConfig+0x2ec>)
 801056c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010578:	d017      	beq.n	80105aa <UART_SetConfig+0x272>
 801057a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801057e:	d817      	bhi.n	80105b0 <UART_SetConfig+0x278>
 8010580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010584:	d00b      	beq.n	801059e <UART_SetConfig+0x266>
 8010586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801058a:	d811      	bhi.n	80105b0 <UART_SetConfig+0x278>
 801058c:	2b00      	cmp	r3, #0
 801058e:	d003      	beq.n	8010598 <UART_SetConfig+0x260>
 8010590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010594:	d006      	beq.n	80105a4 <UART_SetConfig+0x26c>
 8010596:	e00b      	b.n	80105b0 <UART_SetConfig+0x278>
 8010598:	2300      	movs	r3, #0
 801059a:	76fb      	strb	r3, [r7, #27]
 801059c:	e00d      	b.n	80105ba <UART_SetConfig+0x282>
 801059e:	2302      	movs	r3, #2
 80105a0:	76fb      	strb	r3, [r7, #27]
 80105a2:	e00a      	b.n	80105ba <UART_SetConfig+0x282>
 80105a4:	2304      	movs	r3, #4
 80105a6:	76fb      	strb	r3, [r7, #27]
 80105a8:	e007      	b.n	80105ba <UART_SetConfig+0x282>
 80105aa:	2308      	movs	r3, #8
 80105ac:	76fb      	strb	r3, [r7, #27]
 80105ae:	e004      	b.n	80105ba <UART_SetConfig+0x282>
 80105b0:	2310      	movs	r3, #16
 80105b2:	76fb      	strb	r3, [r7, #27]
 80105b4:	e001      	b.n	80105ba <UART_SetConfig+0x282>
 80105b6:	2310      	movs	r3, #16
 80105b8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4a17      	ldr	r2, [pc, #92]	; (801061c <UART_SetConfig+0x2e4>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	f040 8087 	bne.w	80106d4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80105c6:	7efb      	ldrb	r3, [r7, #27]
 80105c8:	2b08      	cmp	r3, #8
 80105ca:	d837      	bhi.n	801063c <UART_SetConfig+0x304>
 80105cc:	a201      	add	r2, pc, #4	; (adr r2, 80105d4 <UART_SetConfig+0x29c>)
 80105ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d2:	bf00      	nop
 80105d4:	080105f9 	.word	0x080105f9
 80105d8:	0801063d 	.word	0x0801063d
 80105dc:	08010601 	.word	0x08010601
 80105e0:	0801063d 	.word	0x0801063d
 80105e4:	08010607 	.word	0x08010607
 80105e8:	0801063d 	.word	0x0801063d
 80105ec:	0801063d 	.word	0x0801063d
 80105f0:	0801063d 	.word	0x0801063d
 80105f4:	0801060f 	.word	0x0801060f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105f8:	f7fc fa0e 	bl	800ca18 <HAL_RCC_GetPCLK1Freq>
 80105fc:	6178      	str	r0, [r7, #20]
        break;
 80105fe:	e022      	b.n	8010646 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010600:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <UART_SetConfig+0x300>)
 8010602:	617b      	str	r3, [r7, #20]
        break;
 8010604:	e01f      	b.n	8010646 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010606:	f7fc f96f 	bl	800c8e8 <HAL_RCC_GetSysClockFreq>
 801060a:	6178      	str	r0, [r7, #20]
        break;
 801060c:	e01b      	b.n	8010646 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801060e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010612:	617b      	str	r3, [r7, #20]
        break;
 8010614:	e017      	b.n	8010646 <UART_SetConfig+0x30e>
 8010616:	bf00      	nop
 8010618:	efff69f3 	.word	0xefff69f3
 801061c:	40008000 	.word	0x40008000
 8010620:	40013800 	.word	0x40013800
 8010624:	40021000 	.word	0x40021000
 8010628:	40004400 	.word	0x40004400
 801062c:	40004800 	.word	0x40004800
 8010630:	40004c00 	.word	0x40004c00
 8010634:	40005000 	.word	0x40005000
 8010638:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 801063c:	2300      	movs	r3, #0
 801063e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010640:	2301      	movs	r3, #1
 8010642:	76bb      	strb	r3, [r7, #26]
        break;
 8010644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 80f1 	beq.w	8010830 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	685a      	ldr	r2, [r3, #4]
 8010652:	4613      	mov	r3, r2
 8010654:	005b      	lsls	r3, r3, #1
 8010656:	4413      	add	r3, r2
 8010658:	697a      	ldr	r2, [r7, #20]
 801065a:	429a      	cmp	r2, r3
 801065c:	d305      	bcc.n	801066a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	685b      	ldr	r3, [r3, #4]
 8010662:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010664:	697a      	ldr	r2, [r7, #20]
 8010666:	429a      	cmp	r2, r3
 8010668:	d902      	bls.n	8010670 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 801066a:	2301      	movs	r3, #1
 801066c:	76bb      	strb	r3, [r7, #26]
 801066e:	e0df      	b.n	8010830 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	4618      	mov	r0, r3
 8010674:	f04f 0100 	mov.w	r1, #0
 8010678:	f04f 0200 	mov.w	r2, #0
 801067c:	f04f 0300 	mov.w	r3, #0
 8010680:	020b      	lsls	r3, r1, #8
 8010682:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010686:	0202      	lsls	r2, r0, #8
 8010688:	6879      	ldr	r1, [r7, #4]
 801068a:	6849      	ldr	r1, [r1, #4]
 801068c:	0849      	lsrs	r1, r1, #1
 801068e:	4608      	mov	r0, r1
 8010690:	f04f 0100 	mov.w	r1, #0
 8010694:	1814      	adds	r4, r2, r0
 8010696:	eb43 0501 	adc.w	r5, r3, r1
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	461a      	mov	r2, r3
 80106a0:	f04f 0300 	mov.w	r3, #0
 80106a4:	4620      	mov	r0, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7f0 fb4e 	bl	8000d48 <__aeabi_uldivmod>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4613      	mov	r3, r2
 80106b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80106ba:	d308      	bcc.n	80106ce <UART_SetConfig+0x396>
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106c2:	d204      	bcs.n	80106ce <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	60da      	str	r2, [r3, #12]
 80106cc:	e0b0      	b.n	8010830 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80106ce:	2301      	movs	r3, #1
 80106d0:	76bb      	strb	r3, [r7, #26]
 80106d2:	e0ad      	b.n	8010830 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	69db      	ldr	r3, [r3, #28]
 80106d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106dc:	d15c      	bne.n	8010798 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80106de:	7efb      	ldrb	r3, [r7, #27]
 80106e0:	2b08      	cmp	r3, #8
 80106e2:	d828      	bhi.n	8010736 <UART_SetConfig+0x3fe>
 80106e4:	a201      	add	r2, pc, #4	; (adr r2, 80106ec <UART_SetConfig+0x3b4>)
 80106e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ea:	bf00      	nop
 80106ec:	08010711 	.word	0x08010711
 80106f0:	08010719 	.word	0x08010719
 80106f4:	08010721 	.word	0x08010721
 80106f8:	08010737 	.word	0x08010737
 80106fc:	08010727 	.word	0x08010727
 8010700:	08010737 	.word	0x08010737
 8010704:	08010737 	.word	0x08010737
 8010708:	08010737 	.word	0x08010737
 801070c:	0801072f 	.word	0x0801072f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010710:	f7fc f982 	bl	800ca18 <HAL_RCC_GetPCLK1Freq>
 8010714:	6178      	str	r0, [r7, #20]
        break;
 8010716:	e013      	b.n	8010740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010718:	f7fc f994 	bl	800ca44 <HAL_RCC_GetPCLK2Freq>
 801071c:	6178      	str	r0, [r7, #20]
        break;
 801071e:	e00f      	b.n	8010740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010720:	4b49      	ldr	r3, [pc, #292]	; (8010848 <UART_SetConfig+0x510>)
 8010722:	617b      	str	r3, [r7, #20]
        break;
 8010724:	e00c      	b.n	8010740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010726:	f7fc f8df 	bl	800c8e8 <HAL_RCC_GetSysClockFreq>
 801072a:	6178      	str	r0, [r7, #20]
        break;
 801072c:	e008      	b.n	8010740 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801072e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010732:	617b      	str	r3, [r7, #20]
        break;
 8010734:	e004      	b.n	8010740 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8010736:	2300      	movs	r3, #0
 8010738:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801073a:	2301      	movs	r3, #1
 801073c:	76bb      	strb	r3, [r7, #26]
        break;
 801073e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d074      	beq.n	8010830 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	005a      	lsls	r2, r3, #1
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	085b      	lsrs	r3, r3, #1
 8010750:	441a      	add	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	fbb2 f3f3 	udiv	r3, r2, r3
 801075a:	b29b      	uxth	r3, r3
 801075c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	2b0f      	cmp	r3, #15
 8010762:	d916      	bls.n	8010792 <UART_SetConfig+0x45a>
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801076a:	d212      	bcs.n	8010792 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	b29b      	uxth	r3, r3
 8010770:	f023 030f 	bic.w	r3, r3, #15
 8010774:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	085b      	lsrs	r3, r3, #1
 801077a:	b29b      	uxth	r3, r3
 801077c:	f003 0307 	and.w	r3, r3, #7
 8010780:	b29a      	uxth	r2, r3
 8010782:	89fb      	ldrh	r3, [r7, #14]
 8010784:	4313      	orrs	r3, r2
 8010786:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	89fa      	ldrh	r2, [r7, #14]
 801078e:	60da      	str	r2, [r3, #12]
 8010790:	e04e      	b.n	8010830 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8010792:	2301      	movs	r3, #1
 8010794:	76bb      	strb	r3, [r7, #26]
 8010796:	e04b      	b.n	8010830 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010798:	7efb      	ldrb	r3, [r7, #27]
 801079a:	2b08      	cmp	r3, #8
 801079c:	d827      	bhi.n	80107ee <UART_SetConfig+0x4b6>
 801079e:	a201      	add	r2, pc, #4	; (adr r2, 80107a4 <UART_SetConfig+0x46c>)
 80107a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a4:	080107c9 	.word	0x080107c9
 80107a8:	080107d1 	.word	0x080107d1
 80107ac:	080107d9 	.word	0x080107d9
 80107b0:	080107ef 	.word	0x080107ef
 80107b4:	080107df 	.word	0x080107df
 80107b8:	080107ef 	.word	0x080107ef
 80107bc:	080107ef 	.word	0x080107ef
 80107c0:	080107ef 	.word	0x080107ef
 80107c4:	080107e7 	.word	0x080107e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107c8:	f7fc f926 	bl	800ca18 <HAL_RCC_GetPCLK1Freq>
 80107cc:	6178      	str	r0, [r7, #20]
        break;
 80107ce:	e013      	b.n	80107f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107d0:	f7fc f938 	bl	800ca44 <HAL_RCC_GetPCLK2Freq>
 80107d4:	6178      	str	r0, [r7, #20]
        break;
 80107d6:	e00f      	b.n	80107f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80107d8:	4b1b      	ldr	r3, [pc, #108]	; (8010848 <UART_SetConfig+0x510>)
 80107da:	617b      	str	r3, [r7, #20]
        break;
 80107dc:	e00c      	b.n	80107f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80107de:	f7fc f883 	bl	800c8e8 <HAL_RCC_GetSysClockFreq>
 80107e2:	6178      	str	r0, [r7, #20]
        break;
 80107e4:	e008      	b.n	80107f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80107ea:	617b      	str	r3, [r7, #20]
        break;
 80107ec:	e004      	b.n	80107f8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80107ee:	2300      	movs	r3, #0
 80107f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80107f2:	2301      	movs	r3, #1
 80107f4:	76bb      	strb	r3, [r7, #26]
        break;
 80107f6:	bf00      	nop
    }

    if (pclk != 0U)
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d018      	beq.n	8010830 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	085a      	lsrs	r2, r3, #1
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	441a      	add	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010810:	b29b      	uxth	r3, r3
 8010812:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	2b0f      	cmp	r3, #15
 8010818:	d908      	bls.n	801082c <UART_SetConfig+0x4f4>
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010820:	d204      	bcs.n	801082c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	693a      	ldr	r2, [r7, #16]
 8010828:	60da      	str	r2, [r3, #12]
 801082a:	e001      	b.n	8010830 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801083c:	7ebb      	ldrb	r3, [r7, #26]
}
 801083e:	4618      	mov	r0, r3
 8010840:	3720      	adds	r7, #32
 8010842:	46bd      	mov	sp, r7
 8010844:	bdb0      	pop	{r4, r5, r7, pc}
 8010846:	bf00      	nop
 8010848:	00f42400 	.word	0x00f42400

0801084c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010858:	f003 0301 	and.w	r3, r3, #1
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00a      	beq.n	8010876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	430a      	orrs	r2, r1
 8010874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087a:	f003 0302 	and.w	r3, r3, #2
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00a      	beq.n	8010898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	430a      	orrs	r2, r1
 8010896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801089c:	f003 0304 	and.w	r3, r3, #4
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00a      	beq.n	80108ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	430a      	orrs	r2, r1
 80108b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108be:	f003 0308 	and.w	r3, r3, #8
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d00a      	beq.n	80108dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	430a      	orrs	r2, r1
 80108da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e0:	f003 0310 	and.w	r3, r3, #16
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d00a      	beq.n	80108fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	689b      	ldr	r3, [r3, #8]
 80108ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	430a      	orrs	r2, r1
 80108fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010902:	f003 0320 	and.w	r3, r3, #32
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00a      	beq.n	8010920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	689b      	ldr	r3, [r3, #8]
 8010910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	430a      	orrs	r2, r1
 801091e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010928:	2b00      	cmp	r3, #0
 801092a:	d01a      	beq.n	8010962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	430a      	orrs	r2, r1
 8010940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801094a:	d10a      	bne.n	8010962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	430a      	orrs	r2, r1
 8010960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00a      	beq.n	8010984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	430a      	orrs	r2, r1
 8010982:	605a      	str	r2, [r3, #4]
  }
}
 8010984:	bf00      	nop
 8010986:	370c      	adds	r7, #12
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af02      	add	r7, sp, #8
 8010996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80109a0:	f7f7 f928 	bl	8007bf4 <HAL_GetTick>
 80109a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f003 0308 	and.w	r3, r3, #8
 80109b0:	2b08      	cmp	r3, #8
 80109b2:	d10e      	bne.n	80109d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80109b8:	9300      	str	r3, [sp, #0]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2200      	movs	r2, #0
 80109be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f82d 	bl	8010a22 <UART_WaitOnFlagUntilTimeout>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109ce:	2303      	movs	r3, #3
 80109d0:	e023      	b.n	8010a1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f003 0304 	and.w	r3, r3, #4
 80109dc:	2b04      	cmp	r3, #4
 80109de:	d10e      	bne.n	80109fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80109e4:	9300      	str	r3, [sp, #0]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2200      	movs	r2, #0
 80109ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 f817 	bl	8010a22 <UART_WaitOnFlagUntilTimeout>
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d001      	beq.n	80109fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109fa:	2303      	movs	r3, #3
 80109fc:	e00d      	b.n	8010a1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2220      	movs	r2, #32
 8010a02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2220      	movs	r2, #32
 8010a08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010a18:	2300      	movs	r3, #0
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a22:	b580      	push	{r7, lr}
 8010a24:	b084      	sub	sp, #16
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	60f8      	str	r0, [r7, #12]
 8010a2a:	60b9      	str	r1, [r7, #8]
 8010a2c:	603b      	str	r3, [r7, #0]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a32:	e05e      	b.n	8010af2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a34:	69bb      	ldr	r3, [r7, #24]
 8010a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a3a:	d05a      	beq.n	8010af2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a3c:	f7f7 f8da 	bl	8007bf4 <HAL_GetTick>
 8010a40:	4602      	mov	r2, r0
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	69ba      	ldr	r2, [r7, #24]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d302      	bcc.n	8010a52 <UART_WaitOnFlagUntilTimeout+0x30>
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d11b      	bne.n	8010a8a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	689a      	ldr	r2, [r3, #8]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f022 0201 	bic.w	r2, r2, #1
 8010a70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2220      	movs	r2, #32
 8010a76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2220      	movs	r2, #32
 8010a7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010a86:	2303      	movs	r3, #3
 8010a88:	e043      	b.n	8010b12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f003 0304 	and.w	r3, r3, #4
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d02c      	beq.n	8010af2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	69db      	ldr	r3, [r3, #28]
 8010a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010aa6:	d124      	bne.n	8010af2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ab0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010ac0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	689a      	ldr	r2, [r3, #8]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f022 0201 	bic.w	r2, r2, #1
 8010ad0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2220      	movs	r2, #32
 8010adc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2220      	movs	r2, #32
 8010ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010aee:	2303      	movs	r3, #3
 8010af0:	e00f      	b.n	8010b12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	69da      	ldr	r2, [r3, #28]
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	4013      	ands	r3, r2
 8010afc:	68ba      	ldr	r2, [r7, #8]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	bf0c      	ite	eq
 8010b02:	2301      	moveq	r3, #1
 8010b04:	2300      	movne	r3, #0
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	461a      	mov	r2, r3
 8010b0a:	79fb      	ldrb	r3, [r7, #7]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d091      	beq.n	8010a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b1a:	b480      	push	{r7}
 8010b1c:	b083      	sub	sp, #12
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b30:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	689a      	ldr	r2, [r3, #8]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f022 0201 	bic.w	r2, r2, #1
 8010b40:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d107      	bne.n	8010b5a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f022 0210 	bic.w	r2, r2, #16
 8010b58:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2220      	movs	r2, #32
 8010b5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010b6c:	bf00      	nop
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f7ff fbb8 	bl	801030c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b9c:	bf00      	nop
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2220      	movs	r2, #32
 8010bc0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7ff fb95 	bl	80102f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bce:	bf00      	nop
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	b083      	sub	sp, #12
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010bde:	bf00      	nop
 8010be0:	370c      	adds	r7, #12
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr

08010bea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010bea:	b084      	sub	sp, #16
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	f107 001c 	add.w	r0, r7, #28
 8010bf8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f001 f9cf 	bl	8011fac <USB_CoreReset>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d106      	bne.n	8010c26 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	639a      	str	r2, [r3, #56]	; 0x38
 8010c24:	e005      	b.n	8010c32 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8010c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c3e:	b004      	add	sp, #16
 8010c40:	4770      	bx	lr
	...

08010c44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b087      	sub	sp, #28
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	4613      	mov	r3, r2
 8010c50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c52:	79fb      	ldrb	r3, [r7, #7]
 8010c54:	2b02      	cmp	r3, #2
 8010c56:	d165      	bne.n	8010d24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	4a3e      	ldr	r2, [pc, #248]	; (8010d54 <USB_SetTurnaroundTime+0x110>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d906      	bls.n	8010c6e <USB_SetTurnaroundTime+0x2a>
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	4a3d      	ldr	r2, [pc, #244]	; (8010d58 <USB_SetTurnaroundTime+0x114>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d202      	bcs.n	8010c6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c68:	230f      	movs	r3, #15
 8010c6a:	617b      	str	r3, [r7, #20]
 8010c6c:	e05c      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	4a39      	ldr	r2, [pc, #228]	; (8010d58 <USB_SetTurnaroundTime+0x114>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d306      	bcc.n	8010c84 <USB_SetTurnaroundTime+0x40>
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	4a38      	ldr	r2, [pc, #224]	; (8010d5c <USB_SetTurnaroundTime+0x118>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d202      	bcs.n	8010c84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010c7e:	230e      	movs	r3, #14
 8010c80:	617b      	str	r3, [r7, #20]
 8010c82:	e051      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	4a35      	ldr	r2, [pc, #212]	; (8010d5c <USB_SetTurnaroundTime+0x118>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d306      	bcc.n	8010c9a <USB_SetTurnaroundTime+0x56>
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	4a34      	ldr	r2, [pc, #208]	; (8010d60 <USB_SetTurnaroundTime+0x11c>)
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d202      	bcs.n	8010c9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010c94:	230d      	movs	r3, #13
 8010c96:	617b      	str	r3, [r7, #20]
 8010c98:	e046      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	4a30      	ldr	r2, [pc, #192]	; (8010d60 <USB_SetTurnaroundTime+0x11c>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d306      	bcc.n	8010cb0 <USB_SetTurnaroundTime+0x6c>
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	4a2f      	ldr	r2, [pc, #188]	; (8010d64 <USB_SetTurnaroundTime+0x120>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d802      	bhi.n	8010cb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010caa:	230c      	movs	r3, #12
 8010cac:	617b      	str	r3, [r7, #20]
 8010cae:	e03b      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	4a2c      	ldr	r2, [pc, #176]	; (8010d64 <USB_SetTurnaroundTime+0x120>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d906      	bls.n	8010cc6 <USB_SetTurnaroundTime+0x82>
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	4a2b      	ldr	r2, [pc, #172]	; (8010d68 <USB_SetTurnaroundTime+0x124>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d802      	bhi.n	8010cc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010cc0:	230b      	movs	r3, #11
 8010cc2:	617b      	str	r3, [r7, #20]
 8010cc4:	e030      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	4a27      	ldr	r2, [pc, #156]	; (8010d68 <USB_SetTurnaroundTime+0x124>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d906      	bls.n	8010cdc <USB_SetTurnaroundTime+0x98>
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	4a26      	ldr	r2, [pc, #152]	; (8010d6c <USB_SetTurnaroundTime+0x128>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d802      	bhi.n	8010cdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cd6:	230a      	movs	r3, #10
 8010cd8:	617b      	str	r3, [r7, #20]
 8010cda:	e025      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	4a23      	ldr	r2, [pc, #140]	; (8010d6c <USB_SetTurnaroundTime+0x128>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d906      	bls.n	8010cf2 <USB_SetTurnaroundTime+0xae>
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	4a22      	ldr	r2, [pc, #136]	; (8010d70 <USB_SetTurnaroundTime+0x12c>)
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	d202      	bcs.n	8010cf2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010cec:	2309      	movs	r3, #9
 8010cee:	617b      	str	r3, [r7, #20]
 8010cf0:	e01a      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	4a1e      	ldr	r2, [pc, #120]	; (8010d70 <USB_SetTurnaroundTime+0x12c>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d306      	bcc.n	8010d08 <USB_SetTurnaroundTime+0xc4>
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	4a1d      	ldr	r2, [pc, #116]	; (8010d74 <USB_SetTurnaroundTime+0x130>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d802      	bhi.n	8010d08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d02:	2308      	movs	r3, #8
 8010d04:	617b      	str	r3, [r7, #20]
 8010d06:	e00f      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	4a1a      	ldr	r2, [pc, #104]	; (8010d74 <USB_SetTurnaroundTime+0x130>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d906      	bls.n	8010d1e <USB_SetTurnaroundTime+0xda>
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	4a19      	ldr	r2, [pc, #100]	; (8010d78 <USB_SetTurnaroundTime+0x134>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d202      	bcs.n	8010d1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d18:	2307      	movs	r3, #7
 8010d1a:	617b      	str	r3, [r7, #20]
 8010d1c:	e004      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d1e:	2306      	movs	r3, #6
 8010d20:	617b      	str	r3, [r7, #20]
 8010d22:	e001      	b.n	8010d28 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d24:	2309      	movs	r3, #9
 8010d26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	68da      	ldr	r2, [r3, #12]
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	029b      	lsls	r3, r3, #10
 8010d3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d40:	431a      	orrs	r2, r3
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d46:	2300      	movs	r3, #0
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	371c      	adds	r7, #28
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr
 8010d54:	00d8acbf 	.word	0x00d8acbf
 8010d58:	00e4e1c0 	.word	0x00e4e1c0
 8010d5c:	00f42400 	.word	0x00f42400
 8010d60:	01067380 	.word	0x01067380
 8010d64:	011a499f 	.word	0x011a499f
 8010d68:	01312cff 	.word	0x01312cff
 8010d6c:	014ca43f 	.word	0x014ca43f
 8010d70:	016e3600 	.word	0x016e3600
 8010d74:	01a6ab1f 	.word	0x01a6ab1f
 8010d78:	01e84800 	.word	0x01e84800

08010d7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	f043 0201 	orr.w	r2, r3, #1
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	370c      	adds	r7, #12
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr

08010d9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d9e:	b480      	push	{r7}
 8010da0:	b083      	sub	sp, #12
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	689b      	ldr	r3, [r3, #8]
 8010daa:	f023 0201 	bic.w	r2, r3, #1
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	460b      	mov	r3, r1
 8010dca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010dd8:	78fb      	ldrb	r3, [r7, #3]
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d106      	bne.n	8010dec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	60da      	str	r2, [r3, #12]
 8010dea:	e00b      	b.n	8010e04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010dec:	78fb      	ldrb	r3, [r7, #3]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d106      	bne.n	8010e00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	60da      	str	r2, [r3, #12]
 8010dfe:	e001      	b.n	8010e04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010e00:	2301      	movs	r3, #1
 8010e02:	e003      	b.n	8010e0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010e04:	2032      	movs	r0, #50	; 0x32
 8010e06:	f7f6 ff01 	bl	8007c0c <HAL_Delay>

  return HAL_OK;
 8010e0a:	2300      	movs	r3, #0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e14:	b084      	sub	sp, #16
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b086      	sub	sp, #24
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
 8010e1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e2e:	2300      	movs	r3, #0
 8010e30:	613b      	str	r3, [r7, #16]
 8010e32:	e009      	b.n	8010e48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	3340      	adds	r3, #64	; 0x40
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	4413      	add	r3, r2
 8010e3e:	2200      	movs	r2, #0
 8010e40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	3301      	adds	r3, #1
 8010e46:	613b      	str	r3, [r7, #16]
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	2b0e      	cmp	r3, #14
 8010e4c:	d9f2      	bls.n	8010e34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d11c      	bne.n	8010e8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e62:	f043 0302 	orr.w	r3, r3, #2
 8010e66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	601a      	str	r2, [r3, #0]
 8010e8c:	e005      	b.n	8010e9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eac:	4619      	mov	r1, r3
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	680b      	ldr	r3, [r1, #0]
 8010eb8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010eba:	2103      	movs	r1, #3
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 f93d 	bl	801113c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010ec2:	2110      	movs	r1, #16
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 f8f1 	bl	80110ac <USB_FlushTxFifo>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d001      	beq.n	8010ed4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 f90f 	bl	80110f8 <USB_FlushRxFifo>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eea:	461a      	mov	r2, r3
 8010eec:	2300      	movs	r3, #0
 8010eee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	2300      	movs	r3, #0
 8010efa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f02:	461a      	mov	r2, r3
 8010f04:	2300      	movs	r3, #0
 8010f06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f08:	2300      	movs	r3, #0
 8010f0a:	613b      	str	r3, [r7, #16]
 8010f0c:	e043      	b.n	8010f96 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	015a      	lsls	r2, r3, #5
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	4413      	add	r3, r2
 8010f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f24:	d118      	bne.n	8010f58 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d10a      	bne.n	8010f42 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	015a      	lsls	r2, r3, #5
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	4413      	add	r3, r2
 8010f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f38:	461a      	mov	r2, r3
 8010f3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f3e:	6013      	str	r3, [r2, #0]
 8010f40:	e013      	b.n	8010f6a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	015a      	lsls	r2, r3, #5
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	4413      	add	r3, r2
 8010f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f4e:	461a      	mov	r2, r3
 8010f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010f54:	6013      	str	r3, [r2, #0]
 8010f56:	e008      	b.n	8010f6a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	015a      	lsls	r2, r3, #5
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	4413      	add	r3, r2
 8010f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f64:	461a      	mov	r2, r3
 8010f66:	2300      	movs	r3, #0
 8010f68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	015a      	lsls	r2, r3, #5
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	4413      	add	r3, r2
 8010f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f76:	461a      	mov	r2, r3
 8010f78:	2300      	movs	r3, #0
 8010f7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	015a      	lsls	r2, r3, #5
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	4413      	add	r3, r2
 8010f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f88:	461a      	mov	r2, r3
 8010f8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010f8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	3301      	adds	r3, #1
 8010f94:	613b      	str	r3, [r7, #16]
 8010f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f98:	693a      	ldr	r2, [r7, #16]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d3b7      	bcc.n	8010f0e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	613b      	str	r3, [r7, #16]
 8010fa2:	e043      	b.n	801102c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	015a      	lsls	r2, r3, #5
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	4413      	add	r3, r2
 8010fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fba:	d118      	bne.n	8010fee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10a      	bne.n	8010fd8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	015a      	lsls	r2, r3, #5
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	4413      	add	r3, r2
 8010fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fce:	461a      	mov	r2, r3
 8010fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010fd4:	6013      	str	r3, [r2, #0]
 8010fd6:	e013      	b.n	8011000 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	015a      	lsls	r2, r3, #5
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	4413      	add	r3, r2
 8010fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010fea:	6013      	str	r3, [r2, #0]
 8010fec:	e008      	b.n	8011000 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	015a      	lsls	r2, r3, #5
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	015a      	lsls	r2, r3, #5
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	4413      	add	r3, r2
 8011008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801100c:	461a      	mov	r2, r3
 801100e:	2300      	movs	r3, #0
 8011010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	015a      	lsls	r2, r3, #5
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	4413      	add	r3, r2
 801101a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801101e:	461a      	mov	r2, r3
 8011020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	3301      	adds	r3, #1
 801102a:	613b      	str	r3, [r7, #16]
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	693a      	ldr	r2, [r7, #16]
 8011030:	429a      	cmp	r2, r3
 8011032:	d3b7      	bcc.n	8010fa4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801103a:	691b      	ldr	r3, [r3, #16]
 801103c:	68fa      	ldr	r2, [r7, #12]
 801103e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011046:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011054:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	699b      	ldr	r3, [r3, #24]
 801105a:	f043 0210 	orr.w	r2, r3, #16
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	699a      	ldr	r2, [r3, #24]
 8011066:	4b10      	ldr	r3, [pc, #64]	; (80110a8 <USB_DevInit+0x294>)
 8011068:	4313      	orrs	r3, r2
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801106e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011070:	2b00      	cmp	r3, #0
 8011072:	d005      	beq.n	8011080 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	699b      	ldr	r3, [r3, #24]
 8011078:	f043 0208 	orr.w	r2, r3, #8
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011082:	2b01      	cmp	r3, #1
 8011084:	d107      	bne.n	8011096 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	699b      	ldr	r3, [r3, #24]
 801108a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801108e:	f043 0304 	orr.w	r3, r3, #4
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011096:	7dfb      	ldrb	r3, [r7, #23]
}
 8011098:	4618      	mov	r0, r3
 801109a:	3718      	adds	r7, #24
 801109c:	46bd      	mov	sp, r7
 801109e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110a2:	b004      	add	sp, #16
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop
 80110a8:	803c3800 	.word	0x803c3800

080110ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80110b6:	2300      	movs	r3, #0
 80110b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	019b      	lsls	r3, r3, #6
 80110be:	f043 0220 	orr.w	r2, r3, #32
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3301      	adds	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	4a09      	ldr	r2, [pc, #36]	; (80110f4 <USB_FlushTxFifo+0x48>)
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d901      	bls.n	80110d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80110d4:	2303      	movs	r3, #3
 80110d6:	e006      	b.n	80110e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	691b      	ldr	r3, [r3, #16]
 80110dc:	f003 0320 	and.w	r3, r3, #32
 80110e0:	2b20      	cmp	r3, #32
 80110e2:	d0f0      	beq.n	80110c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80110e4:	2300      	movs	r3, #0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3714      	adds	r7, #20
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr
 80110f2:	bf00      	nop
 80110f4:	00030d40 	.word	0x00030d40

080110f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b085      	sub	sp, #20
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011100:	2300      	movs	r3, #0
 8011102:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2210      	movs	r2, #16
 8011108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	3301      	adds	r3, #1
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	4a09      	ldr	r2, [pc, #36]	; (8011138 <USB_FlushRxFifo+0x40>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d901      	bls.n	801111c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011118:	2303      	movs	r3, #3
 801111a:	e006      	b.n	801112a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	691b      	ldr	r3, [r3, #16]
 8011120:	f003 0310 	and.w	r3, r3, #16
 8011124:	2b10      	cmp	r3, #16
 8011126:	d0f0      	beq.n	801110a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011128:	2300      	movs	r3, #0
}
 801112a:	4618      	mov	r0, r3
 801112c:	3714      	adds	r7, #20
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	00030d40 	.word	0x00030d40

0801113c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	460b      	mov	r3, r1
 8011146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011152:	681a      	ldr	r2, [r3, #0]
 8011154:	78fb      	ldrb	r3, [r7, #3]
 8011156:	68f9      	ldr	r1, [r7, #12]
 8011158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801115c:	4313      	orrs	r3, r2
 801115e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011160:	2300      	movs	r3, #0
}
 8011162:	4618      	mov	r0, r3
 8011164:	3714      	adds	r7, #20
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr

0801116e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801116e:	b480      	push	{r7}
 8011170:	b087      	sub	sp, #28
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011180:	689b      	ldr	r3, [r3, #8]
 8011182:	f003 0306 	and.w	r3, r3, #6
 8011186:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2b02      	cmp	r3, #2
 801118c:	d002      	beq.n	8011194 <USB_GetDevSpeed+0x26>
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b06      	cmp	r3, #6
 8011192:	d102      	bne.n	801119a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011194:	2302      	movs	r3, #2
 8011196:	75fb      	strb	r3, [r7, #23]
 8011198:	e001      	b.n	801119e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801119a:	230f      	movs	r3, #15
 801119c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801119e:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	371c      	adds	r7, #28
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	785b      	ldrb	r3, [r3, #1]
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d13a      	bne.n	801123e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111ce:	69da      	ldr	r2, [r3, #28]
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	f003 030f 	and.w	r3, r3, #15
 80111d8:	2101      	movs	r1, #1
 80111da:	fa01 f303 	lsl.w	r3, r1, r3
 80111de:	b29b      	uxth	r3, r3
 80111e0:	68f9      	ldr	r1, [r7, #12]
 80111e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111e6:	4313      	orrs	r3, r2
 80111e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	015a      	lsls	r2, r3, #5
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	4413      	add	r3, r2
 80111f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d155      	bne.n	80112ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	015a      	lsls	r2, r3, #5
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	4413      	add	r3, r2
 8011208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	689b      	ldr	r3, [r3, #8]
 8011212:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	78db      	ldrb	r3, [r3, #3]
 801121a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801121c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	059b      	lsls	r3, r3, #22
 8011222:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011224:	4313      	orrs	r3, r2
 8011226:	68ba      	ldr	r2, [r7, #8]
 8011228:	0151      	lsls	r1, r2, #5
 801122a:	68fa      	ldr	r2, [r7, #12]
 801122c:	440a      	add	r2, r1
 801122e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801123a:	6013      	str	r3, [r2, #0]
 801123c:	e036      	b.n	80112ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011244:	69da      	ldr	r2, [r3, #28]
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	f003 030f 	and.w	r3, r3, #15
 801124e:	2101      	movs	r1, #1
 8011250:	fa01 f303 	lsl.w	r3, r1, r3
 8011254:	041b      	lsls	r3, r3, #16
 8011256:	68f9      	ldr	r1, [r7, #12]
 8011258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801125c:	4313      	orrs	r3, r2
 801125e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	015a      	lsls	r2, r3, #5
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	4413      	add	r3, r2
 8011268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011272:	2b00      	cmp	r3, #0
 8011274:	d11a      	bne.n	80112ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	015a      	lsls	r2, r3, #5
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	4413      	add	r3, r2
 801127e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	689b      	ldr	r3, [r3, #8]
 8011288:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	78db      	ldrb	r3, [r3, #3]
 8011290:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011292:	430b      	orrs	r3, r1
 8011294:	4313      	orrs	r3, r2
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	0151      	lsls	r1, r2, #5
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	440a      	add	r2, r1
 801129e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3714      	adds	r7, #20
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
	...

080112bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80112bc:	b480      	push	{r7}
 80112be:	b085      	sub	sp, #20
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	785b      	ldrb	r3, [r3, #1]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d161      	bne.n	801139c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	015a      	lsls	r2, r3, #5
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	4413      	add	r3, r2
 80112e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80112ee:	d11f      	bne.n	8011330 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	015a      	lsls	r2, r3, #5
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	4413      	add	r3, r2
 80112f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	0151      	lsls	r1, r2, #5
 8011302:	68fa      	ldr	r2, [r7, #12]
 8011304:	440a      	add	r2, r1
 8011306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801130a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801130e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	015a      	lsls	r2, r3, #5
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	4413      	add	r3, r2
 8011318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	68ba      	ldr	r2, [r7, #8]
 8011320:	0151      	lsls	r1, r2, #5
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	440a      	add	r2, r1
 8011326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801132a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801132e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	f003 030f 	and.w	r3, r3, #15
 8011340:	2101      	movs	r1, #1
 8011342:	fa01 f303 	lsl.w	r3, r1, r3
 8011346:	b29b      	uxth	r3, r3
 8011348:	43db      	mvns	r3, r3
 801134a:	68f9      	ldr	r1, [r7, #12]
 801134c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011350:	4013      	ands	r3, r2
 8011352:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801135a:	69da      	ldr	r2, [r3, #28]
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	f003 030f 	and.w	r3, r3, #15
 8011364:	2101      	movs	r1, #1
 8011366:	fa01 f303 	lsl.w	r3, r1, r3
 801136a:	b29b      	uxth	r3, r3
 801136c:	43db      	mvns	r3, r3
 801136e:	68f9      	ldr	r1, [r7, #12]
 8011370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011374:	4013      	ands	r3, r2
 8011376:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	015a      	lsls	r2, r3, #5
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	4413      	add	r3, r2
 8011380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011384:	681a      	ldr	r2, [r3, #0]
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	0159      	lsls	r1, r3, #5
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	440b      	add	r3, r1
 801138e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011392:	4619      	mov	r1, r3
 8011394:	4b35      	ldr	r3, [pc, #212]	; (801146c <USB_DeactivateEndpoint+0x1b0>)
 8011396:	4013      	ands	r3, r2
 8011398:	600b      	str	r3, [r1, #0]
 801139a:	e060      	b.n	801145e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	015a      	lsls	r2, r3, #5
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	4413      	add	r3, r2
 80113a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113b2:	d11f      	bne.n	80113f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	015a      	lsls	r2, r3, #5
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	4413      	add	r3, r2
 80113bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	68ba      	ldr	r2, [r7, #8]
 80113c4:	0151      	lsls	r1, r2, #5
 80113c6:	68fa      	ldr	r2, [r7, #12]
 80113c8:	440a      	add	r2, r1
 80113ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80113d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	015a      	lsls	r2, r3, #5
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	4413      	add	r3, r2
 80113dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	68ba      	ldr	r2, [r7, #8]
 80113e4:	0151      	lsls	r1, r2, #5
 80113e6:	68fa      	ldr	r2, [r7, #12]
 80113e8:	440a      	add	r2, r1
 80113ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	f003 030f 	and.w	r3, r3, #15
 8011404:	2101      	movs	r1, #1
 8011406:	fa01 f303 	lsl.w	r3, r1, r3
 801140a:	041b      	lsls	r3, r3, #16
 801140c:	43db      	mvns	r3, r3
 801140e:	68f9      	ldr	r1, [r7, #12]
 8011410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011414:	4013      	ands	r3, r2
 8011416:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801141e:	69da      	ldr	r2, [r3, #28]
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	f003 030f 	and.w	r3, r3, #15
 8011428:	2101      	movs	r1, #1
 801142a:	fa01 f303 	lsl.w	r3, r1, r3
 801142e:	041b      	lsls	r3, r3, #16
 8011430:	43db      	mvns	r3, r3
 8011432:	68f9      	ldr	r1, [r7, #12]
 8011434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011438:	4013      	ands	r3, r2
 801143a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	015a      	lsls	r2, r3, #5
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	4413      	add	r3, r2
 8011444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	0159      	lsls	r1, r3, #5
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	440b      	add	r3, r1
 8011452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011456:	4619      	mov	r1, r3
 8011458:	4b05      	ldr	r3, [pc, #20]	; (8011470 <USB_DeactivateEndpoint+0x1b4>)
 801145a:	4013      	ands	r3, r2
 801145c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801145e:	2300      	movs	r3, #0
}
 8011460:	4618      	mov	r0, r3
 8011462:	3714      	adds	r7, #20
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr
 801146c:	ec337800 	.word	0xec337800
 8011470:	eff37800 	.word	0xeff37800

08011474 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	785b      	ldrb	r3, [r3, #1]
 801148c:	2b01      	cmp	r3, #1
 801148e:	f040 810a 	bne.w	80116a6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	695b      	ldr	r3, [r3, #20]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d132      	bne.n	8011500 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	015a      	lsls	r2, r3, #5
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	4413      	add	r3, r2
 80114a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114a6:	691b      	ldr	r3, [r3, #16]
 80114a8:	693a      	ldr	r2, [r7, #16]
 80114aa:	0151      	lsls	r1, r2, #5
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	440a      	add	r2, r1
 80114b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80114b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80114bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	015a      	lsls	r2, r3, #5
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	4413      	add	r3, r2
 80114c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	693a      	ldr	r2, [r7, #16]
 80114ce:	0151      	lsls	r1, r2, #5
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	440a      	add	r2, r1
 80114d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	015a      	lsls	r2, r3, #5
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	4413      	add	r3, r2
 80114e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114ea:	691b      	ldr	r3, [r3, #16]
 80114ec:	693a      	ldr	r2, [r7, #16]
 80114ee:	0151      	lsls	r1, r2, #5
 80114f0:	697a      	ldr	r2, [r7, #20]
 80114f2:	440a      	add	r2, r1
 80114f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114f8:	0cdb      	lsrs	r3, r3, #19
 80114fa:	04db      	lsls	r3, r3, #19
 80114fc:	6113      	str	r3, [r2, #16]
 80114fe:	e074      	b.n	80115ea <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	015a      	lsls	r2, r3, #5
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	4413      	add	r3, r2
 8011508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	693a      	ldr	r2, [r7, #16]
 8011510:	0151      	lsls	r1, r2, #5
 8011512:	697a      	ldr	r2, [r7, #20]
 8011514:	440a      	add	r2, r1
 8011516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801151a:	0cdb      	lsrs	r3, r3, #19
 801151c:	04db      	lsls	r3, r3, #19
 801151e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	015a      	lsls	r2, r3, #5
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	4413      	add	r3, r2
 8011528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801152c:	691b      	ldr	r3, [r3, #16]
 801152e:	693a      	ldr	r2, [r7, #16]
 8011530:	0151      	lsls	r1, r2, #5
 8011532:	697a      	ldr	r2, [r7, #20]
 8011534:	440a      	add	r2, r1
 8011536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801153a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801153e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011550:	691a      	ldr	r2, [r3, #16]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	6959      	ldr	r1, [r3, #20]
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	440b      	add	r3, r1
 801155c:	1e59      	subs	r1, r3, #1
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	fbb1 f3f3 	udiv	r3, r1, r3
 8011566:	04d9      	lsls	r1, r3, #19
 8011568:	4baf      	ldr	r3, [pc, #700]	; (8011828 <USB_EPStartXfer+0x3b4>)
 801156a:	400b      	ands	r3, r1
 801156c:	6939      	ldr	r1, [r7, #16]
 801156e:	0148      	lsls	r0, r1, #5
 8011570:	6979      	ldr	r1, [r7, #20]
 8011572:	4401      	add	r1, r0
 8011574:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011578:	4313      	orrs	r3, r2
 801157a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	015a      	lsls	r2, r3, #5
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	4413      	add	r3, r2
 8011584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011588:	691a      	ldr	r2, [r3, #16]
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	695b      	ldr	r3, [r3, #20]
 801158e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011592:	6939      	ldr	r1, [r7, #16]
 8011594:	0148      	lsls	r0, r1, #5
 8011596:	6979      	ldr	r1, [r7, #20]
 8011598:	4401      	add	r1, r0
 801159a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801159e:	4313      	orrs	r3, r2
 80115a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	78db      	ldrb	r3, [r3, #3]
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	d11f      	bne.n	80115ea <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	015a      	lsls	r2, r3, #5
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	4413      	add	r3, r2
 80115b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	693a      	ldr	r2, [r7, #16]
 80115ba:	0151      	lsls	r1, r2, #5
 80115bc:	697a      	ldr	r2, [r7, #20]
 80115be:	440a      	add	r2, r1
 80115c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80115c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	015a      	lsls	r2, r3, #5
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	4413      	add	r3, r2
 80115d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115d6:	691b      	ldr	r3, [r3, #16]
 80115d8:	693a      	ldr	r2, [r7, #16]
 80115da:	0151      	lsls	r1, r2, #5
 80115dc:	697a      	ldr	r2, [r7, #20]
 80115de:	440a      	add	r2, r1
 80115e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80115e8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	015a      	lsls	r2, r3, #5
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	4413      	add	r3, r2
 80115f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	693a      	ldr	r2, [r7, #16]
 80115fa:	0151      	lsls	r1, r2, #5
 80115fc:	697a      	ldr	r2, [r7, #20]
 80115fe:	440a      	add	r2, r1
 8011600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011608:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	78db      	ldrb	r3, [r3, #3]
 801160e:	2b01      	cmp	r3, #1
 8011610:	d015      	beq.n	801163e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	695b      	ldr	r3, [r3, #20]
 8011616:	2b00      	cmp	r3, #0
 8011618:	f000 8100 	beq.w	801181c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	f003 030f 	and.w	r3, r3, #15
 801162c:	2101      	movs	r1, #1
 801162e:	fa01 f303 	lsl.w	r3, r1, r3
 8011632:	6979      	ldr	r1, [r7, #20]
 8011634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011638:	4313      	orrs	r3, r2
 801163a:	634b      	str	r3, [r1, #52]	; 0x34
 801163c:	e0ee      	b.n	801181c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801164a:	2b00      	cmp	r3, #0
 801164c:	d110      	bne.n	8011670 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	015a      	lsls	r2, r3, #5
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	4413      	add	r3, r2
 8011656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	693a      	ldr	r2, [r7, #16]
 801165e:	0151      	lsls	r1, r2, #5
 8011660:	697a      	ldr	r2, [r7, #20]
 8011662:	440a      	add	r2, r1
 8011664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801166c:	6013      	str	r3, [r2, #0]
 801166e:	e00f      	b.n	8011690 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	015a      	lsls	r2, r3, #5
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	4413      	add	r3, r2
 8011678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	693a      	ldr	r2, [r7, #16]
 8011680:	0151      	lsls	r1, r2, #5
 8011682:	697a      	ldr	r2, [r7, #20]
 8011684:	440a      	add	r2, r1
 8011686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801168e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	68d9      	ldr	r1, [r3, #12]
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	781a      	ldrb	r2, [r3, #0]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	695b      	ldr	r3, [r3, #20]
 801169c:	b29b      	uxth	r3, r3
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f9e2 	bl	8011a68 <USB_WritePacket>
 80116a4:	e0ba      	b.n	801181c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	015a      	lsls	r2, r3, #5
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	4413      	add	r3, r2
 80116ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116b2:	691b      	ldr	r3, [r3, #16]
 80116b4:	693a      	ldr	r2, [r7, #16]
 80116b6:	0151      	lsls	r1, r2, #5
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	440a      	add	r2, r1
 80116bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116c0:	0cdb      	lsrs	r3, r3, #19
 80116c2:	04db      	lsls	r3, r3, #19
 80116c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	015a      	lsls	r2, r3, #5
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	4413      	add	r3, r2
 80116ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	693a      	ldr	r2, [r7, #16]
 80116d6:	0151      	lsls	r1, r2, #5
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	440a      	add	r2, r1
 80116dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80116e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80116e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	695b      	ldr	r3, [r3, #20]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d123      	bne.n	801173a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	015a      	lsls	r2, r3, #5
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	4413      	add	r3, r2
 80116fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116fe:	691a      	ldr	r2, [r3, #16]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	689b      	ldr	r3, [r3, #8]
 8011704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011708:	6939      	ldr	r1, [r7, #16]
 801170a:	0148      	lsls	r0, r1, #5
 801170c:	6979      	ldr	r1, [r7, #20]
 801170e:	4401      	add	r1, r0
 8011710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011714:	4313      	orrs	r3, r2
 8011716:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	015a      	lsls	r2, r3, #5
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	4413      	add	r3, r2
 8011720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011724:	691b      	ldr	r3, [r3, #16]
 8011726:	693a      	ldr	r2, [r7, #16]
 8011728:	0151      	lsls	r1, r2, #5
 801172a:	697a      	ldr	r2, [r7, #20]
 801172c:	440a      	add	r2, r1
 801172e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011732:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011736:	6113      	str	r3, [r2, #16]
 8011738:	e033      	b.n	80117a2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	695a      	ldr	r2, [r3, #20]
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	4413      	add	r3, r2
 8011744:	1e5a      	subs	r2, r3, #1
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	fbb2 f3f3 	udiv	r3, r2, r3
 801174e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	015a      	lsls	r2, r3, #5
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	4413      	add	r3, r2
 8011758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801175c:	691a      	ldr	r2, [r3, #16]
 801175e:	89fb      	ldrh	r3, [r7, #14]
 8011760:	04d9      	lsls	r1, r3, #19
 8011762:	4b31      	ldr	r3, [pc, #196]	; (8011828 <USB_EPStartXfer+0x3b4>)
 8011764:	400b      	ands	r3, r1
 8011766:	6939      	ldr	r1, [r7, #16]
 8011768:	0148      	lsls	r0, r1, #5
 801176a:	6979      	ldr	r1, [r7, #20]
 801176c:	4401      	add	r1, r0
 801176e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011772:	4313      	orrs	r3, r2
 8011774:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	015a      	lsls	r2, r3, #5
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	4413      	add	r3, r2
 801177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011782:	691a      	ldr	r2, [r3, #16]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	89f9      	ldrh	r1, [r7, #14]
 801178a:	fb01 f303 	mul.w	r3, r1, r3
 801178e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011792:	6939      	ldr	r1, [r7, #16]
 8011794:	0148      	lsls	r0, r1, #5
 8011796:	6979      	ldr	r1, [r7, #20]
 8011798:	4401      	add	r1, r0
 801179a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801179e:	4313      	orrs	r3, r2
 80117a0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	78db      	ldrb	r3, [r3, #3]
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d128      	bne.n	80117fc <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d110      	bne.n	80117dc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	015a      	lsls	r2, r3, #5
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	4413      	add	r3, r2
 80117c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	0151      	lsls	r1, r2, #5
 80117cc:	697a      	ldr	r2, [r7, #20]
 80117ce:	440a      	add	r2, r1
 80117d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117d8:	6013      	str	r3, [r2, #0]
 80117da:	e00f      	b.n	80117fc <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	015a      	lsls	r2, r3, #5
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	4413      	add	r3, r2
 80117e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	693a      	ldr	r2, [r7, #16]
 80117ec:	0151      	lsls	r1, r2, #5
 80117ee:	697a      	ldr	r2, [r7, #20]
 80117f0:	440a      	add	r2, r1
 80117f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	015a      	lsls	r2, r3, #5
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	4413      	add	r3, r2
 8011804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	693a      	ldr	r2, [r7, #16]
 801180c:	0151      	lsls	r1, r2, #5
 801180e:	697a      	ldr	r2, [r7, #20]
 8011810:	440a      	add	r2, r1
 8011812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801181a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	3718      	adds	r7, #24
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	1ff80000 	.word	0x1ff80000

0801182c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801182c:	b480      	push	{r7}
 801182e:	b085      	sub	sp, #20
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	785b      	ldrb	r3, [r3, #1]
 8011844:	2b01      	cmp	r3, #1
 8011846:	f040 80ab 	bne.w	80119a0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	695b      	ldr	r3, [r3, #20]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d132      	bne.n	80118b8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	015a      	lsls	r2, r3, #5
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	4413      	add	r3, r2
 801185a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801185e:	691b      	ldr	r3, [r3, #16]
 8011860:	68ba      	ldr	r2, [r7, #8]
 8011862:	0151      	lsls	r1, r2, #5
 8011864:	68fa      	ldr	r2, [r7, #12]
 8011866:	440a      	add	r2, r1
 8011868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801186c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011874:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	015a      	lsls	r2, r3, #5
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	4413      	add	r3, r2
 801187e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011882:	691b      	ldr	r3, [r3, #16]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	0151      	lsls	r1, r2, #5
 8011888:	68fa      	ldr	r2, [r7, #12]
 801188a:	440a      	add	r2, r1
 801188c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	015a      	lsls	r2, r3, #5
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	4413      	add	r3, r2
 801189e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118a2:	691b      	ldr	r3, [r3, #16]
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	0151      	lsls	r1, r2, #5
 80118a8:	68fa      	ldr	r2, [r7, #12]
 80118aa:	440a      	add	r2, r1
 80118ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118b0:	0cdb      	lsrs	r3, r3, #19
 80118b2:	04db      	lsls	r3, r3, #19
 80118b4:	6113      	str	r3, [r2, #16]
 80118b6:	e04e      	b.n	8011956 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	015a      	lsls	r2, r3, #5
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	4413      	add	r3, r2
 80118c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118c4:	691b      	ldr	r3, [r3, #16]
 80118c6:	68ba      	ldr	r2, [r7, #8]
 80118c8:	0151      	lsls	r1, r2, #5
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	440a      	add	r2, r1
 80118ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118d2:	0cdb      	lsrs	r3, r3, #19
 80118d4:	04db      	lsls	r3, r3, #19
 80118d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	015a      	lsls	r2, r3, #5
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	4413      	add	r3, r2
 80118e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118e4:	691b      	ldr	r3, [r3, #16]
 80118e6:	68ba      	ldr	r2, [r7, #8]
 80118e8:	0151      	lsls	r1, r2, #5
 80118ea:	68fa      	ldr	r2, [r7, #12]
 80118ec:	440a      	add	r2, r1
 80118ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80118f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80118fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	695a      	ldr	r2, [r3, #20]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	689b      	ldr	r3, [r3, #8]
 8011904:	429a      	cmp	r2, r3
 8011906:	d903      	bls.n	8011910 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	689a      	ldr	r2, [r3, #8]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	015a      	lsls	r2, r3, #5
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	4413      	add	r3, r2
 8011918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	68ba      	ldr	r2, [r7, #8]
 8011920:	0151      	lsls	r1, r2, #5
 8011922:	68fa      	ldr	r2, [r7, #12]
 8011924:	440a      	add	r2, r1
 8011926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801192a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801192e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	015a      	lsls	r2, r3, #5
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	4413      	add	r3, r2
 8011938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801193c:	691a      	ldr	r2, [r3, #16]
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	695b      	ldr	r3, [r3, #20]
 8011942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011946:	68b9      	ldr	r1, [r7, #8]
 8011948:	0148      	lsls	r0, r1, #5
 801194a:	68f9      	ldr	r1, [r7, #12]
 801194c:	4401      	add	r1, r0
 801194e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011952:	4313      	orrs	r3, r2
 8011954:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	015a      	lsls	r2, r3, #5
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	4413      	add	r3, r2
 801195e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	68ba      	ldr	r2, [r7, #8]
 8011966:	0151      	lsls	r1, r2, #5
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	440a      	add	r2, r1
 801196c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011974:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	695b      	ldr	r3, [r3, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d06d      	beq.n	8011a5a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	f003 030f 	and.w	r3, r3, #15
 801198e:	2101      	movs	r1, #1
 8011990:	fa01 f303 	lsl.w	r3, r1, r3
 8011994:	68f9      	ldr	r1, [r7, #12]
 8011996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801199a:	4313      	orrs	r3, r2
 801199c:	634b      	str	r3, [r1, #52]	; 0x34
 801199e:	e05c      	b.n	8011a5a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	015a      	lsls	r2, r3, #5
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	4413      	add	r3, r2
 80119a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	68ba      	ldr	r2, [r7, #8]
 80119b0:	0151      	lsls	r1, r2, #5
 80119b2:	68fa      	ldr	r2, [r7, #12]
 80119b4:	440a      	add	r2, r1
 80119b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119ba:	0cdb      	lsrs	r3, r3, #19
 80119bc:	04db      	lsls	r3, r3, #19
 80119be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	015a      	lsls	r2, r3, #5
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	4413      	add	r3, r2
 80119c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119cc:	691b      	ldr	r3, [r3, #16]
 80119ce:	68ba      	ldr	r2, [r7, #8]
 80119d0:	0151      	lsls	r1, r2, #5
 80119d2:	68fa      	ldr	r2, [r7, #12]
 80119d4:	440a      	add	r2, r1
 80119d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80119de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80119e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	695b      	ldr	r3, [r3, #20]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d003      	beq.n	80119f4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	689a      	ldr	r2, [r3, #8]
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	015a      	lsls	r2, r3, #5
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	4413      	add	r3, r2
 80119fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a00:	691b      	ldr	r3, [r3, #16]
 8011a02:	68ba      	ldr	r2, [r7, #8]
 8011a04:	0151      	lsls	r1, r2, #5
 8011a06:	68fa      	ldr	r2, [r7, #12]
 8011a08:	440a      	add	r2, r1
 8011a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	015a      	lsls	r2, r3, #5
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a20:	691a      	ldr	r2, [r3, #16]
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a2a:	68b9      	ldr	r1, [r7, #8]
 8011a2c:	0148      	lsls	r0, r1, #5
 8011a2e:	68f9      	ldr	r1, [r7, #12]
 8011a30:	4401      	add	r1, r0
 8011a32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a36:	4313      	orrs	r3, r2
 8011a38:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	015a      	lsls	r2, r3, #5
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	4413      	add	r3, r2
 8011a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	68ba      	ldr	r2, [r7, #8]
 8011a4a:	0151      	lsls	r1, r2, #5
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	440a      	add	r2, r1
 8011a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011a58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b089      	sub	sp, #36	; 0x24
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	4611      	mov	r1, r2
 8011a74:	461a      	mov	r2, r3
 8011a76:	460b      	mov	r3, r1
 8011a78:	71fb      	strb	r3, [r7, #7]
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011a86:	88bb      	ldrh	r3, [r7, #4]
 8011a88:	3303      	adds	r3, #3
 8011a8a:	089b      	lsrs	r3, r3, #2
 8011a8c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011a8e:	2300      	movs	r3, #0
 8011a90:	61bb      	str	r3, [r7, #24]
 8011a92:	e00f      	b.n	8011ab4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011a94:	79fb      	ldrb	r3, [r7, #7]
 8011a96:	031a      	lsls	r2, r3, #12
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	69fb      	ldr	r3, [r7, #28]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	3304      	adds	r3, #4
 8011aac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	61bb      	str	r3, [r7, #24]
 8011ab4:	69ba      	ldr	r2, [r7, #24]
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d3eb      	bcc.n	8011a94 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3724      	adds	r7, #36	; 0x24
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011aca:	b480      	push	{r7}
 8011acc:	b089      	sub	sp, #36	; 0x24
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	60f8      	str	r0, [r7, #12]
 8011ad2:	60b9      	str	r1, [r7, #8]
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011ae0:	88fb      	ldrh	r3, [r7, #6]
 8011ae2:	3303      	adds	r3, #3
 8011ae4:	089b      	lsrs	r3, r3, #2
 8011ae6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011ae8:	2300      	movs	r3, #0
 8011aea:	61bb      	str	r3, [r7, #24]
 8011aec:	e00b      	b.n	8011b06 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	601a      	str	r2, [r3, #0]
    pDest++;
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	3304      	adds	r3, #4
 8011afe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	3301      	adds	r3, #1
 8011b04:	61bb      	str	r3, [r7, #24]
 8011b06:	69ba      	ldr	r2, [r7, #24]
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d3ef      	bcc.n	8011aee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011b0e:	69fb      	ldr	r3, [r7, #28]
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3724      	adds	r7, #36	; 0x24
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	785b      	ldrb	r3, [r3, #1]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d12c      	bne.n	8011b92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	015a      	lsls	r2, r3, #5
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	4413      	add	r3, r2
 8011b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	db12      	blt.n	8011b70 <USB_EPSetStall+0x54>
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d00f      	beq.n	8011b70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	015a      	lsls	r2, r3, #5
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	4413      	add	r3, r2
 8011b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	68ba      	ldr	r2, [r7, #8]
 8011b60:	0151      	lsls	r1, r2, #5
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	440a      	add	r2, r1
 8011b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011b6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	015a      	lsls	r2, r3, #5
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	4413      	add	r3, r2
 8011b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	0151      	lsls	r1, r2, #5
 8011b82:	68fa      	ldr	r2, [r7, #12]
 8011b84:	440a      	add	r2, r1
 8011b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011b8e:	6013      	str	r3, [r2, #0]
 8011b90:	e02b      	b.n	8011bea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	015a      	lsls	r2, r3, #5
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	4413      	add	r3, r2
 8011b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	db12      	blt.n	8011bca <USB_EPSetStall+0xae>
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00f      	beq.n	8011bca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	015a      	lsls	r2, r3, #5
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	4413      	add	r3, r2
 8011bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	68ba      	ldr	r2, [r7, #8]
 8011bba:	0151      	lsls	r1, r2, #5
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	440a      	add	r2, r1
 8011bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011bc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	015a      	lsls	r2, r3, #5
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	68ba      	ldr	r2, [r7, #8]
 8011bda:	0151      	lsls	r1, r2, #5
 8011bdc:	68fa      	ldr	r2, [r7, #12]
 8011bde:	440a      	add	r2, r1
 8011be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011be8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011bea:	2300      	movs	r3, #0
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3714      	adds	r7, #20
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b085      	sub	sp, #20
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	785b      	ldrb	r3, [r3, #1]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d128      	bne.n	8011c66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	015a      	lsls	r2, r3, #5
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	0151      	lsls	r1, r2, #5
 8011c26:	68fa      	ldr	r2, [r7, #12]
 8011c28:	440a      	add	r2, r1
 8011c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	78db      	ldrb	r3, [r3, #3]
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	d003      	beq.n	8011c44 <USB_EPClearStall+0x4c>
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	78db      	ldrb	r3, [r3, #3]
 8011c40:	2b02      	cmp	r3, #2
 8011c42:	d138      	bne.n	8011cb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	015a      	lsls	r2, r3, #5
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	68ba      	ldr	r2, [r7, #8]
 8011c54:	0151      	lsls	r1, r2, #5
 8011c56:	68fa      	ldr	r2, [r7, #12]
 8011c58:	440a      	add	r2, r1
 8011c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c62:	6013      	str	r3, [r2, #0]
 8011c64:	e027      	b.n	8011cb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	015a      	lsls	r2, r3, #5
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	0151      	lsls	r1, r2, #5
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	440a      	add	r2, r1
 8011c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	78db      	ldrb	r3, [r3, #3]
 8011c8a:	2b03      	cmp	r3, #3
 8011c8c:	d003      	beq.n	8011c96 <USB_EPClearStall+0x9e>
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	78db      	ldrb	r3, [r3, #3]
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d10f      	bne.n	8011cb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	015a      	lsls	r2, r3, #5
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	68ba      	ldr	r2, [r7, #8]
 8011ca6:	0151      	lsls	r1, r2, #5
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	440a      	add	r2, r1
 8011cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ce2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011ce6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	78fb      	ldrb	r3, [r7, #3]
 8011cf2:	011b      	lsls	r3, r3, #4
 8011cf4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011cf8:	68f9      	ldr	r1, [r7, #12]
 8011cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011d02:	2300      	movs	r3, #0
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b085      	sub	sp, #20
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d2a:	f023 0303 	bic.w	r3, r3, #3
 8011d2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d3e:	f023 0302 	bic.w	r3, r3, #2
 8011d42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3714      	adds	r7, #20
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr

08011d52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d52:	b480      	push	{r7}
 8011d54:	b085      	sub	sp, #20
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d6c:	f023 0303 	bic.w	r3, r3, #3
 8011d70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d80:	f043 0302 	orr.w	r3, r3, #2
 8011d84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d86:	2300      	movs	r3, #0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	695b      	ldr	r3, [r3, #20]
 8011da0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	699b      	ldr	r3, [r3, #24]
 8011da6:	68fa      	ldr	r2, [r7, #12]
 8011da8:	4013      	ands	r3, r2
 8011daa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011dac:	68fb      	ldr	r3, [r7, #12]
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3714      	adds	r7, #20
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr

08011dba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011dba:	b480      	push	{r7}
 8011dbc:	b085      	sub	sp, #20
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dcc:	699b      	ldr	r3, [r3, #24]
 8011dce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dd6:	69db      	ldr	r3, [r3, #28]
 8011dd8:	68ba      	ldr	r2, [r7, #8]
 8011dda:	4013      	ands	r3, r2
 8011ddc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	0c1b      	lsrs	r3, r3, #16
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3714      	adds	r7, #20
 8011de6:	46bd      	mov	sp, r7
 8011de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dec:	4770      	bx	lr

08011dee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011dee:	b480      	push	{r7}
 8011df0:	b085      	sub	sp, #20
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e00:	699b      	ldr	r3, [r3, #24]
 8011e02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e0a:	69db      	ldr	r3, [r3, #28]
 8011e0c:	68ba      	ldr	r2, [r7, #8]
 8011e0e:	4013      	ands	r3, r2
 8011e10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	b29b      	uxth	r3, r3
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3714      	adds	r7, #20
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr

08011e22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e22:	b480      	push	{r7}
 8011e24:	b085      	sub	sp, #20
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011e32:	78fb      	ldrb	r3, [r7, #3]
 8011e34:	015a      	lsls	r2, r3, #5
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	4413      	add	r3, r2
 8011e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e48:	695b      	ldr	r3, [r3, #20]
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011e50:	68bb      	ldr	r3, [r7, #8]
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3714      	adds	r7, #20
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e5e:	b480      	push	{r7}
 8011e60:	b087      	sub	sp, #28
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	460b      	mov	r3, r1
 8011e68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e74:	691b      	ldr	r3, [r3, #16]
 8011e76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011e82:	78fb      	ldrb	r3, [r7, #3]
 8011e84:	f003 030f 	and.w	r3, r3, #15
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8011e8e:	01db      	lsls	r3, r3, #7
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	693a      	ldr	r2, [r7, #16]
 8011e94:	4313      	orrs	r3, r2
 8011e96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011e98:	78fb      	ldrb	r3, [r7, #3]
 8011e9a:	015a      	lsls	r2, r3, #5
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	4413      	add	r3, r2
 8011ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	693a      	ldr	r2, [r7, #16]
 8011ea8:	4013      	ands	r3, r2
 8011eaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011eac:	68bb      	ldr	r3, [r7, #8]
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	371c      	adds	r7, #28
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011eba:	b480      	push	{r7}
 8011ebc:	b083      	sub	sp, #12
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	695b      	ldr	r3, [r3, #20]
 8011ec6:	f003 0301 	and.w	r3, r3, #1
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	370c      	adds	r7, #12
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	b085      	sub	sp, #20
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	68fa      	ldr	r2, [r7, #12]
 8011eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ef0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011ef4:	f023 0307 	bic.w	r3, r3, #7
 8011ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f0e:	2300      	movs	r3, #0
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3714      	adds	r7, #20
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	333c      	adds	r3, #60	; 0x3c
 8011f2e:	3304      	adds	r3, #4
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	4a1c      	ldr	r2, [pc, #112]	; (8011fa8 <USB_EP0_OutStart+0x8c>)
 8011f38:	4293      	cmp	r3, r2
 8011f3a:	d90a      	bls.n	8011f52 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f4c:	d101      	bne.n	8011f52 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	e024      	b.n	8011f9c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f58:	461a      	mov	r2, r3
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f64:	691b      	ldr	r3, [r3, #16]
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f78:	691b      	ldr	r3, [r3, #16]
 8011f7a:	68fa      	ldr	r2, [r7, #12]
 8011f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f80:	f043 0318 	orr.w	r3, r3, #24
 8011f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011f98:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8011f9a:	2300      	movs	r3, #0
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3714      	adds	r7, #20
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr
 8011fa8:	4f54300a 	.word	0x4f54300a

08011fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b085      	sub	sp, #20
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	60fb      	str	r3, [r7, #12]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	4a13      	ldr	r2, [pc, #76]	; (8012010 <USB_CoreReset+0x64>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d901      	bls.n	8011fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011fc6:	2303      	movs	r3, #3
 8011fc8:	e01b      	b.n	8012002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	691b      	ldr	r3, [r3, #16]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	daf2      	bge.n	8011fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	691b      	ldr	r3, [r3, #16]
 8011fda:	f043 0201 	orr.w	r2, r3, #1
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	60fb      	str	r3, [r7, #12]
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	4a09      	ldr	r2, [pc, #36]	; (8012010 <USB_CoreReset+0x64>)
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d901      	bls.n	8011ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011ff0:	2303      	movs	r3, #3
 8011ff2:	e006      	b.n	8012002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	691b      	ldr	r3, [r3, #16]
 8011ff8:	f003 0301 	and.w	r3, r3, #1
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d0f0      	beq.n	8011fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8012000:	2300      	movs	r3, #0
}
 8012002:	4618      	mov	r0, r3
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	00030d40 	.word	0x00030d40

08012014 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012018:	4904      	ldr	r1, [pc, #16]	; (801202c <MX_FATFS_Init+0x18>)
 801201a:	4805      	ldr	r0, [pc, #20]	; (8012030 <MX_FATFS_Init+0x1c>)
 801201c:	f002 fdc8 	bl	8014bb0 <FATFS_LinkDriver>
 8012020:	4603      	mov	r3, r0
 8012022:	461a      	mov	r2, r3
 8012024:	4b03      	ldr	r3, [pc, #12]	; (8012034 <MX_FATFS_Init+0x20>)
 8012026:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012028:	bf00      	nop
 801202a:	bd80      	pop	{r7, pc}
 801202c:	20008748 	.word	0x20008748
 8012030:	2000031c 	.word	0x2000031c
 8012034:	20008744 	.word	0x20008744

08012038 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012038:	b480      	push	{r7}
 801203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801203c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801203e:	4618      	mov	r0, r3
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	4603      	mov	r3, r0
 8012050:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat &= ~STA_NOINIT;
 8012052:	4b08      	ldr	r3, [pc, #32]	; (8012074 <USER_initialize+0x2c>)
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	b2db      	uxtb	r3, r3
 8012058:	f023 0301 	bic.w	r3, r3, #1
 801205c:	b2da      	uxtb	r2, r3
 801205e:	4b05      	ldr	r3, [pc, #20]	; (8012074 <USER_initialize+0x2c>)
 8012060:	701a      	strb	r2, [r3, #0]
    return Stat;
 8012062:	4b04      	ldr	r3, [pc, #16]	; (8012074 <USER_initialize+0x2c>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8012068:	4618      	mov	r0, r3
 801206a:	370c      	adds	r7, #12
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr
 8012074:	20000319 	.word	0x20000319

08012078 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	4603      	mov	r3, r0
 8012080:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(pdrv) return STA_NOINIT;
 8012082:	79fb      	ldrb	r3, [r7, #7]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d001      	beq.n	801208c <USER_status+0x14>
 8012088:	2301      	movs	r3, #1
 801208a:	e002      	b.n	8012092 <USER_status+0x1a>
    return Stat;
 801208c:	4b04      	ldr	r3, [pc, #16]	; (80120a0 <USER_status+0x28>)
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8012092:	4618      	mov	r0, r3
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	20000319 	.word	0x20000319

080120a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60b9      	str	r1, [r7, #8]
 80120ac:	607a      	str	r2, [r7, #4]
 80120ae:	603b      	str	r3, [r7, #0]
 80120b0:	4603      	mov	r3, r0
 80120b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		uint8_t block_cnt = 0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	75fb      	strb	r3, [r7, #23]
		for(block_cnt=0;block_cnt<count;block_cnt++) W25_ReadBuf(&buff[block_cnt*512], sector+block_cnt);
 80120b8:	2300      	movs	r3, #0
 80120ba:	75fb      	strb	r3, [r7, #23]
 80120bc:	e010      	b.n	80120e0 <USER_read+0x3c>
 80120be:	7dfb      	ldrb	r3, [r7, #23]
 80120c0:	025b      	lsls	r3, r3, #9
 80120c2:	461a      	mov	r2, r3
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	1898      	adds	r0, r3, r2
 80120c8:	7dfb      	ldrb	r3, [r7, #23]
 80120ca:	b29a      	uxth	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	4413      	add	r3, r2
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	4619      	mov	r1, r3
 80120d6:	f7f2 fb35 	bl	8004744 <W25_ReadBuf>
 80120da:	7dfb      	ldrb	r3, [r7, #23]
 80120dc:	3301      	adds	r3, #1
 80120de:	75fb      	strb	r3, [r7, #23]
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d8ea      	bhi.n	80120be <USER_read+0x1a>
		return RES_OK;
 80120e8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b086      	sub	sp, #24
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
 80120fc:	603b      	str	r3, [r7, #0]
 80120fe:	4603      	mov	r3, r0
 8012100:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t block_cnt = 0;
 8012102:	2300      	movs	r3, #0
 8012104:	75fb      	strb	r3, [r7, #23]
	for(block_cnt=0;block_cnt<count;block_cnt++) W25_WriteBuf(&buff[block_cnt*512], sector+block_cnt);
 8012106:	2300      	movs	r3, #0
 8012108:	75fb      	strb	r3, [r7, #23]
 801210a:	e010      	b.n	801212e <USER_write+0x3c>
 801210c:	7dfb      	ldrb	r3, [r7, #23]
 801210e:	025b      	lsls	r3, r3, #9
 8012110:	461a      	mov	r2, r3
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	1898      	adds	r0, r3, r2
 8012116:	7dfb      	ldrb	r3, [r7, #23]
 8012118:	b29a      	uxth	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	b29b      	uxth	r3, r3
 801211e:	4413      	add	r3, r2
 8012120:	b29b      	uxth	r3, r3
 8012122:	4619      	mov	r1, r3
 8012124:	f7f2 fb7e 	bl	8004824 <W25_WriteBuf>
 8012128:	7dfb      	ldrb	r3, [r7, #23]
 801212a:	3301      	adds	r3, #1
 801212c:	75fb      	strb	r3, [r7, #23]
 801212e:	7dfb      	ldrb	r3, [r7, #23]
 8012130:	683a      	ldr	r2, [r7, #0]
 8012132:	429a      	cmp	r2, r3
 8012134:	d8ea      	bhi.n	801210c <USER_write+0x1a>

	return RES_OK;
 8012136:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8012138:	4618      	mov	r0, r3
 801213a:	3718      	adds	r7, #24
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}

08012140 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012140:	b480      	push	{r7}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	4603      	mov	r3, r0
 8012148:	603a      	str	r2, [r7, #0]
 801214a:	71fb      	strb	r3, [r7, #7]
 801214c:	460b      	mov	r3, r1
 801214e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 8012150:	2300      	movs	r3, #0
 8012152:	73fb      	strb	r3, [r7, #15]
	    if(pdrv) return RES_PARERR;
 8012154:	79fb      	ldrb	r3, [r7, #7]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d001      	beq.n	801215e <USER_ioctl+0x1e>
 801215a:	2304      	movs	r3, #4
 801215c:	e02b      	b.n	80121b6 <USER_ioctl+0x76>
	    if(Stat&STA_NOINIT) return RES_NOTRDY;
 801215e:	4b19      	ldr	r3, [pc, #100]	; (80121c4 <USER_ioctl+0x84>)
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	b2db      	uxtb	r3, r3
 8012164:	f003 0301 	and.w	r3, r3, #1
 8012168:	2b00      	cmp	r3, #0
 801216a:	d001      	beq.n	8012170 <USER_ioctl+0x30>
 801216c:	2303      	movs	r3, #3
 801216e:	e022      	b.n	80121b6 <USER_ioctl+0x76>
	    switch(cmd)
 8012170:	79bb      	ldrb	r3, [r7, #6]
 8012172:	2b03      	cmp	r3, #3
 8012174:	d81b      	bhi.n	80121ae <USER_ioctl+0x6e>
 8012176:	a201      	add	r2, pc, #4	; (adr r2, 801217c <USER_ioctl+0x3c>)
 8012178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217c:	080121a9 	.word	0x080121a9
 8012180:	08012199 	.word	0x08012199
 8012184:	0801218d 	.word	0x0801218d
 8012188:	080121a1 	.word	0x080121a1
	    {
			case GET_SECTOR_SIZE:
				*(WORD*)buff=50; // Размер сектора
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	2232      	movs	r2, #50	; 0x32
 8012190:	801a      	strh	r2, [r3, #0]
				res=RES_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	73fb      	strb	r3, [r7, #15]
				break;
 8012196:	e00d      	b.n	80121b4 <USER_ioctl+0x74>
			case GET_SECTOR_COUNT: *(WORD*)buff=50; break;
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	2232      	movs	r2, #50	; 0x32
 801219c:	801a      	strh	r2, [r3, #0]
 801219e:	e009      	b.n	80121b4 <USER_ioctl+0x74>
			case GET_BLOCK_SIZE: *(WORD*)buff=50; break;
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	2232      	movs	r2, #50	; 0x32
 80121a4:	801a      	strh	r2, [r3, #0]
 80121a6:	e005      	b.n	80121b4 <USER_ioctl+0x74>
			case CTRL_SYNC: res=RES_OK; break;
 80121a8:	2300      	movs	r3, #0
 80121aa:	73fb      	strb	r3, [r7, #15]
 80121ac:	e002      	b.n	80121b4 <USER_ioctl+0x74>
			default: res = RES_PARERR; break;
 80121ae:	2304      	movs	r3, #4
 80121b0:	73fb      	strb	r3, [r7, #15]
 80121b2:	bf00      	nop
	    }

	    return res;
 80121b4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3714      	adds	r7, #20
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	20000319 	.word	0x20000319

080121c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	4603      	mov	r3, r0
 80121d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80121d2:	79fb      	ldrb	r3, [r7, #7]
 80121d4:	4a08      	ldr	r2, [pc, #32]	; (80121f8 <disk_status+0x30>)
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	4413      	add	r3, r2
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	79fa      	ldrb	r2, [r7, #7]
 80121e0:	4905      	ldr	r1, [pc, #20]	; (80121f8 <disk_status+0x30>)
 80121e2:	440a      	add	r2, r1
 80121e4:	7a12      	ldrb	r2, [r2, #8]
 80121e6:	4610      	mov	r0, r2
 80121e8:	4798      	blx	r3
 80121ea:	4603      	mov	r3, r0
 80121ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80121ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3710      	adds	r7, #16
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	20000978 	.word	0x20000978

080121fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	4603      	mov	r3, r0
 8012204:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801220a:	79fb      	ldrb	r3, [r7, #7]
 801220c:	4a0d      	ldr	r2, [pc, #52]	; (8012244 <disk_initialize+0x48>)
 801220e:	5cd3      	ldrb	r3, [r2, r3]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d111      	bne.n	8012238 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	4a0b      	ldr	r2, [pc, #44]	; (8012244 <disk_initialize+0x48>)
 8012218:	2101      	movs	r1, #1
 801221a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801221c:	79fb      	ldrb	r3, [r7, #7]
 801221e:	4a09      	ldr	r2, [pc, #36]	; (8012244 <disk_initialize+0x48>)
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	4413      	add	r3, r2
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	79fa      	ldrb	r2, [r7, #7]
 801222a:	4906      	ldr	r1, [pc, #24]	; (8012244 <disk_initialize+0x48>)
 801222c:	440a      	add	r2, r1
 801222e:	7a12      	ldrb	r2, [r2, #8]
 8012230:	4610      	mov	r0, r2
 8012232:	4798      	blx	r3
 8012234:	4603      	mov	r3, r0
 8012236:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012238:	7bfb      	ldrb	r3, [r7, #15]
}
 801223a:	4618      	mov	r0, r3
 801223c:	3710      	adds	r7, #16
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	20000978 	.word	0x20000978

08012248 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012248:	b590      	push	{r4, r7, lr}
 801224a:	b087      	sub	sp, #28
 801224c:	af00      	add	r7, sp, #0
 801224e:	60b9      	str	r1, [r7, #8]
 8012250:	607a      	str	r2, [r7, #4]
 8012252:	603b      	str	r3, [r7, #0]
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012258:	7bfb      	ldrb	r3, [r7, #15]
 801225a:	4a0a      	ldr	r2, [pc, #40]	; (8012284 <disk_read+0x3c>)
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	4413      	add	r3, r2
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	689c      	ldr	r4, [r3, #8]
 8012264:	7bfb      	ldrb	r3, [r7, #15]
 8012266:	4a07      	ldr	r2, [pc, #28]	; (8012284 <disk_read+0x3c>)
 8012268:	4413      	add	r3, r2
 801226a:	7a18      	ldrb	r0, [r3, #8]
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	68b9      	ldr	r1, [r7, #8]
 8012272:	47a0      	blx	r4
 8012274:	4603      	mov	r3, r0
 8012276:	75fb      	strb	r3, [r7, #23]
  return res;
 8012278:	7dfb      	ldrb	r3, [r7, #23]
}
 801227a:	4618      	mov	r0, r3
 801227c:	371c      	adds	r7, #28
 801227e:	46bd      	mov	sp, r7
 8012280:	bd90      	pop	{r4, r7, pc}
 8012282:	bf00      	nop
 8012284:	20000978 	.word	0x20000978

08012288 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012288:	b590      	push	{r4, r7, lr}
 801228a:	b087      	sub	sp, #28
 801228c:	af00      	add	r7, sp, #0
 801228e:	60b9      	str	r1, [r7, #8]
 8012290:	607a      	str	r2, [r7, #4]
 8012292:	603b      	str	r3, [r7, #0]
 8012294:	4603      	mov	r3, r0
 8012296:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012298:	7bfb      	ldrb	r3, [r7, #15]
 801229a:	4a0a      	ldr	r2, [pc, #40]	; (80122c4 <disk_write+0x3c>)
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	4413      	add	r3, r2
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	68dc      	ldr	r4, [r3, #12]
 80122a4:	7bfb      	ldrb	r3, [r7, #15]
 80122a6:	4a07      	ldr	r2, [pc, #28]	; (80122c4 <disk_write+0x3c>)
 80122a8:	4413      	add	r3, r2
 80122aa:	7a18      	ldrb	r0, [r3, #8]
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	68b9      	ldr	r1, [r7, #8]
 80122b2:	47a0      	blx	r4
 80122b4:	4603      	mov	r3, r0
 80122b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	371c      	adds	r7, #28
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd90      	pop	{r4, r7, pc}
 80122c2:	bf00      	nop
 80122c4:	20000978 	.word	0x20000978

080122c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	4603      	mov	r3, r0
 80122d0:	603a      	str	r2, [r7, #0]
 80122d2:	71fb      	strb	r3, [r7, #7]
 80122d4:	460b      	mov	r3, r1
 80122d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80122d8:	79fb      	ldrb	r3, [r7, #7]
 80122da:	4a09      	ldr	r2, [pc, #36]	; (8012300 <disk_ioctl+0x38>)
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	4413      	add	r3, r2
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	79fa      	ldrb	r2, [r7, #7]
 80122e6:	4906      	ldr	r1, [pc, #24]	; (8012300 <disk_ioctl+0x38>)
 80122e8:	440a      	add	r2, r1
 80122ea:	7a10      	ldrb	r0, [r2, #8]
 80122ec:	79b9      	ldrb	r1, [r7, #6]
 80122ee:	683a      	ldr	r2, [r7, #0]
 80122f0:	4798      	blx	r3
 80122f2:	4603      	mov	r3, r0
 80122f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80122f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	20000978 	.word	0x20000978

08012304 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	3301      	adds	r3, #1
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012314:	89fb      	ldrh	r3, [r7, #14]
 8012316:	021b      	lsls	r3, r3, #8
 8012318:	b21a      	sxth	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	b21b      	sxth	r3, r3
 8012320:	4313      	orrs	r3, r2
 8012322:	b21b      	sxth	r3, r3
 8012324:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012326:	89fb      	ldrh	r3, [r7, #14]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3714      	adds	r7, #20
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	3303      	adds	r3, #3
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	021b      	lsls	r3, r3, #8
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	3202      	adds	r2, #2
 801234c:	7812      	ldrb	r2, [r2, #0]
 801234e:	4313      	orrs	r3, r2
 8012350:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	021b      	lsls	r3, r3, #8
 8012356:	687a      	ldr	r2, [r7, #4]
 8012358:	3201      	adds	r2, #1
 801235a:	7812      	ldrb	r2, [r2, #0]
 801235c:	4313      	orrs	r3, r2
 801235e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	021b      	lsls	r3, r3, #8
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	7812      	ldrb	r2, [r2, #0]
 8012368:	4313      	orrs	r3, r2
 801236a:	60fb      	str	r3, [r7, #12]
	return rv;
 801236c:	68fb      	ldr	r3, [r7, #12]
}
 801236e:	4618      	mov	r0, r3
 8012370:	3714      	adds	r7, #20
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801237a:	b480      	push	{r7}
 801237c:	b083      	sub	sp, #12
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	460b      	mov	r3, r1
 8012384:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	1c5a      	adds	r2, r3, #1
 801238a:	607a      	str	r2, [r7, #4]
 801238c:	887a      	ldrh	r2, [r7, #2]
 801238e:	b2d2      	uxtb	r2, r2
 8012390:	701a      	strb	r2, [r3, #0]
 8012392:	887b      	ldrh	r3, [r7, #2]
 8012394:	0a1b      	lsrs	r3, r3, #8
 8012396:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	1c5a      	adds	r2, r3, #1
 801239c:	607a      	str	r2, [r7, #4]
 801239e:	887a      	ldrh	r2, [r7, #2]
 80123a0:	b2d2      	uxtb	r2, r2
 80123a2:	701a      	strb	r2, [r3, #0]
}
 80123a4:	bf00      	nop
 80123a6:	370c      	adds	r7, #12
 80123a8:	46bd      	mov	sp, r7
 80123aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ae:	4770      	bx	lr

080123b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	1c5a      	adds	r2, r3, #1
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	683a      	ldr	r2, [r7, #0]
 80123c2:	b2d2      	uxtb	r2, r2
 80123c4:	701a      	strb	r2, [r3, #0]
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	0a1b      	lsrs	r3, r3, #8
 80123ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	1c5a      	adds	r2, r3, #1
 80123d0:	607a      	str	r2, [r7, #4]
 80123d2:	683a      	ldr	r2, [r7, #0]
 80123d4:	b2d2      	uxtb	r2, r2
 80123d6:	701a      	strb	r2, [r3, #0]
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	0a1b      	lsrs	r3, r3, #8
 80123dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	1c5a      	adds	r2, r3, #1
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	683a      	ldr	r2, [r7, #0]
 80123e6:	b2d2      	uxtb	r2, r2
 80123e8:	701a      	strb	r2, [r3, #0]
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	0a1b      	lsrs	r3, r3, #8
 80123ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	607a      	str	r2, [r7, #4]
 80123f6:	683a      	ldr	r2, [r7, #0]
 80123f8:	b2d2      	uxtb	r2, r2
 80123fa:	701a      	strb	r2, [r3, #0]
}
 80123fc:	bf00      	nop
 80123fe:	370c      	adds	r7, #12
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012408:	b480      	push	{r7}
 801240a:	b087      	sub	sp, #28
 801240c:	af00      	add	r7, sp, #0
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00d      	beq.n	801243e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012422:	693a      	ldr	r2, [r7, #16]
 8012424:	1c53      	adds	r3, r2, #1
 8012426:	613b      	str	r3, [r7, #16]
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	1c59      	adds	r1, r3, #1
 801242c:	6179      	str	r1, [r7, #20]
 801242e:	7812      	ldrb	r2, [r2, #0]
 8012430:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	3b01      	subs	r3, #1
 8012436:	607b      	str	r3, [r7, #4]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1f1      	bne.n	8012422 <mem_cpy+0x1a>
	}
}
 801243e:	bf00      	nop
 8012440:	371c      	adds	r7, #28
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr

0801244a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801244a:	b480      	push	{r7}
 801244c:	b087      	sub	sp, #28
 801244e:	af00      	add	r7, sp, #0
 8012450:	60f8      	str	r0, [r7, #12]
 8012452:	60b9      	str	r1, [r7, #8]
 8012454:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	1c5a      	adds	r2, r3, #1
 801245e:	617a      	str	r2, [r7, #20]
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	b2d2      	uxtb	r2, r2
 8012464:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	3b01      	subs	r3, #1
 801246a:	607b      	str	r3, [r7, #4]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1f3      	bne.n	801245a <mem_set+0x10>
}
 8012472:	bf00      	nop
 8012474:	bf00      	nop
 8012476:	371c      	adds	r7, #28
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012480:	b480      	push	{r7}
 8012482:	b089      	sub	sp, #36	; 0x24
 8012484:	af00      	add	r7, sp, #0
 8012486:	60f8      	str	r0, [r7, #12]
 8012488:	60b9      	str	r1, [r7, #8]
 801248a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	61fb      	str	r3, [r7, #28]
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012494:	2300      	movs	r3, #0
 8012496:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012498:	69fb      	ldr	r3, [r7, #28]
 801249a:	1c5a      	adds	r2, r3, #1
 801249c:	61fa      	str	r2, [r7, #28]
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	4619      	mov	r1, r3
 80124a2:	69bb      	ldr	r3, [r7, #24]
 80124a4:	1c5a      	adds	r2, r3, #1
 80124a6:	61ba      	str	r2, [r7, #24]
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	1acb      	subs	r3, r1, r3
 80124ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	3b01      	subs	r3, #1
 80124b2:	607b      	str	r3, [r7, #4]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d002      	beq.n	80124c0 <mem_cmp+0x40>
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d0eb      	beq.n	8012498 <mem_cmp+0x18>

	return r;
 80124c0:	697b      	ldr	r3, [r7, #20]
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3724      	adds	r7, #36	; 0x24
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr

080124ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80124ce:	b480      	push	{r7}
 80124d0:	b083      	sub	sp, #12
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
 80124d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80124d8:	e002      	b.n	80124e0 <chk_chr+0x12>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	3301      	adds	r3, #1
 80124de:	607b      	str	r3, [r7, #4]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d005      	beq.n	80124f4 <chk_chr+0x26>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	461a      	mov	r2, r3
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d1f2      	bne.n	80124da <chk_chr+0xc>
	return *str;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	781b      	ldrb	r3, [r3, #0]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	370c      	adds	r7, #12
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012504:	b480      	push	{r7}
 8012506:	b085      	sub	sp, #20
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801250e:	2300      	movs	r3, #0
 8012510:	60bb      	str	r3, [r7, #8]
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	60fb      	str	r3, [r7, #12]
 8012516:	e029      	b.n	801256c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012518:	4a27      	ldr	r2, [pc, #156]	; (80125b8 <chk_lock+0xb4>)
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	011b      	lsls	r3, r3, #4
 801251e:	4413      	add	r3, r2
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d01d      	beq.n	8012562 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012526:	4a24      	ldr	r2, [pc, #144]	; (80125b8 <chk_lock+0xb4>)
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	011b      	lsls	r3, r3, #4
 801252c:	4413      	add	r3, r2
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	429a      	cmp	r2, r3
 8012536:	d116      	bne.n	8012566 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012538:	4a1f      	ldr	r2, [pc, #124]	; (80125b8 <chk_lock+0xb4>)
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	011b      	lsls	r3, r3, #4
 801253e:	4413      	add	r3, r2
 8012540:	3304      	adds	r3, #4
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012548:	429a      	cmp	r2, r3
 801254a:	d10c      	bne.n	8012566 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801254c:	4a1a      	ldr	r2, [pc, #104]	; (80125b8 <chk_lock+0xb4>)
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	011b      	lsls	r3, r3, #4
 8012552:	4413      	add	r3, r2
 8012554:	3308      	adds	r3, #8
 8012556:	681a      	ldr	r2, [r3, #0]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801255c:	429a      	cmp	r2, r3
 801255e:	d102      	bne.n	8012566 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012560:	e007      	b.n	8012572 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012562:	2301      	movs	r3, #1
 8012564:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	3301      	adds	r3, #1
 801256a:	60fb      	str	r3, [r7, #12]
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b01      	cmp	r3, #1
 8012570:	d9d2      	bls.n	8012518 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2b02      	cmp	r3, #2
 8012576:	d109      	bne.n	801258c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d102      	bne.n	8012584 <chk_lock+0x80>
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	2b02      	cmp	r3, #2
 8012582:	d101      	bne.n	8012588 <chk_lock+0x84>
 8012584:	2300      	movs	r3, #0
 8012586:	e010      	b.n	80125aa <chk_lock+0xa6>
 8012588:	2312      	movs	r3, #18
 801258a:	e00e      	b.n	80125aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d108      	bne.n	80125a4 <chk_lock+0xa0>
 8012592:	4a09      	ldr	r2, [pc, #36]	; (80125b8 <chk_lock+0xb4>)
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	011b      	lsls	r3, r3, #4
 8012598:	4413      	add	r3, r2
 801259a:	330c      	adds	r3, #12
 801259c:	881b      	ldrh	r3, [r3, #0]
 801259e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125a2:	d101      	bne.n	80125a8 <chk_lock+0xa4>
 80125a4:	2310      	movs	r3, #16
 80125a6:	e000      	b.n	80125aa <chk_lock+0xa6>
 80125a8:	2300      	movs	r3, #0
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3714      	adds	r7, #20
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	20000958 	.word	0x20000958

080125bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80125c2:	2300      	movs	r3, #0
 80125c4:	607b      	str	r3, [r7, #4]
 80125c6:	e002      	b.n	80125ce <enq_lock+0x12>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	3301      	adds	r3, #1
 80125cc:	607b      	str	r3, [r7, #4]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d806      	bhi.n	80125e2 <enq_lock+0x26>
 80125d4:	4a09      	ldr	r2, [pc, #36]	; (80125fc <enq_lock+0x40>)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	011b      	lsls	r3, r3, #4
 80125da:	4413      	add	r3, r2
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1f2      	bne.n	80125c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	bf14      	ite	ne
 80125e8:	2301      	movne	r3, #1
 80125ea:	2300      	moveq	r3, #0
 80125ec:	b2db      	uxtb	r3, r3
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	370c      	adds	r7, #12
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr
 80125fa:	bf00      	nop
 80125fc:	20000958 	.word	0x20000958

08012600 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801260a:	2300      	movs	r3, #0
 801260c:	60fb      	str	r3, [r7, #12]
 801260e:	e01f      	b.n	8012650 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012610:	4a41      	ldr	r2, [pc, #260]	; (8012718 <inc_lock+0x118>)
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	011b      	lsls	r3, r3, #4
 8012616:	4413      	add	r3, r2
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	429a      	cmp	r2, r3
 8012620:	d113      	bne.n	801264a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012622:	4a3d      	ldr	r2, [pc, #244]	; (8012718 <inc_lock+0x118>)
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	011b      	lsls	r3, r3, #4
 8012628:	4413      	add	r3, r2
 801262a:	3304      	adds	r3, #4
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012632:	429a      	cmp	r2, r3
 8012634:	d109      	bne.n	801264a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012636:	4a38      	ldr	r2, [pc, #224]	; (8012718 <inc_lock+0x118>)
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	011b      	lsls	r3, r3, #4
 801263c:	4413      	add	r3, r2
 801263e:	3308      	adds	r3, #8
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012646:	429a      	cmp	r2, r3
 8012648:	d006      	beq.n	8012658 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	3301      	adds	r3, #1
 801264e:	60fb      	str	r3, [r7, #12]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2b01      	cmp	r3, #1
 8012654:	d9dc      	bls.n	8012610 <inc_lock+0x10>
 8012656:	e000      	b.n	801265a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012658:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2b02      	cmp	r3, #2
 801265e:	d132      	bne.n	80126c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012660:	2300      	movs	r3, #0
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	e002      	b.n	801266c <inc_lock+0x6c>
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	3301      	adds	r3, #1
 801266a:	60fb      	str	r3, [r7, #12]
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2b01      	cmp	r3, #1
 8012670:	d806      	bhi.n	8012680 <inc_lock+0x80>
 8012672:	4a29      	ldr	r2, [pc, #164]	; (8012718 <inc_lock+0x118>)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	011b      	lsls	r3, r3, #4
 8012678:	4413      	add	r3, r2
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d1f2      	bne.n	8012666 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2b02      	cmp	r3, #2
 8012684:	d101      	bne.n	801268a <inc_lock+0x8a>
 8012686:	2300      	movs	r3, #0
 8012688:	e040      	b.n	801270c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	4922      	ldr	r1, [pc, #136]	; (8012718 <inc_lock+0x118>)
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	011b      	lsls	r3, r3, #4
 8012694:	440b      	add	r3, r1
 8012696:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	689a      	ldr	r2, [r3, #8]
 801269c:	491e      	ldr	r1, [pc, #120]	; (8012718 <inc_lock+0x118>)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	011b      	lsls	r3, r3, #4
 80126a2:	440b      	add	r3, r1
 80126a4:	3304      	adds	r3, #4
 80126a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	695a      	ldr	r2, [r3, #20]
 80126ac:	491a      	ldr	r1, [pc, #104]	; (8012718 <inc_lock+0x118>)
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	011b      	lsls	r3, r3, #4
 80126b2:	440b      	add	r3, r1
 80126b4:	3308      	adds	r3, #8
 80126b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80126b8:	4a17      	ldr	r2, [pc, #92]	; (8012718 <inc_lock+0x118>)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	011b      	lsls	r3, r3, #4
 80126be:	4413      	add	r3, r2
 80126c0:	330c      	adds	r3, #12
 80126c2:	2200      	movs	r2, #0
 80126c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d009      	beq.n	80126e0 <inc_lock+0xe0>
 80126cc:	4a12      	ldr	r2, [pc, #72]	; (8012718 <inc_lock+0x118>)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	011b      	lsls	r3, r3, #4
 80126d2:	4413      	add	r3, r2
 80126d4:	330c      	adds	r3, #12
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d001      	beq.n	80126e0 <inc_lock+0xe0>
 80126dc:	2300      	movs	r3, #0
 80126de:	e015      	b.n	801270c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d108      	bne.n	80126f8 <inc_lock+0xf8>
 80126e6:	4a0c      	ldr	r2, [pc, #48]	; (8012718 <inc_lock+0x118>)
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	011b      	lsls	r3, r3, #4
 80126ec:	4413      	add	r3, r2
 80126ee:	330c      	adds	r3, #12
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	3301      	adds	r3, #1
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	e001      	b.n	80126fc <inc_lock+0xfc>
 80126f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126fc:	4906      	ldr	r1, [pc, #24]	; (8012718 <inc_lock+0x118>)
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	011b      	lsls	r3, r3, #4
 8012702:	440b      	add	r3, r1
 8012704:	330c      	adds	r3, #12
 8012706:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	3301      	adds	r3, #1
}
 801270c:	4618      	mov	r0, r3
 801270e:	3714      	adds	r7, #20
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr
 8012718:	20000958 	.word	0x20000958

0801271c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	3b01      	subs	r3, #1
 8012728:	607b      	str	r3, [r7, #4]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d825      	bhi.n	801277c <dec_lock+0x60>
		n = Files[i].ctr;
 8012730:	4a17      	ldr	r2, [pc, #92]	; (8012790 <dec_lock+0x74>)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	011b      	lsls	r3, r3, #4
 8012736:	4413      	add	r3, r2
 8012738:	330c      	adds	r3, #12
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801273e:	89fb      	ldrh	r3, [r7, #14]
 8012740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012744:	d101      	bne.n	801274a <dec_lock+0x2e>
 8012746:	2300      	movs	r3, #0
 8012748:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801274a:	89fb      	ldrh	r3, [r7, #14]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d002      	beq.n	8012756 <dec_lock+0x3a>
 8012750:	89fb      	ldrh	r3, [r7, #14]
 8012752:	3b01      	subs	r3, #1
 8012754:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012756:	4a0e      	ldr	r2, [pc, #56]	; (8012790 <dec_lock+0x74>)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	011b      	lsls	r3, r3, #4
 801275c:	4413      	add	r3, r2
 801275e:	330c      	adds	r3, #12
 8012760:	89fa      	ldrh	r2, [r7, #14]
 8012762:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012764:	89fb      	ldrh	r3, [r7, #14]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d105      	bne.n	8012776 <dec_lock+0x5a>
 801276a:	4a09      	ldr	r2, [pc, #36]	; (8012790 <dec_lock+0x74>)
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	011b      	lsls	r3, r3, #4
 8012770:	4413      	add	r3, r2
 8012772:	2200      	movs	r2, #0
 8012774:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012776:	2300      	movs	r3, #0
 8012778:	737b      	strb	r3, [r7, #13]
 801277a:	e001      	b.n	8012780 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801277c:	2302      	movs	r3, #2
 801277e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012780:	7b7b      	ldrb	r3, [r7, #13]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3714      	adds	r7, #20
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	20000958 	.word	0x20000958

08012794 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012794:	b480      	push	{r7}
 8012796:	b085      	sub	sp, #20
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801279c:	2300      	movs	r3, #0
 801279e:	60fb      	str	r3, [r7, #12]
 80127a0:	e010      	b.n	80127c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80127a2:	4a0d      	ldr	r2, [pc, #52]	; (80127d8 <clear_lock+0x44>)
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	011b      	lsls	r3, r3, #4
 80127a8:	4413      	add	r3, r2
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d105      	bne.n	80127be <clear_lock+0x2a>
 80127b2:	4a09      	ldr	r2, [pc, #36]	; (80127d8 <clear_lock+0x44>)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	011b      	lsls	r3, r3, #4
 80127b8:	4413      	add	r3, r2
 80127ba:	2200      	movs	r2, #0
 80127bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	3301      	adds	r3, #1
 80127c2:	60fb      	str	r3, [r7, #12]
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	d9eb      	bls.n	80127a2 <clear_lock+0xe>
	}
}
 80127ca:	bf00      	nop
 80127cc:	bf00      	nop
 80127ce:	3714      	adds	r7, #20
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr
 80127d8:	20000958 	.word	0x20000958

080127dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b086      	sub	sp, #24
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80127e4:	2300      	movs	r3, #0
 80127e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	78db      	ldrb	r3, [r3, #3]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d034      	beq.n	801285a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	7858      	ldrb	r0, [r3, #1]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012800:	2301      	movs	r3, #1
 8012802:	697a      	ldr	r2, [r7, #20]
 8012804:	f7ff fd40 	bl	8012288 <disk_write>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d002      	beq.n	8012814 <sync_window+0x38>
			res = FR_DISK_ERR;
 801280e:	2301      	movs	r3, #1
 8012810:	73fb      	strb	r3, [r7, #15]
 8012812:	e022      	b.n	801285a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2200      	movs	r2, #0
 8012818:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a1b      	ldr	r3, [r3, #32]
 801281e:	697a      	ldr	r2, [r7, #20]
 8012820:	1ad2      	subs	r2, r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	699b      	ldr	r3, [r3, #24]
 8012826:	429a      	cmp	r2, r3
 8012828:	d217      	bcs.n	801285a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	789b      	ldrb	r3, [r3, #2]
 801282e:	613b      	str	r3, [r7, #16]
 8012830:	e010      	b.n	8012854 <sync_window+0x78>
					wsect += fs->fsize;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	699b      	ldr	r3, [r3, #24]
 8012836:	697a      	ldr	r2, [r7, #20]
 8012838:	4413      	add	r3, r2
 801283a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	7858      	ldrb	r0, [r3, #1]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012846:	2301      	movs	r3, #1
 8012848:	697a      	ldr	r2, [r7, #20]
 801284a:	f7ff fd1d 	bl	8012288 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	3b01      	subs	r3, #1
 8012852:	613b      	str	r3, [r7, #16]
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	2b01      	cmp	r3, #1
 8012858:	d8eb      	bhi.n	8012832 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801285a:	7bfb      	ldrb	r3, [r7, #15]
}
 801285c:	4618      	mov	r0, r3
 801285e:	3718      	adds	r7, #24
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}

08012864 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801286e:	2300      	movs	r3, #0
 8012870:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012876:	683a      	ldr	r2, [r7, #0]
 8012878:	429a      	cmp	r2, r3
 801287a:	d01b      	beq.n	80128b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7ff ffad 	bl	80127dc <sync_window>
 8012882:	4603      	mov	r3, r0
 8012884:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012886:	7bfb      	ldrb	r3, [r7, #15]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d113      	bne.n	80128b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	7858      	ldrb	r0, [r3, #1]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012896:	2301      	movs	r3, #1
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	f7ff fcd5 	bl	8012248 <disk_read>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d004      	beq.n	80128ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80128a4:	f04f 33ff 	mov.w	r3, #4294967295
 80128a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80128aa:	2301      	movs	r3, #1
 80128ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80128b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
	...

080128c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7ff ff87 	bl	80127dc <sync_window>
 80128ce:	4603      	mov	r3, r0
 80128d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80128d2:	7bfb      	ldrb	r3, [r7, #15]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d158      	bne.n	801298a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	2b03      	cmp	r3, #3
 80128de:	d148      	bne.n	8012972 <sync_fs+0xb2>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	791b      	ldrb	r3, [r3, #4]
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d144      	bne.n	8012972 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	3330      	adds	r3, #48	; 0x30
 80128ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128f0:	2100      	movs	r1, #0
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7ff fda9 	bl	801244a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	3330      	adds	r3, #48	; 0x30
 80128fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012900:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012904:	4618      	mov	r0, r3
 8012906:	f7ff fd38 	bl	801237a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	3330      	adds	r3, #48	; 0x30
 801290e:	4921      	ldr	r1, [pc, #132]	; (8012994 <sync_fs+0xd4>)
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff fd4d 	bl	80123b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	3330      	adds	r3, #48	; 0x30
 801291a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801291e:	491e      	ldr	r1, [pc, #120]	; (8012998 <sync_fs+0xd8>)
 8012920:	4618      	mov	r0, r3
 8012922:	f7ff fd45 	bl	80123b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	3330      	adds	r3, #48	; 0x30
 801292a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	691b      	ldr	r3, [r3, #16]
 8012932:	4619      	mov	r1, r3
 8012934:	4610      	mov	r0, r2
 8012936:	f7ff fd3b 	bl	80123b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	3330      	adds	r3, #48	; 0x30
 801293e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	68db      	ldr	r3, [r3, #12]
 8012946:	4619      	mov	r1, r3
 8012948:	4610      	mov	r0, r2
 801294a:	f7ff fd31 	bl	80123b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	69db      	ldr	r3, [r3, #28]
 8012952:	1c5a      	adds	r2, r3, #1
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	7858      	ldrb	r0, [r3, #1]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012966:	2301      	movs	r3, #1
 8012968:	f7ff fc8e 	bl	8012288 <disk_write>
			fs->fsi_flag = 0;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2200      	movs	r2, #0
 8012970:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	785b      	ldrb	r3, [r3, #1]
 8012976:	2200      	movs	r2, #0
 8012978:	2100      	movs	r1, #0
 801297a:	4618      	mov	r0, r3
 801297c:	f7ff fca4 	bl	80122c8 <disk_ioctl>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d001      	beq.n	801298a <sync_fs+0xca>
 8012986:	2301      	movs	r3, #1
 8012988:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801298a:	7bfb      	ldrb	r3, [r7, #15]
}
 801298c:	4618      	mov	r0, r3
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	41615252 	.word	0x41615252
 8012998:	61417272 	.word	0x61417272

0801299c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	3b02      	subs	r3, #2
 80129aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	695b      	ldr	r3, [r3, #20]
 80129b0:	3b02      	subs	r3, #2
 80129b2:	683a      	ldr	r2, [r7, #0]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d301      	bcc.n	80129bc <clust2sect+0x20>
 80129b8:	2300      	movs	r3, #0
 80129ba:	e008      	b.n	80129ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	895b      	ldrh	r3, [r3, #10]
 80129c0:	461a      	mov	r2, r3
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	fb03 f202 	mul.w	r2, r3, r2
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129cc:	4413      	add	r3, r2
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr

080129da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80129da:	b580      	push	{r7, lr}
 80129dc:	b086      	sub	sp, #24
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
 80129e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	d904      	bls.n	80129fa <get_fat+0x20>
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	695b      	ldr	r3, [r3, #20]
 80129f4:	683a      	ldr	r2, [r7, #0]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d302      	bcc.n	8012a00 <get_fat+0x26>
		val = 1;	/* Internal error */
 80129fa:	2301      	movs	r3, #1
 80129fc:	617b      	str	r3, [r7, #20]
 80129fe:	e08f      	b.n	8012b20 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a00:	f04f 33ff 	mov.w	r3, #4294967295
 8012a04:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	2b03      	cmp	r3, #3
 8012a0c:	d062      	beq.n	8012ad4 <get_fat+0xfa>
 8012a0e:	2b03      	cmp	r3, #3
 8012a10:	dc7c      	bgt.n	8012b0c <get_fat+0x132>
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d002      	beq.n	8012a1c <get_fat+0x42>
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	d042      	beq.n	8012aa0 <get_fat+0xc6>
 8012a1a:	e077      	b.n	8012b0c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	60fb      	str	r3, [r7, #12]
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	085b      	lsrs	r3, r3, #1
 8012a24:	68fa      	ldr	r2, [r7, #12]
 8012a26:	4413      	add	r3, r2
 8012a28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	6a1a      	ldr	r2, [r3, #32]
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	0a5b      	lsrs	r3, r3, #9
 8012a32:	4413      	add	r3, r2
 8012a34:	4619      	mov	r1, r3
 8012a36:	6938      	ldr	r0, [r7, #16]
 8012a38:	f7ff ff14 	bl	8012864 <move_window>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d167      	bne.n	8012b12 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	1c5a      	adds	r2, r3, #1
 8012a46:	60fa      	str	r2, [r7, #12]
 8012a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a4c:	693a      	ldr	r2, [r7, #16]
 8012a4e:	4413      	add	r3, r2
 8012a50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	6a1a      	ldr	r2, [r3, #32]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	0a5b      	lsrs	r3, r3, #9
 8012a5e:	4413      	add	r3, r2
 8012a60:	4619      	mov	r1, r3
 8012a62:	6938      	ldr	r0, [r7, #16]
 8012a64:	f7ff fefe 	bl	8012864 <move_window>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d153      	bne.n	8012b16 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a74:	693a      	ldr	r2, [r7, #16]
 8012a76:	4413      	add	r3, r2
 8012a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a7c:	021b      	lsls	r3, r3, #8
 8012a7e:	461a      	mov	r2, r3
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	4313      	orrs	r3, r2
 8012a84:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	f003 0301 	and.w	r3, r3, #1
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d002      	beq.n	8012a96 <get_fat+0xbc>
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	091b      	lsrs	r3, r3, #4
 8012a94:	e002      	b.n	8012a9c <get_fat+0xc2>
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012a9c:	617b      	str	r3, [r7, #20]
			break;
 8012a9e:	e03f      	b.n	8012b20 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	6a1a      	ldr	r2, [r3, #32]
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	0a1b      	lsrs	r3, r3, #8
 8012aa8:	4413      	add	r3, r2
 8012aaa:	4619      	mov	r1, r3
 8012aac:	6938      	ldr	r0, [r7, #16]
 8012aae:	f7ff fed9 	bl	8012864 <move_window>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d130      	bne.n	8012b1a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	005b      	lsls	r3, r3, #1
 8012ac2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012ac6:	4413      	add	r3, r2
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7ff fc1b 	bl	8012304 <ld_word>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	617b      	str	r3, [r7, #20]
			break;
 8012ad2:	e025      	b.n	8012b20 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	6a1a      	ldr	r2, [r3, #32]
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	09db      	lsrs	r3, r3, #7
 8012adc:	4413      	add	r3, r2
 8012ade:	4619      	mov	r1, r3
 8012ae0:	6938      	ldr	r0, [r7, #16]
 8012ae2:	f7ff febf 	bl	8012864 <move_window>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d118      	bne.n	8012b1e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	009b      	lsls	r3, r3, #2
 8012af6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012afa:	4413      	add	r3, r2
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7ff fc19 	bl	8012334 <ld_dword>
 8012b02:	4603      	mov	r3, r0
 8012b04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012b08:	617b      	str	r3, [r7, #20]
			break;
 8012b0a:	e009      	b.n	8012b20 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	617b      	str	r3, [r7, #20]
 8012b10:	e006      	b.n	8012b20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b12:	bf00      	nop
 8012b14:	e004      	b.n	8012b20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b16:	bf00      	nop
 8012b18:	e002      	b.n	8012b20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b1a:	bf00      	nop
 8012b1c:	e000      	b.n	8012b20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b1e:	bf00      	nop
		}
	}

	return val;
 8012b20:	697b      	ldr	r3, [r7, #20]
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3718      	adds	r7, #24
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}

08012b2a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b2a:	b590      	push	{r4, r7, lr}
 8012b2c:	b089      	sub	sp, #36	; 0x24
 8012b2e:	af00      	add	r7, sp, #0
 8012b30:	60f8      	str	r0, [r7, #12]
 8012b32:	60b9      	str	r1, [r7, #8]
 8012b34:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b36:	2302      	movs	r3, #2
 8012b38:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	f240 80d2 	bls.w	8012ce6 <put_fat+0x1bc>
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	68ba      	ldr	r2, [r7, #8]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	f080 80cc 	bcs.w	8012ce6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	2b03      	cmp	r3, #3
 8012b54:	f000 8096 	beq.w	8012c84 <put_fat+0x15a>
 8012b58:	2b03      	cmp	r3, #3
 8012b5a:	f300 80cd 	bgt.w	8012cf8 <put_fat+0x1ce>
 8012b5e:	2b01      	cmp	r3, #1
 8012b60:	d002      	beq.n	8012b68 <put_fat+0x3e>
 8012b62:	2b02      	cmp	r3, #2
 8012b64:	d06e      	beq.n	8012c44 <put_fat+0x11a>
 8012b66:	e0c7      	b.n	8012cf8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	61bb      	str	r3, [r7, #24]
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	085b      	lsrs	r3, r3, #1
 8012b70:	69ba      	ldr	r2, [r7, #24]
 8012b72:	4413      	add	r3, r2
 8012b74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	6a1a      	ldr	r2, [r3, #32]
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	0a5b      	lsrs	r3, r3, #9
 8012b7e:	4413      	add	r3, r2
 8012b80:	4619      	mov	r1, r3
 8012b82:	68f8      	ldr	r0, [r7, #12]
 8012b84:	f7ff fe6e 	bl	8012864 <move_window>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012b8c:	7ffb      	ldrb	r3, [r7, #31]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f040 80ab 	bne.w	8012cea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	1c59      	adds	r1, r3, #1
 8012b9e:	61b9      	str	r1, [r7, #24]
 8012ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ba4:	4413      	add	r3, r2
 8012ba6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	f003 0301 	and.w	r3, r3, #1
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d00d      	beq.n	8012bce <put_fat+0xa4>
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	b25b      	sxtb	r3, r3
 8012bb8:	f003 030f 	and.w	r3, r3, #15
 8012bbc:	b25a      	sxtb	r2, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	011b      	lsls	r3, r3, #4
 8012bc4:	b25b      	sxtb	r3, r3
 8012bc6:	4313      	orrs	r3, r2
 8012bc8:	b25b      	sxtb	r3, r3
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	e001      	b.n	8012bd2 <put_fat+0xa8>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	697a      	ldr	r2, [r7, #20]
 8012bd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2201      	movs	r2, #1
 8012bda:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	6a1a      	ldr	r2, [r3, #32]
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	0a5b      	lsrs	r3, r3, #9
 8012be4:	4413      	add	r3, r2
 8012be6:	4619      	mov	r1, r3
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f7ff fe3b 	bl	8012864 <move_window>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bf2:	7ffb      	ldrb	r3, [r7, #31]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d17a      	bne.n	8012cee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c04:	4413      	add	r3, r2
 8012c06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	f003 0301 	and.w	r3, r3, #1
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d003      	beq.n	8012c1a <put_fat+0xf0>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	091b      	lsrs	r3, r3, #4
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	e00e      	b.n	8012c38 <put_fat+0x10e>
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	b25b      	sxtb	r3, r3
 8012c20:	f023 030f 	bic.w	r3, r3, #15
 8012c24:	b25a      	sxtb	r2, r3
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	0a1b      	lsrs	r3, r3, #8
 8012c2a:	b25b      	sxtb	r3, r3
 8012c2c:	f003 030f 	and.w	r3, r3, #15
 8012c30:	b25b      	sxtb	r3, r3
 8012c32:	4313      	orrs	r3, r2
 8012c34:	b25b      	sxtb	r3, r3
 8012c36:	b2db      	uxtb	r3, r3
 8012c38:	697a      	ldr	r2, [r7, #20]
 8012c3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2201      	movs	r2, #1
 8012c40:	70da      	strb	r2, [r3, #3]
			break;
 8012c42:	e059      	b.n	8012cf8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	6a1a      	ldr	r2, [r3, #32]
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	0a1b      	lsrs	r3, r3, #8
 8012c4c:	4413      	add	r3, r2
 8012c4e:	4619      	mov	r1, r3
 8012c50:	68f8      	ldr	r0, [r7, #12]
 8012c52:	f7ff fe07 	bl	8012864 <move_window>
 8012c56:	4603      	mov	r3, r0
 8012c58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c5a:	7ffb      	ldrb	r3, [r7, #31]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d148      	bne.n	8012cf2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	005b      	lsls	r3, r3, #1
 8012c6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012c6e:	4413      	add	r3, r2
 8012c70:	687a      	ldr	r2, [r7, #4]
 8012c72:	b292      	uxth	r2, r2
 8012c74:	4611      	mov	r1, r2
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7ff fb7f 	bl	801237a <st_word>
			fs->wflag = 1;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	70da      	strb	r2, [r3, #3]
			break;
 8012c82:	e039      	b.n	8012cf8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	6a1a      	ldr	r2, [r3, #32]
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	09db      	lsrs	r3, r3, #7
 8012c8c:	4413      	add	r3, r2
 8012c8e:	4619      	mov	r1, r3
 8012c90:	68f8      	ldr	r0, [r7, #12]
 8012c92:	f7ff fde7 	bl	8012864 <move_window>
 8012c96:	4603      	mov	r3, r0
 8012c98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c9a:	7ffb      	ldrb	r3, [r7, #31]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d12a      	bne.n	8012cf6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	009b      	lsls	r3, r3, #2
 8012cb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012cb4:	4413      	add	r3, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff fb3c 	bl	8012334 <ld_dword>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012cc2:	4323      	orrs	r3, r4
 8012cc4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	009b      	lsls	r3, r3, #2
 8012cd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012cd4:	4413      	add	r3, r2
 8012cd6:	6879      	ldr	r1, [r7, #4]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7ff fb69 	bl	80123b0 <st_dword>
			fs->wflag = 1;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	70da      	strb	r2, [r3, #3]
			break;
 8012ce4:	e008      	b.n	8012cf8 <put_fat+0x1ce>
		}
	}
 8012ce6:	bf00      	nop
 8012ce8:	e006      	b.n	8012cf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012cea:	bf00      	nop
 8012cec:	e004      	b.n	8012cf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012cee:	bf00      	nop
 8012cf0:	e002      	b.n	8012cf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012cf2:	bf00      	nop
 8012cf4:	e000      	b.n	8012cf8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012cf6:	bf00      	nop
	return res;
 8012cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3724      	adds	r7, #36	; 0x24
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd90      	pop	{r4, r7, pc}

08012d02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b088      	sub	sp, #32
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	60f8      	str	r0, [r7, #12]
 8012d0a:	60b9      	str	r1, [r7, #8]
 8012d0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d904      	bls.n	8012d28 <remove_chain+0x26>
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	695b      	ldr	r3, [r3, #20]
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d301      	bcc.n	8012d2c <remove_chain+0x2a>
 8012d28:	2302      	movs	r3, #2
 8012d2a:	e04b      	b.n	8012dc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d00c      	beq.n	8012d4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012d32:	f04f 32ff 	mov.w	r2, #4294967295
 8012d36:	6879      	ldr	r1, [r7, #4]
 8012d38:	69b8      	ldr	r0, [r7, #24]
 8012d3a:	f7ff fef6 	bl	8012b2a <put_fat>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012d42:	7ffb      	ldrb	r3, [r7, #31]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d001      	beq.n	8012d4c <remove_chain+0x4a>
 8012d48:	7ffb      	ldrb	r3, [r7, #31]
 8012d4a:	e03b      	b.n	8012dc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d4c:	68b9      	ldr	r1, [r7, #8]
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f7ff fe43 	bl	80129da <get_fat>
 8012d54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d031      	beq.n	8012dc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d101      	bne.n	8012d66 <remove_chain+0x64>
 8012d62:	2302      	movs	r3, #2
 8012d64:	e02e      	b.n	8012dc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d6c:	d101      	bne.n	8012d72 <remove_chain+0x70>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e028      	b.n	8012dc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012d72:	2200      	movs	r2, #0
 8012d74:	68b9      	ldr	r1, [r7, #8]
 8012d76:	69b8      	ldr	r0, [r7, #24]
 8012d78:	f7ff fed7 	bl	8012b2a <put_fat>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012d80:	7ffb      	ldrb	r3, [r7, #31]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d001      	beq.n	8012d8a <remove_chain+0x88>
 8012d86:	7ffb      	ldrb	r3, [r7, #31]
 8012d88:	e01c      	b.n	8012dc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	691a      	ldr	r2, [r3, #16]
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	695b      	ldr	r3, [r3, #20]
 8012d92:	3b02      	subs	r3, #2
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d20b      	bcs.n	8012db0 <remove_chain+0xae>
			fs->free_clst++;
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	691b      	ldr	r3, [r3, #16]
 8012d9c:	1c5a      	adds	r2, r3, #1
 8012d9e:	69bb      	ldr	r3, [r7, #24]
 8012da0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	791b      	ldrb	r3, [r3, #4]
 8012da6:	f043 0301 	orr.w	r3, r3, #1
 8012daa:	b2da      	uxtb	r2, r3
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	695b      	ldr	r3, [r3, #20]
 8012db8:	68ba      	ldr	r2, [r7, #8]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d3c6      	bcc.n	8012d4c <remove_chain+0x4a>
 8012dbe:	e000      	b.n	8012dc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012dc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012dc2:	2300      	movs	r3, #0
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3720      	adds	r7, #32
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b088      	sub	sp, #32
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d10d      	bne.n	8012dfe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d004      	beq.n	8012df8 <create_chain+0x2c>
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	695b      	ldr	r3, [r3, #20]
 8012df2:	69ba      	ldr	r2, [r7, #24]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d31b      	bcc.n	8012e30 <create_chain+0x64>
 8012df8:	2301      	movs	r3, #1
 8012dfa:	61bb      	str	r3, [r7, #24]
 8012dfc:	e018      	b.n	8012e30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012dfe:	6839      	ldr	r1, [r7, #0]
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f7ff fdea 	bl	80129da <get_fat>
 8012e06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d801      	bhi.n	8012e12 <create_chain+0x46>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	e070      	b.n	8012ef4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e18:	d101      	bne.n	8012e1e <create_chain+0x52>
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	e06a      	b.n	8012ef4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	695b      	ldr	r3, [r3, #20]
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d201      	bcs.n	8012e2c <create_chain+0x60>
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	e063      	b.n	8012ef4 <create_chain+0x128>
		scl = clst;
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	3301      	adds	r3, #1
 8012e38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	695b      	ldr	r3, [r3, #20]
 8012e3e:	69fa      	ldr	r2, [r7, #28]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d307      	bcc.n	8012e54 <create_chain+0x88>
				ncl = 2;
 8012e44:	2302      	movs	r3, #2
 8012e46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e48:	69fa      	ldr	r2, [r7, #28]
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d901      	bls.n	8012e54 <create_chain+0x88>
 8012e50:	2300      	movs	r3, #0
 8012e52:	e04f      	b.n	8012ef4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e54:	69f9      	ldr	r1, [r7, #28]
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7ff fdbf 	bl	80129da <get_fat>
 8012e5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00e      	beq.n	8012e82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d003      	beq.n	8012e72 <create_chain+0xa6>
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e70:	d101      	bne.n	8012e76 <create_chain+0xaa>
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	e03e      	b.n	8012ef4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e76:	69fa      	ldr	r2, [r7, #28]
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d1da      	bne.n	8012e34 <create_chain+0x68>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	e038      	b.n	8012ef4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012e82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012e84:	f04f 32ff 	mov.w	r2, #4294967295
 8012e88:	69f9      	ldr	r1, [r7, #28]
 8012e8a:	6938      	ldr	r0, [r7, #16]
 8012e8c:	f7ff fe4d 	bl	8012b2a <put_fat>
 8012e90:	4603      	mov	r3, r0
 8012e92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012e94:	7dfb      	ldrb	r3, [r7, #23]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d109      	bne.n	8012eae <create_chain+0xe2>
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d006      	beq.n	8012eae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012ea0:	69fa      	ldr	r2, [r7, #28]
 8012ea2:	6839      	ldr	r1, [r7, #0]
 8012ea4:	6938      	ldr	r0, [r7, #16]
 8012ea6:	f7ff fe40 	bl	8012b2a <put_fat>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012eae:	7dfb      	ldrb	r3, [r7, #23]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d116      	bne.n	8012ee2 <create_chain+0x116>
		fs->last_clst = ncl;
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	69fa      	ldr	r2, [r7, #28]
 8012eb8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	691a      	ldr	r2, [r3, #16]
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	695b      	ldr	r3, [r3, #20]
 8012ec2:	3b02      	subs	r3, #2
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d804      	bhi.n	8012ed2 <create_chain+0x106>
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	691b      	ldr	r3, [r3, #16]
 8012ecc:	1e5a      	subs	r2, r3, #1
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	791b      	ldrb	r3, [r3, #4]
 8012ed6:	f043 0301 	orr.w	r3, r3, #1
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	711a      	strb	r2, [r3, #4]
 8012ee0:	e007      	b.n	8012ef2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012ee2:	7dfb      	ldrb	r3, [r7, #23]
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d102      	bne.n	8012eee <create_chain+0x122>
 8012ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8012eec:	e000      	b.n	8012ef0 <create_chain+0x124>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012ef2:	69fb      	ldr	r3, [r7, #28]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3720      	adds	r7, #32
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012efc:	b480      	push	{r7}
 8012efe:	b087      	sub	sp, #28
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f10:	3304      	adds	r3, #4
 8012f12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	0a5b      	lsrs	r3, r3, #9
 8012f18:	68fa      	ldr	r2, [r7, #12]
 8012f1a:	8952      	ldrh	r2, [r2, #10]
 8012f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	1d1a      	adds	r2, r3, #4
 8012f26:	613a      	str	r2, [r7, #16]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d101      	bne.n	8012f36 <clmt_clust+0x3a>
 8012f32:	2300      	movs	r3, #0
 8012f34:	e010      	b.n	8012f58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d307      	bcc.n	8012f4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f3e:	697a      	ldr	r2, [r7, #20]
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	1ad3      	subs	r3, r2, r3
 8012f44:	617b      	str	r3, [r7, #20]
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	3304      	adds	r3, #4
 8012f4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f4c:	e7e9      	b.n	8012f22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	4413      	add	r3, r2
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	371c      	adds	r7, #28
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr

08012f64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b086      	sub	sp, #24
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012f7a:	d204      	bcs.n	8012f86 <dir_sdi+0x22>
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	f003 031f 	and.w	r3, r3, #31
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d001      	beq.n	8012f8a <dir_sdi+0x26>
		return FR_INT_ERR;
 8012f86:	2302      	movs	r3, #2
 8012f88:	e063      	b.n	8013052 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	683a      	ldr	r2, [r7, #0]
 8012f8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d106      	bne.n	8012faa <dir_sdi+0x46>
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	2b02      	cmp	r3, #2
 8012fa2:	d902      	bls.n	8012faa <dir_sdi+0x46>
		clst = fs->dirbase;
 8012fa4:	693b      	ldr	r3, [r7, #16]
 8012fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10c      	bne.n	8012fca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	095b      	lsrs	r3, r3, #5
 8012fb4:	693a      	ldr	r2, [r7, #16]
 8012fb6:	8912      	ldrh	r2, [r2, #8]
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d301      	bcc.n	8012fc0 <dir_sdi+0x5c>
 8012fbc:	2302      	movs	r3, #2
 8012fbe:	e048      	b.n	8013052 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	61da      	str	r2, [r3, #28]
 8012fc8:	e029      	b.n	801301e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	895b      	ldrh	r3, [r3, #10]
 8012fce:	025b      	lsls	r3, r3, #9
 8012fd0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012fd2:	e019      	b.n	8013008 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6979      	ldr	r1, [r7, #20]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7ff fcfe 	bl	80129da <get_fat>
 8012fde:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe6:	d101      	bne.n	8012fec <dir_sdi+0x88>
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e032      	b.n	8013052 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d904      	bls.n	8012ffc <dir_sdi+0x98>
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	695b      	ldr	r3, [r3, #20]
 8012ff6:	697a      	ldr	r2, [r7, #20]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d301      	bcc.n	8013000 <dir_sdi+0x9c>
 8012ffc:	2302      	movs	r3, #2
 8012ffe:	e028      	b.n	8013052 <dir_sdi+0xee>
			ofs -= csz;
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	1ad3      	subs	r3, r2, r3
 8013006:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013008:	683a      	ldr	r2, [r7, #0]
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	429a      	cmp	r2, r3
 801300e:	d2e1      	bcs.n	8012fd4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013010:	6979      	ldr	r1, [r7, #20]
 8013012:	6938      	ldr	r0, [r7, #16]
 8013014:	f7ff fcc2 	bl	801299c <clust2sect>
 8013018:	4602      	mov	r2, r0
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	697a      	ldr	r2, [r7, #20]
 8013022:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	69db      	ldr	r3, [r3, #28]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d101      	bne.n	8013030 <dir_sdi+0xcc>
 801302c:	2302      	movs	r3, #2
 801302e:	e010      	b.n	8013052 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	69da      	ldr	r2, [r3, #28]
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	0a5b      	lsrs	r3, r3, #9
 8013038:	441a      	add	r2, r3
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801304a:	441a      	add	r2, r3
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013050:	2300      	movs	r3, #0
}
 8013052:	4618      	mov	r0, r3
 8013054:	3718      	adds	r7, #24
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}

0801305a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801305a:	b580      	push	{r7, lr}
 801305c:	b086      	sub	sp, #24
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
 8013062:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	695b      	ldr	r3, [r3, #20]
 801306e:	3320      	adds	r3, #32
 8013070:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	69db      	ldr	r3, [r3, #28]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d003      	beq.n	8013082 <dir_next+0x28>
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013080:	d301      	bcc.n	8013086 <dir_next+0x2c>
 8013082:	2304      	movs	r3, #4
 8013084:	e0aa      	b.n	80131dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801308c:	2b00      	cmp	r3, #0
 801308e:	f040 8098 	bne.w	80131c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	69db      	ldr	r3, [r3, #28]
 8013096:	1c5a      	adds	r2, r3, #1
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	699b      	ldr	r3, [r3, #24]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d10b      	bne.n	80130bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	095b      	lsrs	r3, r3, #5
 80130a8:	68fa      	ldr	r2, [r7, #12]
 80130aa:	8912      	ldrh	r2, [r2, #8]
 80130ac:	4293      	cmp	r3, r2
 80130ae:	f0c0 8088 	bcc.w	80131c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2200      	movs	r2, #0
 80130b6:	61da      	str	r2, [r3, #28]
 80130b8:	2304      	movs	r3, #4
 80130ba:	e08f      	b.n	80131dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	0a5b      	lsrs	r3, r3, #9
 80130c0:	68fa      	ldr	r2, [r7, #12]
 80130c2:	8952      	ldrh	r2, [r2, #10]
 80130c4:	3a01      	subs	r2, #1
 80130c6:	4013      	ands	r3, r2
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d17a      	bne.n	80131c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	4619      	mov	r1, r3
 80130d4:	4610      	mov	r0, r2
 80130d6:	f7ff fc80 	bl	80129da <get_fat>
 80130da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d801      	bhi.n	80130e6 <dir_next+0x8c>
 80130e2:	2302      	movs	r3, #2
 80130e4:	e07a      	b.n	80131dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ec:	d101      	bne.n	80130f2 <dir_next+0x98>
 80130ee:	2301      	movs	r3, #1
 80130f0:	e074      	b.n	80131dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	695b      	ldr	r3, [r3, #20]
 80130f6:	697a      	ldr	r2, [r7, #20]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d358      	bcc.n	80131ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d104      	bne.n	801310c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	61da      	str	r2, [r3, #28]
 8013108:	2304      	movs	r3, #4
 801310a:	e067      	b.n	80131dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	699b      	ldr	r3, [r3, #24]
 8013112:	4619      	mov	r1, r3
 8013114:	4610      	mov	r0, r2
 8013116:	f7ff fe59 	bl	8012dcc <create_chain>
 801311a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d101      	bne.n	8013126 <dir_next+0xcc>
 8013122:	2307      	movs	r3, #7
 8013124:	e05a      	b.n	80131dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	2b01      	cmp	r3, #1
 801312a:	d101      	bne.n	8013130 <dir_next+0xd6>
 801312c:	2302      	movs	r3, #2
 801312e:	e055      	b.n	80131dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013136:	d101      	bne.n	801313c <dir_next+0xe2>
 8013138:	2301      	movs	r3, #1
 801313a:	e04f      	b.n	80131dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801313c:	68f8      	ldr	r0, [r7, #12]
 801313e:	f7ff fb4d 	bl	80127dc <sync_window>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d001      	beq.n	801314c <dir_next+0xf2>
 8013148:	2301      	movs	r3, #1
 801314a:	e047      	b.n	80131dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	3330      	adds	r3, #48	; 0x30
 8013150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013154:	2100      	movs	r1, #0
 8013156:	4618      	mov	r0, r3
 8013158:	f7ff f977 	bl	801244a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801315c:	2300      	movs	r3, #0
 801315e:	613b      	str	r3, [r7, #16]
 8013160:	6979      	ldr	r1, [r7, #20]
 8013162:	68f8      	ldr	r0, [r7, #12]
 8013164:	f7ff fc1a 	bl	801299c <clust2sect>
 8013168:	4602      	mov	r2, r0
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	62da      	str	r2, [r3, #44]	; 0x2c
 801316e:	e012      	b.n	8013196 <dir_next+0x13c>
						fs->wflag = 1;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2201      	movs	r2, #1
 8013174:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f7ff fb30 	bl	80127dc <sync_window>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <dir_next+0x12c>
 8013182:	2301      	movs	r3, #1
 8013184:	e02a      	b.n	80131dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	3301      	adds	r3, #1
 801318a:	613b      	str	r3, [r7, #16]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013190:	1c5a      	adds	r2, r3, #1
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	62da      	str	r2, [r3, #44]	; 0x2c
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	895b      	ldrh	r3, [r3, #10]
 801319a:	461a      	mov	r2, r3
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	4293      	cmp	r3, r2
 80131a0:	d3e6      	bcc.n	8013170 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	1ad2      	subs	r2, r2, r3
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	697a      	ldr	r2, [r7, #20]
 80131b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80131b4:	6979      	ldr	r1, [r7, #20]
 80131b6:	68f8      	ldr	r0, [r7, #12]
 80131b8:	f7ff fbf0 	bl	801299c <clust2sect>
 80131bc:	4602      	mov	r2, r0
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131d4:	441a      	add	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80131da:	2300      	movs	r3, #0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3718      	adds	r7, #24
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b086      	sub	sp, #24
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80131f4:	2100      	movs	r1, #0
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7ff feb4 	bl	8012f64 <dir_sdi>
 80131fc:	4603      	mov	r3, r0
 80131fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013200:	7dfb      	ldrb	r3, [r7, #23]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d12b      	bne.n	801325e <dir_alloc+0x7a>
		n = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	69db      	ldr	r3, [r3, #28]
 801320e:	4619      	mov	r1, r3
 8013210:	68f8      	ldr	r0, [r7, #12]
 8013212:	f7ff fb27 	bl	8012864 <move_window>
 8013216:	4603      	mov	r3, r0
 8013218:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801321a:	7dfb      	ldrb	r3, [r7, #23]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d11d      	bne.n	801325c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6a1b      	ldr	r3, [r3, #32]
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	2be5      	cmp	r3, #229	; 0xe5
 8013228:	d004      	beq.n	8013234 <dir_alloc+0x50>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6a1b      	ldr	r3, [r3, #32]
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d107      	bne.n	8013244 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	3301      	adds	r3, #1
 8013238:	613b      	str	r3, [r7, #16]
 801323a:	693a      	ldr	r2, [r7, #16]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	429a      	cmp	r2, r3
 8013240:	d102      	bne.n	8013248 <dir_alloc+0x64>
 8013242:	e00c      	b.n	801325e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013244:	2300      	movs	r3, #0
 8013246:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013248:	2101      	movs	r1, #1
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f7ff ff05 	bl	801305a <dir_next>
 8013250:	4603      	mov	r3, r0
 8013252:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013254:	7dfb      	ldrb	r3, [r7, #23]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d0d7      	beq.n	801320a <dir_alloc+0x26>
 801325a:	e000      	b.n	801325e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801325c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801325e:	7dfb      	ldrb	r3, [r7, #23]
 8013260:	2b04      	cmp	r3, #4
 8013262:	d101      	bne.n	8013268 <dir_alloc+0x84>
 8013264:	2307      	movs	r3, #7
 8013266:	75fb      	strb	r3, [r7, #23]
	return res;
 8013268:	7dfb      	ldrb	r3, [r7, #23]
}
 801326a:	4618      	mov	r0, r3
 801326c:	3718      	adds	r7, #24
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013272:	b580      	push	{r7, lr}
 8013274:	b084      	sub	sp, #16
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
 801327a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	331a      	adds	r3, #26
 8013280:	4618      	mov	r0, r3
 8013282:	f7ff f83f 	bl	8012304 <ld_word>
 8013286:	4603      	mov	r3, r0
 8013288:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	2b03      	cmp	r3, #3
 8013290:	d109      	bne.n	80132a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	3314      	adds	r3, #20
 8013296:	4618      	mov	r0, r3
 8013298:	f7ff f834 	bl	8012304 <ld_word>
 801329c:	4603      	mov	r3, r0
 801329e:	041b      	lsls	r3, r3, #16
 80132a0:	68fa      	ldr	r2, [r7, #12]
 80132a2:	4313      	orrs	r3, r2
 80132a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80132a6:	68fb      	ldr	r3, [r7, #12]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3710      	adds	r7, #16
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	331a      	adds	r3, #26
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	b292      	uxth	r2, r2
 80132c4:	4611      	mov	r1, r2
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ff f857 	bl	801237a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	2b03      	cmp	r3, #3
 80132d2:	d109      	bne.n	80132e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	f103 0214 	add.w	r2, r3, #20
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	0c1b      	lsrs	r3, r3, #16
 80132de:	b29b      	uxth	r3, r3
 80132e0:	4619      	mov	r1, r3
 80132e2:	4610      	mov	r0, r2
 80132e4:	f7ff f849 	bl	801237a <st_word>
	}
}
 80132e8:	bf00      	nop
 80132ea:	3710      	adds	r7, #16
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b086      	sub	sp, #24
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80132fe:	2100      	movs	r1, #0
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7ff fe2f 	bl	8012f64 <dir_sdi>
 8013306:	4603      	mov	r3, r0
 8013308:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801330a:	7dfb      	ldrb	r3, [r7, #23]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <dir_find+0x24>
 8013310:	7dfb      	ldrb	r3, [r7, #23]
 8013312:	e03e      	b.n	8013392 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	69db      	ldr	r3, [r3, #28]
 8013318:	4619      	mov	r1, r3
 801331a:	6938      	ldr	r0, [r7, #16]
 801331c:	f7ff faa2 	bl	8012864 <move_window>
 8013320:	4603      	mov	r3, r0
 8013322:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013324:	7dfb      	ldrb	r3, [r7, #23]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d12f      	bne.n	801338a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6a1b      	ldr	r3, [r3, #32]
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013332:	7bfb      	ldrb	r3, [r7, #15]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d102      	bne.n	801333e <dir_find+0x4e>
 8013338:	2304      	movs	r3, #4
 801333a:	75fb      	strb	r3, [r7, #23]
 801333c:	e028      	b.n	8013390 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6a1b      	ldr	r3, [r3, #32]
 8013342:	330b      	adds	r3, #11
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801334a:	b2da      	uxtb	r2, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6a1b      	ldr	r3, [r3, #32]
 8013354:	330b      	adds	r3, #11
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f003 0308 	and.w	r3, r3, #8
 801335c:	2b00      	cmp	r3, #0
 801335e:	d10a      	bne.n	8013376 <dir_find+0x86>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6a18      	ldr	r0, [r3, #32]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	3324      	adds	r3, #36	; 0x24
 8013368:	220b      	movs	r2, #11
 801336a:	4619      	mov	r1, r3
 801336c:	f7ff f888 	bl	8012480 <mem_cmp>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00b      	beq.n	801338e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013376:	2100      	movs	r1, #0
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f7ff fe6e 	bl	801305a <dir_next>
 801337e:	4603      	mov	r3, r0
 8013380:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013382:	7dfb      	ldrb	r3, [r7, #23]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d0c5      	beq.n	8013314 <dir_find+0x24>
 8013388:	e002      	b.n	8013390 <dir_find+0xa0>
		if (res != FR_OK) break;
 801338a:	bf00      	nop
 801338c:	e000      	b.n	8013390 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801338e:	bf00      	nop

	return res;
 8013390:	7dfb      	ldrb	r3, [r7, #23]
}
 8013392:	4618      	mov	r0, r3
 8013394:	3718      	adds	r7, #24
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}

0801339a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801339a:	b580      	push	{r7, lr}
 801339c:	b084      	sub	sp, #16
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80133a8:	2101      	movs	r1, #1
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7ff ff1a 	bl	80131e4 <dir_alloc>
 80133b0:	4603      	mov	r3, r0
 80133b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80133b4:	7bfb      	ldrb	r3, [r7, #15]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d11c      	bne.n	80133f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	69db      	ldr	r3, [r3, #28]
 80133be:	4619      	mov	r1, r3
 80133c0:	68b8      	ldr	r0, [r7, #8]
 80133c2:	f7ff fa4f 	bl	8012864 <move_window>
 80133c6:	4603      	mov	r3, r0
 80133c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80133ca:	7bfb      	ldrb	r3, [r7, #15]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d111      	bne.n	80133f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6a1b      	ldr	r3, [r3, #32]
 80133d4:	2220      	movs	r2, #32
 80133d6:	2100      	movs	r1, #0
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff f836 	bl	801244a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6a18      	ldr	r0, [r3, #32]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	3324      	adds	r3, #36	; 0x24
 80133e6:	220b      	movs	r2, #11
 80133e8:	4619      	mov	r1, r3
 80133ea:	f7ff f80d 	bl	8012408 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	2201      	movs	r2, #1
 80133f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3710      	adds	r7, #16
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
	...

08013400 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b088      	sub	sp, #32
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	60fb      	str	r3, [r7, #12]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	3324      	adds	r3, #36	; 0x24
 8013414:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013416:	220b      	movs	r2, #11
 8013418:	2120      	movs	r1, #32
 801341a:	68b8      	ldr	r0, [r7, #8]
 801341c:	f7ff f815 	bl	801244a <mem_set>
	si = i = 0; ni = 8;
 8013420:	2300      	movs	r3, #0
 8013422:	613b      	str	r3, [r7, #16]
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	61fb      	str	r3, [r7, #28]
 8013428:	2308      	movs	r3, #8
 801342a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	1c5a      	adds	r2, r3, #1
 8013430:	61fa      	str	r2, [r7, #28]
 8013432:	68fa      	ldr	r2, [r7, #12]
 8013434:	4413      	add	r3, r2
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801343a:	7efb      	ldrb	r3, [r7, #27]
 801343c:	2b20      	cmp	r3, #32
 801343e:	d94e      	bls.n	80134de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013440:	7efb      	ldrb	r3, [r7, #27]
 8013442:	2b2f      	cmp	r3, #47	; 0x2f
 8013444:	d006      	beq.n	8013454 <create_name+0x54>
 8013446:	7efb      	ldrb	r3, [r7, #27]
 8013448:	2b5c      	cmp	r3, #92	; 0x5c
 801344a:	d110      	bne.n	801346e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801344c:	e002      	b.n	8013454 <create_name+0x54>
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	3301      	adds	r3, #1
 8013452:	61fb      	str	r3, [r7, #28]
 8013454:	68fa      	ldr	r2, [r7, #12]
 8013456:	69fb      	ldr	r3, [r7, #28]
 8013458:	4413      	add	r3, r2
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	2b2f      	cmp	r3, #47	; 0x2f
 801345e:	d0f6      	beq.n	801344e <create_name+0x4e>
 8013460:	68fa      	ldr	r2, [r7, #12]
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	4413      	add	r3, r2
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	2b5c      	cmp	r3, #92	; 0x5c
 801346a:	d0f0      	beq.n	801344e <create_name+0x4e>
			break;
 801346c:	e038      	b.n	80134e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801346e:	7efb      	ldrb	r3, [r7, #27]
 8013470:	2b2e      	cmp	r3, #46	; 0x2e
 8013472:	d003      	beq.n	801347c <create_name+0x7c>
 8013474:	693a      	ldr	r2, [r7, #16]
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	429a      	cmp	r2, r3
 801347a:	d30c      	bcc.n	8013496 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	2b0b      	cmp	r3, #11
 8013480:	d002      	beq.n	8013488 <create_name+0x88>
 8013482:	7efb      	ldrb	r3, [r7, #27]
 8013484:	2b2e      	cmp	r3, #46	; 0x2e
 8013486:	d001      	beq.n	801348c <create_name+0x8c>
 8013488:	2306      	movs	r3, #6
 801348a:	e044      	b.n	8013516 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801348c:	2308      	movs	r3, #8
 801348e:	613b      	str	r3, [r7, #16]
 8013490:	230b      	movs	r3, #11
 8013492:	617b      	str	r3, [r7, #20]
			continue;
 8013494:	e022      	b.n	80134dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013496:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801349a:	2b00      	cmp	r3, #0
 801349c:	da04      	bge.n	80134a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801349e:	7efb      	ldrb	r3, [r7, #27]
 80134a0:	3b80      	subs	r3, #128	; 0x80
 80134a2:	4a1f      	ldr	r2, [pc, #124]	; (8013520 <create_name+0x120>)
 80134a4:	5cd3      	ldrb	r3, [r2, r3]
 80134a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80134a8:	7efb      	ldrb	r3, [r7, #27]
 80134aa:	4619      	mov	r1, r3
 80134ac:	481d      	ldr	r0, [pc, #116]	; (8013524 <create_name+0x124>)
 80134ae:	f7ff f80e 	bl	80124ce <chk_chr>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d001      	beq.n	80134bc <create_name+0xbc>
 80134b8:	2306      	movs	r3, #6
 80134ba:	e02c      	b.n	8013516 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80134bc:	7efb      	ldrb	r3, [r7, #27]
 80134be:	2b60      	cmp	r3, #96	; 0x60
 80134c0:	d905      	bls.n	80134ce <create_name+0xce>
 80134c2:	7efb      	ldrb	r3, [r7, #27]
 80134c4:	2b7a      	cmp	r3, #122	; 0x7a
 80134c6:	d802      	bhi.n	80134ce <create_name+0xce>
 80134c8:	7efb      	ldrb	r3, [r7, #27]
 80134ca:	3b20      	subs	r3, #32
 80134cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	1c5a      	adds	r2, r3, #1
 80134d2:	613a      	str	r2, [r7, #16]
 80134d4:	68ba      	ldr	r2, [r7, #8]
 80134d6:	4413      	add	r3, r2
 80134d8:	7efa      	ldrb	r2, [r7, #27]
 80134da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80134dc:	e7a6      	b.n	801342c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80134de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	69fb      	ldr	r3, [r7, #28]
 80134e4:	441a      	add	r2, r3
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <create_name+0xf4>
 80134f0:	2306      	movs	r3, #6
 80134f2:	e010      	b.n	8013516 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2be5      	cmp	r3, #229	; 0xe5
 80134fa:	d102      	bne.n	8013502 <create_name+0x102>
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2205      	movs	r2, #5
 8013500:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013502:	7efb      	ldrb	r3, [r7, #27]
 8013504:	2b20      	cmp	r3, #32
 8013506:	d801      	bhi.n	801350c <create_name+0x10c>
 8013508:	2204      	movs	r2, #4
 801350a:	e000      	b.n	801350e <create_name+0x10e>
 801350c:	2200      	movs	r2, #0
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	330b      	adds	r3, #11
 8013512:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013514:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013516:	4618      	mov	r0, r3
 8013518:	3720      	adds	r7, #32
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	08023ea4 	.word	0x08023ea4
 8013524:	08021fe4 	.word	0x08021fe4

08013528 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801353c:	e002      	b.n	8013544 <follow_path+0x1c>
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	3301      	adds	r3, #1
 8013542:	603b      	str	r3, [r7, #0]
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	2b2f      	cmp	r3, #47	; 0x2f
 801354a:	d0f8      	beq.n	801353e <follow_path+0x16>
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	2b5c      	cmp	r3, #92	; 0x5c
 8013552:	d0f4      	beq.n	801353e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	2200      	movs	r2, #0
 8013558:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	2b1f      	cmp	r3, #31
 8013560:	d80a      	bhi.n	8013578 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2280      	movs	r2, #128	; 0x80
 8013566:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801356a:	2100      	movs	r1, #0
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7ff fcf9 	bl	8012f64 <dir_sdi>
 8013572:	4603      	mov	r3, r0
 8013574:	75fb      	strb	r3, [r7, #23]
 8013576:	e043      	b.n	8013600 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013578:	463b      	mov	r3, r7
 801357a:	4619      	mov	r1, r3
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7ff ff3f 	bl	8013400 <create_name>
 8013582:	4603      	mov	r3, r0
 8013584:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013586:	7dfb      	ldrb	r3, [r7, #23]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d134      	bne.n	80135f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7ff feaf 	bl	80132f0 <dir_find>
 8013592:	4603      	mov	r3, r0
 8013594:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801359c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801359e:	7dfb      	ldrb	r3, [r7, #23]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d00a      	beq.n	80135ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80135a4:	7dfb      	ldrb	r3, [r7, #23]
 80135a6:	2b04      	cmp	r3, #4
 80135a8:	d127      	bne.n	80135fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80135aa:	7afb      	ldrb	r3, [r7, #11]
 80135ac:	f003 0304 	and.w	r3, r3, #4
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d122      	bne.n	80135fa <follow_path+0xd2>
 80135b4:	2305      	movs	r3, #5
 80135b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80135b8:	e01f      	b.n	80135fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135ba:	7afb      	ldrb	r3, [r7, #11]
 80135bc:	f003 0304 	and.w	r3, r3, #4
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d11c      	bne.n	80135fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	799b      	ldrb	r3, [r3, #6]
 80135c8:	f003 0310 	and.w	r3, r3, #16
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d102      	bne.n	80135d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80135d0:	2305      	movs	r3, #5
 80135d2:	75fb      	strb	r3, [r7, #23]
 80135d4:	e014      	b.n	8013600 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	695b      	ldr	r3, [r3, #20]
 80135e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135e4:	4413      	add	r3, r2
 80135e6:	4619      	mov	r1, r3
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f7ff fe42 	bl	8013272 <ld_clust>
 80135ee:	4602      	mov	r2, r0
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135f4:	e7c0      	b.n	8013578 <follow_path+0x50>
			if (res != FR_OK) break;
 80135f6:	bf00      	nop
 80135f8:	e002      	b.n	8013600 <follow_path+0xd8>
				break;
 80135fa:	bf00      	nop
 80135fc:	e000      	b.n	8013600 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135fe:	bf00      	nop
			}
		}
	}

	return res;
 8013600:	7dfb      	ldrb	r3, [r7, #23]
}
 8013602:	4618      	mov	r0, r3
 8013604:	3718      	adds	r7, #24
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}

0801360a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801360a:	b480      	push	{r7}
 801360c:	b087      	sub	sp, #28
 801360e:	af00      	add	r7, sp, #0
 8013610:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013612:	f04f 33ff 	mov.w	r3, #4294967295
 8013616:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d031      	beq.n	8013684 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	617b      	str	r3, [r7, #20]
 8013626:	e002      	b.n	801362e <get_ldnumber+0x24>
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	3301      	adds	r3, #1
 801362c:	617b      	str	r3, [r7, #20]
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	2b20      	cmp	r3, #32
 8013634:	d903      	bls.n	801363e <get_ldnumber+0x34>
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	2b3a      	cmp	r3, #58	; 0x3a
 801363c:	d1f4      	bne.n	8013628 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	2b3a      	cmp	r3, #58	; 0x3a
 8013644:	d11c      	bne.n	8013680 <get_ldnumber+0x76>
			tp = *path;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	1c5a      	adds	r2, r3, #1
 8013650:	60fa      	str	r2, [r7, #12]
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	3b30      	subs	r3, #48	; 0x30
 8013656:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	2b09      	cmp	r3, #9
 801365c:	d80e      	bhi.n	801367c <get_ldnumber+0x72>
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	429a      	cmp	r2, r3
 8013664:	d10a      	bne.n	801367c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d107      	bne.n	801367c <get_ldnumber+0x72>
					vol = (int)i;
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	3301      	adds	r3, #1
 8013674:	617b      	str	r3, [r7, #20]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	697a      	ldr	r2, [r7, #20]
 801367a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	e002      	b.n	8013686 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013680:	2300      	movs	r3, #0
 8013682:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013684:	693b      	ldr	r3, [r7, #16]
}
 8013686:	4618      	mov	r0, r3
 8013688:	371c      	adds	r7, #28
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
	...

08013694 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2200      	movs	r2, #0
 80136a2:	70da      	strb	r2, [r3, #3]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f04f 32ff 	mov.w	r2, #4294967295
 80136aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80136ac:	6839      	ldr	r1, [r7, #0]
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f7ff f8d8 	bl	8012864 <move_window>
 80136b4:	4603      	mov	r3, r0
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d001      	beq.n	80136be <check_fs+0x2a>
 80136ba:	2304      	movs	r3, #4
 80136bc:	e038      	b.n	8013730 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	3330      	adds	r3, #48	; 0x30
 80136c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fe fe1c 	bl	8012304 <ld_word>
 80136cc:	4603      	mov	r3, r0
 80136ce:	461a      	mov	r2, r3
 80136d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d001      	beq.n	80136dc <check_fs+0x48>
 80136d8:	2303      	movs	r3, #3
 80136da:	e029      	b.n	8013730 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136e2:	2be9      	cmp	r3, #233	; 0xe9
 80136e4:	d009      	beq.n	80136fa <check_fs+0x66>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136ec:	2beb      	cmp	r3, #235	; 0xeb
 80136ee:	d11e      	bne.n	801372e <check_fs+0x9a>
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80136f6:	2b90      	cmp	r3, #144	; 0x90
 80136f8:	d119      	bne.n	801372e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	3330      	adds	r3, #48	; 0x30
 80136fe:	3336      	adds	r3, #54	; 0x36
 8013700:	4618      	mov	r0, r3
 8013702:	f7fe fe17 	bl	8012334 <ld_dword>
 8013706:	4603      	mov	r3, r0
 8013708:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801370c:	4a0a      	ldr	r2, [pc, #40]	; (8013738 <check_fs+0xa4>)
 801370e:	4293      	cmp	r3, r2
 8013710:	d101      	bne.n	8013716 <check_fs+0x82>
 8013712:	2300      	movs	r3, #0
 8013714:	e00c      	b.n	8013730 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	3330      	adds	r3, #48	; 0x30
 801371a:	3352      	adds	r3, #82	; 0x52
 801371c:	4618      	mov	r0, r3
 801371e:	f7fe fe09 	bl	8012334 <ld_dword>
 8013722:	4603      	mov	r3, r0
 8013724:	4a05      	ldr	r2, [pc, #20]	; (801373c <check_fs+0xa8>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d101      	bne.n	801372e <check_fs+0x9a>
 801372a:	2300      	movs	r3, #0
 801372c:	e000      	b.n	8013730 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801372e:	2302      	movs	r3, #2
}
 8013730:	4618      	mov	r0, r3
 8013732:	3708      	adds	r7, #8
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}
 8013738:	00544146 	.word	0x00544146
 801373c:	33544146 	.word	0x33544146

08013740 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b096      	sub	sp, #88	; 0x58
 8013744:	af00      	add	r7, sp, #0
 8013746:	60f8      	str	r0, [r7, #12]
 8013748:	60b9      	str	r1, [r7, #8]
 801374a:	4613      	mov	r3, r2
 801374c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	2200      	movs	r2, #0
 8013752:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013754:	68f8      	ldr	r0, [r7, #12]
 8013756:	f7ff ff58 	bl	801360a <get_ldnumber>
 801375a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801375c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801375e:	2b00      	cmp	r3, #0
 8013760:	da01      	bge.n	8013766 <find_volume+0x26>
 8013762:	230b      	movs	r3, #11
 8013764:	e22e      	b.n	8013bc4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013766:	4aa8      	ldr	r2, [pc, #672]	; (8013a08 <find_volume+0x2c8>)
 8013768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801376e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013772:	2b00      	cmp	r3, #0
 8013774:	d101      	bne.n	801377a <find_volume+0x3a>
 8013776:	230c      	movs	r3, #12
 8013778:	e224      	b.n	8013bc4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801377e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013780:	79fb      	ldrb	r3, [r7, #7]
 8013782:	f023 0301 	bic.w	r3, r3, #1
 8013786:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d01a      	beq.n	80137c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013792:	785b      	ldrb	r3, [r3, #1]
 8013794:	4618      	mov	r0, r3
 8013796:	f7fe fd17 	bl	80121c8 <disk_status>
 801379a:	4603      	mov	r3, r0
 801379c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80137a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137a4:	f003 0301 	and.w	r3, r3, #1
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d10c      	bne.n	80137c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d007      	beq.n	80137c2 <find_volume+0x82>
 80137b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137b6:	f003 0304 	and.w	r3, r3, #4
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d001      	beq.n	80137c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80137be:	230a      	movs	r3, #10
 80137c0:	e200      	b.n	8013bc4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80137c2:	2300      	movs	r3, #0
 80137c4:	e1fe      	b.n	8013bc4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80137c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c8:	2200      	movs	r2, #0
 80137ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80137cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137ce:	b2da      	uxtb	r2, r3
 80137d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80137d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d6:	785b      	ldrb	r3, [r3, #1]
 80137d8:	4618      	mov	r0, r3
 80137da:	f7fe fd0f 	bl	80121fc <disk_initialize>
 80137de:	4603      	mov	r3, r0
 80137e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80137e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137e8:	f003 0301 	and.w	r3, r3, #1
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d001      	beq.n	80137f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80137f0:	2303      	movs	r3, #3
 80137f2:	e1e7      	b.n	8013bc4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80137f4:	79fb      	ldrb	r3, [r7, #7]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d007      	beq.n	801380a <find_volume+0xca>
 80137fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137fe:	f003 0304 	and.w	r3, r3, #4
 8013802:	2b00      	cmp	r3, #0
 8013804:	d001      	beq.n	801380a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013806:	230a      	movs	r3, #10
 8013808:	e1dc      	b.n	8013bc4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801380a:	2300      	movs	r3, #0
 801380c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801380e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013812:	f7ff ff3f 	bl	8013694 <check_fs>
 8013816:	4603      	mov	r3, r0
 8013818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801381c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013820:	2b02      	cmp	r3, #2
 8013822:	d14b      	bne.n	80138bc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013824:	2300      	movs	r3, #0
 8013826:	643b      	str	r3, [r7, #64]	; 0x40
 8013828:	e01f      	b.n	801386a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013832:	011b      	lsls	r3, r3, #4
 8013834:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013838:	4413      	add	r3, r2
 801383a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383e:	3304      	adds	r3, #4
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d006      	beq.n	8013854 <find_volume+0x114>
 8013846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013848:	3308      	adds	r3, #8
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe fd72 	bl	8012334 <ld_dword>
 8013850:	4602      	mov	r2, r0
 8013852:	e000      	b.n	8013856 <find_volume+0x116>
 8013854:	2200      	movs	r2, #0
 8013856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801385e:	440b      	add	r3, r1
 8013860:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013866:	3301      	adds	r3, #1
 8013868:	643b      	str	r3, [r7, #64]	; 0x40
 801386a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801386c:	2b03      	cmp	r3, #3
 801386e:	d9dc      	bls.n	801382a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013870:	2300      	movs	r3, #0
 8013872:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013876:	2b00      	cmp	r3, #0
 8013878:	d002      	beq.n	8013880 <find_volume+0x140>
 801387a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801387c:	3b01      	subs	r3, #1
 801387e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013882:	009b      	lsls	r3, r3, #2
 8013884:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013888:	4413      	add	r3, r2
 801388a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801388e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013892:	2b00      	cmp	r3, #0
 8013894:	d005      	beq.n	80138a2 <find_volume+0x162>
 8013896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801389a:	f7ff fefb 	bl	8013694 <check_fs>
 801389e:	4603      	mov	r3, r0
 80138a0:	e000      	b.n	80138a4 <find_volume+0x164>
 80138a2:	2303      	movs	r3, #3
 80138a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80138a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d905      	bls.n	80138bc <find_volume+0x17c>
 80138b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b2:	3301      	adds	r3, #1
 80138b4:	643b      	str	r3, [r7, #64]	; 0x40
 80138b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b8:	2b03      	cmp	r3, #3
 80138ba:	d9e1      	bls.n	8013880 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80138bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138c0:	2b04      	cmp	r3, #4
 80138c2:	d101      	bne.n	80138c8 <find_volume+0x188>
 80138c4:	2301      	movs	r3, #1
 80138c6:	e17d      	b.n	8013bc4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80138c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138cc:	2b01      	cmp	r3, #1
 80138ce:	d901      	bls.n	80138d4 <find_volume+0x194>
 80138d0:	230d      	movs	r3, #13
 80138d2:	e177      	b.n	8013bc4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80138d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138d6:	3330      	adds	r3, #48	; 0x30
 80138d8:	330b      	adds	r3, #11
 80138da:	4618      	mov	r0, r3
 80138dc:	f7fe fd12 	bl	8012304 <ld_word>
 80138e0:	4603      	mov	r3, r0
 80138e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138e6:	d001      	beq.n	80138ec <find_volume+0x1ac>
 80138e8:	230d      	movs	r3, #13
 80138ea:	e16b      	b.n	8013bc4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80138ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ee:	3330      	adds	r3, #48	; 0x30
 80138f0:	3316      	adds	r3, #22
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7fe fd06 	bl	8012304 <ld_word>
 80138f8:	4603      	mov	r3, r0
 80138fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80138fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d106      	bne.n	8013910 <find_volume+0x1d0>
 8013902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013904:	3330      	adds	r3, #48	; 0x30
 8013906:	3324      	adds	r3, #36	; 0x24
 8013908:	4618      	mov	r0, r3
 801390a:	f7fe fd13 	bl	8012334 <ld_dword>
 801390e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013914:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013918:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013922:	789b      	ldrb	r3, [r3, #2]
 8013924:	2b01      	cmp	r3, #1
 8013926:	d005      	beq.n	8013934 <find_volume+0x1f4>
 8013928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392a:	789b      	ldrb	r3, [r3, #2]
 801392c:	2b02      	cmp	r3, #2
 801392e:	d001      	beq.n	8013934 <find_volume+0x1f4>
 8013930:	230d      	movs	r3, #13
 8013932:	e147      	b.n	8013bc4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013936:	789b      	ldrb	r3, [r3, #2]
 8013938:	461a      	mov	r2, r3
 801393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801393c:	fb02 f303 	mul.w	r3, r2, r3
 8013940:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013948:	b29a      	uxth	r2, r3
 801394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013950:	895b      	ldrh	r3, [r3, #10]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d008      	beq.n	8013968 <find_volume+0x228>
 8013956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013958:	895b      	ldrh	r3, [r3, #10]
 801395a:	461a      	mov	r2, r3
 801395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395e:	895b      	ldrh	r3, [r3, #10]
 8013960:	3b01      	subs	r3, #1
 8013962:	4013      	ands	r3, r2
 8013964:	2b00      	cmp	r3, #0
 8013966:	d001      	beq.n	801396c <find_volume+0x22c>
 8013968:	230d      	movs	r3, #13
 801396a:	e12b      	b.n	8013bc4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396e:	3330      	adds	r3, #48	; 0x30
 8013970:	3311      	adds	r3, #17
 8013972:	4618      	mov	r0, r3
 8013974:	f7fe fcc6 	bl	8012304 <ld_word>
 8013978:	4603      	mov	r3, r0
 801397a:	461a      	mov	r2, r3
 801397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013982:	891b      	ldrh	r3, [r3, #8]
 8013984:	f003 030f 	and.w	r3, r3, #15
 8013988:	b29b      	uxth	r3, r3
 801398a:	2b00      	cmp	r3, #0
 801398c:	d001      	beq.n	8013992 <find_volume+0x252>
 801398e:	230d      	movs	r3, #13
 8013990:	e118      	b.n	8013bc4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013994:	3330      	adds	r3, #48	; 0x30
 8013996:	3313      	adds	r3, #19
 8013998:	4618      	mov	r0, r3
 801399a:	f7fe fcb3 	bl	8012304 <ld_word>
 801399e:	4603      	mov	r3, r0
 80139a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80139a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d106      	bne.n	80139b6 <find_volume+0x276>
 80139a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139aa:	3330      	adds	r3, #48	; 0x30
 80139ac:	3320      	adds	r3, #32
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fe fcc0 	bl	8012334 <ld_dword>
 80139b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80139b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b8:	3330      	adds	r3, #48	; 0x30
 80139ba:	330e      	adds	r3, #14
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fe fca1 	bl	8012304 <ld_word>
 80139c2:	4603      	mov	r3, r0
 80139c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80139c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d101      	bne.n	80139d0 <find_volume+0x290>
 80139cc:	230d      	movs	r3, #13
 80139ce:	e0f9      	b.n	8013bc4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80139d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80139d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139d4:	4413      	add	r3, r2
 80139d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139d8:	8912      	ldrh	r2, [r2, #8]
 80139da:	0912      	lsrs	r2, r2, #4
 80139dc:	b292      	uxth	r2, r2
 80139de:	4413      	add	r3, r2
 80139e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80139e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d201      	bcs.n	80139ee <find_volume+0x2ae>
 80139ea:	230d      	movs	r3, #13
 80139ec:	e0ea      	b.n	8013bc4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80139ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f2:	1ad3      	subs	r3, r2, r3
 80139f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139f6:	8952      	ldrh	r2, [r2, #10]
 80139f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80139fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80139fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d103      	bne.n	8013a0c <find_volume+0x2cc>
 8013a04:	230d      	movs	r3, #13
 8013a06:	e0dd      	b.n	8013bc4 <find_volume+0x484>
 8013a08:	20000950 	.word	0x20000950
		fmt = FS_FAT32;
 8013a0c:	2303      	movs	r3, #3
 8013a0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a14:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d802      	bhi.n	8013a22 <find_volume+0x2e2>
 8013a1c:	2302      	movs	r3, #2
 8013a1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a24:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d802      	bhi.n	8013a32 <find_volume+0x2f2>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a34:	1c9a      	adds	r2, r3, #2
 8013a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a38:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a3e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a44:	441a      	add	r2, r3
 8013a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a48:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013a4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	441a      	add	r2, r3
 8013a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a52:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a58:	2b03      	cmp	r3, #3
 8013a5a:	d11e      	bne.n	8013a9a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5e:	3330      	adds	r3, #48	; 0x30
 8013a60:	332a      	adds	r3, #42	; 0x2a
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fe fc4e 	bl	8012304 <ld_word>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d001      	beq.n	8013a72 <find_volume+0x332>
 8013a6e:	230d      	movs	r3, #13
 8013a70:	e0a8      	b.n	8013bc4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a74:	891b      	ldrh	r3, [r3, #8]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d001      	beq.n	8013a7e <find_volume+0x33e>
 8013a7a:	230d      	movs	r3, #13
 8013a7c:	e0a2      	b.n	8013bc4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a80:	3330      	adds	r3, #48	; 0x30
 8013a82:	332c      	adds	r3, #44	; 0x2c
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fe fc55 	bl	8012334 <ld_dword>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a92:	695b      	ldr	r3, [r3, #20]
 8013a94:	009b      	lsls	r3, r3, #2
 8013a96:	647b      	str	r3, [r7, #68]	; 0x44
 8013a98:	e01f      	b.n	8013ada <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9c:	891b      	ldrh	r3, [r3, #8]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d101      	bne.n	8013aa6 <find_volume+0x366>
 8013aa2:	230d      	movs	r3, #13
 8013aa4:	e08e      	b.n	8013bc4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa8:	6a1a      	ldr	r2, [r3, #32]
 8013aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aac:	441a      	add	r2, r3
 8013aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ab6:	2b02      	cmp	r3, #2
 8013ab8:	d103      	bne.n	8013ac2 <find_volume+0x382>
 8013aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abc:	695b      	ldr	r3, [r3, #20]
 8013abe:	005b      	lsls	r3, r3, #1
 8013ac0:	e00a      	b.n	8013ad8 <find_volume+0x398>
 8013ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac4:	695a      	ldr	r2, [r3, #20]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	005b      	lsls	r3, r3, #1
 8013aca:	4413      	add	r3, r2
 8013acc:	085a      	lsrs	r2, r3, #1
 8013ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad0:	695b      	ldr	r3, [r3, #20]
 8013ad2:	f003 0301 	and.w	r3, r3, #1
 8013ad6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013ad8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013adc:	699a      	ldr	r2, [r3, #24]
 8013ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ae0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013ae4:	0a5b      	lsrs	r3, r3, #9
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d201      	bcs.n	8013aee <find_volume+0x3ae>
 8013aea:	230d      	movs	r3, #13
 8013aec:	e06a      	b.n	8013bc4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af0:	f04f 32ff 	mov.w	r2, #4294967295
 8013af4:	611a      	str	r2, [r3, #16]
 8013af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af8:	691a      	ldr	r2, [r3, #16]
 8013afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b00:	2280      	movs	r2, #128	; 0x80
 8013b02:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b08:	2b03      	cmp	r3, #3
 8013b0a:	d149      	bne.n	8013ba0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0e:	3330      	adds	r3, #48	; 0x30
 8013b10:	3330      	adds	r3, #48	; 0x30
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7fe fbf6 	bl	8012304 <ld_word>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d140      	bne.n	8013ba0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b20:	3301      	adds	r3, #1
 8013b22:	4619      	mov	r1, r3
 8013b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b26:	f7fe fe9d 	bl	8012864 <move_window>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d137      	bne.n	8013ba0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b32:	2200      	movs	r2, #0
 8013b34:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b38:	3330      	adds	r3, #48	; 0x30
 8013b3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fe fbe0 	bl	8012304 <ld_word>
 8013b44:	4603      	mov	r3, r0
 8013b46:	461a      	mov	r2, r3
 8013b48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d127      	bne.n	8013ba0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b52:	3330      	adds	r3, #48	; 0x30
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7fe fbed 	bl	8012334 <ld_dword>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	4a1b      	ldr	r2, [pc, #108]	; (8013bcc <find_volume+0x48c>)
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d11e      	bne.n	8013ba0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b64:	3330      	adds	r3, #48	; 0x30
 8013b66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fe fbe2 	bl	8012334 <ld_dword>
 8013b70:	4603      	mov	r3, r0
 8013b72:	4a17      	ldr	r2, [pc, #92]	; (8013bd0 <find_volume+0x490>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d113      	bne.n	8013ba0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7a:	3330      	adds	r3, #48	; 0x30
 8013b7c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7fe fbd7 	bl	8012334 <ld_dword>
 8013b86:	4602      	mov	r2, r0
 8013b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b8a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b8e:	3330      	adds	r3, #48	; 0x30
 8013b90:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7fe fbcd 	bl	8012334 <ld_dword>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013ba6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013ba8:	4b0a      	ldr	r3, [pc, #40]	; (8013bd4 <find_volume+0x494>)
 8013baa:	881b      	ldrh	r3, [r3, #0]
 8013bac:	3301      	adds	r3, #1
 8013bae:	b29a      	uxth	r2, r3
 8013bb0:	4b08      	ldr	r3, [pc, #32]	; (8013bd4 <find_volume+0x494>)
 8013bb2:	801a      	strh	r2, [r3, #0]
 8013bb4:	4b07      	ldr	r3, [pc, #28]	; (8013bd4 <find_volume+0x494>)
 8013bb6:	881a      	ldrh	r2, [r3, #0]
 8013bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013bbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bbe:	f7fe fde9 	bl	8012794 <clear_lock>
#endif
	return FR_OK;
 8013bc2:	2300      	movs	r3, #0
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3758      	adds	r7, #88	; 0x58
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	41615252 	.word	0x41615252
 8013bd0:	61417272 	.word	0x61417272
 8013bd4:	20000954 	.word	0x20000954

08013bd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013be2:	2309      	movs	r3, #9
 8013be4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d01c      	beq.n	8013c26 <validate+0x4e>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d018      	beq.n	8013c26 <validate+0x4e>
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d013      	beq.n	8013c26 <validate+0x4e>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	889a      	ldrh	r2, [r3, #4]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	88db      	ldrh	r3, [r3, #6]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d10c      	bne.n	8013c26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	785b      	ldrb	r3, [r3, #1]
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fe fad8 	bl	80121c8 <disk_status>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	f003 0301 	and.w	r3, r3, #1
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d101      	bne.n	8013c26 <validate+0x4e>
			res = FR_OK;
 8013c22:	2300      	movs	r3, #0
 8013c24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c26:	7bfb      	ldrb	r3, [r7, #15]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d102      	bne.n	8013c32 <validate+0x5a>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	e000      	b.n	8013c34 <validate+0x5c>
 8013c32:	2300      	movs	r3, #0
 8013c34:	683a      	ldr	r2, [r7, #0]
 8013c36:	6013      	str	r3, [r2, #0]
	return res;
 8013c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3710      	adds	r7, #16
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
	...

08013c44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b088      	sub	sp, #32
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	4613      	mov	r3, r2
 8013c50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c56:	f107 0310 	add.w	r3, r7, #16
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7ff fcd5 	bl	801360a <get_ldnumber>
 8013c60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c62:	69fb      	ldr	r3, [r7, #28]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	da01      	bge.n	8013c6c <f_mount+0x28>
 8013c68:	230b      	movs	r3, #11
 8013c6a:	e02b      	b.n	8013cc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013c6c:	4a17      	ldr	r2, [pc, #92]	; (8013ccc <f_mount+0x88>)
 8013c6e:	69fb      	ldr	r3, [r7, #28]
 8013c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013c76:	69bb      	ldr	r3, [r7, #24]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d005      	beq.n	8013c88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013c7c:	69b8      	ldr	r0, [r7, #24]
 8013c7e:	f7fe fd89 	bl	8012794 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013c82:	69bb      	ldr	r3, [r7, #24]
 8013c84:	2200      	movs	r2, #0
 8013c86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d002      	beq.n	8013c94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2200      	movs	r2, #0
 8013c92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	490d      	ldr	r1, [pc, #52]	; (8013ccc <f_mount+0x88>)
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d002      	beq.n	8013caa <f_mount+0x66>
 8013ca4:	79fb      	ldrb	r3, [r7, #7]
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d001      	beq.n	8013cae <f_mount+0x6a>
 8013caa:	2300      	movs	r3, #0
 8013cac:	e00a      	b.n	8013cc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013cae:	f107 010c 	add.w	r1, r7, #12
 8013cb2:	f107 0308 	add.w	r3, r7, #8
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7ff fd41 	bl	8013740 <find_volume>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3720      	adds	r7, #32
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	20000950 	.word	0x20000950

08013cd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b098      	sub	sp, #96	; 0x60
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	60f8      	str	r0, [r7, #12]
 8013cd8:	60b9      	str	r1, [r7, #8]
 8013cda:	4613      	mov	r3, r2
 8013cdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d101      	bne.n	8013ce8 <f_open+0x18>
 8013ce4:	2309      	movs	r3, #9
 8013ce6:	e1ad      	b.n	8014044 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013ce8:	79fb      	ldrb	r3, [r7, #7]
 8013cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013cee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013cf0:	79fa      	ldrb	r2, [r7, #7]
 8013cf2:	f107 0110 	add.w	r1, r7, #16
 8013cf6:	f107 0308 	add.w	r3, r7, #8
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7ff fd20 	bl	8013740 <find_volume>
 8013d00:	4603      	mov	r3, r0
 8013d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	f040 8191 	bne.w	8014032 <f_open+0x362>
		dj.obj.fs = fs;
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	f107 0314 	add.w	r3, r7, #20
 8013d1a:	4611      	mov	r1, r2
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7ff fc03 	bl	8013528 <follow_path>
 8013d22:	4603      	mov	r3, r0
 8013d24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013d28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d11a      	bne.n	8013d66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013d30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013d34:	b25b      	sxtb	r3, r3
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	da03      	bge.n	8013d42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8013d3a:	2306      	movs	r3, #6
 8013d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013d40:	e011      	b.n	8013d66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013d42:	79fb      	ldrb	r3, [r7, #7]
 8013d44:	f023 0301 	bic.w	r3, r3, #1
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	bf14      	ite	ne
 8013d4c:	2301      	movne	r3, #1
 8013d4e:	2300      	moveq	r3, #0
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	461a      	mov	r2, r3
 8013d54:	f107 0314 	add.w	r3, r7, #20
 8013d58:	4611      	mov	r1, r2
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fe fbd2 	bl	8012504 <chk_lock>
 8013d60:	4603      	mov	r3, r0
 8013d62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d66:	79fb      	ldrb	r3, [r7, #7]
 8013d68:	f003 031c 	and.w	r3, r3, #28
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d07f      	beq.n	8013e70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d017      	beq.n	8013da8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013d78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d7c:	2b04      	cmp	r3, #4
 8013d7e:	d10e      	bne.n	8013d9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013d80:	f7fe fc1c 	bl	80125bc <enq_lock>
 8013d84:	4603      	mov	r3, r0
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d006      	beq.n	8013d98 <f_open+0xc8>
 8013d8a:	f107 0314 	add.w	r3, r7, #20
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7ff fb03 	bl	801339a <dir_register>
 8013d94:	4603      	mov	r3, r0
 8013d96:	e000      	b.n	8013d9a <f_open+0xca>
 8013d98:	2312      	movs	r3, #18
 8013d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013d9e:	79fb      	ldrb	r3, [r7, #7]
 8013da0:	f043 0308 	orr.w	r3, r3, #8
 8013da4:	71fb      	strb	r3, [r7, #7]
 8013da6:	e010      	b.n	8013dca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013da8:	7ebb      	ldrb	r3, [r7, #26]
 8013daa:	f003 0311 	and.w	r3, r3, #17
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d003      	beq.n	8013dba <f_open+0xea>
					res = FR_DENIED;
 8013db2:	2307      	movs	r3, #7
 8013db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013db8:	e007      	b.n	8013dca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013dba:	79fb      	ldrb	r3, [r7, #7]
 8013dbc:	f003 0304 	and.w	r3, r3, #4
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d002      	beq.n	8013dca <f_open+0xfa>
 8013dc4:	2308      	movs	r3, #8
 8013dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d168      	bne.n	8013ea4 <f_open+0x1d4>
 8013dd2:	79fb      	ldrb	r3, [r7, #7]
 8013dd4:	f003 0308 	and.w	r3, r3, #8
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d063      	beq.n	8013ea4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013ddc:	f7fe f92c 	bl	8012038 <get_fattime>
 8013de0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de4:	330e      	adds	r3, #14
 8013de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe fae1 	bl	80123b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df0:	3316      	adds	r3, #22
 8013df2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7fe fadb 	bl	80123b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dfc:	330b      	adds	r3, #11
 8013dfe:	2220      	movs	r2, #32
 8013e00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e06:	4611      	mov	r1, r2
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7ff fa32 	bl	8013272 <ld_clust>
 8013e0e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e14:	2200      	movs	r2, #0
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7ff fa4a 	bl	80132b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e1e:	331c      	adds	r3, #28
 8013e20:	2100      	movs	r1, #0
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7fe fac4 	bl	80123b0 <st_dword>
					fs->wflag = 1;
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d037      	beq.n	8013ea4 <f_open+0x1d4>
						dw = fs->winsect;
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e38:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013e3a:	f107 0314 	add.w	r3, r7, #20
 8013e3e:	2200      	movs	r2, #0
 8013e40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fe ff5d 	bl	8012d02 <remove_chain>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d126      	bne.n	8013ea4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fe fd02 	bl	8012864 <move_window>
 8013e60:	4603      	mov	r3, r0
 8013e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e6a:	3a01      	subs	r2, #1
 8013e6c:	60da      	str	r2, [r3, #12]
 8013e6e:	e019      	b.n	8013ea4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d115      	bne.n	8013ea4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013e78:	7ebb      	ldrb	r3, [r7, #26]
 8013e7a:	f003 0310 	and.w	r3, r3, #16
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d003      	beq.n	8013e8a <f_open+0x1ba>
					res = FR_NO_FILE;
 8013e82:	2304      	movs	r3, #4
 8013e84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e88:	e00c      	b.n	8013ea4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	f003 0302 	and.w	r3, r3, #2
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d007      	beq.n	8013ea4 <f_open+0x1d4>
 8013e94:	7ebb      	ldrb	r3, [r7, #26]
 8013e96:	f003 0301 	and.w	r3, r3, #1
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d002      	beq.n	8013ea4 <f_open+0x1d4>
						res = FR_DENIED;
 8013e9e:	2307      	movs	r3, #7
 8013ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d128      	bne.n	8013efe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013eac:	79fb      	ldrb	r3, [r7, #7]
 8013eae:	f003 0308 	and.w	r3, r3, #8
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d003      	beq.n	8013ebe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013eb6:	79fb      	ldrb	r3, [r7, #7]
 8013eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ebc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013ecc:	79fb      	ldrb	r3, [r7, #7]
 8013ece:	f023 0301 	bic.w	r3, r3, #1
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	bf14      	ite	ne
 8013ed6:	2301      	movne	r3, #1
 8013ed8:	2300      	moveq	r3, #0
 8013eda:	b2db      	uxtb	r3, r3
 8013edc:	461a      	mov	r2, r3
 8013ede:	f107 0314 	add.w	r3, r7, #20
 8013ee2:	4611      	mov	r1, r2
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fe fb8b 	bl	8012600 <inc_lock>
 8013eea:	4602      	mov	r2, r0
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	691b      	ldr	r3, [r3, #16]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d102      	bne.n	8013efe <f_open+0x22e>
 8013ef8:	2302      	movs	r3, #2
 8013efa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	f040 8095 	bne.w	8014032 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f0c:	4611      	mov	r1, r2
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7ff f9af 	bl	8013272 <ld_clust>
 8013f14:	4602      	mov	r2, r0
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f1c:	331c      	adds	r3, #28
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe fa08 	bl	8012334 <ld_dword>
 8013f24:	4602      	mov	r2, r0
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013f30:	693a      	ldr	r2, [r7, #16]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	88da      	ldrh	r2, [r3, #6]
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	79fa      	ldrb	r2, [r7, #7]
 8013f42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	2200      	movs	r2, #0
 8013f48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	2200      	movs	r2, #0
 8013f54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	3330      	adds	r3, #48	; 0x30
 8013f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f5e:	2100      	movs	r1, #0
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fe fa72 	bl	801244a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013f66:	79fb      	ldrb	r3, [r7, #7]
 8013f68:	f003 0320 	and.w	r3, r3, #32
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d060      	beq.n	8014032 <f_open+0x362>
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d05c      	beq.n	8014032 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	68da      	ldr	r2, [r3, #12]
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	895b      	ldrh	r3, [r3, #10]
 8013f84:	025b      	lsls	r3, r3, #9
 8013f86:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	657b      	str	r3, [r7, #84]	; 0x54
 8013f94:	e016      	b.n	8013fc4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fe fd1d 	bl	80129da <get_fat>
 8013fa0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fa4:	2b01      	cmp	r3, #1
 8013fa6:	d802      	bhi.n	8013fae <f_open+0x2de>
 8013fa8:	2302      	movs	r3, #2
 8013faa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fb4:	d102      	bne.n	8013fbc <f_open+0x2ec>
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013fbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fc0:	1ad3      	subs	r3, r2, r3
 8013fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8013fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d103      	bne.n	8013fd4 <f_open+0x304>
 8013fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d8e0      	bhi.n	8013f96 <f_open+0x2c6>
				}
				fp->clust = clst;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013fd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d127      	bne.n	8014032 <f_open+0x362>
 8013fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d022      	beq.n	8014032 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7fe fcd3 	bl	801299c <clust2sect>
 8013ff6:	6478      	str	r0, [r7, #68]	; 0x44
 8013ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d103      	bne.n	8014006 <f_open+0x336>
						res = FR_INT_ERR;
 8013ffe:	2302      	movs	r3, #2
 8014000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014004:	e015      	b.n	8014032 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014008:	0a5a      	lsrs	r2, r3, #9
 801400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801400c:	441a      	add	r2, r3
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	7858      	ldrb	r0, [r3, #1]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	6a1a      	ldr	r2, [r3, #32]
 8014020:	2301      	movs	r3, #1
 8014022:	f7fe f911 	bl	8012248 <disk_read>
 8014026:	4603      	mov	r3, r0
 8014028:	2b00      	cmp	r3, #0
 801402a:	d002      	beq.n	8014032 <f_open+0x362>
 801402c:	2301      	movs	r3, #1
 801402e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014036:	2b00      	cmp	r3, #0
 8014038:	d002      	beq.n	8014040 <f_open+0x370>
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2200      	movs	r2, #0
 801403e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014044:	4618      	mov	r0, r3
 8014046:	3760      	adds	r7, #96	; 0x60
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b08e      	sub	sp, #56	; 0x38
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	2200      	movs	r2, #0
 8014062:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f107 0214 	add.w	r2, r7, #20
 801406a:	4611      	mov	r1, r2
 801406c:	4618      	mov	r0, r3
 801406e:	f7ff fdb3 	bl	8013bd8 <validate>
 8014072:	4603      	mov	r3, r0
 8014074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801407c:	2b00      	cmp	r3, #0
 801407e:	d107      	bne.n	8014090 <f_read+0x44>
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	7d5b      	ldrb	r3, [r3, #21]
 8014084:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014088:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801408c:	2b00      	cmp	r3, #0
 801408e:	d002      	beq.n	8014096 <f_read+0x4a>
 8014090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014094:	e115      	b.n	80142c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	7d1b      	ldrb	r3, [r3, #20]
 801409a:	f003 0301 	and.w	r3, r3, #1
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d101      	bne.n	80140a6 <f_read+0x5a>
 80140a2:	2307      	movs	r3, #7
 80140a4:	e10d      	b.n	80142c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	68da      	ldr	r2, [r3, #12]
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	699b      	ldr	r3, [r3, #24]
 80140ae:	1ad3      	subs	r3, r2, r3
 80140b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	6a3b      	ldr	r3, [r7, #32]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	f240 80fe 	bls.w	80142b8 <f_read+0x26c>
 80140bc:	6a3b      	ldr	r3, [r7, #32]
 80140be:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80140c0:	e0fa      	b.n	80142b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	699b      	ldr	r3, [r3, #24]
 80140c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	f040 80c6 	bne.w	801425c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	699b      	ldr	r3, [r3, #24]
 80140d4:	0a5b      	lsrs	r3, r3, #9
 80140d6:	697a      	ldr	r2, [r7, #20]
 80140d8:	8952      	ldrh	r2, [r2, #10]
 80140da:	3a01      	subs	r2, #1
 80140dc:	4013      	ands	r3, r2
 80140de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d12f      	bne.n	8014146 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	699b      	ldr	r3, [r3, #24]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d103      	bne.n	80140f6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	689b      	ldr	r3, [r3, #8]
 80140f2:	633b      	str	r3, [r7, #48]	; 0x30
 80140f4:	e013      	b.n	801411e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d007      	beq.n	801410e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	699b      	ldr	r3, [r3, #24]
 8014102:	4619      	mov	r1, r3
 8014104:	68f8      	ldr	r0, [r7, #12]
 8014106:	f7fe fef9 	bl	8012efc <clmt_clust>
 801410a:	6338      	str	r0, [r7, #48]	; 0x30
 801410c:	e007      	b.n	801411e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	69db      	ldr	r3, [r3, #28]
 8014114:	4619      	mov	r1, r3
 8014116:	4610      	mov	r0, r2
 8014118:	f7fe fc5f 	bl	80129da <get_fat>
 801411c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014120:	2b01      	cmp	r3, #1
 8014122:	d804      	bhi.n	801412e <f_read+0xe2>
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	2202      	movs	r2, #2
 8014128:	755a      	strb	r2, [r3, #21]
 801412a:	2302      	movs	r3, #2
 801412c:	e0c9      	b.n	80142c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014134:	d104      	bne.n	8014140 <f_read+0xf4>
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2201      	movs	r2, #1
 801413a:	755a      	strb	r2, [r3, #21]
 801413c:	2301      	movs	r3, #1
 801413e:	e0c0      	b.n	80142c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014144:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014146:	697a      	ldr	r2, [r7, #20]
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	69db      	ldr	r3, [r3, #28]
 801414c:	4619      	mov	r1, r3
 801414e:	4610      	mov	r0, r2
 8014150:	f7fe fc24 	bl	801299c <clust2sect>
 8014154:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d104      	bne.n	8014166 <f_read+0x11a>
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2202      	movs	r2, #2
 8014160:	755a      	strb	r2, [r3, #21]
 8014162:	2302      	movs	r3, #2
 8014164:	e0ad      	b.n	80142c2 <f_read+0x276>
			sect += csect;
 8014166:	69ba      	ldr	r2, [r7, #24]
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	4413      	add	r3, r2
 801416c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	0a5b      	lsrs	r3, r3, #9
 8014172:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014176:	2b00      	cmp	r3, #0
 8014178:	d039      	beq.n	80141ee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801417a:	69fa      	ldr	r2, [r7, #28]
 801417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801417e:	4413      	add	r3, r2
 8014180:	697a      	ldr	r2, [r7, #20]
 8014182:	8952      	ldrh	r2, [r2, #10]
 8014184:	4293      	cmp	r3, r2
 8014186:	d905      	bls.n	8014194 <f_read+0x148>
					cc = fs->csize - csect;
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	895b      	ldrh	r3, [r3, #10]
 801418c:	461a      	mov	r2, r3
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	1ad3      	subs	r3, r2, r3
 8014192:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	7858      	ldrb	r0, [r3, #1]
 8014198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801419a:	69ba      	ldr	r2, [r7, #24]
 801419c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801419e:	f7fe f853 	bl	8012248 <disk_read>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d004      	beq.n	80141b2 <f_read+0x166>
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2201      	movs	r2, #1
 80141ac:	755a      	strb	r2, [r3, #21]
 80141ae:	2301      	movs	r3, #1
 80141b0:	e087      	b.n	80142c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	7d1b      	ldrb	r3, [r3, #20]
 80141b6:	b25b      	sxtb	r3, r3
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	da14      	bge.n	80141e6 <f_read+0x19a>
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	6a1a      	ldr	r2, [r3, #32]
 80141c0:	69bb      	ldr	r3, [r7, #24]
 80141c2:	1ad3      	subs	r3, r2, r3
 80141c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d90d      	bls.n	80141e6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6a1a      	ldr	r2, [r3, #32]
 80141ce:	69bb      	ldr	r3, [r7, #24]
 80141d0:	1ad3      	subs	r3, r2, r3
 80141d2:	025b      	lsls	r3, r3, #9
 80141d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141d6:	18d0      	adds	r0, r2, r3
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	3330      	adds	r3, #48	; 0x30
 80141dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141e0:	4619      	mov	r1, r3
 80141e2:	f7fe f911 	bl	8012408 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80141e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e8:	025b      	lsls	r3, r3, #9
 80141ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80141ec:	e050      	b.n	8014290 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	6a1b      	ldr	r3, [r3, #32]
 80141f2:	69ba      	ldr	r2, [r7, #24]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d02e      	beq.n	8014256 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	7d1b      	ldrb	r3, [r3, #20]
 80141fc:	b25b      	sxtb	r3, r3
 80141fe:	2b00      	cmp	r3, #0
 8014200:	da18      	bge.n	8014234 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	7858      	ldrb	r0, [r3, #1]
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	6a1a      	ldr	r2, [r3, #32]
 8014210:	2301      	movs	r3, #1
 8014212:	f7fe f839 	bl	8012288 <disk_write>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d004      	beq.n	8014226 <f_read+0x1da>
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	2201      	movs	r2, #1
 8014220:	755a      	strb	r2, [r3, #21]
 8014222:	2301      	movs	r3, #1
 8014224:	e04d      	b.n	80142c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	7d1b      	ldrb	r3, [r3, #20]
 801422a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801422e:	b2da      	uxtb	r2, r3
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	7858      	ldrb	r0, [r3, #1]
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801423e:	2301      	movs	r3, #1
 8014240:	69ba      	ldr	r2, [r7, #24]
 8014242:	f7fe f801 	bl	8012248 <disk_read>
 8014246:	4603      	mov	r3, r0
 8014248:	2b00      	cmp	r3, #0
 801424a:	d004      	beq.n	8014256 <f_read+0x20a>
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	2201      	movs	r2, #1
 8014250:	755a      	strb	r2, [r3, #21]
 8014252:	2301      	movs	r3, #1
 8014254:	e035      	b.n	80142c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	69ba      	ldr	r2, [r7, #24]
 801425a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	699b      	ldr	r3, [r3, #24]
 8014260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014264:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014268:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801426a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	429a      	cmp	r2, r3
 8014270:	d901      	bls.n	8014276 <f_read+0x22a>
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	699b      	ldr	r3, [r3, #24]
 8014280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014284:	4413      	add	r3, r2
 8014286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014288:	4619      	mov	r1, r3
 801428a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801428c:	f7fe f8bc 	bl	8012408 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014294:	4413      	add	r3, r2
 8014296:	627b      	str	r3, [r7, #36]	; 0x24
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	699a      	ldr	r2, [r3, #24]
 801429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429e:	441a      	add	r2, r3
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	619a      	str	r2, [r3, #24]
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142aa:	441a      	add	r2, r3
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	601a      	str	r2, [r3, #0]
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	1ad3      	subs	r3, r2, r3
 80142b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f47f af01 	bne.w	80140c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80142c0:	2300      	movs	r3, #0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3738      	adds	r7, #56	; 0x38
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}

080142ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80142ca:	b580      	push	{r7, lr}
 80142cc:	b08c      	sub	sp, #48	; 0x30
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	60f8      	str	r0, [r7, #12]
 80142d2:	60b9      	str	r1, [r7, #8]
 80142d4:	607a      	str	r2, [r7, #4]
 80142d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	2200      	movs	r2, #0
 80142e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f107 0210 	add.w	r2, r7, #16
 80142e8:	4611      	mov	r1, r2
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7ff fc74 	bl	8013bd8 <validate>
 80142f0:	4603      	mov	r3, r0
 80142f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80142f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d107      	bne.n	801430e <f_write+0x44>
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	7d5b      	ldrb	r3, [r3, #21]
 8014302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801430a:	2b00      	cmp	r3, #0
 801430c:	d002      	beq.n	8014314 <f_write+0x4a>
 801430e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014312:	e14b      	b.n	80145ac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	7d1b      	ldrb	r3, [r3, #20]
 8014318:	f003 0302 	and.w	r3, r3, #2
 801431c:	2b00      	cmp	r3, #0
 801431e:	d101      	bne.n	8014324 <f_write+0x5a>
 8014320:	2307      	movs	r3, #7
 8014322:	e143      	b.n	80145ac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	699a      	ldr	r2, [r3, #24]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	441a      	add	r2, r3
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	699b      	ldr	r3, [r3, #24]
 8014330:	429a      	cmp	r2, r3
 8014332:	f080 812d 	bcs.w	8014590 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	699b      	ldr	r3, [r3, #24]
 801433a:	43db      	mvns	r3, r3
 801433c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801433e:	e127      	b.n	8014590 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	699b      	ldr	r3, [r3, #24]
 8014344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014348:	2b00      	cmp	r3, #0
 801434a:	f040 80e3 	bne.w	8014514 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	699b      	ldr	r3, [r3, #24]
 8014352:	0a5b      	lsrs	r3, r3, #9
 8014354:	693a      	ldr	r2, [r7, #16]
 8014356:	8952      	ldrh	r2, [r2, #10]
 8014358:	3a01      	subs	r2, #1
 801435a:	4013      	ands	r3, r2
 801435c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801435e:	69bb      	ldr	r3, [r7, #24]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d143      	bne.n	80143ec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	699b      	ldr	r3, [r3, #24]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10c      	bne.n	8014386 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	689b      	ldr	r3, [r3, #8]
 8014370:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014374:	2b00      	cmp	r3, #0
 8014376:	d11a      	bne.n	80143ae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	2100      	movs	r1, #0
 801437c:	4618      	mov	r0, r3
 801437e:	f7fe fd25 	bl	8012dcc <create_chain>
 8014382:	62b8      	str	r0, [r7, #40]	; 0x28
 8014384:	e013      	b.n	80143ae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801438a:	2b00      	cmp	r3, #0
 801438c:	d007      	beq.n	801439e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	699b      	ldr	r3, [r3, #24]
 8014392:	4619      	mov	r1, r3
 8014394:	68f8      	ldr	r0, [r7, #12]
 8014396:	f7fe fdb1 	bl	8012efc <clmt_clust>
 801439a:	62b8      	str	r0, [r7, #40]	; 0x28
 801439c:	e007      	b.n	80143ae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801439e:	68fa      	ldr	r2, [r7, #12]
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	69db      	ldr	r3, [r3, #28]
 80143a4:	4619      	mov	r1, r3
 80143a6:	4610      	mov	r0, r2
 80143a8:	f7fe fd10 	bl	8012dcc <create_chain>
 80143ac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80143ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	f000 80f2 	beq.w	801459a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80143b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d104      	bne.n	80143c6 <f_write+0xfc>
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	2202      	movs	r2, #2
 80143c0:	755a      	strb	r2, [r3, #21]
 80143c2:	2302      	movs	r3, #2
 80143c4:	e0f2      	b.n	80145ac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143cc:	d104      	bne.n	80143d8 <f_write+0x10e>
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2201      	movs	r2, #1
 80143d2:	755a      	strb	r2, [r3, #21]
 80143d4:	2301      	movs	r3, #1
 80143d6:	e0e9      	b.n	80145ac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	689b      	ldr	r3, [r3, #8]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d102      	bne.n	80143ec <f_write+0x122>
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	7d1b      	ldrb	r3, [r3, #20]
 80143f0:	b25b      	sxtb	r3, r3
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	da18      	bge.n	8014428 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	7858      	ldrb	r0, [r3, #1]
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	6a1a      	ldr	r2, [r3, #32]
 8014404:	2301      	movs	r3, #1
 8014406:	f7fd ff3f 	bl	8012288 <disk_write>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d004      	beq.n	801441a <f_write+0x150>
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	2201      	movs	r2, #1
 8014414:	755a      	strb	r2, [r3, #21]
 8014416:	2301      	movs	r3, #1
 8014418:	e0c8      	b.n	80145ac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	7d1b      	ldrb	r3, [r3, #20]
 801441e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014422:	b2da      	uxtb	r2, r3
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014428:	693a      	ldr	r2, [r7, #16]
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	69db      	ldr	r3, [r3, #28]
 801442e:	4619      	mov	r1, r3
 8014430:	4610      	mov	r0, r2
 8014432:	f7fe fab3 	bl	801299c <clust2sect>
 8014436:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d104      	bne.n	8014448 <f_write+0x17e>
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	2202      	movs	r2, #2
 8014442:	755a      	strb	r2, [r3, #21]
 8014444:	2302      	movs	r3, #2
 8014446:	e0b1      	b.n	80145ac <f_write+0x2e2>
			sect += csect;
 8014448:	697a      	ldr	r2, [r7, #20]
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	4413      	add	r3, r2
 801444e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	0a5b      	lsrs	r3, r3, #9
 8014454:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014456:	6a3b      	ldr	r3, [r7, #32]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d03c      	beq.n	80144d6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801445c:	69ba      	ldr	r2, [r7, #24]
 801445e:	6a3b      	ldr	r3, [r7, #32]
 8014460:	4413      	add	r3, r2
 8014462:	693a      	ldr	r2, [r7, #16]
 8014464:	8952      	ldrh	r2, [r2, #10]
 8014466:	4293      	cmp	r3, r2
 8014468:	d905      	bls.n	8014476 <f_write+0x1ac>
					cc = fs->csize - csect;
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	895b      	ldrh	r3, [r3, #10]
 801446e:	461a      	mov	r2, r3
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	1ad3      	subs	r3, r2, r3
 8014474:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	7858      	ldrb	r0, [r3, #1]
 801447a:	6a3b      	ldr	r3, [r7, #32]
 801447c:	697a      	ldr	r2, [r7, #20]
 801447e:	69f9      	ldr	r1, [r7, #28]
 8014480:	f7fd ff02 	bl	8012288 <disk_write>
 8014484:	4603      	mov	r3, r0
 8014486:	2b00      	cmp	r3, #0
 8014488:	d004      	beq.n	8014494 <f_write+0x1ca>
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2201      	movs	r2, #1
 801448e:	755a      	strb	r2, [r3, #21]
 8014490:	2301      	movs	r3, #1
 8014492:	e08b      	b.n	80145ac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	6a1a      	ldr	r2, [r3, #32]
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	6a3a      	ldr	r2, [r7, #32]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d915      	bls.n	80144ce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6a1a      	ldr	r2, [r3, #32]
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	1ad3      	subs	r3, r2, r3
 80144b0:	025b      	lsls	r3, r3, #9
 80144b2:	69fa      	ldr	r2, [r7, #28]
 80144b4:	4413      	add	r3, r2
 80144b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144ba:	4619      	mov	r1, r3
 80144bc:	f7fd ffa4 	bl	8012408 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	7d1b      	ldrb	r3, [r3, #20]
 80144c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144c8:	b2da      	uxtb	r2, r3
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	025b      	lsls	r3, r3, #9
 80144d2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80144d4:	e03f      	b.n	8014556 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	6a1b      	ldr	r3, [r3, #32]
 80144da:	697a      	ldr	r2, [r7, #20]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d016      	beq.n	801450e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	699a      	ldr	r2, [r3, #24]
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d210      	bcs.n	801450e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	7858      	ldrb	r0, [r3, #1]
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144f6:	2301      	movs	r3, #1
 80144f8:	697a      	ldr	r2, [r7, #20]
 80144fa:	f7fd fea5 	bl	8012248 <disk_read>
 80144fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014500:	2b00      	cmp	r3, #0
 8014502:	d004      	beq.n	801450e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2201      	movs	r2, #1
 8014508:	755a      	strb	r2, [r3, #21]
 801450a:	2301      	movs	r3, #1
 801450c:	e04e      	b.n	80145ac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	697a      	ldr	r2, [r7, #20]
 8014512:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	699b      	ldr	r3, [r3, #24]
 8014518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801451c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014520:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	429a      	cmp	r2, r3
 8014528:	d901      	bls.n	801452e <f_write+0x264>
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	699b      	ldr	r3, [r3, #24]
 8014538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801453c:	4413      	add	r3, r2
 801453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014540:	69f9      	ldr	r1, [r7, #28]
 8014542:	4618      	mov	r0, r3
 8014544:	f7fd ff60 	bl	8012408 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	7d1b      	ldrb	r3, [r3, #20]
 801454c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014550:	b2da      	uxtb	r2, r3
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014556:	69fa      	ldr	r2, [r7, #28]
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	4413      	add	r3, r2
 801455c:	61fb      	str	r3, [r7, #28]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	699a      	ldr	r2, [r3, #24]
 8014562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014564:	441a      	add	r2, r3
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	619a      	str	r2, [r3, #24]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	68da      	ldr	r2, [r3, #12]
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	699b      	ldr	r3, [r3, #24]
 8014572:	429a      	cmp	r2, r3
 8014574:	bf38      	it	cc
 8014576:	461a      	movcc	r2, r3
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	60da      	str	r2, [r3, #12]
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014582:	441a      	add	r2, r3
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	601a      	str	r2, [r3, #0]
 8014588:	687a      	ldr	r2, [r7, #4]
 801458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458c:	1ad3      	subs	r3, r2, r3
 801458e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	f47f aed4 	bne.w	8014340 <f_write+0x76>
 8014598:	e000      	b.n	801459c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801459a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	7d1b      	ldrb	r3, [r3, #20]
 80145a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145a4:	b2da      	uxtb	r2, r3
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80145aa:	2300      	movs	r3, #0
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3730      	adds	r7, #48	; 0x30
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b086      	sub	sp, #24
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f107 0208 	add.w	r2, r7, #8
 80145c2:	4611      	mov	r1, r2
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7ff fb07 	bl	8013bd8 <validate>
 80145ca:	4603      	mov	r3, r0
 80145cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80145ce:	7dfb      	ldrb	r3, [r7, #23]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d168      	bne.n	80146a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	7d1b      	ldrb	r3, [r3, #20]
 80145d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d062      	beq.n	80146a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	7d1b      	ldrb	r3, [r3, #20]
 80145e4:	b25b      	sxtb	r3, r3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	da15      	bge.n	8014616 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	7858      	ldrb	r0, [r3, #1]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6a1a      	ldr	r2, [r3, #32]
 80145f8:	2301      	movs	r3, #1
 80145fa:	f7fd fe45 	bl	8012288 <disk_write>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	d001      	beq.n	8014608 <f_sync+0x54>
 8014604:	2301      	movs	r3, #1
 8014606:	e04f      	b.n	80146a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	7d1b      	ldrb	r3, [r3, #20]
 801460c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014610:	b2da      	uxtb	r2, r3
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014616:	f7fd fd0f 	bl	8012038 <get_fattime>
 801461a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801461c:	68ba      	ldr	r2, [r7, #8]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014622:	4619      	mov	r1, r3
 8014624:	4610      	mov	r0, r2
 8014626:	f7fe f91d 	bl	8012864 <move_window>
 801462a:	4603      	mov	r3, r0
 801462c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801462e:	7dfb      	ldrb	r3, [r7, #23]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d138      	bne.n	80146a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014638:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	330b      	adds	r3, #11
 801463e:	781a      	ldrb	r2, [r3, #0]
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	330b      	adds	r3, #11
 8014644:	f042 0220 	orr.w	r2, r2, #32
 8014648:	b2d2      	uxtb	r2, r2
 801464a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6818      	ldr	r0, [r3, #0]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	461a      	mov	r2, r3
 8014656:	68f9      	ldr	r1, [r7, #12]
 8014658:	f7fe fe2a 	bl	80132b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f103 021c 	add.w	r2, r3, #28
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	4619      	mov	r1, r3
 8014668:	4610      	mov	r0, r2
 801466a:	f7fd fea1 	bl	80123b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	3316      	adds	r3, #22
 8014672:	6939      	ldr	r1, [r7, #16]
 8014674:	4618      	mov	r0, r3
 8014676:	f7fd fe9b 	bl	80123b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	3312      	adds	r3, #18
 801467e:	2100      	movs	r1, #0
 8014680:	4618      	mov	r0, r3
 8014682:	f7fd fe7a 	bl	801237a <st_word>
					fs->wflag = 1;
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	2201      	movs	r2, #1
 801468a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	4618      	mov	r0, r3
 8014690:	f7fe f916 	bl	80128c0 <sync_fs>
 8014694:	4603      	mov	r3, r0
 8014696:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	7d1b      	ldrb	r3, [r3, #20]
 801469c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146a0:	b2da      	uxtb	r2, r3
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80146a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3718      	adds	r7, #24
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f7ff ff7b 	bl	80145b4 <f_sync>
 80146be:	4603      	mov	r3, r0
 80146c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80146c2:	7bfb      	ldrb	r3, [r7, #15]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d118      	bne.n	80146fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f107 0208 	add.w	r2, r7, #8
 80146ce:	4611      	mov	r1, r2
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7ff fa81 	bl	8013bd8 <validate>
 80146d6:	4603      	mov	r3, r0
 80146d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80146da:	7bfb      	ldrb	r3, [r7, #15]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d10c      	bne.n	80146fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	691b      	ldr	r3, [r3, #16]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7fe f819 	bl	801271c <dec_lock>
 80146ea:	4603      	mov	r3, r0
 80146ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80146ee:	7bfb      	ldrb	r3, [r7, #15]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d102      	bne.n	80146fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2200      	movs	r2, #0
 80146f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80146fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3710      	adds	r7, #16
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b090      	sub	sp, #64	; 0x40
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f107 0208 	add.w	r2, r7, #8
 8014714:	4611      	mov	r1, r2
 8014716:	4618      	mov	r0, r3
 8014718:	f7ff fa5e 	bl	8013bd8 <validate>
 801471c:	4603      	mov	r3, r0
 801471e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014722:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014726:	2b00      	cmp	r3, #0
 8014728:	d103      	bne.n	8014732 <f_lseek+0x2e>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	7d5b      	ldrb	r3, [r3, #21]
 801472e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014732:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014736:	2b00      	cmp	r3, #0
 8014738:	d002      	beq.n	8014740 <f_lseek+0x3c>
 801473a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801473e:	e1e6      	b.n	8014b0e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014744:	2b00      	cmp	r3, #0
 8014746:	f000 80d1 	beq.w	80148ec <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014750:	d15a      	bne.n	8014808 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014756:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475a:	1d1a      	adds	r2, r3, #4
 801475c:	627a      	str	r2, [r7, #36]	; 0x24
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	617b      	str	r3, [r7, #20]
 8014762:	2302      	movs	r3, #2
 8014764:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801476e:	2b00      	cmp	r3, #0
 8014770:	d03a      	beq.n	80147e8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014774:	613b      	str	r3, [r7, #16]
 8014776:	2300      	movs	r3, #0
 8014778:	62fb      	str	r3, [r7, #44]	; 0x2c
 801477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477c:	3302      	adds	r3, #2
 801477e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014782:	60fb      	str	r3, [r7, #12]
 8014784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014786:	3301      	adds	r3, #1
 8014788:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801478e:	4618      	mov	r0, r3
 8014790:	f7fe f923 	bl	80129da <get_fat>
 8014794:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014798:	2b01      	cmp	r3, #1
 801479a:	d804      	bhi.n	80147a6 <f_lseek+0xa2>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2202      	movs	r2, #2
 80147a0:	755a      	strb	r2, [r3, #21]
 80147a2:	2302      	movs	r3, #2
 80147a4:	e1b3      	b.n	8014b0e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80147a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ac:	d104      	bne.n	80147b8 <f_lseek+0xb4>
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2201      	movs	r2, #1
 80147b2:	755a      	strb	r2, [r3, #21]
 80147b4:	2301      	movs	r3, #1
 80147b6:	e1aa      	b.n	8014b0e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	3301      	adds	r3, #1
 80147bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147be:	429a      	cmp	r2, r3
 80147c0:	d0de      	beq.n	8014780 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80147c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d809      	bhi.n	80147de <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80147ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147cc:	1d1a      	adds	r2, r3, #4
 80147ce:	627a      	str	r2, [r7, #36]	; 0x24
 80147d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147d2:	601a      	str	r2, [r3, #0]
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	1d1a      	adds	r2, r3, #4
 80147d8:	627a      	str	r2, [r7, #36]	; 0x24
 80147da:	693a      	ldr	r2, [r7, #16]
 80147dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	695b      	ldr	r3, [r3, #20]
 80147e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d3c4      	bcc.n	8014772 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80147f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d803      	bhi.n	8014800 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80147f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fa:	2200      	movs	r2, #0
 80147fc:	601a      	str	r2, [r3, #0]
 80147fe:	e184      	b.n	8014b0a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014800:	2311      	movs	r3, #17
 8014802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014806:	e180      	b.n	8014b0a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	68db      	ldr	r3, [r3, #12]
 801480c:	683a      	ldr	r2, [r7, #0]
 801480e:	429a      	cmp	r2, r3
 8014810:	d902      	bls.n	8014818 <f_lseek+0x114>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	683a      	ldr	r2, [r7, #0]
 801481c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	f000 8172 	beq.w	8014b0a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	3b01      	subs	r3, #1
 801482a:	4619      	mov	r1, r3
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7fe fb65 	bl	8012efc <clmt_clust>
 8014832:	4602      	mov	r2, r0
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014838:	68ba      	ldr	r2, [r7, #8]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	69db      	ldr	r3, [r3, #28]
 801483e:	4619      	mov	r1, r3
 8014840:	4610      	mov	r0, r2
 8014842:	f7fe f8ab 	bl	801299c <clust2sect>
 8014846:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014848:	69bb      	ldr	r3, [r7, #24]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d104      	bne.n	8014858 <f_lseek+0x154>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2202      	movs	r2, #2
 8014852:	755a      	strb	r2, [r3, #21]
 8014854:	2302      	movs	r3, #2
 8014856:	e15a      	b.n	8014b0e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	3b01      	subs	r3, #1
 801485c:	0a5b      	lsrs	r3, r3, #9
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	8952      	ldrh	r2, [r2, #10]
 8014862:	3a01      	subs	r2, #1
 8014864:	4013      	ands	r3, r2
 8014866:	69ba      	ldr	r2, [r7, #24]
 8014868:	4413      	add	r3, r2
 801486a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	699b      	ldr	r3, [r3, #24]
 8014870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014874:	2b00      	cmp	r3, #0
 8014876:	f000 8148 	beq.w	8014b0a <f_lseek+0x406>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	6a1b      	ldr	r3, [r3, #32]
 801487e:	69ba      	ldr	r2, [r7, #24]
 8014880:	429a      	cmp	r2, r3
 8014882:	f000 8142 	beq.w	8014b0a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	7d1b      	ldrb	r3, [r3, #20]
 801488a:	b25b      	sxtb	r3, r3
 801488c:	2b00      	cmp	r3, #0
 801488e:	da18      	bge.n	80148c2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	7858      	ldrb	r0, [r3, #1]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	6a1a      	ldr	r2, [r3, #32]
 801489e:	2301      	movs	r3, #1
 80148a0:	f7fd fcf2 	bl	8012288 <disk_write>
 80148a4:	4603      	mov	r3, r0
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d004      	beq.n	80148b4 <f_lseek+0x1b0>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2201      	movs	r2, #1
 80148ae:	755a      	strb	r2, [r3, #21]
 80148b0:	2301      	movs	r3, #1
 80148b2:	e12c      	b.n	8014b0e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	7d1b      	ldrb	r3, [r3, #20]
 80148b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148bc:	b2da      	uxtb	r2, r3
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	7858      	ldrb	r0, [r3, #1]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148cc:	2301      	movs	r3, #1
 80148ce:	69ba      	ldr	r2, [r7, #24]
 80148d0:	f7fd fcba 	bl	8012248 <disk_read>
 80148d4:	4603      	mov	r3, r0
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d004      	beq.n	80148e4 <f_lseek+0x1e0>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2201      	movs	r2, #1
 80148de:	755a      	strb	r2, [r3, #21]
 80148e0:	2301      	movs	r3, #1
 80148e2:	e114      	b.n	8014b0e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	69ba      	ldr	r2, [r7, #24]
 80148e8:	621a      	str	r2, [r3, #32]
 80148ea:	e10e      	b.n	8014b0a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	683a      	ldr	r2, [r7, #0]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d908      	bls.n	8014908 <f_lseek+0x204>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	7d1b      	ldrb	r3, [r3, #20]
 80148fa:	f003 0302 	and.w	r3, r3, #2
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d102      	bne.n	8014908 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	68db      	ldr	r3, [r3, #12]
 8014906:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	699b      	ldr	r3, [r3, #24]
 801490c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801490e:	2300      	movs	r3, #0
 8014910:	637b      	str	r3, [r7, #52]	; 0x34
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014916:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	2b00      	cmp	r3, #0
 801491c:	f000 80a7 	beq.w	8014a6e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	895b      	ldrh	r3, [r3, #10]
 8014924:	025b      	lsls	r3, r3, #9
 8014926:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014928:	6a3b      	ldr	r3, [r7, #32]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d01b      	beq.n	8014966 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	1e5a      	subs	r2, r3, #1
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	fbb2 f2f3 	udiv	r2, r2, r3
 8014938:	6a3b      	ldr	r3, [r7, #32]
 801493a:	1e59      	subs	r1, r3, #1
 801493c:	69fb      	ldr	r3, [r7, #28]
 801493e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014942:	429a      	cmp	r2, r3
 8014944:	d30f      	bcc.n	8014966 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014946:	6a3b      	ldr	r3, [r7, #32]
 8014948:	1e5a      	subs	r2, r3, #1
 801494a:	69fb      	ldr	r3, [r7, #28]
 801494c:	425b      	negs	r3, r3
 801494e:	401a      	ands	r2, r3
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	699b      	ldr	r3, [r3, #24]
 8014958:	683a      	ldr	r2, [r7, #0]
 801495a:	1ad3      	subs	r3, r2, r3
 801495c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	69db      	ldr	r3, [r3, #28]
 8014962:	63bb      	str	r3, [r7, #56]	; 0x38
 8014964:	e022      	b.n	80149ac <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	689b      	ldr	r3, [r3, #8]
 801496a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801496e:	2b00      	cmp	r3, #0
 8014970:	d119      	bne.n	80149a6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	2100      	movs	r1, #0
 8014976:	4618      	mov	r0, r3
 8014978:	f7fe fa28 	bl	8012dcc <create_chain>
 801497c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014980:	2b01      	cmp	r3, #1
 8014982:	d104      	bne.n	801498e <f_lseek+0x28a>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2202      	movs	r2, #2
 8014988:	755a      	strb	r2, [r3, #21]
 801498a:	2302      	movs	r3, #2
 801498c:	e0bf      	b.n	8014b0e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014994:	d104      	bne.n	80149a0 <f_lseek+0x29c>
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2201      	movs	r2, #1
 801499a:	755a      	strb	r2, [r3, #21]
 801499c:	2301      	movs	r3, #1
 801499e:	e0b6      	b.n	8014b0e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149a4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149aa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80149ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d05d      	beq.n	8014a6e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80149b2:	e03a      	b.n	8014a2a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80149b4:	683a      	ldr	r2, [r7, #0]
 80149b6:	69fb      	ldr	r3, [r7, #28]
 80149b8:	1ad3      	subs	r3, r2, r3
 80149ba:	603b      	str	r3, [r7, #0]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	699a      	ldr	r2, [r3, #24]
 80149c0:	69fb      	ldr	r3, [r7, #28]
 80149c2:	441a      	add	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	7d1b      	ldrb	r3, [r3, #20]
 80149cc:	f003 0302 	and.w	r3, r3, #2
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d00b      	beq.n	80149ec <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fe f9f7 	bl	8012dcc <create_chain>
 80149de:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80149e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d108      	bne.n	80149f8 <f_lseek+0x2f4>
							ofs = 0; break;
 80149e6:	2300      	movs	r3, #0
 80149e8:	603b      	str	r3, [r7, #0]
 80149ea:	e022      	b.n	8014a32 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fd fff2 	bl	80129da <get_fat>
 80149f6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80149f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149fe:	d104      	bne.n	8014a0a <f_lseek+0x306>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2201      	movs	r2, #1
 8014a04:	755a      	strb	r2, [r3, #21]
 8014a06:	2301      	movs	r3, #1
 8014a08:	e081      	b.n	8014b0e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d904      	bls.n	8014a1a <f_lseek+0x316>
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	695b      	ldr	r3, [r3, #20]
 8014a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a16:	429a      	cmp	r2, r3
 8014a18:	d304      	bcc.n	8014a24 <f_lseek+0x320>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2202      	movs	r2, #2
 8014a1e:	755a      	strb	r2, [r3, #21]
 8014a20:	2302      	movs	r3, #2
 8014a22:	e074      	b.n	8014b0e <f_lseek+0x40a>
					fp->clust = clst;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a28:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d8c0      	bhi.n	80149b4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	699a      	ldr	r2, [r3, #24]
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	441a      	add	r2, r3
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d012      	beq.n	8014a6e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7fd ffa5 	bl	801299c <clust2sect>
 8014a52:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d104      	bne.n	8014a64 <f_lseek+0x360>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2202      	movs	r2, #2
 8014a5e:	755a      	strb	r2, [r3, #21]
 8014a60:	2302      	movs	r3, #2
 8014a62:	e054      	b.n	8014b0e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	0a5b      	lsrs	r3, r3, #9
 8014a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a6a:	4413      	add	r3, r2
 8014a6c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	699a      	ldr	r2, [r3, #24]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	68db      	ldr	r3, [r3, #12]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d90a      	bls.n	8014a90 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	699a      	ldr	r2, [r3, #24]
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	7d1b      	ldrb	r3, [r3, #20]
 8014a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a8a:	b2da      	uxtb	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	699b      	ldr	r3, [r3, #24]
 8014a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d036      	beq.n	8014b0a <f_lseek+0x406>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6a1b      	ldr	r3, [r3, #32]
 8014aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d031      	beq.n	8014b0a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	7d1b      	ldrb	r3, [r3, #20]
 8014aaa:	b25b      	sxtb	r3, r3
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	da18      	bge.n	8014ae2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	7858      	ldrb	r0, [r3, #1]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6a1a      	ldr	r2, [r3, #32]
 8014abe:	2301      	movs	r3, #1
 8014ac0:	f7fd fbe2 	bl	8012288 <disk_write>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d004      	beq.n	8014ad4 <f_lseek+0x3d0>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2201      	movs	r2, #1
 8014ace:	755a      	strb	r2, [r3, #21]
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	e01c      	b.n	8014b0e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	7d1b      	ldrb	r3, [r3, #20]
 8014ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014adc:	b2da      	uxtb	r2, r3
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	7858      	ldrb	r0, [r3, #1]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014aec:	2301      	movs	r3, #1
 8014aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014af0:	f7fd fbaa 	bl	8012248 <disk_read>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d004      	beq.n	8014b04 <f_lseek+0x400>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2201      	movs	r2, #1
 8014afe:	755a      	strb	r2, [r3, #21]
 8014b00:	2301      	movs	r3, #1
 8014b02:	e004      	b.n	8014b0e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b08:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3740      	adds	r7, #64	; 0x40
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
	...

08014b18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b087      	sub	sp, #28
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	4613      	mov	r3, r2
 8014b24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014b26:	2301      	movs	r3, #1
 8014b28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014b2e:	4b1f      	ldr	r3, [pc, #124]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b30:	7a5b      	ldrb	r3, [r3, #9]
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d131      	bne.n	8014b9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014b38:	4b1c      	ldr	r3, [pc, #112]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b3a:	7a5b      	ldrb	r3, [r3, #9]
 8014b3c:	b2db      	uxtb	r3, r3
 8014b3e:	461a      	mov	r2, r3
 8014b40:	4b1a      	ldr	r3, [pc, #104]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b42:	2100      	movs	r1, #0
 8014b44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014b46:	4b19      	ldr	r3, [pc, #100]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b48:	7a5b      	ldrb	r3, [r3, #9]
 8014b4a:	b2db      	uxtb	r3, r3
 8014b4c:	4a17      	ldr	r2, [pc, #92]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b4e:	009b      	lsls	r3, r3, #2
 8014b50:	4413      	add	r3, r2
 8014b52:	68fa      	ldr	r2, [r7, #12]
 8014b54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014b56:	4b15      	ldr	r3, [pc, #84]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b58:	7a5b      	ldrb	r3, [r3, #9]
 8014b5a:	b2db      	uxtb	r3, r3
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	4b13      	ldr	r3, [pc, #76]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b60:	4413      	add	r3, r2
 8014b62:	79fa      	ldrb	r2, [r7, #7]
 8014b64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014b66:	4b11      	ldr	r3, [pc, #68]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b68:	7a5b      	ldrb	r3, [r3, #9]
 8014b6a:	b2db      	uxtb	r3, r3
 8014b6c:	1c5a      	adds	r2, r3, #1
 8014b6e:	b2d1      	uxtb	r1, r2
 8014b70:	4a0e      	ldr	r2, [pc, #56]	; (8014bac <FATFS_LinkDriverEx+0x94>)
 8014b72:	7251      	strb	r1, [r2, #9]
 8014b74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014b76:	7dbb      	ldrb	r3, [r7, #22]
 8014b78:	3330      	adds	r3, #48	; 0x30
 8014b7a:	b2da      	uxtb	r2, r3
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	3301      	adds	r3, #1
 8014b84:	223a      	movs	r2, #58	; 0x3a
 8014b86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	3302      	adds	r3, #2
 8014b8c:	222f      	movs	r2, #47	; 0x2f
 8014b8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	3303      	adds	r3, #3
 8014b94:	2200      	movs	r2, #0
 8014b96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	371c      	adds	r7, #28
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr
 8014baa:	bf00      	nop
 8014bac:	20000978 	.word	0x20000978

08014bb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014bba:	2200      	movs	r2, #0
 8014bbc:	6839      	ldr	r1, [r7, #0]
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f7ff ffaa 	bl	8014b18 <FATFS_LinkDriverEx>
 8014bc4:	4603      	mov	r3, r0
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3708      	adds	r7, #8
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}

08014bce <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014bce:	b580      	push	{r7, lr}
 8014bd0:	b086      	sub	sp, #24
 8014bd2:	af02      	add	r7, sp, #8
 8014bd4:	60f8      	str	r0, [r7, #12]
 8014bd6:	4608      	mov	r0, r1
 8014bd8:	4611      	mov	r1, r2
 8014bda:	461a      	mov	r2, r3
 8014bdc:	4603      	mov	r3, r0
 8014bde:	817b      	strh	r3, [r7, #10]
 8014be0:	460b      	mov	r3, r1
 8014be2:	813b      	strh	r3, [r7, #8]
 8014be4:	4613      	mov	r3, r2
 8014be6:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014be8:	897a      	ldrh	r2, [r7, #10]
 8014bea:	88fb      	ldrh	r3, [r7, #6]
 8014bec:	4413      	add	r3, r2
 8014bee:	b298      	uxth	r0, r3
 8014bf0:	893a      	ldrh	r2, [r7, #8]
 8014bf2:	8b3b      	ldrh	r3, [r7, #24]
 8014bf4:	4413      	add	r3, r2
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	893a      	ldrh	r2, [r7, #8]
 8014bfa:	8979      	ldrh	r1, [r7, #10]
 8014bfc:	9300      	str	r3, [sp, #0]
 8014bfe:	4603      	mov	r3, r0
 8014c00:	68f8      	ldr	r0, [r7, #12]
 8014c02:	f001 f8a1 	bl	8015d48 <u8g2_IsIntersection>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d012      	beq.n	8014c32 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8014c0c:	e00d      	b.n	8014c2a <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c0e:	88fb      	ldrh	r3, [r7, #6]
 8014c10:	893a      	ldrh	r2, [r7, #8]
 8014c12:	8979      	ldrh	r1, [r7, #10]
 8014c14:	2000      	movs	r0, #0
 8014c16:	9000      	str	r0, [sp, #0]
 8014c18:	68f8      	ldr	r0, [r7, #12]
 8014c1a:	f000 ffa4 	bl	8015b66 <u8g2_DrawHVLine>
    y++;    
 8014c1e:	893b      	ldrh	r3, [r7, #8]
 8014c20:	3301      	adds	r3, #1
 8014c22:	813b      	strh	r3, [r7, #8]
    h--;
 8014c24:	8b3b      	ldrh	r3, [r7, #24]
 8014c26:	3b01      	subs	r3, #1
 8014c28:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8014c2a:	8b3b      	ldrh	r3, [r7, #24]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d1ee      	bne.n	8014c0e <u8g2_DrawBox+0x40>
 8014c30:	e000      	b.n	8014c34 <u8g2_DrawBox+0x66>
    return;
 8014c32:	bf00      	nop
  }
}
 8014c34:	3710      	adds	r7, #16
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}

08014c3a <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014c3a:	b580      	push	{r7, lr}
 8014c3c:	b088      	sub	sp, #32
 8014c3e:	af02      	add	r7, sp, #8
 8014c40:	60f8      	str	r0, [r7, #12]
 8014c42:	4608      	mov	r0, r1
 8014c44:	4611      	mov	r1, r2
 8014c46:	461a      	mov	r2, r3
 8014c48:	4603      	mov	r3, r0
 8014c4a:	817b      	strh	r3, [r7, #10]
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	813b      	strh	r3, [r7, #8]
 8014c50:	4613      	mov	r3, r2
 8014c52:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8014c54:	897b      	ldrh	r3, [r7, #10]
 8014c56:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014c58:	897a      	ldrh	r2, [r7, #10]
 8014c5a:	88fb      	ldrh	r3, [r7, #6]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	b298      	uxth	r0, r3
 8014c60:	893a      	ldrh	r2, [r7, #8]
 8014c62:	8c3b      	ldrh	r3, [r7, #32]
 8014c64:	4413      	add	r3, r2
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	893a      	ldrh	r2, [r7, #8]
 8014c6a:	8979      	ldrh	r1, [r7, #10]
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	4603      	mov	r3, r0
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f001 f869 	bl	8015d48 <u8g2_IsIntersection>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d037      	beq.n	8014cec <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c7c:	88fb      	ldrh	r3, [r7, #6]
 8014c7e:	893a      	ldrh	r2, [r7, #8]
 8014c80:	8979      	ldrh	r1, [r7, #10]
 8014c82:	2000      	movs	r0, #0
 8014c84:	9000      	str	r0, [sp, #0]
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f000 ff6d 	bl	8015b66 <u8g2_DrawHVLine>
  if (h >= 2) {
 8014c8c:	8c3b      	ldrh	r3, [r7, #32]
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d92d      	bls.n	8014cee <u8g2_DrawFrame+0xb4>
    h-=2;
 8014c92:	8c3b      	ldrh	r3, [r7, #32]
 8014c94:	3b02      	subs	r3, #2
 8014c96:	843b      	strh	r3, [r7, #32]
    y++;
 8014c98:	893b      	ldrh	r3, [r7, #8]
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8014c9e:	8c3b      	ldrh	r3, [r7, #32]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d01a      	beq.n	8014cda <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014ca4:	8c3b      	ldrh	r3, [r7, #32]
 8014ca6:	893a      	ldrh	r2, [r7, #8]
 8014ca8:	8979      	ldrh	r1, [r7, #10]
 8014caa:	2001      	movs	r0, #1
 8014cac:	9000      	str	r0, [sp, #0]
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	f000 ff59 	bl	8015b66 <u8g2_DrawHVLine>
      x+=w;
 8014cb4:	897a      	ldrh	r2, [r7, #10]
 8014cb6:	88fb      	ldrh	r3, [r7, #6]
 8014cb8:	4413      	add	r3, r2
 8014cba:	817b      	strh	r3, [r7, #10]
      x--;
 8014cbc:	897b      	ldrh	r3, [r7, #10]
 8014cbe:	3b01      	subs	r3, #1
 8014cc0:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014cc2:	8c3b      	ldrh	r3, [r7, #32]
 8014cc4:	893a      	ldrh	r2, [r7, #8]
 8014cc6:	8979      	ldrh	r1, [r7, #10]
 8014cc8:	2001      	movs	r0, #1
 8014cca:	9000      	str	r0, [sp, #0]
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f000 ff4a 	bl	8015b66 <u8g2_DrawHVLine>
      y+=h;
 8014cd2:	893a      	ldrh	r2, [r7, #8]
 8014cd4:	8c3b      	ldrh	r3, [r7, #32]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8014cda:	88fb      	ldrh	r3, [r7, #6]
 8014cdc:	893a      	ldrh	r2, [r7, #8]
 8014cde:	8af9      	ldrh	r1, [r7, #22]
 8014ce0:	2000      	movs	r0, #0
 8014ce2:	9000      	str	r0, [sp, #0]
 8014ce4:	68f8      	ldr	r0, [r7, #12]
 8014ce6:	f000 ff3e 	bl	8015b66 <u8g2_DrawHVLine>
 8014cea:	e000      	b.n	8014cee <u8g2_DrawFrame+0xb4>
    return;
 8014cec:	bf00      	nop
  }
}
 8014cee:	3718      	adds	r7, #24
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	7c1b      	ldrb	r3, [r3, #16]
 8014d02:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	fb02 f303 	mul.w	r3, r2, r3
 8014d12:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	00db      	lsls	r3, r3, #3
 8014d18:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	2100      	movs	r1, #0
 8014d22:	4618      	mov	r0, r3
 8014d24:	f008 f96c 	bl	801d000 <memset>
}
 8014d28:	bf00      	nop
 8014d2a:	3710      	adds	r7, #16
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b086      	sub	sp, #24
 8014d34:	af02      	add	r7, sp, #8
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	460b      	mov	r3, r1
 8014d3a:	70fb      	strb	r3, [r7, #3]
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	7c1b      	ldrb	r3, [r3, #16]
 8014d46:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8014d48:	78fb      	ldrb	r3, [r7, #3]
 8014d4a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d50:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8014d52:	7bfb      	ldrb	r3, [r7, #15]
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	89ba      	ldrh	r2, [r7, #12]
 8014d58:	fb12 f303 	smulbb	r3, r2, r3
 8014d5c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8014d5e:	89bb      	ldrh	r3, [r7, #12]
 8014d60:	00db      	lsls	r3, r3, #3
 8014d62:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8014d64:	89bb      	ldrh	r3, [r7, #12]
 8014d66:	68ba      	ldr	r2, [r7, #8]
 8014d68:	4413      	add	r3, r2
 8014d6a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8014d6c:	7bf9      	ldrb	r1, [r7, #15]
 8014d6e:	78ba      	ldrb	r2, [r7, #2]
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	9300      	str	r3, [sp, #0]
 8014d74:	460b      	mov	r3, r1
 8014d76:	2100      	movs	r1, #0
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f001 fd06 	bl	801678a <u8x8_DrawTile>
}
 8014d7e:	bf00      	nop
 8014d80:	3710      	adds	r7, #16
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}

08014d86 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8014d86:	b580      	push	{r7, lr}
 8014d88:	b084      	sub	sp, #16
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d98:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014da0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	7c5b      	ldrb	r3, [r3, #17]
 8014da8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8014daa:	7bba      	ldrb	r2, [r7, #14]
 8014dac:	7bfb      	ldrb	r3, [r7, #15]
 8014dae:	4619      	mov	r1, r3
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f7ff ffbd 	bl	8014d30 <u8g2_send_tile_row>
    src_row++;
 8014db6:	7bfb      	ldrb	r3, [r7, #15]
 8014db8:	3301      	adds	r3, #1
 8014dba:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8014dbc:	7bbb      	ldrb	r3, [r7, #14]
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8014dc2:	7bfa      	ldrb	r2, [r7, #15]
 8014dc4:	7b7b      	ldrb	r3, [r7, #13]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d203      	bcs.n	8014dd2 <u8g2_send_buffer+0x4c>
 8014dca:	7bba      	ldrb	r2, [r7, #14]
 8014dcc:	7b3b      	ldrb	r3, [r7, #12]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d3eb      	bcc.n	8014daa <u8g2_send_buffer+0x24>
}
 8014dd2:	bf00      	nop
 8014dd4:	3710      	adds	r7, #16
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bd80      	pop	{r7, pc}

08014dda <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8014dda:	b580      	push	{r7, lr}
 8014ddc:	b082      	sub	sp, #8
 8014dde:	af00      	add	r7, sp, #0
 8014de0:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f7ff ffcf 	bl	8014d86 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f001 fd1f 	bl	801682c <u8x8_RefreshDisplay>
}
 8014dee:	bf00      	nop
 8014df0:	3708      	adds	r7, #8
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}

08014df6 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8014df6:	b580      	push	{r7, lr}
 8014df8:	b082      	sub	sp, #8
 8014dfa:	af00      	add	r7, sp, #0
 8014dfc:	6078      	str	r0, [r7, #4]
 8014dfe:	460b      	mov	r3, r1
 8014e00:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	78fa      	ldrb	r2, [r7, #3]
 8014e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e18:	685b      	ldr	r3, [r3, #4]
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	4798      	blx	r3
}
 8014e1e:	bf00      	nop
 8014e20:	3708      	adds	r7, #8
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}

08014e26 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b082      	sub	sp, #8
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d002      	beq.n	8014e3e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7ff ff5b 	bl	8014cf4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8014e3e:	2100      	movs	r1, #0
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7ff ffd8 	bl	8014df6 <u8g2_SetBufferCurrTileRow>
}
 8014e46:	bf00      	nop
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}

08014e4e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8014e4e:	b580      	push	{r7, lr}
 8014e50:	b084      	sub	sp, #16
 8014e52:	af00      	add	r7, sp, #0
 8014e54:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f7ff ff95 	bl	8014d86 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014e62:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8014e6a:	7bfb      	ldrb	r3, [r7, #15]
 8014e6c:	4413      	add	r3, r2
 8014e6e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	7c5b      	ldrb	r3, [r3, #17]
 8014e76:	7bfa      	ldrb	r2, [r7, #15]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d304      	bcc.n	8014e86 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f001 fcd5 	bl	801682c <u8x8_RefreshDisplay>
    return 0;
 8014e82:	2300      	movs	r3, #0
 8014e84:	e00d      	b.n	8014ea2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d002      	beq.n	8014e96 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7ff ff2f 	bl	8014cf4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8014e96:	7bfb      	ldrb	r3, [r7, #15]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7ff ffab 	bl	8014df6 <u8g2_SetBufferCurrTileRow>
  return 1;
 8014ea0:	2301      	movs	r3, #1
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3710      	adds	r7, #16
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8014eaa:	b580      	push	{r7, lr}
 8014eac:	b082      	sub	sp, #8
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff ffb7 	bl	8014e26 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7ff ffc8 	bl	8014e4e <u8g2_NextPage>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d1f9      	bne.n	8014eb8 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8014ec4:	2100      	movs	r1, #0
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f7ff ff95 	bl	8014df6 <u8g2_SetBufferCurrTileRow>
}
 8014ecc:	bf00      	nop
 8014ece:	3708      	adds	r7, #8
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <u8g2_m_30_20_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_30_20_f(uint8_t *page_cnt)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 20;
  return 0;
  #else
  static uint8_t buf[4800];
  *page_cnt = 20;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2214      	movs	r2, #20
 8014ee0:	701a      	strb	r2, [r3, #0]
  return buf;
 8014ee2:	4b03      	ldr	r3, [pc, #12]	; (8014ef0 <u8g2_m_30_20_f+0x1c>)
  #endif
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr
 8014ef0:	20000984 	.word	0x20000984

08014ef4 <u8g2_Setup_uc1638_240x160_f>:
  buf = u8g2_m_30_20_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1638 f */
void u8g2_Setup_uc1638_240x160_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b088      	sub	sp, #32
 8014ef8:	af02      	add	r7, sp, #8
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1638_240x160, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	9300      	str	r3, [sp, #0]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	4a0b      	ldr	r2, [pc, #44]	; (8014f38 <u8g2_Setup_uc1638_240x160_f+0x44>)
 8014f0a:	490c      	ldr	r1, [pc, #48]	; (8014f3c <u8g2_Setup_uc1638_240x160_f+0x48>)
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f001 fced 	bl	80168ec <u8x8_Setup>
  buf = u8g2_m_30_20_f(&tile_buf_height);
 8014f12:	f107 0313 	add.w	r3, r7, #19
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7ff ffdc 	bl	8014ed4 <u8g2_m_30_20_f>
 8014f1c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8014f1e:	7cfa      	ldrb	r2, [r7, #19]
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	4b06      	ldr	r3, [pc, #24]	; (8014f40 <u8g2_Setup_uc1638_240x160_f+0x4c>)
 8014f26:	6979      	ldr	r1, [r7, #20]
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f000 fff7 	bl	8015f1c <u8g2_SetupBuffer>
}
 8014f2e:	bf00      	nop
 8014f30:	3718      	adds	r7, #24
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	08016485 	.word	0x08016485
 8014f3c:	08016685 	.word	0x08016685
 8014f40:	08015d9f 	.word	0x08015d9f

08014f44 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	460b      	mov	r3, r1
 8014f4e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8014f50:	78fb      	ldrb	r3, [r7, #3]
 8014f52:	687a      	ldr	r2, [r7, #4]
 8014f54:	4413      	add	r3, r2
 8014f56:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	781b      	ldrb	r3, [r3, #0]
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	370c      	adds	r7, #12
 8014f60:	46bd      	mov	sp, r7
 8014f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f66:	4770      	bx	lr

08014f68 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8014f68:	b480      	push	{r7}
 8014f6a:	b085      	sub	sp, #20
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	460b      	mov	r3, r1
 8014f72:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8014f74:	78fb      	ldrb	r3, [r7, #3]
 8014f76:	687a      	ldr	r2, [r7, #4]
 8014f78:	4413      	add	r3, r2
 8014f7a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	81fb      	strh	r3, [r7, #14]
    font++;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	3301      	adds	r3, #1
 8014f86:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8014f88:	89fb      	ldrh	r3, [r7, #14]
 8014f8a:	021b      	lsls	r3, r3, #8
 8014f8c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	b29a      	uxth	r2, r3
 8014f94:	89fb      	ldrh	r3, [r7, #14]
 8014f96:	4413      	add	r3, r2
 8014f98:	81fb      	strh	r3, [r7, #14]
    return pos;
 8014f9a:	89fb      	ldrh	r3, [r7, #14]
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3714      	adds	r7, #20
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa6:	4770      	bx	lr

08014fa8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8014fb2:	2100      	movs	r1, #0
 8014fb4:	6838      	ldr	r0, [r7, #0]
 8014fb6:	f7ff ffc5 	bl	8014f44 <u8g2_font_get_byte>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8014fc2:	2101      	movs	r1, #1
 8014fc4:	6838      	ldr	r0, [r7, #0]
 8014fc6:	f7ff ffbd 	bl	8014f44 <u8g2_font_get_byte>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	461a      	mov	r2, r3
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8014fd2:	2102      	movs	r1, #2
 8014fd4:	6838      	ldr	r0, [r7, #0]
 8014fd6:	f7ff ffb5 	bl	8014f44 <u8g2_font_get_byte>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	461a      	mov	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8014fe2:	2103      	movs	r1, #3
 8014fe4:	6838      	ldr	r0, [r7, #0]
 8014fe6:	f7ff ffad 	bl	8014f44 <u8g2_font_get_byte>
 8014fea:	4603      	mov	r3, r0
 8014fec:	461a      	mov	r2, r3
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8014ff2:	2104      	movs	r1, #4
 8014ff4:	6838      	ldr	r0, [r7, #0]
 8014ff6:	f7ff ffa5 	bl	8014f44 <u8g2_font_get_byte>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	461a      	mov	r2, r3
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8015002:	2105      	movs	r1, #5
 8015004:	6838      	ldr	r0, [r7, #0]
 8015006:	f7ff ff9d 	bl	8014f44 <u8g2_font_get_byte>
 801500a:	4603      	mov	r3, r0
 801500c:	461a      	mov	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8015012:	2106      	movs	r1, #6
 8015014:	6838      	ldr	r0, [r7, #0]
 8015016:	f7ff ff95 	bl	8014f44 <u8g2_font_get_byte>
 801501a:	4603      	mov	r3, r0
 801501c:	461a      	mov	r2, r3
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8015022:	2107      	movs	r1, #7
 8015024:	6838      	ldr	r0, [r7, #0]
 8015026:	f7ff ff8d 	bl	8014f44 <u8g2_font_get_byte>
 801502a:	4603      	mov	r3, r0
 801502c:	461a      	mov	r2, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8015032:	2108      	movs	r1, #8
 8015034:	6838      	ldr	r0, [r7, #0]
 8015036:	f7ff ff85 	bl	8014f44 <u8g2_font_get_byte>
 801503a:	4603      	mov	r3, r0
 801503c:	461a      	mov	r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8015042:	2109      	movs	r1, #9
 8015044:	6838      	ldr	r0, [r7, #0]
 8015046:	f7ff ff7d 	bl	8014f44 <u8g2_font_get_byte>
 801504a:	4603      	mov	r3, r0
 801504c:	b25a      	sxtb	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8015052:	210a      	movs	r1, #10
 8015054:	6838      	ldr	r0, [r7, #0]
 8015056:	f7ff ff75 	bl	8014f44 <u8g2_font_get_byte>
 801505a:	4603      	mov	r3, r0
 801505c:	b25a      	sxtb	r2, r3
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8015062:	210b      	movs	r1, #11
 8015064:	6838      	ldr	r0, [r7, #0]
 8015066:	f7ff ff6d 	bl	8014f44 <u8g2_font_get_byte>
 801506a:	4603      	mov	r3, r0
 801506c:	b25a      	sxtb	r2, r3
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8015072:	210c      	movs	r1, #12
 8015074:	6838      	ldr	r0, [r7, #0]
 8015076:	f7ff ff65 	bl	8014f44 <u8g2_font_get_byte>
 801507a:	4603      	mov	r3, r0
 801507c:	b25a      	sxtb	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8015082:	210d      	movs	r1, #13
 8015084:	6838      	ldr	r0, [r7, #0]
 8015086:	f7ff ff5d 	bl	8014f44 <u8g2_font_get_byte>
 801508a:	4603      	mov	r3, r0
 801508c:	b25a      	sxtb	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8015092:	210e      	movs	r1, #14
 8015094:	6838      	ldr	r0, [r7, #0]
 8015096:	f7ff ff55 	bl	8014f44 <u8g2_font_get_byte>
 801509a:	4603      	mov	r3, r0
 801509c:	b25a      	sxtb	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80150a2:	210f      	movs	r1, #15
 80150a4:	6838      	ldr	r0, [r7, #0]
 80150a6:	f7ff ff4d 	bl	8014f44 <u8g2_font_get_byte>
 80150aa:	4603      	mov	r3, r0
 80150ac:	b25a      	sxtb	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80150b2:	2110      	movs	r1, #16
 80150b4:	6838      	ldr	r0, [r7, #0]
 80150b6:	f7ff ff45 	bl	8014f44 <u8g2_font_get_byte>
 80150ba:	4603      	mov	r3, r0
 80150bc:	b25a      	sxtb	r2, r3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80150c2:	2111      	movs	r1, #17
 80150c4:	6838      	ldr	r0, [r7, #0]
 80150c6:	f7ff ff4f 	bl	8014f68 <u8g2_font_get_word>
 80150ca:	4603      	mov	r3, r0
 80150cc:	461a      	mov	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80150d2:	2113      	movs	r1, #19
 80150d4:	6838      	ldr	r0, [r7, #0]
 80150d6:	f7ff ff47 	bl	8014f68 <u8g2_font_get_word>
 80150da:	4603      	mov	r3, r0
 80150dc:	461a      	mov	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80150e2:	2115      	movs	r1, #21
 80150e4:	6838      	ldr	r0, [r7, #0]
 80150e6:	f7ff ff3f 	bl	8014f68 <u8g2_font_get_word>
 80150ea:	4603      	mov	r3, r0
 80150ec:	461a      	mov	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	82da      	strh	r2, [r3, #22]
#endif
}
 80150f2:	bf00      	nop
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}

080150fa <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80150fa:	b480      	push	{r7}
 80150fc:	b085      	sub	sp, #20
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
 8015102:	460b      	mov	r3, r1
 8015104:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	7b1b      	ldrb	r3, [r3, #12]
 801510a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	781b      	ldrb	r3, [r3, #0]
 8015112:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8015114:	7bfa      	ldrb	r2, [r7, #15]
 8015116:	7b7b      	ldrb	r3, [r7, #13]
 8015118:	fa42 f303 	asr.w	r3, r2, r3
 801511c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 801511e:	7b7b      	ldrb	r3, [r7, #13]
 8015120:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8015122:	7bba      	ldrb	r2, [r7, #14]
 8015124:	78fb      	ldrb	r3, [r7, #3]
 8015126:	4413      	add	r3, r2
 8015128:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 801512a:	7bbb      	ldrb	r3, [r7, #14]
 801512c:	2b07      	cmp	r3, #7
 801512e:	d91a      	bls.n	8015166 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8015130:	2308      	movs	r3, #8
 8015132:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8015134:	7b3a      	ldrb	r2, [r7, #12]
 8015136:	7b7b      	ldrb	r3, [r7, #13]
 8015138:	1ad3      	subs	r3, r2, r3
 801513a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	1c5a      	adds	r2, r3, #1
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	781b      	ldrb	r3, [r3, #0]
 801514c:	461a      	mov	r2, r3
 801514e:	7b3b      	ldrb	r3, [r7, #12]
 8015150:	fa02 f303 	lsl.w	r3, r2, r3
 8015154:	b25a      	sxtb	r2, r3
 8015156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801515a:	4313      	orrs	r3, r2
 801515c:	b25b      	sxtb	r3, r3
 801515e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8015160:	7bbb      	ldrb	r3, [r7, #14]
 8015162:	3b08      	subs	r3, #8
 8015164:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8015166:	78fb      	ldrb	r3, [r7, #3]
 8015168:	f04f 32ff 	mov.w	r2, #4294967295
 801516c:	fa02 f303 	lsl.w	r3, r2, r3
 8015170:	b2db      	uxtb	r3, r3
 8015172:	43db      	mvns	r3, r3
 8015174:	b2da      	uxtb	r2, r3
 8015176:	7bfb      	ldrb	r3, [r7, #15]
 8015178:	4013      	ands	r3, r2
 801517a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	7bba      	ldrb	r2, [r7, #14]
 8015180:	731a      	strb	r2, [r3, #12]
  return val;
 8015182:	7bfb      	ldrb	r3, [r7, #15]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3714      	adds	r7, #20
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b084      	sub	sp, #16
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	460b      	mov	r3, r1
 801519a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 801519c:	78fb      	ldrb	r3, [r7, #3]
 801519e:	4619      	mov	r1, r3
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f7ff ffaa 	bl	80150fa <u8g2_font_decode_get_unsigned_bits>
 80151a6:	4603      	mov	r3, r0
 80151a8:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80151aa:	2301      	movs	r3, #1
 80151ac:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80151ae:	78fb      	ldrb	r3, [r7, #3]
 80151b0:	3b01      	subs	r3, #1
 80151b2:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80151b4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80151b8:	78fb      	ldrb	r3, [r7, #3]
 80151ba:	fa02 f303 	lsl.w	r3, r2, r3
 80151be:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80151c0:	7bfa      	ldrb	r2, [r7, #15]
 80151c2:	7bbb      	ldrb	r3, [r7, #14]
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	b2db      	uxtb	r3, r3
 80151c8:	73fb      	strb	r3, [r7, #15]
  return v;
 80151ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3710      	adds	r7, #16
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}

080151d6 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80151d6:	b490      	push	{r4, r7}
 80151d8:	b082      	sub	sp, #8
 80151da:	af00      	add	r7, sp, #0
 80151dc:	4604      	mov	r4, r0
 80151de:	4608      	mov	r0, r1
 80151e0:	4611      	mov	r1, r2
 80151e2:	461a      	mov	r2, r3
 80151e4:	4623      	mov	r3, r4
 80151e6:	80fb      	strh	r3, [r7, #6]
 80151e8:	4603      	mov	r3, r0
 80151ea:	717b      	strb	r3, [r7, #5]
 80151ec:	460b      	mov	r3, r1
 80151ee:	713b      	strb	r3, [r7, #4]
 80151f0:	4613      	mov	r3, r2
 80151f2:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80151f4:	78fb      	ldrb	r3, [r7, #3]
 80151f6:	2b02      	cmp	r3, #2
 80151f8:	d014      	beq.n	8015224 <u8g2_add_vector_y+0x4e>
 80151fa:	2b02      	cmp	r3, #2
 80151fc:	dc19      	bgt.n	8015232 <u8g2_add_vector_y+0x5c>
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d002      	beq.n	8015208 <u8g2_add_vector_y+0x32>
 8015202:	2b01      	cmp	r3, #1
 8015204:	d007      	beq.n	8015216 <u8g2_add_vector_y+0x40>
 8015206:	e014      	b.n	8015232 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8015208:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801520c:	b29a      	uxth	r2, r3
 801520e:	88fb      	ldrh	r3, [r7, #6]
 8015210:	4413      	add	r3, r2
 8015212:	80fb      	strh	r3, [r7, #6]
      break;
 8015214:	e014      	b.n	8015240 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8015216:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801521a:	b29a      	uxth	r2, r3
 801521c:	88fb      	ldrh	r3, [r7, #6]
 801521e:	4413      	add	r3, r2
 8015220:	80fb      	strh	r3, [r7, #6]
      break;
 8015222:	e00d      	b.n	8015240 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8015224:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015228:	b29b      	uxth	r3, r3
 801522a:	88fa      	ldrh	r2, [r7, #6]
 801522c:	1ad3      	subs	r3, r2, r3
 801522e:	80fb      	strh	r3, [r7, #6]
      break;
 8015230:	e006      	b.n	8015240 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8015232:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015236:	b29b      	uxth	r3, r3
 8015238:	88fa      	ldrh	r2, [r7, #6]
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	80fb      	strh	r3, [r7, #6]
      break;      
 801523e:	bf00      	nop
  }
  return dy;
 8015240:	88fb      	ldrh	r3, [r7, #6]
}
 8015242:	4618      	mov	r0, r3
 8015244:	3708      	adds	r7, #8
 8015246:	46bd      	mov	sp, r7
 8015248:	bc90      	pop	{r4, r7}
 801524a:	4770      	bx	lr

0801524c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 801524c:	b490      	push	{r4, r7}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	4604      	mov	r4, r0
 8015254:	4608      	mov	r0, r1
 8015256:	4611      	mov	r1, r2
 8015258:	461a      	mov	r2, r3
 801525a:	4623      	mov	r3, r4
 801525c:	80fb      	strh	r3, [r7, #6]
 801525e:	4603      	mov	r3, r0
 8015260:	717b      	strb	r3, [r7, #5]
 8015262:	460b      	mov	r3, r1
 8015264:	713b      	strb	r3, [r7, #4]
 8015266:	4613      	mov	r3, r2
 8015268:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 801526a:	78fb      	ldrb	r3, [r7, #3]
 801526c:	2b02      	cmp	r3, #2
 801526e:	d014      	beq.n	801529a <u8g2_add_vector_x+0x4e>
 8015270:	2b02      	cmp	r3, #2
 8015272:	dc19      	bgt.n	80152a8 <u8g2_add_vector_x+0x5c>
 8015274:	2b00      	cmp	r3, #0
 8015276:	d002      	beq.n	801527e <u8g2_add_vector_x+0x32>
 8015278:	2b01      	cmp	r3, #1
 801527a:	d007      	beq.n	801528c <u8g2_add_vector_x+0x40>
 801527c:	e014      	b.n	80152a8 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 801527e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015282:	b29a      	uxth	r2, r3
 8015284:	88fb      	ldrh	r3, [r7, #6]
 8015286:	4413      	add	r3, r2
 8015288:	80fb      	strh	r3, [r7, #6]
      break;
 801528a:	e014      	b.n	80152b6 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 801528c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015290:	b29b      	uxth	r3, r3
 8015292:	88fa      	ldrh	r2, [r7, #6]
 8015294:	1ad3      	subs	r3, r2, r3
 8015296:	80fb      	strh	r3, [r7, #6]
      break;
 8015298:	e00d      	b.n	80152b6 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 801529a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801529e:	b29b      	uxth	r3, r3
 80152a0:	88fa      	ldrh	r2, [r7, #6]
 80152a2:	1ad3      	subs	r3, r2, r3
 80152a4:	80fb      	strh	r3, [r7, #6]
      break;
 80152a6:	e006      	b.n	80152b6 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80152a8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80152ac:	b29a      	uxth	r2, r3
 80152ae:	88fb      	ldrh	r3, [r7, #6]
 80152b0:	4413      	add	r3, r2
 80152b2:	80fb      	strh	r3, [r7, #6]
      break;      
 80152b4:	bf00      	nop
  }
  return dx;
 80152b6:	88fb      	ldrh	r3, [r7, #6]
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bc90      	pop	{r4, r7}
 80152c0:	4770      	bx	lr

080152c2 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80152c2:	b580      	push	{r7, lr}
 80152c4:	b088      	sub	sp, #32
 80152c6:	af02      	add	r7, sp, #8
 80152c8:	6078      	str	r0, [r7, #4]
 80152ca:	460b      	mov	r3, r1
 80152cc:	70fb      	strb	r3, [r7, #3]
 80152ce:	4613      	mov	r3, r2
 80152d0:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	3360      	adds	r3, #96	; 0x60
 80152d6:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80152d8:	78fb      	ldrb	r3, [r7, #3]
 80152da:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80152e2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80152ea:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80152f2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80152f4:	7bfa      	ldrb	r2, [r7, #15]
 80152f6:	7d7b      	ldrb	r3, [r7, #21]
 80152f8:	1ad3      	subs	r3, r2, r3
 80152fa:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80152fc:	7bfb      	ldrb	r3, [r7, #15]
 80152fe:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8015300:	7dfa      	ldrb	r2, [r7, #23]
 8015302:	7bfb      	ldrb	r3, [r7, #15]
 8015304:	429a      	cmp	r2, r3
 8015306:	d201      	bcs.n	801530c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8015308:	7dfb      	ldrb	r3, [r7, #23]
 801530a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	889b      	ldrh	r3, [r3, #4]
 8015310:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	88db      	ldrh	r3, [r3, #6]
 8015316:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8015318:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801531c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	7c1b      	ldrb	r3, [r3, #16]
 8015324:	89b8      	ldrh	r0, [r7, #12]
 8015326:	f7ff ff91 	bl	801524c <u8g2_add_vector_x>
 801532a:	4603      	mov	r3, r0
 801532c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 801532e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8015332:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	7c1b      	ldrb	r3, [r3, #16]
 801533a:	8978      	ldrh	r0, [r7, #10]
 801533c:	f7ff ff4b 	bl	80151d6 <u8g2_add_vector_y>
 8015340:	4603      	mov	r3, r0
 8015342:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8015344:	78bb      	ldrb	r3, [r7, #2]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d010      	beq.n	801536c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	7b9a      	ldrb	r2, [r3, #14]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8015354:	7dbb      	ldrb	r3, [r7, #22]
 8015356:	b298      	uxth	r0, r3
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	7c1b      	ldrb	r3, [r3, #16]
 801535c:	897a      	ldrh	r2, [r7, #10]
 801535e:	89b9      	ldrh	r1, [r7, #12]
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	4603      	mov	r3, r0
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 fbfe 	bl	8015b66 <u8g2_DrawHVLine>
 801536a:	e013      	b.n	8015394 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	7b5b      	ldrb	r3, [r3, #13]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d10f      	bne.n	8015394 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	7bda      	ldrb	r2, [r3, #15]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 801537e:	7dbb      	ldrb	r3, [r7, #22]
 8015380:	b298      	uxth	r0, r3
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	7c1b      	ldrb	r3, [r3, #16]
 8015386:	897a      	ldrh	r2, [r7, #10]
 8015388:	89b9      	ldrh	r1, [r7, #12]
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	4603      	mov	r3, r0
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f000 fbe9 	bl	8015b66 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8015394:	7dfa      	ldrb	r2, [r7, #23]
 8015396:	7bfb      	ldrb	r3, [r7, #15]
 8015398:	429a      	cmp	r2, r3
 801539a:	d309      	bcc.n	80153b0 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 801539c:	7dfa      	ldrb	r2, [r7, #23]
 801539e:	7bfb      	ldrb	r3, [r7, #15]
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80153a4:	2300      	movs	r3, #0
 80153a6:	757b      	strb	r3, [r7, #21]
    ly++;
 80153a8:	7d3b      	ldrb	r3, [r7, #20]
 80153aa:	3301      	adds	r3, #1
 80153ac:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80153ae:	e79d      	b.n	80152ec <u8g2_font_decode_len+0x2a>
      break;
 80153b0:	bf00      	nop
  }
  lx += cnt;
 80153b2:	7d7a      	ldrb	r2, [r7, #21]
 80153b4:	7dfb      	ldrb	r3, [r7, #23]
 80153b6:	4413      	add	r3, r2
 80153b8:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80153ba:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80153c2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	725a      	strb	r2, [r3, #9]
  
}
 80153ca:	bf00      	nop
 80153cc:	3718      	adds	r7, #24
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80153d2:	b580      	push	{r7, lr}
 80153d4:	b084      	sub	sp, #16
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	3360      	adds	r3, #96	; 0x60
 80153e0:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	683a      	ldr	r2, [r7, #0]
 80153e6:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80153f4:	4619      	mov	r1, r3
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f7ff fe7f 	bl	80150fa <u8g2_font_decode_get_unsigned_bits>
 80153fc:	4603      	mov	r3, r0
 80153fe:	b25a      	sxtb	r2, r3
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801540a:	4619      	mov	r1, r3
 801540c:	68f8      	ldr	r0, [r7, #12]
 801540e:	f7ff fe74 	bl	80150fa <u8g2_font_decode_get_unsigned_bits>
 8015412:	4603      	mov	r3, r0
 8015414:	b25a      	sxtb	r2, r3
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	7b9b      	ldrb	r3, [r3, #14]
 8015428:	2b00      	cmp	r3, #0
 801542a:	bf0c      	ite	eq
 801542c:	2301      	moveq	r3, #1
 801542e:	2300      	movne	r3, #0
 8015430:	b2db      	uxtb	r3, r3
 8015432:	461a      	mov	r2, r3
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	73da      	strb	r2, [r3, #15]
}
 8015438:	bf00      	nop
 801543a:	3710      	adds	r7, #16
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}

08015440 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b08a      	sub	sp, #40	; 0x28
 8015444:	af02      	add	r7, sp, #8
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	3360      	adds	r3, #96	; 0x60
 801544e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8015450:	6839      	ldr	r1, [r7, #0]
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f7ff ffbd 	bl	80153d2 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801545e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8015466:	4619      	mov	r1, r3
 8015468:	6978      	ldr	r0, [r7, #20]
 801546a:	f7ff fe91 	bl	8015190 <u8g2_font_decode_get_signed_bits>
 801546e:	4603      	mov	r3, r0
 8015470:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8015478:	4619      	mov	r1, r3
 801547a:	6978      	ldr	r0, [r7, #20]
 801547c:	f7ff fe88 	bl	8015190 <u8g2_font_decode_get_signed_bits>
 8015480:	4603      	mov	r3, r0
 8015482:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801548a:	4619      	mov	r1, r3
 801548c:	6978      	ldr	r0, [r7, #20]
 801548e:	f7ff fe7f 	bl	8015190 <u8g2_font_decode_get_signed_bits>
 8015492:	4603      	mov	r3, r0
 8015494:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801549c:	2b00      	cmp	r3, #0
 801549e:	f340 80d7 	ble.w	8015650 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	8898      	ldrh	r0, [r3, #4]
 80154a6:	7cfa      	ldrb	r2, [r7, #19]
 80154a8:	7c7b      	ldrb	r3, [r7, #17]
 80154aa:	4413      	add	r3, r2
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	425b      	negs	r3, r3
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	b25a      	sxtb	r2, r3
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	7c1b      	ldrb	r3, [r3, #16]
 80154b8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80154bc:	f7ff fec6 	bl	801524c <u8g2_add_vector_x>
 80154c0:	4603      	mov	r3, r0
 80154c2:	461a      	mov	r2, r3
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	88d8      	ldrh	r0, [r3, #6]
 80154cc:	7cfa      	ldrb	r2, [r7, #19]
 80154ce:	7c7b      	ldrb	r3, [r7, #17]
 80154d0:	4413      	add	r3, r2
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	425b      	negs	r3, r3
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	b25a      	sxtb	r2, r3
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	7c1b      	ldrb	r3, [r3, #16]
 80154de:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80154e2:	f7ff fe78 	bl	80151d6 <u8g2_add_vector_y>
 80154e6:	4603      	mov	r3, r0
 80154e8:	461a      	mov	r2, r3
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	889b      	ldrh	r3, [r3, #4]
 80154f2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	88db      	ldrh	r3, [r3, #6]
 80154f8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80154fa:	8bfb      	ldrh	r3, [r7, #30]
 80154fc:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80154fe:	8b7b      	ldrh	r3, [r7, #26]
 8015500:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	7c1b      	ldrb	r3, [r3, #16]
 8015506:	2b03      	cmp	r3, #3
 8015508:	d85a      	bhi.n	80155c0 <u8g2_font_decode_glyph+0x180>
 801550a:	a201      	add	r2, pc, #4	; (adr r2, 8015510 <u8g2_font_decode_glyph+0xd0>)
 801550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015510:	08015521 	.word	0x08015521
 8015514:	0801553d 	.word	0x0801553d
 8015518:	08015565 	.word	0x08015565
 801551c:	08015599 	.word	0x08015599
      {
	case 0:
	    x1 += decode->glyph_width;
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015526:	b29a      	uxth	r2, r3
 8015528:	8bbb      	ldrh	r3, [r7, #28]
 801552a:	4413      	add	r3, r2
 801552c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 801552e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015532:	b29a      	uxth	r2, r3
 8015534:	8b3b      	ldrh	r3, [r7, #24]
 8015536:	4413      	add	r3, r2
 8015538:	833b      	strh	r3, [r7, #24]
	    break;
 801553a:	e041      	b.n	80155c0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 801553c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015540:	b29b      	uxth	r3, r3
 8015542:	8bfa      	ldrh	r2, [r7, #30]
 8015544:	1ad3      	subs	r3, r2, r3
 8015546:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015548:	8bfb      	ldrh	r3, [r7, #30]
 801554a:	3301      	adds	r3, #1
 801554c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 801554e:	8bbb      	ldrh	r3, [r7, #28]
 8015550:	3301      	adds	r3, #1
 8015552:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801555a:	b29a      	uxth	r2, r3
 801555c:	8b3b      	ldrh	r3, [r7, #24]
 801555e:	4413      	add	r3, r2
 8015560:	833b      	strh	r3, [r7, #24]
	    break;
 8015562:	e02d      	b.n	80155c0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801556a:	b29b      	uxth	r3, r3
 801556c:	8bfa      	ldrh	r2, [r7, #30]
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015572:	8bfb      	ldrh	r3, [r7, #30]
 8015574:	3301      	adds	r3, #1
 8015576:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8015578:	8bbb      	ldrh	r3, [r7, #28]
 801557a:	3301      	adds	r3, #1
 801557c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 801557e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015582:	b29b      	uxth	r3, r3
 8015584:	8b7a      	ldrh	r2, [r7, #26]
 8015586:	1ad3      	subs	r3, r2, r3
 8015588:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801558a:	8b7b      	ldrh	r3, [r7, #26]
 801558c:	3301      	adds	r3, #1
 801558e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015590:	8b3b      	ldrh	r3, [r7, #24]
 8015592:	3301      	adds	r3, #1
 8015594:	833b      	strh	r3, [r7, #24]
	    break;	  
 8015596:	e013      	b.n	80155c0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8015598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801559c:	b29a      	uxth	r2, r3
 801559e:	8bbb      	ldrh	r3, [r7, #28]
 80155a0:	4413      	add	r3, r2
 80155a2:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	8b7a      	ldrh	r2, [r7, #26]
 80155ae:	1ad3      	subs	r3, r2, r3
 80155b0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155b2:	8b7b      	ldrh	r3, [r7, #26]
 80155b4:	3301      	adds	r3, #1
 80155b6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80155b8:	8b3b      	ldrh	r3, [r7, #24]
 80155ba:	3301      	adds	r3, #1
 80155bc:	833b      	strh	r3, [r7, #24]
	    break;	  
 80155be:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80155c0:	8bb8      	ldrh	r0, [r7, #28]
 80155c2:	8b7a      	ldrh	r2, [r7, #26]
 80155c4:	8bf9      	ldrh	r1, [r7, #30]
 80155c6:	8b3b      	ldrh	r3, [r7, #24]
 80155c8:	9300      	str	r3, [sp, #0]
 80155ca:	4603      	mov	r3, r0
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f000 fbbb 	bl	8015d48 <u8g2_IsIntersection>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d102      	bne.n	80155de <u8g2_font_decode_glyph+0x19e>
	return d;
 80155d8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80155dc:	e03a      	b.n	8015654 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80155de:	697b      	ldr	r3, [r7, #20]
 80155e0:	2200      	movs	r2, #0
 80155e2:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	2200      	movs	r2, #0
 80155e8:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80155f0:	4619      	mov	r1, r3
 80155f2:	6978      	ldr	r0, [r7, #20]
 80155f4:	f7ff fd81 	bl	80150fa <u8g2_font_decode_get_unsigned_bits>
 80155f8:	4603      	mov	r3, r0
 80155fa:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8015602:	4619      	mov	r1, r3
 8015604:	6978      	ldr	r0, [r7, #20]
 8015606:	f7ff fd78 	bl	80150fa <u8g2_font_decode_get_unsigned_bits>
 801560a:	4603      	mov	r3, r0
 801560c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 801560e:	7bfb      	ldrb	r3, [r7, #15]
 8015610:	2200      	movs	r2, #0
 8015612:	4619      	mov	r1, r3
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7ff fe54 	bl	80152c2 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 801561a:	7bbb      	ldrb	r3, [r7, #14]
 801561c:	2201      	movs	r2, #1
 801561e:	4619      	mov	r1, r3
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f7ff fe4e 	bl	80152c2 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8015626:	2101      	movs	r1, #1
 8015628:	6978      	ldr	r0, [r7, #20]
 801562a:	f7ff fd66 	bl	80150fa <u8g2_font_decode_get_unsigned_bits>
 801562e:	4603      	mov	r3, r0
 8015630:	2b00      	cmp	r3, #0
 8015632:	d1ec      	bne.n	801560e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801563a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801563e:	429a      	cmp	r2, r3
 8015640:	dd00      	ble.n	8015644 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8015642:	e7d2      	b.n	80155ea <u8g2_font_decode_glyph+0x1aa>
	break;
 8015644:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	7b9a      	ldrb	r2, [r3, #14]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8015650:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8015654:	4618      	mov	r0, r3
 8015656:	3720      	adds	r7, #32
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b086      	sub	sp, #24
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	460b      	mov	r3, r1
 8015666:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801566c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	3317      	adds	r3, #23
 8015672:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8015674:	887b      	ldrh	r3, [r7, #2]
 8015676:	2bff      	cmp	r3, #255	; 0xff
 8015678:	d82a      	bhi.n	80156d0 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 801567a:	887b      	ldrh	r3, [r7, #2]
 801567c:	2b60      	cmp	r3, #96	; 0x60
 801567e:	d907      	bls.n	8015690 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8015686:	461a      	mov	r2, r3
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	4413      	add	r3, r2
 801568c:	617b      	str	r3, [r7, #20]
 801568e:	e009      	b.n	80156a4 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8015690:	887b      	ldrh	r3, [r7, #2]
 8015692:	2b40      	cmp	r3, #64	; 0x40
 8015694:	d906      	bls.n	80156a4 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801569c:	461a      	mov	r2, r3
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	4413      	add	r3, r2
 80156a2:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	3301      	adds	r3, #1
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d04e      	beq.n	801574c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	b29b      	uxth	r3, r3
 80156b4:	887a      	ldrh	r2, [r7, #2]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d102      	bne.n	80156c0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	3302      	adds	r3, #2
 80156be:	e049      	b.n	8015754 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	3301      	adds	r3, #1
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	461a      	mov	r2, r3
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	4413      	add	r3, r2
 80156cc:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80156ce:	e7e9      	b.n	80156a4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80156d6:	461a      	mov	r2, r3
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	4413      	add	r3, r2
 80156dc:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80156e2:	2100      	movs	r1, #0
 80156e4:	6938      	ldr	r0, [r7, #16]
 80156e6:	f7ff fc3f 	bl	8014f68 <u8g2_font_get_word>
 80156ea:	4603      	mov	r3, r0
 80156ec:	461a      	mov	r2, r3
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	4413      	add	r3, r2
 80156f2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80156f4:	2102      	movs	r1, #2
 80156f6:	6938      	ldr	r0, [r7, #16]
 80156f8:	f7ff fc36 	bl	8014f68 <u8g2_font_get_word>
 80156fc:	4603      	mov	r3, r0
 80156fe:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	3304      	adds	r3, #4
 8015704:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8015706:	89fa      	ldrh	r2, [r7, #14]
 8015708:	887b      	ldrh	r3, [r7, #2]
 801570a:	429a      	cmp	r2, r3
 801570c:	d3e9      	bcc.n	80156e2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8015714:	89fb      	ldrh	r3, [r7, #14]
 8015716:	021b      	lsls	r3, r3, #8
 8015718:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	3301      	adds	r3, #1
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	b29a      	uxth	r2, r3
 8015722:	89fb      	ldrh	r3, [r7, #14]
 8015724:	4313      	orrs	r3, r2
 8015726:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8015728:	89fb      	ldrh	r3, [r7, #14]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d010      	beq.n	8015750 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 801572e:	89fa      	ldrh	r2, [r7, #14]
 8015730:	887b      	ldrh	r3, [r7, #2]
 8015732:	429a      	cmp	r2, r3
 8015734:	d102      	bne.n	801573c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	3303      	adds	r3, #3
 801573a:	e00b      	b.n	8015754 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	3302      	adds	r3, #2
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	461a      	mov	r2, r3
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	4413      	add	r3, r2
 8015748:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 801574a:	e7e0      	b.n	801570e <u8g2_font_get_glyph_data+0xb2>
	break;
 801574c:	bf00      	nop
 801574e:	e000      	b.n	8015752 <u8g2_font_get_glyph_data+0xf6>
	break;
 8015750:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8015752:	2300      	movs	r3, #0
}
 8015754:	4618      	mov	r0, r3
 8015756:	3718      	adds	r7, #24
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b086      	sub	sp, #24
 8015760:	af00      	add	r7, sp, #0
 8015762:	60f8      	str	r0, [r7, #12]
 8015764:	4608      	mov	r0, r1
 8015766:	4611      	mov	r1, r2
 8015768:	461a      	mov	r2, r3
 801576a:	4603      	mov	r3, r0
 801576c:	817b      	strh	r3, [r7, #10]
 801576e:	460b      	mov	r3, r1
 8015770:	813b      	strh	r3, [r7, #8]
 8015772:	4613      	mov	r3, r2
 8015774:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8015776:	2300      	movs	r3, #0
 8015778:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	897a      	ldrh	r2, [r7, #10]
 801577e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	893a      	ldrh	r2, [r7, #8]
 8015786:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 801578a:	88fb      	ldrh	r3, [r7, #6]
 801578c:	4619      	mov	r1, r3
 801578e:	68f8      	ldr	r0, [r7, #12]
 8015790:	f7ff ff64 	bl	801565c <u8g2_font_get_glyph_data>
 8015794:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d005      	beq.n	80157a8 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 801579c:	6939      	ldr	r1, [r7, #16]
 801579e:	68f8      	ldr	r0, [r7, #12]
 80157a0:	f7ff fe4e 	bl	8015440 <u8g2_font_decode_glyph>
 80157a4:	4603      	mov	r3, r0
 80157a6:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80157a8:	8afb      	ldrh	r3, [r7, #22]
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3718      	adds	r7, #24
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
	...

080157b4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	4608      	mov	r0, r1
 80157be:	4611      	mov	r1, r2
 80157c0:	461a      	mov	r2, r3
 80157c2:	4603      	mov	r3, r0
 80157c4:	817b      	strh	r3, [r7, #10]
 80157c6:	460b      	mov	r3, r1
 80157c8:	813b      	strh	r3, [r7, #8]
 80157ca:	4613      	mov	r3, r2
 80157cc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80157d4:	2b03      	cmp	r3, #3
 80157d6:	d833      	bhi.n	8015840 <u8g2_DrawGlyph+0x8c>
 80157d8:	a201      	add	r2, pc, #4	; (adr r2, 80157e0 <u8g2_DrawGlyph+0x2c>)
 80157da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157de:	bf00      	nop
 80157e0:	080157f1 	.word	0x080157f1
 80157e4:	08015805 	.word	0x08015805
 80157e8:	08015819 	.word	0x08015819
 80157ec:	0801582d 	.word	0x0801582d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	4798      	blx	r3
 80157f8:	4603      	mov	r3, r0
 80157fa:	461a      	mov	r2, r3
 80157fc:	893b      	ldrh	r3, [r7, #8]
 80157fe:	4413      	add	r3, r2
 8015800:	813b      	strh	r3, [r7, #8]
      break;
 8015802:	e01d      	b.n	8015840 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015808:	68f8      	ldr	r0, [r7, #12]
 801580a:	4798      	blx	r3
 801580c:	4603      	mov	r3, r0
 801580e:	461a      	mov	r2, r3
 8015810:	897b      	ldrh	r3, [r7, #10]
 8015812:	1a9b      	subs	r3, r3, r2
 8015814:	817b      	strh	r3, [r7, #10]
      break;
 8015816:	e013      	b.n	8015840 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801581c:	68f8      	ldr	r0, [r7, #12]
 801581e:	4798      	blx	r3
 8015820:	4603      	mov	r3, r0
 8015822:	461a      	mov	r2, r3
 8015824:	893b      	ldrh	r3, [r7, #8]
 8015826:	1a9b      	subs	r3, r3, r2
 8015828:	813b      	strh	r3, [r7, #8]
      break;
 801582a:	e009      	b.n	8015840 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015830:	68f8      	ldr	r0, [r7, #12]
 8015832:	4798      	blx	r3
 8015834:	4603      	mov	r3, r0
 8015836:	461a      	mov	r2, r3
 8015838:	897b      	ldrh	r3, [r7, #10]
 801583a:	4413      	add	r3, r2
 801583c:	817b      	strh	r3, [r7, #10]
      break;
 801583e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8015840:	88fb      	ldrh	r3, [r7, #6]
 8015842:	893a      	ldrh	r2, [r7, #8]
 8015844:	8979      	ldrh	r1, [r7, #10]
 8015846:	68f8      	ldr	r0, [r7, #12]
 8015848:	f7ff ff88 	bl	801575c <u8g2_font_draw_glyph>
 801584c:	4603      	mov	r3, r0
}
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop

08015858 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b086      	sub	sp, #24
 801585c:	af00      	add	r7, sp, #0
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	607b      	str	r3, [r7, #4]
 8015862:	460b      	mov	r3, r1
 8015864:	817b      	strh	r3, [r7, #10]
 8015866:	4613      	mov	r3, r2
 8015868:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 801586a:	68f8      	ldr	r0, [r7, #12]
 801586c:	f000 fc99 	bl	80161a2 <u8x8_utf8_init>
  sum = 0;
 8015870:	2300      	movs	r3, #0
 8015872:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	685b      	ldr	r3, [r3, #4]
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	7812      	ldrb	r2, [r2, #0]
 801587c:	4611      	mov	r1, r2
 801587e:	68f8      	ldr	r0, [r7, #12]
 8015880:	4798      	blx	r3
 8015882:	4603      	mov	r3, r0
 8015884:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8015886:	8abb      	ldrh	r3, [r7, #20]
 8015888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801588c:	4293      	cmp	r3, r2
 801588e:	d038      	beq.n	8015902 <u8g2_draw_string+0xaa>
      break;
    str++;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	3301      	adds	r3, #1
 8015894:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8015896:	8abb      	ldrh	r3, [r7, #20]
 8015898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801589c:	4293      	cmp	r3, r2
 801589e:	d0e9      	beq.n	8015874 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80158a0:	8abb      	ldrh	r3, [r7, #20]
 80158a2:	893a      	ldrh	r2, [r7, #8]
 80158a4:	8979      	ldrh	r1, [r7, #10]
 80158a6:	68f8      	ldr	r0, [r7, #12]
 80158a8:	f7ff ff84 	bl	80157b4 <u8g2_DrawGlyph>
 80158ac:	4603      	mov	r3, r0
 80158ae:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80158b6:	2b03      	cmp	r3, #3
 80158b8:	d81e      	bhi.n	80158f8 <u8g2_draw_string+0xa0>
 80158ba:	a201      	add	r2, pc, #4	; (adr r2, 80158c0 <u8g2_draw_string+0x68>)
 80158bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158c0:	080158d1 	.word	0x080158d1
 80158c4:	080158db 	.word	0x080158db
 80158c8:	080158e5 	.word	0x080158e5
 80158cc:	080158ef 	.word	0x080158ef
      {
	case 0:
	  x += delta;
 80158d0:	897a      	ldrh	r2, [r7, #10]
 80158d2:	8a7b      	ldrh	r3, [r7, #18]
 80158d4:	4413      	add	r3, r2
 80158d6:	817b      	strh	r3, [r7, #10]
	  break;
 80158d8:	e00e      	b.n	80158f8 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80158da:	893a      	ldrh	r2, [r7, #8]
 80158dc:	8a7b      	ldrh	r3, [r7, #18]
 80158de:	4413      	add	r3, r2
 80158e0:	813b      	strh	r3, [r7, #8]
	  break;
 80158e2:	e009      	b.n	80158f8 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80158e4:	897a      	ldrh	r2, [r7, #10]
 80158e6:	8a7b      	ldrh	r3, [r7, #18]
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	817b      	strh	r3, [r7, #10]
	  break;
 80158ec:	e004      	b.n	80158f8 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80158ee:	893a      	ldrh	r2, [r7, #8]
 80158f0:	8a7b      	ldrh	r3, [r7, #18]
 80158f2:	1ad3      	subs	r3, r2, r3
 80158f4:	813b      	strh	r3, [r7, #8]
	  break;
 80158f6:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80158f8:	8afa      	ldrh	r2, [r7, #22]
 80158fa:	8a7b      	ldrh	r3, [r7, #18]
 80158fc:	4413      	add	r3, r2
 80158fe:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8015900:	e7b8      	b.n	8015874 <u8g2_draw_string+0x1c>
      break;
 8015902:	bf00      	nop
    }
  }
  return sum;
 8015904:	8afb      	ldrh	r3, [r7, #22]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3718      	adds	r7, #24
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop

08015910 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	60f8      	str	r0, [r7, #12]
 8015918:	607b      	str	r3, [r7, #4]
 801591a:	460b      	mov	r3, r1
 801591c:	817b      	strh	r3, [r7, #10]
 801591e:	4613      	mov	r3, r2
 8015920:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	4a06      	ldr	r2, [pc, #24]	; (8015940 <u8g2_DrawUTF8+0x30>)
 8015926:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8015928:	893a      	ldrh	r2, [r7, #8]
 801592a:	8979      	ldrh	r1, [r7, #10]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	68f8      	ldr	r0, [r7, #12]
 8015930:	f7ff ff92 	bl	8015858 <u8g2_draw_string>
 8015934:	4603      	mov	r3, r0
}
 8015936:	4618      	mov	r0, r3
 8015938:	3710      	adds	r7, #16
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	080161bf 	.word	0x080161bf

08015944 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015950:	2b00      	cmp	r3, #0
 8015952:	d05d      	beq.n	8015a10 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8015972:	2b00      	cmp	r3, #0
 8015974:	d04d      	beq.n	8015a12 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 801597c:	2b01      	cmp	r3, #1
 801597e:	d11c      	bne.n	80159ba <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 801598c:	429a      	cmp	r2, r3
 801598e:	da05      	bge.n	801599c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80159a8:	429a      	cmp	r2, r3
 80159aa:	dd32      	ble.n	8015a12 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80159b8:	e02b      	b.n	8015a12 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80159c0:	461a      	mov	r2, r3
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80159c8:	4619      	mov	r1, r3
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80159d0:	440b      	add	r3, r1
 80159d2:	429a      	cmp	r2, r3
 80159d4:	da0d      	bge.n	80159f2 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80159dc:	b2da      	uxtb	r2, r3
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80159e4:	b2db      	uxtb	r3, r3
 80159e6:	4413      	add	r3, r2
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	b25a      	sxtb	r2, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80159fe:	429a      	cmp	r2, r3
 8015a00:	dd07      	ble.n	8015a12 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015a0e:	e000      	b.n	8015a12 <u8g2_UpdateRefHeight+0xce>
    return;
 8015a10:	bf00      	nop
  }  
}
 8015a12:	370c      	adds	r7, #12
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr

08015a1c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  return 0;
 8015a24:	2300      	movs	r3, #0
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	370c      	adds	r7, #12
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr
	...

08015a34 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8015a34:	b480      	push	{r7}
 8015a36:	b083      	sub	sp, #12
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	4a04      	ldr	r2, [pc, #16]	; (8015a50 <u8g2_SetFontPosBaseline+0x1c>)
 8015a40:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8015a42:	bf00      	nop
 8015a44:	370c      	adds	r7, #12
 8015a46:	46bd      	mov	sp, r7
 8015a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop
 8015a50:	08015a1d 	.word	0x08015a1d

08015a54 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a62:	683a      	ldr	r2, [r7, #0]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d00b      	beq.n	8015a80 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	683a      	ldr	r2, [r7, #0]
 8015a6c:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	3374      	adds	r3, #116	; 0x74
 8015a72:	6839      	ldr	r1, [r7, #0]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff fa97 	bl	8014fa8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f7ff ff62 	bl	8015944 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8015a80:	bf00      	nop
 8015a82:	3708      	adds	r7, #8
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8015a88:	b480      	push	{r7}
 8015a8a:	b087      	sub	sp, #28
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	60b9      	str	r1, [r7, #8]
 8015a92:	4611      	mov	r1, r2
 8015a94:	461a      	mov	r2, r3
 8015a96:	460b      	mov	r3, r1
 8015a98:	80fb      	strh	r3, [r7, #6]
 8015a9a:	4613      	mov	r3, r2
 8015a9c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	881b      	ldrh	r3, [r3, #0]
 8015aa2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8015aa4:	8afb      	ldrh	r3, [r7, #22]
 8015aa6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	881a      	ldrh	r2, [r3, #0]
 8015aac:	8abb      	ldrh	r3, [r7, #20]
 8015aae:	4413      	add	r3, r2
 8015ab0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8015ab2:	8afa      	ldrh	r2, [r7, #22]
 8015ab4:	8abb      	ldrh	r3, [r7, #20]
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d90b      	bls.n	8015ad2 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8015aba:	8afa      	ldrh	r2, [r7, #22]
 8015abc:	88bb      	ldrh	r3, [r7, #4]
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	d205      	bcs.n	8015ace <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8015ac2:	88bb      	ldrh	r3, [r7, #4]
 8015ac4:	82bb      	strh	r3, [r7, #20]
      b--;
 8015ac6:	8abb      	ldrh	r3, [r7, #20]
 8015ac8:	3b01      	subs	r3, #1
 8015aca:	82bb      	strh	r3, [r7, #20]
 8015acc:	e001      	b.n	8015ad2 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8015ace:	88fb      	ldrh	r3, [r7, #6]
 8015ad0:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8015ad2:	8afa      	ldrh	r2, [r7, #22]
 8015ad4:	88bb      	ldrh	r3, [r7, #4]
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d301      	bcc.n	8015ade <u8g2_clip_intersection2+0x56>
    return 0;
 8015ada:	2300      	movs	r3, #0
 8015adc:	e01c      	b.n	8015b18 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8015ade:	8aba      	ldrh	r2, [r7, #20]
 8015ae0:	88fb      	ldrh	r3, [r7, #6]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d801      	bhi.n	8015aea <u8g2_clip_intersection2+0x62>
    return 0;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	e016      	b.n	8015b18 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8015aea:	8afa      	ldrh	r2, [r7, #22]
 8015aec:	88fb      	ldrh	r3, [r7, #6]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d201      	bcs.n	8015af6 <u8g2_clip_intersection2+0x6e>
    a = c;
 8015af2:	88fb      	ldrh	r3, [r7, #6]
 8015af4:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8015af6:	8aba      	ldrh	r2, [r7, #20]
 8015af8:	88bb      	ldrh	r3, [r7, #4]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d901      	bls.n	8015b02 <u8g2_clip_intersection2+0x7a>
    b = d;
 8015afe:	88bb      	ldrh	r3, [r7, #4]
 8015b00:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	8afa      	ldrh	r2, [r7, #22]
 8015b06:	801a      	strh	r2, [r3, #0]
  b -= a;
 8015b08:	8aba      	ldrh	r2, [r7, #20]
 8015b0a:	8afb      	ldrh	r3, [r7, #22]
 8015b0c:	1ad3      	subs	r3, r2, r3
 8015b0e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	8aba      	ldrh	r2, [r7, #20]
 8015b14:	801a      	strh	r2, [r3, #0]
  return 1;
 8015b16:	2301      	movs	r3, #1
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	371c      	adds	r7, #28
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b22:	4770      	bx	lr

08015b24 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b24:	b590      	push	{r4, r7, lr}
 8015b26:	b087      	sub	sp, #28
 8015b28:	af02      	add	r7, sp, #8
 8015b2a:	60f8      	str	r0, [r7, #12]
 8015b2c:	4608      	mov	r0, r1
 8015b2e:	4611      	mov	r1, r2
 8015b30:	461a      	mov	r2, r3
 8015b32:	4603      	mov	r3, r0
 8015b34:	817b      	strh	r3, [r7, #10]
 8015b36:	460b      	mov	r3, r1
 8015b38:	813b      	strh	r3, [r7, #8]
 8015b3a:	4613      	mov	r3, r2
 8015b3c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015b42:	893a      	ldrh	r2, [r7, #8]
 8015b44:	1ad3      	subs	r3, r2, r3
 8015b46:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015b4c:	88f8      	ldrh	r0, [r7, #6]
 8015b4e:	893a      	ldrh	r2, [r7, #8]
 8015b50:	8979      	ldrh	r1, [r7, #10]
 8015b52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	4603      	mov	r3, r0
 8015b5a:	68f8      	ldr	r0, [r7, #12]
 8015b5c:	47a0      	blx	r4
}
 8015b5e:	bf00      	nop
 8015b60:	3714      	adds	r7, #20
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd90      	pop	{r4, r7, pc}

08015b66 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b66:	b590      	push	{r4, r7, lr}
 8015b68:	b087      	sub	sp, #28
 8015b6a:	af02      	add	r7, sp, #8
 8015b6c:	60f8      	str	r0, [r7, #12]
 8015b6e:	4608      	mov	r0, r1
 8015b70:	4611      	mov	r1, r2
 8015b72:	461a      	mov	r2, r3
 8015b74:	4603      	mov	r3, r0
 8015b76:	817b      	strh	r3, [r7, #10]
 8015b78:	460b      	mov	r3, r1
 8015b7a:	813b      	strh	r3, [r7, #8]
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d075      	beq.n	8015c76 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8015b8a:	88fb      	ldrh	r3, [r7, #6]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d072      	beq.n	8015c76 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8015b90:	88fb      	ldrh	r3, [r7, #6]
 8015b92:	2b01      	cmp	r3, #1
 8015b94:	d91a      	bls.n	8015bcc <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8015b96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b9a:	2b02      	cmp	r3, #2
 8015b9c:	d109      	bne.n	8015bb2 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8015b9e:	897a      	ldrh	r2, [r7, #10]
 8015ba0:	88fb      	ldrh	r3, [r7, #6]
 8015ba2:	1ad3      	subs	r3, r2, r3
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	817b      	strh	r3, [r7, #10]
	  x++;
 8015ba8:	897b      	ldrh	r3, [r7, #10]
 8015baa:	3301      	adds	r3, #1
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	817b      	strh	r3, [r7, #10]
 8015bb0:	e00c      	b.n	8015bcc <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8015bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bb6:	2b03      	cmp	r3, #3
 8015bb8:	d108      	bne.n	8015bcc <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8015bba:	893a      	ldrh	r2, [r7, #8]
 8015bbc:	88fb      	ldrh	r3, [r7, #6]
 8015bbe:	1ad3      	subs	r3, r2, r3
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	813b      	strh	r3, [r7, #8]
	  y++;
 8015bc4:	893b      	ldrh	r3, [r7, #8]
 8015bc6:	3301      	adds	r3, #1
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8015bcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bd0:	f003 0301 	and.w	r3, r3, #1
 8015bd4:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8015bd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d11a      	bne.n	8015c16 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015be6:	893b      	ldrh	r3, [r7, #8]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d83b      	bhi.n	8015c64 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8015bf2:	893b      	ldrh	r3, [r7, #8]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d937      	bls.n	8015c68 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c04:	1db9      	adds	r1, r7, #6
 8015c06:	f107 000a 	add.w	r0, r7, #10
 8015c0a:	f7ff ff3d 	bl	8015a88 <u8g2_clip_intersection2>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d11a      	bne.n	8015c4a <u8g2_DrawHVLine+0xe4>
	  return;
 8015c14:	e02f      	b.n	8015c76 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c1c:	897b      	ldrh	r3, [r7, #10]
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d824      	bhi.n	8015c6c <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015c28:	897b      	ldrh	r3, [r7, #10]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d920      	bls.n	8015c70 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015c3a:	1db9      	adds	r1, r7, #6
 8015c3c:	f107 0008 	add.w	r0, r7, #8
 8015c40:	f7ff ff22 	bl	8015a88 <u8g2_clip_intersection2>
 8015c44:	4603      	mov	r3, r0
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d014      	beq.n	8015c74 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c4e:	689c      	ldr	r4, [r3, #8]
 8015c50:	8979      	ldrh	r1, [r7, #10]
 8015c52:	893a      	ldrh	r2, [r7, #8]
 8015c54:	88f8      	ldrh	r0, [r7, #6]
 8015c56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	68f8      	ldr	r0, [r7, #12]
 8015c60:	47a0      	blx	r4
 8015c62:	e008      	b.n	8015c76 <u8g2_DrawHVLine+0x110>
	  return;
 8015c64:	bf00      	nop
 8015c66:	e006      	b.n	8015c76 <u8g2_DrawHVLine+0x110>
	  return;
 8015c68:	bf00      	nop
 8015c6a:	e004      	b.n	8015c76 <u8g2_DrawHVLine+0x110>
	  return;
 8015c6c:	bf00      	nop
 8015c6e:	e002      	b.n	8015c76 <u8g2_DrawHVLine+0x110>
	  return;
 8015c70:	bf00      	nop
 8015c72:	e000      	b.n	8015c76 <u8g2_DrawHVLine+0x110>
	  return;
 8015c74:	bf00      	nop
    }
}
 8015c76:	3714      	adds	r7, #20
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd90      	pop	{r4, r7, pc}

08015c7c <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af02      	add	r7, sp, #8
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	460b      	mov	r3, r1
 8015c86:	807b      	strh	r3, [r7, #2]
 8015c88:	4613      	mov	r3, r2
 8015c8a:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015c92:	883a      	ldrh	r2, [r7, #0]
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d31a      	bcc.n	8015cce <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015c9e:	883a      	ldrh	r2, [r7, #0]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d216      	bcs.n	8015cd2 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015caa:	887a      	ldrh	r2, [r7, #2]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d312      	bcc.n	8015cd6 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015cb6:	887a      	ldrh	r2, [r7, #2]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d20e      	bcs.n	8015cda <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8015cbc:	883a      	ldrh	r2, [r7, #0]
 8015cbe:	8879      	ldrh	r1, [r7, #2]
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	9300      	str	r3, [sp, #0]
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f7ff ff4d 	bl	8015b66 <u8g2_DrawHVLine>
 8015ccc:	e006      	b.n	8015cdc <u8g2_DrawPixel+0x60>
    return;
 8015cce:	bf00      	nop
 8015cd0:	e004      	b.n	8015cdc <u8g2_DrawPixel+0x60>
    return;
 8015cd2:	bf00      	nop
 8015cd4:	e002      	b.n	8015cdc <u8g2_DrawPixel+0x60>
    return;
 8015cd6:	bf00      	nop
 8015cd8:	e000      	b.n	8015cdc <u8g2_DrawPixel+0x60>
    return;
 8015cda:	bf00      	nop
}
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8015ce2:	b490      	push	{r4, r7}
 8015ce4:	b082      	sub	sp, #8
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	4604      	mov	r4, r0
 8015cea:	4608      	mov	r0, r1
 8015cec:	4611      	mov	r1, r2
 8015cee:	461a      	mov	r2, r3
 8015cf0:	4623      	mov	r3, r4
 8015cf2:	80fb      	strh	r3, [r7, #6]
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	80bb      	strh	r3, [r7, #4]
 8015cf8:	460b      	mov	r3, r1
 8015cfa:	807b      	strh	r3, [r7, #2]
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8015d00:	887a      	ldrh	r2, [r7, #2]
 8015d02:	88bb      	ldrh	r3, [r7, #4]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d20d      	bcs.n	8015d24 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d08:	883a      	ldrh	r2, [r7, #0]
 8015d0a:	88fb      	ldrh	r3, [r7, #6]
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d901      	bls.n	8015d14 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8015d10:	2301      	movs	r3, #1
 8015d12:	e014      	b.n	8015d3e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015d14:	887a      	ldrh	r2, [r7, #2]
 8015d16:	883b      	ldrh	r3, [r7, #0]
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d901      	bls.n	8015d20 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	e00e      	b.n	8015d3e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015d20:	2300      	movs	r3, #0
 8015d22:	e00c      	b.n	8015d3e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d24:	883a      	ldrh	r2, [r7, #0]
 8015d26:	88fb      	ldrh	r3, [r7, #6]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d907      	bls.n	8015d3c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8015d2c:	887a      	ldrh	r2, [r7, #2]
 8015d2e:	883b      	ldrh	r3, [r7, #0]
 8015d30:	429a      	cmp	r2, r3
 8015d32:	d901      	bls.n	8015d38 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015d34:	2301      	movs	r3, #1
 8015d36:	e002      	b.n	8015d3e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	e000      	b.n	8015d3e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8015d3c:	2300      	movs	r3, #0
    }
  }
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3708      	adds	r7, #8
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bc90      	pop	{r4, r7}
 8015d46:	4770      	bx	lr

08015d48 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b084      	sub	sp, #16
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	4608      	mov	r0, r1
 8015d52:	4611      	mov	r1, r2
 8015d54:	461a      	mov	r2, r3
 8015d56:	4603      	mov	r3, r0
 8015d58:	817b      	strh	r3, [r7, #10]
 8015d5a:	460b      	mov	r3, r1
 8015d5c:	813b      	strh	r3, [r7, #8]
 8015d5e:	4613      	mov	r3, r2
 8015d60:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8015d6e:	8b3b      	ldrh	r3, [r7, #24]
 8015d70:	893a      	ldrh	r2, [r7, #8]
 8015d72:	f7ff ffb6 	bl	8015ce2 <u8g2_is_intersection_decision_tree>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d101      	bne.n	8015d80 <u8g2_IsIntersection+0x38>
    return 0; 
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	e00a      	b.n	8015d96 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8015d8c:	88fb      	ldrh	r3, [r7, #6]
 8015d8e:	897a      	ldrh	r2, [r7, #10]
 8015d90:	f7ff ffa7 	bl	8015ce2 <u8g2_is_intersection_decision_tree>
 8015d94:	4603      	mov	r3, r0
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}

08015d9e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015d9e:	b480      	push	{r7}
 8015da0:	b089      	sub	sp, #36	; 0x24
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	60f8      	str	r0, [r7, #12]
 8015da6:	4608      	mov	r0, r1
 8015da8:	4611      	mov	r1, r2
 8015daa:	461a      	mov	r2, r3
 8015dac:	4603      	mov	r3, r0
 8015dae:	817b      	strh	r3, [r7, #10]
 8015db0:	460b      	mov	r3, r1
 8015db2:	813b      	strh	r3, [r7, #8]
 8015db4:	4613      	mov	r3, r2
 8015db6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8015db8:	893b      	ldrh	r3, [r7, #8]
 8015dba:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8015dbc:	7efb      	ldrb	r3, [r7, #27]
 8015dbe:	f003 0307 	and.w	r3, r3, #7
 8015dc2:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8015dc8:	7e3a      	ldrb	r2, [r7, #24]
 8015dca:	7efb      	ldrb	r3, [r7, #27]
 8015dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8015dd0:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015de0:	2b01      	cmp	r3, #1
 8015de2:	d801      	bhi.n	8015de8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8015de4:	7e3b      	ldrb	r3, [r7, #24]
 8015de6:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	d001      	beq.n	8015df6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015df2:	7e3b      	ldrb	r3, [r7, #24]
 8015df4:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015df6:	893b      	ldrh	r3, [r7, #8]
 8015df8:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8015dfa:	8afb      	ldrh	r3, [r7, #22]
 8015dfc:	f023 0307 	bic.w	r3, r3, #7
 8015e00:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	7c1b      	ldrb	r3, [r3, #16]
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	8afa      	ldrh	r2, [r7, #22]
 8015e0c:	fb12 f303 	smulbb	r3, r2, r3
 8015e10:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e16:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8015e18:	8afb      	ldrh	r3, [r7, #22]
 8015e1a:	69fa      	ldr	r2, [r7, #28]
 8015e1c:	4413      	add	r3, r2
 8015e1e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8015e20:	897b      	ldrh	r3, [r7, #10]
 8015e22:	69fa      	ldr	r2, [r7, #28]
 8015e24:	4413      	add	r3, r2
 8015e26:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8015e28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d117      	bne.n	8015e60 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	781a      	ldrb	r2, [r3, #0]
 8015e34:	7ebb      	ldrb	r3, [r7, #26]
 8015e36:	4313      	orrs	r3, r2
 8015e38:	b2da      	uxtb	r2, r3
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8015e3e:	69fb      	ldr	r3, [r7, #28]
 8015e40:	781a      	ldrb	r2, [r3, #0]
 8015e42:	7e7b      	ldrb	r3, [r7, #25]
 8015e44:	4053      	eors	r3, r2
 8015e46:	b2da      	uxtb	r2, r3
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	701a      	strb	r2, [r3, #0]
	ptr++;
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	3301      	adds	r3, #1
 8015e50:	61fb      	str	r3, [r7, #28]
	len--;
 8015e52:	88fb      	ldrh	r3, [r7, #6]
 8015e54:	3b01      	subs	r3, #1
 8015e56:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8015e58:	88fb      	ldrh	r3, [r7, #6]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d1e8      	bne.n	8015e30 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8015e5e:	e038      	b.n	8015ed2 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8015e60:	69fb      	ldr	r3, [r7, #28]
 8015e62:	781a      	ldrb	r2, [r3, #0]
 8015e64:	7ebb      	ldrb	r3, [r7, #26]
 8015e66:	4313      	orrs	r3, r2
 8015e68:	b2da      	uxtb	r2, r3
 8015e6a:	69fb      	ldr	r3, [r7, #28]
 8015e6c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8015e6e:	69fb      	ldr	r3, [r7, #28]
 8015e70:	781a      	ldrb	r2, [r3, #0]
 8015e72:	7e7b      	ldrb	r3, [r7, #25]
 8015e74:	4053      	eors	r3, r2
 8015e76:	b2da      	uxtb	r2, r3
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8015e7c:	7efb      	ldrb	r3, [r7, #27]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8015e82:	7efb      	ldrb	r3, [r7, #27]
 8015e84:	f003 0307 	and.w	r3, r3, #7
 8015e88:	76fb      	strb	r3, [r7, #27]
      len--;
 8015e8a:	88fb      	ldrh	r3, [r7, #6]
 8015e8c:	3b01      	subs	r3, #1
 8015e8e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8015e90:	7efb      	ldrb	r3, [r7, #27]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d114      	bne.n	8015ec0 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	4413      	add	r3, r2
 8015ea0:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015ea8:	2b01      	cmp	r3, #1
 8015eaa:	d801      	bhi.n	8015eb0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8015eac:	2301      	movs	r3, #1
 8015eae:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015eb6:	2b01      	cmp	r3, #1
 8015eb8:	d008      	beq.n	8015ecc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	767b      	strb	r3, [r7, #25]
 8015ebe:	e005      	b.n	8015ecc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8015ec0:	7ebb      	ldrb	r3, [r7, #26]
 8015ec2:	005b      	lsls	r3, r3, #1
 8015ec4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8015ec6:	7e7b      	ldrb	r3, [r7, #25]
 8015ec8:	005b      	lsls	r3, r3, #1
 8015eca:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8015ecc:	88fb      	ldrh	r3, [r7, #6]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d1c6      	bne.n	8015e60 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8015ed2:	bf00      	nop
 8015ed4:	3724      	adds	r7, #36	; 0x24
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015edc:	4770      	bx	lr

08015ede <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015ede:	b580      	push	{r7, lr}
 8015ee0:	b082      	sub	sp, #8
 8015ee2:	af00      	add	r7, sp, #0
 8015ee4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015efc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	4798      	blx	r3
}
 8015f14:	bf00      	nop
 8015f16:	3708      	adds	r7, #8
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	603b      	str	r3, [r7, #0]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	683a      	ldr	r2, [r7, #0]
 8015f36:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	79fa      	ldrb	r2, [r7, #7]
 8015f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2200      	movs	r2, #0
 8015f52:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	2201      	movs	r2, #1
 8015f62:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2201      	movs	r2, #1
 8015f6a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	69ba      	ldr	r2, [r7, #24]
 8015f72:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	68f8      	ldr	r0, [r7, #12]
 8015f7c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015f7e:	68f8      	ldr	r0, [r7, #12]
 8015f80:	f7ff ffad 	bl	8015ede <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015f84:	68f8      	ldr	r0, [r7, #12]
 8015f86:	f7ff fd55 	bl	8015a34 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8015f92:	bf00      	nop
 8015f94:	3710      	adds	r7, #16
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}

08015f9a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8015f9a:	b480      	push	{r7}
 8015f9c:	b085      	sub	sp, #20
 8015f9e:	af00      	add	r7, sp, #0
 8015fa0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fae:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015fb0:	89fb      	ldrh	r3, [r7, #14]
 8015fb2:	00db      	lsls	r3, r3, #3
 8015fb4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	89fa      	ldrh	r2, [r7, #14]
 8015fba:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	7c1b      	ldrb	r3, [r3, #16]
 8015fc0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8015fc2:	89fb      	ldrh	r3, [r7, #14]
 8015fc4:	00db      	lsls	r3, r3, #3
 8015fc6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	89fa      	ldrh	r2, [r7, #14]
 8015fcc:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015fd4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015fd6:	89fb      	ldrh	r3, [r7, #14]
 8015fd8:	00db      	lsls	r3, r3, #3
 8015fda:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	89fa      	ldrh	r2, [r7, #14]
 8015fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fe8:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8015fea:	89fb      	ldrh	r3, [r7, #14]
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8015ff2:	4413      	add	r3, r2
 8015ff4:	68ba      	ldr	r2, [r7, #8]
 8015ff6:	7c52      	ldrb	r2, [r2, #17]
 8015ff8:	4293      	cmp	r3, r2
 8015ffa:	dd08      	ble.n	801600e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	7c5b      	ldrb	r3, [r3, #17]
 8016000:	b29a      	uxth	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016008:	b29b      	uxth	r3, r3
 801600a:	1ad3      	subs	r3, r2, r3
 801600c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 801600e:	89fb      	ldrh	r3, [r7, #14]
 8016010:	00db      	lsls	r3, r3, #3
 8016012:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8016030:	89fb      	ldrh	r3, [r7, #14]
 8016032:	4413      	add	r3, r2
 8016034:	b29a      	uxth	r2, r3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	8a9a      	ldrh	r2, [r3, #20]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	8ada      	ldrh	r2, [r3, #22]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8016050:	bf00      	nop
 8016052:	3714      	adds	r7, #20
 8016054:	46bd      	mov	sp, r7
 8016056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605a:	4770      	bx	lr

0801605c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b084      	sub	sp, #16
 8016060:	af02      	add	r7, sp, #8
 8016062:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	4603      	mov	r3, r0
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7ff fe61 	bl	8015d48 <u8g2_IsIntersection>
 8016086:	4603      	mov	r3, r0
 8016088:	2b00      	cmp	r3, #0
 801608a:	d104      	bne.n	8016096 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2200      	movs	r2, #0
 8016090:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8016094:	e03b      	b.n	801610e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2201      	movs	r2, #1
 801609a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80160aa:	429a      	cmp	r2, r3
 80160ac:	d205      	bcs.n	80160ba <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d905      	bls.n	80160d6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80160e2:	429a      	cmp	r2, r3
 80160e4:	d205      	bcs.n	80160f2 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80160fe:	429a      	cmp	r2, r3
 8016100:	d905      	bls.n	801610e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 801610e:	bf00      	nop
 8016110:	3708      	adds	r7, #8
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}

08016116 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8016116:	b580      	push	{r7, lr}
 8016118:	b082      	sub	sp, #8
 801611a:	af00      	add	r7, sp, #0
 801611c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f7ff ff3b 	bl	8015f9a <u8g2_update_dimension_common>
}
 8016124:	bf00      	nop
 8016126:	3708      	adds	r7, #8
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}

0801612c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 801612c:	b580      	push	{r7, lr}
 801612e:	b082      	sub	sp, #8
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2200      	movs	r2, #0
 8016138:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f7ff ff7b 	bl	801605c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8016166:	bf00      	nop
 8016168:	3708      	adds	r7, #8
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}

0801616e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 801616e:	b580      	push	{r7, lr}
 8016170:	b086      	sub	sp, #24
 8016172:	af02      	add	r7, sp, #8
 8016174:	60f8      	str	r0, [r7, #12]
 8016176:	4608      	mov	r0, r1
 8016178:	4611      	mov	r1, r2
 801617a:	461a      	mov	r2, r3
 801617c:	4603      	mov	r3, r0
 801617e:	817b      	strh	r3, [r7, #10]
 8016180:	460b      	mov	r3, r1
 8016182:	813b      	strh	r3, [r7, #8]
 8016184:	4613      	mov	r3, r2
 8016186:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8016188:	88f8      	ldrh	r0, [r7, #6]
 801618a:	893a      	ldrh	r2, [r7, #8]
 801618c:	8979      	ldrh	r1, [r7, #10]
 801618e:	7e3b      	ldrb	r3, [r7, #24]
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	4603      	mov	r3, r0
 8016194:	68f8      	ldr	r0, [r7, #12]
 8016196:	f7ff fcc5 	bl	8015b24 <u8g2_draw_hv_line_2dir>
}
 801619a:	bf00      	nop
 801619c:	3710      	adds	r7, #16
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}

080161a2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80161a2:	b480      	push	{r7}
 80161a4:	b083      	sub	sp, #12
 80161a6:	af00      	add	r7, sp, #0
 80161a8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2200      	movs	r2, #0
 80161ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80161b2:	bf00      	nop
 80161b4:	370c      	adds	r7, #12
 80161b6:	46bd      	mov	sp, r7
 80161b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161bc:	4770      	bx	lr

080161be <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80161be:	b480      	push	{r7}
 80161c0:	b083      	sub	sp, #12
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	6078      	str	r0, [r7, #4]
 80161c6:	460b      	mov	r3, r1
 80161c8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80161ca:	78fb      	ldrb	r3, [r7, #3]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d002      	beq.n	80161d6 <u8x8_utf8_next+0x18>
 80161d0:	78fb      	ldrb	r3, [r7, #3]
 80161d2:	2b0a      	cmp	r3, #10
 80161d4:	d102      	bne.n	80161dc <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80161d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80161da:	e06e      	b.n	80162ba <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d145      	bne.n	8016272 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80161e6:	78fb      	ldrb	r3, [r7, #3]
 80161e8:	2bfb      	cmp	r3, #251	; 0xfb
 80161ea:	d908      	bls.n	80161fe <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2205      	movs	r2, #5
 80161f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80161f4:	78fb      	ldrb	r3, [r7, #3]
 80161f6:	f003 0301 	and.w	r3, r3, #1
 80161fa:	70fb      	strb	r3, [r7, #3]
 80161fc:	e032      	b.n	8016264 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80161fe:	78fb      	ldrb	r3, [r7, #3]
 8016200:	2bf7      	cmp	r3, #247	; 0xf7
 8016202:	d908      	bls.n	8016216 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2204      	movs	r2, #4
 8016208:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 801620c:	78fb      	ldrb	r3, [r7, #3]
 801620e:	f003 0303 	and.w	r3, r3, #3
 8016212:	70fb      	strb	r3, [r7, #3]
 8016214:	e026      	b.n	8016264 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8016216:	78fb      	ldrb	r3, [r7, #3]
 8016218:	2bef      	cmp	r3, #239	; 0xef
 801621a:	d908      	bls.n	801622e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2203      	movs	r2, #3
 8016220:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8016224:	78fb      	ldrb	r3, [r7, #3]
 8016226:	f003 0307 	and.w	r3, r3, #7
 801622a:	70fb      	strb	r3, [r7, #3]
 801622c:	e01a      	b.n	8016264 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 801622e:	78fb      	ldrb	r3, [r7, #3]
 8016230:	2bdf      	cmp	r3, #223	; 0xdf
 8016232:	d908      	bls.n	8016246 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2202      	movs	r2, #2
 8016238:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 801623c:	78fb      	ldrb	r3, [r7, #3]
 801623e:	f003 030f 	and.w	r3, r3, #15
 8016242:	70fb      	strb	r3, [r7, #3]
 8016244:	e00e      	b.n	8016264 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8016246:	78fb      	ldrb	r3, [r7, #3]
 8016248:	2bbf      	cmp	r3, #191	; 0xbf
 801624a:	d908      	bls.n	801625e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2201      	movs	r2, #1
 8016250:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8016254:	78fb      	ldrb	r3, [r7, #3]
 8016256:	f003 031f 	and.w	r3, r3, #31
 801625a:	70fb      	strb	r3, [r7, #3]
 801625c:	e002      	b.n	8016264 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 801625e:	78fb      	ldrb	r3, [r7, #3]
 8016260:	b29b      	uxth	r3, r3
 8016262:	e02a      	b.n	80162ba <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8016264:	78fb      	ldrb	r3, [r7, #3]
 8016266:	b29a      	uxth	r2, r3
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 801626c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8016270:	e023      	b.n	80162ba <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016278:	3b01      	subs	r3, #1
 801627a:	b2da      	uxtb	r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	8c1b      	ldrh	r3, [r3, #32]
 8016286:	019b      	lsls	r3, r3, #6
 8016288:	b29a      	uxth	r2, r3
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 801628e:	78fb      	ldrb	r3, [r7, #3]
 8016290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016294:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	8c1a      	ldrh	r2, [r3, #32]
 801629a:	78fb      	ldrb	r3, [r7, #3]
 801629c:	b29b      	uxth	r3, r3
 801629e:	4313      	orrs	r3, r2
 80162a0:	b29a      	uxth	r2, r3
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d002      	beq.n	80162b6 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80162b0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162b4:	e001      	b.n	80162ba <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	8c1b      	ldrh	r3, [r3, #32]
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	370c      	adds	r7, #12
 80162be:	46bd      	mov	sp, r7
 80162c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c4:	4770      	bx	lr

080162c6 <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80162c6:	b590      	push	{r4, r7, lr}
 80162c8:	b083      	sub	sp, #12
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
 80162ce:	460b      	mov	r3, r1
 80162d0:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	691c      	ldr	r4, [r3, #16]
 80162d6:	78fa      	ldrb	r2, [r7, #3]
 80162d8:	2300      	movs	r3, #0
 80162da:	2120      	movs	r1, #32
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	47a0      	blx	r4
 80162e0:	4603      	mov	r3, r0
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	370c      	adds	r7, #12
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd90      	pop	{r4, r7, pc}

080162ea <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80162ea:	b590      	push	{r4, r7, lr}
 80162ec:	b085      	sub	sp, #20
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	60f8      	str	r0, [r7, #12]
 80162f2:	460b      	mov	r3, r1
 80162f4:	607a      	str	r2, [r7, #4]
 80162f6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	691c      	ldr	r4, [r3, #16]
 80162fc:	7afa      	ldrb	r2, [r7, #11]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	2117      	movs	r1, #23
 8016302:	68f8      	ldr	r0, [r7, #12]
 8016304:	47a0      	blx	r4
 8016306:	4603      	mov	r3, r0
}
 8016308:	4618      	mov	r0, r3
 801630a:	3714      	adds	r7, #20
 801630c:	46bd      	mov	sp, r7
 801630e:	bd90      	pop	{r4, r7, pc}

08016310 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	460b      	mov	r3, r1
 801631a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 801631c:	1cfb      	adds	r3, r7, #3
 801631e:	461a      	mov	r2, r3
 8016320:	2101      	movs	r1, #1
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7ff ffe1 	bl	80162ea <u8x8_byte_SendBytes>
 8016328:	4603      	mov	r3, r0
}
 801632a:	4618      	mov	r0, r3
 801632c:	3708      	adds	r7, #8
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}

08016332 <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8016332:	b590      	push	{r4, r7, lr}
 8016334:	b083      	sub	sp, #12
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	460b      	mov	r3, r1
 801633c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	68dc      	ldr	r4, [r3, #12]
 8016342:	78fa      	ldrb	r2, [r7, #3]
 8016344:	2300      	movs	r3, #0
 8016346:	2115      	movs	r1, #21
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	47a0      	blx	r4
 801634c:	4603      	mov	r3, r0
}
 801634e:	4618      	mov	r0, r3
 8016350:	370c      	adds	r7, #12
 8016352:	46bd      	mov	sp, r7
 8016354:	bd90      	pop	{r4, r7, pc}

08016356 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8016356:	b590      	push	{r4, r7, lr}
 8016358:	b083      	sub	sp, #12
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
 801635e:	460b      	mov	r3, r1
 8016360:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	68dc      	ldr	r4, [r3, #12]
 8016366:	78fa      	ldrb	r2, [r7, #3]
 8016368:	2300      	movs	r3, #0
 801636a:	2116      	movs	r1, #22
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	47a0      	blx	r4
 8016370:	4603      	mov	r3, r0
}
 8016372:	4618      	mov	r0, r3
 8016374:	370c      	adds	r7, #12
 8016376:	46bd      	mov	sp, r7
 8016378:	bd90      	pop	{r4, r7, pc}

0801637a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 801637a:	b590      	push	{r4, r7, lr}
 801637c:	b085      	sub	sp, #20
 801637e:	af00      	add	r7, sp, #0
 8016380:	60f8      	str	r0, [r7, #12]
 8016382:	460b      	mov	r3, r1
 8016384:	607a      	str	r2, [r7, #4]
 8016386:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	68dc      	ldr	r4, [r3, #12]
 801638c:	7afa      	ldrb	r2, [r7, #11]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2117      	movs	r1, #23
 8016392:	68f8      	ldr	r0, [r7, #12]
 8016394:	47a0      	blx	r4
 8016396:	4603      	mov	r3, r0
}
 8016398:	4618      	mov	r0, r3
 801639a:	3714      	adds	r7, #20
 801639c:	46bd      	mov	sp, r7
 801639e:	bd90      	pop	{r4, r7, pc}

080163a0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80163a0:	b590      	push	{r4, r7, lr}
 80163a2:	b083      	sub	sp, #12
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	68dc      	ldr	r4, [r3, #12]
 80163ac:	2300      	movs	r3, #0
 80163ae:	2200      	movs	r2, #0
 80163b0:	2118      	movs	r1, #24
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	47a0      	blx	r4
 80163b6:	4603      	mov	r3, r0
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	370c      	adds	r7, #12
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd90      	pop	{r4, r7, pc}

080163c0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80163c0:	b590      	push	{r4, r7, lr}
 80163c2:	b083      	sub	sp, #12
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	68dc      	ldr	r4, [r3, #12]
 80163cc:	2300      	movs	r3, #0
 80163ce:	2200      	movs	r2, #0
 80163d0:	2119      	movs	r1, #25
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	47a0      	blx	r4
 80163d6:	4603      	mov	r3, r0
}
 80163d8:	4618      	mov	r0, r3
 80163da:	370c      	adds	r7, #12
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd90      	pop	{r4, r7, pc}

080163e0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80163e0:	b590      	push	{r4, r7, lr}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	73fb      	strb	r3, [r7, #15]
    data++;
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	3301      	adds	r3, #1
 80163f4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80163f6:	7bfb      	ldrb	r3, [r7, #15]
 80163f8:	2bfe      	cmp	r3, #254	; 0xfe
 80163fa:	d031      	beq.n	8016460 <u8x8_cad_SendSequence+0x80>
 80163fc:	2bfe      	cmp	r3, #254	; 0xfe
 80163fe:	dc3d      	bgt.n	801647c <u8x8_cad_SendSequence+0x9c>
 8016400:	2b19      	cmp	r3, #25
 8016402:	dc3b      	bgt.n	801647c <u8x8_cad_SendSequence+0x9c>
 8016404:	2b18      	cmp	r3, #24
 8016406:	da23      	bge.n	8016450 <u8x8_cad_SendSequence+0x70>
 8016408:	2b16      	cmp	r3, #22
 801640a:	dc02      	bgt.n	8016412 <u8x8_cad_SendSequence+0x32>
 801640c:	2b15      	cmp	r3, #21
 801640e:	da03      	bge.n	8016418 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8016410:	e034      	b.n	801647c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8016412:	2b17      	cmp	r3, #23
 8016414:	d00e      	beq.n	8016434 <u8x8_cad_SendSequence+0x54>
	return;
 8016416:	e031      	b.n	801647c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	68dc      	ldr	r4, [r3, #12]
 8016422:	7bba      	ldrb	r2, [r7, #14]
 8016424:	7bf9      	ldrb	r1, [r7, #15]
 8016426:	2300      	movs	r3, #0
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	47a0      	blx	r4
	  data++;
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	3301      	adds	r3, #1
 8016430:	603b      	str	r3, [r7, #0]
	  break;
 8016432:	e022      	b.n	801647a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 801643a:	f107 030e 	add.w	r3, r7, #14
 801643e:	461a      	mov	r2, r3
 8016440:	2101      	movs	r1, #1
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f7ff ff99 	bl	801637a <u8x8_cad_SendData>
	  data++;
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	3301      	adds	r3, #1
 801644c:	603b      	str	r3, [r7, #0]
	  break;
 801644e:	e014      	b.n	801647a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	68dc      	ldr	r4, [r3, #12]
 8016454:	7bf9      	ldrb	r1, [r7, #15]
 8016456:	2300      	movs	r3, #0
 8016458:	2200      	movs	r2, #0
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	47a0      	blx	r4
	  break;
 801645e:	e00c      	b.n	801647a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8016460:	683b      	ldr	r3, [r7, #0]
 8016462:	781b      	ldrb	r3, [r3, #0]
 8016464:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8016466:	7bbb      	ldrb	r3, [r7, #14]
 8016468:	461a      	mov	r2, r3
 801646a:	2129      	movs	r1, #41	; 0x29
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f000 f9ec 	bl	801684a <u8x8_gpio_call>
	  data++;
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	3301      	adds	r3, #1
 8016476:	603b      	str	r3, [r7, #0]
	  break;
 8016478:	bf00      	nop
    cmd = *data;
 801647a:	e7b6      	b.n	80163ea <u8x8_cad_SendSequence+0xa>
	return;
 801647c:	bf00      	nop
    }
  }
}
 801647e:	3714      	adds	r7, #20
 8016480:	46bd      	mov	sp, r7
 8016482:	bd90      	pop	{r4, r7, pc}

08016484 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8016484:	b590      	push	{r4, r7, lr}
 8016486:	b085      	sub	sp, #20
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	607b      	str	r3, [r7, #4]
 801648e:	460b      	mov	r3, r1
 8016490:	72fb      	strb	r3, [r7, #11]
 8016492:	4613      	mov	r3, r2
 8016494:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8016496:	7afb      	ldrb	r3, [r7, #11]
 8016498:	3b14      	subs	r3, #20
 801649a:	2b05      	cmp	r3, #5
 801649c:	d82f      	bhi.n	80164fe <u8x8_cad_011+0x7a>
 801649e:	a201      	add	r2, pc, #4	; (adr r2, 80164a4 <u8x8_cad_011+0x20>)
 80164a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164a4:	080164ed 	.word	0x080164ed
 80164a8:	080164bd 	.word	0x080164bd
 80164ac:	080164d1 	.word	0x080164d1
 80164b0:	080164e5 	.word	0x080164e5
 80164b4:	080164ed 	.word	0x080164ed
 80164b8:	080164ed 	.word	0x080164ed
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80164bc:	2100      	movs	r1, #0
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	f7ff ff01 	bl	80162c6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80164c4:	7abb      	ldrb	r3, [r7, #10]
 80164c6:	4619      	mov	r1, r3
 80164c8:	68f8      	ldr	r0, [r7, #12]
 80164ca:	f7ff ff21 	bl	8016310 <u8x8_byte_SendByte>
      break;
 80164ce:	e018      	b.n	8016502 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 80164d0:	2101      	movs	r1, #1
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f7ff fef7 	bl	80162c6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80164d8:	7abb      	ldrb	r3, [r7, #10]
 80164da:	4619      	mov	r1, r3
 80164dc:	68f8      	ldr	r0, [r7, #12]
 80164de:	f7ff ff17 	bl	8016310 <u8x8_byte_SendByte>
      break;
 80164e2:	e00e      	b.n	8016502 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80164e4:	2101      	movs	r1, #1
 80164e6:	68f8      	ldr	r0, [r7, #12]
 80164e8:	f7ff feed 	bl	80162c6 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	691c      	ldr	r4, [r3, #16]
 80164f0:	7aba      	ldrb	r2, [r7, #10]
 80164f2:	7af9      	ldrb	r1, [r7, #11]
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	68f8      	ldr	r0, [r7, #12]
 80164f8:	47a0      	blx	r4
 80164fa:	4603      	mov	r3, r0
 80164fc:	e002      	b.n	8016504 <u8x8_cad_011+0x80>
    default:
      return 0;
 80164fe:	2300      	movs	r3, #0
 8016500:	e000      	b.n	8016504 <u8x8_cad_011+0x80>
  }
  return 1;
 8016502:	2301      	movs	r3, #1
}
 8016504:	4618      	mov	r0, r3
 8016506:	3714      	adds	r7, #20
 8016508:	46bd      	mov	sp, r7
 801650a:	bd90      	pop	{r4, r7, pc}

0801650c <u8x8_d_uc1638_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1638_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b086      	sub	sp, #24
 8016510:	af00      	add	r7, sp, #0
 8016512:	60f8      	str	r0, [r7, #12]
 8016514:	607b      	str	r3, [r7, #4]
 8016516:	460b      	mov	r3, r1
 8016518:	72fb      	strb	r3, [r7, #11]
 801651a:	4613      	mov	r3, r2
 801651c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 801651e:	7afb      	ldrb	r3, [r7, #11]
 8016520:	3b0b      	subs	r3, #11
 8016522:	2b04      	cmp	r3, #4
 8016524:	f200 809e 	bhi.w	8016664 <u8x8_d_uc1638_common+0x158>
 8016528:	a201      	add	r2, pc, #4	; (adr r2, 8016530 <u8x8_d_uc1638_common+0x24>)
 801652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801652e:	bf00      	nop
 8016530:	080165f9 	.word	0x080165f9
 8016534:	08016665 	.word	0x08016665
 8016538:	08016613 	.word	0x08016613
 801653c:	08016645 	.word	0x08016645
 8016540:	08016545 	.word	0x08016545
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8016544:	68f8      	ldr	r0, [r7, #12]
 8016546:	f7ff ff2b 	bl	80163a0 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	795b      	ldrb	r3, [r3, #5]
 801654e:	75fb      	strb	r3, [r7, #23]
	  x += u8x8->x_offset & 15; //I find this string in the new version
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8016556:	f003 030f 	and.w	r3, r3, #15
 801655a:	b2da      	uxtb	r2, r3
 801655c:	7dfb      	ldrb	r3, [r7, #23]
 801655e:	4413      	add	r3, r2
 8016560:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8016562:	7dfb      	ldrb	r3, [r7, #23]
 8016564:	00db      	lsls	r3, r3, #3
 8016566:	75fb      	strb	r3, [r7, #23]

      u8x8_cad_SendCmd(u8x8, 0x004);  /* UC1638 */
 8016568:	2104      	movs	r1, #4
 801656a:	68f8      	ldr	r0, [r7, #12]
 801656c:	f7ff fee1 	bl	8016332 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, x);
 8016570:	7dfb      	ldrb	r3, [r7, #23]
 8016572:	4619      	mov	r1, r3
 8016574:	68f8      	ldr	r0, [r7, #12]
 8016576:	f7ff feee 	bl	8016356 <u8x8_cad_SendArg>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	799b      	ldrb	r3, [r3, #6]
 801657e:	75bb      	strb	r3, [r7, #22]
	  y += u8x8->x_offset >> 4;
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8016586:	091b      	lsrs	r3, r3, #4
 8016588:	b2da      	uxtb	r2, r3
 801658a:	7dbb      	ldrb	r3, [r7, #22]
 801658c:	4413      	add	r3, r2
 801658e:	75bb      	strb	r3, [r7, #22]
      //y += u8x8->x_offset;
      //y *= 2;		/* for B/W mode, use only every second page */

      u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));  /* UC1638 */
 8016590:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016594:	f003 030f 	and.w	r3, r3, #15
 8016598:	b25b      	sxtb	r3, r3
 801659a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801659e:	b25b      	sxtb	r3, r3
 80165a0:	b2db      	uxtb	r3, r3
 80165a2:	4619      	mov	r1, r3
 80165a4:	68f8      	ldr	r0, [r7, #12]
 80165a6:	f7ff fec4 	bl	8016332 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));  /* UC1638 */
 80165aa:	7dbb      	ldrb	r3, [r7, #22]
 80165ac:	091b      	lsrs	r3, r3, #4
 80165ae:	b2db      	uxtb	r3, r3
 80165b0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80165b4:	b2db      	uxtb	r3, r3
 80165b6:	4619      	mov	r1, r3
 80165b8:	68f8      	ldr	r0, [r7, #12]
 80165ba:	f7ff feba 	bl	8016332 <u8x8_cad_SendCmd>
    
    
      u8x8_cad_SendCmd(u8x8, 0x001); /* UC1638 */
 80165be:	2101      	movs	r1, #1
 80165c0:	68f8      	ldr	r0, [r7, #12]
 80165c2:	f7ff feb6 	bl	8016332 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	791b      	ldrb	r3, [r3, #4]
 80165ca:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80165cc:	7d7b      	ldrb	r3, [r7, #21]
 80165ce:	00db      	lsls	r3, r3, #3
 80165d0:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80165d8:	7d7b      	ldrb	r3, [r7, #21]
 80165da:	693a      	ldr	r2, [r7, #16]
 80165dc:	4619      	mov	r1, r3
 80165de:	68f8      	ldr	r0, [r7, #12]
 80165e0:	f7ff fecb 	bl	801637a <u8x8_cad_SendData>
	arg_int--;
 80165e4:	7abb      	ldrb	r3, [r7, #10]
 80165e6:	3b01      	subs	r3, #1
 80165e8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80165ea:	7abb      	ldrb	r3, [r7, #10]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d1f3      	bne.n	80165d8 <u8x8_d_uc1638_common+0xcc>
      
      u8x8_cad_EndTransfer(u8x8);
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	f7ff fee5 	bl	80163c0 <u8x8_cad_EndTransfer>
      break;
 80165f6:	e037      	b.n	8016668 <u8x8_d_uc1638_common+0x15c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80165f8:	7abb      	ldrb	r3, [r7, #10]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d104      	bne.n	8016608 <u8x8_d_uc1638_common+0xfc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave0_seq);
 80165fe:	491d      	ldr	r1, [pc, #116]	; (8016674 <u8x8_d_uc1638_common+0x168>)
 8016600:	68f8      	ldr	r0, [r7, #12]
 8016602:	f7ff feed 	bl	80163e0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
      break;
 8016606:	e02f      	b.n	8016668 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
 8016608:	491b      	ldr	r1, [pc, #108]	; (8016678 <u8x8_d_uc1638_common+0x16c>)
 801660a:	68f8      	ldr	r0, [r7, #12]
 801660c:	f7ff fee8 	bl	80163e0 <u8x8_cad_SendSequence>
      break;
 8016610:	e02a      	b.n	8016668 <u8x8_d_uc1638_common+0x15c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8016612:	7abb      	ldrb	r3, [r7, #10]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d10a      	bne.n	801662e <u8x8_d_uc1638_common+0x122>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip0_seq);
 8016618:	4918      	ldr	r1, [pc, #96]	; (801667c <u8x8_d_uc1638_common+0x170>)
 801661a:	68f8      	ldr	r0, [r7, #12]
 801661c:	f7ff fee0 	bl	80163e0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	7c9a      	ldrb	r2, [r3, #18]
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 801662c:	e01c      	b.n	8016668 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
 801662e:	4914      	ldr	r1, [pc, #80]	; (8016680 <u8x8_d_uc1638_common+0x174>)
 8016630:	68f8      	ldr	r0, [r7, #12]
 8016632:	f7ff fed5 	bl	80163e0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	7cda      	ldrb	r2, [r3, #19]
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8016642:	e011      	b.n	8016668 <u8x8_d_uc1638_common+0x15c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8016644:	68f8      	ldr	r0, [r7, #12]
 8016646:	f7ff feab 	bl	80163a0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 801664a:	2181      	movs	r1, #129	; 0x81
 801664c:	68f8      	ldr	r0, [r7, #12]
 801664e:	f7ff fe70 	bl	8016332 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1638 has range from 0 to 255 */
 8016652:	7abb      	ldrb	r3, [r7, #10]
 8016654:	4619      	mov	r1, r3
 8016656:	68f8      	ldr	r0, [r7, #12]
 8016658:	f7ff fe7d 	bl	8016356 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 801665c:	68f8      	ldr	r0, [r7, #12]
 801665e:	f7ff feaf 	bl	80163c0 <u8x8_cad_EndTransfer>
      break;
 8016662:	e001      	b.n	8016668 <u8x8_d_uc1638_common+0x15c>
#endif
    default:
      return 0;
 8016664:	2300      	movs	r3, #0
 8016666:	e000      	b.n	801666a <u8x8_d_uc1638_common+0x15e>
  }
  return 1;
 8016668:	2301      	movs	r3, #1
}
 801666a:	4618      	mov	r0, r3
 801666c:	3718      	adds	r7, #24
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
 8016672:	bf00      	nop
 8016674:	08029114 	.word	0x08029114
 8016678:	0802911c 	.word	0x0802911c
 801667c:	08029124 	.word	0x08029124
 8016680:	0802912c 	.word	0x0802912c

08016684 <u8x8_d_uc1638_240x160>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1638_240x160(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b084      	sub	sp, #16
 8016688:	af00      	add	r7, sp, #0
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	607b      	str	r3, [r7, #4]
 801668e:	460b      	mov	r3, r1
 8016690:	72fb      	strb	r3, [r7, #11]
 8016692:	4613      	mov	r3, r2
 8016694:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1638_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8016696:	7aba      	ldrb	r2, [r7, #10]
 8016698:	7af9      	ldrb	r1, [r7, #11]
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	68f8      	ldr	r0, [r7, #12]
 801669e:	f7ff ff35 	bl	801650c <u8x8_d_uc1638_common>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d114      	bne.n	80166d2 <u8x8_d_uc1638_240x160+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 80166a8:	7afb      	ldrb	r3, [r7, #11]
 80166aa:	2b09      	cmp	r3, #9
 80166ac:	d002      	beq.n	80166b4 <u8x8_d_uc1638_240x160+0x30>
 80166ae:	2b0a      	cmp	r3, #10
 80166b0:	d005      	beq.n	80166be <u8x8_d_uc1638_240x160+0x3a>
 80166b2:	e00c      	b.n	80166ce <u8x8_d_uc1638_240x160+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_240x160_display_info);
 80166b4:	490a      	ldr	r1, [pc, #40]	; (80166e0 <u8x8_d_uc1638_240x160+0x5c>)
 80166b6:	68f8      	ldr	r0, [r7, #12]
 80166b8:	f000 f816 	bl	80166e8 <u8x8_d_helper_display_setup_memory>
	break;
 80166bc:	e00a      	b.n	80166d4 <u8x8_d_uc1638_240x160+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	f000 f826 	bl	8016710 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_240x160_init_seq);
 80166c4:	4907      	ldr	r1, [pc, #28]	; (80166e4 <u8x8_d_uc1638_240x160+0x60>)
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	f7ff fe8a 	bl	80163e0 <u8x8_cad_SendSequence>
	break;
 80166cc:	e002      	b.n	80166d4 <u8x8_d_uc1638_240x160+0x50>
      default:
	return 0;		/* msg unknown */
 80166ce:	2300      	movs	r3, #0
 80166d0:	e001      	b.n	80166d6 <u8x8_d_uc1638_240x160+0x52>
    }
  }
 80166d2:	bf00      	nop
  return 1;
 80166d4:	2301      	movs	r3, #1
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3710      	adds	r7, #16
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}
 80166de:	bf00      	nop
 80166e0:	08029134 	.word	0x08029134
 80166e4:	0802914c 	.word	0x0802914c

080166e8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80166e8:	b480      	push	{r7}
 80166ea:	b083      	sub	sp, #12
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	683a      	ldr	r2, [r7, #0]
 80166f6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	7c9a      	ldrb	r2, [r3, #18]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8016704:	bf00      	nop
 8016706:	370c      	adds	r7, #12
 8016708:	46bd      	mov	sp, r7
 801670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670e:	4770      	bx	lr

08016710 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016710:	b590      	push	{r4, r7, lr}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	695c      	ldr	r4, [r3, #20]
 801671c:	2300      	movs	r3, #0
 801671e:	2200      	movs	r2, #0
 8016720:	2128      	movs	r1, #40	; 0x28
 8016722:	6878      	ldr	r0, [r7, #4]
 8016724:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	68dc      	ldr	r4, [r3, #12]
 801672a:	2300      	movs	r3, #0
 801672c:	2200      	movs	r2, #0
 801672e:	2114      	movs	r1, #20
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8016734:	2201      	movs	r2, #1
 8016736:	214b      	movs	r1, #75	; 0x4b
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f000 f886 	bl	801684a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	791b      	ldrb	r3, [r3, #4]
 8016744:	461a      	mov	r2, r3
 8016746:	2129      	movs	r1, #41	; 0x29
 8016748:	6878      	ldr	r0, [r7, #4]
 801674a:	f000 f87e 	bl	801684a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 801674e:	2200      	movs	r2, #0
 8016750:	214b      	movs	r1, #75	; 0x4b
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f000 f879 	bl	801684a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	791b      	ldrb	r3, [r3, #4]
 801675e:	461a      	mov	r2, r3
 8016760:	2129      	movs	r1, #41	; 0x29
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f000 f871 	bl	801684a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8016768:	2201      	movs	r2, #1
 801676a:	214b      	movs	r1, #75	; 0x4b
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f000 f86c 	bl	801684a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	795b      	ldrb	r3, [r3, #5]
 8016778:	461a      	mov	r2, r3
 801677a:	2129      	movs	r1, #41	; 0x29
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 f864 	bl	801684a <u8x8_gpio_call>
}    
 8016782:	bf00      	nop
 8016784:	370c      	adds	r7, #12
 8016786:	46bd      	mov	sp, r7
 8016788:	bd90      	pop	{r4, r7, pc}

0801678a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 801678a:	b590      	push	{r4, r7, lr}
 801678c:	b085      	sub	sp, #20
 801678e:	af00      	add	r7, sp, #0
 8016790:	6078      	str	r0, [r7, #4]
 8016792:	4608      	mov	r0, r1
 8016794:	4611      	mov	r1, r2
 8016796:	461a      	mov	r2, r3
 8016798:	4603      	mov	r3, r0
 801679a:	70fb      	strb	r3, [r7, #3]
 801679c:	460b      	mov	r3, r1
 801679e:	70bb      	strb	r3, [r7, #2]
 80167a0:	4613      	mov	r3, r2
 80167a2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80167a4:	78fb      	ldrb	r3, [r7, #3]
 80167a6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80167a8:	78bb      	ldrb	r3, [r7, #2]
 80167aa:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80167ac:	787b      	ldrb	r3, [r7, #1]
 80167ae:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80167b0:	6a3b      	ldr	r3, [r7, #32]
 80167b2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	689c      	ldr	r4, [r3, #8]
 80167b8:	f107 0308 	add.w	r3, r7, #8
 80167bc:	2201      	movs	r2, #1
 80167be:	210f      	movs	r1, #15
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	47a0      	blx	r4
 80167c4:	4603      	mov	r3, r0
}
 80167c6:	4618      	mov	r0, r3
 80167c8:	3714      	adds	r7, #20
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd90      	pop	{r4, r7, pc}

080167ce <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80167ce:	b590      	push	{r4, r7, lr}
 80167d0:	b083      	sub	sp, #12
 80167d2:	af00      	add	r7, sp, #0
 80167d4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	689c      	ldr	r4, [r3, #8]
 80167da:	2300      	movs	r3, #0
 80167dc:	2200      	movs	r2, #0
 80167de:	2109      	movs	r1, #9
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	47a0      	blx	r4
}
 80167e4:	bf00      	nop
 80167e6:	370c      	adds	r7, #12
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd90      	pop	{r4, r7, pc}

080167ec <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80167ec:	b590      	push	{r4, r7, lr}
 80167ee:	b083      	sub	sp, #12
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	689c      	ldr	r4, [r3, #8]
 80167f8:	2300      	movs	r3, #0
 80167fa:	2200      	movs	r2, #0
 80167fc:	210a      	movs	r1, #10
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	47a0      	blx	r4
}
 8016802:	bf00      	nop
 8016804:	370c      	adds	r7, #12
 8016806:	46bd      	mov	sp, r7
 8016808:	bd90      	pop	{r4, r7, pc}

0801680a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 801680a:	b590      	push	{r4, r7, lr}
 801680c:	b083      	sub	sp, #12
 801680e:	af00      	add	r7, sp, #0
 8016810:	6078      	str	r0, [r7, #4]
 8016812:	460b      	mov	r3, r1
 8016814:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	689c      	ldr	r4, [r3, #8]
 801681a:	78fa      	ldrb	r2, [r7, #3]
 801681c:	2300      	movs	r3, #0
 801681e:	210b      	movs	r1, #11
 8016820:	6878      	ldr	r0, [r7, #4]
 8016822:	47a0      	blx	r4
}
 8016824:	bf00      	nop
 8016826:	370c      	adds	r7, #12
 8016828:	46bd      	mov	sp, r7
 801682a:	bd90      	pop	{r4, r7, pc}

0801682c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 801682c:	b590      	push	{r4, r7, lr}
 801682e:	b083      	sub	sp, #12
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	689c      	ldr	r4, [r3, #8]
 8016838:	2300      	movs	r3, #0
 801683a:	2200      	movs	r2, #0
 801683c:	2110      	movs	r1, #16
 801683e:	6878      	ldr	r0, [r7, #4]
 8016840:	47a0      	blx	r4
}
 8016842:	bf00      	nop
 8016844:	370c      	adds	r7, #12
 8016846:	46bd      	mov	sp, r7
 8016848:	bd90      	pop	{r4, r7, pc}

0801684a <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 801684a:	b590      	push	{r4, r7, lr}
 801684c:	b083      	sub	sp, #12
 801684e:	af00      	add	r7, sp, #0
 8016850:	6078      	str	r0, [r7, #4]
 8016852:	460b      	mov	r3, r1
 8016854:	70fb      	strb	r3, [r7, #3]
 8016856:	4613      	mov	r3, r2
 8016858:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	695c      	ldr	r4, [r3, #20]
 801685e:	78ba      	ldrb	r2, [r7, #2]
 8016860:	78f9      	ldrb	r1, [r7, #3]
 8016862:	2300      	movs	r3, #0
 8016864:	6878      	ldr	r0, [r7, #4]
 8016866:	47a0      	blx	r4
}
 8016868:	bf00      	nop
 801686a:	370c      	adds	r7, #12
 801686c:	46bd      	mov	sp, r7
 801686e:	bd90      	pop	{r4, r7, pc}

08016870 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8016870:	b480      	push	{r7}
 8016872:	b085      	sub	sp, #20
 8016874:	af00      	add	r7, sp, #0
 8016876:	60f8      	str	r0, [r7, #12]
 8016878:	607b      	str	r3, [r7, #4]
 801687a:	460b      	mov	r3, r1
 801687c:	72fb      	strb	r3, [r7, #11]
 801687e:	4613      	mov	r3, r2
 8016880:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8016882:	2300      	movs	r3, #0
}
 8016884:	4618      	mov	r0, r3
 8016886:	3714      	adds	r7, #20
 8016888:	46bd      	mov	sp, r7
 801688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688e:	4770      	bx	lr

08016890 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8016890:	b480      	push	{r7}
 8016892:	b083      	sub	sp, #12
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2200      	movs	r2, #0
 801689c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	4a11      	ldr	r2, [pc, #68]	; (80168e8 <u8x8_SetupDefaults+0x58>)
 80168a2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	4a10      	ldr	r2, [pc, #64]	; (80168e8 <u8x8_SetupDefaults+0x58>)
 80168a8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	4a0e      	ldr	r2, [pc, #56]	; (80168e8 <u8x8_SetupDefaults+0x58>)
 80168ae:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	4a0d      	ldr	r2, [pc, #52]	; (80168e8 <u8x8_SetupDefaults+0x58>)
 80168b4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2200      	movs	r2, #0
 80168ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2200      	movs	r2, #0
 80168ca:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	22ff      	movs	r2, #255	; 0xff
 80168d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	22ff      	movs	r2, #255	; 0xff
 80168d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80168dc:	bf00      	nop
 80168de:	370c      	adds	r7, #12
 80168e0:	46bd      	mov	sp, r7
 80168e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e6:	4770      	bx	lr
 80168e8:	08016871 	.word	0x08016871

080168ec <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b084      	sub	sp, #16
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	60f8      	str	r0, [r7, #12]
 80168f4:	60b9      	str	r1, [r7, #8]
 80168f6:	607a      	str	r2, [r7, #4]
 80168f8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80168fa:	68f8      	ldr	r0, [r7, #12]
 80168fc:	f7ff ffc8 	bl	8016890 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	683a      	ldr	r2, [r7, #0]
 8016910:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	69ba      	ldr	r2, [r7, #24]
 8016916:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8016918:	68f8      	ldr	r0, [r7, #12]
 801691a:	f7ff ff58 	bl	80167ce <u8x8_SetupMemory>
}
 801691e:	bf00      	nop
 8016920:	3710      	adds	r7, #16
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
	...

08016928 <ADC_options_screen_func>:

const char* SPS_name[16]={ "RATE_2SPS", "RATE_4SPS", "RATE_8SPS", "RATE_16SPS", "RATE_32SPS", "RATE_63SPS", "RATE_125SPS", "RATE_250SPS",
		"RATE_500SPS", "RATE_1000SPS", "RATE_2000SPS", "RATE_4000SPS", "RATE_8000SPS", "RATE_16000SPS", "RATE_32000SPS", "RATE_64000SPS"};

void ADC_options_screen_func(void)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af02      	add	r7, sp, #8
	RTC_view();
 801692e:	f001 f89f 	bl	8017a70 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016932:	4953      	ldr	r1, [pc, #332]	; (8016a80 <ADC_options_screen_func+0x158>)
 8016934:	4853      	ldr	r0, [pc, #332]	; (8016a84 <ADC_options_screen_func+0x15c>)
 8016936:	f7ff f88d 	bl	8015a54 <u8g2_SetFont>

	// PGA
	u8g2_DrawUTF8(&u8g2, 10, 40, "PGA:");
 801693a:	4b53      	ldr	r3, [pc, #332]	; (8016a88 <ADC_options_screen_func+0x160>)
 801693c:	2228      	movs	r2, #40	; 0x28
 801693e:	210a      	movs	r1, #10
 8016940:	4850      	ldr	r0, [pc, #320]	; (8016a84 <ADC_options_screen_func+0x15c>)
 8016942:	f7fe ffe5 	bl	8015910 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 40, PGA_name[PGA_GAIN], edit_param, 0);
 8016946:	4b51      	ldr	r3, [pc, #324]	; (8016a8c <ADC_options_screen_func+0x164>)
 8016948:	781b      	ldrb	r3, [r3, #0]
 801694a:	461a      	mov	r2, r3
 801694c:	4b50      	ldr	r3, [pc, #320]	; (8016a90 <ADC_options_screen_func+0x168>)
 801694e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016952:	4b50      	ldr	r3, [pc, #320]	; (8016a94 <ADC_options_screen_func+0x16c>)
 8016954:	781b      	ldrb	r3, [r3, #0]
 8016956:	2100      	movs	r1, #0
 8016958:	9100      	str	r1, [sp, #0]
 801695a:	2128      	movs	r1, #40	; 0x28
 801695c:	2078      	movs	r0, #120	; 0x78
 801695e:	f7ec fa73 	bl	8002e48 <Blink_Edit_Parameter>

	// SPS
	u8g2_DrawUTF8(&u8g2, 10, 60, "SPS:");
 8016962:	4b4d      	ldr	r3, [pc, #308]	; (8016a98 <ADC_options_screen_func+0x170>)
 8016964:	223c      	movs	r2, #60	; 0x3c
 8016966:	210a      	movs	r1, #10
 8016968:	4846      	ldr	r0, [pc, #280]	; (8016a84 <ADC_options_screen_func+0x15c>)
 801696a:	f7fe ffd1 	bl	8015910 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 60,SPS_name[ADC_SPS], edit_param, 1);
 801696e:	4b4b      	ldr	r3, [pc, #300]	; (8016a9c <ADC_options_screen_func+0x174>)
 8016970:	781b      	ldrb	r3, [r3, #0]
 8016972:	461a      	mov	r2, r3
 8016974:	4b4a      	ldr	r3, [pc, #296]	; (8016aa0 <ADC_options_screen_func+0x178>)
 8016976:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801697a:	4b46      	ldr	r3, [pc, #280]	; (8016a94 <ADC_options_screen_func+0x16c>)
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	2101      	movs	r1, #1
 8016980:	9100      	str	r1, [sp, #0]
 8016982:	213c      	movs	r1, #60	; 0x3c
 8016984:	2078      	movs	r0, #120	; 0x78
 8016986:	f7ec fa5f 	bl	8002e48 <Blink_Edit_Parameter>

	// Calibration
	u8g2_DrawUTF8(&u8g2, 10, 80, "CAL:");
 801698a:	4b46      	ldr	r3, [pc, #280]	; (8016aa4 <ADC_options_screen_func+0x17c>)
 801698c:	2250      	movs	r2, #80	; 0x50
 801698e:	210a      	movs	r1, #10
 8016990:	483c      	ldr	r0, [pc, #240]	; (8016a84 <ADC_options_screen_func+0x15c>)
 8016992:	f7fe ffbd 	bl	8015910 <u8g2_DrawUTF8>
	switch(adc_calibration_mode)
 8016996:	4b44      	ldr	r3, [pc, #272]	; (8016aa8 <ADC_options_screen_func+0x180>)
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b02      	cmp	r3, #2
 801699c:	d01a      	beq.n	80169d4 <ADC_options_screen_func+0xac>
 801699e:	2b02      	cmp	r3, #2
 80169a0:	dc22      	bgt.n	80169e8 <ADC_options_screen_func+0xc0>
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d002      	beq.n	80169ac <ADC_options_screen_func+0x84>
 80169a6:	2b01      	cmp	r3, #1
 80169a8:	d00a      	beq.n	80169c0 <ADC_options_screen_func+0x98>
 80169aa:	e01d      	b.n	80169e8 <ADC_options_screen_func+0xc0>
	{
		case 0: Blink_Edit_Parameter(120, 80, "SELF", edit_param, 2); break;
 80169ac:	4b39      	ldr	r3, [pc, #228]	; (8016a94 <ADC_options_screen_func+0x16c>)
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	2202      	movs	r2, #2
 80169b2:	9200      	str	r2, [sp, #0]
 80169b4:	4a3d      	ldr	r2, [pc, #244]	; (8016aac <ADC_options_screen_func+0x184>)
 80169b6:	2150      	movs	r1, #80	; 0x50
 80169b8:	2078      	movs	r0, #120	; 0x78
 80169ba:	f7ec fa45 	bl	8002e48 <Blink_Edit_Parameter>
 80169be:	e013      	b.n	80169e8 <ADC_options_screen_func+0xc0>
		case 1: Blink_Edit_Parameter(120, 80, "OFFSET", edit_param, 2); break;
 80169c0:	4b34      	ldr	r3, [pc, #208]	; (8016a94 <ADC_options_screen_func+0x16c>)
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	2202      	movs	r2, #2
 80169c6:	9200      	str	r2, [sp, #0]
 80169c8:	4a39      	ldr	r2, [pc, #228]	; (8016ab0 <ADC_options_screen_func+0x188>)
 80169ca:	2150      	movs	r1, #80	; 0x50
 80169cc:	2078      	movs	r0, #120	; 0x78
 80169ce:	f7ec fa3b 	bl	8002e48 <Blink_Edit_Parameter>
 80169d2:	e009      	b.n	80169e8 <ADC_options_screen_func+0xc0>
		case 2: Blink_Edit_Parameter(120, 80, "FULL SCALE", edit_param, 2); break;
 80169d4:	4b2f      	ldr	r3, [pc, #188]	; (8016a94 <ADC_options_screen_func+0x16c>)
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	2202      	movs	r2, #2
 80169da:	9200      	str	r2, [sp, #0]
 80169dc:	4a35      	ldr	r2, [pc, #212]	; (8016ab4 <ADC_options_screen_func+0x18c>)
 80169de:	2150      	movs	r1, #80	; 0x50
 80169e0:	2078      	movs	r0, #120	; 0x78
 80169e2:	f7ec fa31 	bl	8002e48 <Blink_Edit_Parameter>
 80169e6:	bf00      	nop
	}

	// Window size
	u8g2_DrawUTF8(&u8g2, 10, 100, "SIZE:");
 80169e8:	4b33      	ldr	r3, [pc, #204]	; (8016ab8 <ADC_options_screen_func+0x190>)
 80169ea:	2264      	movs	r2, #100	; 0x64
 80169ec:	210a      	movs	r1, #10
 80169ee:	4825      	ldr	r0, [pc, #148]	; (8016a84 <ADC_options_screen_func+0x15c>)
 80169f0:	f7fe ff8e 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", ADC_Buff_size);
 80169f4:	4b31      	ldr	r3, [pc, #196]	; (8016abc <ADC_options_screen_func+0x194>)
 80169f6:	881b      	ldrh	r3, [r3, #0]
 80169f8:	461a      	mov	r2, r3
 80169fa:	4931      	ldr	r1, [pc, #196]	; (8016ac0 <ADC_options_screen_func+0x198>)
 80169fc:	4831      	ldr	r0, [pc, #196]	; (8016ac4 <ADC_options_screen_func+0x19c>)
 80169fe:	f007 f987 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(120, 100, RAM, edit_param, 3);
 8016a02:	4b24      	ldr	r3, [pc, #144]	; (8016a94 <ADC_options_screen_func+0x16c>)
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	2203      	movs	r2, #3
 8016a08:	9200      	str	r2, [sp, #0]
 8016a0a:	4a2e      	ldr	r2, [pc, #184]	; (8016ac4 <ADC_options_screen_func+0x19c>)
 8016a0c:	2164      	movs	r1, #100	; 0x64
 8016a0e:	2078      	movs	r0, #120	; 0x78
 8016a10:	f7ec fa1a 	bl	8002e48 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 120, "OFF PERIOD:");
 8016a14:	4b2c      	ldr	r3, [pc, #176]	; (8016ac8 <ADC_options_screen_func+0x1a0>)
 8016a16:	2278      	movs	r2, #120	; 0x78
 8016a18:	210a      	movs	r1, #10
 8016a1a:	481a      	ldr	r0, [pc, #104]	; (8016a84 <ADC_options_screen_func+0x15c>)
 8016a1c:	f7fe ff78 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoOffCoef_period);
 8016a20:	4b2a      	ldr	r3, [pc, #168]	; (8016acc <ADC_options_screen_func+0x1a4>)
 8016a22:	881b      	ldrh	r3, [r3, #0]
 8016a24:	461a      	mov	r2, r3
 8016a26:	4926      	ldr	r1, [pc, #152]	; (8016ac0 <ADC_options_screen_func+0x198>)
 8016a28:	4826      	ldr	r0, [pc, #152]	; (8016ac4 <ADC_options_screen_func+0x19c>)
 8016a2a:	f007 f971 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(160, 120, RAM, edit_param, 4);
 8016a2e:	4b19      	ldr	r3, [pc, #100]	; (8016a94 <ADC_options_screen_func+0x16c>)
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	2204      	movs	r2, #4
 8016a34:	9200      	str	r2, [sp, #0]
 8016a36:	4a23      	ldr	r2, [pc, #140]	; (8016ac4 <ADC_options_screen_func+0x19c>)
 8016a38:	2178      	movs	r1, #120	; 0x78
 8016a3a:	20a0      	movs	r0, #160	; 0xa0
 8016a3c:	f7ec fa04 	bl	8002e48 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 140, "GAIN PERIOD:");
 8016a40:	4b23      	ldr	r3, [pc, #140]	; (8016ad0 <ADC_options_screen_func+0x1a8>)
 8016a42:	228c      	movs	r2, #140	; 0x8c
 8016a44:	210a      	movs	r1, #10
 8016a46:	480f      	ldr	r0, [pc, #60]	; (8016a84 <ADC_options_screen_func+0x15c>)
 8016a48:	f7fe ff62 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoGainCoef_period);
 8016a4c:	4b21      	ldr	r3, [pc, #132]	; (8016ad4 <ADC_options_screen_func+0x1ac>)
 8016a4e:	881b      	ldrh	r3, [r3, #0]
 8016a50:	461a      	mov	r2, r3
 8016a52:	491b      	ldr	r1, [pc, #108]	; (8016ac0 <ADC_options_screen_func+0x198>)
 8016a54:	481b      	ldr	r0, [pc, #108]	; (8016ac4 <ADC_options_screen_func+0x19c>)
 8016a56:	f007 f95b 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(160, 140, RAM, edit_param, 5);
 8016a5a:	4b0e      	ldr	r3, [pc, #56]	; (8016a94 <ADC_options_screen_func+0x16c>)
 8016a5c:	781b      	ldrb	r3, [r3, #0]
 8016a5e:	2205      	movs	r2, #5
 8016a60:	9200      	str	r2, [sp, #0]
 8016a62:	4a18      	ldr	r2, [pc, #96]	; (8016ac4 <ADC_options_screen_func+0x19c>)
 8016a64:	218c      	movs	r1, #140	; 0x8c
 8016a66:	20a0      	movs	r0, #160	; 0xa0
 8016a68:	f7ec f9ee 	bl	8002e48 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016a6c:	4805      	ldr	r0, [pc, #20]	; (8016a84 <ADC_options_screen_func+0x15c>)
 8016a6e:	f7fe f9b4 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016a72:	4804      	ldr	r0, [pc, #16]	; (8016a84 <ADC_options_screen_func+0x15c>)
 8016a74:	f7fe f93e 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8016a78:	bf00      	nop
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd80      	pop	{r7, pc}
 8016a7e:	bf00      	nop
 8016a80:	080271c4 	.word	0x080271c4
 8016a84:	20001fcc 	.word	0x20001fcc
 8016a88:	08022104 	.word	0x08022104
 8016a8c:	2000009a 	.word	0x2000009a
 8016a90:	20000050 	.word	0x20000050
 8016a94:	2000085c 	.word	0x2000085c
 8016a98:	0802210c 	.word	0x0802210c
 8016a9c:	2000009b 	.word	0x2000009b
 8016aa0:	20000330 	.word	0x20000330
 8016aa4:	08022114 	.word	0x08022114
 8016aa8:	200008a7 	.word	0x200008a7
 8016aac:	0802211c 	.word	0x0802211c
 8016ab0:	08022124 	.word	0x08022124
 8016ab4:	0802212c 	.word	0x0802212c
 8016ab8:	08022138 	.word	0x08022138
 8016abc:	2000009c 	.word	0x2000009c
 8016ac0:	08022140 	.word	0x08022140
 8016ac4:	20002088 	.word	0x20002088
 8016ac8:	08022144 	.word	0x08022144
 8016acc:	20002174 	.word	0x20002174
 8016ad0:	08022150 	.word	0x08022150
 8016ad4:	2000210c 	.word	0x2000210c

08016ad8 <ADC_options_screen_S6>:



// DOWN
void ADC_options_screen_S6(void)
{
 8016ad8:	b480      	push	{r7}
 8016ada:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8016adc:	4b07      	ldr	r3, [pc, #28]	; (8016afc <ADC_options_screen_S6+0x24>)
 8016ade:	781b      	ldrb	r3, [r3, #0]
 8016ae0:	2b04      	cmp	r3, #4
 8016ae2:	d805      	bhi.n	8016af0 <ADC_options_screen_S6+0x18>
 8016ae4:	4b05      	ldr	r3, [pc, #20]	; (8016afc <ADC_options_screen_S6+0x24>)
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	b2da      	uxtb	r2, r3
 8016aec:	4b03      	ldr	r3, [pc, #12]	; (8016afc <ADC_options_screen_S6+0x24>)
 8016aee:	701a      	strb	r2, [r3, #0]
}
 8016af0:	bf00      	nop
 8016af2:	46bd      	mov	sp, r7
 8016af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af8:	4770      	bx	lr
 8016afa:	bf00      	nop
 8016afc:	2000085c 	.word	0x2000085c

08016b00 <ADC_options_screen_S7>:

// UP
void ADC_options_screen_S7(void)
{
 8016b00:	b480      	push	{r7}
 8016b02:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8016b04:	4b07      	ldr	r3, [pc, #28]	; (8016b24 <ADC_options_screen_S7+0x24>)
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d005      	beq.n	8016b18 <ADC_options_screen_S7+0x18>
 8016b0c:	4b05      	ldr	r3, [pc, #20]	; (8016b24 <ADC_options_screen_S7+0x24>)
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	3b01      	subs	r3, #1
 8016b12:	b2da      	uxtb	r2, r3
 8016b14:	4b03      	ldr	r3, [pc, #12]	; (8016b24 <ADC_options_screen_S7+0x24>)
 8016b16:	701a      	strb	r2, [r3, #0]
}
 8016b18:	bf00      	nop
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b20:	4770      	bx	lr
 8016b22:	bf00      	nop
 8016b24:	2000085c 	.word	0x2000085c

08016b28 <ADC_options_screen_S9>:


// MENU
void ADC_options_screen_S9(void)
{
 8016b28:	b480      	push	{r7}
 8016b2a:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016b2c:	4b06      	ldr	r3, [pc, #24]	; (8016b48 <ADC_options_screen_S9+0x20>)
 8016b2e:	2208      	movs	r2, #8
 8016b30:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016b32:	4b06      	ldr	r3, [pc, #24]	; (8016b4c <ADC_options_screen_S9+0x24>)
 8016b34:	22ff      	movs	r2, #255	; 0xff
 8016b36:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8016b38:	4b05      	ldr	r3, [pc, #20]	; (8016b50 <ADC_options_screen_S9+0x28>)
 8016b3a:	2205      	movs	r2, #5
 8016b3c:	701a      	strb	r2, [r3, #0]
}
 8016b3e:	bf00      	nop
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr
 8016b48:	2000004c 	.word	0x2000004c
 8016b4c:	200003a0 	.word	0x200003a0
 8016b50:	200003a1 	.word	0x200003a1

08016b54 <ADC_options_screen_S4>:



// ENTER
void ADC_options_screen_S4(void)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016b58:	4b21      	ldr	r3, [pc, #132]	; (8016be0 <ADC_options_screen_S4+0x8c>)
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	2b05      	cmp	r3, #5
 8016b5e:	d83c      	bhi.n	8016bda <ADC_options_screen_S4+0x86>
 8016b60:	a201      	add	r2, pc, #4	; (adr r2, 8016b68 <ADC_options_screen_S4+0x14>)
 8016b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b66:	bf00      	nop
 8016b68:	08016b81 	.word	0x08016b81
 8016b6c:	08016b8f 	.word	0x08016b8f
 8016b70:	08016b9d 	.word	0x08016b9d
 8016b74:	08016bb1 	.word	0x08016bb1
 8016b78:	08016bbf 	.word	0x08016bbf
 8016b7c:	08016bcd 	.word	0x08016bcd
	{
		case 0: Save_Settings(PGA_GAIN_tag, PGA_GAIN); break;
 8016b80:	4b18      	ldr	r3, [pc, #96]	; (8016be4 <ADC_options_screen_S4+0x90>)
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	4619      	mov	r1, r3
 8016b86:	2008      	movs	r0, #8
 8016b88:	f7ee fd72 	bl	8005670 <Save_Settings>
 8016b8c:	e025      	b.n	8016bda <ADC_options_screen_S4+0x86>
		case 1: Save_Settings(ADC_SPS_tag, ADC_SPS); break;
 8016b8e:	4b16      	ldr	r3, [pc, #88]	; (8016be8 <ADC_options_screen_S4+0x94>)
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	4619      	mov	r1, r3
 8016b94:	2009      	movs	r0, #9
 8016b96:	f7ee fd6b 	bl	8005670 <Save_Settings>
 8016b9a:	e01e      	b.n	8016bda <ADC_options_screen_S4+0x86>
		case 2: Save_Settings(adc_calibration_mode_tag, adc_calibration_mode); adc_start_calibration=1; break;
 8016b9c:	4b13      	ldr	r3, [pc, #76]	; (8016bec <ADC_options_screen_S4+0x98>)
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	200a      	movs	r0, #10
 8016ba4:	f7ee fd64 	bl	8005670 <Save_Settings>
 8016ba8:	4b11      	ldr	r3, [pc, #68]	; (8016bf0 <ADC_options_screen_S4+0x9c>)
 8016baa:	2201      	movs	r2, #1
 8016bac:	701a      	strb	r2, [r3, #0]
 8016bae:	e014      	b.n	8016bda <ADC_options_screen_S4+0x86>
		case 3: Save_Settings(ADC_Buff_size_tag, ADC_Buff_size); break;
 8016bb0:	4b10      	ldr	r3, [pc, #64]	; (8016bf4 <ADC_options_screen_S4+0xa0>)
 8016bb2:	881b      	ldrh	r3, [r3, #0]
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	200b      	movs	r0, #11
 8016bb8:	f7ee fd5a 	bl	8005670 <Save_Settings>
 8016bbc:	e00d      	b.n	8016bda <ADC_options_screen_S4+0x86>
		case 4: Save_Settings(AutoOffCoef_period_tag, AutoOffCoef_period); break;
 8016bbe:	4b0e      	ldr	r3, [pc, #56]	; (8016bf8 <ADC_options_screen_S4+0xa4>)
 8016bc0:	881b      	ldrh	r3, [r3, #0]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	201f      	movs	r0, #31
 8016bc6:	f7ee fd53 	bl	8005670 <Save_Settings>
 8016bca:	e006      	b.n	8016bda <ADC_options_screen_S4+0x86>
		case 5: Save_Settings(AutoGainCoef_period_tag, AutoGainCoef_period); break;
 8016bcc:	4b0b      	ldr	r3, [pc, #44]	; (8016bfc <ADC_options_screen_S4+0xa8>)
 8016bce:	881b      	ldrh	r3, [r3, #0]
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	2021      	movs	r0, #33	; 0x21
 8016bd4:	f7ee fd4c 	bl	8005670 <Save_Settings>
 8016bd8:	bf00      	nop
	}
}
 8016bda:	bf00      	nop
 8016bdc:	bd80      	pop	{r7, pc}
 8016bde:	bf00      	nop
 8016be0:	2000085c 	.word	0x2000085c
 8016be4:	2000009a 	.word	0x2000009a
 8016be8:	2000009b 	.word	0x2000009b
 8016bec:	200008a7 	.word	0x200008a7
 8016bf0:	20000824 	.word	0x20000824
 8016bf4:	2000009c 	.word	0x2000009c
 8016bf8:	20002174 	.word	0x20002174
 8016bfc:	2000210c 	.word	0x2000210c

08016c00 <ADC_options_screen_S8>:



// BACKWARD
void ADC_options_screen_S8(void)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016c04:	4b35      	ldr	r3, [pc, #212]	; (8016cdc <ADC_options_screen_S8+0xdc>)
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	2b05      	cmp	r3, #5
 8016c0a:	d864      	bhi.n	8016cd6 <ADC_options_screen_S8+0xd6>
 8016c0c:	a201      	add	r2, pc, #4	; (adr r2, 8016c14 <ADC_options_screen_S8+0x14>)
 8016c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c12:	bf00      	nop
 8016c14:	08016c2d 	.word	0x08016c2d
 8016c18:	08016c57 	.word	0x08016c57
 8016c1c:	08016c6d 	.word	0x08016c6d
 8016c20:	08016c83 	.word	0x08016c83
 8016c24:	08016c99 	.word	0x08016c99
 8016c28:	08016caf 	.word	0x08016caf
	{
		case 0: if(PGA_GAIN>0)PGA_GAIN--;
 8016c2c:	4b2c      	ldr	r3, [pc, #176]	; (8016ce0 <ADC_options_screen_S8+0xe0>)
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d005      	beq.n	8016c40 <ADC_options_screen_S8+0x40>
 8016c34:	4b2a      	ldr	r3, [pc, #168]	; (8016ce0 <ADC_options_screen_S8+0xe0>)
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	3b01      	subs	r3, #1
 8016c3a:	b2da      	uxtb	r2, r3
 8016c3c:	4b28      	ldr	r3, [pc, #160]	; (8016ce0 <ADC_options_screen_S8+0xe0>)
 8016c3e:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016c40:	4b27      	ldr	r3, [pc, #156]	; (8016ce0 <ADC_options_screen_S8+0xe0>)
 8016c42:	781b      	ldrb	r3, [r3, #0]
 8016c44:	4618      	mov	r0, r3
 8016c46:	f7ea fd23 	bl	8001690 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016c4a:	4b26      	ldr	r3, [pc, #152]	; (8016ce4 <ADC_options_screen_S8+0xe4>)
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7ea fa7c 	bl	800114c <ADC_Conversion>
		break;
 8016c54:	e03f      	b.n	8016cd6 <ADC_options_screen_S8+0xd6>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016c56:	4b23      	ldr	r3, [pc, #140]	; (8016ce4 <ADC_options_screen_S8+0xe4>)
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d032      	beq.n	8016cc4 <ADC_options_screen_S8+0xc4>
 8016c5e:	4b21      	ldr	r3, [pc, #132]	; (8016ce4 <ADC_options_screen_S8+0xe4>)
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	3b01      	subs	r3, #1
 8016c64:	b2da      	uxtb	r2, r3
 8016c66:	4b1f      	ldr	r3, [pc, #124]	; (8016ce4 <ADC_options_screen_S8+0xe4>)
 8016c68:	701a      	strb	r2, [r3, #0]
 8016c6a:	e02b      	b.n	8016cc4 <ADC_options_screen_S8+0xc4>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016c6c:	4b1e      	ldr	r3, [pc, #120]	; (8016ce8 <ADC_options_screen_S8+0xe8>)
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d029      	beq.n	8016cc8 <ADC_options_screen_S8+0xc8>
 8016c74:	4b1c      	ldr	r3, [pc, #112]	; (8016ce8 <ADC_options_screen_S8+0xe8>)
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	3b01      	subs	r3, #1
 8016c7a:	b2da      	uxtb	r2, r3
 8016c7c:	4b1a      	ldr	r3, [pc, #104]	; (8016ce8 <ADC_options_screen_S8+0xe8>)
 8016c7e:	701a      	strb	r2, [r3, #0]
 8016c80:	e022      	b.n	8016cc8 <ADC_options_screen_S8+0xc8>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016c82:	4b1a      	ldr	r3, [pc, #104]	; (8016cec <ADC_options_screen_S8+0xec>)
 8016c84:	881b      	ldrh	r3, [r3, #0]
 8016c86:	2b01      	cmp	r3, #1
 8016c88:	d920      	bls.n	8016ccc <ADC_options_screen_S8+0xcc>
 8016c8a:	4b18      	ldr	r3, [pc, #96]	; (8016cec <ADC_options_screen_S8+0xec>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	3b01      	subs	r3, #1
 8016c90:	b29a      	uxth	r2, r3
 8016c92:	4b16      	ldr	r3, [pc, #88]	; (8016cec <ADC_options_screen_S8+0xec>)
 8016c94:	801a      	strh	r2, [r3, #0]
 8016c96:	e019      	b.n	8016ccc <ADC_options_screen_S8+0xcc>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016c98:	4b15      	ldr	r3, [pc, #84]	; (8016cf0 <ADC_options_screen_S8+0xf0>)
 8016c9a:	881b      	ldrh	r3, [r3, #0]
 8016c9c:	2b05      	cmp	r3, #5
 8016c9e:	d917      	bls.n	8016cd0 <ADC_options_screen_S8+0xd0>
 8016ca0:	4b13      	ldr	r3, [pc, #76]	; (8016cf0 <ADC_options_screen_S8+0xf0>)
 8016ca2:	881b      	ldrh	r3, [r3, #0]
 8016ca4:	3b01      	subs	r3, #1
 8016ca6:	b29a      	uxth	r2, r3
 8016ca8:	4b11      	ldr	r3, [pc, #68]	; (8016cf0 <ADC_options_screen_S8+0xf0>)
 8016caa:	801a      	strh	r2, [r3, #0]
 8016cac:	e010      	b.n	8016cd0 <ADC_options_screen_S8+0xd0>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016cae:	4b11      	ldr	r3, [pc, #68]	; (8016cf4 <ADC_options_screen_S8+0xf4>)
 8016cb0:	881b      	ldrh	r3, [r3, #0]
 8016cb2:	2b05      	cmp	r3, #5
 8016cb4:	d90e      	bls.n	8016cd4 <ADC_options_screen_S8+0xd4>
 8016cb6:	4b0f      	ldr	r3, [pc, #60]	; (8016cf4 <ADC_options_screen_S8+0xf4>)
 8016cb8:	881b      	ldrh	r3, [r3, #0]
 8016cba:	3b01      	subs	r3, #1
 8016cbc:	b29a      	uxth	r2, r3
 8016cbe:	4b0d      	ldr	r3, [pc, #52]	; (8016cf4 <ADC_options_screen_S8+0xf4>)
 8016cc0:	801a      	strh	r2, [r3, #0]
 8016cc2:	e007      	b.n	8016cd4 <ADC_options_screen_S8+0xd4>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016cc4:	bf00      	nop
 8016cc6:	e006      	b.n	8016cd6 <ADC_options_screen_S8+0xd6>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016cc8:	bf00      	nop
 8016cca:	e004      	b.n	8016cd6 <ADC_options_screen_S8+0xd6>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016ccc:	bf00      	nop
 8016cce:	e002      	b.n	8016cd6 <ADC_options_screen_S8+0xd6>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016cd0:	bf00      	nop
 8016cd2:	e000      	b.n	8016cd6 <ADC_options_screen_S8+0xd6>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016cd4:	bf00      	nop
	}
}
 8016cd6:	bf00      	nop
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	2000085c 	.word	0x2000085c
 8016ce0:	2000009a 	.word	0x2000009a
 8016ce4:	2000009b 	.word	0x2000009b
 8016ce8:	200008a7 	.word	0x200008a7
 8016cec:	2000009c 	.word	0x2000009c
 8016cf0:	20002174 	.word	0x20002174
 8016cf4:	2000210c 	.word	0x2000210c

08016cf8 <ADC_options_screen_S5>:


// FORWARD
void ADC_options_screen_S5(void)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016cfc:	4b36      	ldr	r3, [pc, #216]	; (8016dd8 <ADC_options_screen_S5+0xe0>)
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	2b05      	cmp	r3, #5
 8016d02:	d867      	bhi.n	8016dd4 <ADC_options_screen_S5+0xdc>
 8016d04:	a201      	add	r2, pc, #4	; (adr r2, 8016d0c <ADC_options_screen_S5+0x14>)
 8016d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d0a:	bf00      	nop
 8016d0c:	08016d25 	.word	0x08016d25
 8016d10:	08016d4f 	.word	0x08016d4f
 8016d14:	08016d65 	.word	0x08016d65
 8016d18:	08016d7b 	.word	0x08016d7b
 8016d1c:	08016d93 	.word	0x08016d93
 8016d20:	08016dab 	.word	0x08016dab
	{
		case 0: if(PGA_GAIN<8)PGA_GAIN++;
 8016d24:	4b2d      	ldr	r3, [pc, #180]	; (8016ddc <ADC_options_screen_S5+0xe4>)
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	2b07      	cmp	r3, #7
 8016d2a:	d805      	bhi.n	8016d38 <ADC_options_screen_S5+0x40>
 8016d2c:	4b2b      	ldr	r3, [pc, #172]	; (8016ddc <ADC_options_screen_S5+0xe4>)
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	3301      	adds	r3, #1
 8016d32:	b2da      	uxtb	r2, r3
 8016d34:	4b29      	ldr	r3, [pc, #164]	; (8016ddc <ADC_options_screen_S5+0xe4>)
 8016d36:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016d38:	4b28      	ldr	r3, [pc, #160]	; (8016ddc <ADC_options_screen_S5+0xe4>)
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7ea fca7 	bl	8001690 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016d42:	4b27      	ldr	r3, [pc, #156]	; (8016de0 <ADC_options_screen_S5+0xe8>)
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	4618      	mov	r0, r3
 8016d48:	f7ea fa00 	bl	800114c <ADC_Conversion>
		break;
 8016d4c:	e042      	b.n	8016dd4 <ADC_options_screen_S5+0xdc>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016d4e:	4b24      	ldr	r3, [pc, #144]	; (8016de0 <ADC_options_screen_S5+0xe8>)
 8016d50:	781b      	ldrb	r3, [r3, #0]
 8016d52:	2b0e      	cmp	r3, #14
 8016d54:	d835      	bhi.n	8016dc2 <ADC_options_screen_S5+0xca>
 8016d56:	4b22      	ldr	r3, [pc, #136]	; (8016de0 <ADC_options_screen_S5+0xe8>)
 8016d58:	781b      	ldrb	r3, [r3, #0]
 8016d5a:	3301      	adds	r3, #1
 8016d5c:	b2da      	uxtb	r2, r3
 8016d5e:	4b20      	ldr	r3, [pc, #128]	; (8016de0 <ADC_options_screen_S5+0xe8>)
 8016d60:	701a      	strb	r2, [r3, #0]
 8016d62:	e02e      	b.n	8016dc2 <ADC_options_screen_S5+0xca>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016d64:	4b1f      	ldr	r3, [pc, #124]	; (8016de4 <ADC_options_screen_S5+0xec>)
 8016d66:	781b      	ldrb	r3, [r3, #0]
 8016d68:	2b01      	cmp	r3, #1
 8016d6a:	d82c      	bhi.n	8016dc6 <ADC_options_screen_S5+0xce>
 8016d6c:	4b1d      	ldr	r3, [pc, #116]	; (8016de4 <ADC_options_screen_S5+0xec>)
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	3301      	adds	r3, #1
 8016d72:	b2da      	uxtb	r2, r3
 8016d74:	4b1b      	ldr	r3, [pc, #108]	; (8016de4 <ADC_options_screen_S5+0xec>)
 8016d76:	701a      	strb	r2, [r3, #0]
 8016d78:	e025      	b.n	8016dc6 <ADC_options_screen_S5+0xce>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016d7a:	4b1b      	ldr	r3, [pc, #108]	; (8016de8 <ADC_options_screen_S5+0xf0>)
 8016d7c:	881b      	ldrh	r3, [r3, #0]
 8016d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d82:	d222      	bcs.n	8016dca <ADC_options_screen_S5+0xd2>
 8016d84:	4b18      	ldr	r3, [pc, #96]	; (8016de8 <ADC_options_screen_S5+0xf0>)
 8016d86:	881b      	ldrh	r3, [r3, #0]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	b29a      	uxth	r2, r3
 8016d8c:	4b16      	ldr	r3, [pc, #88]	; (8016de8 <ADC_options_screen_S5+0xf0>)
 8016d8e:	801a      	strh	r2, [r3, #0]
 8016d90:	e01b      	b.n	8016dca <ADC_options_screen_S5+0xd2>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016d92:	4b16      	ldr	r3, [pc, #88]	; (8016dec <ADC_options_screen_S5+0xf4>)
 8016d94:	881b      	ldrh	r3, [r3, #0]
 8016d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d9a:	d218      	bcs.n	8016dce <ADC_options_screen_S5+0xd6>
 8016d9c:	4b13      	ldr	r3, [pc, #76]	; (8016dec <ADC_options_screen_S5+0xf4>)
 8016d9e:	881b      	ldrh	r3, [r3, #0]
 8016da0:	3301      	adds	r3, #1
 8016da2:	b29a      	uxth	r2, r3
 8016da4:	4b11      	ldr	r3, [pc, #68]	; (8016dec <ADC_options_screen_S5+0xf4>)
 8016da6:	801a      	strh	r2, [r3, #0]
 8016da8:	e011      	b.n	8016dce <ADC_options_screen_S5+0xd6>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016daa:	4b11      	ldr	r3, [pc, #68]	; (8016df0 <ADC_options_screen_S5+0xf8>)
 8016dac:	881b      	ldrh	r3, [r3, #0]
 8016dae:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8016db2:	d20e      	bcs.n	8016dd2 <ADC_options_screen_S5+0xda>
 8016db4:	4b0e      	ldr	r3, [pc, #56]	; (8016df0 <ADC_options_screen_S5+0xf8>)
 8016db6:	881b      	ldrh	r3, [r3, #0]
 8016db8:	3301      	adds	r3, #1
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	4b0c      	ldr	r3, [pc, #48]	; (8016df0 <ADC_options_screen_S5+0xf8>)
 8016dbe:	801a      	strh	r2, [r3, #0]
 8016dc0:	e007      	b.n	8016dd2 <ADC_options_screen_S5+0xda>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016dc2:	bf00      	nop
 8016dc4:	e006      	b.n	8016dd4 <ADC_options_screen_S5+0xdc>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016dc6:	bf00      	nop
 8016dc8:	e004      	b.n	8016dd4 <ADC_options_screen_S5+0xdc>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016dca:	bf00      	nop
 8016dcc:	e002      	b.n	8016dd4 <ADC_options_screen_S5+0xdc>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016dce:	bf00      	nop
 8016dd0:	e000      	b.n	8016dd4 <ADC_options_screen_S5+0xdc>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016dd2:	bf00      	nop
	}
}
 8016dd4:	bf00      	nop
 8016dd6:	bd80      	pop	{r7, pc}
 8016dd8:	2000085c 	.word	0x2000085c
 8016ddc:	2000009a 	.word	0x2000009a
 8016de0:	2000009b 	.word	0x2000009b
 8016de4:	200008a7 	.word	0x200008a7
 8016de8:	2000009c 	.word	0x2000009c
 8016dec:	20002174 	.word	0x20002174
 8016df0:	2000210c 	.word	0x2000210c

08016df4 <Auto_Off_option_screen_func>:
uint16_t off_min = 0;



void Auto_Off_option_screen_func(void)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	af02      	add	r7, sp, #8
	RTC_view();
 8016dfa:	f000 fe39 	bl	8017a70 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016dfe:	4911      	ldr	r1, [pc, #68]	; (8016e44 <Auto_Off_option_screen_func+0x50>)
 8016e00:	4811      	ldr	r0, [pc, #68]	; (8016e48 <Auto_Off_option_screen_func+0x54>)
 8016e02:	f7fe fe27 	bl	8015a54 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 20, 60, "Автовыключение:");
 8016e06:	4b11      	ldr	r3, [pc, #68]	; (8016e4c <Auto_Off_option_screen_func+0x58>)
 8016e08:	223c      	movs	r2, #60	; 0x3c
 8016e0a:	2114      	movs	r1, #20
 8016e0c:	480e      	ldr	r0, [pc, #56]	; (8016e48 <Auto_Off_option_screen_func+0x54>)
 8016e0e:	f7fe fd7f 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", Auto_Off_Time);
 8016e12:	4b0f      	ldr	r3, [pc, #60]	; (8016e50 <Auto_Off_option_screen_func+0x5c>)
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	461a      	mov	r2, r3
 8016e18:	490e      	ldr	r1, [pc, #56]	; (8016e54 <Auto_Off_option_screen_func+0x60>)
 8016e1a:	480f      	ldr	r0, [pc, #60]	; (8016e58 <Auto_Off_option_screen_func+0x64>)
 8016e1c:	f006 ff78 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(180, 60, RAM, edit_param, 0);
 8016e20:	4b0e      	ldr	r3, [pc, #56]	; (8016e5c <Auto_Off_option_screen_func+0x68>)
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	2200      	movs	r2, #0
 8016e26:	9200      	str	r2, [sp, #0]
 8016e28:	4a0b      	ldr	r2, [pc, #44]	; (8016e58 <Auto_Off_option_screen_func+0x64>)
 8016e2a:	213c      	movs	r1, #60	; 0x3c
 8016e2c:	20b4      	movs	r0, #180	; 0xb4
 8016e2e:	f7ec f80b 	bl	8002e48 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016e32:	4805      	ldr	r0, [pc, #20]	; (8016e48 <Auto_Off_option_screen_func+0x54>)
 8016e34:	f7fd ffd1 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016e38:	4803      	ldr	r0, [pc, #12]	; (8016e48 <Auto_Off_option_screen_func+0x54>)
 8016e3a:	f7fd ff5b 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8016e3e:	bf00      	nop
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}
 8016e44:	080271c4 	.word	0x080271c4
 8016e48:	20001fcc 	.word	0x20001fcc
 8016e4c:	08022160 	.word	0x08022160
 8016e50:	200008a8 	.word	0x200008a8
 8016e54:	08022180 	.word	0x08022180
 8016e58:	20002088 	.word	0x20002088
 8016e5c:	2000085c 	.word	0x2000085c

08016e60 <Auto_Off_option_screen_S9>:



// MENU
void Auto_Off_option_screen_S9(void)
{
 8016e60:	b480      	push	{r7}
 8016e62:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016e64:	4b06      	ldr	r3, [pc, #24]	; (8016e80 <Auto_Off_option_screen_S9+0x20>)
 8016e66:	2208      	movs	r2, #8
 8016e68:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016e6a:	4b06      	ldr	r3, [pc, #24]	; (8016e84 <Auto_Off_option_screen_S9+0x24>)
 8016e6c:	22ff      	movs	r2, #255	; 0xff
 8016e6e:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8016e70:	4b05      	ldr	r3, [pc, #20]	; (8016e88 <Auto_Off_option_screen_S9+0x28>)
 8016e72:	2203      	movs	r2, #3
 8016e74:	701a      	strb	r2, [r3, #0]
}
 8016e76:	bf00      	nop
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr
 8016e80:	2000004c 	.word	0x2000004c
 8016e84:	200003a0 	.word	0x200003a0
 8016e88:	200003a1 	.word	0x200003a1

08016e8c <Auto_Off_option_screen_S8>:

// BACKWARD
void Auto_Off_option_screen_S8(void)
{ if(Auto_Off_Time>1)Auto_Off_Time--; }
 8016e8c:	b480      	push	{r7}
 8016e8e:	af00      	add	r7, sp, #0
 8016e90:	4b07      	ldr	r3, [pc, #28]	; (8016eb0 <Auto_Off_option_screen_S8+0x24>)
 8016e92:	881b      	ldrh	r3, [r3, #0]
 8016e94:	2b01      	cmp	r3, #1
 8016e96:	d905      	bls.n	8016ea4 <Auto_Off_option_screen_S8+0x18>
 8016e98:	4b05      	ldr	r3, [pc, #20]	; (8016eb0 <Auto_Off_option_screen_S8+0x24>)
 8016e9a:	881b      	ldrh	r3, [r3, #0]
 8016e9c:	3b01      	subs	r3, #1
 8016e9e:	b29a      	uxth	r2, r3
 8016ea0:	4b03      	ldr	r3, [pc, #12]	; (8016eb0 <Auto_Off_option_screen_S8+0x24>)
 8016ea2:	801a      	strh	r2, [r3, #0]
 8016ea4:	bf00      	nop
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr
 8016eae:	bf00      	nop
 8016eb0:	200008a8 	.word	0x200008a8

08016eb4 <Auto_Off_option_screen_S5>:

// FORWARD
void Auto_Off_option_screen_S5(void)
{ if(Auto_Off_Time<120)Auto_Off_Time++; }
 8016eb4:	b480      	push	{r7}
 8016eb6:	af00      	add	r7, sp, #0
 8016eb8:	4b07      	ldr	r3, [pc, #28]	; (8016ed8 <Auto_Off_option_screen_S5+0x24>)
 8016eba:	881b      	ldrh	r3, [r3, #0]
 8016ebc:	2b77      	cmp	r3, #119	; 0x77
 8016ebe:	d805      	bhi.n	8016ecc <Auto_Off_option_screen_S5+0x18>
 8016ec0:	4b05      	ldr	r3, [pc, #20]	; (8016ed8 <Auto_Off_option_screen_S5+0x24>)
 8016ec2:	881b      	ldrh	r3, [r3, #0]
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	b29a      	uxth	r2, r3
 8016ec8:	4b03      	ldr	r3, [pc, #12]	; (8016ed8 <Auto_Off_option_screen_S5+0x24>)
 8016eca:	801a      	strh	r2, [r3, #0]
 8016ecc:	bf00      	nop
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed4:	4770      	bx	lr
 8016ed6:	bf00      	nop
 8016ed8:	200008a8 	.word	0x200008a8

08016edc <Auto_OFF_process>:




void Auto_OFF_process(void)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	af00      	add	r7, sp, #0
	if(Auto_Off_Time!=0)
 8016ee0:	4b17      	ldr	r3, [pc, #92]	; (8016f40 <Auto_OFF_process+0x64>)
 8016ee2:	881b      	ldrh	r3, [r3, #0]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d025      	beq.n	8016f34 <Auto_OFF_process+0x58>
	{
		if(++off_sec>=59){off_min++;off_sec=0;}
 8016ee8:	4b16      	ldr	r3, [pc, #88]	; (8016f44 <Auto_OFF_process+0x68>)
 8016eea:	881b      	ldrh	r3, [r3, #0]
 8016eec:	3301      	adds	r3, #1
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	4b14      	ldr	r3, [pc, #80]	; (8016f44 <Auto_OFF_process+0x68>)
 8016ef2:	801a      	strh	r2, [r3, #0]
 8016ef4:	4b13      	ldr	r3, [pc, #76]	; (8016f44 <Auto_OFF_process+0x68>)
 8016ef6:	881b      	ldrh	r3, [r3, #0]
 8016ef8:	2b3a      	cmp	r3, #58	; 0x3a
 8016efa:	d908      	bls.n	8016f0e <Auto_OFF_process+0x32>
 8016efc:	4b12      	ldr	r3, [pc, #72]	; (8016f48 <Auto_OFF_process+0x6c>)
 8016efe:	881b      	ldrh	r3, [r3, #0]
 8016f00:	3301      	adds	r3, #1
 8016f02:	b29a      	uxth	r2, r3
 8016f04:	4b10      	ldr	r3, [pc, #64]	; (8016f48 <Auto_OFF_process+0x6c>)
 8016f06:	801a      	strh	r2, [r3, #0]
 8016f08:	4b0e      	ldr	r3, [pc, #56]	; (8016f44 <Auto_OFF_process+0x68>)
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	801a      	strh	r2, [r3, #0]

		if(screen != Off_screen)
 8016f0e:	4b0f      	ldr	r3, [pc, #60]	; (8016f4c <Auto_OFF_process+0x70>)
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	2b03      	cmp	r3, #3
 8016f14:	d00e      	beq.n	8016f34 <Auto_OFF_process+0x58>
		{
			if(off_min>=Auto_Off_Time)
 8016f16:	4b0c      	ldr	r3, [pc, #48]	; (8016f48 <Auto_OFF_process+0x6c>)
 8016f18:	881a      	ldrh	r2, [r3, #0]
 8016f1a:	4b09      	ldr	r3, [pc, #36]	; (8016f40 <Auto_OFF_process+0x64>)
 8016f1c:	881b      	ldrh	r3, [r3, #0]
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d308      	bcc.n	8016f34 <Auto_OFF_process+0x58>
			{
				old_active_string=0xFF;
 8016f22:	4b0b      	ldr	r3, [pc, #44]	; (8016f50 <Auto_OFF_process+0x74>)
 8016f24:	22ff      	movs	r2, #255	; 0xff
 8016f26:	701a      	strb	r2, [r3, #0]
				OnOffCntr = on_off_time;
 8016f28:	4b0a      	ldr	r3, [pc, #40]	; (8016f54 <Auto_OFF_process+0x78>)
 8016f2a:	22c8      	movs	r2, #200	; 0xc8
 8016f2c:	801a      	strh	r2, [r3, #0]
				screen = Off_screen;
 8016f2e:	4b07      	ldr	r3, [pc, #28]	; (8016f4c <Auto_OFF_process+0x70>)
 8016f30:	2203      	movs	r2, #3
 8016f32:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	sleep(1000);
 8016f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016f38:	f7ec f930 	bl	800319c <sleep>
}
 8016f3c:	bf00      	nop
 8016f3e:	bd80      	pop	{r7, pc}
 8016f40:	200008a8 	.word	0x200008a8
 8016f44:	20001c44 	.word	0x20001c44
 8016f48:	20001c46 	.word	0x20001c46
 8016f4c:	2000004c 	.word	0x2000004c
 8016f50:	200003a0 	.word	0x200003a0
 8016f54:	2000004a 	.word	0x2000004a

08016f58 <Display_options_screen_func>:
uint8_t temp_light=0;
uint8_t soft_onoff_cntr=0;


void Display_options_screen_func(void)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b084      	sub	sp, #16
 8016f5c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	RTC_view();
 8016f5e:	f000 fd87 	bl	8017a70 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016f62:	494e      	ldr	r1, [pc, #312]	; (801709c <Display_options_screen_func+0x144>)
 8016f64:	484e      	ldr	r0, [pc, #312]	; (80170a0 <Display_options_screen_func+0x148>)
 8016f66:	f7fe fd75 	bl	8015a54 <u8g2_SetFont>

	// brightness
	u8g2_DrawUTF8(&u8g2, 20, 60, "Яркость:");
 8016f6a:	4b4e      	ldr	r3, [pc, #312]	; (80170a4 <Display_options_screen_func+0x14c>)
 8016f6c:	223c      	movs	r2, #60	; 0x3c
 8016f6e:	2114      	movs	r1, #20
 8016f70:	484b      	ldr	r0, [pc, #300]	; (80170a0 <Display_options_screen_func+0x148>)
 8016f72:	f7fe fccd 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_brightness);
 8016f76:	4b4c      	ldr	r3, [pc, #304]	; (80170a8 <Display_options_screen_func+0x150>)
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	494b      	ldr	r1, [pc, #300]	; (80170ac <Display_options_screen_func+0x154>)
 8016f7e:	484c      	ldr	r0, [pc, #304]	; (80170b0 <Display_options_screen_func+0x158>)
 8016f80:	f006 fec6 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(170, 60, RAM, edit_param, 0);
 8016f84:	4b4b      	ldr	r3, [pc, #300]	; (80170b4 <Display_options_screen_func+0x15c>)
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	2200      	movs	r2, #0
 8016f8a:	9200      	str	r2, [sp, #0]
 8016f8c:	4a48      	ldr	r2, [pc, #288]	; (80170b0 <Display_options_screen_func+0x158>)
 8016f8e:	213c      	movs	r1, #60	; 0x3c
 8016f90:	20aa      	movs	r0, #170	; 0xaa
 8016f92:	f7eb ff59 	bl	8002e48 <Blink_Edit_Parameter>
	// contrast
	u8g2_DrawUTF8(&u8g2, 20, 80, "Контрастность:");
 8016f96:	4b48      	ldr	r3, [pc, #288]	; (80170b8 <Display_options_screen_func+0x160>)
 8016f98:	2250      	movs	r2, #80	; 0x50
 8016f9a:	2114      	movs	r1, #20
 8016f9c:	4840      	ldr	r0, [pc, #256]	; (80170a0 <Display_options_screen_func+0x148>)
 8016f9e:	f7fe fcb7 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_contrast);
 8016fa2:	4b46      	ldr	r3, [pc, #280]	; (80170bc <Display_options_screen_func+0x164>)
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	4940      	ldr	r1, [pc, #256]	; (80170ac <Display_options_screen_func+0x154>)
 8016faa:	4841      	ldr	r0, [pc, #260]	; (80170b0 <Display_options_screen_func+0x158>)
 8016fac:	f006 feb0 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(170, 80, RAM, edit_param, 1);
 8016fb0:	4b40      	ldr	r3, [pc, #256]	; (80170b4 <Display_options_screen_func+0x15c>)
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	2201      	movs	r2, #1
 8016fb6:	9200      	str	r2, [sp, #0]
 8016fb8:	4a3d      	ldr	r2, [pc, #244]	; (80170b0 <Display_options_screen_func+0x158>)
 8016fba:	2150      	movs	r1, #80	; 0x50
 8016fbc:	20aa      	movs	r0, #170	; 0xaa
 8016fbe:	f7eb ff43 	bl	8002e48 <Blink_Edit_Parameter>
	// delay
	u8g2_DrawUTF8(&u8g2, 20, 100, "Длительность:");
 8016fc2:	4b3f      	ldr	r3, [pc, #252]	; (80170c0 <Display_options_screen_func+0x168>)
 8016fc4:	2264      	movs	r2, #100	; 0x64
 8016fc6:	2114      	movs	r1, #20
 8016fc8:	4835      	ldr	r0, [pc, #212]	; (80170a0 <Display_options_screen_func+0x148>)
 8016fca:	f7fe fca1 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", light_delay);
 8016fce:	4b3d      	ldr	r3, [pc, #244]	; (80170c4 <Display_options_screen_func+0x16c>)
 8016fd0:	881b      	ldrh	r3, [r3, #0]
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	4935      	ldr	r1, [pc, #212]	; (80170ac <Display_options_screen_func+0x154>)
 8016fd6:	4836      	ldr	r0, [pc, #216]	; (80170b0 <Display_options_screen_func+0x158>)
 8016fd8:	f006 fe9a 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(170, 100, RAM, edit_param, 2);
 8016fdc:	4b35      	ldr	r3, [pc, #212]	; (80170b4 <Display_options_screen_func+0x15c>)
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	2202      	movs	r2, #2
 8016fe2:	9200      	str	r2, [sp, #0]
 8016fe4:	4a32      	ldr	r2, [pc, #200]	; (80170b0 <Display_options_screen_func+0x158>)
 8016fe6:	2164      	movs	r1, #100	; 0x64
 8016fe8:	20aa      	movs	r0, #170	; 0xaa
 8016fea:	f7eb ff2d 	bl	8002e48 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 8016fee:	482c      	ldr	r0, [pc, #176]	; (80170a0 <Display_options_screen_func+0x148>)
 8016ff0:	f7fd fef3 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016ff4:	482a      	ldr	r0, [pc, #168]	; (80170a0 <Display_options_screen_func+0x148>)
 8016ff6:	f7fd fe7d 	bl	8014cf4 <u8g2_ClearBuffer>

	TIM2->CCR1=temp_light;//display_brightness;
 8016ffa:	4b33      	ldr	r3, [pc, #204]	; (80170c8 <Display_options_screen_func+0x170>)
 8016ffc:	781a      	ldrb	r2, [r3, #0]
 8016ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017002:	635a      	str	r2, [r3, #52]	; 0x34

	// Vbias
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8017004:	2200      	movs	r2, #0
 8017006:	f44f 7100 	mov.w	r1, #512	; 0x200
 801700a:	4830      	ldr	r0, [pc, #192]	; (80170cc <Display_options_screen_func+0x174>)
 801700c:	f7f3 f8e8 	bl	800a1e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8017010:	2200      	movs	r2, #0
 8017012:	2101      	movs	r1, #1
 8017014:	482e      	ldr	r0, [pc, #184]	; (80170d0 <Display_options_screen_func+0x178>)
 8017016:	f7f3 f8e3 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+Vbias;
 801701a:	4b2e      	ldr	r3, [pc, #184]	; (80170d4 <Display_options_screen_func+0x17c>)
 801701c:	781b      	ldrb	r3, [r3, #0]
 801701e:	3b18      	subs	r3, #24
 8017020:	b2db      	uxtb	r3, r3
 8017022:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8017024:	463a      	mov	r2, r7
 8017026:	1d39      	adds	r1, r7, #4
 8017028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801702c:	9300      	str	r3, [sp, #0]
 801702e:	2301      	movs	r3, #1
 8017030:	4829      	ldr	r0, [pc, #164]	; (80170d8 <Display_options_screen_func+0x180>)
 8017032:	f7f7 f990 	bl	800e356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8017036:	2201      	movs	r2, #1
 8017038:	2101      	movs	r1, #1
 801703a:	4825      	ldr	r0, [pc, #148]	; (80170d0 <Display_options_screen_func+0x178>)
 801703c:	f7f3 f8d0 	bl	800a1e0 <HAL_GPIO_WritePin>
	// Temp compensation
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8017040:	2200      	movs	r2, #0
 8017042:	2101      	movs	r1, #1
 8017044:	4822      	ldr	r0, [pc, #136]	; (80170d0 <Display_options_screen_func+0x178>)
 8017046:	f7f3 f8cb 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 801704a:	2381      	movs	r3, #129	; 0x81
 801704c:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 801704e:	463a      	mov	r2, r7
 8017050:	1d39      	adds	r1, r7, #4
 8017052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017056:	9300      	str	r3, [sp, #0]
 8017058:	2301      	movs	r3, #1
 801705a:	481f      	ldr	r0, [pc, #124]	; (80170d8 <Display_options_screen_func+0x180>)
 801705c:	f7f7 f97b 	bl	800e356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8017060:	2201      	movs	r2, #1
 8017062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017066:	4819      	ldr	r0, [pc, #100]	; (80170cc <Display_options_screen_func+0x174>)
 8017068:	f7f3 f8ba 	bl	800a1e0 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 801706c:	4b13      	ldr	r3, [pc, #76]	; (80170bc <Display_options_screen_func+0x164>)
 801706e:	781b      	ldrb	r3, [r3, #0]
 8017070:	337d      	adds	r3, #125	; 0x7d
 8017072:	b2db      	uxtb	r3, r3
 8017074:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8017076:	463a      	mov	r2, r7
 8017078:	1d39      	adds	r1, r7, #4
 801707a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801707e:	9300      	str	r3, [sp, #0]
 8017080:	2301      	movs	r3, #1
 8017082:	4815      	ldr	r0, [pc, #84]	; (80170d8 <Display_options_screen_func+0x180>)
 8017084:	f7f7 f967 	bl	800e356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8017088:	2201      	movs	r2, #1
 801708a:	2101      	movs	r1, #1
 801708c:	4810      	ldr	r0, [pc, #64]	; (80170d0 <Display_options_screen_func+0x178>)
 801708e:	f7f3 f8a7 	bl	800a1e0 <HAL_GPIO_WritePin>
}
 8017092:	bf00      	nop
 8017094:	3708      	adds	r7, #8
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}
 801709a:	bf00      	nop
 801709c:	080271c4 	.word	0x080271c4
 80170a0:	20001fcc 	.word	0x20001fcc
 80170a4:	08022184 	.word	0x08022184
 80170a8:	20000098 	.word	0x20000098
 80170ac:	08022194 	.word	0x08022194
 80170b0:	20002088 	.word	0x20002088
 80170b4:	2000085c 	.word	0x2000085c
 80170b8:	08022198 	.word	0x08022198
 80170bc:	20000099 	.word	0x20000099
 80170c0:	080221b4 	.word	0x080221b4
 80170c4:	200000b0 	.word	0x200000b0
 80170c8:	20001c4c 	.word	0x20001c4c
 80170cc:	48000400 	.word	0x48000400
 80170d0:	48001000 	.word	0x48001000
 80170d4:	20000370 	.word	0x20000370
 80170d8:	20001f68 	.word	0x20001f68

080170dc <Display_options_screen_S9>:


// MENU
void Display_options_screen_S9(void)
{
 80170dc:	b480      	push	{r7}
 80170de:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 80170e0:	4b06      	ldr	r3, [pc, #24]	; (80170fc <Display_options_screen_S9+0x20>)
 80170e2:	2208      	movs	r2, #8
 80170e4:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80170e6:	4b06      	ldr	r3, [pc, #24]	; (8017100 <Display_options_screen_S9+0x24>)
 80170e8:	22ff      	movs	r2, #255	; 0xff
 80170ea:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 80170ec:	4b05      	ldr	r3, [pc, #20]	; (8017104 <Display_options_screen_S9+0x28>)
 80170ee:	2200      	movs	r2, #0
 80170f0:	701a      	strb	r2, [r3, #0]
}
 80170f2:	bf00      	nop
 80170f4:	46bd      	mov	sp, r7
 80170f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fa:	4770      	bx	lr
 80170fc:	2000004c 	.word	0x2000004c
 8017100:	200003a0 	.word	0x200003a0
 8017104:	200003a1 	.word	0x200003a1

08017108 <Display_options_screen_S6>:

// DOWN
void Display_options_screen_S6(void)
{
 8017108:	b480      	push	{r7}
 801710a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801710c:	4b07      	ldr	r3, [pc, #28]	; (801712c <Display_options_screen_S6+0x24>)
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	2b01      	cmp	r3, #1
 8017112:	d805      	bhi.n	8017120 <Display_options_screen_S6+0x18>
 8017114:	4b05      	ldr	r3, [pc, #20]	; (801712c <Display_options_screen_S6+0x24>)
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	3301      	adds	r3, #1
 801711a:	b2da      	uxtb	r2, r3
 801711c:	4b03      	ldr	r3, [pc, #12]	; (801712c <Display_options_screen_S6+0x24>)
 801711e:	701a      	strb	r2, [r3, #0]
}
 8017120:	bf00      	nop
 8017122:	46bd      	mov	sp, r7
 8017124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017128:	4770      	bx	lr
 801712a:	bf00      	nop
 801712c:	2000085c 	.word	0x2000085c

08017130 <Display_options_screen_S7>:

// UP
void Display_options_screen_S7(void)
{
 8017130:	b480      	push	{r7}
 8017132:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017134:	4b07      	ldr	r3, [pc, #28]	; (8017154 <Display_options_screen_S7+0x24>)
 8017136:	781b      	ldrb	r3, [r3, #0]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d005      	beq.n	8017148 <Display_options_screen_S7+0x18>
 801713c:	4b05      	ldr	r3, [pc, #20]	; (8017154 <Display_options_screen_S7+0x24>)
 801713e:	781b      	ldrb	r3, [r3, #0]
 8017140:	3b01      	subs	r3, #1
 8017142:	b2da      	uxtb	r2, r3
 8017144:	4b03      	ldr	r3, [pc, #12]	; (8017154 <Display_options_screen_S7+0x24>)
 8017146:	701a      	strb	r2, [r3, #0]
}
 8017148:	bf00      	nop
 801714a:	46bd      	mov	sp, r7
 801714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017150:	4770      	bx	lr
 8017152:	bf00      	nop
 8017154:	2000085c 	.word	0x2000085c

08017158 <Display_options_screen_S4>:

// ENTER
void Display_options_screen_S4(void)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	af00      	add	r7, sp, #0
	switch(edit_param)
 801715c:	4b10      	ldr	r3, [pc, #64]	; (80171a0 <Display_options_screen_S4+0x48>)
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	2b02      	cmp	r3, #2
 8017162:	d014      	beq.n	801718e <Display_options_screen_S4+0x36>
 8017164:	2b02      	cmp	r3, #2
 8017166:	dc19      	bgt.n	801719c <Display_options_screen_S4+0x44>
 8017168:	2b00      	cmp	r3, #0
 801716a:	d002      	beq.n	8017172 <Display_options_screen_S4+0x1a>
 801716c:	2b01      	cmp	r3, #1
 801716e:	d007      	beq.n	8017180 <Display_options_screen_S4+0x28>
	{
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
		case 2: Save_Settings(light_delay_tag, light_delay); break;
	}
}
 8017170:	e014      	b.n	801719c <Display_options_screen_S4+0x44>
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
 8017172:	4b0c      	ldr	r3, [pc, #48]	; (80171a4 <Display_options_screen_S4+0x4c>)
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	4619      	mov	r1, r3
 8017178:	2001      	movs	r0, #1
 801717a:	f7ee fa79 	bl	8005670 <Save_Settings>
 801717e:	e00d      	b.n	801719c <Display_options_screen_S4+0x44>
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
 8017180:	4b09      	ldr	r3, [pc, #36]	; (80171a8 <Display_options_screen_S4+0x50>)
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	4619      	mov	r1, r3
 8017186:	2002      	movs	r0, #2
 8017188:	f7ee fa72 	bl	8005670 <Save_Settings>
 801718c:	e006      	b.n	801719c <Display_options_screen_S4+0x44>
		case 2: Save_Settings(light_delay_tag, light_delay); break;
 801718e:	4b07      	ldr	r3, [pc, #28]	; (80171ac <Display_options_screen_S4+0x54>)
 8017190:	881b      	ldrh	r3, [r3, #0]
 8017192:	4619      	mov	r1, r3
 8017194:	2010      	movs	r0, #16
 8017196:	f7ee fa6b 	bl	8005670 <Save_Settings>
 801719a:	bf00      	nop
}
 801719c:	bf00      	nop
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	2000085c 	.word	0x2000085c
 80171a4:	20000098 	.word	0x20000098
 80171a8:	20000099 	.word	0x20000099
 80171ac:	200000b0 	.word	0x200000b0

080171b0 <Display_options_screen_S8>:



// BACKWARD
void Display_options_screen_S8(void)
{
 80171b0:	b480      	push	{r7}
 80171b2:	af00      	add	r7, sp, #0
	switch(edit_param)
 80171b4:	4b1a      	ldr	r3, [pc, #104]	; (8017220 <Display_options_screen_S8+0x70>)
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	2b02      	cmp	r3, #2
 80171ba:	d01c      	beq.n	80171f6 <Display_options_screen_S8+0x46>
 80171bc:	2b02      	cmp	r3, #2
 80171be:	dc2a      	bgt.n	8017216 <Display_options_screen_S8+0x66>
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d002      	beq.n	80171ca <Display_options_screen_S8+0x1a>
 80171c4:	2b01      	cmp	r3, #1
 80171c6:	d00b      	beq.n	80171e0 <Display_options_screen_S8+0x30>
	{
		case 0: if(display_brightness>0)display_brightness--; break;
		case 1: if(display_contrast>0)display_contrast--; break;
		case 2: if(light_delay>0)light_delay--; break;
	}
}
 80171c8:	e025      	b.n	8017216 <Display_options_screen_S8+0x66>
		case 0: if(display_brightness>0)display_brightness--; break;
 80171ca:	4b16      	ldr	r3, [pc, #88]	; (8017224 <Display_options_screen_S8+0x74>)
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d01c      	beq.n	801720c <Display_options_screen_S8+0x5c>
 80171d2:	4b14      	ldr	r3, [pc, #80]	; (8017224 <Display_options_screen_S8+0x74>)
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	3b01      	subs	r3, #1
 80171d8:	b2da      	uxtb	r2, r3
 80171da:	4b12      	ldr	r3, [pc, #72]	; (8017224 <Display_options_screen_S8+0x74>)
 80171dc:	701a      	strb	r2, [r3, #0]
 80171de:	e015      	b.n	801720c <Display_options_screen_S8+0x5c>
		case 1: if(display_contrast>0)display_contrast--; break;
 80171e0:	4b11      	ldr	r3, [pc, #68]	; (8017228 <Display_options_screen_S8+0x78>)
 80171e2:	781b      	ldrb	r3, [r3, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d013      	beq.n	8017210 <Display_options_screen_S8+0x60>
 80171e8:	4b0f      	ldr	r3, [pc, #60]	; (8017228 <Display_options_screen_S8+0x78>)
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	3b01      	subs	r3, #1
 80171ee:	b2da      	uxtb	r2, r3
 80171f0:	4b0d      	ldr	r3, [pc, #52]	; (8017228 <Display_options_screen_S8+0x78>)
 80171f2:	701a      	strb	r2, [r3, #0]
 80171f4:	e00c      	b.n	8017210 <Display_options_screen_S8+0x60>
		case 2: if(light_delay>0)light_delay--; break;
 80171f6:	4b0d      	ldr	r3, [pc, #52]	; (801722c <Display_options_screen_S8+0x7c>)
 80171f8:	881b      	ldrh	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d00a      	beq.n	8017214 <Display_options_screen_S8+0x64>
 80171fe:	4b0b      	ldr	r3, [pc, #44]	; (801722c <Display_options_screen_S8+0x7c>)
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	3b01      	subs	r3, #1
 8017204:	b29a      	uxth	r2, r3
 8017206:	4b09      	ldr	r3, [pc, #36]	; (801722c <Display_options_screen_S8+0x7c>)
 8017208:	801a      	strh	r2, [r3, #0]
 801720a:	e003      	b.n	8017214 <Display_options_screen_S8+0x64>
		case 0: if(display_brightness>0)display_brightness--; break;
 801720c:	bf00      	nop
 801720e:	e002      	b.n	8017216 <Display_options_screen_S8+0x66>
		case 1: if(display_contrast>0)display_contrast--; break;
 8017210:	bf00      	nop
 8017212:	e000      	b.n	8017216 <Display_options_screen_S8+0x66>
		case 2: if(light_delay>0)light_delay--; break;
 8017214:	bf00      	nop
}
 8017216:	bf00      	nop
 8017218:	46bd      	mov	sp, r7
 801721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721e:	4770      	bx	lr
 8017220:	2000085c 	.word	0x2000085c
 8017224:	20000098 	.word	0x20000098
 8017228:	20000099 	.word	0x20000099
 801722c:	200000b0 	.word	0x200000b0

08017230 <Display_options_screen_S5>:

// FORWARD
void Display_options_screen_S5(void)
{
 8017230:	b480      	push	{r7}
 8017232:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017234:	4b1a      	ldr	r3, [pc, #104]	; (80172a0 <Display_options_screen_S5+0x70>)
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	2b02      	cmp	r3, #2
 801723a:	d01c      	beq.n	8017276 <Display_options_screen_S5+0x46>
 801723c:	2b02      	cmp	r3, #2
 801723e:	dc2a      	bgt.n	8017296 <Display_options_screen_S5+0x66>
 8017240:	2b00      	cmp	r3, #0
 8017242:	d002      	beq.n	801724a <Display_options_screen_S5+0x1a>
 8017244:	2b01      	cmp	r3, #1
 8017246:	d00b      	beq.n	8017260 <Display_options_screen_S5+0x30>
	{
		case 0:if(display_brightness<50)display_brightness++; break;
		case 1: if(display_contrast<50)display_contrast++; break;
		case 2: if(light_delay<50)light_delay++; break;
	}
}
 8017248:	e025      	b.n	8017296 <Display_options_screen_S5+0x66>
		case 0:if(display_brightness<50)display_brightness++; break;
 801724a:	4b16      	ldr	r3, [pc, #88]	; (80172a4 <Display_options_screen_S5+0x74>)
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	2b31      	cmp	r3, #49	; 0x31
 8017250:	d81c      	bhi.n	801728c <Display_options_screen_S5+0x5c>
 8017252:	4b14      	ldr	r3, [pc, #80]	; (80172a4 <Display_options_screen_S5+0x74>)
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	3301      	adds	r3, #1
 8017258:	b2da      	uxtb	r2, r3
 801725a:	4b12      	ldr	r3, [pc, #72]	; (80172a4 <Display_options_screen_S5+0x74>)
 801725c:	701a      	strb	r2, [r3, #0]
 801725e:	e015      	b.n	801728c <Display_options_screen_S5+0x5c>
		case 1: if(display_contrast<50)display_contrast++; break;
 8017260:	4b11      	ldr	r3, [pc, #68]	; (80172a8 <Display_options_screen_S5+0x78>)
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	2b31      	cmp	r3, #49	; 0x31
 8017266:	d813      	bhi.n	8017290 <Display_options_screen_S5+0x60>
 8017268:	4b0f      	ldr	r3, [pc, #60]	; (80172a8 <Display_options_screen_S5+0x78>)
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	3301      	adds	r3, #1
 801726e:	b2da      	uxtb	r2, r3
 8017270:	4b0d      	ldr	r3, [pc, #52]	; (80172a8 <Display_options_screen_S5+0x78>)
 8017272:	701a      	strb	r2, [r3, #0]
 8017274:	e00c      	b.n	8017290 <Display_options_screen_S5+0x60>
		case 2: if(light_delay<50)light_delay++; break;
 8017276:	4b0d      	ldr	r3, [pc, #52]	; (80172ac <Display_options_screen_S5+0x7c>)
 8017278:	881b      	ldrh	r3, [r3, #0]
 801727a:	2b31      	cmp	r3, #49	; 0x31
 801727c:	d80a      	bhi.n	8017294 <Display_options_screen_S5+0x64>
 801727e:	4b0b      	ldr	r3, [pc, #44]	; (80172ac <Display_options_screen_S5+0x7c>)
 8017280:	881b      	ldrh	r3, [r3, #0]
 8017282:	3301      	adds	r3, #1
 8017284:	b29a      	uxth	r2, r3
 8017286:	4b09      	ldr	r3, [pc, #36]	; (80172ac <Display_options_screen_S5+0x7c>)
 8017288:	801a      	strh	r2, [r3, #0]
 801728a:	e003      	b.n	8017294 <Display_options_screen_S5+0x64>
		case 0:if(display_brightness<50)display_brightness++; break;
 801728c:	bf00      	nop
 801728e:	e002      	b.n	8017296 <Display_options_screen_S5+0x66>
		case 1: if(display_contrast<50)display_contrast++; break;
 8017290:	bf00      	nop
 8017292:	e000      	b.n	8017296 <Display_options_screen_S5+0x66>
		case 2: if(light_delay<50)light_delay++; break;
 8017294:	bf00      	nop
}
 8017296:	bf00      	nop
 8017298:	46bd      	mov	sp, r7
 801729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729e:	4770      	bx	lr
 80172a0:	2000085c 	.word	0x2000085c
 80172a4:	20000098 	.word	0x20000098
 80172a8:	20000099 	.word	0x20000099
 80172ac:	200000b0 	.word	0x200000b0

080172b0 <Light_OFF_process>:



void Light_OFF_process(void)
{
 80172b0:	b480      	push	{r7}
 80172b2:	af00      	add	r7, sp, #0
	if(++light_ms>=1000)
 80172b4:	4b37      	ldr	r3, [pc, #220]	; (8017394 <Light_OFF_process+0xe4>)
 80172b6:	881b      	ldrh	r3, [r3, #0]
 80172b8:	3301      	adds	r3, #1
 80172ba:	b29a      	uxth	r2, r3
 80172bc:	4b35      	ldr	r3, [pc, #212]	; (8017394 <Light_OFF_process+0xe4>)
 80172be:	801a      	strh	r2, [r3, #0]
 80172c0:	4b34      	ldr	r3, [pc, #208]	; (8017394 <Light_OFF_process+0xe4>)
 80172c2:	881b      	ldrh	r3, [r3, #0]
 80172c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80172c8:	d315      	bcc.n	80172f6 <Light_OFF_process+0x46>
	{
		light_ms=0;
 80172ca:	4b32      	ldr	r3, [pc, #200]	; (8017394 <Light_OFF_process+0xe4>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	801a      	strh	r2, [r3, #0]
		if(++light_sec>59){light_min++; light_sec=0;}
 80172d0:	4b31      	ldr	r3, [pc, #196]	; (8017398 <Light_OFF_process+0xe8>)
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	3301      	adds	r3, #1
 80172d6:	b2da      	uxtb	r2, r3
 80172d8:	4b2f      	ldr	r3, [pc, #188]	; (8017398 <Light_OFF_process+0xe8>)
 80172da:	701a      	strb	r2, [r3, #0]
 80172dc:	4b2e      	ldr	r3, [pc, #184]	; (8017398 <Light_OFF_process+0xe8>)
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	2b3b      	cmp	r3, #59	; 0x3b
 80172e2:	d908      	bls.n	80172f6 <Light_OFF_process+0x46>
 80172e4:	4b2d      	ldr	r3, [pc, #180]	; (801739c <Light_OFF_process+0xec>)
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	3301      	adds	r3, #1
 80172ea:	b2da      	uxtb	r2, r3
 80172ec:	4b2b      	ldr	r3, [pc, #172]	; (801739c <Light_OFF_process+0xec>)
 80172ee:	701a      	strb	r2, [r3, #0]
 80172f0:	4b29      	ldr	r3, [pc, #164]	; (8017398 <Light_OFF_process+0xe8>)
 80172f2:	2200      	movs	r2, #0
 80172f4:	701a      	strb	r2, [r3, #0]
	}

	if(++soft_onoff_cntr>=50)
 80172f6:	4b2a      	ldr	r3, [pc, #168]	; (80173a0 <Light_OFF_process+0xf0>)
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	3301      	adds	r3, #1
 80172fc:	b2da      	uxtb	r2, r3
 80172fe:	4b28      	ldr	r3, [pc, #160]	; (80173a0 <Light_OFF_process+0xf0>)
 8017300:	701a      	strb	r2, [r3, #0]
 8017302:	4b27      	ldr	r3, [pc, #156]	; (80173a0 <Light_OFF_process+0xf0>)
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	2b31      	cmp	r3, #49	; 0x31
 8017308:	d93e      	bls.n	8017388 <Light_OFF_process+0xd8>
	{
		soft_onoff_cntr=0;
 801730a:	4b25      	ldr	r3, [pc, #148]	; (80173a0 <Light_OFF_process+0xf0>)
 801730c:	2200      	movs	r2, #0
 801730e:	701a      	strb	r2, [r3, #0]
		if(light_min>=light_delay)
 8017310:	4b22      	ldr	r3, [pc, #136]	; (801739c <Light_OFF_process+0xec>)
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	b29a      	uxth	r2, r3
 8017316:	4b23      	ldr	r3, [pc, #140]	; (80173a4 <Light_OFF_process+0xf4>)
 8017318:	881b      	ldrh	r3, [r3, #0]
 801731a:	429a      	cmp	r2, r3
 801731c:	d319      	bcc.n	8017352 <Light_OFF_process+0xa2>
		{
			light_min=light_delay;
 801731e:	4b21      	ldr	r3, [pc, #132]	; (80173a4 <Light_OFF_process+0xf4>)
 8017320:	881b      	ldrh	r3, [r3, #0]
 8017322:	b2da      	uxtb	r2, r3
 8017324:	4b1d      	ldr	r3, [pc, #116]	; (801739c <Light_OFF_process+0xec>)
 8017326:	701a      	strb	r2, [r3, #0]
			if(temp_light>0)temp_light--;
 8017328:	4b1f      	ldr	r3, [pc, #124]	; (80173a8 <Light_OFF_process+0xf8>)
 801732a:	781b      	ldrb	r3, [r3, #0]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d005      	beq.n	801733c <Light_OFF_process+0x8c>
 8017330:	4b1d      	ldr	r3, [pc, #116]	; (80173a8 <Light_OFF_process+0xf8>)
 8017332:	781b      	ldrb	r3, [r3, #0]
 8017334:	3b01      	subs	r3, #1
 8017336:	b2da      	uxtb	r2, r3
 8017338:	4b1b      	ldr	r3, [pc, #108]	; (80173a8 <Light_OFF_process+0xf8>)
 801733a:	701a      	strb	r2, [r3, #0]
			light_min=light_delay;
 801733c:	4b19      	ldr	r3, [pc, #100]	; (80173a4 <Light_OFF_process+0xf4>)
 801733e:	881b      	ldrh	r3, [r3, #0]
 8017340:	b2da      	uxtb	r2, r3
 8017342:	4b16      	ldr	r3, [pc, #88]	; (801739c <Light_OFF_process+0xec>)
 8017344:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 8017346:	4b18      	ldr	r3, [pc, #96]	; (80173a8 <Light_OFF_process+0xf8>)
 8017348:	781a      	ldrb	r2, [r3, #0]
 801734a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801734e:	635a      	str	r2, [r3, #52]	; 0x34
			if(temp_light<display_brightness)temp_light++;
			if(temp_light>=display_brightness)temp_light=display_brightness;
			TIM2->CCR1=temp_light;
		}
	}
}
 8017350:	e01a      	b.n	8017388 <Light_OFF_process+0xd8>
			if(temp_light<display_brightness)temp_light++;
 8017352:	4b15      	ldr	r3, [pc, #84]	; (80173a8 <Light_OFF_process+0xf8>)
 8017354:	781a      	ldrb	r2, [r3, #0]
 8017356:	4b15      	ldr	r3, [pc, #84]	; (80173ac <Light_OFF_process+0xfc>)
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	429a      	cmp	r2, r3
 801735c:	d205      	bcs.n	801736a <Light_OFF_process+0xba>
 801735e:	4b12      	ldr	r3, [pc, #72]	; (80173a8 <Light_OFF_process+0xf8>)
 8017360:	781b      	ldrb	r3, [r3, #0]
 8017362:	3301      	adds	r3, #1
 8017364:	b2da      	uxtb	r2, r3
 8017366:	4b10      	ldr	r3, [pc, #64]	; (80173a8 <Light_OFF_process+0xf8>)
 8017368:	701a      	strb	r2, [r3, #0]
			if(temp_light>=display_brightness)temp_light=display_brightness;
 801736a:	4b0f      	ldr	r3, [pc, #60]	; (80173a8 <Light_OFF_process+0xf8>)
 801736c:	781a      	ldrb	r2, [r3, #0]
 801736e:	4b0f      	ldr	r3, [pc, #60]	; (80173ac <Light_OFF_process+0xfc>)
 8017370:	781b      	ldrb	r3, [r3, #0]
 8017372:	429a      	cmp	r2, r3
 8017374:	d303      	bcc.n	801737e <Light_OFF_process+0xce>
 8017376:	4b0d      	ldr	r3, [pc, #52]	; (80173ac <Light_OFF_process+0xfc>)
 8017378:	781a      	ldrb	r2, [r3, #0]
 801737a:	4b0b      	ldr	r3, [pc, #44]	; (80173a8 <Light_OFF_process+0xf8>)
 801737c:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 801737e:	4b0a      	ldr	r3, [pc, #40]	; (80173a8 <Light_OFF_process+0xf8>)
 8017380:	781a      	ldrb	r2, [r3, #0]
 8017382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017386:	635a      	str	r2, [r3, #52]	; 0x34
}
 8017388:	bf00      	nop
 801738a:	46bd      	mov	sp, r7
 801738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017390:	4770      	bx	lr
 8017392:	bf00      	nop
 8017394:	20001c4a 	.word	0x20001c4a
 8017398:	20001c48 	.word	0x20001c48
 801739c:	20001c49 	.word	0x20001c49
 80173a0:	20001c4d 	.word	0x20001c4d
 80173a4:	200000b0 	.word	0x200000b0
 80173a8:	20001c4c 	.word	0x20001c4c
 80173ac:	20000098 	.word	0x20000098

080173b0 <Measure_options_screen_func>:
const uint8_t time_icon[]={0,24,0,24,0x1F, 0xFF, 0xF8, 0x7F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFE, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x31, 0x87, 0xE0, 0x33, 0x87, 0xE0, 0x3F, 0x07, 0xE0, 0x1E, 0x07, 0xE0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0x7F, 0xFF, 0xFE, 0x3F, 0xFF, 0xFC, 0x1F, 0xFF, 0xF8};



void Measure_options_screen_func(void)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af02      	add	r7, sp, #8
	RTC_view();
 80173b6:	f000 fb5b 	bl	8017a70 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80173ba:	4974      	ldr	r1, [pc, #464]	; (801758c <Measure_options_screen_func+0x1dc>)
 80173bc:	4874      	ldr	r0, [pc, #464]	; (8017590 <Measure_options_screen_func+0x1e0>)
 80173be:	f7fe fb49 	bl	8015a54 <u8g2_SetFont>


		// "ПИКОВЫЕ ЗНАЧЕНИЯ");
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*0+6, "ПИКОВЫЕ ЗНАЧЕНИЯ", edit_param, 0);
 80173c2:	4b74      	ldr	r3, [pc, #464]	; (8017594 <Measure_options_screen_func+0x1e4>)
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	2200      	movs	r2, #0
 80173c8:	9200      	str	r2, [sp, #0]
 80173ca:	4a73      	ldr	r2, [pc, #460]	; (8017598 <Measure_options_screen_func+0x1e8>)
 80173cc:	211f      	movs	r1, #31
 80173ce:	200f      	movs	r0, #15
 80173d0:	f7eb fd3a 	bl	8002e48 <Blink_Edit_Parameter>
		switch(mm_peak)
 80173d4:	4b71      	ldr	r3, [pc, #452]	; (801759c <Measure_options_screen_func+0x1ec>)
 80173d6:	781b      	ldrb	r3, [r3, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d002      	beq.n	80173e2 <Measure_options_screen_func+0x32>
 80173dc:	2b01      	cmp	r3, #1
 80173de:	d007      	beq.n	80173f0 <Measure_options_screen_func+0x40>
 80173e0:	e00d      	b.n	80173fe <Measure_options_screen_func+0x4e>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 80173e2:	2301      	movs	r3, #1
 80173e4:	2219      	movs	r2, #25
 80173e6:	21c8      	movs	r1, #200	; 0xc8
 80173e8:	486d      	ldr	r0, [pc, #436]	; (80175a0 <Measure_options_screen_func+0x1f0>)
 80173ea:	f7eb fb9f 	bl	8002b2c <DrawImage>
 80173ee:	e006      	b.n	80173fe <Measure_options_screen_func+0x4e>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 80173f0:	2301      	movs	r3, #1
 80173f2:	2219      	movs	r2, #25
 80173f4:	21c8      	movs	r1, #200	; 0xc8
 80173f6:	486b      	ldr	r0, [pc, #428]	; (80175a4 <Measure_options_screen_func+0x1f4>)
 80173f8:	f7eb fb98 	bl	8002b2c <DrawImage>
 80173fc:	bf00      	nop
		}

		// "ОБНАРУЖЕНИЕ УТЕЧЕК"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*1+6, "ОБНАРУЖЕНИЕ УТЕЧЕК", edit_param, 1);
 80173fe:	4b65      	ldr	r3, [pc, #404]	; (8017594 <Measure_options_screen_func+0x1e4>)
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	2201      	movs	r2, #1
 8017404:	9200      	str	r2, [sp, #0]
 8017406:	4a68      	ldr	r2, [pc, #416]	; (80175a8 <Measure_options_screen_func+0x1f8>)
 8017408:	2139      	movs	r1, #57	; 0x39
 801740a:	200f      	movs	r0, #15
 801740c:	f7eb fd1c 	bl	8002e48 <Blink_Edit_Parameter>
		switch(leak_detect)
 8017410:	4b66      	ldr	r3, [pc, #408]	; (80175ac <Measure_options_screen_func+0x1fc>)
 8017412:	781b      	ldrb	r3, [r3, #0]
 8017414:	2b02      	cmp	r3, #2
 8017416:	d014      	beq.n	8017442 <Measure_options_screen_func+0x92>
 8017418:	2b02      	cmp	r3, #2
 801741a:	dc19      	bgt.n	8017450 <Measure_options_screen_func+0xa0>
 801741c:	2b00      	cmp	r3, #0
 801741e:	d002      	beq.n	8017426 <Measure_options_screen_func+0x76>
 8017420:	2b01      	cmp	r3, #1
 8017422:	d007      	beq.n	8017434 <Measure_options_screen_func+0x84>
 8017424:	e014      	b.n	8017450 <Measure_options_screen_func+0xa0>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017426:	2301      	movs	r3, #1
 8017428:	2233      	movs	r2, #51	; 0x33
 801742a:	21c8      	movs	r1, #200	; 0xc8
 801742c:	485c      	ldr	r0, [pc, #368]	; (80175a0 <Measure_options_screen_func+0x1f0>)
 801742e:	f7eb fb7d 	bl	8002b2c <DrawImage>
 8017432:	e00d      	b.n	8017450 <Measure_options_screen_func+0xa0>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017434:	2301      	movs	r3, #1
 8017436:	2233      	movs	r2, #51	; 0x33
 8017438:	21c8      	movs	r1, #200	; 0xc8
 801743a:	485a      	ldr	r0, [pc, #360]	; (80175a4 <Measure_options_screen_func+0x1f4>)
 801743c:	f7eb fb76 	bl	8002b2c <DrawImage>
 8017440:	e006      	b.n	8017450 <Measure_options_screen_func+0xa0>
			case 2: DrawImage(time_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017442:	2301      	movs	r3, #1
 8017444:	2233      	movs	r2, #51	; 0x33
 8017446:	21c8      	movs	r1, #200	; 0xc8
 8017448:	4859      	ldr	r0, [pc, #356]	; (80175b0 <Measure_options_screen_func+0x200>)
 801744a:	f7eb fb6f 	bl	8002b2c <DrawImage>
 801744e:	bf00      	nop
		}

		// "P+V"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*2+6, "P+V", edit_param, 2);
 8017450:	4b50      	ldr	r3, [pc, #320]	; (8017594 <Measure_options_screen_func+0x1e4>)
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	2202      	movs	r2, #2
 8017456:	9200      	str	r2, [sp, #0]
 8017458:	4a56      	ldr	r2, [pc, #344]	; (80175b4 <Measure_options_screen_func+0x204>)
 801745a:	2153      	movs	r1, #83	; 0x53
 801745c:	200f      	movs	r0, #15
 801745e:	f7eb fcf3 	bl	8002e48 <Blink_Edit_Parameter>
		switch(PV)
 8017462:	4b55      	ldr	r3, [pc, #340]	; (80175b8 <Measure_options_screen_func+0x208>)
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d002      	beq.n	8017470 <Measure_options_screen_func+0xc0>
 801746a:	2b01      	cmp	r3, #1
 801746c:	d007      	beq.n	801747e <Measure_options_screen_func+0xce>
 801746e:	e00d      	b.n	801748c <Measure_options_screen_func+0xdc>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 8017470:	2301      	movs	r3, #1
 8017472:	224d      	movs	r2, #77	; 0x4d
 8017474:	21c8      	movs	r1, #200	; 0xc8
 8017476:	484a      	ldr	r0, [pc, #296]	; (80175a0 <Measure_options_screen_func+0x1f0>)
 8017478:	f7eb fb58 	bl	8002b2c <DrawImage>
 801747c:	e006      	b.n	801748c <Measure_options_screen_func+0xdc>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 801747e:	2301      	movs	r3, #1
 8017480:	224d      	movs	r2, #77	; 0x4d
 8017482:	21c8      	movs	r1, #200	; 0xc8
 8017484:	4847      	ldr	r0, [pc, #284]	; (80175a4 <Measure_options_screen_func+0x1f4>)
 8017486:	f7eb fb51 	bl	8002b2c <DrawImage>
 801748a:	bf00      	nop
		}

		// "P+I"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*3+6, "P+I", edit_param, 3);
 801748c:	4b41      	ldr	r3, [pc, #260]	; (8017594 <Measure_options_screen_func+0x1e4>)
 801748e:	781b      	ldrb	r3, [r3, #0]
 8017490:	2203      	movs	r2, #3
 8017492:	9200      	str	r2, [sp, #0]
 8017494:	4a49      	ldr	r2, [pc, #292]	; (80175bc <Measure_options_screen_func+0x20c>)
 8017496:	216d      	movs	r1, #109	; 0x6d
 8017498:	200f      	movs	r0, #15
 801749a:	f7eb fcd5 	bl	8002e48 <Blink_Edit_Parameter>
		switch(PI)
 801749e:	4b48      	ldr	r3, [pc, #288]	; (80175c0 <Measure_options_screen_func+0x210>)
 80174a0:	781b      	ldrb	r3, [r3, #0]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d002      	beq.n	80174ac <Measure_options_screen_func+0xfc>
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d007      	beq.n	80174ba <Measure_options_screen_func+0x10a>
 80174aa:	e00d      	b.n	80174c8 <Measure_options_screen_func+0x118>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 80174ac:	2301      	movs	r3, #1
 80174ae:	2267      	movs	r2, #103	; 0x67
 80174b0:	21c8      	movs	r1, #200	; 0xc8
 80174b2:	483b      	ldr	r0, [pc, #236]	; (80175a0 <Measure_options_screen_func+0x1f0>)
 80174b4:	f7eb fb3a 	bl	8002b2c <DrawImage>
 80174b8:	e006      	b.n	80174c8 <Measure_options_screen_func+0x118>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 80174ba:	2301      	movs	r3, #1
 80174bc:	2267      	movs	r2, #103	; 0x67
 80174be:	21c8      	movs	r1, #200	; 0xc8
 80174c0:	4838      	ldr	r0, [pc, #224]	; (80175a4 <Measure_options_screen_func+0x1f4>)
 80174c2:	f7eb fb33 	bl	8002b2c <DrawImage>
 80174c6:	bf00      	nop
		}

		// "P+E"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*4+6, "P+E", edit_param, 4);
 80174c8:	4b32      	ldr	r3, [pc, #200]	; (8017594 <Measure_options_screen_func+0x1e4>)
 80174ca:	781b      	ldrb	r3, [r3, #0]
 80174cc:	2204      	movs	r2, #4
 80174ce:	9200      	str	r2, [sp, #0]
 80174d0:	4a3c      	ldr	r2, [pc, #240]	; (80175c4 <Measure_options_screen_func+0x214>)
 80174d2:	2187      	movs	r1, #135	; 0x87
 80174d4:	200f      	movs	r0, #15
 80174d6:	f7eb fcb7 	bl	8002e48 <Blink_Edit_Parameter>
		switch(PE)
 80174da:	4b3b      	ldr	r3, [pc, #236]	; (80175c8 <Measure_options_screen_func+0x218>)
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	2b07      	cmp	r3, #7
 80174e0:	d84a      	bhi.n	8017578 <Measure_options_screen_func+0x1c8>
 80174e2:	a201      	add	r2, pc, #4	; (adr r2, 80174e8 <Measure_options_screen_func+0x138>)
 80174e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174e8:	08017509 	.word	0x08017509
 80174ec:	08017517 	.word	0x08017517
 80174f0:	08017525 	.word	0x08017525
 80174f4:	08017533 	.word	0x08017533
 80174f8:	08017541 	.word	0x08017541
 80174fc:	0801754f 	.word	0x0801754f
 8017500:	0801755d 	.word	0x0801755d
 8017504:	0801756b 	.word	0x0801756b
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017508:	2301      	movs	r3, #1
 801750a:	2281      	movs	r2, #129	; 0x81
 801750c:	21c8      	movs	r1, #200	; 0xc8
 801750e:	4824      	ldr	r0, [pc, #144]	; (80175a0 <Measure_options_screen_func+0x1f0>)
 8017510:	f7eb fb0c 	bl	8002b2c <DrawImage>
 8017514:	e030      	b.n	8017578 <Measure_options_screen_func+0x1c8>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017516:	2301      	movs	r3, #1
 8017518:	2281      	movs	r2, #129	; 0x81
 801751a:	21c8      	movs	r1, #200	; 0xc8
 801751c:	4821      	ldr	r0, [pc, #132]	; (80175a4 <Measure_options_screen_func+0x1f4>)
 801751e:	f7eb fb05 	bl	8002b2c <DrawImage>
 8017522:	e029      	b.n	8017578 <Measure_options_screen_func+0x1c8>
			case 2: DrawImage(press_on_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017524:	2301      	movs	r3, #1
 8017526:	2281      	movs	r2, #129	; 0x81
 8017528:	21c8      	movs	r1, #200	; 0xc8
 801752a:	4828      	ldr	r0, [pc, #160]	; (80175cc <Measure_options_screen_func+0x21c>)
 801752c:	f7eb fafe 	bl	8002b2c <DrawImage>
 8017530:	e022      	b.n	8017578 <Measure_options_screen_func+0x1c8>
			case 3: DrawImage(press_off_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017532:	2301      	movs	r3, #1
 8017534:	2281      	movs	r2, #129	; 0x81
 8017536:	21c8      	movs	r1, #200	; 0xc8
 8017538:	4825      	ldr	r0, [pc, #148]	; (80175d0 <Measure_options_screen_func+0x220>)
 801753a:	f7eb faf7 	bl	8002b2c <DrawImage>
 801753e:	e01b      	b.n	8017578 <Measure_options_screen_func+0x1c8>
			case 4: DrawImage(up_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017540:	2301      	movs	r3, #1
 8017542:	2281      	movs	r2, #129	; 0x81
 8017544:	21c8      	movs	r1, #200	; 0xc8
 8017546:	4823      	ldr	r0, [pc, #140]	; (80175d4 <Measure_options_screen_func+0x224>)
 8017548:	f7eb faf0 	bl	8002b2c <DrawImage>
 801754c:	e014      	b.n	8017578 <Measure_options_screen_func+0x1c8>
			case 5: DrawImage(down_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801754e:	2301      	movs	r3, #1
 8017550:	2281      	movs	r2, #129	; 0x81
 8017552:	21c8      	movs	r1, #200	; 0xc8
 8017554:	4820      	ldr	r0, [pc, #128]	; (80175d8 <Measure_options_screen_func+0x228>)
 8017556:	f7eb fae9 	bl	8002b2c <DrawImage>
 801755a:	e00d      	b.n	8017578 <Measure_options_screen_func+0x1c8>
			case 6: DrawImage(pos_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801755c:	2301      	movs	r3, #1
 801755e:	2281      	movs	r2, #129	; 0x81
 8017560:	21c8      	movs	r1, #200	; 0xc8
 8017562:	481e      	ldr	r0, [pc, #120]	; (80175dc <Measure_options_screen_func+0x22c>)
 8017564:	f7eb fae2 	bl	8002b2c <DrawImage>
 8017568:	e006      	b.n	8017578 <Measure_options_screen_func+0x1c8>
			case 7: DrawImage(neg_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801756a:	2301      	movs	r3, #1
 801756c:	2281      	movs	r2, #129	; 0x81
 801756e:	21c8      	movs	r1, #200	; 0xc8
 8017570:	481b      	ldr	r0, [pc, #108]	; (80175e0 <Measure_options_screen_func+0x230>)
 8017572:	f7eb fadb 	bl	8002b2c <DrawImage>
 8017576:	bf00      	nop
		}



	u8g2_SendBuffer(&u8g2);
 8017578:	4805      	ldr	r0, [pc, #20]	; (8017590 <Measure_options_screen_func+0x1e0>)
 801757a:	f7fd fc2e 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 801757e:	4804      	ldr	r0, [pc, #16]	; (8017590 <Measure_options_screen_func+0x1e0>)
 8017580:	f7fd fbb8 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8017584:	bf00      	nop
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
 801758a:	bf00      	nop
 801758c:	080271c4 	.word	0x080271c4
 8017590:	20001fcc 	.word	0x20001fcc
 8017594:	2000085c 	.word	0x2000085c
 8017598:	080221d0 	.word	0x080221d0
 801759c:	200008a2 	.word	0x200008a2
 80175a0:	08029198 	.word	0x08029198
 80175a4:	080291e4 	.word	0x080291e4
 80175a8:	080221f0 	.word	0x080221f0
 80175ac:	200008a3 	.word	0x200008a3
 80175b0:	080293f8 	.word	0x080293f8
 80175b4:	08022214 	.word	0x08022214
 80175b8:	200008a4 	.word	0x200008a4
 80175bc:	08022218 	.word	0x08022218
 80175c0:	200008a5 	.word	0x200008a5
 80175c4:	0802221c 	.word	0x0802221c
 80175c8:	200008a6 	.word	0x200008a6
 80175cc:	08029360 	.word	0x08029360
 80175d0:	080293ac 	.word	0x080293ac
 80175d4:	08029230 	.word	0x08029230
 80175d8:	0802927c 	.word	0x0802927c
 80175dc:	08029314 	.word	0x08029314
 80175e0:	080292c8 	.word	0x080292c8

080175e4 <Measure_options_screen_S6>:


// DOWN
void Measure_options_screen_S6(void)
{
 80175e4:	b480      	push	{r7}
 80175e6:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80175e8:	4b07      	ldr	r3, [pc, #28]	; (8017608 <Measure_options_screen_S6+0x24>)
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	2b03      	cmp	r3, #3
 80175ee:	d805      	bhi.n	80175fc <Measure_options_screen_S6+0x18>
 80175f0:	4b05      	ldr	r3, [pc, #20]	; (8017608 <Measure_options_screen_S6+0x24>)
 80175f2:	781b      	ldrb	r3, [r3, #0]
 80175f4:	3301      	adds	r3, #1
 80175f6:	b2da      	uxtb	r2, r3
 80175f8:	4b03      	ldr	r3, [pc, #12]	; (8017608 <Measure_options_screen_S6+0x24>)
 80175fa:	701a      	strb	r2, [r3, #0]
}
 80175fc:	bf00      	nop
 80175fe:	46bd      	mov	sp, r7
 8017600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017604:	4770      	bx	lr
 8017606:	bf00      	nop
 8017608:	2000085c 	.word	0x2000085c

0801760c <Measure_options_screen_S7>:

// UP
void Measure_options_screen_S7(void)
{
 801760c:	b480      	push	{r7}
 801760e:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017610:	4b07      	ldr	r3, [pc, #28]	; (8017630 <Measure_options_screen_S7+0x24>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d005      	beq.n	8017624 <Measure_options_screen_S7+0x18>
 8017618:	4b05      	ldr	r3, [pc, #20]	; (8017630 <Measure_options_screen_S7+0x24>)
 801761a:	781b      	ldrb	r3, [r3, #0]
 801761c:	3b01      	subs	r3, #1
 801761e:	b2da      	uxtb	r2, r3
 8017620:	4b03      	ldr	r3, [pc, #12]	; (8017630 <Measure_options_screen_S7+0x24>)
 8017622:	701a      	strb	r2, [r3, #0]
}
 8017624:	bf00      	nop
 8017626:	46bd      	mov	sp, r7
 8017628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop
 8017630:	2000085c 	.word	0x2000085c

08017634 <Measure_options_screen_S9>:



// MENU
void Measure_options_screen_S9(void)
{
 8017634:	b480      	push	{r7}
 8017636:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8017638:	4b06      	ldr	r3, [pc, #24]	; (8017654 <Measure_options_screen_S9+0x20>)
 801763a:	2204      	movs	r2, #4
 801763c:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801763e:	4b06      	ldr	r3, [pc, #24]	; (8017658 <Measure_options_screen_S9+0x24>)
 8017640:	22ff      	movs	r2, #255	; 0xff
 8017642:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 8017644:	4b05      	ldr	r3, [pc, #20]	; (801765c <Measure_options_screen_S9+0x28>)
 8017646:	2200      	movs	r2, #0
 8017648:	701a      	strb	r2, [r3, #0]
}
 801764a:	bf00      	nop
 801764c:	46bd      	mov	sp, r7
 801764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017652:	4770      	bx	lr
 8017654:	2000004c 	.word	0x2000004c
 8017658:	200003a0 	.word	0x200003a0
 801765c:	200003a1 	.word	0x200003a1

08017660 <Measure_options_screen_S8>:

// BACKWARD
void Measure_options_screen_S8(void)
{
 8017660:	b480      	push	{r7}
 8017662:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017664:	4b2b      	ldr	r3, [pc, #172]	; (8017714 <Measure_options_screen_S8+0xb4>)
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	2b04      	cmp	r3, #4
 801766a:	d84d      	bhi.n	8017708 <Measure_options_screen_S8+0xa8>
 801766c:	a201      	add	r2, pc, #4	; (adr r2, 8017674 <Measure_options_screen_S8+0x14>)
 801766e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017672:	bf00      	nop
 8017674:	08017689 	.word	0x08017689
 8017678:	0801769f 	.word	0x0801769f
 801767c:	080176b5 	.word	0x080176b5
 8017680:	080176cb 	.word	0x080176cb
 8017684:	080176e1 	.word	0x080176e1
	{
		case 0: if(mm_peak>0)mm_peak--; break;
 8017688:	4b23      	ldr	r3, [pc, #140]	; (8017718 <Measure_options_screen_S8+0xb8>)
 801768a:	781b      	ldrb	r3, [r3, #0]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d032      	beq.n	80176f6 <Measure_options_screen_S8+0x96>
 8017690:	4b21      	ldr	r3, [pc, #132]	; (8017718 <Measure_options_screen_S8+0xb8>)
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	3b01      	subs	r3, #1
 8017696:	b2da      	uxtb	r2, r3
 8017698:	4b1f      	ldr	r3, [pc, #124]	; (8017718 <Measure_options_screen_S8+0xb8>)
 801769a:	701a      	strb	r2, [r3, #0]
 801769c:	e02b      	b.n	80176f6 <Measure_options_screen_S8+0x96>
		case 1: if(leak_detect>0)leak_detect--; break;
 801769e:	4b1f      	ldr	r3, [pc, #124]	; (801771c <Measure_options_screen_S8+0xbc>)
 80176a0:	781b      	ldrb	r3, [r3, #0]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d029      	beq.n	80176fa <Measure_options_screen_S8+0x9a>
 80176a6:	4b1d      	ldr	r3, [pc, #116]	; (801771c <Measure_options_screen_S8+0xbc>)
 80176a8:	781b      	ldrb	r3, [r3, #0]
 80176aa:	3b01      	subs	r3, #1
 80176ac:	b2da      	uxtb	r2, r3
 80176ae:	4b1b      	ldr	r3, [pc, #108]	; (801771c <Measure_options_screen_S8+0xbc>)
 80176b0:	701a      	strb	r2, [r3, #0]
 80176b2:	e022      	b.n	80176fa <Measure_options_screen_S8+0x9a>
		case 2: if(PV>0)PV--; break;
 80176b4:	4b1a      	ldr	r3, [pc, #104]	; (8017720 <Measure_options_screen_S8+0xc0>)
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d020      	beq.n	80176fe <Measure_options_screen_S8+0x9e>
 80176bc:	4b18      	ldr	r3, [pc, #96]	; (8017720 <Measure_options_screen_S8+0xc0>)
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	3b01      	subs	r3, #1
 80176c2:	b2da      	uxtb	r2, r3
 80176c4:	4b16      	ldr	r3, [pc, #88]	; (8017720 <Measure_options_screen_S8+0xc0>)
 80176c6:	701a      	strb	r2, [r3, #0]
 80176c8:	e019      	b.n	80176fe <Measure_options_screen_S8+0x9e>
		case 3: if(PI>0)PI--; break;
 80176ca:	4b16      	ldr	r3, [pc, #88]	; (8017724 <Measure_options_screen_S8+0xc4>)
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d017      	beq.n	8017702 <Measure_options_screen_S8+0xa2>
 80176d2:	4b14      	ldr	r3, [pc, #80]	; (8017724 <Measure_options_screen_S8+0xc4>)
 80176d4:	781b      	ldrb	r3, [r3, #0]
 80176d6:	3b01      	subs	r3, #1
 80176d8:	b2da      	uxtb	r2, r3
 80176da:	4b12      	ldr	r3, [pc, #72]	; (8017724 <Measure_options_screen_S8+0xc4>)
 80176dc:	701a      	strb	r2, [r3, #0]
 80176de:	e010      	b.n	8017702 <Measure_options_screen_S8+0xa2>
		case 4: if(PE>0)PE--; break;
 80176e0:	4b11      	ldr	r3, [pc, #68]	; (8017728 <Measure_options_screen_S8+0xc8>)
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d00e      	beq.n	8017706 <Measure_options_screen_S8+0xa6>
 80176e8:	4b0f      	ldr	r3, [pc, #60]	; (8017728 <Measure_options_screen_S8+0xc8>)
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	3b01      	subs	r3, #1
 80176ee:	b2da      	uxtb	r2, r3
 80176f0:	4b0d      	ldr	r3, [pc, #52]	; (8017728 <Measure_options_screen_S8+0xc8>)
 80176f2:	701a      	strb	r2, [r3, #0]
 80176f4:	e007      	b.n	8017706 <Measure_options_screen_S8+0xa6>
		case 0: if(mm_peak>0)mm_peak--; break;
 80176f6:	bf00      	nop
 80176f8:	e006      	b.n	8017708 <Measure_options_screen_S8+0xa8>
		case 1: if(leak_detect>0)leak_detect--; break;
 80176fa:	bf00      	nop
 80176fc:	e004      	b.n	8017708 <Measure_options_screen_S8+0xa8>
		case 2: if(PV>0)PV--; break;
 80176fe:	bf00      	nop
 8017700:	e002      	b.n	8017708 <Measure_options_screen_S8+0xa8>
		case 3: if(PI>0)PI--; break;
 8017702:	bf00      	nop
 8017704:	e000      	b.n	8017708 <Measure_options_screen_S8+0xa8>
		case 4: if(PE>0)PE--; break;
 8017706:	bf00      	nop
	}
}
 8017708:	bf00      	nop
 801770a:	46bd      	mov	sp, r7
 801770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017710:	4770      	bx	lr
 8017712:	bf00      	nop
 8017714:	2000085c 	.word	0x2000085c
 8017718:	200008a2 	.word	0x200008a2
 801771c:	200008a3 	.word	0x200008a3
 8017720:	200008a4 	.word	0x200008a4
 8017724:	200008a5 	.word	0x200008a5
 8017728:	200008a6 	.word	0x200008a6

0801772c <Measure_options_screen_S5>:

// FORWARD
void Measure_options_screen_S5(void)
{
 801772c:	b480      	push	{r7}
 801772e:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017730:	4b2b      	ldr	r3, [pc, #172]	; (80177e0 <Measure_options_screen_S5+0xb4>)
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	2b04      	cmp	r3, #4
 8017736:	d84d      	bhi.n	80177d4 <Measure_options_screen_S5+0xa8>
 8017738:	a201      	add	r2, pc, #4	; (adr r2, 8017740 <Measure_options_screen_S5+0x14>)
 801773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801773e:	bf00      	nop
 8017740:	08017755 	.word	0x08017755
 8017744:	0801776b 	.word	0x0801776b
 8017748:	08017781 	.word	0x08017781
 801774c:	08017797 	.word	0x08017797
 8017750:	080177ad 	.word	0x080177ad
	{
		case 0: if(mm_peak<1)mm_peak++; break;
 8017754:	4b23      	ldr	r3, [pc, #140]	; (80177e4 <Measure_options_screen_S5+0xb8>)
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d132      	bne.n	80177c2 <Measure_options_screen_S5+0x96>
 801775c:	4b21      	ldr	r3, [pc, #132]	; (80177e4 <Measure_options_screen_S5+0xb8>)
 801775e:	781b      	ldrb	r3, [r3, #0]
 8017760:	3301      	adds	r3, #1
 8017762:	b2da      	uxtb	r2, r3
 8017764:	4b1f      	ldr	r3, [pc, #124]	; (80177e4 <Measure_options_screen_S5+0xb8>)
 8017766:	701a      	strb	r2, [r3, #0]
 8017768:	e02b      	b.n	80177c2 <Measure_options_screen_S5+0x96>
		case 1: if(leak_detect<2)leak_detect++; break;
 801776a:	4b1f      	ldr	r3, [pc, #124]	; (80177e8 <Measure_options_screen_S5+0xbc>)
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	2b01      	cmp	r3, #1
 8017770:	d829      	bhi.n	80177c6 <Measure_options_screen_S5+0x9a>
 8017772:	4b1d      	ldr	r3, [pc, #116]	; (80177e8 <Measure_options_screen_S5+0xbc>)
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	3301      	adds	r3, #1
 8017778:	b2da      	uxtb	r2, r3
 801777a:	4b1b      	ldr	r3, [pc, #108]	; (80177e8 <Measure_options_screen_S5+0xbc>)
 801777c:	701a      	strb	r2, [r3, #0]
 801777e:	e022      	b.n	80177c6 <Measure_options_screen_S5+0x9a>
		case 2: if(PV<1)PV++; break;
 8017780:	4b1a      	ldr	r3, [pc, #104]	; (80177ec <Measure_options_screen_S5+0xc0>)
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d120      	bne.n	80177ca <Measure_options_screen_S5+0x9e>
 8017788:	4b18      	ldr	r3, [pc, #96]	; (80177ec <Measure_options_screen_S5+0xc0>)
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	3301      	adds	r3, #1
 801778e:	b2da      	uxtb	r2, r3
 8017790:	4b16      	ldr	r3, [pc, #88]	; (80177ec <Measure_options_screen_S5+0xc0>)
 8017792:	701a      	strb	r2, [r3, #0]
 8017794:	e019      	b.n	80177ca <Measure_options_screen_S5+0x9e>
		case 3: if(PI<1)PI++; break;
 8017796:	4b16      	ldr	r3, [pc, #88]	; (80177f0 <Measure_options_screen_S5+0xc4>)
 8017798:	781b      	ldrb	r3, [r3, #0]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d117      	bne.n	80177ce <Measure_options_screen_S5+0xa2>
 801779e:	4b14      	ldr	r3, [pc, #80]	; (80177f0 <Measure_options_screen_S5+0xc4>)
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	3301      	adds	r3, #1
 80177a4:	b2da      	uxtb	r2, r3
 80177a6:	4b12      	ldr	r3, [pc, #72]	; (80177f0 <Measure_options_screen_S5+0xc4>)
 80177a8:	701a      	strb	r2, [r3, #0]
 80177aa:	e010      	b.n	80177ce <Measure_options_screen_S5+0xa2>
		case 4: if(PE<7)PE++; break;
 80177ac:	4b11      	ldr	r3, [pc, #68]	; (80177f4 <Measure_options_screen_S5+0xc8>)
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	2b06      	cmp	r3, #6
 80177b2:	d80e      	bhi.n	80177d2 <Measure_options_screen_S5+0xa6>
 80177b4:	4b0f      	ldr	r3, [pc, #60]	; (80177f4 <Measure_options_screen_S5+0xc8>)
 80177b6:	781b      	ldrb	r3, [r3, #0]
 80177b8:	3301      	adds	r3, #1
 80177ba:	b2da      	uxtb	r2, r3
 80177bc:	4b0d      	ldr	r3, [pc, #52]	; (80177f4 <Measure_options_screen_S5+0xc8>)
 80177be:	701a      	strb	r2, [r3, #0]
 80177c0:	e007      	b.n	80177d2 <Measure_options_screen_S5+0xa6>
		case 0: if(mm_peak<1)mm_peak++; break;
 80177c2:	bf00      	nop
 80177c4:	e006      	b.n	80177d4 <Measure_options_screen_S5+0xa8>
		case 1: if(leak_detect<2)leak_detect++; break;
 80177c6:	bf00      	nop
 80177c8:	e004      	b.n	80177d4 <Measure_options_screen_S5+0xa8>
		case 2: if(PV<1)PV++; break;
 80177ca:	bf00      	nop
 80177cc:	e002      	b.n	80177d4 <Measure_options_screen_S5+0xa8>
		case 3: if(PI<1)PI++; break;
 80177ce:	bf00      	nop
 80177d0:	e000      	b.n	80177d4 <Measure_options_screen_S5+0xa8>
		case 4: if(PE<7)PE++; break;
 80177d2:	bf00      	nop
	}
}
 80177d4:	bf00      	nop
 80177d6:	46bd      	mov	sp, r7
 80177d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177dc:	4770      	bx	lr
 80177de:	bf00      	nop
 80177e0:	2000085c 	.word	0x2000085c
 80177e4:	200008a2 	.word	0x200008a2
 80177e8:	200008a3 	.word	0x200008a3
 80177ec:	200008a4 	.word	0x200008a4
 80177f0:	200008a5 	.word	0x200008a5
 80177f4:	200008a6 	.word	0x200008a6

080177f8 <Main_screen_func>:

uint16_t view_tim=0;
uint8_t view =0;

void Main_screen_func(void)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	af00      	add	r7, sp, #0
	if(view==1)
 80177fc:	4b61      	ldr	r3, [pc, #388]	; (8017984 <Main_screen_func+0x18c>)
 80177fe:	781b      	ldrb	r3, [r3, #0]
 8017800:	2b01      	cmp	r3, #1
 8017802:	f040 80bd 	bne.w	8017980 <Main_screen_func+0x188>
	{
		RTC_view();
 8017806:	f000 f933 	bl	8017a70 <RTC_view>

		view=0;
 801780a:	4b5e      	ldr	r3, [pc, #376]	; (8017984 <Main_screen_func+0x18c>)
 801780c:	2200      	movs	r2, #0
 801780e:	701a      	strb	r2, [r3, #0]
		u8g2_SetFont(&u8g2, u8g2_font_inr30_mn);
 8017810:	495d      	ldr	r1, [pc, #372]	; (8017988 <Main_screen_func+0x190>)
 8017812:	485e      	ldr	r0, [pc, #376]	; (801798c <Main_screen_func+0x194>)
 8017814:	f7fe f91e 	bl	8015a54 <u8g2_SetFont>

		sprintf(RAM,"%+fV", Pressure);
 8017818:	4b5d      	ldr	r3, [pc, #372]	; (8017990 <Main_screen_func+0x198>)
 801781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781e:	495d      	ldr	r1, [pc, #372]	; (8017994 <Main_screen_func+0x19c>)
 8017820:	485d      	ldr	r0, [pc, #372]	; (8017998 <Main_screen_func+0x1a0>)
 8017822:	f006 fa75 	bl	801dd10 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 70, RAM);
 8017826:	4b5c      	ldr	r3, [pc, #368]	; (8017998 <Main_screen_func+0x1a0>)
 8017828:	2246      	movs	r2, #70	; 0x46
 801782a:	2105      	movs	r1, #5
 801782c:	4857      	ldr	r0, [pc, #348]	; (801798c <Main_screen_func+0x194>)
 801782e:	f7fe f86f 	bl	8015910 <u8g2_DrawUTF8>

		switch(E_fun)
 8017832:	4b5a      	ldr	r3, [pc, #360]	; (801799c <Main_screen_func+0x1a4>)
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	2b02      	cmp	r3, #2
 8017838:	d03d      	beq.n	80178b6 <Main_screen_func+0xbe>
 801783a:	2b02      	cmp	r3, #2
 801783c:	dc5a      	bgt.n	80178f4 <Main_screen_func+0xfc>
 801783e:	2b00      	cmp	r3, #0
 8017840:	d002      	beq.n	8017848 <Main_screen_func+0x50>
 8017842:	2b01      	cmp	r3, #1
 8017844:	d018      	beq.n	8017878 <Main_screen_func+0x80>
 8017846:	e055      	b.n	80178f4 <Main_screen_func+0xfc>
		{
		// Давление
		case 0:
			sprintf(RAM,"%+fV", Test_Pressure);
 8017848:	4b55      	ldr	r3, [pc, #340]	; (80179a0 <Main_screen_func+0x1a8>)
 801784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801784e:	4951      	ldr	r1, [pc, #324]	; (8017994 <Main_screen_func+0x19c>)
 8017850:	4851      	ldr	r0, [pc, #324]	; (8017998 <Main_screen_func+0x1a0>)
 8017852:	f006 fa5d 	bl	801dd10 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 8017856:	4b50      	ldr	r3, [pc, #320]	; (8017998 <Main_screen_func+0x1a0>)
 8017858:	2282      	movs	r2, #130	; 0x82
 801785a:	2105      	movs	r1, #5
 801785c:	484b      	ldr	r0, [pc, #300]	; (801798c <Main_screen_func+0x194>)
 801785e:	f7fe f857 	bl	8015910 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017862:	4950      	ldr	r1, [pc, #320]	; (80179a4 <Main_screen_func+0x1ac>)
 8017864:	4849      	ldr	r0, [pc, #292]	; (801798c <Main_screen_func+0x194>)
 8017866:	f7fe f8f5 	bl	8015a54 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "давление");
 801786a:	4b4f      	ldr	r3, [pc, #316]	; (80179a8 <Main_screen_func+0x1b0>)
 801786c:	229b      	movs	r2, #155	; 0x9b
 801786e:	21a0      	movs	r1, #160	; 0xa0
 8017870:	4846      	ldr	r0, [pc, #280]	; (801798c <Main_screen_func+0x194>)
 8017872:	f7fe f84d 	bl	8015910 <u8g2_DrawUTF8>
			break;
 8017876:	e03d      	b.n	80178f4 <Main_screen_func+0xfc>

			// Ток
		case 1:
			sprintf(RAM,"%+fV", current_4_20mA-Electric_zero);
 8017878:	4b4c      	ldr	r3, [pc, #304]	; (80179ac <Main_screen_func+0x1b4>)
 801787a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801787e:	4b4c      	ldr	r3, [pc, #304]	; (80179b0 <Main_screen_func+0x1b8>)
 8017880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017884:	f7e8 fd10 	bl	80002a8 <__aeabi_dsub>
 8017888:	4602      	mov	r2, r0
 801788a:	460b      	mov	r3, r1
 801788c:	4941      	ldr	r1, [pc, #260]	; (8017994 <Main_screen_func+0x19c>)
 801788e:	4842      	ldr	r0, [pc, #264]	; (8017998 <Main_screen_func+0x1a0>)
 8017890:	f006 fa3e 	bl	801dd10 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 8017894:	4b40      	ldr	r3, [pc, #256]	; (8017998 <Main_screen_func+0x1a0>)
 8017896:	2282      	movs	r2, #130	; 0x82
 8017898:	2105      	movs	r1, #5
 801789a:	483c      	ldr	r0, [pc, #240]	; (801798c <Main_screen_func+0x194>)
 801789c:	f7fe f838 	bl	8015910 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 80178a0:	4940      	ldr	r1, [pc, #256]	; (80179a4 <Main_screen_func+0x1ac>)
 80178a2:	483a      	ldr	r0, [pc, #232]	; (801798c <Main_screen_func+0x194>)
 80178a4:	f7fe f8d6 	bl	8015a54 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "ток");
 80178a8:	4b42      	ldr	r3, [pc, #264]	; (80179b4 <Main_screen_func+0x1bc>)
 80178aa:	229b      	movs	r2, #155	; 0x9b
 80178ac:	21a0      	movs	r1, #160	; 0xa0
 80178ae:	4837      	ldr	r0, [pc, #220]	; (801798c <Main_screen_func+0x194>)
 80178b0:	f7fe f82e 	bl	8015910 <u8g2_DrawUTF8>
			break;
 80178b4:	e01e      	b.n	80178f4 <Main_screen_func+0xfc>

			// Напряжение
		case 2:
			sprintf(RAM,"%+fV", voltage_measure-Electric_zero);
 80178b6:	4b40      	ldr	r3, [pc, #256]	; (80179b8 <Main_screen_func+0x1c0>)
 80178b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80178bc:	4b3c      	ldr	r3, [pc, #240]	; (80179b0 <Main_screen_func+0x1b8>)
 80178be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c2:	f7e8 fcf1 	bl	80002a8 <__aeabi_dsub>
 80178c6:	4602      	mov	r2, r0
 80178c8:	460b      	mov	r3, r1
 80178ca:	4932      	ldr	r1, [pc, #200]	; (8017994 <Main_screen_func+0x19c>)
 80178cc:	4832      	ldr	r0, [pc, #200]	; (8017998 <Main_screen_func+0x1a0>)
 80178ce:	f006 fa1f 	bl	801dd10 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 80178d2:	4b31      	ldr	r3, [pc, #196]	; (8017998 <Main_screen_func+0x1a0>)
 80178d4:	2282      	movs	r2, #130	; 0x82
 80178d6:	2105      	movs	r1, #5
 80178d8:	482c      	ldr	r0, [pc, #176]	; (801798c <Main_screen_func+0x194>)
 80178da:	f7fe f819 	bl	8015910 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 80178de:	4931      	ldr	r1, [pc, #196]	; (80179a4 <Main_screen_func+0x1ac>)
 80178e0:	482a      	ldr	r0, [pc, #168]	; (801798c <Main_screen_func+0x194>)
 80178e2:	f7fe f8b7 	bl	8015a54 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "напряжение");
 80178e6:	4b35      	ldr	r3, [pc, #212]	; (80179bc <Main_screen_func+0x1c4>)
 80178e8:	229b      	movs	r2, #155	; 0x9b
 80178ea:	21a0      	movs	r1, #160	; 0xa0
 80178ec:	4827      	ldr	r0, [pc, #156]	; (801798c <Main_screen_func+0x194>)
 80178ee:	f7fe f80f 	bl	8015910 <u8g2_DrawUTF8>
			break;
 80178f2:	bf00      	nop
		}

		u8g2_DrawUTF8(&u8g2, 5, 35, "Каюков А.Н.");
 80178f4:	4b32      	ldr	r3, [pc, #200]	; (80179c0 <Main_screen_func+0x1c8>)
 80178f6:	2223      	movs	r2, #35	; 0x23
 80178f8:	2105      	movs	r1, #5
 80178fa:	4824      	ldr	r0, [pc, #144]	; (801798c <Main_screen_func+0x194>)
 80178fc:	f7fe f808 	bl	8015910 <u8g2_DrawUTF8>
		u8g2_DrawUTF8(&u8g2, 5, 95, "Агапов А.Д.");
 8017900:	4b30      	ldr	r3, [pc, #192]	; (80179c4 <Main_screen_func+0x1cc>)
 8017902:	225f      	movs	r2, #95	; 0x5f
 8017904:	2105      	movs	r1, #5
 8017906:	4821      	ldr	r0, [pc, #132]	; (801798c <Main_screen_func+0x194>)
 8017908:	f7fe f802 	bl	8015910 <u8g2_DrawUTF8>

		sprintf(RAM,"t %.2f", Temperature2);
 801790c:	4b2e      	ldr	r3, [pc, #184]	; (80179c8 <Main_screen_func+0x1d0>)
 801790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017912:	492e      	ldr	r1, [pc, #184]	; (80179cc <Main_screen_func+0x1d4>)
 8017914:	4820      	ldr	r0, [pc, #128]	; (8017998 <Main_screen_func+0x1a0>)
 8017916:	f006 f9fb 	bl	801dd10 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 35, RAM);
 801791a:	4b1f      	ldr	r3, [pc, #124]	; (8017998 <Main_screen_func+0x1a0>)
 801791c:	2223      	movs	r2, #35	; 0x23
 801791e:	2178      	movs	r1, #120	; 0x78
 8017920:	481a      	ldr	r0, [pc, #104]	; (801798c <Main_screen_func+0x194>)
 8017922:	f7fd fff5 	bl	8015910 <u8g2_DrawUTF8>

		sprintf(RAM,"%.6f", Temperature_coeff_25);
 8017926:	4b2a      	ldr	r3, [pc, #168]	; (80179d0 <Main_screen_func+0x1d8>)
 8017928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801792c:	4929      	ldr	r1, [pc, #164]	; (80179d4 <Main_screen_func+0x1dc>)
 801792e:	481a      	ldr	r0, [pc, #104]	; (8017998 <Main_screen_func+0x1a0>)
 8017930:	f006 f9ee 	bl	801dd10 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 155, RAM);
 8017934:	4b18      	ldr	r3, [pc, #96]	; (8017998 <Main_screen_func+0x1a0>)
 8017936:	229b      	movs	r2, #155	; 0x9b
 8017938:	2105      	movs	r1, #5
 801793a:	4814      	ldr	r0, [pc, #80]	; (801798c <Main_screen_func+0x194>)
 801793c:	f7fd ffe8 	bl	8015910 <u8g2_DrawUTF8>

		sprintf(RAM,"%.2f", MCU_temp);
 8017940:	4b25      	ldr	r3, [pc, #148]	; (80179d8 <Main_screen_func+0x1e0>)
 8017942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017946:	4925      	ldr	r1, [pc, #148]	; (80179dc <Main_screen_func+0x1e4>)
 8017948:	4813      	ldr	r0, [pc, #76]	; (8017998 <Main_screen_func+0x1a0>)
 801794a:	f006 f9e1 	bl	801dd10 <siprintf>
		u8g2_DrawUTF8(&u8g2, 95, 155, RAM);
 801794e:	4b12      	ldr	r3, [pc, #72]	; (8017998 <Main_screen_func+0x1a0>)
 8017950:	229b      	movs	r2, #155	; 0x9b
 8017952:	215f      	movs	r1, #95	; 0x5f
 8017954:	480d      	ldr	r0, [pc, #52]	; (801798c <Main_screen_func+0x194>)
 8017956:	f7fd ffdb 	bl	8015910 <u8g2_DrawUTF8>


		sprintf(RAM,"t %.2f", Temperature);
 801795a:	4b21      	ldr	r3, [pc, #132]	; (80179e0 <Main_screen_func+0x1e8>)
 801795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017960:	491a      	ldr	r1, [pc, #104]	; (80179cc <Main_screen_func+0x1d4>)
 8017962:	480d      	ldr	r0, [pc, #52]	; (8017998 <Main_screen_func+0x1a0>)
 8017964:	f006 f9d4 	bl	801dd10 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 95, RAM);
 8017968:	4b0b      	ldr	r3, [pc, #44]	; (8017998 <Main_screen_func+0x1a0>)
 801796a:	225f      	movs	r2, #95	; 0x5f
 801796c:	2178      	movs	r1, #120	; 0x78
 801796e:	4807      	ldr	r0, [pc, #28]	; (801798c <Main_screen_func+0x194>)
 8017970:	f7fd ffce 	bl	8015910 <u8g2_DrawUTF8>

		u8g2_SendBuffer(&u8g2);
 8017974:	4805      	ldr	r0, [pc, #20]	; (801798c <Main_screen_func+0x194>)
 8017976:	f7fd fa30 	bl	8014dda <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 801797a:	4804      	ldr	r0, [pc, #16]	; (801798c <Main_screen_func+0x194>)
 801797c:	f7fd f9ba 	bl	8014cf4 <u8g2_ClearBuffer>
	}
}
 8017980:	bf00      	nop
 8017982:	bd80      	pop	{r7, pc}
 8017984:	20001c50 	.word	0x20001c50
 8017988:	08028df0 	.word	0x08028df0
 801798c:	20001fcc 	.word	0x20001fcc
 8017990:	20002298 	.word	0x20002298
 8017994:	08022220 	.word	0x08022220
 8017998:	20002088 	.word	0x20002088
 801799c:	200008a0 	.word	0x200008a0
 80179a0:	200022a0 	.word	0x200022a0
 80179a4:	08025b98 	.word	0x08025b98
 80179a8:	08022228 	.word	0x08022228
 80179ac:	200052c0 	.word	0x200052c0
 80179b0:	20000880 	.word	0x20000880
 80179b4:	0802223c 	.word	0x0802223c
 80179b8:	20002178 	.word	0x20002178
 80179bc:	08022244 	.word	0x08022244
 80179c0:	0802225c 	.word	0x0802225c
 80179c4:	08022270 	.word	0x08022270
 80179c8:	20000870 	.word	0x20000870
 80179cc:	08022284 	.word	0x08022284
 80179d0:	20000078 	.word	0x20000078
 80179d4:	0802228c 	.word	0x0802228c
 80179d8:	20000898 	.word	0x20000898
 80179dc:	08022294 	.word	0x08022294
 80179e0:	20000888 	.word	0x20000888

080179e4 <Main_screen_S9>:



// Меню
void Main_screen_S9(void)
{
 80179e4:	b480      	push	{r7}
 80179e6:	af00      	add	r7, sp, #0
	if(screen=Main_screen)
 80179e8:	4b08      	ldr	r3, [pc, #32]	; (8017a0c <Main_screen_S9+0x28>)
 80179ea:	2201      	movs	r2, #1
 80179ec:	701a      	strb	r2, [r3, #0]
	{
		screen=Option_screen;
 80179ee:	4b07      	ldr	r3, [pc, #28]	; (8017a0c <Main_screen_S9+0x28>)
 80179f0:	2204      	movs	r2, #4
 80179f2:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 80179f4:	4b06      	ldr	r3, [pc, #24]	; (8017a10 <Main_screen_S9+0x2c>)
 80179f6:	22ff      	movs	r2, #255	; 0xff
 80179f8:	701a      	strb	r2, [r3, #0]
		Menu_num=0;
 80179fa:	4b06      	ldr	r3, [pc, #24]	; (8017a14 <Main_screen_S9+0x30>)
 80179fc:	2200      	movs	r2, #0
 80179fe:	701a      	strb	r2, [r3, #0]
	}
}
 8017a00:	bf00      	nop
 8017a02:	46bd      	mov	sp, r7
 8017a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a08:	4770      	bx	lr
 8017a0a:	bf00      	nop
 8017a0c:	2000004c 	.word	0x2000004c
 8017a10:	200003a0 	.word	0x200003a0
 8017a14:	200003a1 	.word	0x200003a1

08017a18 <Viewer_timer>:


void Viewer_timer(void)
{
 8017a18:	b480      	push	{r7}
 8017a1a:	af00      	add	r7, sp, #0
	if(++view_tim==300){view=1;view_tim=0;}
 8017a1c:	4b0a      	ldr	r3, [pc, #40]	; (8017a48 <Viewer_timer+0x30>)
 8017a1e:	881b      	ldrh	r3, [r3, #0]
 8017a20:	3301      	adds	r3, #1
 8017a22:	b29a      	uxth	r2, r3
 8017a24:	4b08      	ldr	r3, [pc, #32]	; (8017a48 <Viewer_timer+0x30>)
 8017a26:	801a      	strh	r2, [r3, #0]
 8017a28:	4b07      	ldr	r3, [pc, #28]	; (8017a48 <Viewer_timer+0x30>)
 8017a2a:	881b      	ldrh	r3, [r3, #0]
 8017a2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017a30:	d105      	bne.n	8017a3e <Viewer_timer+0x26>
 8017a32:	4b06      	ldr	r3, [pc, #24]	; (8017a4c <Viewer_timer+0x34>)
 8017a34:	2201      	movs	r2, #1
 8017a36:	701a      	strb	r2, [r3, #0]
 8017a38:	4b03      	ldr	r3, [pc, #12]	; (8017a48 <Viewer_timer+0x30>)
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	801a      	strh	r2, [r3, #0]
}
 8017a3e:	bf00      	nop
 8017a40:	46bd      	mov	sp, r7
 8017a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a46:	4770      	bx	lr
 8017a48:	20001c4e 	.word	0x20001c4e
 8017a4c:	20001c50 	.word	0x20001c50

08017a50 <Battery_process>:
const uint8_t eltara_icon[]={0,16,0,16, 0x3F, 0xFC, 0x40, 0x02, 0x80, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x86, 0x01, 0x86, 0x01, 0x87, 0x81, 0x87, 0x81, 0x86, 0x01, 0x86, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x80, 0x01, 0x40, 0x02, 0x3F, 0xFC};



void Battery_process(void)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*) &Vbat_uint,128);
 8017a54:	2280      	movs	r2, #128	; 0x80
 8017a56:	4904      	ldr	r1, [pc, #16]	; (8017a68 <Battery_process+0x18>)
 8017a58:	4804      	ldr	r0, [pc, #16]	; (8017a6c <Battery_process+0x1c>)
 8017a5a:	f7f0 fcf7 	bl	800844c <HAL_ADC_Start_DMA>
	sleep(100);
 8017a5e:	2064      	movs	r0, #100	; 0x64
 8017a60:	f7eb fb9c 	bl	800319c <sleep>
}
 8017a64:	bf00      	nop
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	20002180 	.word	0x20002180
 8017a6c:	20007acc 	.word	0x20007acc

08017a70 <RTC_view>:



void RTC_view(void)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b086      	sub	sp, #24
 8017a74:	af02      	add	r7, sp, #8
	uint8_t battery_percent, i;
	uint32_t bat_sum=0;
 8017a76:	2300      	movs	r3, #0
 8017a78:	60bb      	str	r3, [r7, #8]
	float battery_volt;

	// date & time
	u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017a7a:	4959      	ldr	r1, [pc, #356]	; (8017be0 <RTC_view+0x170>)
 8017a7c:	4859      	ldr	r0, [pc, #356]	; (8017be4 <RTC_view+0x174>)
 8017a7e:	f7fd ffe9 	bl	8015a54 <u8g2_SetFont>
	sprintf(RAM,"%02d.%02d.%02d", day, month, year);
 8017a82:	4b59      	ldr	r3, [pc, #356]	; (8017be8 <RTC_view+0x178>)
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	461a      	mov	r2, r3
 8017a88:	4b58      	ldr	r3, [pc, #352]	; (8017bec <RTC_view+0x17c>)
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	4619      	mov	r1, r3
 8017a8e:	4b58      	ldr	r3, [pc, #352]	; (8017bf0 <RTC_view+0x180>)
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	9300      	str	r3, [sp, #0]
 8017a94:	460b      	mov	r3, r1
 8017a96:	4957      	ldr	r1, [pc, #348]	; (8017bf4 <RTC_view+0x184>)
 8017a98:	4857      	ldr	r0, [pc, #348]	; (8017bf8 <RTC_view+0x188>)
 8017a9a:	f006 f939 	bl	801dd10 <siprintf>
	u8g2_DrawUTF8(&u8g2, 0, 12, RAM);
 8017a9e:	4b56      	ldr	r3, [pc, #344]	; (8017bf8 <RTC_view+0x188>)
 8017aa0:	220c      	movs	r2, #12
 8017aa2:	2100      	movs	r1, #0
 8017aa4:	484f      	ldr	r0, [pc, #316]	; (8017be4 <RTC_view+0x174>)
 8017aa6:	f7fd ff33 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:%02d:%02d", hour, minute, sec);
 8017aaa:	4b54      	ldr	r3, [pc, #336]	; (8017bfc <RTC_view+0x18c>)
 8017aac:	781b      	ldrb	r3, [r3, #0]
 8017aae:	461a      	mov	r2, r3
 8017ab0:	4b53      	ldr	r3, [pc, #332]	; (8017c00 <RTC_view+0x190>)
 8017ab2:	781b      	ldrb	r3, [r3, #0]
 8017ab4:	4619      	mov	r1, r3
 8017ab6:	4b53      	ldr	r3, [pc, #332]	; (8017c04 <RTC_view+0x194>)
 8017ab8:	781b      	ldrb	r3, [r3, #0]
 8017aba:	9300      	str	r3, [sp, #0]
 8017abc:	460b      	mov	r3, r1
 8017abe:	4952      	ldr	r1, [pc, #328]	; (8017c08 <RTC_view+0x198>)
 8017ac0:	484d      	ldr	r0, [pc, #308]	; (8017bf8 <RTC_view+0x188>)
 8017ac2:	f006 f925 	bl	801dd10 <siprintf>
	u8g2_DrawUTF8(&u8g2, 81, 12, RAM);
 8017ac6:	4b4c      	ldr	r3, [pc, #304]	; (8017bf8 <RTC_view+0x188>)
 8017ac8:	220c      	movs	r2, #12
 8017aca:	2151      	movs	r1, #81	; 0x51
 8017acc:	4845      	ldr	r0, [pc, #276]	; (8017be4 <RTC_view+0x174>)
 8017ace:	f7fd ff1f 	bl	8015910 <u8g2_DrawUTF8>

	// Tarring
	if(Pressure_zero!=0)DrawImage(tara_icon, 194, 2, 1);
 8017ad2:	4b4e      	ldr	r3, [pc, #312]	; (8017c0c <RTC_view+0x19c>)
 8017ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017ad8:	f04f 0200 	mov.w	r2, #0
 8017adc:	f04f 0300 	mov.w	r3, #0
 8017ae0:	f7e9 f802 	bl	8000ae8 <__aeabi_dcmpeq>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d105      	bne.n	8017af6 <RTC_view+0x86>
 8017aea:	2301      	movs	r3, #1
 8017aec:	2202      	movs	r2, #2
 8017aee:	21c2      	movs	r1, #194	; 0xc2
 8017af0:	4847      	ldr	r0, [pc, #284]	; (8017c10 <RTC_view+0x1a0>)
 8017af2:	f7eb f81b 	bl	8002b2c <DrawImage>

	//El tarring
	if(Electric_zero!=0)DrawImage(eltara_icon, 176, 2, 1);
 8017af6:	4b47      	ldr	r3, [pc, #284]	; (8017c14 <RTC_view+0x1a4>)
 8017af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017afc:	f04f 0200 	mov.w	r2, #0
 8017b00:	f04f 0300 	mov.w	r3, #0
 8017b04:	f7e8 fff0 	bl	8000ae8 <__aeabi_dcmpeq>
 8017b08:	4603      	mov	r3, r0
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d105      	bne.n	8017b1a <RTC_view+0xaa>
 8017b0e:	2301      	movs	r3, #1
 8017b10:	2202      	movs	r2, #2
 8017b12:	21b0      	movs	r1, #176	; 0xb0
 8017b14:	4840      	ldr	r0, [pc, #256]	; (8017c18 <RTC_view+0x1a8>)
 8017b16:	f7eb f809 	bl	8002b2c <DrawImage>

	// Battery
	for(i=0;i<128;i++)bat_sum+=Vbat_uint[i];
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	73fb      	strb	r3, [r7, #15]
 8017b1e:	e00a      	b.n	8017b36 <RTC_view+0xc6>
 8017b20:	7bfb      	ldrb	r3, [r7, #15]
 8017b22:	4a3e      	ldr	r2, [pc, #248]	; (8017c1c <RTC_view+0x1ac>)
 8017b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017b28:	461a      	mov	r2, r3
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	60bb      	str	r3, [r7, #8]
 8017b30:	7bfb      	ldrb	r3, [r7, #15]
 8017b32:	3301      	adds	r3, #1
 8017b34:	73fb      	strb	r3, [r7, #15]
 8017b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	daf0      	bge.n	8017b20 <RTC_view+0xb0>
	battery_volt = 0.0074258*(bat_sum>>7);
 8017b3e:	68bb      	ldr	r3, [r7, #8]
 8017b40:	09db      	lsrs	r3, r3, #7
 8017b42:	4618      	mov	r0, r3
 8017b44:	f7e8 fcee 	bl	8000524 <__aeabi_ui2d>
 8017b48:	a321      	add	r3, pc, #132	; (adr r3, 8017bd0 <RTC_view+0x160>)
 8017b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b4e:	f7e8 fd63 	bl	8000618 <__aeabi_dmul>
 8017b52:	4602      	mov	r2, r0
 8017b54:	460b      	mov	r3, r1
 8017b56:	4610      	mov	r0, r2
 8017b58:	4619      	mov	r1, r3
 8017b5a:	f7e9 f855 	bl	8000c08 <__aeabi_d2f>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	607b      	str	r3, [r7, #4]
	DrawImage(bat_icon, 216, 4, 1);
 8017b62:	2301      	movs	r3, #1
 8017b64:	2204      	movs	r2, #4
 8017b66:	21d8      	movs	r1, #216	; 0xd8
 8017b68:	482d      	ldr	r0, [pc, #180]	; (8017c20 <RTC_view+0x1b0>)
 8017b6a:	f7ea ffdf 	bl	8002b2c <DrawImage>
	battery_percent = (uint8_t)((battery_volt-2.9)*100);
 8017b6e:	6878      	ldr	r0, [r7, #4]
 8017b70:	f7e8 fcfa 	bl	8000568 <__aeabi_f2d>
 8017b74:	a318      	add	r3, pc, #96	; (adr r3, 8017bd8 <RTC_view+0x168>)
 8017b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b7a:	f7e8 fb95 	bl	80002a8 <__aeabi_dsub>
 8017b7e:	4602      	mov	r2, r0
 8017b80:	460b      	mov	r3, r1
 8017b82:	4610      	mov	r0, r2
 8017b84:	4619      	mov	r1, r3
 8017b86:	f04f 0200 	mov.w	r2, #0
 8017b8a:	4b26      	ldr	r3, [pc, #152]	; (8017c24 <RTC_view+0x1b4>)
 8017b8c:	f7e8 fd44 	bl	8000618 <__aeabi_dmul>
 8017b90:	4602      	mov	r2, r0
 8017b92:	460b      	mov	r3, r1
 8017b94:	4610      	mov	r0, r2
 8017b96:	4619      	mov	r1, r3
 8017b98:	f7e9 f816 	bl	8000bc8 <__aeabi_d2uiz>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	70fb      	strb	r3, [r7, #3]

	u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8017ba0:	4921      	ldr	r1, [pc, #132]	; (8017c28 <RTC_view+0x1b8>)
 8017ba2:	4810      	ldr	r0, [pc, #64]	; (8017be4 <RTC_view+0x174>)
 8017ba4:	f7fd ff56 	bl	8015a54 <u8g2_SetFont>
	sprintf(RAM,"%.2f", battery_volt);
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f7e8 fcdd 	bl	8000568 <__aeabi_f2d>
 8017bae:	4602      	mov	r2, r0
 8017bb0:	460b      	mov	r3, r1
 8017bb2:	491e      	ldr	r1, [pc, #120]	; (8017c2c <RTC_view+0x1bc>)
 8017bb4:	4810      	ldr	r0, [pc, #64]	; (8017bf8 <RTC_view+0x188>)
 8017bb6:	f006 f8ab 	bl	801dd10 <siprintf>
	//sprintf(RAM,"%d", battery_percent);
	u8g2_DrawUTF8(&u8g2, 219, 13, RAM);
 8017bba:	4b0f      	ldr	r3, [pc, #60]	; (8017bf8 <RTC_view+0x188>)
 8017bbc:	220d      	movs	r2, #13
 8017bbe:	21db      	movs	r1, #219	; 0xdb
 8017bc0:	4808      	ldr	r0, [pc, #32]	; (8017be4 <RTC_view+0x174>)
 8017bc2:	f7fd fea5 	bl	8015910 <u8g2_DrawUTF8>
}
 8017bc6:	bf00      	nop
 8017bc8:	3710      	adds	r7, #16
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	02589fd4 	.word	0x02589fd4
 8017bd4:	3f7e6a84 	.word	0x3f7e6a84
 8017bd8:	33333333 	.word	0x33333333
 8017bdc:	40073333 	.word	0x40073333
 8017be0:	08025b98 	.word	0x08025b98
 8017be4:	20001fcc 	.word	0x20001fcc
 8017be8:	2000874c 	.word	0x2000874c
 8017bec:	20008753 	.word	0x20008753
 8017bf0:	20008754 	.word	0x20008754
 8017bf4:	0802229c 	.word	0x0802229c
 8017bf8:	20002088 	.word	0x20002088
 8017bfc:	2000874f 	.word	0x2000874f
 8017c00:	20008756 	.word	0x20008756
 8017c04:	20008750 	.word	0x20008750
 8017c08:	080222ac 	.word	0x080222ac
 8017c0c:	20000878 	.word	0x20000878
 8017c10:	0802946c 	.word	0x0802946c
 8017c14:	20000880 	.word	0x20000880
 8017c18:	08029490 	.word	0x08029490
 8017c1c:	20002180 	.word	0x20002180
 8017c20:	08029444 	.word	0x08029444
 8017c24:	40590000 	.word	0x40590000
 8017c28:	08023f24 	.word	0x08023f24
 8017c2c:	080222bc 	.word	0x080222bc

08017c30 <RTC_process>:


void RTC_process(void)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b086      	sub	sp, #24
 8017c34:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8017c36:	1d3b      	adds	r3, r7, #4
 8017c38:	2200      	movs	r2, #0
 8017c3a:	601a      	str	r2, [r3, #0]
 8017c3c:	605a      	str	r2, [r3, #4]
 8017c3e:	609a      	str	r2, [r3, #8]
 8017c40:	60da      	str	r2, [r3, #12]
 8017c42:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017c44:	2300      	movs	r3, #0
 8017c46:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8017c48:	463b      	mov	r3, r7
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	4811      	ldr	r0, [pc, #68]	; (8017c94 <RTC_process+0x64>)
 8017c50:	f7f5 feec 	bl	800da2c <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8017c54:	1d3b      	adds	r3, r7, #4
 8017c56:	2200      	movs	r2, #0
 8017c58:	4619      	mov	r1, r3
 8017c5a:	480e      	ldr	r0, [pc, #56]	; (8017c94 <RTC_process+0x64>)
 8017c5c:	f7f5 fe03 	bl	800d866 <HAL_RTC_GetTime>

	year=sDate.Year;
 8017c60:	78fa      	ldrb	r2, [r7, #3]
 8017c62:	4b0d      	ldr	r3, [pc, #52]	; (8017c98 <RTC_process+0x68>)
 8017c64:	701a      	strb	r2, [r3, #0]
	month=sDate.Month;
 8017c66:	787a      	ldrb	r2, [r7, #1]
 8017c68:	4b0c      	ldr	r3, [pc, #48]	; (8017c9c <RTC_process+0x6c>)
 8017c6a:	701a      	strb	r2, [r3, #0]
	day=sDate.Date;
 8017c6c:	78ba      	ldrb	r2, [r7, #2]
 8017c6e:	4b0c      	ldr	r3, [pc, #48]	; (8017ca0 <RTC_process+0x70>)
 8017c70:	701a      	strb	r2, [r3, #0]
	hour=sTime.Hours;
 8017c72:	793a      	ldrb	r2, [r7, #4]
 8017c74:	4b0b      	ldr	r3, [pc, #44]	; (8017ca4 <RTC_process+0x74>)
 8017c76:	701a      	strb	r2, [r3, #0]
	minute=sTime.Minutes;
 8017c78:	797a      	ldrb	r2, [r7, #5]
 8017c7a:	4b0b      	ldr	r3, [pc, #44]	; (8017ca8 <RTC_process+0x78>)
 8017c7c:	701a      	strb	r2, [r3, #0]
	sec=sTime.Seconds;
 8017c7e:	79ba      	ldrb	r2, [r7, #6]
 8017c80:	4b0a      	ldr	r3, [pc, #40]	; (8017cac <RTC_process+0x7c>)
 8017c82:	701a      	strb	r2, [r3, #0]

	sleep(1000);
 8017c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017c88:	f7eb fa88 	bl	800319c <sleep>
}
 8017c8c:	bf00      	nop
 8017c8e:	3718      	adds	r7, #24
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}
 8017c94:	20007850 	.word	0x20007850
 8017c98:	20008754 	.word	0x20008754
 8017c9c:	20008753 	.word	0x20008753
 8017ca0:	2000874c 	.word	0x2000874c
 8017ca4:	2000874f 	.word	0x2000874f
 8017ca8:	20008756 	.word	0x20008756
 8017cac:	20008750 	.word	0x20008750

08017cb0 <RTC_set>:


void RTC_set(uint8_t rtc_year, uint8_t rtc_month, uint8_t rtc_day, uint8_t rtc_hour, uint8_t rtc_min, uint8_t rtc_sec)
{
 8017cb0:	b590      	push	{r4, r7, lr}
 8017cb2:	b089      	sub	sp, #36	; 0x24
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	4608      	mov	r0, r1
 8017cba:	4611      	mov	r1, r2
 8017cbc:	461a      	mov	r2, r3
 8017cbe:	4623      	mov	r3, r4
 8017cc0:	71fb      	strb	r3, [r7, #7]
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	71bb      	strb	r3, [r7, #6]
 8017cc6:	460b      	mov	r3, r1
 8017cc8:	717b      	strb	r3, [r7, #5]
 8017cca:	4613      	mov	r3, r2
 8017ccc:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8017cce:	f107 030c 	add.w	r3, r7, #12
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	601a      	str	r2, [r3, #0]
 8017cd6:	605a      	str	r2, [r3, #4]
 8017cd8:	609a      	str	r2, [r3, #8]
 8017cda:	60da      	str	r2, [r3, #12]
 8017cdc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017cde:	2300      	movs	r3, #0
 8017ce0:	60bb      	str	r3, [r7, #8]
	HAL_RTC_DeInit(&hrtc);
 8017ce2:	482b      	ldr	r0, [pc, #172]	; (8017d90 <RTC_set+0xe0>)
 8017ce4:	f7f5 fcae 	bl	800d644 <HAL_RTC_DeInit>


	hrtc.Instance = RTC;
 8017ce8:	4b29      	ldr	r3, [pc, #164]	; (8017d90 <RTC_set+0xe0>)
 8017cea:	4a2a      	ldr	r2, [pc, #168]	; (8017d94 <RTC_set+0xe4>)
 8017cec:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8017cee:	4b28      	ldr	r3, [pc, #160]	; (8017d90 <RTC_set+0xe0>)
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8017cf4:	4b26      	ldr	r3, [pc, #152]	; (8017d90 <RTC_set+0xe0>)
 8017cf6:	227f      	movs	r2, #127	; 0x7f
 8017cf8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8017cfa:	4b25      	ldr	r3, [pc, #148]	; (8017d90 <RTC_set+0xe0>)
 8017cfc:	22ff      	movs	r2, #255	; 0xff
 8017cfe:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8017d00:	4b23      	ldr	r3, [pc, #140]	; (8017d90 <RTC_set+0xe0>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8017d06:	4b22      	ldr	r3, [pc, #136]	; (8017d90 <RTC_set+0xe0>)
 8017d08:	2200      	movs	r2, #0
 8017d0a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8017d0c:	4b20      	ldr	r3, [pc, #128]	; (8017d90 <RTC_set+0xe0>)
 8017d0e:	2200      	movs	r2, #0
 8017d10:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8017d12:	4b1f      	ldr	r3, [pc, #124]	; (8017d90 <RTC_set+0xe0>)
 8017d14:	2200      	movs	r2, #0
 8017d16:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8017d18:	481d      	ldr	r0, [pc, #116]	; (8017d90 <RTC_set+0xe0>)
 8017d1a:	f7f5 fc17 	bl	800d54c <HAL_RTC_Init>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d001      	beq.n	8017d28 <RTC_set+0x78>
	{
	Error_Handler();
 8017d24:	f7ee fd9a 	bl	800685c <Error_Handler>
	}


	sTime.Hours = rtc_hour;
 8017d28:	793b      	ldrb	r3, [r7, #4]
 8017d2a:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtc_min;
 8017d2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017d30:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtc_sec;
 8017d32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017d36:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8017d40:	f107 030c 	add.w	r3, r7, #12
 8017d44:	2200      	movs	r2, #0
 8017d46:	4619      	mov	r1, r3
 8017d48:	4811      	ldr	r0, [pc, #68]	; (8017d90 <RTC_set+0xe0>)
 8017d4a:	f7f5 fcef 	bl	800d72c <HAL_RTC_SetTime>
 8017d4e:	4603      	mov	r3, r0
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d001      	beq.n	8017d58 <RTC_set+0xa8>
	{
		Error_Handler();
 8017d54:	f7ee fd82 	bl	800685c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017d58:	2301      	movs	r3, #1
 8017d5a:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtc_month;
 8017d5c:	79bb      	ldrb	r3, [r7, #6]
 8017d5e:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtc_day;
 8017d60:	797b      	ldrb	r3, [r7, #5]
 8017d62:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtc_year;
 8017d64:	79fb      	ldrb	r3, [r7, #7]
 8017d66:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8017d68:	f107 0308 	add.w	r3, r7, #8
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	4619      	mov	r1, r3
 8017d70:	4807      	ldr	r0, [pc, #28]	; (8017d90 <RTC_set+0xe0>)
 8017d72:	f7f5 fdd4 	bl	800d91e <HAL_RTC_SetDate>
 8017d76:	4603      	mov	r3, r0
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d001      	beq.n	8017d80 <RTC_set+0xd0>
	{
		Error_Handler();
 8017d7c:	f7ee fd6e 	bl	800685c <Error_Handler>
	}

	HAL_RTCEx_EnableBypassShadow(&hrtc);
 8017d80:	4803      	ldr	r0, [pc, #12]	; (8017d90 <RTC_set+0xe0>)
 8017d82:	f7f5 ff71 	bl	800dc68 <HAL_RTCEx_EnableBypassShadow>
}
 8017d86:	bf00      	nop
 8017d88:	3724      	adds	r7, #36	; 0x24
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd90      	pop	{r4, r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	20007850 	.word	0x20007850
 8017d94:	40002800 	.word	0x40002800

08017d98 <RTC_screen_func>:


void RTC_screen_func(void)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af02      	add	r7, sp, #8
	if(old_active_string==0xFF)
 8017d9e:	4b4d      	ldr	r3, [pc, #308]	; (8017ed4 <RTC_screen_func+0x13c>)
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	2bff      	cmp	r3, #255	; 0xff
 8017da4:	d11a      	bne.n	8017ddc <RTC_screen_func+0x44>
	{
		old_active_string=0;
 8017da6:	4b4b      	ldr	r3, [pc, #300]	; (8017ed4 <RTC_screen_func+0x13c>)
 8017da8:	2200      	movs	r2, #0
 8017daa:	701a      	strb	r2, [r3, #0]
		year_temp=year;
 8017dac:	4b4a      	ldr	r3, [pc, #296]	; (8017ed8 <RTC_screen_func+0x140>)
 8017dae:	781a      	ldrb	r2, [r3, #0]
 8017db0:	4b4a      	ldr	r3, [pc, #296]	; (8017edc <RTC_screen_func+0x144>)
 8017db2:	701a      	strb	r2, [r3, #0]
		month_temp=month;
 8017db4:	4b4a      	ldr	r3, [pc, #296]	; (8017ee0 <RTC_screen_func+0x148>)
 8017db6:	781a      	ldrb	r2, [r3, #0]
 8017db8:	4b4a      	ldr	r3, [pc, #296]	; (8017ee4 <RTC_screen_func+0x14c>)
 8017dba:	701a      	strb	r2, [r3, #0]
		day_temp=day;
 8017dbc:	4b4a      	ldr	r3, [pc, #296]	; (8017ee8 <RTC_screen_func+0x150>)
 8017dbe:	781a      	ldrb	r2, [r3, #0]
 8017dc0:	4b4a      	ldr	r3, [pc, #296]	; (8017eec <RTC_screen_func+0x154>)
 8017dc2:	701a      	strb	r2, [r3, #0]
		hour_temp=hour;
 8017dc4:	4b4a      	ldr	r3, [pc, #296]	; (8017ef0 <RTC_screen_func+0x158>)
 8017dc6:	781a      	ldrb	r2, [r3, #0]
 8017dc8:	4b4a      	ldr	r3, [pc, #296]	; (8017ef4 <RTC_screen_func+0x15c>)
 8017dca:	701a      	strb	r2, [r3, #0]
		minute_temp=minute;
 8017dcc:	4b4a      	ldr	r3, [pc, #296]	; (8017ef8 <RTC_screen_func+0x160>)
 8017dce:	781a      	ldrb	r2, [r3, #0]
 8017dd0:	4b4a      	ldr	r3, [pc, #296]	; (8017efc <RTC_screen_func+0x164>)
 8017dd2:	701a      	strb	r2, [r3, #0]
		sec_temp=sec;
 8017dd4:	4b4a      	ldr	r3, [pc, #296]	; (8017f00 <RTC_screen_func+0x168>)
 8017dd6:	781a      	ldrb	r2, [r3, #0]
 8017dd8:	4b4a      	ldr	r3, [pc, #296]	; (8017f04 <RTC_screen_func+0x16c>)
 8017dda:	701a      	strb	r2, [r3, #0]
	}

	// date time
	RTC_view();
 8017ddc:	f7ff fe48 	bl	8017a70 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017de0:	4949      	ldr	r1, [pc, #292]	; (8017f08 <RTC_screen_func+0x170>)
 8017de2:	484a      	ldr	r0, [pc, #296]	; (8017f0c <RTC_screen_func+0x174>)
 8017de4:	f7fd fe36 	bl	8015a54 <u8g2_SetFont>

	// Date
	u8g2_DrawUTF8(&u8g2, 20, 50, "Дата:");
 8017de8:	4b49      	ldr	r3, [pc, #292]	; (8017f10 <RTC_screen_func+0x178>)
 8017dea:	2232      	movs	r2, #50	; 0x32
 8017dec:	2114      	movs	r1, #20
 8017dee:	4847      	ldr	r0, [pc, #284]	; (8017f0c <RTC_screen_func+0x174>)
 8017df0:	f7fd fd8e 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d.", day_temp);
 8017df4:	4b3d      	ldr	r3, [pc, #244]	; (8017eec <RTC_screen_func+0x154>)
 8017df6:	781b      	ldrb	r3, [r3, #0]
 8017df8:	461a      	mov	r2, r3
 8017dfa:	4946      	ldr	r1, [pc, #280]	; (8017f14 <RTC_screen_func+0x17c>)
 8017dfc:	4846      	ldr	r0, [pc, #280]	; (8017f18 <RTC_screen_func+0x180>)
 8017dfe:	f005 ff87 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(120, 50, RAM, edit_param, 0);
 8017e02:	4b46      	ldr	r3, [pc, #280]	; (8017f1c <RTC_screen_func+0x184>)
 8017e04:	781b      	ldrb	r3, [r3, #0]
 8017e06:	2200      	movs	r2, #0
 8017e08:	9200      	str	r2, [sp, #0]
 8017e0a:	4a43      	ldr	r2, [pc, #268]	; (8017f18 <RTC_screen_func+0x180>)
 8017e0c:	2132      	movs	r1, #50	; 0x32
 8017e0e:	2078      	movs	r0, #120	; 0x78
 8017e10:	f7eb f81a 	bl	8002e48 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d.", month_temp);
 8017e14:	4b33      	ldr	r3, [pc, #204]	; (8017ee4 <RTC_screen_func+0x14c>)
 8017e16:	781b      	ldrb	r3, [r3, #0]
 8017e18:	461a      	mov	r2, r3
 8017e1a:	493e      	ldr	r1, [pc, #248]	; (8017f14 <RTC_screen_func+0x17c>)
 8017e1c:	483e      	ldr	r0, [pc, #248]	; (8017f18 <RTC_screen_func+0x180>)
 8017e1e:	f005 ff77 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(150, 50, RAM, edit_param, 1);
 8017e22:	4b3e      	ldr	r3, [pc, #248]	; (8017f1c <RTC_screen_func+0x184>)
 8017e24:	781b      	ldrb	r3, [r3, #0]
 8017e26:	2201      	movs	r2, #1
 8017e28:	9200      	str	r2, [sp, #0]
 8017e2a:	4a3b      	ldr	r2, [pc, #236]	; (8017f18 <RTC_screen_func+0x180>)
 8017e2c:	2132      	movs	r1, #50	; 0x32
 8017e2e:	2096      	movs	r0, #150	; 0x96
 8017e30:	f7eb f80a 	bl	8002e48 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", year_temp);
 8017e34:	4b29      	ldr	r3, [pc, #164]	; (8017edc <RTC_screen_func+0x144>)
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	461a      	mov	r2, r3
 8017e3a:	4939      	ldr	r1, [pc, #228]	; (8017f20 <RTC_screen_func+0x188>)
 8017e3c:	4836      	ldr	r0, [pc, #216]	; (8017f18 <RTC_screen_func+0x180>)
 8017e3e:	f005 ff67 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(180, 50, RAM, edit_param, 2);
 8017e42:	4b36      	ldr	r3, [pc, #216]	; (8017f1c <RTC_screen_func+0x184>)
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	2202      	movs	r2, #2
 8017e48:	9200      	str	r2, [sp, #0]
 8017e4a:	4a33      	ldr	r2, [pc, #204]	; (8017f18 <RTC_screen_func+0x180>)
 8017e4c:	2132      	movs	r1, #50	; 0x32
 8017e4e:	20b4      	movs	r0, #180	; 0xb4
 8017e50:	f7ea fffa 	bl	8002e48 <Blink_Edit_Parameter>


	// Date
	u8g2_DrawUTF8(&u8g2, 20, 70, "Время:");
 8017e54:	4b33      	ldr	r3, [pc, #204]	; (8017f24 <RTC_screen_func+0x18c>)
 8017e56:	2246      	movs	r2, #70	; 0x46
 8017e58:	2114      	movs	r1, #20
 8017e5a:	482c      	ldr	r0, [pc, #176]	; (8017f0c <RTC_screen_func+0x174>)
 8017e5c:	f7fd fd58 	bl	8015910 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:", hour_temp);
 8017e60:	4b24      	ldr	r3, [pc, #144]	; (8017ef4 <RTC_screen_func+0x15c>)
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	461a      	mov	r2, r3
 8017e66:	4930      	ldr	r1, [pc, #192]	; (8017f28 <RTC_screen_func+0x190>)
 8017e68:	482b      	ldr	r0, [pc, #172]	; (8017f18 <RTC_screen_func+0x180>)
 8017e6a:	f005 ff51 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(120, 70, RAM, edit_param, 3);
 8017e6e:	4b2b      	ldr	r3, [pc, #172]	; (8017f1c <RTC_screen_func+0x184>)
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	2203      	movs	r2, #3
 8017e74:	9200      	str	r2, [sp, #0]
 8017e76:	4a28      	ldr	r2, [pc, #160]	; (8017f18 <RTC_screen_func+0x180>)
 8017e78:	2146      	movs	r1, #70	; 0x46
 8017e7a:	2078      	movs	r0, #120	; 0x78
 8017e7c:	f7ea ffe4 	bl	8002e48 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d:", minute_temp);
 8017e80:	4b1e      	ldr	r3, [pc, #120]	; (8017efc <RTC_screen_func+0x164>)
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	461a      	mov	r2, r3
 8017e86:	4928      	ldr	r1, [pc, #160]	; (8017f28 <RTC_screen_func+0x190>)
 8017e88:	4823      	ldr	r0, [pc, #140]	; (8017f18 <RTC_screen_func+0x180>)
 8017e8a:	f005 ff41 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(150, 70, RAM, edit_param, 4);
 8017e8e:	4b23      	ldr	r3, [pc, #140]	; (8017f1c <RTC_screen_func+0x184>)
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	2204      	movs	r2, #4
 8017e94:	9200      	str	r2, [sp, #0]
 8017e96:	4a20      	ldr	r2, [pc, #128]	; (8017f18 <RTC_screen_func+0x180>)
 8017e98:	2146      	movs	r1, #70	; 0x46
 8017e9a:	2096      	movs	r0, #150	; 0x96
 8017e9c:	f7ea ffd4 	bl	8002e48 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", sec_temp);
 8017ea0:	4b18      	ldr	r3, [pc, #96]	; (8017f04 <RTC_screen_func+0x16c>)
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	461a      	mov	r2, r3
 8017ea6:	491e      	ldr	r1, [pc, #120]	; (8017f20 <RTC_screen_func+0x188>)
 8017ea8:	481b      	ldr	r0, [pc, #108]	; (8017f18 <RTC_screen_func+0x180>)
 8017eaa:	f005 ff31 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(180, 70, RAM, edit_param, 5);
 8017eae:	4b1b      	ldr	r3, [pc, #108]	; (8017f1c <RTC_screen_func+0x184>)
 8017eb0:	781b      	ldrb	r3, [r3, #0]
 8017eb2:	2205      	movs	r2, #5
 8017eb4:	9200      	str	r2, [sp, #0]
 8017eb6:	4a18      	ldr	r2, [pc, #96]	; (8017f18 <RTC_screen_func+0x180>)
 8017eb8:	2146      	movs	r1, #70	; 0x46
 8017eba:	20b4      	movs	r0, #180	; 0xb4
 8017ebc:	f7ea ffc4 	bl	8002e48 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8017ec0:	4812      	ldr	r0, [pc, #72]	; (8017f0c <RTC_screen_func+0x174>)
 8017ec2:	f7fc ff8a 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017ec6:	4811      	ldr	r0, [pc, #68]	; (8017f0c <RTC_screen_func+0x174>)
 8017ec8:	f7fc ff14 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8017ecc:	bf00      	nop
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	bd80      	pop	{r7, pc}
 8017ed2:	bf00      	nop
 8017ed4:	200003a0 	.word	0x200003a0
 8017ed8:	20008754 	.word	0x20008754
 8017edc:	20008755 	.word	0x20008755
 8017ee0:	20008753 	.word	0x20008753
 8017ee4:	20008751 	.word	0x20008751
 8017ee8:	2000874c 	.word	0x2000874c
 8017eec:	2000874e 	.word	0x2000874e
 8017ef0:	2000874f 	.word	0x2000874f
 8017ef4:	20008757 	.word	0x20008757
 8017ef8:	20008756 	.word	0x20008756
 8017efc:	2000874d 	.word	0x2000874d
 8017f00:	20008750 	.word	0x20008750
 8017f04:	20008752 	.word	0x20008752
 8017f08:	080271c4 	.word	0x080271c4
 8017f0c:	20001fcc 	.word	0x20001fcc
 8017f10:	080222c4 	.word	0x080222c4
 8017f14:	080222d0 	.word	0x080222d0
 8017f18:	20002088 	.word	0x20002088
 8017f1c:	2000085c 	.word	0x2000085c
 8017f20:	080222d8 	.word	0x080222d8
 8017f24:	080222e0 	.word	0x080222e0
 8017f28:	080222ec 	.word	0x080222ec

08017f2c <RTC_screen_S9>:



// MENU
void RTC_screen_S9(void)
{
 8017f2c:	b480      	push	{r7}
 8017f2e:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8017f30:	4b06      	ldr	r3, [pc, #24]	; (8017f4c <RTC_screen_S9+0x20>)
 8017f32:	2208      	movs	r2, #8
 8017f34:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8017f36:	4b06      	ldr	r3, [pc, #24]	; (8017f50 <RTC_screen_S9+0x24>)
 8017f38:	22ff      	movs	r2, #255	; 0xff
 8017f3a:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 8017f3c:	4b05      	ldr	r3, [pc, #20]	; (8017f54 <RTC_screen_S9+0x28>)
 8017f3e:	2202      	movs	r2, #2
 8017f40:	701a      	strb	r2, [r3, #0]
}
 8017f42:	bf00      	nop
 8017f44:	46bd      	mov	sp, r7
 8017f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4a:	4770      	bx	lr
 8017f4c:	2000004c 	.word	0x2000004c
 8017f50:	200003a0 	.word	0x200003a0
 8017f54:	200003a1 	.word	0x200003a1

08017f58 <RTC_screen_S5>:

// DOWN
void RTC_screen_S5(void)
{
 8017f58:	b480      	push	{r7}
 8017f5a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8017f5c:	4b07      	ldr	r3, [pc, #28]	; (8017f7c <RTC_screen_S5+0x24>)
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	2b04      	cmp	r3, #4
 8017f62:	d805      	bhi.n	8017f70 <RTC_screen_S5+0x18>
 8017f64:	4b05      	ldr	r3, [pc, #20]	; (8017f7c <RTC_screen_S5+0x24>)
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	3301      	adds	r3, #1
 8017f6a:	b2da      	uxtb	r2, r3
 8017f6c:	4b03      	ldr	r3, [pc, #12]	; (8017f7c <RTC_screen_S5+0x24>)
 8017f6e:	701a      	strb	r2, [r3, #0]
}
 8017f70:	bf00      	nop
 8017f72:	46bd      	mov	sp, r7
 8017f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f78:	4770      	bx	lr
 8017f7a:	bf00      	nop
 8017f7c:	2000085c 	.word	0x2000085c

08017f80 <RTC_screen_S8>:

// UP
void RTC_screen_S8(void)
{
 8017f80:	b480      	push	{r7}
 8017f82:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017f84:	4b07      	ldr	r3, [pc, #28]	; (8017fa4 <RTC_screen_S8+0x24>)
 8017f86:	781b      	ldrb	r3, [r3, #0]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d005      	beq.n	8017f98 <RTC_screen_S8+0x18>
 8017f8c:	4b05      	ldr	r3, [pc, #20]	; (8017fa4 <RTC_screen_S8+0x24>)
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	3b01      	subs	r3, #1
 8017f92:	b2da      	uxtb	r2, r3
 8017f94:	4b03      	ldr	r3, [pc, #12]	; (8017fa4 <RTC_screen_S8+0x24>)
 8017f96:	701a      	strb	r2, [r3, #0]
}
 8017f98:	bf00      	nop
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa0:	4770      	bx	lr
 8017fa2:	bf00      	nop
 8017fa4:	2000085c 	.word	0x2000085c

08017fa8 <RTC_screen_S6>:



// BACKWARD
void RTC_screen_S6(void)
{
 8017fa8:	b480      	push	{r7}
 8017faa:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017fac:	4b32      	ldr	r3, [pc, #200]	; (8018078 <RTC_screen_S6+0xd0>)
 8017fae:	781b      	ldrb	r3, [r3, #0]
 8017fb0:	2b05      	cmp	r3, #5
 8017fb2:	d85c      	bhi.n	801806e <RTC_screen_S6+0xc6>
 8017fb4:	a201      	add	r2, pc, #4	; (adr r2, 8017fbc <RTC_screen_S6+0x14>)
 8017fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fba:	bf00      	nop
 8017fbc:	08017fd5 	.word	0x08017fd5
 8017fc0:	08017feb 	.word	0x08017feb
 8017fc4:	08018001 	.word	0x08018001
 8017fc8:	08018017 	.word	0x08018017
 8017fcc:	0801802d 	.word	0x0801802d
 8017fd0:	08018043 	.word	0x08018043
	{
		case 0: if(day_temp>0)day_temp--; break;
 8017fd4:	4b29      	ldr	r3, [pc, #164]	; (801807c <RTC_screen_S6+0xd4>)
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d03d      	beq.n	8018058 <RTC_screen_S6+0xb0>
 8017fdc:	4b27      	ldr	r3, [pc, #156]	; (801807c <RTC_screen_S6+0xd4>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	3b01      	subs	r3, #1
 8017fe2:	b2da      	uxtb	r2, r3
 8017fe4:	4b25      	ldr	r3, [pc, #148]	; (801807c <RTC_screen_S6+0xd4>)
 8017fe6:	701a      	strb	r2, [r3, #0]
 8017fe8:	e036      	b.n	8018058 <RTC_screen_S6+0xb0>
		case 1: if(month_temp>0)month_temp--; break;
 8017fea:	4b25      	ldr	r3, [pc, #148]	; (8018080 <RTC_screen_S6+0xd8>)
 8017fec:	781b      	ldrb	r3, [r3, #0]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d034      	beq.n	801805c <RTC_screen_S6+0xb4>
 8017ff2:	4b23      	ldr	r3, [pc, #140]	; (8018080 <RTC_screen_S6+0xd8>)
 8017ff4:	781b      	ldrb	r3, [r3, #0]
 8017ff6:	3b01      	subs	r3, #1
 8017ff8:	b2da      	uxtb	r2, r3
 8017ffa:	4b21      	ldr	r3, [pc, #132]	; (8018080 <RTC_screen_S6+0xd8>)
 8017ffc:	701a      	strb	r2, [r3, #0]
 8017ffe:	e02d      	b.n	801805c <RTC_screen_S6+0xb4>
		case 2: if(year_temp>0)year_temp--; break;
 8018000:	4b20      	ldr	r3, [pc, #128]	; (8018084 <RTC_screen_S6+0xdc>)
 8018002:	781b      	ldrb	r3, [r3, #0]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d02b      	beq.n	8018060 <RTC_screen_S6+0xb8>
 8018008:	4b1e      	ldr	r3, [pc, #120]	; (8018084 <RTC_screen_S6+0xdc>)
 801800a:	781b      	ldrb	r3, [r3, #0]
 801800c:	3b01      	subs	r3, #1
 801800e:	b2da      	uxtb	r2, r3
 8018010:	4b1c      	ldr	r3, [pc, #112]	; (8018084 <RTC_screen_S6+0xdc>)
 8018012:	701a      	strb	r2, [r3, #0]
 8018014:	e024      	b.n	8018060 <RTC_screen_S6+0xb8>
		case 3: if(hour_temp>0)hour_temp--; break;
 8018016:	4b1c      	ldr	r3, [pc, #112]	; (8018088 <RTC_screen_S6+0xe0>)
 8018018:	781b      	ldrb	r3, [r3, #0]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d022      	beq.n	8018064 <RTC_screen_S6+0xbc>
 801801e:	4b1a      	ldr	r3, [pc, #104]	; (8018088 <RTC_screen_S6+0xe0>)
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	3b01      	subs	r3, #1
 8018024:	b2da      	uxtb	r2, r3
 8018026:	4b18      	ldr	r3, [pc, #96]	; (8018088 <RTC_screen_S6+0xe0>)
 8018028:	701a      	strb	r2, [r3, #0]
 801802a:	e01b      	b.n	8018064 <RTC_screen_S6+0xbc>
		case 4: if(minute_temp>0)minute_temp--; break;
 801802c:	4b17      	ldr	r3, [pc, #92]	; (801808c <RTC_screen_S6+0xe4>)
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d019      	beq.n	8018068 <RTC_screen_S6+0xc0>
 8018034:	4b15      	ldr	r3, [pc, #84]	; (801808c <RTC_screen_S6+0xe4>)
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	3b01      	subs	r3, #1
 801803a:	b2da      	uxtb	r2, r3
 801803c:	4b13      	ldr	r3, [pc, #76]	; (801808c <RTC_screen_S6+0xe4>)
 801803e:	701a      	strb	r2, [r3, #0]
 8018040:	e012      	b.n	8018068 <RTC_screen_S6+0xc0>
		case 5: if(sec_temp>0)sec_temp--; break;
 8018042:	4b13      	ldr	r3, [pc, #76]	; (8018090 <RTC_screen_S6+0xe8>)
 8018044:	781b      	ldrb	r3, [r3, #0]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d010      	beq.n	801806c <RTC_screen_S6+0xc4>
 801804a:	4b11      	ldr	r3, [pc, #68]	; (8018090 <RTC_screen_S6+0xe8>)
 801804c:	781b      	ldrb	r3, [r3, #0]
 801804e:	3b01      	subs	r3, #1
 8018050:	b2da      	uxtb	r2, r3
 8018052:	4b0f      	ldr	r3, [pc, #60]	; (8018090 <RTC_screen_S6+0xe8>)
 8018054:	701a      	strb	r2, [r3, #0]
 8018056:	e009      	b.n	801806c <RTC_screen_S6+0xc4>
		case 0: if(day_temp>0)day_temp--; break;
 8018058:	bf00      	nop
 801805a:	e008      	b.n	801806e <RTC_screen_S6+0xc6>
		case 1: if(month_temp>0)month_temp--; break;
 801805c:	bf00      	nop
 801805e:	e006      	b.n	801806e <RTC_screen_S6+0xc6>
		case 2: if(year_temp>0)year_temp--; break;
 8018060:	bf00      	nop
 8018062:	e004      	b.n	801806e <RTC_screen_S6+0xc6>
		case 3: if(hour_temp>0)hour_temp--; break;
 8018064:	bf00      	nop
 8018066:	e002      	b.n	801806e <RTC_screen_S6+0xc6>
		case 4: if(minute_temp>0)minute_temp--; break;
 8018068:	bf00      	nop
 801806a:	e000      	b.n	801806e <RTC_screen_S6+0xc6>
		case 5: if(sec_temp>0)sec_temp--; break;
 801806c:	bf00      	nop
	}
}
 801806e:	bf00      	nop
 8018070:	46bd      	mov	sp, r7
 8018072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018076:	4770      	bx	lr
 8018078:	2000085c 	.word	0x2000085c
 801807c:	2000874e 	.word	0x2000874e
 8018080:	20008751 	.word	0x20008751
 8018084:	20008755 	.word	0x20008755
 8018088:	20008757 	.word	0x20008757
 801808c:	2000874d 	.word	0x2000874d
 8018090:	20008752 	.word	0x20008752

08018094 <RTC_screen_S7>:

// FORWARD
void RTC_screen_S7(void)
{
 8018094:	b480      	push	{r7}
 8018096:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018098:	4b32      	ldr	r3, [pc, #200]	; (8018164 <RTC_screen_S7+0xd0>)
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	2b05      	cmp	r3, #5
 801809e:	d85c      	bhi.n	801815a <RTC_screen_S7+0xc6>
 80180a0:	a201      	add	r2, pc, #4	; (adr r2, 80180a8 <RTC_screen_S7+0x14>)
 80180a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180a6:	bf00      	nop
 80180a8:	080180c1 	.word	0x080180c1
 80180ac:	080180d7 	.word	0x080180d7
 80180b0:	080180ed 	.word	0x080180ed
 80180b4:	08018103 	.word	0x08018103
 80180b8:	08018119 	.word	0x08018119
 80180bc:	0801812f 	.word	0x0801812f
	{
		case 0: if(day_temp<31)day_temp++; break;
 80180c0:	4b29      	ldr	r3, [pc, #164]	; (8018168 <RTC_screen_S7+0xd4>)
 80180c2:	781b      	ldrb	r3, [r3, #0]
 80180c4:	2b1e      	cmp	r3, #30
 80180c6:	d83d      	bhi.n	8018144 <RTC_screen_S7+0xb0>
 80180c8:	4b27      	ldr	r3, [pc, #156]	; (8018168 <RTC_screen_S7+0xd4>)
 80180ca:	781b      	ldrb	r3, [r3, #0]
 80180cc:	3301      	adds	r3, #1
 80180ce:	b2da      	uxtb	r2, r3
 80180d0:	4b25      	ldr	r3, [pc, #148]	; (8018168 <RTC_screen_S7+0xd4>)
 80180d2:	701a      	strb	r2, [r3, #0]
 80180d4:	e036      	b.n	8018144 <RTC_screen_S7+0xb0>
		case 1: if(month_temp<12)month_temp++; break;
 80180d6:	4b25      	ldr	r3, [pc, #148]	; (801816c <RTC_screen_S7+0xd8>)
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	2b0b      	cmp	r3, #11
 80180dc:	d834      	bhi.n	8018148 <RTC_screen_S7+0xb4>
 80180de:	4b23      	ldr	r3, [pc, #140]	; (801816c <RTC_screen_S7+0xd8>)
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	3301      	adds	r3, #1
 80180e4:	b2da      	uxtb	r2, r3
 80180e6:	4b21      	ldr	r3, [pc, #132]	; (801816c <RTC_screen_S7+0xd8>)
 80180e8:	701a      	strb	r2, [r3, #0]
 80180ea:	e02d      	b.n	8018148 <RTC_screen_S7+0xb4>
		case 2: if(year_temp<60)year_temp++; break;
 80180ec:	4b20      	ldr	r3, [pc, #128]	; (8018170 <RTC_screen_S7+0xdc>)
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	2b3b      	cmp	r3, #59	; 0x3b
 80180f2:	d82b      	bhi.n	801814c <RTC_screen_S7+0xb8>
 80180f4:	4b1e      	ldr	r3, [pc, #120]	; (8018170 <RTC_screen_S7+0xdc>)
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	3301      	adds	r3, #1
 80180fa:	b2da      	uxtb	r2, r3
 80180fc:	4b1c      	ldr	r3, [pc, #112]	; (8018170 <RTC_screen_S7+0xdc>)
 80180fe:	701a      	strb	r2, [r3, #0]
 8018100:	e024      	b.n	801814c <RTC_screen_S7+0xb8>
		case 3: if(hour_temp<24)hour_temp++; break;
 8018102:	4b1c      	ldr	r3, [pc, #112]	; (8018174 <RTC_screen_S7+0xe0>)
 8018104:	781b      	ldrb	r3, [r3, #0]
 8018106:	2b17      	cmp	r3, #23
 8018108:	d822      	bhi.n	8018150 <RTC_screen_S7+0xbc>
 801810a:	4b1a      	ldr	r3, [pc, #104]	; (8018174 <RTC_screen_S7+0xe0>)
 801810c:	781b      	ldrb	r3, [r3, #0]
 801810e:	3301      	adds	r3, #1
 8018110:	b2da      	uxtb	r2, r3
 8018112:	4b18      	ldr	r3, [pc, #96]	; (8018174 <RTC_screen_S7+0xe0>)
 8018114:	701a      	strb	r2, [r3, #0]
 8018116:	e01b      	b.n	8018150 <RTC_screen_S7+0xbc>
		case 4: if(minute_temp<60)minute_temp++; break;
 8018118:	4b17      	ldr	r3, [pc, #92]	; (8018178 <RTC_screen_S7+0xe4>)
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	2b3b      	cmp	r3, #59	; 0x3b
 801811e:	d819      	bhi.n	8018154 <RTC_screen_S7+0xc0>
 8018120:	4b15      	ldr	r3, [pc, #84]	; (8018178 <RTC_screen_S7+0xe4>)
 8018122:	781b      	ldrb	r3, [r3, #0]
 8018124:	3301      	adds	r3, #1
 8018126:	b2da      	uxtb	r2, r3
 8018128:	4b13      	ldr	r3, [pc, #76]	; (8018178 <RTC_screen_S7+0xe4>)
 801812a:	701a      	strb	r2, [r3, #0]
 801812c:	e012      	b.n	8018154 <RTC_screen_S7+0xc0>
		case 5: if(sec_temp<60)sec_temp++; break;
 801812e:	4b13      	ldr	r3, [pc, #76]	; (801817c <RTC_screen_S7+0xe8>)
 8018130:	781b      	ldrb	r3, [r3, #0]
 8018132:	2b3b      	cmp	r3, #59	; 0x3b
 8018134:	d810      	bhi.n	8018158 <RTC_screen_S7+0xc4>
 8018136:	4b11      	ldr	r3, [pc, #68]	; (801817c <RTC_screen_S7+0xe8>)
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	3301      	adds	r3, #1
 801813c:	b2da      	uxtb	r2, r3
 801813e:	4b0f      	ldr	r3, [pc, #60]	; (801817c <RTC_screen_S7+0xe8>)
 8018140:	701a      	strb	r2, [r3, #0]
 8018142:	e009      	b.n	8018158 <RTC_screen_S7+0xc4>
		case 0: if(day_temp<31)day_temp++; break;
 8018144:	bf00      	nop
 8018146:	e008      	b.n	801815a <RTC_screen_S7+0xc6>
		case 1: if(month_temp<12)month_temp++; break;
 8018148:	bf00      	nop
 801814a:	e006      	b.n	801815a <RTC_screen_S7+0xc6>
		case 2: if(year_temp<60)year_temp++; break;
 801814c:	bf00      	nop
 801814e:	e004      	b.n	801815a <RTC_screen_S7+0xc6>
		case 3: if(hour_temp<24)hour_temp++; break;
 8018150:	bf00      	nop
 8018152:	e002      	b.n	801815a <RTC_screen_S7+0xc6>
		case 4: if(minute_temp<60)minute_temp++; break;
 8018154:	bf00      	nop
 8018156:	e000      	b.n	801815a <RTC_screen_S7+0xc6>
		case 5: if(sec_temp<60)sec_temp++; break;
 8018158:	bf00      	nop
	}
}
 801815a:	bf00      	nop
 801815c:	46bd      	mov	sp, r7
 801815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018162:	4770      	bx	lr
 8018164:	2000085c 	.word	0x2000085c
 8018168:	2000874e 	.word	0x2000874e
 801816c:	20008751 	.word	0x20008751
 8018170:	20008755 	.word	0x20008755
 8018174:	20008757 	.word	0x20008757
 8018178:	2000874d 	.word	0x2000874d
 801817c:	20008752 	.word	0x20008752

08018180 <RTC_screen_S4>:

// ENTER
void RTC_screen_S4(void)
{
 8018180:	b5b0      	push	{r4, r5, r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af02      	add	r7, sp, #8
	RTC_set(year_temp, month_temp, day_temp, hour_temp, minute_temp, sec_temp);
 8018186:	4b0a      	ldr	r3, [pc, #40]	; (80181b0 <RTC_screen_S4+0x30>)
 8018188:	7818      	ldrb	r0, [r3, #0]
 801818a:	4b0a      	ldr	r3, [pc, #40]	; (80181b4 <RTC_screen_S4+0x34>)
 801818c:	7819      	ldrb	r1, [r3, #0]
 801818e:	4b0a      	ldr	r3, [pc, #40]	; (80181b8 <RTC_screen_S4+0x38>)
 8018190:	781c      	ldrb	r4, [r3, #0]
 8018192:	4b0a      	ldr	r3, [pc, #40]	; (80181bc <RTC_screen_S4+0x3c>)
 8018194:	781d      	ldrb	r5, [r3, #0]
 8018196:	4b0a      	ldr	r3, [pc, #40]	; (80181c0 <RTC_screen_S4+0x40>)
 8018198:	781b      	ldrb	r3, [r3, #0]
 801819a:	4a0a      	ldr	r2, [pc, #40]	; (80181c4 <RTC_screen_S4+0x44>)
 801819c:	7812      	ldrb	r2, [r2, #0]
 801819e:	9201      	str	r2, [sp, #4]
 80181a0:	9300      	str	r3, [sp, #0]
 80181a2:	462b      	mov	r3, r5
 80181a4:	4622      	mov	r2, r4
 80181a6:	f7ff fd83 	bl	8017cb0 <RTC_set>
}
 80181aa:	bf00      	nop
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bdb0      	pop	{r4, r5, r7, pc}
 80181b0:	20008755 	.word	0x20008755
 80181b4:	20008751 	.word	0x20008751
 80181b8:	2000874e 	.word	0x2000874e
 80181bc:	20008757 	.word	0x20008757
 80181c0:	2000874d 	.word	0x2000874d
 80181c4:	20008752 	.word	0x20008752

080181c8 <About_options_screen_func>:
};



void About_options_screen_func(void)
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	af00      	add	r7, sp, #0
	RTC_view();
 80181cc:	f7ff fc50 	bl	8017a70 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80181d0:	492a      	ldr	r1, [pc, #168]	; (801827c <About_options_screen_func+0xb4>)
 80181d2:	482b      	ldr	r0, [pc, #172]	; (8018280 <About_options_screen_func+0xb8>)
 80181d4:	f7fd fc3e 	bl	8015a54 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 10, 35, "Серийный номер:");
 80181d8:	4b2a      	ldr	r3, [pc, #168]	; (8018284 <About_options_screen_func+0xbc>)
 80181da:	2223      	movs	r2, #35	; 0x23
 80181dc:	210a      	movs	r1, #10
 80181de:	4828      	ldr	r0, [pc, #160]	; (8018280 <About_options_screen_func+0xb8>)
 80181e0:	f7fd fb96 	bl	8015910 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%05d", serial_num);
 80181e4:	4b28      	ldr	r3, [pc, #160]	; (8018288 <About_options_screen_func+0xc0>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	461a      	mov	r2, r3
 80181ea:	4928      	ldr	r1, [pc, #160]	; (801828c <About_options_screen_func+0xc4>)
 80181ec:	4828      	ldr	r0, [pc, #160]	; (8018290 <About_options_screen_func+0xc8>)
 80181ee:	f005 fd8f 	bl	801dd10 <siprintf>
	u8g2_DrawUTF8(&u8g2, 170, 35, (char*)RAM);
 80181f2:	4b27      	ldr	r3, [pc, #156]	; (8018290 <About_options_screen_func+0xc8>)
 80181f4:	2223      	movs	r2, #35	; 0x23
 80181f6:	21aa      	movs	r1, #170	; 0xaa
 80181f8:	4821      	ldr	r0, [pc, #132]	; (8018280 <About_options_screen_func+0xb8>)
 80181fa:	f7fd fb89 	bl	8015910 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 50, "Диапазон:");
 80181fe:	4b25      	ldr	r3, [pc, #148]	; (8018294 <About_options_screen_func+0xcc>)
 8018200:	2232      	movs	r2, #50	; 0x32
 8018202:	210a      	movs	r1, #10
 8018204:	481e      	ldr	r0, [pc, #120]	; (8018280 <About_options_screen_func+0xb8>)
 8018206:	f7fd fb83 	bl	8015910 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 110, 50, GAUGE_RANGE_TEXT[gauge_range]);
 801820a:	4b23      	ldr	r3, [pc, #140]	; (8018298 <About_options_screen_func+0xd0>)
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	4a23      	ldr	r2, [pc, #140]	; (801829c <About_options_screen_func+0xd4>)
 8018210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018214:	2232      	movs	r2, #50	; 0x32
 8018216:	216e      	movs	r1, #110	; 0x6e
 8018218:	4819      	ldr	r0, [pc, #100]	; (8018280 <About_options_screen_func+0xb8>)
 801821a:	f7fd fb79 	bl	8015910 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 65, "Погрешность:");
 801821e:	4b20      	ldr	r3, [pc, #128]	; (80182a0 <About_options_screen_func+0xd8>)
 8018220:	2241      	movs	r2, #65	; 0x41
 8018222:	210a      	movs	r1, #10
 8018224:	4816      	ldr	r0, [pc, #88]	; (8018280 <About_options_screen_func+0xb8>)
 8018226:	f7fd fb73 	bl	8015910 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%.4f", gauge_error);
 801822a:	4b1e      	ldr	r3, [pc, #120]	; (80182a4 <About_options_screen_func+0xdc>)
 801822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018230:	491d      	ldr	r1, [pc, #116]	; (80182a8 <About_options_screen_func+0xe0>)
 8018232:	4817      	ldr	r0, [pc, #92]	; (8018290 <About_options_screen_func+0xc8>)
 8018234:	f005 fd6c 	bl	801dd10 <siprintf>
	u8g2_DrawUTF8(&u8g2, 140, 65, (char*)RAM);
 8018238:	4b15      	ldr	r3, [pc, #84]	; (8018290 <About_options_screen_func+0xc8>)
 801823a:	2241      	movs	r2, #65	; 0x41
 801823c:	218c      	movs	r1, #140	; 0x8c
 801823e:	4810      	ldr	r0, [pc, #64]	; (8018280 <About_options_screen_func+0xb8>)
 8018240:	f7fd fb66 	bl	8015910 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 145, "Код ошибки:");
 8018244:	4b19      	ldr	r3, [pc, #100]	; (80182ac <About_options_screen_func+0xe4>)
 8018246:	2291      	movs	r2, #145	; 0x91
 8018248:	210a      	movs	r1, #10
 801824a:	480d      	ldr	r0, [pc, #52]	; (8018280 <About_options_screen_func+0xb8>)
 801824c:	f7fd fb60 	bl	8015910 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%d", ERROR_REG);
 8018250:	4b17      	ldr	r3, [pc, #92]	; (80182b0 <About_options_screen_func+0xe8>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	461a      	mov	r2, r3
 8018256:	4917      	ldr	r1, [pc, #92]	; (80182b4 <About_options_screen_func+0xec>)
 8018258:	480d      	ldr	r0, [pc, #52]	; (8018290 <About_options_screen_func+0xc8>)
 801825a:	f005 fd59 	bl	801dd10 <siprintf>
	u8g2_DrawUTF8(&u8g2, 130, 145, (char*)RAM);
 801825e:	4b0c      	ldr	r3, [pc, #48]	; (8018290 <About_options_screen_func+0xc8>)
 8018260:	2291      	movs	r2, #145	; 0x91
 8018262:	2182      	movs	r1, #130	; 0x82
 8018264:	4806      	ldr	r0, [pc, #24]	; (8018280 <About_options_screen_func+0xb8>)
 8018266:	f7fd fb53 	bl	8015910 <u8g2_DrawUTF8>



	u8g2_SendBuffer(&u8g2);
 801826a:	4805      	ldr	r0, [pc, #20]	; (8018280 <About_options_screen_func+0xb8>)
 801826c:	f7fc fdb5 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018270:	4803      	ldr	r0, [pc, #12]	; (8018280 <About_options_screen_func+0xb8>)
 8018272:	f7fc fd3f 	bl	8014cf4 <u8g2_ClearBuffer>
}
 8018276:	bf00      	nop
 8018278:	bd80      	pop	{r7, pc}
 801827a:	bf00      	nop
 801827c:	080271c4 	.word	0x080271c4
 8018280:	20001fcc 	.word	0x20001fcc
 8018284:	08022328 	.word	0x08022328
 8018288:	200000a0 	.word	0x200000a0
 801828c:	08022348 	.word	0x08022348
 8018290:	20002088 	.word	0x20002088
 8018294:	08022350 	.word	0x08022350
 8018298:	200008ac 	.word	0x200008ac
 801829c:	20000374 	.word	0x20000374
 80182a0:	08022364 	.word	0x08022364
 80182a4:	200000a8 	.word	0x200000a8
 80182a8:	0802237c 	.word	0x0802237c
 80182ac:	08022384 	.word	0x08022384
 80182b0:	20000890 	.word	0x20000890
 80182b4:	0802239c 	.word	0x0802239c

080182b8 <About_options_screen_S9>:


// MENU
void About_options_screen_S9(void)
{
 80182b8:	b480      	push	{r7}
 80182ba:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80182bc:	4b06      	ldr	r3, [pc, #24]	; (80182d8 <About_options_screen_S9+0x20>)
 80182be:	2204      	movs	r2, #4
 80182c0:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80182c2:	4b06      	ldr	r3, [pc, #24]	; (80182dc <About_options_screen_S9+0x24>)
 80182c4:	22ff      	movs	r2, #255	; 0xff
 80182c6:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 80182c8:	4b05      	ldr	r3, [pc, #20]	; (80182e0 <About_options_screen_S9+0x28>)
 80182ca:	2203      	movs	r2, #3
 80182cc:	701a      	strb	r2, [r3, #0]
}
 80182ce:	bf00      	nop
 80182d0:	46bd      	mov	sp, r7
 80182d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d6:	4770      	bx	lr
 80182d8:	2000004c 	.word	0x2000004c
 80182dc:	200003a0 	.word	0x200003a0
 80182e0:	200003a1 	.word	0x200003a1

080182e4 <Logging_options_screen_func>:
#define max_edit_param 6



void Logging_options_screen_func(void)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b082      	sub	sp, #8
 80182e8:	af02      	add	r7, sp, #8
	RTC_view();
 80182ea:	f7ff fbc1 	bl	8017a70 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80182ee:	4951      	ldr	r1, [pc, #324]	; (8018434 <Logging_options_screen_func+0x150>)
 80182f0:	4851      	ldr	r0, [pc, #324]	; (8018438 <Logging_options_screen_func+0x154>)
 80182f2:	f7fd fbaf 	bl	8015a54 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 5, 40, "Логгирование:");
 80182f6:	4b51      	ldr	r3, [pc, #324]	; (801843c <Logging_options_screen_func+0x158>)
 80182f8:	2228      	movs	r2, #40	; 0x28
 80182fa:	2105      	movs	r1, #5
 80182fc:	484e      	ldr	r0, [pc, #312]	; (8018438 <Logging_options_screen_func+0x154>)
 80182fe:	f7fd fb07 	bl	8015910 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 60, "Время старта:");
 8018302:	4b4f      	ldr	r3, [pc, #316]	; (8018440 <Logging_options_screen_func+0x15c>)
 8018304:	223c      	movs	r2, #60	; 0x3c
 8018306:	2105      	movs	r1, #5
 8018308:	484b      	ldr	r0, [pc, #300]	; (8018438 <Logging_options_screen_func+0x154>)
 801830a:	f7fd fb01 	bl	8015910 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 80, "Период сохранения:");
 801830e:	4b4d      	ldr	r3, [pc, #308]	; (8018444 <Logging_options_screen_func+0x160>)
 8018310:	2250      	movs	r2, #80	; 0x50
 8018312:	2105      	movs	r1, #5
 8018314:	4848      	ldr	r0, [pc, #288]	; (8018438 <Logging_options_screen_func+0x154>)
 8018316:	f7fd fafb 	bl	8015910 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 100, "Длительность:");
 801831a:	4b4b      	ldr	r3, [pc, #300]	; (8018448 <Logging_options_screen_func+0x164>)
 801831c:	2264      	movs	r2, #100	; 0x64
 801831e:	2105      	movs	r1, #5
 8018320:	4845      	ldr	r0, [pc, #276]	; (8018438 <Logging_options_screen_func+0x154>)
 8018322:	f7fd faf5 	bl	8015910 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 120, "Всего файлов:");
 8018326:	4b49      	ldr	r3, [pc, #292]	; (801844c <Logging_options_screen_func+0x168>)
 8018328:	2278      	movs	r2, #120	; 0x78
 801832a:	2105      	movs	r1, #5
 801832c:	4842      	ldr	r0, [pc, #264]	; (8018438 <Logging_options_screen_func+0x154>)
 801832e:	f7fd faef 	bl	8015910 <u8g2_DrawUTF8>


	// 0 parameter
	if(logging==0)Blink_Edit_Parameter(155, 40, "ДА", edit_param, 0);
 8018332:	4b47      	ldr	r3, [pc, #284]	; (8018450 <Logging_options_screen_func+0x16c>)
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d109      	bne.n	801834e <Logging_options_screen_func+0x6a>
 801833a:	4b46      	ldr	r3, [pc, #280]	; (8018454 <Logging_options_screen_func+0x170>)
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	2200      	movs	r2, #0
 8018340:	9200      	str	r2, [sp, #0]
 8018342:	4a45      	ldr	r2, [pc, #276]	; (8018458 <Logging_options_screen_func+0x174>)
 8018344:	2128      	movs	r1, #40	; 0x28
 8018346:	209b      	movs	r0, #155	; 0x9b
 8018348:	f7ea fd7e 	bl	8002e48 <Blink_Edit_Parameter>
 801834c:	e008      	b.n	8018360 <Logging_options_screen_func+0x7c>
	else Blink_Edit_Parameter(155, 40, "НЕТ", edit_param, 0);
 801834e:	4b41      	ldr	r3, [pc, #260]	; (8018454 <Logging_options_screen_func+0x170>)
 8018350:	781b      	ldrb	r3, [r3, #0]
 8018352:	2200      	movs	r2, #0
 8018354:	9200      	str	r2, [sp, #0]
 8018356:	4a41      	ldr	r2, [pc, #260]	; (801845c <Logging_options_screen_func+0x178>)
 8018358:	2128      	movs	r1, #40	; 0x28
 801835a:	209b      	movs	r0, #155	; 0x9b
 801835c:	f7ea fd74 	bl	8002e48 <Blink_Edit_Parameter>
	// 1 parameter
	sprintf(RAM,"%02d:", logging_start_hour);
 8018360:	4b3f      	ldr	r3, [pc, #252]	; (8018460 <Logging_options_screen_func+0x17c>)
 8018362:	781b      	ldrb	r3, [r3, #0]
 8018364:	461a      	mov	r2, r3
 8018366:	493f      	ldr	r1, [pc, #252]	; (8018464 <Logging_options_screen_func+0x180>)
 8018368:	483f      	ldr	r0, [pc, #252]	; (8018468 <Logging_options_screen_func+0x184>)
 801836a:	f005 fcd1 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(155, 60, RAM, edit_param, 1);
 801836e:	4b39      	ldr	r3, [pc, #228]	; (8018454 <Logging_options_screen_func+0x170>)
 8018370:	781b      	ldrb	r3, [r3, #0]
 8018372:	2201      	movs	r2, #1
 8018374:	9200      	str	r2, [sp, #0]
 8018376:	4a3c      	ldr	r2, [pc, #240]	; (8018468 <Logging_options_screen_func+0x184>)
 8018378:	213c      	movs	r1, #60	; 0x3c
 801837a:	209b      	movs	r0, #155	; 0x9b
 801837c:	f7ea fd64 	bl	8002e48 <Blink_Edit_Parameter>
	// 2 parameter
	sprintf(RAM,"%02d:", logging_start_min);
 8018380:	4b3a      	ldr	r3, [pc, #232]	; (801846c <Logging_options_screen_func+0x188>)
 8018382:	781b      	ldrb	r3, [r3, #0]
 8018384:	461a      	mov	r2, r3
 8018386:	4937      	ldr	r1, [pc, #220]	; (8018464 <Logging_options_screen_func+0x180>)
 8018388:	4837      	ldr	r0, [pc, #220]	; (8018468 <Logging_options_screen_func+0x184>)
 801838a:	f005 fcc1 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(185, 60, RAM, edit_param, 2);
 801838e:	4b31      	ldr	r3, [pc, #196]	; (8018454 <Logging_options_screen_func+0x170>)
 8018390:	781b      	ldrb	r3, [r3, #0]
 8018392:	2202      	movs	r2, #2
 8018394:	9200      	str	r2, [sp, #0]
 8018396:	4a34      	ldr	r2, [pc, #208]	; (8018468 <Logging_options_screen_func+0x184>)
 8018398:	213c      	movs	r1, #60	; 0x3c
 801839a:	20b9      	movs	r0, #185	; 0xb9
 801839c:	f7ea fd54 	bl	8002e48 <Blink_Edit_Parameter>
	// 3 parameter
	sprintf(RAM,"%02d", logging_start_sec);
 80183a0:	4b33      	ldr	r3, [pc, #204]	; (8018470 <Logging_options_screen_func+0x18c>)
 80183a2:	781b      	ldrb	r3, [r3, #0]
 80183a4:	461a      	mov	r2, r3
 80183a6:	4933      	ldr	r1, [pc, #204]	; (8018474 <Logging_options_screen_func+0x190>)
 80183a8:	482f      	ldr	r0, [pc, #188]	; (8018468 <Logging_options_screen_func+0x184>)
 80183aa:	f005 fcb1 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(215, 60, RAM, edit_param, 3);
 80183ae:	4b29      	ldr	r3, [pc, #164]	; (8018454 <Logging_options_screen_func+0x170>)
 80183b0:	781b      	ldrb	r3, [r3, #0]
 80183b2:	2203      	movs	r2, #3
 80183b4:	9200      	str	r2, [sp, #0]
 80183b6:	4a2c      	ldr	r2, [pc, #176]	; (8018468 <Logging_options_screen_func+0x184>)
 80183b8:	213c      	movs	r1, #60	; 0x3c
 80183ba:	20d7      	movs	r0, #215	; 0xd7
 80183bc:	f7ea fd44 	bl	8002e48 <Blink_Edit_Parameter>
	// 4 parameter
	sprintf(RAM,"%d", logging_period);
 80183c0:	4b2d      	ldr	r3, [pc, #180]	; (8018478 <Logging_options_screen_func+0x194>)
 80183c2:	781b      	ldrb	r3, [r3, #0]
 80183c4:	461a      	mov	r2, r3
 80183c6:	492d      	ldr	r1, [pc, #180]	; (801847c <Logging_options_screen_func+0x198>)
 80183c8:	4827      	ldr	r0, [pc, #156]	; (8018468 <Logging_options_screen_func+0x184>)
 80183ca:	f005 fca1 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(195, 80, RAM, edit_param, 4);
 80183ce:	4b21      	ldr	r3, [pc, #132]	; (8018454 <Logging_options_screen_func+0x170>)
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	2204      	movs	r2, #4
 80183d4:	9200      	str	r2, [sp, #0]
 80183d6:	4a24      	ldr	r2, [pc, #144]	; (8018468 <Logging_options_screen_func+0x184>)
 80183d8:	2150      	movs	r1, #80	; 0x50
 80183da:	20c3      	movs	r0, #195	; 0xc3
 80183dc:	f7ea fd34 	bl	8002e48 <Blink_Edit_Parameter>
	// 5 parameter
	sprintf(RAM,"%d", logging_len);
 80183e0:	4b27      	ldr	r3, [pc, #156]	; (8018480 <Logging_options_screen_func+0x19c>)
 80183e2:	781b      	ldrb	r3, [r3, #0]
 80183e4:	461a      	mov	r2, r3
 80183e6:	4925      	ldr	r1, [pc, #148]	; (801847c <Logging_options_screen_func+0x198>)
 80183e8:	481f      	ldr	r0, [pc, #124]	; (8018468 <Logging_options_screen_func+0x184>)
 80183ea:	f005 fc91 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(155, 100, RAM, edit_param, 5);
 80183ee:	4b19      	ldr	r3, [pc, #100]	; (8018454 <Logging_options_screen_func+0x170>)
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	2205      	movs	r2, #5
 80183f4:	9200      	str	r2, [sp, #0]
 80183f6:	4a1c      	ldr	r2, [pc, #112]	; (8018468 <Logging_options_screen_func+0x184>)
 80183f8:	2164      	movs	r1, #100	; 0x64
 80183fa:	209b      	movs	r0, #155	; 0x9b
 80183fc:	f7ea fd24 	bl	8002e48 <Blink_Edit_Parameter>
	// 6 parameter
	sprintf(RAM,"%d", logging_num);
 8018400:	4b20      	ldr	r3, [pc, #128]	; (8018484 <Logging_options_screen_func+0x1a0>)
 8018402:	781b      	ldrb	r3, [r3, #0]
 8018404:	461a      	mov	r2, r3
 8018406:	491d      	ldr	r1, [pc, #116]	; (801847c <Logging_options_screen_func+0x198>)
 8018408:	4817      	ldr	r0, [pc, #92]	; (8018468 <Logging_options_screen_func+0x184>)
 801840a:	f005 fc81 	bl	801dd10 <siprintf>
	Blink_Edit_Parameter(155, 120, RAM, edit_param, 6);
 801840e:	4b11      	ldr	r3, [pc, #68]	; (8018454 <Logging_options_screen_func+0x170>)
 8018410:	781b      	ldrb	r3, [r3, #0]
 8018412:	2206      	movs	r2, #6
 8018414:	9200      	str	r2, [sp, #0]
 8018416:	4a14      	ldr	r2, [pc, #80]	; (8018468 <Logging_options_screen_func+0x184>)
 8018418:	2178      	movs	r1, #120	; 0x78
 801841a:	209b      	movs	r0, #155	; 0x9b
 801841c:	f7ea fd14 	bl	8002e48 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8018420:	4805      	ldr	r0, [pc, #20]	; (8018438 <Logging_options_screen_func+0x154>)
 8018422:	f7fc fcda 	bl	8014dda <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018426:	4804      	ldr	r0, [pc, #16]	; (8018438 <Logging_options_screen_func+0x154>)
 8018428:	f7fc fc64 	bl	8014cf4 <u8g2_ClearBuffer>
}
 801842c:	bf00      	nop
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	080271c4 	.word	0x080271c4
 8018438:	20001fcc 	.word	0x20001fcc
 801843c:	080223a0 	.word	0x080223a0
 8018440:	080223bc 	.word	0x080223bc
 8018444:	080223d8 	.word	0x080223d8
 8018448:	080223fc 	.word	0x080223fc
 801844c:	08022418 	.word	0x08022418
 8018450:	200008b0 	.word	0x200008b0
 8018454:	2000085c 	.word	0x2000085c
 8018458:	08022434 	.word	0x08022434
 801845c:	0802243c 	.word	0x0802243c
 8018460:	200008b1 	.word	0x200008b1
 8018464:	08022444 	.word	0x08022444
 8018468:	20002088 	.word	0x20002088
 801846c:	200008b2 	.word	0x200008b2
 8018470:	200008b3 	.word	0x200008b3
 8018474:	0802244c 	.word	0x0802244c
 8018478:	200008b4 	.word	0x200008b4
 801847c:	08022454 	.word	0x08022454
 8018480:	200008b5 	.word	0x200008b5
 8018484:	200008b6 	.word	0x200008b6

08018488 <Logging_options_screen_S6>:


// DOWN
void Logging_options_screen_S6(void)
{
 8018488:	b480      	push	{r7}
 801848a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801848c:	4b07      	ldr	r3, [pc, #28]	; (80184ac <Logging_options_screen_S6+0x24>)
 801848e:	781b      	ldrb	r3, [r3, #0]
 8018490:	2b04      	cmp	r3, #4
 8018492:	d805      	bhi.n	80184a0 <Logging_options_screen_S6+0x18>
 8018494:	4b05      	ldr	r3, [pc, #20]	; (80184ac <Logging_options_screen_S6+0x24>)
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	3301      	adds	r3, #1
 801849a:	b2da      	uxtb	r2, r3
 801849c:	4b03      	ldr	r3, [pc, #12]	; (80184ac <Logging_options_screen_S6+0x24>)
 801849e:	701a      	strb	r2, [r3, #0]
}
 80184a0:	bf00      	nop
 80184a2:	46bd      	mov	sp, r7
 80184a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a8:	4770      	bx	lr
 80184aa:	bf00      	nop
 80184ac:	2000085c 	.word	0x2000085c

080184b0 <Logging_options_screen_S7>:

// UP
void Logging_options_screen_S7(void)
{
 80184b0:	b480      	push	{r7}
 80184b2:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80184b4:	4b07      	ldr	r3, [pc, #28]	; (80184d4 <Logging_options_screen_S7+0x24>)
 80184b6:	781b      	ldrb	r3, [r3, #0]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d005      	beq.n	80184c8 <Logging_options_screen_S7+0x18>
 80184bc:	4b05      	ldr	r3, [pc, #20]	; (80184d4 <Logging_options_screen_S7+0x24>)
 80184be:	781b      	ldrb	r3, [r3, #0]
 80184c0:	3b01      	subs	r3, #1
 80184c2:	b2da      	uxtb	r2, r3
 80184c4:	4b03      	ldr	r3, [pc, #12]	; (80184d4 <Logging_options_screen_S7+0x24>)
 80184c6:	701a      	strb	r2, [r3, #0]
}
 80184c8:	bf00      	nop
 80184ca:	46bd      	mov	sp, r7
 80184cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d0:	4770      	bx	lr
 80184d2:	bf00      	nop
 80184d4:	2000085c 	.word	0x2000085c

080184d8 <Logging_options_screen_S9>:



// MENU
void Logging_options_screen_S9(void)
{
 80184d8:	b480      	push	{r7}
 80184da:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80184dc:	4b06      	ldr	r3, [pc, #24]	; (80184f8 <Logging_options_screen_S9+0x20>)
 80184de:	2204      	movs	r2, #4
 80184e0:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80184e2:	4b06      	ldr	r3, [pc, #24]	; (80184fc <Logging_options_screen_S9+0x24>)
 80184e4:	22ff      	movs	r2, #255	; 0xff
 80184e6:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 80184e8:	4b05      	ldr	r3, [pc, #20]	; (8018500 <Logging_options_screen_S9+0x28>)
 80184ea:	2205      	movs	r2, #5
 80184ec:	701a      	strb	r2, [r3, #0]
}
 80184ee:	bf00      	nop
 80184f0:	46bd      	mov	sp, r7
 80184f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f6:	4770      	bx	lr
 80184f8:	2000004c 	.word	0x2000004c
 80184fc:	200003a0 	.word	0x200003a0
 8018500:	200003a1 	.word	0x200003a1

08018504 <Logging_options_screen_S8>:

// BACKWARD
void Logging_options_screen_S8(void)
{
 8018504:	b480      	push	{r7}
 8018506:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018508:	4b32      	ldr	r3, [pc, #200]	; (80185d4 <Logging_options_screen_S8+0xd0>)
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	2b05      	cmp	r3, #5
 801850e:	d85c      	bhi.n	80185ca <Logging_options_screen_S8+0xc6>
 8018510:	a201      	add	r2, pc, #4	; (adr r2, 8018518 <Logging_options_screen_S8+0x14>)
 8018512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018516:	bf00      	nop
 8018518:	08018531 	.word	0x08018531
 801851c:	08018547 	.word	0x08018547
 8018520:	0801855d 	.word	0x0801855d
 8018524:	08018573 	.word	0x08018573
 8018528:	08018589 	.word	0x08018589
 801852c:	0801859f 	.word	0x0801859f
	{
		case 0: if(logging>0)logging--; break;
 8018530:	4b29      	ldr	r3, [pc, #164]	; (80185d8 <Logging_options_screen_S8+0xd4>)
 8018532:	781b      	ldrb	r3, [r3, #0]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d03d      	beq.n	80185b4 <Logging_options_screen_S8+0xb0>
 8018538:	4b27      	ldr	r3, [pc, #156]	; (80185d8 <Logging_options_screen_S8+0xd4>)
 801853a:	781b      	ldrb	r3, [r3, #0]
 801853c:	3b01      	subs	r3, #1
 801853e:	b2da      	uxtb	r2, r3
 8018540:	4b25      	ldr	r3, [pc, #148]	; (80185d8 <Logging_options_screen_S8+0xd4>)
 8018542:	701a      	strb	r2, [r3, #0]
 8018544:	e036      	b.n	80185b4 <Logging_options_screen_S8+0xb0>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 8018546:	4b25      	ldr	r3, [pc, #148]	; (80185dc <Logging_options_screen_S8+0xd8>)
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d034      	beq.n	80185b8 <Logging_options_screen_S8+0xb4>
 801854e:	4b23      	ldr	r3, [pc, #140]	; (80185dc <Logging_options_screen_S8+0xd8>)
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	3b01      	subs	r3, #1
 8018554:	b2da      	uxtb	r2, r3
 8018556:	4b21      	ldr	r3, [pc, #132]	; (80185dc <Logging_options_screen_S8+0xd8>)
 8018558:	701a      	strb	r2, [r3, #0]
 801855a:	e02d      	b.n	80185b8 <Logging_options_screen_S8+0xb4>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 801855c:	4b20      	ldr	r3, [pc, #128]	; (80185e0 <Logging_options_screen_S8+0xdc>)
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d02b      	beq.n	80185bc <Logging_options_screen_S8+0xb8>
 8018564:	4b1e      	ldr	r3, [pc, #120]	; (80185e0 <Logging_options_screen_S8+0xdc>)
 8018566:	781b      	ldrb	r3, [r3, #0]
 8018568:	3b01      	subs	r3, #1
 801856a:	b2da      	uxtb	r2, r3
 801856c:	4b1c      	ldr	r3, [pc, #112]	; (80185e0 <Logging_options_screen_S8+0xdc>)
 801856e:	701a      	strb	r2, [r3, #0]
 8018570:	e024      	b.n	80185bc <Logging_options_screen_S8+0xb8>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 8018572:	4b1c      	ldr	r3, [pc, #112]	; (80185e4 <Logging_options_screen_S8+0xe0>)
 8018574:	781b      	ldrb	r3, [r3, #0]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d022      	beq.n	80185c0 <Logging_options_screen_S8+0xbc>
 801857a:	4b1a      	ldr	r3, [pc, #104]	; (80185e4 <Logging_options_screen_S8+0xe0>)
 801857c:	781b      	ldrb	r3, [r3, #0]
 801857e:	3b01      	subs	r3, #1
 8018580:	b2da      	uxtb	r2, r3
 8018582:	4b18      	ldr	r3, [pc, #96]	; (80185e4 <Logging_options_screen_S8+0xe0>)
 8018584:	701a      	strb	r2, [r3, #0]
 8018586:	e01b      	b.n	80185c0 <Logging_options_screen_S8+0xbc>
		case 4: if(logging_period>0)logging_period--; break;
 8018588:	4b17      	ldr	r3, [pc, #92]	; (80185e8 <Logging_options_screen_S8+0xe4>)
 801858a:	781b      	ldrb	r3, [r3, #0]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d019      	beq.n	80185c4 <Logging_options_screen_S8+0xc0>
 8018590:	4b15      	ldr	r3, [pc, #84]	; (80185e8 <Logging_options_screen_S8+0xe4>)
 8018592:	781b      	ldrb	r3, [r3, #0]
 8018594:	3b01      	subs	r3, #1
 8018596:	b2da      	uxtb	r2, r3
 8018598:	4b13      	ldr	r3, [pc, #76]	; (80185e8 <Logging_options_screen_S8+0xe4>)
 801859a:	701a      	strb	r2, [r3, #0]
 801859c:	e012      	b.n	80185c4 <Logging_options_screen_S8+0xc0>
		case 5: if(logging_len>0)logging_len--; break;
 801859e:	4b13      	ldr	r3, [pc, #76]	; (80185ec <Logging_options_screen_S8+0xe8>)
 80185a0:	781b      	ldrb	r3, [r3, #0]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d010      	beq.n	80185c8 <Logging_options_screen_S8+0xc4>
 80185a6:	4b11      	ldr	r3, [pc, #68]	; (80185ec <Logging_options_screen_S8+0xe8>)
 80185a8:	781b      	ldrb	r3, [r3, #0]
 80185aa:	3b01      	subs	r3, #1
 80185ac:	b2da      	uxtb	r2, r3
 80185ae:	4b0f      	ldr	r3, [pc, #60]	; (80185ec <Logging_options_screen_S8+0xe8>)
 80185b0:	701a      	strb	r2, [r3, #0]
 80185b2:	e009      	b.n	80185c8 <Logging_options_screen_S8+0xc4>
		case 0: if(logging>0)logging--; break;
 80185b4:	bf00      	nop
 80185b6:	e008      	b.n	80185ca <Logging_options_screen_S8+0xc6>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 80185b8:	bf00      	nop
 80185ba:	e006      	b.n	80185ca <Logging_options_screen_S8+0xc6>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 80185bc:	bf00      	nop
 80185be:	e004      	b.n	80185ca <Logging_options_screen_S8+0xc6>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 80185c0:	bf00      	nop
 80185c2:	e002      	b.n	80185ca <Logging_options_screen_S8+0xc6>
		case 4: if(logging_period>0)logging_period--; break;
 80185c4:	bf00      	nop
 80185c6:	e000      	b.n	80185ca <Logging_options_screen_S8+0xc6>
		case 5: if(logging_len>0)logging_len--; break;
 80185c8:	bf00      	nop
	}
}
 80185ca:	bf00      	nop
 80185cc:	46bd      	mov	sp, r7
 80185ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d2:	4770      	bx	lr
 80185d4:	2000085c 	.word	0x2000085c
 80185d8:	200008b0 	.word	0x200008b0
 80185dc:	200008b1 	.word	0x200008b1
 80185e0:	200008b2 	.word	0x200008b2
 80185e4:	200008b3 	.word	0x200008b3
 80185e8:	200008b4 	.word	0x200008b4
 80185ec:	200008b5 	.word	0x200008b5

080185f0 <Logging_options_screen_S5>:

// FORWARD
void Logging_options_screen_S5(void)
{
 80185f0:	b480      	push	{r7}
 80185f2:	af00      	add	r7, sp, #0
	switch(edit_param)
 80185f4:	4b32      	ldr	r3, [pc, #200]	; (80186c0 <Logging_options_screen_S5+0xd0>)
 80185f6:	781b      	ldrb	r3, [r3, #0]
 80185f8:	2b05      	cmp	r3, #5
 80185fa:	d85c      	bhi.n	80186b6 <Logging_options_screen_S5+0xc6>
 80185fc:	a201      	add	r2, pc, #4	; (adr r2, 8018604 <Logging_options_screen_S5+0x14>)
 80185fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018602:	bf00      	nop
 8018604:	0801861d 	.word	0x0801861d
 8018608:	08018633 	.word	0x08018633
 801860c:	08018649 	.word	0x08018649
 8018610:	0801865f 	.word	0x0801865f
 8018614:	08018675 	.word	0x08018675
 8018618:	0801868b 	.word	0x0801868b
	{
		case 0: if(logging<1)logging++; break;
 801861c:	4b29      	ldr	r3, [pc, #164]	; (80186c4 <Logging_options_screen_S5+0xd4>)
 801861e:	781b      	ldrb	r3, [r3, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d13d      	bne.n	80186a0 <Logging_options_screen_S5+0xb0>
 8018624:	4b27      	ldr	r3, [pc, #156]	; (80186c4 <Logging_options_screen_S5+0xd4>)
 8018626:	781b      	ldrb	r3, [r3, #0]
 8018628:	3301      	adds	r3, #1
 801862a:	b2da      	uxtb	r2, r3
 801862c:	4b25      	ldr	r3, [pc, #148]	; (80186c4 <Logging_options_screen_S5+0xd4>)
 801862e:	701a      	strb	r2, [r3, #0]
 8018630:	e036      	b.n	80186a0 <Logging_options_screen_S5+0xb0>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 8018632:	4b25      	ldr	r3, [pc, #148]	; (80186c8 <Logging_options_screen_S5+0xd8>)
 8018634:	781b      	ldrb	r3, [r3, #0]
 8018636:	2b16      	cmp	r3, #22
 8018638:	d834      	bhi.n	80186a4 <Logging_options_screen_S5+0xb4>
 801863a:	4b23      	ldr	r3, [pc, #140]	; (80186c8 <Logging_options_screen_S5+0xd8>)
 801863c:	781b      	ldrb	r3, [r3, #0]
 801863e:	3301      	adds	r3, #1
 8018640:	b2da      	uxtb	r2, r3
 8018642:	4b21      	ldr	r3, [pc, #132]	; (80186c8 <Logging_options_screen_S5+0xd8>)
 8018644:	701a      	strb	r2, [r3, #0]
 8018646:	e02d      	b.n	80186a4 <Logging_options_screen_S5+0xb4>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 8018648:	4b20      	ldr	r3, [pc, #128]	; (80186cc <Logging_options_screen_S5+0xdc>)
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	2b3a      	cmp	r3, #58	; 0x3a
 801864e:	d82b      	bhi.n	80186a8 <Logging_options_screen_S5+0xb8>
 8018650:	4b1e      	ldr	r3, [pc, #120]	; (80186cc <Logging_options_screen_S5+0xdc>)
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	3301      	adds	r3, #1
 8018656:	b2da      	uxtb	r2, r3
 8018658:	4b1c      	ldr	r3, [pc, #112]	; (80186cc <Logging_options_screen_S5+0xdc>)
 801865a:	701a      	strb	r2, [r3, #0]
 801865c:	e024      	b.n	80186a8 <Logging_options_screen_S5+0xb8>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 801865e:	4b1c      	ldr	r3, [pc, #112]	; (80186d0 <Logging_options_screen_S5+0xe0>)
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	2b3a      	cmp	r3, #58	; 0x3a
 8018664:	d822      	bhi.n	80186ac <Logging_options_screen_S5+0xbc>
 8018666:	4b1a      	ldr	r3, [pc, #104]	; (80186d0 <Logging_options_screen_S5+0xe0>)
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	3301      	adds	r3, #1
 801866c:	b2da      	uxtb	r2, r3
 801866e:	4b18      	ldr	r3, [pc, #96]	; (80186d0 <Logging_options_screen_S5+0xe0>)
 8018670:	701a      	strb	r2, [r3, #0]
 8018672:	e01b      	b.n	80186ac <Logging_options_screen_S5+0xbc>
		case 4: if(logging_period<30)logging_period++; break;
 8018674:	4b17      	ldr	r3, [pc, #92]	; (80186d4 <Logging_options_screen_S5+0xe4>)
 8018676:	781b      	ldrb	r3, [r3, #0]
 8018678:	2b1d      	cmp	r3, #29
 801867a:	d819      	bhi.n	80186b0 <Logging_options_screen_S5+0xc0>
 801867c:	4b15      	ldr	r3, [pc, #84]	; (80186d4 <Logging_options_screen_S5+0xe4>)
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	3301      	adds	r3, #1
 8018682:	b2da      	uxtb	r2, r3
 8018684:	4b13      	ldr	r3, [pc, #76]	; (80186d4 <Logging_options_screen_S5+0xe4>)
 8018686:	701a      	strb	r2, [r3, #0]
 8018688:	e012      	b.n	80186b0 <Logging_options_screen_S5+0xc0>
		case 5: if(logging_len<100)logging_len++; break;
 801868a:	4b13      	ldr	r3, [pc, #76]	; (80186d8 <Logging_options_screen_S5+0xe8>)
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	2b63      	cmp	r3, #99	; 0x63
 8018690:	d810      	bhi.n	80186b4 <Logging_options_screen_S5+0xc4>
 8018692:	4b11      	ldr	r3, [pc, #68]	; (80186d8 <Logging_options_screen_S5+0xe8>)
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	3301      	adds	r3, #1
 8018698:	b2da      	uxtb	r2, r3
 801869a:	4b0f      	ldr	r3, [pc, #60]	; (80186d8 <Logging_options_screen_S5+0xe8>)
 801869c:	701a      	strb	r2, [r3, #0]
 801869e:	e009      	b.n	80186b4 <Logging_options_screen_S5+0xc4>
		case 0: if(logging<1)logging++; break;
 80186a0:	bf00      	nop
 80186a2:	e008      	b.n	80186b6 <Logging_options_screen_S5+0xc6>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 80186a4:	bf00      	nop
 80186a6:	e006      	b.n	80186b6 <Logging_options_screen_S5+0xc6>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 80186a8:	bf00      	nop
 80186aa:	e004      	b.n	80186b6 <Logging_options_screen_S5+0xc6>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 80186ac:	bf00      	nop
 80186ae:	e002      	b.n	80186b6 <Logging_options_screen_S5+0xc6>
		case 4: if(logging_period<30)logging_period++; break;
 80186b0:	bf00      	nop
 80186b2:	e000      	b.n	80186b6 <Logging_options_screen_S5+0xc6>
		case 5: if(logging_len<100)logging_len++; break;
 80186b4:	bf00      	nop
	}
}
 80186b6:	bf00      	nop
 80186b8:	46bd      	mov	sp, r7
 80186ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186be:	4770      	bx	lr
 80186c0:	2000085c 	.word	0x2000085c
 80186c4:	200008b0 	.word	0x200008b0
 80186c8:	200008b1 	.word	0x200008b1
 80186cc:	200008b2 	.word	0x200008b2
 80186d0:	200008b3 	.word	0x200008b3
 80186d4:	200008b4 	.word	0x200008b4
 80186d8:	200008b5 	.word	0x200008b5

080186dc <Menu_GUI>:



void Menu_GUI(uint16_t x_pos, uint16_t y_pos, const unsigned char *menu_string[], uint8_t *str_size,
		uint8_t str_to_str, uint8_t menu_size, uint8_t active_string)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b086      	sub	sp, #24
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	60ba      	str	r2, [r7, #8]
 80186e4:	607b      	str	r3, [r7, #4]
 80186e6:	4603      	mov	r3, r0
 80186e8:	81fb      	strh	r3, [r7, #14]
 80186ea:	460b      	mov	r3, r1
 80186ec:	81bb      	strh	r3, [r7, #12]
	uint8_t i=0;
 80186ee:	2300      	movs	r3, #0
 80186f0:	75fb      	strb	r3, [r7, #23]
	if((old_active_string!=active_string)||(float_menu!=0))
 80186f2:	4b42      	ldr	r3, [pc, #264]	; (80187fc <Menu_GUI+0x120>)
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d104      	bne.n	8018708 <Menu_GUI+0x2c>
 80186fe:	4b40      	ldr	r3, [pc, #256]	; (8018800 <Menu_GUI+0x124>)
 8018700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d075      	beq.n	80187f4 <Menu_GUI+0x118>
	{
		for(i=0;i<menu_size;i++)
 8018708:	2300      	movs	r3, #0
 801870a:	75fb      	strb	r3, [r7, #23]
 801870c:	e063      	b.n	80187d6 <Menu_GUI+0xfa>
		{
			if(active_string==i)
 801870e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018712:	7dfb      	ldrb	r3, [r7, #23]
 8018714:	429a      	cmp	r2, r3
 8018716:	d12d      	bne.n	8018774 <Menu_GUI+0x98>
			{
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018718:	493a      	ldr	r1, [pc, #232]	; (8018804 <Menu_GUI+0x128>)
 801871a:	483b      	ldr	r0, [pc, #236]	; (8018808 <Menu_GUI+0x12c>)
 801871c:	f7fd f99a 	bl	8015a54 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*10))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 8018720:	7dfb      	ldrb	r3, [r7, #23]
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	4413      	add	r3, r2
 8018726:	781b      	ldrb	r3, [r3, #0]
 8018728:	461a      	mov	r2, r3
 801872a:	f06f 0309 	mvn.w	r3, #9
 801872e:	fb03 f302 	mul.w	r3, r3, r2
 8018732:	33f0      	adds	r3, #240	; 0xf0
 8018734:	105b      	asrs	r3, r3, #1
 8018736:	b29a      	uxth	r2, r3
 8018738:	89fb      	ldrh	r3, [r7, #14]
 801873a:	4413      	add	r3, r2
 801873c:	b299      	uxth	r1, r3
 801873e:	7dfb      	ldrb	r3, [r7, #23]
 8018740:	b29a      	uxth	r2, r3
 8018742:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018746:	b29b      	uxth	r3, r3
 8018748:	fb12 f303 	smulbb	r3, r2, r3
 801874c:	b29a      	uxth	r2, r3
 801874e:	89bb      	ldrh	r3, [r7, #12]
 8018750:	4413      	add	r3, r2
 8018752:	b29a      	uxth	r2, r3
 8018754:	4b2a      	ldr	r3, [pc, #168]	; (8018800 <Menu_GUI+0x124>)
 8018756:	f9b3 3000 	ldrsh.w	r3, [r3]
 801875a:	b29b      	uxth	r3, r3
 801875c:	4413      	add	r3, r2
 801875e:	b298      	uxth	r0, r3
 8018760:	7dfb      	ldrb	r3, [r7, #23]
 8018762:	009b      	lsls	r3, r3, #2
 8018764:	68ba      	ldr	r2, [r7, #8]
 8018766:	4413      	add	r3, r2
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	4602      	mov	r2, r0
 801876c:	4826      	ldr	r0, [pc, #152]	; (8018808 <Menu_GUI+0x12c>)
 801876e:	f7fd f8cf 	bl	8015910 <u8g2_DrawUTF8>
 8018772:	e02d      	b.n	80187d0 <Menu_GUI+0xf4>
			}
			else
			{
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8018774:	4925      	ldr	r1, [pc, #148]	; (801880c <Menu_GUI+0x130>)
 8018776:	4824      	ldr	r0, [pc, #144]	; (8018808 <Menu_GUI+0x12c>)
 8018778:	f7fd f96c 	bl	8015a54 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*9))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 801877c:	7dfb      	ldrb	r3, [r7, #23]
 801877e:	687a      	ldr	r2, [r7, #4]
 8018780:	4413      	add	r3, r2
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	461a      	mov	r2, r3
 8018786:	4613      	mov	r3, r2
 8018788:	075b      	lsls	r3, r3, #29
 801878a:	1a9b      	subs	r3, r3, r2
 801878c:	00db      	lsls	r3, r3, #3
 801878e:	1a9b      	subs	r3, r3, r2
 8018790:	33f0      	adds	r3, #240	; 0xf0
 8018792:	105b      	asrs	r3, r3, #1
 8018794:	b29a      	uxth	r2, r3
 8018796:	89fb      	ldrh	r3, [r7, #14]
 8018798:	4413      	add	r3, r2
 801879a:	b299      	uxth	r1, r3
 801879c:	7dfb      	ldrb	r3, [r7, #23]
 801879e:	b29a      	uxth	r2, r3
 80187a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	fb12 f303 	smulbb	r3, r2, r3
 80187aa:	b29a      	uxth	r2, r3
 80187ac:	89bb      	ldrh	r3, [r7, #12]
 80187ae:	4413      	add	r3, r2
 80187b0:	b29a      	uxth	r2, r3
 80187b2:	4b13      	ldr	r3, [pc, #76]	; (8018800 <Menu_GUI+0x124>)
 80187b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	4413      	add	r3, r2
 80187bc:	b298      	uxth	r0, r3
 80187be:	7dfb      	ldrb	r3, [r7, #23]
 80187c0:	009b      	lsls	r3, r3, #2
 80187c2:	68ba      	ldr	r2, [r7, #8]
 80187c4:	4413      	add	r3, r2
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	4602      	mov	r2, r0
 80187ca:	480f      	ldr	r0, [pc, #60]	; (8018808 <Menu_GUI+0x12c>)
 80187cc:	f7fd f8a0 	bl	8015910 <u8g2_DrawUTF8>
		for(i=0;i<menu_size;i++)
 80187d0:	7dfb      	ldrb	r3, [r7, #23]
 80187d2:	3301      	adds	r3, #1
 80187d4:	75fb      	strb	r3, [r7, #23]
 80187d6:	7dfa      	ldrb	r2, [r7, #23]
 80187d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80187dc:	429a      	cmp	r2, r3
 80187de:	d396      	bcc.n	801870e <Menu_GUI+0x32>
			}
		}
		old_active_string=active_string;
 80187e0:	4a06      	ldr	r2, [pc, #24]	; (80187fc <Menu_GUI+0x120>)
 80187e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80187e6:	7013      	strb	r3, [r2, #0]

		// Рисуем
		u8g2_SendBuffer(&u8g2);
 80187e8:	4807      	ldr	r0, [pc, #28]	; (8018808 <Menu_GUI+0x12c>)
 80187ea:	f7fc faf6 	bl	8014dda <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 80187ee:	4806      	ldr	r0, [pc, #24]	; (8018808 <Menu_GUI+0x12c>)
 80187f0:	f7fc fa80 	bl	8014cf4 <u8g2_ClearBuffer>
	}
}
 80187f4:	bf00      	nop
 80187f6:	3718      	adds	r7, #24
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}
 80187fc:	200003a0 	.word	0x200003a0
 8018800:	20001c52 	.word	0x20001c52
 8018804:	080271c4 	.word	0x080271c4
 8018808:	20001fcc 	.word	0x20001fcc
 801880c:	08025b98 	.word	0x08025b98

08018810 <Parameter_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Parameter_screen_func(void)
{ Menu_GUI(0, 40, menu_parameter, menu_parameter_size, 17, Menu_parameter_num, Menu_num); }
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af04      	add	r7, sp, #16
 8018816:	4b08      	ldr	r3, [pc, #32]	; (8018838 <Parameter_screen_func+0x28>)
 8018818:	781b      	ldrb	r3, [r3, #0]
 801881a:	9302      	str	r3, [sp, #8]
 801881c:	2307      	movs	r3, #7
 801881e:	9301      	str	r3, [sp, #4]
 8018820:	2311      	movs	r3, #17
 8018822:	9300      	str	r3, [sp, #0]
 8018824:	4b05      	ldr	r3, [pc, #20]	; (801883c <Parameter_screen_func+0x2c>)
 8018826:	4a06      	ldr	r2, [pc, #24]	; (8018840 <Parameter_screen_func+0x30>)
 8018828:	2128      	movs	r1, #40	; 0x28
 801882a:	2000      	movs	r0, #0
 801882c:	f7ff ff56 	bl	80186dc <Menu_GUI>
 8018830:	bf00      	nop
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
 8018836:	bf00      	nop
 8018838:	200003a1 	.word	0x200003a1
 801883c:	08029650 	.word	0x08029650
 8018840:	200003c8 	.word	0x200003c8

08018844 <Parameter_screen_S9>:



// MENU
void Parameter_screen_S9(void)
{
 8018844:	b480      	push	{r7}
 8018846:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8018848:	4b06      	ldr	r3, [pc, #24]	; (8018864 <Parameter_screen_S9+0x20>)
 801884a:	2204      	movs	r2, #4
 801884c:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801884e:	4b06      	ldr	r3, [pc, #24]	; (8018868 <Parameter_screen_S9+0x24>)
 8018850:	22ff      	movs	r2, #255	; 0xff
 8018852:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 8018854:	4b05      	ldr	r3, [pc, #20]	; (801886c <Parameter_screen_S9+0x28>)
 8018856:	2202      	movs	r2, #2
 8018858:	701a      	strb	r2, [r3, #0]
}
 801885a:	bf00      	nop
 801885c:	46bd      	mov	sp, r7
 801885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018862:	4770      	bx	lr
 8018864:	2000004c 	.word	0x2000004c
 8018868:	200003a0 	.word	0x200003a0
 801886c:	200003a1 	.word	0x200003a1

08018870 <Parameter_screen_S4>:


// ENTER
void Parameter_screen_S4(void)
{
 8018870:	b480      	push	{r7}
 8018872:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018874:	4b1c      	ldr	r3, [pc, #112]	; (80188e8 <Parameter_screen_S4+0x78>)
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	2b06      	cmp	r3, #6
 801887a:	d82d      	bhi.n	80188d8 <Parameter_screen_S4+0x68>
 801887c:	a201      	add	r2, pc, #4	; (adr r2, 8018884 <Parameter_screen_S4+0x14>)
 801887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018882:	bf00      	nop
 8018884:	080188a1 	.word	0x080188a1
 8018888:	080188d9 	.word	0x080188d9
 801888c:	080188af 	.word	0x080188af
 8018890:	080188bd 	.word	0x080188bd
 8018894:	080188d9 	.word	0x080188d9
 8018898:	080188cb 	.word	0x080188cb
 801889c:	080188d9 	.word	0x080188d9
	{
		// ДИСПЛЕЙ
		case 0: screen=Display_options_screen; old_active_string=0xFF; break;
 80188a0:	4b12      	ldr	r3, [pc, #72]	; (80188ec <Parameter_screen_S4+0x7c>)
 80188a2:	2205      	movs	r2, #5
 80188a4:	701a      	strb	r2, [r3, #0]
 80188a6:	4b12      	ldr	r3, [pc, #72]	; (80188f0 <Parameter_screen_S4+0x80>)
 80188a8:	22ff      	movs	r2, #255	; 0xff
 80188aa:	701a      	strb	r2, [r3, #0]
 80188ac:	e014      	b.n	80188d8 <Parameter_screen_S4+0x68>
		// ГРОМКОСТЬ
		case 1:
		break;
		// ДАТА И ВРЕМЯ
		case 2: screen=RTC_screen; old_active_string=0xFF; break;
 80188ae:	4b0f      	ldr	r3, [pc, #60]	; (80188ec <Parameter_screen_S4+0x7c>)
 80188b0:	2209      	movs	r2, #9
 80188b2:	701a      	strb	r2, [r3, #0]
 80188b4:	4b0e      	ldr	r3, [pc, #56]	; (80188f0 <Parameter_screen_S4+0x80>)
 80188b6:	22ff      	movs	r2, #255	; 0xff
 80188b8:	701a      	strb	r2, [r3, #0]
 80188ba:	e00d      	b.n	80188d8 <Parameter_screen_S4+0x68>
		// АВТООТКЛЮЧЕНИЕ
		case 3: screen=Auto_Off_option_screen; old_active_string=0xFF; break;
 80188bc:	4b0b      	ldr	r3, [pc, #44]	; (80188ec <Parameter_screen_S4+0x7c>)
 80188be:	220a      	movs	r2, #10
 80188c0:	701a      	strb	r2, [r3, #0]
 80188c2:	4b0b      	ldr	r3, [pc, #44]	; (80188f0 <Parameter_screen_S4+0x80>)
 80188c4:	22ff      	movs	r2, #255	; 0xff
 80188c6:	701a      	strb	r2, [r3, #0]
 80188c8:	e006      	b.n	80188d8 <Parameter_screen_S4+0x68>
		// НАСТРОЙКА ПОДКЛЮЧЕНИЯ
		case 4: break;
		// НАСТРОЙКА АЦП
		case 5: screen=ADC_options_screen; old_active_string=0xFF; break;
 80188ca:	4b08      	ldr	r3, [pc, #32]	; (80188ec <Parameter_screen_S4+0x7c>)
 80188cc:	2206      	movs	r2, #6
 80188ce:	701a      	strb	r2, [r3, #0]
 80188d0:	4b07      	ldr	r3, [pc, #28]	; (80188f0 <Parameter_screen_S4+0x80>)
 80188d2:	22ff      	movs	r2, #255	; 0xff
 80188d4:	701a      	strb	r2, [r3, #0]
 80188d6:	bf00      	nop
		// РЕЧЕВОЕ ИНФОРМИРОВАНИЕ
		case 6: break;
	}
	edit_param=0;
 80188d8:	4b06      	ldr	r3, [pc, #24]	; (80188f4 <Parameter_screen_S4+0x84>)
 80188da:	2200      	movs	r2, #0
 80188dc:	701a      	strb	r2, [r3, #0]
}
 80188de:	bf00      	nop
 80188e0:	46bd      	mov	sp, r7
 80188e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e6:	4770      	bx	lr
 80188e8:	200003a1 	.word	0x200003a1
 80188ec:	2000004c 	.word	0x2000004c
 80188f0:	200003a0 	.word	0x200003a0
 80188f4:	2000085c 	.word	0x2000085c

080188f8 <Parameter_screen_S7>:

// DOWN
void Parameter_screen_S7(void)
{
 80188f8:	b480      	push	{r7}
 80188fa:	af00      	add	r7, sp, #0
		if(Menu_num>0)
 80188fc:	4b09      	ldr	r3, [pc, #36]	; (8018924 <Parameter_screen_S7+0x2c>)
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d006      	beq.n	8018912 <Parameter_screen_S7+0x1a>
		{
			Menu_num--;
 8018904:	4b07      	ldr	r3, [pc, #28]	; (8018924 <Parameter_screen_S7+0x2c>)
 8018906:	781b      	ldrb	r3, [r3, #0]
 8018908:	3b01      	subs	r3, #1
 801890a:	b2da      	uxtb	r2, r3
 801890c:	4b05      	ldr	r3, [pc, #20]	; (8018924 <Parameter_screen_S7+0x2c>)
 801890e:	701a      	strb	r2, [r3, #0]
			//float_menu=-2;
		}
		else Menu_num=Menu_parameter_num-1;
}
 8018910:	e002      	b.n	8018918 <Parameter_screen_S7+0x20>
		else Menu_num=Menu_parameter_num-1;
 8018912:	4b04      	ldr	r3, [pc, #16]	; (8018924 <Parameter_screen_S7+0x2c>)
 8018914:	2206      	movs	r2, #6
 8018916:	701a      	strb	r2, [r3, #0]
}
 8018918:	bf00      	nop
 801891a:	46bd      	mov	sp, r7
 801891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018920:	4770      	bx	lr
 8018922:	bf00      	nop
 8018924:	200003a1 	.word	0x200003a1

08018928 <Parameter_screen_S6>:

// UP
void Parameter_screen_S6(void)
{
 8018928:	b480      	push	{r7}
 801892a:	af00      	add	r7, sp, #0
		if(Menu_num<(Menu_parameter_num-1))
 801892c:	4b09      	ldr	r3, [pc, #36]	; (8018954 <Parameter_screen_S6+0x2c>)
 801892e:	781b      	ldrb	r3, [r3, #0]
 8018930:	2b05      	cmp	r3, #5
 8018932:	d806      	bhi.n	8018942 <Parameter_screen_S6+0x1a>
		{
			Menu_num++;
 8018934:	4b07      	ldr	r3, [pc, #28]	; (8018954 <Parameter_screen_S6+0x2c>)
 8018936:	781b      	ldrb	r3, [r3, #0]
 8018938:	3301      	adds	r3, #1
 801893a:	b2da      	uxtb	r2, r3
 801893c:	4b05      	ldr	r3, [pc, #20]	; (8018954 <Parameter_screen_S6+0x2c>)
 801893e:	701a      	strb	r2, [r3, #0]
			//float_menu=2;
		}
		else Menu_num=0;
}
 8018940:	e002      	b.n	8018948 <Parameter_screen_S6+0x20>
		else Menu_num=0;
 8018942:	4b04      	ldr	r3, [pc, #16]	; (8018954 <Parameter_screen_S6+0x2c>)
 8018944:	2200      	movs	r2, #0
 8018946:	701a      	strb	r2, [r3, #0]
}
 8018948:	bf00      	nop
 801894a:	46bd      	mov	sp, r7
 801894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018950:	4770      	bx	lr
 8018952:	bf00      	nop
 8018954:	200003a1 	.word	0x200003a1

08018958 <Option_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Option_screen_func(void)
{ Menu_GUI(0, 16, menu_option, menu_option_size, 17, Menu_option_num, Menu_num); }
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af04      	add	r7, sp, #16
 801895e:	4b08      	ldr	r3, [pc, #32]	; (8018980 <Option_screen_func+0x28>)
 8018960:	781b      	ldrb	r3, [r3, #0]
 8018962:	9302      	str	r3, [sp, #8]
 8018964:	2309      	movs	r3, #9
 8018966:	9301      	str	r3, [sp, #4]
 8018968:	2311      	movs	r3, #17
 801896a:	9300      	str	r3, [sp, #0]
 801896c:	4b05      	ldr	r3, [pc, #20]	; (8018984 <Option_screen_func+0x2c>)
 801896e:	4a06      	ldr	r2, [pc, #24]	; (8018988 <Option_screen_func+0x30>)
 8018970:	2110      	movs	r1, #16
 8018972:	2000      	movs	r0, #0
 8018974:	f7ff feb2 	bl	80186dc <Menu_GUI>
 8018978:	bf00      	nop
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}
 801897e:	bf00      	nop
 8018980:	200003a1 	.word	0x200003a1
 8018984:	08029578 	.word	0x08029578
 8018988:	200003a4 	.word	0x200003a4

0801898c <Option_screen_S9>:


// MENU
void Option_screen_S9(void)
{
 801898c:	b480      	push	{r7}
 801898e:	af00      	add	r7, sp, #0
		screen=Main_screen;
 8018990:	4b05      	ldr	r3, [pc, #20]	; (80189a8 <Option_screen_S9+0x1c>)
 8018992:	2201      	movs	r2, #1
 8018994:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8018996:	4b05      	ldr	r3, [pc, #20]	; (80189ac <Option_screen_S9+0x20>)
 8018998:	22ff      	movs	r2, #255	; 0xff
 801899a:	701a      	strb	r2, [r3, #0]
}
 801899c:	bf00      	nop
 801899e:	46bd      	mov	sp, r7
 80189a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a4:	4770      	bx	lr
 80189a6:	bf00      	nop
 80189a8:	2000004c 	.word	0x2000004c
 80189ac:	200003a0 	.word	0x200003a0

080189b0 <Option_screen_S7>:

// DOWN
void Option_screen_S7(void)
{
 80189b0:	b480      	push	{r7}
 80189b2:	af00      	add	r7, sp, #0
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 80189b4:	4b09      	ldr	r3, [pc, #36]	; (80189dc <Option_screen_S7+0x2c>)
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d006      	beq.n	80189ca <Option_screen_S7+0x1a>
 80189bc:	4b07      	ldr	r3, [pc, #28]	; (80189dc <Option_screen_S7+0x2c>)
 80189be:	781b      	ldrb	r3, [r3, #0]
 80189c0:	3b01      	subs	r3, #1
 80189c2:	b2da      	uxtb	r2, r3
 80189c4:	4b05      	ldr	r3, [pc, #20]	; (80189dc <Option_screen_S7+0x2c>)
 80189c6:	701a      	strb	r2, [r3, #0]
}
 80189c8:	e002      	b.n	80189d0 <Option_screen_S7+0x20>
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 80189ca:	4b04      	ldr	r3, [pc, #16]	; (80189dc <Option_screen_S7+0x2c>)
 80189cc:	2208      	movs	r2, #8
 80189ce:	701a      	strb	r2, [r3, #0]
}
 80189d0:	bf00      	nop
 80189d2:	46bd      	mov	sp, r7
 80189d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d8:	4770      	bx	lr
 80189da:	bf00      	nop
 80189dc:	200003a1 	.word	0x200003a1

080189e0 <Option_screen_S6>:

// UP
void Option_screen_S6(void)
{
 80189e0:	b480      	push	{r7}
 80189e2:	af00      	add	r7, sp, #0
		if(++Menu_num==Menu_option_num)Menu_num=0;
 80189e4:	4b08      	ldr	r3, [pc, #32]	; (8018a08 <Option_screen_S6+0x28>)
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	3301      	adds	r3, #1
 80189ea:	b2da      	uxtb	r2, r3
 80189ec:	4b06      	ldr	r3, [pc, #24]	; (8018a08 <Option_screen_S6+0x28>)
 80189ee:	701a      	strb	r2, [r3, #0]
 80189f0:	4b05      	ldr	r3, [pc, #20]	; (8018a08 <Option_screen_S6+0x28>)
 80189f2:	781b      	ldrb	r3, [r3, #0]
 80189f4:	2b09      	cmp	r3, #9
 80189f6:	d102      	bne.n	80189fe <Option_screen_S6+0x1e>
 80189f8:	4b03      	ldr	r3, [pc, #12]	; (8018a08 <Option_screen_S6+0x28>)
 80189fa:	2200      	movs	r2, #0
 80189fc:	701a      	strb	r2, [r3, #0]
}
 80189fe:	bf00      	nop
 8018a00:	46bd      	mov	sp, r7
 8018a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a06:	4770      	bx	lr
 8018a08:	200003a1 	.word	0x200003a1

08018a0c <Option_screen_S4>:

// ENTER
void Option_screen_S4(void)
{
 8018a0c:	b480      	push	{r7}
 8018a0e:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018a10:	4b1b      	ldr	r3, [pc, #108]	; (8018a80 <Option_screen_S4+0x74>)
 8018a12:	781b      	ldrb	r3, [r3, #0]
 8018a14:	2b08      	cmp	r3, #8
 8018a16:	d825      	bhi.n	8018a64 <Option_screen_S4+0x58>
 8018a18:	a201      	add	r2, pc, #4	; (adr r2, 8018a20 <Option_screen_S4+0x14>)
 8018a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a1e:	bf00      	nop
 8018a20:	08018a45 	.word	0x08018a45
 8018a24:	08018a65 	.word	0x08018a65
 8018a28:	08018a4d 	.word	0x08018a4d
 8018a2c:	08018a55 	.word	0x08018a55
 8018a30:	08018a65 	.word	0x08018a65
 8018a34:	08018a5d 	.word	0x08018a5d
 8018a38:	08018a65 	.word	0x08018a65
 8018a3c:	08018a65 	.word	0x08018a65
 8018a40:	08018a65 	.word	0x08018a65
	{
		// ИЗМЕРЕНИЕ
		case 0: screen=Measure_options_screen; break;
 8018a44:	4b0f      	ldr	r3, [pc, #60]	; (8018a84 <Option_screen_S4+0x78>)
 8018a46:	2207      	movs	r2, #7
 8018a48:	701a      	strb	r2, [r3, #0]
 8018a4a:	e00b      	b.n	8018a64 <Option_screen_S4+0x58>
		// 24 ВОЛЬТА
		case 1: break;
		// ПАРАМЕТРЫ
		case 2: screen=Parameter_screen; break;
 8018a4c:	4b0d      	ldr	r3, [pc, #52]	; (8018a84 <Option_screen_S4+0x78>)
 8018a4e:	2208      	movs	r2, #8
 8018a50:	701a      	strb	r2, [r3, #0]
 8018a52:	e007      	b.n	8018a64 <Option_screen_S4+0x58>
		// О ПРИБОРЕ
		case 3: screen=About_options_screen; break;
 8018a54:	4b0b      	ldr	r3, [pc, #44]	; (8018a84 <Option_screen_S4+0x78>)
 8018a56:	220b      	movs	r2, #11
 8018a58:	701a      	strb	r2, [r3, #0]
 8018a5a:	e003      	b.n	8018a64 <Option_screen_S4+0x58>
		// КАЛИБРОВКА
		case 4: break;
		// ЛОГГИРОВАНИЕ
		case 5: screen=Logging_options_screen; break;
 8018a5c:	4b09      	ldr	r3, [pc, #36]	; (8018a84 <Option_screen_S4+0x78>)
 8018a5e:	220c      	movs	r2, #12
 8018a60:	701a      	strb	r2, [r3, #0]
 8018a62:	bf00      	nop
		// ТЕХ ПАРАМЕТРЫ
		case 7: break;
		// СЕРВИСНОЕ МЕНЮ
		case 8: break;
	}
	Menu_num=0;
 8018a64:	4b06      	ldr	r3, [pc, #24]	; (8018a80 <Option_screen_S4+0x74>)
 8018a66:	2200      	movs	r2, #0
 8018a68:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018a6a:	4b07      	ldr	r3, [pc, #28]	; (8018a88 <Option_screen_S4+0x7c>)
 8018a6c:	22ff      	movs	r2, #255	; 0xff
 8018a6e:	701a      	strb	r2, [r3, #0]
	edit_param=0;
 8018a70:	4b06      	ldr	r3, [pc, #24]	; (8018a8c <Option_screen_S4+0x80>)
 8018a72:	2200      	movs	r2, #0
 8018a74:	701a      	strb	r2, [r3, #0]
}
 8018a76:	bf00      	nop
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7e:	4770      	bx	lr
 8018a80:	200003a1 	.word	0x200003a1
 8018a84:	2000004c 	.word	0x2000004c
 8018a88:	200003a0 	.word	0x200003a0
 8018a8c:	2000085c 	.word	0x2000085c

08018a90 <menu_timer>:
//
//------------------------------------------------------------------------------------------------------------------

uint8_t menu_delay = 0;
void menu_timer(void)
{
 8018a90:	b480      	push	{r7}
 8018a92:	af00      	add	r7, sp, #0
	if(++menu_delay==25)
 8018a94:	4b16      	ldr	r3, [pc, #88]	; (8018af0 <menu_timer+0x60>)
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	3301      	adds	r3, #1
 8018a9a:	b2da      	uxtb	r2, r3
 8018a9c:	4b14      	ldr	r3, [pc, #80]	; (8018af0 <menu_timer+0x60>)
 8018a9e:	701a      	strb	r2, [r3, #0]
 8018aa0:	4b13      	ldr	r3, [pc, #76]	; (8018af0 <menu_timer+0x60>)
 8018aa2:	781b      	ldrb	r3, [r3, #0]
 8018aa4:	2b19      	cmp	r3, #25
 8018aa6:	d11e      	bne.n	8018ae6 <menu_timer+0x56>
	{
		if(float_menu>0)float_menu--;
 8018aa8:	4b12      	ldr	r3, [pc, #72]	; (8018af4 <menu_timer+0x64>)
 8018aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	dd08      	ble.n	8018ac4 <menu_timer+0x34>
 8018ab2:	4b10      	ldr	r3, [pc, #64]	; (8018af4 <menu_timer+0x64>)
 8018ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ab8:	b29b      	uxth	r3, r3
 8018aba:	3b01      	subs	r3, #1
 8018abc:	b29b      	uxth	r3, r3
 8018abe:	b21a      	sxth	r2, r3
 8018ac0:	4b0c      	ldr	r3, [pc, #48]	; (8018af4 <menu_timer+0x64>)
 8018ac2:	801a      	strh	r2, [r3, #0]
		if(float_menu<0)float_menu++;
 8018ac4:	4b0b      	ldr	r3, [pc, #44]	; (8018af4 <menu_timer+0x64>)
 8018ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	da08      	bge.n	8018ae0 <menu_timer+0x50>
 8018ace:	4b09      	ldr	r3, [pc, #36]	; (8018af4 <menu_timer+0x64>)
 8018ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	3301      	adds	r3, #1
 8018ad8:	b29b      	uxth	r3, r3
 8018ada:	b21a      	sxth	r2, r3
 8018adc:	4b05      	ldr	r3, [pc, #20]	; (8018af4 <menu_timer+0x64>)
 8018ade:	801a      	strh	r2, [r3, #0]
		menu_delay=0;
 8018ae0:	4b03      	ldr	r3, [pc, #12]	; (8018af0 <menu_timer+0x60>)
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	701a      	strb	r2, [r3, #0]
	}
}
 8018ae6:	bf00      	nop
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aee:	4770      	bx	lr
 8018af0:	20001c54 	.word	0x20001c54
 8018af4:	20001c52 	.word	0x20001c52

08018af8 <MX_USB_DEVICE_Init>:




void MX_USB_DEVICE_Init(void)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8018afc:	2200      	movs	r2, #0
 8018afe:	490a      	ldr	r1, [pc, #40]	; (8018b28 <MX_USB_DEVICE_Init+0x30>)
 8018b00:	480a      	ldr	r0, [pc, #40]	; (8018b2c <MX_USB_DEVICE_Init+0x34>)
 8018b02:	f001 f965 	bl	8019dd0 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC_CDC);
 8018b06:	490a      	ldr	r1, [pc, #40]	; (8018b30 <MX_USB_DEVICE_Init+0x38>)
 8018b08:	4808      	ldr	r0, [pc, #32]	; (8018b2c <MX_USB_DEVICE_Init+0x34>)
 8018b0a:	f001 f995 	bl	8019e38 <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8018b0e:	4909      	ldr	r1, [pc, #36]	; (8018b34 <MX_USB_DEVICE_Init+0x3c>)
 8018b10:	4806      	ldr	r0, [pc, #24]	; (8018b2c <MX_USB_DEVICE_Init+0x34>)
 8018b12:	f000 fb3c 	bl	801918e <USBD_CDC_RegisterInterface>
	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8018b16:	4908      	ldr	r1, [pc, #32]	; (8018b38 <MX_USB_DEVICE_Init+0x40>)
 8018b18:	4804      	ldr	r0, [pc, #16]	; (8018b2c <MX_USB_DEVICE_Init+0x34>)
 8018b1a:	f002 fd9d 	bl	801b658 <USBD_MSC_RegisterStorage>
	USBD_Start(&hUsbDeviceFS);
 8018b1e:	4803      	ldr	r0, [pc, #12]	; (8018b2c <MX_USB_DEVICE_Init+0x34>)
 8018b20:	f001 f9b1 	bl	8019e86 <USBD_Start>
}
 8018b24:	bf00      	nop
 8018b26:	bd80      	pop	{r7, pc}
 8018b28:	20000568 	.word	0x20000568
 8018b2c:	20008758 	.word	0x20008758
 8018b30:	200003e4 	.word	0x200003e4
 8018b34:	20000554 	.word	0x20000554
 8018b38:	2000060c 	.word	0x2000060c

08018b3c <USBD_MSC_CDC_GetDeviceQualifierDescriptor>:
};



uint8_t *USBD_MSC_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018b3c:	b480      	push	{r7}
 8018b3e:	b083      	sub	sp, #12
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_DeviceQualifierDesc);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	220a      	movs	r2, #10
 8018b48:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_DeviceQualifierDesc;
 8018b4a:	4b03      	ldr	r3, [pc, #12]	; (8018b58 <USBD_MSC_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	370c      	adds	r7, #12
 8018b50:	46bd      	mov	sp, r7
 8018b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b56:	4770      	bx	lr
 8018b58:	20000548 	.word	0x20000548

08018b5c <USBD_MSC_CDC_GetOtherSpeedCfgDesc>:


uint8_t *USBD_MSC_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	b083      	sub	sp, #12
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_OtherSpeedCfgDesc);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2262      	movs	r2, #98	; 0x62
 8018b68:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_OtherSpeedCfgDesc;
 8018b6a:	4b03      	ldr	r3, [pc, #12]	; (8018b78 <USBD_MSC_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	370c      	adds	r7, #12
 8018b70:	46bd      	mov	sp, r7
 8018b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b76:	4770      	bx	lr
 8018b78:	200004e4 	.word	0x200004e4

08018b7c <USBD_MSC_CDC_GetHSCfgDesc>:

uint8_t *USBD_MSC_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018b7c:	b480      	push	{r7}
 8018b7e:	b083      	sub	sp, #12
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgHSDesc);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	2262      	movs	r2, #98	; 0x62
 8018b88:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgHSDesc;
 8018b8a:	4b03      	ldr	r3, [pc, #12]	; (8018b98 <USBD_MSC_CDC_GetHSCfgDesc+0x1c>)
}
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	370c      	adds	r7, #12
 8018b90:	46bd      	mov	sp, r7
 8018b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b96:	4770      	bx	lr
 8018b98:	2000041c 	.word	0x2000041c

08018b9c <USBD_MSC_CDC_GetFSCfgDesc>:


uint8_t *USBD_MSC_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018b9c:	b480      	push	{r7}
 8018b9e:	b083      	sub	sp, #12
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgFSDesc);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	2262      	movs	r2, #98	; 0x62
 8018ba8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgFSDesc;
 8018baa:	4b03      	ldr	r3, [pc, #12]	; (8018bb8 <USBD_MSC_CDC_GetFSCfgDesc+0x1c>)
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	370c      	adds	r7, #12
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb6:	4770      	bx	lr
 8018bb8:	20000480 	.word	0x20000480

08018bbc <USBD_MSC_CDC_Init>:


// Инициализация композитного устройства
static uint8_t  USBD_MSC_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b084      	sub	sp, #16
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
 8018bc4:	460b      	mov	r3, r1
 8018bc6:	70fb      	strb	r3, [r7, #3]
	/* MSC initialization */
	uint8_t ret = USBD_MSC_Init (pdev, cfgidx);
 8018bc8:	78fb      	ldrb	r3, [r7, #3]
 8018bca:	4619      	mov	r1, r3
 8018bcc:	6878      	ldr	r0, [r7, #4]
 8018bce:	f002 fbb8 	bl	801b342 <USBD_MSC_Init>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018bd6:	7bfb      	ldrb	r3, [r7, #15]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d001      	beq.n	8018be0 <USBD_MSC_CDC_Init+0x24>
			return ret;
 8018bdc:	7bfb      	ldrb	r3, [r7, #15]
 8018bde:	e00c      	b.n	8018bfa <USBD_MSC_CDC_Init+0x3e>

	/* CDC initialization */
	ret = USBD_CDC_Init (pdev, cfgidx);
 8018be0:	78fb      	ldrb	r3, [r7, #3]
 8018be2:	4619      	mov	r1, r3
 8018be4:	6878      	ldr	r0, [r7, #4]
 8018be6:	f000 f88b 	bl	8018d00 <USBD_CDC_Init>
 8018bea:	4603      	mov	r3, r0
 8018bec:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018bee:	7bfb      	ldrb	r3, [r7, #15]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d001      	beq.n	8018bf8 <USBD_MSC_CDC_Init+0x3c>
			return ret;
 8018bf4:	7bfb      	ldrb	r3, [r7, #15]
 8018bf6:	e000      	b.n	8018bfa <USBD_MSC_CDC_Init+0x3e>

	return USBD_OK;
 8018bf8:	2300      	movs	r3, #0
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3710      	adds	r7, #16
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	bd80      	pop	{r7, pc}

08018c02 <USBD_MSC_CDC_DeInit>:


// Деинициализация композитного устройства
static uint8_t  USBD_MSC_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018c02:	b580      	push	{r7, lr}
 8018c04:	b082      	sub	sp, #8
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	6078      	str	r0, [r7, #4]
 8018c0a:	460b      	mov	r3, r1
 8018c0c:	70fb      	strb	r3, [r7, #3]
       	/* MSC De-initialization */
       	USBD_MSC_DeInit(pdev, cfgidx);
 8018c0e:	78fb      	ldrb	r3, [r7, #3]
 8018c10:	4619      	mov	r1, r3
 8018c12:	6878      	ldr	r0, [r7, #4]
 8018c14:	f002 fbe2 	bl	801b3dc <USBD_MSC_DeInit>

       	/* CDC De-initialization */
       	USBD_CDC_DeInit(pdev, cfgidx);
 8018c18:	78fb      	ldrb	r3, [r7, #3]
 8018c1a:	4619      	mov	r1, r3
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f000 f8ed 	bl	8018dfc <USBD_CDC_DeInit>

       	return USBD_OK;
 8018c22:	2300      	movs	r3, #0
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	3708      	adds	r7, #8
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <USBD_MSC_CDC_Setup>:



// Setup для композитного устройства
static uint8_t  USBD_MSC_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
	// Route requests to MSC interface or its endpoints to MSC class implementaion
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	781b      	ldrb	r3, [r3, #0]
 8018c3a:	f003 0303 	and.w	r3, r3, #3
 8018c3e:	2b01      	cmp	r3, #1
 8018c40:	d103      	bne.n	8018c4a <USBD_MSC_CDC_Setup+0x1e>
 8018c42:	683b      	ldr	r3, [r7, #0]
 8018c44:	889b      	ldrh	r3, [r3, #4]
 8018c46:	2b01      	cmp	r3, #1
 8018c48:	d00b      	beq.n	8018c62 <USBD_MSC_CDC_Setup+0x36>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018c4a:	683b      	ldr	r3, [r7, #0]
 8018c4c:	781b      	ldrb	r3, [r3, #0]
 8018c4e:	f003 0303 	and.w	r3, r3, #3
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018c52:	2b02      	cmp	r3, #2
 8018c54:	d10b      	bne.n	8018c6e <USBD_MSC_CDC_Setup+0x42>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	889b      	ldrh	r3, [r3, #4]
 8018c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c5e:	2b01      	cmp	r3, #1
 8018c60:	d105      	bne.n	8018c6e <USBD_MSC_CDC_Setup+0x42>
	{
		return USBD_MSC_Setup(pdev, req);
 8018c62:	6839      	ldr	r1, [r7, #0]
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f002 fbe5 	bl	801b434 <USBD_MSC_Setup>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	e004      	b.n	8018c78 <USBD_MSC_CDC_Setup+0x4c>
	}

	return USBD_CDC_Setup(pdev, req);
 8018c6e:	6839      	ldr	r1, [r7, #0]
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f000 f8ff 	bl	8018e74 <USBD_CDC_Setup>
 8018c76:	4603      	mov	r3, r0
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3708      	adds	r7, #8
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <USBD_MSC_CDC_DataIn>:


// Data IN для композитного устройства
static uint8_t  USBD_MSC_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b082      	sub	sp, #8
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	460b      	mov	r3, r1
 8018c8a:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018c8c:	78fb      	ldrb	r3, [r7, #3]
 8018c8e:	2b01      	cmp	r3, #1
 8018c90:	d106      	bne.n	8018ca0 <USBD_MSC_CDC_DataIn+0x20>
		return USBD_MSC_DataIn(pdev, epnum);
 8018c92:	78fb      	ldrb	r3, [r7, #3]
 8018c94:	4619      	mov	r1, r3
 8018c96:	6878      	ldr	r0, [r7, #4]
 8018c98:	f002 fcbe 	bl	801b618 <USBD_MSC_DataIn>
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	e005      	b.n	8018cac <USBD_MSC_CDC_DataIn+0x2c>

	return USBD_CDC_DataIn(pdev, epnum);
 8018ca0:	78fb      	ldrb	r3, [r7, #3]
 8018ca2:	4619      	mov	r1, r3
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f000 f9b3 	bl	8019010 <USBD_CDC_DataIn>
 8018caa:	4603      	mov	r3, r0
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3708      	adds	r7, #8
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}

08018cb4 <USBD_MSC_CDC_DataOut>:


// Data OUT для композитного устройства
static uint8_t  USBD_MSC_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b082      	sub	sp, #8
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
 8018cbc:	460b      	mov	r3, r1
 8018cbe:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018cc0:	78fb      	ldrb	r3, [r7, #3]
 8018cc2:	2b01      	cmp	r3, #1
 8018cc4:	d106      	bne.n	8018cd4 <USBD_MSC_CDC_DataOut+0x20>
		return USBD_MSC_DataOut(pdev, epnum);
 8018cc6:	78fb      	ldrb	r3, [r7, #3]
 8018cc8:	4619      	mov	r1, r3
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	f002 fcb4 	bl	801b638 <USBD_MSC_DataOut>
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	e005      	b.n	8018ce0 <USBD_MSC_CDC_DataOut+0x2c>

	return USBD_CDC_DataOut(pdev, epnum);
 8018cd4:	78fb      	ldrb	r3, [r7, #3]
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 f9fe 	bl	80190da <USBD_CDC_DataOut>
 8018cde:	4603      	mov	r3, r0
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <USBD_MSC_CDC_EP0_RxReady>:


// Обработчик приема EP0
static uint8_t  USBD_MSC_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b082      	sub	sp, #8
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
    	return USBD_CDC_EP0_RxReady(pdev);
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f000 fa1d 	bl	8019130 <USBD_CDC_EP0_RxReady>
 8018cf6:	4603      	mov	r3, r0
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3708      	adds	r7, #8
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}

08018d00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b084      	sub	sp, #16
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
 8018d08:	460b      	mov	r3, r1
 8018d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hcdc;


  hcdc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 8018d0c:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8018d10:	f001 f840 	bl	8019d94 <USBD_static_malloc>
 8018d14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d105      	bne.n	8018d28 <USBD_CDC_Init+0x28>
  {
    pdev->pClassDataCDC = NULL;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    return (uint8_t)USBD_EMEM;
 8018d24:	2302      	movs	r3, #2
 8018d26:	e065      	b.n	8018df4 <USBD_CDC_Init+0xf4>
  }

  pdev->pClassDataCDC = (void *)hcdc;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	68fa      	ldr	r2, [r7, #12]
 8018d2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	7c1b      	ldrb	r3, [r3, #16]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d118      	bne.n	8018d6a <USBD_CDC_Init+0x6a>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018d38:	2340      	movs	r3, #64	; 0x40
 8018d3a:	2202      	movs	r2, #2
 8018d3c:	2183      	movs	r1, #131	; 0x83
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	f000 fdde 	bl	8019900 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2201      	movs	r2, #1
 8018d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018d4c:	2340      	movs	r3, #64	; 0x40
 8018d4e:	2202      	movs	r2, #2
 8018d50:	2103      	movs	r1, #3
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f000 fdd4 	bl	8019900 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2264      	movs	r2, #100	; 0x64
 8018d64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8018d68:	e017      	b.n	8018d9a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018d6a:	2340      	movs	r3, #64	; 0x40
 8018d6c:	2202      	movs	r2, #2
 8018d6e:	2183      	movs	r1, #131	; 0x83
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f000 fdc5 	bl	8019900 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	2201      	movs	r2, #1
 8018d7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018d7e:	2340      	movs	r3, #64	; 0x40
 8018d80:	2202      	movs	r2, #2
 8018d82:	2103      	movs	r1, #3
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f000 fdbb 	bl	8019900 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2201      	movs	r2, #1
 8018d8e:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	2264      	movs	r2, #100	; 0x64
 8018d96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018d9a:	2340      	movs	r3, #64	; 0x40
 8018d9c:	2203      	movs	r2, #3
 8018d9e:	2182      	movs	r1, #130	; 0x82
 8018da0:	6878      	ldr	r0, [r7, #4]
 8018da2:	f000 fdad 	bl	8019900 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2201      	movs	r2, #1
 8018daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Init();
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  hcdc->RxState = 0U;
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	7c1b      	ldrb	r3, [r3, #16]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d108      	bne.n	8018de2 <USBD_CDC_Init+0xe2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018dd6:	2340      	movs	r3, #64	; 0x40
 8018dd8:	2103      	movs	r1, #3
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	f000 ff40 	bl	8019c60 <USBD_LL_PrepareReceive>
 8018de0:	e007      	b.n	8018df2 <USBD_CDC_Init+0xf2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018de8:	2340      	movs	r3, #64	; 0x40
 8018dea:	2103      	movs	r1, #3
 8018dec:	6878      	ldr	r0, [r7, #4]
 8018dee:	f000 ff37 	bl	8019c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018df2:	2300      	movs	r3, #0
}
 8018df4:	4618      	mov	r0, r3
 8018df6:	3710      	adds	r7, #16
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	bd80      	pop	{r7, pc}

08018dfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b082      	sub	sp, #8
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
 8018e04:	460b      	mov	r3, r1
 8018e06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018e08:	2183      	movs	r1, #131	; 0x83
 8018e0a:	6878      	ldr	r0, [r7, #4]
 8018e0c:	f000 fdb6 	bl	801997c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	2200      	movs	r2, #0
 8018e14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018e18:	2103      	movs	r1, #3
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f000 fdae 	bl	801997c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2200      	movs	r2, #0
 8018e24:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8018e28:	2182      	movs	r1, #130	; 0x82
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f000 fda6 	bl	801997c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	2200      	movs	r2, #0
 8018e34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCDC != NULL)
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d00e      	beq.n	8018e68 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->DeInit();
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018e50:	685b      	ldr	r3, [r3, #4]
 8018e52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCDC);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f000 ffa8 	bl	8019db0 <USBD_static_free>
    pdev->pClassDataCDC = NULL;
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	2200      	movs	r2, #0
 8018e64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }

  return (uint8_t)USBD_OK;
 8018e68:	2300      	movs	r3, #0
}
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	3708      	adds	r7, #8
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	bd80      	pop	{r7, pc}
	...

08018e74 <USBD_CDC_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b086      	sub	sp, #24
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
 8018e7c:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018e84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018e86:	2300      	movs	r3, #0
 8018e88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d101      	bne.n	8018e9c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8018e98:	2303      	movs	r3, #3
 8018e9a:	e0b5      	b.n	8019008 <USBD_CDC_Setup+0x194>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018e9c:	683b      	ldr	r3, [r7, #0]
 8018e9e:	781b      	ldrb	r3, [r3, #0]
 8018ea0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d045      	beq.n	8018f34 <USBD_CDC_Setup+0xc0>
 8018ea8:	2b20      	cmp	r3, #32
 8018eaa:	f040 80a5 	bne.w	8018ff8 <USBD_CDC_Setup+0x184>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	88db      	ldrh	r3, [r3, #6]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d034      	beq.n	8018f20 <USBD_CDC_Setup+0xac>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	781b      	ldrb	r3, [r3, #0]
 8018eba:	b25b      	sxtb	r3, r3
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	da1a      	bge.n	8018ef6 <USBD_CDC_Setup+0x82>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ec6:	689b      	ldr	r3, [r3, #8]
 8018ec8:	683a      	ldr	r2, [r7, #0]
 8018eca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8018ecc:	693a      	ldr	r2, [r7, #16]
 8018ece:	f502 711d 	add.w	r1, r2, #628	; 0x274
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018ed2:	683a      	ldr	r2, [r7, #0]
 8018ed4:	88d2      	ldrh	r2, [r2, #6]
 8018ed6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	88db      	ldrh	r3, [r3, #6]
 8018edc:	2b08      	cmp	r3, #8
 8018ede:	bf28      	it	cs
 8018ee0:	2308      	movcs	r3, #8
 8018ee2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8018eea:	89fa      	ldrh	r2, [r7, #14]
 8018eec:	4619      	mov	r1, r3
 8018eee:	6878      	ldr	r0, [r7, #4]
 8018ef0:	f002 f9a7 	bl	801b242 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8018ef4:	e087      	b.n	8019006 <USBD_CDC_Setup+0x192>
          hcdc->CmdOpCode = req->bRequest;
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	785a      	ldrb	r2, [r3, #1]
 8018efa:	693b      	ldr	r3, [r7, #16]
 8018efc:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	88db      	ldrh	r3, [r3, #6]
 8018f04:	b2da      	uxtb	r2, r3
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8018f0c:	693b      	ldr	r3, [r7, #16]
 8018f0e:	f503 711d 	add.w	r1, r3, #628	; 0x274
 8018f12:	683b      	ldr	r3, [r7, #0]
 8018f14:	88db      	ldrh	r3, [r3, #6]
 8018f16:	461a      	mov	r2, r3
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f002 f9be 	bl	801b29a <USBD_CtlPrepareRx>
      break;
 8018f1e:	e072      	b.n	8019006 <USBD_CDC_Setup+0x192>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018f26:	689b      	ldr	r3, [r3, #8]
 8018f28:	683a      	ldr	r2, [r7, #0]
 8018f2a:	7850      	ldrb	r0, [r2, #1]
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	6839      	ldr	r1, [r7, #0]
 8018f30:	4798      	blx	r3
      break;
 8018f32:	e068      	b.n	8019006 <USBD_CDC_Setup+0x192>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	785b      	ldrb	r3, [r3, #1]
 8018f38:	2b0b      	cmp	r3, #11
 8018f3a:	d852      	bhi.n	8018fe2 <USBD_CDC_Setup+0x16e>
 8018f3c:	a201      	add	r2, pc, #4	; (adr r2, 8018f44 <USBD_CDC_Setup+0xd0>)
 8018f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f42:	bf00      	nop
 8018f44:	08018f75 	.word	0x08018f75
 8018f48:	08018ff1 	.word	0x08018ff1
 8018f4c:	08018fe3 	.word	0x08018fe3
 8018f50:	08018fe3 	.word	0x08018fe3
 8018f54:	08018fe3 	.word	0x08018fe3
 8018f58:	08018fe3 	.word	0x08018fe3
 8018f5c:	08018fe3 	.word	0x08018fe3
 8018f60:	08018fe3 	.word	0x08018fe3
 8018f64:	08018fe3 	.word	0x08018fe3
 8018f68:	08018fe3 	.word	0x08018fe3
 8018f6c:	08018f9f 	.word	0x08018f9f
 8018f70:	08018fc9 	.word	0x08018fc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f7a:	b2db      	uxtb	r3, r3
 8018f7c:	2b03      	cmp	r3, #3
 8018f7e:	d107      	bne.n	8018f90 <USBD_CDC_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018f80:	f107 030a 	add.w	r3, r7, #10
 8018f84:	2202      	movs	r2, #2
 8018f86:	4619      	mov	r1, r3
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f002 f95a 	bl	801b242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018f8e:	e032      	b.n	8018ff6 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 8018f90:	6839      	ldr	r1, [r7, #0]
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f001 ffc2 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 8018f98:	2303      	movs	r3, #3
 8018f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8018f9c:	e02b      	b.n	8018ff6 <USBD_CDC_Setup+0x182>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018fa4:	b2db      	uxtb	r3, r3
 8018fa6:	2b03      	cmp	r3, #3
 8018fa8:	d107      	bne.n	8018fba <USBD_CDC_Setup+0x146>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8018faa:	f107 030d 	add.w	r3, r7, #13
 8018fae:	2201      	movs	r2, #1
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f002 f945 	bl	801b242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018fb8:	e01d      	b.n	8018ff6 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 8018fba:	6839      	ldr	r1, [r7, #0]
 8018fbc:	6878      	ldr	r0, [r7, #4]
 8018fbe:	f001 ffad 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 8018fc2:	2303      	movs	r3, #3
 8018fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8018fc6:	e016      	b.n	8018ff6 <USBD_CDC_Setup+0x182>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018fce:	b2db      	uxtb	r3, r3
 8018fd0:	2b03      	cmp	r3, #3
 8018fd2:	d00f      	beq.n	8018ff4 <USBD_CDC_Setup+0x180>
          {
            USBD_CtlError(pdev, req);
 8018fd4:	6839      	ldr	r1, [r7, #0]
 8018fd6:	6878      	ldr	r0, [r7, #4]
 8018fd8:	f001 ffa0 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 8018fdc:	2303      	movs	r3, #3
 8018fde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8018fe0:	e008      	b.n	8018ff4 <USBD_CDC_Setup+0x180>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8018fe2:	6839      	ldr	r1, [r7, #0]
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f001 ff99 	bl	801af1c <USBD_CtlError>
          ret = USBD_FAIL;
 8018fea:	2303      	movs	r3, #3
 8018fec:	75fb      	strb	r3, [r7, #23]
          break;
 8018fee:	e002      	b.n	8018ff6 <USBD_CDC_Setup+0x182>
          break;
 8018ff0:	bf00      	nop
 8018ff2:	e008      	b.n	8019006 <USBD_CDC_Setup+0x192>
          break;
 8018ff4:	bf00      	nop
      }
      break;
 8018ff6:	e006      	b.n	8019006 <USBD_CDC_Setup+0x192>

    default:
      USBD_CtlError(pdev, req);
 8018ff8:	6839      	ldr	r1, [r7, #0]
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f001 ff8e 	bl	801af1c <USBD_CtlError>
      ret = USBD_FAIL;
 8019000:	2303      	movs	r3, #3
 8019002:	75fb      	strb	r3, [r7, #23]
      break;
 8019004:	bf00      	nop
  }

  return (uint8_t)ret;
 8019006:	7dfb      	ldrb	r3, [r7, #23]
}
 8019008:	4618      	mov	r0, r3
 801900a:	3718      	adds	r7, #24
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}

08019010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b084      	sub	sp, #16
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
 8019018:	460b      	mov	r3, r1
 801901a:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019022:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801902a:	2b00      	cmp	r3, #0
 801902c:	d101      	bne.n	8019032 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801902e:	2303      	movs	r3, #3
 8019030:	e04f      	b.n	80190d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019038:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801903a:	78fa      	ldrb	r2, [r7, #3]
 801903c:	6879      	ldr	r1, [r7, #4]
 801903e:	4613      	mov	r3, r2
 8019040:	009b      	lsls	r3, r3, #2
 8019042:	4413      	add	r3, r2
 8019044:	009b      	lsls	r3, r3, #2
 8019046:	440b      	add	r3, r1
 8019048:	3318      	adds	r3, #24
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d029      	beq.n	80190a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8019050:	78fa      	ldrb	r2, [r7, #3]
 8019052:	6879      	ldr	r1, [r7, #4]
 8019054:	4613      	mov	r3, r2
 8019056:	009b      	lsls	r3, r3, #2
 8019058:	4413      	add	r3, r2
 801905a:	009b      	lsls	r3, r3, #2
 801905c:	440b      	add	r3, r1
 801905e:	3318      	adds	r3, #24
 8019060:	681a      	ldr	r2, [r3, #0]
 8019062:	78f9      	ldrb	r1, [r7, #3]
 8019064:	68f8      	ldr	r0, [r7, #12]
 8019066:	460b      	mov	r3, r1
 8019068:	00db      	lsls	r3, r3, #3
 801906a:	1a5b      	subs	r3, r3, r1
 801906c:	009b      	lsls	r3, r3, #2
 801906e:	4403      	add	r3, r0
 8019070:	3344      	adds	r3, #68	; 0x44
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	fbb2 f1f3 	udiv	r1, r2, r3
 8019078:	fb03 f301 	mul.w	r3, r3, r1
 801907c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801907e:	2b00      	cmp	r3, #0
 8019080:	d110      	bne.n	80190a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8019082:	78fa      	ldrb	r2, [r7, #3]
 8019084:	6879      	ldr	r1, [r7, #4]
 8019086:	4613      	mov	r3, r2
 8019088:	009b      	lsls	r3, r3, #2
 801908a:	4413      	add	r3, r2
 801908c:	009b      	lsls	r3, r3, #2
 801908e:	440b      	add	r3, r1
 8019090:	3318      	adds	r3, #24
 8019092:	2200      	movs	r2, #0
 8019094:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8019096:	78f9      	ldrb	r1, [r7, #3]
 8019098:	2300      	movs	r3, #0
 801909a:	2200      	movs	r2, #0
 801909c:	6878      	ldr	r0, [r7, #4]
 801909e:	f000 fda7 	bl	8019bf0 <USBD_LL_Transmit>
 80190a2:	e015      	b.n	80190d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80190a4:	68bb      	ldr	r3, [r7, #8]
 80190a6:	2200      	movs	r2, #0
 80190a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt != NULL)
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80190b2:	691b      	ldr	r3, [r3, #16]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d00b      	beq.n	80190d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80190be:	691b      	ldr	r3, [r3, #16]
 80190c0:	68ba      	ldr	r2, [r7, #8]
 80190c2:	f8d2 02bc 	ldr.w	r0, [r2, #700]	; 0x2bc
 80190c6:	68ba      	ldr	r2, [r7, #8]
 80190c8:	f502 7131 	add.w	r1, r2, #708	; 0x2c4
 80190cc:	78fa      	ldrb	r2, [r7, #3]
 80190ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80190d0:	2300      	movs	r3, #0
}
 80190d2:	4618      	mov	r0, r3
 80190d4:	3710      	adds	r7, #16
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd80      	pop	{r7, pc}

080190da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80190da:	b580      	push	{r7, lr}
 80190dc:	b084      	sub	sp, #16
 80190de:	af00      	add	r7, sp, #0
 80190e0:	6078      	str	r0, [r7, #4]
 80190e2:	460b      	mov	r3, r1
 80190e4:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d101      	bne.n	80190fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80190f8:	2303      	movs	r3, #3
 80190fa:	e015      	b.n	8019128 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80190fc:	78fb      	ldrb	r3, [r7, #3]
 80190fe:	4619      	mov	r1, r3
 8019100:	6878      	ldr	r0, [r7, #4]
 8019102:	f000 fde5 	bl	8019cd0 <USBD_LL_GetRxDataSize>
 8019106:	4602      	mov	r2, r0
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019114:	68db      	ldr	r3, [r3, #12]
 8019116:	68fa      	ldr	r2, [r7, #12]
 8019118:	f8d2 02b8 	ldr.w	r0, [r2, #696]	; 0x2b8
 801911c:	68fa      	ldr	r2, [r7, #12]
 801911e:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 8019122:	4611      	mov	r1, r2
 8019124:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8019126:	2300      	movs	r3, #0
}
 8019128:	4618      	mov	r0, r3
 801912a:	3710      	adds	r7, #16
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b084      	sub	sp, #16
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801913e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d101      	bne.n	801914a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8019146:	2303      	movs	r3, #3
 8019148:	e01d      	b.n	8019186 <USBD_CDC_EP0_RxReady+0x56>
  }

  if ((pdev->pUserDataCDC != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019150:	2b00      	cmp	r3, #0
 8019152:	d017      	beq.n	8019184 <USBD_CDC_EP0_RxReady+0x54>
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 801915a:	2bff      	cmp	r3, #255	; 0xff
 801915c:	d012      	beq.n	8019184 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019164:	689b      	ldr	r3, [r3, #8]
 8019166:	68fa      	ldr	r2, [r7, #12]
 8019168:	f892 02b4 	ldrb.w	r0, [r2, #692]	; 0x2b4
                                                      (uint8_t *)hcdc->data,
 801916c:	68fa      	ldr	r2, [r7, #12]
 801916e:	f502 711d 	add.w	r1, r2, #628	; 0x274
                                                      (uint16_t)hcdc->CmdLength);
 8019172:	68fa      	ldr	r2, [r7, #12]
 8019174:	f892 22b5 	ldrb.w	r2, [r2, #693]	; 0x2b5
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 8019178:	b292      	uxth	r2, r2
 801917a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	22ff      	movs	r2, #255	; 0xff
 8019180:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
  }

  return (uint8_t)USBD_OK;
 8019184:	2300      	movs	r3, #0
}
 8019186:	4618      	mov	r0, r3
 8019188:	3710      	adds	r7, #16
 801918a:	46bd      	mov	sp, r7
 801918c:	bd80      	pop	{r7, pc}

0801918e <USBD_CDC_RegisterInterface>:
  * @param  pdev: device instance
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_CDC_ItfTypeDef *fops)
{
 801918e:	b480      	push	{r7}
 8019190:	b083      	sub	sp, #12
 8019192:	af00      	add	r7, sp, #0
 8019194:	6078      	str	r0, [r7, #4]
 8019196:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8019198:	683b      	ldr	r3, [r7, #0]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d101      	bne.n	80191a2 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801919e:	2303      	movs	r3, #3
 80191a0:	e004      	b.n	80191ac <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserDataCDC = fops;
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	683a      	ldr	r2, [r7, #0]
 80191a6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  return (uint8_t)USBD_OK;
 80191aa:	2300      	movs	r3, #0
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	370c      	adds	r7, #12
 80191b0:	46bd      	mov	sp, r7
 80191b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b6:	4770      	bx	lr

080191b8 <USBD_CDC_SetTxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 80191b8:	b480      	push	{r7}
 80191ba:	b087      	sub	sp, #28
 80191bc:	af00      	add	r7, sp, #0
 80191be:	60f8      	str	r0, [r7, #12]
 80191c0:	60b9      	str	r1, [r7, #8]
 80191c2:	607a      	str	r2, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d101      	bne.n	80191d6 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80191d2:	2303      	movs	r3, #3
 80191d4:	e008      	b.n	80191e8 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80191d6:	697b      	ldr	r3, [r7, #20]
 80191d8:	68ba      	ldr	r2, [r7, #8]
 80191da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  hcdc->TxLength = length;
 80191de:	697b      	ldr	r3, [r7, #20]
 80191e0:	687a      	ldr	r2, [r7, #4]
 80191e2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  return (uint8_t)USBD_OK;
 80191e6:	2300      	movs	r3, #0
}
 80191e8:	4618      	mov	r0, r3
 80191ea:	371c      	adds	r7, #28
 80191ec:	46bd      	mov	sp, r7
 80191ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f2:	4770      	bx	lr

080191f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80191f4:	b480      	push	{r7}
 80191f6:	b085      	sub	sp, #20
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
 80191fc:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019204:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	2b00      	cmp	r3, #0
 801920a:	d101      	bne.n	8019210 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801920c:	2303      	movs	r3, #3
 801920e:	e004      	b.n	801921a <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	683a      	ldr	r2, [r7, #0]
 8019214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  return (uint8_t)USBD_OK;
 8019218:	2300      	movs	r3, #0
}
 801921a:	4618      	mov	r0, r3
 801921c:	3714      	adds	r7, #20
 801921e:	46bd      	mov	sp, r7
 8019220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019224:	4770      	bx	lr

08019226 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8019226:	b580      	push	{r7, lr}
 8019228:	b084      	sub	sp, #16
 801922a:	af00      	add	r7, sp, #0
 801922c:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019234:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8019236:	2301      	movs	r3, #1
 8019238:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCDC == NULL)
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019240:	2b00      	cmp	r3, #0
 8019242:	d101      	bne.n	8019248 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019244:	2303      	movs	r3, #3
 8019246:	e01a      	b.n	801927e <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801924e:	2b00      	cmp	r3, #0
 8019250:	d114      	bne.n	801927c <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8019252:	68bb      	ldr	r3, [r7, #8]
 8019254:	2201      	movs	r2, #1
 8019256:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801925a:	68bb      	ldr	r3, [r7, #8]
 801925c:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	655a      	str	r2, [r3, #84]	; 0x54

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8019264:	68bb      	ldr	r3, [r7, #8]
 8019266:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 801926a:	68bb      	ldr	r3, [r7, #8]
 801926c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019270:	2183      	movs	r1, #131	; 0x83
 8019272:	6878      	ldr	r0, [r7, #4]
 8019274:	f000 fcbc 	bl	8019bf0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8019278:	2300      	movs	r3, #0
 801927a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801927c:	7bfb      	ldrb	r3, [r7, #15]
}
 801927e:	4618      	mov	r0, r3
 8019280:	3710      	adds	r7, #16
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}

08019286 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8019286:	b580      	push	{r7, lr}
 8019288:	b084      	sub	sp, #16
 801928a:	af00      	add	r7, sp, #0
 801928c:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019294:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801929c:	2b00      	cmp	r3, #0
 801929e:	d101      	bne.n	80192a4 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80192a0:	2303      	movs	r3, #3
 80192a2:	e015      	b.n	80192d0 <USBD_CDC_ReceivePacket+0x4a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	7c1b      	ldrb	r3, [r3, #16]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d108      	bne.n	80192be <USBD_CDC_ReceivePacket+0x38>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 80192b2:	2340      	movs	r3, #64	; 0x40
 80192b4:	2103      	movs	r1, #3
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f000 fcd2 	bl	8019c60 <USBD_LL_PrepareReceive>
 80192bc:	e007      	b.n	80192ce <USBD_CDC_ReceivePacket+0x48>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 80192c4:	2340      	movs	r3, #64	; 0x40
 80192c6:	2103      	movs	r1, #3
 80192c8:	6878      	ldr	r0, [r7, #4]
 80192ca:	f000 fcc9 	bl	8019c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80192ce:	2300      	movs	r3, #0
}
 80192d0:	4618      	mov	r0, r3
 80192d2:	3710      	adds	r7, #16
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bd80      	pop	{r7, pc}

080192d8 <CDC_Init_FS>:
};



static int8_t CDC_Init_FS(void)
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80192dc:	2200      	movs	r2, #0
 80192de:	4905      	ldr	r1, [pc, #20]	; (80192f4 <CDC_Init_FS+0x1c>)
 80192e0:	4805      	ldr	r0, [pc, #20]	; (80192f8 <CDC_Init_FS+0x20>)
 80192e2:	f7ff ff69 	bl	80191b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80192e6:	4905      	ldr	r1, [pc, #20]	; (80192fc <CDC_Init_FS+0x24>)
 80192e8:	4803      	ldr	r0, [pc, #12]	; (80192f8 <CDC_Init_FS+0x20>)
 80192ea:	f7ff ff83 	bl	80191f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80192ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	bd80      	pop	{r7, pc}
 80192f4:	20008a30 	.word	0x20008a30
 80192f8:	20008758 	.word	0x20008758
 80192fc:	20009230 	.word	0x20009230

08019300 <CDC_DeInit_FS>:



static int8_t CDC_DeInit_FS(void)
{
 8019300:	b480      	push	{r7}
 8019302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019304:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019306:	4618      	mov	r0, r3
 8019308:	46bd      	mov	sp, r7
 801930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930e:	4770      	bx	lr

08019310 <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019310:	b480      	push	{r7}
 8019312:	b083      	sub	sp, #12
 8019314:	af00      	add	r7, sp, #0
 8019316:	4603      	mov	r3, r0
 8019318:	6039      	str	r1, [r7, #0]
 801931a:	71fb      	strb	r3, [r7, #7]
 801931c:	4613      	mov	r3, r2
 801931e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019320:	79fb      	ldrb	r3, [r7, #7]
 8019322:	2b23      	cmp	r3, #35	; 0x23
 8019324:	d84a      	bhi.n	80193bc <CDC_Control_FS+0xac>
 8019326:	a201      	add	r2, pc, #4	; (adr r2, 801932c <CDC_Control_FS+0x1c>)
 8019328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801932c:	080193bd 	.word	0x080193bd
 8019330:	080193bd 	.word	0x080193bd
 8019334:	080193bd 	.word	0x080193bd
 8019338:	080193bd 	.word	0x080193bd
 801933c:	080193bd 	.word	0x080193bd
 8019340:	080193bd 	.word	0x080193bd
 8019344:	080193bd 	.word	0x080193bd
 8019348:	080193bd 	.word	0x080193bd
 801934c:	080193bd 	.word	0x080193bd
 8019350:	080193bd 	.word	0x080193bd
 8019354:	080193bd 	.word	0x080193bd
 8019358:	080193bd 	.word	0x080193bd
 801935c:	080193bd 	.word	0x080193bd
 8019360:	080193bd 	.word	0x080193bd
 8019364:	080193bd 	.word	0x080193bd
 8019368:	080193bd 	.word	0x080193bd
 801936c:	080193bd 	.word	0x080193bd
 8019370:	080193bd 	.word	0x080193bd
 8019374:	080193bd 	.word	0x080193bd
 8019378:	080193bd 	.word	0x080193bd
 801937c:	080193bd 	.word	0x080193bd
 8019380:	080193bd 	.word	0x080193bd
 8019384:	080193bd 	.word	0x080193bd
 8019388:	080193bd 	.word	0x080193bd
 801938c:	080193bd 	.word	0x080193bd
 8019390:	080193bd 	.word	0x080193bd
 8019394:	080193bd 	.word	0x080193bd
 8019398:	080193bd 	.word	0x080193bd
 801939c:	080193bd 	.word	0x080193bd
 80193a0:	080193bd 	.word	0x080193bd
 80193a4:	080193bd 	.word	0x080193bd
 80193a8:	080193bd 	.word	0x080193bd
 80193ac:	080193bd 	.word	0x080193bd
 80193b0:	080193bd 	.word	0x080193bd
 80193b4:	080193bd 	.word	0x080193bd
 80193b8:	080193bd 	.word	0x080193bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80193bc:	bf00      	nop
  }

  return (USBD_OK);
 80193be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	370c      	adds	r7, #12
 80193c4:	46bd      	mov	sp, r7
 80193c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ca:	4770      	bx	lr

080193cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b082      	sub	sp, #8
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
 80193d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  strncpy(rx_buf+rxcntr, (char*)Buf, *Len);
 80193d6:	4b0f      	ldr	r3, [pc, #60]	; (8019414 <CDC_Receive_FS+0x48>)
 80193d8:	881b      	ldrh	r3, [r3, #0]
 80193da:	461a      	mov	r2, r3
 80193dc:	4b0e      	ldr	r3, [pc, #56]	; (8019418 <CDC_Receive_FS+0x4c>)
 80193de:	18d0      	adds	r0, r2, r3
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	461a      	mov	r2, r3
 80193e6:	6879      	ldr	r1, [r7, #4]
 80193e8:	f004 fcb2 	bl	801dd50 <strncpy>
  	rxcntr+=*Len;
 80193ec:	683b      	ldr	r3, [r7, #0]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	b29a      	uxth	r2, r3
 80193f2:	4b08      	ldr	r3, [pc, #32]	; (8019414 <CDC_Receive_FS+0x48>)
 80193f4:	881b      	ldrh	r3, [r3, #0]
 80193f6:	4413      	add	r3, r2
 80193f8:	b29a      	uxth	r2, r3
 80193fa:	4b06      	ldr	r3, [pc, #24]	; (8019414 <CDC_Receive_FS+0x48>)
 80193fc:	801a      	strh	r2, [r3, #0]
  	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80193fe:	4807      	ldr	r0, [pc, #28]	; (801941c <CDC_Receive_FS+0x50>)
 8019400:	f7ff ff41 	bl	8019286 <USBD_CDC_ReceivePacket>
  	USBTimeOutRX=timeout_const;
 8019404:	4b06      	ldr	r3, [pc, #24]	; (8019420 <CDC_Receive_FS+0x54>)
 8019406:	2202      	movs	r2, #2
 8019408:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 801940a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801940c:	4618      	mov	r0, r3
 801940e:	3708      	adds	r7, #8
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}
 8019414:	200008ba 	.word	0x200008ba
 8019418:	20005b64 	.word	0x20005b64
 801941c:	20008758 	.word	0x20008758
 8019420:	2000018c 	.word	0x2000018c

08019424 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b084      	sub	sp, #16
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	460b      	mov	r3, r1
 801942e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019430:	2300      	movs	r3, #0
 8019432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef*)hUsbDeviceFS.pClassDataCDC;
 8019434:	4b18      	ldr	r3, [pc, #96]	; (8019498 <CDC_Transmit_FS+0x74>)
 8019436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801943a:	60bb      	str	r3, [r7, #8]
  USB_timeout=1500;
 801943c:	4b17      	ldr	r3, [pc, #92]	; (801949c <CDC_Transmit_FS+0x78>)
 801943e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8019442:	601a      	str	r2, [r3, #0]
  while(hcdc->TxState!=0)
 8019444:	e013      	b.n	801946e <CDC_Transmit_FS+0x4a>
  {
	  USB_timeout--;
 8019446:	4b15      	ldr	r3, [pc, #84]	; (801949c <CDC_Transmit_FS+0x78>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	3b01      	subs	r3, #1
 801944c:	4a13      	ldr	r2, [pc, #76]	; (801949c <CDC_Transmit_FS+0x78>)
 801944e:	6013      	str	r3, [r2, #0]
	  if(USB_timeout==0) {ERROR_REG|=(0x01<<USB_CVC_err); hcdc->TxState=0; break;}
 8019450:	4b12      	ldr	r3, [pc, #72]	; (801949c <CDC_Transmit_FS+0x78>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d10a      	bne.n	801946e <CDC_Transmit_FS+0x4a>
 8019458:	4b11      	ldr	r3, [pc, #68]	; (80194a0 <CDC_Transmit_FS+0x7c>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	f043 0308 	orr.w	r3, r3, #8
 8019460:	4a0f      	ldr	r2, [pc, #60]	; (80194a0 <CDC_Transmit_FS+0x7c>)
 8019462:	6013      	str	r3, [r2, #0]
 8019464:	68bb      	ldr	r3, [r7, #8]
 8019466:	2200      	movs	r2, #0
 8019468:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 801946c:	e004      	b.n	8019478 <CDC_Transmit_FS+0x54>
  while(hcdc->TxState!=0)
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019474:	2b00      	cmp	r3, #0
 8019476:	d1e6      	bne.n	8019446 <CDC_Transmit_FS+0x22>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019478:	887b      	ldrh	r3, [r7, #2]
 801947a:	461a      	mov	r2, r3
 801947c:	6879      	ldr	r1, [r7, #4]
 801947e:	4806      	ldr	r0, [pc, #24]	; (8019498 <CDC_Transmit_FS+0x74>)
 8019480:	f7ff fe9a 	bl	80191b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019484:	4804      	ldr	r0, [pc, #16]	; (8019498 <CDC_Transmit_FS+0x74>)
 8019486:	f7ff fece 	bl	8019226 <USBD_CDC_TransmitPacket>
 801948a:	4603      	mov	r3, r0
 801948c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019490:	4618      	mov	r0, r3
 8019492:	3710      	adds	r7, #16
 8019494:	46bd      	mov	sp, r7
 8019496:	bd80      	pop	{r7, pc}
 8019498:	20008758 	.word	0x20008758
 801949c:	20001c58 	.word	0x20001c58
 80194a0:	20000890 	.word	0x20000890

080194a4 <CDC_TransmitCplt_FS>:



static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80194a4:	b480      	push	{r7}
 80194a6:	b087      	sub	sp, #28
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	60f8      	str	r0, [r7, #12]
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	4613      	mov	r3, r2
 80194b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80194b2:	2300      	movs	r3, #0
 80194b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80194b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	371c      	adds	r7, #28
 80194be:	46bd      	mov	sp, r7
 80194c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194c4:	4770      	bx	lr
	...

080194c8 <HAL_PCD_MspInit>:




void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b0ae      	sub	sp, #184	; 0xb8
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80194d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80194d4:	2200      	movs	r2, #0
 80194d6:	601a      	str	r2, [r3, #0]
 80194d8:	605a      	str	r2, [r3, #4]
 80194da:	609a      	str	r2, [r3, #8]
 80194dc:	60da      	str	r2, [r3, #12]
 80194de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80194e0:	f107 0318 	add.w	r3, r7, #24
 80194e4:	228c      	movs	r2, #140	; 0x8c
 80194e6:	2100      	movs	r1, #0
 80194e8:	4618      	mov	r0, r3
 80194ea:	f003 fd89 	bl	801d000 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80194f6:	d173      	bne.n	80195e0 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80194f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80194fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80194fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8019502:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8019506:	2303      	movs	r3, #3
 8019508:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 801950a:	2301      	movs	r3, #1
 801950c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801950e:	230c      	movs	r3, #12
 8019510:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8019512:	2302      	movs	r3, #2
 8019514:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8019516:	2302      	movs	r3, #2
 8019518:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801951a:	2302      	movs	r3, #2
 801951c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801951e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019522:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8019524:	f107 0318 	add.w	r3, r7, #24
 8019528:	4618      	mov	r0, r3
 801952a:	f7f3 fb33 	bl	800cb94 <HAL_RCCEx_PeriphCLKConfig>
 801952e:	4603      	mov	r3, r0
 8019530:	2b00      	cmp	r3, #0
 8019532:	d001      	beq.n	8019538 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8019534:	f7ed f992 	bl	800685c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019538:	4b2b      	ldr	r3, [pc, #172]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 801953a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801953c:	4a2a      	ldr	r2, [pc, #168]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 801953e:	f043 0301 	orr.w	r3, r3, #1
 8019542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019544:	4b28      	ldr	r3, [pc, #160]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 8019546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019548:	f003 0301 	and.w	r3, r3, #1
 801954c:	617b      	str	r3, [r7, #20]
 801954e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019550:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019558:	2302      	movs	r3, #2
 801955a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801955e:	2300      	movs	r3, #0
 8019560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019564:	2303      	movs	r3, #3
 8019566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801956a:	230a      	movs	r3, #10
 801956c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019570:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019574:	4619      	mov	r1, r3
 8019576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801957a:	f7f0 fc87 	bl	8009e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801957e:	4b1a      	ldr	r3, [pc, #104]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 8019580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019582:	4a19      	ldr	r2, [pc, #100]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 8019584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019588:	64d3      	str	r3, [r2, #76]	; 0x4c
 801958a:	4b17      	ldr	r3, [pc, #92]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 801958c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801958e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019592:	613b      	str	r3, [r7, #16]
 8019594:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019596:	4b14      	ldr	r3, [pc, #80]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 8019598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801959a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d114      	bne.n	80195cc <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80195a2:	4b11      	ldr	r3, [pc, #68]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 80195a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195a6:	4a10      	ldr	r2, [pc, #64]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 80195a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80195ac:	6593      	str	r3, [r2, #88]	; 0x58
 80195ae:	4b0e      	ldr	r3, [pc, #56]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 80195b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80195b6:	60fb      	str	r3, [r7, #12]
 80195b8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80195ba:	f7f2 fc7d 	bl	800beb8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80195be:	4b0a      	ldr	r3, [pc, #40]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 80195c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195c2:	4a09      	ldr	r2, [pc, #36]	; (80195e8 <HAL_PCD_MspInit+0x120>)
 80195c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80195c8:	6593      	str	r3, [r2, #88]	; 0x58
 80195ca:	e001      	b.n	80195d0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80195cc:	f7f2 fc74 	bl	800beb8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80195d0:	2200      	movs	r2, #0
 80195d2:	2100      	movs	r1, #0
 80195d4:	2043      	movs	r0, #67	; 0x43
 80195d6:	f7ef fe9b 	bl	8009310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80195da:	2043      	movs	r0, #67	; 0x43
 80195dc:	f7ef feb4 	bl	8009348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80195e0:	bf00      	nop
 80195e2:	37b8      	adds	r7, #184	; 0xb8
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}
 80195e8:	40021000 	.word	0x40021000

080195ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019600:	4619      	mov	r1, r3
 8019602:	4610      	mov	r0, r2
 8019604:	f000 fc8a 	bl	8019f1c <USBD_LL_SetupStage>
}
 8019608:	bf00      	nop
 801960a:	3708      	adds	r7, #8
 801960c:	46bd      	mov	sp, r7
 801960e:	bd80      	pop	{r7, pc}

08019610 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b082      	sub	sp, #8
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	460b      	mov	r3, r1
 801961a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019622:	78fa      	ldrb	r2, [r7, #3]
 8019624:	6879      	ldr	r1, [r7, #4]
 8019626:	4613      	mov	r3, r2
 8019628:	00db      	lsls	r3, r3, #3
 801962a:	1a9b      	subs	r3, r3, r2
 801962c:	009b      	lsls	r3, r3, #2
 801962e:	440b      	add	r3, r1
 8019630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019634:	681a      	ldr	r2, [r3, #0]
 8019636:	78fb      	ldrb	r3, [r7, #3]
 8019638:	4619      	mov	r1, r3
 801963a:	f000 fcc4 	bl	8019fc6 <USBD_LL_DataOutStage>
}
 801963e:	bf00      	nop
 8019640:	3708      	adds	r7, #8
 8019642:	46bd      	mov	sp, r7
 8019644:	bd80      	pop	{r7, pc}

08019646 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019646:	b580      	push	{r7, lr}
 8019648:	b082      	sub	sp, #8
 801964a:	af00      	add	r7, sp, #0
 801964c:	6078      	str	r0, [r7, #4]
 801964e:	460b      	mov	r3, r1
 8019650:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019658:	78fa      	ldrb	r2, [r7, #3]
 801965a:	6879      	ldr	r1, [r7, #4]
 801965c:	4613      	mov	r3, r2
 801965e:	00db      	lsls	r3, r3, #3
 8019660:	1a9b      	subs	r3, r3, r2
 8019662:	009b      	lsls	r3, r3, #2
 8019664:	440b      	add	r3, r1
 8019666:	3348      	adds	r3, #72	; 0x48
 8019668:	681a      	ldr	r2, [r3, #0]
 801966a:	78fb      	ldrb	r3, [r7, #3]
 801966c:	4619      	mov	r1, r3
 801966e:	f000 fd0d 	bl	801a08c <USBD_LL_DataInStage>
}
 8019672:	bf00      	nop
 8019674:	3708      	adds	r7, #8
 8019676:	46bd      	mov	sp, r7
 8019678:	bd80      	pop	{r7, pc}

0801967a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801967a:	b580      	push	{r7, lr}
 801967c:	b082      	sub	sp, #8
 801967e:	af00      	add	r7, sp, #0
 8019680:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019688:	4618      	mov	r0, r3
 801968a:	f000 fe21 	bl	801a2d0 <USBD_LL_SOF>
}
 801968e:	bf00      	nop
 8019690:	3708      	adds	r7, #8
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}

08019696 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019696:	b580      	push	{r7, lr}
 8019698:	b084      	sub	sp, #16
 801969a:	af00      	add	r7, sp, #0
 801969c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801969e:	2301      	movs	r3, #1
 80196a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	68db      	ldr	r3, [r3, #12]
 80196a6:	2b02      	cmp	r3, #2
 80196a8:	d001      	beq.n	80196ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80196aa:	f7ed f8d7 	bl	800685c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80196b4:	7bfa      	ldrb	r2, [r7, #15]
 80196b6:	4611      	mov	r1, r2
 80196b8:	4618      	mov	r0, r3
 80196ba:	f000 fdcb 	bl	801a254 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80196c4:	4618      	mov	r0, r3
 80196c6:	f000 fd77 	bl	801a1b8 <USBD_LL_Reset>
}
 80196ca:	bf00      	nop
 80196cc:	3710      	adds	r7, #16
 80196ce:	46bd      	mov	sp, r7
 80196d0:	bd80      	pop	{r7, pc}
	...

080196d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b082      	sub	sp, #8
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	687a      	ldr	r2, [r7, #4]
 80196e8:	6812      	ldr	r2, [r2, #0]
 80196ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80196ee:	f043 0301 	orr.w	r3, r3, #1
 80196f2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80196fa:	4618      	mov	r0, r3
 80196fc:	f000 fdba 	bl	801a274 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	6a1b      	ldr	r3, [r3, #32]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d005      	beq.n	8019714 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019708:	4b04      	ldr	r3, [pc, #16]	; (801971c <HAL_PCD_SuspendCallback+0x48>)
 801970a:	691b      	ldr	r3, [r3, #16]
 801970c:	4a03      	ldr	r2, [pc, #12]	; (801971c <HAL_PCD_SuspendCallback+0x48>)
 801970e:	f043 0306 	orr.w	r3, r3, #6
 8019712:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019714:	bf00      	nop
 8019716:	3708      	adds	r7, #8
 8019718:	46bd      	mov	sp, r7
 801971a:	bd80      	pop	{r7, pc}
 801971c:	e000ed00 	.word	0xe000ed00

08019720 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019720:	b580      	push	{r7, lr}
 8019722:	b082      	sub	sp, #8
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	687a      	ldr	r2, [r7, #4]
 8019734:	6812      	ldr	r2, [r2, #0]
 8019736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801973a:	f023 0301 	bic.w	r3, r3, #1
 801973e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6a1b      	ldr	r3, [r3, #32]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d007      	beq.n	8019758 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019748:	4b08      	ldr	r3, [pc, #32]	; (801976c <HAL_PCD_ResumeCallback+0x4c>)
 801974a:	691b      	ldr	r3, [r3, #16]
 801974c:	4a07      	ldr	r2, [pc, #28]	; (801976c <HAL_PCD_ResumeCallback+0x4c>)
 801974e:	f023 0306 	bic.w	r3, r3, #6
 8019752:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019754:	f000 fb36 	bl	8019dc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801975e:	4618      	mov	r0, r3
 8019760:	f000 fd9e 	bl	801a2a0 <USBD_LL_Resume>
}
 8019764:	bf00      	nop
 8019766:	3708      	adds	r7, #8
 8019768:	46bd      	mov	sp, r7
 801976a:	bd80      	pop	{r7, pc}
 801976c:	e000ed00 	.word	0xe000ed00

08019770 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b082      	sub	sp, #8
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	460b      	mov	r3, r1
 801977a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019782:	78fa      	ldrb	r2, [r7, #3]
 8019784:	4611      	mov	r1, r2
 8019786:	4618      	mov	r0, r3
 8019788:	f000 fdea 	bl	801a360 <USBD_LL_IsoOUTIncomplete>
}
 801978c:	bf00      	nop
 801978e:	3708      	adds	r7, #8
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}

08019794 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b082      	sub	sp, #8
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	460b      	mov	r3, r1
 801979e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197a6:	78fa      	ldrb	r2, [r7, #3]
 80197a8:	4611      	mov	r1, r2
 80197aa:	4618      	mov	r0, r3
 80197ac:	f000 fdb2 	bl	801a314 <USBD_LL_IsoINIncomplete>
}
 80197b0:	bf00      	nop
 80197b2:	3708      	adds	r7, #8
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd80      	pop	{r7, pc}

080197b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b082      	sub	sp, #8
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197c6:	4618      	mov	r0, r3
 80197c8:	f000 fdf0 	bl	801a3ac <USBD_LL_DevConnected>
}
 80197cc:	bf00      	nop
 80197ce:	3708      	adds	r7, #8
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}

080197d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b082      	sub	sp, #8
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197e2:	4618      	mov	r0, r3
 80197e4:	f000 fded 	bl	801a3c2 <USBD_LL_DevDisconnected>
}
 80197e8:	bf00      	nop
 80197ea:	3708      	adds	r7, #8
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}

080197f0 <USBD_LL_Init>:
/*******************************************************************************
                       LL Driver Interface (USB Device Library --> PCD)
*******************************************************************************/

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b082      	sub	sp, #8
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	781b      	ldrb	r3, [r3, #0]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d146      	bne.n	801988e <USBD_LL_Init+0x9e>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019800:	4a25      	ldr	r2, [pc, #148]	; (8019898 <USBD_LL_Init+0xa8>)
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	4a23      	ldr	r2, [pc, #140]	; (8019898 <USBD_LL_Init+0xa8>)
 801980c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019810:	4b21      	ldr	r3, [pc, #132]	; (8019898 <USBD_LL_Init+0xa8>)
 8019812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019816:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 7;
 8019818:	4b1f      	ldr	r3, [pc, #124]	; (8019898 <USBD_LL_Init+0xa8>)
 801981a:	2207      	movs	r2, #7
 801981c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801981e:	4b1e      	ldr	r3, [pc, #120]	; (8019898 <USBD_LL_Init+0xa8>)
 8019820:	2202      	movs	r2, #2
 8019822:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019824:	4b1c      	ldr	r3, [pc, #112]	; (8019898 <USBD_LL_Init+0xa8>)
 8019826:	2202      	movs	r2, #2
 8019828:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801982a:	4b1b      	ldr	r3, [pc, #108]	; (8019898 <USBD_LL_Init+0xa8>)
 801982c:	2200      	movs	r2, #0
 801982e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019830:	4b19      	ldr	r3, [pc, #100]	; (8019898 <USBD_LL_Init+0xa8>)
 8019832:	2200      	movs	r2, #0
 8019834:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019836:	4b18      	ldr	r3, [pc, #96]	; (8019898 <USBD_LL_Init+0xa8>)
 8019838:	2200      	movs	r2, #0
 801983a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801983c:	4b16      	ldr	r3, [pc, #88]	; (8019898 <USBD_LL_Init+0xa8>)
 801983e:	2200      	movs	r2, #0
 8019840:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019842:	4b15      	ldr	r3, [pc, #84]	; (8019898 <USBD_LL_Init+0xa8>)
 8019844:	2200      	movs	r2, #0
 8019846:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019848:	4b13      	ldr	r3, [pc, #76]	; (8019898 <USBD_LL_Init+0xa8>)
 801984a:	2200      	movs	r2, #0
 801984c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801984e:	4812      	ldr	r0, [pc, #72]	; (8019898 <USBD_LL_Init+0xa8>)
 8019850:	f7f1 f9f1 	bl	800ac36 <HAL_PCD_Init>
 8019854:	4603      	mov	r3, r0
 8019856:	2b00      	cmp	r3, #0
 8019858:	d001      	beq.n	801985e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801985a:	f7ec ffff 	bl	800685c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 801985e:	2140      	movs	r1, #64	; 0x40
 8019860:	480d      	ldr	r0, [pc, #52]	; (8019898 <USBD_LL_Init+0xa8>)
 8019862:	f7f2 fa80 	bl	800bd66 <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019866:	2240      	movs	r2, #64	; 0x40
 8019868:	2100      	movs	r1, #0
 801986a:	480b      	ldr	r0, [pc, #44]	; (8019898 <USBD_LL_Init+0xa8>)
 801986c:	f7f2 fa34 	bl	800bcd8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8019870:	2240      	movs	r2, #64	; 0x40
 8019872:	2101      	movs	r1, #1
 8019874:	4808      	ldr	r0, [pc, #32]	; (8019898 <USBD_LL_Init+0xa8>)
 8019876:	f7f2 fa2f 	bl	800bcd8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 801987a:	2240      	movs	r2, #64	; 0x40
 801987c:	2102      	movs	r1, #2
 801987e:	4806      	ldr	r0, [pc, #24]	; (8019898 <USBD_LL_Init+0xa8>)
 8019880:	f7f2 fa2a 	bl	800bcd8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8019884:	2240      	movs	r2, #64	; 0x40
 8019886:	2103      	movs	r1, #3
 8019888:	4803      	ldr	r0, [pc, #12]	; (8019898 <USBD_LL_Init+0xa8>)
 801988a:	f7f2 fa25 	bl	800bcd8 <HAL_PCDEx_SetTxFiFo>

	//


  }
  return USBD_OK;
 801988e:	2300      	movs	r3, #0
}
 8019890:	4618      	mov	r0, r3
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}
 8019898:	20009a30 	.word	0x20009a30

0801989c <USBD_LL_Start>:




USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b084      	sub	sp, #16
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198a4:	2300      	movs	r3, #0
 80198a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198a8:	2300      	movs	r3, #0
 80198aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7f1 fae3 	bl	800ae7e <HAL_PCD_Start>
 80198b8:	4603      	mov	r3, r0
 80198ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80198bc:	7bbb      	ldrb	r3, [r7, #14]
 80198be:	2b03      	cmp	r3, #3
 80198c0:	d816      	bhi.n	80198f0 <USBD_LL_Start+0x54>
 80198c2:	a201      	add	r2, pc, #4	; (adr r2, 80198c8 <USBD_LL_Start+0x2c>)
 80198c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198c8:	080198d9 	.word	0x080198d9
 80198cc:	080198df 	.word	0x080198df
 80198d0:	080198e5 	.word	0x080198e5
 80198d4:	080198eb 	.word	0x080198eb
    case HAL_OK :
      usb_status = USBD_OK;
 80198d8:	2300      	movs	r3, #0
 80198da:	73fb      	strb	r3, [r7, #15]
    break;
 80198dc:	e00b      	b.n	80198f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80198de:	2303      	movs	r3, #3
 80198e0:	73fb      	strb	r3, [r7, #15]
    break;
 80198e2:	e008      	b.n	80198f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80198e4:	2301      	movs	r3, #1
 80198e6:	73fb      	strb	r3, [r7, #15]
    break;
 80198e8:	e005      	b.n	80198f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80198ea:	2303      	movs	r3, #3
 80198ec:	73fb      	strb	r3, [r7, #15]
    break;
 80198ee:	e002      	b.n	80198f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80198f0:	2303      	movs	r3, #3
 80198f2:	73fb      	strb	r3, [r7, #15]
    break;
 80198f4:	bf00      	nop
  }
  return usb_status;
 80198f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80198f8:	4618      	mov	r0, r3
 80198fa:	3710      	adds	r7, #16
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}

08019900 <USBD_LL_OpenEP>:




USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	4608      	mov	r0, r1
 801990a:	4611      	mov	r1, r2
 801990c:	461a      	mov	r2, r3
 801990e:	4603      	mov	r3, r0
 8019910:	70fb      	strb	r3, [r7, #3]
 8019912:	460b      	mov	r3, r1
 8019914:	70bb      	strb	r3, [r7, #2]
 8019916:	4613      	mov	r3, r2
 8019918:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801991a:	2300      	movs	r3, #0
 801991c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801991e:	2300      	movs	r3, #0
 8019920:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019928:	78bb      	ldrb	r3, [r7, #2]
 801992a:	883a      	ldrh	r2, [r7, #0]
 801992c:	78f9      	ldrb	r1, [r7, #3]
 801992e:	f7f1 fe9e 	bl	800b66e <HAL_PCD_EP_Open>
 8019932:	4603      	mov	r3, r0
 8019934:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019936:	7bbb      	ldrb	r3, [r7, #14]
 8019938:	2b03      	cmp	r3, #3
 801993a:	d817      	bhi.n	801996c <USBD_LL_OpenEP+0x6c>
 801993c:	a201      	add	r2, pc, #4	; (adr r2, 8019944 <USBD_LL_OpenEP+0x44>)
 801993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019942:	bf00      	nop
 8019944:	08019955 	.word	0x08019955
 8019948:	0801995b 	.word	0x0801995b
 801994c:	08019961 	.word	0x08019961
 8019950:	08019967 	.word	0x08019967
    case HAL_OK :
      usb_status = USBD_OK;
 8019954:	2300      	movs	r3, #0
 8019956:	73fb      	strb	r3, [r7, #15]
    break;
 8019958:	e00b      	b.n	8019972 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801995a:	2303      	movs	r3, #3
 801995c:	73fb      	strb	r3, [r7, #15]
    break;
 801995e:	e008      	b.n	8019972 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019960:	2301      	movs	r3, #1
 8019962:	73fb      	strb	r3, [r7, #15]
    break;
 8019964:	e005      	b.n	8019972 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019966:	2303      	movs	r3, #3
 8019968:	73fb      	strb	r3, [r7, #15]
    break;
 801996a:	e002      	b.n	8019972 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801996c:	2303      	movs	r3, #3
 801996e:	73fb      	strb	r3, [r7, #15]
    break;
 8019970:	bf00      	nop
  }
  return usb_status;
 8019972:	7bfb      	ldrb	r3, [r7, #15]
}
 8019974:	4618      	mov	r0, r3
 8019976:	3710      	adds	r7, #16
 8019978:	46bd      	mov	sp, r7
 801997a:	bd80      	pop	{r7, pc}

0801997c <USBD_LL_CloseEP>:



USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b084      	sub	sp, #16
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
 8019984:	460b      	mov	r3, r1
 8019986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019988:	2300      	movs	r3, #0
 801998a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801998c:	2300      	movs	r3, #0
 801998e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019996:	78fa      	ldrb	r2, [r7, #3]
 8019998:	4611      	mov	r1, r2
 801999a:	4618      	mov	r0, r3
 801999c:	f7f1 fecf 	bl	800b73e <HAL_PCD_EP_Close>
 80199a0:	4603      	mov	r3, r0
 80199a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80199a4:	7bbb      	ldrb	r3, [r7, #14]
 80199a6:	2b03      	cmp	r3, #3
 80199a8:	d816      	bhi.n	80199d8 <USBD_LL_CloseEP+0x5c>
 80199aa:	a201      	add	r2, pc, #4	; (adr r2, 80199b0 <USBD_LL_CloseEP+0x34>)
 80199ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199b0:	080199c1 	.word	0x080199c1
 80199b4:	080199c7 	.word	0x080199c7
 80199b8:	080199cd 	.word	0x080199cd
 80199bc:	080199d3 	.word	0x080199d3
    case HAL_OK :
      usb_status = USBD_OK;
 80199c0:	2300      	movs	r3, #0
 80199c2:	73fb      	strb	r3, [r7, #15]
    break;
 80199c4:	e00b      	b.n	80199de <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80199c6:	2303      	movs	r3, #3
 80199c8:	73fb      	strb	r3, [r7, #15]
    break;
 80199ca:	e008      	b.n	80199de <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80199cc:	2301      	movs	r3, #1
 80199ce:	73fb      	strb	r3, [r7, #15]
    break;
 80199d0:	e005      	b.n	80199de <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80199d2:	2303      	movs	r3, #3
 80199d4:	73fb      	strb	r3, [r7, #15]
    break;
 80199d6:	e002      	b.n	80199de <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80199d8:	2303      	movs	r3, #3
 80199da:	73fb      	strb	r3, [r7, #15]
    break;
 80199dc:	bf00      	nop
  }
  return usb_status;
 80199de:	7bfb      	ldrb	r3, [r7, #15]
}
 80199e0:	4618      	mov	r0, r3
 80199e2:	3710      	adds	r7, #16
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bd80      	pop	{r7, pc}

080199e8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b084      	sub	sp, #16
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
 80199f0:	460b      	mov	r3, r1
 80199f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199f4:	2300      	movs	r3, #0
 80199f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199f8:	2300      	movs	r3, #0
 80199fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019a02:	78fa      	ldrb	r2, [r7, #3]
 8019a04:	4611      	mov	r1, r2
 8019a06:	4618      	mov	r0, r3
 8019a08:	f7f2 f82e 	bl	800ba68 <HAL_PCD_EP_Flush>
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a10:	7bbb      	ldrb	r3, [r7, #14]
 8019a12:	2b03      	cmp	r3, #3
 8019a14:	d816      	bhi.n	8019a44 <USBD_LL_FlushEP+0x5c>
 8019a16:	a201      	add	r2, pc, #4	; (adr r2, 8019a1c <USBD_LL_FlushEP+0x34>)
 8019a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a1c:	08019a2d 	.word	0x08019a2d
 8019a20:	08019a33 	.word	0x08019a33
 8019a24:	08019a39 	.word	0x08019a39
 8019a28:	08019a3f 	.word	0x08019a3f
    case HAL_OK :
      usb_status = USBD_OK;
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8019a30:	e00b      	b.n	8019a4a <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a32:	2303      	movs	r3, #3
 8019a34:	73fb      	strb	r3, [r7, #15]
    break;
 8019a36:	e008      	b.n	8019a4a <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a38:	2301      	movs	r3, #1
 8019a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8019a3c:	e005      	b.n	8019a4a <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a3e:	2303      	movs	r3, #3
 8019a40:	73fb      	strb	r3, [r7, #15]
    break;
 8019a42:	e002      	b.n	8019a4a <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019a44:	2303      	movs	r3, #3
 8019a46:	73fb      	strb	r3, [r7, #15]
    break;
 8019a48:	bf00      	nop
  }
  return usb_status;
 8019a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	3710      	adds	r7, #16
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}

08019a54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b084      	sub	sp, #16
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	6078      	str	r0, [r7, #4]
 8019a5c:	460b      	mov	r3, r1
 8019a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a60:	2300      	movs	r3, #0
 8019a62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a64:	2300      	movs	r3, #0
 8019a66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019a6e:	78fa      	ldrb	r2, [r7, #3]
 8019a70:	4611      	mov	r1, r2
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7f1 ff40 	bl	800b8f8 <HAL_PCD_EP_SetStall>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a7c:	7bbb      	ldrb	r3, [r7, #14]
 8019a7e:	2b03      	cmp	r3, #3
 8019a80:	d816      	bhi.n	8019ab0 <USBD_LL_StallEP+0x5c>
 8019a82:	a201      	add	r2, pc, #4	; (adr r2, 8019a88 <USBD_LL_StallEP+0x34>)
 8019a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a88:	08019a99 	.word	0x08019a99
 8019a8c:	08019a9f 	.word	0x08019a9f
 8019a90:	08019aa5 	.word	0x08019aa5
 8019a94:	08019aab 	.word	0x08019aab
    case HAL_OK :
      usb_status = USBD_OK;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8019a9c:	e00b      	b.n	8019ab6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a9e:	2303      	movs	r3, #3
 8019aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8019aa2:	e008      	b.n	8019ab6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019aa4:	2301      	movs	r3, #1
 8019aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8019aa8:	e005      	b.n	8019ab6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019aaa:	2303      	movs	r3, #3
 8019aac:	73fb      	strb	r3, [r7, #15]
    break;
 8019aae:	e002      	b.n	8019ab6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019ab0:	2303      	movs	r3, #3
 8019ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8019ab4:	bf00      	nop
  }
  return usb_status;
 8019ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ab8:	4618      	mov	r0, r3
 8019aba:	3710      	adds	r7, #16
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}

08019ac0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b084      	sub	sp, #16
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
 8019ac8:	460b      	mov	r3, r1
 8019aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019acc:	2300      	movs	r3, #0
 8019ace:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019ada:	78fa      	ldrb	r2, [r7, #3]
 8019adc:	4611      	mov	r1, r2
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7f1 ff6c 	bl	800b9bc <HAL_PCD_EP_ClrStall>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019ae8:	7bbb      	ldrb	r3, [r7, #14]
 8019aea:	2b03      	cmp	r3, #3
 8019aec:	d816      	bhi.n	8019b1c <USBD_LL_ClearStallEP+0x5c>
 8019aee:	a201      	add	r2, pc, #4	; (adr r2, 8019af4 <USBD_LL_ClearStallEP+0x34>)
 8019af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019af4:	08019b05 	.word	0x08019b05
 8019af8:	08019b0b 	.word	0x08019b0b
 8019afc:	08019b11 	.word	0x08019b11
 8019b00:	08019b17 	.word	0x08019b17
    case HAL_OK :
      usb_status = USBD_OK;
 8019b04:	2300      	movs	r3, #0
 8019b06:	73fb      	strb	r3, [r7, #15]
    break;
 8019b08:	e00b      	b.n	8019b22 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b0a:	2303      	movs	r3, #3
 8019b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b0e:	e008      	b.n	8019b22 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b10:	2301      	movs	r3, #1
 8019b12:	73fb      	strb	r3, [r7, #15]
    break;
 8019b14:	e005      	b.n	8019b22 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b16:	2303      	movs	r3, #3
 8019b18:	73fb      	strb	r3, [r7, #15]
    break;
 8019b1a:	e002      	b.n	8019b22 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b1c:	2303      	movs	r3, #3
 8019b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8019b20:	bf00      	nop
  }
  return usb_status;
 8019b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b24:	4618      	mov	r0, r3
 8019b26:	3710      	adds	r7, #16
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	bd80      	pop	{r7, pc}

08019b2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b2c:	b480      	push	{r7}
 8019b2e:	b085      	sub	sp, #20
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
 8019b34:	460b      	mov	r3, r1
 8019b36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	da0b      	bge.n	8019b60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019b48:	78fb      	ldrb	r3, [r7, #3]
 8019b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019b4e:	68f9      	ldr	r1, [r7, #12]
 8019b50:	4613      	mov	r3, r2
 8019b52:	00db      	lsls	r3, r3, #3
 8019b54:	1a9b      	subs	r3, r3, r2
 8019b56:	009b      	lsls	r3, r3, #2
 8019b58:	440b      	add	r3, r1
 8019b5a:	333e      	adds	r3, #62	; 0x3e
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	e00b      	b.n	8019b78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019b60:	78fb      	ldrb	r3, [r7, #3]
 8019b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019b66:	68f9      	ldr	r1, [r7, #12]
 8019b68:	4613      	mov	r3, r2
 8019b6a:	00db      	lsls	r3, r3, #3
 8019b6c:	1a9b      	subs	r3, r3, r2
 8019b6e:	009b      	lsls	r3, r3, #2
 8019b70:	440b      	add	r3, r1
 8019b72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019b76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019b78:	4618      	mov	r0, r3
 8019b7a:	3714      	adds	r7, #20
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b82:	4770      	bx	lr

08019b84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b084      	sub	sp, #16
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	460b      	mov	r3, r1
 8019b8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b90:	2300      	movs	r3, #0
 8019b92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b94:	2300      	movs	r3, #0
 8019b96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b9e:	78fa      	ldrb	r2, [r7, #3]
 8019ba0:	4611      	mov	r1, r2
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f7f1 fd3e 	bl	800b624 <HAL_PCD_SetAddress>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019bac:	7bbb      	ldrb	r3, [r7, #14]
 8019bae:	2b03      	cmp	r3, #3
 8019bb0:	d816      	bhi.n	8019be0 <USBD_LL_SetUSBAddress+0x5c>
 8019bb2:	a201      	add	r2, pc, #4	; (adr r2, 8019bb8 <USBD_LL_SetUSBAddress+0x34>)
 8019bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bb8:	08019bc9 	.word	0x08019bc9
 8019bbc:	08019bcf 	.word	0x08019bcf
 8019bc0:	08019bd5 	.word	0x08019bd5
 8019bc4:	08019bdb 	.word	0x08019bdb
    case HAL_OK :
      usb_status = USBD_OK;
 8019bc8:	2300      	movs	r3, #0
 8019bca:	73fb      	strb	r3, [r7, #15]
    break;
 8019bcc:	e00b      	b.n	8019be6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bce:	2303      	movs	r3, #3
 8019bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8019bd2:	e008      	b.n	8019be6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8019bd8:	e005      	b.n	8019be6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bda:	2303      	movs	r3, #3
 8019bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8019bde:	e002      	b.n	8019be6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019be0:	2303      	movs	r3, #3
 8019be2:	73fb      	strb	r3, [r7, #15]
    break;
 8019be4:	bf00      	nop
  }
  return usb_status;
 8019be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3710      	adds	r7, #16
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}

08019bf0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b086      	sub	sp, #24
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	60f8      	str	r0, [r7, #12]
 8019bf8:	607a      	str	r2, [r7, #4]
 8019bfa:	603b      	str	r3, [r7, #0]
 8019bfc:	460b      	mov	r3, r1
 8019bfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c00:	2300      	movs	r3, #0
 8019c02:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c04:	2300      	movs	r3, #0
 8019c06:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019c0e:	7af9      	ldrb	r1, [r7, #11]
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	687a      	ldr	r2, [r7, #4]
 8019c14:	f7f1 fe33 	bl	800b87e <HAL_PCD_EP_Transmit>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019c1c:	7dbb      	ldrb	r3, [r7, #22]
 8019c1e:	2b03      	cmp	r3, #3
 8019c20:	d816      	bhi.n	8019c50 <USBD_LL_Transmit+0x60>
 8019c22:	a201      	add	r2, pc, #4	; (adr r2, 8019c28 <USBD_LL_Transmit+0x38>)
 8019c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c28:	08019c39 	.word	0x08019c39
 8019c2c:	08019c3f 	.word	0x08019c3f
 8019c30:	08019c45 	.word	0x08019c45
 8019c34:	08019c4b 	.word	0x08019c4b
    case HAL_OK :
      usb_status = USBD_OK;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	75fb      	strb	r3, [r7, #23]
    break;
 8019c3c:	e00b      	b.n	8019c56 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c3e:	2303      	movs	r3, #3
 8019c40:	75fb      	strb	r3, [r7, #23]
    break;
 8019c42:	e008      	b.n	8019c56 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c44:	2301      	movs	r3, #1
 8019c46:	75fb      	strb	r3, [r7, #23]
    break;
 8019c48:	e005      	b.n	8019c56 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c4a:	2303      	movs	r3, #3
 8019c4c:	75fb      	strb	r3, [r7, #23]
    break;
 8019c4e:	e002      	b.n	8019c56 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019c50:	2303      	movs	r3, #3
 8019c52:	75fb      	strb	r3, [r7, #23]
    break;
 8019c54:	bf00      	nop
  }
  return usb_status;
 8019c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3718      	adds	r7, #24
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}

08019c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b086      	sub	sp, #24
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	60f8      	str	r0, [r7, #12]
 8019c68:	607a      	str	r2, [r7, #4]
 8019c6a:	603b      	str	r3, [r7, #0]
 8019c6c:	460b      	mov	r3, r1
 8019c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c70:	2300      	movs	r3, #0
 8019c72:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c74:	2300      	movs	r3, #0
 8019c76:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019c7e:	7af9      	ldrb	r1, [r7, #11]
 8019c80:	683b      	ldr	r3, [r7, #0]
 8019c82:	687a      	ldr	r2, [r7, #4]
 8019c84:	f7f1 fda5 	bl	800b7d2 <HAL_PCD_EP_Receive>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019c8c:	7dbb      	ldrb	r3, [r7, #22]
 8019c8e:	2b03      	cmp	r3, #3
 8019c90:	d816      	bhi.n	8019cc0 <USBD_LL_PrepareReceive+0x60>
 8019c92:	a201      	add	r2, pc, #4	; (adr r2, 8019c98 <USBD_LL_PrepareReceive+0x38>)
 8019c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c98:	08019ca9 	.word	0x08019ca9
 8019c9c:	08019caf 	.word	0x08019caf
 8019ca0:	08019cb5 	.word	0x08019cb5
 8019ca4:	08019cbb 	.word	0x08019cbb
    case HAL_OK :
      usb_status = USBD_OK;
 8019ca8:	2300      	movs	r3, #0
 8019caa:	75fb      	strb	r3, [r7, #23]
    break;
 8019cac:	e00b      	b.n	8019cc6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019cae:	2303      	movs	r3, #3
 8019cb0:	75fb      	strb	r3, [r7, #23]
    break;
 8019cb2:	e008      	b.n	8019cc6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	75fb      	strb	r3, [r7, #23]
    break;
 8019cb8:	e005      	b.n	8019cc6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019cba:	2303      	movs	r3, #3
 8019cbc:	75fb      	strb	r3, [r7, #23]
    break;
 8019cbe:	e002      	b.n	8019cc6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019cc0:	2303      	movs	r3, #3
 8019cc2:	75fb      	strb	r3, [r7, #23]
    break;
 8019cc4:	bf00      	nop
  }
  return usb_status;
 8019cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3718      	adds	r7, #24
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}

08019cd0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b082      	sub	sp, #8
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
 8019cd8:	460b      	mov	r3, r1
 8019cda:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019ce2:	78fa      	ldrb	r2, [r7, #3]
 8019ce4:	4611      	mov	r1, r2
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7f1 fdb1 	bl	800b84e <HAL_PCD_EP_GetRxCount>
 8019cec:	4603      	mov	r3, r0
}
 8019cee:	4618      	mov	r0, r3
 8019cf0:	3708      	adds	r7, #8
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	bd80      	pop	{r7, pc}
	...

08019cf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
 8019d00:	460b      	mov	r3, r1
 8019d02:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019d04:	78fb      	ldrb	r3, [r7, #3]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d002      	beq.n	8019d10 <HAL_PCDEx_LPM_Callback+0x18>
 8019d0a:	2b01      	cmp	r3, #1
 8019d0c:	d01f      	beq.n	8019d4e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019d0e:	e03b      	b.n	8019d88 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6a1b      	ldr	r3, [r3, #32]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d007      	beq.n	8019d28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019d18:	f000 f854 	bl	8019dc4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019d1c:	4b1c      	ldr	r3, [pc, #112]	; (8019d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8019d1e:	691b      	ldr	r3, [r3, #16]
 8019d20:	4a1b      	ldr	r2, [pc, #108]	; (8019d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8019d22:	f023 0306 	bic.w	r3, r3, #6
 8019d26:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	687a      	ldr	r2, [r7, #4]
 8019d34:	6812      	ldr	r2, [r2, #0]
 8019d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019d3a:	f023 0301 	bic.w	r3, r3, #1
 8019d3e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d46:	4618      	mov	r0, r3
 8019d48:	f000 faaa 	bl	801a2a0 <USBD_LL_Resume>
    break;
 8019d4c:	e01c      	b.n	8019d88 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	687a      	ldr	r2, [r7, #4]
 8019d5a:	6812      	ldr	r2, [r2, #0]
 8019d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019d60:	f043 0301 	orr.w	r3, r3, #1
 8019d64:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f000 fa81 	bl	801a274 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	6a1b      	ldr	r3, [r3, #32]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d005      	beq.n	8019d86 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019d7a:	4b05      	ldr	r3, [pc, #20]	; (8019d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8019d7c:	691b      	ldr	r3, [r3, #16]
 8019d7e:	4a04      	ldr	r2, [pc, #16]	; (8019d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8019d80:	f043 0306 	orr.w	r3, r3, #6
 8019d84:	6113      	str	r3, [r2, #16]
    break;
 8019d86:	bf00      	nop
}
 8019d88:	bf00      	nop
 8019d8a:	3708      	adds	r7, #8
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}
 8019d90:	e000ed00 	.word	0xe000ed00

08019d94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019d94:	b480      	push	{r7}
 8019d96:	b083      	sub	sp, #12
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
  //static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  static uint32_t mem[(sizeof(USBD_CDCMSC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  //static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */

  return mem;
 8019d9c:	4b03      	ldr	r3, [pc, #12]	; (8019dac <USBD_static_malloc+0x18>)
}
 8019d9e:	4618      	mov	r0, r3
 8019da0:	370c      	adds	r7, #12
 8019da2:	46bd      	mov	sp, r7
 8019da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da8:	4770      	bx	lr
 8019daa:	bf00      	nop
 8019dac:	20001c5c 	.word	0x20001c5c

08019db0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019db0:	b480      	push	{r7}
 8019db2:	b083      	sub	sp, #12
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]

}
 8019db8:	bf00      	nop
 8019dba:	370c      	adds	r7, #12
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc2:	4770      	bx	lr

08019dc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019dc8:	f7eb fff4 	bl	8005db4 <SystemClock_Config>
}
 8019dcc:	bf00      	nop
 8019dce:	bd80      	pop	{r7, pc}

08019dd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b086      	sub	sp, #24
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	60f8      	str	r0, [r7, #12]
 8019dd8:	60b9      	str	r1, [r7, #8]
 8019dda:	4613      	mov	r3, r2
 8019ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d101      	bne.n	8019de8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019de4:	2303      	movs	r3, #3
 8019de6:	e023      	b.n	8019e30 <USBD_Init+0x60>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	2200      	movs	r2, #0
 8019dec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserDataCDC = NULL;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	2200      	movs	r2, #0
 8019df4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pdev->pUserDataMSC = NULL;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	2200      	movs	r2, #0
 8019e04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019e08:	68bb      	ldr	r3, [r7, #8]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d003      	beq.n	8019e16 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	68ba      	ldr	r2, [r7, #8]
 8019e12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	2201      	movs	r2, #1
 8019e1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	79fa      	ldrb	r2, [r7, #7]
 8019e22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8019e24:	68f8      	ldr	r0, [r7, #12]
 8019e26:	f7ff fce3 	bl	80197f0 <USBD_LL_Init>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8019e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019e30:	4618      	mov	r0, r3
 8019e32:	3718      	adds	r7, #24
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b084      	sub	sp, #16
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
 8019e40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019e42:	2300      	movs	r3, #0
 8019e44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d101      	bne.n	8019e50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8019e4c:	2303      	movs	r3, #3
 8019e4e:	e016      	b.n	8019e7e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	683a      	ldr	r2, [r7, #0]
 8019e54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d00b      	beq.n	8019e7c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e6c:	f107 020e 	add.w	r2, r7, #14
 8019e70:	4610      	mov	r0, r2
 8019e72:	4798      	blx	r3
 8019e74:	4602      	mov	r2, r0
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8019e7c:	2300      	movs	r3, #0
}
 8019e7e:	4618      	mov	r0, r3
 8019e80:	3710      	adds	r7, #16
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}

08019e86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8019e86:	b580      	push	{r7, lr}
 8019e88:	b082      	sub	sp, #8
 8019e8a:	af00      	add	r7, sp, #0
 8019e8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8019e8e:	6878      	ldr	r0, [r7, #4]
 8019e90:	f7ff fd04 	bl	801989c <USBD_LL_Start>
 8019e94:	4603      	mov	r3, r0
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	3708      	adds	r7, #8
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	bd80      	pop	{r7, pc}

08019e9e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019e9e:	b480      	push	{r7}
 8019ea0:	b083      	sub	sp, #12
 8019ea2:	af00      	add	r7, sp, #0
 8019ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019ea6:	2300      	movs	r3, #0
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	370c      	adds	r7, #12
 8019eac:	46bd      	mov	sp, r7
 8019eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb2:	4770      	bx	lr

08019eb4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b084      	sub	sp, #16
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
 8019ebc:	460b      	mov	r3, r1
 8019ebe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019ec0:	2303      	movs	r3, #3
 8019ec2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d009      	beq.n	8019ee2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	78fa      	ldrb	r2, [r7, #3]
 8019ed8:	4611      	mov	r1, r2
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	4798      	blx	r3
 8019ede:	4603      	mov	r3, r0
 8019ee0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8019ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	3710      	adds	r7, #16
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bd80      	pop	{r7, pc}

08019eec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b082      	sub	sp, #8
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	6078      	str	r0, [r7, #4]
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d007      	beq.n	8019f12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	78fa      	ldrb	r2, [r7, #3]
 8019f0c:	4611      	mov	r1, r2
 8019f0e:	6878      	ldr	r0, [r7, #4]
 8019f10:	4798      	blx	r3
  }

  return USBD_OK;
 8019f12:	2300      	movs	r3, #0
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	3708      	adds	r7, #8
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd80      	pop	{r7, pc}

08019f1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b084      	sub	sp, #16
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
 8019f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019f2c:	6839      	ldr	r1, [r7, #0]
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f000 ffba 	bl	801aea8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	2201      	movs	r2, #1
 8019f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8019f42:	461a      	mov	r2, r3
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8019f50:	f003 031f 	and.w	r3, r3, #31
 8019f54:	2b02      	cmp	r3, #2
 8019f56:	d01a      	beq.n	8019f8e <USBD_LL_SetupStage+0x72>
 8019f58:	2b02      	cmp	r3, #2
 8019f5a:	d822      	bhi.n	8019fa2 <USBD_LL_SetupStage+0x86>
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d002      	beq.n	8019f66 <USBD_LL_SetupStage+0x4a>
 8019f60:	2b01      	cmp	r3, #1
 8019f62:	d00a      	beq.n	8019f7a <USBD_LL_SetupStage+0x5e>
 8019f64:	e01d      	b.n	8019fa2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019f6c:	4619      	mov	r1, r3
 8019f6e:	6878      	ldr	r0, [r7, #4]
 8019f70:	f000 fa62 	bl	801a438 <USBD_StdDevReq>
 8019f74:	4603      	mov	r3, r0
 8019f76:	73fb      	strb	r3, [r7, #15]
      break;
 8019f78:	e020      	b.n	8019fbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019f80:	4619      	mov	r1, r3
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f000 fac6 	bl	801a514 <USBD_StdItfReq>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8019f8c:	e016      	b.n	8019fbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019f94:	4619      	mov	r1, r3
 8019f96:	6878      	ldr	r0, [r7, #4]
 8019f98:	f000 fb05 	bl	801a5a6 <USBD_StdEPReq>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8019fa0:	e00c      	b.n	8019fbc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8019fa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019fac:	b2db      	uxtb	r3, r3
 8019fae:	4619      	mov	r1, r3
 8019fb0:	6878      	ldr	r0, [r7, #4]
 8019fb2:	f7ff fd4f 	bl	8019a54 <USBD_LL_StallEP>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8019fba:	bf00      	nop
  }

  return ret;
 8019fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	3710      	adds	r7, #16
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	bd80      	pop	{r7, pc}

08019fc6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8019fc6:	b580      	push	{r7, lr}
 8019fc8:	b086      	sub	sp, #24
 8019fca:	af00      	add	r7, sp, #0
 8019fcc:	60f8      	str	r0, [r7, #12]
 8019fce:	460b      	mov	r3, r1
 8019fd0:	607a      	str	r2, [r7, #4]
 8019fd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8019fd4:	7afb      	ldrb	r3, [r7, #11]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d138      	bne.n	801a04c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8019fe0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8019fe8:	2b03      	cmp	r3, #3
 8019fea:	d14a      	bne.n	801a082 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8019fec:	693b      	ldr	r3, [r7, #16]
 8019fee:	689a      	ldr	r2, [r3, #8]
 8019ff0:	693b      	ldr	r3, [r7, #16]
 8019ff2:	68db      	ldr	r3, [r3, #12]
 8019ff4:	429a      	cmp	r2, r3
 8019ff6:	d913      	bls.n	801a020 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8019ff8:	693b      	ldr	r3, [r7, #16]
 8019ffa:	689a      	ldr	r2, [r3, #8]
 8019ffc:	693b      	ldr	r3, [r7, #16]
 8019ffe:	68db      	ldr	r3, [r3, #12]
 801a000:	1ad2      	subs	r2, r2, r3
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801a006:	693b      	ldr	r3, [r7, #16]
 801a008:	68da      	ldr	r2, [r3, #12]
 801a00a:	693b      	ldr	r3, [r7, #16]
 801a00c:	689b      	ldr	r3, [r3, #8]
 801a00e:	4293      	cmp	r3, r2
 801a010:	bf28      	it	cs
 801a012:	4613      	movcs	r3, r2
 801a014:	461a      	mov	r2, r3
 801a016:	6879      	ldr	r1, [r7, #4]
 801a018:	68f8      	ldr	r0, [r7, #12]
 801a01a:	f001 f95b 	bl	801b2d4 <USBD_CtlContinueRx>
 801a01e:	e030      	b.n	801a082 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a026:	b2db      	uxtb	r3, r3
 801a028:	2b03      	cmp	r3, #3
 801a02a:	d10b      	bne.n	801a044 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a032:	691b      	ldr	r3, [r3, #16]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d005      	beq.n	801a044 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a03e:	691b      	ldr	r3, [r3, #16]
 801a040:	68f8      	ldr	r0, [r7, #12]
 801a042:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801a044:	68f8      	ldr	r0, [r7, #12]
 801a046:	f001 f956 	bl	801b2f6 <USBD_CtlSendStatus>
 801a04a:	e01a      	b.n	801a082 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a052:	b2db      	uxtb	r3, r3
 801a054:	2b03      	cmp	r3, #3
 801a056:	d114      	bne.n	801a082 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a05e:	699b      	ldr	r3, [r3, #24]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d00e      	beq.n	801a082 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a06a:	699b      	ldr	r3, [r3, #24]
 801a06c:	7afa      	ldrb	r2, [r7, #11]
 801a06e:	4611      	mov	r1, r2
 801a070:	68f8      	ldr	r0, [r7, #12]
 801a072:	4798      	blx	r3
 801a074:	4603      	mov	r3, r0
 801a076:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a078:	7dfb      	ldrb	r3, [r7, #23]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d001      	beq.n	801a082 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a07e:	7dfb      	ldrb	r3, [r7, #23]
 801a080:	e000      	b.n	801a084 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a082:	2300      	movs	r3, #0
}
 801a084:	4618      	mov	r0, r3
 801a086:	3718      	adds	r7, #24
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b086      	sub	sp, #24
 801a090:	af00      	add	r7, sp, #0
 801a092:	60f8      	str	r0, [r7, #12]
 801a094:	460b      	mov	r3, r1
 801a096:	607a      	str	r2, [r7, #4]
 801a098:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a09a:	7afb      	ldrb	r3, [r7, #11]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d16b      	bne.n	801a178 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	3314      	adds	r3, #20
 801a0a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a0ac:	2b02      	cmp	r3, #2
 801a0ae:	d156      	bne.n	801a15e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a0b0:	693b      	ldr	r3, [r7, #16]
 801a0b2:	689a      	ldr	r2, [r3, #8]
 801a0b4:	693b      	ldr	r3, [r7, #16]
 801a0b6:	68db      	ldr	r3, [r3, #12]
 801a0b8:	429a      	cmp	r2, r3
 801a0ba:	d914      	bls.n	801a0e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a0bc:	693b      	ldr	r3, [r7, #16]
 801a0be:	689a      	ldr	r2, [r3, #8]
 801a0c0:	693b      	ldr	r3, [r7, #16]
 801a0c2:	68db      	ldr	r3, [r3, #12]
 801a0c4:	1ad2      	subs	r2, r2, r3
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a0ca:	693b      	ldr	r3, [r7, #16]
 801a0cc:	689b      	ldr	r3, [r3, #8]
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	6879      	ldr	r1, [r7, #4]
 801a0d2:	68f8      	ldr	r0, [r7, #12]
 801a0d4:	f001 f8d0 	bl	801b278 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a0d8:	2300      	movs	r3, #0
 801a0da:	2200      	movs	r2, #0
 801a0dc:	2100      	movs	r1, #0
 801a0de:	68f8      	ldr	r0, [r7, #12]
 801a0e0:	f7ff fdbe 	bl	8019c60 <USBD_LL_PrepareReceive>
 801a0e4:	e03b      	b.n	801a15e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	68da      	ldr	r2, [r3, #12]
 801a0ea:	693b      	ldr	r3, [r7, #16]
 801a0ec:	689b      	ldr	r3, [r3, #8]
 801a0ee:	429a      	cmp	r2, r3
 801a0f0:	d11c      	bne.n	801a12c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a0f2:	693b      	ldr	r3, [r7, #16]
 801a0f4:	685a      	ldr	r2, [r3, #4]
 801a0f6:	693b      	ldr	r3, [r7, #16]
 801a0f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d316      	bcc.n	801a12c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	685a      	ldr	r2, [r3, #4]
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a108:	429a      	cmp	r2, r3
 801a10a:	d20f      	bcs.n	801a12c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a10c:	2200      	movs	r2, #0
 801a10e:	2100      	movs	r1, #0
 801a110:	68f8      	ldr	r0, [r7, #12]
 801a112:	f001 f8b1 	bl	801b278 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	2200      	movs	r2, #0
 801a11a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a11e:	2300      	movs	r3, #0
 801a120:	2200      	movs	r2, #0
 801a122:	2100      	movs	r1, #0
 801a124:	68f8      	ldr	r0, [r7, #12]
 801a126:	f7ff fd9b 	bl	8019c60 <USBD_LL_PrepareReceive>
 801a12a:	e018      	b.n	801a15e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a132:	b2db      	uxtb	r3, r3
 801a134:	2b03      	cmp	r3, #3
 801a136:	d10b      	bne.n	801a150 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a13e:	68db      	ldr	r3, [r3, #12]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d005      	beq.n	801a150 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a14a:	68db      	ldr	r3, [r3, #12]
 801a14c:	68f8      	ldr	r0, [r7, #12]
 801a14e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a150:	2180      	movs	r1, #128	; 0x80
 801a152:	68f8      	ldr	r0, [r7, #12]
 801a154:	f7ff fc7e 	bl	8019a54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a158:	68f8      	ldr	r0, [r7, #12]
 801a15a:	f001 f8df 	bl	801b31c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a164:	2b01      	cmp	r3, #1
 801a166:	d122      	bne.n	801a1ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a168:	68f8      	ldr	r0, [r7, #12]
 801a16a:	f7ff fe98 	bl	8019e9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	2200      	movs	r2, #0
 801a172:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a176:	e01a      	b.n	801a1ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a17e:	b2db      	uxtb	r3, r3
 801a180:	2b03      	cmp	r3, #3
 801a182:	d114      	bne.n	801a1ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a18a:	695b      	ldr	r3, [r3, #20]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d00e      	beq.n	801a1ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a196:	695b      	ldr	r3, [r3, #20]
 801a198:	7afa      	ldrb	r2, [r7, #11]
 801a19a:	4611      	mov	r1, r2
 801a19c:	68f8      	ldr	r0, [r7, #12]
 801a19e:	4798      	blx	r3
 801a1a0:	4603      	mov	r3, r0
 801a1a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a1a4:	7dfb      	ldrb	r3, [r7, #23]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d001      	beq.n	801a1ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801a1aa:	7dfb      	ldrb	r3, [r7, #23]
 801a1ac:	e000      	b.n	801a1b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801a1ae:	2300      	movs	r3, #0
}
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	3718      	adds	r7, #24
 801a1b4:	46bd      	mov	sp, r7
 801a1b6:	bd80      	pop	{r7, pc}

0801a1b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b082      	sub	sp, #8
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	2201      	movs	r2, #1
 801a1c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	2200      	movs	r2, #0
 801a1cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	2200      	movs	r2, #0
 801a1da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d101      	bne.n	801a1ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801a1e8:	2303      	movs	r3, #3
 801a1ea:	e02f      	b.n	801a24c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassDataCDC != NULL)
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d00f      	beq.n	801a216 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1fc:	685b      	ldr	r3, [r3, #4]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d009      	beq.n	801a216 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a208:	685b      	ldr	r3, [r3, #4]
 801a20a:	687a      	ldr	r2, [r7, #4]
 801a20c:	6852      	ldr	r2, [r2, #4]
 801a20e:	b2d2      	uxtb	r2, r2
 801a210:	4611      	mov	r1, r2
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a216:	2340      	movs	r3, #64	; 0x40
 801a218:	2200      	movs	r2, #0
 801a21a:	2100      	movs	r1, #0
 801a21c:	6878      	ldr	r0, [r7, #4]
 801a21e:	f7ff fb6f 	bl	8019900 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	2201      	movs	r2, #1
 801a226:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	2240      	movs	r2, #64	; 0x40
 801a22e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a232:	2340      	movs	r3, #64	; 0x40
 801a234:	2200      	movs	r2, #0
 801a236:	2180      	movs	r1, #128	; 0x80
 801a238:	6878      	ldr	r0, [r7, #4]
 801a23a:	f7ff fb61 	bl	8019900 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	2201      	movs	r2, #1
 801a242:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	2240      	movs	r2, #64	; 0x40
 801a248:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801a24a:	2300      	movs	r3, #0
}
 801a24c:	4618      	mov	r0, r3
 801a24e:	3708      	adds	r7, #8
 801a250:	46bd      	mov	sp, r7
 801a252:	bd80      	pop	{r7, pc}

0801a254 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a254:	b480      	push	{r7}
 801a256:	b083      	sub	sp, #12
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	460b      	mov	r3, r1
 801a25e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	78fa      	ldrb	r2, [r7, #3]
 801a264:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a266:	2300      	movs	r3, #0
}
 801a268:	4618      	mov	r0, r3
 801a26a:	370c      	adds	r7, #12
 801a26c:	46bd      	mov	sp, r7
 801a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a272:	4770      	bx	lr

0801a274 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a274:	b480      	push	{r7}
 801a276:	b083      	sub	sp, #12
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a282:	b2da      	uxtb	r2, r3
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2204      	movs	r2, #4
 801a28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a292:	2300      	movs	r3, #0
}
 801a294:	4618      	mov	r0, r3
 801a296:	370c      	adds	r7, #12
 801a298:	46bd      	mov	sp, r7
 801a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a29e:	4770      	bx	lr

0801a2a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a2a0:	b480      	push	{r7}
 801a2a2:	b083      	sub	sp, #12
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	2b04      	cmp	r3, #4
 801a2b2:	d106      	bne.n	801a2c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801a2ba:	b2da      	uxtb	r2, r3
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a2c2:	2300      	movs	r3, #0
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	370c      	adds	r7, #12
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ce:	4770      	bx	lr

0801a2d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b082      	sub	sp, #8
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d101      	bne.n	801a2e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801a2e2:	2303      	movs	r3, #3
 801a2e4:	e012      	b.n	801a30c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2ec:	b2db      	uxtb	r3, r3
 801a2ee:	2b03      	cmp	r3, #3
 801a2f0:	d10b      	bne.n	801a30a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2f8:	69db      	ldr	r3, [r3, #28]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d005      	beq.n	801a30a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a304:	69db      	ldr	r3, [r3, #28]
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a30a:	2300      	movs	r3, #0
}
 801a30c:	4618      	mov	r0, r3
 801a30e:	3708      	adds	r7, #8
 801a310:	46bd      	mov	sp, r7
 801a312:	bd80      	pop	{r7, pc}

0801a314 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801a314:	b580      	push	{r7, lr}
 801a316:	b082      	sub	sp, #8
 801a318:	af00      	add	r7, sp, #0
 801a31a:	6078      	str	r0, [r7, #4]
 801a31c:	460b      	mov	r3, r1
 801a31e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a326:	2b00      	cmp	r3, #0
 801a328:	d101      	bne.n	801a32e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a32a:	2303      	movs	r3, #3
 801a32c:	e014      	b.n	801a358 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a334:	b2db      	uxtb	r3, r3
 801a336:	2b03      	cmp	r3, #3
 801a338:	d10d      	bne.n	801a356 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a340:	6a1b      	ldr	r3, [r3, #32]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d007      	beq.n	801a356 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a34c:	6a1b      	ldr	r3, [r3, #32]
 801a34e:	78fa      	ldrb	r2, [r7, #3]
 801a350:	4611      	mov	r1, r2
 801a352:	6878      	ldr	r0, [r7, #4]
 801a354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a356:	2300      	movs	r3, #0
}
 801a358:	4618      	mov	r0, r3
 801a35a:	3708      	adds	r7, #8
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}

0801a360 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	460b      	mov	r3, r1
 801a36a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a372:	2b00      	cmp	r3, #0
 801a374:	d101      	bne.n	801a37a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a376:	2303      	movs	r3, #3
 801a378:	e014      	b.n	801a3a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a380:	b2db      	uxtb	r3, r3
 801a382:	2b03      	cmp	r3, #3
 801a384:	d10d      	bne.n	801a3a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d007      	beq.n	801a3a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a39a:	78fa      	ldrb	r2, [r7, #3]
 801a39c:	4611      	mov	r1, r2
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a3a2:	2300      	movs	r3, #0
}
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	3708      	adds	r7, #8
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	bd80      	pop	{r7, pc}

0801a3ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801a3ac:	b480      	push	{r7}
 801a3ae:	b083      	sub	sp, #12
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a3b4:	2300      	movs	r3, #0
}
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	370c      	adds	r7, #12
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c0:	4770      	bx	lr

0801a3c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801a3c2:	b580      	push	{r7, lr}
 801a3c4:	b082      	sub	sp, #8
 801a3c6:	af00      	add	r7, sp, #0
 801a3c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2201      	movs	r2, #1
 801a3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d009      	beq.n	801a3f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3e2:	685b      	ldr	r3, [r3, #4]
 801a3e4:	687a      	ldr	r2, [r7, #4]
 801a3e6:	6852      	ldr	r2, [r2, #4]
 801a3e8:	b2d2      	uxtb	r2, r2
 801a3ea:	4611      	mov	r1, r2
 801a3ec:	6878      	ldr	r0, [r7, #4]
 801a3ee:	4798      	blx	r3
  }

  return USBD_OK;
 801a3f0:	2300      	movs	r3, #0
}
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	3708      	adds	r7, #8
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	bd80      	pop	{r7, pc}

0801a3fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a3fa:	b480      	push	{r7}
 801a3fc:	b087      	sub	sp, #28
 801a3fe:	af00      	add	r7, sp, #0
 801a400:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a406:	697b      	ldr	r3, [r7, #20]
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801a40c:	697b      	ldr	r3, [r7, #20]
 801a40e:	3301      	adds	r3, #1
 801a410:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a412:	697b      	ldr	r3, [r7, #20]
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a418:	8a3b      	ldrh	r3, [r7, #16]
 801a41a:	021b      	lsls	r3, r3, #8
 801a41c:	b21a      	sxth	r2, r3
 801a41e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a422:	4313      	orrs	r3, r2
 801a424:	b21b      	sxth	r3, r3
 801a426:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801a428:	89fb      	ldrh	r3, [r7, #14]
}
 801a42a:	4618      	mov	r0, r3
 801a42c:	371c      	adds	r7, #28
 801a42e:	46bd      	mov	sp, r7
 801a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a434:	4770      	bx	lr
	...

0801a438 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b084      	sub	sp, #16
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	6078      	str	r0, [r7, #4]
 801a440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a442:	2300      	movs	r3, #0
 801a444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a446:	683b      	ldr	r3, [r7, #0]
 801a448:	781b      	ldrb	r3, [r3, #0]
 801a44a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a44e:	2b40      	cmp	r3, #64	; 0x40
 801a450:	d005      	beq.n	801a45e <USBD_StdDevReq+0x26>
 801a452:	2b40      	cmp	r3, #64	; 0x40
 801a454:	d853      	bhi.n	801a4fe <USBD_StdDevReq+0xc6>
 801a456:	2b00      	cmp	r3, #0
 801a458:	d00b      	beq.n	801a472 <USBD_StdDevReq+0x3a>
 801a45a:	2b20      	cmp	r3, #32
 801a45c:	d14f      	bne.n	801a4fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a464:	689b      	ldr	r3, [r3, #8]
 801a466:	6839      	ldr	r1, [r7, #0]
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	4798      	blx	r3
 801a46c:	4603      	mov	r3, r0
 801a46e:	73fb      	strb	r3, [r7, #15]
      break;
 801a470:	e04a      	b.n	801a508 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a472:	683b      	ldr	r3, [r7, #0]
 801a474:	785b      	ldrb	r3, [r3, #1]
 801a476:	2b09      	cmp	r3, #9
 801a478:	d83b      	bhi.n	801a4f2 <USBD_StdDevReq+0xba>
 801a47a:	a201      	add	r2, pc, #4	; (adr r2, 801a480 <USBD_StdDevReq+0x48>)
 801a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a480:	0801a4d5 	.word	0x0801a4d5
 801a484:	0801a4e9 	.word	0x0801a4e9
 801a488:	0801a4f3 	.word	0x0801a4f3
 801a48c:	0801a4df 	.word	0x0801a4df
 801a490:	0801a4f3 	.word	0x0801a4f3
 801a494:	0801a4b3 	.word	0x0801a4b3
 801a498:	0801a4a9 	.word	0x0801a4a9
 801a49c:	0801a4f3 	.word	0x0801a4f3
 801a4a0:	0801a4cb 	.word	0x0801a4cb
 801a4a4:	0801a4bd 	.word	0x0801a4bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a4a8:	6839      	ldr	r1, [r7, #0]
 801a4aa:	6878      	ldr	r0, [r7, #4]
 801a4ac:	f000 f9de 	bl	801a86c <USBD_GetDescriptor>
          break;
 801a4b0:	e024      	b.n	801a4fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a4b2:	6839      	ldr	r1, [r7, #0]
 801a4b4:	6878      	ldr	r0, [r7, #4]
 801a4b6:	f000 fb6d 	bl	801ab94 <USBD_SetAddress>
          break;
 801a4ba:	e01f      	b.n	801a4fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a4bc:	6839      	ldr	r1, [r7, #0]
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f000 fbac 	bl	801ac1c <USBD_SetConfig>
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	73fb      	strb	r3, [r7, #15]
          break;
 801a4c8:	e018      	b.n	801a4fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a4ca:	6839      	ldr	r1, [r7, #0]
 801a4cc:	6878      	ldr	r0, [r7, #4]
 801a4ce:	f000 fc4b 	bl	801ad68 <USBD_GetConfig>
          break;
 801a4d2:	e013      	b.n	801a4fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a4d4:	6839      	ldr	r1, [r7, #0]
 801a4d6:	6878      	ldr	r0, [r7, #4]
 801a4d8:	f000 fc7c 	bl	801add4 <USBD_GetStatus>
          break;
 801a4dc:	e00e      	b.n	801a4fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a4de:	6839      	ldr	r1, [r7, #0]
 801a4e0:	6878      	ldr	r0, [r7, #4]
 801a4e2:	f000 fcab 	bl	801ae3c <USBD_SetFeature>
          break;
 801a4e6:	e009      	b.n	801a4fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a4e8:	6839      	ldr	r1, [r7, #0]
 801a4ea:	6878      	ldr	r0, [r7, #4]
 801a4ec:	f000 fcba 	bl	801ae64 <USBD_ClrFeature>
          break;
 801a4f0:	e004      	b.n	801a4fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801a4f2:	6839      	ldr	r1, [r7, #0]
 801a4f4:	6878      	ldr	r0, [r7, #4]
 801a4f6:	f000 fd11 	bl	801af1c <USBD_CtlError>
          break;
 801a4fa:	bf00      	nop
      }
      break;
 801a4fc:	e004      	b.n	801a508 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a4fe:	6839      	ldr	r1, [r7, #0]
 801a500:	6878      	ldr	r0, [r7, #4]
 801a502:	f000 fd0b 	bl	801af1c <USBD_CtlError>
      break;
 801a506:	bf00      	nop
  }

  return ret;
 801a508:	7bfb      	ldrb	r3, [r7, #15]
}
 801a50a:	4618      	mov	r0, r3
 801a50c:	3710      	adds	r7, #16
 801a50e:	46bd      	mov	sp, r7
 801a510:	bd80      	pop	{r7, pc}
 801a512:	bf00      	nop

0801a514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b084      	sub	sp, #16
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
 801a51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a51e:	2300      	movs	r3, #0
 801a520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	781b      	ldrb	r3, [r3, #0]
 801a526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a52a:	2b40      	cmp	r3, #64	; 0x40
 801a52c:	d005      	beq.n	801a53a <USBD_StdItfReq+0x26>
 801a52e:	2b40      	cmp	r3, #64	; 0x40
 801a530:	d82f      	bhi.n	801a592 <USBD_StdItfReq+0x7e>
 801a532:	2b00      	cmp	r3, #0
 801a534:	d001      	beq.n	801a53a <USBD_StdItfReq+0x26>
 801a536:	2b20      	cmp	r3, #32
 801a538:	d12b      	bne.n	801a592 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a540:	b2db      	uxtb	r3, r3
 801a542:	3b01      	subs	r3, #1
 801a544:	2b02      	cmp	r3, #2
 801a546:	d81d      	bhi.n	801a584 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	889b      	ldrh	r3, [r3, #4]
 801a54c:	b2db      	uxtb	r3, r3
 801a54e:	2b03      	cmp	r3, #3
 801a550:	d813      	bhi.n	801a57a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a558:	689b      	ldr	r3, [r3, #8]
 801a55a:	6839      	ldr	r1, [r7, #0]
 801a55c:	6878      	ldr	r0, [r7, #4]
 801a55e:	4798      	blx	r3
 801a560:	4603      	mov	r3, r0
 801a562:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a564:	683b      	ldr	r3, [r7, #0]
 801a566:	88db      	ldrh	r3, [r3, #6]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d110      	bne.n	801a58e <USBD_StdItfReq+0x7a>
 801a56c:	7bfb      	ldrb	r3, [r7, #15]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d10d      	bne.n	801a58e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a572:	6878      	ldr	r0, [r7, #4]
 801a574:	f000 febf 	bl	801b2f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a578:	e009      	b.n	801a58e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801a57a:	6839      	ldr	r1, [r7, #0]
 801a57c:	6878      	ldr	r0, [r7, #4]
 801a57e:	f000 fccd 	bl	801af1c <USBD_CtlError>
          break;
 801a582:	e004      	b.n	801a58e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801a584:	6839      	ldr	r1, [r7, #0]
 801a586:	6878      	ldr	r0, [r7, #4]
 801a588:	f000 fcc8 	bl	801af1c <USBD_CtlError>
          break;
 801a58c:	e000      	b.n	801a590 <USBD_StdItfReq+0x7c>
          break;
 801a58e:	bf00      	nop
      }
      break;
 801a590:	e004      	b.n	801a59c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801a592:	6839      	ldr	r1, [r7, #0]
 801a594:	6878      	ldr	r0, [r7, #4]
 801a596:	f000 fcc1 	bl	801af1c <USBD_CtlError>
      break;
 801a59a:	bf00      	nop
  }

  return ret;
 801a59c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a59e:	4618      	mov	r0, r3
 801a5a0:	3710      	adds	r7, #16
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	bd80      	pop	{r7, pc}

0801a5a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a5a6:	b580      	push	{r7, lr}
 801a5a8:	b084      	sub	sp, #16
 801a5aa:	af00      	add	r7, sp, #0
 801a5ac:	6078      	str	r0, [r7, #4]
 801a5ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	889b      	ldrh	r3, [r3, #4]
 801a5b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	781b      	ldrb	r3, [r3, #0]
 801a5be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a5c2:	2b40      	cmp	r3, #64	; 0x40
 801a5c4:	d007      	beq.n	801a5d6 <USBD_StdEPReq+0x30>
 801a5c6:	2b40      	cmp	r3, #64	; 0x40
 801a5c8:	f200 8145 	bhi.w	801a856 <USBD_StdEPReq+0x2b0>
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d00c      	beq.n	801a5ea <USBD_StdEPReq+0x44>
 801a5d0:	2b20      	cmp	r3, #32
 801a5d2:	f040 8140 	bne.w	801a856 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5dc:	689b      	ldr	r3, [r3, #8]
 801a5de:	6839      	ldr	r1, [r7, #0]
 801a5e0:	6878      	ldr	r0, [r7, #4]
 801a5e2:	4798      	blx	r3
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	73fb      	strb	r3, [r7, #15]
      break;
 801a5e8:	e13a      	b.n	801a860 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	785b      	ldrb	r3, [r3, #1]
 801a5ee:	2b03      	cmp	r3, #3
 801a5f0:	d007      	beq.n	801a602 <USBD_StdEPReq+0x5c>
 801a5f2:	2b03      	cmp	r3, #3
 801a5f4:	f300 8129 	bgt.w	801a84a <USBD_StdEPReq+0x2a4>
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d07f      	beq.n	801a6fc <USBD_StdEPReq+0x156>
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	d03c      	beq.n	801a67a <USBD_StdEPReq+0xd4>
 801a600:	e123      	b.n	801a84a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a608:	b2db      	uxtb	r3, r3
 801a60a:	2b02      	cmp	r3, #2
 801a60c:	d002      	beq.n	801a614 <USBD_StdEPReq+0x6e>
 801a60e:	2b03      	cmp	r3, #3
 801a610:	d016      	beq.n	801a640 <USBD_StdEPReq+0x9a>
 801a612:	e02c      	b.n	801a66e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a614:	7bbb      	ldrb	r3, [r7, #14]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d00d      	beq.n	801a636 <USBD_StdEPReq+0x90>
 801a61a:	7bbb      	ldrb	r3, [r7, #14]
 801a61c:	2b80      	cmp	r3, #128	; 0x80
 801a61e:	d00a      	beq.n	801a636 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a620:	7bbb      	ldrb	r3, [r7, #14]
 801a622:	4619      	mov	r1, r3
 801a624:	6878      	ldr	r0, [r7, #4]
 801a626:	f7ff fa15 	bl	8019a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a62a:	2180      	movs	r1, #128	; 0x80
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f7ff fa11 	bl	8019a54 <USBD_LL_StallEP>
 801a632:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a634:	e020      	b.n	801a678 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801a636:	6839      	ldr	r1, [r7, #0]
 801a638:	6878      	ldr	r0, [r7, #4]
 801a63a:	f000 fc6f 	bl	801af1c <USBD_CtlError>
              break;
 801a63e:	e01b      	b.n	801a678 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a640:	683b      	ldr	r3, [r7, #0]
 801a642:	885b      	ldrh	r3, [r3, #2]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d10e      	bne.n	801a666 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a648:	7bbb      	ldrb	r3, [r7, #14]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d00b      	beq.n	801a666 <USBD_StdEPReq+0xc0>
 801a64e:	7bbb      	ldrb	r3, [r7, #14]
 801a650:	2b80      	cmp	r3, #128	; 0x80
 801a652:	d008      	beq.n	801a666 <USBD_StdEPReq+0xc0>
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	88db      	ldrh	r3, [r3, #6]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d104      	bne.n	801a666 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a65c:	7bbb      	ldrb	r3, [r7, #14]
 801a65e:	4619      	mov	r1, r3
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7ff f9f7 	bl	8019a54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a666:	6878      	ldr	r0, [r7, #4]
 801a668:	f000 fe45 	bl	801b2f6 <USBD_CtlSendStatus>

              break;
 801a66c:	e004      	b.n	801a678 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801a66e:	6839      	ldr	r1, [r7, #0]
 801a670:	6878      	ldr	r0, [r7, #4]
 801a672:	f000 fc53 	bl	801af1c <USBD_CtlError>
              break;
 801a676:	bf00      	nop
          }
          break;
 801a678:	e0ec      	b.n	801a854 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a680:	b2db      	uxtb	r3, r3
 801a682:	2b02      	cmp	r3, #2
 801a684:	d002      	beq.n	801a68c <USBD_StdEPReq+0xe6>
 801a686:	2b03      	cmp	r3, #3
 801a688:	d016      	beq.n	801a6b8 <USBD_StdEPReq+0x112>
 801a68a:	e030      	b.n	801a6ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a68c:	7bbb      	ldrb	r3, [r7, #14]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d00d      	beq.n	801a6ae <USBD_StdEPReq+0x108>
 801a692:	7bbb      	ldrb	r3, [r7, #14]
 801a694:	2b80      	cmp	r3, #128	; 0x80
 801a696:	d00a      	beq.n	801a6ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a698:	7bbb      	ldrb	r3, [r7, #14]
 801a69a:	4619      	mov	r1, r3
 801a69c:	6878      	ldr	r0, [r7, #4]
 801a69e:	f7ff f9d9 	bl	8019a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a6a2:	2180      	movs	r1, #128	; 0x80
 801a6a4:	6878      	ldr	r0, [r7, #4]
 801a6a6:	f7ff f9d5 	bl	8019a54 <USBD_LL_StallEP>
 801a6aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a6ac:	e025      	b.n	801a6fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801a6ae:	6839      	ldr	r1, [r7, #0]
 801a6b0:	6878      	ldr	r0, [r7, #4]
 801a6b2:	f000 fc33 	bl	801af1c <USBD_CtlError>
              break;
 801a6b6:	e020      	b.n	801a6fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a6b8:	683b      	ldr	r3, [r7, #0]
 801a6ba:	885b      	ldrh	r3, [r3, #2]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d11b      	bne.n	801a6f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a6c0:	7bbb      	ldrb	r3, [r7, #14]
 801a6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d004      	beq.n	801a6d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a6ca:	7bbb      	ldrb	r3, [r7, #14]
 801a6cc:	4619      	mov	r1, r3
 801a6ce:	6878      	ldr	r0, [r7, #4]
 801a6d0:	f7ff f9f6 	bl	8019ac0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a6d4:	6878      	ldr	r0, [r7, #4]
 801a6d6:	f000 fe0e 	bl	801b2f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a6e0:	689b      	ldr	r3, [r3, #8]
 801a6e2:	6839      	ldr	r1, [r7, #0]
 801a6e4:	6878      	ldr	r0, [r7, #4]
 801a6e6:	4798      	blx	r3
 801a6e8:	4603      	mov	r3, r0
 801a6ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801a6ec:	e004      	b.n	801a6f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801a6ee:	6839      	ldr	r1, [r7, #0]
 801a6f0:	6878      	ldr	r0, [r7, #4]
 801a6f2:	f000 fc13 	bl	801af1c <USBD_CtlError>
              break;
 801a6f6:	e000      	b.n	801a6fa <USBD_StdEPReq+0x154>
              break;
 801a6f8:	bf00      	nop
          }
          break;
 801a6fa:	e0ab      	b.n	801a854 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a702:	b2db      	uxtb	r3, r3
 801a704:	2b02      	cmp	r3, #2
 801a706:	d002      	beq.n	801a70e <USBD_StdEPReq+0x168>
 801a708:	2b03      	cmp	r3, #3
 801a70a:	d032      	beq.n	801a772 <USBD_StdEPReq+0x1cc>
 801a70c:	e097      	b.n	801a83e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a70e:	7bbb      	ldrb	r3, [r7, #14]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d007      	beq.n	801a724 <USBD_StdEPReq+0x17e>
 801a714:	7bbb      	ldrb	r3, [r7, #14]
 801a716:	2b80      	cmp	r3, #128	; 0x80
 801a718:	d004      	beq.n	801a724 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801a71a:	6839      	ldr	r1, [r7, #0]
 801a71c:	6878      	ldr	r0, [r7, #4]
 801a71e:	f000 fbfd 	bl	801af1c <USBD_CtlError>
                break;
 801a722:	e091      	b.n	801a848 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	da0b      	bge.n	801a744 <USBD_StdEPReq+0x19e>
 801a72c:	7bbb      	ldrb	r3, [r7, #14]
 801a72e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a732:	4613      	mov	r3, r2
 801a734:	009b      	lsls	r3, r3, #2
 801a736:	4413      	add	r3, r2
 801a738:	009b      	lsls	r3, r3, #2
 801a73a:	3310      	adds	r3, #16
 801a73c:	687a      	ldr	r2, [r7, #4]
 801a73e:	4413      	add	r3, r2
 801a740:	3304      	adds	r3, #4
 801a742:	e00b      	b.n	801a75c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a744:	7bbb      	ldrb	r3, [r7, #14]
 801a746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a74a:	4613      	mov	r3, r2
 801a74c:	009b      	lsls	r3, r3, #2
 801a74e:	4413      	add	r3, r2
 801a750:	009b      	lsls	r3, r3, #2
 801a752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a756:	687a      	ldr	r2, [r7, #4]
 801a758:	4413      	add	r3, r2
 801a75a:	3304      	adds	r3, #4
 801a75c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	2200      	movs	r2, #0
 801a762:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a764:	68bb      	ldr	r3, [r7, #8]
 801a766:	2202      	movs	r2, #2
 801a768:	4619      	mov	r1, r3
 801a76a:	6878      	ldr	r0, [r7, #4]
 801a76c:	f000 fd69 	bl	801b242 <USBD_CtlSendData>
              break;
 801a770:	e06a      	b.n	801a848 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a776:	2b00      	cmp	r3, #0
 801a778:	da11      	bge.n	801a79e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a77a:	7bbb      	ldrb	r3, [r7, #14]
 801a77c:	f003 020f 	and.w	r2, r3, #15
 801a780:	6879      	ldr	r1, [r7, #4]
 801a782:	4613      	mov	r3, r2
 801a784:	009b      	lsls	r3, r3, #2
 801a786:	4413      	add	r3, r2
 801a788:	009b      	lsls	r3, r3, #2
 801a78a:	440b      	add	r3, r1
 801a78c:	3324      	adds	r3, #36	; 0x24
 801a78e:	881b      	ldrh	r3, [r3, #0]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d117      	bne.n	801a7c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a794:	6839      	ldr	r1, [r7, #0]
 801a796:	6878      	ldr	r0, [r7, #4]
 801a798:	f000 fbc0 	bl	801af1c <USBD_CtlError>
                  break;
 801a79c:	e054      	b.n	801a848 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a79e:	7bbb      	ldrb	r3, [r7, #14]
 801a7a0:	f003 020f 	and.w	r2, r3, #15
 801a7a4:	6879      	ldr	r1, [r7, #4]
 801a7a6:	4613      	mov	r3, r2
 801a7a8:	009b      	lsls	r3, r3, #2
 801a7aa:	4413      	add	r3, r2
 801a7ac:	009b      	lsls	r3, r3, #2
 801a7ae:	440b      	add	r3, r1
 801a7b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a7b4:	881b      	ldrh	r3, [r3, #0]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d104      	bne.n	801a7c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a7ba:	6839      	ldr	r1, [r7, #0]
 801a7bc:	6878      	ldr	r0, [r7, #4]
 801a7be:	f000 fbad 	bl	801af1c <USBD_CtlError>
                  break;
 801a7c2:	e041      	b.n	801a848 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	da0b      	bge.n	801a7e4 <USBD_StdEPReq+0x23e>
 801a7cc:	7bbb      	ldrb	r3, [r7, #14]
 801a7ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a7d2:	4613      	mov	r3, r2
 801a7d4:	009b      	lsls	r3, r3, #2
 801a7d6:	4413      	add	r3, r2
 801a7d8:	009b      	lsls	r3, r3, #2
 801a7da:	3310      	adds	r3, #16
 801a7dc:	687a      	ldr	r2, [r7, #4]
 801a7de:	4413      	add	r3, r2
 801a7e0:	3304      	adds	r3, #4
 801a7e2:	e00b      	b.n	801a7fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a7e4:	7bbb      	ldrb	r3, [r7, #14]
 801a7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a7ea:	4613      	mov	r3, r2
 801a7ec:	009b      	lsls	r3, r3, #2
 801a7ee:	4413      	add	r3, r2
 801a7f0:	009b      	lsls	r3, r3, #2
 801a7f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a7f6:	687a      	ldr	r2, [r7, #4]
 801a7f8:	4413      	add	r3, r2
 801a7fa:	3304      	adds	r3, #4
 801a7fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a7fe:	7bbb      	ldrb	r3, [r7, #14]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d002      	beq.n	801a80a <USBD_StdEPReq+0x264>
 801a804:	7bbb      	ldrb	r3, [r7, #14]
 801a806:	2b80      	cmp	r3, #128	; 0x80
 801a808:	d103      	bne.n	801a812 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801a80a:	68bb      	ldr	r3, [r7, #8]
 801a80c:	2200      	movs	r2, #0
 801a80e:	601a      	str	r2, [r3, #0]
 801a810:	e00e      	b.n	801a830 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801a812:	7bbb      	ldrb	r3, [r7, #14]
 801a814:	4619      	mov	r1, r3
 801a816:	6878      	ldr	r0, [r7, #4]
 801a818:	f7ff f988 	bl	8019b2c <USBD_LL_IsStallEP>
 801a81c:	4603      	mov	r3, r0
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d003      	beq.n	801a82a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801a822:	68bb      	ldr	r3, [r7, #8]
 801a824:	2201      	movs	r2, #1
 801a826:	601a      	str	r2, [r3, #0]
 801a828:	e002      	b.n	801a830 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801a82a:	68bb      	ldr	r3, [r7, #8]
 801a82c:	2200      	movs	r2, #0
 801a82e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	2202      	movs	r2, #2
 801a834:	4619      	mov	r1, r3
 801a836:	6878      	ldr	r0, [r7, #4]
 801a838:	f000 fd03 	bl	801b242 <USBD_CtlSendData>
              break;
 801a83c:	e004      	b.n	801a848 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801a83e:	6839      	ldr	r1, [r7, #0]
 801a840:	6878      	ldr	r0, [r7, #4]
 801a842:	f000 fb6b 	bl	801af1c <USBD_CtlError>
              break;
 801a846:	bf00      	nop
          }
          break;
 801a848:	e004      	b.n	801a854 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801a84a:	6839      	ldr	r1, [r7, #0]
 801a84c:	6878      	ldr	r0, [r7, #4]
 801a84e:	f000 fb65 	bl	801af1c <USBD_CtlError>
          break;
 801a852:	bf00      	nop
      }
      break;
 801a854:	e004      	b.n	801a860 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801a856:	6839      	ldr	r1, [r7, #0]
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	f000 fb5f 	bl	801af1c <USBD_CtlError>
      break;
 801a85e:	bf00      	nop
  }

  return ret;
 801a860:	7bfb      	ldrb	r3, [r7, #15]
}
 801a862:	4618      	mov	r0, r3
 801a864:	3710      	adds	r7, #16
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
	...

0801a86c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b084      	sub	sp, #16
 801a870:	af00      	add	r7, sp, #0
 801a872:	6078      	str	r0, [r7, #4]
 801a874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a876:	2300      	movs	r3, #0
 801a878:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801a87a:	2300      	movs	r3, #0
 801a87c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a87e:	2300      	movs	r3, #0
 801a880:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	885b      	ldrh	r3, [r3, #2]
 801a886:	0a1b      	lsrs	r3, r3, #8
 801a888:	b29b      	uxth	r3, r3
 801a88a:	3b01      	subs	r3, #1
 801a88c:	2b0e      	cmp	r3, #14
 801a88e:	f200 8152 	bhi.w	801ab36 <USBD_GetDescriptor+0x2ca>
 801a892:	a201      	add	r2, pc, #4	; (adr r2, 801a898 <USBD_GetDescriptor+0x2c>)
 801a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a898:	0801a909 	.word	0x0801a909
 801a89c:	0801a921 	.word	0x0801a921
 801a8a0:	0801a961 	.word	0x0801a961
 801a8a4:	0801ab37 	.word	0x0801ab37
 801a8a8:	0801ab37 	.word	0x0801ab37
 801a8ac:	0801aad7 	.word	0x0801aad7
 801a8b0:	0801ab03 	.word	0x0801ab03
 801a8b4:	0801ab37 	.word	0x0801ab37
 801a8b8:	0801ab37 	.word	0x0801ab37
 801a8bc:	0801ab37 	.word	0x0801ab37
 801a8c0:	0801ab37 	.word	0x0801ab37
 801a8c4:	0801ab37 	.word	0x0801ab37
 801a8c8:	0801ab37 	.word	0x0801ab37
 801a8cc:	0801ab37 	.word	0x0801ab37
 801a8d0:	0801a8d5 	.word	0x0801a8d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a8da:	69db      	ldr	r3, [r3, #28]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d00b      	beq.n	801a8f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a8e6:	69db      	ldr	r3, [r3, #28]
 801a8e8:	687a      	ldr	r2, [r7, #4]
 801a8ea:	7c12      	ldrb	r2, [r2, #16]
 801a8ec:	f107 0108 	add.w	r1, r7, #8
 801a8f0:	4610      	mov	r0, r2
 801a8f2:	4798      	blx	r3
 801a8f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a8f6:	e126      	b.n	801ab46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801a8f8:	6839      	ldr	r1, [r7, #0]
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	f000 fb0e 	bl	801af1c <USBD_CtlError>
        err++;
 801a900:	7afb      	ldrb	r3, [r7, #11]
 801a902:	3301      	adds	r3, #1
 801a904:	72fb      	strb	r3, [r7, #11]
      break;
 801a906:	e11e      	b.n	801ab46 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	687a      	ldr	r2, [r7, #4]
 801a912:	7c12      	ldrb	r2, [r2, #16]
 801a914:	f107 0108 	add.w	r1, r7, #8
 801a918:	4610      	mov	r0, r2
 801a91a:	4798      	blx	r3
 801a91c:	60f8      	str	r0, [r7, #12]
      break;
 801a91e:	e112      	b.n	801ab46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	7c1b      	ldrb	r3, [r3, #16]
 801a924:	2b00      	cmp	r3, #0
 801a926:	d10d      	bne.n	801a944 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a930:	f107 0208 	add.w	r2, r7, #8
 801a934:	4610      	mov	r0, r2
 801a936:	4798      	blx	r3
 801a938:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	3301      	adds	r3, #1
 801a93e:	2202      	movs	r2, #2
 801a940:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a942:	e100      	b.n	801ab46 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a94c:	f107 0208 	add.w	r2, r7, #8
 801a950:	4610      	mov	r0, r2
 801a952:	4798      	blx	r3
 801a954:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	3301      	adds	r3, #1
 801a95a:	2202      	movs	r2, #2
 801a95c:	701a      	strb	r2, [r3, #0]
      break;
 801a95e:	e0f2      	b.n	801ab46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a960:	683b      	ldr	r3, [r7, #0]
 801a962:	885b      	ldrh	r3, [r3, #2]
 801a964:	b2db      	uxtb	r3, r3
 801a966:	2b05      	cmp	r3, #5
 801a968:	f200 80ac 	bhi.w	801aac4 <USBD_GetDescriptor+0x258>
 801a96c:	a201      	add	r2, pc, #4	; (adr r2, 801a974 <USBD_GetDescriptor+0x108>)
 801a96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a972:	bf00      	nop
 801a974:	0801a98d 	.word	0x0801a98d
 801a978:	0801a9c1 	.word	0x0801a9c1
 801a97c:	0801a9f5 	.word	0x0801a9f5
 801a980:	0801aa29 	.word	0x0801aa29
 801a984:	0801aa5d 	.word	0x0801aa5d
 801a988:	0801aa91 	.word	0x0801aa91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a992:	685b      	ldr	r3, [r3, #4]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d00b      	beq.n	801a9b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a99e:	685b      	ldr	r3, [r3, #4]
 801a9a0:	687a      	ldr	r2, [r7, #4]
 801a9a2:	7c12      	ldrb	r2, [r2, #16]
 801a9a4:	f107 0108 	add.w	r1, r7, #8
 801a9a8:	4610      	mov	r0, r2
 801a9aa:	4798      	blx	r3
 801a9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a9ae:	e091      	b.n	801aad4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a9b0:	6839      	ldr	r1, [r7, #0]
 801a9b2:	6878      	ldr	r0, [r7, #4]
 801a9b4:	f000 fab2 	bl	801af1c <USBD_CtlError>
            err++;
 801a9b8:	7afb      	ldrb	r3, [r7, #11]
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	72fb      	strb	r3, [r7, #11]
          break;
 801a9be:	e089      	b.n	801aad4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a9c6:	689b      	ldr	r3, [r3, #8]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d00b      	beq.n	801a9e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a9d2:	689b      	ldr	r3, [r3, #8]
 801a9d4:	687a      	ldr	r2, [r7, #4]
 801a9d6:	7c12      	ldrb	r2, [r2, #16]
 801a9d8:	f107 0108 	add.w	r1, r7, #8
 801a9dc:	4610      	mov	r0, r2
 801a9de:	4798      	blx	r3
 801a9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a9e2:	e077      	b.n	801aad4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a9e4:	6839      	ldr	r1, [r7, #0]
 801a9e6:	6878      	ldr	r0, [r7, #4]
 801a9e8:	f000 fa98 	bl	801af1c <USBD_CtlError>
            err++;
 801a9ec:	7afb      	ldrb	r3, [r7, #11]
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	72fb      	strb	r3, [r7, #11]
          break;
 801a9f2:	e06f      	b.n	801aad4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a9fa:	68db      	ldr	r3, [r3, #12]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d00b      	beq.n	801aa18 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa06:	68db      	ldr	r3, [r3, #12]
 801aa08:	687a      	ldr	r2, [r7, #4]
 801aa0a:	7c12      	ldrb	r2, [r2, #16]
 801aa0c:	f107 0108 	add.w	r1, r7, #8
 801aa10:	4610      	mov	r0, r2
 801aa12:	4798      	blx	r3
 801aa14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa16:	e05d      	b.n	801aad4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa18:	6839      	ldr	r1, [r7, #0]
 801aa1a:	6878      	ldr	r0, [r7, #4]
 801aa1c:	f000 fa7e 	bl	801af1c <USBD_CtlError>
            err++;
 801aa20:	7afb      	ldrb	r3, [r7, #11]
 801aa22:	3301      	adds	r3, #1
 801aa24:	72fb      	strb	r3, [r7, #11]
          break;
 801aa26:	e055      	b.n	801aad4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa2e:	691b      	ldr	r3, [r3, #16]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d00b      	beq.n	801aa4c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa3a:	691b      	ldr	r3, [r3, #16]
 801aa3c:	687a      	ldr	r2, [r7, #4]
 801aa3e:	7c12      	ldrb	r2, [r2, #16]
 801aa40:	f107 0108 	add.w	r1, r7, #8
 801aa44:	4610      	mov	r0, r2
 801aa46:	4798      	blx	r3
 801aa48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa4a:	e043      	b.n	801aad4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa4c:	6839      	ldr	r1, [r7, #0]
 801aa4e:	6878      	ldr	r0, [r7, #4]
 801aa50:	f000 fa64 	bl	801af1c <USBD_CtlError>
            err++;
 801aa54:	7afb      	ldrb	r3, [r7, #11]
 801aa56:	3301      	adds	r3, #1
 801aa58:	72fb      	strb	r3, [r7, #11]
          break;
 801aa5a:	e03b      	b.n	801aad4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa62:	695b      	ldr	r3, [r3, #20]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d00b      	beq.n	801aa80 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa6e:	695b      	ldr	r3, [r3, #20]
 801aa70:	687a      	ldr	r2, [r7, #4]
 801aa72:	7c12      	ldrb	r2, [r2, #16]
 801aa74:	f107 0108 	add.w	r1, r7, #8
 801aa78:	4610      	mov	r0, r2
 801aa7a:	4798      	blx	r3
 801aa7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa7e:	e029      	b.n	801aad4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa80:	6839      	ldr	r1, [r7, #0]
 801aa82:	6878      	ldr	r0, [r7, #4]
 801aa84:	f000 fa4a 	bl	801af1c <USBD_CtlError>
            err++;
 801aa88:	7afb      	ldrb	r3, [r7, #11]
 801aa8a:	3301      	adds	r3, #1
 801aa8c:	72fb      	strb	r3, [r7, #11]
          break;
 801aa8e:	e021      	b.n	801aad4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa96:	699b      	ldr	r3, [r3, #24]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d00b      	beq.n	801aab4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aaa2:	699b      	ldr	r3, [r3, #24]
 801aaa4:	687a      	ldr	r2, [r7, #4]
 801aaa6:	7c12      	ldrb	r2, [r2, #16]
 801aaa8:	f107 0108 	add.w	r1, r7, #8
 801aaac:	4610      	mov	r0, r2
 801aaae:	4798      	blx	r3
 801aab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aab2:	e00f      	b.n	801aad4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aab4:	6839      	ldr	r1, [r7, #0]
 801aab6:	6878      	ldr	r0, [r7, #4]
 801aab8:	f000 fa30 	bl	801af1c <USBD_CtlError>
            err++;
 801aabc:	7afb      	ldrb	r3, [r7, #11]
 801aabe:	3301      	adds	r3, #1
 801aac0:	72fb      	strb	r3, [r7, #11]
          break;
 801aac2:	e007      	b.n	801aad4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801aac4:	6839      	ldr	r1, [r7, #0]
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	f000 fa28 	bl	801af1c <USBD_CtlError>
          err++;
 801aacc:	7afb      	ldrb	r3, [r7, #11]
 801aace:	3301      	adds	r3, #1
 801aad0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801aad2:	bf00      	nop
      }
      break;
 801aad4:	e037      	b.n	801ab46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	7c1b      	ldrb	r3, [r3, #16]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d109      	bne.n	801aaf2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aae6:	f107 0208 	add.w	r2, r7, #8
 801aaea:	4610      	mov	r0, r2
 801aaec:	4798      	blx	r3
 801aaee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aaf0:	e029      	b.n	801ab46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801aaf2:	6839      	ldr	r1, [r7, #0]
 801aaf4:	6878      	ldr	r0, [r7, #4]
 801aaf6:	f000 fa11 	bl	801af1c <USBD_CtlError>
        err++;
 801aafa:	7afb      	ldrb	r3, [r7, #11]
 801aafc:	3301      	adds	r3, #1
 801aafe:	72fb      	strb	r3, [r7, #11]
      break;
 801ab00:	e021      	b.n	801ab46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	7c1b      	ldrb	r3, [r3, #16]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d10d      	bne.n	801ab26 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab12:	f107 0208 	add.w	r2, r7, #8
 801ab16:	4610      	mov	r0, r2
 801ab18:	4798      	blx	r3
 801ab1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	3301      	adds	r3, #1
 801ab20:	2207      	movs	r2, #7
 801ab22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ab24:	e00f      	b.n	801ab46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ab26:	6839      	ldr	r1, [r7, #0]
 801ab28:	6878      	ldr	r0, [r7, #4]
 801ab2a:	f000 f9f7 	bl	801af1c <USBD_CtlError>
        err++;
 801ab2e:	7afb      	ldrb	r3, [r7, #11]
 801ab30:	3301      	adds	r3, #1
 801ab32:	72fb      	strb	r3, [r7, #11]
      break;
 801ab34:	e007      	b.n	801ab46 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801ab36:	6839      	ldr	r1, [r7, #0]
 801ab38:	6878      	ldr	r0, [r7, #4]
 801ab3a:	f000 f9ef 	bl	801af1c <USBD_CtlError>
      err++;
 801ab3e:	7afb      	ldrb	r3, [r7, #11]
 801ab40:	3301      	adds	r3, #1
 801ab42:	72fb      	strb	r3, [r7, #11]
      break;
 801ab44:	bf00      	nop
  }

  if (err != 0U)
 801ab46:	7afb      	ldrb	r3, [r7, #11]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d11e      	bne.n	801ab8a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801ab4c:	683b      	ldr	r3, [r7, #0]
 801ab4e:	88db      	ldrh	r3, [r3, #6]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d016      	beq.n	801ab82 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801ab54:	893b      	ldrh	r3, [r7, #8]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d00e      	beq.n	801ab78 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801ab5a:	683b      	ldr	r3, [r7, #0]
 801ab5c:	88da      	ldrh	r2, [r3, #6]
 801ab5e:	893b      	ldrh	r3, [r7, #8]
 801ab60:	4293      	cmp	r3, r2
 801ab62:	bf28      	it	cs
 801ab64:	4613      	movcs	r3, r2
 801ab66:	b29b      	uxth	r3, r3
 801ab68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ab6a:	893b      	ldrh	r3, [r7, #8]
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	68f9      	ldr	r1, [r7, #12]
 801ab70:	6878      	ldr	r0, [r7, #4]
 801ab72:	f000 fb66 	bl	801b242 <USBD_CtlSendData>
 801ab76:	e009      	b.n	801ab8c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801ab78:	6839      	ldr	r1, [r7, #0]
 801ab7a:	6878      	ldr	r0, [r7, #4]
 801ab7c:	f000 f9ce 	bl	801af1c <USBD_CtlError>
 801ab80:	e004      	b.n	801ab8c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801ab82:	6878      	ldr	r0, [r7, #4]
 801ab84:	f000 fbb7 	bl	801b2f6 <USBD_CtlSendStatus>
 801ab88:	e000      	b.n	801ab8c <USBD_GetDescriptor+0x320>
    return;
 801ab8a:	bf00      	nop
  }
}
 801ab8c:	3710      	adds	r7, #16
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	bd80      	pop	{r7, pc}
 801ab92:	bf00      	nop

0801ab94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b084      	sub	sp, #16
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
 801ab9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	889b      	ldrh	r3, [r3, #4]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d131      	bne.n	801ac0a <USBD_SetAddress+0x76>
 801aba6:	683b      	ldr	r3, [r7, #0]
 801aba8:	88db      	ldrh	r3, [r3, #6]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d12d      	bne.n	801ac0a <USBD_SetAddress+0x76>
 801abae:	683b      	ldr	r3, [r7, #0]
 801abb0:	885b      	ldrh	r3, [r3, #2]
 801abb2:	2b7f      	cmp	r3, #127	; 0x7f
 801abb4:	d829      	bhi.n	801ac0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	885b      	ldrh	r3, [r3, #2]
 801abba:	b2db      	uxtb	r3, r3
 801abbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801abc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801abc8:	b2db      	uxtb	r3, r3
 801abca:	2b03      	cmp	r3, #3
 801abcc:	d104      	bne.n	801abd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801abce:	6839      	ldr	r1, [r7, #0]
 801abd0:	6878      	ldr	r0, [r7, #4]
 801abd2:	f000 f9a3 	bl	801af1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abd6:	e01d      	b.n	801ac14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	7bfa      	ldrb	r2, [r7, #15]
 801abdc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801abe0:	7bfb      	ldrb	r3, [r7, #15]
 801abe2:	4619      	mov	r1, r3
 801abe4:	6878      	ldr	r0, [r7, #4]
 801abe6:	f7fe ffcd 	bl	8019b84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801abea:	6878      	ldr	r0, [r7, #4]
 801abec:	f000 fb83 	bl	801b2f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801abf0:	7bfb      	ldrb	r3, [r7, #15]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d004      	beq.n	801ac00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	2202      	movs	r2, #2
 801abfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abfe:	e009      	b.n	801ac14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2201      	movs	r2, #1
 801ac04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ac08:	e004      	b.n	801ac14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ac0a:	6839      	ldr	r1, [r7, #0]
 801ac0c:	6878      	ldr	r0, [r7, #4]
 801ac0e:	f000 f985 	bl	801af1c <USBD_CtlError>
  }
}
 801ac12:	bf00      	nop
 801ac14:	bf00      	nop
 801ac16:	3710      	adds	r7, #16
 801ac18:	46bd      	mov	sp, r7
 801ac1a:	bd80      	pop	{r7, pc}

0801ac1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b084      	sub	sp, #16
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	6078      	str	r0, [r7, #4]
 801ac24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ac26:	2300      	movs	r3, #0
 801ac28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ac2a:	683b      	ldr	r3, [r7, #0]
 801ac2c:	885b      	ldrh	r3, [r3, #2]
 801ac2e:	b2da      	uxtb	r2, r3
 801ac30:	4b4c      	ldr	r3, [pc, #304]	; (801ad64 <USBD_SetConfig+0x148>)
 801ac32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ac34:	4b4b      	ldr	r3, [pc, #300]	; (801ad64 <USBD_SetConfig+0x148>)
 801ac36:	781b      	ldrb	r3, [r3, #0]
 801ac38:	2b01      	cmp	r3, #1
 801ac3a:	d905      	bls.n	801ac48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801ac3c:	6839      	ldr	r1, [r7, #0]
 801ac3e:	6878      	ldr	r0, [r7, #4]
 801ac40:	f000 f96c 	bl	801af1c <USBD_CtlError>
    return USBD_FAIL;
 801ac44:	2303      	movs	r3, #3
 801ac46:	e088      	b.n	801ad5a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ac4e:	b2db      	uxtb	r3, r3
 801ac50:	2b02      	cmp	r3, #2
 801ac52:	d002      	beq.n	801ac5a <USBD_SetConfig+0x3e>
 801ac54:	2b03      	cmp	r3, #3
 801ac56:	d025      	beq.n	801aca4 <USBD_SetConfig+0x88>
 801ac58:	e071      	b.n	801ad3e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801ac5a:	4b42      	ldr	r3, [pc, #264]	; (801ad64 <USBD_SetConfig+0x148>)
 801ac5c:	781b      	ldrb	r3, [r3, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d01c      	beq.n	801ac9c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801ac62:	4b40      	ldr	r3, [pc, #256]	; (801ad64 <USBD_SetConfig+0x148>)
 801ac64:	781b      	ldrb	r3, [r3, #0]
 801ac66:	461a      	mov	r2, r3
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ac6c:	4b3d      	ldr	r3, [pc, #244]	; (801ad64 <USBD_SetConfig+0x148>)
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	4619      	mov	r1, r3
 801ac72:	6878      	ldr	r0, [r7, #4]
 801ac74:	f7ff f91e 	bl	8019eb4 <USBD_SetClassConfig>
 801ac78:	4603      	mov	r3, r0
 801ac7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801ac7c:	7bfb      	ldrb	r3, [r7, #15]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d004      	beq.n	801ac8c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801ac82:	6839      	ldr	r1, [r7, #0]
 801ac84:	6878      	ldr	r0, [r7, #4]
 801ac86:	f000 f949 	bl	801af1c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ac8a:	e065      	b.n	801ad58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801ac8c:	6878      	ldr	r0, [r7, #4]
 801ac8e:	f000 fb32 	bl	801b2f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	2203      	movs	r2, #3
 801ac96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ac9a:	e05d      	b.n	801ad58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801ac9c:	6878      	ldr	r0, [r7, #4]
 801ac9e:	f000 fb2a 	bl	801b2f6 <USBD_CtlSendStatus>
      break;
 801aca2:	e059      	b.n	801ad58 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801aca4:	4b2f      	ldr	r3, [pc, #188]	; (801ad64 <USBD_SetConfig+0x148>)
 801aca6:	781b      	ldrb	r3, [r3, #0]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d112      	bne.n	801acd2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	2202      	movs	r2, #2
 801acb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801acb4:	4b2b      	ldr	r3, [pc, #172]	; (801ad64 <USBD_SetConfig+0x148>)
 801acb6:	781b      	ldrb	r3, [r3, #0]
 801acb8:	461a      	mov	r2, r3
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801acbe:	4b29      	ldr	r3, [pc, #164]	; (801ad64 <USBD_SetConfig+0x148>)
 801acc0:	781b      	ldrb	r3, [r3, #0]
 801acc2:	4619      	mov	r1, r3
 801acc4:	6878      	ldr	r0, [r7, #4]
 801acc6:	f7ff f911 	bl	8019eec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801acca:	6878      	ldr	r0, [r7, #4]
 801accc:	f000 fb13 	bl	801b2f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801acd0:	e042      	b.n	801ad58 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801acd2:	4b24      	ldr	r3, [pc, #144]	; (801ad64 <USBD_SetConfig+0x148>)
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	461a      	mov	r2, r3
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	685b      	ldr	r3, [r3, #4]
 801acdc:	429a      	cmp	r2, r3
 801acde:	d02a      	beq.n	801ad36 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	685b      	ldr	r3, [r3, #4]
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	4619      	mov	r1, r3
 801ace8:	6878      	ldr	r0, [r7, #4]
 801acea:	f7ff f8ff 	bl	8019eec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801acee:	4b1d      	ldr	r3, [pc, #116]	; (801ad64 <USBD_SetConfig+0x148>)
 801acf0:	781b      	ldrb	r3, [r3, #0]
 801acf2:	461a      	mov	r2, r3
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801acf8:	4b1a      	ldr	r3, [pc, #104]	; (801ad64 <USBD_SetConfig+0x148>)
 801acfa:	781b      	ldrb	r3, [r3, #0]
 801acfc:	4619      	mov	r1, r3
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f7ff f8d8 	bl	8019eb4 <USBD_SetClassConfig>
 801ad04:	4603      	mov	r3, r0
 801ad06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801ad08:	7bfb      	ldrb	r3, [r7, #15]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d00f      	beq.n	801ad2e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801ad0e:	6839      	ldr	r1, [r7, #0]
 801ad10:	6878      	ldr	r0, [r7, #4]
 801ad12:	f000 f903 	bl	801af1c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	685b      	ldr	r3, [r3, #4]
 801ad1a:	b2db      	uxtb	r3, r3
 801ad1c:	4619      	mov	r1, r3
 801ad1e:	6878      	ldr	r0, [r7, #4]
 801ad20:	f7ff f8e4 	bl	8019eec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2202      	movs	r2, #2
 801ad28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ad2c:	e014      	b.n	801ad58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801ad2e:	6878      	ldr	r0, [r7, #4]
 801ad30:	f000 fae1 	bl	801b2f6 <USBD_CtlSendStatus>
      break;
 801ad34:	e010      	b.n	801ad58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801ad36:	6878      	ldr	r0, [r7, #4]
 801ad38:	f000 fadd 	bl	801b2f6 <USBD_CtlSendStatus>
      break;
 801ad3c:	e00c      	b.n	801ad58 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801ad3e:	6839      	ldr	r1, [r7, #0]
 801ad40:	6878      	ldr	r0, [r7, #4]
 801ad42:	f000 f8eb 	bl	801af1c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801ad46:	4b07      	ldr	r3, [pc, #28]	; (801ad64 <USBD_SetConfig+0x148>)
 801ad48:	781b      	ldrb	r3, [r3, #0]
 801ad4a:	4619      	mov	r1, r3
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	f7ff f8cd 	bl	8019eec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801ad52:	2303      	movs	r3, #3
 801ad54:	73fb      	strb	r3, [r7, #15]
      break;
 801ad56:	bf00      	nop
  }

  return ret;
 801ad58:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	3710      	adds	r7, #16
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	bd80      	pop	{r7, pc}
 801ad62:	bf00      	nop
 801ad64:	20001f30 	.word	0x20001f30

0801ad68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b082      	sub	sp, #8
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801ad72:	683b      	ldr	r3, [r7, #0]
 801ad74:	88db      	ldrh	r3, [r3, #6]
 801ad76:	2b01      	cmp	r3, #1
 801ad78:	d004      	beq.n	801ad84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801ad7a:	6839      	ldr	r1, [r7, #0]
 801ad7c:	6878      	ldr	r0, [r7, #4]
 801ad7e:	f000 f8cd 	bl	801af1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801ad82:	e023      	b.n	801adcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ad8a:	b2db      	uxtb	r3, r3
 801ad8c:	2b02      	cmp	r3, #2
 801ad8e:	dc02      	bgt.n	801ad96 <USBD_GetConfig+0x2e>
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	dc03      	bgt.n	801ad9c <USBD_GetConfig+0x34>
 801ad94:	e015      	b.n	801adc2 <USBD_GetConfig+0x5a>
 801ad96:	2b03      	cmp	r3, #3
 801ad98:	d00b      	beq.n	801adb2 <USBD_GetConfig+0x4a>
 801ad9a:	e012      	b.n	801adc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	2200      	movs	r2, #0
 801ada0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	3308      	adds	r3, #8
 801ada6:	2201      	movs	r2, #1
 801ada8:	4619      	mov	r1, r3
 801adaa:	6878      	ldr	r0, [r7, #4]
 801adac:	f000 fa49 	bl	801b242 <USBD_CtlSendData>
        break;
 801adb0:	e00c      	b.n	801adcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	3304      	adds	r3, #4
 801adb6:	2201      	movs	r2, #1
 801adb8:	4619      	mov	r1, r3
 801adba:	6878      	ldr	r0, [r7, #4]
 801adbc:	f000 fa41 	bl	801b242 <USBD_CtlSendData>
        break;
 801adc0:	e004      	b.n	801adcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801adc2:	6839      	ldr	r1, [r7, #0]
 801adc4:	6878      	ldr	r0, [r7, #4]
 801adc6:	f000 f8a9 	bl	801af1c <USBD_CtlError>
        break;
 801adca:	bf00      	nop
}
 801adcc:	bf00      	nop
 801adce:	3708      	adds	r7, #8
 801add0:	46bd      	mov	sp, r7
 801add2:	bd80      	pop	{r7, pc}

0801add4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b082      	sub	sp, #8
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
 801addc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ade4:	b2db      	uxtb	r3, r3
 801ade6:	3b01      	subs	r3, #1
 801ade8:	2b02      	cmp	r3, #2
 801adea:	d81e      	bhi.n	801ae2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	88db      	ldrh	r3, [r3, #6]
 801adf0:	2b02      	cmp	r3, #2
 801adf2:	d004      	beq.n	801adfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801adf4:	6839      	ldr	r1, [r7, #0]
 801adf6:	6878      	ldr	r0, [r7, #4]
 801adf8:	f000 f890 	bl	801af1c <USBD_CtlError>
        break;
 801adfc:	e01a      	b.n	801ae34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	2201      	movs	r2, #1
 801ae02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d005      	beq.n	801ae1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	68db      	ldr	r3, [r3, #12]
 801ae12:	f043 0202 	orr.w	r2, r3, #2
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	330c      	adds	r3, #12
 801ae1e:	2202      	movs	r2, #2
 801ae20:	4619      	mov	r1, r3
 801ae22:	6878      	ldr	r0, [r7, #4]
 801ae24:	f000 fa0d 	bl	801b242 <USBD_CtlSendData>
      break;
 801ae28:	e004      	b.n	801ae34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801ae2a:	6839      	ldr	r1, [r7, #0]
 801ae2c:	6878      	ldr	r0, [r7, #4]
 801ae2e:	f000 f875 	bl	801af1c <USBD_CtlError>
      break;
 801ae32:	bf00      	nop
  }
}
 801ae34:	bf00      	nop
 801ae36:	3708      	adds	r7, #8
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bd80      	pop	{r7, pc}

0801ae3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b082      	sub	sp, #8
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
 801ae44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ae46:	683b      	ldr	r3, [r7, #0]
 801ae48:	885b      	ldrh	r3, [r3, #2]
 801ae4a:	2b01      	cmp	r3, #1
 801ae4c:	d106      	bne.n	801ae5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	2201      	movs	r2, #1
 801ae52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801ae56:	6878      	ldr	r0, [r7, #4]
 801ae58:	f000 fa4d 	bl	801b2f6 <USBD_CtlSendStatus>
  }
}
 801ae5c:	bf00      	nop
 801ae5e:	3708      	adds	r7, #8
 801ae60:	46bd      	mov	sp, r7
 801ae62:	bd80      	pop	{r7, pc}

0801ae64 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
 801ae6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae74:	b2db      	uxtb	r3, r3
 801ae76:	3b01      	subs	r3, #1
 801ae78:	2b02      	cmp	r3, #2
 801ae7a:	d80b      	bhi.n	801ae94 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ae7c:	683b      	ldr	r3, [r7, #0]
 801ae7e:	885b      	ldrh	r3, [r3, #2]
 801ae80:	2b01      	cmp	r3, #1
 801ae82:	d10c      	bne.n	801ae9e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	2200      	movs	r2, #0
 801ae88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801ae8c:	6878      	ldr	r0, [r7, #4]
 801ae8e:	f000 fa32 	bl	801b2f6 <USBD_CtlSendStatus>
      }
      break;
 801ae92:	e004      	b.n	801ae9e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801ae94:	6839      	ldr	r1, [r7, #0]
 801ae96:	6878      	ldr	r0, [r7, #4]
 801ae98:	f000 f840 	bl	801af1c <USBD_CtlError>
      break;
 801ae9c:	e000      	b.n	801aea0 <USBD_ClrFeature+0x3c>
      break;
 801ae9e:	bf00      	nop
  }
}
 801aea0:	bf00      	nop
 801aea2:	3708      	adds	r7, #8
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bd80      	pop	{r7, pc}

0801aea8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801aea8:	b580      	push	{r7, lr}
 801aeaa:	b084      	sub	sp, #16
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	6078      	str	r0, [r7, #4]
 801aeb0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801aeb2:	683b      	ldr	r3, [r7, #0]
 801aeb4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	781a      	ldrb	r2, [r3, #0]
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	3301      	adds	r3, #1
 801aec2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	781a      	ldrb	r2, [r3, #0]
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	3301      	adds	r3, #1
 801aed0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801aed2:	68f8      	ldr	r0, [r7, #12]
 801aed4:	f7ff fa91 	bl	801a3fa <SWAPBYTE>
 801aed8:	4603      	mov	r3, r0
 801aeda:	461a      	mov	r2, r3
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	3301      	adds	r3, #1
 801aee4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	3301      	adds	r3, #1
 801aeea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801aeec:	68f8      	ldr	r0, [r7, #12]
 801aeee:	f7ff fa84 	bl	801a3fa <SWAPBYTE>
 801aef2:	4603      	mov	r3, r0
 801aef4:	461a      	mov	r2, r3
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	3301      	adds	r3, #1
 801aefe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	3301      	adds	r3, #1
 801af04:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801af06:	68f8      	ldr	r0, [r7, #12]
 801af08:	f7ff fa77 	bl	801a3fa <SWAPBYTE>
 801af0c:	4603      	mov	r3, r0
 801af0e:	461a      	mov	r2, r3
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	80da      	strh	r2, [r3, #6]
}
 801af14:	bf00      	nop
 801af16:	3710      	adds	r7, #16
 801af18:	46bd      	mov	sp, r7
 801af1a:	bd80      	pop	{r7, pc}

0801af1c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b082      	sub	sp, #8
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
 801af24:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801af26:	2180      	movs	r1, #128	; 0x80
 801af28:	6878      	ldr	r0, [r7, #4]
 801af2a:	f7fe fd93 	bl	8019a54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801af2e:	2100      	movs	r1, #0
 801af30:	6878      	ldr	r0, [r7, #4]
 801af32:	f7fe fd8f 	bl	8019a54 <USBD_LL_StallEP>
}
 801af36:	bf00      	nop
 801af38:	3708      	adds	r7, #8
 801af3a:	46bd      	mov	sp, r7
 801af3c:	bd80      	pop	{r7, pc}

0801af3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801af3e:	b580      	push	{r7, lr}
 801af40:	b086      	sub	sp, #24
 801af42:	af00      	add	r7, sp, #0
 801af44:	60f8      	str	r0, [r7, #12]
 801af46:	60b9      	str	r1, [r7, #8]
 801af48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801af4a:	2300      	movs	r3, #0
 801af4c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d036      	beq.n	801afc2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801af58:	6938      	ldr	r0, [r7, #16]
 801af5a:	f000 f836 	bl	801afca <USBD_GetLen>
 801af5e:	4603      	mov	r3, r0
 801af60:	3301      	adds	r3, #1
 801af62:	b29b      	uxth	r3, r3
 801af64:	005b      	lsls	r3, r3, #1
 801af66:	b29a      	uxth	r2, r3
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801af6c:	7dfb      	ldrb	r3, [r7, #23]
 801af6e:	68ba      	ldr	r2, [r7, #8]
 801af70:	4413      	add	r3, r2
 801af72:	687a      	ldr	r2, [r7, #4]
 801af74:	7812      	ldrb	r2, [r2, #0]
 801af76:	701a      	strb	r2, [r3, #0]
  idx++;
 801af78:	7dfb      	ldrb	r3, [r7, #23]
 801af7a:	3301      	adds	r3, #1
 801af7c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801af7e:	7dfb      	ldrb	r3, [r7, #23]
 801af80:	68ba      	ldr	r2, [r7, #8]
 801af82:	4413      	add	r3, r2
 801af84:	2203      	movs	r2, #3
 801af86:	701a      	strb	r2, [r3, #0]
  idx++;
 801af88:	7dfb      	ldrb	r3, [r7, #23]
 801af8a:	3301      	adds	r3, #1
 801af8c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801af8e:	e013      	b.n	801afb8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801af90:	7dfb      	ldrb	r3, [r7, #23]
 801af92:	68ba      	ldr	r2, [r7, #8]
 801af94:	4413      	add	r3, r2
 801af96:	693a      	ldr	r2, [r7, #16]
 801af98:	7812      	ldrb	r2, [r2, #0]
 801af9a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801af9c:	693b      	ldr	r3, [r7, #16]
 801af9e:	3301      	adds	r3, #1
 801afa0:	613b      	str	r3, [r7, #16]
    idx++;
 801afa2:	7dfb      	ldrb	r3, [r7, #23]
 801afa4:	3301      	adds	r3, #1
 801afa6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801afa8:	7dfb      	ldrb	r3, [r7, #23]
 801afaa:	68ba      	ldr	r2, [r7, #8]
 801afac:	4413      	add	r3, r2
 801afae:	2200      	movs	r2, #0
 801afb0:	701a      	strb	r2, [r3, #0]
    idx++;
 801afb2:	7dfb      	ldrb	r3, [r7, #23]
 801afb4:	3301      	adds	r3, #1
 801afb6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801afb8:	693b      	ldr	r3, [r7, #16]
 801afba:	781b      	ldrb	r3, [r3, #0]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d1e7      	bne.n	801af90 <USBD_GetString+0x52>
 801afc0:	e000      	b.n	801afc4 <USBD_GetString+0x86>
    return;
 801afc2:	bf00      	nop
  }
}
 801afc4:	3718      	adds	r7, #24
 801afc6:	46bd      	mov	sp, r7
 801afc8:	bd80      	pop	{r7, pc}

0801afca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801afca:	b480      	push	{r7}
 801afcc:	b085      	sub	sp, #20
 801afce:	af00      	add	r7, sp, #0
 801afd0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801afd2:	2300      	movs	r3, #0
 801afd4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801afda:	e005      	b.n	801afe8 <USBD_GetLen+0x1e>
  {
    len++;
 801afdc:	7bfb      	ldrb	r3, [r7, #15]
 801afde:	3301      	adds	r3, #1
 801afe0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801afe2:	68bb      	ldr	r3, [r7, #8]
 801afe4:	3301      	adds	r3, #1
 801afe6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801afe8:	68bb      	ldr	r3, [r7, #8]
 801afea:	781b      	ldrb	r3, [r3, #0]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d1f5      	bne.n	801afdc <USBD_GetLen+0x12>
  }

  return len;
 801aff0:	7bfb      	ldrb	r3, [r7, #15]
}
 801aff2:	4618      	mov	r0, r3
 801aff4:	3714      	adds	r7, #20
 801aff6:	46bd      	mov	sp, r7
 801aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801affc:	4770      	bx	lr
	...

0801b000 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b000:	b480      	push	{r7}
 801b002:	b083      	sub	sp, #12
 801b004:	af00      	add	r7, sp, #0
 801b006:	4603      	mov	r3, r0
 801b008:	6039      	str	r1, [r7, #0]
 801b00a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	2212      	movs	r2, #18
 801b010:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b012:	4b03      	ldr	r3, [pc, #12]	; (801b020 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b014:	4618      	mov	r0, r3
 801b016:	370c      	adds	r7, #12
 801b018:	46bd      	mov	sp, r7
 801b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01e:	4770      	bx	lr
 801b020:	20000588 	.word	0x20000588

0801b024 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b024:	b480      	push	{r7}
 801b026:	b083      	sub	sp, #12
 801b028:	af00      	add	r7, sp, #0
 801b02a:	4603      	mov	r3, r0
 801b02c:	6039      	str	r1, [r7, #0]
 801b02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	2204      	movs	r2, #4
 801b034:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b036:	4b03      	ldr	r3, [pc, #12]	; (801b044 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b038:	4618      	mov	r0, r3
 801b03a:	370c      	adds	r7, #12
 801b03c:	46bd      	mov	sp, r7
 801b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b042:	4770      	bx	lr
 801b044:	200005a8 	.word	0x200005a8

0801b048 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b082      	sub	sp, #8
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	4603      	mov	r3, r0
 801b050:	6039      	str	r1, [r7, #0]
 801b052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b054:	79fb      	ldrb	r3, [r7, #7]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d105      	bne.n	801b066 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b05a:	683a      	ldr	r2, [r7, #0]
 801b05c:	4907      	ldr	r1, [pc, #28]	; (801b07c <USBD_FS_ProductStrDescriptor+0x34>)
 801b05e:	4808      	ldr	r0, [pc, #32]	; (801b080 <USBD_FS_ProductStrDescriptor+0x38>)
 801b060:	f7ff ff6d 	bl	801af3e <USBD_GetString>
 801b064:	e004      	b.n	801b070 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b066:	683a      	ldr	r2, [r7, #0]
 801b068:	4904      	ldr	r1, [pc, #16]	; (801b07c <USBD_FS_ProductStrDescriptor+0x34>)
 801b06a:	4805      	ldr	r0, [pc, #20]	; (801b080 <USBD_FS_ProductStrDescriptor+0x38>)
 801b06c:	f7ff ff67 	bl	801af3e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b070:	4b02      	ldr	r3, [pc, #8]	; (801b07c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b072:	4618      	mov	r0, r3
 801b074:	3708      	adds	r7, #8
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	20009e38 	.word	0x20009e38
 801b080:	08022458 	.word	0x08022458

0801b084 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b084:	b580      	push	{r7, lr}
 801b086:	b082      	sub	sp, #8
 801b088:	af00      	add	r7, sp, #0
 801b08a:	4603      	mov	r3, r0
 801b08c:	6039      	str	r1, [r7, #0]
 801b08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b090:	683a      	ldr	r2, [r7, #0]
 801b092:	4904      	ldr	r1, [pc, #16]	; (801b0a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b094:	4804      	ldr	r0, [pc, #16]	; (801b0a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b096:	f7ff ff52 	bl	801af3e <USBD_GetString>
  return USBD_StrDesc;
 801b09a:	4b02      	ldr	r3, [pc, #8]	; (801b0a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b09c:	4618      	mov	r0, r3
 801b09e:	3708      	adds	r7, #8
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bd80      	pop	{r7, pc}
 801b0a4:	20009e38 	.word	0x20009e38
 801b0a8:	08022460 	.word	0x08022460

0801b0ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b082      	sub	sp, #8
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	6039      	str	r1, [r7, #0]
 801b0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b0b8:	683b      	ldr	r3, [r7, #0]
 801b0ba:	221a      	movs	r2, #26
 801b0bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b0be:	f000 f855 	bl	801b16c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b0c2:	4b02      	ldr	r3, [pc, #8]	; (801b0cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	3708      	adds	r7, #8
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd80      	pop	{r7, pc}
 801b0cc:	200005ac 	.word	0x200005ac

0801b0d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b082      	sub	sp, #8
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	6039      	str	r1, [r7, #0]
 801b0da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b0dc:	79fb      	ldrb	r3, [r7, #7]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d105      	bne.n	801b0ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b0e2:	683a      	ldr	r2, [r7, #0]
 801b0e4:	4907      	ldr	r1, [pc, #28]	; (801b104 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b0e6:	4808      	ldr	r0, [pc, #32]	; (801b108 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b0e8:	f7ff ff29 	bl	801af3e <USBD_GetString>
 801b0ec:	e004      	b.n	801b0f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b0ee:	683a      	ldr	r2, [r7, #0]
 801b0f0:	4904      	ldr	r1, [pc, #16]	; (801b104 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b0f2:	4805      	ldr	r0, [pc, #20]	; (801b108 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b0f4:	f7ff ff23 	bl	801af3e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b0f8:	4b02      	ldr	r3, [pc, #8]	; (801b104 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	3708      	adds	r7, #8
 801b0fe:	46bd      	mov	sp, r7
 801b100:	bd80      	pop	{r7, pc}
 801b102:	bf00      	nop
 801b104:	20009e38 	.word	0x20009e38
 801b108:	08022474 	.word	0x08022474

0801b10c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b10c:	b580      	push	{r7, lr}
 801b10e:	b082      	sub	sp, #8
 801b110:	af00      	add	r7, sp, #0
 801b112:	4603      	mov	r3, r0
 801b114:	6039      	str	r1, [r7, #0]
 801b116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b118:	79fb      	ldrb	r3, [r7, #7]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d105      	bne.n	801b12a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b11e:	683a      	ldr	r2, [r7, #0]
 801b120:	4907      	ldr	r1, [pc, #28]	; (801b140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b122:	4808      	ldr	r0, [pc, #32]	; (801b144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b124:	f7ff ff0b 	bl	801af3e <USBD_GetString>
 801b128:	e004      	b.n	801b134 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b12a:	683a      	ldr	r2, [r7, #0]
 801b12c:	4904      	ldr	r1, [pc, #16]	; (801b140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b12e:	4805      	ldr	r0, [pc, #20]	; (801b144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b130:	f7ff ff05 	bl	801af3e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b134:	4b02      	ldr	r3, [pc, #8]	; (801b140 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b136:	4618      	mov	r0, r3
 801b138:	3708      	adds	r7, #8
 801b13a:	46bd      	mov	sp, r7
 801b13c:	bd80      	pop	{r7, pc}
 801b13e:	bf00      	nop
 801b140:	20009e38 	.word	0x20009e38
 801b144:	08022484 	.word	0x08022484

0801b148 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b148:	b480      	push	{r7}
 801b14a:	b083      	sub	sp, #12
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	4603      	mov	r3, r0
 801b150:	6039      	str	r1, [r7, #0]
 801b152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	220c      	movs	r2, #12
 801b158:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801b15a:	4b03      	ldr	r3, [pc, #12]	; (801b168 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	370c      	adds	r7, #12
 801b160:	46bd      	mov	sp, r7
 801b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b166:	4770      	bx	lr
 801b168:	2000059c 	.word	0x2000059c

0801b16c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b084      	sub	sp, #16
 801b170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b172:	4b0f      	ldr	r3, [pc, #60]	; (801b1b0 <Get_SerialNum+0x44>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b178:	4b0e      	ldr	r3, [pc, #56]	; (801b1b4 <Get_SerialNum+0x48>)
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b17e:	4b0e      	ldr	r3, [pc, #56]	; (801b1b8 <Get_SerialNum+0x4c>)
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b184:	68fa      	ldr	r2, [r7, #12]
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	4413      	add	r3, r2
 801b18a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d009      	beq.n	801b1a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b192:	2208      	movs	r2, #8
 801b194:	4909      	ldr	r1, [pc, #36]	; (801b1bc <Get_SerialNum+0x50>)
 801b196:	68f8      	ldr	r0, [r7, #12]
 801b198:	f000 f814 	bl	801b1c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b19c:	2204      	movs	r2, #4
 801b19e:	4908      	ldr	r1, [pc, #32]	; (801b1c0 <Get_SerialNum+0x54>)
 801b1a0:	68b8      	ldr	r0, [r7, #8]
 801b1a2:	f000 f80f 	bl	801b1c4 <IntToUnicode>
  }
}
 801b1a6:	bf00      	nop
 801b1a8:	3710      	adds	r7, #16
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd80      	pop	{r7, pc}
 801b1ae:	bf00      	nop
 801b1b0:	1fff7590 	.word	0x1fff7590
 801b1b4:	1fff7594 	.word	0x1fff7594
 801b1b8:	1fff7598 	.word	0x1fff7598
 801b1bc:	200005ae 	.word	0x200005ae
 801b1c0:	200005be 	.word	0x200005be

0801b1c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b1c4:	b480      	push	{r7}
 801b1c6:	b087      	sub	sp, #28
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	60f8      	str	r0, [r7, #12]
 801b1cc:	60b9      	str	r1, [r7, #8]
 801b1ce:	4613      	mov	r3, r2
 801b1d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	75fb      	strb	r3, [r7, #23]
 801b1da:	e027      	b.n	801b22c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	0f1b      	lsrs	r3, r3, #28
 801b1e0:	2b09      	cmp	r3, #9
 801b1e2:	d80b      	bhi.n	801b1fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	0f1b      	lsrs	r3, r3, #28
 801b1e8:	b2da      	uxtb	r2, r3
 801b1ea:	7dfb      	ldrb	r3, [r7, #23]
 801b1ec:	005b      	lsls	r3, r3, #1
 801b1ee:	4619      	mov	r1, r3
 801b1f0:	68bb      	ldr	r3, [r7, #8]
 801b1f2:	440b      	add	r3, r1
 801b1f4:	3230      	adds	r2, #48	; 0x30
 801b1f6:	b2d2      	uxtb	r2, r2
 801b1f8:	701a      	strb	r2, [r3, #0]
 801b1fa:	e00a      	b.n	801b212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	0f1b      	lsrs	r3, r3, #28
 801b200:	b2da      	uxtb	r2, r3
 801b202:	7dfb      	ldrb	r3, [r7, #23]
 801b204:	005b      	lsls	r3, r3, #1
 801b206:	4619      	mov	r1, r3
 801b208:	68bb      	ldr	r3, [r7, #8]
 801b20a:	440b      	add	r3, r1
 801b20c:	3237      	adds	r2, #55	; 0x37
 801b20e:	b2d2      	uxtb	r2, r2
 801b210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	011b      	lsls	r3, r3, #4
 801b216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b218:	7dfb      	ldrb	r3, [r7, #23]
 801b21a:	005b      	lsls	r3, r3, #1
 801b21c:	3301      	adds	r3, #1
 801b21e:	68ba      	ldr	r2, [r7, #8]
 801b220:	4413      	add	r3, r2
 801b222:	2200      	movs	r2, #0
 801b224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b226:	7dfb      	ldrb	r3, [r7, #23]
 801b228:	3301      	adds	r3, #1
 801b22a:	75fb      	strb	r3, [r7, #23]
 801b22c:	7dfa      	ldrb	r2, [r7, #23]
 801b22e:	79fb      	ldrb	r3, [r7, #7]
 801b230:	429a      	cmp	r2, r3
 801b232:	d3d3      	bcc.n	801b1dc <IntToUnicode+0x18>
  }
}
 801b234:	bf00      	nop
 801b236:	bf00      	nop
 801b238:	371c      	adds	r7, #28
 801b23a:	46bd      	mov	sp, r7
 801b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b240:	4770      	bx	lr

0801b242 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b242:	b580      	push	{r7, lr}
 801b244:	b084      	sub	sp, #16
 801b246:	af00      	add	r7, sp, #0
 801b248:	60f8      	str	r0, [r7, #12]
 801b24a:	60b9      	str	r1, [r7, #8]
 801b24c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	2202      	movs	r2, #2
 801b252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	687a      	ldr	r2, [r7, #4]
 801b25a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	687a      	ldr	r2, [r7, #4]
 801b260:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	68ba      	ldr	r2, [r7, #8]
 801b266:	2100      	movs	r1, #0
 801b268:	68f8      	ldr	r0, [r7, #12]
 801b26a:	f7fe fcc1 	bl	8019bf0 <USBD_LL_Transmit>

  return USBD_OK;
 801b26e:	2300      	movs	r3, #0
}
 801b270:	4618      	mov	r0, r3
 801b272:	3710      	adds	r7, #16
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}

0801b278 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b084      	sub	sp, #16
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	60f8      	str	r0, [r7, #12]
 801b280:	60b9      	str	r1, [r7, #8]
 801b282:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	68ba      	ldr	r2, [r7, #8]
 801b288:	2100      	movs	r1, #0
 801b28a:	68f8      	ldr	r0, [r7, #12]
 801b28c:	f7fe fcb0 	bl	8019bf0 <USBD_LL_Transmit>

  return USBD_OK;
 801b290:	2300      	movs	r3, #0
}
 801b292:	4618      	mov	r0, r3
 801b294:	3710      	adds	r7, #16
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}

0801b29a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b29a:	b580      	push	{r7, lr}
 801b29c:	b084      	sub	sp, #16
 801b29e:	af00      	add	r7, sp, #0
 801b2a0:	60f8      	str	r0, [r7, #12]
 801b2a2:	60b9      	str	r1, [r7, #8]
 801b2a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	2203      	movs	r2, #3
 801b2aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	687a      	ldr	r2, [r7, #4]
 801b2b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	687a      	ldr	r2, [r7, #4]
 801b2ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	68ba      	ldr	r2, [r7, #8]
 801b2c2:	2100      	movs	r1, #0
 801b2c4:	68f8      	ldr	r0, [r7, #12]
 801b2c6:	f7fe fccb 	bl	8019c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b2ca:	2300      	movs	r3, #0
}
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	3710      	adds	r7, #16
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	bd80      	pop	{r7, pc}

0801b2d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b084      	sub	sp, #16
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	60f8      	str	r0, [r7, #12]
 801b2dc:	60b9      	str	r1, [r7, #8]
 801b2de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	68ba      	ldr	r2, [r7, #8]
 801b2e4:	2100      	movs	r1, #0
 801b2e6:	68f8      	ldr	r0, [r7, #12]
 801b2e8:	f7fe fcba 	bl	8019c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b2ec:	2300      	movs	r3, #0
}
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	3710      	adds	r7, #16
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd80      	pop	{r7, pc}

0801b2f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b2f6:	b580      	push	{r7, lr}
 801b2f8:	b082      	sub	sp, #8
 801b2fa:	af00      	add	r7, sp, #0
 801b2fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	2204      	movs	r2, #4
 801b302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b306:	2300      	movs	r3, #0
 801b308:	2200      	movs	r2, #0
 801b30a:	2100      	movs	r1, #0
 801b30c:	6878      	ldr	r0, [r7, #4]
 801b30e:	f7fe fc6f 	bl	8019bf0 <USBD_LL_Transmit>

  return USBD_OK;
 801b312:	2300      	movs	r3, #0
}
 801b314:	4618      	mov	r0, r3
 801b316:	3708      	adds	r7, #8
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}

0801b31c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b082      	sub	sp, #8
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	2205      	movs	r2, #5
 801b328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b32c:	2300      	movs	r3, #0
 801b32e:	2200      	movs	r2, #0
 801b330:	2100      	movs	r1, #0
 801b332:	6878      	ldr	r0, [r7, #4]
 801b334:	f7fe fc94 	bl	8019c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b338:	2300      	movs	r3, #0
}
 801b33a:	4618      	mov	r0, r3
 801b33c:	3708      	adds	r7, #8
 801b33e:	46bd      	mov	sp, r7
 801b340:	bd80      	pop	{r7, pc}

0801b342 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b342:	b580      	push	{r7, lr}
 801b344:	b084      	sub	sp, #16
 801b346:	af00      	add	r7, sp, #0
 801b348:	6078      	str	r0, [r7, #4]
 801b34a:	460b      	mov	r3, r1
 801b34c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 801b34e:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b352:	f7fe fd1f 	bl	8019d94 <USBD_static_malloc>
 801b356:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d105      	bne.n	801b36a <USBD_MSC_Init+0x28>
  {
    pdev->pClassDataMSC = NULL;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	2200      	movs	r2, #0
 801b362:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801b366:	2302      	movs	r3, #2
 801b368:	e034      	b.n	801b3d4 <USBD_MSC_Init+0x92>
  }

  pdev->pClassDataMSC = (void *)hmsc;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	68fa      	ldr	r2, [r7, #12]
 801b36e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	7c1b      	ldrb	r3, [r3, #16]
 801b376:	2b00      	cmp	r3, #0
 801b378:	d115      	bne.n	801b3a6 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b37a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b37e:	2202      	movs	r2, #2
 801b380:	2101      	movs	r1, #1
 801b382:	6878      	ldr	r0, [r7, #4]
 801b384:	f7fe fabc 	bl	8019900 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	2201      	movs	r2, #1
 801b38c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b390:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b394:	2202      	movs	r2, #2
 801b396:	2181      	movs	r1, #129	; 0x81
 801b398:	6878      	ldr	r0, [r7, #4]
 801b39a:	f7fe fab1 	bl	8019900 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	2201      	movs	r2, #1
 801b3a2:	871a      	strh	r2, [r3, #56]	; 0x38
 801b3a4:	e012      	b.n	801b3cc <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b3a6:	2340      	movs	r3, #64	; 0x40
 801b3a8:	2202      	movs	r2, #2
 801b3aa:	2101      	movs	r1, #1
 801b3ac:	6878      	ldr	r0, [r7, #4]
 801b3ae:	f7fe faa7 	bl	8019900 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	2201      	movs	r2, #1
 801b3b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b3ba:	2340      	movs	r3, #64	; 0x40
 801b3bc:	2202      	movs	r2, #2
 801b3be:	2181      	movs	r1, #129	; 0x81
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	f7fe fa9d 	bl	8019900 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2201      	movs	r2, #1
 801b3ca:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801b3cc:	6878      	ldr	r0, [r7, #4]
 801b3ce:	f000 f958 	bl	801b682 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801b3d2:	2300      	movs	r3, #0
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	3710      	adds	r7, #16
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd80      	pop	{r7, pc}

0801b3dc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b082      	sub	sp, #8
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
 801b3e4:	460b      	mov	r3, r1
 801b3e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 801b3e8:	2101      	movs	r1, #1
 801b3ea:	6878      	ldr	r0, [r7, #4]
 801b3ec:	f7fe fac6 	bl	801997c <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 801b3f8:	2181      	movs	r1, #129	; 0x81
 801b3fa:	6878      	ldr	r0, [r7, #4]
 801b3fc:	f7fe fabe 	bl	801997c <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	2200      	movs	r2, #0
 801b404:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassDataMSC != NULL)
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d00c      	beq.n	801b42a <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801b410:	6878      	ldr	r0, [r7, #4]
 801b412:	f000 f994 	bl	801b73e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataMSC);
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b41c:	4618      	mov	r0, r3
 801b41e:	f7fe fcc7 	bl	8019db0 <USBD_static_free>
    pdev->pClassDataMSC = NULL;
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2200      	movs	r2, #0
 801b426:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b42a:	2300      	movs	r3, #0
}
 801b42c:	4618      	mov	r0, r3
 801b42e:	3708      	adds	r7, #8
 801b430:	46bd      	mov	sp, r7
 801b432:	bd80      	pop	{r7, pc}

0801b434 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b086      	sub	sp, #24
 801b438:	af00      	add	r7, sp, #0
 801b43a:	6078      	str	r0, [r7, #4]
 801b43c:	6039      	str	r1, [r7, #0]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b444:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801b446:	2300      	movs	r3, #0
 801b448:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801b44a:	2300      	movs	r3, #0
 801b44c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801b44e:	693b      	ldr	r3, [r7, #16]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d101      	bne.n	801b458 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801b454:	2303      	movs	r3, #3
 801b456:	e0db      	b.n	801b610 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b458:	683b      	ldr	r3, [r7, #0]
 801b45a:	781b      	ldrb	r3, [r3, #0]
 801b45c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b460:	2b00      	cmp	r3, #0
 801b462:	d04e      	beq.n	801b502 <USBD_MSC_Setup+0xce>
 801b464:	2b20      	cmp	r3, #32
 801b466:	f040 80cb 	bne.w	801b600 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801b46a:	683b      	ldr	r3, [r7, #0]
 801b46c:	785b      	ldrb	r3, [r3, #1]
 801b46e:	2bfe      	cmp	r3, #254	; 0xfe
 801b470:	d002      	beq.n	801b478 <USBD_MSC_Setup+0x44>
 801b472:	2bff      	cmp	r3, #255	; 0xff
 801b474:	d025      	beq.n	801b4c2 <USBD_MSC_Setup+0x8e>
 801b476:	e03c      	b.n	801b4f2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b478:	683b      	ldr	r3, [r7, #0]
 801b47a:	885b      	ldrh	r3, [r3, #2]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d119      	bne.n	801b4b4 <USBD_MSC_Setup+0x80>
 801b480:	683b      	ldr	r3, [r7, #0]
 801b482:	88db      	ldrh	r3, [r3, #6]
 801b484:	2b01      	cmp	r3, #1
 801b486:	d115      	bne.n	801b4b4 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	781b      	ldrb	r3, [r3, #0]
 801b48c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b48e:	2b00      	cmp	r3, #0
 801b490:	da10      	bge.n	801b4b4 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetMaxLun();
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b498:	699b      	ldr	r3, [r3, #24]
 801b49a:	4798      	blx	r3
 801b49c:	4603      	mov	r3, r0
 801b49e:	461a      	mov	r2, r3
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801b4a4:	693b      	ldr	r3, [r7, #16]
 801b4a6:	2201      	movs	r2, #1
 801b4a8:	4619      	mov	r1, r3
 801b4aa:	6878      	ldr	r0, [r7, #4]
 801b4ac:	f7ff fec9 	bl	801b242 <USBD_CtlSendData>
 801b4b0:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b4b2:	e025      	b.n	801b500 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b4b4:	6839      	ldr	r1, [r7, #0]
 801b4b6:	6878      	ldr	r0, [r7, #4]
 801b4b8:	f7ff fd30 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 801b4bc:	2303      	movs	r3, #3
 801b4be:	75fb      	strb	r3, [r7, #23]
          break;
 801b4c0:	e01e      	b.n	801b500 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b4c2:	683b      	ldr	r3, [r7, #0]
 801b4c4:	885b      	ldrh	r3, [r3, #2]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d10c      	bne.n	801b4e4 <USBD_MSC_Setup+0xb0>
 801b4ca:	683b      	ldr	r3, [r7, #0]
 801b4cc:	88db      	ldrh	r3, [r3, #6]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d108      	bne.n	801b4e4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801b4d2:	683b      	ldr	r3, [r7, #0]
 801b4d4:	781b      	ldrb	r3, [r3, #0]
 801b4d6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	db03      	blt.n	801b4e4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801b4dc:	6878      	ldr	r0, [r7, #4]
 801b4de:	f000 f908 	bl	801b6f2 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b4e2:	e00d      	b.n	801b500 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b4e4:	6839      	ldr	r1, [r7, #0]
 801b4e6:	6878      	ldr	r0, [r7, #4]
 801b4e8:	f7ff fd18 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 801b4ec:	2303      	movs	r3, #3
 801b4ee:	75fb      	strb	r3, [r7, #23]
          break;
 801b4f0:	e006      	b.n	801b500 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b4f2:	6839      	ldr	r1, [r7, #0]
 801b4f4:	6878      	ldr	r0, [r7, #4]
 801b4f6:	f7ff fd11 	bl	801af1c <USBD_CtlError>
          ret = USBD_FAIL;
 801b4fa:	2303      	movs	r3, #3
 801b4fc:	75fb      	strb	r3, [r7, #23]
          break;
 801b4fe:	bf00      	nop
      }
      break;
 801b500:	e085      	b.n	801b60e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b502:	683b      	ldr	r3, [r7, #0]
 801b504:	785b      	ldrb	r3, [r3, #1]
 801b506:	2b0b      	cmp	r3, #11
 801b508:	d871      	bhi.n	801b5ee <USBD_MSC_Setup+0x1ba>
 801b50a:	a201      	add	r2, pc, #4	; (adr r2, 801b510 <USBD_MSC_Setup+0xdc>)
 801b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b510:	0801b541 	.word	0x0801b541
 801b514:	0801b5bd 	.word	0x0801b5bd
 801b518:	0801b5ef 	.word	0x0801b5ef
 801b51c:	0801b5ef 	.word	0x0801b5ef
 801b520:	0801b5ef 	.word	0x0801b5ef
 801b524:	0801b5ef 	.word	0x0801b5ef
 801b528:	0801b5ef 	.word	0x0801b5ef
 801b52c:	0801b5ef 	.word	0x0801b5ef
 801b530:	0801b5ef 	.word	0x0801b5ef
 801b534:	0801b5ef 	.word	0x0801b5ef
 801b538:	0801b56b 	.word	0x0801b56b
 801b53c:	0801b595 	.word	0x0801b595
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b546:	b2db      	uxtb	r3, r3
 801b548:	2b03      	cmp	r3, #3
 801b54a:	d107      	bne.n	801b55c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b54c:	f107 030e 	add.w	r3, r7, #14
 801b550:	2202      	movs	r2, #2
 801b552:	4619      	mov	r1, r3
 801b554:	6878      	ldr	r0, [r7, #4]
 801b556:	f7ff fe74 	bl	801b242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b55a:	e050      	b.n	801b5fe <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b55c:	6839      	ldr	r1, [r7, #0]
 801b55e:	6878      	ldr	r0, [r7, #4]
 801b560:	f7ff fcdc 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 801b564:	2303      	movs	r3, #3
 801b566:	75fb      	strb	r3, [r7, #23]
          break;
 801b568:	e049      	b.n	801b5fe <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b570:	b2db      	uxtb	r3, r3
 801b572:	2b03      	cmp	r3, #3
 801b574:	d107      	bne.n	801b586 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801b576:	693b      	ldr	r3, [r7, #16]
 801b578:	3304      	adds	r3, #4
 801b57a:	2201      	movs	r2, #1
 801b57c:	4619      	mov	r1, r3
 801b57e:	6878      	ldr	r0, [r7, #4]
 801b580:	f7ff fe5f 	bl	801b242 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b584:	e03b      	b.n	801b5fe <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b586:	6839      	ldr	r1, [r7, #0]
 801b588:	6878      	ldr	r0, [r7, #4]
 801b58a:	f7ff fcc7 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 801b58e:	2303      	movs	r3, #3
 801b590:	75fb      	strb	r3, [r7, #23]
          break;
 801b592:	e034      	b.n	801b5fe <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b59a:	b2db      	uxtb	r3, r3
 801b59c:	2b03      	cmp	r3, #3
 801b59e:	d106      	bne.n	801b5ae <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801b5a0:	683b      	ldr	r3, [r7, #0]
 801b5a2:	885b      	ldrh	r3, [r3, #2]
 801b5a4:	b2db      	uxtb	r3, r3
 801b5a6:	461a      	mov	r2, r3
 801b5a8:	693b      	ldr	r3, [r7, #16]
 801b5aa:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b5ac:	e027      	b.n	801b5fe <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b5ae:	6839      	ldr	r1, [r7, #0]
 801b5b0:	6878      	ldr	r0, [r7, #4]
 801b5b2:	f7ff fcb3 	bl	801af1c <USBD_CtlError>
            ret = USBD_FAIL;
 801b5b6:	2303      	movs	r3, #3
 801b5b8:	75fb      	strb	r3, [r7, #23]
          break;
 801b5ba:	e020      	b.n	801b5fe <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b5c2:	b2db      	uxtb	r3, r3
 801b5c4:	2b03      	cmp	r3, #3
 801b5c6:	d119      	bne.n	801b5fc <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	885b      	ldrh	r3, [r3, #2]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d115      	bne.n	801b5fc <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801b5d0:	683b      	ldr	r3, [r7, #0]
 801b5d2:	889b      	ldrh	r3, [r3, #4]
 801b5d4:	b2db      	uxtb	r3, r3
 801b5d6:	4619      	mov	r1, r3
 801b5d8:	6878      	ldr	r0, [r7, #4]
 801b5da:	f7fe fa05 	bl	80199e8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	889b      	ldrh	r3, [r3, #4]
 801b5e2:	b2db      	uxtb	r3, r3
 801b5e4:	4619      	mov	r1, r3
 801b5e6:	6878      	ldr	r0, [r7, #4]
 801b5e8:	f000 fa42 	bl	801ba70 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801b5ec:	e006      	b.n	801b5fc <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801b5ee:	6839      	ldr	r1, [r7, #0]
 801b5f0:	6878      	ldr	r0, [r7, #4]
 801b5f2:	f7ff fc93 	bl	801af1c <USBD_CtlError>
          ret = USBD_FAIL;
 801b5f6:	2303      	movs	r3, #3
 801b5f8:	75fb      	strb	r3, [r7, #23]
          break;
 801b5fa:	e000      	b.n	801b5fe <USBD_MSC_Setup+0x1ca>
          break;
 801b5fc:	bf00      	nop
      }
      break;
 801b5fe:	e006      	b.n	801b60e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801b600:	6839      	ldr	r1, [r7, #0]
 801b602:	6878      	ldr	r0, [r7, #4]
 801b604:	f7ff fc8a 	bl	801af1c <USBD_CtlError>
      ret = USBD_FAIL;
 801b608:	2303      	movs	r3, #3
 801b60a:	75fb      	strb	r3, [r7, #23]
      break;
 801b60c:	bf00      	nop
  }

  return (uint8_t)ret;
 801b60e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b610:	4618      	mov	r0, r3
 801b612:	3718      	adds	r7, #24
 801b614:	46bd      	mov	sp, r7
 801b616:	bd80      	pop	{r7, pc}

0801b618 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	b082      	sub	sp, #8
 801b61c:	af00      	add	r7, sp, #0
 801b61e:	6078      	str	r0, [r7, #4]
 801b620:	460b      	mov	r3, r1
 801b622:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801b624:	78fb      	ldrb	r3, [r7, #3]
 801b626:	4619      	mov	r1, r3
 801b628:	6878      	ldr	r0, [r7, #4]
 801b62a:	f000 f89c 	bl	801b766 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801b62e:	2300      	movs	r3, #0
}
 801b630:	4618      	mov	r0, r3
 801b632:	3708      	adds	r7, #8
 801b634:	46bd      	mov	sp, r7
 801b636:	bd80      	pop	{r7, pc}

0801b638 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b082      	sub	sp, #8
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
 801b640:	460b      	mov	r3, r1
 801b642:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801b644:	78fb      	ldrb	r3, [r7, #3]
 801b646:	4619      	mov	r1, r3
 801b648:	6878      	ldr	r0, [r7, #4]
 801b64a:	f000 f8c2 	bl	801b7d2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801b64e:	2300      	movs	r3, #0
}
 801b650:	4618      	mov	r0, r3
 801b652:	3708      	adds	r7, #8
 801b654:	46bd      	mov	sp, r7
 801b656:	bd80      	pop	{r7, pc}

0801b658 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801b658:	b480      	push	{r7}
 801b65a:	b083      	sub	sp, #12
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]
 801b660:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801b662:	683b      	ldr	r3, [r7, #0]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d101      	bne.n	801b66c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801b668:	2303      	movs	r3, #3
 801b66a:	e004      	b.n	801b676 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserDataMSC = fops;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	683a      	ldr	r2, [r7, #0]
 801b670:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801b674:	2300      	movs	r3, #0
}
 801b676:	4618      	mov	r0, r3
 801b678:	370c      	adds	r7, #12
 801b67a:	46bd      	mov	sp, r7
 801b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b680:	4770      	bx	lr

0801b682 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801b682:	b580      	push	{r7, lr}
 801b684:	b084      	sub	sp, #16
 801b686:	af00      	add	r7, sp, #0
 801b688:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b690:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	2b00      	cmp	r3, #0
 801b696:	d028      	beq.n	801b6ea <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	2200      	movs	r2, #0
 801b69c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Init(0U);
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	2000      	movs	r0, #0
 801b6c6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 801b6c8:	2101      	movs	r1, #1
 801b6ca:	6878      	ldr	r0, [r7, #4]
 801b6cc:	f7fe f98c 	bl	80199e8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 801b6d0:	2181      	movs	r1, #129	; 0x81
 801b6d2:	6878      	ldr	r0, [r7, #4]
 801b6d4:	f7fe f988 	bl	80199e8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b6de:	231f      	movs	r3, #31
 801b6e0:	2101      	movs	r1, #1
 801b6e2:	6878      	ldr	r0, [r7, #4]
 801b6e4:	f7fe fabc 	bl	8019c60 <USBD_LL_PrepareReceive>
 801b6e8:	e000      	b.n	801b6ec <MSC_BOT_Init+0x6a>
    return;
 801b6ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b6ec:	3710      	adds	r7, #16
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}

0801b6f2 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801b6f2:	b580      	push	{r7, lr}
 801b6f4:	b084      	sub	sp, #16
 801b6f6:	af00      	add	r7, sp, #0
 801b6f8:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b700:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d016      	beq.n	801b736 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	2200      	movs	r2, #0
 801b70c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	2201      	movs	r2, #1
 801b712:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 801b714:	2181      	movs	r1, #129	; 0x81
 801b716:	6878      	ldr	r0, [r7, #4]
 801b718:	f7fe f9d2 	bl	8019ac0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 801b71c:	2101      	movs	r1, #1
 801b71e:	6878      	ldr	r0, [r7, #4]
 801b720:	f7fe f9ce 	bl	8019ac0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b72a:	231f      	movs	r3, #31
 801b72c:	2101      	movs	r1, #1
 801b72e:	6878      	ldr	r0, [r7, #4]
 801b730:	f7fe fa96 	bl	8019c60 <USBD_LL_PrepareReceive>
 801b734:	e000      	b.n	801b738 <MSC_BOT_Reset+0x46>
    return;
 801b736:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b738:	3710      	adds	r7, #16
 801b73a:	46bd      	mov	sp, r7
 801b73c:	bd80      	pop	{r7, pc}

0801b73e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801b73e:	b480      	push	{r7}
 801b740:	b085      	sub	sp, #20
 801b742:	af00      	add	r7, sp, #0
 801b744:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b74c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	2b00      	cmp	r3, #0
 801b752:	d002      	beq.n	801b75a <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	2200      	movs	r2, #0
 801b758:	721a      	strb	r2, [r3, #8]
  }
}
 801b75a:	bf00      	nop
 801b75c:	3714      	adds	r7, #20
 801b75e:	46bd      	mov	sp, r7
 801b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b764:	4770      	bx	lr

0801b766 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b766:	b580      	push	{r7, lr}
 801b768:	b084      	sub	sp, #16
 801b76a:	af00      	add	r7, sp, #0
 801b76c:	6078      	str	r0, [r7, #4]
 801b76e:	460b      	mov	r3, r1
 801b770:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b778:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d020      	beq.n	801b7c2 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	7a1b      	ldrb	r3, [r3, #8]
 801b784:	2b02      	cmp	r3, #2
 801b786:	d005      	beq.n	801b794 <MSC_BOT_DataIn+0x2e>
 801b788:	2b02      	cmp	r3, #2
 801b78a:	db1c      	blt.n	801b7c6 <MSC_BOT_DataIn+0x60>
 801b78c:	3b03      	subs	r3, #3
 801b78e:	2b01      	cmp	r3, #1
 801b790:	d819      	bhi.n	801b7c6 <MSC_BOT_DataIn+0x60>
 801b792:	e011      	b.n	801b7b8 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b7a0:	461a      	mov	r2, r3
 801b7a2:	6878      	ldr	r0, [r7, #4]
 801b7a4:	f000 f992 	bl	801bacc <SCSI_ProcessCmd>
 801b7a8:	4603      	mov	r3, r0
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	da0d      	bge.n	801b7ca <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b7ae:	2101      	movs	r1, #1
 801b7b0:	6878      	ldr	r0, [r7, #4]
 801b7b2:	f000 f8fb 	bl	801b9ac <MSC_BOT_SendCSW>
      }
      break;
 801b7b6:	e008      	b.n	801b7ca <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b7b8:	2100      	movs	r1, #0
 801b7ba:	6878      	ldr	r0, [r7, #4]
 801b7bc:	f000 f8f6 	bl	801b9ac <MSC_BOT_SendCSW>
      break;
 801b7c0:	e004      	b.n	801b7cc <MSC_BOT_DataIn+0x66>
    return;
 801b7c2:	bf00      	nop
 801b7c4:	e002      	b.n	801b7cc <MSC_BOT_DataIn+0x66>

    default:
      break;
 801b7c6:	bf00      	nop
 801b7c8:	e000      	b.n	801b7cc <MSC_BOT_DataIn+0x66>
      break;
 801b7ca:	bf00      	nop
  }
}
 801b7cc:	3710      	adds	r7, #16
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	bd80      	pop	{r7, pc}

0801b7d2 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b7d2:	b580      	push	{r7, lr}
 801b7d4:	b084      	sub	sp, #16
 801b7d6:	af00      	add	r7, sp, #0
 801b7d8:	6078      	str	r0, [r7, #4]
 801b7da:	460b      	mov	r3, r1
 801b7dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b7e4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d01c      	beq.n	801b826 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	7a1b      	ldrb	r3, [r3, #8]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d002      	beq.n	801b7fa <MSC_BOT_DataOut+0x28>
 801b7f4:	2b01      	cmp	r3, #1
 801b7f6:	d004      	beq.n	801b802 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801b7f8:	e018      	b.n	801b82c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801b7fa:	6878      	ldr	r0, [r7, #4]
 801b7fc:	f000 f81a 	bl	801b834 <MSC_BOT_CBW_Decode>
      break;
 801b800:	e014      	b.n	801b82c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b80e:	461a      	mov	r2, r3
 801b810:	6878      	ldr	r0, [r7, #4]
 801b812:	f000 f95b 	bl	801bacc <SCSI_ProcessCmd>
 801b816:	4603      	mov	r3, r0
 801b818:	2b00      	cmp	r3, #0
 801b81a:	da06      	bge.n	801b82a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b81c:	2101      	movs	r1, #1
 801b81e:	6878      	ldr	r0, [r7, #4]
 801b820:	f000 f8c4 	bl	801b9ac <MSC_BOT_SendCSW>
      break;
 801b824:	e001      	b.n	801b82a <MSC_BOT_DataOut+0x58>
    return;
 801b826:	bf00      	nop
 801b828:	e000      	b.n	801b82c <MSC_BOT_DataOut+0x5a>
      break;
 801b82a:	bf00      	nop
  }
}
 801b82c:	3710      	adds	r7, #16
 801b82e:	46bd      	mov	sp, r7
 801b830:	bd80      	pop	{r7, pc}
	...

0801b834 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801b834:	b580      	push	{r7, lr}
 801b836:	b084      	sub	sp, #16
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b842:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	2b00      	cmp	r3, #0
 801b848:	d077      	beq.n	801b93a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b862:	2101      	movs	r1, #1
 801b864:	6878      	ldr	r0, [r7, #4]
 801b866:	f7fe fa33 	bl	8019cd0 <USBD_LL_GetRxDataSize>
 801b86a:	4603      	mov	r3, r0
 801b86c:	2b1f      	cmp	r3, #31
 801b86e:	d114      	bne.n	801b89a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b876:	4a34      	ldr	r2, [pc, #208]	; (801b948 <MSC_BOT_CBW_Decode+0x114>)
 801b878:	4293      	cmp	r3, r2
 801b87a:	d10e      	bne.n	801b89a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b882:	2b01      	cmp	r3, #1
 801b884:	d809      	bhi.n	801b89a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d004      	beq.n	801b89a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b896:	2b10      	cmp	r3, #16
 801b898:	d90e      	bls.n	801b8b8 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b8a0:	2320      	movs	r3, #32
 801b8a2:	2205      	movs	r2, #5
 801b8a4:	6878      	ldr	r0, [r7, #4]
 801b8a6:	f000 fdbc 	bl	801c422 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	2202      	movs	r2, #2
 801b8ae:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801b8b0:	6878      	ldr	r0, [r7, #4]
 801b8b2:	f000 f8ab 	bl	801ba0c <MSC_BOT_Abort>
 801b8b6:	e043      	b.n	801b940 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b8c4:	461a      	mov	r2, r3
 801b8c6:	6878      	ldr	r0, [r7, #4]
 801b8c8:	f000 f900 	bl	801bacc <SCSI_ProcessCmd>
 801b8cc:	4603      	mov	r3, r0
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	da0c      	bge.n	801b8ec <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	7a1b      	ldrb	r3, [r3, #8]
 801b8d6:	2b05      	cmp	r3, #5
 801b8d8:	d104      	bne.n	801b8e4 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b8da:	2101      	movs	r1, #1
 801b8dc:	6878      	ldr	r0, [r7, #4]
 801b8de:	f000 f865 	bl	801b9ac <MSC_BOT_SendCSW>
 801b8e2:	e02d      	b.n	801b940 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f000 f891 	bl	801ba0c <MSC_BOT_Abort>
 801b8ea:	e029      	b.n	801b940 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	7a1b      	ldrb	r3, [r3, #8]
 801b8f0:	2b02      	cmp	r3, #2
 801b8f2:	d024      	beq.n	801b93e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801b8f8:	2b01      	cmp	r3, #1
 801b8fa:	d020      	beq.n	801b93e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801b900:	2b03      	cmp	r3, #3
 801b902:	d01c      	beq.n	801b93e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	68db      	ldr	r3, [r3, #12]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d009      	beq.n	801b920 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	f103 0110 	add.w	r1, r3, #16
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	68db      	ldr	r3, [r3, #12]
 801b916:	461a      	mov	r2, r3
 801b918:	6878      	ldr	r0, [r7, #4]
 801b91a:	f000 f817 	bl	801b94c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801b91e:	e00f      	b.n	801b940 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	68db      	ldr	r3, [r3, #12]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d104      	bne.n	801b932 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b928:	2100      	movs	r1, #0
 801b92a:	6878      	ldr	r0, [r7, #4]
 801b92c:	f000 f83e 	bl	801b9ac <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801b930:	e006      	b.n	801b940 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801b932:	6878      	ldr	r0, [r7, #4]
 801b934:	f000 f86a 	bl	801ba0c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801b938:	e002      	b.n	801b940 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801b93a:	bf00      	nop
 801b93c:	e000      	b.n	801b940 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801b93e:	bf00      	nop
    }
  }
}
 801b940:	3710      	adds	r7, #16
 801b942:	46bd      	mov	sp, r7
 801b944:	bd80      	pop	{r7, pc}
 801b946:	bf00      	nop
 801b948:	43425355 	.word	0x43425355

0801b94c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801b94c:	b580      	push	{r7, lr}
 801b94e:	b086      	sub	sp, #24
 801b950:	af00      	add	r7, sp, #0
 801b952:	60f8      	str	r0, [r7, #12]
 801b954:	60b9      	str	r1, [r7, #8]
 801b956:	607a      	str	r2, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b95e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801b960:	697b      	ldr	r3, [r7, #20]
 801b962:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801b966:	687a      	ldr	r2, [r7, #4]
 801b968:	4293      	cmp	r3, r2
 801b96a:	bf28      	it	cs
 801b96c:	4613      	movcs	r3, r2
 801b96e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801b970:	697b      	ldr	r3, [r7, #20]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d015      	beq.n	801b9a2 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801b976:	697b      	ldr	r3, [r7, #20]
 801b978:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	1ad2      	subs	r2, r2, r3
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801b986:	697b      	ldr	r3, [r7, #20]
 801b988:	2200      	movs	r2, #0
 801b98a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801b98e:	697b      	ldr	r3, [r7, #20]
 801b990:	2204      	movs	r2, #4
 801b992:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 801b994:	693b      	ldr	r3, [r7, #16]
 801b996:	68ba      	ldr	r2, [r7, #8]
 801b998:	2181      	movs	r1, #129	; 0x81
 801b99a:	68f8      	ldr	r0, [r7, #12]
 801b99c:	f7fe f928 	bl	8019bf0 <USBD_LL_Transmit>
 801b9a0:	e000      	b.n	801b9a4 <MSC_BOT_SendData+0x58>
    return;
 801b9a2:	bf00      	nop
}
 801b9a4:	3718      	adds	r7, #24
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}
	...

0801b9ac <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b084      	sub	sp, #16
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
 801b9b4:	460b      	mov	r3, r1
 801b9b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b9be:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d01b      	beq.n	801b9fe <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	4a0f      	ldr	r2, [pc, #60]	; (801ba08 <MSC_BOT_SendCSW+0x5c>)
 801b9ca:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	78fa      	ldrb	r2, [r7, #3]
 801b9d2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	2200      	movs	r2, #0
 801b9da:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801b9e2:	230d      	movs	r3, #13
 801b9e4:	2181      	movs	r1, #129	; 0x81
 801b9e6:	6878      	ldr	r0, [r7, #4]
 801b9e8:	f7fe f902 	bl	8019bf0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b9f2:	231f      	movs	r3, #31
 801b9f4:	2101      	movs	r1, #1
 801b9f6:	6878      	ldr	r0, [r7, #4]
 801b9f8:	f7fe f932 	bl	8019c60 <USBD_LL_PrepareReceive>
 801b9fc:	e000      	b.n	801ba00 <MSC_BOT_SendCSW+0x54>
    return;
 801b9fe:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801ba00:	3710      	adds	r7, #16
 801ba02:	46bd      	mov	sp, r7
 801ba04:	bd80      	pop	{r7, pc}
 801ba06:	bf00      	nop
 801ba08:	53425355 	.word	0x53425355

0801ba0c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b084      	sub	sp, #16
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba1a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d022      	beq.n	801ba68 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d10c      	bne.n	801ba46 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d007      	beq.n	801ba46 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d103      	bne.n	801ba46 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801ba3e:	2101      	movs	r1, #1
 801ba40:	6878      	ldr	r0, [r7, #4]
 801ba42:	f7fe f807 	bl	8019a54 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801ba46:	2181      	movs	r1, #129	; 0x81
 801ba48:	6878      	ldr	r0, [r7, #4]
 801ba4a:	f7fe f803 	bl	8019a54 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	7a5b      	ldrb	r3, [r3, #9]
 801ba52:	2b02      	cmp	r3, #2
 801ba54:	d109      	bne.n	801ba6a <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801ba56:	2181      	movs	r1, #129	; 0x81
 801ba58:	6878      	ldr	r0, [r7, #4]
 801ba5a:	f7fd fffb 	bl	8019a54 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801ba5e:	2101      	movs	r1, #1
 801ba60:	6878      	ldr	r0, [r7, #4]
 801ba62:	f7fd fff7 	bl	8019a54 <USBD_LL_StallEP>
 801ba66:	e000      	b.n	801ba6a <MSC_BOT_Abort+0x5e>
    return;
 801ba68:	bf00      	nop
  }
}
 801ba6a:	3710      	adds	r7, #16
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	bd80      	pop	{r7, pc}

0801ba70 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b084      	sub	sp, #16
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
 801ba78:	460b      	mov	r3, r1
 801ba7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba82:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d019      	beq.n	801babe <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	7a5b      	ldrb	r3, [r3, #9]
 801ba8e:	2b02      	cmp	r3, #2
 801ba90:	d108      	bne.n	801baa4 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801ba92:	2181      	movs	r1, #129	; 0x81
 801ba94:	6878      	ldr	r0, [r7, #4]
 801ba96:	f7fd ffdd 	bl	8019a54 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801ba9a:	2101      	movs	r1, #1
 801ba9c:	6878      	ldr	r0, [r7, #4]
 801ba9e:	f7fd ffd9 	bl	8019a54 <USBD_LL_StallEP>
 801baa2:	e00f      	b.n	801bac4 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801baa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	da0a      	bge.n	801bac2 <MSC_BOT_CplClrFeature+0x52>
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	7a5b      	ldrb	r3, [r3, #9]
 801bab0:	2b01      	cmp	r3, #1
 801bab2:	d006      	beq.n	801bac2 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801bab4:	2101      	movs	r1, #1
 801bab6:	6878      	ldr	r0, [r7, #4]
 801bab8:	f7ff ff78 	bl	801b9ac <MSC_BOT_SendCSW>
 801babc:	e002      	b.n	801bac4 <MSC_BOT_CplClrFeature+0x54>
    return;
 801babe:	bf00      	nop
 801bac0:	e000      	b.n	801bac4 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801bac2:	bf00      	nop
  }
}
 801bac4:	3710      	adds	r7, #16
 801bac6:	46bd      	mov	sp, r7
 801bac8:	bd80      	pop	{r7, pc}
	...

0801bacc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b086      	sub	sp, #24
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	60f8      	str	r0, [r7, #12]
 801bad4:	460b      	mov	r3, r1
 801bad6:	607a      	str	r2, [r7, #4]
 801bad8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bae0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801bae2:	693b      	ldr	r3, [r7, #16]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d102      	bne.n	801baee <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801bae8:	f04f 33ff 	mov.w	r3, #4294967295
 801baec:	e168      	b.n	801bdc0 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	781b      	ldrb	r3, [r3, #0]
 801baf2:	2baa      	cmp	r3, #170	; 0xaa
 801baf4:	f000 8144 	beq.w	801bd80 <SCSI_ProcessCmd+0x2b4>
 801baf8:	2baa      	cmp	r3, #170	; 0xaa
 801bafa:	f300 8153 	bgt.w	801bda4 <SCSI_ProcessCmd+0x2d8>
 801bafe:	2ba8      	cmp	r3, #168	; 0xa8
 801bb00:	f000 812c 	beq.w	801bd5c <SCSI_ProcessCmd+0x290>
 801bb04:	2ba8      	cmp	r3, #168	; 0xa8
 801bb06:	f300 814d 	bgt.w	801bda4 <SCSI_ProcessCmd+0x2d8>
 801bb0a:	2b5a      	cmp	r3, #90	; 0x5a
 801bb0c:	f300 80c0 	bgt.w	801bc90 <SCSI_ProcessCmd+0x1c4>
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	f2c0 8147 	blt.w	801bda4 <SCSI_ProcessCmd+0x2d8>
 801bb16:	2b5a      	cmp	r3, #90	; 0x5a
 801bb18:	f200 8144 	bhi.w	801bda4 <SCSI_ProcessCmd+0x2d8>
 801bb1c:	a201      	add	r2, pc, #4	; (adr r2, 801bb24 <SCSI_ProcessCmd+0x58>)
 801bb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb22:	bf00      	nop
 801bb24:	0801bc97 	.word	0x0801bc97
 801bb28:	0801bda5 	.word	0x0801bda5
 801bb2c:	0801bda5 	.word	0x0801bda5
 801bb30:	0801bca9 	.word	0x0801bca9
 801bb34:	0801bda5 	.word	0x0801bda5
 801bb38:	0801bda5 	.word	0x0801bda5
 801bb3c:	0801bda5 	.word	0x0801bda5
 801bb40:	0801bda5 	.word	0x0801bda5
 801bb44:	0801bda5 	.word	0x0801bda5
 801bb48:	0801bda5 	.word	0x0801bda5
 801bb4c:	0801bda5 	.word	0x0801bda5
 801bb50:	0801bda5 	.word	0x0801bda5
 801bb54:	0801bda5 	.word	0x0801bda5
 801bb58:	0801bda5 	.word	0x0801bda5
 801bb5c:	0801bda5 	.word	0x0801bda5
 801bb60:	0801bda5 	.word	0x0801bda5
 801bb64:	0801bda5 	.word	0x0801bda5
 801bb68:	0801bda5 	.word	0x0801bda5
 801bb6c:	0801bcbb 	.word	0x0801bcbb
 801bb70:	0801bda5 	.word	0x0801bda5
 801bb74:	0801bda5 	.word	0x0801bda5
 801bb78:	0801bda5 	.word	0x0801bda5
 801bb7c:	0801bda5 	.word	0x0801bda5
 801bb80:	0801bda5 	.word	0x0801bda5
 801bb84:	0801bda5 	.word	0x0801bda5
 801bb88:	0801bda5 	.word	0x0801bda5
 801bb8c:	0801bcf1 	.word	0x0801bcf1
 801bb90:	0801bccd 	.word	0x0801bccd
 801bb94:	0801bda5 	.word	0x0801bda5
 801bb98:	0801bda5 	.word	0x0801bda5
 801bb9c:	0801bcdf 	.word	0x0801bcdf
 801bba0:	0801bda5 	.word	0x0801bda5
 801bba4:	0801bda5 	.word	0x0801bda5
 801bba8:	0801bda5 	.word	0x0801bda5
 801bbac:	0801bda5 	.word	0x0801bda5
 801bbb0:	0801bd15 	.word	0x0801bd15
 801bbb4:	0801bda5 	.word	0x0801bda5
 801bbb8:	0801bd27 	.word	0x0801bd27
 801bbbc:	0801bda5 	.word	0x0801bda5
 801bbc0:	0801bda5 	.word	0x0801bda5
 801bbc4:	0801bd4b 	.word	0x0801bd4b
 801bbc8:	0801bda5 	.word	0x0801bda5
 801bbcc:	0801bd6f 	.word	0x0801bd6f
 801bbd0:	0801bda5 	.word	0x0801bda5
 801bbd4:	0801bda5 	.word	0x0801bda5
 801bbd8:	0801bda5 	.word	0x0801bda5
 801bbdc:	0801bda5 	.word	0x0801bda5
 801bbe0:	0801bd93 	.word	0x0801bd93
 801bbe4:	0801bda5 	.word	0x0801bda5
 801bbe8:	0801bda5 	.word	0x0801bda5
 801bbec:	0801bda5 	.word	0x0801bda5
 801bbf0:	0801bda5 	.word	0x0801bda5
 801bbf4:	0801bda5 	.word	0x0801bda5
 801bbf8:	0801bda5 	.word	0x0801bda5
 801bbfc:	0801bda5 	.word	0x0801bda5
 801bc00:	0801bda5 	.word	0x0801bda5
 801bc04:	0801bda5 	.word	0x0801bda5
 801bc08:	0801bda5 	.word	0x0801bda5
 801bc0c:	0801bda5 	.word	0x0801bda5
 801bc10:	0801bda5 	.word	0x0801bda5
 801bc14:	0801bda5 	.word	0x0801bda5
 801bc18:	0801bda5 	.word	0x0801bda5
 801bc1c:	0801bda5 	.word	0x0801bda5
 801bc20:	0801bda5 	.word	0x0801bda5
 801bc24:	0801bda5 	.word	0x0801bda5
 801bc28:	0801bda5 	.word	0x0801bda5
 801bc2c:	0801bda5 	.word	0x0801bda5
 801bc30:	0801bda5 	.word	0x0801bda5
 801bc34:	0801bda5 	.word	0x0801bda5
 801bc38:	0801bda5 	.word	0x0801bda5
 801bc3c:	0801bda5 	.word	0x0801bda5
 801bc40:	0801bda5 	.word	0x0801bda5
 801bc44:	0801bda5 	.word	0x0801bda5
 801bc48:	0801bda5 	.word	0x0801bda5
 801bc4c:	0801bda5 	.word	0x0801bda5
 801bc50:	0801bda5 	.word	0x0801bda5
 801bc54:	0801bda5 	.word	0x0801bda5
 801bc58:	0801bda5 	.word	0x0801bda5
 801bc5c:	0801bda5 	.word	0x0801bda5
 801bc60:	0801bda5 	.word	0x0801bda5
 801bc64:	0801bda5 	.word	0x0801bda5
 801bc68:	0801bda5 	.word	0x0801bda5
 801bc6c:	0801bda5 	.word	0x0801bda5
 801bc70:	0801bda5 	.word	0x0801bda5
 801bc74:	0801bda5 	.word	0x0801bda5
 801bc78:	0801bda5 	.word	0x0801bda5
 801bc7c:	0801bda5 	.word	0x0801bda5
 801bc80:	0801bda5 	.word	0x0801bda5
 801bc84:	0801bda5 	.word	0x0801bda5
 801bc88:	0801bda5 	.word	0x0801bda5
 801bc8c:	0801bd03 	.word	0x0801bd03
 801bc90:	2b9e      	cmp	r3, #158	; 0x9e
 801bc92:	d051      	beq.n	801bd38 <SCSI_ProcessCmd+0x26c>
 801bc94:	e086      	b.n	801bda4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801bc96:	7afb      	ldrb	r3, [r7, #11]
 801bc98:	687a      	ldr	r2, [r7, #4]
 801bc9a:	4619      	mov	r1, r3
 801bc9c:	68f8      	ldr	r0, [r7, #12]
 801bc9e:	f000 f893 	bl	801bdc8 <SCSI_TestUnitReady>
 801bca2:	4603      	mov	r3, r0
 801bca4:	75fb      	strb	r3, [r7, #23]
      break;
 801bca6:	e089      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801bca8:	7afb      	ldrb	r3, [r7, #11]
 801bcaa:	687a      	ldr	r2, [r7, #4]
 801bcac:	4619      	mov	r1, r3
 801bcae:	68f8      	ldr	r0, [r7, #12]
 801bcb0:	f000 fb38 	bl	801c324 <SCSI_RequestSense>
 801bcb4:	4603      	mov	r3, r0
 801bcb6:	75fb      	strb	r3, [r7, #23]
      break;
 801bcb8:	e080      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801bcba:	7afb      	ldrb	r3, [r7, #11]
 801bcbc:	687a      	ldr	r2, [r7, #4]
 801bcbe:	4619      	mov	r1, r3
 801bcc0:	68f8      	ldr	r0, [r7, #12]
 801bcc2:	f000 f8d1 	bl	801be68 <SCSI_Inquiry>
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	75fb      	strb	r3, [r7, #23]
      break;
 801bcca:	e077      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801bccc:	7afb      	ldrb	r3, [r7, #11]
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	4619      	mov	r1, r3
 801bcd2:	68f8      	ldr	r0, [r7, #12]
 801bcd4:	f000 fbec 	bl	801c4b0 <SCSI_StartStopUnit>
 801bcd8:	4603      	mov	r3, r0
 801bcda:	75fb      	strb	r3, [r7, #23]
      break;
 801bcdc:	e06e      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801bcde:	7afb      	ldrb	r3, [r7, #11]
 801bce0:	687a      	ldr	r2, [r7, #4]
 801bce2:	4619      	mov	r1, r3
 801bce4:	68f8      	ldr	r0, [r7, #12]
 801bce6:	f000 fc34 	bl	801c552 <SCSI_AllowPreventRemovable>
 801bcea:	4603      	mov	r3, r0
 801bcec:	75fb      	strb	r3, [r7, #23]
      break;
 801bcee:	e065      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801bcf0:	7afb      	ldrb	r3, [r7, #11]
 801bcf2:	687a      	ldr	r2, [r7, #4]
 801bcf4:	4619      	mov	r1, r3
 801bcf6:	68f8      	ldr	r0, [r7, #12]
 801bcf8:	f000 fabc 	bl	801c274 <SCSI_ModeSense6>
 801bcfc:	4603      	mov	r3, r0
 801bcfe:	75fb      	strb	r3, [r7, #23]
      break;
 801bd00:	e05c      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801bd02:	7afb      	ldrb	r3, [r7, #11]
 801bd04:	687a      	ldr	r2, [r7, #4]
 801bd06:	4619      	mov	r1, r3
 801bd08:	68f8      	ldr	r0, [r7, #12]
 801bd0a:	f000 fadf 	bl	801c2cc <SCSI_ModeSense10>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	75fb      	strb	r3, [r7, #23]
      break;
 801bd12:	e053      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801bd14:	7afb      	ldrb	r3, [r7, #11]
 801bd16:	687a      	ldr	r2, [r7, #4]
 801bd18:	4619      	mov	r1, r3
 801bd1a:	68f8      	ldr	r0, [r7, #12]
 801bd1c:	f000 fa37 	bl	801c18e <SCSI_ReadFormatCapacity>
 801bd20:	4603      	mov	r3, r0
 801bd22:	75fb      	strb	r3, [r7, #23]
      break;
 801bd24:	e04a      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801bd26:	7afb      	ldrb	r3, [r7, #11]
 801bd28:	687a      	ldr	r2, [r7, #4]
 801bd2a:	4619      	mov	r1, r3
 801bd2c:	68f8      	ldr	r0, [r7, #12]
 801bd2e:	f000 f90f 	bl	801bf50 <SCSI_ReadCapacity10>
 801bd32:	4603      	mov	r3, r0
 801bd34:	75fb      	strb	r3, [r7, #23]
      break;
 801bd36:	e041      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801bd38:	7afb      	ldrb	r3, [r7, #11]
 801bd3a:	687a      	ldr	r2, [r7, #4]
 801bd3c:	4619      	mov	r1, r3
 801bd3e:	68f8      	ldr	r0, [r7, #12]
 801bd40:	f000 f97b 	bl	801c03a <SCSI_ReadCapacity16>
 801bd44:	4603      	mov	r3, r0
 801bd46:	75fb      	strb	r3, [r7, #23]
      break;
 801bd48:	e038      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801bd4a:	7afb      	ldrb	r3, [r7, #11]
 801bd4c:	687a      	ldr	r2, [r7, #4]
 801bd4e:	4619      	mov	r1, r3
 801bd50:	68f8      	ldr	r0, [r7, #12]
 801bd52:	f000 fc27 	bl	801c5a4 <SCSI_Read10>
 801bd56:	4603      	mov	r3, r0
 801bd58:	75fb      	strb	r3, [r7, #23]
      break;
 801bd5a:	e02f      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801bd5c:	7afb      	ldrb	r3, [r7, #11]
 801bd5e:	687a      	ldr	r2, [r7, #4]
 801bd60:	4619      	mov	r1, r3
 801bd62:	68f8      	ldr	r0, [r7, #12]
 801bd64:	f000 fcbe 	bl	801c6e4 <SCSI_Read12>
 801bd68:	4603      	mov	r3, r0
 801bd6a:	75fb      	strb	r3, [r7, #23]
      break;
 801bd6c:	e026      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801bd6e:	7afb      	ldrb	r3, [r7, #11]
 801bd70:	687a      	ldr	r2, [r7, #4]
 801bd72:	4619      	mov	r1, r3
 801bd74:	68f8      	ldr	r0, [r7, #12]
 801bd76:	f000 fd60 	bl	801c83a <SCSI_Write10>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	75fb      	strb	r3, [r7, #23]
      break;
 801bd7e:	e01d      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801bd80:	7afb      	ldrb	r3, [r7, #11]
 801bd82:	687a      	ldr	r2, [r7, #4]
 801bd84:	4619      	mov	r1, r3
 801bd86:	68f8      	ldr	r0, [r7, #12]
 801bd88:	f000 fe1c 	bl	801c9c4 <SCSI_Write12>
 801bd8c:	4603      	mov	r3, r0
 801bd8e:	75fb      	strb	r3, [r7, #23]
      break;
 801bd90:	e014      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801bd92:	7afb      	ldrb	r3, [r7, #11]
 801bd94:	687a      	ldr	r2, [r7, #4]
 801bd96:	4619      	mov	r1, r3
 801bd98:	68f8      	ldr	r0, [r7, #12]
 801bd9a:	f000 fee8 	bl	801cb6e <SCSI_Verify10>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	75fb      	strb	r3, [r7, #23]
      break;
 801bda2:	e00b      	b.n	801bdbc <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801bda4:	7af9      	ldrb	r1, [r7, #11]
 801bda6:	2320      	movs	r3, #32
 801bda8:	2205      	movs	r2, #5
 801bdaa:	68f8      	ldr	r0, [r7, #12]
 801bdac:	f000 fb39 	bl	801c422 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801bdb0:	693b      	ldr	r3, [r7, #16]
 801bdb2:	2202      	movs	r2, #2
 801bdb4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801bdb6:	23ff      	movs	r3, #255	; 0xff
 801bdb8:	75fb      	strb	r3, [r7, #23]
      break;
 801bdba:	bf00      	nop
  }

  return ret;
 801bdbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	3718      	adds	r7, #24
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	bd80      	pop	{r7, pc}

0801bdc8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b086      	sub	sp, #24
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	60f8      	str	r0, [r7, #12]
 801bdd0:	460b      	mov	r3, r1
 801bdd2:	607a      	str	r2, [r7, #4]
 801bdd4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bddc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801bdde:	697b      	ldr	r3, [r7, #20]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d102      	bne.n	801bdea <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801bde4:	f04f 33ff 	mov.w	r3, #4294967295
 801bde8:	e03a      	b.n	801be60 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d00a      	beq.n	801be0a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801bdf4:	697b      	ldr	r3, [r7, #20]
 801bdf6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bdfa:	2320      	movs	r3, #32
 801bdfc:	2205      	movs	r2, #5
 801bdfe:	68f8      	ldr	r0, [r7, #12]
 801be00:	f000 fb0f 	bl	801c422 <SCSI_SenseCode>

    return -1;
 801be04:	f04f 33ff 	mov.w	r3, #4294967295
 801be08:	e02a      	b.n	801be60 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801be10:	2b02      	cmp	r3, #2
 801be12:	d10b      	bne.n	801be2c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801be14:	7af9      	ldrb	r1, [r7, #11]
 801be16:	233a      	movs	r3, #58	; 0x3a
 801be18:	2202      	movs	r2, #2
 801be1a:	68f8      	ldr	r0, [r7, #12]
 801be1c:	f000 fb01 	bl	801c422 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801be20:	697b      	ldr	r3, [r7, #20]
 801be22:	2205      	movs	r2, #5
 801be24:	721a      	strb	r2, [r3, #8]
    return -1;
 801be26:	f04f 33ff 	mov.w	r3, #4294967295
 801be2a:	e019      	b.n	801be60 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801be2c:	68fb      	ldr	r3, [r7, #12]
 801be2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801be32:	689b      	ldr	r3, [r3, #8]
 801be34:	7afa      	ldrb	r2, [r7, #11]
 801be36:	4610      	mov	r0, r2
 801be38:	4798      	blx	r3
 801be3a:	4603      	mov	r3, r0
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d00b      	beq.n	801be58 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801be40:	7af9      	ldrb	r1, [r7, #11]
 801be42:	233a      	movs	r3, #58	; 0x3a
 801be44:	2202      	movs	r2, #2
 801be46:	68f8      	ldr	r0, [r7, #12]
 801be48:	f000 faeb 	bl	801c422 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801be4c:	697b      	ldr	r3, [r7, #20]
 801be4e:	2205      	movs	r2, #5
 801be50:	721a      	strb	r2, [r3, #8]

    return -1;
 801be52:	f04f 33ff 	mov.w	r3, #4294967295
 801be56:	e003      	b.n	801be60 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801be58:	697b      	ldr	r3, [r7, #20]
 801be5a:	2200      	movs	r2, #0
 801be5c:	60da      	str	r2, [r3, #12]

  return 0;
 801be5e:	2300      	movs	r3, #0
}
 801be60:	4618      	mov	r0, r3
 801be62:	3718      	adds	r7, #24
 801be64:	46bd      	mov	sp, r7
 801be66:	bd80      	pop	{r7, pc}

0801be68 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b088      	sub	sp, #32
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	60f8      	str	r0, [r7, #12]
 801be70:	460b      	mov	r3, r1
 801be72:	607a      	str	r2, [r7, #4]
 801be74:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801be7c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801be7e:	69bb      	ldr	r3, [r7, #24]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d102      	bne.n	801be8a <SCSI_Inquiry+0x22>
  {
    return -1;
 801be84:	f04f 33ff 	mov.w	r3, #4294967295
 801be88:	e05a      	b.n	801bf40 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801be8a:	69bb      	ldr	r3, [r7, #24]
 801be8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801be90:	2b00      	cmp	r3, #0
 801be92:	d10a      	bne.n	801beaa <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801be94:	69bb      	ldr	r3, [r7, #24]
 801be96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801be9a:	2320      	movs	r3, #32
 801be9c:	2205      	movs	r2, #5
 801be9e:	68f8      	ldr	r0, [r7, #12]
 801bea0:	f000 fabf 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801bea4:	f04f 33ff 	mov.w	r3, #4294967295
 801bea8:	e04a      	b.n	801bf40 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	3301      	adds	r3, #1
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	f003 0301 	and.w	r3, r3, #1
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d020      	beq.n	801befa <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	3302      	adds	r3, #2
 801bebc:	781b      	ldrb	r3, [r3, #0]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d105      	bne.n	801bece <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801bec2:	2206      	movs	r2, #6
 801bec4:	4920      	ldr	r1, [pc, #128]	; (801bf48 <SCSI_Inquiry+0xe0>)
 801bec6:	69b8      	ldr	r0, [r7, #24]
 801bec8:	f000 ffb4 	bl	801ce34 <SCSI_UpdateBotData>
 801becc:	e037      	b.n	801bf3e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	3302      	adds	r3, #2
 801bed2:	781b      	ldrb	r3, [r3, #0]
 801bed4:	2b80      	cmp	r3, #128	; 0x80
 801bed6:	d105      	bne.n	801bee4 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801bed8:	2208      	movs	r2, #8
 801beda:	491c      	ldr	r1, [pc, #112]	; (801bf4c <SCSI_Inquiry+0xe4>)
 801bedc:	69b8      	ldr	r0, [r7, #24]
 801bede:	f000 ffa9 	bl	801ce34 <SCSI_UpdateBotData>
 801bee2:	e02c      	b.n	801bf3e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801bee4:	69bb      	ldr	r3, [r7, #24]
 801bee6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801beea:	2324      	movs	r3, #36	; 0x24
 801beec:	2205      	movs	r2, #5
 801beee:	68f8      	ldr	r0, [r7, #12]
 801bef0:	f000 fa97 	bl	801c422 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801bef4:	f04f 33ff 	mov.w	r3, #4294967295
 801bef8:	e022      	b.n	801bf40 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserDataMSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bf00:	69d9      	ldr	r1, [r3, #28]
 801bf02:	7afa      	ldrb	r2, [r7, #11]
 801bf04:	4613      	mov	r3, r2
 801bf06:	00db      	lsls	r3, r3, #3
 801bf08:	4413      	add	r3, r2
 801bf0a:	009b      	lsls	r3, r3, #2
 801bf0c:	440b      	add	r3, r1
 801bf0e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	3304      	adds	r3, #4
 801bf14:	781b      	ldrb	r3, [r3, #0]
 801bf16:	b29b      	uxth	r3, r3
 801bf18:	3305      	adds	r3, #5
 801bf1a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	3304      	adds	r3, #4
 801bf20:	781b      	ldrb	r3, [r3, #0]
 801bf22:	b29b      	uxth	r3, r3
 801bf24:	8bfa      	ldrh	r2, [r7, #30]
 801bf26:	429a      	cmp	r2, r3
 801bf28:	d303      	bcc.n	801bf32 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	3304      	adds	r3, #4
 801bf2e:	781b      	ldrb	r3, [r3, #0]
 801bf30:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801bf32:	8bfb      	ldrh	r3, [r7, #30]
 801bf34:	461a      	mov	r2, r3
 801bf36:	6979      	ldr	r1, [r7, #20]
 801bf38:	69b8      	ldr	r0, [r7, #24]
 801bf3a:	f000 ff7b 	bl	801ce34 <SCSI_UpdateBotData>
  }

  return 0;
 801bf3e:	2300      	movs	r3, #0
}
 801bf40:	4618      	mov	r0, r3
 801bf42:	3720      	adds	r7, #32
 801bf44:	46bd      	mov	sp, r7
 801bf46:	bd80      	pop	{r7, pc}
 801bf48:	200005c8 	.word	0x200005c8
 801bf4c:	200005d0 	.word	0x200005d0

0801bf50 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bf50:	b580      	push	{r7, lr}
 801bf52:	b086      	sub	sp, #24
 801bf54:	af00      	add	r7, sp, #0
 801bf56:	60f8      	str	r0, [r7, #12]
 801bf58:	460b      	mov	r3, r1
 801bf5a:	607a      	str	r2, [r7, #4]
 801bf5c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bf64:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d102      	bne.n	801bf72 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801bf6c:	f04f 33ff 	mov.w	r3, #4294967295
 801bf70:	e05f      	b.n	801c032 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bf78:	685b      	ldr	r3, [r3, #4]
 801bf7a:	697a      	ldr	r2, [r7, #20]
 801bf7c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801bf80:	697a      	ldr	r2, [r7, #20]
 801bf82:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801bf86:	7af8      	ldrb	r0, [r7, #11]
 801bf88:	4798      	blx	r3
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801bf8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d104      	bne.n	801bfa0 <SCSI_ReadCapacity10+0x50>
 801bf96:	697b      	ldr	r3, [r7, #20]
 801bf98:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801bf9c:	2b02      	cmp	r3, #2
 801bf9e:	d108      	bne.n	801bfb2 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bfa0:	7af9      	ldrb	r1, [r7, #11]
 801bfa2:	233a      	movs	r3, #58	; 0x3a
 801bfa4:	2202      	movs	r2, #2
 801bfa6:	68f8      	ldr	r0, [r7, #12]
 801bfa8:	f000 fa3b 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801bfac:	f04f 33ff 	mov.w	r3, #4294967295
 801bfb0:	e03f      	b.n	801c032 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801bfb2:	697b      	ldr	r3, [r7, #20]
 801bfb4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bfb8:	3b01      	subs	r3, #1
 801bfba:	0e1b      	lsrs	r3, r3, #24
 801bfbc:	b2da      	uxtb	r2, r3
 801bfbe:	697b      	ldr	r3, [r7, #20]
 801bfc0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bfc8:	3b01      	subs	r3, #1
 801bfca:	0c1b      	lsrs	r3, r3, #16
 801bfcc:	b2da      	uxtb	r2, r3
 801bfce:	697b      	ldr	r3, [r7, #20]
 801bfd0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bfd8:	3b01      	subs	r3, #1
 801bfda:	0a1b      	lsrs	r3, r3, #8
 801bfdc:	b2da      	uxtb	r2, r3
 801bfde:	697b      	ldr	r3, [r7, #20]
 801bfe0:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801bfe2:	697b      	ldr	r3, [r7, #20]
 801bfe4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bfe8:	b2db      	uxtb	r3, r3
 801bfea:	3b01      	subs	r3, #1
 801bfec:	b2da      	uxtb	r2, r3
 801bfee:	697b      	ldr	r3, [r7, #20]
 801bff0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801bff2:	697b      	ldr	r3, [r7, #20]
 801bff4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801bff8:	161b      	asrs	r3, r3, #24
 801bffa:	b2da      	uxtb	r2, r3
 801bffc:	697b      	ldr	r3, [r7, #20]
 801bffe:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c006:	141b      	asrs	r3, r3, #16
 801c008:	b2da      	uxtb	r2, r3
 801c00a:	697b      	ldr	r3, [r7, #20]
 801c00c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c00e:	697b      	ldr	r3, [r7, #20]
 801c010:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c014:	0a1b      	lsrs	r3, r3, #8
 801c016:	b29b      	uxth	r3, r3
 801c018:	b2da      	uxtb	r2, r3
 801c01a:	697b      	ldr	r3, [r7, #20]
 801c01c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801c01e:	697b      	ldr	r3, [r7, #20]
 801c020:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c024:	b2da      	uxtb	r2, r3
 801c026:	697b      	ldr	r3, [r7, #20]
 801c028:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801c02a:	697b      	ldr	r3, [r7, #20]
 801c02c:	2208      	movs	r2, #8
 801c02e:	60da      	str	r2, [r3, #12]

  return 0;
 801c030:	2300      	movs	r3, #0

}
 801c032:	4618      	mov	r0, r3
 801c034:	3718      	adds	r7, #24
 801c036:	46bd      	mov	sp, r7
 801c038:	bd80      	pop	{r7, pc}

0801c03a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c03a:	b580      	push	{r7, lr}
 801c03c:	b088      	sub	sp, #32
 801c03e:	af00      	add	r7, sp, #0
 801c040:	60f8      	str	r0, [r7, #12]
 801c042:	460b      	mov	r3, r1
 801c044:	607a      	str	r2, [r7, #4]
 801c046:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c04e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c050:	69bb      	ldr	r3, [r7, #24]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d102      	bne.n	801c05c <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801c056:	f04f 33ff 	mov.w	r3, #4294967295
 801c05a:	e094      	b.n	801c186 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c062:	685b      	ldr	r3, [r3, #4]
 801c064:	69ba      	ldr	r2, [r7, #24]
 801c066:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c06a:	69ba      	ldr	r2, [r7, #24]
 801c06c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c070:	7af8      	ldrb	r0, [r7, #11]
 801c072:	4798      	blx	r3
 801c074:	4603      	mov	r3, r0
 801c076:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d104      	bne.n	801c08a <SCSI_ReadCapacity16+0x50>
 801c080:	69bb      	ldr	r3, [r7, #24]
 801c082:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c086:	2b02      	cmp	r3, #2
 801c088:	d108      	bne.n	801c09c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c08a:	7af9      	ldrb	r1, [r7, #11]
 801c08c:	233a      	movs	r3, #58	; 0x3a
 801c08e:	2202      	movs	r2, #2
 801c090:	68f8      	ldr	r0, [r7, #12]
 801c092:	f000 f9c6 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801c096:	f04f 33ff 	mov.w	r3, #4294967295
 801c09a:	e074      	b.n	801c186 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	330a      	adds	r3, #10
 801c0a0:	781b      	ldrb	r3, [r3, #0]
 801c0a2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	330b      	adds	r3, #11
 801c0a8:	781b      	ldrb	r3, [r3, #0]
 801c0aa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c0ac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	330c      	adds	r3, #12
 801c0b2:	781b      	ldrb	r3, [r3, #0]
 801c0b4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c0b6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c0b8:	687a      	ldr	r2, [r7, #4]
 801c0ba:	320d      	adds	r2, #13
 801c0bc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c0be:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c0c0:	69bb      	ldr	r3, [r7, #24]
 801c0c2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	77fb      	strb	r3, [r7, #31]
 801c0c8:	e007      	b.n	801c0da <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801c0ca:	7ffb      	ldrb	r3, [r7, #31]
 801c0cc:	69ba      	ldr	r2, [r7, #24]
 801c0ce:	4413      	add	r3, r2
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c0d4:	7ffb      	ldrb	r3, [r7, #31]
 801c0d6:	3301      	adds	r3, #1
 801c0d8:	77fb      	strb	r3, [r7, #31]
 801c0da:	7ffa      	ldrb	r2, [r7, #31]
 801c0dc:	69bb      	ldr	r3, [r7, #24]
 801c0de:	68db      	ldr	r3, [r3, #12]
 801c0e0:	429a      	cmp	r2, r3
 801c0e2:	d3f2      	bcc.n	801c0ca <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c0e4:	69bb      	ldr	r3, [r7, #24]
 801c0e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0ea:	3b01      	subs	r3, #1
 801c0ec:	0e1b      	lsrs	r3, r3, #24
 801c0ee:	b2da      	uxtb	r2, r3
 801c0f0:	69bb      	ldr	r3, [r7, #24]
 801c0f2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c0f4:	69bb      	ldr	r3, [r7, #24]
 801c0f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0fa:	3b01      	subs	r3, #1
 801c0fc:	0c1b      	lsrs	r3, r3, #16
 801c0fe:	b2da      	uxtb	r2, r3
 801c100:	69bb      	ldr	r3, [r7, #24]
 801c102:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c104:	69bb      	ldr	r3, [r7, #24]
 801c106:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c10a:	3b01      	subs	r3, #1
 801c10c:	0a1b      	lsrs	r3, r3, #8
 801c10e:	b2da      	uxtb	r2, r3
 801c110:	69bb      	ldr	r3, [r7, #24]
 801c112:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c114:	69bb      	ldr	r3, [r7, #24]
 801c116:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c11a:	b2db      	uxtb	r3, r3
 801c11c:	3b01      	subs	r3, #1
 801c11e:	b2da      	uxtb	r2, r3
 801c120:	69bb      	ldr	r3, [r7, #24]
 801c122:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c124:	69bb      	ldr	r3, [r7, #24]
 801c126:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c12a:	161b      	asrs	r3, r3, #24
 801c12c:	b2da      	uxtb	r2, r3
 801c12e:	69bb      	ldr	r3, [r7, #24]
 801c130:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c132:	69bb      	ldr	r3, [r7, #24]
 801c134:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c138:	141b      	asrs	r3, r3, #16
 801c13a:	b2da      	uxtb	r2, r3
 801c13c:	69bb      	ldr	r3, [r7, #24]
 801c13e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c140:	69bb      	ldr	r3, [r7, #24]
 801c142:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c146:	0a1b      	lsrs	r3, r3, #8
 801c148:	b29b      	uxth	r3, r3
 801c14a:	b2da      	uxtb	r2, r3
 801c14c:	69bb      	ldr	r3, [r7, #24]
 801c14e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801c150:	69bb      	ldr	r3, [r7, #24]
 801c152:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c156:	b2da      	uxtb	r2, r3
 801c158:	69bb      	ldr	r3, [r7, #24]
 801c15a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	330a      	adds	r3, #10
 801c160:	781b      	ldrb	r3, [r3, #0]
 801c162:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	330b      	adds	r3, #11
 801c168:	781b      	ldrb	r3, [r3, #0]
 801c16a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c16c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	330c      	adds	r3, #12
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c176:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c178:	687a      	ldr	r2, [r7, #4]
 801c17a:	320d      	adds	r2, #13
 801c17c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c17e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c180:	69bb      	ldr	r3, [r7, #24]
 801c182:	60da      	str	r2, [r3, #12]

  return 0;
 801c184:	2300      	movs	r3, #0
}
 801c186:	4618      	mov	r0, r3
 801c188:	3720      	adds	r7, #32
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd80      	pop	{r7, pc}

0801c18e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c18e:	b580      	push	{r7, lr}
 801c190:	b088      	sub	sp, #32
 801c192:	af00      	add	r7, sp, #0
 801c194:	60f8      	str	r0, [r7, #12]
 801c196:	460b      	mov	r3, r1
 801c198:	607a      	str	r2, [r7, #4]
 801c19a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c1a2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c1a4:	69bb      	ldr	r3, [r7, #24]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d102      	bne.n	801c1b0 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801c1aa:	f04f 33ff 	mov.w	r3, #4294967295
 801c1ae:	e05c      	b.n	801c26a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c1b6:	685b      	ldr	r3, [r3, #4]
 801c1b8:	f107 0214 	add.w	r2, r7, #20
 801c1bc:	f107 0110 	add.w	r1, r7, #16
 801c1c0:	7af8      	ldrb	r0, [r7, #11]
 801c1c2:	4798      	blx	r3
 801c1c4:	4603      	mov	r3, r0
 801c1c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c1c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d104      	bne.n	801c1da <SCSI_ReadFormatCapacity+0x4c>
 801c1d0:	69bb      	ldr	r3, [r7, #24]
 801c1d2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c1d6:	2b02      	cmp	r3, #2
 801c1d8:	d108      	bne.n	801c1ec <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c1da:	7af9      	ldrb	r1, [r7, #11]
 801c1dc:	233a      	movs	r3, #58	; 0x3a
 801c1de:	2202      	movs	r2, #2
 801c1e0:	68f8      	ldr	r0, [r7, #12]
 801c1e2:	f000 f91e 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801c1e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c1ea:	e03e      	b.n	801c26a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 801c1ec:	2300      	movs	r3, #0
 801c1ee:	83fb      	strh	r3, [r7, #30]
 801c1f0:	e007      	b.n	801c202 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801c1f2:	8bfb      	ldrh	r3, [r7, #30]
 801c1f4:	69ba      	ldr	r2, [r7, #24]
 801c1f6:	4413      	add	r3, r2
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801c1fc:	8bfb      	ldrh	r3, [r7, #30]
 801c1fe:	3301      	adds	r3, #1
 801c200:	83fb      	strh	r3, [r7, #30]
 801c202:	8bfb      	ldrh	r3, [r7, #30]
 801c204:	2b0b      	cmp	r3, #11
 801c206:	d9f4      	bls.n	801c1f2 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 801c208:	69bb      	ldr	r3, [r7, #24]
 801c20a:	2208      	movs	r2, #8
 801c20c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801c20e:	693b      	ldr	r3, [r7, #16]
 801c210:	3b01      	subs	r3, #1
 801c212:	0e1b      	lsrs	r3, r3, #24
 801c214:	b2da      	uxtb	r2, r3
 801c216:	69bb      	ldr	r3, [r7, #24]
 801c218:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801c21a:	693b      	ldr	r3, [r7, #16]
 801c21c:	3b01      	subs	r3, #1
 801c21e:	0c1b      	lsrs	r3, r3, #16
 801c220:	b2da      	uxtb	r2, r3
 801c222:	69bb      	ldr	r3, [r7, #24]
 801c224:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801c226:	693b      	ldr	r3, [r7, #16]
 801c228:	3b01      	subs	r3, #1
 801c22a:	0a1b      	lsrs	r3, r3, #8
 801c22c:	b2da      	uxtb	r2, r3
 801c22e:	69bb      	ldr	r3, [r7, #24]
 801c230:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801c232:	693b      	ldr	r3, [r7, #16]
 801c234:	b2db      	uxtb	r3, r3
 801c236:	3b01      	subs	r3, #1
 801c238:	b2da      	uxtb	r2, r3
 801c23a:	69bb      	ldr	r3, [r7, #24]
 801c23c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801c23e:	69bb      	ldr	r3, [r7, #24]
 801c240:	2202      	movs	r2, #2
 801c242:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801c244:	8abb      	ldrh	r3, [r7, #20]
 801c246:	141b      	asrs	r3, r3, #16
 801c248:	b2da      	uxtb	r2, r3
 801c24a:	69bb      	ldr	r3, [r7, #24]
 801c24c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801c24e:	8abb      	ldrh	r3, [r7, #20]
 801c250:	0a1b      	lsrs	r3, r3, #8
 801c252:	b29b      	uxth	r3, r3
 801c254:	b2da      	uxtb	r2, r3
 801c256:	69bb      	ldr	r3, [r7, #24]
 801c258:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801c25a:	8abb      	ldrh	r3, [r7, #20]
 801c25c:	b2da      	uxtb	r2, r3
 801c25e:	69bb      	ldr	r3, [r7, #24]
 801c260:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801c262:	69bb      	ldr	r3, [r7, #24]
 801c264:	220c      	movs	r2, #12
 801c266:	60da      	str	r2, [r3, #12]

  return 0;
 801c268:	2300      	movs	r3, #0
}
 801c26a:	4618      	mov	r0, r3
 801c26c:	3720      	adds	r7, #32
 801c26e:	46bd      	mov	sp, r7
 801c270:	bd80      	pop	{r7, pc}
	...

0801c274 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b086      	sub	sp, #24
 801c278:	af00      	add	r7, sp, #0
 801c27a:	60f8      	str	r0, [r7, #12]
 801c27c:	460b      	mov	r3, r1
 801c27e:	607a      	str	r2, [r7, #4]
 801c280:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c288:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801c28a:	2317      	movs	r3, #23
 801c28c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c28e:	693b      	ldr	r3, [r7, #16]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d102      	bne.n	801c29a <SCSI_ModeSense6+0x26>
  {
    return -1;
 801c294:	f04f 33ff 	mov.w	r3, #4294967295
 801c298:	e011      	b.n	801c2be <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	3304      	adds	r3, #4
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	8afa      	ldrh	r2, [r7, #22]
 801c2a4:	429a      	cmp	r2, r3
 801c2a6:	d303      	bcc.n	801c2b0 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	3304      	adds	r3, #4
 801c2ac:	781b      	ldrb	r3, [r3, #0]
 801c2ae:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801c2b0:	8afb      	ldrh	r3, [r7, #22]
 801c2b2:	461a      	mov	r2, r3
 801c2b4:	4904      	ldr	r1, [pc, #16]	; (801c2c8 <SCSI_ModeSense6+0x54>)
 801c2b6:	6938      	ldr	r0, [r7, #16]
 801c2b8:	f000 fdbc 	bl	801ce34 <SCSI_UpdateBotData>

  return 0;
 801c2bc:	2300      	movs	r3, #0
}
 801c2be:	4618      	mov	r0, r3
 801c2c0:	3718      	adds	r7, #24
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	bd80      	pop	{r7, pc}
 801c2c6:	bf00      	nop
 801c2c8:	200005d8 	.word	0x200005d8

0801c2cc <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b086      	sub	sp, #24
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	60f8      	str	r0, [r7, #12]
 801c2d4:	460b      	mov	r3, r1
 801c2d6:	607a      	str	r2, [r7, #4]
 801c2d8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c2e0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801c2e2:	231b      	movs	r3, #27
 801c2e4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d102      	bne.n	801c2f2 <SCSI_ModeSense10+0x26>
  {
    return -1;
 801c2ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c2f0:	e011      	b.n	801c316 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	3308      	adds	r3, #8
 801c2f6:	781b      	ldrb	r3, [r3, #0]
 801c2f8:	b29b      	uxth	r3, r3
 801c2fa:	8afa      	ldrh	r2, [r7, #22]
 801c2fc:	429a      	cmp	r2, r3
 801c2fe:	d303      	bcc.n	801c308 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	3308      	adds	r3, #8
 801c304:	781b      	ldrb	r3, [r3, #0]
 801c306:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 801c308:	8afb      	ldrh	r3, [r7, #22]
 801c30a:	461a      	mov	r2, r3
 801c30c:	4904      	ldr	r1, [pc, #16]	; (801c320 <SCSI_ModeSense10+0x54>)
 801c30e:	6938      	ldr	r0, [r7, #16]
 801c310:	f000 fd90 	bl	801ce34 <SCSI_UpdateBotData>

  return 0;
 801c314:	2300      	movs	r3, #0
}
 801c316:	4618      	mov	r0, r3
 801c318:	3718      	adds	r7, #24
 801c31a:	46bd      	mov	sp, r7
 801c31c:	bd80      	pop	{r7, pc}
 801c31e:	bf00      	nop
 801c320:	200005f0 	.word	0x200005f0

0801c324 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b086      	sub	sp, #24
 801c328:	af00      	add	r7, sp, #0
 801c32a:	60f8      	str	r0, [r7, #12]
 801c32c:	460b      	mov	r3, r1
 801c32e:	607a      	str	r2, [r7, #4]
 801c330:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c332:	68fb      	ldr	r3, [r7, #12]
 801c334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c338:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801c33a:	693b      	ldr	r3, [r7, #16]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d102      	bne.n	801c346 <SCSI_RequestSense+0x22>
  {
    return -1;
 801c340:	f04f 33ff 	mov.w	r3, #4294967295
 801c344:	e069      	b.n	801c41a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c346:	693b      	ldr	r3, [r7, #16]
 801c348:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d10a      	bne.n	801c366 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c350:	693b      	ldr	r3, [r7, #16]
 801c352:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c356:	2320      	movs	r3, #32
 801c358:	2205      	movs	r2, #5
 801c35a:	68f8      	ldr	r0, [r7, #12]
 801c35c:	f000 f861 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801c360:	f04f 33ff 	mov.w	r3, #4294967295
 801c364:	e059      	b.n	801c41a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c366:	2300      	movs	r3, #0
 801c368:	75fb      	strb	r3, [r7, #23]
 801c36a:	e007      	b.n	801c37c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801c36c:	7dfb      	ldrb	r3, [r7, #23]
 801c36e:	693a      	ldr	r2, [r7, #16]
 801c370:	4413      	add	r3, r2
 801c372:	2200      	movs	r2, #0
 801c374:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c376:	7dfb      	ldrb	r3, [r7, #23]
 801c378:	3301      	adds	r3, #1
 801c37a:	75fb      	strb	r3, [r7, #23]
 801c37c:	7dfb      	ldrb	r3, [r7, #23]
 801c37e:	2b11      	cmp	r3, #17
 801c380:	d9f4      	bls.n	801c36c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 801c382:	693b      	ldr	r3, [r7, #16]
 801c384:	2270      	movs	r2, #112	; 0x70
 801c386:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801c388:	693b      	ldr	r3, [r7, #16]
 801c38a:	220c      	movs	r2, #12
 801c38c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801c38e:	693b      	ldr	r3, [r7, #16]
 801c390:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801c394:	693b      	ldr	r3, [r7, #16]
 801c396:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c39a:	429a      	cmp	r2, r3
 801c39c:	d02e      	beq.n	801c3fc <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801c39e:	693b      	ldr	r3, [r7, #16]
 801c3a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c3a4:	461a      	mov	r2, r3
 801c3a6:	693b      	ldr	r3, [r7, #16]
 801c3a8:	3248      	adds	r2, #72	; 0x48
 801c3aa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801c3ae:	693b      	ldr	r3, [r7, #16]
 801c3b0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801c3b2:	693b      	ldr	r3, [r7, #16]
 801c3b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c3b8:	693a      	ldr	r2, [r7, #16]
 801c3ba:	3348      	adds	r3, #72	; 0x48
 801c3bc:	00db      	lsls	r3, r3, #3
 801c3be:	4413      	add	r3, r2
 801c3c0:	791a      	ldrb	r2, [r3, #4]
 801c3c2:	693b      	ldr	r3, [r7, #16]
 801c3c4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801c3c6:	693b      	ldr	r3, [r7, #16]
 801c3c8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c3cc:	693a      	ldr	r2, [r7, #16]
 801c3ce:	3348      	adds	r3, #72	; 0x48
 801c3d0:	00db      	lsls	r3, r3, #3
 801c3d2:	4413      	add	r3, r2
 801c3d4:	795a      	ldrb	r2, [r3, #5]
 801c3d6:	693b      	ldr	r3, [r7, #16]
 801c3d8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801c3da:	693b      	ldr	r3, [r7, #16]
 801c3dc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c3e0:	3301      	adds	r3, #1
 801c3e2:	b2da      	uxtb	r2, r3
 801c3e4:	693b      	ldr	r3, [r7, #16]
 801c3e6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801c3ea:	693b      	ldr	r3, [r7, #16]
 801c3ec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c3f0:	2b04      	cmp	r3, #4
 801c3f2:	d103      	bne.n	801c3fc <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 801c3f4:	693b      	ldr	r3, [r7, #16]
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801c3fc:	693b      	ldr	r3, [r7, #16]
 801c3fe:	2212      	movs	r2, #18
 801c400:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	3304      	adds	r3, #4
 801c406:	781b      	ldrb	r3, [r3, #0]
 801c408:	2b12      	cmp	r3, #18
 801c40a:	d805      	bhi.n	801c418 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	3304      	adds	r3, #4
 801c410:	781b      	ldrb	r3, [r3, #0]
 801c412:	461a      	mov	r2, r3
 801c414:	693b      	ldr	r3, [r7, #16]
 801c416:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801c418:	2300      	movs	r3, #0
}
 801c41a:	4618      	mov	r0, r3
 801c41c:	3718      	adds	r7, #24
 801c41e:	46bd      	mov	sp, r7
 801c420:	bd80      	pop	{r7, pc}

0801c422 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801c422:	b480      	push	{r7}
 801c424:	b085      	sub	sp, #20
 801c426:	af00      	add	r7, sp, #0
 801c428:	6078      	str	r0, [r7, #4]
 801c42a:	4608      	mov	r0, r1
 801c42c:	4611      	mov	r1, r2
 801c42e:	461a      	mov	r2, r3
 801c430:	4603      	mov	r3, r0
 801c432:	70fb      	strb	r3, [r7, #3]
 801c434:	460b      	mov	r3, r1
 801c436:	70bb      	strb	r3, [r7, #2]
 801c438:	4613      	mov	r3, r2
 801c43a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c442:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d02c      	beq.n	801c4a4 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c450:	461a      	mov	r2, r3
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	3248      	adds	r2, #72	; 0x48
 801c456:	78b9      	ldrb	r1, [r7, #2]
 801c458:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c462:	68fa      	ldr	r2, [r7, #12]
 801c464:	3348      	adds	r3, #72	; 0x48
 801c466:	00db      	lsls	r3, r3, #3
 801c468:	4413      	add	r3, r2
 801c46a:	787a      	ldrb	r2, [r7, #1]
 801c46c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c474:	68fa      	ldr	r2, [r7, #12]
 801c476:	3348      	adds	r3, #72	; 0x48
 801c478:	00db      	lsls	r3, r3, #3
 801c47a:	4413      	add	r3, r2
 801c47c:	2200      	movs	r2, #0
 801c47e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c486:	3301      	adds	r3, #1
 801c488:	b2da      	uxtb	r2, r3
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c496:	2b04      	cmp	r3, #4
 801c498:	d105      	bne.n	801c4a6 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	2200      	movs	r2, #0
 801c49e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801c4a2:	e000      	b.n	801c4a6 <SCSI_SenseCode+0x84>
    return;
 801c4a4:	bf00      	nop
  }
}
 801c4a6:	3714      	adds	r7, #20
 801c4a8:	46bd      	mov	sp, r7
 801c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ae:	4770      	bx	lr

0801c4b0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c4b0:	b580      	push	{r7, lr}
 801c4b2:	b086      	sub	sp, #24
 801c4b4:	af00      	add	r7, sp, #0
 801c4b6:	60f8      	str	r0, [r7, #12]
 801c4b8:	460b      	mov	r3, r1
 801c4ba:	607a      	str	r2, [r7, #4]
 801c4bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c4c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c4c6:	697b      	ldr	r3, [r7, #20]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d102      	bne.n	801c4d2 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801c4cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c4d0:	e03b      	b.n	801c54a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801c4d2:	697b      	ldr	r3, [r7, #20]
 801c4d4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c4d8:	2b01      	cmp	r3, #1
 801c4da:	d10f      	bne.n	801c4fc <SCSI_StartStopUnit+0x4c>
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	3304      	adds	r3, #4
 801c4e0:	781b      	ldrb	r3, [r3, #0]
 801c4e2:	f003 0303 	and.w	r3, r3, #3
 801c4e6:	2b02      	cmp	r3, #2
 801c4e8:	d108      	bne.n	801c4fc <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801c4ea:	7af9      	ldrb	r1, [r7, #11]
 801c4ec:	2324      	movs	r3, #36	; 0x24
 801c4ee:	2205      	movs	r2, #5
 801c4f0:	68f8      	ldr	r0, [r7, #12]
 801c4f2:	f7ff ff96 	bl	801c422 <SCSI_SenseCode>

    return -1;
 801c4f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c4fa:	e026      	b.n	801c54a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	3304      	adds	r3, #4
 801c500:	781b      	ldrb	r3, [r3, #0]
 801c502:	f003 0303 	and.w	r3, r3, #3
 801c506:	2b01      	cmp	r3, #1
 801c508:	d104      	bne.n	801c514 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c50a:	697b      	ldr	r3, [r7, #20]
 801c50c:	2200      	movs	r2, #0
 801c50e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c512:	e016      	b.n	801c542 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	3304      	adds	r3, #4
 801c518:	781b      	ldrb	r3, [r3, #0]
 801c51a:	f003 0303 	and.w	r3, r3, #3
 801c51e:	2b02      	cmp	r3, #2
 801c520:	d104      	bne.n	801c52c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801c522:	697b      	ldr	r3, [r7, #20]
 801c524:	2202      	movs	r2, #2
 801c526:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c52a:	e00a      	b.n	801c542 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	3304      	adds	r3, #4
 801c530:	781b      	ldrb	r3, [r3, #0]
 801c532:	f003 0303 	and.w	r3, r3, #3
 801c536:	2b03      	cmp	r3, #3
 801c538:	d103      	bne.n	801c542 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	2200      	movs	r2, #0
 801c53e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801c542:	697b      	ldr	r3, [r7, #20]
 801c544:	2200      	movs	r2, #0
 801c546:	60da      	str	r2, [r3, #12]

  return 0;
 801c548:	2300      	movs	r3, #0
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3718      	adds	r7, #24
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}

0801c552 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c552:	b480      	push	{r7}
 801c554:	b087      	sub	sp, #28
 801c556:	af00      	add	r7, sp, #0
 801c558:	60f8      	str	r0, [r7, #12]
 801c55a:	460b      	mov	r3, r1
 801c55c:	607a      	str	r2, [r7, #4]
 801c55e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c566:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c568:	697b      	ldr	r3, [r7, #20]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d102      	bne.n	801c574 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801c56e:	f04f 33ff 	mov.w	r3, #4294967295
 801c572:	e011      	b.n	801c598 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	3304      	adds	r3, #4
 801c578:	781b      	ldrb	r3, [r3, #0]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d104      	bne.n	801c588 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	2200      	movs	r2, #0
 801c582:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c586:	e003      	b.n	801c590 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801c588:	697b      	ldr	r3, [r7, #20]
 801c58a:	2201      	movs	r2, #1
 801c58c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801c590:	697b      	ldr	r3, [r7, #20]
 801c592:	2200      	movs	r2, #0
 801c594:	60da      	str	r2, [r3, #12]

  return 0;
 801c596:	2300      	movs	r3, #0
}
 801c598:	4618      	mov	r0, r3
 801c59a:	371c      	adds	r7, #28
 801c59c:	46bd      	mov	sp, r7
 801c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5a2:	4770      	bx	lr

0801c5a4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b086      	sub	sp, #24
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	60f8      	str	r0, [r7, #12]
 801c5ac:	460b      	mov	r3, r1
 801c5ae:	607a      	str	r2, [r7, #4]
 801c5b0:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c5b8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d102      	bne.n	801c5c6 <SCSI_Read10+0x22>
  {
    return -1;
 801c5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5c4:	e08a      	b.n	801c6dc <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c5c6:	697b      	ldr	r3, [r7, #20]
 801c5c8:	7a1b      	ldrb	r3, [r3, #8]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d17c      	bne.n	801c6c8 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c5ce:	697b      	ldr	r3, [r7, #20]
 801c5d0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c5d4:	b25b      	sxtb	r3, r3
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	db0a      	blt.n	801c5f0 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c5da:	697b      	ldr	r3, [r7, #20]
 801c5dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c5e0:	2320      	movs	r3, #32
 801c5e2:	2205      	movs	r2, #5
 801c5e4:	68f8      	ldr	r0, [r7, #12]
 801c5e6:	f7ff ff1c 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c5ea:	f04f 33ff 	mov.w	r3, #4294967295
 801c5ee:	e075      	b.n	801c6dc <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c5f0:	697b      	ldr	r3, [r7, #20]
 801c5f2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c5f6:	2b02      	cmp	r3, #2
 801c5f8:	d108      	bne.n	801c60c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c5fa:	7af9      	ldrb	r1, [r7, #11]
 801c5fc:	233a      	movs	r3, #58	; 0x3a
 801c5fe:	2202      	movs	r2, #2
 801c600:	68f8      	ldr	r0, [r7, #12]
 801c602:	f7ff ff0e 	bl	801c422 <SCSI_SenseCode>

      return -1;
 801c606:	f04f 33ff 	mov.w	r3, #4294967295
 801c60a:	e067      	b.n	801c6dc <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c612:	689b      	ldr	r3, [r3, #8]
 801c614:	7afa      	ldrb	r2, [r7, #11]
 801c616:	4610      	mov	r0, r2
 801c618:	4798      	blx	r3
 801c61a:	4603      	mov	r3, r0
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d008      	beq.n	801c632 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c620:	7af9      	ldrb	r1, [r7, #11]
 801c622:	233a      	movs	r3, #58	; 0x3a
 801c624:	2202      	movs	r2, #2
 801c626:	68f8      	ldr	r0, [r7, #12]
 801c628:	f7ff fefb 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c62c:	f04f 33ff 	mov.w	r3, #4294967295
 801c630:	e054      	b.n	801c6dc <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	3302      	adds	r3, #2
 801c636:	781b      	ldrb	r3, [r3, #0]
 801c638:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	3303      	adds	r3, #3
 801c63e:	781b      	ldrb	r3, [r3, #0]
 801c640:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c642:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	3304      	adds	r3, #4
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c64c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c64e:	687a      	ldr	r2, [r7, #4]
 801c650:	3205      	adds	r2, #5
 801c652:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c654:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c656:	697b      	ldr	r3, [r7, #20]
 801c658:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	3307      	adds	r3, #7
 801c660:	781b      	ldrb	r3, [r3, #0]
 801c662:	021b      	lsls	r3, r3, #8
 801c664:	687a      	ldr	r2, [r7, #4]
 801c666:	3208      	adds	r2, #8
 801c668:	7812      	ldrb	r2, [r2, #0]
 801c66a:	431a      	orrs	r2, r3
 801c66c:	697b      	ldr	r3, [r7, #20]
 801c66e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c672:	697b      	ldr	r3, [r7, #20]
 801c674:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c678:	697b      	ldr	r3, [r7, #20]
 801c67a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c67e:	7af9      	ldrb	r1, [r7, #11]
 801c680:	68f8      	ldr	r0, [r7, #12]
 801c682:	f000 faad 	bl	801cbe0 <SCSI_CheckAddressRange>
 801c686:	4603      	mov	r3, r0
 801c688:	2b00      	cmp	r3, #0
 801c68a:	da02      	bge.n	801c692 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c68c:	f04f 33ff 	mov.w	r3, #4294967295
 801c690:	e024      	b.n	801c6dc <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c692:	697b      	ldr	r3, [r7, #20]
 801c694:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c698:	697b      	ldr	r3, [r7, #20]
 801c69a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c69e:	6979      	ldr	r1, [r7, #20]
 801c6a0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c6a4:	fb01 f303 	mul.w	r3, r1, r3
 801c6a8:	429a      	cmp	r2, r3
 801c6aa:	d00a      	beq.n	801c6c2 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c6ac:	697b      	ldr	r3, [r7, #20]
 801c6ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c6b2:	2320      	movs	r3, #32
 801c6b4:	2205      	movs	r2, #5
 801c6b6:	68f8      	ldr	r0, [r7, #12]
 801c6b8:	f7ff feb3 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c6bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c6c0:	e00c      	b.n	801c6dc <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	2202      	movs	r2, #2
 801c6c6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c6c8:	697b      	ldr	r3, [r7, #20]
 801c6ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c6ce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c6d0:	7afb      	ldrb	r3, [r7, #11]
 801c6d2:	4619      	mov	r1, r3
 801c6d4:	68f8      	ldr	r0, [r7, #12]
 801c6d6:	f000 faab 	bl	801cc30 <SCSI_ProcessRead>
 801c6da:	4603      	mov	r3, r0
}
 801c6dc:	4618      	mov	r0, r3
 801c6de:	3718      	adds	r7, #24
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd80      	pop	{r7, pc}

0801c6e4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b086      	sub	sp, #24
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	60f8      	str	r0, [r7, #12]
 801c6ec:	460b      	mov	r3, r1
 801c6ee:	607a      	str	r2, [r7, #4]
 801c6f0:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c6f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c6fa:	697b      	ldr	r3, [r7, #20]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d102      	bne.n	801c706 <SCSI_Read12+0x22>
  {
    return -1;
 801c700:	f04f 33ff 	mov.w	r3, #4294967295
 801c704:	e095      	b.n	801c832 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c706:	697b      	ldr	r3, [r7, #20]
 801c708:	7a1b      	ldrb	r3, [r3, #8]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	f040 8087 	bne.w	801c81e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c710:	697b      	ldr	r3, [r7, #20]
 801c712:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c716:	b25b      	sxtb	r3, r3
 801c718:	2b00      	cmp	r3, #0
 801c71a:	db0a      	blt.n	801c732 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c71c:	697b      	ldr	r3, [r7, #20]
 801c71e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c722:	2320      	movs	r3, #32
 801c724:	2205      	movs	r2, #5
 801c726:	68f8      	ldr	r0, [r7, #12]
 801c728:	f7ff fe7b 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c72c:	f04f 33ff 	mov.w	r3, #4294967295
 801c730:	e07f      	b.n	801c832 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c732:	697b      	ldr	r3, [r7, #20]
 801c734:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c738:	2b02      	cmp	r3, #2
 801c73a:	d108      	bne.n	801c74e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c73c:	7af9      	ldrb	r1, [r7, #11]
 801c73e:	233a      	movs	r3, #58	; 0x3a
 801c740:	2202      	movs	r2, #2
 801c742:	68f8      	ldr	r0, [r7, #12]
 801c744:	f7ff fe6d 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c748:	f04f 33ff 	mov.w	r3, #4294967295
 801c74c:	e071      	b.n	801c832 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c754:	689b      	ldr	r3, [r3, #8]
 801c756:	7afa      	ldrb	r2, [r7, #11]
 801c758:	4610      	mov	r0, r2
 801c75a:	4798      	blx	r3
 801c75c:	4603      	mov	r3, r0
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d008      	beq.n	801c774 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c762:	7af9      	ldrb	r1, [r7, #11]
 801c764:	233a      	movs	r3, #58	; 0x3a
 801c766:	2202      	movs	r2, #2
 801c768:	68f8      	ldr	r0, [r7, #12]
 801c76a:	f7ff fe5a 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c76e:	f04f 33ff 	mov.w	r3, #4294967295
 801c772:	e05e      	b.n	801c832 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	3302      	adds	r3, #2
 801c778:	781b      	ldrb	r3, [r3, #0]
 801c77a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	3303      	adds	r3, #3
 801c780:	781b      	ldrb	r3, [r3, #0]
 801c782:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c784:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	3304      	adds	r3, #4
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c78e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c790:	687a      	ldr	r2, [r7, #4]
 801c792:	3205      	adds	r2, #5
 801c794:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c796:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c798:	697b      	ldr	r3, [r7, #20]
 801c79a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	3306      	adds	r3, #6
 801c7a2:	781b      	ldrb	r3, [r3, #0]
 801c7a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	3307      	adds	r3, #7
 801c7aa:	781b      	ldrb	r3, [r3, #0]
 801c7ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c7ae:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	3308      	adds	r3, #8
 801c7b4:	781b      	ldrb	r3, [r3, #0]
 801c7b6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801c7b8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801c7ba:	687a      	ldr	r2, [r7, #4]
 801c7bc:	3209      	adds	r2, #9
 801c7be:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801c7c0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c7c2:	697b      	ldr	r3, [r7, #20]
 801c7c4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c7d4:	7af9      	ldrb	r1, [r7, #11]
 801c7d6:	68f8      	ldr	r0, [r7, #12]
 801c7d8:	f000 fa02 	bl	801cbe0 <SCSI_CheckAddressRange>
 801c7dc:	4603      	mov	r3, r0
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	da02      	bge.n	801c7e8 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c7e2:	f04f 33ff 	mov.w	r3, #4294967295
 801c7e6:	e024      	b.n	801c832 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c7e8:	697b      	ldr	r3, [r7, #20]
 801c7ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c7ee:	697b      	ldr	r3, [r7, #20]
 801c7f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c7f4:	6979      	ldr	r1, [r7, #20]
 801c7f6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c7fa:	fb01 f303 	mul.w	r3, r1, r3
 801c7fe:	429a      	cmp	r2, r3
 801c800:	d00a      	beq.n	801c818 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c802:	697b      	ldr	r3, [r7, #20]
 801c804:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c808:	2320      	movs	r3, #32
 801c80a:	2205      	movs	r2, #5
 801c80c:	68f8      	ldr	r0, [r7, #12]
 801c80e:	f7ff fe08 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c812:	f04f 33ff 	mov.w	r3, #4294967295
 801c816:	e00c      	b.n	801c832 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c818:	697b      	ldr	r3, [r7, #20]
 801c81a:	2202      	movs	r2, #2
 801c81c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c824:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c826:	7afb      	ldrb	r3, [r7, #11]
 801c828:	4619      	mov	r1, r3
 801c82a:	68f8      	ldr	r0, [r7, #12]
 801c82c:	f000 fa00 	bl	801cc30 <SCSI_ProcessRead>
 801c830:	4603      	mov	r3, r0
}
 801c832:	4618      	mov	r0, r3
 801c834:	3718      	adds	r7, #24
 801c836:	46bd      	mov	sp, r7
 801c838:	bd80      	pop	{r7, pc}

0801c83a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c83a:	b580      	push	{r7, lr}
 801c83c:	b086      	sub	sp, #24
 801c83e:	af00      	add	r7, sp, #0
 801c840:	60f8      	str	r0, [r7, #12]
 801c842:	460b      	mov	r3, r1
 801c844:	607a      	str	r2, [r7, #4]
 801c846:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c84e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801c850:	697b      	ldr	r3, [r7, #20]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d102      	bne.n	801c85c <SCSI_Write10+0x22>
  {
    return -1;
 801c856:	f04f 33ff 	mov.w	r3, #4294967295
 801c85a:	e0af      	b.n	801c9bc <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c85c:	697b      	ldr	r3, [r7, #20]
 801c85e:	7a1b      	ldrb	r3, [r3, #8]
 801c860:	2b00      	cmp	r3, #0
 801c862:	f040 80a5 	bne.w	801c9b0 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801c866:	697b      	ldr	r3, [r7, #20]
 801c868:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d10a      	bne.n	801c886 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c870:	697b      	ldr	r3, [r7, #20]
 801c872:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c876:	2320      	movs	r3, #32
 801c878:	2205      	movs	r2, #5
 801c87a:	68f8      	ldr	r0, [r7, #12]
 801c87c:	f7ff fdd1 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c880:	f04f 33ff 	mov.w	r3, #4294967295
 801c884:	e09a      	b.n	801c9bc <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801c886:	697b      	ldr	r3, [r7, #20]
 801c888:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c88c:	b25b      	sxtb	r3, r3
 801c88e:	2b00      	cmp	r3, #0
 801c890:	da0a      	bge.n	801c8a8 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c892:	697b      	ldr	r3, [r7, #20]
 801c894:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c898:	2320      	movs	r3, #32
 801c89a:	2205      	movs	r2, #5
 801c89c:	68f8      	ldr	r0, [r7, #12]
 801c89e:	f7ff fdc0 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8a6:	e089      	b.n	801c9bc <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c8ae:	689b      	ldr	r3, [r3, #8]
 801c8b0:	7afa      	ldrb	r2, [r7, #11]
 801c8b2:	4610      	mov	r0, r2
 801c8b4:	4798      	blx	r3
 801c8b6:	4603      	mov	r3, r0
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d008      	beq.n	801c8ce <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c8bc:	7af9      	ldrb	r1, [r7, #11]
 801c8be:	233a      	movs	r3, #58	; 0x3a
 801c8c0:	2202      	movs	r2, #2
 801c8c2:	68f8      	ldr	r0, [r7, #12]
 801c8c4:	f7ff fdad 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8cc:	e076      	b.n	801c9bc <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c8d4:	68db      	ldr	r3, [r3, #12]
 801c8d6:	7afa      	ldrb	r2, [r7, #11]
 801c8d8:	4610      	mov	r0, r2
 801c8da:	4798      	blx	r3
 801c8dc:	4603      	mov	r3, r0
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d008      	beq.n	801c8f4 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801c8e2:	7af9      	ldrb	r1, [r7, #11]
 801c8e4:	2327      	movs	r3, #39	; 0x27
 801c8e6:	2202      	movs	r2, #2
 801c8e8:	68f8      	ldr	r0, [r7, #12]
 801c8ea:	f7ff fd9a 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c8ee:	f04f 33ff 	mov.w	r3, #4294967295
 801c8f2:	e063      	b.n	801c9bc <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	3302      	adds	r3, #2
 801c8f8:	781b      	ldrb	r3, [r3, #0]
 801c8fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	3303      	adds	r3, #3
 801c900:	781b      	ldrb	r3, [r3, #0]
 801c902:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c904:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	3304      	adds	r3, #4
 801c90a:	781b      	ldrb	r3, [r3, #0]
 801c90c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c90e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c910:	687a      	ldr	r2, [r7, #4]
 801c912:	3205      	adds	r2, #5
 801c914:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801c916:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c918:	697b      	ldr	r3, [r7, #20]
 801c91a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	3307      	adds	r3, #7
 801c922:	781b      	ldrb	r3, [r3, #0]
 801c924:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801c926:	687a      	ldr	r2, [r7, #4]
 801c928:	3208      	adds	r2, #8
 801c92a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801c92c:	431a      	orrs	r2, r3
 801c92e:	697b      	ldr	r3, [r7, #20]
 801c930:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c934:	697b      	ldr	r3, [r7, #20]
 801c936:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c93a:	697b      	ldr	r3, [r7, #20]
 801c93c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c940:	7af9      	ldrb	r1, [r7, #11]
 801c942:	68f8      	ldr	r0, [r7, #12]
 801c944:	f000 f94c 	bl	801cbe0 <SCSI_CheckAddressRange>
 801c948:	4603      	mov	r3, r0
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	da02      	bge.n	801c954 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c94e:	f04f 33ff 	mov.w	r3, #4294967295
 801c952:	e033      	b.n	801c9bc <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801c954:	697b      	ldr	r3, [r7, #20]
 801c956:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c95a:	697a      	ldr	r2, [r7, #20]
 801c95c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801c960:	fb02 f303 	mul.w	r3, r2, r3
 801c964:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801c966:	697b      	ldr	r3, [r7, #20]
 801c968:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c96c:	693a      	ldr	r2, [r7, #16]
 801c96e:	429a      	cmp	r2, r3
 801c970:	d00a      	beq.n	801c988 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c972:	697b      	ldr	r3, [r7, #20]
 801c974:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c978:	2320      	movs	r3, #32
 801c97a:	2205      	movs	r2, #5
 801c97c:	68f8      	ldr	r0, [r7, #12]
 801c97e:	f7ff fd50 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801c982:	f04f 33ff 	mov.w	r3, #4294967295
 801c986:	e019      	b.n	801c9bc <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801c988:	693b      	ldr	r3, [r7, #16]
 801c98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c98e:	bf28      	it	cs
 801c990:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801c994:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801c996:	697b      	ldr	r3, [r7, #20]
 801c998:	2201      	movs	r2, #1
 801c99a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801c99c:	697b      	ldr	r3, [r7, #20]
 801c99e:	f103 0210 	add.w	r2, r3, #16
 801c9a2:	693b      	ldr	r3, [r7, #16]
 801c9a4:	2101      	movs	r1, #1
 801c9a6:	68f8      	ldr	r0, [r7, #12]
 801c9a8:	f7fd f95a 	bl	8019c60 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	e005      	b.n	801c9bc <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 801c9b0:	7afb      	ldrb	r3, [r7, #11]
 801c9b2:	4619      	mov	r1, r3
 801c9b4:	68f8      	ldr	r0, [r7, #12]
 801c9b6:	f000 f9b4 	bl	801cd22 <SCSI_ProcessWrite>
 801c9ba:	4603      	mov	r3, r0
}
 801c9bc:	4618      	mov	r0, r3
 801c9be:	3718      	adds	r7, #24
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd80      	pop	{r7, pc}

0801c9c4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b086      	sub	sp, #24
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	60f8      	str	r0, [r7, #12]
 801c9cc:	460b      	mov	r3, r1
 801c9ce:	607a      	str	r2, [r7, #4]
 801c9d0:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c9d8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801c9da:	697b      	ldr	r3, [r7, #20]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d102      	bne.n	801c9e6 <SCSI_Write12+0x22>
  {
    return -1;
 801c9e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c9e4:	e0bf      	b.n	801cb66 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c9e6:	697b      	ldr	r3, [r7, #20]
 801c9e8:	7a1b      	ldrb	r3, [r3, #8]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	f040 80b5 	bne.w	801cb5a <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801c9f0:	697b      	ldr	r3, [r7, #20]
 801c9f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d10a      	bne.n	801ca10 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c9fa:	697b      	ldr	r3, [r7, #20]
 801c9fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ca00:	2320      	movs	r3, #32
 801ca02:	2205      	movs	r2, #5
 801ca04:	68f8      	ldr	r0, [r7, #12]
 801ca06:	f7ff fd0c 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801ca0a:	f04f 33ff 	mov.w	r3, #4294967295
 801ca0e:	e0aa      	b.n	801cb66 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801ca10:	697b      	ldr	r3, [r7, #20]
 801ca12:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801ca16:	b25b      	sxtb	r3, r3
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	da0a      	bge.n	801ca32 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ca1c:	697b      	ldr	r3, [r7, #20]
 801ca1e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ca22:	2320      	movs	r3, #32
 801ca24:	2205      	movs	r2, #5
 801ca26:	68f8      	ldr	r0, [r7, #12]
 801ca28:	f7ff fcfb 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801ca2c:	f04f 33ff 	mov.w	r3, #4294967295
 801ca30:	e099      	b.n	801cb66 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca38:	689b      	ldr	r3, [r3, #8]
 801ca3a:	7afa      	ldrb	r2, [r7, #11]
 801ca3c:	4610      	mov	r0, r2
 801ca3e:	4798      	blx	r3
 801ca40:	4603      	mov	r3, r0
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d00b      	beq.n	801ca5e <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ca46:	7af9      	ldrb	r1, [r7, #11]
 801ca48:	233a      	movs	r3, #58	; 0x3a
 801ca4a:	2202      	movs	r2, #2
 801ca4c:	68f8      	ldr	r0, [r7, #12]
 801ca4e:	f7ff fce8 	bl	801c422 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801ca52:	697b      	ldr	r3, [r7, #20]
 801ca54:	2205      	movs	r2, #5
 801ca56:	721a      	strb	r2, [r3, #8]
      return -1;
 801ca58:	f04f 33ff 	mov.w	r3, #4294967295
 801ca5c:	e083      	b.n	801cb66 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca64:	68db      	ldr	r3, [r3, #12]
 801ca66:	7afa      	ldrb	r2, [r7, #11]
 801ca68:	4610      	mov	r0, r2
 801ca6a:	4798      	blx	r3
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d00b      	beq.n	801ca8a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801ca72:	7af9      	ldrb	r1, [r7, #11]
 801ca74:	2327      	movs	r3, #39	; 0x27
 801ca76:	2202      	movs	r2, #2
 801ca78:	68f8      	ldr	r0, [r7, #12]
 801ca7a:	f7ff fcd2 	bl	801c422 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801ca7e:	697b      	ldr	r3, [r7, #20]
 801ca80:	2205      	movs	r2, #5
 801ca82:	721a      	strb	r2, [r3, #8]
      return -1;
 801ca84:	f04f 33ff 	mov.w	r3, #4294967295
 801ca88:	e06d      	b.n	801cb66 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	3302      	adds	r3, #2
 801ca8e:	781b      	ldrb	r3, [r3, #0]
 801ca90:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	3303      	adds	r3, #3
 801ca96:	781b      	ldrb	r3, [r3, #0]
 801ca98:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca9a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	3304      	adds	r3, #4
 801caa0:	781b      	ldrb	r3, [r3, #0]
 801caa2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801caa4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801caa6:	687a      	ldr	r2, [r7, #4]
 801caa8:	3205      	adds	r2, #5
 801caaa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801caac:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801caae:	697b      	ldr	r3, [r7, #20]
 801cab0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	3306      	adds	r3, #6
 801cab8:	781b      	ldrb	r3, [r3, #0]
 801caba:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	3307      	adds	r3, #7
 801cac0:	781b      	ldrb	r3, [r3, #0]
 801cac2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cac4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	3308      	adds	r3, #8
 801caca:	781b      	ldrb	r3, [r3, #0]
 801cacc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801cace:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801cad0:	687a      	ldr	r2, [r7, #4]
 801cad2:	3209      	adds	r2, #9
 801cad4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801cad6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cad8:	697b      	ldr	r3, [r7, #20]
 801cada:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801cade:	697b      	ldr	r3, [r7, #20]
 801cae0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cae4:	697b      	ldr	r3, [r7, #20]
 801cae6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801caea:	7af9      	ldrb	r1, [r7, #11]
 801caec:	68f8      	ldr	r0, [r7, #12]
 801caee:	f000 f877 	bl	801cbe0 <SCSI_CheckAddressRange>
 801caf2:	4603      	mov	r3, r0
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	da02      	bge.n	801cafe <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801caf8:	f04f 33ff 	mov.w	r3, #4294967295
 801cafc:	e033      	b.n	801cb66 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cafe:	697b      	ldr	r3, [r7, #20]
 801cb00:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cb04:	697a      	ldr	r2, [r7, #20]
 801cb06:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cb0a:	fb02 f303 	mul.w	r3, r2, r3
 801cb0e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801cb10:	697b      	ldr	r3, [r7, #20]
 801cb12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cb16:	693a      	ldr	r2, [r7, #16]
 801cb18:	429a      	cmp	r2, r3
 801cb1a:	d00a      	beq.n	801cb32 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cb22:	2320      	movs	r3, #32
 801cb24:	2205      	movs	r2, #5
 801cb26:	68f8      	ldr	r0, [r7, #12]
 801cb28:	f7ff fc7b 	bl	801c422 <SCSI_SenseCode>
      return -1;
 801cb2c:	f04f 33ff 	mov.w	r3, #4294967295
 801cb30:	e019      	b.n	801cb66 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801cb32:	693b      	ldr	r3, [r7, #16]
 801cb34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb38:	bf28      	it	cs
 801cb3a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cb3e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	2201      	movs	r2, #1
 801cb44:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cb46:	697b      	ldr	r3, [r7, #20]
 801cb48:	f103 0210 	add.w	r2, r3, #16
 801cb4c:	693b      	ldr	r3, [r7, #16]
 801cb4e:	2101      	movs	r1, #1
 801cb50:	68f8      	ldr	r0, [r7, #12]
 801cb52:	f7fd f885 	bl	8019c60 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cb56:	2300      	movs	r3, #0
 801cb58:	e005      	b.n	801cb66 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 801cb5a:	7afb      	ldrb	r3, [r7, #11]
 801cb5c:	4619      	mov	r1, r3
 801cb5e:	68f8      	ldr	r0, [r7, #12]
 801cb60:	f000 f8df 	bl	801cd22 <SCSI_ProcessWrite>
 801cb64:	4603      	mov	r3, r0
}
 801cb66:	4618      	mov	r0, r3
 801cb68:	3718      	adds	r7, #24
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}

0801cb6e <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cb6e:	b580      	push	{r7, lr}
 801cb70:	b086      	sub	sp, #24
 801cb72:	af00      	add	r7, sp, #0
 801cb74:	60f8      	str	r0, [r7, #12]
 801cb76:	460b      	mov	r3, r1
 801cb78:	607a      	str	r2, [r7, #4]
 801cb7a:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cb82:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cb84:	697b      	ldr	r3, [r7, #20]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d102      	bne.n	801cb90 <SCSI_Verify10+0x22>
  {
    return -1;
 801cb8a:	f04f 33ff 	mov.w	r3, #4294967295
 801cb8e:	e023      	b.n	801cbd8 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	3301      	adds	r3, #1
 801cb94:	781b      	ldrb	r3, [r3, #0]
 801cb96:	f003 0302 	and.w	r3, r3, #2
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d008      	beq.n	801cbb0 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801cb9e:	7af9      	ldrb	r1, [r7, #11]
 801cba0:	2324      	movs	r3, #36	; 0x24
 801cba2:	2205      	movs	r2, #5
 801cba4:	68f8      	ldr	r0, [r7, #12]
 801cba6:	f7ff fc3c 	bl	801c422 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801cbaa:	f04f 33ff 	mov.w	r3, #4294967295
 801cbae:	e013      	b.n	801cbd8 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cbb6:	697b      	ldr	r3, [r7, #20]
 801cbb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cbbc:	7af9      	ldrb	r1, [r7, #11]
 801cbbe:	68f8      	ldr	r0, [r7, #12]
 801cbc0:	f000 f80e 	bl	801cbe0 <SCSI_CheckAddressRange>
 801cbc4:	4603      	mov	r3, r0
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	da02      	bge.n	801cbd0 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801cbca:	f04f 33ff 	mov.w	r3, #4294967295
 801cbce:	e003      	b.n	801cbd8 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 801cbd0:	697b      	ldr	r3, [r7, #20]
 801cbd2:	2200      	movs	r2, #0
 801cbd4:	60da      	str	r2, [r3, #12]

  return 0;
 801cbd6:	2300      	movs	r3, #0
}
 801cbd8:	4618      	mov	r0, r3
 801cbda:	3718      	adds	r7, #24
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}

0801cbe0 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b086      	sub	sp, #24
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	60f8      	str	r0, [r7, #12]
 801cbe8:	607a      	str	r2, [r7, #4]
 801cbea:	603b      	str	r3, [r7, #0]
 801cbec:	460b      	mov	r3, r1
 801cbee:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cbf6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cbf8:	697b      	ldr	r3, [r7, #20]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d102      	bne.n	801cc04 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801cbfe:	f04f 33ff 	mov.w	r3, #4294967295
 801cc02:	e011      	b.n	801cc28 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801cc04:	687a      	ldr	r2, [r7, #4]
 801cc06:	683b      	ldr	r3, [r7, #0]
 801cc08:	441a      	add	r2, r3
 801cc0a:	697b      	ldr	r3, [r7, #20]
 801cc0c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801cc10:	429a      	cmp	r2, r3
 801cc12:	d908      	bls.n	801cc26 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801cc14:	7af9      	ldrb	r1, [r7, #11]
 801cc16:	2321      	movs	r3, #33	; 0x21
 801cc18:	2205      	movs	r2, #5
 801cc1a:	68f8      	ldr	r0, [r7, #12]
 801cc1c:	f7ff fc01 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801cc20:	f04f 33ff 	mov.w	r3, #4294967295
 801cc24:	e000      	b.n	801cc28 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 801cc26:	2300      	movs	r3, #0
}
 801cc28:	4618      	mov	r0, r3
 801cc2a:	3718      	adds	r7, #24
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	bd80      	pop	{r7, pc}

0801cc30 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cc30:	b590      	push	{r4, r7, lr}
 801cc32:	b085      	sub	sp, #20
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
 801cc38:	460b      	mov	r3, r1
 801cc3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc42:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cc4a:	68fa      	ldr	r2, [r7, #12]
 801cc4c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cc50:	fb02 f303 	mul.w	r3, r2, r3
 801cc54:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d102      	bne.n	801cc62 <SCSI_ProcessRead+0x32>
  {
    return -1;
 801cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc60:	e05b      	b.n	801cd1a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cc62:	68bb      	ldr	r3, [r7, #8]
 801cc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cc68:	bf28      	it	cs
 801cc6a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cc6e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cc76:	691c      	ldr	r4, [r3, #16]
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	f103 0110 	add.w	r1, r3, #16
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	68bb      	ldr	r3, [r7, #8]
 801cc8e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cc92:	b29b      	uxth	r3, r3
 801cc94:	78f8      	ldrb	r0, [r7, #3]
 801cc96:	47a0      	blx	r4
 801cc98:	4603      	mov	r3, r0
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	da08      	bge.n	801ccb0 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801cc9e:	78f9      	ldrb	r1, [r7, #3]
 801cca0:	2311      	movs	r3, #17
 801cca2:	2204      	movs	r2, #4
 801cca4:	6878      	ldr	r0, [r7, #4]
 801cca6:	f7ff fbbc 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801ccaa:	f04f 33ff 	mov.w	r3, #4294967295
 801ccae:	e034      	b.n	801cd1a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	f103 0210 	add.w	r2, r3, #16
 801ccb6:	68bb      	ldr	r3, [r7, #8]
 801ccb8:	2181      	movs	r1, #129	; 0x81
 801ccba:	6878      	ldr	r0, [r7, #4]
 801ccbc:	f7fc ff98 	bl	8019bf0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cccc:	4619      	mov	r1, r3
 801ccce:	68bb      	ldr	r3, [r7, #8]
 801ccd0:	fbb3 f3f1 	udiv	r3, r3, r1
 801ccd4:	441a      	add	r2, r3
 801ccd6:	68fb      	ldr	r3, [r7, #12]
 801ccd8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cce8:	4619      	mov	r1, r3
 801ccea:	68bb      	ldr	r3, [r7, #8]
 801ccec:	fbb3 f3f1 	udiv	r3, r3, r1
 801ccf0:	1ad2      	subs	r2, r2, r3
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801ccfe:	68bb      	ldr	r3, [r7, #8]
 801cd00:	1ad2      	subs	r2, r2, r3
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d102      	bne.n	801cd18 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	2203      	movs	r2, #3
 801cd16:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801cd18:	2300      	movs	r3, #0
}
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	3714      	adds	r7, #20
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	bd90      	pop	{r4, r7, pc}

0801cd22 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cd22:	b590      	push	{r4, r7, lr}
 801cd24:	b085      	sub	sp, #20
 801cd26:	af00      	add	r7, sp, #0
 801cd28:	6078      	str	r0, [r7, #4]
 801cd2a:	460b      	mov	r3, r1
 801cd2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cd34:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cd3c:	68fa      	ldr	r2, [r7, #12]
 801cd3e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cd42:	fb02 f303 	mul.w	r3, r2, r3
 801cd46:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d102      	bne.n	801cd54 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801cd4e:	f04f 33ff 	mov.w	r3, #4294967295
 801cd52:	e06b      	b.n	801ce2c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cd54:	68bb      	ldr	r3, [r7, #8]
 801cd56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd5a:	bf28      	it	cs
 801cd5c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cd60:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cd68:	695c      	ldr	r4, [r3, #20]
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	f103 0110 	add.w	r1, r3, #16
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	68bb      	ldr	r3, [r7, #8]
 801cd80:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cd84:	b29b      	uxth	r3, r3
 801cd86:	78f8      	ldrb	r0, [r7, #3]
 801cd88:	47a0      	blx	r4
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	da08      	bge.n	801cda2 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801cd90:	78f9      	ldrb	r1, [r7, #3]
 801cd92:	2303      	movs	r3, #3
 801cd94:	2204      	movs	r2, #4
 801cd96:	6878      	ldr	r0, [r7, #4]
 801cd98:	f7ff fb43 	bl	801c422 <SCSI_SenseCode>
    return -1;
 801cd9c:	f04f 33ff 	mov.w	r3, #4294967295
 801cda0:	e044      	b.n	801ce2c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cdae:	4619      	mov	r1, r3
 801cdb0:	68bb      	ldr	r3, [r7, #8]
 801cdb2:	fbb3 f3f1 	udiv	r3, r3, r1
 801cdb6:	441a      	add	r2, r3
 801cdb8:	68fb      	ldr	r3, [r7, #12]
 801cdba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cdc4:	68fb      	ldr	r3, [r7, #12]
 801cdc6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cdca:	4619      	mov	r1, r3
 801cdcc:	68bb      	ldr	r3, [r7, #8]
 801cdce:	fbb3 f3f1 	udiv	r3, r3, r1
 801cdd2:	1ad2      	subs	r2, r2, r3
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801cde0:	68bb      	ldr	r3, [r7, #8]
 801cde2:	1ad2      	subs	r2, r2, r3
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d104      	bne.n	801cdfe <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801cdf4:	2100      	movs	r1, #0
 801cdf6:	6878      	ldr	r0, [r7, #4]
 801cdf8:	f7fe fdd8 	bl	801b9ac <MSC_BOT_SendCSW>
 801cdfc:	e015      	b.n	801ce2a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ce04:	68fa      	ldr	r2, [r7, #12]
 801ce06:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801ce0a:	fb02 f303 	mul.w	r3, r2, r3
 801ce0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce12:	bf28      	it	cs
 801ce14:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801ce18:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	f103 0210 	add.w	r2, r3, #16
 801ce20:	68bb      	ldr	r3, [r7, #8]
 801ce22:	2101      	movs	r1, #1
 801ce24:	6878      	ldr	r0, [r7, #4]
 801ce26:	f7fc ff1b 	bl	8019c60 <USBD_LL_PrepareReceive>
  }

  return 0;
 801ce2a:	2300      	movs	r3, #0
}
 801ce2c:	4618      	mov	r0, r3
 801ce2e:	3714      	adds	r7, #20
 801ce30:	46bd      	mov	sp, r7
 801ce32:	bd90      	pop	{r4, r7, pc}

0801ce34 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_CDCMSC_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801ce34:	b480      	push	{r7}
 801ce36:	b087      	sub	sp, #28
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	60f8      	str	r0, [r7, #12]
 801ce3c:	60b9      	str	r1, [r7, #8]
 801ce3e:	4613      	mov	r3, r2
 801ce40:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801ce42:	88fb      	ldrh	r3, [r7, #6]
 801ce44:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d102      	bne.n	801ce52 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801ce4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ce50:	e013      	b.n	801ce7a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801ce52:	8afa      	ldrh	r2, [r7, #22]
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801ce58:	e00b      	b.n	801ce72 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801ce5a:	8afb      	ldrh	r3, [r7, #22]
 801ce5c:	3b01      	subs	r3, #1
 801ce5e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801ce60:	8afb      	ldrh	r3, [r7, #22]
 801ce62:	68ba      	ldr	r2, [r7, #8]
 801ce64:	441a      	add	r2, r3
 801ce66:	8afb      	ldrh	r3, [r7, #22]
 801ce68:	7811      	ldrb	r1, [r2, #0]
 801ce6a:	68fa      	ldr	r2, [r7, #12]
 801ce6c:	4413      	add	r3, r2
 801ce6e:	460a      	mov	r2, r1
 801ce70:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801ce72:	8afb      	ldrh	r3, [r7, #22]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d1f0      	bne.n	801ce5a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801ce78:	2300      	movs	r3, #0
}
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	371c      	adds	r7, #28
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce84:	4770      	bx	lr

0801ce86 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801ce86:	b480      	push	{r7}
 801ce88:	b083      	sub	sp, #12
 801ce8a:	af00      	add	r7, sp, #0
 801ce8c:	4603      	mov	r3, r0
 801ce8e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801ce90:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801ce92:	4618      	mov	r0, r3
 801ce94:	370c      	adds	r7, #12
 801ce96:	46bd      	mov	sp, r7
 801ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce9c:	4770      	bx	lr

0801ce9e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801ce9e:	b480      	push	{r7}
 801cea0:	b085      	sub	sp, #20
 801cea2:	af00      	add	r7, sp, #0
 801cea4:	4603      	mov	r3, r0
 801cea6:	60b9      	str	r1, [r7, #8]
 801cea8:	607a      	str	r2, [r7, #4]
 801ceaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 801ceac:	68bb      	ldr	r3, [r7, #8]
 801ceae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ceb2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ceba:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801cebc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cebe:	4618      	mov	r0, r3
 801cec0:	3714      	adds	r7, #20
 801cec2:	46bd      	mov	sp, r7
 801cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cec8:	4770      	bx	lr

0801ceca <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801ceca:	b480      	push	{r7}
 801cecc:	b083      	sub	sp, #12
 801cece:	af00      	add	r7, sp, #0
 801ced0:	4603      	mov	r3, r0
 801ced2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ced4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ced6:	4618      	mov	r0, r3
 801ced8:	370c      	adds	r7, #12
 801ceda:	46bd      	mov	sp, r7
 801cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cee0:	4770      	bx	lr

0801cee2 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801cee2:	b480      	push	{r7}
 801cee4:	b083      	sub	sp, #12
 801cee6:	af00      	add	r7, sp, #0
 801cee8:	4603      	mov	r3, r0
 801ceea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801ceec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ceee:	4618      	mov	r0, r3
 801cef0:	370c      	adds	r7, #12
 801cef2:	46bd      	mov	sp, r7
 801cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef8:	4770      	bx	lr

0801cefa <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801cefa:	b580      	push	{r7, lr}
 801cefc:	b086      	sub	sp, #24
 801cefe:	af00      	add	r7, sp, #0
 801cf00:	60b9      	str	r1, [r7, #8]
 801cf02:	607a      	str	r2, [r7, #4]
 801cf04:	461a      	mov	r2, r3
 801cf06:	4603      	mov	r3, r0
 801cf08:	73fb      	strb	r3, [r7, #15]
 801cf0a:	4613      	mov	r3, r2
 801cf0c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	uint16_t block_cntr=0;
 801cf0e:	2300      	movs	r3, #0
 801cf10:	82fb      	strh	r3, [r7, #22]
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cf12:	2300      	movs	r3, #0
 801cf14:	82fb      	strh	r3, [r7, #22]
 801cf16:	e00f      	b.n	801cf38 <STORAGE_Read_FS+0x3e>
				W25_ReadBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801cf18:	8afb      	ldrh	r3, [r7, #22]
 801cf1a:	025b      	lsls	r3, r3, #9
 801cf1c:	461a      	mov	r2, r3
 801cf1e:	68bb      	ldr	r3, [r7, #8]
 801cf20:	1898      	adds	r0, r3, r2
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	b29a      	uxth	r2, r3
 801cf26:	8afb      	ldrh	r3, [r7, #22]
 801cf28:	4413      	add	r3, r2
 801cf2a:	b29b      	uxth	r3, r3
 801cf2c:	4619      	mov	r1, r3
 801cf2e:	f7e7 fc09 	bl	8004744 <W25_ReadBuf>
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cf32:	8afb      	ldrh	r3, [r7, #22]
 801cf34:	3301      	adds	r3, #1
 801cf36:	82fb      	strh	r3, [r7, #22]
 801cf38:	8afa      	ldrh	r2, [r7, #22]
 801cf3a:	89bb      	ldrh	r3, [r7, #12]
 801cf3c:	429a      	cmp	r2, r3
 801cf3e:	d3eb      	bcc.n	801cf18 <STORAGE_Read_FS+0x1e>
	  return (USBD_OK);
 801cf40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cf42:	4618      	mov	r0, r3
 801cf44:	3718      	adds	r7, #24
 801cf46:	46bd      	mov	sp, r7
 801cf48:	bd80      	pop	{r7, pc}

0801cf4a <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801cf4a:	b580      	push	{r7, lr}
 801cf4c:	b086      	sub	sp, #24
 801cf4e:	af00      	add	r7, sp, #0
 801cf50:	60b9      	str	r1, [r7, #8]
 801cf52:	607a      	str	r2, [r7, #4]
 801cf54:	461a      	mov	r2, r3
 801cf56:	4603      	mov	r3, r0
 801cf58:	73fb      	strb	r3, [r7, #15]
 801cf5a:	4613      	mov	r3, r2
 801cf5c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint16_t block_cntr=0;
 801cf5e:	2300      	movs	r3, #0
 801cf60:	82fb      	strh	r3, [r7, #22]
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cf62:	2300      	movs	r3, #0
 801cf64:	82fb      	strh	r3, [r7, #22]
 801cf66:	e00f      	b.n	801cf88 <STORAGE_Write_FS+0x3e>
					W25_WriteBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801cf68:	8afb      	ldrh	r3, [r7, #22]
 801cf6a:	025b      	lsls	r3, r3, #9
 801cf6c:	461a      	mov	r2, r3
 801cf6e:	68bb      	ldr	r3, [r7, #8]
 801cf70:	1898      	adds	r0, r3, r2
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	b29a      	uxth	r2, r3
 801cf76:	8afb      	ldrh	r3, [r7, #22]
 801cf78:	4413      	add	r3, r2
 801cf7a:	b29b      	uxth	r3, r3
 801cf7c:	4619      	mov	r1, r3
 801cf7e:	f7e7 fc51 	bl	8004824 <W25_WriteBuf>
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cf82:	8afb      	ldrh	r3, [r7, #22]
 801cf84:	3301      	adds	r3, #1
 801cf86:	82fb      	strh	r3, [r7, #22]
 801cf88:	8afa      	ldrh	r2, [r7, #22]
 801cf8a:	89bb      	ldrh	r3, [r7, #12]
 801cf8c:	429a      	cmp	r2, r3
 801cf8e:	d3eb      	bcc.n	801cf68 <STORAGE_Write_FS+0x1e>
	  return (USBD_OK);
 801cf90:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801cf92:	4618      	mov	r0, r3
 801cf94:	3718      	adds	r7, #24
 801cf96:	46bd      	mov	sp, r7
 801cf98:	bd80      	pop	{r7, pc}

0801cf9a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801cf9a:	b480      	push	{r7}
 801cf9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801cf9e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	46bd      	mov	sp, r7
 801cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfa8:	4770      	bx	lr
	...

0801cfac <__errno>:
 801cfac:	4b01      	ldr	r3, [pc, #4]	; (801cfb4 <__errno+0x8>)
 801cfae:	6818      	ldr	r0, [r3, #0]
 801cfb0:	4770      	bx	lr
 801cfb2:	bf00      	nop
 801cfb4:	2000062c 	.word	0x2000062c

0801cfb8 <__libc_init_array>:
 801cfb8:	b570      	push	{r4, r5, r6, lr}
 801cfba:	4d0d      	ldr	r5, [pc, #52]	; (801cff0 <__libc_init_array+0x38>)
 801cfbc:	4c0d      	ldr	r4, [pc, #52]	; (801cff4 <__libc_init_array+0x3c>)
 801cfbe:	1b64      	subs	r4, r4, r5
 801cfc0:	10a4      	asrs	r4, r4, #2
 801cfc2:	2600      	movs	r6, #0
 801cfc4:	42a6      	cmp	r6, r4
 801cfc6:	d109      	bne.n	801cfdc <__libc_init_array+0x24>
 801cfc8:	4d0b      	ldr	r5, [pc, #44]	; (801cff8 <__libc_init_array+0x40>)
 801cfca:	4c0c      	ldr	r4, [pc, #48]	; (801cffc <__libc_init_array+0x44>)
 801cfcc:	f004 fd40 	bl	8021a50 <_init>
 801cfd0:	1b64      	subs	r4, r4, r5
 801cfd2:	10a4      	asrs	r4, r4, #2
 801cfd4:	2600      	movs	r6, #0
 801cfd6:	42a6      	cmp	r6, r4
 801cfd8:	d105      	bne.n	801cfe6 <__libc_init_array+0x2e>
 801cfda:	bd70      	pop	{r4, r5, r6, pc}
 801cfdc:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfe0:	4798      	blx	r3
 801cfe2:	3601      	adds	r6, #1
 801cfe4:	e7ee      	b.n	801cfc4 <__libc_init_array+0xc>
 801cfe6:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfea:	4798      	blx	r3
 801cfec:	3601      	adds	r6, #1
 801cfee:	e7f2      	b.n	801cfd6 <__libc_init_array+0x1e>
 801cff0:	08029b3c 	.word	0x08029b3c
 801cff4:	08029b3c 	.word	0x08029b3c
 801cff8:	08029b3c 	.word	0x08029b3c
 801cffc:	08029b40 	.word	0x08029b40

0801d000 <memset>:
 801d000:	4402      	add	r2, r0
 801d002:	4603      	mov	r3, r0
 801d004:	4293      	cmp	r3, r2
 801d006:	d100      	bne.n	801d00a <memset+0xa>
 801d008:	4770      	bx	lr
 801d00a:	f803 1b01 	strb.w	r1, [r3], #1
 801d00e:	e7f9      	b.n	801d004 <memset+0x4>

0801d010 <__cvt>:
 801d010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d014:	ec55 4b10 	vmov	r4, r5, d0
 801d018:	2d00      	cmp	r5, #0
 801d01a:	460e      	mov	r6, r1
 801d01c:	4619      	mov	r1, r3
 801d01e:	462b      	mov	r3, r5
 801d020:	bfbb      	ittet	lt
 801d022:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d026:	461d      	movlt	r5, r3
 801d028:	2300      	movge	r3, #0
 801d02a:	232d      	movlt	r3, #45	; 0x2d
 801d02c:	700b      	strb	r3, [r1, #0]
 801d02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d030:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d034:	4691      	mov	r9, r2
 801d036:	f023 0820 	bic.w	r8, r3, #32
 801d03a:	bfbc      	itt	lt
 801d03c:	4622      	movlt	r2, r4
 801d03e:	4614      	movlt	r4, r2
 801d040:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d044:	d005      	beq.n	801d052 <__cvt+0x42>
 801d046:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d04a:	d100      	bne.n	801d04e <__cvt+0x3e>
 801d04c:	3601      	adds	r6, #1
 801d04e:	2102      	movs	r1, #2
 801d050:	e000      	b.n	801d054 <__cvt+0x44>
 801d052:	2103      	movs	r1, #3
 801d054:	ab03      	add	r3, sp, #12
 801d056:	9301      	str	r3, [sp, #4]
 801d058:	ab02      	add	r3, sp, #8
 801d05a:	9300      	str	r3, [sp, #0]
 801d05c:	ec45 4b10 	vmov	d0, r4, r5
 801d060:	4653      	mov	r3, sl
 801d062:	4632      	mov	r2, r6
 801d064:	f001 fdc8 	bl	801ebf8 <_dtoa_r>
 801d068:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d06c:	4607      	mov	r7, r0
 801d06e:	d102      	bne.n	801d076 <__cvt+0x66>
 801d070:	f019 0f01 	tst.w	r9, #1
 801d074:	d022      	beq.n	801d0bc <__cvt+0xac>
 801d076:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d07a:	eb07 0906 	add.w	r9, r7, r6
 801d07e:	d110      	bne.n	801d0a2 <__cvt+0x92>
 801d080:	783b      	ldrb	r3, [r7, #0]
 801d082:	2b30      	cmp	r3, #48	; 0x30
 801d084:	d10a      	bne.n	801d09c <__cvt+0x8c>
 801d086:	2200      	movs	r2, #0
 801d088:	2300      	movs	r3, #0
 801d08a:	4620      	mov	r0, r4
 801d08c:	4629      	mov	r1, r5
 801d08e:	f7e3 fd2b 	bl	8000ae8 <__aeabi_dcmpeq>
 801d092:	b918      	cbnz	r0, 801d09c <__cvt+0x8c>
 801d094:	f1c6 0601 	rsb	r6, r6, #1
 801d098:	f8ca 6000 	str.w	r6, [sl]
 801d09c:	f8da 3000 	ldr.w	r3, [sl]
 801d0a0:	4499      	add	r9, r3
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	4629      	mov	r1, r5
 801d0aa:	f7e3 fd1d 	bl	8000ae8 <__aeabi_dcmpeq>
 801d0ae:	b108      	cbz	r0, 801d0b4 <__cvt+0xa4>
 801d0b0:	f8cd 900c 	str.w	r9, [sp, #12]
 801d0b4:	2230      	movs	r2, #48	; 0x30
 801d0b6:	9b03      	ldr	r3, [sp, #12]
 801d0b8:	454b      	cmp	r3, r9
 801d0ba:	d307      	bcc.n	801d0cc <__cvt+0xbc>
 801d0bc:	9b03      	ldr	r3, [sp, #12]
 801d0be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d0c0:	1bdb      	subs	r3, r3, r7
 801d0c2:	4638      	mov	r0, r7
 801d0c4:	6013      	str	r3, [r2, #0]
 801d0c6:	b004      	add	sp, #16
 801d0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0cc:	1c59      	adds	r1, r3, #1
 801d0ce:	9103      	str	r1, [sp, #12]
 801d0d0:	701a      	strb	r2, [r3, #0]
 801d0d2:	e7f0      	b.n	801d0b6 <__cvt+0xa6>

0801d0d4 <__exponent>:
 801d0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d0d6:	4603      	mov	r3, r0
 801d0d8:	2900      	cmp	r1, #0
 801d0da:	bfb8      	it	lt
 801d0dc:	4249      	neglt	r1, r1
 801d0de:	f803 2b02 	strb.w	r2, [r3], #2
 801d0e2:	bfb4      	ite	lt
 801d0e4:	222d      	movlt	r2, #45	; 0x2d
 801d0e6:	222b      	movge	r2, #43	; 0x2b
 801d0e8:	2909      	cmp	r1, #9
 801d0ea:	7042      	strb	r2, [r0, #1]
 801d0ec:	dd2a      	ble.n	801d144 <__exponent+0x70>
 801d0ee:	f10d 0407 	add.w	r4, sp, #7
 801d0f2:	46a4      	mov	ip, r4
 801d0f4:	270a      	movs	r7, #10
 801d0f6:	46a6      	mov	lr, r4
 801d0f8:	460a      	mov	r2, r1
 801d0fa:	fb91 f6f7 	sdiv	r6, r1, r7
 801d0fe:	fb07 1516 	mls	r5, r7, r6, r1
 801d102:	3530      	adds	r5, #48	; 0x30
 801d104:	2a63      	cmp	r2, #99	; 0x63
 801d106:	f104 34ff 	add.w	r4, r4, #4294967295
 801d10a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d10e:	4631      	mov	r1, r6
 801d110:	dcf1      	bgt.n	801d0f6 <__exponent+0x22>
 801d112:	3130      	adds	r1, #48	; 0x30
 801d114:	f1ae 0502 	sub.w	r5, lr, #2
 801d118:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d11c:	1c44      	adds	r4, r0, #1
 801d11e:	4629      	mov	r1, r5
 801d120:	4561      	cmp	r1, ip
 801d122:	d30a      	bcc.n	801d13a <__exponent+0x66>
 801d124:	f10d 0209 	add.w	r2, sp, #9
 801d128:	eba2 020e 	sub.w	r2, r2, lr
 801d12c:	4565      	cmp	r5, ip
 801d12e:	bf88      	it	hi
 801d130:	2200      	movhi	r2, #0
 801d132:	4413      	add	r3, r2
 801d134:	1a18      	subs	r0, r3, r0
 801d136:	b003      	add	sp, #12
 801d138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d13a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d13e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d142:	e7ed      	b.n	801d120 <__exponent+0x4c>
 801d144:	2330      	movs	r3, #48	; 0x30
 801d146:	3130      	adds	r1, #48	; 0x30
 801d148:	7083      	strb	r3, [r0, #2]
 801d14a:	70c1      	strb	r1, [r0, #3]
 801d14c:	1d03      	adds	r3, r0, #4
 801d14e:	e7f1      	b.n	801d134 <__exponent+0x60>

0801d150 <_printf_float>:
 801d150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d154:	ed2d 8b02 	vpush	{d8}
 801d158:	b08d      	sub	sp, #52	; 0x34
 801d15a:	460c      	mov	r4, r1
 801d15c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d160:	4616      	mov	r6, r2
 801d162:	461f      	mov	r7, r3
 801d164:	4605      	mov	r5, r0
 801d166:	f002 ff97 	bl	8020098 <_localeconv_r>
 801d16a:	f8d0 a000 	ldr.w	sl, [r0]
 801d16e:	4650      	mov	r0, sl
 801d170:	f7e3 f83e 	bl	80001f0 <strlen>
 801d174:	2300      	movs	r3, #0
 801d176:	930a      	str	r3, [sp, #40]	; 0x28
 801d178:	6823      	ldr	r3, [r4, #0]
 801d17a:	9305      	str	r3, [sp, #20]
 801d17c:	f8d8 3000 	ldr.w	r3, [r8]
 801d180:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d184:	3307      	adds	r3, #7
 801d186:	f023 0307 	bic.w	r3, r3, #7
 801d18a:	f103 0208 	add.w	r2, r3, #8
 801d18e:	f8c8 2000 	str.w	r2, [r8]
 801d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d196:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d19a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801d19e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d1a2:	9307      	str	r3, [sp, #28]
 801d1a4:	f8cd 8018 	str.w	r8, [sp, #24]
 801d1a8:	ee08 0a10 	vmov	s16, r0
 801d1ac:	4b9f      	ldr	r3, [pc, #636]	; (801d42c <_printf_float+0x2dc>)
 801d1ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d1b2:	f04f 32ff 	mov.w	r2, #4294967295
 801d1b6:	f7e3 fcc9 	bl	8000b4c <__aeabi_dcmpun>
 801d1ba:	bb88      	cbnz	r0, 801d220 <_printf_float+0xd0>
 801d1bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d1c0:	4b9a      	ldr	r3, [pc, #616]	; (801d42c <_printf_float+0x2dc>)
 801d1c2:	f04f 32ff 	mov.w	r2, #4294967295
 801d1c6:	f7e3 fca3 	bl	8000b10 <__aeabi_dcmple>
 801d1ca:	bb48      	cbnz	r0, 801d220 <_printf_float+0xd0>
 801d1cc:	2200      	movs	r2, #0
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	4640      	mov	r0, r8
 801d1d2:	4649      	mov	r1, r9
 801d1d4:	f7e3 fc92 	bl	8000afc <__aeabi_dcmplt>
 801d1d8:	b110      	cbz	r0, 801d1e0 <_printf_float+0x90>
 801d1da:	232d      	movs	r3, #45	; 0x2d
 801d1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d1e0:	4b93      	ldr	r3, [pc, #588]	; (801d430 <_printf_float+0x2e0>)
 801d1e2:	4894      	ldr	r0, [pc, #592]	; (801d434 <_printf_float+0x2e4>)
 801d1e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d1e8:	bf94      	ite	ls
 801d1ea:	4698      	movls	r8, r3
 801d1ec:	4680      	movhi	r8, r0
 801d1ee:	2303      	movs	r3, #3
 801d1f0:	6123      	str	r3, [r4, #16]
 801d1f2:	9b05      	ldr	r3, [sp, #20]
 801d1f4:	f023 0204 	bic.w	r2, r3, #4
 801d1f8:	6022      	str	r2, [r4, #0]
 801d1fa:	f04f 0900 	mov.w	r9, #0
 801d1fe:	9700      	str	r7, [sp, #0]
 801d200:	4633      	mov	r3, r6
 801d202:	aa0b      	add	r2, sp, #44	; 0x2c
 801d204:	4621      	mov	r1, r4
 801d206:	4628      	mov	r0, r5
 801d208:	f000 f9d8 	bl	801d5bc <_printf_common>
 801d20c:	3001      	adds	r0, #1
 801d20e:	f040 8090 	bne.w	801d332 <_printf_float+0x1e2>
 801d212:	f04f 30ff 	mov.w	r0, #4294967295
 801d216:	b00d      	add	sp, #52	; 0x34
 801d218:	ecbd 8b02 	vpop	{d8}
 801d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d220:	4642      	mov	r2, r8
 801d222:	464b      	mov	r3, r9
 801d224:	4640      	mov	r0, r8
 801d226:	4649      	mov	r1, r9
 801d228:	f7e3 fc90 	bl	8000b4c <__aeabi_dcmpun>
 801d22c:	b140      	cbz	r0, 801d240 <_printf_float+0xf0>
 801d22e:	464b      	mov	r3, r9
 801d230:	2b00      	cmp	r3, #0
 801d232:	bfbc      	itt	lt
 801d234:	232d      	movlt	r3, #45	; 0x2d
 801d236:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d23a:	487f      	ldr	r0, [pc, #508]	; (801d438 <_printf_float+0x2e8>)
 801d23c:	4b7f      	ldr	r3, [pc, #508]	; (801d43c <_printf_float+0x2ec>)
 801d23e:	e7d1      	b.n	801d1e4 <_printf_float+0x94>
 801d240:	6863      	ldr	r3, [r4, #4]
 801d242:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d246:	9206      	str	r2, [sp, #24]
 801d248:	1c5a      	adds	r2, r3, #1
 801d24a:	d13f      	bne.n	801d2cc <_printf_float+0x17c>
 801d24c:	2306      	movs	r3, #6
 801d24e:	6063      	str	r3, [r4, #4]
 801d250:	9b05      	ldr	r3, [sp, #20]
 801d252:	6861      	ldr	r1, [r4, #4]
 801d254:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d258:	2300      	movs	r3, #0
 801d25a:	9303      	str	r3, [sp, #12]
 801d25c:	ab0a      	add	r3, sp, #40	; 0x28
 801d25e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d262:	ab09      	add	r3, sp, #36	; 0x24
 801d264:	ec49 8b10 	vmov	d0, r8, r9
 801d268:	9300      	str	r3, [sp, #0]
 801d26a:	6022      	str	r2, [r4, #0]
 801d26c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d270:	4628      	mov	r0, r5
 801d272:	f7ff fecd 	bl	801d010 <__cvt>
 801d276:	9b06      	ldr	r3, [sp, #24]
 801d278:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d27a:	2b47      	cmp	r3, #71	; 0x47
 801d27c:	4680      	mov	r8, r0
 801d27e:	d108      	bne.n	801d292 <_printf_float+0x142>
 801d280:	1cc8      	adds	r0, r1, #3
 801d282:	db02      	blt.n	801d28a <_printf_float+0x13a>
 801d284:	6863      	ldr	r3, [r4, #4]
 801d286:	4299      	cmp	r1, r3
 801d288:	dd41      	ble.n	801d30e <_printf_float+0x1be>
 801d28a:	f1ab 0b02 	sub.w	fp, fp, #2
 801d28e:	fa5f fb8b 	uxtb.w	fp, fp
 801d292:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d296:	d820      	bhi.n	801d2da <_printf_float+0x18a>
 801d298:	3901      	subs	r1, #1
 801d29a:	465a      	mov	r2, fp
 801d29c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d2a0:	9109      	str	r1, [sp, #36]	; 0x24
 801d2a2:	f7ff ff17 	bl	801d0d4 <__exponent>
 801d2a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d2a8:	1813      	adds	r3, r2, r0
 801d2aa:	2a01      	cmp	r2, #1
 801d2ac:	4681      	mov	r9, r0
 801d2ae:	6123      	str	r3, [r4, #16]
 801d2b0:	dc02      	bgt.n	801d2b8 <_printf_float+0x168>
 801d2b2:	6822      	ldr	r2, [r4, #0]
 801d2b4:	07d2      	lsls	r2, r2, #31
 801d2b6:	d501      	bpl.n	801d2bc <_printf_float+0x16c>
 801d2b8:	3301      	adds	r3, #1
 801d2ba:	6123      	str	r3, [r4, #16]
 801d2bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d09c      	beq.n	801d1fe <_printf_float+0xae>
 801d2c4:	232d      	movs	r3, #45	; 0x2d
 801d2c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d2ca:	e798      	b.n	801d1fe <_printf_float+0xae>
 801d2cc:	9a06      	ldr	r2, [sp, #24]
 801d2ce:	2a47      	cmp	r2, #71	; 0x47
 801d2d0:	d1be      	bne.n	801d250 <_printf_float+0x100>
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d1bc      	bne.n	801d250 <_printf_float+0x100>
 801d2d6:	2301      	movs	r3, #1
 801d2d8:	e7b9      	b.n	801d24e <_printf_float+0xfe>
 801d2da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d2de:	d118      	bne.n	801d312 <_printf_float+0x1c2>
 801d2e0:	2900      	cmp	r1, #0
 801d2e2:	6863      	ldr	r3, [r4, #4]
 801d2e4:	dd0b      	ble.n	801d2fe <_printf_float+0x1ae>
 801d2e6:	6121      	str	r1, [r4, #16]
 801d2e8:	b913      	cbnz	r3, 801d2f0 <_printf_float+0x1a0>
 801d2ea:	6822      	ldr	r2, [r4, #0]
 801d2ec:	07d0      	lsls	r0, r2, #31
 801d2ee:	d502      	bpl.n	801d2f6 <_printf_float+0x1a6>
 801d2f0:	3301      	adds	r3, #1
 801d2f2:	440b      	add	r3, r1
 801d2f4:	6123      	str	r3, [r4, #16]
 801d2f6:	65a1      	str	r1, [r4, #88]	; 0x58
 801d2f8:	f04f 0900 	mov.w	r9, #0
 801d2fc:	e7de      	b.n	801d2bc <_printf_float+0x16c>
 801d2fe:	b913      	cbnz	r3, 801d306 <_printf_float+0x1b6>
 801d300:	6822      	ldr	r2, [r4, #0]
 801d302:	07d2      	lsls	r2, r2, #31
 801d304:	d501      	bpl.n	801d30a <_printf_float+0x1ba>
 801d306:	3302      	adds	r3, #2
 801d308:	e7f4      	b.n	801d2f4 <_printf_float+0x1a4>
 801d30a:	2301      	movs	r3, #1
 801d30c:	e7f2      	b.n	801d2f4 <_printf_float+0x1a4>
 801d30e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d314:	4299      	cmp	r1, r3
 801d316:	db05      	blt.n	801d324 <_printf_float+0x1d4>
 801d318:	6823      	ldr	r3, [r4, #0]
 801d31a:	6121      	str	r1, [r4, #16]
 801d31c:	07d8      	lsls	r0, r3, #31
 801d31e:	d5ea      	bpl.n	801d2f6 <_printf_float+0x1a6>
 801d320:	1c4b      	adds	r3, r1, #1
 801d322:	e7e7      	b.n	801d2f4 <_printf_float+0x1a4>
 801d324:	2900      	cmp	r1, #0
 801d326:	bfd4      	ite	le
 801d328:	f1c1 0202 	rsble	r2, r1, #2
 801d32c:	2201      	movgt	r2, #1
 801d32e:	4413      	add	r3, r2
 801d330:	e7e0      	b.n	801d2f4 <_printf_float+0x1a4>
 801d332:	6823      	ldr	r3, [r4, #0]
 801d334:	055a      	lsls	r2, r3, #21
 801d336:	d407      	bmi.n	801d348 <_printf_float+0x1f8>
 801d338:	6923      	ldr	r3, [r4, #16]
 801d33a:	4642      	mov	r2, r8
 801d33c:	4631      	mov	r1, r6
 801d33e:	4628      	mov	r0, r5
 801d340:	47b8      	blx	r7
 801d342:	3001      	adds	r0, #1
 801d344:	d12c      	bne.n	801d3a0 <_printf_float+0x250>
 801d346:	e764      	b.n	801d212 <_printf_float+0xc2>
 801d348:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d34c:	f240 80e0 	bls.w	801d510 <_printf_float+0x3c0>
 801d350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d354:	2200      	movs	r2, #0
 801d356:	2300      	movs	r3, #0
 801d358:	f7e3 fbc6 	bl	8000ae8 <__aeabi_dcmpeq>
 801d35c:	2800      	cmp	r0, #0
 801d35e:	d034      	beq.n	801d3ca <_printf_float+0x27a>
 801d360:	4a37      	ldr	r2, [pc, #220]	; (801d440 <_printf_float+0x2f0>)
 801d362:	2301      	movs	r3, #1
 801d364:	4631      	mov	r1, r6
 801d366:	4628      	mov	r0, r5
 801d368:	47b8      	blx	r7
 801d36a:	3001      	adds	r0, #1
 801d36c:	f43f af51 	beq.w	801d212 <_printf_float+0xc2>
 801d370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d374:	429a      	cmp	r2, r3
 801d376:	db02      	blt.n	801d37e <_printf_float+0x22e>
 801d378:	6823      	ldr	r3, [r4, #0]
 801d37a:	07d8      	lsls	r0, r3, #31
 801d37c:	d510      	bpl.n	801d3a0 <_printf_float+0x250>
 801d37e:	ee18 3a10 	vmov	r3, s16
 801d382:	4652      	mov	r2, sl
 801d384:	4631      	mov	r1, r6
 801d386:	4628      	mov	r0, r5
 801d388:	47b8      	blx	r7
 801d38a:	3001      	adds	r0, #1
 801d38c:	f43f af41 	beq.w	801d212 <_printf_float+0xc2>
 801d390:	f04f 0800 	mov.w	r8, #0
 801d394:	f104 091a 	add.w	r9, r4, #26
 801d398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d39a:	3b01      	subs	r3, #1
 801d39c:	4543      	cmp	r3, r8
 801d39e:	dc09      	bgt.n	801d3b4 <_printf_float+0x264>
 801d3a0:	6823      	ldr	r3, [r4, #0]
 801d3a2:	079b      	lsls	r3, r3, #30
 801d3a4:	f100 8105 	bmi.w	801d5b2 <_printf_float+0x462>
 801d3a8:	68e0      	ldr	r0, [r4, #12]
 801d3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d3ac:	4298      	cmp	r0, r3
 801d3ae:	bfb8      	it	lt
 801d3b0:	4618      	movlt	r0, r3
 801d3b2:	e730      	b.n	801d216 <_printf_float+0xc6>
 801d3b4:	2301      	movs	r3, #1
 801d3b6:	464a      	mov	r2, r9
 801d3b8:	4631      	mov	r1, r6
 801d3ba:	4628      	mov	r0, r5
 801d3bc:	47b8      	blx	r7
 801d3be:	3001      	adds	r0, #1
 801d3c0:	f43f af27 	beq.w	801d212 <_printf_float+0xc2>
 801d3c4:	f108 0801 	add.w	r8, r8, #1
 801d3c8:	e7e6      	b.n	801d398 <_printf_float+0x248>
 801d3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	dc39      	bgt.n	801d444 <_printf_float+0x2f4>
 801d3d0:	4a1b      	ldr	r2, [pc, #108]	; (801d440 <_printf_float+0x2f0>)
 801d3d2:	2301      	movs	r3, #1
 801d3d4:	4631      	mov	r1, r6
 801d3d6:	4628      	mov	r0, r5
 801d3d8:	47b8      	blx	r7
 801d3da:	3001      	adds	r0, #1
 801d3dc:	f43f af19 	beq.w	801d212 <_printf_float+0xc2>
 801d3e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d3e4:	4313      	orrs	r3, r2
 801d3e6:	d102      	bne.n	801d3ee <_printf_float+0x29e>
 801d3e8:	6823      	ldr	r3, [r4, #0]
 801d3ea:	07d9      	lsls	r1, r3, #31
 801d3ec:	d5d8      	bpl.n	801d3a0 <_printf_float+0x250>
 801d3ee:	ee18 3a10 	vmov	r3, s16
 801d3f2:	4652      	mov	r2, sl
 801d3f4:	4631      	mov	r1, r6
 801d3f6:	4628      	mov	r0, r5
 801d3f8:	47b8      	blx	r7
 801d3fa:	3001      	adds	r0, #1
 801d3fc:	f43f af09 	beq.w	801d212 <_printf_float+0xc2>
 801d400:	f04f 0900 	mov.w	r9, #0
 801d404:	f104 0a1a 	add.w	sl, r4, #26
 801d408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d40a:	425b      	negs	r3, r3
 801d40c:	454b      	cmp	r3, r9
 801d40e:	dc01      	bgt.n	801d414 <_printf_float+0x2c4>
 801d410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d412:	e792      	b.n	801d33a <_printf_float+0x1ea>
 801d414:	2301      	movs	r3, #1
 801d416:	4652      	mov	r2, sl
 801d418:	4631      	mov	r1, r6
 801d41a:	4628      	mov	r0, r5
 801d41c:	47b8      	blx	r7
 801d41e:	3001      	adds	r0, #1
 801d420:	f43f aef7 	beq.w	801d212 <_printf_float+0xc2>
 801d424:	f109 0901 	add.w	r9, r9, #1
 801d428:	e7ee      	b.n	801d408 <_printf_float+0x2b8>
 801d42a:	bf00      	nop
 801d42c:	7fefffff 	.word	0x7fefffff
 801d430:	08029680 	.word	0x08029680
 801d434:	08029684 	.word	0x08029684
 801d438:	0802968c 	.word	0x0802968c
 801d43c:	08029688 	.word	0x08029688
 801d440:	08029690 	.word	0x08029690
 801d444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d448:	429a      	cmp	r2, r3
 801d44a:	bfa8      	it	ge
 801d44c:	461a      	movge	r2, r3
 801d44e:	2a00      	cmp	r2, #0
 801d450:	4691      	mov	r9, r2
 801d452:	dc37      	bgt.n	801d4c4 <_printf_float+0x374>
 801d454:	f04f 0b00 	mov.w	fp, #0
 801d458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d45c:	f104 021a 	add.w	r2, r4, #26
 801d460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d462:	9305      	str	r3, [sp, #20]
 801d464:	eba3 0309 	sub.w	r3, r3, r9
 801d468:	455b      	cmp	r3, fp
 801d46a:	dc33      	bgt.n	801d4d4 <_printf_float+0x384>
 801d46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d470:	429a      	cmp	r2, r3
 801d472:	db3b      	blt.n	801d4ec <_printf_float+0x39c>
 801d474:	6823      	ldr	r3, [r4, #0]
 801d476:	07da      	lsls	r2, r3, #31
 801d478:	d438      	bmi.n	801d4ec <_printf_float+0x39c>
 801d47a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d47c:	9b05      	ldr	r3, [sp, #20]
 801d47e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d480:	1ad3      	subs	r3, r2, r3
 801d482:	eba2 0901 	sub.w	r9, r2, r1
 801d486:	4599      	cmp	r9, r3
 801d488:	bfa8      	it	ge
 801d48a:	4699      	movge	r9, r3
 801d48c:	f1b9 0f00 	cmp.w	r9, #0
 801d490:	dc35      	bgt.n	801d4fe <_printf_float+0x3ae>
 801d492:	f04f 0800 	mov.w	r8, #0
 801d496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d49a:	f104 0a1a 	add.w	sl, r4, #26
 801d49e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d4a2:	1a9b      	subs	r3, r3, r2
 801d4a4:	eba3 0309 	sub.w	r3, r3, r9
 801d4a8:	4543      	cmp	r3, r8
 801d4aa:	f77f af79 	ble.w	801d3a0 <_printf_float+0x250>
 801d4ae:	2301      	movs	r3, #1
 801d4b0:	4652      	mov	r2, sl
 801d4b2:	4631      	mov	r1, r6
 801d4b4:	4628      	mov	r0, r5
 801d4b6:	47b8      	blx	r7
 801d4b8:	3001      	adds	r0, #1
 801d4ba:	f43f aeaa 	beq.w	801d212 <_printf_float+0xc2>
 801d4be:	f108 0801 	add.w	r8, r8, #1
 801d4c2:	e7ec      	b.n	801d49e <_printf_float+0x34e>
 801d4c4:	4613      	mov	r3, r2
 801d4c6:	4631      	mov	r1, r6
 801d4c8:	4642      	mov	r2, r8
 801d4ca:	4628      	mov	r0, r5
 801d4cc:	47b8      	blx	r7
 801d4ce:	3001      	adds	r0, #1
 801d4d0:	d1c0      	bne.n	801d454 <_printf_float+0x304>
 801d4d2:	e69e      	b.n	801d212 <_printf_float+0xc2>
 801d4d4:	2301      	movs	r3, #1
 801d4d6:	4631      	mov	r1, r6
 801d4d8:	4628      	mov	r0, r5
 801d4da:	9205      	str	r2, [sp, #20]
 801d4dc:	47b8      	blx	r7
 801d4de:	3001      	adds	r0, #1
 801d4e0:	f43f ae97 	beq.w	801d212 <_printf_float+0xc2>
 801d4e4:	9a05      	ldr	r2, [sp, #20]
 801d4e6:	f10b 0b01 	add.w	fp, fp, #1
 801d4ea:	e7b9      	b.n	801d460 <_printf_float+0x310>
 801d4ec:	ee18 3a10 	vmov	r3, s16
 801d4f0:	4652      	mov	r2, sl
 801d4f2:	4631      	mov	r1, r6
 801d4f4:	4628      	mov	r0, r5
 801d4f6:	47b8      	blx	r7
 801d4f8:	3001      	adds	r0, #1
 801d4fa:	d1be      	bne.n	801d47a <_printf_float+0x32a>
 801d4fc:	e689      	b.n	801d212 <_printf_float+0xc2>
 801d4fe:	9a05      	ldr	r2, [sp, #20]
 801d500:	464b      	mov	r3, r9
 801d502:	4442      	add	r2, r8
 801d504:	4631      	mov	r1, r6
 801d506:	4628      	mov	r0, r5
 801d508:	47b8      	blx	r7
 801d50a:	3001      	adds	r0, #1
 801d50c:	d1c1      	bne.n	801d492 <_printf_float+0x342>
 801d50e:	e680      	b.n	801d212 <_printf_float+0xc2>
 801d510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d512:	2a01      	cmp	r2, #1
 801d514:	dc01      	bgt.n	801d51a <_printf_float+0x3ca>
 801d516:	07db      	lsls	r3, r3, #31
 801d518:	d538      	bpl.n	801d58c <_printf_float+0x43c>
 801d51a:	2301      	movs	r3, #1
 801d51c:	4642      	mov	r2, r8
 801d51e:	4631      	mov	r1, r6
 801d520:	4628      	mov	r0, r5
 801d522:	47b8      	blx	r7
 801d524:	3001      	adds	r0, #1
 801d526:	f43f ae74 	beq.w	801d212 <_printf_float+0xc2>
 801d52a:	ee18 3a10 	vmov	r3, s16
 801d52e:	4652      	mov	r2, sl
 801d530:	4631      	mov	r1, r6
 801d532:	4628      	mov	r0, r5
 801d534:	47b8      	blx	r7
 801d536:	3001      	adds	r0, #1
 801d538:	f43f ae6b 	beq.w	801d212 <_printf_float+0xc2>
 801d53c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d540:	2200      	movs	r2, #0
 801d542:	2300      	movs	r3, #0
 801d544:	f7e3 fad0 	bl	8000ae8 <__aeabi_dcmpeq>
 801d548:	b9d8      	cbnz	r0, 801d582 <_printf_float+0x432>
 801d54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d54c:	f108 0201 	add.w	r2, r8, #1
 801d550:	3b01      	subs	r3, #1
 801d552:	4631      	mov	r1, r6
 801d554:	4628      	mov	r0, r5
 801d556:	47b8      	blx	r7
 801d558:	3001      	adds	r0, #1
 801d55a:	d10e      	bne.n	801d57a <_printf_float+0x42a>
 801d55c:	e659      	b.n	801d212 <_printf_float+0xc2>
 801d55e:	2301      	movs	r3, #1
 801d560:	4652      	mov	r2, sl
 801d562:	4631      	mov	r1, r6
 801d564:	4628      	mov	r0, r5
 801d566:	47b8      	blx	r7
 801d568:	3001      	adds	r0, #1
 801d56a:	f43f ae52 	beq.w	801d212 <_printf_float+0xc2>
 801d56e:	f108 0801 	add.w	r8, r8, #1
 801d572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d574:	3b01      	subs	r3, #1
 801d576:	4543      	cmp	r3, r8
 801d578:	dcf1      	bgt.n	801d55e <_printf_float+0x40e>
 801d57a:	464b      	mov	r3, r9
 801d57c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d580:	e6dc      	b.n	801d33c <_printf_float+0x1ec>
 801d582:	f04f 0800 	mov.w	r8, #0
 801d586:	f104 0a1a 	add.w	sl, r4, #26
 801d58a:	e7f2      	b.n	801d572 <_printf_float+0x422>
 801d58c:	2301      	movs	r3, #1
 801d58e:	4642      	mov	r2, r8
 801d590:	e7df      	b.n	801d552 <_printf_float+0x402>
 801d592:	2301      	movs	r3, #1
 801d594:	464a      	mov	r2, r9
 801d596:	4631      	mov	r1, r6
 801d598:	4628      	mov	r0, r5
 801d59a:	47b8      	blx	r7
 801d59c:	3001      	adds	r0, #1
 801d59e:	f43f ae38 	beq.w	801d212 <_printf_float+0xc2>
 801d5a2:	f108 0801 	add.w	r8, r8, #1
 801d5a6:	68e3      	ldr	r3, [r4, #12]
 801d5a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d5aa:	1a5b      	subs	r3, r3, r1
 801d5ac:	4543      	cmp	r3, r8
 801d5ae:	dcf0      	bgt.n	801d592 <_printf_float+0x442>
 801d5b0:	e6fa      	b.n	801d3a8 <_printf_float+0x258>
 801d5b2:	f04f 0800 	mov.w	r8, #0
 801d5b6:	f104 0919 	add.w	r9, r4, #25
 801d5ba:	e7f4      	b.n	801d5a6 <_printf_float+0x456>

0801d5bc <_printf_common>:
 801d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5c0:	4616      	mov	r6, r2
 801d5c2:	4699      	mov	r9, r3
 801d5c4:	688a      	ldr	r2, [r1, #8]
 801d5c6:	690b      	ldr	r3, [r1, #16]
 801d5c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d5cc:	4293      	cmp	r3, r2
 801d5ce:	bfb8      	it	lt
 801d5d0:	4613      	movlt	r3, r2
 801d5d2:	6033      	str	r3, [r6, #0]
 801d5d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d5d8:	4607      	mov	r7, r0
 801d5da:	460c      	mov	r4, r1
 801d5dc:	b10a      	cbz	r2, 801d5e2 <_printf_common+0x26>
 801d5de:	3301      	adds	r3, #1
 801d5e0:	6033      	str	r3, [r6, #0]
 801d5e2:	6823      	ldr	r3, [r4, #0]
 801d5e4:	0699      	lsls	r1, r3, #26
 801d5e6:	bf42      	ittt	mi
 801d5e8:	6833      	ldrmi	r3, [r6, #0]
 801d5ea:	3302      	addmi	r3, #2
 801d5ec:	6033      	strmi	r3, [r6, #0]
 801d5ee:	6825      	ldr	r5, [r4, #0]
 801d5f0:	f015 0506 	ands.w	r5, r5, #6
 801d5f4:	d106      	bne.n	801d604 <_printf_common+0x48>
 801d5f6:	f104 0a19 	add.w	sl, r4, #25
 801d5fa:	68e3      	ldr	r3, [r4, #12]
 801d5fc:	6832      	ldr	r2, [r6, #0]
 801d5fe:	1a9b      	subs	r3, r3, r2
 801d600:	42ab      	cmp	r3, r5
 801d602:	dc26      	bgt.n	801d652 <_printf_common+0x96>
 801d604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d608:	1e13      	subs	r3, r2, #0
 801d60a:	6822      	ldr	r2, [r4, #0]
 801d60c:	bf18      	it	ne
 801d60e:	2301      	movne	r3, #1
 801d610:	0692      	lsls	r2, r2, #26
 801d612:	d42b      	bmi.n	801d66c <_printf_common+0xb0>
 801d614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d618:	4649      	mov	r1, r9
 801d61a:	4638      	mov	r0, r7
 801d61c:	47c0      	blx	r8
 801d61e:	3001      	adds	r0, #1
 801d620:	d01e      	beq.n	801d660 <_printf_common+0xa4>
 801d622:	6823      	ldr	r3, [r4, #0]
 801d624:	68e5      	ldr	r5, [r4, #12]
 801d626:	6832      	ldr	r2, [r6, #0]
 801d628:	f003 0306 	and.w	r3, r3, #6
 801d62c:	2b04      	cmp	r3, #4
 801d62e:	bf08      	it	eq
 801d630:	1aad      	subeq	r5, r5, r2
 801d632:	68a3      	ldr	r3, [r4, #8]
 801d634:	6922      	ldr	r2, [r4, #16]
 801d636:	bf0c      	ite	eq
 801d638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d63c:	2500      	movne	r5, #0
 801d63e:	4293      	cmp	r3, r2
 801d640:	bfc4      	itt	gt
 801d642:	1a9b      	subgt	r3, r3, r2
 801d644:	18ed      	addgt	r5, r5, r3
 801d646:	2600      	movs	r6, #0
 801d648:	341a      	adds	r4, #26
 801d64a:	42b5      	cmp	r5, r6
 801d64c:	d11a      	bne.n	801d684 <_printf_common+0xc8>
 801d64e:	2000      	movs	r0, #0
 801d650:	e008      	b.n	801d664 <_printf_common+0xa8>
 801d652:	2301      	movs	r3, #1
 801d654:	4652      	mov	r2, sl
 801d656:	4649      	mov	r1, r9
 801d658:	4638      	mov	r0, r7
 801d65a:	47c0      	blx	r8
 801d65c:	3001      	adds	r0, #1
 801d65e:	d103      	bne.n	801d668 <_printf_common+0xac>
 801d660:	f04f 30ff 	mov.w	r0, #4294967295
 801d664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d668:	3501      	adds	r5, #1
 801d66a:	e7c6      	b.n	801d5fa <_printf_common+0x3e>
 801d66c:	18e1      	adds	r1, r4, r3
 801d66e:	1c5a      	adds	r2, r3, #1
 801d670:	2030      	movs	r0, #48	; 0x30
 801d672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d676:	4422      	add	r2, r4
 801d678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d67c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d680:	3302      	adds	r3, #2
 801d682:	e7c7      	b.n	801d614 <_printf_common+0x58>
 801d684:	2301      	movs	r3, #1
 801d686:	4622      	mov	r2, r4
 801d688:	4649      	mov	r1, r9
 801d68a:	4638      	mov	r0, r7
 801d68c:	47c0      	blx	r8
 801d68e:	3001      	adds	r0, #1
 801d690:	d0e6      	beq.n	801d660 <_printf_common+0xa4>
 801d692:	3601      	adds	r6, #1
 801d694:	e7d9      	b.n	801d64a <_printf_common+0x8e>
	...

0801d698 <_printf_i>:
 801d698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d69c:	460c      	mov	r4, r1
 801d69e:	4691      	mov	r9, r2
 801d6a0:	7e27      	ldrb	r7, [r4, #24]
 801d6a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d6a4:	2f78      	cmp	r7, #120	; 0x78
 801d6a6:	4680      	mov	r8, r0
 801d6a8:	469a      	mov	sl, r3
 801d6aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d6ae:	d807      	bhi.n	801d6c0 <_printf_i+0x28>
 801d6b0:	2f62      	cmp	r7, #98	; 0x62
 801d6b2:	d80a      	bhi.n	801d6ca <_printf_i+0x32>
 801d6b4:	2f00      	cmp	r7, #0
 801d6b6:	f000 80d8 	beq.w	801d86a <_printf_i+0x1d2>
 801d6ba:	2f58      	cmp	r7, #88	; 0x58
 801d6bc:	f000 80a3 	beq.w	801d806 <_printf_i+0x16e>
 801d6c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d6c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d6c8:	e03a      	b.n	801d740 <_printf_i+0xa8>
 801d6ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d6ce:	2b15      	cmp	r3, #21
 801d6d0:	d8f6      	bhi.n	801d6c0 <_printf_i+0x28>
 801d6d2:	a001      	add	r0, pc, #4	; (adr r0, 801d6d8 <_printf_i+0x40>)
 801d6d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d6d8:	0801d731 	.word	0x0801d731
 801d6dc:	0801d745 	.word	0x0801d745
 801d6e0:	0801d6c1 	.word	0x0801d6c1
 801d6e4:	0801d6c1 	.word	0x0801d6c1
 801d6e8:	0801d6c1 	.word	0x0801d6c1
 801d6ec:	0801d6c1 	.word	0x0801d6c1
 801d6f0:	0801d745 	.word	0x0801d745
 801d6f4:	0801d6c1 	.word	0x0801d6c1
 801d6f8:	0801d6c1 	.word	0x0801d6c1
 801d6fc:	0801d6c1 	.word	0x0801d6c1
 801d700:	0801d6c1 	.word	0x0801d6c1
 801d704:	0801d851 	.word	0x0801d851
 801d708:	0801d775 	.word	0x0801d775
 801d70c:	0801d833 	.word	0x0801d833
 801d710:	0801d6c1 	.word	0x0801d6c1
 801d714:	0801d6c1 	.word	0x0801d6c1
 801d718:	0801d873 	.word	0x0801d873
 801d71c:	0801d6c1 	.word	0x0801d6c1
 801d720:	0801d775 	.word	0x0801d775
 801d724:	0801d6c1 	.word	0x0801d6c1
 801d728:	0801d6c1 	.word	0x0801d6c1
 801d72c:	0801d83b 	.word	0x0801d83b
 801d730:	680b      	ldr	r3, [r1, #0]
 801d732:	1d1a      	adds	r2, r3, #4
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	600a      	str	r2, [r1, #0]
 801d738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d73c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d740:	2301      	movs	r3, #1
 801d742:	e0a3      	b.n	801d88c <_printf_i+0x1f4>
 801d744:	6825      	ldr	r5, [r4, #0]
 801d746:	6808      	ldr	r0, [r1, #0]
 801d748:	062e      	lsls	r6, r5, #24
 801d74a:	f100 0304 	add.w	r3, r0, #4
 801d74e:	d50a      	bpl.n	801d766 <_printf_i+0xce>
 801d750:	6805      	ldr	r5, [r0, #0]
 801d752:	600b      	str	r3, [r1, #0]
 801d754:	2d00      	cmp	r5, #0
 801d756:	da03      	bge.n	801d760 <_printf_i+0xc8>
 801d758:	232d      	movs	r3, #45	; 0x2d
 801d75a:	426d      	negs	r5, r5
 801d75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d760:	485e      	ldr	r0, [pc, #376]	; (801d8dc <_printf_i+0x244>)
 801d762:	230a      	movs	r3, #10
 801d764:	e019      	b.n	801d79a <_printf_i+0x102>
 801d766:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d76a:	6805      	ldr	r5, [r0, #0]
 801d76c:	600b      	str	r3, [r1, #0]
 801d76e:	bf18      	it	ne
 801d770:	b22d      	sxthne	r5, r5
 801d772:	e7ef      	b.n	801d754 <_printf_i+0xbc>
 801d774:	680b      	ldr	r3, [r1, #0]
 801d776:	6825      	ldr	r5, [r4, #0]
 801d778:	1d18      	adds	r0, r3, #4
 801d77a:	6008      	str	r0, [r1, #0]
 801d77c:	0628      	lsls	r0, r5, #24
 801d77e:	d501      	bpl.n	801d784 <_printf_i+0xec>
 801d780:	681d      	ldr	r5, [r3, #0]
 801d782:	e002      	b.n	801d78a <_printf_i+0xf2>
 801d784:	0669      	lsls	r1, r5, #25
 801d786:	d5fb      	bpl.n	801d780 <_printf_i+0xe8>
 801d788:	881d      	ldrh	r5, [r3, #0]
 801d78a:	4854      	ldr	r0, [pc, #336]	; (801d8dc <_printf_i+0x244>)
 801d78c:	2f6f      	cmp	r7, #111	; 0x6f
 801d78e:	bf0c      	ite	eq
 801d790:	2308      	moveq	r3, #8
 801d792:	230a      	movne	r3, #10
 801d794:	2100      	movs	r1, #0
 801d796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d79a:	6866      	ldr	r6, [r4, #4]
 801d79c:	60a6      	str	r6, [r4, #8]
 801d79e:	2e00      	cmp	r6, #0
 801d7a0:	bfa2      	ittt	ge
 801d7a2:	6821      	ldrge	r1, [r4, #0]
 801d7a4:	f021 0104 	bicge.w	r1, r1, #4
 801d7a8:	6021      	strge	r1, [r4, #0]
 801d7aa:	b90d      	cbnz	r5, 801d7b0 <_printf_i+0x118>
 801d7ac:	2e00      	cmp	r6, #0
 801d7ae:	d04d      	beq.n	801d84c <_printf_i+0x1b4>
 801d7b0:	4616      	mov	r6, r2
 801d7b2:	fbb5 f1f3 	udiv	r1, r5, r3
 801d7b6:	fb03 5711 	mls	r7, r3, r1, r5
 801d7ba:	5dc7      	ldrb	r7, [r0, r7]
 801d7bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d7c0:	462f      	mov	r7, r5
 801d7c2:	42bb      	cmp	r3, r7
 801d7c4:	460d      	mov	r5, r1
 801d7c6:	d9f4      	bls.n	801d7b2 <_printf_i+0x11a>
 801d7c8:	2b08      	cmp	r3, #8
 801d7ca:	d10b      	bne.n	801d7e4 <_printf_i+0x14c>
 801d7cc:	6823      	ldr	r3, [r4, #0]
 801d7ce:	07df      	lsls	r7, r3, #31
 801d7d0:	d508      	bpl.n	801d7e4 <_printf_i+0x14c>
 801d7d2:	6923      	ldr	r3, [r4, #16]
 801d7d4:	6861      	ldr	r1, [r4, #4]
 801d7d6:	4299      	cmp	r1, r3
 801d7d8:	bfde      	ittt	le
 801d7da:	2330      	movle	r3, #48	; 0x30
 801d7dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d7e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d7e4:	1b92      	subs	r2, r2, r6
 801d7e6:	6122      	str	r2, [r4, #16]
 801d7e8:	f8cd a000 	str.w	sl, [sp]
 801d7ec:	464b      	mov	r3, r9
 801d7ee:	aa03      	add	r2, sp, #12
 801d7f0:	4621      	mov	r1, r4
 801d7f2:	4640      	mov	r0, r8
 801d7f4:	f7ff fee2 	bl	801d5bc <_printf_common>
 801d7f8:	3001      	adds	r0, #1
 801d7fa:	d14c      	bne.n	801d896 <_printf_i+0x1fe>
 801d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 801d800:	b004      	add	sp, #16
 801d802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d806:	4835      	ldr	r0, [pc, #212]	; (801d8dc <_printf_i+0x244>)
 801d808:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d80c:	6823      	ldr	r3, [r4, #0]
 801d80e:	680e      	ldr	r6, [r1, #0]
 801d810:	061f      	lsls	r7, r3, #24
 801d812:	f856 5b04 	ldr.w	r5, [r6], #4
 801d816:	600e      	str	r6, [r1, #0]
 801d818:	d514      	bpl.n	801d844 <_printf_i+0x1ac>
 801d81a:	07d9      	lsls	r1, r3, #31
 801d81c:	bf44      	itt	mi
 801d81e:	f043 0320 	orrmi.w	r3, r3, #32
 801d822:	6023      	strmi	r3, [r4, #0]
 801d824:	b91d      	cbnz	r5, 801d82e <_printf_i+0x196>
 801d826:	6823      	ldr	r3, [r4, #0]
 801d828:	f023 0320 	bic.w	r3, r3, #32
 801d82c:	6023      	str	r3, [r4, #0]
 801d82e:	2310      	movs	r3, #16
 801d830:	e7b0      	b.n	801d794 <_printf_i+0xfc>
 801d832:	6823      	ldr	r3, [r4, #0]
 801d834:	f043 0320 	orr.w	r3, r3, #32
 801d838:	6023      	str	r3, [r4, #0]
 801d83a:	2378      	movs	r3, #120	; 0x78
 801d83c:	4828      	ldr	r0, [pc, #160]	; (801d8e0 <_printf_i+0x248>)
 801d83e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d842:	e7e3      	b.n	801d80c <_printf_i+0x174>
 801d844:	065e      	lsls	r6, r3, #25
 801d846:	bf48      	it	mi
 801d848:	b2ad      	uxthmi	r5, r5
 801d84a:	e7e6      	b.n	801d81a <_printf_i+0x182>
 801d84c:	4616      	mov	r6, r2
 801d84e:	e7bb      	b.n	801d7c8 <_printf_i+0x130>
 801d850:	680b      	ldr	r3, [r1, #0]
 801d852:	6826      	ldr	r6, [r4, #0]
 801d854:	6960      	ldr	r0, [r4, #20]
 801d856:	1d1d      	adds	r5, r3, #4
 801d858:	600d      	str	r5, [r1, #0]
 801d85a:	0635      	lsls	r5, r6, #24
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	d501      	bpl.n	801d864 <_printf_i+0x1cc>
 801d860:	6018      	str	r0, [r3, #0]
 801d862:	e002      	b.n	801d86a <_printf_i+0x1d2>
 801d864:	0671      	lsls	r1, r6, #25
 801d866:	d5fb      	bpl.n	801d860 <_printf_i+0x1c8>
 801d868:	8018      	strh	r0, [r3, #0]
 801d86a:	2300      	movs	r3, #0
 801d86c:	6123      	str	r3, [r4, #16]
 801d86e:	4616      	mov	r6, r2
 801d870:	e7ba      	b.n	801d7e8 <_printf_i+0x150>
 801d872:	680b      	ldr	r3, [r1, #0]
 801d874:	1d1a      	adds	r2, r3, #4
 801d876:	600a      	str	r2, [r1, #0]
 801d878:	681e      	ldr	r6, [r3, #0]
 801d87a:	6862      	ldr	r2, [r4, #4]
 801d87c:	2100      	movs	r1, #0
 801d87e:	4630      	mov	r0, r6
 801d880:	f7e2 fcbe 	bl	8000200 <memchr>
 801d884:	b108      	cbz	r0, 801d88a <_printf_i+0x1f2>
 801d886:	1b80      	subs	r0, r0, r6
 801d888:	6060      	str	r0, [r4, #4]
 801d88a:	6863      	ldr	r3, [r4, #4]
 801d88c:	6123      	str	r3, [r4, #16]
 801d88e:	2300      	movs	r3, #0
 801d890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d894:	e7a8      	b.n	801d7e8 <_printf_i+0x150>
 801d896:	6923      	ldr	r3, [r4, #16]
 801d898:	4632      	mov	r2, r6
 801d89a:	4649      	mov	r1, r9
 801d89c:	4640      	mov	r0, r8
 801d89e:	47d0      	blx	sl
 801d8a0:	3001      	adds	r0, #1
 801d8a2:	d0ab      	beq.n	801d7fc <_printf_i+0x164>
 801d8a4:	6823      	ldr	r3, [r4, #0]
 801d8a6:	079b      	lsls	r3, r3, #30
 801d8a8:	d413      	bmi.n	801d8d2 <_printf_i+0x23a>
 801d8aa:	68e0      	ldr	r0, [r4, #12]
 801d8ac:	9b03      	ldr	r3, [sp, #12]
 801d8ae:	4298      	cmp	r0, r3
 801d8b0:	bfb8      	it	lt
 801d8b2:	4618      	movlt	r0, r3
 801d8b4:	e7a4      	b.n	801d800 <_printf_i+0x168>
 801d8b6:	2301      	movs	r3, #1
 801d8b8:	4632      	mov	r2, r6
 801d8ba:	4649      	mov	r1, r9
 801d8bc:	4640      	mov	r0, r8
 801d8be:	47d0      	blx	sl
 801d8c0:	3001      	adds	r0, #1
 801d8c2:	d09b      	beq.n	801d7fc <_printf_i+0x164>
 801d8c4:	3501      	adds	r5, #1
 801d8c6:	68e3      	ldr	r3, [r4, #12]
 801d8c8:	9903      	ldr	r1, [sp, #12]
 801d8ca:	1a5b      	subs	r3, r3, r1
 801d8cc:	42ab      	cmp	r3, r5
 801d8ce:	dcf2      	bgt.n	801d8b6 <_printf_i+0x21e>
 801d8d0:	e7eb      	b.n	801d8aa <_printf_i+0x212>
 801d8d2:	2500      	movs	r5, #0
 801d8d4:	f104 0619 	add.w	r6, r4, #25
 801d8d8:	e7f5      	b.n	801d8c6 <_printf_i+0x22e>
 801d8da:	bf00      	nop
 801d8dc:	08029692 	.word	0x08029692
 801d8e0:	080296a3 	.word	0x080296a3

0801d8e4 <_scanf_float>:
 801d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e8:	b087      	sub	sp, #28
 801d8ea:	4617      	mov	r7, r2
 801d8ec:	9303      	str	r3, [sp, #12]
 801d8ee:	688b      	ldr	r3, [r1, #8]
 801d8f0:	1e5a      	subs	r2, r3, #1
 801d8f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d8f6:	bf83      	ittte	hi
 801d8f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d8fc:	195b      	addhi	r3, r3, r5
 801d8fe:	9302      	strhi	r3, [sp, #8]
 801d900:	2300      	movls	r3, #0
 801d902:	bf86      	itte	hi
 801d904:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d908:	608b      	strhi	r3, [r1, #8]
 801d90a:	9302      	strls	r3, [sp, #8]
 801d90c:	680b      	ldr	r3, [r1, #0]
 801d90e:	468b      	mov	fp, r1
 801d910:	2500      	movs	r5, #0
 801d912:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801d916:	f84b 3b1c 	str.w	r3, [fp], #28
 801d91a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d91e:	4680      	mov	r8, r0
 801d920:	460c      	mov	r4, r1
 801d922:	465e      	mov	r6, fp
 801d924:	46aa      	mov	sl, r5
 801d926:	46a9      	mov	r9, r5
 801d928:	9501      	str	r5, [sp, #4]
 801d92a:	68a2      	ldr	r2, [r4, #8]
 801d92c:	b152      	cbz	r2, 801d944 <_scanf_float+0x60>
 801d92e:	683b      	ldr	r3, [r7, #0]
 801d930:	781b      	ldrb	r3, [r3, #0]
 801d932:	2b4e      	cmp	r3, #78	; 0x4e
 801d934:	d864      	bhi.n	801da00 <_scanf_float+0x11c>
 801d936:	2b40      	cmp	r3, #64	; 0x40
 801d938:	d83c      	bhi.n	801d9b4 <_scanf_float+0xd0>
 801d93a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d93e:	b2c8      	uxtb	r0, r1
 801d940:	280e      	cmp	r0, #14
 801d942:	d93a      	bls.n	801d9ba <_scanf_float+0xd6>
 801d944:	f1b9 0f00 	cmp.w	r9, #0
 801d948:	d003      	beq.n	801d952 <_scanf_float+0x6e>
 801d94a:	6823      	ldr	r3, [r4, #0]
 801d94c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d950:	6023      	str	r3, [r4, #0]
 801d952:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d956:	f1ba 0f01 	cmp.w	sl, #1
 801d95a:	f200 8113 	bhi.w	801db84 <_scanf_float+0x2a0>
 801d95e:	455e      	cmp	r6, fp
 801d960:	f200 8105 	bhi.w	801db6e <_scanf_float+0x28a>
 801d964:	2501      	movs	r5, #1
 801d966:	4628      	mov	r0, r5
 801d968:	b007      	add	sp, #28
 801d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d96e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801d972:	2a0d      	cmp	r2, #13
 801d974:	d8e6      	bhi.n	801d944 <_scanf_float+0x60>
 801d976:	a101      	add	r1, pc, #4	; (adr r1, 801d97c <_scanf_float+0x98>)
 801d978:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d97c:	0801dabb 	.word	0x0801dabb
 801d980:	0801d945 	.word	0x0801d945
 801d984:	0801d945 	.word	0x0801d945
 801d988:	0801d945 	.word	0x0801d945
 801d98c:	0801db1b 	.word	0x0801db1b
 801d990:	0801daf3 	.word	0x0801daf3
 801d994:	0801d945 	.word	0x0801d945
 801d998:	0801d945 	.word	0x0801d945
 801d99c:	0801dac9 	.word	0x0801dac9
 801d9a0:	0801d945 	.word	0x0801d945
 801d9a4:	0801d945 	.word	0x0801d945
 801d9a8:	0801d945 	.word	0x0801d945
 801d9ac:	0801d945 	.word	0x0801d945
 801d9b0:	0801da81 	.word	0x0801da81
 801d9b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801d9b8:	e7db      	b.n	801d972 <_scanf_float+0x8e>
 801d9ba:	290e      	cmp	r1, #14
 801d9bc:	d8c2      	bhi.n	801d944 <_scanf_float+0x60>
 801d9be:	a001      	add	r0, pc, #4	; (adr r0, 801d9c4 <_scanf_float+0xe0>)
 801d9c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d9c4:	0801da73 	.word	0x0801da73
 801d9c8:	0801d945 	.word	0x0801d945
 801d9cc:	0801da73 	.word	0x0801da73
 801d9d0:	0801db07 	.word	0x0801db07
 801d9d4:	0801d945 	.word	0x0801d945
 801d9d8:	0801da21 	.word	0x0801da21
 801d9dc:	0801da5d 	.word	0x0801da5d
 801d9e0:	0801da5d 	.word	0x0801da5d
 801d9e4:	0801da5d 	.word	0x0801da5d
 801d9e8:	0801da5d 	.word	0x0801da5d
 801d9ec:	0801da5d 	.word	0x0801da5d
 801d9f0:	0801da5d 	.word	0x0801da5d
 801d9f4:	0801da5d 	.word	0x0801da5d
 801d9f8:	0801da5d 	.word	0x0801da5d
 801d9fc:	0801da5d 	.word	0x0801da5d
 801da00:	2b6e      	cmp	r3, #110	; 0x6e
 801da02:	d809      	bhi.n	801da18 <_scanf_float+0x134>
 801da04:	2b60      	cmp	r3, #96	; 0x60
 801da06:	d8b2      	bhi.n	801d96e <_scanf_float+0x8a>
 801da08:	2b54      	cmp	r3, #84	; 0x54
 801da0a:	d077      	beq.n	801dafc <_scanf_float+0x218>
 801da0c:	2b59      	cmp	r3, #89	; 0x59
 801da0e:	d199      	bne.n	801d944 <_scanf_float+0x60>
 801da10:	2d07      	cmp	r5, #7
 801da12:	d197      	bne.n	801d944 <_scanf_float+0x60>
 801da14:	2508      	movs	r5, #8
 801da16:	e029      	b.n	801da6c <_scanf_float+0x188>
 801da18:	2b74      	cmp	r3, #116	; 0x74
 801da1a:	d06f      	beq.n	801dafc <_scanf_float+0x218>
 801da1c:	2b79      	cmp	r3, #121	; 0x79
 801da1e:	e7f6      	b.n	801da0e <_scanf_float+0x12a>
 801da20:	6821      	ldr	r1, [r4, #0]
 801da22:	05c8      	lsls	r0, r1, #23
 801da24:	d51a      	bpl.n	801da5c <_scanf_float+0x178>
 801da26:	9b02      	ldr	r3, [sp, #8]
 801da28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801da2c:	6021      	str	r1, [r4, #0]
 801da2e:	f109 0901 	add.w	r9, r9, #1
 801da32:	b11b      	cbz	r3, 801da3c <_scanf_float+0x158>
 801da34:	3b01      	subs	r3, #1
 801da36:	3201      	adds	r2, #1
 801da38:	9302      	str	r3, [sp, #8]
 801da3a:	60a2      	str	r2, [r4, #8]
 801da3c:	68a3      	ldr	r3, [r4, #8]
 801da3e:	3b01      	subs	r3, #1
 801da40:	60a3      	str	r3, [r4, #8]
 801da42:	6923      	ldr	r3, [r4, #16]
 801da44:	3301      	adds	r3, #1
 801da46:	6123      	str	r3, [r4, #16]
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	3b01      	subs	r3, #1
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	607b      	str	r3, [r7, #4]
 801da50:	f340 8084 	ble.w	801db5c <_scanf_float+0x278>
 801da54:	683b      	ldr	r3, [r7, #0]
 801da56:	3301      	adds	r3, #1
 801da58:	603b      	str	r3, [r7, #0]
 801da5a:	e766      	b.n	801d92a <_scanf_float+0x46>
 801da5c:	eb1a 0f05 	cmn.w	sl, r5
 801da60:	f47f af70 	bne.w	801d944 <_scanf_float+0x60>
 801da64:	6822      	ldr	r2, [r4, #0]
 801da66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801da6a:	6022      	str	r2, [r4, #0]
 801da6c:	f806 3b01 	strb.w	r3, [r6], #1
 801da70:	e7e4      	b.n	801da3c <_scanf_float+0x158>
 801da72:	6822      	ldr	r2, [r4, #0]
 801da74:	0610      	lsls	r0, r2, #24
 801da76:	f57f af65 	bpl.w	801d944 <_scanf_float+0x60>
 801da7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801da7e:	e7f4      	b.n	801da6a <_scanf_float+0x186>
 801da80:	f1ba 0f00 	cmp.w	sl, #0
 801da84:	d10e      	bne.n	801daa4 <_scanf_float+0x1c0>
 801da86:	f1b9 0f00 	cmp.w	r9, #0
 801da8a:	d10e      	bne.n	801daaa <_scanf_float+0x1c6>
 801da8c:	6822      	ldr	r2, [r4, #0]
 801da8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801da92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801da96:	d108      	bne.n	801daaa <_scanf_float+0x1c6>
 801da98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801da9c:	6022      	str	r2, [r4, #0]
 801da9e:	f04f 0a01 	mov.w	sl, #1
 801daa2:	e7e3      	b.n	801da6c <_scanf_float+0x188>
 801daa4:	f1ba 0f02 	cmp.w	sl, #2
 801daa8:	d055      	beq.n	801db56 <_scanf_float+0x272>
 801daaa:	2d01      	cmp	r5, #1
 801daac:	d002      	beq.n	801dab4 <_scanf_float+0x1d0>
 801daae:	2d04      	cmp	r5, #4
 801dab0:	f47f af48 	bne.w	801d944 <_scanf_float+0x60>
 801dab4:	3501      	adds	r5, #1
 801dab6:	b2ed      	uxtb	r5, r5
 801dab8:	e7d8      	b.n	801da6c <_scanf_float+0x188>
 801daba:	f1ba 0f01 	cmp.w	sl, #1
 801dabe:	f47f af41 	bne.w	801d944 <_scanf_float+0x60>
 801dac2:	f04f 0a02 	mov.w	sl, #2
 801dac6:	e7d1      	b.n	801da6c <_scanf_float+0x188>
 801dac8:	b97d      	cbnz	r5, 801daea <_scanf_float+0x206>
 801daca:	f1b9 0f00 	cmp.w	r9, #0
 801dace:	f47f af3c 	bne.w	801d94a <_scanf_float+0x66>
 801dad2:	6822      	ldr	r2, [r4, #0]
 801dad4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dad8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dadc:	f47f af39 	bne.w	801d952 <_scanf_float+0x6e>
 801dae0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dae4:	6022      	str	r2, [r4, #0]
 801dae6:	2501      	movs	r5, #1
 801dae8:	e7c0      	b.n	801da6c <_scanf_float+0x188>
 801daea:	2d03      	cmp	r5, #3
 801daec:	d0e2      	beq.n	801dab4 <_scanf_float+0x1d0>
 801daee:	2d05      	cmp	r5, #5
 801daf0:	e7de      	b.n	801dab0 <_scanf_float+0x1cc>
 801daf2:	2d02      	cmp	r5, #2
 801daf4:	f47f af26 	bne.w	801d944 <_scanf_float+0x60>
 801daf8:	2503      	movs	r5, #3
 801dafa:	e7b7      	b.n	801da6c <_scanf_float+0x188>
 801dafc:	2d06      	cmp	r5, #6
 801dafe:	f47f af21 	bne.w	801d944 <_scanf_float+0x60>
 801db02:	2507      	movs	r5, #7
 801db04:	e7b2      	b.n	801da6c <_scanf_float+0x188>
 801db06:	6822      	ldr	r2, [r4, #0]
 801db08:	0591      	lsls	r1, r2, #22
 801db0a:	f57f af1b 	bpl.w	801d944 <_scanf_float+0x60>
 801db0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801db12:	6022      	str	r2, [r4, #0]
 801db14:	f8cd 9004 	str.w	r9, [sp, #4]
 801db18:	e7a8      	b.n	801da6c <_scanf_float+0x188>
 801db1a:	6822      	ldr	r2, [r4, #0]
 801db1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801db20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801db24:	d006      	beq.n	801db34 <_scanf_float+0x250>
 801db26:	0550      	lsls	r0, r2, #21
 801db28:	f57f af0c 	bpl.w	801d944 <_scanf_float+0x60>
 801db2c:	f1b9 0f00 	cmp.w	r9, #0
 801db30:	f43f af0f 	beq.w	801d952 <_scanf_float+0x6e>
 801db34:	0591      	lsls	r1, r2, #22
 801db36:	bf58      	it	pl
 801db38:	9901      	ldrpl	r1, [sp, #4]
 801db3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801db3e:	bf58      	it	pl
 801db40:	eba9 0101 	subpl.w	r1, r9, r1
 801db44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801db48:	bf58      	it	pl
 801db4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801db4e:	6022      	str	r2, [r4, #0]
 801db50:	f04f 0900 	mov.w	r9, #0
 801db54:	e78a      	b.n	801da6c <_scanf_float+0x188>
 801db56:	f04f 0a03 	mov.w	sl, #3
 801db5a:	e787      	b.n	801da6c <_scanf_float+0x188>
 801db5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801db60:	4639      	mov	r1, r7
 801db62:	4640      	mov	r0, r8
 801db64:	4798      	blx	r3
 801db66:	2800      	cmp	r0, #0
 801db68:	f43f aedf 	beq.w	801d92a <_scanf_float+0x46>
 801db6c:	e6ea      	b.n	801d944 <_scanf_float+0x60>
 801db6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801db72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801db76:	463a      	mov	r2, r7
 801db78:	4640      	mov	r0, r8
 801db7a:	4798      	blx	r3
 801db7c:	6923      	ldr	r3, [r4, #16]
 801db7e:	3b01      	subs	r3, #1
 801db80:	6123      	str	r3, [r4, #16]
 801db82:	e6ec      	b.n	801d95e <_scanf_float+0x7a>
 801db84:	1e6b      	subs	r3, r5, #1
 801db86:	2b06      	cmp	r3, #6
 801db88:	d825      	bhi.n	801dbd6 <_scanf_float+0x2f2>
 801db8a:	2d02      	cmp	r5, #2
 801db8c:	d836      	bhi.n	801dbfc <_scanf_float+0x318>
 801db8e:	455e      	cmp	r6, fp
 801db90:	f67f aee8 	bls.w	801d964 <_scanf_float+0x80>
 801db94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801db98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801db9c:	463a      	mov	r2, r7
 801db9e:	4640      	mov	r0, r8
 801dba0:	4798      	blx	r3
 801dba2:	6923      	ldr	r3, [r4, #16]
 801dba4:	3b01      	subs	r3, #1
 801dba6:	6123      	str	r3, [r4, #16]
 801dba8:	e7f1      	b.n	801db8e <_scanf_float+0x2aa>
 801dbaa:	9802      	ldr	r0, [sp, #8]
 801dbac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dbb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801dbb4:	9002      	str	r0, [sp, #8]
 801dbb6:	463a      	mov	r2, r7
 801dbb8:	4640      	mov	r0, r8
 801dbba:	4798      	blx	r3
 801dbbc:	6923      	ldr	r3, [r4, #16]
 801dbbe:	3b01      	subs	r3, #1
 801dbc0:	6123      	str	r3, [r4, #16]
 801dbc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dbc6:	fa5f fa8a 	uxtb.w	sl, sl
 801dbca:	f1ba 0f02 	cmp.w	sl, #2
 801dbce:	d1ec      	bne.n	801dbaa <_scanf_float+0x2c6>
 801dbd0:	3d03      	subs	r5, #3
 801dbd2:	b2ed      	uxtb	r5, r5
 801dbd4:	1b76      	subs	r6, r6, r5
 801dbd6:	6823      	ldr	r3, [r4, #0]
 801dbd8:	05da      	lsls	r2, r3, #23
 801dbda:	d52f      	bpl.n	801dc3c <_scanf_float+0x358>
 801dbdc:	055b      	lsls	r3, r3, #21
 801dbde:	d510      	bpl.n	801dc02 <_scanf_float+0x31e>
 801dbe0:	455e      	cmp	r6, fp
 801dbe2:	f67f aebf 	bls.w	801d964 <_scanf_float+0x80>
 801dbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dbea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dbee:	463a      	mov	r2, r7
 801dbf0:	4640      	mov	r0, r8
 801dbf2:	4798      	blx	r3
 801dbf4:	6923      	ldr	r3, [r4, #16]
 801dbf6:	3b01      	subs	r3, #1
 801dbf8:	6123      	str	r3, [r4, #16]
 801dbfa:	e7f1      	b.n	801dbe0 <_scanf_float+0x2fc>
 801dbfc:	46aa      	mov	sl, r5
 801dbfe:	9602      	str	r6, [sp, #8]
 801dc00:	e7df      	b.n	801dbc2 <_scanf_float+0x2de>
 801dc02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dc06:	6923      	ldr	r3, [r4, #16]
 801dc08:	2965      	cmp	r1, #101	; 0x65
 801dc0a:	f103 33ff 	add.w	r3, r3, #4294967295
 801dc0e:	f106 35ff 	add.w	r5, r6, #4294967295
 801dc12:	6123      	str	r3, [r4, #16]
 801dc14:	d00c      	beq.n	801dc30 <_scanf_float+0x34c>
 801dc16:	2945      	cmp	r1, #69	; 0x45
 801dc18:	d00a      	beq.n	801dc30 <_scanf_float+0x34c>
 801dc1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dc1e:	463a      	mov	r2, r7
 801dc20:	4640      	mov	r0, r8
 801dc22:	4798      	blx	r3
 801dc24:	6923      	ldr	r3, [r4, #16]
 801dc26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dc2a:	3b01      	subs	r3, #1
 801dc2c:	1eb5      	subs	r5, r6, #2
 801dc2e:	6123      	str	r3, [r4, #16]
 801dc30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dc34:	463a      	mov	r2, r7
 801dc36:	4640      	mov	r0, r8
 801dc38:	4798      	blx	r3
 801dc3a:	462e      	mov	r6, r5
 801dc3c:	6825      	ldr	r5, [r4, #0]
 801dc3e:	f015 0510 	ands.w	r5, r5, #16
 801dc42:	d158      	bne.n	801dcf6 <_scanf_float+0x412>
 801dc44:	7035      	strb	r5, [r6, #0]
 801dc46:	6823      	ldr	r3, [r4, #0]
 801dc48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801dc4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dc50:	d11c      	bne.n	801dc8c <_scanf_float+0x3a8>
 801dc52:	9b01      	ldr	r3, [sp, #4]
 801dc54:	454b      	cmp	r3, r9
 801dc56:	eba3 0209 	sub.w	r2, r3, r9
 801dc5a:	d124      	bne.n	801dca6 <_scanf_float+0x3c2>
 801dc5c:	2200      	movs	r2, #0
 801dc5e:	4659      	mov	r1, fp
 801dc60:	4640      	mov	r0, r8
 801dc62:	f000 feaf 	bl	801e9c4 <_strtod_r>
 801dc66:	9b03      	ldr	r3, [sp, #12]
 801dc68:	6821      	ldr	r1, [r4, #0]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	f011 0f02 	tst.w	r1, #2
 801dc70:	ec57 6b10 	vmov	r6, r7, d0
 801dc74:	f103 0204 	add.w	r2, r3, #4
 801dc78:	d020      	beq.n	801dcbc <_scanf_float+0x3d8>
 801dc7a:	9903      	ldr	r1, [sp, #12]
 801dc7c:	600a      	str	r2, [r1, #0]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	e9c3 6700 	strd	r6, r7, [r3]
 801dc84:	68e3      	ldr	r3, [r4, #12]
 801dc86:	3301      	adds	r3, #1
 801dc88:	60e3      	str	r3, [r4, #12]
 801dc8a:	e66c      	b.n	801d966 <_scanf_float+0x82>
 801dc8c:	9b04      	ldr	r3, [sp, #16]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d0e4      	beq.n	801dc5c <_scanf_float+0x378>
 801dc92:	9905      	ldr	r1, [sp, #20]
 801dc94:	230a      	movs	r3, #10
 801dc96:	462a      	mov	r2, r5
 801dc98:	3101      	adds	r1, #1
 801dc9a:	4640      	mov	r0, r8
 801dc9c:	f000 ff1c 	bl	801ead8 <_strtol_r>
 801dca0:	9b04      	ldr	r3, [sp, #16]
 801dca2:	9e05      	ldr	r6, [sp, #20]
 801dca4:	1ac2      	subs	r2, r0, r3
 801dca6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801dcaa:	429e      	cmp	r6, r3
 801dcac:	bf28      	it	cs
 801dcae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801dcb2:	4912      	ldr	r1, [pc, #72]	; (801dcfc <_scanf_float+0x418>)
 801dcb4:	4630      	mov	r0, r6
 801dcb6:	f000 f82b 	bl	801dd10 <siprintf>
 801dcba:	e7cf      	b.n	801dc5c <_scanf_float+0x378>
 801dcbc:	f011 0f04 	tst.w	r1, #4
 801dcc0:	9903      	ldr	r1, [sp, #12]
 801dcc2:	600a      	str	r2, [r1, #0]
 801dcc4:	d1db      	bne.n	801dc7e <_scanf_float+0x39a>
 801dcc6:	f8d3 8000 	ldr.w	r8, [r3]
 801dcca:	ee10 2a10 	vmov	r2, s0
 801dcce:	ee10 0a10 	vmov	r0, s0
 801dcd2:	463b      	mov	r3, r7
 801dcd4:	4639      	mov	r1, r7
 801dcd6:	f7e2 ff39 	bl	8000b4c <__aeabi_dcmpun>
 801dcda:	b128      	cbz	r0, 801dce8 <_scanf_float+0x404>
 801dcdc:	4808      	ldr	r0, [pc, #32]	; (801dd00 <_scanf_float+0x41c>)
 801dcde:	f000 f811 	bl	801dd04 <nanf>
 801dce2:	ed88 0a00 	vstr	s0, [r8]
 801dce6:	e7cd      	b.n	801dc84 <_scanf_float+0x3a0>
 801dce8:	4630      	mov	r0, r6
 801dcea:	4639      	mov	r1, r7
 801dcec:	f7e2 ff8c 	bl	8000c08 <__aeabi_d2f>
 801dcf0:	f8c8 0000 	str.w	r0, [r8]
 801dcf4:	e7c6      	b.n	801dc84 <_scanf_float+0x3a0>
 801dcf6:	2500      	movs	r5, #0
 801dcf8:	e635      	b.n	801d966 <_scanf_float+0x82>
 801dcfa:	bf00      	nop
 801dcfc:	080296b4 	.word	0x080296b4
 801dd00:	08029b30 	.word	0x08029b30

0801dd04 <nanf>:
 801dd04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801dd0c <nanf+0x8>
 801dd08:	4770      	bx	lr
 801dd0a:	bf00      	nop
 801dd0c:	7fc00000 	.word	0x7fc00000

0801dd10 <siprintf>:
 801dd10:	b40e      	push	{r1, r2, r3}
 801dd12:	b500      	push	{lr}
 801dd14:	b09c      	sub	sp, #112	; 0x70
 801dd16:	ab1d      	add	r3, sp, #116	; 0x74
 801dd18:	9002      	str	r0, [sp, #8]
 801dd1a:	9006      	str	r0, [sp, #24]
 801dd1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dd20:	4809      	ldr	r0, [pc, #36]	; (801dd48 <siprintf+0x38>)
 801dd22:	9107      	str	r1, [sp, #28]
 801dd24:	9104      	str	r1, [sp, #16]
 801dd26:	4909      	ldr	r1, [pc, #36]	; (801dd4c <siprintf+0x3c>)
 801dd28:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd2c:	9105      	str	r1, [sp, #20]
 801dd2e:	6800      	ldr	r0, [r0, #0]
 801dd30:	9301      	str	r3, [sp, #4]
 801dd32:	a902      	add	r1, sp, #8
 801dd34:	f002 ffb0 	bl	8020c98 <_svfiprintf_r>
 801dd38:	9b02      	ldr	r3, [sp, #8]
 801dd3a:	2200      	movs	r2, #0
 801dd3c:	701a      	strb	r2, [r3, #0]
 801dd3e:	b01c      	add	sp, #112	; 0x70
 801dd40:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd44:	b003      	add	sp, #12
 801dd46:	4770      	bx	lr
 801dd48:	2000062c 	.word	0x2000062c
 801dd4c:	ffff0208 	.word	0xffff0208

0801dd50 <strncpy>:
 801dd50:	b510      	push	{r4, lr}
 801dd52:	3901      	subs	r1, #1
 801dd54:	4603      	mov	r3, r0
 801dd56:	b132      	cbz	r2, 801dd66 <strncpy+0x16>
 801dd58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dd5c:	f803 4b01 	strb.w	r4, [r3], #1
 801dd60:	3a01      	subs	r2, #1
 801dd62:	2c00      	cmp	r4, #0
 801dd64:	d1f7      	bne.n	801dd56 <strncpy+0x6>
 801dd66:	441a      	add	r2, r3
 801dd68:	2100      	movs	r1, #0
 801dd6a:	4293      	cmp	r3, r2
 801dd6c:	d100      	bne.n	801dd70 <strncpy+0x20>
 801dd6e:	bd10      	pop	{r4, pc}
 801dd70:	f803 1b01 	strb.w	r1, [r3], #1
 801dd74:	e7f9      	b.n	801dd6a <strncpy+0x1a>

0801dd76 <sulp>:
 801dd76:	b570      	push	{r4, r5, r6, lr}
 801dd78:	4604      	mov	r4, r0
 801dd7a:	460d      	mov	r5, r1
 801dd7c:	ec45 4b10 	vmov	d0, r4, r5
 801dd80:	4616      	mov	r6, r2
 801dd82:	f002 fd25 	bl	80207d0 <__ulp>
 801dd86:	ec51 0b10 	vmov	r0, r1, d0
 801dd8a:	b17e      	cbz	r6, 801ddac <sulp+0x36>
 801dd8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801dd90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	dd09      	ble.n	801ddac <sulp+0x36>
 801dd98:	051b      	lsls	r3, r3, #20
 801dd9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801dd9e:	2400      	movs	r4, #0
 801dda0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801dda4:	4622      	mov	r2, r4
 801dda6:	462b      	mov	r3, r5
 801dda8:	f7e2 fc36 	bl	8000618 <__aeabi_dmul>
 801ddac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ddb0 <_strtod_l>:
 801ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddb4:	b0a3      	sub	sp, #140	; 0x8c
 801ddb6:	461f      	mov	r7, r3
 801ddb8:	2300      	movs	r3, #0
 801ddba:	931e      	str	r3, [sp, #120]	; 0x78
 801ddbc:	4ba4      	ldr	r3, [pc, #656]	; (801e050 <_strtod_l+0x2a0>)
 801ddbe:	9219      	str	r2, [sp, #100]	; 0x64
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	9307      	str	r3, [sp, #28]
 801ddc4:	4604      	mov	r4, r0
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	4688      	mov	r8, r1
 801ddca:	f7e2 fa11 	bl	80001f0 <strlen>
 801ddce:	f04f 0a00 	mov.w	sl, #0
 801ddd2:	4605      	mov	r5, r0
 801ddd4:	f04f 0b00 	mov.w	fp, #0
 801ddd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801dddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ddde:	781a      	ldrb	r2, [r3, #0]
 801dde0:	2a2b      	cmp	r2, #43	; 0x2b
 801dde2:	d04c      	beq.n	801de7e <_strtod_l+0xce>
 801dde4:	d839      	bhi.n	801de5a <_strtod_l+0xaa>
 801dde6:	2a0d      	cmp	r2, #13
 801dde8:	d832      	bhi.n	801de50 <_strtod_l+0xa0>
 801ddea:	2a08      	cmp	r2, #8
 801ddec:	d832      	bhi.n	801de54 <_strtod_l+0xa4>
 801ddee:	2a00      	cmp	r2, #0
 801ddf0:	d03c      	beq.n	801de6c <_strtod_l+0xbc>
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	930e      	str	r3, [sp, #56]	; 0x38
 801ddf6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ddf8:	7833      	ldrb	r3, [r6, #0]
 801ddfa:	2b30      	cmp	r3, #48	; 0x30
 801ddfc:	f040 80b4 	bne.w	801df68 <_strtod_l+0x1b8>
 801de00:	7873      	ldrb	r3, [r6, #1]
 801de02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801de06:	2b58      	cmp	r3, #88	; 0x58
 801de08:	d16c      	bne.n	801dee4 <_strtod_l+0x134>
 801de0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de0c:	9301      	str	r3, [sp, #4]
 801de0e:	ab1e      	add	r3, sp, #120	; 0x78
 801de10:	9702      	str	r7, [sp, #8]
 801de12:	9300      	str	r3, [sp, #0]
 801de14:	4a8f      	ldr	r2, [pc, #572]	; (801e054 <_strtod_l+0x2a4>)
 801de16:	ab1f      	add	r3, sp, #124	; 0x7c
 801de18:	a91d      	add	r1, sp, #116	; 0x74
 801de1a:	4620      	mov	r0, r4
 801de1c:	f001 fe34 	bl	801fa88 <__gethex>
 801de20:	f010 0707 	ands.w	r7, r0, #7
 801de24:	4605      	mov	r5, r0
 801de26:	d005      	beq.n	801de34 <_strtod_l+0x84>
 801de28:	2f06      	cmp	r7, #6
 801de2a:	d12a      	bne.n	801de82 <_strtod_l+0xd2>
 801de2c:	3601      	adds	r6, #1
 801de2e:	2300      	movs	r3, #0
 801de30:	961d      	str	r6, [sp, #116]	; 0x74
 801de32:	930e      	str	r3, [sp, #56]	; 0x38
 801de34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de36:	2b00      	cmp	r3, #0
 801de38:	f040 8596 	bne.w	801e968 <_strtod_l+0xbb8>
 801de3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de3e:	b1db      	cbz	r3, 801de78 <_strtod_l+0xc8>
 801de40:	4652      	mov	r2, sl
 801de42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801de46:	ec43 2b10 	vmov	d0, r2, r3
 801de4a:	b023      	add	sp, #140	; 0x8c
 801de4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de50:	2a20      	cmp	r2, #32
 801de52:	d1ce      	bne.n	801ddf2 <_strtod_l+0x42>
 801de54:	3301      	adds	r3, #1
 801de56:	931d      	str	r3, [sp, #116]	; 0x74
 801de58:	e7c0      	b.n	801dddc <_strtod_l+0x2c>
 801de5a:	2a2d      	cmp	r2, #45	; 0x2d
 801de5c:	d1c9      	bne.n	801ddf2 <_strtod_l+0x42>
 801de5e:	2201      	movs	r2, #1
 801de60:	920e      	str	r2, [sp, #56]	; 0x38
 801de62:	1c5a      	adds	r2, r3, #1
 801de64:	921d      	str	r2, [sp, #116]	; 0x74
 801de66:	785b      	ldrb	r3, [r3, #1]
 801de68:	2b00      	cmp	r3, #0
 801de6a:	d1c4      	bne.n	801ddf6 <_strtod_l+0x46>
 801de6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801de72:	2b00      	cmp	r3, #0
 801de74:	f040 8576 	bne.w	801e964 <_strtod_l+0xbb4>
 801de78:	4652      	mov	r2, sl
 801de7a:	465b      	mov	r3, fp
 801de7c:	e7e3      	b.n	801de46 <_strtod_l+0x96>
 801de7e:	2200      	movs	r2, #0
 801de80:	e7ee      	b.n	801de60 <_strtod_l+0xb0>
 801de82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801de84:	b13a      	cbz	r2, 801de96 <_strtod_l+0xe6>
 801de86:	2135      	movs	r1, #53	; 0x35
 801de88:	a820      	add	r0, sp, #128	; 0x80
 801de8a:	f002 fdac 	bl	80209e6 <__copybits>
 801de8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801de90:	4620      	mov	r0, r4
 801de92:	f002 f971 	bl	8020178 <_Bfree>
 801de96:	3f01      	subs	r7, #1
 801de98:	2f05      	cmp	r7, #5
 801de9a:	d807      	bhi.n	801deac <_strtod_l+0xfc>
 801de9c:	e8df f007 	tbb	[pc, r7]
 801dea0:	1d180b0e 	.word	0x1d180b0e
 801dea4:	030e      	.short	0x030e
 801dea6:	f04f 0b00 	mov.w	fp, #0
 801deaa:	46da      	mov	sl, fp
 801deac:	0728      	lsls	r0, r5, #28
 801deae:	d5c1      	bpl.n	801de34 <_strtod_l+0x84>
 801deb0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801deb4:	e7be      	b.n	801de34 <_strtod_l+0x84>
 801deb6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801deba:	e7f7      	b.n	801deac <_strtod_l+0xfc>
 801debc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801dec0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801dec2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dec6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801deca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801dece:	e7ed      	b.n	801deac <_strtod_l+0xfc>
 801ded0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801e058 <_strtod_l+0x2a8>
 801ded4:	f04f 0a00 	mov.w	sl, #0
 801ded8:	e7e8      	b.n	801deac <_strtod_l+0xfc>
 801deda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801dede:	f04f 3aff 	mov.w	sl, #4294967295
 801dee2:	e7e3      	b.n	801deac <_strtod_l+0xfc>
 801dee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dee6:	1c5a      	adds	r2, r3, #1
 801dee8:	921d      	str	r2, [sp, #116]	; 0x74
 801deea:	785b      	ldrb	r3, [r3, #1]
 801deec:	2b30      	cmp	r3, #48	; 0x30
 801deee:	d0f9      	beq.n	801dee4 <_strtod_l+0x134>
 801def0:	2b00      	cmp	r3, #0
 801def2:	d09f      	beq.n	801de34 <_strtod_l+0x84>
 801def4:	2301      	movs	r3, #1
 801def6:	f04f 0900 	mov.w	r9, #0
 801defa:	9304      	str	r3, [sp, #16]
 801defc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801defe:	930a      	str	r3, [sp, #40]	; 0x28
 801df00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801df04:	464f      	mov	r7, r9
 801df06:	220a      	movs	r2, #10
 801df08:	981d      	ldr	r0, [sp, #116]	; 0x74
 801df0a:	7806      	ldrb	r6, [r0, #0]
 801df0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801df10:	b2d9      	uxtb	r1, r3
 801df12:	2909      	cmp	r1, #9
 801df14:	d92a      	bls.n	801df6c <_strtod_l+0x1bc>
 801df16:	9907      	ldr	r1, [sp, #28]
 801df18:	462a      	mov	r2, r5
 801df1a:	f003 f818 	bl	8020f4e <strncmp>
 801df1e:	b398      	cbz	r0, 801df88 <_strtod_l+0x1d8>
 801df20:	2000      	movs	r0, #0
 801df22:	4633      	mov	r3, r6
 801df24:	463d      	mov	r5, r7
 801df26:	9007      	str	r0, [sp, #28]
 801df28:	4602      	mov	r2, r0
 801df2a:	2b65      	cmp	r3, #101	; 0x65
 801df2c:	d001      	beq.n	801df32 <_strtod_l+0x182>
 801df2e:	2b45      	cmp	r3, #69	; 0x45
 801df30:	d118      	bne.n	801df64 <_strtod_l+0x1b4>
 801df32:	b91d      	cbnz	r5, 801df3c <_strtod_l+0x18c>
 801df34:	9b04      	ldr	r3, [sp, #16]
 801df36:	4303      	orrs	r3, r0
 801df38:	d098      	beq.n	801de6c <_strtod_l+0xbc>
 801df3a:	2500      	movs	r5, #0
 801df3c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801df40:	f108 0301 	add.w	r3, r8, #1
 801df44:	931d      	str	r3, [sp, #116]	; 0x74
 801df46:	f898 3001 	ldrb.w	r3, [r8, #1]
 801df4a:	2b2b      	cmp	r3, #43	; 0x2b
 801df4c:	d075      	beq.n	801e03a <_strtod_l+0x28a>
 801df4e:	2b2d      	cmp	r3, #45	; 0x2d
 801df50:	d07b      	beq.n	801e04a <_strtod_l+0x29a>
 801df52:	f04f 0c00 	mov.w	ip, #0
 801df56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801df5a:	2909      	cmp	r1, #9
 801df5c:	f240 8082 	bls.w	801e064 <_strtod_l+0x2b4>
 801df60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801df64:	2600      	movs	r6, #0
 801df66:	e09d      	b.n	801e0a4 <_strtod_l+0x2f4>
 801df68:	2300      	movs	r3, #0
 801df6a:	e7c4      	b.n	801def6 <_strtod_l+0x146>
 801df6c:	2f08      	cmp	r7, #8
 801df6e:	bfd8      	it	le
 801df70:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801df72:	f100 0001 	add.w	r0, r0, #1
 801df76:	bfda      	itte	le
 801df78:	fb02 3301 	mlale	r3, r2, r1, r3
 801df7c:	9309      	strle	r3, [sp, #36]	; 0x24
 801df7e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801df82:	3701      	adds	r7, #1
 801df84:	901d      	str	r0, [sp, #116]	; 0x74
 801df86:	e7bf      	b.n	801df08 <_strtod_l+0x158>
 801df88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df8a:	195a      	adds	r2, r3, r5
 801df8c:	921d      	str	r2, [sp, #116]	; 0x74
 801df8e:	5d5b      	ldrb	r3, [r3, r5]
 801df90:	2f00      	cmp	r7, #0
 801df92:	d037      	beq.n	801e004 <_strtod_l+0x254>
 801df94:	9007      	str	r0, [sp, #28]
 801df96:	463d      	mov	r5, r7
 801df98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801df9c:	2a09      	cmp	r2, #9
 801df9e:	d912      	bls.n	801dfc6 <_strtod_l+0x216>
 801dfa0:	2201      	movs	r2, #1
 801dfa2:	e7c2      	b.n	801df2a <_strtod_l+0x17a>
 801dfa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dfa6:	1c5a      	adds	r2, r3, #1
 801dfa8:	921d      	str	r2, [sp, #116]	; 0x74
 801dfaa:	785b      	ldrb	r3, [r3, #1]
 801dfac:	3001      	adds	r0, #1
 801dfae:	2b30      	cmp	r3, #48	; 0x30
 801dfb0:	d0f8      	beq.n	801dfa4 <_strtod_l+0x1f4>
 801dfb2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801dfb6:	2a08      	cmp	r2, #8
 801dfb8:	f200 84db 	bhi.w	801e972 <_strtod_l+0xbc2>
 801dfbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801dfbe:	9007      	str	r0, [sp, #28]
 801dfc0:	2000      	movs	r0, #0
 801dfc2:	920a      	str	r2, [sp, #40]	; 0x28
 801dfc4:	4605      	mov	r5, r0
 801dfc6:	3b30      	subs	r3, #48	; 0x30
 801dfc8:	f100 0201 	add.w	r2, r0, #1
 801dfcc:	d014      	beq.n	801dff8 <_strtod_l+0x248>
 801dfce:	9907      	ldr	r1, [sp, #28]
 801dfd0:	4411      	add	r1, r2
 801dfd2:	9107      	str	r1, [sp, #28]
 801dfd4:	462a      	mov	r2, r5
 801dfd6:	eb00 0e05 	add.w	lr, r0, r5
 801dfda:	210a      	movs	r1, #10
 801dfdc:	4572      	cmp	r2, lr
 801dfde:	d113      	bne.n	801e008 <_strtod_l+0x258>
 801dfe0:	182a      	adds	r2, r5, r0
 801dfe2:	2a08      	cmp	r2, #8
 801dfe4:	f105 0501 	add.w	r5, r5, #1
 801dfe8:	4405      	add	r5, r0
 801dfea:	dc1c      	bgt.n	801e026 <_strtod_l+0x276>
 801dfec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dfee:	220a      	movs	r2, #10
 801dff0:	fb02 3301 	mla	r3, r2, r1, r3
 801dff4:	9309      	str	r3, [sp, #36]	; 0x24
 801dff6:	2200      	movs	r2, #0
 801dff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dffa:	1c59      	adds	r1, r3, #1
 801dffc:	911d      	str	r1, [sp, #116]	; 0x74
 801dffe:	785b      	ldrb	r3, [r3, #1]
 801e000:	4610      	mov	r0, r2
 801e002:	e7c9      	b.n	801df98 <_strtod_l+0x1e8>
 801e004:	4638      	mov	r0, r7
 801e006:	e7d2      	b.n	801dfae <_strtod_l+0x1fe>
 801e008:	2a08      	cmp	r2, #8
 801e00a:	dc04      	bgt.n	801e016 <_strtod_l+0x266>
 801e00c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e00e:	434e      	muls	r6, r1
 801e010:	9609      	str	r6, [sp, #36]	; 0x24
 801e012:	3201      	adds	r2, #1
 801e014:	e7e2      	b.n	801dfdc <_strtod_l+0x22c>
 801e016:	f102 0c01 	add.w	ip, r2, #1
 801e01a:	f1bc 0f10 	cmp.w	ip, #16
 801e01e:	bfd8      	it	le
 801e020:	fb01 f909 	mulle.w	r9, r1, r9
 801e024:	e7f5      	b.n	801e012 <_strtod_l+0x262>
 801e026:	2d10      	cmp	r5, #16
 801e028:	bfdc      	itt	le
 801e02a:	220a      	movle	r2, #10
 801e02c:	fb02 3909 	mlale	r9, r2, r9, r3
 801e030:	e7e1      	b.n	801dff6 <_strtod_l+0x246>
 801e032:	2300      	movs	r3, #0
 801e034:	9307      	str	r3, [sp, #28]
 801e036:	2201      	movs	r2, #1
 801e038:	e77c      	b.n	801df34 <_strtod_l+0x184>
 801e03a:	f04f 0c00 	mov.w	ip, #0
 801e03e:	f108 0302 	add.w	r3, r8, #2
 801e042:	931d      	str	r3, [sp, #116]	; 0x74
 801e044:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e048:	e785      	b.n	801df56 <_strtod_l+0x1a6>
 801e04a:	f04f 0c01 	mov.w	ip, #1
 801e04e:	e7f6      	b.n	801e03e <_strtod_l+0x28e>
 801e050:	08029974 	.word	0x08029974
 801e054:	080296bc 	.word	0x080296bc
 801e058:	7ff00000 	.word	0x7ff00000
 801e05c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e05e:	1c59      	adds	r1, r3, #1
 801e060:	911d      	str	r1, [sp, #116]	; 0x74
 801e062:	785b      	ldrb	r3, [r3, #1]
 801e064:	2b30      	cmp	r3, #48	; 0x30
 801e066:	d0f9      	beq.n	801e05c <_strtod_l+0x2ac>
 801e068:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801e06c:	2908      	cmp	r1, #8
 801e06e:	f63f af79 	bhi.w	801df64 <_strtod_l+0x1b4>
 801e072:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801e076:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e078:	9308      	str	r3, [sp, #32]
 801e07a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e07c:	1c59      	adds	r1, r3, #1
 801e07e:	911d      	str	r1, [sp, #116]	; 0x74
 801e080:	785b      	ldrb	r3, [r3, #1]
 801e082:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801e086:	2e09      	cmp	r6, #9
 801e088:	d937      	bls.n	801e0fa <_strtod_l+0x34a>
 801e08a:	9e08      	ldr	r6, [sp, #32]
 801e08c:	1b89      	subs	r1, r1, r6
 801e08e:	2908      	cmp	r1, #8
 801e090:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801e094:	dc02      	bgt.n	801e09c <_strtod_l+0x2ec>
 801e096:	4576      	cmp	r6, lr
 801e098:	bfa8      	it	ge
 801e09a:	4676      	movge	r6, lr
 801e09c:	f1bc 0f00 	cmp.w	ip, #0
 801e0a0:	d000      	beq.n	801e0a4 <_strtod_l+0x2f4>
 801e0a2:	4276      	negs	r6, r6
 801e0a4:	2d00      	cmp	r5, #0
 801e0a6:	d14f      	bne.n	801e148 <_strtod_l+0x398>
 801e0a8:	9904      	ldr	r1, [sp, #16]
 801e0aa:	4301      	orrs	r1, r0
 801e0ac:	f47f aec2 	bne.w	801de34 <_strtod_l+0x84>
 801e0b0:	2a00      	cmp	r2, #0
 801e0b2:	f47f aedb 	bne.w	801de6c <_strtod_l+0xbc>
 801e0b6:	2b69      	cmp	r3, #105	; 0x69
 801e0b8:	d027      	beq.n	801e10a <_strtod_l+0x35a>
 801e0ba:	dc24      	bgt.n	801e106 <_strtod_l+0x356>
 801e0bc:	2b49      	cmp	r3, #73	; 0x49
 801e0be:	d024      	beq.n	801e10a <_strtod_l+0x35a>
 801e0c0:	2b4e      	cmp	r3, #78	; 0x4e
 801e0c2:	f47f aed3 	bne.w	801de6c <_strtod_l+0xbc>
 801e0c6:	499e      	ldr	r1, [pc, #632]	; (801e340 <_strtod_l+0x590>)
 801e0c8:	a81d      	add	r0, sp, #116	; 0x74
 801e0ca:	f001 ff35 	bl	801ff38 <__match>
 801e0ce:	2800      	cmp	r0, #0
 801e0d0:	f43f aecc 	beq.w	801de6c <_strtod_l+0xbc>
 801e0d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0d6:	781b      	ldrb	r3, [r3, #0]
 801e0d8:	2b28      	cmp	r3, #40	; 0x28
 801e0da:	d12d      	bne.n	801e138 <_strtod_l+0x388>
 801e0dc:	4999      	ldr	r1, [pc, #612]	; (801e344 <_strtod_l+0x594>)
 801e0de:	aa20      	add	r2, sp, #128	; 0x80
 801e0e0:	a81d      	add	r0, sp, #116	; 0x74
 801e0e2:	f001 ff3d 	bl	801ff60 <__hexnan>
 801e0e6:	2805      	cmp	r0, #5
 801e0e8:	d126      	bne.n	801e138 <_strtod_l+0x388>
 801e0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e0ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801e0f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801e0f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801e0f8:	e69c      	b.n	801de34 <_strtod_l+0x84>
 801e0fa:	210a      	movs	r1, #10
 801e0fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801e100:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801e104:	e7b9      	b.n	801e07a <_strtod_l+0x2ca>
 801e106:	2b6e      	cmp	r3, #110	; 0x6e
 801e108:	e7db      	b.n	801e0c2 <_strtod_l+0x312>
 801e10a:	498f      	ldr	r1, [pc, #572]	; (801e348 <_strtod_l+0x598>)
 801e10c:	a81d      	add	r0, sp, #116	; 0x74
 801e10e:	f001 ff13 	bl	801ff38 <__match>
 801e112:	2800      	cmp	r0, #0
 801e114:	f43f aeaa 	beq.w	801de6c <_strtod_l+0xbc>
 801e118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e11a:	498c      	ldr	r1, [pc, #560]	; (801e34c <_strtod_l+0x59c>)
 801e11c:	3b01      	subs	r3, #1
 801e11e:	a81d      	add	r0, sp, #116	; 0x74
 801e120:	931d      	str	r3, [sp, #116]	; 0x74
 801e122:	f001 ff09 	bl	801ff38 <__match>
 801e126:	b910      	cbnz	r0, 801e12e <_strtod_l+0x37e>
 801e128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e12a:	3301      	adds	r3, #1
 801e12c:	931d      	str	r3, [sp, #116]	; 0x74
 801e12e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801e35c <_strtod_l+0x5ac>
 801e132:	f04f 0a00 	mov.w	sl, #0
 801e136:	e67d      	b.n	801de34 <_strtod_l+0x84>
 801e138:	4885      	ldr	r0, [pc, #532]	; (801e350 <_strtod_l+0x5a0>)
 801e13a:	f002 fead 	bl	8020e98 <nan>
 801e13e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801e142:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e146:	e675      	b.n	801de34 <_strtod_l+0x84>
 801e148:	9b07      	ldr	r3, [sp, #28]
 801e14a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e14c:	1af3      	subs	r3, r6, r3
 801e14e:	2f00      	cmp	r7, #0
 801e150:	bf08      	it	eq
 801e152:	462f      	moveq	r7, r5
 801e154:	2d10      	cmp	r5, #16
 801e156:	9308      	str	r3, [sp, #32]
 801e158:	46a8      	mov	r8, r5
 801e15a:	bfa8      	it	ge
 801e15c:	f04f 0810 	movge.w	r8, #16
 801e160:	f7e2 f9e0 	bl	8000524 <__aeabi_ui2d>
 801e164:	2d09      	cmp	r5, #9
 801e166:	4682      	mov	sl, r0
 801e168:	468b      	mov	fp, r1
 801e16a:	dd13      	ble.n	801e194 <_strtod_l+0x3e4>
 801e16c:	4b79      	ldr	r3, [pc, #484]	; (801e354 <_strtod_l+0x5a4>)
 801e16e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e172:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e176:	f7e2 fa4f 	bl	8000618 <__aeabi_dmul>
 801e17a:	4682      	mov	sl, r0
 801e17c:	4648      	mov	r0, r9
 801e17e:	468b      	mov	fp, r1
 801e180:	f7e2 f9d0 	bl	8000524 <__aeabi_ui2d>
 801e184:	4602      	mov	r2, r0
 801e186:	460b      	mov	r3, r1
 801e188:	4650      	mov	r0, sl
 801e18a:	4659      	mov	r1, fp
 801e18c:	f7e2 f88e 	bl	80002ac <__adddf3>
 801e190:	4682      	mov	sl, r0
 801e192:	468b      	mov	fp, r1
 801e194:	2d0f      	cmp	r5, #15
 801e196:	dc38      	bgt.n	801e20a <_strtod_l+0x45a>
 801e198:	9b08      	ldr	r3, [sp, #32]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	f43f ae4a 	beq.w	801de34 <_strtod_l+0x84>
 801e1a0:	dd24      	ble.n	801e1ec <_strtod_l+0x43c>
 801e1a2:	2b16      	cmp	r3, #22
 801e1a4:	dc0b      	bgt.n	801e1be <_strtod_l+0x40e>
 801e1a6:	4d6b      	ldr	r5, [pc, #428]	; (801e354 <_strtod_l+0x5a4>)
 801e1a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801e1ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e1b0:	4652      	mov	r2, sl
 801e1b2:	465b      	mov	r3, fp
 801e1b4:	f7e2 fa30 	bl	8000618 <__aeabi_dmul>
 801e1b8:	4682      	mov	sl, r0
 801e1ba:	468b      	mov	fp, r1
 801e1bc:	e63a      	b.n	801de34 <_strtod_l+0x84>
 801e1be:	9a08      	ldr	r2, [sp, #32]
 801e1c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801e1c4:	4293      	cmp	r3, r2
 801e1c6:	db20      	blt.n	801e20a <_strtod_l+0x45a>
 801e1c8:	4c62      	ldr	r4, [pc, #392]	; (801e354 <_strtod_l+0x5a4>)
 801e1ca:	f1c5 050f 	rsb	r5, r5, #15
 801e1ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e1d2:	4652      	mov	r2, sl
 801e1d4:	465b      	mov	r3, fp
 801e1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e1da:	f7e2 fa1d 	bl	8000618 <__aeabi_dmul>
 801e1de:	9b08      	ldr	r3, [sp, #32]
 801e1e0:	1b5d      	subs	r5, r3, r5
 801e1e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e1e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e1ea:	e7e3      	b.n	801e1b4 <_strtod_l+0x404>
 801e1ec:	9b08      	ldr	r3, [sp, #32]
 801e1ee:	3316      	adds	r3, #22
 801e1f0:	db0b      	blt.n	801e20a <_strtod_l+0x45a>
 801e1f2:	9b07      	ldr	r3, [sp, #28]
 801e1f4:	4a57      	ldr	r2, [pc, #348]	; (801e354 <_strtod_l+0x5a4>)
 801e1f6:	1b9e      	subs	r6, r3, r6
 801e1f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801e1fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e200:	4650      	mov	r0, sl
 801e202:	4659      	mov	r1, fp
 801e204:	f7e2 fb32 	bl	800086c <__aeabi_ddiv>
 801e208:	e7d6      	b.n	801e1b8 <_strtod_l+0x408>
 801e20a:	9b08      	ldr	r3, [sp, #32]
 801e20c:	eba5 0808 	sub.w	r8, r5, r8
 801e210:	4498      	add	r8, r3
 801e212:	f1b8 0f00 	cmp.w	r8, #0
 801e216:	dd71      	ble.n	801e2fc <_strtod_l+0x54c>
 801e218:	f018 030f 	ands.w	r3, r8, #15
 801e21c:	d00a      	beq.n	801e234 <_strtod_l+0x484>
 801e21e:	494d      	ldr	r1, [pc, #308]	; (801e354 <_strtod_l+0x5a4>)
 801e220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e224:	4652      	mov	r2, sl
 801e226:	465b      	mov	r3, fp
 801e228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e22c:	f7e2 f9f4 	bl	8000618 <__aeabi_dmul>
 801e230:	4682      	mov	sl, r0
 801e232:	468b      	mov	fp, r1
 801e234:	f038 080f 	bics.w	r8, r8, #15
 801e238:	d04d      	beq.n	801e2d6 <_strtod_l+0x526>
 801e23a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801e23e:	dd22      	ble.n	801e286 <_strtod_l+0x4d6>
 801e240:	2500      	movs	r5, #0
 801e242:	462e      	mov	r6, r5
 801e244:	9509      	str	r5, [sp, #36]	; 0x24
 801e246:	9507      	str	r5, [sp, #28]
 801e248:	2322      	movs	r3, #34	; 0x22
 801e24a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801e35c <_strtod_l+0x5ac>
 801e24e:	6023      	str	r3, [r4, #0]
 801e250:	f04f 0a00 	mov.w	sl, #0
 801e254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e256:	2b00      	cmp	r3, #0
 801e258:	f43f adec 	beq.w	801de34 <_strtod_l+0x84>
 801e25c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e25e:	4620      	mov	r0, r4
 801e260:	f001 ff8a 	bl	8020178 <_Bfree>
 801e264:	9907      	ldr	r1, [sp, #28]
 801e266:	4620      	mov	r0, r4
 801e268:	f001 ff86 	bl	8020178 <_Bfree>
 801e26c:	4631      	mov	r1, r6
 801e26e:	4620      	mov	r0, r4
 801e270:	f001 ff82 	bl	8020178 <_Bfree>
 801e274:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e276:	4620      	mov	r0, r4
 801e278:	f001 ff7e 	bl	8020178 <_Bfree>
 801e27c:	4629      	mov	r1, r5
 801e27e:	4620      	mov	r0, r4
 801e280:	f001 ff7a 	bl	8020178 <_Bfree>
 801e284:	e5d6      	b.n	801de34 <_strtod_l+0x84>
 801e286:	2300      	movs	r3, #0
 801e288:	ea4f 1828 	mov.w	r8, r8, asr #4
 801e28c:	4650      	mov	r0, sl
 801e28e:	4659      	mov	r1, fp
 801e290:	4699      	mov	r9, r3
 801e292:	f1b8 0f01 	cmp.w	r8, #1
 801e296:	dc21      	bgt.n	801e2dc <_strtod_l+0x52c>
 801e298:	b10b      	cbz	r3, 801e29e <_strtod_l+0x4ee>
 801e29a:	4682      	mov	sl, r0
 801e29c:	468b      	mov	fp, r1
 801e29e:	4b2e      	ldr	r3, [pc, #184]	; (801e358 <_strtod_l+0x5a8>)
 801e2a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801e2a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801e2a8:	4652      	mov	r2, sl
 801e2aa:	465b      	mov	r3, fp
 801e2ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 801e2b0:	f7e2 f9b2 	bl	8000618 <__aeabi_dmul>
 801e2b4:	4b29      	ldr	r3, [pc, #164]	; (801e35c <_strtod_l+0x5ac>)
 801e2b6:	460a      	mov	r2, r1
 801e2b8:	400b      	ands	r3, r1
 801e2ba:	4929      	ldr	r1, [pc, #164]	; (801e360 <_strtod_l+0x5b0>)
 801e2bc:	428b      	cmp	r3, r1
 801e2be:	4682      	mov	sl, r0
 801e2c0:	d8be      	bhi.n	801e240 <_strtod_l+0x490>
 801e2c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e2c6:	428b      	cmp	r3, r1
 801e2c8:	bf86      	itte	hi
 801e2ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801e364 <_strtod_l+0x5b4>
 801e2ce:	f04f 3aff 	movhi.w	sl, #4294967295
 801e2d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801e2d6:	2300      	movs	r3, #0
 801e2d8:	9304      	str	r3, [sp, #16]
 801e2da:	e081      	b.n	801e3e0 <_strtod_l+0x630>
 801e2dc:	f018 0f01 	tst.w	r8, #1
 801e2e0:	d007      	beq.n	801e2f2 <_strtod_l+0x542>
 801e2e2:	4b1d      	ldr	r3, [pc, #116]	; (801e358 <_strtod_l+0x5a8>)
 801e2e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2ec:	f7e2 f994 	bl	8000618 <__aeabi_dmul>
 801e2f0:	2301      	movs	r3, #1
 801e2f2:	f109 0901 	add.w	r9, r9, #1
 801e2f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e2fa:	e7ca      	b.n	801e292 <_strtod_l+0x4e2>
 801e2fc:	d0eb      	beq.n	801e2d6 <_strtod_l+0x526>
 801e2fe:	f1c8 0800 	rsb	r8, r8, #0
 801e302:	f018 020f 	ands.w	r2, r8, #15
 801e306:	d00a      	beq.n	801e31e <_strtod_l+0x56e>
 801e308:	4b12      	ldr	r3, [pc, #72]	; (801e354 <_strtod_l+0x5a4>)
 801e30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e30e:	4650      	mov	r0, sl
 801e310:	4659      	mov	r1, fp
 801e312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e316:	f7e2 faa9 	bl	800086c <__aeabi_ddiv>
 801e31a:	4682      	mov	sl, r0
 801e31c:	468b      	mov	fp, r1
 801e31e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801e322:	d0d8      	beq.n	801e2d6 <_strtod_l+0x526>
 801e324:	f1b8 0f1f 	cmp.w	r8, #31
 801e328:	dd1e      	ble.n	801e368 <_strtod_l+0x5b8>
 801e32a:	2500      	movs	r5, #0
 801e32c:	462e      	mov	r6, r5
 801e32e:	9509      	str	r5, [sp, #36]	; 0x24
 801e330:	9507      	str	r5, [sp, #28]
 801e332:	2322      	movs	r3, #34	; 0x22
 801e334:	f04f 0a00 	mov.w	sl, #0
 801e338:	f04f 0b00 	mov.w	fp, #0
 801e33c:	6023      	str	r3, [r4, #0]
 801e33e:	e789      	b.n	801e254 <_strtod_l+0x4a4>
 801e340:	0802968d 	.word	0x0802968d
 801e344:	080296d0 	.word	0x080296d0
 801e348:	08029685 	.word	0x08029685
 801e34c:	08029814 	.word	0x08029814
 801e350:	08029b30 	.word	0x08029b30
 801e354:	08029a10 	.word	0x08029a10
 801e358:	080299e8 	.word	0x080299e8
 801e35c:	7ff00000 	.word	0x7ff00000
 801e360:	7ca00000 	.word	0x7ca00000
 801e364:	7fefffff 	.word	0x7fefffff
 801e368:	f018 0310 	ands.w	r3, r8, #16
 801e36c:	bf18      	it	ne
 801e36e:	236a      	movne	r3, #106	; 0x6a
 801e370:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e728 <_strtod_l+0x978>
 801e374:	9304      	str	r3, [sp, #16]
 801e376:	4650      	mov	r0, sl
 801e378:	4659      	mov	r1, fp
 801e37a:	2300      	movs	r3, #0
 801e37c:	f018 0f01 	tst.w	r8, #1
 801e380:	d004      	beq.n	801e38c <_strtod_l+0x5dc>
 801e382:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e386:	f7e2 f947 	bl	8000618 <__aeabi_dmul>
 801e38a:	2301      	movs	r3, #1
 801e38c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e390:	f109 0908 	add.w	r9, r9, #8
 801e394:	d1f2      	bne.n	801e37c <_strtod_l+0x5cc>
 801e396:	b10b      	cbz	r3, 801e39c <_strtod_l+0x5ec>
 801e398:	4682      	mov	sl, r0
 801e39a:	468b      	mov	fp, r1
 801e39c:	9b04      	ldr	r3, [sp, #16]
 801e39e:	b1bb      	cbz	r3, 801e3d0 <_strtod_l+0x620>
 801e3a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e3a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	4659      	mov	r1, fp
 801e3ac:	dd10      	ble.n	801e3d0 <_strtod_l+0x620>
 801e3ae:	2b1f      	cmp	r3, #31
 801e3b0:	f340 8128 	ble.w	801e604 <_strtod_l+0x854>
 801e3b4:	2b34      	cmp	r3, #52	; 0x34
 801e3b6:	bfde      	ittt	le
 801e3b8:	3b20      	suble	r3, #32
 801e3ba:	f04f 32ff 	movle.w	r2, #4294967295
 801e3be:	fa02 f303 	lslle.w	r3, r2, r3
 801e3c2:	f04f 0a00 	mov.w	sl, #0
 801e3c6:	bfcc      	ite	gt
 801e3c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e3cc:	ea03 0b01 	andle.w	fp, r3, r1
 801e3d0:	2200      	movs	r2, #0
 801e3d2:	2300      	movs	r3, #0
 801e3d4:	4650      	mov	r0, sl
 801e3d6:	4659      	mov	r1, fp
 801e3d8:	f7e2 fb86 	bl	8000ae8 <__aeabi_dcmpeq>
 801e3dc:	2800      	cmp	r0, #0
 801e3de:	d1a4      	bne.n	801e32a <_strtod_l+0x57a>
 801e3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3e2:	9300      	str	r3, [sp, #0]
 801e3e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e3e6:	462b      	mov	r3, r5
 801e3e8:	463a      	mov	r2, r7
 801e3ea:	4620      	mov	r0, r4
 801e3ec:	f001 ff30 	bl	8020250 <__s2b>
 801e3f0:	9009      	str	r0, [sp, #36]	; 0x24
 801e3f2:	2800      	cmp	r0, #0
 801e3f4:	f43f af24 	beq.w	801e240 <_strtod_l+0x490>
 801e3f8:	9b07      	ldr	r3, [sp, #28]
 801e3fa:	1b9e      	subs	r6, r3, r6
 801e3fc:	9b08      	ldr	r3, [sp, #32]
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	bfb4      	ite	lt
 801e402:	4633      	movlt	r3, r6
 801e404:	2300      	movge	r3, #0
 801e406:	9310      	str	r3, [sp, #64]	; 0x40
 801e408:	9b08      	ldr	r3, [sp, #32]
 801e40a:	2500      	movs	r5, #0
 801e40c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e410:	9318      	str	r3, [sp, #96]	; 0x60
 801e412:	462e      	mov	r6, r5
 801e414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e416:	4620      	mov	r0, r4
 801e418:	6859      	ldr	r1, [r3, #4]
 801e41a:	f001 fe6d 	bl	80200f8 <_Balloc>
 801e41e:	9007      	str	r0, [sp, #28]
 801e420:	2800      	cmp	r0, #0
 801e422:	f43f af11 	beq.w	801e248 <_strtod_l+0x498>
 801e426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e428:	691a      	ldr	r2, [r3, #16]
 801e42a:	3202      	adds	r2, #2
 801e42c:	f103 010c 	add.w	r1, r3, #12
 801e430:	0092      	lsls	r2, r2, #2
 801e432:	300c      	adds	r0, #12
 801e434:	f001 fe52 	bl	80200dc <memcpy>
 801e438:	ec4b ab10 	vmov	d0, sl, fp
 801e43c:	aa20      	add	r2, sp, #128	; 0x80
 801e43e:	a91f      	add	r1, sp, #124	; 0x7c
 801e440:	4620      	mov	r0, r4
 801e442:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e446:	f002 fa3f 	bl	80208c8 <__d2b>
 801e44a:	901e      	str	r0, [sp, #120]	; 0x78
 801e44c:	2800      	cmp	r0, #0
 801e44e:	f43f aefb 	beq.w	801e248 <_strtod_l+0x498>
 801e452:	2101      	movs	r1, #1
 801e454:	4620      	mov	r0, r4
 801e456:	f001 ff95 	bl	8020384 <__i2b>
 801e45a:	4606      	mov	r6, r0
 801e45c:	2800      	cmp	r0, #0
 801e45e:	f43f aef3 	beq.w	801e248 <_strtod_l+0x498>
 801e462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e464:	9904      	ldr	r1, [sp, #16]
 801e466:	2b00      	cmp	r3, #0
 801e468:	bfab      	itete	ge
 801e46a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e46c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e46e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e470:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e474:	bfac      	ite	ge
 801e476:	eb03 0902 	addge.w	r9, r3, r2
 801e47a:	1ad7      	sublt	r7, r2, r3
 801e47c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e47e:	eba3 0801 	sub.w	r8, r3, r1
 801e482:	4490      	add	r8, r2
 801e484:	4ba3      	ldr	r3, [pc, #652]	; (801e714 <_strtod_l+0x964>)
 801e486:	f108 38ff 	add.w	r8, r8, #4294967295
 801e48a:	4598      	cmp	r8, r3
 801e48c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e490:	f280 80cc 	bge.w	801e62c <_strtod_l+0x87c>
 801e494:	eba3 0308 	sub.w	r3, r3, r8
 801e498:	2b1f      	cmp	r3, #31
 801e49a:	eba2 0203 	sub.w	r2, r2, r3
 801e49e:	f04f 0101 	mov.w	r1, #1
 801e4a2:	f300 80b6 	bgt.w	801e612 <_strtod_l+0x862>
 801e4a6:	fa01 f303 	lsl.w	r3, r1, r3
 801e4aa:	9311      	str	r3, [sp, #68]	; 0x44
 801e4ac:	2300      	movs	r3, #0
 801e4ae:	930c      	str	r3, [sp, #48]	; 0x30
 801e4b0:	eb09 0802 	add.w	r8, r9, r2
 801e4b4:	9b04      	ldr	r3, [sp, #16]
 801e4b6:	45c1      	cmp	r9, r8
 801e4b8:	4417      	add	r7, r2
 801e4ba:	441f      	add	r7, r3
 801e4bc:	464b      	mov	r3, r9
 801e4be:	bfa8      	it	ge
 801e4c0:	4643      	movge	r3, r8
 801e4c2:	42bb      	cmp	r3, r7
 801e4c4:	bfa8      	it	ge
 801e4c6:	463b      	movge	r3, r7
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	bfc2      	ittt	gt
 801e4cc:	eba8 0803 	subgt.w	r8, r8, r3
 801e4d0:	1aff      	subgt	r7, r7, r3
 801e4d2:	eba9 0903 	subgt.w	r9, r9, r3
 801e4d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	dd17      	ble.n	801e50c <_strtod_l+0x75c>
 801e4dc:	4631      	mov	r1, r6
 801e4de:	461a      	mov	r2, r3
 801e4e0:	4620      	mov	r0, r4
 801e4e2:	f002 f80b 	bl	80204fc <__pow5mult>
 801e4e6:	4606      	mov	r6, r0
 801e4e8:	2800      	cmp	r0, #0
 801e4ea:	f43f aead 	beq.w	801e248 <_strtod_l+0x498>
 801e4ee:	4601      	mov	r1, r0
 801e4f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	f001 ff5c 	bl	80203b0 <__multiply>
 801e4f8:	900f      	str	r0, [sp, #60]	; 0x3c
 801e4fa:	2800      	cmp	r0, #0
 801e4fc:	f43f aea4 	beq.w	801e248 <_strtod_l+0x498>
 801e500:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e502:	4620      	mov	r0, r4
 801e504:	f001 fe38 	bl	8020178 <_Bfree>
 801e508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e50a:	931e      	str	r3, [sp, #120]	; 0x78
 801e50c:	f1b8 0f00 	cmp.w	r8, #0
 801e510:	f300 8091 	bgt.w	801e636 <_strtod_l+0x886>
 801e514:	9b08      	ldr	r3, [sp, #32]
 801e516:	2b00      	cmp	r3, #0
 801e518:	dd08      	ble.n	801e52c <_strtod_l+0x77c>
 801e51a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e51c:	9907      	ldr	r1, [sp, #28]
 801e51e:	4620      	mov	r0, r4
 801e520:	f001 ffec 	bl	80204fc <__pow5mult>
 801e524:	9007      	str	r0, [sp, #28]
 801e526:	2800      	cmp	r0, #0
 801e528:	f43f ae8e 	beq.w	801e248 <_strtod_l+0x498>
 801e52c:	2f00      	cmp	r7, #0
 801e52e:	dd08      	ble.n	801e542 <_strtod_l+0x792>
 801e530:	9907      	ldr	r1, [sp, #28]
 801e532:	463a      	mov	r2, r7
 801e534:	4620      	mov	r0, r4
 801e536:	f002 f83b 	bl	80205b0 <__lshift>
 801e53a:	9007      	str	r0, [sp, #28]
 801e53c:	2800      	cmp	r0, #0
 801e53e:	f43f ae83 	beq.w	801e248 <_strtod_l+0x498>
 801e542:	f1b9 0f00 	cmp.w	r9, #0
 801e546:	dd08      	ble.n	801e55a <_strtod_l+0x7aa>
 801e548:	4631      	mov	r1, r6
 801e54a:	464a      	mov	r2, r9
 801e54c:	4620      	mov	r0, r4
 801e54e:	f002 f82f 	bl	80205b0 <__lshift>
 801e552:	4606      	mov	r6, r0
 801e554:	2800      	cmp	r0, #0
 801e556:	f43f ae77 	beq.w	801e248 <_strtod_l+0x498>
 801e55a:	9a07      	ldr	r2, [sp, #28]
 801e55c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e55e:	4620      	mov	r0, r4
 801e560:	f002 f8ae 	bl	80206c0 <__mdiff>
 801e564:	4605      	mov	r5, r0
 801e566:	2800      	cmp	r0, #0
 801e568:	f43f ae6e 	beq.w	801e248 <_strtod_l+0x498>
 801e56c:	68c3      	ldr	r3, [r0, #12]
 801e56e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e570:	2300      	movs	r3, #0
 801e572:	60c3      	str	r3, [r0, #12]
 801e574:	4631      	mov	r1, r6
 801e576:	f002 f887 	bl	8020688 <__mcmp>
 801e57a:	2800      	cmp	r0, #0
 801e57c:	da65      	bge.n	801e64a <_strtod_l+0x89a>
 801e57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e580:	ea53 030a 	orrs.w	r3, r3, sl
 801e584:	f040 8087 	bne.w	801e696 <_strtod_l+0x8e6>
 801e588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	f040 8082 	bne.w	801e696 <_strtod_l+0x8e6>
 801e592:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e596:	0d1b      	lsrs	r3, r3, #20
 801e598:	051b      	lsls	r3, r3, #20
 801e59a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e59e:	d97a      	bls.n	801e696 <_strtod_l+0x8e6>
 801e5a0:	696b      	ldr	r3, [r5, #20]
 801e5a2:	b913      	cbnz	r3, 801e5aa <_strtod_l+0x7fa>
 801e5a4:	692b      	ldr	r3, [r5, #16]
 801e5a6:	2b01      	cmp	r3, #1
 801e5a8:	dd75      	ble.n	801e696 <_strtod_l+0x8e6>
 801e5aa:	4629      	mov	r1, r5
 801e5ac:	2201      	movs	r2, #1
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f001 fffe 	bl	80205b0 <__lshift>
 801e5b4:	4631      	mov	r1, r6
 801e5b6:	4605      	mov	r5, r0
 801e5b8:	f002 f866 	bl	8020688 <__mcmp>
 801e5bc:	2800      	cmp	r0, #0
 801e5be:	dd6a      	ble.n	801e696 <_strtod_l+0x8e6>
 801e5c0:	9904      	ldr	r1, [sp, #16]
 801e5c2:	4a55      	ldr	r2, [pc, #340]	; (801e718 <_strtod_l+0x968>)
 801e5c4:	465b      	mov	r3, fp
 801e5c6:	2900      	cmp	r1, #0
 801e5c8:	f000 8085 	beq.w	801e6d6 <_strtod_l+0x926>
 801e5cc:	ea02 010b 	and.w	r1, r2, fp
 801e5d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e5d4:	dc7f      	bgt.n	801e6d6 <_strtod_l+0x926>
 801e5d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e5da:	f77f aeaa 	ble.w	801e332 <_strtod_l+0x582>
 801e5de:	4a4f      	ldr	r2, [pc, #316]	; (801e71c <_strtod_l+0x96c>)
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e5e6:	4650      	mov	r0, sl
 801e5e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e5ec:	4659      	mov	r1, fp
 801e5ee:	f7e2 f813 	bl	8000618 <__aeabi_dmul>
 801e5f2:	460b      	mov	r3, r1
 801e5f4:	4303      	orrs	r3, r0
 801e5f6:	bf08      	it	eq
 801e5f8:	2322      	moveq	r3, #34	; 0x22
 801e5fa:	4682      	mov	sl, r0
 801e5fc:	468b      	mov	fp, r1
 801e5fe:	bf08      	it	eq
 801e600:	6023      	streq	r3, [r4, #0]
 801e602:	e62b      	b.n	801e25c <_strtod_l+0x4ac>
 801e604:	f04f 32ff 	mov.w	r2, #4294967295
 801e608:	fa02 f303 	lsl.w	r3, r2, r3
 801e60c:	ea03 0a0a 	and.w	sl, r3, sl
 801e610:	e6de      	b.n	801e3d0 <_strtod_l+0x620>
 801e612:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e616:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e61a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e61e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e622:	fa01 f308 	lsl.w	r3, r1, r8
 801e626:	930c      	str	r3, [sp, #48]	; 0x30
 801e628:	9111      	str	r1, [sp, #68]	; 0x44
 801e62a:	e741      	b.n	801e4b0 <_strtod_l+0x700>
 801e62c:	2300      	movs	r3, #0
 801e62e:	930c      	str	r3, [sp, #48]	; 0x30
 801e630:	2301      	movs	r3, #1
 801e632:	9311      	str	r3, [sp, #68]	; 0x44
 801e634:	e73c      	b.n	801e4b0 <_strtod_l+0x700>
 801e636:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e638:	4642      	mov	r2, r8
 801e63a:	4620      	mov	r0, r4
 801e63c:	f001 ffb8 	bl	80205b0 <__lshift>
 801e640:	901e      	str	r0, [sp, #120]	; 0x78
 801e642:	2800      	cmp	r0, #0
 801e644:	f47f af66 	bne.w	801e514 <_strtod_l+0x764>
 801e648:	e5fe      	b.n	801e248 <_strtod_l+0x498>
 801e64a:	465f      	mov	r7, fp
 801e64c:	d16e      	bne.n	801e72c <_strtod_l+0x97c>
 801e64e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e654:	b342      	cbz	r2, 801e6a8 <_strtod_l+0x8f8>
 801e656:	4a32      	ldr	r2, [pc, #200]	; (801e720 <_strtod_l+0x970>)
 801e658:	4293      	cmp	r3, r2
 801e65a:	d128      	bne.n	801e6ae <_strtod_l+0x8fe>
 801e65c:	9b04      	ldr	r3, [sp, #16]
 801e65e:	4650      	mov	r0, sl
 801e660:	b1eb      	cbz	r3, 801e69e <_strtod_l+0x8ee>
 801e662:	4a2d      	ldr	r2, [pc, #180]	; (801e718 <_strtod_l+0x968>)
 801e664:	403a      	ands	r2, r7
 801e666:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e66a:	f04f 31ff 	mov.w	r1, #4294967295
 801e66e:	d819      	bhi.n	801e6a4 <_strtod_l+0x8f4>
 801e670:	0d12      	lsrs	r2, r2, #20
 801e672:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e676:	fa01 f303 	lsl.w	r3, r1, r3
 801e67a:	4298      	cmp	r0, r3
 801e67c:	d117      	bne.n	801e6ae <_strtod_l+0x8fe>
 801e67e:	4b29      	ldr	r3, [pc, #164]	; (801e724 <_strtod_l+0x974>)
 801e680:	429f      	cmp	r7, r3
 801e682:	d102      	bne.n	801e68a <_strtod_l+0x8da>
 801e684:	3001      	adds	r0, #1
 801e686:	f43f addf 	beq.w	801e248 <_strtod_l+0x498>
 801e68a:	4b23      	ldr	r3, [pc, #140]	; (801e718 <_strtod_l+0x968>)
 801e68c:	403b      	ands	r3, r7
 801e68e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e692:	f04f 0a00 	mov.w	sl, #0
 801e696:	9b04      	ldr	r3, [sp, #16]
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d1a0      	bne.n	801e5de <_strtod_l+0x82e>
 801e69c:	e5de      	b.n	801e25c <_strtod_l+0x4ac>
 801e69e:	f04f 33ff 	mov.w	r3, #4294967295
 801e6a2:	e7ea      	b.n	801e67a <_strtod_l+0x8ca>
 801e6a4:	460b      	mov	r3, r1
 801e6a6:	e7e8      	b.n	801e67a <_strtod_l+0x8ca>
 801e6a8:	ea53 030a 	orrs.w	r3, r3, sl
 801e6ac:	d088      	beq.n	801e5c0 <_strtod_l+0x810>
 801e6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6b0:	b1db      	cbz	r3, 801e6ea <_strtod_l+0x93a>
 801e6b2:	423b      	tst	r3, r7
 801e6b4:	d0ef      	beq.n	801e696 <_strtod_l+0x8e6>
 801e6b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e6b8:	9a04      	ldr	r2, [sp, #16]
 801e6ba:	4650      	mov	r0, sl
 801e6bc:	4659      	mov	r1, fp
 801e6be:	b1c3      	cbz	r3, 801e6f2 <_strtod_l+0x942>
 801e6c0:	f7ff fb59 	bl	801dd76 <sulp>
 801e6c4:	4602      	mov	r2, r0
 801e6c6:	460b      	mov	r3, r1
 801e6c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e6cc:	f7e1 fdee 	bl	80002ac <__adddf3>
 801e6d0:	4682      	mov	sl, r0
 801e6d2:	468b      	mov	fp, r1
 801e6d4:	e7df      	b.n	801e696 <_strtod_l+0x8e6>
 801e6d6:	4013      	ands	r3, r2
 801e6d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e6dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e6e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e6e4:	f04f 3aff 	mov.w	sl, #4294967295
 801e6e8:	e7d5      	b.n	801e696 <_strtod_l+0x8e6>
 801e6ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6ec:	ea13 0f0a 	tst.w	r3, sl
 801e6f0:	e7e0      	b.n	801e6b4 <_strtod_l+0x904>
 801e6f2:	f7ff fb40 	bl	801dd76 <sulp>
 801e6f6:	4602      	mov	r2, r0
 801e6f8:	460b      	mov	r3, r1
 801e6fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e6fe:	f7e1 fdd3 	bl	80002a8 <__aeabi_dsub>
 801e702:	2200      	movs	r2, #0
 801e704:	2300      	movs	r3, #0
 801e706:	4682      	mov	sl, r0
 801e708:	468b      	mov	fp, r1
 801e70a:	f7e2 f9ed 	bl	8000ae8 <__aeabi_dcmpeq>
 801e70e:	2800      	cmp	r0, #0
 801e710:	d0c1      	beq.n	801e696 <_strtod_l+0x8e6>
 801e712:	e60e      	b.n	801e332 <_strtod_l+0x582>
 801e714:	fffffc02 	.word	0xfffffc02
 801e718:	7ff00000 	.word	0x7ff00000
 801e71c:	39500000 	.word	0x39500000
 801e720:	000fffff 	.word	0x000fffff
 801e724:	7fefffff 	.word	0x7fefffff
 801e728:	080296e8 	.word	0x080296e8
 801e72c:	4631      	mov	r1, r6
 801e72e:	4628      	mov	r0, r5
 801e730:	f002 f926 	bl	8020980 <__ratio>
 801e734:	ec59 8b10 	vmov	r8, r9, d0
 801e738:	ee10 0a10 	vmov	r0, s0
 801e73c:	2200      	movs	r2, #0
 801e73e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e742:	4649      	mov	r1, r9
 801e744:	f7e2 f9e4 	bl	8000b10 <__aeabi_dcmple>
 801e748:	2800      	cmp	r0, #0
 801e74a:	d07c      	beq.n	801e846 <_strtod_l+0xa96>
 801e74c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d04c      	beq.n	801e7ec <_strtod_l+0xa3c>
 801e752:	4b95      	ldr	r3, [pc, #596]	; (801e9a8 <_strtod_l+0xbf8>)
 801e754:	2200      	movs	r2, #0
 801e756:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e75a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801e9a8 <_strtod_l+0xbf8>
 801e75e:	f04f 0800 	mov.w	r8, #0
 801e762:	4b92      	ldr	r3, [pc, #584]	; (801e9ac <_strtod_l+0xbfc>)
 801e764:	403b      	ands	r3, r7
 801e766:	9311      	str	r3, [sp, #68]	; 0x44
 801e768:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e76a:	4b91      	ldr	r3, [pc, #580]	; (801e9b0 <_strtod_l+0xc00>)
 801e76c:	429a      	cmp	r2, r3
 801e76e:	f040 80b2 	bne.w	801e8d6 <_strtod_l+0xb26>
 801e772:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e77a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e77e:	ec4b ab10 	vmov	d0, sl, fp
 801e782:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e786:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e78a:	f002 f821 	bl	80207d0 <__ulp>
 801e78e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e792:	ec53 2b10 	vmov	r2, r3, d0
 801e796:	f7e1 ff3f 	bl	8000618 <__aeabi_dmul>
 801e79a:	4652      	mov	r2, sl
 801e79c:	465b      	mov	r3, fp
 801e79e:	f7e1 fd85 	bl	80002ac <__adddf3>
 801e7a2:	460b      	mov	r3, r1
 801e7a4:	4981      	ldr	r1, [pc, #516]	; (801e9ac <_strtod_l+0xbfc>)
 801e7a6:	4a83      	ldr	r2, [pc, #524]	; (801e9b4 <_strtod_l+0xc04>)
 801e7a8:	4019      	ands	r1, r3
 801e7aa:	4291      	cmp	r1, r2
 801e7ac:	4682      	mov	sl, r0
 801e7ae:	d95e      	bls.n	801e86e <_strtod_l+0xabe>
 801e7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e7b6:	4293      	cmp	r3, r2
 801e7b8:	d103      	bne.n	801e7c2 <_strtod_l+0xa12>
 801e7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7bc:	3301      	adds	r3, #1
 801e7be:	f43f ad43 	beq.w	801e248 <_strtod_l+0x498>
 801e7c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801e9c0 <_strtod_l+0xc10>
 801e7c6:	f04f 3aff 	mov.w	sl, #4294967295
 801e7ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e7cc:	4620      	mov	r0, r4
 801e7ce:	f001 fcd3 	bl	8020178 <_Bfree>
 801e7d2:	9907      	ldr	r1, [sp, #28]
 801e7d4:	4620      	mov	r0, r4
 801e7d6:	f001 fccf 	bl	8020178 <_Bfree>
 801e7da:	4631      	mov	r1, r6
 801e7dc:	4620      	mov	r0, r4
 801e7de:	f001 fccb 	bl	8020178 <_Bfree>
 801e7e2:	4629      	mov	r1, r5
 801e7e4:	4620      	mov	r0, r4
 801e7e6:	f001 fcc7 	bl	8020178 <_Bfree>
 801e7ea:	e613      	b.n	801e414 <_strtod_l+0x664>
 801e7ec:	f1ba 0f00 	cmp.w	sl, #0
 801e7f0:	d11b      	bne.n	801e82a <_strtod_l+0xa7a>
 801e7f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e7f6:	b9f3      	cbnz	r3, 801e836 <_strtod_l+0xa86>
 801e7f8:	4b6b      	ldr	r3, [pc, #428]	; (801e9a8 <_strtod_l+0xbf8>)
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	4640      	mov	r0, r8
 801e7fe:	4649      	mov	r1, r9
 801e800:	f7e2 f97c 	bl	8000afc <__aeabi_dcmplt>
 801e804:	b9d0      	cbnz	r0, 801e83c <_strtod_l+0xa8c>
 801e806:	4640      	mov	r0, r8
 801e808:	4649      	mov	r1, r9
 801e80a:	4b6b      	ldr	r3, [pc, #428]	; (801e9b8 <_strtod_l+0xc08>)
 801e80c:	2200      	movs	r2, #0
 801e80e:	f7e1 ff03 	bl	8000618 <__aeabi_dmul>
 801e812:	4680      	mov	r8, r0
 801e814:	4689      	mov	r9, r1
 801e816:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e81a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801e81e:	931b      	str	r3, [sp, #108]	; 0x6c
 801e820:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801e824:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e828:	e79b      	b.n	801e762 <_strtod_l+0x9b2>
 801e82a:	f1ba 0f01 	cmp.w	sl, #1
 801e82e:	d102      	bne.n	801e836 <_strtod_l+0xa86>
 801e830:	2f00      	cmp	r7, #0
 801e832:	f43f ad7e 	beq.w	801e332 <_strtod_l+0x582>
 801e836:	4b61      	ldr	r3, [pc, #388]	; (801e9bc <_strtod_l+0xc0c>)
 801e838:	2200      	movs	r2, #0
 801e83a:	e78c      	b.n	801e756 <_strtod_l+0x9a6>
 801e83c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801e9b8 <_strtod_l+0xc08>
 801e840:	f04f 0800 	mov.w	r8, #0
 801e844:	e7e7      	b.n	801e816 <_strtod_l+0xa66>
 801e846:	4b5c      	ldr	r3, [pc, #368]	; (801e9b8 <_strtod_l+0xc08>)
 801e848:	4640      	mov	r0, r8
 801e84a:	4649      	mov	r1, r9
 801e84c:	2200      	movs	r2, #0
 801e84e:	f7e1 fee3 	bl	8000618 <__aeabi_dmul>
 801e852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e854:	4680      	mov	r8, r0
 801e856:	4689      	mov	r9, r1
 801e858:	b933      	cbnz	r3, 801e868 <_strtod_l+0xab8>
 801e85a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e85e:	9012      	str	r0, [sp, #72]	; 0x48
 801e860:	9313      	str	r3, [sp, #76]	; 0x4c
 801e862:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e866:	e7dd      	b.n	801e824 <_strtod_l+0xa74>
 801e868:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801e86c:	e7f9      	b.n	801e862 <_strtod_l+0xab2>
 801e86e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801e872:	9b04      	ldr	r3, [sp, #16]
 801e874:	2b00      	cmp	r3, #0
 801e876:	d1a8      	bne.n	801e7ca <_strtod_l+0xa1a>
 801e878:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e87c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e87e:	0d1b      	lsrs	r3, r3, #20
 801e880:	051b      	lsls	r3, r3, #20
 801e882:	429a      	cmp	r2, r3
 801e884:	d1a1      	bne.n	801e7ca <_strtod_l+0xa1a>
 801e886:	4640      	mov	r0, r8
 801e888:	4649      	mov	r1, r9
 801e88a:	f7e2 fa75 	bl	8000d78 <__aeabi_d2lz>
 801e88e:	f7e1 fe95 	bl	80005bc <__aeabi_l2d>
 801e892:	4602      	mov	r2, r0
 801e894:	460b      	mov	r3, r1
 801e896:	4640      	mov	r0, r8
 801e898:	4649      	mov	r1, r9
 801e89a:	f7e1 fd05 	bl	80002a8 <__aeabi_dsub>
 801e89e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e8a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e8a4:	ea43 030a 	orr.w	r3, r3, sl
 801e8a8:	4313      	orrs	r3, r2
 801e8aa:	4680      	mov	r8, r0
 801e8ac:	4689      	mov	r9, r1
 801e8ae:	d053      	beq.n	801e958 <_strtod_l+0xba8>
 801e8b0:	a335      	add	r3, pc, #212	; (adr r3, 801e988 <_strtod_l+0xbd8>)
 801e8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8b6:	f7e2 f921 	bl	8000afc <__aeabi_dcmplt>
 801e8ba:	2800      	cmp	r0, #0
 801e8bc:	f47f acce 	bne.w	801e25c <_strtod_l+0x4ac>
 801e8c0:	a333      	add	r3, pc, #204	; (adr r3, 801e990 <_strtod_l+0xbe0>)
 801e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8c6:	4640      	mov	r0, r8
 801e8c8:	4649      	mov	r1, r9
 801e8ca:	f7e2 f935 	bl	8000b38 <__aeabi_dcmpgt>
 801e8ce:	2800      	cmp	r0, #0
 801e8d0:	f43f af7b 	beq.w	801e7ca <_strtod_l+0xa1a>
 801e8d4:	e4c2      	b.n	801e25c <_strtod_l+0x4ac>
 801e8d6:	9b04      	ldr	r3, [sp, #16]
 801e8d8:	b333      	cbz	r3, 801e928 <_strtod_l+0xb78>
 801e8da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e8dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e8e0:	d822      	bhi.n	801e928 <_strtod_l+0xb78>
 801e8e2:	a32d      	add	r3, pc, #180	; (adr r3, 801e998 <_strtod_l+0xbe8>)
 801e8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8e8:	4640      	mov	r0, r8
 801e8ea:	4649      	mov	r1, r9
 801e8ec:	f7e2 f910 	bl	8000b10 <__aeabi_dcmple>
 801e8f0:	b1a0      	cbz	r0, 801e91c <_strtod_l+0xb6c>
 801e8f2:	4649      	mov	r1, r9
 801e8f4:	4640      	mov	r0, r8
 801e8f6:	f7e2 f967 	bl	8000bc8 <__aeabi_d2uiz>
 801e8fa:	2801      	cmp	r0, #1
 801e8fc:	bf38      	it	cc
 801e8fe:	2001      	movcc	r0, #1
 801e900:	f7e1 fe10 	bl	8000524 <__aeabi_ui2d>
 801e904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e906:	4680      	mov	r8, r0
 801e908:	4689      	mov	r9, r1
 801e90a:	bb13      	cbnz	r3, 801e952 <_strtod_l+0xba2>
 801e90c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e910:	9014      	str	r0, [sp, #80]	; 0x50
 801e912:	9315      	str	r3, [sp, #84]	; 0x54
 801e914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801e918:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e91c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e91e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e920:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e924:	1a9b      	subs	r3, r3, r2
 801e926:	930d      	str	r3, [sp, #52]	; 0x34
 801e928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e92c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e934:	f001 ff4c 	bl	80207d0 <__ulp>
 801e938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e93c:	ec53 2b10 	vmov	r2, r3, d0
 801e940:	f7e1 fe6a 	bl	8000618 <__aeabi_dmul>
 801e944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e948:	f7e1 fcb0 	bl	80002ac <__adddf3>
 801e94c:	4682      	mov	sl, r0
 801e94e:	468b      	mov	fp, r1
 801e950:	e78f      	b.n	801e872 <_strtod_l+0xac2>
 801e952:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801e956:	e7dd      	b.n	801e914 <_strtod_l+0xb64>
 801e958:	a311      	add	r3, pc, #68	; (adr r3, 801e9a0 <_strtod_l+0xbf0>)
 801e95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e95e:	f7e2 f8cd 	bl	8000afc <__aeabi_dcmplt>
 801e962:	e7b4      	b.n	801e8ce <_strtod_l+0xb1e>
 801e964:	2300      	movs	r3, #0
 801e966:	930e      	str	r3, [sp, #56]	; 0x38
 801e968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e96a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e96c:	6013      	str	r3, [r2, #0]
 801e96e:	f7ff ba65 	b.w	801de3c <_strtod_l+0x8c>
 801e972:	2b65      	cmp	r3, #101	; 0x65
 801e974:	f43f ab5d 	beq.w	801e032 <_strtod_l+0x282>
 801e978:	2b45      	cmp	r3, #69	; 0x45
 801e97a:	f43f ab5a 	beq.w	801e032 <_strtod_l+0x282>
 801e97e:	2201      	movs	r2, #1
 801e980:	f7ff bb92 	b.w	801e0a8 <_strtod_l+0x2f8>
 801e984:	f3af 8000 	nop.w
 801e988:	94a03595 	.word	0x94a03595
 801e98c:	3fdfffff 	.word	0x3fdfffff
 801e990:	35afe535 	.word	0x35afe535
 801e994:	3fe00000 	.word	0x3fe00000
 801e998:	ffc00000 	.word	0xffc00000
 801e99c:	41dfffff 	.word	0x41dfffff
 801e9a0:	94a03595 	.word	0x94a03595
 801e9a4:	3fcfffff 	.word	0x3fcfffff
 801e9a8:	3ff00000 	.word	0x3ff00000
 801e9ac:	7ff00000 	.word	0x7ff00000
 801e9b0:	7fe00000 	.word	0x7fe00000
 801e9b4:	7c9fffff 	.word	0x7c9fffff
 801e9b8:	3fe00000 	.word	0x3fe00000
 801e9bc:	bff00000 	.word	0xbff00000
 801e9c0:	7fefffff 	.word	0x7fefffff

0801e9c4 <_strtod_r>:
 801e9c4:	4b01      	ldr	r3, [pc, #4]	; (801e9cc <_strtod_r+0x8>)
 801e9c6:	f7ff b9f3 	b.w	801ddb0 <_strtod_l>
 801e9ca:	bf00      	nop
 801e9cc:	20000694 	.word	0x20000694

0801e9d0 <_strtol_l.isra.0>:
 801e9d0:	2b01      	cmp	r3, #1
 801e9d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9d6:	d001      	beq.n	801e9dc <_strtol_l.isra.0+0xc>
 801e9d8:	2b24      	cmp	r3, #36	; 0x24
 801e9da:	d906      	bls.n	801e9ea <_strtol_l.isra.0+0x1a>
 801e9dc:	f7fe fae6 	bl	801cfac <__errno>
 801e9e0:	2316      	movs	r3, #22
 801e9e2:	6003      	str	r3, [r0, #0]
 801e9e4:	2000      	movs	r0, #0
 801e9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9ea:	4f3a      	ldr	r7, [pc, #232]	; (801ead4 <_strtol_l.isra.0+0x104>)
 801e9ec:	468e      	mov	lr, r1
 801e9ee:	4676      	mov	r6, lr
 801e9f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e9f4:	5de5      	ldrb	r5, [r4, r7]
 801e9f6:	f015 0508 	ands.w	r5, r5, #8
 801e9fa:	d1f8      	bne.n	801e9ee <_strtol_l.isra.0+0x1e>
 801e9fc:	2c2d      	cmp	r4, #45	; 0x2d
 801e9fe:	d134      	bne.n	801ea6a <_strtol_l.isra.0+0x9a>
 801ea00:	f89e 4000 	ldrb.w	r4, [lr]
 801ea04:	f04f 0801 	mov.w	r8, #1
 801ea08:	f106 0e02 	add.w	lr, r6, #2
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d05c      	beq.n	801eaca <_strtol_l.isra.0+0xfa>
 801ea10:	2b10      	cmp	r3, #16
 801ea12:	d10c      	bne.n	801ea2e <_strtol_l.isra.0+0x5e>
 801ea14:	2c30      	cmp	r4, #48	; 0x30
 801ea16:	d10a      	bne.n	801ea2e <_strtol_l.isra.0+0x5e>
 801ea18:	f89e 4000 	ldrb.w	r4, [lr]
 801ea1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ea20:	2c58      	cmp	r4, #88	; 0x58
 801ea22:	d14d      	bne.n	801eac0 <_strtol_l.isra.0+0xf0>
 801ea24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ea28:	2310      	movs	r3, #16
 801ea2a:	f10e 0e02 	add.w	lr, lr, #2
 801ea2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ea32:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ea36:	2600      	movs	r6, #0
 801ea38:	fbbc f9f3 	udiv	r9, ip, r3
 801ea3c:	4635      	mov	r5, r6
 801ea3e:	fb03 ca19 	mls	sl, r3, r9, ip
 801ea42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ea46:	2f09      	cmp	r7, #9
 801ea48:	d818      	bhi.n	801ea7c <_strtol_l.isra.0+0xac>
 801ea4a:	463c      	mov	r4, r7
 801ea4c:	42a3      	cmp	r3, r4
 801ea4e:	dd24      	ble.n	801ea9a <_strtol_l.isra.0+0xca>
 801ea50:	2e00      	cmp	r6, #0
 801ea52:	db1f      	blt.n	801ea94 <_strtol_l.isra.0+0xc4>
 801ea54:	45a9      	cmp	r9, r5
 801ea56:	d31d      	bcc.n	801ea94 <_strtol_l.isra.0+0xc4>
 801ea58:	d101      	bne.n	801ea5e <_strtol_l.isra.0+0x8e>
 801ea5a:	45a2      	cmp	sl, r4
 801ea5c:	db1a      	blt.n	801ea94 <_strtol_l.isra.0+0xc4>
 801ea5e:	fb05 4503 	mla	r5, r5, r3, r4
 801ea62:	2601      	movs	r6, #1
 801ea64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ea68:	e7eb      	b.n	801ea42 <_strtol_l.isra.0+0x72>
 801ea6a:	2c2b      	cmp	r4, #43	; 0x2b
 801ea6c:	bf08      	it	eq
 801ea6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ea72:	46a8      	mov	r8, r5
 801ea74:	bf08      	it	eq
 801ea76:	f106 0e02 	addeq.w	lr, r6, #2
 801ea7a:	e7c7      	b.n	801ea0c <_strtol_l.isra.0+0x3c>
 801ea7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ea80:	2f19      	cmp	r7, #25
 801ea82:	d801      	bhi.n	801ea88 <_strtol_l.isra.0+0xb8>
 801ea84:	3c37      	subs	r4, #55	; 0x37
 801ea86:	e7e1      	b.n	801ea4c <_strtol_l.isra.0+0x7c>
 801ea88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ea8c:	2f19      	cmp	r7, #25
 801ea8e:	d804      	bhi.n	801ea9a <_strtol_l.isra.0+0xca>
 801ea90:	3c57      	subs	r4, #87	; 0x57
 801ea92:	e7db      	b.n	801ea4c <_strtol_l.isra.0+0x7c>
 801ea94:	f04f 36ff 	mov.w	r6, #4294967295
 801ea98:	e7e4      	b.n	801ea64 <_strtol_l.isra.0+0x94>
 801ea9a:	2e00      	cmp	r6, #0
 801ea9c:	da05      	bge.n	801eaaa <_strtol_l.isra.0+0xda>
 801ea9e:	2322      	movs	r3, #34	; 0x22
 801eaa0:	6003      	str	r3, [r0, #0]
 801eaa2:	4665      	mov	r5, ip
 801eaa4:	b942      	cbnz	r2, 801eab8 <_strtol_l.isra.0+0xe8>
 801eaa6:	4628      	mov	r0, r5
 801eaa8:	e79d      	b.n	801e9e6 <_strtol_l.isra.0+0x16>
 801eaaa:	f1b8 0f00 	cmp.w	r8, #0
 801eaae:	d000      	beq.n	801eab2 <_strtol_l.isra.0+0xe2>
 801eab0:	426d      	negs	r5, r5
 801eab2:	2a00      	cmp	r2, #0
 801eab4:	d0f7      	beq.n	801eaa6 <_strtol_l.isra.0+0xd6>
 801eab6:	b10e      	cbz	r6, 801eabc <_strtol_l.isra.0+0xec>
 801eab8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801eabc:	6011      	str	r1, [r2, #0]
 801eabe:	e7f2      	b.n	801eaa6 <_strtol_l.isra.0+0xd6>
 801eac0:	2430      	movs	r4, #48	; 0x30
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d1b3      	bne.n	801ea2e <_strtol_l.isra.0+0x5e>
 801eac6:	2308      	movs	r3, #8
 801eac8:	e7b1      	b.n	801ea2e <_strtol_l.isra.0+0x5e>
 801eaca:	2c30      	cmp	r4, #48	; 0x30
 801eacc:	d0a4      	beq.n	801ea18 <_strtol_l.isra.0+0x48>
 801eace:	230a      	movs	r3, #10
 801ead0:	e7ad      	b.n	801ea2e <_strtol_l.isra.0+0x5e>
 801ead2:	bf00      	nop
 801ead4:	08029711 	.word	0x08029711

0801ead8 <_strtol_r>:
 801ead8:	f7ff bf7a 	b.w	801e9d0 <_strtol_l.isra.0>

0801eadc <quorem>:
 801eadc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae0:	6903      	ldr	r3, [r0, #16]
 801eae2:	690c      	ldr	r4, [r1, #16]
 801eae4:	42a3      	cmp	r3, r4
 801eae6:	4607      	mov	r7, r0
 801eae8:	f2c0 8081 	blt.w	801ebee <quorem+0x112>
 801eaec:	3c01      	subs	r4, #1
 801eaee:	f101 0814 	add.w	r8, r1, #20
 801eaf2:	f100 0514 	add.w	r5, r0, #20
 801eaf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eafa:	9301      	str	r3, [sp, #4]
 801eafc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801eb00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eb04:	3301      	adds	r3, #1
 801eb06:	429a      	cmp	r2, r3
 801eb08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801eb0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801eb10:	fbb2 f6f3 	udiv	r6, r2, r3
 801eb14:	d331      	bcc.n	801eb7a <quorem+0x9e>
 801eb16:	f04f 0e00 	mov.w	lr, #0
 801eb1a:	4640      	mov	r0, r8
 801eb1c:	46ac      	mov	ip, r5
 801eb1e:	46f2      	mov	sl, lr
 801eb20:	f850 2b04 	ldr.w	r2, [r0], #4
 801eb24:	b293      	uxth	r3, r2
 801eb26:	fb06 e303 	mla	r3, r6, r3, lr
 801eb2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801eb2e:	b29b      	uxth	r3, r3
 801eb30:	ebaa 0303 	sub.w	r3, sl, r3
 801eb34:	0c12      	lsrs	r2, r2, #16
 801eb36:	f8dc a000 	ldr.w	sl, [ip]
 801eb3a:	fb06 e202 	mla	r2, r6, r2, lr
 801eb3e:	fa13 f38a 	uxtah	r3, r3, sl
 801eb42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801eb46:	fa1f fa82 	uxth.w	sl, r2
 801eb4a:	f8dc 2000 	ldr.w	r2, [ip]
 801eb4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801eb52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801eb56:	b29b      	uxth	r3, r3
 801eb58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801eb5c:	4581      	cmp	r9, r0
 801eb5e:	f84c 3b04 	str.w	r3, [ip], #4
 801eb62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801eb66:	d2db      	bcs.n	801eb20 <quorem+0x44>
 801eb68:	f855 300b 	ldr.w	r3, [r5, fp]
 801eb6c:	b92b      	cbnz	r3, 801eb7a <quorem+0x9e>
 801eb6e:	9b01      	ldr	r3, [sp, #4]
 801eb70:	3b04      	subs	r3, #4
 801eb72:	429d      	cmp	r5, r3
 801eb74:	461a      	mov	r2, r3
 801eb76:	d32e      	bcc.n	801ebd6 <quorem+0xfa>
 801eb78:	613c      	str	r4, [r7, #16]
 801eb7a:	4638      	mov	r0, r7
 801eb7c:	f001 fd84 	bl	8020688 <__mcmp>
 801eb80:	2800      	cmp	r0, #0
 801eb82:	db24      	blt.n	801ebce <quorem+0xf2>
 801eb84:	3601      	adds	r6, #1
 801eb86:	4628      	mov	r0, r5
 801eb88:	f04f 0c00 	mov.w	ip, #0
 801eb8c:	f858 2b04 	ldr.w	r2, [r8], #4
 801eb90:	f8d0 e000 	ldr.w	lr, [r0]
 801eb94:	b293      	uxth	r3, r2
 801eb96:	ebac 0303 	sub.w	r3, ip, r3
 801eb9a:	0c12      	lsrs	r2, r2, #16
 801eb9c:	fa13 f38e 	uxtah	r3, r3, lr
 801eba0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801eba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801eba8:	b29b      	uxth	r3, r3
 801ebaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ebae:	45c1      	cmp	r9, r8
 801ebb0:	f840 3b04 	str.w	r3, [r0], #4
 801ebb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ebb8:	d2e8      	bcs.n	801eb8c <quorem+0xb0>
 801ebba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ebbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ebc2:	b922      	cbnz	r2, 801ebce <quorem+0xf2>
 801ebc4:	3b04      	subs	r3, #4
 801ebc6:	429d      	cmp	r5, r3
 801ebc8:	461a      	mov	r2, r3
 801ebca:	d30a      	bcc.n	801ebe2 <quorem+0x106>
 801ebcc:	613c      	str	r4, [r7, #16]
 801ebce:	4630      	mov	r0, r6
 801ebd0:	b003      	add	sp, #12
 801ebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebd6:	6812      	ldr	r2, [r2, #0]
 801ebd8:	3b04      	subs	r3, #4
 801ebda:	2a00      	cmp	r2, #0
 801ebdc:	d1cc      	bne.n	801eb78 <quorem+0x9c>
 801ebde:	3c01      	subs	r4, #1
 801ebe0:	e7c7      	b.n	801eb72 <quorem+0x96>
 801ebe2:	6812      	ldr	r2, [r2, #0]
 801ebe4:	3b04      	subs	r3, #4
 801ebe6:	2a00      	cmp	r2, #0
 801ebe8:	d1f0      	bne.n	801ebcc <quorem+0xf0>
 801ebea:	3c01      	subs	r4, #1
 801ebec:	e7eb      	b.n	801ebc6 <quorem+0xea>
 801ebee:	2000      	movs	r0, #0
 801ebf0:	e7ee      	b.n	801ebd0 <quorem+0xf4>
 801ebf2:	0000      	movs	r0, r0
 801ebf4:	0000      	movs	r0, r0
	...

0801ebf8 <_dtoa_r>:
 801ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebfc:	ed2d 8b02 	vpush	{d8}
 801ec00:	ec57 6b10 	vmov	r6, r7, d0
 801ec04:	b095      	sub	sp, #84	; 0x54
 801ec06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ec08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ec0c:	9105      	str	r1, [sp, #20]
 801ec0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ec12:	4604      	mov	r4, r0
 801ec14:	9209      	str	r2, [sp, #36]	; 0x24
 801ec16:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec18:	b975      	cbnz	r5, 801ec38 <_dtoa_r+0x40>
 801ec1a:	2010      	movs	r0, #16
 801ec1c:	f001 fa44 	bl	80200a8 <malloc>
 801ec20:	4602      	mov	r2, r0
 801ec22:	6260      	str	r0, [r4, #36]	; 0x24
 801ec24:	b920      	cbnz	r0, 801ec30 <_dtoa_r+0x38>
 801ec26:	4bb2      	ldr	r3, [pc, #712]	; (801eef0 <_dtoa_r+0x2f8>)
 801ec28:	21ea      	movs	r1, #234	; 0xea
 801ec2a:	48b2      	ldr	r0, [pc, #712]	; (801eef4 <_dtoa_r+0x2fc>)
 801ec2c:	f002 fa82 	bl	8021134 <__assert_func>
 801ec30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ec34:	6005      	str	r5, [r0, #0]
 801ec36:	60c5      	str	r5, [r0, #12]
 801ec38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ec3a:	6819      	ldr	r1, [r3, #0]
 801ec3c:	b151      	cbz	r1, 801ec54 <_dtoa_r+0x5c>
 801ec3e:	685a      	ldr	r2, [r3, #4]
 801ec40:	604a      	str	r2, [r1, #4]
 801ec42:	2301      	movs	r3, #1
 801ec44:	4093      	lsls	r3, r2
 801ec46:	608b      	str	r3, [r1, #8]
 801ec48:	4620      	mov	r0, r4
 801ec4a:	f001 fa95 	bl	8020178 <_Bfree>
 801ec4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ec50:	2200      	movs	r2, #0
 801ec52:	601a      	str	r2, [r3, #0]
 801ec54:	1e3b      	subs	r3, r7, #0
 801ec56:	bfb9      	ittee	lt
 801ec58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ec5c:	9303      	strlt	r3, [sp, #12]
 801ec5e:	2300      	movge	r3, #0
 801ec60:	f8c8 3000 	strge.w	r3, [r8]
 801ec64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ec68:	4ba3      	ldr	r3, [pc, #652]	; (801eef8 <_dtoa_r+0x300>)
 801ec6a:	bfbc      	itt	lt
 801ec6c:	2201      	movlt	r2, #1
 801ec6e:	f8c8 2000 	strlt.w	r2, [r8]
 801ec72:	ea33 0309 	bics.w	r3, r3, r9
 801ec76:	d11b      	bne.n	801ecb0 <_dtoa_r+0xb8>
 801ec78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec7a:	f242 730f 	movw	r3, #9999	; 0x270f
 801ec7e:	6013      	str	r3, [r2, #0]
 801ec80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ec84:	4333      	orrs	r3, r6
 801ec86:	f000 857a 	beq.w	801f77e <_dtoa_r+0xb86>
 801ec8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ec8c:	b963      	cbnz	r3, 801eca8 <_dtoa_r+0xb0>
 801ec8e:	4b9b      	ldr	r3, [pc, #620]	; (801eefc <_dtoa_r+0x304>)
 801ec90:	e024      	b.n	801ecdc <_dtoa_r+0xe4>
 801ec92:	4b9b      	ldr	r3, [pc, #620]	; (801ef00 <_dtoa_r+0x308>)
 801ec94:	9300      	str	r3, [sp, #0]
 801ec96:	3308      	adds	r3, #8
 801ec98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ec9a:	6013      	str	r3, [r2, #0]
 801ec9c:	9800      	ldr	r0, [sp, #0]
 801ec9e:	b015      	add	sp, #84	; 0x54
 801eca0:	ecbd 8b02 	vpop	{d8}
 801eca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eca8:	4b94      	ldr	r3, [pc, #592]	; (801eefc <_dtoa_r+0x304>)
 801ecaa:	9300      	str	r3, [sp, #0]
 801ecac:	3303      	adds	r3, #3
 801ecae:	e7f3      	b.n	801ec98 <_dtoa_r+0xa0>
 801ecb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ecb4:	2200      	movs	r2, #0
 801ecb6:	ec51 0b17 	vmov	r0, r1, d7
 801ecba:	2300      	movs	r3, #0
 801ecbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ecc0:	f7e1 ff12 	bl	8000ae8 <__aeabi_dcmpeq>
 801ecc4:	4680      	mov	r8, r0
 801ecc6:	b158      	cbz	r0, 801ece0 <_dtoa_r+0xe8>
 801ecc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ecca:	2301      	movs	r3, #1
 801eccc:	6013      	str	r3, [r2, #0]
 801ecce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	f000 8551 	beq.w	801f778 <_dtoa_r+0xb80>
 801ecd6:	488b      	ldr	r0, [pc, #556]	; (801ef04 <_dtoa_r+0x30c>)
 801ecd8:	6018      	str	r0, [r3, #0]
 801ecda:	1e43      	subs	r3, r0, #1
 801ecdc:	9300      	str	r3, [sp, #0]
 801ecde:	e7dd      	b.n	801ec9c <_dtoa_r+0xa4>
 801ece0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ece4:	aa12      	add	r2, sp, #72	; 0x48
 801ece6:	a913      	add	r1, sp, #76	; 0x4c
 801ece8:	4620      	mov	r0, r4
 801ecea:	f001 fded 	bl	80208c8 <__d2b>
 801ecee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ecf2:	4683      	mov	fp, r0
 801ecf4:	2d00      	cmp	r5, #0
 801ecf6:	d07c      	beq.n	801edf2 <_dtoa_r+0x1fa>
 801ecf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecfa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ecfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ed02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ed06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ed0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ed0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ed12:	4b7d      	ldr	r3, [pc, #500]	; (801ef08 <_dtoa_r+0x310>)
 801ed14:	2200      	movs	r2, #0
 801ed16:	4630      	mov	r0, r6
 801ed18:	4639      	mov	r1, r7
 801ed1a:	f7e1 fac5 	bl	80002a8 <__aeabi_dsub>
 801ed1e:	a36e      	add	r3, pc, #440	; (adr r3, 801eed8 <_dtoa_r+0x2e0>)
 801ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed24:	f7e1 fc78 	bl	8000618 <__aeabi_dmul>
 801ed28:	a36d      	add	r3, pc, #436	; (adr r3, 801eee0 <_dtoa_r+0x2e8>)
 801ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed2e:	f7e1 fabd 	bl	80002ac <__adddf3>
 801ed32:	4606      	mov	r6, r0
 801ed34:	4628      	mov	r0, r5
 801ed36:	460f      	mov	r7, r1
 801ed38:	f7e1 fc04 	bl	8000544 <__aeabi_i2d>
 801ed3c:	a36a      	add	r3, pc, #424	; (adr r3, 801eee8 <_dtoa_r+0x2f0>)
 801ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed42:	f7e1 fc69 	bl	8000618 <__aeabi_dmul>
 801ed46:	4602      	mov	r2, r0
 801ed48:	460b      	mov	r3, r1
 801ed4a:	4630      	mov	r0, r6
 801ed4c:	4639      	mov	r1, r7
 801ed4e:	f7e1 faad 	bl	80002ac <__adddf3>
 801ed52:	4606      	mov	r6, r0
 801ed54:	460f      	mov	r7, r1
 801ed56:	f7e1 ff0f 	bl	8000b78 <__aeabi_d2iz>
 801ed5a:	2200      	movs	r2, #0
 801ed5c:	4682      	mov	sl, r0
 801ed5e:	2300      	movs	r3, #0
 801ed60:	4630      	mov	r0, r6
 801ed62:	4639      	mov	r1, r7
 801ed64:	f7e1 feca 	bl	8000afc <__aeabi_dcmplt>
 801ed68:	b148      	cbz	r0, 801ed7e <_dtoa_r+0x186>
 801ed6a:	4650      	mov	r0, sl
 801ed6c:	f7e1 fbea 	bl	8000544 <__aeabi_i2d>
 801ed70:	4632      	mov	r2, r6
 801ed72:	463b      	mov	r3, r7
 801ed74:	f7e1 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 801ed78:	b908      	cbnz	r0, 801ed7e <_dtoa_r+0x186>
 801ed7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed7e:	f1ba 0f16 	cmp.w	sl, #22
 801ed82:	d854      	bhi.n	801ee2e <_dtoa_r+0x236>
 801ed84:	4b61      	ldr	r3, [pc, #388]	; (801ef0c <_dtoa_r+0x314>)
 801ed86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ed92:	f7e1 feb3 	bl	8000afc <__aeabi_dcmplt>
 801ed96:	2800      	cmp	r0, #0
 801ed98:	d04b      	beq.n	801ee32 <_dtoa_r+0x23a>
 801ed9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed9e:	2300      	movs	r3, #0
 801eda0:	930e      	str	r3, [sp, #56]	; 0x38
 801eda2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eda4:	1b5d      	subs	r5, r3, r5
 801eda6:	1e6b      	subs	r3, r5, #1
 801eda8:	9304      	str	r3, [sp, #16]
 801edaa:	bf43      	ittte	mi
 801edac:	2300      	movmi	r3, #0
 801edae:	f1c5 0801 	rsbmi	r8, r5, #1
 801edb2:	9304      	strmi	r3, [sp, #16]
 801edb4:	f04f 0800 	movpl.w	r8, #0
 801edb8:	f1ba 0f00 	cmp.w	sl, #0
 801edbc:	db3b      	blt.n	801ee36 <_dtoa_r+0x23e>
 801edbe:	9b04      	ldr	r3, [sp, #16]
 801edc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801edc4:	4453      	add	r3, sl
 801edc6:	9304      	str	r3, [sp, #16]
 801edc8:	2300      	movs	r3, #0
 801edca:	9306      	str	r3, [sp, #24]
 801edcc:	9b05      	ldr	r3, [sp, #20]
 801edce:	2b09      	cmp	r3, #9
 801edd0:	d869      	bhi.n	801eea6 <_dtoa_r+0x2ae>
 801edd2:	2b05      	cmp	r3, #5
 801edd4:	bfc4      	itt	gt
 801edd6:	3b04      	subgt	r3, #4
 801edd8:	9305      	strgt	r3, [sp, #20]
 801edda:	9b05      	ldr	r3, [sp, #20]
 801eddc:	f1a3 0302 	sub.w	r3, r3, #2
 801ede0:	bfcc      	ite	gt
 801ede2:	2500      	movgt	r5, #0
 801ede4:	2501      	movle	r5, #1
 801ede6:	2b03      	cmp	r3, #3
 801ede8:	d869      	bhi.n	801eebe <_dtoa_r+0x2c6>
 801edea:	e8df f003 	tbb	[pc, r3]
 801edee:	4e2c      	.short	0x4e2c
 801edf0:	5a4c      	.short	0x5a4c
 801edf2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801edf6:	441d      	add	r5, r3
 801edf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801edfc:	2b20      	cmp	r3, #32
 801edfe:	bfc1      	itttt	gt
 801ee00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ee04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ee08:	fa09 f303 	lslgt.w	r3, r9, r3
 801ee0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ee10:	bfda      	itte	le
 801ee12:	f1c3 0320 	rsble	r3, r3, #32
 801ee16:	fa06 f003 	lslle.w	r0, r6, r3
 801ee1a:	4318      	orrgt	r0, r3
 801ee1c:	f7e1 fb82 	bl	8000524 <__aeabi_ui2d>
 801ee20:	2301      	movs	r3, #1
 801ee22:	4606      	mov	r6, r0
 801ee24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ee28:	3d01      	subs	r5, #1
 801ee2a:	9310      	str	r3, [sp, #64]	; 0x40
 801ee2c:	e771      	b.n	801ed12 <_dtoa_r+0x11a>
 801ee2e:	2301      	movs	r3, #1
 801ee30:	e7b6      	b.n	801eda0 <_dtoa_r+0x1a8>
 801ee32:	900e      	str	r0, [sp, #56]	; 0x38
 801ee34:	e7b5      	b.n	801eda2 <_dtoa_r+0x1aa>
 801ee36:	f1ca 0300 	rsb	r3, sl, #0
 801ee3a:	9306      	str	r3, [sp, #24]
 801ee3c:	2300      	movs	r3, #0
 801ee3e:	eba8 080a 	sub.w	r8, r8, sl
 801ee42:	930d      	str	r3, [sp, #52]	; 0x34
 801ee44:	e7c2      	b.n	801edcc <_dtoa_r+0x1d4>
 801ee46:	2300      	movs	r3, #0
 801ee48:	9308      	str	r3, [sp, #32]
 801ee4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	dc39      	bgt.n	801eec4 <_dtoa_r+0x2cc>
 801ee50:	f04f 0901 	mov.w	r9, #1
 801ee54:	f8cd 9004 	str.w	r9, [sp, #4]
 801ee58:	464b      	mov	r3, r9
 801ee5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ee5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ee60:	2200      	movs	r2, #0
 801ee62:	6042      	str	r2, [r0, #4]
 801ee64:	2204      	movs	r2, #4
 801ee66:	f102 0614 	add.w	r6, r2, #20
 801ee6a:	429e      	cmp	r6, r3
 801ee6c:	6841      	ldr	r1, [r0, #4]
 801ee6e:	d92f      	bls.n	801eed0 <_dtoa_r+0x2d8>
 801ee70:	4620      	mov	r0, r4
 801ee72:	f001 f941 	bl	80200f8 <_Balloc>
 801ee76:	9000      	str	r0, [sp, #0]
 801ee78:	2800      	cmp	r0, #0
 801ee7a:	d14b      	bne.n	801ef14 <_dtoa_r+0x31c>
 801ee7c:	4b24      	ldr	r3, [pc, #144]	; (801ef10 <_dtoa_r+0x318>)
 801ee7e:	4602      	mov	r2, r0
 801ee80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ee84:	e6d1      	b.n	801ec2a <_dtoa_r+0x32>
 801ee86:	2301      	movs	r3, #1
 801ee88:	e7de      	b.n	801ee48 <_dtoa_r+0x250>
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	9308      	str	r3, [sp, #32]
 801ee8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee90:	eb0a 0903 	add.w	r9, sl, r3
 801ee94:	f109 0301 	add.w	r3, r9, #1
 801ee98:	2b01      	cmp	r3, #1
 801ee9a:	9301      	str	r3, [sp, #4]
 801ee9c:	bfb8      	it	lt
 801ee9e:	2301      	movlt	r3, #1
 801eea0:	e7dd      	b.n	801ee5e <_dtoa_r+0x266>
 801eea2:	2301      	movs	r3, #1
 801eea4:	e7f2      	b.n	801ee8c <_dtoa_r+0x294>
 801eea6:	2501      	movs	r5, #1
 801eea8:	2300      	movs	r3, #0
 801eeaa:	9305      	str	r3, [sp, #20]
 801eeac:	9508      	str	r5, [sp, #32]
 801eeae:	f04f 39ff 	mov.w	r9, #4294967295
 801eeb2:	2200      	movs	r2, #0
 801eeb4:	f8cd 9004 	str.w	r9, [sp, #4]
 801eeb8:	2312      	movs	r3, #18
 801eeba:	9209      	str	r2, [sp, #36]	; 0x24
 801eebc:	e7cf      	b.n	801ee5e <_dtoa_r+0x266>
 801eebe:	2301      	movs	r3, #1
 801eec0:	9308      	str	r3, [sp, #32]
 801eec2:	e7f4      	b.n	801eeae <_dtoa_r+0x2b6>
 801eec4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801eec8:	f8cd 9004 	str.w	r9, [sp, #4]
 801eecc:	464b      	mov	r3, r9
 801eece:	e7c6      	b.n	801ee5e <_dtoa_r+0x266>
 801eed0:	3101      	adds	r1, #1
 801eed2:	6041      	str	r1, [r0, #4]
 801eed4:	0052      	lsls	r2, r2, #1
 801eed6:	e7c6      	b.n	801ee66 <_dtoa_r+0x26e>
 801eed8:	636f4361 	.word	0x636f4361
 801eedc:	3fd287a7 	.word	0x3fd287a7
 801eee0:	8b60c8b3 	.word	0x8b60c8b3
 801eee4:	3fc68a28 	.word	0x3fc68a28
 801eee8:	509f79fb 	.word	0x509f79fb
 801eeec:	3fd34413 	.word	0x3fd34413
 801eef0:	0802981e 	.word	0x0802981e
 801eef4:	08029835 	.word	0x08029835
 801eef8:	7ff00000 	.word	0x7ff00000
 801eefc:	0802981a 	.word	0x0802981a
 801ef00:	08029811 	.word	0x08029811
 801ef04:	08029691 	.word	0x08029691
 801ef08:	3ff80000 	.word	0x3ff80000
 801ef0c:	08029a10 	.word	0x08029a10
 801ef10:	08029894 	.word	0x08029894
 801ef14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef16:	9a00      	ldr	r2, [sp, #0]
 801ef18:	601a      	str	r2, [r3, #0]
 801ef1a:	9b01      	ldr	r3, [sp, #4]
 801ef1c:	2b0e      	cmp	r3, #14
 801ef1e:	f200 80ad 	bhi.w	801f07c <_dtoa_r+0x484>
 801ef22:	2d00      	cmp	r5, #0
 801ef24:	f000 80aa 	beq.w	801f07c <_dtoa_r+0x484>
 801ef28:	f1ba 0f00 	cmp.w	sl, #0
 801ef2c:	dd36      	ble.n	801ef9c <_dtoa_r+0x3a4>
 801ef2e:	4ac3      	ldr	r2, [pc, #780]	; (801f23c <_dtoa_r+0x644>)
 801ef30:	f00a 030f 	and.w	r3, sl, #15
 801ef34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ef38:	ed93 7b00 	vldr	d7, [r3]
 801ef3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801ef40:	ea4f 172a 	mov.w	r7, sl, asr #4
 801ef44:	eeb0 8a47 	vmov.f32	s16, s14
 801ef48:	eef0 8a67 	vmov.f32	s17, s15
 801ef4c:	d016      	beq.n	801ef7c <_dtoa_r+0x384>
 801ef4e:	4bbc      	ldr	r3, [pc, #752]	; (801f240 <_dtoa_r+0x648>)
 801ef50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ef54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ef58:	f7e1 fc88 	bl	800086c <__aeabi_ddiv>
 801ef5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef60:	f007 070f 	and.w	r7, r7, #15
 801ef64:	2503      	movs	r5, #3
 801ef66:	4eb6      	ldr	r6, [pc, #728]	; (801f240 <_dtoa_r+0x648>)
 801ef68:	b957      	cbnz	r7, 801ef80 <_dtoa_r+0x388>
 801ef6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef6e:	ec53 2b18 	vmov	r2, r3, d8
 801ef72:	f7e1 fc7b 	bl	800086c <__aeabi_ddiv>
 801ef76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef7a:	e029      	b.n	801efd0 <_dtoa_r+0x3d8>
 801ef7c:	2502      	movs	r5, #2
 801ef7e:	e7f2      	b.n	801ef66 <_dtoa_r+0x36e>
 801ef80:	07f9      	lsls	r1, r7, #31
 801ef82:	d508      	bpl.n	801ef96 <_dtoa_r+0x39e>
 801ef84:	ec51 0b18 	vmov	r0, r1, d8
 801ef88:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ef8c:	f7e1 fb44 	bl	8000618 <__aeabi_dmul>
 801ef90:	ec41 0b18 	vmov	d8, r0, r1
 801ef94:	3501      	adds	r5, #1
 801ef96:	107f      	asrs	r7, r7, #1
 801ef98:	3608      	adds	r6, #8
 801ef9a:	e7e5      	b.n	801ef68 <_dtoa_r+0x370>
 801ef9c:	f000 80a6 	beq.w	801f0ec <_dtoa_r+0x4f4>
 801efa0:	f1ca 0600 	rsb	r6, sl, #0
 801efa4:	4ba5      	ldr	r3, [pc, #660]	; (801f23c <_dtoa_r+0x644>)
 801efa6:	4fa6      	ldr	r7, [pc, #664]	; (801f240 <_dtoa_r+0x648>)
 801efa8:	f006 020f 	and.w	r2, r6, #15
 801efac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801efb8:	f7e1 fb2e 	bl	8000618 <__aeabi_dmul>
 801efbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801efc0:	1136      	asrs	r6, r6, #4
 801efc2:	2300      	movs	r3, #0
 801efc4:	2502      	movs	r5, #2
 801efc6:	2e00      	cmp	r6, #0
 801efc8:	f040 8085 	bne.w	801f0d6 <_dtoa_r+0x4de>
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d1d2      	bne.n	801ef76 <_dtoa_r+0x37e>
 801efd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	f000 808c 	beq.w	801f0f0 <_dtoa_r+0x4f8>
 801efd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801efdc:	4b99      	ldr	r3, [pc, #612]	; (801f244 <_dtoa_r+0x64c>)
 801efde:	2200      	movs	r2, #0
 801efe0:	4630      	mov	r0, r6
 801efe2:	4639      	mov	r1, r7
 801efe4:	f7e1 fd8a 	bl	8000afc <__aeabi_dcmplt>
 801efe8:	2800      	cmp	r0, #0
 801efea:	f000 8081 	beq.w	801f0f0 <_dtoa_r+0x4f8>
 801efee:	9b01      	ldr	r3, [sp, #4]
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	d07d      	beq.n	801f0f0 <_dtoa_r+0x4f8>
 801eff4:	f1b9 0f00 	cmp.w	r9, #0
 801eff8:	dd3c      	ble.n	801f074 <_dtoa_r+0x47c>
 801effa:	f10a 33ff 	add.w	r3, sl, #4294967295
 801effe:	9307      	str	r3, [sp, #28]
 801f000:	2200      	movs	r2, #0
 801f002:	4b91      	ldr	r3, [pc, #580]	; (801f248 <_dtoa_r+0x650>)
 801f004:	4630      	mov	r0, r6
 801f006:	4639      	mov	r1, r7
 801f008:	f7e1 fb06 	bl	8000618 <__aeabi_dmul>
 801f00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f010:	3501      	adds	r5, #1
 801f012:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f016:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f01a:	4628      	mov	r0, r5
 801f01c:	f7e1 fa92 	bl	8000544 <__aeabi_i2d>
 801f020:	4632      	mov	r2, r6
 801f022:	463b      	mov	r3, r7
 801f024:	f7e1 faf8 	bl	8000618 <__aeabi_dmul>
 801f028:	4b88      	ldr	r3, [pc, #544]	; (801f24c <_dtoa_r+0x654>)
 801f02a:	2200      	movs	r2, #0
 801f02c:	f7e1 f93e 	bl	80002ac <__adddf3>
 801f030:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f038:	9303      	str	r3, [sp, #12]
 801f03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	d15c      	bne.n	801f0fa <_dtoa_r+0x502>
 801f040:	4b83      	ldr	r3, [pc, #524]	; (801f250 <_dtoa_r+0x658>)
 801f042:	2200      	movs	r2, #0
 801f044:	4630      	mov	r0, r6
 801f046:	4639      	mov	r1, r7
 801f048:	f7e1 f92e 	bl	80002a8 <__aeabi_dsub>
 801f04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f050:	4606      	mov	r6, r0
 801f052:	460f      	mov	r7, r1
 801f054:	f7e1 fd70 	bl	8000b38 <__aeabi_dcmpgt>
 801f058:	2800      	cmp	r0, #0
 801f05a:	f040 8296 	bne.w	801f58a <_dtoa_r+0x992>
 801f05e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f062:	4630      	mov	r0, r6
 801f064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f068:	4639      	mov	r1, r7
 801f06a:	f7e1 fd47 	bl	8000afc <__aeabi_dcmplt>
 801f06e:	2800      	cmp	r0, #0
 801f070:	f040 8288 	bne.w	801f584 <_dtoa_r+0x98c>
 801f074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f078:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f07c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f07e:	2b00      	cmp	r3, #0
 801f080:	f2c0 8158 	blt.w	801f334 <_dtoa_r+0x73c>
 801f084:	f1ba 0f0e 	cmp.w	sl, #14
 801f088:	f300 8154 	bgt.w	801f334 <_dtoa_r+0x73c>
 801f08c:	4b6b      	ldr	r3, [pc, #428]	; (801f23c <_dtoa_r+0x644>)
 801f08e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f092:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f098:	2b00      	cmp	r3, #0
 801f09a:	f280 80e3 	bge.w	801f264 <_dtoa_r+0x66c>
 801f09e:	9b01      	ldr	r3, [sp, #4]
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	f300 80df 	bgt.w	801f264 <_dtoa_r+0x66c>
 801f0a6:	f040 826d 	bne.w	801f584 <_dtoa_r+0x98c>
 801f0aa:	4b69      	ldr	r3, [pc, #420]	; (801f250 <_dtoa_r+0x658>)
 801f0ac:	2200      	movs	r2, #0
 801f0ae:	4640      	mov	r0, r8
 801f0b0:	4649      	mov	r1, r9
 801f0b2:	f7e1 fab1 	bl	8000618 <__aeabi_dmul>
 801f0b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f0ba:	f7e1 fd33 	bl	8000b24 <__aeabi_dcmpge>
 801f0be:	9e01      	ldr	r6, [sp, #4]
 801f0c0:	4637      	mov	r7, r6
 801f0c2:	2800      	cmp	r0, #0
 801f0c4:	f040 8243 	bne.w	801f54e <_dtoa_r+0x956>
 801f0c8:	9d00      	ldr	r5, [sp, #0]
 801f0ca:	2331      	movs	r3, #49	; 0x31
 801f0cc:	f805 3b01 	strb.w	r3, [r5], #1
 801f0d0:	f10a 0a01 	add.w	sl, sl, #1
 801f0d4:	e23f      	b.n	801f556 <_dtoa_r+0x95e>
 801f0d6:	07f2      	lsls	r2, r6, #31
 801f0d8:	d505      	bpl.n	801f0e6 <_dtoa_r+0x4ee>
 801f0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f0de:	f7e1 fa9b 	bl	8000618 <__aeabi_dmul>
 801f0e2:	3501      	adds	r5, #1
 801f0e4:	2301      	movs	r3, #1
 801f0e6:	1076      	asrs	r6, r6, #1
 801f0e8:	3708      	adds	r7, #8
 801f0ea:	e76c      	b.n	801efc6 <_dtoa_r+0x3ce>
 801f0ec:	2502      	movs	r5, #2
 801f0ee:	e76f      	b.n	801efd0 <_dtoa_r+0x3d8>
 801f0f0:	9b01      	ldr	r3, [sp, #4]
 801f0f2:	f8cd a01c 	str.w	sl, [sp, #28]
 801f0f6:	930c      	str	r3, [sp, #48]	; 0x30
 801f0f8:	e78d      	b.n	801f016 <_dtoa_r+0x41e>
 801f0fa:	9900      	ldr	r1, [sp, #0]
 801f0fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f0fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f100:	4b4e      	ldr	r3, [pc, #312]	; (801f23c <_dtoa_r+0x644>)
 801f102:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f106:	4401      	add	r1, r0
 801f108:	9102      	str	r1, [sp, #8]
 801f10a:	9908      	ldr	r1, [sp, #32]
 801f10c:	eeb0 8a47 	vmov.f32	s16, s14
 801f110:	eef0 8a67 	vmov.f32	s17, s15
 801f114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f11c:	2900      	cmp	r1, #0
 801f11e:	d045      	beq.n	801f1ac <_dtoa_r+0x5b4>
 801f120:	494c      	ldr	r1, [pc, #304]	; (801f254 <_dtoa_r+0x65c>)
 801f122:	2000      	movs	r0, #0
 801f124:	f7e1 fba2 	bl	800086c <__aeabi_ddiv>
 801f128:	ec53 2b18 	vmov	r2, r3, d8
 801f12c:	f7e1 f8bc 	bl	80002a8 <__aeabi_dsub>
 801f130:	9d00      	ldr	r5, [sp, #0]
 801f132:	ec41 0b18 	vmov	d8, r0, r1
 801f136:	4639      	mov	r1, r7
 801f138:	4630      	mov	r0, r6
 801f13a:	f7e1 fd1d 	bl	8000b78 <__aeabi_d2iz>
 801f13e:	900c      	str	r0, [sp, #48]	; 0x30
 801f140:	f7e1 fa00 	bl	8000544 <__aeabi_i2d>
 801f144:	4602      	mov	r2, r0
 801f146:	460b      	mov	r3, r1
 801f148:	4630      	mov	r0, r6
 801f14a:	4639      	mov	r1, r7
 801f14c:	f7e1 f8ac 	bl	80002a8 <__aeabi_dsub>
 801f150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f152:	3330      	adds	r3, #48	; 0x30
 801f154:	f805 3b01 	strb.w	r3, [r5], #1
 801f158:	ec53 2b18 	vmov	r2, r3, d8
 801f15c:	4606      	mov	r6, r0
 801f15e:	460f      	mov	r7, r1
 801f160:	f7e1 fccc 	bl	8000afc <__aeabi_dcmplt>
 801f164:	2800      	cmp	r0, #0
 801f166:	d165      	bne.n	801f234 <_dtoa_r+0x63c>
 801f168:	4632      	mov	r2, r6
 801f16a:	463b      	mov	r3, r7
 801f16c:	4935      	ldr	r1, [pc, #212]	; (801f244 <_dtoa_r+0x64c>)
 801f16e:	2000      	movs	r0, #0
 801f170:	f7e1 f89a 	bl	80002a8 <__aeabi_dsub>
 801f174:	ec53 2b18 	vmov	r2, r3, d8
 801f178:	f7e1 fcc0 	bl	8000afc <__aeabi_dcmplt>
 801f17c:	2800      	cmp	r0, #0
 801f17e:	f040 80b9 	bne.w	801f2f4 <_dtoa_r+0x6fc>
 801f182:	9b02      	ldr	r3, [sp, #8]
 801f184:	429d      	cmp	r5, r3
 801f186:	f43f af75 	beq.w	801f074 <_dtoa_r+0x47c>
 801f18a:	4b2f      	ldr	r3, [pc, #188]	; (801f248 <_dtoa_r+0x650>)
 801f18c:	ec51 0b18 	vmov	r0, r1, d8
 801f190:	2200      	movs	r2, #0
 801f192:	f7e1 fa41 	bl	8000618 <__aeabi_dmul>
 801f196:	4b2c      	ldr	r3, [pc, #176]	; (801f248 <_dtoa_r+0x650>)
 801f198:	ec41 0b18 	vmov	d8, r0, r1
 801f19c:	2200      	movs	r2, #0
 801f19e:	4630      	mov	r0, r6
 801f1a0:	4639      	mov	r1, r7
 801f1a2:	f7e1 fa39 	bl	8000618 <__aeabi_dmul>
 801f1a6:	4606      	mov	r6, r0
 801f1a8:	460f      	mov	r7, r1
 801f1aa:	e7c4      	b.n	801f136 <_dtoa_r+0x53e>
 801f1ac:	ec51 0b17 	vmov	r0, r1, d7
 801f1b0:	f7e1 fa32 	bl	8000618 <__aeabi_dmul>
 801f1b4:	9b02      	ldr	r3, [sp, #8]
 801f1b6:	9d00      	ldr	r5, [sp, #0]
 801f1b8:	930c      	str	r3, [sp, #48]	; 0x30
 801f1ba:	ec41 0b18 	vmov	d8, r0, r1
 801f1be:	4639      	mov	r1, r7
 801f1c0:	4630      	mov	r0, r6
 801f1c2:	f7e1 fcd9 	bl	8000b78 <__aeabi_d2iz>
 801f1c6:	9011      	str	r0, [sp, #68]	; 0x44
 801f1c8:	f7e1 f9bc 	bl	8000544 <__aeabi_i2d>
 801f1cc:	4602      	mov	r2, r0
 801f1ce:	460b      	mov	r3, r1
 801f1d0:	4630      	mov	r0, r6
 801f1d2:	4639      	mov	r1, r7
 801f1d4:	f7e1 f868 	bl	80002a8 <__aeabi_dsub>
 801f1d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f1da:	3330      	adds	r3, #48	; 0x30
 801f1dc:	f805 3b01 	strb.w	r3, [r5], #1
 801f1e0:	9b02      	ldr	r3, [sp, #8]
 801f1e2:	429d      	cmp	r5, r3
 801f1e4:	4606      	mov	r6, r0
 801f1e6:	460f      	mov	r7, r1
 801f1e8:	f04f 0200 	mov.w	r2, #0
 801f1ec:	d134      	bne.n	801f258 <_dtoa_r+0x660>
 801f1ee:	4b19      	ldr	r3, [pc, #100]	; (801f254 <_dtoa_r+0x65c>)
 801f1f0:	ec51 0b18 	vmov	r0, r1, d8
 801f1f4:	f7e1 f85a 	bl	80002ac <__adddf3>
 801f1f8:	4602      	mov	r2, r0
 801f1fa:	460b      	mov	r3, r1
 801f1fc:	4630      	mov	r0, r6
 801f1fe:	4639      	mov	r1, r7
 801f200:	f7e1 fc9a 	bl	8000b38 <__aeabi_dcmpgt>
 801f204:	2800      	cmp	r0, #0
 801f206:	d175      	bne.n	801f2f4 <_dtoa_r+0x6fc>
 801f208:	ec53 2b18 	vmov	r2, r3, d8
 801f20c:	4911      	ldr	r1, [pc, #68]	; (801f254 <_dtoa_r+0x65c>)
 801f20e:	2000      	movs	r0, #0
 801f210:	f7e1 f84a 	bl	80002a8 <__aeabi_dsub>
 801f214:	4602      	mov	r2, r0
 801f216:	460b      	mov	r3, r1
 801f218:	4630      	mov	r0, r6
 801f21a:	4639      	mov	r1, r7
 801f21c:	f7e1 fc6e 	bl	8000afc <__aeabi_dcmplt>
 801f220:	2800      	cmp	r0, #0
 801f222:	f43f af27 	beq.w	801f074 <_dtoa_r+0x47c>
 801f226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f228:	1e6b      	subs	r3, r5, #1
 801f22a:	930c      	str	r3, [sp, #48]	; 0x30
 801f22c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f230:	2b30      	cmp	r3, #48	; 0x30
 801f232:	d0f8      	beq.n	801f226 <_dtoa_r+0x62e>
 801f234:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f238:	e04a      	b.n	801f2d0 <_dtoa_r+0x6d8>
 801f23a:	bf00      	nop
 801f23c:	08029a10 	.word	0x08029a10
 801f240:	080299e8 	.word	0x080299e8
 801f244:	3ff00000 	.word	0x3ff00000
 801f248:	40240000 	.word	0x40240000
 801f24c:	401c0000 	.word	0x401c0000
 801f250:	40140000 	.word	0x40140000
 801f254:	3fe00000 	.word	0x3fe00000
 801f258:	4baf      	ldr	r3, [pc, #700]	; (801f518 <_dtoa_r+0x920>)
 801f25a:	f7e1 f9dd 	bl	8000618 <__aeabi_dmul>
 801f25e:	4606      	mov	r6, r0
 801f260:	460f      	mov	r7, r1
 801f262:	e7ac      	b.n	801f1be <_dtoa_r+0x5c6>
 801f264:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f268:	9d00      	ldr	r5, [sp, #0]
 801f26a:	4642      	mov	r2, r8
 801f26c:	464b      	mov	r3, r9
 801f26e:	4630      	mov	r0, r6
 801f270:	4639      	mov	r1, r7
 801f272:	f7e1 fafb 	bl	800086c <__aeabi_ddiv>
 801f276:	f7e1 fc7f 	bl	8000b78 <__aeabi_d2iz>
 801f27a:	9002      	str	r0, [sp, #8]
 801f27c:	f7e1 f962 	bl	8000544 <__aeabi_i2d>
 801f280:	4642      	mov	r2, r8
 801f282:	464b      	mov	r3, r9
 801f284:	f7e1 f9c8 	bl	8000618 <__aeabi_dmul>
 801f288:	4602      	mov	r2, r0
 801f28a:	460b      	mov	r3, r1
 801f28c:	4630      	mov	r0, r6
 801f28e:	4639      	mov	r1, r7
 801f290:	f7e1 f80a 	bl	80002a8 <__aeabi_dsub>
 801f294:	9e02      	ldr	r6, [sp, #8]
 801f296:	9f01      	ldr	r7, [sp, #4]
 801f298:	3630      	adds	r6, #48	; 0x30
 801f29a:	f805 6b01 	strb.w	r6, [r5], #1
 801f29e:	9e00      	ldr	r6, [sp, #0]
 801f2a0:	1bae      	subs	r6, r5, r6
 801f2a2:	42b7      	cmp	r7, r6
 801f2a4:	4602      	mov	r2, r0
 801f2a6:	460b      	mov	r3, r1
 801f2a8:	d137      	bne.n	801f31a <_dtoa_r+0x722>
 801f2aa:	f7e0 ffff 	bl	80002ac <__adddf3>
 801f2ae:	4642      	mov	r2, r8
 801f2b0:	464b      	mov	r3, r9
 801f2b2:	4606      	mov	r6, r0
 801f2b4:	460f      	mov	r7, r1
 801f2b6:	f7e1 fc3f 	bl	8000b38 <__aeabi_dcmpgt>
 801f2ba:	b9c8      	cbnz	r0, 801f2f0 <_dtoa_r+0x6f8>
 801f2bc:	4642      	mov	r2, r8
 801f2be:	464b      	mov	r3, r9
 801f2c0:	4630      	mov	r0, r6
 801f2c2:	4639      	mov	r1, r7
 801f2c4:	f7e1 fc10 	bl	8000ae8 <__aeabi_dcmpeq>
 801f2c8:	b110      	cbz	r0, 801f2d0 <_dtoa_r+0x6d8>
 801f2ca:	9b02      	ldr	r3, [sp, #8]
 801f2cc:	07d9      	lsls	r1, r3, #31
 801f2ce:	d40f      	bmi.n	801f2f0 <_dtoa_r+0x6f8>
 801f2d0:	4620      	mov	r0, r4
 801f2d2:	4659      	mov	r1, fp
 801f2d4:	f000 ff50 	bl	8020178 <_Bfree>
 801f2d8:	2300      	movs	r3, #0
 801f2da:	702b      	strb	r3, [r5, #0]
 801f2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f2de:	f10a 0001 	add.w	r0, sl, #1
 801f2e2:	6018      	str	r0, [r3, #0]
 801f2e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	f43f acd8 	beq.w	801ec9c <_dtoa_r+0xa4>
 801f2ec:	601d      	str	r5, [r3, #0]
 801f2ee:	e4d5      	b.n	801ec9c <_dtoa_r+0xa4>
 801f2f0:	f8cd a01c 	str.w	sl, [sp, #28]
 801f2f4:	462b      	mov	r3, r5
 801f2f6:	461d      	mov	r5, r3
 801f2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f2fc:	2a39      	cmp	r2, #57	; 0x39
 801f2fe:	d108      	bne.n	801f312 <_dtoa_r+0x71a>
 801f300:	9a00      	ldr	r2, [sp, #0]
 801f302:	429a      	cmp	r2, r3
 801f304:	d1f7      	bne.n	801f2f6 <_dtoa_r+0x6fe>
 801f306:	9a07      	ldr	r2, [sp, #28]
 801f308:	9900      	ldr	r1, [sp, #0]
 801f30a:	3201      	adds	r2, #1
 801f30c:	9207      	str	r2, [sp, #28]
 801f30e:	2230      	movs	r2, #48	; 0x30
 801f310:	700a      	strb	r2, [r1, #0]
 801f312:	781a      	ldrb	r2, [r3, #0]
 801f314:	3201      	adds	r2, #1
 801f316:	701a      	strb	r2, [r3, #0]
 801f318:	e78c      	b.n	801f234 <_dtoa_r+0x63c>
 801f31a:	4b7f      	ldr	r3, [pc, #508]	; (801f518 <_dtoa_r+0x920>)
 801f31c:	2200      	movs	r2, #0
 801f31e:	f7e1 f97b 	bl	8000618 <__aeabi_dmul>
 801f322:	2200      	movs	r2, #0
 801f324:	2300      	movs	r3, #0
 801f326:	4606      	mov	r6, r0
 801f328:	460f      	mov	r7, r1
 801f32a:	f7e1 fbdd 	bl	8000ae8 <__aeabi_dcmpeq>
 801f32e:	2800      	cmp	r0, #0
 801f330:	d09b      	beq.n	801f26a <_dtoa_r+0x672>
 801f332:	e7cd      	b.n	801f2d0 <_dtoa_r+0x6d8>
 801f334:	9a08      	ldr	r2, [sp, #32]
 801f336:	2a00      	cmp	r2, #0
 801f338:	f000 80c4 	beq.w	801f4c4 <_dtoa_r+0x8cc>
 801f33c:	9a05      	ldr	r2, [sp, #20]
 801f33e:	2a01      	cmp	r2, #1
 801f340:	f300 80a8 	bgt.w	801f494 <_dtoa_r+0x89c>
 801f344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f346:	2a00      	cmp	r2, #0
 801f348:	f000 80a0 	beq.w	801f48c <_dtoa_r+0x894>
 801f34c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f350:	9e06      	ldr	r6, [sp, #24]
 801f352:	4645      	mov	r5, r8
 801f354:	9a04      	ldr	r2, [sp, #16]
 801f356:	2101      	movs	r1, #1
 801f358:	441a      	add	r2, r3
 801f35a:	4620      	mov	r0, r4
 801f35c:	4498      	add	r8, r3
 801f35e:	9204      	str	r2, [sp, #16]
 801f360:	f001 f810 	bl	8020384 <__i2b>
 801f364:	4607      	mov	r7, r0
 801f366:	2d00      	cmp	r5, #0
 801f368:	dd0b      	ble.n	801f382 <_dtoa_r+0x78a>
 801f36a:	9b04      	ldr	r3, [sp, #16]
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	dd08      	ble.n	801f382 <_dtoa_r+0x78a>
 801f370:	42ab      	cmp	r3, r5
 801f372:	9a04      	ldr	r2, [sp, #16]
 801f374:	bfa8      	it	ge
 801f376:	462b      	movge	r3, r5
 801f378:	eba8 0803 	sub.w	r8, r8, r3
 801f37c:	1aed      	subs	r5, r5, r3
 801f37e:	1ad3      	subs	r3, r2, r3
 801f380:	9304      	str	r3, [sp, #16]
 801f382:	9b06      	ldr	r3, [sp, #24]
 801f384:	b1fb      	cbz	r3, 801f3c6 <_dtoa_r+0x7ce>
 801f386:	9b08      	ldr	r3, [sp, #32]
 801f388:	2b00      	cmp	r3, #0
 801f38a:	f000 809f 	beq.w	801f4cc <_dtoa_r+0x8d4>
 801f38e:	2e00      	cmp	r6, #0
 801f390:	dd11      	ble.n	801f3b6 <_dtoa_r+0x7be>
 801f392:	4639      	mov	r1, r7
 801f394:	4632      	mov	r2, r6
 801f396:	4620      	mov	r0, r4
 801f398:	f001 f8b0 	bl	80204fc <__pow5mult>
 801f39c:	465a      	mov	r2, fp
 801f39e:	4601      	mov	r1, r0
 801f3a0:	4607      	mov	r7, r0
 801f3a2:	4620      	mov	r0, r4
 801f3a4:	f001 f804 	bl	80203b0 <__multiply>
 801f3a8:	4659      	mov	r1, fp
 801f3aa:	9007      	str	r0, [sp, #28]
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	f000 fee3 	bl	8020178 <_Bfree>
 801f3b2:	9b07      	ldr	r3, [sp, #28]
 801f3b4:	469b      	mov	fp, r3
 801f3b6:	9b06      	ldr	r3, [sp, #24]
 801f3b8:	1b9a      	subs	r2, r3, r6
 801f3ba:	d004      	beq.n	801f3c6 <_dtoa_r+0x7ce>
 801f3bc:	4659      	mov	r1, fp
 801f3be:	4620      	mov	r0, r4
 801f3c0:	f001 f89c 	bl	80204fc <__pow5mult>
 801f3c4:	4683      	mov	fp, r0
 801f3c6:	2101      	movs	r1, #1
 801f3c8:	4620      	mov	r0, r4
 801f3ca:	f000 ffdb 	bl	8020384 <__i2b>
 801f3ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	4606      	mov	r6, r0
 801f3d4:	dd7c      	ble.n	801f4d0 <_dtoa_r+0x8d8>
 801f3d6:	461a      	mov	r2, r3
 801f3d8:	4601      	mov	r1, r0
 801f3da:	4620      	mov	r0, r4
 801f3dc:	f001 f88e 	bl	80204fc <__pow5mult>
 801f3e0:	9b05      	ldr	r3, [sp, #20]
 801f3e2:	2b01      	cmp	r3, #1
 801f3e4:	4606      	mov	r6, r0
 801f3e6:	dd76      	ble.n	801f4d6 <_dtoa_r+0x8de>
 801f3e8:	2300      	movs	r3, #0
 801f3ea:	9306      	str	r3, [sp, #24]
 801f3ec:	6933      	ldr	r3, [r6, #16]
 801f3ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f3f2:	6918      	ldr	r0, [r3, #16]
 801f3f4:	f000 ff76 	bl	80202e4 <__hi0bits>
 801f3f8:	f1c0 0020 	rsb	r0, r0, #32
 801f3fc:	9b04      	ldr	r3, [sp, #16]
 801f3fe:	4418      	add	r0, r3
 801f400:	f010 001f 	ands.w	r0, r0, #31
 801f404:	f000 8086 	beq.w	801f514 <_dtoa_r+0x91c>
 801f408:	f1c0 0320 	rsb	r3, r0, #32
 801f40c:	2b04      	cmp	r3, #4
 801f40e:	dd7f      	ble.n	801f510 <_dtoa_r+0x918>
 801f410:	f1c0 001c 	rsb	r0, r0, #28
 801f414:	9b04      	ldr	r3, [sp, #16]
 801f416:	4403      	add	r3, r0
 801f418:	4480      	add	r8, r0
 801f41a:	4405      	add	r5, r0
 801f41c:	9304      	str	r3, [sp, #16]
 801f41e:	f1b8 0f00 	cmp.w	r8, #0
 801f422:	dd05      	ble.n	801f430 <_dtoa_r+0x838>
 801f424:	4659      	mov	r1, fp
 801f426:	4642      	mov	r2, r8
 801f428:	4620      	mov	r0, r4
 801f42a:	f001 f8c1 	bl	80205b0 <__lshift>
 801f42e:	4683      	mov	fp, r0
 801f430:	9b04      	ldr	r3, [sp, #16]
 801f432:	2b00      	cmp	r3, #0
 801f434:	dd05      	ble.n	801f442 <_dtoa_r+0x84a>
 801f436:	4631      	mov	r1, r6
 801f438:	461a      	mov	r2, r3
 801f43a:	4620      	mov	r0, r4
 801f43c:	f001 f8b8 	bl	80205b0 <__lshift>
 801f440:	4606      	mov	r6, r0
 801f442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f444:	2b00      	cmp	r3, #0
 801f446:	d069      	beq.n	801f51c <_dtoa_r+0x924>
 801f448:	4631      	mov	r1, r6
 801f44a:	4658      	mov	r0, fp
 801f44c:	f001 f91c 	bl	8020688 <__mcmp>
 801f450:	2800      	cmp	r0, #0
 801f452:	da63      	bge.n	801f51c <_dtoa_r+0x924>
 801f454:	2300      	movs	r3, #0
 801f456:	4659      	mov	r1, fp
 801f458:	220a      	movs	r2, #10
 801f45a:	4620      	mov	r0, r4
 801f45c:	f000 feae 	bl	80201bc <__multadd>
 801f460:	9b08      	ldr	r3, [sp, #32]
 801f462:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f466:	4683      	mov	fp, r0
 801f468:	2b00      	cmp	r3, #0
 801f46a:	f000 818f 	beq.w	801f78c <_dtoa_r+0xb94>
 801f46e:	4639      	mov	r1, r7
 801f470:	2300      	movs	r3, #0
 801f472:	220a      	movs	r2, #10
 801f474:	4620      	mov	r0, r4
 801f476:	f000 fea1 	bl	80201bc <__multadd>
 801f47a:	f1b9 0f00 	cmp.w	r9, #0
 801f47e:	4607      	mov	r7, r0
 801f480:	f300 808e 	bgt.w	801f5a0 <_dtoa_r+0x9a8>
 801f484:	9b05      	ldr	r3, [sp, #20]
 801f486:	2b02      	cmp	r3, #2
 801f488:	dc50      	bgt.n	801f52c <_dtoa_r+0x934>
 801f48a:	e089      	b.n	801f5a0 <_dtoa_r+0x9a8>
 801f48c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f48e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f492:	e75d      	b.n	801f350 <_dtoa_r+0x758>
 801f494:	9b01      	ldr	r3, [sp, #4]
 801f496:	1e5e      	subs	r6, r3, #1
 801f498:	9b06      	ldr	r3, [sp, #24]
 801f49a:	42b3      	cmp	r3, r6
 801f49c:	bfbf      	itttt	lt
 801f49e:	9b06      	ldrlt	r3, [sp, #24]
 801f4a0:	9606      	strlt	r6, [sp, #24]
 801f4a2:	1af2      	sublt	r2, r6, r3
 801f4a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f4a6:	bfb6      	itet	lt
 801f4a8:	189b      	addlt	r3, r3, r2
 801f4aa:	1b9e      	subge	r6, r3, r6
 801f4ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f4ae:	9b01      	ldr	r3, [sp, #4]
 801f4b0:	bfb8      	it	lt
 801f4b2:	2600      	movlt	r6, #0
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	bfb5      	itete	lt
 801f4b8:	eba8 0503 	sublt.w	r5, r8, r3
 801f4bc:	9b01      	ldrge	r3, [sp, #4]
 801f4be:	2300      	movlt	r3, #0
 801f4c0:	4645      	movge	r5, r8
 801f4c2:	e747      	b.n	801f354 <_dtoa_r+0x75c>
 801f4c4:	9e06      	ldr	r6, [sp, #24]
 801f4c6:	9f08      	ldr	r7, [sp, #32]
 801f4c8:	4645      	mov	r5, r8
 801f4ca:	e74c      	b.n	801f366 <_dtoa_r+0x76e>
 801f4cc:	9a06      	ldr	r2, [sp, #24]
 801f4ce:	e775      	b.n	801f3bc <_dtoa_r+0x7c4>
 801f4d0:	9b05      	ldr	r3, [sp, #20]
 801f4d2:	2b01      	cmp	r3, #1
 801f4d4:	dc18      	bgt.n	801f508 <_dtoa_r+0x910>
 801f4d6:	9b02      	ldr	r3, [sp, #8]
 801f4d8:	b9b3      	cbnz	r3, 801f508 <_dtoa_r+0x910>
 801f4da:	9b03      	ldr	r3, [sp, #12]
 801f4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f4e0:	b9a3      	cbnz	r3, 801f50c <_dtoa_r+0x914>
 801f4e2:	9b03      	ldr	r3, [sp, #12]
 801f4e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f4e8:	0d1b      	lsrs	r3, r3, #20
 801f4ea:	051b      	lsls	r3, r3, #20
 801f4ec:	b12b      	cbz	r3, 801f4fa <_dtoa_r+0x902>
 801f4ee:	9b04      	ldr	r3, [sp, #16]
 801f4f0:	3301      	adds	r3, #1
 801f4f2:	9304      	str	r3, [sp, #16]
 801f4f4:	f108 0801 	add.w	r8, r8, #1
 801f4f8:	2301      	movs	r3, #1
 801f4fa:	9306      	str	r3, [sp, #24]
 801f4fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	f47f af74 	bne.w	801f3ec <_dtoa_r+0x7f4>
 801f504:	2001      	movs	r0, #1
 801f506:	e779      	b.n	801f3fc <_dtoa_r+0x804>
 801f508:	2300      	movs	r3, #0
 801f50a:	e7f6      	b.n	801f4fa <_dtoa_r+0x902>
 801f50c:	9b02      	ldr	r3, [sp, #8]
 801f50e:	e7f4      	b.n	801f4fa <_dtoa_r+0x902>
 801f510:	d085      	beq.n	801f41e <_dtoa_r+0x826>
 801f512:	4618      	mov	r0, r3
 801f514:	301c      	adds	r0, #28
 801f516:	e77d      	b.n	801f414 <_dtoa_r+0x81c>
 801f518:	40240000 	.word	0x40240000
 801f51c:	9b01      	ldr	r3, [sp, #4]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	dc38      	bgt.n	801f594 <_dtoa_r+0x99c>
 801f522:	9b05      	ldr	r3, [sp, #20]
 801f524:	2b02      	cmp	r3, #2
 801f526:	dd35      	ble.n	801f594 <_dtoa_r+0x99c>
 801f528:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f52c:	f1b9 0f00 	cmp.w	r9, #0
 801f530:	d10d      	bne.n	801f54e <_dtoa_r+0x956>
 801f532:	4631      	mov	r1, r6
 801f534:	464b      	mov	r3, r9
 801f536:	2205      	movs	r2, #5
 801f538:	4620      	mov	r0, r4
 801f53a:	f000 fe3f 	bl	80201bc <__multadd>
 801f53e:	4601      	mov	r1, r0
 801f540:	4606      	mov	r6, r0
 801f542:	4658      	mov	r0, fp
 801f544:	f001 f8a0 	bl	8020688 <__mcmp>
 801f548:	2800      	cmp	r0, #0
 801f54a:	f73f adbd 	bgt.w	801f0c8 <_dtoa_r+0x4d0>
 801f54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f550:	9d00      	ldr	r5, [sp, #0]
 801f552:	ea6f 0a03 	mvn.w	sl, r3
 801f556:	f04f 0800 	mov.w	r8, #0
 801f55a:	4631      	mov	r1, r6
 801f55c:	4620      	mov	r0, r4
 801f55e:	f000 fe0b 	bl	8020178 <_Bfree>
 801f562:	2f00      	cmp	r7, #0
 801f564:	f43f aeb4 	beq.w	801f2d0 <_dtoa_r+0x6d8>
 801f568:	f1b8 0f00 	cmp.w	r8, #0
 801f56c:	d005      	beq.n	801f57a <_dtoa_r+0x982>
 801f56e:	45b8      	cmp	r8, r7
 801f570:	d003      	beq.n	801f57a <_dtoa_r+0x982>
 801f572:	4641      	mov	r1, r8
 801f574:	4620      	mov	r0, r4
 801f576:	f000 fdff 	bl	8020178 <_Bfree>
 801f57a:	4639      	mov	r1, r7
 801f57c:	4620      	mov	r0, r4
 801f57e:	f000 fdfb 	bl	8020178 <_Bfree>
 801f582:	e6a5      	b.n	801f2d0 <_dtoa_r+0x6d8>
 801f584:	2600      	movs	r6, #0
 801f586:	4637      	mov	r7, r6
 801f588:	e7e1      	b.n	801f54e <_dtoa_r+0x956>
 801f58a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f58c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f590:	4637      	mov	r7, r6
 801f592:	e599      	b.n	801f0c8 <_dtoa_r+0x4d0>
 801f594:	9b08      	ldr	r3, [sp, #32]
 801f596:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	f000 80fd 	beq.w	801f79a <_dtoa_r+0xba2>
 801f5a0:	2d00      	cmp	r5, #0
 801f5a2:	dd05      	ble.n	801f5b0 <_dtoa_r+0x9b8>
 801f5a4:	4639      	mov	r1, r7
 801f5a6:	462a      	mov	r2, r5
 801f5a8:	4620      	mov	r0, r4
 801f5aa:	f001 f801 	bl	80205b0 <__lshift>
 801f5ae:	4607      	mov	r7, r0
 801f5b0:	9b06      	ldr	r3, [sp, #24]
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d05c      	beq.n	801f670 <_dtoa_r+0xa78>
 801f5b6:	6879      	ldr	r1, [r7, #4]
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f000 fd9d 	bl	80200f8 <_Balloc>
 801f5be:	4605      	mov	r5, r0
 801f5c0:	b928      	cbnz	r0, 801f5ce <_dtoa_r+0x9d6>
 801f5c2:	4b80      	ldr	r3, [pc, #512]	; (801f7c4 <_dtoa_r+0xbcc>)
 801f5c4:	4602      	mov	r2, r0
 801f5c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f5ca:	f7ff bb2e 	b.w	801ec2a <_dtoa_r+0x32>
 801f5ce:	693a      	ldr	r2, [r7, #16]
 801f5d0:	3202      	adds	r2, #2
 801f5d2:	0092      	lsls	r2, r2, #2
 801f5d4:	f107 010c 	add.w	r1, r7, #12
 801f5d8:	300c      	adds	r0, #12
 801f5da:	f000 fd7f 	bl	80200dc <memcpy>
 801f5de:	2201      	movs	r2, #1
 801f5e0:	4629      	mov	r1, r5
 801f5e2:	4620      	mov	r0, r4
 801f5e4:	f000 ffe4 	bl	80205b0 <__lshift>
 801f5e8:	9b00      	ldr	r3, [sp, #0]
 801f5ea:	3301      	adds	r3, #1
 801f5ec:	9301      	str	r3, [sp, #4]
 801f5ee:	9b00      	ldr	r3, [sp, #0]
 801f5f0:	444b      	add	r3, r9
 801f5f2:	9307      	str	r3, [sp, #28]
 801f5f4:	9b02      	ldr	r3, [sp, #8]
 801f5f6:	f003 0301 	and.w	r3, r3, #1
 801f5fa:	46b8      	mov	r8, r7
 801f5fc:	9306      	str	r3, [sp, #24]
 801f5fe:	4607      	mov	r7, r0
 801f600:	9b01      	ldr	r3, [sp, #4]
 801f602:	4631      	mov	r1, r6
 801f604:	3b01      	subs	r3, #1
 801f606:	4658      	mov	r0, fp
 801f608:	9302      	str	r3, [sp, #8]
 801f60a:	f7ff fa67 	bl	801eadc <quorem>
 801f60e:	4603      	mov	r3, r0
 801f610:	3330      	adds	r3, #48	; 0x30
 801f612:	9004      	str	r0, [sp, #16]
 801f614:	4641      	mov	r1, r8
 801f616:	4658      	mov	r0, fp
 801f618:	9308      	str	r3, [sp, #32]
 801f61a:	f001 f835 	bl	8020688 <__mcmp>
 801f61e:	463a      	mov	r2, r7
 801f620:	4681      	mov	r9, r0
 801f622:	4631      	mov	r1, r6
 801f624:	4620      	mov	r0, r4
 801f626:	f001 f84b 	bl	80206c0 <__mdiff>
 801f62a:	68c2      	ldr	r2, [r0, #12]
 801f62c:	9b08      	ldr	r3, [sp, #32]
 801f62e:	4605      	mov	r5, r0
 801f630:	bb02      	cbnz	r2, 801f674 <_dtoa_r+0xa7c>
 801f632:	4601      	mov	r1, r0
 801f634:	4658      	mov	r0, fp
 801f636:	f001 f827 	bl	8020688 <__mcmp>
 801f63a:	9b08      	ldr	r3, [sp, #32]
 801f63c:	4602      	mov	r2, r0
 801f63e:	4629      	mov	r1, r5
 801f640:	4620      	mov	r0, r4
 801f642:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f646:	f000 fd97 	bl	8020178 <_Bfree>
 801f64a:	9b05      	ldr	r3, [sp, #20]
 801f64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f64e:	9d01      	ldr	r5, [sp, #4]
 801f650:	ea43 0102 	orr.w	r1, r3, r2
 801f654:	9b06      	ldr	r3, [sp, #24]
 801f656:	430b      	orrs	r3, r1
 801f658:	9b08      	ldr	r3, [sp, #32]
 801f65a:	d10d      	bne.n	801f678 <_dtoa_r+0xa80>
 801f65c:	2b39      	cmp	r3, #57	; 0x39
 801f65e:	d029      	beq.n	801f6b4 <_dtoa_r+0xabc>
 801f660:	f1b9 0f00 	cmp.w	r9, #0
 801f664:	dd01      	ble.n	801f66a <_dtoa_r+0xa72>
 801f666:	9b04      	ldr	r3, [sp, #16]
 801f668:	3331      	adds	r3, #49	; 0x31
 801f66a:	9a02      	ldr	r2, [sp, #8]
 801f66c:	7013      	strb	r3, [r2, #0]
 801f66e:	e774      	b.n	801f55a <_dtoa_r+0x962>
 801f670:	4638      	mov	r0, r7
 801f672:	e7b9      	b.n	801f5e8 <_dtoa_r+0x9f0>
 801f674:	2201      	movs	r2, #1
 801f676:	e7e2      	b.n	801f63e <_dtoa_r+0xa46>
 801f678:	f1b9 0f00 	cmp.w	r9, #0
 801f67c:	db06      	blt.n	801f68c <_dtoa_r+0xa94>
 801f67e:	9905      	ldr	r1, [sp, #20]
 801f680:	ea41 0909 	orr.w	r9, r1, r9
 801f684:	9906      	ldr	r1, [sp, #24]
 801f686:	ea59 0101 	orrs.w	r1, r9, r1
 801f68a:	d120      	bne.n	801f6ce <_dtoa_r+0xad6>
 801f68c:	2a00      	cmp	r2, #0
 801f68e:	ddec      	ble.n	801f66a <_dtoa_r+0xa72>
 801f690:	4659      	mov	r1, fp
 801f692:	2201      	movs	r2, #1
 801f694:	4620      	mov	r0, r4
 801f696:	9301      	str	r3, [sp, #4]
 801f698:	f000 ff8a 	bl	80205b0 <__lshift>
 801f69c:	4631      	mov	r1, r6
 801f69e:	4683      	mov	fp, r0
 801f6a0:	f000 fff2 	bl	8020688 <__mcmp>
 801f6a4:	2800      	cmp	r0, #0
 801f6a6:	9b01      	ldr	r3, [sp, #4]
 801f6a8:	dc02      	bgt.n	801f6b0 <_dtoa_r+0xab8>
 801f6aa:	d1de      	bne.n	801f66a <_dtoa_r+0xa72>
 801f6ac:	07da      	lsls	r2, r3, #31
 801f6ae:	d5dc      	bpl.n	801f66a <_dtoa_r+0xa72>
 801f6b0:	2b39      	cmp	r3, #57	; 0x39
 801f6b2:	d1d8      	bne.n	801f666 <_dtoa_r+0xa6e>
 801f6b4:	9a02      	ldr	r2, [sp, #8]
 801f6b6:	2339      	movs	r3, #57	; 0x39
 801f6b8:	7013      	strb	r3, [r2, #0]
 801f6ba:	462b      	mov	r3, r5
 801f6bc:	461d      	mov	r5, r3
 801f6be:	3b01      	subs	r3, #1
 801f6c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f6c4:	2a39      	cmp	r2, #57	; 0x39
 801f6c6:	d050      	beq.n	801f76a <_dtoa_r+0xb72>
 801f6c8:	3201      	adds	r2, #1
 801f6ca:	701a      	strb	r2, [r3, #0]
 801f6cc:	e745      	b.n	801f55a <_dtoa_r+0x962>
 801f6ce:	2a00      	cmp	r2, #0
 801f6d0:	dd03      	ble.n	801f6da <_dtoa_r+0xae2>
 801f6d2:	2b39      	cmp	r3, #57	; 0x39
 801f6d4:	d0ee      	beq.n	801f6b4 <_dtoa_r+0xabc>
 801f6d6:	3301      	adds	r3, #1
 801f6d8:	e7c7      	b.n	801f66a <_dtoa_r+0xa72>
 801f6da:	9a01      	ldr	r2, [sp, #4]
 801f6dc:	9907      	ldr	r1, [sp, #28]
 801f6de:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f6e2:	428a      	cmp	r2, r1
 801f6e4:	d02a      	beq.n	801f73c <_dtoa_r+0xb44>
 801f6e6:	4659      	mov	r1, fp
 801f6e8:	2300      	movs	r3, #0
 801f6ea:	220a      	movs	r2, #10
 801f6ec:	4620      	mov	r0, r4
 801f6ee:	f000 fd65 	bl	80201bc <__multadd>
 801f6f2:	45b8      	cmp	r8, r7
 801f6f4:	4683      	mov	fp, r0
 801f6f6:	f04f 0300 	mov.w	r3, #0
 801f6fa:	f04f 020a 	mov.w	r2, #10
 801f6fe:	4641      	mov	r1, r8
 801f700:	4620      	mov	r0, r4
 801f702:	d107      	bne.n	801f714 <_dtoa_r+0xb1c>
 801f704:	f000 fd5a 	bl	80201bc <__multadd>
 801f708:	4680      	mov	r8, r0
 801f70a:	4607      	mov	r7, r0
 801f70c:	9b01      	ldr	r3, [sp, #4]
 801f70e:	3301      	adds	r3, #1
 801f710:	9301      	str	r3, [sp, #4]
 801f712:	e775      	b.n	801f600 <_dtoa_r+0xa08>
 801f714:	f000 fd52 	bl	80201bc <__multadd>
 801f718:	4639      	mov	r1, r7
 801f71a:	4680      	mov	r8, r0
 801f71c:	2300      	movs	r3, #0
 801f71e:	220a      	movs	r2, #10
 801f720:	4620      	mov	r0, r4
 801f722:	f000 fd4b 	bl	80201bc <__multadd>
 801f726:	4607      	mov	r7, r0
 801f728:	e7f0      	b.n	801f70c <_dtoa_r+0xb14>
 801f72a:	f1b9 0f00 	cmp.w	r9, #0
 801f72e:	9a00      	ldr	r2, [sp, #0]
 801f730:	bfcc      	ite	gt
 801f732:	464d      	movgt	r5, r9
 801f734:	2501      	movle	r5, #1
 801f736:	4415      	add	r5, r2
 801f738:	f04f 0800 	mov.w	r8, #0
 801f73c:	4659      	mov	r1, fp
 801f73e:	2201      	movs	r2, #1
 801f740:	4620      	mov	r0, r4
 801f742:	9301      	str	r3, [sp, #4]
 801f744:	f000 ff34 	bl	80205b0 <__lshift>
 801f748:	4631      	mov	r1, r6
 801f74a:	4683      	mov	fp, r0
 801f74c:	f000 ff9c 	bl	8020688 <__mcmp>
 801f750:	2800      	cmp	r0, #0
 801f752:	dcb2      	bgt.n	801f6ba <_dtoa_r+0xac2>
 801f754:	d102      	bne.n	801f75c <_dtoa_r+0xb64>
 801f756:	9b01      	ldr	r3, [sp, #4]
 801f758:	07db      	lsls	r3, r3, #31
 801f75a:	d4ae      	bmi.n	801f6ba <_dtoa_r+0xac2>
 801f75c:	462b      	mov	r3, r5
 801f75e:	461d      	mov	r5, r3
 801f760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f764:	2a30      	cmp	r2, #48	; 0x30
 801f766:	d0fa      	beq.n	801f75e <_dtoa_r+0xb66>
 801f768:	e6f7      	b.n	801f55a <_dtoa_r+0x962>
 801f76a:	9a00      	ldr	r2, [sp, #0]
 801f76c:	429a      	cmp	r2, r3
 801f76e:	d1a5      	bne.n	801f6bc <_dtoa_r+0xac4>
 801f770:	f10a 0a01 	add.w	sl, sl, #1
 801f774:	2331      	movs	r3, #49	; 0x31
 801f776:	e779      	b.n	801f66c <_dtoa_r+0xa74>
 801f778:	4b13      	ldr	r3, [pc, #76]	; (801f7c8 <_dtoa_r+0xbd0>)
 801f77a:	f7ff baaf 	b.w	801ecdc <_dtoa_r+0xe4>
 801f77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f780:	2b00      	cmp	r3, #0
 801f782:	f47f aa86 	bne.w	801ec92 <_dtoa_r+0x9a>
 801f786:	4b11      	ldr	r3, [pc, #68]	; (801f7cc <_dtoa_r+0xbd4>)
 801f788:	f7ff baa8 	b.w	801ecdc <_dtoa_r+0xe4>
 801f78c:	f1b9 0f00 	cmp.w	r9, #0
 801f790:	dc03      	bgt.n	801f79a <_dtoa_r+0xba2>
 801f792:	9b05      	ldr	r3, [sp, #20]
 801f794:	2b02      	cmp	r3, #2
 801f796:	f73f aec9 	bgt.w	801f52c <_dtoa_r+0x934>
 801f79a:	9d00      	ldr	r5, [sp, #0]
 801f79c:	4631      	mov	r1, r6
 801f79e:	4658      	mov	r0, fp
 801f7a0:	f7ff f99c 	bl	801eadc <quorem>
 801f7a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f7a8:	f805 3b01 	strb.w	r3, [r5], #1
 801f7ac:	9a00      	ldr	r2, [sp, #0]
 801f7ae:	1aaa      	subs	r2, r5, r2
 801f7b0:	4591      	cmp	r9, r2
 801f7b2:	ddba      	ble.n	801f72a <_dtoa_r+0xb32>
 801f7b4:	4659      	mov	r1, fp
 801f7b6:	2300      	movs	r3, #0
 801f7b8:	220a      	movs	r2, #10
 801f7ba:	4620      	mov	r0, r4
 801f7bc:	f000 fcfe 	bl	80201bc <__multadd>
 801f7c0:	4683      	mov	fp, r0
 801f7c2:	e7eb      	b.n	801f79c <_dtoa_r+0xba4>
 801f7c4:	08029894 	.word	0x08029894
 801f7c8:	08029690 	.word	0x08029690
 801f7cc:	08029811 	.word	0x08029811

0801f7d0 <std>:
 801f7d0:	2300      	movs	r3, #0
 801f7d2:	b510      	push	{r4, lr}
 801f7d4:	4604      	mov	r4, r0
 801f7d6:	e9c0 3300 	strd	r3, r3, [r0]
 801f7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f7de:	6083      	str	r3, [r0, #8]
 801f7e0:	8181      	strh	r1, [r0, #12]
 801f7e2:	6643      	str	r3, [r0, #100]	; 0x64
 801f7e4:	81c2      	strh	r2, [r0, #14]
 801f7e6:	6183      	str	r3, [r0, #24]
 801f7e8:	4619      	mov	r1, r3
 801f7ea:	2208      	movs	r2, #8
 801f7ec:	305c      	adds	r0, #92	; 0x5c
 801f7ee:	f7fd fc07 	bl	801d000 <memset>
 801f7f2:	4b05      	ldr	r3, [pc, #20]	; (801f808 <std+0x38>)
 801f7f4:	6263      	str	r3, [r4, #36]	; 0x24
 801f7f6:	4b05      	ldr	r3, [pc, #20]	; (801f80c <std+0x3c>)
 801f7f8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f7fa:	4b05      	ldr	r3, [pc, #20]	; (801f810 <std+0x40>)
 801f7fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f7fe:	4b05      	ldr	r3, [pc, #20]	; (801f814 <std+0x44>)
 801f800:	6224      	str	r4, [r4, #32]
 801f802:	6323      	str	r3, [r4, #48]	; 0x30
 801f804:	bd10      	pop	{r4, pc}
 801f806:	bf00      	nop
 801f808:	08020ec9 	.word	0x08020ec9
 801f80c:	08020eeb 	.word	0x08020eeb
 801f810:	08020f23 	.word	0x08020f23
 801f814:	08020f47 	.word	0x08020f47

0801f818 <_cleanup_r>:
 801f818:	4901      	ldr	r1, [pc, #4]	; (801f820 <_cleanup_r+0x8>)
 801f81a:	f000 b8af 	b.w	801f97c <_fwalk_reent>
 801f81e:	bf00      	nop
 801f820:	0802129d 	.word	0x0802129d

0801f824 <__sfmoreglue>:
 801f824:	b570      	push	{r4, r5, r6, lr}
 801f826:	1e4a      	subs	r2, r1, #1
 801f828:	2568      	movs	r5, #104	; 0x68
 801f82a:	4355      	muls	r5, r2
 801f82c:	460e      	mov	r6, r1
 801f82e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f832:	f001 f97b 	bl	8020b2c <_malloc_r>
 801f836:	4604      	mov	r4, r0
 801f838:	b140      	cbz	r0, 801f84c <__sfmoreglue+0x28>
 801f83a:	2100      	movs	r1, #0
 801f83c:	e9c0 1600 	strd	r1, r6, [r0]
 801f840:	300c      	adds	r0, #12
 801f842:	60a0      	str	r0, [r4, #8]
 801f844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f848:	f7fd fbda 	bl	801d000 <memset>
 801f84c:	4620      	mov	r0, r4
 801f84e:	bd70      	pop	{r4, r5, r6, pc}

0801f850 <__sfp_lock_acquire>:
 801f850:	4801      	ldr	r0, [pc, #4]	; (801f858 <__sfp_lock_acquire+0x8>)
 801f852:	f000 bc26 	b.w	80200a2 <__retarget_lock_acquire_recursive>
 801f856:	bf00      	nop
 801f858:	2000a03c 	.word	0x2000a03c

0801f85c <__sfp_lock_release>:
 801f85c:	4801      	ldr	r0, [pc, #4]	; (801f864 <__sfp_lock_release+0x8>)
 801f85e:	f000 bc21 	b.w	80200a4 <__retarget_lock_release_recursive>
 801f862:	bf00      	nop
 801f864:	2000a03c 	.word	0x2000a03c

0801f868 <__sinit_lock_acquire>:
 801f868:	4801      	ldr	r0, [pc, #4]	; (801f870 <__sinit_lock_acquire+0x8>)
 801f86a:	f000 bc1a 	b.w	80200a2 <__retarget_lock_acquire_recursive>
 801f86e:	bf00      	nop
 801f870:	2000a03b 	.word	0x2000a03b

0801f874 <__sinit_lock_release>:
 801f874:	4801      	ldr	r0, [pc, #4]	; (801f87c <__sinit_lock_release+0x8>)
 801f876:	f000 bc15 	b.w	80200a4 <__retarget_lock_release_recursive>
 801f87a:	bf00      	nop
 801f87c:	2000a03b 	.word	0x2000a03b

0801f880 <__sinit>:
 801f880:	b510      	push	{r4, lr}
 801f882:	4604      	mov	r4, r0
 801f884:	f7ff fff0 	bl	801f868 <__sinit_lock_acquire>
 801f888:	69a3      	ldr	r3, [r4, #24]
 801f88a:	b11b      	cbz	r3, 801f894 <__sinit+0x14>
 801f88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f890:	f7ff bff0 	b.w	801f874 <__sinit_lock_release>
 801f894:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f898:	6523      	str	r3, [r4, #80]	; 0x50
 801f89a:	4b13      	ldr	r3, [pc, #76]	; (801f8e8 <__sinit+0x68>)
 801f89c:	4a13      	ldr	r2, [pc, #76]	; (801f8ec <__sinit+0x6c>)
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	62a2      	str	r2, [r4, #40]	; 0x28
 801f8a2:	42a3      	cmp	r3, r4
 801f8a4:	bf04      	itt	eq
 801f8a6:	2301      	moveq	r3, #1
 801f8a8:	61a3      	streq	r3, [r4, #24]
 801f8aa:	4620      	mov	r0, r4
 801f8ac:	f000 f820 	bl	801f8f0 <__sfp>
 801f8b0:	6060      	str	r0, [r4, #4]
 801f8b2:	4620      	mov	r0, r4
 801f8b4:	f000 f81c 	bl	801f8f0 <__sfp>
 801f8b8:	60a0      	str	r0, [r4, #8]
 801f8ba:	4620      	mov	r0, r4
 801f8bc:	f000 f818 	bl	801f8f0 <__sfp>
 801f8c0:	2200      	movs	r2, #0
 801f8c2:	60e0      	str	r0, [r4, #12]
 801f8c4:	2104      	movs	r1, #4
 801f8c6:	6860      	ldr	r0, [r4, #4]
 801f8c8:	f7ff ff82 	bl	801f7d0 <std>
 801f8cc:	68a0      	ldr	r0, [r4, #8]
 801f8ce:	2201      	movs	r2, #1
 801f8d0:	2109      	movs	r1, #9
 801f8d2:	f7ff ff7d 	bl	801f7d0 <std>
 801f8d6:	68e0      	ldr	r0, [r4, #12]
 801f8d8:	2202      	movs	r2, #2
 801f8da:	2112      	movs	r1, #18
 801f8dc:	f7ff ff78 	bl	801f7d0 <std>
 801f8e0:	2301      	movs	r3, #1
 801f8e2:	61a3      	str	r3, [r4, #24]
 801f8e4:	e7d2      	b.n	801f88c <__sinit+0xc>
 801f8e6:	bf00      	nop
 801f8e8:	0802967c 	.word	0x0802967c
 801f8ec:	0801f819 	.word	0x0801f819

0801f8f0 <__sfp>:
 801f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8f2:	4607      	mov	r7, r0
 801f8f4:	f7ff ffac 	bl	801f850 <__sfp_lock_acquire>
 801f8f8:	4b1e      	ldr	r3, [pc, #120]	; (801f974 <__sfp+0x84>)
 801f8fa:	681e      	ldr	r6, [r3, #0]
 801f8fc:	69b3      	ldr	r3, [r6, #24]
 801f8fe:	b913      	cbnz	r3, 801f906 <__sfp+0x16>
 801f900:	4630      	mov	r0, r6
 801f902:	f7ff ffbd 	bl	801f880 <__sinit>
 801f906:	3648      	adds	r6, #72	; 0x48
 801f908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f90c:	3b01      	subs	r3, #1
 801f90e:	d503      	bpl.n	801f918 <__sfp+0x28>
 801f910:	6833      	ldr	r3, [r6, #0]
 801f912:	b30b      	cbz	r3, 801f958 <__sfp+0x68>
 801f914:	6836      	ldr	r6, [r6, #0]
 801f916:	e7f7      	b.n	801f908 <__sfp+0x18>
 801f918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f91c:	b9d5      	cbnz	r5, 801f954 <__sfp+0x64>
 801f91e:	4b16      	ldr	r3, [pc, #88]	; (801f978 <__sfp+0x88>)
 801f920:	60e3      	str	r3, [r4, #12]
 801f922:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f926:	6665      	str	r5, [r4, #100]	; 0x64
 801f928:	f000 fbba 	bl	80200a0 <__retarget_lock_init_recursive>
 801f92c:	f7ff ff96 	bl	801f85c <__sfp_lock_release>
 801f930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f938:	6025      	str	r5, [r4, #0]
 801f93a:	61a5      	str	r5, [r4, #24]
 801f93c:	2208      	movs	r2, #8
 801f93e:	4629      	mov	r1, r5
 801f940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f944:	f7fd fb5c 	bl	801d000 <memset>
 801f948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f94c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f950:	4620      	mov	r0, r4
 801f952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f954:	3468      	adds	r4, #104	; 0x68
 801f956:	e7d9      	b.n	801f90c <__sfp+0x1c>
 801f958:	2104      	movs	r1, #4
 801f95a:	4638      	mov	r0, r7
 801f95c:	f7ff ff62 	bl	801f824 <__sfmoreglue>
 801f960:	4604      	mov	r4, r0
 801f962:	6030      	str	r0, [r6, #0]
 801f964:	2800      	cmp	r0, #0
 801f966:	d1d5      	bne.n	801f914 <__sfp+0x24>
 801f968:	f7ff ff78 	bl	801f85c <__sfp_lock_release>
 801f96c:	230c      	movs	r3, #12
 801f96e:	603b      	str	r3, [r7, #0]
 801f970:	e7ee      	b.n	801f950 <__sfp+0x60>
 801f972:	bf00      	nop
 801f974:	0802967c 	.word	0x0802967c
 801f978:	ffff0001 	.word	0xffff0001

0801f97c <_fwalk_reent>:
 801f97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f980:	4606      	mov	r6, r0
 801f982:	4688      	mov	r8, r1
 801f984:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f988:	2700      	movs	r7, #0
 801f98a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f98e:	f1b9 0901 	subs.w	r9, r9, #1
 801f992:	d505      	bpl.n	801f9a0 <_fwalk_reent+0x24>
 801f994:	6824      	ldr	r4, [r4, #0]
 801f996:	2c00      	cmp	r4, #0
 801f998:	d1f7      	bne.n	801f98a <_fwalk_reent+0xe>
 801f99a:	4638      	mov	r0, r7
 801f99c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9a0:	89ab      	ldrh	r3, [r5, #12]
 801f9a2:	2b01      	cmp	r3, #1
 801f9a4:	d907      	bls.n	801f9b6 <_fwalk_reent+0x3a>
 801f9a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f9aa:	3301      	adds	r3, #1
 801f9ac:	d003      	beq.n	801f9b6 <_fwalk_reent+0x3a>
 801f9ae:	4629      	mov	r1, r5
 801f9b0:	4630      	mov	r0, r6
 801f9b2:	47c0      	blx	r8
 801f9b4:	4307      	orrs	r7, r0
 801f9b6:	3568      	adds	r5, #104	; 0x68
 801f9b8:	e7e9      	b.n	801f98e <_fwalk_reent+0x12>

0801f9ba <rshift>:
 801f9ba:	6903      	ldr	r3, [r0, #16]
 801f9bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f9c4:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f9c8:	f100 0414 	add.w	r4, r0, #20
 801f9cc:	dd45      	ble.n	801fa5a <rshift+0xa0>
 801f9ce:	f011 011f 	ands.w	r1, r1, #31
 801f9d2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f9d6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f9da:	d10c      	bne.n	801f9f6 <rshift+0x3c>
 801f9dc:	f100 0710 	add.w	r7, r0, #16
 801f9e0:	4629      	mov	r1, r5
 801f9e2:	42b1      	cmp	r1, r6
 801f9e4:	d334      	bcc.n	801fa50 <rshift+0x96>
 801f9e6:	1a9b      	subs	r3, r3, r2
 801f9e8:	009b      	lsls	r3, r3, #2
 801f9ea:	1eea      	subs	r2, r5, #3
 801f9ec:	4296      	cmp	r6, r2
 801f9ee:	bf38      	it	cc
 801f9f0:	2300      	movcc	r3, #0
 801f9f2:	4423      	add	r3, r4
 801f9f4:	e015      	b.n	801fa22 <rshift+0x68>
 801f9f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f9fa:	f1c1 0820 	rsb	r8, r1, #32
 801f9fe:	40cf      	lsrs	r7, r1
 801fa00:	f105 0e04 	add.w	lr, r5, #4
 801fa04:	46a1      	mov	r9, r4
 801fa06:	4576      	cmp	r6, lr
 801fa08:	46f4      	mov	ip, lr
 801fa0a:	d815      	bhi.n	801fa38 <rshift+0x7e>
 801fa0c:	1a9b      	subs	r3, r3, r2
 801fa0e:	009a      	lsls	r2, r3, #2
 801fa10:	3a04      	subs	r2, #4
 801fa12:	3501      	adds	r5, #1
 801fa14:	42ae      	cmp	r6, r5
 801fa16:	bf38      	it	cc
 801fa18:	2200      	movcc	r2, #0
 801fa1a:	18a3      	adds	r3, r4, r2
 801fa1c:	50a7      	str	r7, [r4, r2]
 801fa1e:	b107      	cbz	r7, 801fa22 <rshift+0x68>
 801fa20:	3304      	adds	r3, #4
 801fa22:	1b1a      	subs	r2, r3, r4
 801fa24:	42a3      	cmp	r3, r4
 801fa26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801fa2a:	bf08      	it	eq
 801fa2c:	2300      	moveq	r3, #0
 801fa2e:	6102      	str	r2, [r0, #16]
 801fa30:	bf08      	it	eq
 801fa32:	6143      	streq	r3, [r0, #20]
 801fa34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa38:	f8dc c000 	ldr.w	ip, [ip]
 801fa3c:	fa0c fc08 	lsl.w	ip, ip, r8
 801fa40:	ea4c 0707 	orr.w	r7, ip, r7
 801fa44:	f849 7b04 	str.w	r7, [r9], #4
 801fa48:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fa4c:	40cf      	lsrs	r7, r1
 801fa4e:	e7da      	b.n	801fa06 <rshift+0x4c>
 801fa50:	f851 cb04 	ldr.w	ip, [r1], #4
 801fa54:	f847 cf04 	str.w	ip, [r7, #4]!
 801fa58:	e7c3      	b.n	801f9e2 <rshift+0x28>
 801fa5a:	4623      	mov	r3, r4
 801fa5c:	e7e1      	b.n	801fa22 <rshift+0x68>

0801fa5e <__hexdig_fun>:
 801fa5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fa62:	2b09      	cmp	r3, #9
 801fa64:	d802      	bhi.n	801fa6c <__hexdig_fun+0xe>
 801fa66:	3820      	subs	r0, #32
 801fa68:	b2c0      	uxtb	r0, r0
 801fa6a:	4770      	bx	lr
 801fa6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801fa70:	2b05      	cmp	r3, #5
 801fa72:	d801      	bhi.n	801fa78 <__hexdig_fun+0x1a>
 801fa74:	3847      	subs	r0, #71	; 0x47
 801fa76:	e7f7      	b.n	801fa68 <__hexdig_fun+0xa>
 801fa78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801fa7c:	2b05      	cmp	r3, #5
 801fa7e:	d801      	bhi.n	801fa84 <__hexdig_fun+0x26>
 801fa80:	3827      	subs	r0, #39	; 0x27
 801fa82:	e7f1      	b.n	801fa68 <__hexdig_fun+0xa>
 801fa84:	2000      	movs	r0, #0
 801fa86:	4770      	bx	lr

0801fa88 <__gethex>:
 801fa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa8c:	ed2d 8b02 	vpush	{d8}
 801fa90:	b089      	sub	sp, #36	; 0x24
 801fa92:	ee08 0a10 	vmov	s16, r0
 801fa96:	9304      	str	r3, [sp, #16]
 801fa98:	4bbc      	ldr	r3, [pc, #752]	; (801fd8c <__gethex+0x304>)
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	9301      	str	r3, [sp, #4]
 801fa9e:	4618      	mov	r0, r3
 801faa0:	468b      	mov	fp, r1
 801faa2:	4690      	mov	r8, r2
 801faa4:	f7e0 fba4 	bl	80001f0 <strlen>
 801faa8:	9b01      	ldr	r3, [sp, #4]
 801faaa:	f8db 2000 	ldr.w	r2, [fp]
 801faae:	4403      	add	r3, r0
 801fab0:	4682      	mov	sl, r0
 801fab2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fab6:	9305      	str	r3, [sp, #20]
 801fab8:	1c93      	adds	r3, r2, #2
 801faba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801fabe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801fac2:	32fe      	adds	r2, #254	; 0xfe
 801fac4:	18d1      	adds	r1, r2, r3
 801fac6:	461f      	mov	r7, r3
 801fac8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801facc:	9100      	str	r1, [sp, #0]
 801face:	2830      	cmp	r0, #48	; 0x30
 801fad0:	d0f8      	beq.n	801fac4 <__gethex+0x3c>
 801fad2:	f7ff ffc4 	bl	801fa5e <__hexdig_fun>
 801fad6:	4604      	mov	r4, r0
 801fad8:	2800      	cmp	r0, #0
 801fada:	d13a      	bne.n	801fb52 <__gethex+0xca>
 801fadc:	9901      	ldr	r1, [sp, #4]
 801fade:	4652      	mov	r2, sl
 801fae0:	4638      	mov	r0, r7
 801fae2:	f001 fa34 	bl	8020f4e <strncmp>
 801fae6:	4605      	mov	r5, r0
 801fae8:	2800      	cmp	r0, #0
 801faea:	d168      	bne.n	801fbbe <__gethex+0x136>
 801faec:	f817 000a 	ldrb.w	r0, [r7, sl]
 801faf0:	eb07 060a 	add.w	r6, r7, sl
 801faf4:	f7ff ffb3 	bl	801fa5e <__hexdig_fun>
 801faf8:	2800      	cmp	r0, #0
 801fafa:	d062      	beq.n	801fbc2 <__gethex+0x13a>
 801fafc:	4633      	mov	r3, r6
 801fafe:	7818      	ldrb	r0, [r3, #0]
 801fb00:	2830      	cmp	r0, #48	; 0x30
 801fb02:	461f      	mov	r7, r3
 801fb04:	f103 0301 	add.w	r3, r3, #1
 801fb08:	d0f9      	beq.n	801fafe <__gethex+0x76>
 801fb0a:	f7ff ffa8 	bl	801fa5e <__hexdig_fun>
 801fb0e:	2301      	movs	r3, #1
 801fb10:	fab0 f480 	clz	r4, r0
 801fb14:	0964      	lsrs	r4, r4, #5
 801fb16:	4635      	mov	r5, r6
 801fb18:	9300      	str	r3, [sp, #0]
 801fb1a:	463a      	mov	r2, r7
 801fb1c:	4616      	mov	r6, r2
 801fb1e:	3201      	adds	r2, #1
 801fb20:	7830      	ldrb	r0, [r6, #0]
 801fb22:	f7ff ff9c 	bl	801fa5e <__hexdig_fun>
 801fb26:	2800      	cmp	r0, #0
 801fb28:	d1f8      	bne.n	801fb1c <__gethex+0x94>
 801fb2a:	9901      	ldr	r1, [sp, #4]
 801fb2c:	4652      	mov	r2, sl
 801fb2e:	4630      	mov	r0, r6
 801fb30:	f001 fa0d 	bl	8020f4e <strncmp>
 801fb34:	b980      	cbnz	r0, 801fb58 <__gethex+0xd0>
 801fb36:	b94d      	cbnz	r5, 801fb4c <__gethex+0xc4>
 801fb38:	eb06 050a 	add.w	r5, r6, sl
 801fb3c:	462a      	mov	r2, r5
 801fb3e:	4616      	mov	r6, r2
 801fb40:	3201      	adds	r2, #1
 801fb42:	7830      	ldrb	r0, [r6, #0]
 801fb44:	f7ff ff8b 	bl	801fa5e <__hexdig_fun>
 801fb48:	2800      	cmp	r0, #0
 801fb4a:	d1f8      	bne.n	801fb3e <__gethex+0xb6>
 801fb4c:	1bad      	subs	r5, r5, r6
 801fb4e:	00ad      	lsls	r5, r5, #2
 801fb50:	e004      	b.n	801fb5c <__gethex+0xd4>
 801fb52:	2400      	movs	r4, #0
 801fb54:	4625      	mov	r5, r4
 801fb56:	e7e0      	b.n	801fb1a <__gethex+0x92>
 801fb58:	2d00      	cmp	r5, #0
 801fb5a:	d1f7      	bne.n	801fb4c <__gethex+0xc4>
 801fb5c:	7833      	ldrb	r3, [r6, #0]
 801fb5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fb62:	2b50      	cmp	r3, #80	; 0x50
 801fb64:	d13b      	bne.n	801fbde <__gethex+0x156>
 801fb66:	7873      	ldrb	r3, [r6, #1]
 801fb68:	2b2b      	cmp	r3, #43	; 0x2b
 801fb6a:	d02c      	beq.n	801fbc6 <__gethex+0x13e>
 801fb6c:	2b2d      	cmp	r3, #45	; 0x2d
 801fb6e:	d02e      	beq.n	801fbce <__gethex+0x146>
 801fb70:	1c71      	adds	r1, r6, #1
 801fb72:	f04f 0900 	mov.w	r9, #0
 801fb76:	7808      	ldrb	r0, [r1, #0]
 801fb78:	f7ff ff71 	bl	801fa5e <__hexdig_fun>
 801fb7c:	1e43      	subs	r3, r0, #1
 801fb7e:	b2db      	uxtb	r3, r3
 801fb80:	2b18      	cmp	r3, #24
 801fb82:	d82c      	bhi.n	801fbde <__gethex+0x156>
 801fb84:	f1a0 0210 	sub.w	r2, r0, #16
 801fb88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fb8c:	f7ff ff67 	bl	801fa5e <__hexdig_fun>
 801fb90:	1e43      	subs	r3, r0, #1
 801fb92:	b2db      	uxtb	r3, r3
 801fb94:	2b18      	cmp	r3, #24
 801fb96:	d91d      	bls.n	801fbd4 <__gethex+0x14c>
 801fb98:	f1b9 0f00 	cmp.w	r9, #0
 801fb9c:	d000      	beq.n	801fba0 <__gethex+0x118>
 801fb9e:	4252      	negs	r2, r2
 801fba0:	4415      	add	r5, r2
 801fba2:	f8cb 1000 	str.w	r1, [fp]
 801fba6:	b1e4      	cbz	r4, 801fbe2 <__gethex+0x15a>
 801fba8:	9b00      	ldr	r3, [sp, #0]
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	bf14      	ite	ne
 801fbae:	2700      	movne	r7, #0
 801fbb0:	2706      	moveq	r7, #6
 801fbb2:	4638      	mov	r0, r7
 801fbb4:	b009      	add	sp, #36	; 0x24
 801fbb6:	ecbd 8b02 	vpop	{d8}
 801fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbbe:	463e      	mov	r6, r7
 801fbc0:	4625      	mov	r5, r4
 801fbc2:	2401      	movs	r4, #1
 801fbc4:	e7ca      	b.n	801fb5c <__gethex+0xd4>
 801fbc6:	f04f 0900 	mov.w	r9, #0
 801fbca:	1cb1      	adds	r1, r6, #2
 801fbcc:	e7d3      	b.n	801fb76 <__gethex+0xee>
 801fbce:	f04f 0901 	mov.w	r9, #1
 801fbd2:	e7fa      	b.n	801fbca <__gethex+0x142>
 801fbd4:	230a      	movs	r3, #10
 801fbd6:	fb03 0202 	mla	r2, r3, r2, r0
 801fbda:	3a10      	subs	r2, #16
 801fbdc:	e7d4      	b.n	801fb88 <__gethex+0x100>
 801fbde:	4631      	mov	r1, r6
 801fbe0:	e7df      	b.n	801fba2 <__gethex+0x11a>
 801fbe2:	1bf3      	subs	r3, r6, r7
 801fbe4:	3b01      	subs	r3, #1
 801fbe6:	4621      	mov	r1, r4
 801fbe8:	2b07      	cmp	r3, #7
 801fbea:	dc0b      	bgt.n	801fc04 <__gethex+0x17c>
 801fbec:	ee18 0a10 	vmov	r0, s16
 801fbf0:	f000 fa82 	bl	80200f8 <_Balloc>
 801fbf4:	4604      	mov	r4, r0
 801fbf6:	b940      	cbnz	r0, 801fc0a <__gethex+0x182>
 801fbf8:	4b65      	ldr	r3, [pc, #404]	; (801fd90 <__gethex+0x308>)
 801fbfa:	4602      	mov	r2, r0
 801fbfc:	21de      	movs	r1, #222	; 0xde
 801fbfe:	4865      	ldr	r0, [pc, #404]	; (801fd94 <__gethex+0x30c>)
 801fc00:	f001 fa98 	bl	8021134 <__assert_func>
 801fc04:	3101      	adds	r1, #1
 801fc06:	105b      	asrs	r3, r3, #1
 801fc08:	e7ee      	b.n	801fbe8 <__gethex+0x160>
 801fc0a:	f100 0914 	add.w	r9, r0, #20
 801fc0e:	f04f 0b00 	mov.w	fp, #0
 801fc12:	f1ca 0301 	rsb	r3, sl, #1
 801fc16:	f8cd 9008 	str.w	r9, [sp, #8]
 801fc1a:	f8cd b000 	str.w	fp, [sp]
 801fc1e:	9306      	str	r3, [sp, #24]
 801fc20:	42b7      	cmp	r7, r6
 801fc22:	d340      	bcc.n	801fca6 <__gethex+0x21e>
 801fc24:	9802      	ldr	r0, [sp, #8]
 801fc26:	9b00      	ldr	r3, [sp, #0]
 801fc28:	f840 3b04 	str.w	r3, [r0], #4
 801fc2c:	eba0 0009 	sub.w	r0, r0, r9
 801fc30:	1080      	asrs	r0, r0, #2
 801fc32:	0146      	lsls	r6, r0, #5
 801fc34:	6120      	str	r0, [r4, #16]
 801fc36:	4618      	mov	r0, r3
 801fc38:	f000 fb54 	bl	80202e4 <__hi0bits>
 801fc3c:	1a30      	subs	r0, r6, r0
 801fc3e:	f8d8 6000 	ldr.w	r6, [r8]
 801fc42:	42b0      	cmp	r0, r6
 801fc44:	dd63      	ble.n	801fd0e <__gethex+0x286>
 801fc46:	1b87      	subs	r7, r0, r6
 801fc48:	4639      	mov	r1, r7
 801fc4a:	4620      	mov	r0, r4
 801fc4c:	f000 feee 	bl	8020a2c <__any_on>
 801fc50:	4682      	mov	sl, r0
 801fc52:	b1a8      	cbz	r0, 801fc80 <__gethex+0x1f8>
 801fc54:	1e7b      	subs	r3, r7, #1
 801fc56:	1159      	asrs	r1, r3, #5
 801fc58:	f003 021f 	and.w	r2, r3, #31
 801fc5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801fc60:	f04f 0a01 	mov.w	sl, #1
 801fc64:	fa0a f202 	lsl.w	r2, sl, r2
 801fc68:	420a      	tst	r2, r1
 801fc6a:	d009      	beq.n	801fc80 <__gethex+0x1f8>
 801fc6c:	4553      	cmp	r3, sl
 801fc6e:	dd05      	ble.n	801fc7c <__gethex+0x1f4>
 801fc70:	1eb9      	subs	r1, r7, #2
 801fc72:	4620      	mov	r0, r4
 801fc74:	f000 feda 	bl	8020a2c <__any_on>
 801fc78:	2800      	cmp	r0, #0
 801fc7a:	d145      	bne.n	801fd08 <__gethex+0x280>
 801fc7c:	f04f 0a02 	mov.w	sl, #2
 801fc80:	4639      	mov	r1, r7
 801fc82:	4620      	mov	r0, r4
 801fc84:	f7ff fe99 	bl	801f9ba <rshift>
 801fc88:	443d      	add	r5, r7
 801fc8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fc8e:	42ab      	cmp	r3, r5
 801fc90:	da4c      	bge.n	801fd2c <__gethex+0x2a4>
 801fc92:	ee18 0a10 	vmov	r0, s16
 801fc96:	4621      	mov	r1, r4
 801fc98:	f000 fa6e 	bl	8020178 <_Bfree>
 801fc9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc9e:	2300      	movs	r3, #0
 801fca0:	6013      	str	r3, [r2, #0]
 801fca2:	27a3      	movs	r7, #163	; 0xa3
 801fca4:	e785      	b.n	801fbb2 <__gethex+0x12a>
 801fca6:	1e73      	subs	r3, r6, #1
 801fca8:	9a05      	ldr	r2, [sp, #20]
 801fcaa:	9303      	str	r3, [sp, #12]
 801fcac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fcb0:	4293      	cmp	r3, r2
 801fcb2:	d019      	beq.n	801fce8 <__gethex+0x260>
 801fcb4:	f1bb 0f20 	cmp.w	fp, #32
 801fcb8:	d107      	bne.n	801fcca <__gethex+0x242>
 801fcba:	9b02      	ldr	r3, [sp, #8]
 801fcbc:	9a00      	ldr	r2, [sp, #0]
 801fcbe:	f843 2b04 	str.w	r2, [r3], #4
 801fcc2:	9302      	str	r3, [sp, #8]
 801fcc4:	2300      	movs	r3, #0
 801fcc6:	9300      	str	r3, [sp, #0]
 801fcc8:	469b      	mov	fp, r3
 801fcca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fcce:	f7ff fec6 	bl	801fa5e <__hexdig_fun>
 801fcd2:	9b00      	ldr	r3, [sp, #0]
 801fcd4:	f000 000f 	and.w	r0, r0, #15
 801fcd8:	fa00 f00b 	lsl.w	r0, r0, fp
 801fcdc:	4303      	orrs	r3, r0
 801fcde:	9300      	str	r3, [sp, #0]
 801fce0:	f10b 0b04 	add.w	fp, fp, #4
 801fce4:	9b03      	ldr	r3, [sp, #12]
 801fce6:	e00d      	b.n	801fd04 <__gethex+0x27c>
 801fce8:	9b03      	ldr	r3, [sp, #12]
 801fcea:	9a06      	ldr	r2, [sp, #24]
 801fcec:	4413      	add	r3, r2
 801fcee:	42bb      	cmp	r3, r7
 801fcf0:	d3e0      	bcc.n	801fcb4 <__gethex+0x22c>
 801fcf2:	4618      	mov	r0, r3
 801fcf4:	9901      	ldr	r1, [sp, #4]
 801fcf6:	9307      	str	r3, [sp, #28]
 801fcf8:	4652      	mov	r2, sl
 801fcfa:	f001 f928 	bl	8020f4e <strncmp>
 801fcfe:	9b07      	ldr	r3, [sp, #28]
 801fd00:	2800      	cmp	r0, #0
 801fd02:	d1d7      	bne.n	801fcb4 <__gethex+0x22c>
 801fd04:	461e      	mov	r6, r3
 801fd06:	e78b      	b.n	801fc20 <__gethex+0x198>
 801fd08:	f04f 0a03 	mov.w	sl, #3
 801fd0c:	e7b8      	b.n	801fc80 <__gethex+0x1f8>
 801fd0e:	da0a      	bge.n	801fd26 <__gethex+0x29e>
 801fd10:	1a37      	subs	r7, r6, r0
 801fd12:	4621      	mov	r1, r4
 801fd14:	ee18 0a10 	vmov	r0, s16
 801fd18:	463a      	mov	r2, r7
 801fd1a:	f000 fc49 	bl	80205b0 <__lshift>
 801fd1e:	1bed      	subs	r5, r5, r7
 801fd20:	4604      	mov	r4, r0
 801fd22:	f100 0914 	add.w	r9, r0, #20
 801fd26:	f04f 0a00 	mov.w	sl, #0
 801fd2a:	e7ae      	b.n	801fc8a <__gethex+0x202>
 801fd2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fd30:	42a8      	cmp	r0, r5
 801fd32:	dd72      	ble.n	801fe1a <__gethex+0x392>
 801fd34:	1b45      	subs	r5, r0, r5
 801fd36:	42ae      	cmp	r6, r5
 801fd38:	dc36      	bgt.n	801fda8 <__gethex+0x320>
 801fd3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fd3e:	2b02      	cmp	r3, #2
 801fd40:	d02a      	beq.n	801fd98 <__gethex+0x310>
 801fd42:	2b03      	cmp	r3, #3
 801fd44:	d02c      	beq.n	801fda0 <__gethex+0x318>
 801fd46:	2b01      	cmp	r3, #1
 801fd48:	d115      	bne.n	801fd76 <__gethex+0x2ee>
 801fd4a:	42ae      	cmp	r6, r5
 801fd4c:	d113      	bne.n	801fd76 <__gethex+0x2ee>
 801fd4e:	2e01      	cmp	r6, #1
 801fd50:	d10b      	bne.n	801fd6a <__gethex+0x2e2>
 801fd52:	9a04      	ldr	r2, [sp, #16]
 801fd54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fd58:	6013      	str	r3, [r2, #0]
 801fd5a:	2301      	movs	r3, #1
 801fd5c:	6123      	str	r3, [r4, #16]
 801fd5e:	f8c9 3000 	str.w	r3, [r9]
 801fd62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fd64:	2762      	movs	r7, #98	; 0x62
 801fd66:	601c      	str	r4, [r3, #0]
 801fd68:	e723      	b.n	801fbb2 <__gethex+0x12a>
 801fd6a:	1e71      	subs	r1, r6, #1
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	f000 fe5d 	bl	8020a2c <__any_on>
 801fd72:	2800      	cmp	r0, #0
 801fd74:	d1ed      	bne.n	801fd52 <__gethex+0x2ca>
 801fd76:	ee18 0a10 	vmov	r0, s16
 801fd7a:	4621      	mov	r1, r4
 801fd7c:	f000 f9fc 	bl	8020178 <_Bfree>
 801fd80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd82:	2300      	movs	r3, #0
 801fd84:	6013      	str	r3, [r2, #0]
 801fd86:	2750      	movs	r7, #80	; 0x50
 801fd88:	e713      	b.n	801fbb2 <__gethex+0x12a>
 801fd8a:	bf00      	nop
 801fd8c:	08029974 	.word	0x08029974
 801fd90:	08029894 	.word	0x08029894
 801fd94:	08029908 	.word	0x08029908
 801fd98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	d1eb      	bne.n	801fd76 <__gethex+0x2ee>
 801fd9e:	e7d8      	b.n	801fd52 <__gethex+0x2ca>
 801fda0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d1d5      	bne.n	801fd52 <__gethex+0x2ca>
 801fda6:	e7e6      	b.n	801fd76 <__gethex+0x2ee>
 801fda8:	1e6f      	subs	r7, r5, #1
 801fdaa:	f1ba 0f00 	cmp.w	sl, #0
 801fdae:	d131      	bne.n	801fe14 <__gethex+0x38c>
 801fdb0:	b127      	cbz	r7, 801fdbc <__gethex+0x334>
 801fdb2:	4639      	mov	r1, r7
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f000 fe39 	bl	8020a2c <__any_on>
 801fdba:	4682      	mov	sl, r0
 801fdbc:	117b      	asrs	r3, r7, #5
 801fdbe:	2101      	movs	r1, #1
 801fdc0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fdc4:	f007 071f 	and.w	r7, r7, #31
 801fdc8:	fa01 f707 	lsl.w	r7, r1, r7
 801fdcc:	421f      	tst	r7, r3
 801fdce:	4629      	mov	r1, r5
 801fdd0:	4620      	mov	r0, r4
 801fdd2:	bf18      	it	ne
 801fdd4:	f04a 0a02 	orrne.w	sl, sl, #2
 801fdd8:	1b76      	subs	r6, r6, r5
 801fdda:	f7ff fdee 	bl	801f9ba <rshift>
 801fdde:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801fde2:	2702      	movs	r7, #2
 801fde4:	f1ba 0f00 	cmp.w	sl, #0
 801fde8:	d048      	beq.n	801fe7c <__gethex+0x3f4>
 801fdea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fdee:	2b02      	cmp	r3, #2
 801fdf0:	d015      	beq.n	801fe1e <__gethex+0x396>
 801fdf2:	2b03      	cmp	r3, #3
 801fdf4:	d017      	beq.n	801fe26 <__gethex+0x39e>
 801fdf6:	2b01      	cmp	r3, #1
 801fdf8:	d109      	bne.n	801fe0e <__gethex+0x386>
 801fdfa:	f01a 0f02 	tst.w	sl, #2
 801fdfe:	d006      	beq.n	801fe0e <__gethex+0x386>
 801fe00:	f8d9 0000 	ldr.w	r0, [r9]
 801fe04:	ea4a 0a00 	orr.w	sl, sl, r0
 801fe08:	f01a 0f01 	tst.w	sl, #1
 801fe0c:	d10e      	bne.n	801fe2c <__gethex+0x3a4>
 801fe0e:	f047 0710 	orr.w	r7, r7, #16
 801fe12:	e033      	b.n	801fe7c <__gethex+0x3f4>
 801fe14:	f04f 0a01 	mov.w	sl, #1
 801fe18:	e7d0      	b.n	801fdbc <__gethex+0x334>
 801fe1a:	2701      	movs	r7, #1
 801fe1c:	e7e2      	b.n	801fde4 <__gethex+0x35c>
 801fe1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fe20:	f1c3 0301 	rsb	r3, r3, #1
 801fe24:	9315      	str	r3, [sp, #84]	; 0x54
 801fe26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d0f0      	beq.n	801fe0e <__gethex+0x386>
 801fe2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801fe30:	f104 0314 	add.w	r3, r4, #20
 801fe34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801fe38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801fe3c:	f04f 0c00 	mov.w	ip, #0
 801fe40:	4618      	mov	r0, r3
 801fe42:	f853 2b04 	ldr.w	r2, [r3], #4
 801fe46:	f1b2 3fff 	cmp.w	r2, #4294967295
 801fe4a:	d01c      	beq.n	801fe86 <__gethex+0x3fe>
 801fe4c:	3201      	adds	r2, #1
 801fe4e:	6002      	str	r2, [r0, #0]
 801fe50:	2f02      	cmp	r7, #2
 801fe52:	f104 0314 	add.w	r3, r4, #20
 801fe56:	d13f      	bne.n	801fed8 <__gethex+0x450>
 801fe58:	f8d8 2000 	ldr.w	r2, [r8]
 801fe5c:	3a01      	subs	r2, #1
 801fe5e:	42b2      	cmp	r2, r6
 801fe60:	d10a      	bne.n	801fe78 <__gethex+0x3f0>
 801fe62:	1171      	asrs	r1, r6, #5
 801fe64:	2201      	movs	r2, #1
 801fe66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801fe6a:	f006 061f 	and.w	r6, r6, #31
 801fe6e:	fa02 f606 	lsl.w	r6, r2, r6
 801fe72:	421e      	tst	r6, r3
 801fe74:	bf18      	it	ne
 801fe76:	4617      	movne	r7, r2
 801fe78:	f047 0720 	orr.w	r7, r7, #32
 801fe7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fe7e:	601c      	str	r4, [r3, #0]
 801fe80:	9b04      	ldr	r3, [sp, #16]
 801fe82:	601d      	str	r5, [r3, #0]
 801fe84:	e695      	b.n	801fbb2 <__gethex+0x12a>
 801fe86:	4299      	cmp	r1, r3
 801fe88:	f843 cc04 	str.w	ip, [r3, #-4]
 801fe8c:	d8d8      	bhi.n	801fe40 <__gethex+0x3b8>
 801fe8e:	68a3      	ldr	r3, [r4, #8]
 801fe90:	459b      	cmp	fp, r3
 801fe92:	db19      	blt.n	801fec8 <__gethex+0x440>
 801fe94:	6861      	ldr	r1, [r4, #4]
 801fe96:	ee18 0a10 	vmov	r0, s16
 801fe9a:	3101      	adds	r1, #1
 801fe9c:	f000 f92c 	bl	80200f8 <_Balloc>
 801fea0:	4681      	mov	r9, r0
 801fea2:	b918      	cbnz	r0, 801feac <__gethex+0x424>
 801fea4:	4b1a      	ldr	r3, [pc, #104]	; (801ff10 <__gethex+0x488>)
 801fea6:	4602      	mov	r2, r0
 801fea8:	2184      	movs	r1, #132	; 0x84
 801feaa:	e6a8      	b.n	801fbfe <__gethex+0x176>
 801feac:	6922      	ldr	r2, [r4, #16]
 801feae:	3202      	adds	r2, #2
 801feb0:	f104 010c 	add.w	r1, r4, #12
 801feb4:	0092      	lsls	r2, r2, #2
 801feb6:	300c      	adds	r0, #12
 801feb8:	f000 f910 	bl	80200dc <memcpy>
 801febc:	4621      	mov	r1, r4
 801febe:	ee18 0a10 	vmov	r0, s16
 801fec2:	f000 f959 	bl	8020178 <_Bfree>
 801fec6:	464c      	mov	r4, r9
 801fec8:	6923      	ldr	r3, [r4, #16]
 801feca:	1c5a      	adds	r2, r3, #1
 801fecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fed0:	6122      	str	r2, [r4, #16]
 801fed2:	2201      	movs	r2, #1
 801fed4:	615a      	str	r2, [r3, #20]
 801fed6:	e7bb      	b.n	801fe50 <__gethex+0x3c8>
 801fed8:	6922      	ldr	r2, [r4, #16]
 801feda:	455a      	cmp	r2, fp
 801fedc:	dd0b      	ble.n	801fef6 <__gethex+0x46e>
 801fede:	2101      	movs	r1, #1
 801fee0:	4620      	mov	r0, r4
 801fee2:	f7ff fd6a 	bl	801f9ba <rshift>
 801fee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801feea:	3501      	adds	r5, #1
 801feec:	42ab      	cmp	r3, r5
 801feee:	f6ff aed0 	blt.w	801fc92 <__gethex+0x20a>
 801fef2:	2701      	movs	r7, #1
 801fef4:	e7c0      	b.n	801fe78 <__gethex+0x3f0>
 801fef6:	f016 061f 	ands.w	r6, r6, #31
 801fefa:	d0fa      	beq.n	801fef2 <__gethex+0x46a>
 801fefc:	449a      	add	sl, r3
 801fefe:	f1c6 0620 	rsb	r6, r6, #32
 801ff02:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801ff06:	f000 f9ed 	bl	80202e4 <__hi0bits>
 801ff0a:	42b0      	cmp	r0, r6
 801ff0c:	dbe7      	blt.n	801fede <__gethex+0x456>
 801ff0e:	e7f0      	b.n	801fef2 <__gethex+0x46a>
 801ff10:	08029894 	.word	0x08029894

0801ff14 <L_shift>:
 801ff14:	f1c2 0208 	rsb	r2, r2, #8
 801ff18:	0092      	lsls	r2, r2, #2
 801ff1a:	b570      	push	{r4, r5, r6, lr}
 801ff1c:	f1c2 0620 	rsb	r6, r2, #32
 801ff20:	6843      	ldr	r3, [r0, #4]
 801ff22:	6804      	ldr	r4, [r0, #0]
 801ff24:	fa03 f506 	lsl.w	r5, r3, r6
 801ff28:	432c      	orrs	r4, r5
 801ff2a:	40d3      	lsrs	r3, r2
 801ff2c:	6004      	str	r4, [r0, #0]
 801ff2e:	f840 3f04 	str.w	r3, [r0, #4]!
 801ff32:	4288      	cmp	r0, r1
 801ff34:	d3f4      	bcc.n	801ff20 <L_shift+0xc>
 801ff36:	bd70      	pop	{r4, r5, r6, pc}

0801ff38 <__match>:
 801ff38:	b530      	push	{r4, r5, lr}
 801ff3a:	6803      	ldr	r3, [r0, #0]
 801ff3c:	3301      	adds	r3, #1
 801ff3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ff42:	b914      	cbnz	r4, 801ff4a <__match+0x12>
 801ff44:	6003      	str	r3, [r0, #0]
 801ff46:	2001      	movs	r0, #1
 801ff48:	bd30      	pop	{r4, r5, pc}
 801ff4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ff52:	2d19      	cmp	r5, #25
 801ff54:	bf98      	it	ls
 801ff56:	3220      	addls	r2, #32
 801ff58:	42a2      	cmp	r2, r4
 801ff5a:	d0f0      	beq.n	801ff3e <__match+0x6>
 801ff5c:	2000      	movs	r0, #0
 801ff5e:	e7f3      	b.n	801ff48 <__match+0x10>

0801ff60 <__hexnan>:
 801ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff64:	680b      	ldr	r3, [r1, #0]
 801ff66:	6801      	ldr	r1, [r0, #0]
 801ff68:	115e      	asrs	r6, r3, #5
 801ff6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ff6e:	f013 031f 	ands.w	r3, r3, #31
 801ff72:	b087      	sub	sp, #28
 801ff74:	bf18      	it	ne
 801ff76:	3604      	addne	r6, #4
 801ff78:	2500      	movs	r5, #0
 801ff7a:	1f37      	subs	r7, r6, #4
 801ff7c:	4682      	mov	sl, r0
 801ff7e:	4690      	mov	r8, r2
 801ff80:	9301      	str	r3, [sp, #4]
 801ff82:	f846 5c04 	str.w	r5, [r6, #-4]
 801ff86:	46b9      	mov	r9, r7
 801ff88:	463c      	mov	r4, r7
 801ff8a:	9502      	str	r5, [sp, #8]
 801ff8c:	46ab      	mov	fp, r5
 801ff8e:	784a      	ldrb	r2, [r1, #1]
 801ff90:	1c4b      	adds	r3, r1, #1
 801ff92:	9303      	str	r3, [sp, #12]
 801ff94:	b342      	cbz	r2, 801ffe8 <__hexnan+0x88>
 801ff96:	4610      	mov	r0, r2
 801ff98:	9105      	str	r1, [sp, #20]
 801ff9a:	9204      	str	r2, [sp, #16]
 801ff9c:	f7ff fd5f 	bl	801fa5e <__hexdig_fun>
 801ffa0:	2800      	cmp	r0, #0
 801ffa2:	d14f      	bne.n	8020044 <__hexnan+0xe4>
 801ffa4:	9a04      	ldr	r2, [sp, #16]
 801ffa6:	9905      	ldr	r1, [sp, #20]
 801ffa8:	2a20      	cmp	r2, #32
 801ffaa:	d818      	bhi.n	801ffde <__hexnan+0x7e>
 801ffac:	9b02      	ldr	r3, [sp, #8]
 801ffae:	459b      	cmp	fp, r3
 801ffb0:	dd13      	ble.n	801ffda <__hexnan+0x7a>
 801ffb2:	454c      	cmp	r4, r9
 801ffb4:	d206      	bcs.n	801ffc4 <__hexnan+0x64>
 801ffb6:	2d07      	cmp	r5, #7
 801ffb8:	dc04      	bgt.n	801ffc4 <__hexnan+0x64>
 801ffba:	462a      	mov	r2, r5
 801ffbc:	4649      	mov	r1, r9
 801ffbe:	4620      	mov	r0, r4
 801ffc0:	f7ff ffa8 	bl	801ff14 <L_shift>
 801ffc4:	4544      	cmp	r4, r8
 801ffc6:	d950      	bls.n	802006a <__hexnan+0x10a>
 801ffc8:	2300      	movs	r3, #0
 801ffca:	f1a4 0904 	sub.w	r9, r4, #4
 801ffce:	f844 3c04 	str.w	r3, [r4, #-4]
 801ffd2:	f8cd b008 	str.w	fp, [sp, #8]
 801ffd6:	464c      	mov	r4, r9
 801ffd8:	461d      	mov	r5, r3
 801ffda:	9903      	ldr	r1, [sp, #12]
 801ffdc:	e7d7      	b.n	801ff8e <__hexnan+0x2e>
 801ffde:	2a29      	cmp	r2, #41	; 0x29
 801ffe0:	d156      	bne.n	8020090 <__hexnan+0x130>
 801ffe2:	3102      	adds	r1, #2
 801ffe4:	f8ca 1000 	str.w	r1, [sl]
 801ffe8:	f1bb 0f00 	cmp.w	fp, #0
 801ffec:	d050      	beq.n	8020090 <__hexnan+0x130>
 801ffee:	454c      	cmp	r4, r9
 801fff0:	d206      	bcs.n	8020000 <__hexnan+0xa0>
 801fff2:	2d07      	cmp	r5, #7
 801fff4:	dc04      	bgt.n	8020000 <__hexnan+0xa0>
 801fff6:	462a      	mov	r2, r5
 801fff8:	4649      	mov	r1, r9
 801fffa:	4620      	mov	r0, r4
 801fffc:	f7ff ff8a 	bl	801ff14 <L_shift>
 8020000:	4544      	cmp	r4, r8
 8020002:	d934      	bls.n	802006e <__hexnan+0x10e>
 8020004:	f1a8 0204 	sub.w	r2, r8, #4
 8020008:	4623      	mov	r3, r4
 802000a:	f853 1b04 	ldr.w	r1, [r3], #4
 802000e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020012:	429f      	cmp	r7, r3
 8020014:	d2f9      	bcs.n	802000a <__hexnan+0xaa>
 8020016:	1b3b      	subs	r3, r7, r4
 8020018:	f023 0303 	bic.w	r3, r3, #3
 802001c:	3304      	adds	r3, #4
 802001e:	3401      	adds	r4, #1
 8020020:	3e03      	subs	r6, #3
 8020022:	42b4      	cmp	r4, r6
 8020024:	bf88      	it	hi
 8020026:	2304      	movhi	r3, #4
 8020028:	4443      	add	r3, r8
 802002a:	2200      	movs	r2, #0
 802002c:	f843 2b04 	str.w	r2, [r3], #4
 8020030:	429f      	cmp	r7, r3
 8020032:	d2fb      	bcs.n	802002c <__hexnan+0xcc>
 8020034:	683b      	ldr	r3, [r7, #0]
 8020036:	b91b      	cbnz	r3, 8020040 <__hexnan+0xe0>
 8020038:	4547      	cmp	r7, r8
 802003a:	d127      	bne.n	802008c <__hexnan+0x12c>
 802003c:	2301      	movs	r3, #1
 802003e:	603b      	str	r3, [r7, #0]
 8020040:	2005      	movs	r0, #5
 8020042:	e026      	b.n	8020092 <__hexnan+0x132>
 8020044:	3501      	adds	r5, #1
 8020046:	2d08      	cmp	r5, #8
 8020048:	f10b 0b01 	add.w	fp, fp, #1
 802004c:	dd06      	ble.n	802005c <__hexnan+0xfc>
 802004e:	4544      	cmp	r4, r8
 8020050:	d9c3      	bls.n	801ffda <__hexnan+0x7a>
 8020052:	2300      	movs	r3, #0
 8020054:	f844 3c04 	str.w	r3, [r4, #-4]
 8020058:	2501      	movs	r5, #1
 802005a:	3c04      	subs	r4, #4
 802005c:	6822      	ldr	r2, [r4, #0]
 802005e:	f000 000f 	and.w	r0, r0, #15
 8020062:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8020066:	6022      	str	r2, [r4, #0]
 8020068:	e7b7      	b.n	801ffda <__hexnan+0x7a>
 802006a:	2508      	movs	r5, #8
 802006c:	e7b5      	b.n	801ffda <__hexnan+0x7a>
 802006e:	9b01      	ldr	r3, [sp, #4]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d0df      	beq.n	8020034 <__hexnan+0xd4>
 8020074:	f04f 32ff 	mov.w	r2, #4294967295
 8020078:	f1c3 0320 	rsb	r3, r3, #32
 802007c:	fa22 f303 	lsr.w	r3, r2, r3
 8020080:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020084:	401a      	ands	r2, r3
 8020086:	f846 2c04 	str.w	r2, [r6, #-4]
 802008a:	e7d3      	b.n	8020034 <__hexnan+0xd4>
 802008c:	3f04      	subs	r7, #4
 802008e:	e7d1      	b.n	8020034 <__hexnan+0xd4>
 8020090:	2004      	movs	r0, #4
 8020092:	b007      	add	sp, #28
 8020094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020098 <_localeconv_r>:
 8020098:	4800      	ldr	r0, [pc, #0]	; (802009c <_localeconv_r+0x4>)
 802009a:	4770      	bx	lr
 802009c:	20000784 	.word	0x20000784

080200a0 <__retarget_lock_init_recursive>:
 80200a0:	4770      	bx	lr

080200a2 <__retarget_lock_acquire_recursive>:
 80200a2:	4770      	bx	lr

080200a4 <__retarget_lock_release_recursive>:
 80200a4:	4770      	bx	lr
	...

080200a8 <malloc>:
 80200a8:	4b02      	ldr	r3, [pc, #8]	; (80200b4 <malloc+0xc>)
 80200aa:	4601      	mov	r1, r0
 80200ac:	6818      	ldr	r0, [r3, #0]
 80200ae:	f000 bd3d 	b.w	8020b2c <_malloc_r>
 80200b2:	bf00      	nop
 80200b4:	2000062c 	.word	0x2000062c

080200b8 <__ascii_mbtowc>:
 80200b8:	b082      	sub	sp, #8
 80200ba:	b901      	cbnz	r1, 80200be <__ascii_mbtowc+0x6>
 80200bc:	a901      	add	r1, sp, #4
 80200be:	b142      	cbz	r2, 80200d2 <__ascii_mbtowc+0x1a>
 80200c0:	b14b      	cbz	r3, 80200d6 <__ascii_mbtowc+0x1e>
 80200c2:	7813      	ldrb	r3, [r2, #0]
 80200c4:	600b      	str	r3, [r1, #0]
 80200c6:	7812      	ldrb	r2, [r2, #0]
 80200c8:	1e10      	subs	r0, r2, #0
 80200ca:	bf18      	it	ne
 80200cc:	2001      	movne	r0, #1
 80200ce:	b002      	add	sp, #8
 80200d0:	4770      	bx	lr
 80200d2:	4610      	mov	r0, r2
 80200d4:	e7fb      	b.n	80200ce <__ascii_mbtowc+0x16>
 80200d6:	f06f 0001 	mvn.w	r0, #1
 80200da:	e7f8      	b.n	80200ce <__ascii_mbtowc+0x16>

080200dc <memcpy>:
 80200dc:	440a      	add	r2, r1
 80200de:	4291      	cmp	r1, r2
 80200e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80200e4:	d100      	bne.n	80200e8 <memcpy+0xc>
 80200e6:	4770      	bx	lr
 80200e8:	b510      	push	{r4, lr}
 80200ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80200ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80200f2:	4291      	cmp	r1, r2
 80200f4:	d1f9      	bne.n	80200ea <memcpy+0xe>
 80200f6:	bd10      	pop	{r4, pc}

080200f8 <_Balloc>:
 80200f8:	b570      	push	{r4, r5, r6, lr}
 80200fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80200fc:	4604      	mov	r4, r0
 80200fe:	460d      	mov	r5, r1
 8020100:	b976      	cbnz	r6, 8020120 <_Balloc+0x28>
 8020102:	2010      	movs	r0, #16
 8020104:	f7ff ffd0 	bl	80200a8 <malloc>
 8020108:	4602      	mov	r2, r0
 802010a:	6260      	str	r0, [r4, #36]	; 0x24
 802010c:	b920      	cbnz	r0, 8020118 <_Balloc+0x20>
 802010e:	4b18      	ldr	r3, [pc, #96]	; (8020170 <_Balloc+0x78>)
 8020110:	4818      	ldr	r0, [pc, #96]	; (8020174 <_Balloc+0x7c>)
 8020112:	2166      	movs	r1, #102	; 0x66
 8020114:	f001 f80e 	bl	8021134 <__assert_func>
 8020118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802011c:	6006      	str	r6, [r0, #0]
 802011e:	60c6      	str	r6, [r0, #12]
 8020120:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020122:	68f3      	ldr	r3, [r6, #12]
 8020124:	b183      	cbz	r3, 8020148 <_Balloc+0x50>
 8020126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020128:	68db      	ldr	r3, [r3, #12]
 802012a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802012e:	b9b8      	cbnz	r0, 8020160 <_Balloc+0x68>
 8020130:	2101      	movs	r1, #1
 8020132:	fa01 f605 	lsl.w	r6, r1, r5
 8020136:	1d72      	adds	r2, r6, #5
 8020138:	0092      	lsls	r2, r2, #2
 802013a:	4620      	mov	r0, r4
 802013c:	f000 fc97 	bl	8020a6e <_calloc_r>
 8020140:	b160      	cbz	r0, 802015c <_Balloc+0x64>
 8020142:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020146:	e00e      	b.n	8020166 <_Balloc+0x6e>
 8020148:	2221      	movs	r2, #33	; 0x21
 802014a:	2104      	movs	r1, #4
 802014c:	4620      	mov	r0, r4
 802014e:	f000 fc8e 	bl	8020a6e <_calloc_r>
 8020152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020154:	60f0      	str	r0, [r6, #12]
 8020156:	68db      	ldr	r3, [r3, #12]
 8020158:	2b00      	cmp	r3, #0
 802015a:	d1e4      	bne.n	8020126 <_Balloc+0x2e>
 802015c:	2000      	movs	r0, #0
 802015e:	bd70      	pop	{r4, r5, r6, pc}
 8020160:	6802      	ldr	r2, [r0, #0]
 8020162:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020166:	2300      	movs	r3, #0
 8020168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802016c:	e7f7      	b.n	802015e <_Balloc+0x66>
 802016e:	bf00      	nop
 8020170:	0802981e 	.word	0x0802981e
 8020174:	08029988 	.word	0x08029988

08020178 <_Bfree>:
 8020178:	b570      	push	{r4, r5, r6, lr}
 802017a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802017c:	4605      	mov	r5, r0
 802017e:	460c      	mov	r4, r1
 8020180:	b976      	cbnz	r6, 80201a0 <_Bfree+0x28>
 8020182:	2010      	movs	r0, #16
 8020184:	f7ff ff90 	bl	80200a8 <malloc>
 8020188:	4602      	mov	r2, r0
 802018a:	6268      	str	r0, [r5, #36]	; 0x24
 802018c:	b920      	cbnz	r0, 8020198 <_Bfree+0x20>
 802018e:	4b09      	ldr	r3, [pc, #36]	; (80201b4 <_Bfree+0x3c>)
 8020190:	4809      	ldr	r0, [pc, #36]	; (80201b8 <_Bfree+0x40>)
 8020192:	218a      	movs	r1, #138	; 0x8a
 8020194:	f000 ffce 	bl	8021134 <__assert_func>
 8020198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802019c:	6006      	str	r6, [r0, #0]
 802019e:	60c6      	str	r6, [r0, #12]
 80201a0:	b13c      	cbz	r4, 80201b2 <_Bfree+0x3a>
 80201a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80201a4:	6862      	ldr	r2, [r4, #4]
 80201a6:	68db      	ldr	r3, [r3, #12]
 80201a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80201ac:	6021      	str	r1, [r4, #0]
 80201ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80201b2:	bd70      	pop	{r4, r5, r6, pc}
 80201b4:	0802981e 	.word	0x0802981e
 80201b8:	08029988 	.word	0x08029988

080201bc <__multadd>:
 80201bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201c0:	690e      	ldr	r6, [r1, #16]
 80201c2:	4607      	mov	r7, r0
 80201c4:	4698      	mov	r8, r3
 80201c6:	460c      	mov	r4, r1
 80201c8:	f101 0014 	add.w	r0, r1, #20
 80201cc:	2300      	movs	r3, #0
 80201ce:	6805      	ldr	r5, [r0, #0]
 80201d0:	b2a9      	uxth	r1, r5
 80201d2:	fb02 8101 	mla	r1, r2, r1, r8
 80201d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80201da:	0c2d      	lsrs	r5, r5, #16
 80201dc:	fb02 c505 	mla	r5, r2, r5, ip
 80201e0:	b289      	uxth	r1, r1
 80201e2:	3301      	adds	r3, #1
 80201e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80201e8:	429e      	cmp	r6, r3
 80201ea:	f840 1b04 	str.w	r1, [r0], #4
 80201ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80201f2:	dcec      	bgt.n	80201ce <__multadd+0x12>
 80201f4:	f1b8 0f00 	cmp.w	r8, #0
 80201f8:	d022      	beq.n	8020240 <__multadd+0x84>
 80201fa:	68a3      	ldr	r3, [r4, #8]
 80201fc:	42b3      	cmp	r3, r6
 80201fe:	dc19      	bgt.n	8020234 <__multadd+0x78>
 8020200:	6861      	ldr	r1, [r4, #4]
 8020202:	4638      	mov	r0, r7
 8020204:	3101      	adds	r1, #1
 8020206:	f7ff ff77 	bl	80200f8 <_Balloc>
 802020a:	4605      	mov	r5, r0
 802020c:	b928      	cbnz	r0, 802021a <__multadd+0x5e>
 802020e:	4602      	mov	r2, r0
 8020210:	4b0d      	ldr	r3, [pc, #52]	; (8020248 <__multadd+0x8c>)
 8020212:	480e      	ldr	r0, [pc, #56]	; (802024c <__multadd+0x90>)
 8020214:	21b5      	movs	r1, #181	; 0xb5
 8020216:	f000 ff8d 	bl	8021134 <__assert_func>
 802021a:	6922      	ldr	r2, [r4, #16]
 802021c:	3202      	adds	r2, #2
 802021e:	f104 010c 	add.w	r1, r4, #12
 8020222:	0092      	lsls	r2, r2, #2
 8020224:	300c      	adds	r0, #12
 8020226:	f7ff ff59 	bl	80200dc <memcpy>
 802022a:	4621      	mov	r1, r4
 802022c:	4638      	mov	r0, r7
 802022e:	f7ff ffa3 	bl	8020178 <_Bfree>
 8020232:	462c      	mov	r4, r5
 8020234:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020238:	3601      	adds	r6, #1
 802023a:	f8c3 8014 	str.w	r8, [r3, #20]
 802023e:	6126      	str	r6, [r4, #16]
 8020240:	4620      	mov	r0, r4
 8020242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020246:	bf00      	nop
 8020248:	08029894 	.word	0x08029894
 802024c:	08029988 	.word	0x08029988

08020250 <__s2b>:
 8020250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020254:	460c      	mov	r4, r1
 8020256:	4615      	mov	r5, r2
 8020258:	461f      	mov	r7, r3
 802025a:	2209      	movs	r2, #9
 802025c:	3308      	adds	r3, #8
 802025e:	4606      	mov	r6, r0
 8020260:	fb93 f3f2 	sdiv	r3, r3, r2
 8020264:	2100      	movs	r1, #0
 8020266:	2201      	movs	r2, #1
 8020268:	429a      	cmp	r2, r3
 802026a:	db09      	blt.n	8020280 <__s2b+0x30>
 802026c:	4630      	mov	r0, r6
 802026e:	f7ff ff43 	bl	80200f8 <_Balloc>
 8020272:	b940      	cbnz	r0, 8020286 <__s2b+0x36>
 8020274:	4602      	mov	r2, r0
 8020276:	4b19      	ldr	r3, [pc, #100]	; (80202dc <__s2b+0x8c>)
 8020278:	4819      	ldr	r0, [pc, #100]	; (80202e0 <__s2b+0x90>)
 802027a:	21ce      	movs	r1, #206	; 0xce
 802027c:	f000 ff5a 	bl	8021134 <__assert_func>
 8020280:	0052      	lsls	r2, r2, #1
 8020282:	3101      	adds	r1, #1
 8020284:	e7f0      	b.n	8020268 <__s2b+0x18>
 8020286:	9b08      	ldr	r3, [sp, #32]
 8020288:	6143      	str	r3, [r0, #20]
 802028a:	2d09      	cmp	r5, #9
 802028c:	f04f 0301 	mov.w	r3, #1
 8020290:	6103      	str	r3, [r0, #16]
 8020292:	dd16      	ble.n	80202c2 <__s2b+0x72>
 8020294:	f104 0909 	add.w	r9, r4, #9
 8020298:	46c8      	mov	r8, r9
 802029a:	442c      	add	r4, r5
 802029c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80202a0:	4601      	mov	r1, r0
 80202a2:	3b30      	subs	r3, #48	; 0x30
 80202a4:	220a      	movs	r2, #10
 80202a6:	4630      	mov	r0, r6
 80202a8:	f7ff ff88 	bl	80201bc <__multadd>
 80202ac:	45a0      	cmp	r8, r4
 80202ae:	d1f5      	bne.n	802029c <__s2b+0x4c>
 80202b0:	f1a5 0408 	sub.w	r4, r5, #8
 80202b4:	444c      	add	r4, r9
 80202b6:	1b2d      	subs	r5, r5, r4
 80202b8:	1963      	adds	r3, r4, r5
 80202ba:	42bb      	cmp	r3, r7
 80202bc:	db04      	blt.n	80202c8 <__s2b+0x78>
 80202be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80202c2:	340a      	adds	r4, #10
 80202c4:	2509      	movs	r5, #9
 80202c6:	e7f6      	b.n	80202b6 <__s2b+0x66>
 80202c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80202cc:	4601      	mov	r1, r0
 80202ce:	3b30      	subs	r3, #48	; 0x30
 80202d0:	220a      	movs	r2, #10
 80202d2:	4630      	mov	r0, r6
 80202d4:	f7ff ff72 	bl	80201bc <__multadd>
 80202d8:	e7ee      	b.n	80202b8 <__s2b+0x68>
 80202da:	bf00      	nop
 80202dc:	08029894 	.word	0x08029894
 80202e0:	08029988 	.word	0x08029988

080202e4 <__hi0bits>:
 80202e4:	0c03      	lsrs	r3, r0, #16
 80202e6:	041b      	lsls	r3, r3, #16
 80202e8:	b9d3      	cbnz	r3, 8020320 <__hi0bits+0x3c>
 80202ea:	0400      	lsls	r0, r0, #16
 80202ec:	2310      	movs	r3, #16
 80202ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80202f2:	bf04      	itt	eq
 80202f4:	0200      	lsleq	r0, r0, #8
 80202f6:	3308      	addeq	r3, #8
 80202f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80202fc:	bf04      	itt	eq
 80202fe:	0100      	lsleq	r0, r0, #4
 8020300:	3304      	addeq	r3, #4
 8020302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020306:	bf04      	itt	eq
 8020308:	0080      	lsleq	r0, r0, #2
 802030a:	3302      	addeq	r3, #2
 802030c:	2800      	cmp	r0, #0
 802030e:	db05      	blt.n	802031c <__hi0bits+0x38>
 8020310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020314:	f103 0301 	add.w	r3, r3, #1
 8020318:	bf08      	it	eq
 802031a:	2320      	moveq	r3, #32
 802031c:	4618      	mov	r0, r3
 802031e:	4770      	bx	lr
 8020320:	2300      	movs	r3, #0
 8020322:	e7e4      	b.n	80202ee <__hi0bits+0xa>

08020324 <__lo0bits>:
 8020324:	6803      	ldr	r3, [r0, #0]
 8020326:	f013 0207 	ands.w	r2, r3, #7
 802032a:	4601      	mov	r1, r0
 802032c:	d00b      	beq.n	8020346 <__lo0bits+0x22>
 802032e:	07da      	lsls	r2, r3, #31
 8020330:	d424      	bmi.n	802037c <__lo0bits+0x58>
 8020332:	0798      	lsls	r0, r3, #30
 8020334:	bf49      	itett	mi
 8020336:	085b      	lsrmi	r3, r3, #1
 8020338:	089b      	lsrpl	r3, r3, #2
 802033a:	2001      	movmi	r0, #1
 802033c:	600b      	strmi	r3, [r1, #0]
 802033e:	bf5c      	itt	pl
 8020340:	600b      	strpl	r3, [r1, #0]
 8020342:	2002      	movpl	r0, #2
 8020344:	4770      	bx	lr
 8020346:	b298      	uxth	r0, r3
 8020348:	b9b0      	cbnz	r0, 8020378 <__lo0bits+0x54>
 802034a:	0c1b      	lsrs	r3, r3, #16
 802034c:	2010      	movs	r0, #16
 802034e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020352:	bf04      	itt	eq
 8020354:	0a1b      	lsreq	r3, r3, #8
 8020356:	3008      	addeq	r0, #8
 8020358:	071a      	lsls	r2, r3, #28
 802035a:	bf04      	itt	eq
 802035c:	091b      	lsreq	r3, r3, #4
 802035e:	3004      	addeq	r0, #4
 8020360:	079a      	lsls	r2, r3, #30
 8020362:	bf04      	itt	eq
 8020364:	089b      	lsreq	r3, r3, #2
 8020366:	3002      	addeq	r0, #2
 8020368:	07da      	lsls	r2, r3, #31
 802036a:	d403      	bmi.n	8020374 <__lo0bits+0x50>
 802036c:	085b      	lsrs	r3, r3, #1
 802036e:	f100 0001 	add.w	r0, r0, #1
 8020372:	d005      	beq.n	8020380 <__lo0bits+0x5c>
 8020374:	600b      	str	r3, [r1, #0]
 8020376:	4770      	bx	lr
 8020378:	4610      	mov	r0, r2
 802037a:	e7e8      	b.n	802034e <__lo0bits+0x2a>
 802037c:	2000      	movs	r0, #0
 802037e:	4770      	bx	lr
 8020380:	2020      	movs	r0, #32
 8020382:	4770      	bx	lr

08020384 <__i2b>:
 8020384:	b510      	push	{r4, lr}
 8020386:	460c      	mov	r4, r1
 8020388:	2101      	movs	r1, #1
 802038a:	f7ff feb5 	bl	80200f8 <_Balloc>
 802038e:	4602      	mov	r2, r0
 8020390:	b928      	cbnz	r0, 802039e <__i2b+0x1a>
 8020392:	4b05      	ldr	r3, [pc, #20]	; (80203a8 <__i2b+0x24>)
 8020394:	4805      	ldr	r0, [pc, #20]	; (80203ac <__i2b+0x28>)
 8020396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802039a:	f000 fecb 	bl	8021134 <__assert_func>
 802039e:	2301      	movs	r3, #1
 80203a0:	6144      	str	r4, [r0, #20]
 80203a2:	6103      	str	r3, [r0, #16]
 80203a4:	bd10      	pop	{r4, pc}
 80203a6:	bf00      	nop
 80203a8:	08029894 	.word	0x08029894
 80203ac:	08029988 	.word	0x08029988

080203b0 <__multiply>:
 80203b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203b4:	4614      	mov	r4, r2
 80203b6:	690a      	ldr	r2, [r1, #16]
 80203b8:	6923      	ldr	r3, [r4, #16]
 80203ba:	429a      	cmp	r2, r3
 80203bc:	bfb8      	it	lt
 80203be:	460b      	movlt	r3, r1
 80203c0:	460d      	mov	r5, r1
 80203c2:	bfbc      	itt	lt
 80203c4:	4625      	movlt	r5, r4
 80203c6:	461c      	movlt	r4, r3
 80203c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80203cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80203d0:	68ab      	ldr	r3, [r5, #8]
 80203d2:	6869      	ldr	r1, [r5, #4]
 80203d4:	eb0a 0709 	add.w	r7, sl, r9
 80203d8:	42bb      	cmp	r3, r7
 80203da:	b085      	sub	sp, #20
 80203dc:	bfb8      	it	lt
 80203de:	3101      	addlt	r1, #1
 80203e0:	f7ff fe8a 	bl	80200f8 <_Balloc>
 80203e4:	b930      	cbnz	r0, 80203f4 <__multiply+0x44>
 80203e6:	4602      	mov	r2, r0
 80203e8:	4b42      	ldr	r3, [pc, #264]	; (80204f4 <__multiply+0x144>)
 80203ea:	4843      	ldr	r0, [pc, #268]	; (80204f8 <__multiply+0x148>)
 80203ec:	f240 115d 	movw	r1, #349	; 0x15d
 80203f0:	f000 fea0 	bl	8021134 <__assert_func>
 80203f4:	f100 0614 	add.w	r6, r0, #20
 80203f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80203fc:	4633      	mov	r3, r6
 80203fe:	2200      	movs	r2, #0
 8020400:	4543      	cmp	r3, r8
 8020402:	d31e      	bcc.n	8020442 <__multiply+0x92>
 8020404:	f105 0c14 	add.w	ip, r5, #20
 8020408:	f104 0314 	add.w	r3, r4, #20
 802040c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020410:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020414:	9202      	str	r2, [sp, #8]
 8020416:	ebac 0205 	sub.w	r2, ip, r5
 802041a:	3a15      	subs	r2, #21
 802041c:	f022 0203 	bic.w	r2, r2, #3
 8020420:	3204      	adds	r2, #4
 8020422:	f105 0115 	add.w	r1, r5, #21
 8020426:	458c      	cmp	ip, r1
 8020428:	bf38      	it	cc
 802042a:	2204      	movcc	r2, #4
 802042c:	9201      	str	r2, [sp, #4]
 802042e:	9a02      	ldr	r2, [sp, #8]
 8020430:	9303      	str	r3, [sp, #12]
 8020432:	429a      	cmp	r2, r3
 8020434:	d808      	bhi.n	8020448 <__multiply+0x98>
 8020436:	2f00      	cmp	r7, #0
 8020438:	dc55      	bgt.n	80204e6 <__multiply+0x136>
 802043a:	6107      	str	r7, [r0, #16]
 802043c:	b005      	add	sp, #20
 802043e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020442:	f843 2b04 	str.w	r2, [r3], #4
 8020446:	e7db      	b.n	8020400 <__multiply+0x50>
 8020448:	f8b3 a000 	ldrh.w	sl, [r3]
 802044c:	f1ba 0f00 	cmp.w	sl, #0
 8020450:	d020      	beq.n	8020494 <__multiply+0xe4>
 8020452:	f105 0e14 	add.w	lr, r5, #20
 8020456:	46b1      	mov	r9, r6
 8020458:	2200      	movs	r2, #0
 802045a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802045e:	f8d9 b000 	ldr.w	fp, [r9]
 8020462:	b2a1      	uxth	r1, r4
 8020464:	fa1f fb8b 	uxth.w	fp, fp
 8020468:	fb0a b101 	mla	r1, sl, r1, fp
 802046c:	4411      	add	r1, r2
 802046e:	f8d9 2000 	ldr.w	r2, [r9]
 8020472:	0c24      	lsrs	r4, r4, #16
 8020474:	0c12      	lsrs	r2, r2, #16
 8020476:	fb0a 2404 	mla	r4, sl, r4, r2
 802047a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802047e:	b289      	uxth	r1, r1
 8020480:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020484:	45f4      	cmp	ip, lr
 8020486:	f849 1b04 	str.w	r1, [r9], #4
 802048a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802048e:	d8e4      	bhi.n	802045a <__multiply+0xaa>
 8020490:	9901      	ldr	r1, [sp, #4]
 8020492:	5072      	str	r2, [r6, r1]
 8020494:	9a03      	ldr	r2, [sp, #12]
 8020496:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802049a:	3304      	adds	r3, #4
 802049c:	f1b9 0f00 	cmp.w	r9, #0
 80204a0:	d01f      	beq.n	80204e2 <__multiply+0x132>
 80204a2:	6834      	ldr	r4, [r6, #0]
 80204a4:	f105 0114 	add.w	r1, r5, #20
 80204a8:	46b6      	mov	lr, r6
 80204aa:	f04f 0a00 	mov.w	sl, #0
 80204ae:	880a      	ldrh	r2, [r1, #0]
 80204b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80204b4:	fb09 b202 	mla	r2, r9, r2, fp
 80204b8:	4492      	add	sl, r2
 80204ba:	b2a4      	uxth	r4, r4
 80204bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80204c0:	f84e 4b04 	str.w	r4, [lr], #4
 80204c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80204c8:	f8be 2000 	ldrh.w	r2, [lr]
 80204cc:	0c24      	lsrs	r4, r4, #16
 80204ce:	fb09 2404 	mla	r4, r9, r4, r2
 80204d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80204d6:	458c      	cmp	ip, r1
 80204d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80204dc:	d8e7      	bhi.n	80204ae <__multiply+0xfe>
 80204de:	9a01      	ldr	r2, [sp, #4]
 80204e0:	50b4      	str	r4, [r6, r2]
 80204e2:	3604      	adds	r6, #4
 80204e4:	e7a3      	b.n	802042e <__multiply+0x7e>
 80204e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80204ea:	2b00      	cmp	r3, #0
 80204ec:	d1a5      	bne.n	802043a <__multiply+0x8a>
 80204ee:	3f01      	subs	r7, #1
 80204f0:	e7a1      	b.n	8020436 <__multiply+0x86>
 80204f2:	bf00      	nop
 80204f4:	08029894 	.word	0x08029894
 80204f8:	08029988 	.word	0x08029988

080204fc <__pow5mult>:
 80204fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020500:	4615      	mov	r5, r2
 8020502:	f012 0203 	ands.w	r2, r2, #3
 8020506:	4606      	mov	r6, r0
 8020508:	460f      	mov	r7, r1
 802050a:	d007      	beq.n	802051c <__pow5mult+0x20>
 802050c:	4c25      	ldr	r4, [pc, #148]	; (80205a4 <__pow5mult+0xa8>)
 802050e:	3a01      	subs	r2, #1
 8020510:	2300      	movs	r3, #0
 8020512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020516:	f7ff fe51 	bl	80201bc <__multadd>
 802051a:	4607      	mov	r7, r0
 802051c:	10ad      	asrs	r5, r5, #2
 802051e:	d03d      	beq.n	802059c <__pow5mult+0xa0>
 8020520:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020522:	b97c      	cbnz	r4, 8020544 <__pow5mult+0x48>
 8020524:	2010      	movs	r0, #16
 8020526:	f7ff fdbf 	bl	80200a8 <malloc>
 802052a:	4602      	mov	r2, r0
 802052c:	6270      	str	r0, [r6, #36]	; 0x24
 802052e:	b928      	cbnz	r0, 802053c <__pow5mult+0x40>
 8020530:	4b1d      	ldr	r3, [pc, #116]	; (80205a8 <__pow5mult+0xac>)
 8020532:	481e      	ldr	r0, [pc, #120]	; (80205ac <__pow5mult+0xb0>)
 8020534:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020538:	f000 fdfc 	bl	8021134 <__assert_func>
 802053c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020540:	6004      	str	r4, [r0, #0]
 8020542:	60c4      	str	r4, [r0, #12]
 8020544:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802054c:	b94c      	cbnz	r4, 8020562 <__pow5mult+0x66>
 802054e:	f240 2171 	movw	r1, #625	; 0x271
 8020552:	4630      	mov	r0, r6
 8020554:	f7ff ff16 	bl	8020384 <__i2b>
 8020558:	2300      	movs	r3, #0
 802055a:	f8c8 0008 	str.w	r0, [r8, #8]
 802055e:	4604      	mov	r4, r0
 8020560:	6003      	str	r3, [r0, #0]
 8020562:	f04f 0900 	mov.w	r9, #0
 8020566:	07eb      	lsls	r3, r5, #31
 8020568:	d50a      	bpl.n	8020580 <__pow5mult+0x84>
 802056a:	4639      	mov	r1, r7
 802056c:	4622      	mov	r2, r4
 802056e:	4630      	mov	r0, r6
 8020570:	f7ff ff1e 	bl	80203b0 <__multiply>
 8020574:	4639      	mov	r1, r7
 8020576:	4680      	mov	r8, r0
 8020578:	4630      	mov	r0, r6
 802057a:	f7ff fdfd 	bl	8020178 <_Bfree>
 802057e:	4647      	mov	r7, r8
 8020580:	106d      	asrs	r5, r5, #1
 8020582:	d00b      	beq.n	802059c <__pow5mult+0xa0>
 8020584:	6820      	ldr	r0, [r4, #0]
 8020586:	b938      	cbnz	r0, 8020598 <__pow5mult+0x9c>
 8020588:	4622      	mov	r2, r4
 802058a:	4621      	mov	r1, r4
 802058c:	4630      	mov	r0, r6
 802058e:	f7ff ff0f 	bl	80203b0 <__multiply>
 8020592:	6020      	str	r0, [r4, #0]
 8020594:	f8c0 9000 	str.w	r9, [r0]
 8020598:	4604      	mov	r4, r0
 802059a:	e7e4      	b.n	8020566 <__pow5mult+0x6a>
 802059c:	4638      	mov	r0, r7
 802059e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205a2:	bf00      	nop
 80205a4:	08029ad8 	.word	0x08029ad8
 80205a8:	0802981e 	.word	0x0802981e
 80205ac:	08029988 	.word	0x08029988

080205b0 <__lshift>:
 80205b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205b4:	460c      	mov	r4, r1
 80205b6:	6849      	ldr	r1, [r1, #4]
 80205b8:	6923      	ldr	r3, [r4, #16]
 80205ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80205be:	68a3      	ldr	r3, [r4, #8]
 80205c0:	4607      	mov	r7, r0
 80205c2:	4691      	mov	r9, r2
 80205c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80205c8:	f108 0601 	add.w	r6, r8, #1
 80205cc:	42b3      	cmp	r3, r6
 80205ce:	db0b      	blt.n	80205e8 <__lshift+0x38>
 80205d0:	4638      	mov	r0, r7
 80205d2:	f7ff fd91 	bl	80200f8 <_Balloc>
 80205d6:	4605      	mov	r5, r0
 80205d8:	b948      	cbnz	r0, 80205ee <__lshift+0x3e>
 80205da:	4602      	mov	r2, r0
 80205dc:	4b28      	ldr	r3, [pc, #160]	; (8020680 <__lshift+0xd0>)
 80205de:	4829      	ldr	r0, [pc, #164]	; (8020684 <__lshift+0xd4>)
 80205e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80205e4:	f000 fda6 	bl	8021134 <__assert_func>
 80205e8:	3101      	adds	r1, #1
 80205ea:	005b      	lsls	r3, r3, #1
 80205ec:	e7ee      	b.n	80205cc <__lshift+0x1c>
 80205ee:	2300      	movs	r3, #0
 80205f0:	f100 0114 	add.w	r1, r0, #20
 80205f4:	f100 0210 	add.w	r2, r0, #16
 80205f8:	4618      	mov	r0, r3
 80205fa:	4553      	cmp	r3, sl
 80205fc:	db33      	blt.n	8020666 <__lshift+0xb6>
 80205fe:	6920      	ldr	r0, [r4, #16]
 8020600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020604:	f104 0314 	add.w	r3, r4, #20
 8020608:	f019 091f 	ands.w	r9, r9, #31
 802060c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020614:	d02b      	beq.n	802066e <__lshift+0xbe>
 8020616:	f1c9 0e20 	rsb	lr, r9, #32
 802061a:	468a      	mov	sl, r1
 802061c:	2200      	movs	r2, #0
 802061e:	6818      	ldr	r0, [r3, #0]
 8020620:	fa00 f009 	lsl.w	r0, r0, r9
 8020624:	4302      	orrs	r2, r0
 8020626:	f84a 2b04 	str.w	r2, [sl], #4
 802062a:	f853 2b04 	ldr.w	r2, [r3], #4
 802062e:	459c      	cmp	ip, r3
 8020630:	fa22 f20e 	lsr.w	r2, r2, lr
 8020634:	d8f3      	bhi.n	802061e <__lshift+0x6e>
 8020636:	ebac 0304 	sub.w	r3, ip, r4
 802063a:	3b15      	subs	r3, #21
 802063c:	f023 0303 	bic.w	r3, r3, #3
 8020640:	3304      	adds	r3, #4
 8020642:	f104 0015 	add.w	r0, r4, #21
 8020646:	4584      	cmp	ip, r0
 8020648:	bf38      	it	cc
 802064a:	2304      	movcc	r3, #4
 802064c:	50ca      	str	r2, [r1, r3]
 802064e:	b10a      	cbz	r2, 8020654 <__lshift+0xa4>
 8020650:	f108 0602 	add.w	r6, r8, #2
 8020654:	3e01      	subs	r6, #1
 8020656:	4638      	mov	r0, r7
 8020658:	612e      	str	r6, [r5, #16]
 802065a:	4621      	mov	r1, r4
 802065c:	f7ff fd8c 	bl	8020178 <_Bfree>
 8020660:	4628      	mov	r0, r5
 8020662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020666:	f842 0f04 	str.w	r0, [r2, #4]!
 802066a:	3301      	adds	r3, #1
 802066c:	e7c5      	b.n	80205fa <__lshift+0x4a>
 802066e:	3904      	subs	r1, #4
 8020670:	f853 2b04 	ldr.w	r2, [r3], #4
 8020674:	f841 2f04 	str.w	r2, [r1, #4]!
 8020678:	459c      	cmp	ip, r3
 802067a:	d8f9      	bhi.n	8020670 <__lshift+0xc0>
 802067c:	e7ea      	b.n	8020654 <__lshift+0xa4>
 802067e:	bf00      	nop
 8020680:	08029894 	.word	0x08029894
 8020684:	08029988 	.word	0x08029988

08020688 <__mcmp>:
 8020688:	b530      	push	{r4, r5, lr}
 802068a:	6902      	ldr	r2, [r0, #16]
 802068c:	690c      	ldr	r4, [r1, #16]
 802068e:	1b12      	subs	r2, r2, r4
 8020690:	d10e      	bne.n	80206b0 <__mcmp+0x28>
 8020692:	f100 0314 	add.w	r3, r0, #20
 8020696:	3114      	adds	r1, #20
 8020698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802069c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80206a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80206a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80206a8:	42a5      	cmp	r5, r4
 80206aa:	d003      	beq.n	80206b4 <__mcmp+0x2c>
 80206ac:	d305      	bcc.n	80206ba <__mcmp+0x32>
 80206ae:	2201      	movs	r2, #1
 80206b0:	4610      	mov	r0, r2
 80206b2:	bd30      	pop	{r4, r5, pc}
 80206b4:	4283      	cmp	r3, r0
 80206b6:	d3f3      	bcc.n	80206a0 <__mcmp+0x18>
 80206b8:	e7fa      	b.n	80206b0 <__mcmp+0x28>
 80206ba:	f04f 32ff 	mov.w	r2, #4294967295
 80206be:	e7f7      	b.n	80206b0 <__mcmp+0x28>

080206c0 <__mdiff>:
 80206c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206c4:	460c      	mov	r4, r1
 80206c6:	4606      	mov	r6, r0
 80206c8:	4611      	mov	r1, r2
 80206ca:	4620      	mov	r0, r4
 80206cc:	4617      	mov	r7, r2
 80206ce:	f7ff ffdb 	bl	8020688 <__mcmp>
 80206d2:	1e05      	subs	r5, r0, #0
 80206d4:	d110      	bne.n	80206f8 <__mdiff+0x38>
 80206d6:	4629      	mov	r1, r5
 80206d8:	4630      	mov	r0, r6
 80206da:	f7ff fd0d 	bl	80200f8 <_Balloc>
 80206de:	b930      	cbnz	r0, 80206ee <__mdiff+0x2e>
 80206e0:	4b39      	ldr	r3, [pc, #228]	; (80207c8 <__mdiff+0x108>)
 80206e2:	4602      	mov	r2, r0
 80206e4:	f240 2132 	movw	r1, #562	; 0x232
 80206e8:	4838      	ldr	r0, [pc, #224]	; (80207cc <__mdiff+0x10c>)
 80206ea:	f000 fd23 	bl	8021134 <__assert_func>
 80206ee:	2301      	movs	r3, #1
 80206f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80206f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206f8:	bfa4      	itt	ge
 80206fa:	463b      	movge	r3, r7
 80206fc:	4627      	movge	r7, r4
 80206fe:	4630      	mov	r0, r6
 8020700:	6879      	ldr	r1, [r7, #4]
 8020702:	bfa6      	itte	ge
 8020704:	461c      	movge	r4, r3
 8020706:	2500      	movge	r5, #0
 8020708:	2501      	movlt	r5, #1
 802070a:	f7ff fcf5 	bl	80200f8 <_Balloc>
 802070e:	b920      	cbnz	r0, 802071a <__mdiff+0x5a>
 8020710:	4b2d      	ldr	r3, [pc, #180]	; (80207c8 <__mdiff+0x108>)
 8020712:	4602      	mov	r2, r0
 8020714:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020718:	e7e6      	b.n	80206e8 <__mdiff+0x28>
 802071a:	693e      	ldr	r6, [r7, #16]
 802071c:	60c5      	str	r5, [r0, #12]
 802071e:	6925      	ldr	r5, [r4, #16]
 8020720:	f107 0114 	add.w	r1, r7, #20
 8020724:	f104 0914 	add.w	r9, r4, #20
 8020728:	f100 0e14 	add.w	lr, r0, #20
 802072c:	f107 0210 	add.w	r2, r7, #16
 8020730:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020734:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020738:	46f2      	mov	sl, lr
 802073a:	2700      	movs	r7, #0
 802073c:	f859 3b04 	ldr.w	r3, [r9], #4
 8020740:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020744:	fa1f f883 	uxth.w	r8, r3
 8020748:	fa17 f78b 	uxtah	r7, r7, fp
 802074c:	0c1b      	lsrs	r3, r3, #16
 802074e:	eba7 0808 	sub.w	r8, r7, r8
 8020752:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020756:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802075a:	fa1f f888 	uxth.w	r8, r8
 802075e:	141f      	asrs	r7, r3, #16
 8020760:	454d      	cmp	r5, r9
 8020762:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020766:	f84a 3b04 	str.w	r3, [sl], #4
 802076a:	d8e7      	bhi.n	802073c <__mdiff+0x7c>
 802076c:	1b2b      	subs	r3, r5, r4
 802076e:	3b15      	subs	r3, #21
 8020770:	f023 0303 	bic.w	r3, r3, #3
 8020774:	3304      	adds	r3, #4
 8020776:	3415      	adds	r4, #21
 8020778:	42a5      	cmp	r5, r4
 802077a:	bf38      	it	cc
 802077c:	2304      	movcc	r3, #4
 802077e:	4419      	add	r1, r3
 8020780:	4473      	add	r3, lr
 8020782:	469e      	mov	lr, r3
 8020784:	460d      	mov	r5, r1
 8020786:	4565      	cmp	r5, ip
 8020788:	d30e      	bcc.n	80207a8 <__mdiff+0xe8>
 802078a:	f10c 0203 	add.w	r2, ip, #3
 802078e:	1a52      	subs	r2, r2, r1
 8020790:	f022 0203 	bic.w	r2, r2, #3
 8020794:	3903      	subs	r1, #3
 8020796:	458c      	cmp	ip, r1
 8020798:	bf38      	it	cc
 802079a:	2200      	movcc	r2, #0
 802079c:	441a      	add	r2, r3
 802079e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80207a2:	b17b      	cbz	r3, 80207c4 <__mdiff+0x104>
 80207a4:	6106      	str	r6, [r0, #16]
 80207a6:	e7a5      	b.n	80206f4 <__mdiff+0x34>
 80207a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80207ac:	fa17 f488 	uxtah	r4, r7, r8
 80207b0:	1422      	asrs	r2, r4, #16
 80207b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80207b6:	b2a4      	uxth	r4, r4
 80207b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80207bc:	f84e 4b04 	str.w	r4, [lr], #4
 80207c0:	1417      	asrs	r7, r2, #16
 80207c2:	e7e0      	b.n	8020786 <__mdiff+0xc6>
 80207c4:	3e01      	subs	r6, #1
 80207c6:	e7ea      	b.n	802079e <__mdiff+0xde>
 80207c8:	08029894 	.word	0x08029894
 80207cc:	08029988 	.word	0x08029988

080207d0 <__ulp>:
 80207d0:	b082      	sub	sp, #8
 80207d2:	ed8d 0b00 	vstr	d0, [sp]
 80207d6:	9b01      	ldr	r3, [sp, #4]
 80207d8:	4912      	ldr	r1, [pc, #72]	; (8020824 <__ulp+0x54>)
 80207da:	4019      	ands	r1, r3
 80207dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80207e0:	2900      	cmp	r1, #0
 80207e2:	dd05      	ble.n	80207f0 <__ulp+0x20>
 80207e4:	2200      	movs	r2, #0
 80207e6:	460b      	mov	r3, r1
 80207e8:	ec43 2b10 	vmov	d0, r2, r3
 80207ec:	b002      	add	sp, #8
 80207ee:	4770      	bx	lr
 80207f0:	4249      	negs	r1, r1
 80207f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80207f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80207fa:	f04f 0200 	mov.w	r2, #0
 80207fe:	f04f 0300 	mov.w	r3, #0
 8020802:	da04      	bge.n	802080e <__ulp+0x3e>
 8020804:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8020808:	fa41 f300 	asr.w	r3, r1, r0
 802080c:	e7ec      	b.n	80207e8 <__ulp+0x18>
 802080e:	f1a0 0114 	sub.w	r1, r0, #20
 8020812:	291e      	cmp	r1, #30
 8020814:	bfda      	itte	le
 8020816:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802081a:	fa20 f101 	lsrle.w	r1, r0, r1
 802081e:	2101      	movgt	r1, #1
 8020820:	460a      	mov	r2, r1
 8020822:	e7e1      	b.n	80207e8 <__ulp+0x18>
 8020824:	7ff00000 	.word	0x7ff00000

08020828 <__b2d>:
 8020828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802082a:	6905      	ldr	r5, [r0, #16]
 802082c:	f100 0714 	add.w	r7, r0, #20
 8020830:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8020834:	1f2e      	subs	r6, r5, #4
 8020836:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802083a:	4620      	mov	r0, r4
 802083c:	f7ff fd52 	bl	80202e4 <__hi0bits>
 8020840:	f1c0 0320 	rsb	r3, r0, #32
 8020844:	280a      	cmp	r0, #10
 8020846:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80208c4 <__b2d+0x9c>
 802084a:	600b      	str	r3, [r1, #0]
 802084c:	dc14      	bgt.n	8020878 <__b2d+0x50>
 802084e:	f1c0 0e0b 	rsb	lr, r0, #11
 8020852:	fa24 f10e 	lsr.w	r1, r4, lr
 8020856:	42b7      	cmp	r7, r6
 8020858:	ea41 030c 	orr.w	r3, r1, ip
 802085c:	bf34      	ite	cc
 802085e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020862:	2100      	movcs	r1, #0
 8020864:	3015      	adds	r0, #21
 8020866:	fa04 f000 	lsl.w	r0, r4, r0
 802086a:	fa21 f10e 	lsr.w	r1, r1, lr
 802086e:	ea40 0201 	orr.w	r2, r0, r1
 8020872:	ec43 2b10 	vmov	d0, r2, r3
 8020876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020878:	42b7      	cmp	r7, r6
 802087a:	bf3a      	itte	cc
 802087c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020880:	f1a5 0608 	subcc.w	r6, r5, #8
 8020884:	2100      	movcs	r1, #0
 8020886:	380b      	subs	r0, #11
 8020888:	d017      	beq.n	80208ba <__b2d+0x92>
 802088a:	f1c0 0c20 	rsb	ip, r0, #32
 802088e:	fa04 f500 	lsl.w	r5, r4, r0
 8020892:	42be      	cmp	r6, r7
 8020894:	fa21 f40c 	lsr.w	r4, r1, ip
 8020898:	ea45 0504 	orr.w	r5, r5, r4
 802089c:	bf8c      	ite	hi
 802089e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80208a2:	2400      	movls	r4, #0
 80208a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80208a8:	fa01 f000 	lsl.w	r0, r1, r0
 80208ac:	fa24 f40c 	lsr.w	r4, r4, ip
 80208b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80208b4:	ea40 0204 	orr.w	r2, r0, r4
 80208b8:	e7db      	b.n	8020872 <__b2d+0x4a>
 80208ba:	ea44 030c 	orr.w	r3, r4, ip
 80208be:	460a      	mov	r2, r1
 80208c0:	e7d7      	b.n	8020872 <__b2d+0x4a>
 80208c2:	bf00      	nop
 80208c4:	3ff00000 	.word	0x3ff00000

080208c8 <__d2b>:
 80208c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80208cc:	4689      	mov	r9, r1
 80208ce:	2101      	movs	r1, #1
 80208d0:	ec57 6b10 	vmov	r6, r7, d0
 80208d4:	4690      	mov	r8, r2
 80208d6:	f7ff fc0f 	bl	80200f8 <_Balloc>
 80208da:	4604      	mov	r4, r0
 80208dc:	b930      	cbnz	r0, 80208ec <__d2b+0x24>
 80208de:	4602      	mov	r2, r0
 80208e0:	4b25      	ldr	r3, [pc, #148]	; (8020978 <__d2b+0xb0>)
 80208e2:	4826      	ldr	r0, [pc, #152]	; (802097c <__d2b+0xb4>)
 80208e4:	f240 310a 	movw	r1, #778	; 0x30a
 80208e8:	f000 fc24 	bl	8021134 <__assert_func>
 80208ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80208f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80208f4:	bb35      	cbnz	r5, 8020944 <__d2b+0x7c>
 80208f6:	2e00      	cmp	r6, #0
 80208f8:	9301      	str	r3, [sp, #4]
 80208fa:	d028      	beq.n	802094e <__d2b+0x86>
 80208fc:	4668      	mov	r0, sp
 80208fe:	9600      	str	r6, [sp, #0]
 8020900:	f7ff fd10 	bl	8020324 <__lo0bits>
 8020904:	9900      	ldr	r1, [sp, #0]
 8020906:	b300      	cbz	r0, 802094a <__d2b+0x82>
 8020908:	9a01      	ldr	r2, [sp, #4]
 802090a:	f1c0 0320 	rsb	r3, r0, #32
 802090e:	fa02 f303 	lsl.w	r3, r2, r3
 8020912:	430b      	orrs	r3, r1
 8020914:	40c2      	lsrs	r2, r0
 8020916:	6163      	str	r3, [r4, #20]
 8020918:	9201      	str	r2, [sp, #4]
 802091a:	9b01      	ldr	r3, [sp, #4]
 802091c:	61a3      	str	r3, [r4, #24]
 802091e:	2b00      	cmp	r3, #0
 8020920:	bf14      	ite	ne
 8020922:	2202      	movne	r2, #2
 8020924:	2201      	moveq	r2, #1
 8020926:	6122      	str	r2, [r4, #16]
 8020928:	b1d5      	cbz	r5, 8020960 <__d2b+0x98>
 802092a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802092e:	4405      	add	r5, r0
 8020930:	f8c9 5000 	str.w	r5, [r9]
 8020934:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020938:	f8c8 0000 	str.w	r0, [r8]
 802093c:	4620      	mov	r0, r4
 802093e:	b003      	add	sp, #12
 8020940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020948:	e7d5      	b.n	80208f6 <__d2b+0x2e>
 802094a:	6161      	str	r1, [r4, #20]
 802094c:	e7e5      	b.n	802091a <__d2b+0x52>
 802094e:	a801      	add	r0, sp, #4
 8020950:	f7ff fce8 	bl	8020324 <__lo0bits>
 8020954:	9b01      	ldr	r3, [sp, #4]
 8020956:	6163      	str	r3, [r4, #20]
 8020958:	2201      	movs	r2, #1
 802095a:	6122      	str	r2, [r4, #16]
 802095c:	3020      	adds	r0, #32
 802095e:	e7e3      	b.n	8020928 <__d2b+0x60>
 8020960:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020964:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020968:	f8c9 0000 	str.w	r0, [r9]
 802096c:	6918      	ldr	r0, [r3, #16]
 802096e:	f7ff fcb9 	bl	80202e4 <__hi0bits>
 8020972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020976:	e7df      	b.n	8020938 <__d2b+0x70>
 8020978:	08029894 	.word	0x08029894
 802097c:	08029988 	.word	0x08029988

08020980 <__ratio>:
 8020980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020984:	4688      	mov	r8, r1
 8020986:	4669      	mov	r1, sp
 8020988:	4681      	mov	r9, r0
 802098a:	f7ff ff4d 	bl	8020828 <__b2d>
 802098e:	a901      	add	r1, sp, #4
 8020990:	4640      	mov	r0, r8
 8020992:	ec55 4b10 	vmov	r4, r5, d0
 8020996:	f7ff ff47 	bl	8020828 <__b2d>
 802099a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802099e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80209a2:	eba3 0c02 	sub.w	ip, r3, r2
 80209a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80209aa:	1a9b      	subs	r3, r3, r2
 80209ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80209b0:	ec51 0b10 	vmov	r0, r1, d0
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	bfd6      	itet	le
 80209b8:	460a      	movle	r2, r1
 80209ba:	462a      	movgt	r2, r5
 80209bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80209c0:	468b      	mov	fp, r1
 80209c2:	462f      	mov	r7, r5
 80209c4:	bfd4      	ite	le
 80209c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80209ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80209ce:	4620      	mov	r0, r4
 80209d0:	ee10 2a10 	vmov	r2, s0
 80209d4:	465b      	mov	r3, fp
 80209d6:	4639      	mov	r1, r7
 80209d8:	f7df ff48 	bl	800086c <__aeabi_ddiv>
 80209dc:	ec41 0b10 	vmov	d0, r0, r1
 80209e0:	b003      	add	sp, #12
 80209e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080209e6 <__copybits>:
 80209e6:	3901      	subs	r1, #1
 80209e8:	b570      	push	{r4, r5, r6, lr}
 80209ea:	1149      	asrs	r1, r1, #5
 80209ec:	6914      	ldr	r4, [r2, #16]
 80209ee:	3101      	adds	r1, #1
 80209f0:	f102 0314 	add.w	r3, r2, #20
 80209f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80209f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80209fc:	1f05      	subs	r5, r0, #4
 80209fe:	42a3      	cmp	r3, r4
 8020a00:	d30c      	bcc.n	8020a1c <__copybits+0x36>
 8020a02:	1aa3      	subs	r3, r4, r2
 8020a04:	3b11      	subs	r3, #17
 8020a06:	f023 0303 	bic.w	r3, r3, #3
 8020a0a:	3211      	adds	r2, #17
 8020a0c:	42a2      	cmp	r2, r4
 8020a0e:	bf88      	it	hi
 8020a10:	2300      	movhi	r3, #0
 8020a12:	4418      	add	r0, r3
 8020a14:	2300      	movs	r3, #0
 8020a16:	4288      	cmp	r0, r1
 8020a18:	d305      	bcc.n	8020a26 <__copybits+0x40>
 8020a1a:	bd70      	pop	{r4, r5, r6, pc}
 8020a1c:	f853 6b04 	ldr.w	r6, [r3], #4
 8020a20:	f845 6f04 	str.w	r6, [r5, #4]!
 8020a24:	e7eb      	b.n	80209fe <__copybits+0x18>
 8020a26:	f840 3b04 	str.w	r3, [r0], #4
 8020a2a:	e7f4      	b.n	8020a16 <__copybits+0x30>

08020a2c <__any_on>:
 8020a2c:	f100 0214 	add.w	r2, r0, #20
 8020a30:	6900      	ldr	r0, [r0, #16]
 8020a32:	114b      	asrs	r3, r1, #5
 8020a34:	4298      	cmp	r0, r3
 8020a36:	b510      	push	{r4, lr}
 8020a38:	db11      	blt.n	8020a5e <__any_on+0x32>
 8020a3a:	dd0a      	ble.n	8020a52 <__any_on+0x26>
 8020a3c:	f011 011f 	ands.w	r1, r1, #31
 8020a40:	d007      	beq.n	8020a52 <__any_on+0x26>
 8020a42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020a46:	fa24 f001 	lsr.w	r0, r4, r1
 8020a4a:	fa00 f101 	lsl.w	r1, r0, r1
 8020a4e:	428c      	cmp	r4, r1
 8020a50:	d10b      	bne.n	8020a6a <__any_on+0x3e>
 8020a52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020a56:	4293      	cmp	r3, r2
 8020a58:	d803      	bhi.n	8020a62 <__any_on+0x36>
 8020a5a:	2000      	movs	r0, #0
 8020a5c:	bd10      	pop	{r4, pc}
 8020a5e:	4603      	mov	r3, r0
 8020a60:	e7f7      	b.n	8020a52 <__any_on+0x26>
 8020a62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020a66:	2900      	cmp	r1, #0
 8020a68:	d0f5      	beq.n	8020a56 <__any_on+0x2a>
 8020a6a:	2001      	movs	r0, #1
 8020a6c:	e7f6      	b.n	8020a5c <__any_on+0x30>

08020a6e <_calloc_r>:
 8020a6e:	b513      	push	{r0, r1, r4, lr}
 8020a70:	434a      	muls	r2, r1
 8020a72:	4611      	mov	r1, r2
 8020a74:	9201      	str	r2, [sp, #4]
 8020a76:	f000 f859 	bl	8020b2c <_malloc_r>
 8020a7a:	4604      	mov	r4, r0
 8020a7c:	b118      	cbz	r0, 8020a86 <_calloc_r+0x18>
 8020a7e:	9a01      	ldr	r2, [sp, #4]
 8020a80:	2100      	movs	r1, #0
 8020a82:	f7fc fabd 	bl	801d000 <memset>
 8020a86:	4620      	mov	r0, r4
 8020a88:	b002      	add	sp, #8
 8020a8a:	bd10      	pop	{r4, pc}

08020a8c <_free_r>:
 8020a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020a8e:	2900      	cmp	r1, #0
 8020a90:	d048      	beq.n	8020b24 <_free_r+0x98>
 8020a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020a96:	9001      	str	r0, [sp, #4]
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8020a9e:	bfb8      	it	lt
 8020aa0:	18e4      	addlt	r4, r4, r3
 8020aa2:	f000 fcd9 	bl	8021458 <__malloc_lock>
 8020aa6:	4a20      	ldr	r2, [pc, #128]	; (8020b28 <_free_r+0x9c>)
 8020aa8:	9801      	ldr	r0, [sp, #4]
 8020aaa:	6813      	ldr	r3, [r2, #0]
 8020aac:	4615      	mov	r5, r2
 8020aae:	b933      	cbnz	r3, 8020abe <_free_r+0x32>
 8020ab0:	6063      	str	r3, [r4, #4]
 8020ab2:	6014      	str	r4, [r2, #0]
 8020ab4:	b003      	add	sp, #12
 8020ab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020aba:	f000 bcd3 	b.w	8021464 <__malloc_unlock>
 8020abe:	42a3      	cmp	r3, r4
 8020ac0:	d90b      	bls.n	8020ada <_free_r+0x4e>
 8020ac2:	6821      	ldr	r1, [r4, #0]
 8020ac4:	1862      	adds	r2, r4, r1
 8020ac6:	4293      	cmp	r3, r2
 8020ac8:	bf04      	itt	eq
 8020aca:	681a      	ldreq	r2, [r3, #0]
 8020acc:	685b      	ldreq	r3, [r3, #4]
 8020ace:	6063      	str	r3, [r4, #4]
 8020ad0:	bf04      	itt	eq
 8020ad2:	1852      	addeq	r2, r2, r1
 8020ad4:	6022      	streq	r2, [r4, #0]
 8020ad6:	602c      	str	r4, [r5, #0]
 8020ad8:	e7ec      	b.n	8020ab4 <_free_r+0x28>
 8020ada:	461a      	mov	r2, r3
 8020adc:	685b      	ldr	r3, [r3, #4]
 8020ade:	b10b      	cbz	r3, 8020ae4 <_free_r+0x58>
 8020ae0:	42a3      	cmp	r3, r4
 8020ae2:	d9fa      	bls.n	8020ada <_free_r+0x4e>
 8020ae4:	6811      	ldr	r1, [r2, #0]
 8020ae6:	1855      	adds	r5, r2, r1
 8020ae8:	42a5      	cmp	r5, r4
 8020aea:	d10b      	bne.n	8020b04 <_free_r+0x78>
 8020aec:	6824      	ldr	r4, [r4, #0]
 8020aee:	4421      	add	r1, r4
 8020af0:	1854      	adds	r4, r2, r1
 8020af2:	42a3      	cmp	r3, r4
 8020af4:	6011      	str	r1, [r2, #0]
 8020af6:	d1dd      	bne.n	8020ab4 <_free_r+0x28>
 8020af8:	681c      	ldr	r4, [r3, #0]
 8020afa:	685b      	ldr	r3, [r3, #4]
 8020afc:	6053      	str	r3, [r2, #4]
 8020afe:	4421      	add	r1, r4
 8020b00:	6011      	str	r1, [r2, #0]
 8020b02:	e7d7      	b.n	8020ab4 <_free_r+0x28>
 8020b04:	d902      	bls.n	8020b0c <_free_r+0x80>
 8020b06:	230c      	movs	r3, #12
 8020b08:	6003      	str	r3, [r0, #0]
 8020b0a:	e7d3      	b.n	8020ab4 <_free_r+0x28>
 8020b0c:	6825      	ldr	r5, [r4, #0]
 8020b0e:	1961      	adds	r1, r4, r5
 8020b10:	428b      	cmp	r3, r1
 8020b12:	bf04      	itt	eq
 8020b14:	6819      	ldreq	r1, [r3, #0]
 8020b16:	685b      	ldreq	r3, [r3, #4]
 8020b18:	6063      	str	r3, [r4, #4]
 8020b1a:	bf04      	itt	eq
 8020b1c:	1949      	addeq	r1, r1, r5
 8020b1e:	6021      	streq	r1, [r4, #0]
 8020b20:	6054      	str	r4, [r2, #4]
 8020b22:	e7c7      	b.n	8020ab4 <_free_r+0x28>
 8020b24:	b003      	add	sp, #12
 8020b26:	bd30      	pop	{r4, r5, pc}
 8020b28:	20001f34 	.word	0x20001f34

08020b2c <_malloc_r>:
 8020b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b2e:	1ccd      	adds	r5, r1, #3
 8020b30:	f025 0503 	bic.w	r5, r5, #3
 8020b34:	3508      	adds	r5, #8
 8020b36:	2d0c      	cmp	r5, #12
 8020b38:	bf38      	it	cc
 8020b3a:	250c      	movcc	r5, #12
 8020b3c:	2d00      	cmp	r5, #0
 8020b3e:	4606      	mov	r6, r0
 8020b40:	db01      	blt.n	8020b46 <_malloc_r+0x1a>
 8020b42:	42a9      	cmp	r1, r5
 8020b44:	d903      	bls.n	8020b4e <_malloc_r+0x22>
 8020b46:	230c      	movs	r3, #12
 8020b48:	6033      	str	r3, [r6, #0]
 8020b4a:	2000      	movs	r0, #0
 8020b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b4e:	f000 fc83 	bl	8021458 <__malloc_lock>
 8020b52:	4921      	ldr	r1, [pc, #132]	; (8020bd8 <_malloc_r+0xac>)
 8020b54:	680a      	ldr	r2, [r1, #0]
 8020b56:	4614      	mov	r4, r2
 8020b58:	b99c      	cbnz	r4, 8020b82 <_malloc_r+0x56>
 8020b5a:	4f20      	ldr	r7, [pc, #128]	; (8020bdc <_malloc_r+0xb0>)
 8020b5c:	683b      	ldr	r3, [r7, #0]
 8020b5e:	b923      	cbnz	r3, 8020b6a <_malloc_r+0x3e>
 8020b60:	4621      	mov	r1, r4
 8020b62:	4630      	mov	r0, r6
 8020b64:	f000 f9a0 	bl	8020ea8 <_sbrk_r>
 8020b68:	6038      	str	r0, [r7, #0]
 8020b6a:	4629      	mov	r1, r5
 8020b6c:	4630      	mov	r0, r6
 8020b6e:	f000 f99b 	bl	8020ea8 <_sbrk_r>
 8020b72:	1c43      	adds	r3, r0, #1
 8020b74:	d123      	bne.n	8020bbe <_malloc_r+0x92>
 8020b76:	230c      	movs	r3, #12
 8020b78:	6033      	str	r3, [r6, #0]
 8020b7a:	4630      	mov	r0, r6
 8020b7c:	f000 fc72 	bl	8021464 <__malloc_unlock>
 8020b80:	e7e3      	b.n	8020b4a <_malloc_r+0x1e>
 8020b82:	6823      	ldr	r3, [r4, #0]
 8020b84:	1b5b      	subs	r3, r3, r5
 8020b86:	d417      	bmi.n	8020bb8 <_malloc_r+0x8c>
 8020b88:	2b0b      	cmp	r3, #11
 8020b8a:	d903      	bls.n	8020b94 <_malloc_r+0x68>
 8020b8c:	6023      	str	r3, [r4, #0]
 8020b8e:	441c      	add	r4, r3
 8020b90:	6025      	str	r5, [r4, #0]
 8020b92:	e004      	b.n	8020b9e <_malloc_r+0x72>
 8020b94:	6863      	ldr	r3, [r4, #4]
 8020b96:	42a2      	cmp	r2, r4
 8020b98:	bf0c      	ite	eq
 8020b9a:	600b      	streq	r3, [r1, #0]
 8020b9c:	6053      	strne	r3, [r2, #4]
 8020b9e:	4630      	mov	r0, r6
 8020ba0:	f000 fc60 	bl	8021464 <__malloc_unlock>
 8020ba4:	f104 000b 	add.w	r0, r4, #11
 8020ba8:	1d23      	adds	r3, r4, #4
 8020baa:	f020 0007 	bic.w	r0, r0, #7
 8020bae:	1ac2      	subs	r2, r0, r3
 8020bb0:	d0cc      	beq.n	8020b4c <_malloc_r+0x20>
 8020bb2:	1a1b      	subs	r3, r3, r0
 8020bb4:	50a3      	str	r3, [r4, r2]
 8020bb6:	e7c9      	b.n	8020b4c <_malloc_r+0x20>
 8020bb8:	4622      	mov	r2, r4
 8020bba:	6864      	ldr	r4, [r4, #4]
 8020bbc:	e7cc      	b.n	8020b58 <_malloc_r+0x2c>
 8020bbe:	1cc4      	adds	r4, r0, #3
 8020bc0:	f024 0403 	bic.w	r4, r4, #3
 8020bc4:	42a0      	cmp	r0, r4
 8020bc6:	d0e3      	beq.n	8020b90 <_malloc_r+0x64>
 8020bc8:	1a21      	subs	r1, r4, r0
 8020bca:	4630      	mov	r0, r6
 8020bcc:	f000 f96c 	bl	8020ea8 <_sbrk_r>
 8020bd0:	3001      	adds	r0, #1
 8020bd2:	d1dd      	bne.n	8020b90 <_malloc_r+0x64>
 8020bd4:	e7cf      	b.n	8020b76 <_malloc_r+0x4a>
 8020bd6:	bf00      	nop
 8020bd8:	20001f34 	.word	0x20001f34
 8020bdc:	20001f38 	.word	0x20001f38

08020be0 <__ssputs_r>:
 8020be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020be4:	688e      	ldr	r6, [r1, #8]
 8020be6:	429e      	cmp	r6, r3
 8020be8:	4682      	mov	sl, r0
 8020bea:	460c      	mov	r4, r1
 8020bec:	4690      	mov	r8, r2
 8020bee:	461f      	mov	r7, r3
 8020bf0:	d838      	bhi.n	8020c64 <__ssputs_r+0x84>
 8020bf2:	898a      	ldrh	r2, [r1, #12]
 8020bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020bf8:	d032      	beq.n	8020c60 <__ssputs_r+0x80>
 8020bfa:	6825      	ldr	r5, [r4, #0]
 8020bfc:	6909      	ldr	r1, [r1, #16]
 8020bfe:	eba5 0901 	sub.w	r9, r5, r1
 8020c02:	6965      	ldr	r5, [r4, #20]
 8020c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020c0c:	3301      	adds	r3, #1
 8020c0e:	444b      	add	r3, r9
 8020c10:	106d      	asrs	r5, r5, #1
 8020c12:	429d      	cmp	r5, r3
 8020c14:	bf38      	it	cc
 8020c16:	461d      	movcc	r5, r3
 8020c18:	0553      	lsls	r3, r2, #21
 8020c1a:	d531      	bpl.n	8020c80 <__ssputs_r+0xa0>
 8020c1c:	4629      	mov	r1, r5
 8020c1e:	f7ff ff85 	bl	8020b2c <_malloc_r>
 8020c22:	4606      	mov	r6, r0
 8020c24:	b950      	cbnz	r0, 8020c3c <__ssputs_r+0x5c>
 8020c26:	230c      	movs	r3, #12
 8020c28:	f8ca 3000 	str.w	r3, [sl]
 8020c2c:	89a3      	ldrh	r3, [r4, #12]
 8020c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c32:	81a3      	strh	r3, [r4, #12]
 8020c34:	f04f 30ff 	mov.w	r0, #4294967295
 8020c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c3c:	6921      	ldr	r1, [r4, #16]
 8020c3e:	464a      	mov	r2, r9
 8020c40:	f7ff fa4c 	bl	80200dc <memcpy>
 8020c44:	89a3      	ldrh	r3, [r4, #12]
 8020c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c4e:	81a3      	strh	r3, [r4, #12]
 8020c50:	6126      	str	r6, [r4, #16]
 8020c52:	6165      	str	r5, [r4, #20]
 8020c54:	444e      	add	r6, r9
 8020c56:	eba5 0509 	sub.w	r5, r5, r9
 8020c5a:	6026      	str	r6, [r4, #0]
 8020c5c:	60a5      	str	r5, [r4, #8]
 8020c5e:	463e      	mov	r6, r7
 8020c60:	42be      	cmp	r6, r7
 8020c62:	d900      	bls.n	8020c66 <__ssputs_r+0x86>
 8020c64:	463e      	mov	r6, r7
 8020c66:	4632      	mov	r2, r6
 8020c68:	6820      	ldr	r0, [r4, #0]
 8020c6a:	4641      	mov	r1, r8
 8020c6c:	f000 fbda 	bl	8021424 <memmove>
 8020c70:	68a3      	ldr	r3, [r4, #8]
 8020c72:	6822      	ldr	r2, [r4, #0]
 8020c74:	1b9b      	subs	r3, r3, r6
 8020c76:	4432      	add	r2, r6
 8020c78:	60a3      	str	r3, [r4, #8]
 8020c7a:	6022      	str	r2, [r4, #0]
 8020c7c:	2000      	movs	r0, #0
 8020c7e:	e7db      	b.n	8020c38 <__ssputs_r+0x58>
 8020c80:	462a      	mov	r2, r5
 8020c82:	f000 fbf5 	bl	8021470 <_realloc_r>
 8020c86:	4606      	mov	r6, r0
 8020c88:	2800      	cmp	r0, #0
 8020c8a:	d1e1      	bne.n	8020c50 <__ssputs_r+0x70>
 8020c8c:	6921      	ldr	r1, [r4, #16]
 8020c8e:	4650      	mov	r0, sl
 8020c90:	f7ff fefc 	bl	8020a8c <_free_r>
 8020c94:	e7c7      	b.n	8020c26 <__ssputs_r+0x46>
	...

08020c98 <_svfiprintf_r>:
 8020c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c9c:	4698      	mov	r8, r3
 8020c9e:	898b      	ldrh	r3, [r1, #12]
 8020ca0:	061b      	lsls	r3, r3, #24
 8020ca2:	b09d      	sub	sp, #116	; 0x74
 8020ca4:	4607      	mov	r7, r0
 8020ca6:	460d      	mov	r5, r1
 8020ca8:	4614      	mov	r4, r2
 8020caa:	d50e      	bpl.n	8020cca <_svfiprintf_r+0x32>
 8020cac:	690b      	ldr	r3, [r1, #16]
 8020cae:	b963      	cbnz	r3, 8020cca <_svfiprintf_r+0x32>
 8020cb0:	2140      	movs	r1, #64	; 0x40
 8020cb2:	f7ff ff3b 	bl	8020b2c <_malloc_r>
 8020cb6:	6028      	str	r0, [r5, #0]
 8020cb8:	6128      	str	r0, [r5, #16]
 8020cba:	b920      	cbnz	r0, 8020cc6 <_svfiprintf_r+0x2e>
 8020cbc:	230c      	movs	r3, #12
 8020cbe:	603b      	str	r3, [r7, #0]
 8020cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8020cc4:	e0d1      	b.n	8020e6a <_svfiprintf_r+0x1d2>
 8020cc6:	2340      	movs	r3, #64	; 0x40
 8020cc8:	616b      	str	r3, [r5, #20]
 8020cca:	2300      	movs	r3, #0
 8020ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8020cce:	2320      	movs	r3, #32
 8020cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8020cd8:	2330      	movs	r3, #48	; 0x30
 8020cda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020e84 <_svfiprintf_r+0x1ec>
 8020cde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020ce2:	f04f 0901 	mov.w	r9, #1
 8020ce6:	4623      	mov	r3, r4
 8020ce8:	469a      	mov	sl, r3
 8020cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020cee:	b10a      	cbz	r2, 8020cf4 <_svfiprintf_r+0x5c>
 8020cf0:	2a25      	cmp	r2, #37	; 0x25
 8020cf2:	d1f9      	bne.n	8020ce8 <_svfiprintf_r+0x50>
 8020cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8020cf8:	d00b      	beq.n	8020d12 <_svfiprintf_r+0x7a>
 8020cfa:	465b      	mov	r3, fp
 8020cfc:	4622      	mov	r2, r4
 8020cfe:	4629      	mov	r1, r5
 8020d00:	4638      	mov	r0, r7
 8020d02:	f7ff ff6d 	bl	8020be0 <__ssputs_r>
 8020d06:	3001      	adds	r0, #1
 8020d08:	f000 80aa 	beq.w	8020e60 <_svfiprintf_r+0x1c8>
 8020d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d0e:	445a      	add	r2, fp
 8020d10:	9209      	str	r2, [sp, #36]	; 0x24
 8020d12:	f89a 3000 	ldrb.w	r3, [sl]
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	f000 80a2 	beq.w	8020e60 <_svfiprintf_r+0x1c8>
 8020d1c:	2300      	movs	r3, #0
 8020d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8020d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020d26:	f10a 0a01 	add.w	sl, sl, #1
 8020d2a:	9304      	str	r3, [sp, #16]
 8020d2c:	9307      	str	r3, [sp, #28]
 8020d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020d32:	931a      	str	r3, [sp, #104]	; 0x68
 8020d34:	4654      	mov	r4, sl
 8020d36:	2205      	movs	r2, #5
 8020d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d3c:	4851      	ldr	r0, [pc, #324]	; (8020e84 <_svfiprintf_r+0x1ec>)
 8020d3e:	f7df fa5f 	bl	8000200 <memchr>
 8020d42:	9a04      	ldr	r2, [sp, #16]
 8020d44:	b9d8      	cbnz	r0, 8020d7e <_svfiprintf_r+0xe6>
 8020d46:	06d0      	lsls	r0, r2, #27
 8020d48:	bf44      	itt	mi
 8020d4a:	2320      	movmi	r3, #32
 8020d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d50:	0711      	lsls	r1, r2, #28
 8020d52:	bf44      	itt	mi
 8020d54:	232b      	movmi	r3, #43	; 0x2b
 8020d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8020d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8020d60:	d015      	beq.n	8020d8e <_svfiprintf_r+0xf6>
 8020d62:	9a07      	ldr	r2, [sp, #28]
 8020d64:	4654      	mov	r4, sl
 8020d66:	2000      	movs	r0, #0
 8020d68:	f04f 0c0a 	mov.w	ip, #10
 8020d6c:	4621      	mov	r1, r4
 8020d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020d72:	3b30      	subs	r3, #48	; 0x30
 8020d74:	2b09      	cmp	r3, #9
 8020d76:	d94e      	bls.n	8020e16 <_svfiprintf_r+0x17e>
 8020d78:	b1b0      	cbz	r0, 8020da8 <_svfiprintf_r+0x110>
 8020d7a:	9207      	str	r2, [sp, #28]
 8020d7c:	e014      	b.n	8020da8 <_svfiprintf_r+0x110>
 8020d7e:	eba0 0308 	sub.w	r3, r0, r8
 8020d82:	fa09 f303 	lsl.w	r3, r9, r3
 8020d86:	4313      	orrs	r3, r2
 8020d88:	9304      	str	r3, [sp, #16]
 8020d8a:	46a2      	mov	sl, r4
 8020d8c:	e7d2      	b.n	8020d34 <_svfiprintf_r+0x9c>
 8020d8e:	9b03      	ldr	r3, [sp, #12]
 8020d90:	1d19      	adds	r1, r3, #4
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	9103      	str	r1, [sp, #12]
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	bfbb      	ittet	lt
 8020d9a:	425b      	neglt	r3, r3
 8020d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8020da0:	9307      	strge	r3, [sp, #28]
 8020da2:	9307      	strlt	r3, [sp, #28]
 8020da4:	bfb8      	it	lt
 8020da6:	9204      	strlt	r2, [sp, #16]
 8020da8:	7823      	ldrb	r3, [r4, #0]
 8020daa:	2b2e      	cmp	r3, #46	; 0x2e
 8020dac:	d10c      	bne.n	8020dc8 <_svfiprintf_r+0x130>
 8020dae:	7863      	ldrb	r3, [r4, #1]
 8020db0:	2b2a      	cmp	r3, #42	; 0x2a
 8020db2:	d135      	bne.n	8020e20 <_svfiprintf_r+0x188>
 8020db4:	9b03      	ldr	r3, [sp, #12]
 8020db6:	1d1a      	adds	r2, r3, #4
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	9203      	str	r2, [sp, #12]
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	bfb8      	it	lt
 8020dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8020dc4:	3402      	adds	r4, #2
 8020dc6:	9305      	str	r3, [sp, #20]
 8020dc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020e94 <_svfiprintf_r+0x1fc>
 8020dcc:	7821      	ldrb	r1, [r4, #0]
 8020dce:	2203      	movs	r2, #3
 8020dd0:	4650      	mov	r0, sl
 8020dd2:	f7df fa15 	bl	8000200 <memchr>
 8020dd6:	b140      	cbz	r0, 8020dea <_svfiprintf_r+0x152>
 8020dd8:	2340      	movs	r3, #64	; 0x40
 8020dda:	eba0 000a 	sub.w	r0, r0, sl
 8020dde:	fa03 f000 	lsl.w	r0, r3, r0
 8020de2:	9b04      	ldr	r3, [sp, #16]
 8020de4:	4303      	orrs	r3, r0
 8020de6:	3401      	adds	r4, #1
 8020de8:	9304      	str	r3, [sp, #16]
 8020dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020dee:	4826      	ldr	r0, [pc, #152]	; (8020e88 <_svfiprintf_r+0x1f0>)
 8020df0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020df4:	2206      	movs	r2, #6
 8020df6:	f7df fa03 	bl	8000200 <memchr>
 8020dfa:	2800      	cmp	r0, #0
 8020dfc:	d038      	beq.n	8020e70 <_svfiprintf_r+0x1d8>
 8020dfe:	4b23      	ldr	r3, [pc, #140]	; (8020e8c <_svfiprintf_r+0x1f4>)
 8020e00:	bb1b      	cbnz	r3, 8020e4a <_svfiprintf_r+0x1b2>
 8020e02:	9b03      	ldr	r3, [sp, #12]
 8020e04:	3307      	adds	r3, #7
 8020e06:	f023 0307 	bic.w	r3, r3, #7
 8020e0a:	3308      	adds	r3, #8
 8020e0c:	9303      	str	r3, [sp, #12]
 8020e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e10:	4433      	add	r3, r6
 8020e12:	9309      	str	r3, [sp, #36]	; 0x24
 8020e14:	e767      	b.n	8020ce6 <_svfiprintf_r+0x4e>
 8020e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8020e1a:	460c      	mov	r4, r1
 8020e1c:	2001      	movs	r0, #1
 8020e1e:	e7a5      	b.n	8020d6c <_svfiprintf_r+0xd4>
 8020e20:	2300      	movs	r3, #0
 8020e22:	3401      	adds	r4, #1
 8020e24:	9305      	str	r3, [sp, #20]
 8020e26:	4619      	mov	r1, r3
 8020e28:	f04f 0c0a 	mov.w	ip, #10
 8020e2c:	4620      	mov	r0, r4
 8020e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e32:	3a30      	subs	r2, #48	; 0x30
 8020e34:	2a09      	cmp	r2, #9
 8020e36:	d903      	bls.n	8020e40 <_svfiprintf_r+0x1a8>
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	d0c5      	beq.n	8020dc8 <_svfiprintf_r+0x130>
 8020e3c:	9105      	str	r1, [sp, #20]
 8020e3e:	e7c3      	b.n	8020dc8 <_svfiprintf_r+0x130>
 8020e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8020e44:	4604      	mov	r4, r0
 8020e46:	2301      	movs	r3, #1
 8020e48:	e7f0      	b.n	8020e2c <_svfiprintf_r+0x194>
 8020e4a:	ab03      	add	r3, sp, #12
 8020e4c:	9300      	str	r3, [sp, #0]
 8020e4e:	462a      	mov	r2, r5
 8020e50:	4b0f      	ldr	r3, [pc, #60]	; (8020e90 <_svfiprintf_r+0x1f8>)
 8020e52:	a904      	add	r1, sp, #16
 8020e54:	4638      	mov	r0, r7
 8020e56:	f7fc f97b 	bl	801d150 <_printf_float>
 8020e5a:	1c42      	adds	r2, r0, #1
 8020e5c:	4606      	mov	r6, r0
 8020e5e:	d1d6      	bne.n	8020e0e <_svfiprintf_r+0x176>
 8020e60:	89ab      	ldrh	r3, [r5, #12]
 8020e62:	065b      	lsls	r3, r3, #25
 8020e64:	f53f af2c 	bmi.w	8020cc0 <_svfiprintf_r+0x28>
 8020e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e6a:	b01d      	add	sp, #116	; 0x74
 8020e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e70:	ab03      	add	r3, sp, #12
 8020e72:	9300      	str	r3, [sp, #0]
 8020e74:	462a      	mov	r2, r5
 8020e76:	4b06      	ldr	r3, [pc, #24]	; (8020e90 <_svfiprintf_r+0x1f8>)
 8020e78:	a904      	add	r1, sp, #16
 8020e7a:	4638      	mov	r0, r7
 8020e7c:	f7fc fc0c 	bl	801d698 <_printf_i>
 8020e80:	e7eb      	b.n	8020e5a <_svfiprintf_r+0x1c2>
 8020e82:	bf00      	nop
 8020e84:	08029ae4 	.word	0x08029ae4
 8020e88:	08029aee 	.word	0x08029aee
 8020e8c:	0801d151 	.word	0x0801d151
 8020e90:	08020be1 	.word	0x08020be1
 8020e94:	08029aea 	.word	0x08029aea

08020e98 <nan>:
 8020e98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020ea0 <nan+0x8>
 8020e9c:	4770      	bx	lr
 8020e9e:	bf00      	nop
 8020ea0:	00000000 	.word	0x00000000
 8020ea4:	7ff80000 	.word	0x7ff80000

08020ea8 <_sbrk_r>:
 8020ea8:	b538      	push	{r3, r4, r5, lr}
 8020eaa:	4d06      	ldr	r5, [pc, #24]	; (8020ec4 <_sbrk_r+0x1c>)
 8020eac:	2300      	movs	r3, #0
 8020eae:	4604      	mov	r4, r0
 8020eb0:	4608      	mov	r0, r1
 8020eb2:	602b      	str	r3, [r5, #0]
 8020eb4:	f7e6 fc06 	bl	80076c4 <_sbrk>
 8020eb8:	1c43      	adds	r3, r0, #1
 8020eba:	d102      	bne.n	8020ec2 <_sbrk_r+0x1a>
 8020ebc:	682b      	ldr	r3, [r5, #0]
 8020ebe:	b103      	cbz	r3, 8020ec2 <_sbrk_r+0x1a>
 8020ec0:	6023      	str	r3, [r4, #0]
 8020ec2:	bd38      	pop	{r3, r4, r5, pc}
 8020ec4:	2000a044 	.word	0x2000a044

08020ec8 <__sread>:
 8020ec8:	b510      	push	{r4, lr}
 8020eca:	460c      	mov	r4, r1
 8020ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ed0:	f000 fc4e 	bl	8021770 <_read_r>
 8020ed4:	2800      	cmp	r0, #0
 8020ed6:	bfab      	itete	ge
 8020ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020eda:	89a3      	ldrhlt	r3, [r4, #12]
 8020edc:	181b      	addge	r3, r3, r0
 8020ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020ee2:	bfac      	ite	ge
 8020ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8020ee6:	81a3      	strhlt	r3, [r4, #12]
 8020ee8:	bd10      	pop	{r4, pc}

08020eea <__swrite>:
 8020eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020eee:	461f      	mov	r7, r3
 8020ef0:	898b      	ldrh	r3, [r1, #12]
 8020ef2:	05db      	lsls	r3, r3, #23
 8020ef4:	4605      	mov	r5, r0
 8020ef6:	460c      	mov	r4, r1
 8020ef8:	4616      	mov	r6, r2
 8020efa:	d505      	bpl.n	8020f08 <__swrite+0x1e>
 8020efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f00:	2302      	movs	r3, #2
 8020f02:	2200      	movs	r2, #0
 8020f04:	f000 fa18 	bl	8021338 <_lseek_r>
 8020f08:	89a3      	ldrh	r3, [r4, #12]
 8020f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020f12:	81a3      	strh	r3, [r4, #12]
 8020f14:	4632      	mov	r2, r6
 8020f16:	463b      	mov	r3, r7
 8020f18:	4628      	mov	r0, r5
 8020f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020f1e:	f000 b889 	b.w	8021034 <_write_r>

08020f22 <__sseek>:
 8020f22:	b510      	push	{r4, lr}
 8020f24:	460c      	mov	r4, r1
 8020f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f2a:	f000 fa05 	bl	8021338 <_lseek_r>
 8020f2e:	1c43      	adds	r3, r0, #1
 8020f30:	89a3      	ldrh	r3, [r4, #12]
 8020f32:	bf15      	itete	ne
 8020f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8020f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020f3e:	81a3      	strheq	r3, [r4, #12]
 8020f40:	bf18      	it	ne
 8020f42:	81a3      	strhne	r3, [r4, #12]
 8020f44:	bd10      	pop	{r4, pc}

08020f46 <__sclose>:
 8020f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f4a:	f000 b911 	b.w	8021170 <_close_r>

08020f4e <strncmp>:
 8020f4e:	b510      	push	{r4, lr}
 8020f50:	b16a      	cbz	r2, 8020f6e <strncmp+0x20>
 8020f52:	3901      	subs	r1, #1
 8020f54:	1884      	adds	r4, r0, r2
 8020f56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020f5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020f5e:	4293      	cmp	r3, r2
 8020f60:	d103      	bne.n	8020f6a <strncmp+0x1c>
 8020f62:	42a0      	cmp	r0, r4
 8020f64:	d001      	beq.n	8020f6a <strncmp+0x1c>
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	d1f5      	bne.n	8020f56 <strncmp+0x8>
 8020f6a:	1a98      	subs	r0, r3, r2
 8020f6c:	bd10      	pop	{r4, pc}
 8020f6e:	4610      	mov	r0, r2
 8020f70:	e7fc      	b.n	8020f6c <strncmp+0x1e>
	...

08020f74 <__swbuf_r>:
 8020f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f76:	460e      	mov	r6, r1
 8020f78:	4614      	mov	r4, r2
 8020f7a:	4605      	mov	r5, r0
 8020f7c:	b118      	cbz	r0, 8020f86 <__swbuf_r+0x12>
 8020f7e:	6983      	ldr	r3, [r0, #24]
 8020f80:	b90b      	cbnz	r3, 8020f86 <__swbuf_r+0x12>
 8020f82:	f7fe fc7d 	bl	801f880 <__sinit>
 8020f86:	4b21      	ldr	r3, [pc, #132]	; (802100c <__swbuf_r+0x98>)
 8020f88:	429c      	cmp	r4, r3
 8020f8a:	d12b      	bne.n	8020fe4 <__swbuf_r+0x70>
 8020f8c:	686c      	ldr	r4, [r5, #4]
 8020f8e:	69a3      	ldr	r3, [r4, #24]
 8020f90:	60a3      	str	r3, [r4, #8]
 8020f92:	89a3      	ldrh	r3, [r4, #12]
 8020f94:	071a      	lsls	r2, r3, #28
 8020f96:	d52f      	bpl.n	8020ff8 <__swbuf_r+0x84>
 8020f98:	6923      	ldr	r3, [r4, #16]
 8020f9a:	b36b      	cbz	r3, 8020ff8 <__swbuf_r+0x84>
 8020f9c:	6923      	ldr	r3, [r4, #16]
 8020f9e:	6820      	ldr	r0, [r4, #0]
 8020fa0:	1ac0      	subs	r0, r0, r3
 8020fa2:	6963      	ldr	r3, [r4, #20]
 8020fa4:	b2f6      	uxtb	r6, r6
 8020fa6:	4283      	cmp	r3, r0
 8020fa8:	4637      	mov	r7, r6
 8020faa:	dc04      	bgt.n	8020fb6 <__swbuf_r+0x42>
 8020fac:	4621      	mov	r1, r4
 8020fae:	4628      	mov	r0, r5
 8020fb0:	f000 f974 	bl	802129c <_fflush_r>
 8020fb4:	bb30      	cbnz	r0, 8021004 <__swbuf_r+0x90>
 8020fb6:	68a3      	ldr	r3, [r4, #8]
 8020fb8:	3b01      	subs	r3, #1
 8020fba:	60a3      	str	r3, [r4, #8]
 8020fbc:	6823      	ldr	r3, [r4, #0]
 8020fbe:	1c5a      	adds	r2, r3, #1
 8020fc0:	6022      	str	r2, [r4, #0]
 8020fc2:	701e      	strb	r6, [r3, #0]
 8020fc4:	6963      	ldr	r3, [r4, #20]
 8020fc6:	3001      	adds	r0, #1
 8020fc8:	4283      	cmp	r3, r0
 8020fca:	d004      	beq.n	8020fd6 <__swbuf_r+0x62>
 8020fcc:	89a3      	ldrh	r3, [r4, #12]
 8020fce:	07db      	lsls	r3, r3, #31
 8020fd0:	d506      	bpl.n	8020fe0 <__swbuf_r+0x6c>
 8020fd2:	2e0a      	cmp	r6, #10
 8020fd4:	d104      	bne.n	8020fe0 <__swbuf_r+0x6c>
 8020fd6:	4621      	mov	r1, r4
 8020fd8:	4628      	mov	r0, r5
 8020fda:	f000 f95f 	bl	802129c <_fflush_r>
 8020fde:	b988      	cbnz	r0, 8021004 <__swbuf_r+0x90>
 8020fe0:	4638      	mov	r0, r7
 8020fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020fe4:	4b0a      	ldr	r3, [pc, #40]	; (8021010 <__swbuf_r+0x9c>)
 8020fe6:	429c      	cmp	r4, r3
 8020fe8:	d101      	bne.n	8020fee <__swbuf_r+0x7a>
 8020fea:	68ac      	ldr	r4, [r5, #8]
 8020fec:	e7cf      	b.n	8020f8e <__swbuf_r+0x1a>
 8020fee:	4b09      	ldr	r3, [pc, #36]	; (8021014 <__swbuf_r+0xa0>)
 8020ff0:	429c      	cmp	r4, r3
 8020ff2:	bf08      	it	eq
 8020ff4:	68ec      	ldreq	r4, [r5, #12]
 8020ff6:	e7ca      	b.n	8020f8e <__swbuf_r+0x1a>
 8020ff8:	4621      	mov	r1, r4
 8020ffa:	4628      	mov	r0, r5
 8020ffc:	f000 f82c 	bl	8021058 <__swsetup_r>
 8021000:	2800      	cmp	r0, #0
 8021002:	d0cb      	beq.n	8020f9c <__swbuf_r+0x28>
 8021004:	f04f 37ff 	mov.w	r7, #4294967295
 8021008:	e7ea      	b.n	8020fe0 <__swbuf_r+0x6c>
 802100a:	bf00      	nop
 802100c:	080298c8 	.word	0x080298c8
 8021010:	080298e8 	.word	0x080298e8
 8021014:	080298a8 	.word	0x080298a8

08021018 <__ascii_wctomb>:
 8021018:	b149      	cbz	r1, 802102e <__ascii_wctomb+0x16>
 802101a:	2aff      	cmp	r2, #255	; 0xff
 802101c:	bf85      	ittet	hi
 802101e:	238a      	movhi	r3, #138	; 0x8a
 8021020:	6003      	strhi	r3, [r0, #0]
 8021022:	700a      	strbls	r2, [r1, #0]
 8021024:	f04f 30ff 	movhi.w	r0, #4294967295
 8021028:	bf98      	it	ls
 802102a:	2001      	movls	r0, #1
 802102c:	4770      	bx	lr
 802102e:	4608      	mov	r0, r1
 8021030:	4770      	bx	lr
	...

08021034 <_write_r>:
 8021034:	b538      	push	{r3, r4, r5, lr}
 8021036:	4d07      	ldr	r5, [pc, #28]	; (8021054 <_write_r+0x20>)
 8021038:	4604      	mov	r4, r0
 802103a:	4608      	mov	r0, r1
 802103c:	4611      	mov	r1, r2
 802103e:	2200      	movs	r2, #0
 8021040:	602a      	str	r2, [r5, #0]
 8021042:	461a      	mov	r2, r3
 8021044:	f7e6 faed 	bl	8007622 <_write>
 8021048:	1c43      	adds	r3, r0, #1
 802104a:	d102      	bne.n	8021052 <_write_r+0x1e>
 802104c:	682b      	ldr	r3, [r5, #0]
 802104e:	b103      	cbz	r3, 8021052 <_write_r+0x1e>
 8021050:	6023      	str	r3, [r4, #0]
 8021052:	bd38      	pop	{r3, r4, r5, pc}
 8021054:	2000a044 	.word	0x2000a044

08021058 <__swsetup_r>:
 8021058:	4b32      	ldr	r3, [pc, #200]	; (8021124 <__swsetup_r+0xcc>)
 802105a:	b570      	push	{r4, r5, r6, lr}
 802105c:	681d      	ldr	r5, [r3, #0]
 802105e:	4606      	mov	r6, r0
 8021060:	460c      	mov	r4, r1
 8021062:	b125      	cbz	r5, 802106e <__swsetup_r+0x16>
 8021064:	69ab      	ldr	r3, [r5, #24]
 8021066:	b913      	cbnz	r3, 802106e <__swsetup_r+0x16>
 8021068:	4628      	mov	r0, r5
 802106a:	f7fe fc09 	bl	801f880 <__sinit>
 802106e:	4b2e      	ldr	r3, [pc, #184]	; (8021128 <__swsetup_r+0xd0>)
 8021070:	429c      	cmp	r4, r3
 8021072:	d10f      	bne.n	8021094 <__swsetup_r+0x3c>
 8021074:	686c      	ldr	r4, [r5, #4]
 8021076:	89a3      	ldrh	r3, [r4, #12]
 8021078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802107c:	0719      	lsls	r1, r3, #28
 802107e:	d42c      	bmi.n	80210da <__swsetup_r+0x82>
 8021080:	06dd      	lsls	r5, r3, #27
 8021082:	d411      	bmi.n	80210a8 <__swsetup_r+0x50>
 8021084:	2309      	movs	r3, #9
 8021086:	6033      	str	r3, [r6, #0]
 8021088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802108c:	81a3      	strh	r3, [r4, #12]
 802108e:	f04f 30ff 	mov.w	r0, #4294967295
 8021092:	e03e      	b.n	8021112 <__swsetup_r+0xba>
 8021094:	4b25      	ldr	r3, [pc, #148]	; (802112c <__swsetup_r+0xd4>)
 8021096:	429c      	cmp	r4, r3
 8021098:	d101      	bne.n	802109e <__swsetup_r+0x46>
 802109a:	68ac      	ldr	r4, [r5, #8]
 802109c:	e7eb      	b.n	8021076 <__swsetup_r+0x1e>
 802109e:	4b24      	ldr	r3, [pc, #144]	; (8021130 <__swsetup_r+0xd8>)
 80210a0:	429c      	cmp	r4, r3
 80210a2:	bf08      	it	eq
 80210a4:	68ec      	ldreq	r4, [r5, #12]
 80210a6:	e7e6      	b.n	8021076 <__swsetup_r+0x1e>
 80210a8:	0758      	lsls	r0, r3, #29
 80210aa:	d512      	bpl.n	80210d2 <__swsetup_r+0x7a>
 80210ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80210ae:	b141      	cbz	r1, 80210c2 <__swsetup_r+0x6a>
 80210b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80210b4:	4299      	cmp	r1, r3
 80210b6:	d002      	beq.n	80210be <__swsetup_r+0x66>
 80210b8:	4630      	mov	r0, r6
 80210ba:	f7ff fce7 	bl	8020a8c <_free_r>
 80210be:	2300      	movs	r3, #0
 80210c0:	6363      	str	r3, [r4, #52]	; 0x34
 80210c2:	89a3      	ldrh	r3, [r4, #12]
 80210c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80210c8:	81a3      	strh	r3, [r4, #12]
 80210ca:	2300      	movs	r3, #0
 80210cc:	6063      	str	r3, [r4, #4]
 80210ce:	6923      	ldr	r3, [r4, #16]
 80210d0:	6023      	str	r3, [r4, #0]
 80210d2:	89a3      	ldrh	r3, [r4, #12]
 80210d4:	f043 0308 	orr.w	r3, r3, #8
 80210d8:	81a3      	strh	r3, [r4, #12]
 80210da:	6923      	ldr	r3, [r4, #16]
 80210dc:	b94b      	cbnz	r3, 80210f2 <__swsetup_r+0x9a>
 80210de:	89a3      	ldrh	r3, [r4, #12]
 80210e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80210e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80210e8:	d003      	beq.n	80210f2 <__swsetup_r+0x9a>
 80210ea:	4621      	mov	r1, r4
 80210ec:	4630      	mov	r0, r6
 80210ee:	f000 f959 	bl	80213a4 <__smakebuf_r>
 80210f2:	89a0      	ldrh	r0, [r4, #12]
 80210f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80210f8:	f010 0301 	ands.w	r3, r0, #1
 80210fc:	d00a      	beq.n	8021114 <__swsetup_r+0xbc>
 80210fe:	2300      	movs	r3, #0
 8021100:	60a3      	str	r3, [r4, #8]
 8021102:	6963      	ldr	r3, [r4, #20]
 8021104:	425b      	negs	r3, r3
 8021106:	61a3      	str	r3, [r4, #24]
 8021108:	6923      	ldr	r3, [r4, #16]
 802110a:	b943      	cbnz	r3, 802111e <__swsetup_r+0xc6>
 802110c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021110:	d1ba      	bne.n	8021088 <__swsetup_r+0x30>
 8021112:	bd70      	pop	{r4, r5, r6, pc}
 8021114:	0781      	lsls	r1, r0, #30
 8021116:	bf58      	it	pl
 8021118:	6963      	ldrpl	r3, [r4, #20]
 802111a:	60a3      	str	r3, [r4, #8]
 802111c:	e7f4      	b.n	8021108 <__swsetup_r+0xb0>
 802111e:	2000      	movs	r0, #0
 8021120:	e7f7      	b.n	8021112 <__swsetup_r+0xba>
 8021122:	bf00      	nop
 8021124:	2000062c 	.word	0x2000062c
 8021128:	080298c8 	.word	0x080298c8
 802112c:	080298e8 	.word	0x080298e8
 8021130:	080298a8 	.word	0x080298a8

08021134 <__assert_func>:
 8021134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021136:	4614      	mov	r4, r2
 8021138:	461a      	mov	r2, r3
 802113a:	4b09      	ldr	r3, [pc, #36]	; (8021160 <__assert_func+0x2c>)
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	4605      	mov	r5, r0
 8021140:	68d8      	ldr	r0, [r3, #12]
 8021142:	b14c      	cbz	r4, 8021158 <__assert_func+0x24>
 8021144:	4b07      	ldr	r3, [pc, #28]	; (8021164 <__assert_func+0x30>)
 8021146:	9100      	str	r1, [sp, #0]
 8021148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802114c:	4906      	ldr	r1, [pc, #24]	; (8021168 <__assert_func+0x34>)
 802114e:	462b      	mov	r3, r5
 8021150:	f000 f8e0 	bl	8021314 <fiprintf>
 8021154:	f000 fb1e 	bl	8021794 <abort>
 8021158:	4b04      	ldr	r3, [pc, #16]	; (802116c <__assert_func+0x38>)
 802115a:	461c      	mov	r4, r3
 802115c:	e7f3      	b.n	8021146 <__assert_func+0x12>
 802115e:	bf00      	nop
 8021160:	2000062c 	.word	0x2000062c
 8021164:	08029af5 	.word	0x08029af5
 8021168:	08029b02 	.word	0x08029b02
 802116c:	08029b30 	.word	0x08029b30

08021170 <_close_r>:
 8021170:	b538      	push	{r3, r4, r5, lr}
 8021172:	4d06      	ldr	r5, [pc, #24]	; (802118c <_close_r+0x1c>)
 8021174:	2300      	movs	r3, #0
 8021176:	4604      	mov	r4, r0
 8021178:	4608      	mov	r0, r1
 802117a:	602b      	str	r3, [r5, #0]
 802117c:	f7e6 fa6d 	bl	800765a <_close>
 8021180:	1c43      	adds	r3, r0, #1
 8021182:	d102      	bne.n	802118a <_close_r+0x1a>
 8021184:	682b      	ldr	r3, [r5, #0]
 8021186:	b103      	cbz	r3, 802118a <_close_r+0x1a>
 8021188:	6023      	str	r3, [r4, #0]
 802118a:	bd38      	pop	{r3, r4, r5, pc}
 802118c:	2000a044 	.word	0x2000a044

08021190 <__sflush_r>:
 8021190:	898a      	ldrh	r2, [r1, #12]
 8021192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021196:	4605      	mov	r5, r0
 8021198:	0710      	lsls	r0, r2, #28
 802119a:	460c      	mov	r4, r1
 802119c:	d458      	bmi.n	8021250 <__sflush_r+0xc0>
 802119e:	684b      	ldr	r3, [r1, #4]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	dc05      	bgt.n	80211b0 <__sflush_r+0x20>
 80211a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	dc02      	bgt.n	80211b0 <__sflush_r+0x20>
 80211aa:	2000      	movs	r0, #0
 80211ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80211b2:	2e00      	cmp	r6, #0
 80211b4:	d0f9      	beq.n	80211aa <__sflush_r+0x1a>
 80211b6:	2300      	movs	r3, #0
 80211b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80211bc:	682f      	ldr	r7, [r5, #0]
 80211be:	602b      	str	r3, [r5, #0]
 80211c0:	d032      	beq.n	8021228 <__sflush_r+0x98>
 80211c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80211c4:	89a3      	ldrh	r3, [r4, #12]
 80211c6:	075a      	lsls	r2, r3, #29
 80211c8:	d505      	bpl.n	80211d6 <__sflush_r+0x46>
 80211ca:	6863      	ldr	r3, [r4, #4]
 80211cc:	1ac0      	subs	r0, r0, r3
 80211ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80211d0:	b10b      	cbz	r3, 80211d6 <__sflush_r+0x46>
 80211d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80211d4:	1ac0      	subs	r0, r0, r3
 80211d6:	2300      	movs	r3, #0
 80211d8:	4602      	mov	r2, r0
 80211da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80211dc:	6a21      	ldr	r1, [r4, #32]
 80211de:	4628      	mov	r0, r5
 80211e0:	47b0      	blx	r6
 80211e2:	1c43      	adds	r3, r0, #1
 80211e4:	89a3      	ldrh	r3, [r4, #12]
 80211e6:	d106      	bne.n	80211f6 <__sflush_r+0x66>
 80211e8:	6829      	ldr	r1, [r5, #0]
 80211ea:	291d      	cmp	r1, #29
 80211ec:	d82c      	bhi.n	8021248 <__sflush_r+0xb8>
 80211ee:	4a2a      	ldr	r2, [pc, #168]	; (8021298 <__sflush_r+0x108>)
 80211f0:	40ca      	lsrs	r2, r1
 80211f2:	07d6      	lsls	r6, r2, #31
 80211f4:	d528      	bpl.n	8021248 <__sflush_r+0xb8>
 80211f6:	2200      	movs	r2, #0
 80211f8:	6062      	str	r2, [r4, #4]
 80211fa:	04d9      	lsls	r1, r3, #19
 80211fc:	6922      	ldr	r2, [r4, #16]
 80211fe:	6022      	str	r2, [r4, #0]
 8021200:	d504      	bpl.n	802120c <__sflush_r+0x7c>
 8021202:	1c42      	adds	r2, r0, #1
 8021204:	d101      	bne.n	802120a <__sflush_r+0x7a>
 8021206:	682b      	ldr	r3, [r5, #0]
 8021208:	b903      	cbnz	r3, 802120c <__sflush_r+0x7c>
 802120a:	6560      	str	r0, [r4, #84]	; 0x54
 802120c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802120e:	602f      	str	r7, [r5, #0]
 8021210:	2900      	cmp	r1, #0
 8021212:	d0ca      	beq.n	80211aa <__sflush_r+0x1a>
 8021214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021218:	4299      	cmp	r1, r3
 802121a:	d002      	beq.n	8021222 <__sflush_r+0x92>
 802121c:	4628      	mov	r0, r5
 802121e:	f7ff fc35 	bl	8020a8c <_free_r>
 8021222:	2000      	movs	r0, #0
 8021224:	6360      	str	r0, [r4, #52]	; 0x34
 8021226:	e7c1      	b.n	80211ac <__sflush_r+0x1c>
 8021228:	6a21      	ldr	r1, [r4, #32]
 802122a:	2301      	movs	r3, #1
 802122c:	4628      	mov	r0, r5
 802122e:	47b0      	blx	r6
 8021230:	1c41      	adds	r1, r0, #1
 8021232:	d1c7      	bne.n	80211c4 <__sflush_r+0x34>
 8021234:	682b      	ldr	r3, [r5, #0]
 8021236:	2b00      	cmp	r3, #0
 8021238:	d0c4      	beq.n	80211c4 <__sflush_r+0x34>
 802123a:	2b1d      	cmp	r3, #29
 802123c:	d001      	beq.n	8021242 <__sflush_r+0xb2>
 802123e:	2b16      	cmp	r3, #22
 8021240:	d101      	bne.n	8021246 <__sflush_r+0xb6>
 8021242:	602f      	str	r7, [r5, #0]
 8021244:	e7b1      	b.n	80211aa <__sflush_r+0x1a>
 8021246:	89a3      	ldrh	r3, [r4, #12]
 8021248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802124c:	81a3      	strh	r3, [r4, #12]
 802124e:	e7ad      	b.n	80211ac <__sflush_r+0x1c>
 8021250:	690f      	ldr	r7, [r1, #16]
 8021252:	2f00      	cmp	r7, #0
 8021254:	d0a9      	beq.n	80211aa <__sflush_r+0x1a>
 8021256:	0793      	lsls	r3, r2, #30
 8021258:	680e      	ldr	r6, [r1, #0]
 802125a:	bf08      	it	eq
 802125c:	694b      	ldreq	r3, [r1, #20]
 802125e:	600f      	str	r7, [r1, #0]
 8021260:	bf18      	it	ne
 8021262:	2300      	movne	r3, #0
 8021264:	eba6 0807 	sub.w	r8, r6, r7
 8021268:	608b      	str	r3, [r1, #8]
 802126a:	f1b8 0f00 	cmp.w	r8, #0
 802126e:	dd9c      	ble.n	80211aa <__sflush_r+0x1a>
 8021270:	6a21      	ldr	r1, [r4, #32]
 8021272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021274:	4643      	mov	r3, r8
 8021276:	463a      	mov	r2, r7
 8021278:	4628      	mov	r0, r5
 802127a:	47b0      	blx	r6
 802127c:	2800      	cmp	r0, #0
 802127e:	dc06      	bgt.n	802128e <__sflush_r+0xfe>
 8021280:	89a3      	ldrh	r3, [r4, #12]
 8021282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021286:	81a3      	strh	r3, [r4, #12]
 8021288:	f04f 30ff 	mov.w	r0, #4294967295
 802128c:	e78e      	b.n	80211ac <__sflush_r+0x1c>
 802128e:	4407      	add	r7, r0
 8021290:	eba8 0800 	sub.w	r8, r8, r0
 8021294:	e7e9      	b.n	802126a <__sflush_r+0xda>
 8021296:	bf00      	nop
 8021298:	20400001 	.word	0x20400001

0802129c <_fflush_r>:
 802129c:	b538      	push	{r3, r4, r5, lr}
 802129e:	690b      	ldr	r3, [r1, #16]
 80212a0:	4605      	mov	r5, r0
 80212a2:	460c      	mov	r4, r1
 80212a4:	b913      	cbnz	r3, 80212ac <_fflush_r+0x10>
 80212a6:	2500      	movs	r5, #0
 80212a8:	4628      	mov	r0, r5
 80212aa:	bd38      	pop	{r3, r4, r5, pc}
 80212ac:	b118      	cbz	r0, 80212b6 <_fflush_r+0x1a>
 80212ae:	6983      	ldr	r3, [r0, #24]
 80212b0:	b90b      	cbnz	r3, 80212b6 <_fflush_r+0x1a>
 80212b2:	f7fe fae5 	bl	801f880 <__sinit>
 80212b6:	4b14      	ldr	r3, [pc, #80]	; (8021308 <_fflush_r+0x6c>)
 80212b8:	429c      	cmp	r4, r3
 80212ba:	d11b      	bne.n	80212f4 <_fflush_r+0x58>
 80212bc:	686c      	ldr	r4, [r5, #4]
 80212be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	d0ef      	beq.n	80212a6 <_fflush_r+0xa>
 80212c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80212c8:	07d0      	lsls	r0, r2, #31
 80212ca:	d404      	bmi.n	80212d6 <_fflush_r+0x3a>
 80212cc:	0599      	lsls	r1, r3, #22
 80212ce:	d402      	bmi.n	80212d6 <_fflush_r+0x3a>
 80212d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212d2:	f7fe fee6 	bl	80200a2 <__retarget_lock_acquire_recursive>
 80212d6:	4628      	mov	r0, r5
 80212d8:	4621      	mov	r1, r4
 80212da:	f7ff ff59 	bl	8021190 <__sflush_r>
 80212de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80212e0:	07da      	lsls	r2, r3, #31
 80212e2:	4605      	mov	r5, r0
 80212e4:	d4e0      	bmi.n	80212a8 <_fflush_r+0xc>
 80212e6:	89a3      	ldrh	r3, [r4, #12]
 80212e8:	059b      	lsls	r3, r3, #22
 80212ea:	d4dd      	bmi.n	80212a8 <_fflush_r+0xc>
 80212ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212ee:	f7fe fed9 	bl	80200a4 <__retarget_lock_release_recursive>
 80212f2:	e7d9      	b.n	80212a8 <_fflush_r+0xc>
 80212f4:	4b05      	ldr	r3, [pc, #20]	; (802130c <_fflush_r+0x70>)
 80212f6:	429c      	cmp	r4, r3
 80212f8:	d101      	bne.n	80212fe <_fflush_r+0x62>
 80212fa:	68ac      	ldr	r4, [r5, #8]
 80212fc:	e7df      	b.n	80212be <_fflush_r+0x22>
 80212fe:	4b04      	ldr	r3, [pc, #16]	; (8021310 <_fflush_r+0x74>)
 8021300:	429c      	cmp	r4, r3
 8021302:	bf08      	it	eq
 8021304:	68ec      	ldreq	r4, [r5, #12]
 8021306:	e7da      	b.n	80212be <_fflush_r+0x22>
 8021308:	080298c8 	.word	0x080298c8
 802130c:	080298e8 	.word	0x080298e8
 8021310:	080298a8 	.word	0x080298a8

08021314 <fiprintf>:
 8021314:	b40e      	push	{r1, r2, r3}
 8021316:	b503      	push	{r0, r1, lr}
 8021318:	4601      	mov	r1, r0
 802131a:	ab03      	add	r3, sp, #12
 802131c:	4805      	ldr	r0, [pc, #20]	; (8021334 <fiprintf+0x20>)
 802131e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021322:	6800      	ldr	r0, [r0, #0]
 8021324:	9301      	str	r3, [sp, #4]
 8021326:	f000 f8f3 	bl	8021510 <_vfiprintf_r>
 802132a:	b002      	add	sp, #8
 802132c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021330:	b003      	add	sp, #12
 8021332:	4770      	bx	lr
 8021334:	2000062c 	.word	0x2000062c

08021338 <_lseek_r>:
 8021338:	b538      	push	{r3, r4, r5, lr}
 802133a:	4d07      	ldr	r5, [pc, #28]	; (8021358 <_lseek_r+0x20>)
 802133c:	4604      	mov	r4, r0
 802133e:	4608      	mov	r0, r1
 8021340:	4611      	mov	r1, r2
 8021342:	2200      	movs	r2, #0
 8021344:	602a      	str	r2, [r5, #0]
 8021346:	461a      	mov	r2, r3
 8021348:	f7e6 f9ae 	bl	80076a8 <_lseek>
 802134c:	1c43      	adds	r3, r0, #1
 802134e:	d102      	bne.n	8021356 <_lseek_r+0x1e>
 8021350:	682b      	ldr	r3, [r5, #0]
 8021352:	b103      	cbz	r3, 8021356 <_lseek_r+0x1e>
 8021354:	6023      	str	r3, [r4, #0]
 8021356:	bd38      	pop	{r3, r4, r5, pc}
 8021358:	2000a044 	.word	0x2000a044

0802135c <__swhatbuf_r>:
 802135c:	b570      	push	{r4, r5, r6, lr}
 802135e:	460e      	mov	r6, r1
 8021360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021364:	2900      	cmp	r1, #0
 8021366:	b096      	sub	sp, #88	; 0x58
 8021368:	4614      	mov	r4, r2
 802136a:	461d      	mov	r5, r3
 802136c:	da07      	bge.n	802137e <__swhatbuf_r+0x22>
 802136e:	2300      	movs	r3, #0
 8021370:	602b      	str	r3, [r5, #0]
 8021372:	89b3      	ldrh	r3, [r6, #12]
 8021374:	061a      	lsls	r2, r3, #24
 8021376:	d410      	bmi.n	802139a <__swhatbuf_r+0x3e>
 8021378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802137c:	e00e      	b.n	802139c <__swhatbuf_r+0x40>
 802137e:	466a      	mov	r2, sp
 8021380:	f000 fa10 	bl	80217a4 <_fstat_r>
 8021384:	2800      	cmp	r0, #0
 8021386:	dbf2      	blt.n	802136e <__swhatbuf_r+0x12>
 8021388:	9a01      	ldr	r2, [sp, #4]
 802138a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802138e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021392:	425a      	negs	r2, r3
 8021394:	415a      	adcs	r2, r3
 8021396:	602a      	str	r2, [r5, #0]
 8021398:	e7ee      	b.n	8021378 <__swhatbuf_r+0x1c>
 802139a:	2340      	movs	r3, #64	; 0x40
 802139c:	2000      	movs	r0, #0
 802139e:	6023      	str	r3, [r4, #0]
 80213a0:	b016      	add	sp, #88	; 0x58
 80213a2:	bd70      	pop	{r4, r5, r6, pc}

080213a4 <__smakebuf_r>:
 80213a4:	898b      	ldrh	r3, [r1, #12]
 80213a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80213a8:	079d      	lsls	r5, r3, #30
 80213aa:	4606      	mov	r6, r0
 80213ac:	460c      	mov	r4, r1
 80213ae:	d507      	bpl.n	80213c0 <__smakebuf_r+0x1c>
 80213b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80213b4:	6023      	str	r3, [r4, #0]
 80213b6:	6123      	str	r3, [r4, #16]
 80213b8:	2301      	movs	r3, #1
 80213ba:	6163      	str	r3, [r4, #20]
 80213bc:	b002      	add	sp, #8
 80213be:	bd70      	pop	{r4, r5, r6, pc}
 80213c0:	ab01      	add	r3, sp, #4
 80213c2:	466a      	mov	r2, sp
 80213c4:	f7ff ffca 	bl	802135c <__swhatbuf_r>
 80213c8:	9900      	ldr	r1, [sp, #0]
 80213ca:	4605      	mov	r5, r0
 80213cc:	4630      	mov	r0, r6
 80213ce:	f7ff fbad 	bl	8020b2c <_malloc_r>
 80213d2:	b948      	cbnz	r0, 80213e8 <__smakebuf_r+0x44>
 80213d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80213d8:	059a      	lsls	r2, r3, #22
 80213da:	d4ef      	bmi.n	80213bc <__smakebuf_r+0x18>
 80213dc:	f023 0303 	bic.w	r3, r3, #3
 80213e0:	f043 0302 	orr.w	r3, r3, #2
 80213e4:	81a3      	strh	r3, [r4, #12]
 80213e6:	e7e3      	b.n	80213b0 <__smakebuf_r+0xc>
 80213e8:	4b0d      	ldr	r3, [pc, #52]	; (8021420 <__smakebuf_r+0x7c>)
 80213ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80213ec:	89a3      	ldrh	r3, [r4, #12]
 80213ee:	6020      	str	r0, [r4, #0]
 80213f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80213f4:	81a3      	strh	r3, [r4, #12]
 80213f6:	9b00      	ldr	r3, [sp, #0]
 80213f8:	6163      	str	r3, [r4, #20]
 80213fa:	9b01      	ldr	r3, [sp, #4]
 80213fc:	6120      	str	r0, [r4, #16]
 80213fe:	b15b      	cbz	r3, 8021418 <__smakebuf_r+0x74>
 8021400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021404:	4630      	mov	r0, r6
 8021406:	f000 f9df 	bl	80217c8 <_isatty_r>
 802140a:	b128      	cbz	r0, 8021418 <__smakebuf_r+0x74>
 802140c:	89a3      	ldrh	r3, [r4, #12]
 802140e:	f023 0303 	bic.w	r3, r3, #3
 8021412:	f043 0301 	orr.w	r3, r3, #1
 8021416:	81a3      	strh	r3, [r4, #12]
 8021418:	89a0      	ldrh	r0, [r4, #12]
 802141a:	4305      	orrs	r5, r0
 802141c:	81a5      	strh	r5, [r4, #12]
 802141e:	e7cd      	b.n	80213bc <__smakebuf_r+0x18>
 8021420:	0801f819 	.word	0x0801f819

08021424 <memmove>:
 8021424:	4288      	cmp	r0, r1
 8021426:	b510      	push	{r4, lr}
 8021428:	eb01 0402 	add.w	r4, r1, r2
 802142c:	d902      	bls.n	8021434 <memmove+0x10>
 802142e:	4284      	cmp	r4, r0
 8021430:	4623      	mov	r3, r4
 8021432:	d807      	bhi.n	8021444 <memmove+0x20>
 8021434:	1e43      	subs	r3, r0, #1
 8021436:	42a1      	cmp	r1, r4
 8021438:	d008      	beq.n	802144c <memmove+0x28>
 802143a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802143e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021442:	e7f8      	b.n	8021436 <memmove+0x12>
 8021444:	4402      	add	r2, r0
 8021446:	4601      	mov	r1, r0
 8021448:	428a      	cmp	r2, r1
 802144a:	d100      	bne.n	802144e <memmove+0x2a>
 802144c:	bd10      	pop	{r4, pc}
 802144e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021456:	e7f7      	b.n	8021448 <memmove+0x24>

08021458 <__malloc_lock>:
 8021458:	4801      	ldr	r0, [pc, #4]	; (8021460 <__malloc_lock+0x8>)
 802145a:	f7fe be22 	b.w	80200a2 <__retarget_lock_acquire_recursive>
 802145e:	bf00      	nop
 8021460:	2000a038 	.word	0x2000a038

08021464 <__malloc_unlock>:
 8021464:	4801      	ldr	r0, [pc, #4]	; (802146c <__malloc_unlock+0x8>)
 8021466:	f7fe be1d 	b.w	80200a4 <__retarget_lock_release_recursive>
 802146a:	bf00      	nop
 802146c:	2000a038 	.word	0x2000a038

08021470 <_realloc_r>:
 8021470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021472:	4607      	mov	r7, r0
 8021474:	4614      	mov	r4, r2
 8021476:	460e      	mov	r6, r1
 8021478:	b921      	cbnz	r1, 8021484 <_realloc_r+0x14>
 802147a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802147e:	4611      	mov	r1, r2
 8021480:	f7ff bb54 	b.w	8020b2c <_malloc_r>
 8021484:	b922      	cbnz	r2, 8021490 <_realloc_r+0x20>
 8021486:	f7ff fb01 	bl	8020a8c <_free_r>
 802148a:	4625      	mov	r5, r4
 802148c:	4628      	mov	r0, r5
 802148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021490:	f000 f9aa 	bl	80217e8 <_malloc_usable_size_r>
 8021494:	42a0      	cmp	r0, r4
 8021496:	d20f      	bcs.n	80214b8 <_realloc_r+0x48>
 8021498:	4621      	mov	r1, r4
 802149a:	4638      	mov	r0, r7
 802149c:	f7ff fb46 	bl	8020b2c <_malloc_r>
 80214a0:	4605      	mov	r5, r0
 80214a2:	2800      	cmp	r0, #0
 80214a4:	d0f2      	beq.n	802148c <_realloc_r+0x1c>
 80214a6:	4631      	mov	r1, r6
 80214a8:	4622      	mov	r2, r4
 80214aa:	f7fe fe17 	bl	80200dc <memcpy>
 80214ae:	4631      	mov	r1, r6
 80214b0:	4638      	mov	r0, r7
 80214b2:	f7ff faeb 	bl	8020a8c <_free_r>
 80214b6:	e7e9      	b.n	802148c <_realloc_r+0x1c>
 80214b8:	4635      	mov	r5, r6
 80214ba:	e7e7      	b.n	802148c <_realloc_r+0x1c>

080214bc <__sfputc_r>:
 80214bc:	6893      	ldr	r3, [r2, #8]
 80214be:	3b01      	subs	r3, #1
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	b410      	push	{r4}
 80214c4:	6093      	str	r3, [r2, #8]
 80214c6:	da08      	bge.n	80214da <__sfputc_r+0x1e>
 80214c8:	6994      	ldr	r4, [r2, #24]
 80214ca:	42a3      	cmp	r3, r4
 80214cc:	db01      	blt.n	80214d2 <__sfputc_r+0x16>
 80214ce:	290a      	cmp	r1, #10
 80214d0:	d103      	bne.n	80214da <__sfputc_r+0x1e>
 80214d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80214d6:	f7ff bd4d 	b.w	8020f74 <__swbuf_r>
 80214da:	6813      	ldr	r3, [r2, #0]
 80214dc:	1c58      	adds	r0, r3, #1
 80214de:	6010      	str	r0, [r2, #0]
 80214e0:	7019      	strb	r1, [r3, #0]
 80214e2:	4608      	mov	r0, r1
 80214e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80214e8:	4770      	bx	lr

080214ea <__sfputs_r>:
 80214ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214ec:	4606      	mov	r6, r0
 80214ee:	460f      	mov	r7, r1
 80214f0:	4614      	mov	r4, r2
 80214f2:	18d5      	adds	r5, r2, r3
 80214f4:	42ac      	cmp	r4, r5
 80214f6:	d101      	bne.n	80214fc <__sfputs_r+0x12>
 80214f8:	2000      	movs	r0, #0
 80214fa:	e007      	b.n	802150c <__sfputs_r+0x22>
 80214fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021500:	463a      	mov	r2, r7
 8021502:	4630      	mov	r0, r6
 8021504:	f7ff ffda 	bl	80214bc <__sfputc_r>
 8021508:	1c43      	adds	r3, r0, #1
 802150a:	d1f3      	bne.n	80214f4 <__sfputs_r+0xa>
 802150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021510 <_vfiprintf_r>:
 8021510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021514:	460d      	mov	r5, r1
 8021516:	b09d      	sub	sp, #116	; 0x74
 8021518:	4614      	mov	r4, r2
 802151a:	4698      	mov	r8, r3
 802151c:	4606      	mov	r6, r0
 802151e:	b118      	cbz	r0, 8021528 <_vfiprintf_r+0x18>
 8021520:	6983      	ldr	r3, [r0, #24]
 8021522:	b90b      	cbnz	r3, 8021528 <_vfiprintf_r+0x18>
 8021524:	f7fe f9ac 	bl	801f880 <__sinit>
 8021528:	4b89      	ldr	r3, [pc, #548]	; (8021750 <_vfiprintf_r+0x240>)
 802152a:	429d      	cmp	r5, r3
 802152c:	d11b      	bne.n	8021566 <_vfiprintf_r+0x56>
 802152e:	6875      	ldr	r5, [r6, #4]
 8021530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021532:	07d9      	lsls	r1, r3, #31
 8021534:	d405      	bmi.n	8021542 <_vfiprintf_r+0x32>
 8021536:	89ab      	ldrh	r3, [r5, #12]
 8021538:	059a      	lsls	r2, r3, #22
 802153a:	d402      	bmi.n	8021542 <_vfiprintf_r+0x32>
 802153c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802153e:	f7fe fdb0 	bl	80200a2 <__retarget_lock_acquire_recursive>
 8021542:	89ab      	ldrh	r3, [r5, #12]
 8021544:	071b      	lsls	r3, r3, #28
 8021546:	d501      	bpl.n	802154c <_vfiprintf_r+0x3c>
 8021548:	692b      	ldr	r3, [r5, #16]
 802154a:	b9eb      	cbnz	r3, 8021588 <_vfiprintf_r+0x78>
 802154c:	4629      	mov	r1, r5
 802154e:	4630      	mov	r0, r6
 8021550:	f7ff fd82 	bl	8021058 <__swsetup_r>
 8021554:	b1c0      	cbz	r0, 8021588 <_vfiprintf_r+0x78>
 8021556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021558:	07dc      	lsls	r4, r3, #31
 802155a:	d50e      	bpl.n	802157a <_vfiprintf_r+0x6a>
 802155c:	f04f 30ff 	mov.w	r0, #4294967295
 8021560:	b01d      	add	sp, #116	; 0x74
 8021562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021566:	4b7b      	ldr	r3, [pc, #492]	; (8021754 <_vfiprintf_r+0x244>)
 8021568:	429d      	cmp	r5, r3
 802156a:	d101      	bne.n	8021570 <_vfiprintf_r+0x60>
 802156c:	68b5      	ldr	r5, [r6, #8]
 802156e:	e7df      	b.n	8021530 <_vfiprintf_r+0x20>
 8021570:	4b79      	ldr	r3, [pc, #484]	; (8021758 <_vfiprintf_r+0x248>)
 8021572:	429d      	cmp	r5, r3
 8021574:	bf08      	it	eq
 8021576:	68f5      	ldreq	r5, [r6, #12]
 8021578:	e7da      	b.n	8021530 <_vfiprintf_r+0x20>
 802157a:	89ab      	ldrh	r3, [r5, #12]
 802157c:	0598      	lsls	r0, r3, #22
 802157e:	d4ed      	bmi.n	802155c <_vfiprintf_r+0x4c>
 8021580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021582:	f7fe fd8f 	bl	80200a4 <__retarget_lock_release_recursive>
 8021586:	e7e9      	b.n	802155c <_vfiprintf_r+0x4c>
 8021588:	2300      	movs	r3, #0
 802158a:	9309      	str	r3, [sp, #36]	; 0x24
 802158c:	2320      	movs	r3, #32
 802158e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021592:	f8cd 800c 	str.w	r8, [sp, #12]
 8021596:	2330      	movs	r3, #48	; 0x30
 8021598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802175c <_vfiprintf_r+0x24c>
 802159c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80215a0:	f04f 0901 	mov.w	r9, #1
 80215a4:	4623      	mov	r3, r4
 80215a6:	469a      	mov	sl, r3
 80215a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215ac:	b10a      	cbz	r2, 80215b2 <_vfiprintf_r+0xa2>
 80215ae:	2a25      	cmp	r2, #37	; 0x25
 80215b0:	d1f9      	bne.n	80215a6 <_vfiprintf_r+0x96>
 80215b2:	ebba 0b04 	subs.w	fp, sl, r4
 80215b6:	d00b      	beq.n	80215d0 <_vfiprintf_r+0xc0>
 80215b8:	465b      	mov	r3, fp
 80215ba:	4622      	mov	r2, r4
 80215bc:	4629      	mov	r1, r5
 80215be:	4630      	mov	r0, r6
 80215c0:	f7ff ff93 	bl	80214ea <__sfputs_r>
 80215c4:	3001      	adds	r0, #1
 80215c6:	f000 80aa 	beq.w	802171e <_vfiprintf_r+0x20e>
 80215ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80215cc:	445a      	add	r2, fp
 80215ce:	9209      	str	r2, [sp, #36]	; 0x24
 80215d0:	f89a 3000 	ldrb.w	r3, [sl]
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	f000 80a2 	beq.w	802171e <_vfiprintf_r+0x20e>
 80215da:	2300      	movs	r3, #0
 80215dc:	f04f 32ff 	mov.w	r2, #4294967295
 80215e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80215e4:	f10a 0a01 	add.w	sl, sl, #1
 80215e8:	9304      	str	r3, [sp, #16]
 80215ea:	9307      	str	r3, [sp, #28]
 80215ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80215f0:	931a      	str	r3, [sp, #104]	; 0x68
 80215f2:	4654      	mov	r4, sl
 80215f4:	2205      	movs	r2, #5
 80215f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215fa:	4858      	ldr	r0, [pc, #352]	; (802175c <_vfiprintf_r+0x24c>)
 80215fc:	f7de fe00 	bl	8000200 <memchr>
 8021600:	9a04      	ldr	r2, [sp, #16]
 8021602:	b9d8      	cbnz	r0, 802163c <_vfiprintf_r+0x12c>
 8021604:	06d1      	lsls	r1, r2, #27
 8021606:	bf44      	itt	mi
 8021608:	2320      	movmi	r3, #32
 802160a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802160e:	0713      	lsls	r3, r2, #28
 8021610:	bf44      	itt	mi
 8021612:	232b      	movmi	r3, #43	; 0x2b
 8021614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021618:	f89a 3000 	ldrb.w	r3, [sl]
 802161c:	2b2a      	cmp	r3, #42	; 0x2a
 802161e:	d015      	beq.n	802164c <_vfiprintf_r+0x13c>
 8021620:	9a07      	ldr	r2, [sp, #28]
 8021622:	4654      	mov	r4, sl
 8021624:	2000      	movs	r0, #0
 8021626:	f04f 0c0a 	mov.w	ip, #10
 802162a:	4621      	mov	r1, r4
 802162c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021630:	3b30      	subs	r3, #48	; 0x30
 8021632:	2b09      	cmp	r3, #9
 8021634:	d94e      	bls.n	80216d4 <_vfiprintf_r+0x1c4>
 8021636:	b1b0      	cbz	r0, 8021666 <_vfiprintf_r+0x156>
 8021638:	9207      	str	r2, [sp, #28]
 802163a:	e014      	b.n	8021666 <_vfiprintf_r+0x156>
 802163c:	eba0 0308 	sub.w	r3, r0, r8
 8021640:	fa09 f303 	lsl.w	r3, r9, r3
 8021644:	4313      	orrs	r3, r2
 8021646:	9304      	str	r3, [sp, #16]
 8021648:	46a2      	mov	sl, r4
 802164a:	e7d2      	b.n	80215f2 <_vfiprintf_r+0xe2>
 802164c:	9b03      	ldr	r3, [sp, #12]
 802164e:	1d19      	adds	r1, r3, #4
 8021650:	681b      	ldr	r3, [r3, #0]
 8021652:	9103      	str	r1, [sp, #12]
 8021654:	2b00      	cmp	r3, #0
 8021656:	bfbb      	ittet	lt
 8021658:	425b      	neglt	r3, r3
 802165a:	f042 0202 	orrlt.w	r2, r2, #2
 802165e:	9307      	strge	r3, [sp, #28]
 8021660:	9307      	strlt	r3, [sp, #28]
 8021662:	bfb8      	it	lt
 8021664:	9204      	strlt	r2, [sp, #16]
 8021666:	7823      	ldrb	r3, [r4, #0]
 8021668:	2b2e      	cmp	r3, #46	; 0x2e
 802166a:	d10c      	bne.n	8021686 <_vfiprintf_r+0x176>
 802166c:	7863      	ldrb	r3, [r4, #1]
 802166e:	2b2a      	cmp	r3, #42	; 0x2a
 8021670:	d135      	bne.n	80216de <_vfiprintf_r+0x1ce>
 8021672:	9b03      	ldr	r3, [sp, #12]
 8021674:	1d1a      	adds	r2, r3, #4
 8021676:	681b      	ldr	r3, [r3, #0]
 8021678:	9203      	str	r2, [sp, #12]
 802167a:	2b00      	cmp	r3, #0
 802167c:	bfb8      	it	lt
 802167e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021682:	3402      	adds	r4, #2
 8021684:	9305      	str	r3, [sp, #20]
 8021686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802176c <_vfiprintf_r+0x25c>
 802168a:	7821      	ldrb	r1, [r4, #0]
 802168c:	2203      	movs	r2, #3
 802168e:	4650      	mov	r0, sl
 8021690:	f7de fdb6 	bl	8000200 <memchr>
 8021694:	b140      	cbz	r0, 80216a8 <_vfiprintf_r+0x198>
 8021696:	2340      	movs	r3, #64	; 0x40
 8021698:	eba0 000a 	sub.w	r0, r0, sl
 802169c:	fa03 f000 	lsl.w	r0, r3, r0
 80216a0:	9b04      	ldr	r3, [sp, #16]
 80216a2:	4303      	orrs	r3, r0
 80216a4:	3401      	adds	r4, #1
 80216a6:	9304      	str	r3, [sp, #16]
 80216a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216ac:	482c      	ldr	r0, [pc, #176]	; (8021760 <_vfiprintf_r+0x250>)
 80216ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80216b2:	2206      	movs	r2, #6
 80216b4:	f7de fda4 	bl	8000200 <memchr>
 80216b8:	2800      	cmp	r0, #0
 80216ba:	d03f      	beq.n	802173c <_vfiprintf_r+0x22c>
 80216bc:	4b29      	ldr	r3, [pc, #164]	; (8021764 <_vfiprintf_r+0x254>)
 80216be:	bb1b      	cbnz	r3, 8021708 <_vfiprintf_r+0x1f8>
 80216c0:	9b03      	ldr	r3, [sp, #12]
 80216c2:	3307      	adds	r3, #7
 80216c4:	f023 0307 	bic.w	r3, r3, #7
 80216c8:	3308      	adds	r3, #8
 80216ca:	9303      	str	r3, [sp, #12]
 80216cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216ce:	443b      	add	r3, r7
 80216d0:	9309      	str	r3, [sp, #36]	; 0x24
 80216d2:	e767      	b.n	80215a4 <_vfiprintf_r+0x94>
 80216d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80216d8:	460c      	mov	r4, r1
 80216da:	2001      	movs	r0, #1
 80216dc:	e7a5      	b.n	802162a <_vfiprintf_r+0x11a>
 80216de:	2300      	movs	r3, #0
 80216e0:	3401      	adds	r4, #1
 80216e2:	9305      	str	r3, [sp, #20]
 80216e4:	4619      	mov	r1, r3
 80216e6:	f04f 0c0a 	mov.w	ip, #10
 80216ea:	4620      	mov	r0, r4
 80216ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80216f0:	3a30      	subs	r2, #48	; 0x30
 80216f2:	2a09      	cmp	r2, #9
 80216f4:	d903      	bls.n	80216fe <_vfiprintf_r+0x1ee>
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d0c5      	beq.n	8021686 <_vfiprintf_r+0x176>
 80216fa:	9105      	str	r1, [sp, #20]
 80216fc:	e7c3      	b.n	8021686 <_vfiprintf_r+0x176>
 80216fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8021702:	4604      	mov	r4, r0
 8021704:	2301      	movs	r3, #1
 8021706:	e7f0      	b.n	80216ea <_vfiprintf_r+0x1da>
 8021708:	ab03      	add	r3, sp, #12
 802170a:	9300      	str	r3, [sp, #0]
 802170c:	462a      	mov	r2, r5
 802170e:	4b16      	ldr	r3, [pc, #88]	; (8021768 <_vfiprintf_r+0x258>)
 8021710:	a904      	add	r1, sp, #16
 8021712:	4630      	mov	r0, r6
 8021714:	f7fb fd1c 	bl	801d150 <_printf_float>
 8021718:	4607      	mov	r7, r0
 802171a:	1c78      	adds	r0, r7, #1
 802171c:	d1d6      	bne.n	80216cc <_vfiprintf_r+0x1bc>
 802171e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021720:	07d9      	lsls	r1, r3, #31
 8021722:	d405      	bmi.n	8021730 <_vfiprintf_r+0x220>
 8021724:	89ab      	ldrh	r3, [r5, #12]
 8021726:	059a      	lsls	r2, r3, #22
 8021728:	d402      	bmi.n	8021730 <_vfiprintf_r+0x220>
 802172a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802172c:	f7fe fcba 	bl	80200a4 <__retarget_lock_release_recursive>
 8021730:	89ab      	ldrh	r3, [r5, #12]
 8021732:	065b      	lsls	r3, r3, #25
 8021734:	f53f af12 	bmi.w	802155c <_vfiprintf_r+0x4c>
 8021738:	9809      	ldr	r0, [sp, #36]	; 0x24
 802173a:	e711      	b.n	8021560 <_vfiprintf_r+0x50>
 802173c:	ab03      	add	r3, sp, #12
 802173e:	9300      	str	r3, [sp, #0]
 8021740:	462a      	mov	r2, r5
 8021742:	4b09      	ldr	r3, [pc, #36]	; (8021768 <_vfiprintf_r+0x258>)
 8021744:	a904      	add	r1, sp, #16
 8021746:	4630      	mov	r0, r6
 8021748:	f7fb ffa6 	bl	801d698 <_printf_i>
 802174c:	e7e4      	b.n	8021718 <_vfiprintf_r+0x208>
 802174e:	bf00      	nop
 8021750:	080298c8 	.word	0x080298c8
 8021754:	080298e8 	.word	0x080298e8
 8021758:	080298a8 	.word	0x080298a8
 802175c:	08029ae4 	.word	0x08029ae4
 8021760:	08029aee 	.word	0x08029aee
 8021764:	0801d151 	.word	0x0801d151
 8021768:	080214eb 	.word	0x080214eb
 802176c:	08029aea 	.word	0x08029aea

08021770 <_read_r>:
 8021770:	b538      	push	{r3, r4, r5, lr}
 8021772:	4d07      	ldr	r5, [pc, #28]	; (8021790 <_read_r+0x20>)
 8021774:	4604      	mov	r4, r0
 8021776:	4608      	mov	r0, r1
 8021778:	4611      	mov	r1, r2
 802177a:	2200      	movs	r2, #0
 802177c:	602a      	str	r2, [r5, #0]
 802177e:	461a      	mov	r2, r3
 8021780:	f7e5 ff32 	bl	80075e8 <_read>
 8021784:	1c43      	adds	r3, r0, #1
 8021786:	d102      	bne.n	802178e <_read_r+0x1e>
 8021788:	682b      	ldr	r3, [r5, #0]
 802178a:	b103      	cbz	r3, 802178e <_read_r+0x1e>
 802178c:	6023      	str	r3, [r4, #0]
 802178e:	bd38      	pop	{r3, r4, r5, pc}
 8021790:	2000a044 	.word	0x2000a044

08021794 <abort>:
 8021794:	b508      	push	{r3, lr}
 8021796:	2006      	movs	r0, #6
 8021798:	f000 f856 	bl	8021848 <raise>
 802179c:	2001      	movs	r0, #1
 802179e:	f7e5 ff19 	bl	80075d4 <_exit>
	...

080217a4 <_fstat_r>:
 80217a4:	b538      	push	{r3, r4, r5, lr}
 80217a6:	4d07      	ldr	r5, [pc, #28]	; (80217c4 <_fstat_r+0x20>)
 80217a8:	2300      	movs	r3, #0
 80217aa:	4604      	mov	r4, r0
 80217ac:	4608      	mov	r0, r1
 80217ae:	4611      	mov	r1, r2
 80217b0:	602b      	str	r3, [r5, #0]
 80217b2:	f7e5 ff5e 	bl	8007672 <_fstat>
 80217b6:	1c43      	adds	r3, r0, #1
 80217b8:	d102      	bne.n	80217c0 <_fstat_r+0x1c>
 80217ba:	682b      	ldr	r3, [r5, #0]
 80217bc:	b103      	cbz	r3, 80217c0 <_fstat_r+0x1c>
 80217be:	6023      	str	r3, [r4, #0]
 80217c0:	bd38      	pop	{r3, r4, r5, pc}
 80217c2:	bf00      	nop
 80217c4:	2000a044 	.word	0x2000a044

080217c8 <_isatty_r>:
 80217c8:	b538      	push	{r3, r4, r5, lr}
 80217ca:	4d06      	ldr	r5, [pc, #24]	; (80217e4 <_isatty_r+0x1c>)
 80217cc:	2300      	movs	r3, #0
 80217ce:	4604      	mov	r4, r0
 80217d0:	4608      	mov	r0, r1
 80217d2:	602b      	str	r3, [r5, #0]
 80217d4:	f7e5 ff5d 	bl	8007692 <_isatty>
 80217d8:	1c43      	adds	r3, r0, #1
 80217da:	d102      	bne.n	80217e2 <_isatty_r+0x1a>
 80217dc:	682b      	ldr	r3, [r5, #0]
 80217de:	b103      	cbz	r3, 80217e2 <_isatty_r+0x1a>
 80217e0:	6023      	str	r3, [r4, #0]
 80217e2:	bd38      	pop	{r3, r4, r5, pc}
 80217e4:	2000a044 	.word	0x2000a044

080217e8 <_malloc_usable_size_r>:
 80217e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80217ec:	1f18      	subs	r0, r3, #4
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	bfbc      	itt	lt
 80217f2:	580b      	ldrlt	r3, [r1, r0]
 80217f4:	18c0      	addlt	r0, r0, r3
 80217f6:	4770      	bx	lr

080217f8 <_raise_r>:
 80217f8:	291f      	cmp	r1, #31
 80217fa:	b538      	push	{r3, r4, r5, lr}
 80217fc:	4604      	mov	r4, r0
 80217fe:	460d      	mov	r5, r1
 8021800:	d904      	bls.n	802180c <_raise_r+0x14>
 8021802:	2316      	movs	r3, #22
 8021804:	6003      	str	r3, [r0, #0]
 8021806:	f04f 30ff 	mov.w	r0, #4294967295
 802180a:	bd38      	pop	{r3, r4, r5, pc}
 802180c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802180e:	b112      	cbz	r2, 8021816 <_raise_r+0x1e>
 8021810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021814:	b94b      	cbnz	r3, 802182a <_raise_r+0x32>
 8021816:	4620      	mov	r0, r4
 8021818:	f000 f830 	bl	802187c <_getpid_r>
 802181c:	462a      	mov	r2, r5
 802181e:	4601      	mov	r1, r0
 8021820:	4620      	mov	r0, r4
 8021822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021826:	f000 b817 	b.w	8021858 <_kill_r>
 802182a:	2b01      	cmp	r3, #1
 802182c:	d00a      	beq.n	8021844 <_raise_r+0x4c>
 802182e:	1c59      	adds	r1, r3, #1
 8021830:	d103      	bne.n	802183a <_raise_r+0x42>
 8021832:	2316      	movs	r3, #22
 8021834:	6003      	str	r3, [r0, #0]
 8021836:	2001      	movs	r0, #1
 8021838:	e7e7      	b.n	802180a <_raise_r+0x12>
 802183a:	2400      	movs	r4, #0
 802183c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021840:	4628      	mov	r0, r5
 8021842:	4798      	blx	r3
 8021844:	2000      	movs	r0, #0
 8021846:	e7e0      	b.n	802180a <_raise_r+0x12>

08021848 <raise>:
 8021848:	4b02      	ldr	r3, [pc, #8]	; (8021854 <raise+0xc>)
 802184a:	4601      	mov	r1, r0
 802184c:	6818      	ldr	r0, [r3, #0]
 802184e:	f7ff bfd3 	b.w	80217f8 <_raise_r>
 8021852:	bf00      	nop
 8021854:	2000062c 	.word	0x2000062c

08021858 <_kill_r>:
 8021858:	b538      	push	{r3, r4, r5, lr}
 802185a:	4d07      	ldr	r5, [pc, #28]	; (8021878 <_kill_r+0x20>)
 802185c:	2300      	movs	r3, #0
 802185e:	4604      	mov	r4, r0
 8021860:	4608      	mov	r0, r1
 8021862:	4611      	mov	r1, r2
 8021864:	602b      	str	r3, [r5, #0]
 8021866:	f7e5 fea5 	bl	80075b4 <_kill>
 802186a:	1c43      	adds	r3, r0, #1
 802186c:	d102      	bne.n	8021874 <_kill_r+0x1c>
 802186e:	682b      	ldr	r3, [r5, #0]
 8021870:	b103      	cbz	r3, 8021874 <_kill_r+0x1c>
 8021872:	6023      	str	r3, [r4, #0]
 8021874:	bd38      	pop	{r3, r4, r5, pc}
 8021876:	bf00      	nop
 8021878:	2000a044 	.word	0x2000a044

0802187c <_getpid_r>:
 802187c:	f7e5 be92 	b.w	80075a4 <_getpid>

08021880 <sqrt>:
 8021880:	b538      	push	{r3, r4, r5, lr}
 8021882:	ed2d 8b02 	vpush	{d8}
 8021886:	ec55 4b10 	vmov	r4, r5, d0
 802188a:	f000 f82d 	bl	80218e8 <__ieee754_sqrt>
 802188e:	4b15      	ldr	r3, [pc, #84]	; (80218e4 <sqrt+0x64>)
 8021890:	eeb0 8a40 	vmov.f32	s16, s0
 8021894:	eef0 8a60 	vmov.f32	s17, s1
 8021898:	f993 3000 	ldrsb.w	r3, [r3]
 802189c:	3301      	adds	r3, #1
 802189e:	d019      	beq.n	80218d4 <sqrt+0x54>
 80218a0:	4622      	mov	r2, r4
 80218a2:	462b      	mov	r3, r5
 80218a4:	4620      	mov	r0, r4
 80218a6:	4629      	mov	r1, r5
 80218a8:	f7df f950 	bl	8000b4c <__aeabi_dcmpun>
 80218ac:	b990      	cbnz	r0, 80218d4 <sqrt+0x54>
 80218ae:	2200      	movs	r2, #0
 80218b0:	2300      	movs	r3, #0
 80218b2:	4620      	mov	r0, r4
 80218b4:	4629      	mov	r1, r5
 80218b6:	f7df f921 	bl	8000afc <__aeabi_dcmplt>
 80218ba:	b158      	cbz	r0, 80218d4 <sqrt+0x54>
 80218bc:	f7fb fb76 	bl	801cfac <__errno>
 80218c0:	2321      	movs	r3, #33	; 0x21
 80218c2:	6003      	str	r3, [r0, #0]
 80218c4:	2200      	movs	r2, #0
 80218c6:	2300      	movs	r3, #0
 80218c8:	4610      	mov	r0, r2
 80218ca:	4619      	mov	r1, r3
 80218cc:	f7de ffce 	bl	800086c <__aeabi_ddiv>
 80218d0:	ec41 0b18 	vmov	d8, r0, r1
 80218d4:	eeb0 0a48 	vmov.f32	s0, s16
 80218d8:	eef0 0a68 	vmov.f32	s1, s17
 80218dc:	ecbd 8b02 	vpop	{d8}
 80218e0:	bd38      	pop	{r3, r4, r5, pc}
 80218e2:	bf00      	nop
 80218e4:	20000800 	.word	0x20000800

080218e8 <__ieee754_sqrt>:
 80218e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218ec:	ec55 4b10 	vmov	r4, r5, d0
 80218f0:	4e56      	ldr	r6, [pc, #344]	; (8021a4c <__ieee754_sqrt+0x164>)
 80218f2:	43ae      	bics	r6, r5
 80218f4:	ee10 0a10 	vmov	r0, s0
 80218f8:	ee10 3a10 	vmov	r3, s0
 80218fc:	4629      	mov	r1, r5
 80218fe:	462a      	mov	r2, r5
 8021900:	d110      	bne.n	8021924 <__ieee754_sqrt+0x3c>
 8021902:	ee10 2a10 	vmov	r2, s0
 8021906:	462b      	mov	r3, r5
 8021908:	f7de fe86 	bl	8000618 <__aeabi_dmul>
 802190c:	4602      	mov	r2, r0
 802190e:	460b      	mov	r3, r1
 8021910:	4620      	mov	r0, r4
 8021912:	4629      	mov	r1, r5
 8021914:	f7de fcca 	bl	80002ac <__adddf3>
 8021918:	4604      	mov	r4, r0
 802191a:	460d      	mov	r5, r1
 802191c:	ec45 4b10 	vmov	d0, r4, r5
 8021920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021924:	2d00      	cmp	r5, #0
 8021926:	dc10      	bgt.n	802194a <__ieee754_sqrt+0x62>
 8021928:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802192c:	4330      	orrs	r0, r6
 802192e:	d0f5      	beq.n	802191c <__ieee754_sqrt+0x34>
 8021930:	b15d      	cbz	r5, 802194a <__ieee754_sqrt+0x62>
 8021932:	ee10 2a10 	vmov	r2, s0
 8021936:	462b      	mov	r3, r5
 8021938:	ee10 0a10 	vmov	r0, s0
 802193c:	f7de fcb4 	bl	80002a8 <__aeabi_dsub>
 8021940:	4602      	mov	r2, r0
 8021942:	460b      	mov	r3, r1
 8021944:	f7de ff92 	bl	800086c <__aeabi_ddiv>
 8021948:	e7e6      	b.n	8021918 <__ieee754_sqrt+0x30>
 802194a:	1509      	asrs	r1, r1, #20
 802194c:	d076      	beq.n	8021a3c <__ieee754_sqrt+0x154>
 802194e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8021952:	07ce      	lsls	r6, r1, #31
 8021954:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8021958:	bf5e      	ittt	pl
 802195a:	0fda      	lsrpl	r2, r3, #31
 802195c:	005b      	lslpl	r3, r3, #1
 802195e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8021962:	0fda      	lsrs	r2, r3, #31
 8021964:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8021968:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802196c:	2000      	movs	r0, #0
 802196e:	106d      	asrs	r5, r5, #1
 8021970:	005b      	lsls	r3, r3, #1
 8021972:	f04f 0e16 	mov.w	lr, #22
 8021976:	4684      	mov	ip, r0
 8021978:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802197c:	eb0c 0401 	add.w	r4, ip, r1
 8021980:	4294      	cmp	r4, r2
 8021982:	bfde      	ittt	le
 8021984:	1b12      	suble	r2, r2, r4
 8021986:	eb04 0c01 	addle.w	ip, r4, r1
 802198a:	1840      	addle	r0, r0, r1
 802198c:	0052      	lsls	r2, r2, #1
 802198e:	f1be 0e01 	subs.w	lr, lr, #1
 8021992:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021996:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802199a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802199e:	d1ed      	bne.n	802197c <__ieee754_sqrt+0x94>
 80219a0:	4671      	mov	r1, lr
 80219a2:	2720      	movs	r7, #32
 80219a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80219a8:	4562      	cmp	r2, ip
 80219aa:	eb04 060e 	add.w	r6, r4, lr
 80219ae:	dc02      	bgt.n	80219b6 <__ieee754_sqrt+0xce>
 80219b0:	d113      	bne.n	80219da <__ieee754_sqrt+0xf2>
 80219b2:	429e      	cmp	r6, r3
 80219b4:	d811      	bhi.n	80219da <__ieee754_sqrt+0xf2>
 80219b6:	2e00      	cmp	r6, #0
 80219b8:	eb06 0e04 	add.w	lr, r6, r4
 80219bc:	da43      	bge.n	8021a46 <__ieee754_sqrt+0x15e>
 80219be:	f1be 0f00 	cmp.w	lr, #0
 80219c2:	db40      	blt.n	8021a46 <__ieee754_sqrt+0x15e>
 80219c4:	f10c 0801 	add.w	r8, ip, #1
 80219c8:	eba2 020c 	sub.w	r2, r2, ip
 80219cc:	429e      	cmp	r6, r3
 80219ce:	bf88      	it	hi
 80219d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80219d4:	1b9b      	subs	r3, r3, r6
 80219d6:	4421      	add	r1, r4
 80219d8:	46c4      	mov	ip, r8
 80219da:	0052      	lsls	r2, r2, #1
 80219dc:	3f01      	subs	r7, #1
 80219de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80219e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80219e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80219ea:	d1dd      	bne.n	80219a8 <__ieee754_sqrt+0xc0>
 80219ec:	4313      	orrs	r3, r2
 80219ee:	d006      	beq.n	80219fe <__ieee754_sqrt+0x116>
 80219f0:	1c4c      	adds	r4, r1, #1
 80219f2:	bf13      	iteet	ne
 80219f4:	3101      	addne	r1, #1
 80219f6:	3001      	addeq	r0, #1
 80219f8:	4639      	moveq	r1, r7
 80219fa:	f021 0101 	bicne.w	r1, r1, #1
 80219fe:	1043      	asrs	r3, r0, #1
 8021a00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021a04:	0849      	lsrs	r1, r1, #1
 8021a06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021a0a:	07c2      	lsls	r2, r0, #31
 8021a0c:	bf48      	it	mi
 8021a0e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8021a12:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8021a16:	460c      	mov	r4, r1
 8021a18:	463d      	mov	r5, r7
 8021a1a:	e77f      	b.n	802191c <__ieee754_sqrt+0x34>
 8021a1c:	0ada      	lsrs	r2, r3, #11
 8021a1e:	3815      	subs	r0, #21
 8021a20:	055b      	lsls	r3, r3, #21
 8021a22:	2a00      	cmp	r2, #0
 8021a24:	d0fa      	beq.n	8021a1c <__ieee754_sqrt+0x134>
 8021a26:	02d7      	lsls	r7, r2, #11
 8021a28:	d50a      	bpl.n	8021a40 <__ieee754_sqrt+0x158>
 8021a2a:	f1c1 0420 	rsb	r4, r1, #32
 8021a2e:	fa23 f404 	lsr.w	r4, r3, r4
 8021a32:	1e4d      	subs	r5, r1, #1
 8021a34:	408b      	lsls	r3, r1
 8021a36:	4322      	orrs	r2, r4
 8021a38:	1b41      	subs	r1, r0, r5
 8021a3a:	e788      	b.n	802194e <__ieee754_sqrt+0x66>
 8021a3c:	4608      	mov	r0, r1
 8021a3e:	e7f0      	b.n	8021a22 <__ieee754_sqrt+0x13a>
 8021a40:	0052      	lsls	r2, r2, #1
 8021a42:	3101      	adds	r1, #1
 8021a44:	e7ef      	b.n	8021a26 <__ieee754_sqrt+0x13e>
 8021a46:	46e0      	mov	r8, ip
 8021a48:	e7be      	b.n	80219c8 <__ieee754_sqrt+0xe0>
 8021a4a:	bf00      	nop
 8021a4c:	7ff00000 	.word	0x7ff00000

08021a50 <_init>:
 8021a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a52:	bf00      	nop
 8021a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a56:	bc08      	pop	{r3}
 8021a58:	469e      	mov	lr, r3
 8021a5a:	4770      	bx	lr

08021a5c <_fini>:
 8021a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a5e:	bf00      	nop
 8021a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a62:	bc08      	pop	{r3}
 8021a64:	469e      	mov	lr, r3
 8021a66:	4770      	bx	lr
