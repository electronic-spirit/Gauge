
MC110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021938  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000080dc  08021ae8  08021ae8  00031ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029bc4  08029bc4  0004080c  2**0
                  CONTENTS
  4 .ARM          00000008  08029bc4  08029bc4  00039bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029bcc  08029bcc  0004080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029bcc  08029bcc  00039bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029bd0  08029bd0  00039bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000080c  20000000  08029bd4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009840  20000810  0802a3e0  00040810  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a050  0802a3e0  0004a050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   001eb1c0  00000000  00000000  0004083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cc0b  00000000  00000000  0022b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005320  00000000  00000000  00238608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004db8  00000000  00000000  0023d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000401af  00000000  00000000  002426e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005d418  00000000  00000000  0028288f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014263b  00000000  00000000  002dfca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  004222e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001760c  00000000  00000000  00422338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000810 	.word	0x20000810
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021ad0 	.word	0x08021ad0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000814 	.word	0x20000814
 80001ec:	08021ad0 	.word	0x08021ad0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <ADC_Read_REG>:

void Measure_Kdiv(void);


uint32_t ADC_Read_REG(uint8_t REG, uint8_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	uint32_t RES;
	ADC_NCS_ACTIVE();
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4820      	ldr	r0, [pc, #128]	; (8001144 <ADC_Read_REG+0x98>)
 80010c2:	f009 f8cd 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((REG)<<1);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b3f      	subs	r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	747b      	strb	r3, [r7, #17]
	aTxBuffer[2] = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	74bb      	strb	r3, [r7, #18]
	aTxBuffer[3] = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 0110 	add.w	r1, r7, #16
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	9000      	str	r0, [sp, #0]
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <ADC_Read_REG+0x9c>)
 80010f6:	f00d f96e 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Read_REG+0x98>)
 8001100:	f009 f8ae 	bl	800a260 <HAL_GPIO_WritePin>

	RES=aRxBuffer[1];
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[3];
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	461a      	mov	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
	RES = RES>>(8*(3-len));
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f1c3 0303 	rsb	r3, r3, #3
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]

	return RES;
 8001138:	697b      	ldr	r3, [r7, #20]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800
 8001148:	2000787c 	.word	0x2000787c

0800114c <ADC_Conversion>:


void ADC_Conversion(uint8_t RATE)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	ADC_NCS_ACTIVE();
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <ADC_Conversion+0x44>)
 800115c:	f009 f880 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b50      	subs	r3, #80	; 0x50
 8001164:	b2db      	uxtb	r3, r3
 8001166:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Conversion+0x48>)
 800117a:	f00d f92c 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ADC_Conversion+0x44>)
 8001184:	f009 f86c 	bl	800a260 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000800 	.word	0x48000800
 8001194:	2000787c 	.word	0x2000787c

08001198 <ADC_Read_DATA>:

int32_t ADC_Read_DATA(uint8_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <ADC_Read_DATA+0x98>)
 80011a8:	f009 f85a 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((14+Channel)<<1);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	330e      	adds	r3, #14
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b3f      	subs	r3, #63	; 0x3f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	74bb      	strb	r3, [r7, #18]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	747b      	strb	r3, [r7, #17]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f107 0110 	add.w	r1, r7, #16
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <ADC_Read_DATA+0x9c>)
 80011da:	f00d f8fc 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <ADC_Read_DATA+0x98>)
 80011e4:	f009 f83c 	bl	800a260 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[2];
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[3];
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	461a      	mov	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
	if((data32>>23)==1) return -(8388608-(data32&0x7FFFFF));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	0ddb      	lsrs	r3, r3, #23
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <ADC_Read_DATA+0x88>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800121a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800121e:	e002      	b.n	8001226 <ADC_Read_DATA+0x8e>
	else return (data32&0x7FFFFF);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	48000800 	.word	0x48000800
 8001234:	2000787c 	.word	0x2000787c

08001238 <ADC_Read_STAT>:

uint32_t ADC_Read_STAT(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001244:	f009 f80c 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((STAT_REG)<<1);
 8001248:	23c1      	movs	r3, #193	; 0xc1
 800124a:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	72bb      	strb	r3, [r7, #10]
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	727b      	strb	r3, [r7, #9]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2304      	movs	r3, #4
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <ADC_Read_STAT+0x70>)
 8001268:	f00d f8b5 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001272:	f008 fff5 	bl	800a260 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[2];
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[3];
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
	return data32;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	2000787c 	.word	0x2000787c

080012ac <ADC_Write_REG>:

void ADC_Write_REG(uint8_t REG, uint8_t*DATA, uint8_t len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[10], aRxBuffer[10];
	uint8_t i=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
	ADC_NCS_ACTIVE();
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <ADC_Write_REG+0x84>)
 80012c6:	f008 ffcb 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC0+((REG)<<1);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b40      	subs	r3, #64	; 0x40
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	753b      	strb	r3, [r7, #20]
	for(i=0;i<len;i++)aTxBuffer[i+1] = DATA[i];
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	e00d      	b.n	80012f8 <ADC_Write_REG+0x4c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	441a      	add	r2, r3
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ed      	bcc.n	80012dc <ADC_Write_REG+0x30>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	f107 0114 	add.w	r1, r7, #20
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	9000      	str	r0, [sp, #0]
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <ADC_Write_REG+0x88>)
 8001318:	f00d f85d 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <ADC_Write_REG+0x84>)
 8001322:	f008 ff9d 	bl	800a260 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	48000800 	.word	0x48000800
 8001334:	2000787c 	.word	0x2000787c

08001338 <Auto_System_Calibration>:
	ADC_NCS_NOT_ACTIVE();
}


void Auto_System_Calibration(void)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b0a1      	sub	sp, #132	; 0x84
 800133c:	af00      	add	r7, sp, #0
	uint16_t i,j;
	int32_t DYNAMIC_BAND_MAX[9]={0,0,0,0,0,0,0,0,0};
 800133e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01b fe9a 	bl	801d080 <memset>
	int32_t DYNAMIC_BAND_MIN[9]={0,0,0,0,0,0,0,0,0};
 800134c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001350:	2224      	movs	r2, #36	; 0x24
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f01b fe93 	bl	801d080 <memset>
	uint8_t RES=0;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	int64_t SUM[6]={0,0,0,0,0,0};
 8001360:	463b      	mov	r3, r7
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f01b fe8a 	bl	801d080 <memset>

	// Читаем калибровочные данные из внешнего регистра
//	aTxBuffer[0] = 0x10;
//	ADC_Write_REG(CTRL3_REG, aTxBuffer, 1);

	calibr_process=1;
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <Auto_System_Calibration+0x180>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
//		DYNAMIC_BAND_MAX[i]=ADC_middle[5];
//		DYNAMIC_BAND_MIN[i]=ADC_middle[0];
//	}


	ADC_PGA_Set(PGA_GAIN128);
 8001372:	2008      	movs	r0, #8
 8001374:	f000 f98c 	bl	8001690 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <Auto_System_Calibration+0x184>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fee5 	bl	800114c <ADC_Conversion>
	ADC_Buff_size=256;
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <Auto_System_Calibration+0x188>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	801a      	strh	r2, [r3, #0]
	adc_full_buff=0;
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <Auto_System_Calibration+0x18c>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	while(adc_full_buff<ADC_Buff_size)
 8001390:	e00a      	b.n	80013a8 <Auto_System_Calibration+0x70>
	{
		Gauge_loading((uint8_t*)"Калибровка АЦП..",  (uint8_t)((adc_full_buff*100)/256));
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <Auto_System_Calibration+0x18c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4849      	ldr	r0, [pc, #292]	; (80014c8 <Auto_System_Calibration+0x190>)
 80013a4:	f001 fce8 	bl	8002d78 <Gauge_loading>
	while(adc_full_buff<ADC_Buff_size)
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <Auto_System_Calibration+0x18c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8ed      	bhi.n	8001392 <Auto_System_Calibration+0x5a>
//	OldData=ADC_middle[5];



	// Расчитываем коэффициенты для SYSTEM калибровки GAIN и OFFSET
	adc_mux[0]=1.0;
 80013b6:	4945      	ldr	r1, [pc, #276]	; (80014cc <Auto_System_Calibration+0x194>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <Auto_System_Calibration+0x198>)
 80013be:	e9c1 2300 	strd	r2, r3, [r1]
	//for(i=1;i<9;i++)adc_mux[i]=(double)(DYNAMIC_BAND_MAX[0]*(1<<(i-1)))/(double)(DYNAMIC_BAND_MAX[i]-DYNAMIC_BAND_MIN[i]);
	for(i=1;i<9;i++)adc_mux[i]=(double)DYNAMIC_BAND_MAX[i]/(double)DYNAMIC_BAND_MAX[1];
 80013c2:	2301      	movs	r3, #1
 80013c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80013c8:	e024      	b.n	8001414 <Auto_System_Calibration+0xdc>
 80013ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80013d4:	4413      	add	r3, r2
 80013d6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8b2 	bl	8000544 <__aeabi_i2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8ac 	bl	8000544 <__aeabi_i2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	f8b7 607e 	ldrh.w	r6, [r7, #126]	; 0x7e
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fa38 	bl	800086c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <Auto_System_Calibration+0x194>)
 8001402:	00f1      	lsls	r1, r6, #3
 8001404:	4401      	add	r1, r0
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
 800140a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800140e:	3301      	adds	r3, #1
 8001410:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001414:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001418:	2b08      	cmp	r3, #8
 800141a:	d9d6      	bls.n	80013ca <Auto_System_Calibration+0x92>
	for(i=0;i<9;i++)adc_system_offset[i]=DYNAMIC_BAND_MIN[i];
 800141c:	2300      	movs	r3, #0
 800141e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001422:	e011      	b.n	8001448 <Auto_System_Calibration+0x110>
 8001424:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001428:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001432:	440b      	add	r3, r1
 8001434:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001438:	4926      	ldr	r1, [pc, #152]	; (80014d4 <Auto_System_Calibration+0x19c>)
 800143a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800143e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001442:	3301      	adds	r3, #1
 8001444:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800144c:	2b08      	cmp	r3, #8
 800144e:	d9e9      	bls.n	8001424 <Auto_System_Calibration+0xec>

	// Проверяем правильность показаний усиления
	for(i=2;i<9;i++) {if(DYNAMIC_BAND_MAX[i-1]<DYNAMIC_BAND_MAX[i])RES=1;}
 8001450:	2302      	movs	r3, #2
 8001452:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001456:	e01a      	b.n	800148e <Auto_System_Calibration+0x156>
 8001458:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800145c:	3b01      	subs	r3, #1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001464:	4413      	add	r3, r2
 8001466:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800146a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001474:	440b      	add	r3, r1
 8001476:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800147a:	429a      	cmp	r2, r3
 800147c:	da02      	bge.n	8001484 <Auto_System_Calibration+0x14c>
 800147e:	2301      	movs	r3, #1
 8001480:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8001484:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001488:	3301      	adds	r3, #1
 800148a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800148e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001492:	2b08      	cmp	r3, #8
 8001494:	d9e0      	bls.n	8001458 <Auto_System_Calibration+0x120>
	if(RES==1)ERROR_REG|=(0x01<<ADC_cal_err);
 8001496:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <Auto_System_Calibration+0x172>
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a8:	6013      	str	r3, [r2, #0]

	//OldData=(double)DYNAMIC_BAND_MAX[1];

	calibr_process=0;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <Auto_System_Calibration+0x180>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3784      	adds	r7, #132	; 0x84
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	20000859 	.word	0x20000859
 80014bc:	2000009b 	.word	0x2000009b
 80014c0:	2000009c 	.word	0x2000009c
 80014c4:	20000830 	.word	0x20000830
 80014c8:	08021ae8 	.word	0x08021ae8
 80014cc:	20000000 	.word	0x20000000
 80014d0:	3ff00000 	.word	0x3ff00000
 80014d4:	20000834 	.word	0x20000834
 80014d8:	20000898 	.word	0x20000898

080014dc <ADC_Calibration>:


void ADC_Calibration(uint8_t CAL)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	aTxBuffer[0]=((CAL)<<6)+0x02;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3302      	adds	r3, #2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	733b      	strb	r3, [r7, #12]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2201      	movs	r2, #1
 80014f8:	4619      	mov	r1, r3
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fed6 	bl	80012ac <ADC_Write_REG>

	ADC_NCS_ACTIVE();
 8001500:	2200      	movs	r2, #0
 8001502:	2110      	movs	r1, #16
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <ADC_Calibration+0x5c>)
 8001506:	f008 feab 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xA0;
 800150a:	23a0      	movs	r3, #160	; 0xa0
 800150c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	f107 010c 	add.w	r1, r7, #12
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <ADC_Calibration+0x60>)
 8001520:	f00c ff59 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <ADC_Calibration+0x5c>)
 800152a:	f008 fe99 	bl	800a260 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	48000800 	.word	0x48000800
 800153c:	2000787c 	.word	0x2000787c

08001540 <ADC_init>:
}



void ADC_init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data=0xFFFFFFFF;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	60fb      	str	r3, [r7, #12]
	uint16_t i;

	// Reset
	aTxBuffer[0] = 0x30;
 800154c:	2330      	movs	r3, #48	; 0x30
 800154e:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fea8 	bl	80012ac <ADC_Write_REG>
	ADC_NCS_ACTIVE();
 800155c:	2200      	movs	r2, #0
 800155e:	2110      	movs	r1, #16
 8001560:	4845      	ldr	r0, [pc, #276]	; (8001678 <ADC_init+0x138>)
 8001562:	f008 fe7d 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x90;
 8001566:	2390      	movs	r3, #144	; 0x90
 8001568:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800156a:	463a      	mov	r2, r7
 800156c:	1d39      	adds	r1, r7, #4
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	4841      	ldr	r0, [pc, #260]	; (800167c <ADC_init+0x13c>)
 8001578:	f00c ff2d 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800157c:	2201      	movs	r2, #1
 800157e:	2110      	movs	r1, #16
 8001580:	483d      	ldr	r0, [pc, #244]	; (8001678 <ADC_init+0x138>)
 8001582:	f008 fe6d 	bl	800a260 <HAL_GPIO_WritePin>

	while(i<10000)
 8001586:	e005      	b.n	8001594 <ADC_init+0x54>
	{
		data=ADC_Read_STAT();
 8001588:	f7ff fe56 	bl	8001238 <ADC_Read_STAT>
 800158c:	60f8      	str	r0, [r7, #12]
		i++;
 800158e:	897b      	ldrh	r3, [r7, #10]
 8001590:	3301      	adds	r3, #1
 8001592:	817b      	strh	r3, [r7, #10]
	while(i<10000)
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	f242 720f 	movw	r2, #9999	; 0x270f
 800159a:	4293      	cmp	r3, r2
 800159c:	d9f4      	bls.n	8001588 <ADC_init+0x48>
	}
	if(data!=152) ERROR_REG=(1<<ADC_err);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b98      	cmp	r3, #152	; 0x98
 80015a2:	d002      	beq.n	80015aa <ADC_init+0x6a>
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <ADC_init+0x140>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]

	// Настройка АЦП
	aTxBuffer[0] = 0x09;
 80015aa:	2309      	movs	r3, #9
 80015ac:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	2008      	movs	r0, #8
 80015b6:	f7ff fe79 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x0E;
 80015ba:	230e      	movs	r3, #14
 80015bc:	713b      	strb	r3, [r7, #4]
	aTxBuffer[1] = 0x0A;
 80015be:	230a      	movs	r3, #10
 80015c0:	717b      	strb	r3, [r7, #5]
	aTxBuffer[2] = 0x06;
 80015c2:	2306      	movs	r3, #6
 80015c4:	71bb      	strb	r3, [r7, #6]
	ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2203      	movs	r2, #3
 80015ca:	4619      	mov	r1, r3
 80015cc:	2007      	movs	r0, #7
 80015ce:	f7ff fe6d 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x1A;
 80015d2:	231a      	movs	r3, #26
 80015d4:	713b      	strb	r3, [r7, #4]
	aTxBuffer[1] = 0x16;
 80015d6:	2316      	movs	r3, #22
 80015d8:	717b      	strb	r3, [r7, #5]
	aTxBuffer[2] = 0x12;
 80015da:	2312      	movs	r3, #18
 80015dc:	71bb      	strb	r3, [r7, #6]
	ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2203      	movs	r2, #3
 80015e2:	4619      	mov	r1, r3
 80015e4:	2006      	movs	r0, #6
 80015e6:	f7ff fe61 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x02;
 80015ea:	2302      	movs	r3, #2
 80015ec:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fe59 	bl	80012ac <ADC_Write_REG>

	// Self calibration
	LED(1,0,0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fdae 	bl	8002160 <LED>
	aTxBuffer[0] = 0x01;
 8001604:	2301      	movs	r3, #1
 8001606:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	2008      	movs	r0, #8
 8001610:	f7ff fe4c 	bl	80012ac <ADC_Write_REG>
	ADC_Calibration(adc_calibration_mode);
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <ADC_init+0x144>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <ADC_Calibration>
	delay_ms(300);
 800161e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001622:	f001 fe2b 	bl	800327c <delay_ms>
	aTxBuffer[0] = 0x09;
 8001626:	2309      	movs	r3, #9
 8001628:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	2008      	movs	r0, #8
 8001632:	f7ff fe3b 	bl	80012ac <ADC_Write_REG>

	ADC_PGA_Set(PGA_GAIN);
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <ADC_init+0x148>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f828 	bl	8001690 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <ADC_init+0x14c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd81 	bl	800114c <ADC_Conversion>

	delay_ms(1500);
 800164a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800164e:	f001 fe15 	bl	800327c <delay_ms>
	//Auto_System_Calibration();

	ADC_PGA_Set(PGA_GAIN);
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <ADC_init+0x148>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f81a 	bl	8001690 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <ADC_init+0x14c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fd73 	bl	800114c <ADC_Conversion>

	LED(0,0,0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	2000      	movs	r0, #0
 800166c:	f000 fd78 	bl	8002160 <LED>
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	48000800 	.word	0x48000800
 800167c:	2000787c 	.word	0x2000787c
 8001680:	20000898 	.word	0x20000898
 8001684:	200008af 	.word	0x200008af
 8001688:	2000009a 	.word	0x2000009a
 800168c:	2000009b 	.word	0x2000009b

08001690 <ADC_PGA_Set>:


void ADC_PGA_Set(uint8_t pga_data)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4];
	uint8_t CTRL=ADC_Read_REG(CTRL2_REG, 1);
 800169a:	2101      	movs	r1, #1
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff fd05 	bl	80010ac <ADC_Read_REG>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
	CTRL&=0xF0;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	f023 030f 	bic.w	r3, r3, #15
 80016ac:	73fb      	strb	r3, [r7, #15]
	if(pga_data==0) aTxBuffer[0]=CTRL;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <ADC_PGA_Set+0x2a>
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	723b      	strb	r3, [r7, #8]
 80016b8:	e006      	b.n	80016c8 <ADC_PGA_Set+0x38>
	else aTxBuffer[0]=CTRL+0x08+(pga_data-1);
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4413      	add	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3307      	adds	r3, #7
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL2_REG, aTxBuffer, 1);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2201      	movs	r2, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	2002      	movs	r0, #2
 80016d2:	f7ff fdeb 	bl	80012ac <ADC_Write_REG>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <ADC_EXT>:


void ADC_EXT(void)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	80fb      	strh	r3, [r7, #6]

//	if(adc_full_buff>2)
//	{
		if(read_off_gain==0)
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <ADC_EXT+0x1d4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 808f 	bne.w	8001812 <ADC_EXT+0x132>
		{
			for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 80016f4:	2300      	movs	r3, #0
 80016f6:	80fb      	strh	r3, [r7, #6]
 80016f8:	e00c      	b.n	8001714 <ADC_EXT+0x34>
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	88fc      	ldrh	r4, [r7, #6]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd49 	bl	8001198 <ADC_Read_DATA>
 8001706:	4603      	mov	r3, r0
 8001708:	4a6b      	ldr	r2, [pc, #428]	; (80018b8 <ADC_EXT+0x1d8>)
 800170a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	3301      	adds	r3, #1
 8001712:	80fb      	strh	r3, [r7, #6]
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d9ef      	bls.n	80016fa <ADC_EXT+0x1a>

			if(adc_full_buff!=0)
 800171a:	4b68      	ldr	r3, [pc, #416]	; (80018bc <ADC_EXT+0x1dc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d071      	beq.n	8001806 <ADC_EXT+0x126>
			{
				for(i=0;i<ADC_Buff_size-1;i++)
 8001722:	2300      	movs	r3, #0
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	e038      	b.n	800179a <ADC_EXT+0xba>
				{
					ADC_channel_0[i]=ADC_channel_0[i+1];
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4964      	ldr	r1, [pc, #400]	; (80018c0 <ADC_EXT+0x1e0>)
 8001730:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001734:	4962      	ldr	r1, [pc, #392]	; (80018c0 <ADC_EXT+0x1e0>)
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_1[i]=ADC_channel_1[i+1];
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4960      	ldr	r1, [pc, #384]	; (80018c4 <ADC_EXT+0x1e4>)
 8001742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001746:	495f      	ldr	r1, [pc, #380]	; (80018c4 <ADC_EXT+0x1e4>)
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_2[i]=ADC_channel_2[i+1];
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	495d      	ldr	r1, [pc, #372]	; (80018c8 <ADC_EXT+0x1e8>)
 8001754:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001758:	495b      	ldr	r1, [pc, #364]	; (80018c8 <ADC_EXT+0x1e8>)
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_3[i]=ADC_channel_3[i+1];
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	4959      	ldr	r1, [pc, #356]	; (80018cc <ADC_EXT+0x1ec>)
 8001766:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800176a:	4958      	ldr	r1, [pc, #352]	; (80018cc <ADC_EXT+0x1ec>)
 800176c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_4[i]=ADC_channel_4[i+1];
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4956      	ldr	r1, [pc, #344]	; (80018d0 <ADC_EXT+0x1f0>)
 8001778:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800177c:	4954      	ldr	r1, [pc, #336]	; (80018d0 <ADC_EXT+0x1f0>)
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					ADC_channel_5[i]=ADC_channel_5[i+1];
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4952      	ldr	r1, [pc, #328]	; (80018d4 <ADC_EXT+0x1f4>)
 800178a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800178e:	4951      	ldr	r1, [pc, #324]	; (80018d4 <ADC_EXT+0x1f4>)
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=0;i<ADC_Buff_size-1;i++)
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	3301      	adds	r3, #1
 8001798:	80fb      	strh	r3, [r7, #6]
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <ADC_EXT+0x1f8>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dbc0      	blt.n	8001728 <ADC_EXT+0x48>
				}

				ADC_channel_0[ADC_Buff_size-1]=ADC_data[0];
 80017a6:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <ADC_EXT+0x1f8>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	4a42      	ldr	r2, [pc, #264]	; (80018b8 <ADC_EXT+0x1d8>)
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	4943      	ldr	r1, [pc, #268]	; (80018c0 <ADC_EXT+0x1e0>)
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_1[ADC_Buff_size-1]=ADC_data[1];
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <ADC_EXT+0x1f8>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <ADC_EXT+0x1d8>)
 80017be:	6852      	ldr	r2, [r2, #4]
 80017c0:	4940      	ldr	r1, [pc, #256]	; (80018c4 <ADC_EXT+0x1e4>)
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_2[ADC_Buff_size-1]=ADC_data[2];
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <ADC_EXT+0x1f8>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	4a3a      	ldr	r2, [pc, #232]	; (80018b8 <ADC_EXT+0x1d8>)
 80017ce:	6892      	ldr	r2, [r2, #8]
 80017d0:	493d      	ldr	r1, [pc, #244]	; (80018c8 <ADC_EXT+0x1e8>)
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_3[ADC_Buff_size-1]=ADC_data[3];
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <ADC_EXT+0x1f8>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	3b01      	subs	r3, #1
 80017dc:	4a36      	ldr	r2, [pc, #216]	; (80018b8 <ADC_EXT+0x1d8>)
 80017de:	68d2      	ldr	r2, [r2, #12]
 80017e0:	493a      	ldr	r1, [pc, #232]	; (80018cc <ADC_EXT+0x1ec>)
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_4[ADC_Buff_size-1]=ADC_data[4];
 80017e6:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <ADC_EXT+0x1f8>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <ADC_EXT+0x1d8>)
 80017ee:	6912      	ldr	r2, [r2, #16]
 80017f0:	4937      	ldr	r1, [pc, #220]	; (80018d0 <ADC_EXT+0x1f0>)
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_5[ADC_Buff_size-1]=ADC_data[5];
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <ADC_EXT+0x1f8>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <ADC_EXT+0x1d8>)
 80017fe:	6952      	ldr	r2, [r2, #20]
 8001800:	4934      	ldr	r1, [pc, #208]	; (80018d4 <ADC_EXT+0x1f4>)
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
			adc_full_buff++;
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <ADC_EXT+0x1dc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	4a2b      	ldr	r2, [pc, #172]	; (80018bc <ADC_EXT+0x1dc>)
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e02e      	b.n	8001870 <ADC_EXT+0x190>
//			{
//				read_off_gain=2;
//			}
//			else
//			{
				for(i=1;i<ADC_Buff_size;i++)
 8001812:	2301      	movs	r3, #1
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	e00b      	b.n	8001830 <ADC_EXT+0x150>
				{ ADC_channel_OFF[i-1]=ADC_channel_OFF[i]; }
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	3b01      	subs	r3, #1
 800181e:	492f      	ldr	r1, [pc, #188]	; (80018dc <ADC_EXT+0x1fc>)
 8001820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001824:	492d      	ldr	r1, [pc, #180]	; (80018dc <ADC_EXT+0x1fc>)
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=1;i<ADC_Buff_size;i++)
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	3301      	adds	r3, #1
 800182e:	80fb      	strh	r3, [r7, #6]
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <ADC_EXT+0x1f8>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3ee      	bcc.n	8001818 <ADC_EXT+0x138>
				for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 800183a:	2300      	movs	r3, #0
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	e00c      	b.n	800185a <ADC_EXT+0x17a>
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	88fc      	ldrh	r4, [r7, #6]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fca6 	bl	8001198 <ADC_Read_DATA>
 800184c:	4603      	mov	r3, r0
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <ADC_EXT+0x1d8>)
 8001850:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	3301      	adds	r3, #1
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d9ef      	bls.n	8001840 <ADC_EXT+0x160>
				ADC_channel_OFF[ADC_Buff_size-1]=ADC_data[5];
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <ADC_EXT+0x1f8>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <ADC_EXT+0x1d8>)
 8001868:	6952      	ldr	r2, [r2, #20]
 800186a:	491c      	ldr	r1, [pc, #112]	; (80018dc <ADC_EXT+0x1fc>)
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//	if(adc_full_buff<ADC_Buff_size)adc_full_buff++;
//	else{if(cal_ag<10)cal_ag++;}
//	if(cal_ag==10){cal_ag=20; for(i=0;i<6;i++) Kag[i]=(double)CALag[i]/(double)ADC_middle[i];}

	//if(start_packet==0)
		adc_full_buff++;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <ADC_EXT+0x1dc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a11      	ldr	r2, [pc, #68]	; (80018bc <ADC_EXT+0x1dc>)
 8001878:	6013      	str	r3, [r2, #0]
	//else start_packet=0;

	// Расчитываем Kdiv
	//Kdiv = 128.0/(OldData/(double)ADC_middle[5]);
	if(AutoAmpCoef==1)Measure_Kdiv();
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <ADC_EXT+0x200>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <ADC_EXT+0x1a8>
 8001882:	f000 f837 	bl	80018f4 <Measure_Kdiv>
 8001886:	e009      	b.n	800189c <ADC_EXT+0x1bc>
	else Kdiv=devider;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <ADC_EXT+0x204>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe49 	bl	8000524 <__aeabi_ui2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4914      	ldr	r1, [pc, #80]	; (80018e8 <ADC_EXT+0x208>)
 8001898:	e9c1 2300 	strd	r2, r3, [r1]

	adc_timeout=adc_timeout_const;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <ADC_EXT+0x20c>)
 800189e:	2205      	movs	r2, #5
 80018a0:	701a      	strb	r2, [r3, #0]
	ADC_Conversion(ADC_SPS);
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <ADC_EXT+0x210>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc50 	bl	800114c <ADC_Conversion>
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	2000085a 	.word	0x2000085a
 80018b8:	200052b0 	.word	0x200052b0
 80018bc:	20000830 	.word	0x20000830
 80018c0:	20004ab0 	.word	0x20004ab0
 80018c4:	200022b0 	.word	0x200022b0
 80018c8:	20002ab0 	.word	0x20002ab0
 80018cc:	200032b0 	.word	0x200032b0
 80018d0:	200042b0 	.word	0x200042b0
 80018d4:	20003ab0 	.word	0x20003ab0
 80018d8:	2000009c 	.word	0x2000009c
 80018dc:	20005308 	.word	0x20005308
 80018e0:	200008a9 	.word	0x200008a9
 80018e4:	20000858 	.word	0x20000858
 80018e8:	20000090 	.word	0x20000090
 80018ec:	20000048 	.word	0x20000048
 80018f0:	2000009b 	.word	0x2000009b

080018f4 <Measure_Kdiv>:


void Measure_Kdiv(void)
{
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	// Gain
	if(read_off_gain==0)
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <Measure_Kdiv+0x94>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d114      	bne.n	800192a <Measure_Kdiv+0x36>
	{
		if(adc_full_buff>=(AutoGainCoef_period+1))
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <Measure_Kdiv+0x98>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	461a      	mov	r2, r3
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <Measure_Kdiv+0x9c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d822      	bhi.n	8001956 <Measure_Kdiv+0x62>
		{
			ADC_PGA_Set(PGA_GAIN_OFF);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff febd 	bl	8001690 <ADC_PGA_Set>
			//ADC_Conversion(ADC_SPS);
			read_off_gain=1;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <Measure_Kdiv+0x94>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
			adc_full_buff=0;
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <Measure_Kdiv+0x9c>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
			start_packet=1;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <Measure_Kdiv+0xa0>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e015      	b.n	8001956 <Measure_Kdiv+0x62>
		}
	}
	// Gain OFF
	else
	{
		if(adc_full_buff>=(AutoOffCoef_period+1))
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <Measure_Kdiv+0xa4>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	461a      	mov	r2, r3
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <Measure_Kdiv+0x9c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d80d      	bhi.n	8001956 <Measure_Kdiv+0x62>
		{
			ADC_PGA_Set(PGA_GAIN);
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <Measure_Kdiv+0xa8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fea6 	bl	8001690 <ADC_PGA_Set>
			//ADC_Conversion(ADC_SPS);
			adc_full_buff=0;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <Measure_Kdiv+0x9c>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
			read_off_gain=0;
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <Measure_Kdiv+0x94>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
			start_packet=1;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <Measure_Kdiv+0xa0>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		}
	}
	Kdiv=(double)ADC_middle[5]/(double)ADC_middle[6];
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <Measure_Kdiv+0xac>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdf2 	bl	8000544 <__aeabi_i2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <Measure_Kdiv+0xac>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdeb 	bl	8000544 <__aeabi_i2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe ff79 	bl	800086c <__aeabi_ddiv>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4909      	ldr	r1, [pc, #36]	; (80019a4 <Measure_Kdiv+0xb0>)
 8001980:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001984:	bf00      	nop
 8001986:	bdb0      	pop	{r4, r5, r7, pc}
 8001988:	2000085a 	.word	0x2000085a
 800198c:	20002114 	.word	0x20002114
 8001990:	20000830 	.word	0x20000830
 8001994:	2000085b 	.word	0x2000085b
 8001998:	2000217c 	.word	0x2000217c
 800199c:	2000009a 	.word	0x2000009a
 80019a0:	200020f8 	.word	0x200020f8
 80019a4:	20000090 	.word	0x20000090

080019a8 <ADC_process>:


void ADC_process(void)
{
 80019a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ac:	b099      	sub	sp, #100	; 0x64
 80019ae:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t aTxBuffer[4];
	int64_t SUM[7]={0,0,0,0,0,0};
 80019b6:	f107 0020 	add.w	r0, r7, #32
 80019ba:	2338      	movs	r3, #56	; 0x38
 80019bc:	461a      	mov	r2, r3
 80019be:	2100      	movs	r1, #0
 80019c0:	f01b fb5e 	bl	801d080 <memset>

	// Скользящее среднее
	for(i=0;i<ADC_Buff_size;i++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80019ca:	e07f      	b.n	8001acc <ADC_process+0x124>
	{
		SUM[0]+=ADC_channel_0[i];
 80019cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019d0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019d4:	4bb6      	ldr	r3, [pc, #728]	; (8001cb0 <ADC_process+0x308>)
 80019d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019da:	461a      	mov	r2, r3
 80019dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019e0:	1884      	adds	r4, r0, r2
 80019e2:	eb41 0503 	adc.w	r5, r1, r3
 80019e6:	e9c7 4508 	strd	r4, r5, [r7, #32]
		SUM[1]+=ADC_channel_1[i];
 80019ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019ee:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019f2:	4bb0      	ldr	r3, [pc, #704]	; (8001cb4 <ADC_process+0x30c>)
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	461a      	mov	r2, r3
 80019fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019fe:	eb10 0802 	adds.w	r8, r0, r2
 8001a02:	eb41 0903 	adc.w	r9, r1, r3
 8001a06:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
		SUM[2]+=ADC_channel_2[i];
 8001a0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a0e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a12:	4ba9      	ldr	r3, [pc, #676]	; (8001cb8 <ADC_process+0x310>)
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a1e:	eb10 0a02 	adds.w	sl, r0, r2
 8001a22:	eb41 0b03 	adc.w	fp, r1, r3
 8001a26:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
		SUM[3]+=ADC_channel_3[i];
 8001a2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a2e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a32:	4ba2      	ldr	r3, [pc, #648]	; (8001cbc <ADC_process+0x314>)
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a3e:	1886      	adds	r6, r0, r2
 8001a40:	61be      	str	r6, [r7, #24]
 8001a42:	eb41 0303 	adc.w	r3, r1, r3
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		SUM[4]+=ADC_channel_4[i];
 8001a50:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a54:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a58:	4b99      	ldr	r3, [pc, #612]	; (8001cc0 <ADC_process+0x318>)
 8001a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a64:	1886      	adds	r6, r0, r2
 8001a66:	613e      	str	r6, [r7, #16]
 8001a68:	eb41 0303 	adc.w	r3, r1, r3
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		SUM[5]+=ADC_channel_5[i];
 8001a76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a7a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a7e:	4b91      	ldr	r3, [pc, #580]	; (8001cc4 <ADC_process+0x31c>)
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	461a      	mov	r2, r3
 8001a86:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a8a:	1886      	adds	r6, r0, r2
 8001a8c:	60be      	str	r6, [r7, #8]
 8001a8e:	eb41 0303 	adc.w	r3, r1, r3
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a98:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		SUM[6]+=ADC_channel_OFF[i];
 8001a9c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001aa0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001aa4:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <ADC_process+0x320>)
 8001aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ab0:	1886      	adds	r6, r0, r2
 8001ab2:	603e      	str	r6, [r7, #0]
 8001ab4:	eb41 0303 	adc.w	r3, r1, r3
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001abe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(i=0;i<ADC_Buff_size;i++)
 8001ac2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001acc:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <ADC_process+0x324>)
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f4ff af79 	bcc.w	80019cc <ADC_process+0x24>
	}
	for(i=0;i<7;i++) ADC_middle[i]=SUM[i]/ADC_Buff_size;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001ae0:	e01e      	b.n	8001b20 <ADC_process+0x178>
 8001ae2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001aec:	4413      	add	r3, r2
 8001aee:	3b40      	subs	r3, #64	; 0x40
 8001af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <ADC_process+0x324>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	f7ff f8d3 	bl	8000ca8 <__aeabi_ldivmod>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b0e:	4601      	mov	r1, r0
 8001b10:	4a6f      	ldr	r2, [pc, #444]	; (8001cd0 <ADC_process+0x328>)
 8001b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b16:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001b20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d9dc      	bls.n	8001ae2 <ADC_process+0x13a>

	//for(i=0;i<7;i++) ADC_middle[i]*=Kag[i];

	// Перезапуск АЦП если нет ответа в течении adc_timeout_const
	if(adc_timeout>0)adc_timeout--;
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <ADC_process+0x32c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <ADC_process+0x196>
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <ADC_process+0x32c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <ADC_process+0x32c>)
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e05e      	b.n	8001bfc <ADC_process+0x254>
	else
	{
		// Настройка АЦП
		aTxBuffer[0] = 0x09;
 8001b3e:	2309      	movs	r3, #9
 8001b40:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001b44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2008      	movs	r0, #8
 8001b4e:	f7ff fbad 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x0E;
 8001b52:	230e      	movs	r3, #14
 8001b54:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x0A;
 8001b58:	230a      	movs	r3, #10
 8001b5a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x06;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 8001b64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b68:	2203      	movs	r2, #3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	2007      	movs	r0, #7
 8001b6e:	f7ff fb9d 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x1A;
 8001b72:	231a      	movs	r3, #26
 8001b74:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x16;
 8001b78:	2316      	movs	r3, #22
 8001b7a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x12;
 8001b7e:	2312      	movs	r3, #18
 8001b80:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 8001b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2006      	movs	r0, #6
 8001b8e:	f7ff fb8d 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x02;
 8001b92:	2302      	movs	r3, #2
 8001b94:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001b98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff fb83 	bl	80012ac <ADC_Write_REG>
		// Self calibration
		aTxBuffer[0] = 0x01;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001bac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2008      	movs	r0, #8
 8001bb6:	f7ff fb79 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <ADC_process+0x330>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc8c 	bl	80014dc <ADC_Calibration>
		delay_ms(300);
 8001bc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bc8:	f001 fb58 	bl	800327c <delay_ms>
		aTxBuffer[0] = 0x09;
 8001bcc:	2309      	movs	r3, #9
 8001bce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001bd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2008      	movs	r0, #8
 8001bdc:	f7ff fb66 	bl	80012ac <ADC_Write_REG>

		ADC_Conversion(ADC_SPS);
 8001be0:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <ADC_process+0x334>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fab1 	bl	800114c <ADC_Conversion>
		adc_timeout=adc_timeout_const;
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <ADC_process+0x32c>)
 8001bec:	2205      	movs	r2, #5
 8001bee:	701a      	strb	r2, [r3, #0]
		ERROR_REG|=(0x01<<ADC_err);
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <ADC_process+0x338>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <ADC_process+0x338>)
 8001bfa:	6013      	str	r3, [r2, #0]
	}


	if(adc_start_calibration==0)
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <ADC_process+0x33c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d120      	bne.n	8001c46 <ADC_process+0x29e>
	{
		if(adc_timeout_cal>0)
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <ADC_process+0x340>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d048      	beq.n	8001c9e <ADC_process+0x2f6>
		{
			adc_timeout_cal--;
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <ADC_process+0x340>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <ADC_process+0x340>)
 8001c16:	801a      	strh	r2, [r3, #0]
			if(adc_timeout_cal==0)
 8001c18:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <ADC_process+0x340>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d13e      	bne.n	8001c9e <ADC_process+0x2f6>
			{
				// Стартуем преобразование
				aTxBuffer[0] = 0x09;
 8001c20:	2309      	movs	r3, #9
 8001c22:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001c26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	2008      	movs	r0, #8
 8001c30:	f7ff fb3c 	bl	80012ac <ADC_Write_REG>
				ADC_Conversion(DATA_RATE_16SPS);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f7ff fa89 	bl	800114c <ADC_Conversion>
				LED(0,0,0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fa8e 	bl	8002160 <LED>
 8001c44:	e02b      	b.n	8001c9e <ADC_process+0x2f6>
		}
	}
	// Калибровка
	else
	{
		LED(1,0,0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 fa88 	bl	8002160 <LED>
		adc_start_calibration=0;
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <ADC_process+0x33c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
		aTxBuffer[0] = 0x01;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==offset_calibration)aTxBuffer[0]+=(0<<5); 		// Ноль это канал по которому производится калибровка
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <ADC_process+0x330>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d103      	bne.n	8001c6c <ADC_process+0x2c4>
 8001c64:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c68:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==full_scale_calibration)aTxBuffer[0]+=(5<<5);	// Ноль это канал по которому производится калибровка
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <ADC_process+0x330>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d105      	bne.n	8001c80 <ADC_process+0x2d8>
 8001c74:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c78:	3b60      	subs	r3, #96	; 0x60
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001c80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c84:	2201      	movs	r2, #1
 8001c86:	4619      	mov	r1, r3
 8001c88:	2008      	movs	r0, #8
 8001c8a:	f7ff fb0f 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <ADC_process+0x330>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc22 	bl	80014dc <ADC_Calibration>
		adc_timeout_cal=50;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <ADC_process+0x340>)
 8001c9a:	2232      	movs	r2, #50	; 0x32
 8001c9c:	801a      	strh	r2, [r3, #0]
	}
	// Делитель для PGA
	if(PGA_GAIN==0)devider=1;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <ADC_process+0x344>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d126      	bne.n	8001cf4 <ADC_process+0x34c>
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <ADC_process+0x348>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e02b      	b.n	8001d06 <ADC_process+0x35e>
 8001cae:	bf00      	nop
 8001cb0:	20004ab0 	.word	0x20004ab0
 8001cb4:	200022b0 	.word	0x200022b0
 8001cb8:	20002ab0 	.word	0x20002ab0
 8001cbc:	200032b0 	.word	0x200032b0
 8001cc0:	200042b0 	.word	0x200042b0
 8001cc4:	20003ab0 	.word	0x20003ab0
 8001cc8:	20005308 	.word	0x20005308
 8001ccc:	2000009c 	.word	0x2000009c
 8001cd0:	200020f8 	.word	0x200020f8
 8001cd4:	20000048 	.word	0x20000048
 8001cd8:	200008af 	.word	0x200008af
 8001cdc:	2000009b 	.word	0x2000009b
 8001ce0:	20000898 	.word	0x20000898
 8001ce4:	2000082c 	.word	0x2000082c
 8001ce8:	2000082e 	.word	0x2000082e
 8001cec:	2000009a 	.word	0x2000009a
 8001cf0:	20000858 	.word	0x20000858
	else devider= (0x01<<(PGA_GAIN-1));
 8001cf4:	4ba4      	ldr	r3, [pc, #656]	; (8001f88 <ADC_process+0x5e0>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4ba2      	ldr	r3, [pc, #648]	; (8001f8c <ADC_process+0x5e4>)
 8001d04:	701a      	strb	r2, [r3, #0]


	ADC_volt[0]=ADC_middle[0]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d06:	4ba2      	ldr	r3, [pc, #648]	; (8001f90 <ADC_process+0x5e8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc1a 	bl	8000544 <__aeabi_i2d>
 8001d10:	4604      	mov	r4, r0
 8001d12:	460d      	mov	r5, r1
 8001d14:	4b9f      	ldr	r3, [pc, #636]	; (8001f94 <ADC_process+0x5ec>)
 8001d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <ADC_process+0x5f0>)
 8001d20:	f7fe fc7a 	bl	8000618 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4690      	mov	r8, r2
 8001d2a:	4699      	mov	r9, r3
 8001d2c:	4b9b      	ldr	r3, [pc, #620]	; (8001f9c <ADC_process+0x5f4>)
 8001d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b9a      	ldr	r3, [pc, #616]	; (8001fa0 <ADC_process+0x5f8>)
 8001d38:	f7fe fc6e 	bl	8000618 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4640      	mov	r0, r8
 8001d42:	4649      	mov	r1, r9
 8001d44:	f7fe fd92 	bl	800086c <__aeabi_ddiv>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fc62 	bl	8000618 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4992      	ldr	r1, [pc, #584]	; (8001fa4 <ADC_process+0x5fc>)
 8001d5a:	e9c1 2300 	strd	r2, r3, [r1]
	ADC_volt[1]=ADC_middle[1]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d5e:	4b8c      	ldr	r3, [pc, #560]	; (8001f90 <ADC_process+0x5e8>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbee 	bl	8000544 <__aeabi_i2d>
 8001d68:	4604      	mov	r4, r0
 8001d6a:	460d      	mov	r5, r1
 8001d6c:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <ADC_process+0x5ec>)
 8001d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <ADC_process+0x5f0>)
 8001d78:	f7fe fc4e 	bl	8000618 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4690      	mov	r8, r2
 8001d82:	4699      	mov	r9, r3
 8001d84:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <ADC_process+0x5f4>)
 8001d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <ADC_process+0x5f8>)
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4640      	mov	r0, r8
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	f7fe fd66 	bl	800086c <__aeabi_ddiv>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fc36 	bl	8000618 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	497c      	ldr	r1, [pc, #496]	; (8001fa4 <ADC_process+0x5fc>)
 8001db2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ADC_volt[2]=ADC_middle[2]*((RefVoltage*1000)/(8388608*Kdiv));
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <ADC_process+0x5e8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbc2 	bl	8000544 <__aeabi_i2d>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	460d      	mov	r5, r1
 8001dc4:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <ADC_process+0x5ec>)
 8001dc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <ADC_process+0x5f0>)
 8001dd0:	f7fe fc22 	bl	8000618 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4690      	mov	r8, r2
 8001dda:	4699      	mov	r9, r3
 8001ddc:	4b6f      	ldr	r3, [pc, #444]	; (8001f9c <ADC_process+0x5f4>)
 8001dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <ADC_process+0x5f8>)
 8001de8:	f7fe fc16 	bl	8000618 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4640      	mov	r0, r8
 8001df2:	4649      	mov	r1, r9
 8001df4:	f7fe fd3a 	bl	800086c <__aeabi_ddiv>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	4629      	mov	r1, r5
 8001e00:	f7fe fc0a 	bl	8000618 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4966      	ldr	r1, [pc, #408]	; (8001fa4 <ADC_process+0x5fc>)
 8001e0a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ADC_volt[3]=ADC_middle[3]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e0e:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <ADC_process+0x5e8>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb96 	bl	8000544 <__aeabi_i2d>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	460d      	mov	r5, r1
 8001e1c:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <ADC_process+0x5ec>)
 8001e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <ADC_process+0x5f0>)
 8001e28:	f7fe fbf6 	bl	8000618 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4690      	mov	r8, r2
 8001e32:	4699      	mov	r9, r3
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <ADC_process+0x5f4>)
 8001e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <ADC_process+0x5f8>)
 8001e40:	f7fe fbea 	bl	8000618 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4640      	mov	r0, r8
 8001e4a:	4649      	mov	r1, r9
 8001e4c:	f7fe fd0e 	bl	800086c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fbde 	bl	8000618 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4950      	ldr	r1, [pc, #320]	; (8001fa4 <ADC_process+0x5fc>)
 8001e62:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ADC_volt[4]=ADC_middle[4]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <ADC_process+0x5e8>)
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb6a 	bl	8000544 <__aeabi_i2d>
 8001e70:	4604      	mov	r4, r0
 8001e72:	460d      	mov	r5, r1
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <ADC_process+0x5ec>)
 8001e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <ADC_process+0x5f0>)
 8001e80:	f7fe fbca 	bl	8000618 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4690      	mov	r8, r2
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <ADC_process+0x5f4>)
 8001e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <ADC_process+0x5f8>)
 8001e98:	f7fe fbbe 	bl	8000618 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4640      	mov	r0, r8
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	f7fe fce2 	bl	800086c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4620      	mov	r0, r4
 8001eae:	4629      	mov	r1, r5
 8001eb0:	f7fe fbb2 	bl	8000618 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	493a      	ldr	r1, [pc, #232]	; (8001fa4 <ADC_process+0x5fc>)
 8001eba:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ADC_volt[5]=ADC_middle[5]*((RefVoltage*1000)/(8388608*Kdiv));
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <ADC_process+0x5e8>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb3e 	bl	8000544 <__aeabi_i2d>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <ADC_process+0x5ec>)
 8001ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <ADC_process+0x5f0>)
 8001ed8:	f7fe fb9e 	bl	8000618 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4690      	mov	r8, r2
 8001ee2:	4699      	mov	r9, r3
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <ADC_process+0x5f4>)
 8001ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <ADC_process+0x5f8>)
 8001ef0:	f7fe fb92 	bl	8000618 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4640      	mov	r0, r8
 8001efa:	4649      	mov	r1, r9
 8001efc:	f7fe fcb6 	bl	800086c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fb86 	bl	8000618 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4924      	ldr	r1, [pc, #144]	; (8001fa4 <ADC_process+0x5fc>)
 8001f12:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Заводской номер 001
	current_4_20mA = calculate_current(ADC_volt[0]);
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <ADC_process+0x5fc>)
 8001f18:	ed93 7b00 	vldr	d7, [r3]
 8001f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f20:	eef0 0a67 	vmov.f32	s1, s15
 8001f24:	f003 f944 	bl	80051b0 <calculate_current>
 8001f28:	eeb0 7a40 	vmov.f32	s14, s0
 8001f2c:	eef0 7a60 	vmov.f32	s15, s1
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <ADC_process+0x600>)
 8001f32:	ed83 7b00 	vstr	d7, [r3]
	voltage_measure = calculate_voltage(ADC_volt[1]);
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <ADC_process+0x5fc>)
 8001f38:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f40:	eef0 0a67 	vmov.f32	s1, s15
 8001f44:	f003 f9a0 	bl	8005288 <calculate_voltage>
 8001f48:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4c:	eef0 7a60 	vmov.f32	s15, s1
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <ADC_process+0x604>)
 8001f52:	ed83 7b00 	vstr	d7, [r3]

	Approximation_MC110(ADC_middle[3], ADC_middle[4]);
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <ADC_process+0x5e8>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <ADC_process+0x5e8>)
 8001f5c:	6912      	ldr	r2, [r2, #16]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fdb1 	bl	8004ac8 <Approximation_MC110>
	Calculate(ADC_middle[3], ADC_middle[4]);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <ADC_process+0x5e8>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <ADC_process+0x5e8>)
 8001f6c:	6912      	ldr	r2, [r2, #16]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fe35 	bl	8004be0 <Calculate>

	sleep(100);
 8001f76:	2064      	movs	r0, #100	; 0x64
 8001f78:	f001 f934 	bl	80031e4 <sleep>
}
 8001f7c:	bf00      	nop
 8001f7e:	3764      	adds	r7, #100	; 0x64
 8001f80:	46bd      	mov	sp, r7
 8001f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f86:	bf00      	nop
 8001f88:	2000009a 	.word	0x2000009a
 8001f8c:	20000858 	.word	0x20000858
 8001f90:	200020f8 	.word	0x200020f8
 8001f94:	20000088 	.word	0x20000088
 8001f98:	408f4000 	.word	0x408f4000
 8001f9c:	20000090 	.word	0x20000090
 8001fa0:	41600000 	.word	0x41600000
 8001fa4:	200052d0 	.word	0x200052d0
 8001fa8:	200052c8 	.word	0x200052c8
 8001fac:	20002180 	.word	0x20002180

08001fb0 <Buttons_init>:
//--------------------------------------------------------------------------------------------------------
//									Инициализация расширителя
//--------------------------------------------------------------------------------------------------------

void Buttons_init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af02      	add	r7, sp, #8
	uint8_t tx_buf[2], rx_buf[2];

	// Reset
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2120      	movs	r1, #32
 8001fba:	483c      	ldr	r0, [pc, #240]	; (80020ac <Buttons_init+0xfc>)
 8001fbc:	f008 f950 	bl	800a260 <HAL_GPIO_WritePin>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x18;
 8001fc4:	2318      	movs	r3, #24
 8001fc6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 1000);
 8001fc8:	1d3a      	adds	r2, r7, #4
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	4836      	ldr	r0, [pc, #216]	; (80020b0 <Buttons_init+0x100>)
 8001fd6:	f008 fa0d 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT0; // rd from out-reg port0
 8001fda:	2302      	movs	r3, #2
 8001fdc:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001fde:	1d3a      	adds	r2, r7, #4
 8001fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2140      	movs	r1, #64	; 0x40
 8001fea:	4831      	ldr	r0, [pc, #196]	; (80020b0 <Buttons_init+0x100>)
 8001fec:	f008 fa02 	bl	800a3f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, &rx_buf[0], 0x02, 1000);
 8001ff0:	463a      	mov	r2, r7
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	2141      	movs	r1, #65	; 0x41
 8001ffc:	482c      	ldr	r0, [pc, #176]	; (80020b0 <Buttons_init+0x100>)
 8001ffe:	f008 faed 	bl	800a5dc <HAL_I2C_Master_Receive>

	tx_buf[0] = PI4IOE5V6416_REG_IO_DIR1; // set pin dir to be out
 8002002:	2307      	movs	r3, #7
 8002004:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x07;
 8002006:	2307      	movs	r3, #7
 8002008:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 800200a:	1d3a      	adds	r2, r7, #4
 800200c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2302      	movs	r3, #2
 8002014:	2140      	movs	r1, #64	; 0x40
 8002016:	4826      	ldr	r0, [pc, #152]	; (80020b0 <Buttons_init+0x100>)
 8002018:	f008 f9ec 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD0; // pull-up port0
 800201c:	2348      	movs	r3, #72	; 0x48
 800201e:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002020:	23ff      	movs	r3, #255	; 0xff
 8002022:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002024:	1d3a      	adds	r2, r7, #4
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2302      	movs	r3, #2
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	481f      	ldr	r0, [pc, #124]	; (80020b0 <Buttons_init+0x100>)
 8002032:	f008 f9df 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD1; // pull-up port1
 8002036:	2349      	movs	r3, #73	; 0x49
 8002038:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 800203a:	23ff      	movs	r3, #255	; 0xff
 800203c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 800203e:	1d3a      	adds	r2, r7, #4
 8002040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2302      	movs	r3, #2
 8002048:	2140      	movs	r1, #64	; 0x40
 800204a:	4819      	ldr	r0, [pc, #100]	; (80020b0 <Buttons_init+0x100>)
 800204c:	f008 f9d2 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN0; // pull-up enable on port0
 8002050:	2346      	movs	r3, #70	; 0x46
 8002052:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002054:	23ff      	movs	r3, #255	; 0xff
 8002056:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002058:	1d3a      	adds	r2, r7, #4
 800205a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2302      	movs	r3, #2
 8002062:	2140      	movs	r1, #64	; 0x40
 8002064:	4812      	ldr	r0, [pc, #72]	; (80020b0 <Buttons_init+0x100>)
 8002066:	f008 f9c5 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN1; // pull-up enable on port1
 800206a:	2347      	movs	r3, #71	; 0x47
 800206c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 800206e:	23ff      	movs	r3, #255	; 0xff
 8002070:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002072:	1d3a      	adds	r2, r7, #4
 8002074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2302      	movs	r3, #2
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <Buttons_init+0x100>)
 8002080:	f008 f9b8 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_MNTR0; // rd pins state port0
 8002084:	2300      	movs	r3, #0
 8002086:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8002088:	1d3a      	adds	r2, r7, #4
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2301      	movs	r3, #1
 8002092:	2140      	movs	r1, #64	; 0x40
 8002094:	4806      	ldr	r0, [pc, #24]	; (80020b0 <Buttons_init+0x100>)
 8002096:	f008 f9ad 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	LED(0,0,0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f85e 	bl	8002160 <LED>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	48000400 	.word	0x48000400
 80020b0:	2000792c 	.word	0x2000792c

080020b4 <BLueTooth_Configuration>:
//--------------------------------------------------------------------------------------------------------
//										Выбор режима работы блютус
//--------------------------------------------------------------------------------------------------------

void BLueTooth_Configuration(uint8_t state)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint8_t BlueTooth_State = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
	// Читаем порт P1
	aTxBuffer[0] = 0x01;
 80020c2:	2301      	movs	r3, #1
 80020c4:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80020c6:	f107 0210 	add.w	r2, r7, #16
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	2140      	movs	r1, #64	; 0x40
 80020d4:	4821      	ldr	r0, [pc, #132]	; (800215c <BLueTooth_Configuration+0xa8>)
 80020d6:	f008 f98d 	bl	800a3f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80020da:	f107 020c 	add.w	r2, r7, #12
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2301      	movs	r3, #1
 80020e6:	2141      	movs	r1, #65	; 0x41
 80020e8:	481c      	ldr	r0, [pc, #112]	; (800215c <BLueTooth_Configuration+0xa8>)
 80020ea:	f008 fa77 	bl	800a5dc <HAL_I2C_Master_Receive>
	BlueTooth_State=aRxBuffer[0];
 80020ee:	7b3b      	ldrb	r3, [r7, #12]
 80020f0:	75fb      	strb	r3, [r7, #23]

	// Очищаем P1_3 и P1_4
	BlueTooth_State&=0xE7;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	f023 0318 	bic.w	r3, r3, #24
 80020f8:	75fb      	strb	r3, [r7, #23]
	// Записываем значение config
	BlueTooth_State|=(state<<4);
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	b25a      	sxtb	r2, r3
 8002100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002104:	4313      	orrs	r3, r2
 8002106:	b25b      	sxtb	r3, r3
 8002108:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 800210a:	2303      	movs	r3, #3
 800210c:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8002112:	f107 0210 	add.w	r2, r7, #16
 8002116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2302      	movs	r3, #2
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	480e      	ldr	r0, [pc, #56]	; (800215c <BLueTooth_Configuration+0xa8>)
 8002122:	f008 f967 	bl	800a3f4 <HAL_I2C_Master_Transmit>

	delay_ms(500);
 8002126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800212a:	f001 f8a7 	bl	800327c <delay_ms>

	// Reset
	BlueTooth_State|=(0x01<<5);
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8002136:	2303      	movs	r3, #3
 8002138:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
 800213c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 800213e:	f107 0210 	add.w	r2, r7, #16
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2302      	movs	r3, #2
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <BLueTooth_Configuration+0xa8>)
 800214e:	f008 f951 	bl	800a3f4 <HAL_I2C_Master_Transmit>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000792c 	.word	0x2000792c

08002160 <LED>:
//--------------------------------------------------------------------------------------------------------
//											Управление светодиодом
//--------------------------------------------------------------------------------------------------------

void LED(uint8_t RED, uint8_t GREEN, uint8_t BLUE)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af02      	add	r7, sp, #8
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
 800216a:	460b      	mov	r3, r1
 800216c:	71bb      	strb	r3, [r7, #6]
 800216e:	4613      	mov	r3, r2
 8002170:	717b      	strb	r3, [r7, #5]
	uint8_t color=0;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[4];
	color=(RED<<7)+(GREEN<<6)+(BLUE<<5)+0x1F;
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	01db      	lsls	r3, r3, #7
 800217a:	b2da      	uxtb	r2, r3
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	019b      	lsls	r3, r3, #6
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4413      	add	r3, r2
 8002184:	b2da      	uxtb	r2, r3
 8002186:	797b      	ldrb	r3, [r7, #5]
 8002188:	015b      	lsls	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	331f      	adds	r3, #31
 8002192:	73fb      	strb	r3, [r7, #15]
	color=~color;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	43db      	mvns	r3, r3
 8002198:	73fb      	strb	r3, [r7, #15]
	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 800219a:	2303      	movs	r3, #3
 800219c:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = color;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 10000);
 80021a2:	f107 0208 	add.w	r2, r7, #8
 80021a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	2140      	movs	r1, #64	; 0x40
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <LED+0x60>)
 80021b2:	f008 f91f 	bl	800a3f4 <HAL_I2C_Master_Transmit>
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000792c 	.word	0x2000792c

080021c4 <Button_S1_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										ON / OFF
//--------------------------------------------------------------------------------------------------------

void Button_S1_press_callback(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	if(OnOffCntr==-1)
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <Button_S1_press_callback+0x34>)
 80021ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d10f      	bne.n	80021f4 <Button_S1_press_callback+0x30>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==1)
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <Button_S1_press_callback+0x38>)
 80021d8:	f008 f82a 	bl	800a230 <HAL_GPIO_ReadPin>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <Button_S1_press_callback+0x30>
		{
			old_active_string=0xFF; OnOffCntr=on_off_time; screen=Off_screen;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <Button_S1_press_callback+0x3c>)
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <Button_S1_press_callback+0x34>)
 80021ea:	22c8      	movs	r2, #200	; 0xc8
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <Button_S1_press_callback+0x40>)
 80021f0:	2203      	movs	r2, #3
 80021f2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000004a 	.word	0x2000004a
 80021fc:	48001000 	.word	0x48001000
 8002200:	200003a8 	.word	0x200003a8
 8002204:	2000004c 	.word	0x2000004c

08002208 <Button_S2_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										P zero
//--------------------------------------------------------------------------------------------------------

void Button_S2_press_callback(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <Button_S2_press_callback+0x70>)
 800220e:	2200      	movs	r2, #0
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <Button_S2_press_callback+0x70>)
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <Button_S2_press_callback+0x74>)
 8002218:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <Button_S2_press_callback+0x78>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <Button_S2_press_callback+0x78>)
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <Button_S2_press_callback+0x7c>)
 8002226:	701a      	strb	r2, [r3, #0]
	// Таррирование давления
	if(Pressure_zero==0)Pressure_zero=Pressure;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <Button_S2_press_callback+0x80>)
 800222a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f7fe fc57 	bl	8000ae8 <__aeabi_dcmpeq>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <Button_S2_press_callback+0x46>
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <Button_S2_press_callback+0x84>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	4910      	ldr	r1, [pc, #64]	; (8002288 <Button_S2_press_callback+0x80>)
 8002248:	e9c1 2300 	strd	r2, r3, [r1]
 800224c:	e006      	b.n	800225c <Button_S2_press_callback+0x54>
	else Pressure_zero=0;
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <Button_S2_press_callback+0x80>)
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9c1 2300 	strd	r2, r3, [r1]

	// Обнуление АЦП
	if(zero_ADC[0]==0)zero_ADC[0]=ADC_middle[3];
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <Button_S2_press_callback+0x88>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <Button_S2_press_callback+0x66>
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <Button_S2_press_callback+0x8c>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a09      	ldr	r2, [pc, #36]	; (8002290 <Button_S2_press_callback+0x88>)
 800226a:	6013      	str	r3, [r2, #0]
		else zero_ADC[0]=0;

}
 800226c:	e002      	b.n	8002274 <Button_S2_press_callback+0x6c>
		else zero_ADC[0]=0;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <Button_S2_press_callback+0x88>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20001c4e 	.word	0x20001c4e
 800227c:	20001c4c 	.word	0x20001c4c
 8002280:	20001c51 	.word	0x20001c51
 8002284:	20001c50 	.word	0x20001c50
 8002288:	20000880 	.word	0x20000880
 800228c:	200022a0 	.word	0x200022a0
 8002290:	20002288 	.word	0x20002288
 8002294:	200020f8 	.word	0x200020f8

08002298 <Button_S3_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E zero
//--------------------------------------------------------------------------------------------------------

void Button_S3_press_callback(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <Button_S3_press_callback+0x8c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	801a      	strh	r2, [r3, #0]
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <Button_S3_press_callback+0x8c>)
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <Button_S3_press_callback+0x90>)
 80022a8:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <Button_S3_press_callback+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <Button_S3_press_callback+0x94>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <Button_S3_press_callback+0x98>)
 80022b6:	701a      	strb	r2, [r3, #0]
	// Таррирование электрики
	if(Electric_zero==0)
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <Button_S3_press_callback+0x9c>)
 80022ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	f7fe fc0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01f      	beq.n	8002310 <Button_S3_press_callback+0x78>
	switch(E_fun)
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <Button_S3_press_callback+0xa0>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d014      	beq.n	8002302 <Button_S3_press_callback+0x6a>
 80022d8:	2b02      	cmp	r3, #2
 80022da:	dc21      	bgt.n	8002320 <Button_S3_press_callback+0x88>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <Button_S3_press_callback+0x4e>
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d007      	beq.n	80022f4 <Button_S3_press_callback+0x5c>
		case 0: Electric_zero=Test_Pressure; break;
		case 1: Electric_zero=current_4_20mA; break;
		case 2: Electric_zero=voltage_measure; break;
	}
	else Electric_zero=0;
}
 80022e4:	e01c      	b.n	8002320 <Button_S3_press_callback+0x88>
		case 0: Electric_zero=Test_Pressure; break;
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <Button_S3_press_callback+0xa4>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	4911      	ldr	r1, [pc, #68]	; (8002334 <Button_S3_press_callback+0x9c>)
 80022ee:	e9c1 2300 	strd	r2, r3, [r1]
 80022f2:	e015      	b.n	8002320 <Button_S3_press_callback+0x88>
		case 1: Electric_zero=current_4_20mA; break;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <Button_S3_press_callback+0xa8>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	490e      	ldr	r1, [pc, #56]	; (8002334 <Button_S3_press_callback+0x9c>)
 80022fc:	e9c1 2300 	strd	r2, r3, [r1]
 8002300:	e00e      	b.n	8002320 <Button_S3_press_callback+0x88>
		case 2: Electric_zero=voltage_measure; break;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <Button_S3_press_callback+0xac>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	490a      	ldr	r1, [pc, #40]	; (8002334 <Button_S3_press_callback+0x9c>)
 800230a:	e9c1 2300 	strd	r2, r3, [r1]
 800230e:	e007      	b.n	8002320 <Button_S3_press_callback+0x88>
	else Electric_zero=0;
 8002310:	4908      	ldr	r1, [pc, #32]	; (8002334 <Button_S3_press_callback+0x9c>)
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800231e:	e7ff      	b.n	8002320 <Button_S3_press_callback+0x88>
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20001c4e 	.word	0x20001c4e
 8002328:	20001c4c 	.word	0x20001c4c
 800232c:	20001c51 	.word	0x20001c51
 8002330:	20001c50 	.word	0x20001c50
 8002334:	20000888 	.word	0x20000888
 8002338:	200008a8 	.word	0x200008a8
 800233c:	200022a8 	.word	0x200022a8
 8002340:	200052c8 	.word	0x200052c8
 8002344:	20002180 	.word	0x20002180

08002348 <Button_S4_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											ENTER
//--------------------------------------------------------------------------------------------------------

void Button_S4_press_callback(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	 switch(screen)
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <Button_S4_press_callback+0x6c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	3b04      	subs	r3, #4
 8002352:	2b05      	cmp	r3, #5
 8002354:	d81d      	bhi.n	8002392 <Button_S4_press_callback+0x4a>
 8002356:	a201      	add	r2, pc, #4	; (adr r2, 800235c <Button_S4_press_callback+0x14>)
 8002358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235c:	0800237b 	.word	0x0800237b
 8002360:	0800238d 	.word	0x0800238d
 8002364:	08002387 	.word	0x08002387
 8002368:	08002393 	.word	0x08002393
 800236c:	08002375 	.word	0x08002375
 8002370:	08002381 	.word	0x08002381
	 {
	 	 case Parameter_screen: Parameter_screen_S4(); break;
 8002374:	f016 fabc 	bl	80188f0 <Parameter_screen_S4>
 8002378:	e00b      	b.n	8002392 <Button_S4_press_callback+0x4a>
	 	 case Option_screen: Option_screen_S4(); break;
 800237a:	f016 fb87 	bl	8018a8c <Option_screen_S4>
 800237e:	e008      	b.n	8002392 <Button_S4_press_callback+0x4a>
	 	 case RTC_screen: RTC_screen_S4(); break;
 8002380:	f015 ff3e 	bl	8018200 <RTC_screen_S4>
 8002384:	e005      	b.n	8002392 <Button_S4_press_callback+0x4a>
	 	 case ADC_options_screen: ADC_options_screen_S4(); break;
 8002386:	f014 fc25 	bl	8016bd4 <ADC_options_screen_S4>
 800238a:	e002      	b.n	8002392 <Button_S4_press_callback+0x4a>
	 	 case Display_options_screen: Display_options_screen_S4(); break;
 800238c:	f014 ff24 	bl	80171d8 <Display_options_screen_S4>
 8002390:	bf00      	nop
	 }
	 off_sec=off_min=0;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <Button_S4_press_callback+0x70>)
 8002394:	2200      	movs	r2, #0
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <Button_S4_press_callback+0x70>)
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <Button_S4_press_callback+0x74>)
 800239e:	801a      	strh	r2, [r3, #0]
	 light_sec=light_min=0;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <Button_S4_press_callback+0x78>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <Button_S4_press_callback+0x78>)
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <Button_S4_press_callback+0x7c>)
 80023ac:	701a      	strb	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000004c 	.word	0x2000004c
 80023b8:	20001c4e 	.word	0x20001c4e
 80023bc:	20001c4c 	.word	0x20001c4c
 80023c0:	20001c51 	.word	0x20001c51
 80023c4:	20001c50 	.word	0x20001c50

080023c8 <Button_S5_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											FORWARD
//--------------------------------------------------------------------------------------------------------

void Button_S5_press_callback(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	switch(screen)
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <Button_S5_press_callback+0x78>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	3b05      	subs	r3, #5
 80023d2:	2b07      	cmp	r3, #7
 80023d4:	d824      	bhi.n	8002420 <Button_S5_press_callback+0x58>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <Button_S5_press_callback+0x14>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	08002403 	.word	0x08002403
 80023e0:	080023fd 	.word	0x080023fd
 80023e4:	08002409 	.word	0x08002409
 80023e8:	08002421 	.word	0x08002421
 80023ec:	0800240f 	.word	0x0800240f
 80023f0:	08002415 	.word	0x08002415
 80023f4:	08002421 	.word	0x08002421
 80023f8:	0800241b 	.word	0x0800241b
	{
		case ADC_options_screen: ADC_options_screen_S5(); break;
 80023fc:	f014 fcbc 	bl	8016d78 <ADC_options_screen_S5>
 8002400:	e00e      	b.n	8002420 <Button_S5_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S5(); break;
 8002402:	f014 ff55 	bl	80172b0 <Display_options_screen_S5>
 8002406:	e00b      	b.n	8002420 <Button_S5_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S5(); break;
 8002408:	f015 f9d0 	bl	80177ac <Measure_options_screen_S5>
 800240c:	e008      	b.n	8002420 <Button_S5_press_callback+0x58>
		case RTC_screen: RTC_screen_S5(); break;
 800240e:	f015 fde3 	bl	8017fd8 <RTC_screen_S5>
 8002412:	e005      	b.n	8002420 <Button_S5_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S5(); break;
 8002414:	f014 fd8e 	bl	8016f34 <Auto_Off_option_screen_S5>
 8002418:	e002      	b.n	8002420 <Button_S5_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S5(); break;
 800241a:	f016 f929 	bl	8018670 <Logging_options_screen_S5>
 800241e:	bf00      	nop
	}
	off_sec=off_min=0;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <Button_S5_press_callback+0x7c>)
 8002422:	2200      	movs	r2, #0
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <Button_S5_press_callback+0x7c>)
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <Button_S5_press_callback+0x80>)
 800242c:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <Button_S5_press_callback+0x84>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <Button_S5_press_callback+0x84>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <Button_S5_press_callback+0x88>)
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000004c 	.word	0x2000004c
 8002444:	20001c4e 	.word	0x20001c4e
 8002448:	20001c4c 	.word	0x20001c4c
 800244c:	20001c51 	.word	0x20001c51
 8002450:	20001c50 	.word	0x20001c50

08002454 <Button_S6_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											UP
//--------------------------------------------------------------------------------------------------------

void Button_S6_press_callback(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	switch(screen)
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <Button_S6_press_callback+0x84>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	3b04      	subs	r3, #4
 800245e:	2b08      	cmp	r3, #8
 8002460:	d829      	bhi.n	80024b6 <Button_S6_press_callback+0x62>
 8002462:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <Button_S6_press_callback+0x14>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	08002493 	.word	0x08002493
 800246c:	0800249f 	.word	0x0800249f
 8002470:	08002499 	.word	0x08002499
 8002474:	080024a5 	.word	0x080024a5
 8002478:	0800248d 	.word	0x0800248d
 800247c:	080024ab 	.word	0x080024ab
 8002480:	080024b7 	.word	0x080024b7
 8002484:	080024b7 	.word	0x080024b7
 8002488:	080024b1 	.word	0x080024b1
	{
		case Parameter_screen: Parameter_screen_S6(); break;
 800248c:	f016 fa8c 	bl	80189a8 <Parameter_screen_S6>
 8002490:	e011      	b.n	80024b6 <Button_S6_press_callback+0x62>
		case Option_screen: Option_screen_S6(); break;
 8002492:	f016 fae5 	bl	8018a60 <Option_screen_S6>
 8002496:	e00e      	b.n	80024b6 <Button_S6_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S6(); break;
 8002498:	f014 fb5e 	bl	8016b58 <ADC_options_screen_S6>
 800249c:	e00b      	b.n	80024b6 <Button_S6_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S6(); break;
 800249e:	f014 fe73 	bl	8017188 <Display_options_screen_S6>
 80024a2:	e008      	b.n	80024b6 <Button_S6_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S6(); break;
 80024a4:	f015 f8de 	bl	8017664 <Measure_options_screen_S6>
 80024a8:	e005      	b.n	80024b6 <Button_S6_press_callback+0x62>
		case RTC_screen: RTC_screen_S6(); break;
 80024aa:	f015 fdbd 	bl	8018028 <RTC_screen_S6>
 80024ae:	e002      	b.n	80024b6 <Button_S6_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S6(); break;
 80024b0:	f016 f82a 	bl	8018508 <Logging_options_screen_S6>
 80024b4:	bf00      	nop
	}
	off_sec=off_min=0;
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <Button_S6_press_callback+0x88>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <Button_S6_press_callback+0x88>)
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <Button_S6_press_callback+0x8c>)
 80024c2:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <Button_S6_press_callback+0x90>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <Button_S6_press_callback+0x90>)
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <Button_S6_press_callback+0x94>)
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000004c 	.word	0x2000004c
 80024dc:	20001c4e 	.word	0x20001c4e
 80024e0:	20001c4c 	.word	0x20001c4c
 80024e4:	20001c51 	.word	0x20001c51
 80024e8:	20001c50 	.word	0x20001c50

080024ec <Button_S7_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										DOWN
//--------------------------------------------------------------------------------------------------------

void Button_S7_press_callback(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	switch(screen)
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <Button_S7_press_callback+0x84>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	3b04      	subs	r3, #4
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d829      	bhi.n	800254e <Button_S7_press_callback+0x62>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <Button_S7_press_callback+0x14>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	0800252b 	.word	0x0800252b
 8002504:	08002537 	.word	0x08002537
 8002508:	08002531 	.word	0x08002531
 800250c:	0800253d 	.word	0x0800253d
 8002510:	08002525 	.word	0x08002525
 8002514:	08002543 	.word	0x08002543
 8002518:	0800254f 	.word	0x0800254f
 800251c:	0800254f 	.word	0x0800254f
 8002520:	08002549 	.word	0x08002549
	{
		case Parameter_screen: Parameter_screen_S7(); break;
 8002524:	f016 fa28 	bl	8018978 <Parameter_screen_S7>
 8002528:	e011      	b.n	800254e <Button_S7_press_callback+0x62>
		case Option_screen: Option_screen_S7(); break;
 800252a:	f016 fa81 	bl	8018a30 <Option_screen_S7>
 800252e:	e00e      	b.n	800254e <Button_S7_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S7(); break;
 8002530:	f014 fb26 	bl	8016b80 <ADC_options_screen_S7>
 8002534:	e00b      	b.n	800254e <Button_S7_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S7(); break;
 8002536:	f014 fe3b 	bl	80171b0 <Display_options_screen_S7>
 800253a:	e008      	b.n	800254e <Button_S7_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S7(); break;
 800253c:	f015 f8a6 	bl	801768c <Measure_options_screen_S7>
 8002540:	e005      	b.n	800254e <Button_S7_press_callback+0x62>
		case RTC_screen: RTC_screen_S7(); break;
 8002542:	f015 fde7 	bl	8018114 <RTC_screen_S7>
 8002546:	e002      	b.n	800254e <Button_S7_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S7(); break;
 8002548:	f015 fff2 	bl	8018530 <Logging_options_screen_S7>
 800254c:	bf00      	nop
	}
	off_sec=off_min=0;
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <Button_S7_press_callback+0x88>)
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <Button_S7_press_callback+0x88>)
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <Button_S7_press_callback+0x8c>)
 800255a:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <Button_S7_press_callback+0x90>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <Button_S7_press_callback+0x90>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <Button_S7_press_callback+0x94>)
 8002568:	701a      	strb	r2, [r3, #0]
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000004c 	.word	0x2000004c
 8002574:	20001c4e 	.word	0x20001c4e
 8002578:	20001c4c 	.word	0x20001c4c
 800257c:	20001c51 	.word	0x20001c51
 8002580:	20001c50 	.word	0x20001c50

08002584 <Button_S8_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											BACKWARD
//--------------------------------------------------------------------------------------------------------

void Button_S8_press_callback(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	switch(screen)
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <Button_S8_press_callback+0x78>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3b05      	subs	r3, #5
 800258e:	2b07      	cmp	r3, #7
 8002590:	d824      	bhi.n	80025dc <Button_S8_press_callback+0x58>
 8002592:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <Button_S8_press_callback+0x14>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025bf 	.word	0x080025bf
 800259c:	080025b9 	.word	0x080025b9
 80025a0:	080025c5 	.word	0x080025c5
 80025a4:	080025dd 	.word	0x080025dd
 80025a8:	080025cb 	.word	0x080025cb
 80025ac:	080025d1 	.word	0x080025d1
 80025b0:	080025dd 	.word	0x080025dd
 80025b4:	080025d7 	.word	0x080025d7
	{
		case ADC_options_screen: ADC_options_screen_S8(); break;
 80025b8:	f014 fb62 	bl	8016c80 <ADC_options_screen_S8>
 80025bc:	e00e      	b.n	80025dc <Button_S8_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S8(); break;
 80025be:	f014 fe37 	bl	8017230 <Display_options_screen_S8>
 80025c2:	e00b      	b.n	80025dc <Button_S8_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S8(); break;
 80025c4:	f015 f88c 	bl	80176e0 <Measure_options_screen_S8>
 80025c8:	e008      	b.n	80025dc <Button_S8_press_callback+0x58>
		case RTC_screen: RTC_screen_S8(); break;
 80025ca:	f015 fd19 	bl	8018000 <RTC_screen_S8>
 80025ce:	e005      	b.n	80025dc <Button_S8_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S8(); break;
 80025d0:	f014 fc9c 	bl	8016f0c <Auto_Off_option_screen_S8>
 80025d4:	e002      	b.n	80025dc <Button_S8_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S8(); break;
 80025d6:	f015 ffd5 	bl	8018584 <Logging_options_screen_S8>
 80025da:	bf00      	nop
	}
	off_sec=off_min=0;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <Button_S8_press_callback+0x7c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <Button_S8_press_callback+0x7c>)
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <Button_S8_press_callback+0x80>)
 80025e8:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <Button_S8_press_callback+0x84>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <Button_S8_press_callback+0x84>)
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <Button_S8_press_callback+0x88>)
 80025f6:	701a      	strb	r2, [r3, #0]
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000004c 	.word	0x2000004c
 8002600:	20001c4e 	.word	0x20001c4e
 8002604:	20001c4c 	.word	0x20001c4c
 8002608:	20001c51 	.word	0x20001c51
 800260c:	20001c50 	.word	0x20001c50

08002610 <Button_S9_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											MENU
//--------------------------------------------------------------------------------------------------------

void Button_S9_press_callback(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	switch(screen)
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <Button_S9_press_callback+0xa0>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	3b01      	subs	r3, #1
 800261a:	2b0b      	cmp	r3, #11
 800261c:	d838      	bhi.n	8002690 <Button_S9_press_callback+0x80>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <Button_S9_press_callback+0x14>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002673 	.word	0x08002673
 8002628:	08002691 	.word	0x08002691
 800262c:	08002691 	.word	0x08002691
 8002630:	0800265b 	.word	0x0800265b
 8002634:	08002667 	.word	0x08002667
 8002638:	08002661 	.word	0x08002661
 800263c:	0800266d 	.word	0x0800266d
 8002640:	08002655 	.word	0x08002655
 8002644:	08002679 	.word	0x08002679
 8002648:	0800267f 	.word	0x0800267f
 800264c:	08002685 	.word	0x08002685
 8002650:	0800268b 	.word	0x0800268b
	{
		case Parameter_screen: Parameter_screen_S9(); break;
 8002654:	f016 f936 	bl	80188c4 <Parameter_screen_S9>
 8002658:	e01a      	b.n	8002690 <Button_S9_press_callback+0x80>
		case Option_screen: Option_screen_S9(); break;
 800265a:	f016 f9d7 	bl	8018a0c <Option_screen_S9>
 800265e:	e017      	b.n	8002690 <Button_S9_press_callback+0x80>
		case ADC_options_screen: ADC_options_screen_S9(); break;
 8002660:	f014 faa2 	bl	8016ba8 <ADC_options_screen_S9>
 8002664:	e014      	b.n	8002690 <Button_S9_press_callback+0x80>
		case Display_options_screen: Display_options_screen_S9(); break;
 8002666:	f014 fd79 	bl	801715c <Display_options_screen_S9>
 800266a:	e011      	b.n	8002690 <Button_S9_press_callback+0x80>
		case Measure_options_screen: Measure_options_screen_S9(); break;
 800266c:	f015 f822 	bl	80176b4 <Measure_options_screen_S9>
 8002670:	e00e      	b.n	8002690 <Button_S9_press_callback+0x80>
		case Main_screen: Main_screen_S9(); break;
 8002672:	f015 f9f7 	bl	8017a64 <Main_screen_S9>
 8002676:	e00b      	b.n	8002690 <Button_S9_press_callback+0x80>
		case RTC_screen: RTC_screen_S9(); break;
 8002678:	f015 fc98 	bl	8017fac <RTC_screen_S9>
 800267c:	e008      	b.n	8002690 <Button_S9_press_callback+0x80>
		case Auto_Off_option_screen: Auto_Off_option_screen_S9(); break;
 800267e:	f014 fc2f 	bl	8016ee0 <Auto_Off_option_screen_S9>
 8002682:	e005      	b.n	8002690 <Button_S9_press_callback+0x80>
		case About_options_screen: About_options_screen_S9(); break;
 8002684:	f015 fe58 	bl	8018338 <About_options_screen_S9>
 8002688:	e002      	b.n	8002690 <Button_S9_press_callback+0x80>
		case Logging_options_screen: Logging_options_screen_S9(); break;
 800268a:	f015 ff65 	bl	8018558 <Logging_options_screen_S9>
 800268e:	bf00      	nop
	}
	off_sec=off_min=0;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <Button_S9_press_callback+0xa4>)
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <Button_S9_press_callback+0xa4>)
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <Button_S9_press_callback+0xa8>)
 800269c:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <Button_S9_press_callback+0xac>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <Button_S9_press_callback+0xac>)
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <Button_S9_press_callback+0xb0>)
 80026aa:	701a      	strb	r2, [r3, #0]
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000004c 	.word	0x2000004c
 80026b4:	20001c4e 	.word	0x20001c4e
 80026b8:	20001c4c 	.word	0x20001c4c
 80026bc:	20001c51 	.word	0x20001c51
 80026c0:	20001c50 	.word	0x20001c50

080026c4 <Button_S10_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E func
//--------------------------------------------------------------------------------------------------------

void Button_S10_press_callback(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <Button_S10_press_callback+0x54>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <Button_S10_press_callback+0x54>)
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <Button_S10_press_callback+0x58>)
 80026d4:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <Button_S10_press_callback+0x5c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <Button_S10_press_callback+0x5c>)
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <Button_S10_press_callback+0x60>)
 80026e2:	701a      	strb	r2, [r3, #0]
	// Переключение отображения второй строки
	if(++E_fun==3)E_fun=0;
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <Button_S10_press_callback+0x64>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <Button_S10_press_callback+0x64>)
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <Button_S10_press_callback+0x64>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d102      	bne.n	80026fe <Button_S10_press_callback+0x3a>
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <Button_S10_press_callback+0x64>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
	Electric_zero=0;
 80026fe:	490b      	ldr	r1, [pc, #44]	; (800272c <Button_S10_press_callback+0x68>)
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9c1 2300 	strd	r2, r3, [r1]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20001c4e 	.word	0x20001c4e
 800271c:	20001c4c 	.word	0x20001c4c
 8002720:	20001c51 	.word	0x20001c51
 8002724:	20001c50 	.word	0x20001c50
 8002728:	200008a8 	.word	0x200008a8
 800272c:	20000888 	.word	0x20000888

08002730 <Button_S11_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											P units
//--------------------------------------------------------------------------------------------------------

void Button_S11_press_callback(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	if(screen==Main_screen) screen=Test_screen;
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <Button_S11_press_callback+0x50>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d103      	bne.n	8002744 <Button_S11_press_callback+0x14>
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <Button_S11_press_callback+0x50>)
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e00a      	b.n	800275a <Button_S11_press_callback+0x2a>
	else if(screen==Test_screen)screen=ADC_options_screen;
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <Button_S11_press_callback+0x50>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d103      	bne.n	8002754 <Button_S11_press_callback+0x24>
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <Button_S11_press_callback+0x50>)
 800274e:	2206      	movs	r2, #6
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e002      	b.n	800275a <Button_S11_press_callback+0x2a>
	else screen=Main_screen;
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <Button_S11_press_callback+0x50>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]

	off_sec=off_min=0;
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <Button_S11_press_callback+0x54>)
 800275c:	2200      	movs	r2, #0
 800275e:	801a      	strh	r2, [r3, #0]
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <Button_S11_press_callback+0x54>)
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <Button_S11_press_callback+0x58>)
 8002766:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <Button_S11_press_callback+0x5c>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <Button_S11_press_callback+0x5c>)
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <Button_S11_press_callback+0x60>)
 8002774:	701a      	strb	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	2000004c 	.word	0x2000004c
 8002784:	20001c4e 	.word	0x20001c4e
 8002788:	20001c4c 	.word	0x20001c4c
 800278c:	20001c51 	.word	0x20001c51
 8002790:	20001c50 	.word	0x20001c50

08002794 <Buttons_process>:
//--------------------------------------------------------------------------------------------------------
//											Обработчик кнопок
//--------------------------------------------------------------------------------------------------------

void Buttons_process(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
	uint16_t keypad = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	81fb      	strh	r3, [r7, #14]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	// reset if bug
	aTxBuffer[0] = PI4IOE5V6416_REG_INT_MSK0;
 800279e:	234a      	movs	r3, #74	; 0x4a
 80027a0:	723b      	strb	r3, [r7, #8]
	aRxBuffer[0] = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80027a6:	f107 0208 	add.w	r2, r7, #8
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	2140      	movs	r1, #64	; 0x40
 80027b4:	48a0      	ldr	r0, [pc, #640]	; (8002a38 <Buttons_process+0x2a4>)
 80027b6:	f007 fe1d 	bl	800a3f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80027ba:	1d3a      	adds	r2, r7, #4
 80027bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2301      	movs	r3, #1
 80027c4:	2141      	movs	r1, #65	; 0x41
 80027c6:	489c      	ldr	r0, [pc, #624]	; (8002a38 <Buttons_process+0x2a4>)
 80027c8:	f007 ff08 	bl	800a5dc <HAL_I2C_Master_Receive>
	if(aRxBuffer[0] == 0x00){ERROR_REG|=(1<<KeyPad_err);HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); delay_us(100); HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);}
 80027cc:	793b      	ldrb	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d112      	bne.n	80027f8 <Buttons_process+0x64>
 80027d2:	4b9a      	ldr	r3, [pc, #616]	; (8002a3c <Buttons_process+0x2a8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	4a98      	ldr	r2, [pc, #608]	; (8002a3c <Buttons_process+0x2a8>)
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	2120      	movs	r1, #32
 80027e2:	4897      	ldr	r0, [pc, #604]	; (8002a40 <Buttons_process+0x2ac>)
 80027e4:	f007 fd3c 	bl	800a260 <HAL_GPIO_WritePin>
 80027e8:	2064      	movs	r0, #100	; 0x64
 80027ea:	f000 fd5d 	bl	80032a8 <delay_us>
 80027ee:	2201      	movs	r2, #1
 80027f0:	2120      	movs	r1, #32
 80027f2:	4893      	ldr	r0, [pc, #588]	; (8002a40 <Buttons_process+0x2ac>)
 80027f4:	f007 fd34 	bl	800a260 <HAL_GPIO_WritePin>

	aTxBuffer[0] = 0x00;
 80027f8:	2300      	movs	r3, #0
 80027fa:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80027fc:	f107 0208 	add.w	r2, r7, #8
 8002800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	488b      	ldr	r0, [pc, #556]	; (8002a38 <Buttons_process+0x2a4>)
 800280c:	f007 fdf2 	bl	800a3f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002810:	1d3a      	adds	r2, r7, #4
 8002812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2301      	movs	r3, #1
 800281a:	2141      	movs	r1, #65	; 0x41
 800281c:	4886      	ldr	r0, [pc, #536]	; (8002a38 <Buttons_process+0x2a4>)
 800281e:	f007 fedd 	bl	800a5dc <HAL_I2C_Master_Receive>
	keypad=aRxBuffer[0];
 8002822:	793b      	ldrb	r3, [r7, #4]
 8002824:	81fb      	strh	r3, [r7, #14]
	keypad<<=8;
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	81fb      	strh	r3, [r7, #14]
	aTxBuffer[0] = 0x01;
 800282c:	2301      	movs	r3, #1
 800282e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 8002830:	f107 0208 	add.w	r2, r7, #8
 8002834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	2140      	movs	r1, #64	; 0x40
 800283e:	487e      	ldr	r0, [pc, #504]	; (8002a38 <Buttons_process+0x2a4>)
 8002840:	f007 fdd8 	bl	800a3f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002844:	1d3a      	adds	r2, r7, #4
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	2141      	movs	r1, #65	; 0x41
 8002850:	4879      	ldr	r0, [pc, #484]	; (8002a38 <Buttons_process+0x2a4>)
 8002852:	f007 fec3 	bl	800a5dc <HAL_I2C_Master_Receive>
	keypad+=(aRxBuffer[0]&0x07);
 8002856:	793b      	ldrb	r3, [r7, #4]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	b29a      	uxth	r2, r3
 8002860:	89fb      	ldrh	r3, [r7, #14]
 8002862:	4413      	add	r3, r2
 8002864:	81fb      	strh	r3, [r7, #14]

	keypad_code=keypad;
 8002866:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <Buttons_process+0x2b0>)
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	8013      	strh	r3, [r2, #0]
	switch(keypad)
 800286c:	89fb      	ldrh	r3, [r7, #14]
 800286e:	f64f 7207 	movw	r2, #65287	; 0xff07
 8002872:	4293      	cmp	r3, r2
 8002874:	f000 80bb 	beq.w	80029ee <Buttons_process+0x25a>
 8002878:	f64f 7207 	movw	r2, #65287	; 0xff07
 800287c:	4293      	cmp	r3, r2
 800287e:	f300 80c0 	bgt.w	8002a02 <Buttons_process+0x26e>
 8002882:	f64f 6206 	movw	r2, #65030	; 0xfe06
 8002886:	4293      	cmp	r3, r2
 8002888:	f000 8093 	beq.w	80029b2 <Buttons_process+0x21e>
 800288c:	f64f 6206 	movw	r2, #65030	; 0xfe06
 8002890:	4293      	cmp	r3, r2
 8002892:	f300 80b6 	bgt.w	8002a02 <Buttons_process+0x26e>
 8002896:	f64f 6205 	movw	r2, #65029	; 0xfe05
 800289a:	4293      	cmp	r3, r2
 800289c:	f000 8093 	beq.w	80029c6 <Buttons_process+0x232>
 80028a0:	f64f 6205 	movw	r2, #65029	; 0xfe05
 80028a4:	4293      	cmp	r3, r2
 80028a6:	f300 80ac 	bgt.w	8002a02 <Buttons_process+0x26e>
 80028aa:	f64f 6203 	movw	r2, #65027	; 0xfe03
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f000 8093 	beq.w	80029da <Buttons_process+0x246>
 80028b4:	f64f 6203 	movw	r2, #65027	; 0xfe03
 80028b8:	4293      	cmp	r3, r2
 80028ba:	f300 80a2 	bgt.w	8002a02 <Buttons_process+0x26e>
 80028be:	f64f 4207 	movw	r2, #64519	; 0xfc07
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d02f      	beq.n	8002926 <Buttons_process+0x192>
 80028c6:	f64f 4207 	movw	r2, #64519	; 0xfc07
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f300 8099 	bgt.w	8002a02 <Buttons_process+0x26e>
 80028d0:	f64f 2207 	movw	r2, #64007	; 0xfa07
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d030      	beq.n	800293a <Buttons_process+0x1a6>
 80028d8:	f64f 2207 	movw	r2, #64007	; 0xfa07
 80028dc:	4293      	cmp	r3, r2
 80028de:	f300 8090 	bgt.w	8002a02 <Buttons_process+0x26e>
 80028e2:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d031      	beq.n	800294e <Buttons_process+0x1ba>
 80028ea:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f300 8087 	bgt.w	8002a02 <Buttons_process+0x26e>
 80028f4:	f64e 6207 	movw	r2, #60935	; 0xee07
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d032      	beq.n	8002962 <Buttons_process+0x1ce>
 80028fc:	f64e 6207 	movw	r2, #60935	; 0xee07
 8002900:	4293      	cmp	r3, r2
 8002902:	dc7e      	bgt.n	8002a02 <Buttons_process+0x26e>
 8002904:	f64d 6207 	movw	r2, #56839	; 0xde07
 8002908:	4293      	cmp	r3, r2
 800290a:	d034      	beq.n	8002976 <Buttons_process+0x1e2>
 800290c:	f64d 6207 	movw	r2, #56839	; 0xde07
 8002910:	4293      	cmp	r3, r2
 8002912:	dc76      	bgt.n	8002a02 <Buttons_process+0x26e>
 8002914:	f647 6207 	movw	r2, #32263	; 0x7e07
 8002918:	4293      	cmp	r3, r2
 800291a:	d040      	beq.n	800299e <Buttons_process+0x20a>
 800291c:	f64b 6207 	movw	r2, #48647	; 0xbe07
 8002920:	4293      	cmp	r3, r2
 8002922:	d032      	beq.n	800298a <Buttons_process+0x1f6>
 8002924:	e06d      	b.n	8002a02 <Buttons_process+0x26e>
	{
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 8002926:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <Buttons_process+0x2b4>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d170      	bne.n	8002a10 <Buttons_process+0x27c>
 800292e:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <Buttons_process+0x2b4>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	f7ff fc68 	bl	8002208 <Button_S2_press_callback>
 8002938:	e06a      	b.n	8002a10 <Buttons_process+0x27c>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <Buttons_process+0x2b4>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d168      	bne.n	8002a14 <Buttons_process+0x280>
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <Buttons_process+0x2b4>)
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	f7ff fca6 	bl	8002298 <Button_S3_press_callback>
 800294c:	e062      	b.n	8002a14 <Buttons_process+0x280>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <Buttons_process+0x2b4>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d160      	bne.n	8002a18 <Buttons_process+0x284>
 8002956:	4b3c      	ldr	r3, [pc, #240]	; (8002a48 <Buttons_process+0x2b4>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	f7ff fcf4 	bl	8002348 <Button_S4_press_callback>
 8002960:	e05a      	b.n	8002a18 <Buttons_process+0x284>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <Buttons_process+0x2b4>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d158      	bne.n	8002a1c <Buttons_process+0x288>
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <Buttons_process+0x2b4>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	f7ff fd2a 	bl	80023c8 <Button_S5_press_callback>
 8002974:	e052      	b.n	8002a1c <Buttons_process+0x288>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <Buttons_process+0x2b4>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d150      	bne.n	8002a20 <Buttons_process+0x28c>
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <Buttons_process+0x2b4>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	f7ff fd66 	bl	8002454 <Button_S6_press_callback>
 8002988:	e04a      	b.n	8002a20 <Buttons_process+0x28c>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <Buttons_process+0x2b4>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d148      	bne.n	8002a24 <Buttons_process+0x290>
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <Buttons_process+0x2b4>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	f7ff fda8 	bl	80024ec <Button_S7_press_callback>
 800299c:	e042      	b.n	8002a24 <Buttons_process+0x290>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 800299e:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <Buttons_process+0x2b4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d140      	bne.n	8002a28 <Buttons_process+0x294>
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <Buttons_process+0x2b4>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	f7ff fdea 	bl	8002584 <Button_S8_press_callback>
 80029b0:	e03a      	b.n	8002a28 <Buttons_process+0x294>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <Buttons_process+0x2b4>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d138      	bne.n	8002a2c <Buttons_process+0x298>
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <Buttons_process+0x2b4>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	f7ff fe26 	bl	8002610 <Button_S9_press_callback>
 80029c4:	e032      	b.n	8002a2c <Buttons_process+0x298>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <Buttons_process+0x2b4>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d130      	bne.n	8002a30 <Buttons_process+0x29c>
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <Buttons_process+0x2b4>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	f7ff fe76 	bl	80026c4 <Button_S10_press_callback>
 80029d8:	e02a      	b.n	8002a30 <Buttons_process+0x29c>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <Buttons_process+0x2b4>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d128      	bne.n	8002a34 <Buttons_process+0x2a0>
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <Buttons_process+0x2b4>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	f7ff fea2 	bl	8002730 <Button_S11_press_callback>
 80029ec:	e022      	b.n	8002a34 <Buttons_process+0x2a0>
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <Buttons_process+0x2b4>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d12c      	bne.n	8002a50 <Buttons_process+0x2bc>
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <Buttons_process+0x2b4>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	f7ff fbe2 	bl	80021c4 <Button_S1_press_callback>
 8002a00:	e026      	b.n	8002a50 <Buttons_process+0x2bc>
		default: buttons_press=Button_State=0; break;
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <Buttons_process+0x2b4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <Buttons_process+0x2b8>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	e020      	b.n	8002a52 <Buttons_process+0x2be>
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 8002a10:	bf00      	nop
 8002a12:	e01e      	b.n	8002a52 <Buttons_process+0x2be>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 8002a14:	bf00      	nop
 8002a16:	e01c      	b.n	8002a52 <Buttons_process+0x2be>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 8002a18:	bf00      	nop
 8002a1a:	e01a      	b.n	8002a52 <Buttons_process+0x2be>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002a1c:	bf00      	nop
 8002a1e:	e018      	b.n	8002a52 <Buttons_process+0x2be>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002a20:	bf00      	nop
 8002a22:	e016      	b.n	8002a52 <Buttons_process+0x2be>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 8002a24:	bf00      	nop
 8002a26:	e014      	b.n	8002a52 <Buttons_process+0x2be>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 8002a28:	bf00      	nop
 8002a2a:	e012      	b.n	8002a52 <Buttons_process+0x2be>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 8002a2c:	bf00      	nop
 8002a2e:	e010      	b.n	8002a52 <Buttons_process+0x2be>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 8002a30:	bf00      	nop
 8002a32:	e00e      	b.n	8002a52 <Buttons_process+0x2be>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 8002a34:	bf00      	nop
 8002a36:	e00c      	b.n	8002a52 <Buttons_process+0x2be>
 8002a38:	2000792c 	.word	0x2000792c
 8002a3c:	20000898 	.word	0x20000898
 8002a40:	48000400 	.word	0x48000400
 8002a44:	20000862 	.word	0x20000862
 8002a48:	2000085c 	.word	0x2000085c
 8002a4c:	2000085e 	.word	0x2000085e
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002a50:	bf00      	nop
	}

	if((Button_State==1)&&(buttons_press<20))buttons_press++;
 8002a52:	4b2f      	ldr	r3, [pc, #188]	; (8002b10 <Buttons_process+0x37c>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d109      	bne.n	8002a6e <Buttons_process+0x2da>
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <Buttons_process+0x380>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	2b13      	cmp	r3, #19
 8002a60:	d805      	bhi.n	8002a6e <Buttons_process+0x2da>
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <Buttons_process+0x380>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <Buttons_process+0x380>)
 8002a6c:	801a      	strh	r2, [r3, #0]

	// Задержка на обработку кнопки включения
	if(OnOffCntr>on_off_time){ if(--OnOffCntr==on_off_time) OnOffCntr=-1; }
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <Buttons_process+0x384>)
 8002a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a74:	2bc8      	cmp	r3, #200	; 0xc8
 8002a76:	dd11      	ble.n	8002a9c <Buttons_process+0x308>
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <Buttons_process+0x384>)
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <Buttons_process+0x384>)
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <Buttons_process+0x384>)
 8002a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a90:	2bc8      	cmp	r3, #200	; 0xc8
 8002a92:	d103      	bne.n	8002a9c <Buttons_process+0x308>
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <Buttons_process+0x384>)
 8002a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a9a:	801a      	strh	r2, [r3, #0]
	if((OnOffCntr>0)&&(OnOffCntr<=on_off_time)) if(--OnOffCntr==0)
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <Buttons_process+0x384>)
 8002a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	dd2c      	ble.n	8002b00 <Buttons_process+0x36c>
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <Buttons_process+0x384>)
 8002aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aac:	2bc8      	cmp	r3, #200	; 0xc8
 8002aae:	dc27      	bgt.n	8002b00 <Buttons_process+0x36c>
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <Buttons_process+0x384>)
 8002ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <Buttons_process+0x384>)
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <Buttons_process+0x384>)
 8002ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d119      	bne.n	8002b00 <Buttons_process+0x36c>
	{
		// Выключение
		TURN_OFF_ADC_POWER();
 8002acc:	2200      	movs	r2, #0
 8002ace:	2140      	movs	r1, #64	; 0x40
 8002ad0:	4812      	ldr	r0, [pc, #72]	; (8002b1c <Buttons_process+0x388>)
 8002ad2:	f007 fbc5 	bl	800a260 <HAL_GPIO_WritePin>
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002adc:	4810      	ldr	r0, [pc, #64]	; (8002b20 <Buttons_process+0x38c>)
 8002ade:	f007 fbbf 	bl	800a260 <HAL_GPIO_WritePin>
		delay_ms(200);
 8002ae2:	20c8      	movs	r0, #200	; 0xc8
 8002ae4:	f000 fbca 	bl	800327c <delay_ms>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aee:	480b      	ldr	r0, [pc, #44]	; (8002b1c <Buttons_process+0x388>)
 8002af0:	f007 fbb6 	bl	800a260 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LCD_reserv_GPIO_Port, EN_LCD_reserv_Pin, GPIO_PIN_RESET);
 8002af4:	2200      	movs	r2, #0
 8002af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002afa:	4809      	ldr	r0, [pc, #36]	; (8002b20 <Buttons_process+0x38c>)
 8002afc:	f007 fbb0 	bl	800a260 <HAL_GPIO_WritePin>
	}

	sleep(5);
 8002b00:	2005      	movs	r0, #5
 8002b02:	f000 fb6f 	bl	80031e4 <sleep>
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000085c 	.word	0x2000085c
 8002b14:	2000085e 	.word	0x2000085e
 8002b18:	2000004a 	.word	0x2000004a
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	48000c00 	.word	0x48000c00

08002b24 <Buttons_timer>:
//--------------------------------------------------------------------------------------------------------
//											Таймер долгого нажатия
//--------------------------------------------------------------------------------------------------------

void Buttons_timer(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
	if(buttons_press==20)
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <Buttons_timer+0x44>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	2b14      	cmp	r3, #20
 8002b2e:	d112      	bne.n	8002b56 <Buttons_timer+0x32>
	{
		if(++buttons_ms>=1000)
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <Buttons_timer+0x48>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <Buttons_timer+0x48>)
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <Buttons_timer+0x48>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b44:	d30a      	bcc.n	8002b5c <Buttons_timer+0x38>
		{
			buttons_ms=1000-100;
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <Buttons_timer+0x48>)
 8002b48:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002b4c:	801a      	strh	r2, [r3, #0]
			Button_State=0;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <Buttons_timer+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
		}
	}
	else {buttons_ms=0;}
}
 8002b54:	e002      	b.n	8002b5c <Buttons_timer+0x38>
	else {buttons_ms=0;}
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <Buttons_timer+0x48>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	801a      	strh	r2, [r3, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000085e 	.word	0x2000085e
 8002b6c:	20000860 	.word	0x20000860
 8002b70:	2000085c 	.word	0x2000085c

08002b74 <DrawImage>:
const char *PGA_name[9]={ "PGA OFF", "PGA 1", "PGA 2", "PGA 4", "PGA 8", "PGA 16", "PGA 32", "PGA 64", "PGA 128" };



void DrawImage(const uint8_t *image, uint16_t x, uint16_t y, uint8_t inverse)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	460b      	mov	r3, r1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	71fb      	strb	r3, [r7, #7]
	uint16_t xi = 0, yi = 0, bitnum=0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	83fb      	strh	r3, [r7, #30]
 8002b92:	2300      	movs	r3, #0
 8002b94:	83bb      	strh	r3, [r7, #28]
 8002b96:	2300      	movs	r3, #0
 8002b98:	837b      	strh	r3, [r7, #26]
	uint8_t color;
	uint16_t SIZE_X, SIZE_Y;
	// Размер картинки
	SIZE_X = (uint16_t)(((image[0]<<8) + image[1])>>3);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	3201      	adds	r2, #1
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	10db      	asrs	r3, r3, #3
 8002baa:	833b      	strh	r3, [r7, #24]
	SIZE_Y = (uint16_t)(image[2]<<8) + image[3];
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3302      	adds	r3, #2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3303      	adds	r3, #3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	82fb      	strh	r3, [r7, #22]
	for(yi = 0; yi < SIZE_Y; yi++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	83bb      	strh	r3, [r7, #28]
 8002bc8:	e03e      	b.n	8002c48 <DrawImage+0xd4>
	{
		for(xi = 0; xi < SIZE_X; xi++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83fb      	strh	r3, [r7, #30]
 8002bce:	e034      	b.n	8002c3a <DrawImage+0xc6>
		{
			for(bitnum=0;bitnum<8;bitnum++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	837b      	strh	r3, [r7, #26]
 8002bd4:	e02b      	b.n	8002c2e <DrawImage+0xba>
			{
				color=((image[xi+yi*SIZE_X+4])>>(7-bitnum))&0x01;
 8002bd6:	8bfa      	ldrh	r2, [r7, #30]
 8002bd8:	8bbb      	ldrh	r3, [r7, #28]
 8002bda:	8b39      	ldrh	r1, [r7, #24]
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	8b7b      	ldrh	r3, [r7, #26]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	fa42 f303 	asr.w	r3, r2, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	757b      	strb	r3, [r7, #21]
				if(color==inverse)u8g2_DrawPixel(&u8g2, x+(xi*8)+bitnum, y+yi);
 8002bfe:	7d7a      	ldrb	r2, [r7, #21]
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d110      	bne.n	8002c28 <DrawImage+0xb4>
 8002c06:	8bfb      	ldrh	r3, [r7, #30]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	4413      	add	r3, r2
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	8b7b      	ldrh	r3, [r7, #26]
 8002c14:	4413      	add	r3, r2
 8002c16:	b299      	uxth	r1, r3
 8002c18:	893a      	ldrh	r2, [r7, #8]
 8002c1a:	8bbb      	ldrh	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	480e      	ldr	r0, [pc, #56]	; (8002c5c <DrawImage+0xe8>)
 8002c24:	f013 f86a 	bl	8015cfc <u8g2_DrawPixel>
			for(bitnum=0;bitnum<8;bitnum++)
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	837b      	strh	r3, [r7, #26]
 8002c2e:	8b7b      	ldrh	r3, [r7, #26]
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d9d0      	bls.n	8002bd6 <DrawImage+0x62>
		for(xi = 0; xi < SIZE_X; xi++)
 8002c34:	8bfb      	ldrh	r3, [r7, #30]
 8002c36:	3301      	adds	r3, #1
 8002c38:	83fb      	strh	r3, [r7, #30]
 8002c3a:	8bfa      	ldrh	r2, [r7, #30]
 8002c3c:	8b3b      	ldrh	r3, [r7, #24]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d3c6      	bcc.n	8002bd0 <DrawImage+0x5c>
	for(yi = 0; yi < SIZE_Y; yi++)
 8002c42:	8bbb      	ldrh	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	83bb      	strh	r3, [r7, #28]
 8002c48:	8bba      	ldrh	r2, [r7, #28]
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3bc      	bcc.n	8002bca <DrawImage+0x56>
			}
		}
	}
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20001fd4 	.word	0x20001fd4

08002c60 <Display_init>:




void Display_init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	u8g2_Setup_uc1638_240x160_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_cb_stm32l4);
 8002c66:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <Display_init+0xe8>)
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <Display_init+0xec>)
 8002c6a:	4939      	ldr	r1, [pc, #228]	; (8002d50 <Display_init+0xf0>)
 8002c6c:	4839      	ldr	r0, [pc, #228]	; (8002d54 <Display_init+0xf4>)
 8002c6e:	f012 f981 	bl	8014f74 <u8g2_Setup_uc1638_240x160_f>
	u8g2_InitDisplay(&u8g2);
 8002c72:	4838      	ldr	r0, [pc, #224]	; (8002d54 <Display_init+0xf4>)
 8002c74:	f013 fdfa 	bl	801686c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4836      	ldr	r0, [pc, #216]	; (8002d54 <Display_init+0xf4>)
 8002c7c:	f013 fe05 	bl	801688a <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 8002c80:	4834      	ldr	r0, [pc, #208]	; (8002d54 <Display_init+0xf4>)
 8002c82:	f012 f952 	bl	8014f2a <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002c86:	4934      	ldr	r1, [pc, #208]	; (8002d58 <Display_init+0xf8>)
 8002c88:	4832      	ldr	r0, [pc, #200]	; (8002d54 <Display_init+0xf4>)
 8002c8a:	f012 ff23 	bl	8015ad4 <u8g2_SetFont>

	//Подсветка
	temp_light=display_brightness;
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <Display_init+0xfc>)
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <Display_init+0x100>)
 8002c94:	701a      	strb	r2, [r3, #0]
	TIM2->CCR1=display_brightness;
 8002c96:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <Display_init+0xfc>)
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34

	// Контрастность
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca6:	482f      	ldr	r0, [pc, #188]	; (8002d64 <Display_init+0x104>)
 8002ca8:	f007 fada 	bl	800a260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2101      	movs	r1, #1
 8002cb0:	482d      	ldr	r0, [pc, #180]	; (8002d68 <Display_init+0x108>)
 8002cb2:	f007 fad5 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+1;
 8002cb6:	23e9      	movs	r3, #233	; 0xe9
 8002cb8:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002cba:	463a      	mov	r2, r7
 8002cbc:	1d39      	adds	r1, r7, #4
 8002cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4829      	ldr	r0, [pc, #164]	; (8002d6c <Display_init+0x10c>)
 8002cc8:	f00b fb85 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4825      	ldr	r0, [pc, #148]	; (8002d68 <Display_init+0x108>)
 8002cd2:	f007 fac5 	bl	800a260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4823      	ldr	r0, [pc, #140]	; (8002d68 <Display_init+0x108>)
 8002cdc:	f007 fac0 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8002ce0:	2381      	movs	r3, #129	; 0x81
 8002ce2:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002ce4:	463a      	mov	r2, r7
 8002ce6:	1d39      	adds	r1, r7, #4
 8002ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	481e      	ldr	r0, [pc, #120]	; (8002d6c <Display_init+0x10c>)
 8002cf2:	f00b fb70 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cfc:	4819      	ldr	r0, [pc, #100]	; (8002d64 <Display_init+0x104>)
 8002cfe:	f007 faaf 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <Display_init+0x110>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	337d      	adds	r3, #125	; 0x7d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002d0c:	463a      	mov	r2, r7
 8002d0e:	1d39      	adds	r1, r7, #4
 8002d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2301      	movs	r3, #1
 8002d18:	4814      	ldr	r0, [pc, #80]	; (8002d6c <Display_init+0x10c>)
 8002d1a:	f00b fb5c 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2101      	movs	r1, #1
 8002d22:	4811      	ldr	r0, [pc, #68]	; (8002d68 <Display_init+0x108>)
 8002d24:	f007 fa9c 	bl	800a260 <HAL_GPIO_WritePin>

	DrawImage(img1, 16, 61, 1);
 8002d28:	2301      	movs	r3, #1
 8002d2a:	223d      	movs	r2, #61	; 0x3d
 8002d2c:	2110      	movs	r1, #16
 8002d2e:	4811      	ldr	r0, [pc, #68]	; (8002d74 <Display_init+0x114>)
 8002d30:	f7ff ff20 	bl	8002b74 <DrawImage>
	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002d34:	4807      	ldr	r0, [pc, #28]	; (8002d54 <Display_init+0xf4>)
 8002d36:	f012 f890 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002d3a:	4806      	ldr	r0, [pc, #24]	; (8002d54 <Display_init+0xf4>)
 8002d3c:	f012 f81a 	bl	8014d74 <u8g2_ClearBuffer>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	08007939 	.word	0x08007939
 8002d4c:	08007a59 	.word	0x08007a59
 8002d50:	0802919c 	.word	0x0802919c
 8002d54:	20001fd4 	.word	0x20001fd4
 8002d58:	08027258 	.word	0x08027258
 8002d5c:	20000098 	.word	0x20000098
 8002d60:	20001c54 	.word	0x20001c54
 8002d64:	48000400 	.word	0x48000400
 8002d68:	48001000 	.word	0x48001000
 8002d6c:	20001f70 	.word	0x20001f70
 8002d70:	20000099 	.word	0x20000099
 8002d74:	08022520 	.word	0x08022520

08002d78 <Gauge_loading>:



void Gauge_loading(uint8_t*text, uint8_t percent)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	70fb      	strb	r3, [r7, #3]
	DrawImage(img1, 16, 61, 1);
 8002d84:	2301      	movs	r3, #1
 8002d86:	223d      	movs	r2, #61	; 0x3d
 8002d88:	2110      	movs	r1, #16
 8002d8a:	481d      	ldr	r0, [pc, #116]	; (8002e00 <Gauge_loading+0x88>)
 8002d8c:	f7ff fef2 	bl	8002b74 <DrawImage>

	u8g2_DrawFrame(&u8g2, 40, 120, 160, 12);
 8002d90:	230c      	movs	r3, #12
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	23a0      	movs	r3, #160	; 0xa0
 8002d96:	2278      	movs	r2, #120	; 0x78
 8002d98:	2128      	movs	r1, #40	; 0x28
 8002d9a:	481a      	ldr	r0, [pc, #104]	; (8002e04 <Gauge_loading+0x8c>)
 8002d9c:	f011 ff8d 	bl	8014cba <u8g2_DrawFrame>
	u8g2_DrawBox(&u8g2, 40,120, percent*1.6, 12);
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fbce 	bl	8000544 <__aeabi_i2d>
 8002da8:	a313      	add	r3, pc, #76	; (adr r3, 8002df8 <Gauge_loading+0x80>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f7fd fc33 	bl	8000618 <__aeabi_dmul>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd ff05 	bl	8000bc8 <__aeabi_d2uiz>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	9200      	str	r2, [sp, #0]
 8002dc6:	2278      	movs	r2, #120	; 0x78
 8002dc8:	2128      	movs	r1, #40	; 0x28
 8002dca:	480e      	ldr	r0, [pc, #56]	; (8002e04 <Gauge_loading+0x8c>)
 8002dcc:	f011 ff3f 	bl	8014c4e <u8g2_DrawBox>

	//sprintf(RAM,"%d", percent);
	//u8g2_DrawUTF8(&u8g2, 50, 120, RAM);
	u8g2_SetFont(&u8g2, u8g2_font_8x13_t_cyrillic);
 8002dd0:	490d      	ldr	r1, [pc, #52]	; (8002e08 <Gauge_loading+0x90>)
 8002dd2:	480c      	ldr	r0, [pc, #48]	; (8002e04 <Gauge_loading+0x8c>)
 8002dd4:	f012 fe7e 	bl	8015ad4 <u8g2_SetFont>
	u8g2_DrawUTF8(&u8g2, 40, 145, (char *)text);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2291      	movs	r2, #145	; 0x91
 8002ddc:	2128      	movs	r1, #40	; 0x28
 8002dde:	4809      	ldr	r0, [pc, #36]	; (8002e04 <Gauge_loading+0x8c>)
 8002de0:	f012 fdd6 	bl	8015990 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002de4:	4807      	ldr	r0, [pc, #28]	; (8002e04 <Gauge_loading+0x8c>)
 8002de6:	f012 f838 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002dea:	4806      	ldr	r0, [pc, #24]	; (8002e04 <Gauge_loading+0x8c>)
 8002dec:	f011 ffc2 	bl	8014d74 <u8g2_ClearBuffer>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	9999999a 	.word	0x9999999a
 8002dfc:	3ff99999 	.word	0x3ff99999
 8002e00:	08022520 	.word	0x08022520
 8002e04:	20001fd4 	.word	0x20001fd4
 8002e08:	080247fc 	.word	0x080247fc

08002e0c <Off_screen_func>:




void Off_screen_func(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	// static
	if(old_active_string==0xFF)
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <Off_screen_func+0x30>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2bff      	cmp	r3, #255	; 0xff
 8002e16:	d10e      	bne.n	8002e36 <Off_screen_func+0x2a>
	{
		DrawImage(img2, 0, 0, 0);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4808      	ldr	r0, [pc, #32]	; (8002e40 <Off_screen_func+0x34>)
 8002e20:	f7ff fea8 	bl	8002b74 <DrawImage>
		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <Off_screen_func+0x38>)
 8002e26:	f012 f818 	bl	8014e5a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <Off_screen_func+0x38>)
 8002e2c:	f011 ffa2 	bl	8014d74 <u8g2_ClearBuffer>
		old_active_string=0;
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <Off_screen_func+0x30>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
	}
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200003a8 	.word	0x200003a8
 8002e40:	08022900 	.word	0x08022900
 8002e44:	20001fd4 	.word	0x20001fd4

08002e48 <Blink_Edit_Parameter_timer>:

uint16_t blink_timer=0;
uint8_t blink_trig=0;
void Blink_Edit_Parameter_timer(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
	if(++blink_timer==200)blink_trig=1;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <Blink_Edit_Parameter_timer+0x40>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <Blink_Edit_Parameter_timer+0x40>)
 8002e56:	801a      	strh	r2, [r3, #0]
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <Blink_Edit_Parameter_timer+0x40>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	2bc8      	cmp	r3, #200	; 0xc8
 8002e5e:	d102      	bne.n	8002e66 <Blink_Edit_Parameter_timer+0x1e>
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <Blink_Edit_Parameter_timer+0x44>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
	if(blink_timer>=500){blink_timer=blink_trig=0;}
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <Blink_Edit_Parameter_timer+0x40>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e6e:	d305      	bcc.n	8002e7c <Blink_Edit_Parameter_timer+0x34>
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <Blink_Edit_Parameter_timer+0x44>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <Blink_Edit_Parameter_timer+0x40>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	801a      	strh	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000866 	.word	0x20000866
 8002e8c:	20000868 	.word	0x20000868

08002e90 <Blink_Edit_Parameter>:


void Blink_Edit_Parameter(uint8_t x, uint8_t y, const char* text, uint8_t param_num, uint8_t curr_param)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	603a      	str	r2, [r7, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	71bb      	strb	r3, [r7, #6]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	717b      	strb	r3, [r7, #5]
	if(param_num==curr_param)
 8002ea6:	797a      	ldrb	r2, [r7, #5]
 8002ea8:	7c3b      	ldrb	r3, [r7, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10c      	bne.n	8002ec8 <Blink_Edit_Parameter+0x38>
	{if(blink_trig==1)u8g2_DrawUTF8(&u8g2, x, y, text);}
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <Blink_Edit_Parameter+0x50>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d110      	bne.n	8002ed8 <Blink_Edit_Parameter+0x48>
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	b299      	uxth	r1, r3
 8002eba:	79bb      	ldrb	r3, [r7, #6]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	4808      	ldr	r0, [pc, #32]	; (8002ee4 <Blink_Edit_Parameter+0x54>)
 8002ec2:	f012 fd65 	bl	8015990 <u8g2_DrawUTF8>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
}
 8002ec6:	e007      	b.n	8002ed8 <Blink_Edit_Parameter+0x48>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	b299      	uxth	r1, r3
 8002ecc:	79bb      	ldrb	r3, [r7, #6]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4804      	ldr	r0, [pc, #16]	; (8002ee4 <Blink_Edit_Parameter+0x54>)
 8002ed4:	f012 fd5c 	bl	8015990 <u8g2_DrawUTF8>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000868 	.word	0x20000868
 8002ee4:	20001fd4 	.word	0x20001fd4

08002ee8 <Test_screen_func>:


void Test_screen_func(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	71fb      	strb	r3, [r7, #7]
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002ef2:	4942      	ldr	r1, [pc, #264]	; (8002ffc <Test_screen_func+0x114>)
 8002ef4:	4842      	ldr	r0, [pc, #264]	; (8003000 <Test_screen_func+0x118>)
 8002ef6:	f012 fded 	bl	8015ad4 <u8g2_SetFont>

	// Индикация напряжения
	for(i=0;i<6;i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	71fb      	strb	r3, [r7, #7]
 8002efe:	e019      	b.n	8002f34 <Test_screen_func+0x4c>
	{
		sprintf((char *)RAM,"%+fmV", ADC_volt[i]);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	4a40      	ldr	r2, [pc, #256]	; (8003004 <Test_screen_func+0x11c>)
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	493e      	ldr	r1, [pc, #248]	; (8003008 <Test_screen_func+0x120>)
 8002f0e:	483f      	ldr	r0, [pc, #252]	; (800300c <Test_screen_func+0x124>)
 8002f10:	f01a ff3e 	bl	801dd90 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 30+i*15, (char *)RAM);
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	331e      	adds	r3, #30
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <Test_screen_func+0x124>)
 8002f26:	2178      	movs	r1, #120	; 0x78
 8002f28:	4835      	ldr	r0, [pc, #212]	; (8003000 <Test_screen_func+0x118>)
 8002f2a:	f012 fd31 	bl	8015990 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	3301      	adds	r3, #1
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d9e2      	bls.n	8002f00 <Test_screen_func+0x18>
	}

	// Индикация АЦП
	for(i=0;i<6;i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	e018      	b.n	8002f72 <Test_screen_func+0x8a>
	{
		//sprintf(RAM,"%d %+d", i, ADC_channel_0[i]);
		sprintf((char *)RAM,"%d %+d", i, ADC_middle[i]);
 8002f40:	79fa      	ldrb	r2, [r7, #7]
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	4932      	ldr	r1, [pc, #200]	; (8003010 <Test_screen_func+0x128>)
 8002f46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f4a:	4932      	ldr	r1, [pc, #200]	; (8003014 <Test_screen_func+0x12c>)
 8002f4c:	482f      	ldr	r0, [pc, #188]	; (800300c <Test_screen_func+0x124>)
 8002f4e:	f01a ff1f 	bl	801dd90 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 30+i*15, (char *)RAM);
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	331e      	adds	r3, #30
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <Test_screen_func+0x124>)
 8002f64:	2105      	movs	r1, #5
 8002f66:	4826      	ldr	r0, [pc, #152]	; (8003000 <Test_screen_func+0x118>)
 8002f68:	f012 fd12 	bl	8015990 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d9e3      	bls.n	8002f40 <Test_screen_func+0x58>
	}

	switch(adc_calibration_mode)
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <Test_screen_func+0x130>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d014      	beq.n	8002faa <Test_screen_func+0xc2>
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	dc19      	bgt.n	8002fb8 <Test_screen_func+0xd0>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <Test_screen_func+0xa6>
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d007      	beq.n	8002f9c <Test_screen_func+0xb4>
 8002f8c:	e014      	b.n	8002fb8 <Test_screen_func+0xd0>
	{
		case 0: u8g2_DrawUTF8(&u8g2, 5, 130, "self_calibration"); break;
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <Test_screen_func+0x134>)
 8002f90:	2282      	movs	r2, #130	; 0x82
 8002f92:	2105      	movs	r1, #5
 8002f94:	481a      	ldr	r0, [pc, #104]	; (8003000 <Test_screen_func+0x118>)
 8002f96:	f012 fcfb 	bl	8015990 <u8g2_DrawUTF8>
 8002f9a:	e00d      	b.n	8002fb8 <Test_screen_func+0xd0>
		case 1: u8g2_DrawUTF8(&u8g2, 5, 130, "offset_calibration"); break;
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <Test_screen_func+0x138>)
 8002f9e:	2282      	movs	r2, #130	; 0x82
 8002fa0:	2105      	movs	r1, #5
 8002fa2:	4817      	ldr	r0, [pc, #92]	; (8003000 <Test_screen_func+0x118>)
 8002fa4:	f012 fcf4 	bl	8015990 <u8g2_DrawUTF8>
 8002fa8:	e006      	b.n	8002fb8 <Test_screen_func+0xd0>
		case 2: u8g2_DrawUTF8(&u8g2, 5, 130, "full_scale_calibration"); break;
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <Test_screen_func+0x13c>)
 8002fac:	2282      	movs	r2, #130	; 0x82
 8002fae:	2105      	movs	r1, #5
 8002fb0:	4813      	ldr	r0, [pc, #76]	; (8003000 <Test_screen_func+0x118>)
 8002fb2:	f012 fced 	bl	8015990 <u8g2_DrawUTF8>
 8002fb6:	bf00      	nop
	}

	// �?ндикация PGA
	u8g2_DrawUTF8(&u8g2, 5, 145, PGA_name[PGA_GAIN]);
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <Test_screen_func+0x140>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <Test_screen_func+0x144>)
 8002fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc4:	2291      	movs	r2, #145	; 0x91
 8002fc6:	2105      	movs	r1, #5
 8002fc8:	480d      	ldr	r0, [pc, #52]	; (8003000 <Test_screen_func+0x118>)
 8002fca:	f012 fce1 	bl	8015990 <u8g2_DrawUTF8>

	sprintf((char *)RAM,"%f", Kdiv);
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <Test_screen_func+0x148>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	4917      	ldr	r1, [pc, #92]	; (8003034 <Test_screen_func+0x14c>)
 8002fd6:	480d      	ldr	r0, [pc, #52]	; (800300c <Test_screen_func+0x124>)
 8002fd8:	f01a feda 	bl	801dd90 <siprintf>
	u8g2_DrawUTF8(&u8g2, 120, 145, (char *)RAM);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <Test_screen_func+0x124>)
 8002fde:	2291      	movs	r2, #145	; 0x91
 8002fe0:	2178      	movs	r1, #120	; 0x78
 8002fe2:	4807      	ldr	r0, [pc, #28]	; (8003000 <Test_screen_func+0x118>)
 8002fe4:	f012 fcd4 	bl	8015990 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002fe8:	4805      	ldr	r0, [pc, #20]	; (8003000 <Test_screen_func+0x118>)
 8002fea:	f011 ff36 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002fee:	4804      	ldr	r0, [pc, #16]	; (8003000 <Test_screen_func+0x118>)
 8002ff0:	f011 fec0 	bl	8014d74 <u8g2_ClearBuffer>
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	08027258 	.word	0x08027258
 8003000:	20001fd4 	.word	0x20001fd4
 8003004:	200052d0 	.word	0x200052d0
 8003008:	08021b50 	.word	0x08021b50
 800300c:	20002090 	.word	0x20002090
 8003010:	200020f8 	.word	0x200020f8
 8003014:	08021b58 	.word	0x08021b58
 8003018:	200008af 	.word	0x200008af
 800301c:	08021b60 	.word	0x08021b60
 8003020:	08021b74 	.word	0x08021b74
 8003024:	08021b88 	.word	0x08021b88
 8003028:	2000009a 	.word	0x2000009a
 800302c:	20000050 	.word	0x20000050
 8003030:	20000090 	.word	0x20000090
 8003034:	08021ba0 	.word	0x08021ba0

08003038 <Display_process>:




void Display_process(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	switch(screen)
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <Display_process+0x98>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	3b01      	subs	r3, #1
 8003042:	2b0b      	cmp	r3, #11
 8003044:	d83e      	bhi.n	80030c4 <Display_process+0x8c>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <Display_process+0x14>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	0800307d 	.word	0x0800307d
 8003050:	08003083 	.word	0x08003083
 8003054:	08003089 	.word	0x08003089
 8003058:	0800308f 	.word	0x0800308f
 800305c:	08003095 	.word	0x08003095
 8003060:	0800309b 	.word	0x0800309b
 8003064:	080030a1 	.word	0x080030a1
 8003068:	080030a7 	.word	0x080030a7
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030b3 	.word	0x080030b3
 8003074:	080030b9 	.word	0x080030b9
 8003078:	080030bf 	.word	0x080030bf
	{
		case Main_screen: Main_screen_func(); break;
 800307c:	f014 fbfc 	bl	8017878 <Main_screen_func>
 8003080:	e020      	b.n	80030c4 <Display_process+0x8c>
		case Test_screen: Test_screen_func(); break;
 8003082:	f7ff ff31 	bl	8002ee8 <Test_screen_func>
 8003086:	e01d      	b.n	80030c4 <Display_process+0x8c>
		case Off_screen: Off_screen_func(); break;
 8003088:	f7ff fec0 	bl	8002e0c <Off_screen_func>
 800308c:	e01a      	b.n	80030c4 <Display_process+0x8c>
		case Option_screen: Option_screen_func(); break;
 800308e:	f015 fca3 	bl	80189d8 <Option_screen_func>
 8003092:	e017      	b.n	80030c4 <Display_process+0x8c>
		case Display_options_screen: Display_options_screen_func(); break;
 8003094:	f013 ffa0 	bl	8016fd8 <Display_options_screen_func>
 8003098:	e014      	b.n	80030c4 <Display_process+0x8c>
		case ADC_options_screen: ADC_options_screen_func(); break;
 800309a:	f013 fc85 	bl	80169a8 <ADC_options_screen_func>
 800309e:	e011      	b.n	80030c4 <Display_process+0x8c>
		case Measure_options_screen: Measure_options_screen_func(); break;
 80030a0:	f014 f9c6 	bl	8017430 <Measure_options_screen_func>
 80030a4:	e00e      	b.n	80030c4 <Display_process+0x8c>
		case Parameter_screen: Parameter_screen_func(); break;
 80030a6:	f015 fbf3 	bl	8018890 <Parameter_screen_func>
 80030aa:	e00b      	b.n	80030c4 <Display_process+0x8c>
		case RTC_screen: RTC_screen_func(); break;
 80030ac:	f014 feb4 	bl	8017e18 <RTC_screen_func>
 80030b0:	e008      	b.n	80030c4 <Display_process+0x8c>
		case Auto_Off_option_screen: Auto_Off_option_screen_func(); break;
 80030b2:	f013 fedf 	bl	8016e74 <Auto_Off_option_screen_func>
 80030b6:	e005      	b.n	80030c4 <Display_process+0x8c>
		case About_options_screen: About_options_screen_func(); break;
 80030b8:	f015 f8c6 	bl	8018248 <About_options_screen_func>
 80030bc:	e002      	b.n	80030c4 <Display_process+0x8c>
		case Logging_options_screen: Logging_options_screen_func(); break;
 80030be:	f015 f951 	bl	8018364 <Logging_options_screen_func>
 80030c2:	bf00      	nop
	}
	sleep(10);
 80030c4:	200a      	movs	r0, #10
 80030c6:	f000 f88d 	bl	80031e4 <sleep>
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000004c 	.word	0x2000004c

080030d4 <wait_scheduler>:
unsigned int delay_count=0;
unsigned char RAM[100];
unsigned int j=0;

void wait_scheduler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
	if(tasks_timer[task_ready_cnt]==0)task=task_ready_cnt+1;
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <wait_scheduler+0x44>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <wait_scheduler+0x48>)
 80030e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <wait_scheduler+0x20>
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <wait_scheduler+0x44>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <wait_scheduler+0x4c>)
 80030f2:	701a      	strb	r2, [r3, #0]
	if(++task_ready_cnt==num_of_tasks)task_ready_cnt=0;
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <wait_scheduler+0x44>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <wait_scheduler+0x44>)
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <wait_scheduler+0x44>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b0a      	cmp	r3, #10
 8003106:	d102      	bne.n	800310e <wait_scheduler+0x3a>
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <wait_scheduler+0x44>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	2000086a 	.word	0x2000086a
 800311c:	20002068 	.word	0x20002068
 8003120:	20000869 	.word	0x20000869

08003124 <ELSPIRE_OS_KERNEL>:

void ELSPIRE_OS_KERNEL(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	new_task[0]=wait_scheduler;
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <ELSPIRE_OS_KERNEL+0x40>)
 800312a:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <ELSPIRE_OS_KERNEL+0x44>)
 800312c:	601a      	str	r2, [r3, #0]
	while (1) for(j=0;j<=num_of_tasks;j++)if(task==j)new_task[j]();
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <ELSPIRE_OS_KERNEL+0x48>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e011      	b.n	800315a <ELSPIRE_OS_KERNEL+0x36>
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <ELSPIRE_OS_KERNEL+0x4c>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <ELSPIRE_OS_KERNEL+0x48>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d105      	bne.n	8003150 <ELSPIRE_OS_KERNEL+0x2c>
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <ELSPIRE_OS_KERNEL+0x48>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a06      	ldr	r2, [pc, #24]	; (8003164 <ELSPIRE_OS_KERNEL+0x40>)
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	4798      	blx	r3
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <ELSPIRE_OS_KERNEL+0x48>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <ELSPIRE_OS_KERNEL+0x48>)
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <ELSPIRE_OS_KERNEL+0x48>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b0a      	cmp	r3, #10
 8003160:	d9e9      	bls.n	8003136 <ELSPIRE_OS_KERNEL+0x12>
 8003162:	e7e4      	b.n	800312e <ELSPIRE_OS_KERNEL+0xa>
 8003164:	20001f44 	.word	0x20001f44
 8003168:	080030d5 	.word	0x080030d5
 800316c:	20000870 	.word	0x20000870
 8003170:	20000869 	.word	0x20000869

08003174 <ELSPIRE_OS_TIMER>:
	for(i=1;i<=num_of_tasks;i++)
	tasks_timer[i]=0xFFFF;
}

void ELSPIRE_OS_TIMER(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<num_of_tasks;i++)
 800317e:	2300      	movs	r3, #0
 8003180:	71fb      	strb	r3, [r7, #7]
 8003182:	e018      	b.n	80031b6 <ELSPIRE_OS_TIMER+0x42>
	{
		if(tasks_timer[i]>0)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <ELSPIRE_OS_TIMER+0x68>)
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <ELSPIRE_OS_TIMER+0x3c>
		{
			if(tasks_timer[i]!=0xFFFF) tasks_timer[i]--;
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <ELSPIRE_OS_TIMER+0x68>)
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <ELSPIRE_OS_TIMER+0x3c>
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <ELSPIRE_OS_TIMER+0x68>)
 80031a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031a8:	3a01      	subs	r2, #1
 80031aa:	490c      	ldr	r1, [pc, #48]	; (80031dc <ELSPIRE_OS_TIMER+0x68>)
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<num_of_tasks;i++)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	3301      	adds	r3, #1
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	d9e3      	bls.n	8003184 <ELSPIRE_OS_TIMER+0x10>
		}
	}
	// Задержка
	if (delay_count > 0)
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <ELSPIRE_OS_TIMER+0x6c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <ELSPIRE_OS_TIMER+0x5a>
	{ delay_count--; }
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <ELSPIRE_OS_TIMER+0x6c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <ELSPIRE_OS_TIMER+0x6c>)
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20002068 	.word	0x20002068
 80031e0:	2000086c 	.word	0x2000086c

080031e4 <sleep>:

void sleep(unsigned int ms)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	tasks_timer[task-1] = ms;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <sleep+0x28>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	4907      	ldr	r1, [pc, #28]	; (8003210 <sleep+0x2c>)
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task = wait;
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <sleep+0x28>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000869 	.word	0x20000869
 8003210:	20002068 	.word	0x20002068

08003214 <Task_STOP>:

void Task_STOP(unsigned char task_num)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=0xFFFF;
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	3b01      	subs	r3, #1
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <Task_STOP+0x2c>)
 8003224:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	task=wait;
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <Task_STOP+0x30>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20002068 	.word	0x20002068
 8003244:	20000869 	.word	0x20000869

08003248 <Task_RUN>:

void Task_RUN(unsigned char task_num, unsigned int del)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=del;
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	3b01      	subs	r3, #1
 8003258:	4906      	ldr	r1, [pc, #24]	; (8003274 <Task_RUN+0x2c>)
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task=wait;
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <Task_RUN+0x30>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20002068 	.word	0x20002068
 8003278:	20000869 	.word	0x20000869

0800327c <delay_ms>:

void delay_ms(unsigned int ms)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	delay_count = ms;
 8003284:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <delay_ms+0x28>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6013      	str	r3, [r2, #0]
	while (delay_count){}
 800328a:	bf00      	nop
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <delay_ms+0x28>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1fb      	bne.n	800328c <delay_ms+0x10>
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	2000086c 	.word	0x2000086c

080032a8 <delay_us>:

void delay_us(unsigned long int us)
{ while (us--); }
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	bf00      	nop
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	1e5a      	subs	r2, r3, #1
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1fa      	bne.n	80032b2 <delay_us+0xa>
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <MAX77960_Read_Reg>:

extern I2C_HandleTypeDef hi2c2;


uint8_t MAX77960_Read_Reg(uint8_t REG)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[1], rx_buf[1];
	tx_buf[0]=REG;
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	733b      	strb	r3, [r7, #12]
	rx_buf[0]=0xFF;
 80032da:	23ff      	movs	r3, #255	; 0xff
 80032dc:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, 0xDE, tx_buf, 1, 10000);
 80032de:	f107 020c 	add.w	r2, r7, #12
 80032e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2301      	movs	r3, #1
 80032ea:	21de      	movs	r1, #222	; 0xde
 80032ec:	4808      	ldr	r0, [pc, #32]	; (8003310 <MAX77960_Read_Reg+0x44>)
 80032ee:	f007 f881 	bl	800a3f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0xDE, (uint8_t *)rx_buf, 1, 10000);
 80032f2:	f107 0208 	add.w	r2, r7, #8
 80032f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2301      	movs	r3, #1
 80032fe:	21de      	movs	r1, #222	; 0xde
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <MAX77960_Read_Reg+0x44>)
 8003302:	f007 f96b 	bl	800a5dc <HAL_I2C_Master_Receive>
	return rx_buf[0];
 8003306:	7a3b      	ldrb	r3, [r7, #8]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200078e0 	.word	0x200078e0

08003314 <clear_buf>:
uint16_t ANSWER=0xFFFF;
uint8_t BSFlag=0;


void clear_buf(void)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i=0;i<APP_RX_DATA_SIZE;i++)rx_buf[i]=0;
 800331a:	2300      	movs	r3, #0
 800331c:	80fb      	strh	r3, [r7, #6]
 800331e:	e006      	b.n	800332e <clear_buf+0x1a>
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <clear_buf+0x3c>)
 8003324:	2100      	movs	r1, #0
 8003326:	54d1      	strb	r1, [r2, r3]
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	3301      	adds	r3, #1
 800332c:	80fb      	strh	r3, [r7, #6]
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003334:	d3f4      	bcc.n	8003320 <clear_buf+0xc>
	rxcntr=0;
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <clear_buf+0x40>)
 8003338:	2200      	movs	r2, #0
 800333a:	801a      	strh	r2, [r3, #0]
	ANSWER=0xFFFF;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <clear_buf+0x44>)
 800333e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003342:	801a      	strh	r2, [r3, #0]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	20005b6c 	.word	0x20005b6c
 8003354:	200008c2 	.word	0x200008c2
 8003358:	20000196 	.word	0x20000196

0800335c <scan_num32>:

int64_t scan_num32(uint8_t offset)
{
 800335c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003360:	b089      	sub	sp, #36	; 0x24
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]
	int64_t res=0;
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t i=0,sign=0;
 8003374:	2300      	movs	r3, #0
 8003376:	75fb      	strb	r3, [r7, #23]
 8003378:	2300      	movs	r3, #0
 800337a:	75bb      	strb	r3, [r7, #22]
	if(rx_buf[offset]=='-')sign=1;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <scan_num32+0xf4>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	2b2d      	cmp	r3, #45	; 0x2d
 8003384:	d101      	bne.n	800338a <scan_num32+0x2e>
 8003386:	2301      	movs	r3, #1
 8003388:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<15;i++){
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
 800338e:	e049      	b.n	8003424 <scan_num32+0xc8>
	if((rx_buf[offset+i+sign]>=48)&&(rx_buf[offset+i+sign]<=58))res=(rx_buf[offset+i+sign]-48)+res*10;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	441a      	add	r2, r3
 8003396:	7dbb      	ldrb	r3, [r7, #22]
 8003398:	4413      	add	r3, r2
 800339a:	4a2d      	ldr	r2, [pc, #180]	; (8003450 <scan_num32+0xf4>)
 800339c:	5cd3      	ldrb	r3, [r2, r3]
 800339e:	2b2f      	cmp	r3, #47	; 0x2f
 80033a0:	d934      	bls.n	800340c <scan_num32+0xb0>
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	441a      	add	r2, r3
 80033a8:	7dbb      	ldrb	r3, [r7, #22]
 80033aa:	4413      	add	r3, r2
 80033ac:	4a28      	ldr	r2, [pc, #160]	; (8003450 <scan_num32+0xf4>)
 80033ae:	5cd3      	ldrb	r3, [r2, r3]
 80033b0:	2b3a      	cmp	r3, #58	; 0x3a
 80033b2:	d82b      	bhi.n	800340c <scan_num32+0xb0>
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	441a      	add	r2, r3
 80033ba:	7dbb      	ldrb	r3, [r7, #22]
 80033bc:	4413      	add	r3, r2
 80033be:	4a24      	ldr	r2, [pc, #144]	; (8003450 <scan_num32+0xf4>)
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
 80033c2:	3b30      	subs	r3, #48	; 0x30
 80033c4:	4698      	mov	r8, r3
 80033c6:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80033ca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80033ce:	4622      	mov	r2, r4
 80033d0:	462b      	mov	r3, r5
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	0099      	lsls	r1, r3, #2
 80033dc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80033e0:	0090      	lsls	r0, r2, #2
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	1912      	adds	r2, r2, r4
 80033e8:	eb45 0303 	adc.w	r3, r5, r3
 80033ec:	1891      	adds	r1, r2, r2
 80033ee:	6039      	str	r1, [r7, #0]
 80033f0:	415b      	adcs	r3, r3
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033f8:	eb18 0a02 	adds.w	sl, r8, r2
 80033fc:	eb49 0b03 	adc.w	fp, r9, r3
 8003400:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(i=0;i<15;i++){
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	3301      	adds	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
 800340a:	e00b      	b.n	8003424 <scan_num32+0xc8>
	else {if(sign==1)return -res; else return res;}}
 800340c:	7dbb      	ldrb	r3, [r7, #22]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <scan_num32+0xc2>
 8003412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003416:	4252      	negs	r2, r2
 8003418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800341c:	e010      	b.n	8003440 <scan_num32+0xe4>
 800341e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003422:	e00d      	b.n	8003440 <scan_num32+0xe4>
	for(i=0;i<15;i++){
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b0e      	cmp	r3, #14
 8003428:	d9b2      	bls.n	8003390 <scan_num32+0x34>
	if(sign==1)return -res;
 800342a:	7dbb      	ldrb	r3, [r7, #22]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <scan_num32+0xe0>
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	4252      	negs	r2, r2
 8003436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800343a:	e001      	b.n	8003440 <scan_num32+0xe4>
	else return res;
 800343c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20005b6c 	.word	0x20005b6c

08003454 <scan_float>:

float scan_float(uint8_t offset)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
//	if(devider==0)devider=1;
//	RES = (float)res32/devider;
//	if(sign==1) return (float)-RES;
//	else return RES;

	return scan_double(offset, (uint8_t*)rx_buf);
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	b29b      	uxth	r3, r3
 8003462:	4909      	ldr	r1, [pc, #36]	; (8003488 <scan_float+0x34>)
 8003464:	4618      	mov	r0, r3
 8003466:	f002 f83f 	bl	80054e8 <scan_double>
 800346a:	ec53 2b10 	vmov	r2, r3, d0
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f7fd fbc9 	bl	8000c08 <__aeabi_d2f>
 8003476:	4603      	mov	r3, r0
 8003478:	ee07 3a90 	vmov	s15, r3
}
 800347c:	eeb0 0a67 	vmov.f32	s0, s15
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20005b6c 	.word	0x20005b6c

0800348c <scan_num16>:

uint16_t scan_num16(uint8_t offset)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0,i=0;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	2300      	movs	r3, #0
 800349c:	73bb      	strb	r3, [r7, #14]
	if((rx_buf[offset]=='A')&&(rx_buf[offset+1]=='L')&&(rx_buf[offset+2]=='L'))return 0xFFFF;
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	4a22      	ldr	r2, [pc, #136]	; (800352c <scan_num16+0xa0>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	2b41      	cmp	r3, #65	; 0x41
 80034a6:	d10e      	bne.n	80034c6 <scan_num16+0x3a>
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <scan_num16+0xa0>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	2b4c      	cmp	r3, #76	; 0x4c
 80034b2:	d108      	bne.n	80034c6 <scan_num16+0x3a>
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	3302      	adds	r3, #2
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <scan_num16+0xa0>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	2b4c      	cmp	r3, #76	; 0x4c
 80034be:	d102      	bne.n	80034c6 <scan_num16+0x3a>
 80034c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c4:	e02b      	b.n	800351e <scan_num16+0x92>
	for(i=0;i<10;i++){
 80034c6:	2300      	movs	r3, #0
 80034c8:	73bb      	strb	r3, [r7, #14]
 80034ca:	e023      	b.n	8003514 <scan_num16+0x88>
	if((rx_buf[offset+i]>=48)&&(rx_buf[offset+i]<=58))res=(rx_buf[offset+i]-48)+res*10;
 80034cc:	79fa      	ldrb	r2, [r7, #7]
 80034ce:	7bbb      	ldrb	r3, [r7, #14]
 80034d0:	4413      	add	r3, r2
 80034d2:	4a16      	ldr	r2, [pc, #88]	; (800352c <scan_num16+0xa0>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	2b2f      	cmp	r3, #47	; 0x2f
 80034d8:	d919      	bls.n	800350e <scan_num16+0x82>
 80034da:	79fa      	ldrb	r2, [r7, #7]
 80034dc:	7bbb      	ldrb	r3, [r7, #14]
 80034de:	4413      	add	r3, r2
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <scan_num16+0xa0>)
 80034e2:	5cd3      	ldrb	r3, [r2, r3]
 80034e4:	2b3a      	cmp	r3, #58	; 0x3a
 80034e6:	d812      	bhi.n	800350e <scan_num16+0x82>
 80034e8:	79fa      	ldrb	r2, [r7, #7]
 80034ea:	7bbb      	ldrb	r3, [r7, #14]
 80034ec:	4413      	add	r3, r2
 80034ee:	4a0f      	ldr	r2, [pc, #60]	; (800352c <scan_num16+0xa0>)
 80034f0:	5cd2      	ldrb	r2, [r2, r3]
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	4619      	mov	r1, r3
 80034f6:	0089      	lsls	r1, r1, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	4413      	add	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	3b30      	subs	r3, #48	; 0x30
 8003504:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<10;i++){
 8003506:	7bbb      	ldrb	r3, [r7, #14]
 8003508:	3301      	adds	r3, #1
 800350a:	73bb      	strb	r3, [r7, #14]
 800350c:	e002      	b.n	8003514 <scan_num16+0x88>
	else return res;}
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	b29b      	uxth	r3, r3
 8003512:	e004      	b.n	800351e <scan_num16+0x92>
	for(i=0;i<10;i++){
 8003514:	7bbb      	ldrb	r3, [r7, #14]
 8003516:	2b09      	cmp	r3, #9
 8003518:	d9d8      	bls.n	80034cc <scan_num16+0x40>
	return res;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	b29b      	uxth	r3, r3
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20005b6c 	.word	0x20005b6c

08003530 <OneCommParseCycle>:

void OneCommParseCycle(uint8_t com, const char* compare, uint8_t offset, uint8_t len)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6039      	str	r1, [r7, #0]
 8003538:	4611      	mov	r1, r2
 800353a:	461a      	mov	r2, r3
 800353c:	4603      	mov	r3, r0
 800353e:	71fb      	strb	r3, [r7, #7]
 8003540:	460b      	mov	r3, r1
 8003542:	71bb      	strb	r3, [r7, #6]
 8003544:	4613      	mov	r3, r2
 8003546:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	if(ANSWER==0xFFFF){
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <OneCommParseCycle+0x70>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003550:	4293      	cmp	r3, r2
 8003552:	d11f      	bne.n	8003594 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e018      	b.n	800358c <OneCommParseCycle+0x5c>
	{
		if(rx_buf[i+offset]==compare[i]) ANSWER = com;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	79bb      	ldrb	r3, [r7, #6]
 800355e:	4413      	add	r3, r2
 8003560:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <OneCommParseCycle+0x74>)
 8003562:	5cd2      	ldrb	r2, [r2, r3]
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	440b      	add	r3, r1
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d104      	bne.n	800357a <OneCommParseCycle+0x4a>
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	b29a      	uxth	r2, r3
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <OneCommParseCycle+0x70>)
 8003576:	801a      	strh	r2, [r3, #0]
 8003578:	e005      	b.n	8003586 <OneCommParseCycle+0x56>
		else {ANSWER=0xFFFF; break;}
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <OneCommParseCycle+0x70>)
 800357c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003580:	801a      	strh	r2, [r3, #0]
 8003582:	bf00      	nop
	}}
}
 8003584:	e006      	b.n	8003594 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	3301      	adds	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	797b      	ldrb	r3, [r7, #5]
 8003590:	429a      	cmp	r2, r3
 8003592:	d3e2      	bcc.n	800355a <OneCommParseCycle+0x2a>
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000196 	.word	0x20000196
 80035a4:	20005b6c 	.word	0x20005b6c

080035a8 <parser>:

uint8_t parser(uint8_t offset)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	ANSWER=0xFFFF;
 80035b2:	4b21      	ldr	r3, [pc, #132]	; (8003638 <parser+0x90>)
 80035b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035b8:	801a      	strh	r2, [r3, #0]
	// Commands
	for(i=2;i<NUMBER_OF_COMMANDS;i++) OneCommParseCycle(i, COMMAND_STRING[i], offset, COMMAND_NUM_OF_SYM[i]);
 80035ba:	2302      	movs	r3, #2
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e00d      	b.n	80035dc <parser+0x34>
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <parser+0x94>)
 80035c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <parser+0x98>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	79fa      	ldrb	r2, [r7, #7]
 80035d0:	7bf8      	ldrb	r0, [r7, #15]
 80035d2:	f7ff ffad 	bl	8003530 <OneCommParseCycle>
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	3301      	adds	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b0d      	cmp	r3, #13
 80035e0:	d9ee      	bls.n	80035c0 <parser+0x18>
	// Variables
	for(i=0;i<NUMBER_OF_VARIABLES;i++) OneCommParseCycle(i, GV_STRING[i], offset, GV_NUM_OF_SYM[i]);
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e00d      	b.n	8003604 <parser+0x5c>
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <parser+0x9c>)
 80035ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <parser+0xa0>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	79fa      	ldrb	r2, [r7, #7]
 80035f8:	7bf8      	ldrb	r0, [r7, #15]
 80035fa:	f7ff ff99 	bl	8003530 <OneCommParseCycle>
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	3301      	adds	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d9ee      	bls.n	80035e8 <parser+0x40>
	// UNKNOWING_CMD
	if((rx_buf[offset]!=0)&&(ANSWER==0xFFFF))ANSWER=0xFFFE;
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <parser+0xa4>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <parser+0x80>
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <parser+0x90>)
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361c:	4293      	cmp	r3, r2
 800361e:	d103      	bne.n	8003628 <parser+0x80>
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <parser+0x90>)
 8003622:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003626:	801a      	strh	r2, [r3, #0]
	return ANSWER;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <parser+0x90>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000196 	.word	0x20000196
 800363c:	2000015c 	.word	0x2000015c
 8003640:	08023c10 	.word	0x08023c10
 8003644:	200000f8 	.word	0x200000f8
 8003648:	08023bc4 	.word	0x08023bc4
 800364c:	20005b6c 	.word	0x20005b6c

08003650 <Set_uint8>:


void Set_uint8(uint8_t*arr, uint8_t offset)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff14 	bl	800348c <scan_num16>
 8003664:	4603      	mov	r3, r0
 8003666:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003668:	2300      	movs	r3, #0
 800366a:	82fb      	strh	r3, [r7, #22]
 800366c:	e019      	b.n	80036a2 <Set_uint8+0x52>
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	8afb      	ldrh	r3, [r7, #22]
 8003672:	4413      	add	r3, r2
 8003674:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <Set_uint8+0x98>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	2b20      	cmp	r3, #32
 800367a:	d006      	beq.n	800368a <Set_uint8+0x3a>
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	8afb      	ldrh	r3, [r7, #22]
 8003680:	4413      	add	r3, r2
 8003682:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <Set_uint8+0x98>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	2b3d      	cmp	r3, #61	; 0x3d
 8003688:	d108      	bne.n	800369c <Set_uint8+0x4c>
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	b29a      	uxth	r2, r3
 800368e:	8afb      	ldrh	r3, [r7, #22]
 8003690:	4413      	add	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	3301      	adds	r3, #1
 8003696:	82bb      	strh	r3, [r7, #20]
 8003698:	2364      	movs	r3, #100	; 0x64
 800369a:	82fb      	strh	r3, [r7, #22]
 800369c:	8afb      	ldrh	r3, [r7, #22]
 800369e:	3301      	adds	r3, #1
 80036a0:	82fb      	strh	r3, [r7, #22]
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	2b63      	cmp	r3, #99	; 0x63
 80036a6:	d9e2      	bls.n	800366e <Set_uint8+0x1e>
	data=scan_num32(equal);
 80036a8:	8abb      	ldrh	r3, [r7, #20]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fe55 	bl	800335c <scan_num32>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4613      	mov	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
	if(data>255)CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2bff      	cmp	r3, #255	; 0xff
 80036be:	d904      	bls.n	80036ca <Set_uint8+0x7a>
 80036c0:	2117      	movs	r1, #23
 80036c2:	480a      	ldr	r0, [pc, #40]	; (80036ec <Set_uint8+0x9c>)
 80036c4:	f015 feee 	bl	80194a4 <CDC_Transmit_FS>
	else
	{
		arr[index]=data;
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}
 80036c8:	e009      	b.n	80036de <Set_uint8+0x8e>
		arr[index]=data;
 80036ca:	8a7b      	ldrh	r3, [r7, #18]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80036d6:	2104      	movs	r1, #4
 80036d8:	4805      	ldr	r0, [pc, #20]	; (80036f0 <Set_uint8+0xa0>)
 80036da:	f015 fee3 	bl	80194a4 <CDC_Transmit_FS>
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20005b6c 	.word	0x20005b6c
 80036ec:	08021d5c 	.word	0x08021d5c
 80036f0:	08021d74 	.word	0x08021d74

080036f4 <Set_int8>:
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}

void Set_int8(int8_t*arr, uint8_t offset)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fec2 	bl	800348c <scan_num16>
 8003708:	4603      	mov	r3, r0
 800370a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800370c:	2300      	movs	r3, #0
 800370e:	82fb      	strh	r3, [r7, #22]
 8003710:	e019      	b.n	8003746 <Set_int8+0x52>
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	8afb      	ldrh	r3, [r7, #22]
 8003716:	4413      	add	r3, r2
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <Set_int8+0xa0>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d006      	beq.n	800372e <Set_int8+0x3a>
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	4413      	add	r3, r2
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <Set_int8+0xa0>)
 8003728:	5cd3      	ldrb	r3, [r2, r3]
 800372a:	2b3d      	cmp	r3, #61	; 0x3d
 800372c:	d108      	bne.n	8003740 <Set_int8+0x4c>
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	b29a      	uxth	r2, r3
 8003732:	8afb      	ldrh	r3, [r7, #22]
 8003734:	4413      	add	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	3301      	adds	r3, #1
 800373a:	82bb      	strh	r3, [r7, #20]
 800373c:	2364      	movs	r3, #100	; 0x64
 800373e:	82fb      	strh	r3, [r7, #22]
 8003740:	8afb      	ldrh	r3, [r7, #22]
 8003742:	3301      	adds	r3, #1
 8003744:	82fb      	strh	r3, [r7, #22]
 8003746:	8afb      	ldrh	r3, [r7, #22]
 8003748:	2b63      	cmp	r3, #99	; 0x63
 800374a:	d9e2      	bls.n	8003712 <Set_int8+0x1e>
	data=scan_num32(equal);
 800374c:	8abb      	ldrh	r3, [r7, #20]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fe03 	bl	800335c <scan_num32>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4613      	mov	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
	if((data>127)||(data<-127))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b7f      	cmp	r3, #127	; 0x7f
 8003762:	d803      	bhi.n	800376c <Set_int8+0x78>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800376a:	d804      	bhi.n	8003776 <Set_int8+0x82>
 800376c:	2117      	movs	r1, #23
 800376e:	480a      	ldr	r0, [pc, #40]	; (8003798 <Set_int8+0xa4>)
 8003770:	f015 fe98 	bl	80194a4 <CDC_Transmit_FS>
 8003774:	e00a      	b.n	800378c <Set_int8+0x98>
	else
	{
		arr[index]=data;
 8003776:	8a7b      	ldrh	r3, [r7, #18]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	b252      	sxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003782:	2104      	movs	r1, #4
 8003784:	4805      	ldr	r0, [pc, #20]	; (800379c <Set_int8+0xa8>)
 8003786:	f015 fe8d 	bl	80194a4 <CDC_Transmit_FS>
	}
}
 800378a:	bf00      	nop
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20005b6c 	.word	0x20005b6c
 8003798:	08021d5c 	.word	0x08021d5c
 800379c:	08021d74 	.word	0x08021d74

080037a0 <Set_int16>:

void Set_int16(int16_t*arr, uint8_t offset)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fe6c 	bl	800348c <scan_num16>
 80037b4:	4603      	mov	r3, r0
 80037b6:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80037b8:	2300      	movs	r3, #0
 80037ba:	82fb      	strh	r3, [r7, #22]
 80037bc:	e019      	b.n	80037f2 <Set_int16+0x52>
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	8afb      	ldrh	r3, [r7, #22]
 80037c2:	4413      	add	r3, r2
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <Set_int16+0xa4>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d006      	beq.n	80037da <Set_int16+0x3a>
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	8afb      	ldrh	r3, [r7, #22]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <Set_int16+0xa4>)
 80037d4:	5cd3      	ldrb	r3, [r2, r3]
 80037d6:	2b3d      	cmp	r3, #61	; 0x3d
 80037d8:	d108      	bne.n	80037ec <Set_int16+0x4c>
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	b29a      	uxth	r2, r3
 80037de:	8afb      	ldrh	r3, [r7, #22]
 80037e0:	4413      	add	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	82bb      	strh	r3, [r7, #20]
 80037e8:	2364      	movs	r3, #100	; 0x64
 80037ea:	82fb      	strh	r3, [r7, #22]
 80037ec:	8afb      	ldrh	r3, [r7, #22]
 80037ee:	3301      	adds	r3, #1
 80037f0:	82fb      	strh	r3, [r7, #22]
 80037f2:	8afb      	ldrh	r3, [r7, #22]
 80037f4:	2b63      	cmp	r3, #99	; 0x63
 80037f6:	d9e2      	bls.n	80037be <Set_int16+0x1e>
	data=scan_num32(equal);
 80037f8:	8abb      	ldrh	r3, [r7, #20]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fdad 	bl	800335c <scan_num32>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4613      	mov	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
	if((data>32767)||(data<-32767))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d203      	bcs.n	800381a <Set_int16+0x7a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003818:	d804      	bhi.n	8003824 <Set_int16+0x84>
 800381a:	2117      	movs	r1, #23
 800381c:	480a      	ldr	r0, [pc, #40]	; (8003848 <Set_int16+0xa8>)
 800381e:	f015 fe41 	bl	80194a4 <CDC_Transmit_FS>
 8003822:	e00b      	b.n	800383c <Set_int16+0x9c>
	else
	{
		arr[index]=data;
 8003824:	8a7b      	ldrh	r3, [r7, #18]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	b212      	sxth	r2, r2
 8003830:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003832:	2104      	movs	r1, #4
 8003834:	4805      	ldr	r0, [pc, #20]	; (800384c <Set_int16+0xac>)
 8003836:	f015 fe35 	bl	80194a4 <CDC_Transmit_FS>
	}
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20005b6c 	.word	0x20005b6c
 8003848:	08021d5c 	.word	0x08021d5c
 800384c:	08021d74 	.word	0x08021d74

08003850 <Set_int32>:

void Set_int32(int32_t*arr, uint8_t offset)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int64_t data;
	index=scan_num16(offset);
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fe14 	bl	800348c <scan_num16>
 8003864:	4603      	mov	r3, r0
 8003866:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003868:	2300      	movs	r3, #0
 800386a:	82fb      	strh	r3, [r7, #22]
 800386c:	e019      	b.n	80038a2 <Set_int32+0x52>
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	8afb      	ldrh	r3, [r7, #22]
 8003872:	4413      	add	r3, r2
 8003874:	4a24      	ldr	r2, [pc, #144]	; (8003908 <Set_int32+0xb8>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	2b20      	cmp	r3, #32
 800387a:	d006      	beq.n	800388a <Set_int32+0x3a>
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	4413      	add	r3, r2
 8003882:	4a21      	ldr	r2, [pc, #132]	; (8003908 <Set_int32+0xb8>)
 8003884:	5cd3      	ldrb	r3, [r2, r3]
 8003886:	2b3d      	cmp	r3, #61	; 0x3d
 8003888:	d108      	bne.n	800389c <Set_int32+0x4c>
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	b29a      	uxth	r2, r3
 800388e:	8afb      	ldrh	r3, [r7, #22]
 8003890:	4413      	add	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	3301      	adds	r3, #1
 8003896:	82bb      	strh	r3, [r7, #20]
 8003898:	2364      	movs	r3, #100	; 0x64
 800389a:	82fb      	strh	r3, [r7, #22]
 800389c:	8afb      	ldrh	r3, [r7, #22]
 800389e:	3301      	adds	r3, #1
 80038a0:	82fb      	strh	r3, [r7, #22]
 80038a2:	8afb      	ldrh	r3, [r7, #22]
 80038a4:	2b63      	cmp	r3, #99	; 0x63
 80038a6:	d9e2      	bls.n	800386e <Set_int32+0x1e>
	data=scan_num32(equal);
 80038a8:	8abb      	ldrh	r3, [r7, #20]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fd55 	bl	800335c <scan_num32>
 80038b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if((data>2147483647)||(data<-2147483647))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80038b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	4290      	cmp	r0, r2
 80038c4:	eb71 0303 	sbcs.w	r3, r1, r3
 80038c8:	db09      	blt.n	80038de <Set_int32+0x8e>
 80038ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80038d2:	f04f 31ff 	mov.w	r1, #4294967295
 80038d6:	4290      	cmp	r0, r2
 80038d8:	eb71 0303 	sbcs.w	r3, r1, r3
 80038dc:	db04      	blt.n	80038e8 <Set_int32+0x98>
 80038de:	2117      	movs	r1, #23
 80038e0:	480a      	ldr	r0, [pc, #40]	; (800390c <Set_int32+0xbc>)
 80038e2:	f015 fddf 	bl	80194a4 <CDC_Transmit_FS>
 80038e6:	e00a      	b.n	80038fe <Set_int32+0xae>
	else
	{
		arr[index]=(int32_t)data;
 80038e8:	8a7b      	ldrh	r3, [r7, #18]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80038f4:	2104      	movs	r1, #4
 80038f6:	4806      	ldr	r0, [pc, #24]	; (8003910 <Set_int32+0xc0>)
 80038f8:	f015 fdd4 	bl	80194a4 <CDC_Transmit_FS>
	}

//	arr[index]=data;
//	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20005b6c 	.word	0x20005b6c
 800390c:	08021d5c 	.word	0x08021d5c
 8003910:	08021d74 	.word	0x08021d74

08003914 <Set_uint32>:

void Set_uint32(uint32_t*arr, uint8_t offset)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int32_t data;
	index=scan_num16(offset);
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fdb2 	bl	800348c <scan_num16>
 8003928:	4603      	mov	r3, r0
 800392a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800392c:	2300      	movs	r3, #0
 800392e:	82fb      	strh	r3, [r7, #22]
 8003930:	e019      	b.n	8003966 <Set_uint32+0x52>
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	8afb      	ldrh	r3, [r7, #22]
 8003936:	4413      	add	r3, r2
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <Set_uint32+0x88>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	2b20      	cmp	r3, #32
 800393e:	d006      	beq.n	800394e <Set_uint32+0x3a>
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	8afb      	ldrh	r3, [r7, #22]
 8003944:	4413      	add	r3, r2
 8003946:	4a15      	ldr	r2, [pc, #84]	; (800399c <Set_uint32+0x88>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	2b3d      	cmp	r3, #61	; 0x3d
 800394c:	d108      	bne.n	8003960 <Set_uint32+0x4c>
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	b29a      	uxth	r2, r3
 8003952:	8afb      	ldrh	r3, [r7, #22]
 8003954:	4413      	add	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	3301      	adds	r3, #1
 800395a:	82bb      	strh	r3, [r7, #20]
 800395c:	2364      	movs	r3, #100	; 0x64
 800395e:	82fb      	strh	r3, [r7, #22]
 8003960:	8afb      	ldrh	r3, [r7, #22]
 8003962:	3301      	adds	r3, #1
 8003964:	82fb      	strh	r3, [r7, #22]
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	2b63      	cmp	r3, #99	; 0x63
 800396a:	d9e2      	bls.n	8003932 <Set_uint32+0x1e>
	data=scan_num32(equal);
 800396c:	8abb      	ldrh	r3, [r7, #20]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fcf3 	bl	800335c <scan_num32>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4613      	mov	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
	arr[index]=data;
 800397e:	8a7b      	ldrh	r3, [r7, #18]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800398a:	2104      	movs	r1, #4
 800398c:	4804      	ldr	r0, [pc, #16]	; (80039a0 <Set_uint32+0x8c>)
 800398e:	f015 fd89 	bl	80194a4 <CDC_Transmit_FS>
}
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20005b6c 	.word	0x20005b6c
 80039a0:	08021d74 	.word	0x08021d74

080039a4 <Set_float>:

void Set_float(float*arr, uint8_t offset)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	float data;
	index=scan_num16(offset);
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fd6a 	bl	800348c <scan_num16>
 80039b8:	4603      	mov	r3, r0
 80039ba:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80039bc:	2300      	movs	r3, #0
 80039be:	82fb      	strh	r3, [r7, #22]
 80039c0:	e019      	b.n	80039f6 <Set_float+0x52>
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	8afb      	ldrh	r3, [r7, #22]
 80039c6:	4413      	add	r3, r2
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <Set_float+0x94>)
 80039ca:	5cd3      	ldrb	r3, [r2, r3]
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d006      	beq.n	80039de <Set_float+0x3a>
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	8afb      	ldrh	r3, [r7, #22]
 80039d4:	4413      	add	r3, r2
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <Set_float+0x94>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	2b3d      	cmp	r3, #61	; 0x3d
 80039dc:	d108      	bne.n	80039f0 <Set_float+0x4c>
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	8afb      	ldrh	r3, [r7, #22]
 80039e4:	4413      	add	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	82bb      	strh	r3, [r7, #20]
 80039ec:	2364      	movs	r3, #100	; 0x64
 80039ee:	82fb      	strh	r3, [r7, #22]
 80039f0:	8afb      	ldrh	r3, [r7, #22]
 80039f2:	3301      	adds	r3, #1
 80039f4:	82fb      	strh	r3, [r7, #22]
 80039f6:	8afb      	ldrh	r3, [r7, #22]
 80039f8:	2b63      	cmp	r3, #99	; 0x63
 80039fa:	d9e2      	bls.n	80039c2 <Set_float+0x1e>
	data=scan_float(equal);
 80039fc:	8abb      	ldrh	r3, [r7, #20]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fd27 	bl	8003454 <scan_float>
 8003a06:	ed87 0a03 	vstr	s0, [r7, #12]
	if(!BSFlag){
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <Set_float+0x98>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <Set_float+0x84>
	arr[index]=data;
 8003a12:	8a7b      	ldrh	r3, [r7, #18]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);}
 8003a1e:	2104      	movs	r1, #4
 8003a20:	4807      	ldr	r0, [pc, #28]	; (8003a40 <Set_float+0x9c>)
 8003a22:	f015 fd3f 	bl	80194a4 <CDC_Transmit_FS>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
}
 8003a26:	e003      	b.n	8003a30 <Set_float+0x8c>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003a28:	2117      	movs	r1, #23
 8003a2a:	4806      	ldr	r0, [pc, #24]	; (8003a44 <Set_float+0xa0>)
 8003a2c:	f015 fd3a 	bl	80194a4 <CDC_Transmit_FS>
}
 8003a30:	bf00      	nop
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20005b6c 	.word	0x20005b6c
 8003a3c:	200008c4 	.word	0x200008c4
 8003a40:	08021d74 	.word	0x08021d74
 8003a44:	08021d5c 	.word	0x08021d5c

08003a48 <Get_uint8>:




void Get_uint8(uint8_t*arr, uint8_t offset, uint16_t size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
 8003a54:	4613      	mov	r3, r2
 8003a56:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fd14 	bl	800348c <scan_num16>
 8003a64:	4603      	mov	r3, r0
 8003a66:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003a68:	89bb      	ldrh	r3, [r7, #12]
 8003a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d132      	bne.n	8003ad8 <Get_uint8+0x90>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003a72:	210e      	movs	r1, #14
 8003a74:	482a      	ldr	r0, [pc, #168]	; (8003b20 <Get_uint8+0xd8>)
 8003a76:	f015 fd15 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	81fb      	strh	r3, [r7, #14]
 8003a7e:	e022      	b.n	8003ac6 <Get_uint8+0x7e>
		{
			if(!CSV_format)sprintf(RAM, "%d\t", arr[i]);
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <Get_uint8+0xdc>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <Get_uint8+0x54>
 8003a88:	89fb      	ldrh	r3, [r7, #14]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	4925      	ldr	r1, [pc, #148]	; (8003b28 <Get_uint8+0xe0>)
 8003a94:	4825      	ldr	r0, [pc, #148]	; (8003b2c <Get_uint8+0xe4>)
 8003a96:	f01a f97b 	bl	801dd90 <siprintf>
 8003a9a:	e008      	b.n	8003aae <Get_uint8+0x66>
			else sprintf(RAM, "%d;", arr[i]);
 8003a9c:	89fb      	ldrh	r3, [r7, #14]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4922      	ldr	r1, [pc, #136]	; (8003b30 <Get_uint8+0xe8>)
 8003aa8:	4820      	ldr	r0, [pc, #128]	; (8003b2c <Get_uint8+0xe4>)
 8003aaa:	f01a f971 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003aae:	481f      	ldr	r0, [pc, #124]	; (8003b2c <Get_uint8+0xe4>)
 8003ab0:	f7fc fb9e 	bl	80001f0 <strlen>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	4619      	mov	r1, r3
 8003aba:	481c      	ldr	r0, [pc, #112]	; (8003b2c <Get_uint8+0xe4>)
 8003abc:	f015 fcf2 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003ac0:	89fb      	ldrh	r3, [r7, #14]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	81fb      	strh	r3, [r7, #14]
 8003ac6:	89fa      	ldrh	r2, [r7, #14]
 8003ac8:	883b      	ldrh	r3, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d3d8      	bcc.n	8003a80 <Get_uint8+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4818      	ldr	r0, [pc, #96]	; (8003b34 <Get_uint8+0xec>)
 8003ad2:	f015 fce7 	bl	80194a4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%d\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003ad6:	e01e      	b.n	8003b16 <Get_uint8+0xce>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003ad8:	883a      	ldrh	r2, [r7, #0]
 8003ada:	89bb      	ldrh	r3, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d808      	bhi.n	8003af2 <Get_uint8+0xaa>
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <Get_uint8+0xf0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2209      	movs	r2, #9
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f015 fcda 	bl	80194a4 <CDC_Transmit_FS>
}
 8003af0:	e011      	b.n	8003b16 <Get_uint8+0xce>
			sprintf(RAM, "%d\r\n", arr[index]);
 8003af2:	89bb      	ldrh	r3, [r7, #12]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	490f      	ldr	r1, [pc, #60]	; (8003b3c <Get_uint8+0xf4>)
 8003afe:	480b      	ldr	r0, [pc, #44]	; (8003b2c <Get_uint8+0xe4>)
 8003b00:	f01a f946 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003b04:	4809      	ldr	r0, [pc, #36]	; (8003b2c <Get_uint8+0xe4>)
 8003b06:	f7fc fb73 	bl	80001f0 <strlen>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4806      	ldr	r0, [pc, #24]	; (8003b2c <Get_uint8+0xe4>)
 8003b12:	f015 fcc7 	bl	80194a4 <CDC_Transmit_FS>
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	08021d7c 	.word	0x08021d7c
 8003b24:	200008bf 	.word	0x200008bf
 8003b28:	08021d8c 	.word	0x08021d8c
 8003b2c:	20002090 	.word	0x20002090
 8003b30:	08021d90 	.word	0x08021d90
 8003b34:	08021cf8 	.word	0x08021cf8
 8003b38:	2000015c 	.word	0x2000015c
 8003b3c:	08021d94 	.word	0x08021d94

08003b40 <Get_int32>:


void Get_int32(int32_t*arr, uint8_t offset, uint16_t size)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003b50:	2300      	movs	r3, #0
 8003b52:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fc98 	bl	800348c <scan_num16>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003b60:	89bb      	ldrh	r3, [r7, #12]
 8003b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d134      	bne.n	8003bd4 <Get_int32+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003b6a:	210e      	movs	r1, #14
 8003b6c:	482b      	ldr	r0, [pc, #172]	; (8003c1c <Get_int32+0xdc>)
 8003b6e:	f015 fc99 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	81fb      	strh	r3, [r7, #14]
 8003b76:	e024      	b.n	8003bc2 <Get_int32+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%i\t", arr[i]);
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <Get_int32+0xe0>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <Get_int32+0x56>
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4925      	ldr	r1, [pc, #148]	; (8003c24 <Get_int32+0xe4>)
 8003b8e:	4826      	ldr	r0, [pc, #152]	; (8003c28 <Get_int32+0xe8>)
 8003b90:	f01a f8fe 	bl	801dd90 <siprintf>
 8003b94:	e009      	b.n	8003baa <Get_int32+0x6a>
			else sprintf(RAM, "%i;", arr[i]);
 8003b96:	89fb      	ldrh	r3, [r7, #14]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4922      	ldr	r1, [pc, #136]	; (8003c2c <Get_int32+0xec>)
 8003ba4:	4820      	ldr	r0, [pc, #128]	; (8003c28 <Get_int32+0xe8>)
 8003ba6:	f01a f8f3 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003baa:	481f      	ldr	r0, [pc, #124]	; (8003c28 <Get_int32+0xe8>)
 8003bac:	f7fc fb20 	bl	80001f0 <strlen>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	481c      	ldr	r0, [pc, #112]	; (8003c28 <Get_int32+0xe8>)
 8003bb8:	f015 fc74 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003bbc:	89fb      	ldrh	r3, [r7, #14]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	81fb      	strh	r3, [r7, #14]
 8003bc2:	89fa      	ldrh	r2, [r7, #14]
 8003bc4:	883b      	ldrh	r3, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3d6      	bcc.n	8003b78 <Get_int32+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4818      	ldr	r0, [pc, #96]	; (8003c30 <Get_int32+0xf0>)
 8003bce:	f015 fc69 	bl	80194a4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%i\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003bd2:	e01f      	b.n	8003c14 <Get_int32+0xd4>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003bd4:	883a      	ldrh	r2, [r7, #0]
 8003bd6:	89bb      	ldrh	r3, [r7, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d808      	bhi.n	8003bee <Get_int32+0xae>
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <Get_int32+0xf4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2209      	movs	r2, #9
 8003be2:	b292      	uxth	r2, r2
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f015 fc5c 	bl	80194a4 <CDC_Transmit_FS>
}
 8003bec:	e012      	b.n	8003c14 <Get_int32+0xd4>
			sprintf(RAM, "%i\r\n", arr[index]);
 8003bee:	89bb      	ldrh	r3, [r7, #12]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	490f      	ldr	r1, [pc, #60]	; (8003c38 <Get_int32+0xf8>)
 8003bfc:	480a      	ldr	r0, [pc, #40]	; (8003c28 <Get_int32+0xe8>)
 8003bfe:	f01a f8c7 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003c02:	4809      	ldr	r0, [pc, #36]	; (8003c28 <Get_int32+0xe8>)
 8003c04:	f7fc faf4 	bl	80001f0 <strlen>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4806      	ldr	r0, [pc, #24]	; (8003c28 <Get_int32+0xe8>)
 8003c10:	f015 fc48 	bl	80194a4 <CDC_Transmit_FS>
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	08021d7c 	.word	0x08021d7c
 8003c20:	200008bf 	.word	0x200008bf
 8003c24:	08021d9c 	.word	0x08021d9c
 8003c28:	20002090 	.word	0x20002090
 8003c2c:	08021da0 	.word	0x08021da0
 8003c30:	08021cf8 	.word	0x08021cf8
 8003c34:	2000015c 	.word	0x2000015c
 8003c38:	08021da4 	.word	0x08021da4

08003c3c <Get_float>:

void Get_float(float*arr, uint8_t offset, uint16_t size)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fc1a 	bl	800348c <scan_num16>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003c5c:	89bb      	ldrh	r3, [r7, #12]
 8003c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d13c      	bne.n	8003ce0 <Get_float+0xa4>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003c66:	210e      	movs	r1, #14
 8003c68:	4831      	ldr	r0, [pc, #196]	; (8003d30 <Get_float+0xf4>)
 8003c6a:	f015 fc1b 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	81fb      	strh	r3, [r7, #14]
 8003c72:	e02c      	b.n	8003cce <Get_float+0x92>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003c74:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <Get_float+0xf8>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10e      	bne.n	8003c9a <Get_float+0x5e>
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc6e 	bl	8000568 <__aeabi_f2d>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4929      	ldr	r1, [pc, #164]	; (8003d38 <Get_float+0xfc>)
 8003c92:	482a      	ldr	r0, [pc, #168]	; (8003d3c <Get_float+0x100>)
 8003c94:	f01a f87c 	bl	801dd90 <siprintf>
 8003c98:	e00d      	b.n	8003cb6 <Get_float+0x7a>
			else sprintf(RAM, "%f;", arr[i]);
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc fc5f 	bl	8000568 <__aeabi_f2d>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4924      	ldr	r1, [pc, #144]	; (8003d40 <Get_float+0x104>)
 8003cb0:	4822      	ldr	r0, [pc, #136]	; (8003d3c <Get_float+0x100>)
 8003cb2:	f01a f86d 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003cb6:	4821      	ldr	r0, [pc, #132]	; (8003d3c <Get_float+0x100>)
 8003cb8:	f7fc fa9a 	bl	80001f0 <strlen>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	481e      	ldr	r0, [pc, #120]	; (8003d3c <Get_float+0x100>)
 8003cc4:	f015 fbee 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003cc8:	89fb      	ldrh	r3, [r7, #14]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	81fb      	strh	r3, [r7, #14]
 8003cce:	89fa      	ldrh	r2, [r7, #14]
 8003cd0:	883b      	ldrh	r3, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d3ce      	bcc.n	8003c74 <Get_float+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	481a      	ldr	r0, [pc, #104]	; (8003d44 <Get_float+0x108>)
 8003cda:	f015 fbe3 	bl	80194a4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003cde:	e023      	b.n	8003d28 <Get_float+0xec>
		if(index>size-1)
 8003ce0:	883a      	ldrh	r2, [r7, #0]
 8003ce2:	89bb      	ldrh	r3, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d808      	bhi.n	8003cfa <Get_float+0xbe>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003ce8:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <Get_float+0x10c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2209      	movs	r2, #9
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f015 fbd6 	bl	80194a4 <CDC_Transmit_FS>
}
 8003cf8:	e016      	b.n	8003d28 <Get_float+0xec>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003cfa:	89bb      	ldrh	r3, [r7, #12]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fc2f 	bl	8000568 <__aeabi_f2d>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	490f      	ldr	r1, [pc, #60]	; (8003d4c <Get_float+0x110>)
 8003d10:	480a      	ldr	r0, [pc, #40]	; (8003d3c <Get_float+0x100>)
 8003d12:	f01a f83d 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003d16:	4809      	ldr	r0, [pc, #36]	; (8003d3c <Get_float+0x100>)
 8003d18:	f7fc fa6a 	bl	80001f0 <strlen>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4619      	mov	r1, r3
 8003d22:	4806      	ldr	r0, [pc, #24]	; (8003d3c <Get_float+0x100>)
 8003d24:	f015 fbbe 	bl	80194a4 <CDC_Transmit_FS>
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	08021d7c 	.word	0x08021d7c
 8003d34:	200008bf 	.word	0x200008bf
 8003d38:	08021dac 	.word	0x08021dac
 8003d3c:	20002090 	.word	0x20002090
 8003d40:	08021db0 	.word	0x08021db0
 8003d44:	08021cf8 	.word	0x08021cf8
 8003d48:	2000015c 	.word	0x2000015c
 8003d4c:	08021db4 	.word	0x08021db4

08003d50 <Get_double>:


void Get_double(double*arr, uint8_t offset, uint16_t size)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003d60:	2300      	movs	r3, #0
 8003d62:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fb90 	bl	800348c <scan_num16>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003d70:	89bb      	ldrh	r3, [r7, #12]
 8003d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d134      	bne.n	8003de4 <Get_double+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003d7a:	210e      	movs	r1, #14
 8003d7c:	482b      	ldr	r0, [pc, #172]	; (8003e2c <Get_double+0xdc>)
 8003d7e:	f015 fb91 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	81fb      	strh	r3, [r7, #14]
 8003d86:	e024      	b.n	8003dd2 <Get_double+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <Get_double+0xe0>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <Get_double+0x56>
 8003d90:	89fb      	ldrh	r3, [r7, #14]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	4925      	ldr	r1, [pc, #148]	; (8003e34 <Get_double+0xe4>)
 8003d9e:	4826      	ldr	r0, [pc, #152]	; (8003e38 <Get_double+0xe8>)
 8003da0:	f019 fff6 	bl	801dd90 <siprintf>
 8003da4:	e009      	b.n	8003dba <Get_double+0x6a>
			else sprintf(RAM, "%f;", (double)arr[i]);
 8003da6:	89fb      	ldrh	r3, [r7, #14]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	4922      	ldr	r1, [pc, #136]	; (8003e3c <Get_double+0xec>)
 8003db4:	4820      	ldr	r0, [pc, #128]	; (8003e38 <Get_double+0xe8>)
 8003db6:	f019 ffeb 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003dba:	481f      	ldr	r0, [pc, #124]	; (8003e38 <Get_double+0xe8>)
 8003dbc:	f7fc fa18 	bl	80001f0 <strlen>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	481c      	ldr	r0, [pc, #112]	; (8003e38 <Get_double+0xe8>)
 8003dc8:	f015 fb6c 	bl	80194a4 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003dcc:	89fb      	ldrh	r3, [r7, #14]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	81fb      	strh	r3, [r7, #14]
 8003dd2:	89fa      	ldrh	r2, [r7, #14]
 8003dd4:	883b      	ldrh	r3, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3d6      	bcc.n	8003d88 <Get_double+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003dda:	2102      	movs	r1, #2
 8003ddc:	4818      	ldr	r0, [pc, #96]	; (8003e40 <Get_double+0xf0>)
 8003dde:	f015 fb61 	bl	80194a4 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003de2:	e01f      	b.n	8003e24 <Get_double+0xd4>
		if(index>size-1)
 8003de4:	883a      	ldrh	r2, [r7, #0]
 8003de6:	89bb      	ldrh	r3, [r7, #12]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d808      	bhi.n	8003dfe <Get_double+0xae>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <Get_double+0xf4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2209      	movs	r2, #9
 8003df2:	b292      	uxth	r2, r2
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f015 fb54 	bl	80194a4 <CDC_Transmit_FS>
}
 8003dfc:	e012      	b.n	8003e24 <Get_double+0xd4>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003dfe:	89bb      	ldrh	r3, [r7, #12]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	490f      	ldr	r1, [pc, #60]	; (8003e48 <Get_double+0xf8>)
 8003e0c:	480a      	ldr	r0, [pc, #40]	; (8003e38 <Get_double+0xe8>)
 8003e0e:	f019 ffbf 	bl	801dd90 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003e12:	4809      	ldr	r0, [pc, #36]	; (8003e38 <Get_double+0xe8>)
 8003e14:	f7fc f9ec 	bl	80001f0 <strlen>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4806      	ldr	r0, [pc, #24]	; (8003e38 <Get_double+0xe8>)
 8003e20:	f015 fb40 	bl	80194a4 <CDC_Transmit_FS>
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	08021d7c 	.word	0x08021d7c
 8003e30:	200008bf 	.word	0x200008bf
 8003e34:	08021dac 	.word	0x08021dac
 8003e38:	20002090 	.word	0x20002090
 8003e3c:	08021db0 	.word	0x08021db0
 8003e40:	08021cf8 	.word	0x08021cf8
 8003e44:	2000015c 	.word	0x2000015c
 8003e48:	08021db4 	.word	0x08021db4

08003e4c <Parser_process>:




void Parser_process(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
	uint16_t RES=0,i;
 8003e52:	2300      	movs	r3, #0
 8003e54:	80bb      	strh	r3, [r7, #4]

	if(BLE_bridge!=0)
 8003e56:	4bb6      	ldr	r3, [pc, #728]	; (8004130 <Parser_process+0x2e4>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d015      	beq.n	8003e8a <Parser_process+0x3e>
	{
		if(usart1_counter!=0)
 8003e5e:	4bb5      	ldr	r3, [pc, #724]	; (8004134 <Parser_process+0x2e8>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <Parser_process+0x3e>
		{
			if(rx_cmplt==0)
 8003e66:	4bb4      	ldr	r3, [pc, #720]	; (8004138 <Parser_process+0x2ec>)
 8003e68:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10c      	bne.n	8003e8a <Parser_process+0x3e>
			{
				CDC_Transmit_FS((unsigned char*)usart1_data, usart1_counter);
 8003e70:	4bb0      	ldr	r3, [pc, #704]	; (8004134 <Parser_process+0x2e8>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	48b0      	ldr	r0, [pc, #704]	; (800413c <Parser_process+0x2f0>)
 8003e7a:	f015 fb13 	bl	80194a4 <CDC_Transmit_FS>
				usart1_counter=0;
 8003e7e:	4bad      	ldr	r3, [pc, #692]	; (8004134 <Parser_process+0x2e8>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
				rx_cmplt=-1;
 8003e84:	4bac      	ldr	r3, [pc, #688]	; (8004138 <Parser_process+0x2ec>)
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(USBTimeOutRX>0)USBTimeOutRX--;
 8003e8a:	4bad      	ldr	r3, [pc, #692]	; (8004140 <Parser_process+0x2f4>)
 8003e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dd08      	ble.n	8003ea6 <Parser_process+0x5a>
 8003e94:	4baa      	ldr	r3, [pc, #680]	; (8004140 <Parser_process+0x2f4>)
 8003e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	b21a      	sxth	r2, r3
 8003ea2:	4ba7      	ldr	r3, [pc, #668]	; (8004140 <Parser_process+0x2f4>)
 8003ea4:	801a      	strh	r2, [r3, #0]
	if(USBTimeOutRX==0)
 8003ea6:	4ba6      	ldr	r3, [pc, #664]	; (8004140 <Parser_process+0x2f4>)
 8003ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 8365 	bne.w	800457c <Parser_process+0x730>
	{
		// Bluetooth bridge
		if(BLE_bridge!=0)
 8003eb2:	4b9f      	ldr	r3, [pc, #636]	; (8004130 <Parser_process+0x2e4>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d024      	beq.n	8003f04 <Parser_process+0xb8>
		{
			for(i=0;i<rxcntr;i++)bluetoothbuf[i]=rx_buf[i];
 8003eba:	2300      	movs	r3, #0
 8003ebc:	80fb      	strh	r3, [r7, #6]
 8003ebe:	e008      	b.n	8003ed2 <Parser_process+0x86>
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	499f      	ldr	r1, [pc, #636]	; (8004144 <Parser_process+0x2f8>)
 8003ec6:	5c89      	ldrb	r1, [r1, r2]
 8003ec8:	4a9f      	ldr	r2, [pc, #636]	; (8004148 <Parser_process+0x2fc>)
 8003eca:	54d1      	strb	r1, [r2, r3]
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	80fb      	strh	r3, [r7, #6]
 8003ed2:	4b9e      	ldr	r3, [pc, #632]	; (800414c <Parser_process+0x300>)
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d3f1      	bcc.n	8003ec0 <Parser_process+0x74>
			bluetoothcntr=rxcntr;
 8003edc:	4b9b      	ldr	r3, [pc, #620]	; (800414c <Parser_process+0x300>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b9b      	ldr	r3, [pc, #620]	; (8004150 <Parser_process+0x304>)
 8003ee4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)rx_buf, rxcntr, 1000);
 8003ee6:	4b99      	ldr	r3, [pc, #612]	; (800414c <Parser_process+0x300>)
 8003ee8:	881a      	ldrh	r2, [r3, #0]
 8003eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eee:	4995      	ldr	r1, [pc, #596]	; (8004144 <Parser_process+0x2f8>)
 8003ef0:	4898      	ldr	r0, [pc, #608]	; (8004154 <Parser_process+0x308>)
 8003ef2:	f00b ffab 	bl	800fe4c <HAL_UART_Transmit>
			clear_buf();
 8003ef6:	f7ff fa0d 	bl	8003314 <clear_buf>
			USBTimeOutRX=-1;
 8003efa:	4b91      	ldr	r3, [pc, #580]	; (8004140 <Parser_process+0x2f4>)
 8003efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	e33b      	b.n	800457c <Parser_process+0x730>
		}
		// Parser
		else
		{
			LED(0,1,0);
 8003f04:	2200      	movs	r2, #0
 8003f06:	2101      	movs	r1, #1
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7fe f929 	bl	8002160 <LED>
			switch(parser(0))
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7ff fb4a 	bl	80035a8 <parser>
 8003f14:	4603      	mov	r3, r0
 8003f16:	3b02      	subs	r3, #2
 8003f18:	2b0b      	cmp	r3, #11
 8003f1a:	f200 831c 	bhi.w	8004556 <Parser_process+0x70a>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <Parser_process+0xd8>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08004251 	.word	0x08004251
 8003f28:	080043cd 	.word	0x080043cd
 8003f2c:	08004549 	.word	0x08004549
 8003f30:	0800409d 	.word	0x0800409d
 8003f34:	08004013 	.word	0x08004013
 8003f38:	08004035 	.word	0x08004035
 8003f3c:	08004057 	.word	0x08004057
 8003f40:	08003fc5 	.word	0x08003fc5
 8003f44:	08003fdf 	.word	0x08003fdf
 8003f48:	08003f55 	.word	0x08003f55
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f75 	.word	0x08003f75
			{
				case 0xFFFF: break;
				case 0xFFFE: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;

				case BL_BRIDGE:
					CDC_Transmit_FS((unsigned char*)"BlueTooth Bridge Enabled", 24);
 8003f54:	2118      	movs	r1, #24
 8003f56:	4880      	ldr	r0, [pc, #512]	; (8004158 <Parser_process+0x30c>)
 8003f58:	f015 faa4 	bl	80194a4 <CDC_Transmit_FS>
					BLE_bridge=1;
 8003f5c:	4b74      	ldr	r3, [pc, #464]	; (8004130 <Parser_process+0x2e4>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
					usart1_counter=0;
 8003f62:	4b74      	ldr	r3, [pc, #464]	; (8004134 <Parser_process+0x2e8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
					rx_cmplt=-1;
 8003f68:	4b73      	ldr	r3, [pc, #460]	; (8004138 <Parser_process+0x2ec>)
 8003f6a:	22ff      	movs	r2, #255	; 0xff
 8003f6c:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003f6e:	f7ff f9d1 	bl	8003314 <clear_buf>
					break;
 8003f72:	e2fb      	b.n	800456c <Parser_process+0x720>

				case CREATE:

					clear_buf();
 8003f74:	f7ff f9ce 	bl	8003314 <clear_buf>
					break;
 8003f78:	e2f8      	b.n	800456c <Parser_process+0x720>

				case BL_CONFIG:
					if(BLE_config==1)BLE_config=0;
 8003f7a:	4b78      	ldr	r3, [pc, #480]	; (800415c <Parser_process+0x310>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d103      	bne.n	8003f8a <Parser_process+0x13e>
 8003f82:	4b76      	ldr	r3, [pc, #472]	; (800415c <Parser_process+0x310>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e002      	b.n	8003f90 <Parser_process+0x144>
					else BLE_config=1;
 8003f8a:	4b74      	ldr	r3, [pc, #464]	; (800415c <Parser_process+0x310>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
					BLueTooth_Configuration(BLE_config);
 8003f90:	4b72      	ldr	r3, [pc, #456]	; (800415c <Parser_process+0x310>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe f88d 	bl	80020b4 <BLueTooth_Configuration>
					sprintf(RAM, "BlueTooth Config = %d", BLE_config);
 8003f9a:	4b70      	ldr	r3, [pc, #448]	; (800415c <Parser_process+0x310>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	496f      	ldr	r1, [pc, #444]	; (8004160 <Parser_process+0x314>)
 8003fa2:	4870      	ldr	r0, [pc, #448]	; (8004164 <Parser_process+0x318>)
 8003fa4:	f019 fef4 	bl	801dd90 <siprintf>
					CDC_Transmit_FS((unsigned char*)RAM, 20);
 8003fa8:	2114      	movs	r1, #20
 8003faa:	486e      	ldr	r0, [pc, #440]	; (8004164 <Parser_process+0x318>)
 8003fac:	f015 fa7a 	bl	80194a4 <CDC_Transmit_FS>
					HAL_UART_Transmit(&huart1, (unsigned char*)RAM, 20, 1000);
 8003fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb4:	2214      	movs	r2, #20
 8003fb6:	496b      	ldr	r1, [pc, #428]	; (8004164 <Parser_process+0x318>)
 8003fb8:	4866      	ldr	r0, [pc, #408]	; (8004154 <Parser_process+0x308>)
 8003fba:	f00b ff47 	bl	800fe4c <HAL_UART_Transmit>
					clear_buf();
 8003fbe:	f7ff f9a9 	bl	8003314 <clear_buf>
					break;
 8003fc2:	e2d3      	b.n	800456c <Parser_process+0x720>

				case SELF_CAL:
					clear_buf();
 8003fc4:	f7ff f9a6 	bl	8003314 <clear_buf>
					adc_calibration_mode=self_calibration;
 8003fc8:	4b67      	ldr	r3, [pc, #412]	; (8004168 <Parser_process+0x31c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
					adc_start_calibration=1;
 8003fce:	4b67      	ldr	r3, [pc, #412]	; (800416c <Parser_process+0x320>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	4866      	ldr	r0, [pc, #408]	; (8004170 <Parser_process+0x324>)
 8003fd8:	f015 fa64 	bl	80194a4 <CDC_Transmit_FS>
				break;
 8003fdc:	e2c6      	b.n	800456c <Parser_process+0x720>
				case SYS_CAL:
					RES=screen;
 8003fde:	4b65      	ldr	r3, [pc, #404]	; (8004174 <Parser_process+0x328>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	80bb      	strh	r3, [r7, #4]
					Auto_System_Calibration();
 8003fe4:	f7fd f9a8 	bl	8001338 <Auto_System_Calibration>
						ADC_Conversion(ADC_SPS);
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <Parser_process+0x32c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fd f8ad 	bl	800114c <ADC_Conversion>
						LED(0,0,0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f7fe f8b2 	bl	8002160 <LED>
						screen=RES;
 8003ffc:	88bb      	ldrh	r3, [r7, #4]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <Parser_process+0x328>)
 8004002:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8004004:	f7ff f986 	bl	8003314 <clear_buf>
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8004008:	2102      	movs	r1, #2
 800400a:	4859      	ldr	r0, [pc, #356]	; (8004170 <Parser_process+0x324>)
 800400c:	f015 fa4a 	bl	80194a4 <CDC_Transmit_FS>
					break;
 8004010:	e2ac      	b.n	800456c <Parser_process+0x720>

				case CSV_ON: CSV_format=1; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV enabled", 11); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV enabled", 11, 1000); break;
 8004012:	4b5a      	ldr	r3, [pc, #360]	; (800417c <Parser_process+0x330>)
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	f7ff f97c 	bl	8003314 <clear_buf>
 800401c:	210b      	movs	r1, #11
 800401e:	4858      	ldr	r0, [pc, #352]	; (8004180 <Parser_process+0x334>)
 8004020:	f015 fa40 	bl	80194a4 <CDC_Transmit_FS>
 8004024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004028:	220b      	movs	r2, #11
 800402a:	4955      	ldr	r1, [pc, #340]	; (8004180 <Parser_process+0x334>)
 800402c:	4849      	ldr	r0, [pc, #292]	; (8004154 <Parser_process+0x308>)
 800402e:	f00b ff0d 	bl	800fe4c <HAL_UART_Transmit>
 8004032:	e29b      	b.n	800456c <Parser_process+0x720>
				case CSV_OFF: CSV_format=0; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV disabled", 12); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV disabled", 12, 1000); break;
 8004034:	4b51      	ldr	r3, [pc, #324]	; (800417c <Parser_process+0x330>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	f7ff f96b 	bl	8003314 <clear_buf>
 800403e:	210c      	movs	r1, #12
 8004040:	4850      	ldr	r0, [pc, #320]	; (8004184 <Parser_process+0x338>)
 8004042:	f015 fa2f 	bl	80194a4 <CDC_Transmit_FS>
 8004046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800404a:	220c      	movs	r2, #12
 800404c:	494d      	ldr	r1, [pc, #308]	; (8004184 <Parser_process+0x338>)
 800404e:	4841      	ldr	r0, [pc, #260]	; (8004154 <Parser_process+0x308>)
 8004050:	f00b fefc 	bl	800fe4c <HAL_UART_Transmit>
 8004054:	e28a      	b.n	800456c <Parser_process+0x720>

				case HELP:
					CDC_Transmit_FS((unsigned char*)CSV_ON_instruction, strlen(CSV_ON_instruction));
 8004056:	215a      	movs	r1, #90	; 0x5a
 8004058:	484b      	ldr	r0, [pc, #300]	; (8004188 <Parser_process+0x33c>)
 800405a:	f015 fa23 	bl	80194a4 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)CSV_OFF_instruction, strlen(CSV_OFF_instruction));
 800405e:	215d      	movs	r1, #93	; 0x5d
 8004060:	484a      	ldr	r0, [pc, #296]	; (800418c <Parser_process+0x340>)
 8004062:	f015 fa1f 	bl	80194a4 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)HELP_instruction, strlen(HELP_instruction));
 8004066:	212d      	movs	r1, #45	; 0x2d
 8004068:	4849      	ldr	r0, [pc, #292]	; (8004190 <Parser_process+0x344>)
 800406a:	f015 fa1b 	bl	80194a4 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GV_instruction, strlen(GV_instruction));
 800406e:	214f      	movs	r1, #79	; 0x4f
 8004070:	4848      	ldr	r0, [pc, #288]	; (8004194 <Parser_process+0x348>)
 8004072:	f015 fa17 	bl	80194a4 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SET_instruction, strlen(SET_instruction));
 8004076:	215e      	movs	r1, #94	; 0x5e
 8004078:	4847      	ldr	r0, [pc, #284]	; (8004198 <Parser_process+0x34c>)
 800407a:	f015 fa13 	bl	80194a4 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GET_instruction, strlen(GET_instruction));
 800407e:	215d      	movs	r1, #93	; 0x5d
 8004080:	4846      	ldr	r0, [pc, #280]	; (800419c <Parser_process+0x350>)
 8004082:	f015 fa0f 	bl	80194a4 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)ALL_instruction, strlen(ALL_instruction));
 8004086:	2150      	movs	r1, #80	; 0x50
 8004088:	4845      	ldr	r0, [pc, #276]	; (80041a0 <Parser_process+0x354>)
 800408a:	f015 fa0b 	bl	80194a4 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SAVE_instruction, strlen(SAVE_instruction));
 800408e:	2158      	movs	r1, #88	; 0x58
 8004090:	4844      	ldr	r0, [pc, #272]	; (80041a4 <Parser_process+0x358>)
 8004092:	f015 fa07 	bl	80194a4 <CDC_Transmit_FS>

					clear_buf(); break;
 8004096:	f7ff f93d 	bl	8003314 <clear_buf>
 800409a:	e267      	b.n	800456c <Parser_process+0x720>

				case GV:
					if(CSV_format==0)
 800409c:	4b37      	ldr	r3, [pc, #220]	; (800417c <Parser_process+0x330>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d142      	bne.n	800412a <Parser_process+0x2de>
					{
						CDC_Transmit_FS((unsigned char*)"Available Global Variables:\n", 28);
 80040a4:	211c      	movs	r1, #28
 80040a6:	4840      	ldr	r0, [pc, #256]	; (80041a8 <Parser_process+0x35c>)
 80040a8:	f015 f9fc 	bl	80194a4 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80040ac:	2300      	movs	r3, #0
 80040ae:	80fb      	strh	r3, [r7, #6]
 80040b0:	e037      	b.n	8004122 <Parser_process+0x2d6>
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	4a3d      	ldr	r2, [pc, #244]	; (80041ac <Parser_process+0x360>)
 80040b6:	5cd3      	ldrb	r3, [r2, r3]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <Parser_process+0x364>)
 80040bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c0:	210b      	movs	r1, #11
 80040c2:	4618      	mov	r0, r3
 80040c4:	f015 f9ee 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 80040c8:	2101      	movs	r1, #1
 80040ca:	483a      	ldr	r0, [pc, #232]	; (80041b4 <Parser_process+0x368>)
 80040cc:	f015 f9ea 	bl	80194a4 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	4a39      	ldr	r2, [pc, #228]	; (80041b8 <Parser_process+0x36c>)
 80040d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d8:	461a      	mov	r2, r3
 80040da:	4938      	ldr	r1, [pc, #224]	; (80041bc <Parser_process+0x370>)
 80040dc:	4821      	ldr	r0, [pc, #132]	; (8004164 <Parser_process+0x318>)
 80040de:	f019 fe57 	bl	801dd90 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80040e2:	4820      	ldr	r0, [pc, #128]	; (8004164 <Parser_process+0x318>)
 80040e4:	f7fc f884 	bl	80001f0 <strlen>
 80040e8:	4603      	mov	r3, r0
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	4619      	mov	r1, r3
 80040ee:	481d      	ldr	r0, [pc, #116]	; (8004164 <Parser_process+0x318>)
 80040f0:	f015 f9d8 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 80040f4:	2101      	movs	r1, #1
 80040f6:	482f      	ldr	r0, [pc, #188]	; (80041b4 <Parser_process+0x368>)
 80040f8:	f015 f9d4 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	4a30      	ldr	r2, [pc, #192]	; (80041c0 <Parser_process+0x374>)
 8004100:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	492f      	ldr	r1, [pc, #188]	; (80041c4 <Parser_process+0x378>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	b29b      	uxth	r3, r3
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f015 f9c8 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 8004114:	2101      	movs	r1, #1
 8004116:	482c      	ldr	r0, [pc, #176]	; (80041c8 <Parser_process+0x37c>)
 8004118:	f015 f9c4 	bl	80194a4 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	3301      	adds	r3, #1
 8004120:	80fb      	strh	r3, [r7, #6]
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d9c4      	bls.n	80040b2 <Parser_process+0x266>
 8004128:	e08b      	b.n	8004242 <Parser_process+0x3f6>
						}
					}
					else
					{
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 800412a:	2300      	movs	r3, #0
 800412c:	80fb      	strh	r3, [r7, #6]
 800412e:	e085      	b.n	800423c <Parser_process+0x3f0>
 8004130:	2000089c 	.word	0x2000089c
 8004134:	2000089d 	.word	0x2000089d
 8004138:	2000089e 	.word	0x2000089e
 800413c:	20002118 	.word	0x20002118
 8004140:	20000194 	.word	0x20000194
 8004144:	20005b6c 	.word	0x20005b6c
 8004148:	20005b08 	.word	0x20005b08
 800414c:	200008c2 	.word	0x200008c2
 8004150:	200008c0 	.word	0x200008c0
 8004154:	20007a50 	.word	0x20007a50
 8004158:	08021dbc 	.word	0x08021dbc
 800415c:	20000080 	.word	0x20000080
 8004160:	08021dd8 	.word	0x08021dd8
 8004164:	20002090 	.word	0x20002090
 8004168:	200008af 	.word	0x200008af
 800416c:	2000082c 	.word	0x2000082c
 8004170:	08021df0 	.word	0x08021df0
 8004174:	2000004c 	.word	0x2000004c
 8004178:	2000009b 	.word	0x2000009b
 800417c:	200008bf 	.word	0x200008bf
 8004180:	08021df4 	.word	0x08021df4
 8004184:	08021e00 	.word	0x08021e00
 8004188:	08023c20 	.word	0x08023c20
 800418c:	08023c7c 	.word	0x08023c7c
 8004190:	08023cdc 	.word	0x08023cdc
 8004194:	08023d0c 	.word	0x08023d0c
 8004198:	08023d5c 	.word	0x08023d5c
 800419c:	08023dbc 	.word	0x08023dbc
 80041a0:	08023e1c 	.word	0x08023e1c
 80041a4:	08023e70 	.word	0x08023e70
 80041a8:	08021e10 	.word	0x08021e10
 80041ac:	08023bd8 	.word	0x08023bd8
 80041b0:	2000013c 	.word	0x2000013c
 80041b4:	08021e30 	.word	0x08021e30
 80041b8:	08023bec 	.word	0x08023bec
 80041bc:	08021e34 	.word	0x08021e34
 80041c0:	200000f8 	.word	0x200000f8
 80041c4:	08023bc4 	.word	0x08023bc4
 80041c8:	08021e38 	.word	0x08021e38
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	4ab5      	ldr	r2, [pc, #724]	; (80044a4 <Parser_process+0x658>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	461a      	mov	r2, r3
 80041d4:	4bb4      	ldr	r3, [pc, #720]	; (80044a8 <Parser_process+0x65c>)
 80041d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041da:	210b      	movs	r1, #11
 80041dc:	4618      	mov	r0, r3
 80041de:	f015 f961 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 80041e2:	2101      	movs	r1, #1
 80041e4:	48b1      	ldr	r0, [pc, #708]	; (80044ac <Parser_process+0x660>)
 80041e6:	f015 f95d 	bl	80194a4 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	4ab0      	ldr	r2, [pc, #704]	; (80044b0 <Parser_process+0x664>)
 80041ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f2:	461a      	mov	r2, r3
 80041f4:	49af      	ldr	r1, [pc, #700]	; (80044b4 <Parser_process+0x668>)
 80041f6:	48b0      	ldr	r0, [pc, #704]	; (80044b8 <Parser_process+0x66c>)
 80041f8:	f019 fdca 	bl	801dd90 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80041fc:	48ae      	ldr	r0, [pc, #696]	; (80044b8 <Parser_process+0x66c>)
 80041fe:	f7fb fff7 	bl	80001f0 <strlen>
 8004202:	4603      	mov	r3, r0
 8004204:	b29b      	uxth	r3, r3
 8004206:	4619      	mov	r1, r3
 8004208:	48ab      	ldr	r0, [pc, #684]	; (80044b8 <Parser_process+0x66c>)
 800420a:	f015 f94b 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 800420e:	2101      	movs	r1, #1
 8004210:	48a6      	ldr	r0, [pc, #664]	; (80044ac <Parser_process+0x660>)
 8004212:	f015 f947 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	4aa8      	ldr	r2, [pc, #672]	; (80044bc <Parser_process+0x670>)
 800421a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	49a7      	ldr	r1, [pc, #668]	; (80044c0 <Parser_process+0x674>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	b29b      	uxth	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f015 f93b 	bl	80194a4 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 800422e:	2101      	movs	r1, #1
 8004230:	48a4      	ldr	r0, [pc, #656]	; (80044c4 <Parser_process+0x678>)
 8004232:	f015 f937 	bl	80194a4 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	3301      	adds	r3, #1
 800423a:	80fb      	strh	r3, [r7, #6]
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	2b10      	cmp	r3, #16
 8004240:	d9c4      	bls.n	80041cc <Parser_process+0x380>
						}
					}

					CDC_Transmit_FS((unsigned char*)"\r\n", 1);
 8004242:	2101      	movs	r1, #1
 8004244:	48a0      	ldr	r0, [pc, #640]	; (80044c8 <Parser_process+0x67c>)
 8004246:	f015 f92d 	bl	80194a4 <CDC_Transmit_FS>
					clear_buf();
 800424a:	f7ff f863 	bl	8003314 <clear_buf>
					break;
 800424e:	e18d      	b.n	800456c <Parser_process+0x720>

				case GET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 8004250:	2303      	movs	r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff f9a6 	bl	80035a8 <parser>
 800425c:	4603      	mov	r3, r0
 800425e:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 8004260:	88bb      	ldrh	r3, [r7, #4]
 8004262:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8004266:	4293      	cmp	r3, r2
 8004268:	f200 80a3 	bhi.w	80043b2 <Parser_process+0x566>
					{
						switch(GV_TYPE[RES])
 800426c:	88bb      	ldrh	r3, [r7, #4]
 800426e:	4a8d      	ldr	r2, [pc, #564]	; (80044a4 <Parser_process+0x658>)
 8004270:	5cd3      	ldrb	r3, [r2, r3]
 8004272:	2b07      	cmp	r3, #7
 8004274:	f200 8092 	bhi.w	800439c <Parser_process+0x550>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <Parser_process+0x434>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042a1 	.word	0x080042a1
 8004284:	080043c5 	.word	0x080043c5
 8004288:	080042cb 	.word	0x080042cb
 800428c:	080042f5 	.word	0x080042f5
 8004290:	080043c5 	.word	0x080043c5
 8004294:	0800431f 	.word	0x0800431f
 8004298:	08004373 	.word	0x08004373
 800429c:	08004349 	.word	0x08004349
						{
							case type_INT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042a0:	88bb      	ldrh	r3, [r7, #4]
 80042a2:	4a8a      	ldr	r2, [pc, #552]	; (80044cc <Parser_process+0x680>)
 80042a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a8:	4618      	mov	r0, r3
 80042aa:	2203      	movs	r2, #3
 80042ac:	88bb      	ldrh	r3, [r7, #4]
 80042ae:	4984      	ldr	r1, [pc, #528]	; (80044c0 <Parser_process+0x674>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	4413      	add	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3302      	adds	r3, #2
 80042b8:	b2d9      	uxtb	r1, r3
 80042ba:	88bb      	ldrh	r3, [r7, #4]
 80042bc:	4a7c      	ldr	r2, [pc, #496]	; (80044b0 <Parser_process+0x664>)
 80042be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f7ff fbc0 	bl	8003a48 <Get_uint8>
 80042c8:	e07d      	b.n	80043c6 <Parser_process+0x57a>
							case type_INT16: break;
							case type_INT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042ca:	88bb      	ldrh	r3, [r7, #4]
 80042cc:	4a7f      	ldr	r2, [pc, #508]	; (80044cc <Parser_process+0x680>)
 80042ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d2:	4618      	mov	r0, r3
 80042d4:	2203      	movs	r2, #3
 80042d6:	88bb      	ldrh	r3, [r7, #4]
 80042d8:	4979      	ldr	r1, [pc, #484]	; (80044c0 <Parser_process+0x674>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	4413      	add	r3, r2
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3302      	adds	r3, #2
 80042e2:	b2d9      	uxtb	r1, r3
 80042e4:	88bb      	ldrh	r3, [r7, #4]
 80042e6:	4a72      	ldr	r2, [pc, #456]	; (80044b0 <Parser_process+0x664>)
 80042e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ec:	461a      	mov	r2, r3
 80042ee:	f7ff fc27 	bl	8003b40 <Get_int32>
 80042f2:	e068      	b.n	80043c6 <Parser_process+0x57a>
							case type_UINT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042f4:	88bb      	ldrh	r3, [r7, #4]
 80042f6:	4a75      	ldr	r2, [pc, #468]	; (80044cc <Parser_process+0x680>)
 80042f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fc:	4618      	mov	r0, r3
 80042fe:	2203      	movs	r2, #3
 8004300:	88bb      	ldrh	r3, [r7, #4]
 8004302:	496f      	ldr	r1, [pc, #444]	; (80044c0 <Parser_process+0x674>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	4413      	add	r3, r2
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3302      	adds	r3, #2
 800430c:	b2d9      	uxtb	r1, r3
 800430e:	88bb      	ldrh	r3, [r7, #4]
 8004310:	4a67      	ldr	r2, [pc, #412]	; (80044b0 <Parser_process+0x664>)
 8004312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004316:	461a      	mov	r2, r3
 8004318:	f7ff fb96 	bl	8003a48 <Get_uint8>
 800431c:	e053      	b.n	80043c6 <Parser_process+0x57a>
							case type_UINT16: break;
							case type_UINT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800431e:	88bb      	ldrh	r3, [r7, #4]
 8004320:	4a6a      	ldr	r2, [pc, #424]	; (80044cc <Parser_process+0x680>)
 8004322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004326:	4618      	mov	r0, r3
 8004328:	2203      	movs	r2, #3
 800432a:	88bb      	ldrh	r3, [r7, #4]
 800432c:	4964      	ldr	r1, [pc, #400]	; (80044c0 <Parser_process+0x674>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	4413      	add	r3, r2
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3302      	adds	r3, #2
 8004336:	b2d9      	uxtb	r1, r3
 8004338:	88bb      	ldrh	r3, [r7, #4]
 800433a:	4a5d      	ldr	r2, [pc, #372]	; (80044b0 <Parser_process+0x664>)
 800433c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004340:	461a      	mov	r2, r3
 8004342:	f7ff fbfd 	bl	8003b40 <Get_int32>
 8004346:	e03e      	b.n	80043c6 <Parser_process+0x57a>
							case type_DOUBLE: Get_double((double*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004348:	88bb      	ldrh	r3, [r7, #4]
 800434a:	4a60      	ldr	r2, [pc, #384]	; (80044cc <Parser_process+0x680>)
 800434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004350:	4618      	mov	r0, r3
 8004352:	2203      	movs	r2, #3
 8004354:	88bb      	ldrh	r3, [r7, #4]
 8004356:	495a      	ldr	r1, [pc, #360]	; (80044c0 <Parser_process+0x674>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	4413      	add	r3, r2
 800435c:	b2db      	uxtb	r3, r3
 800435e:	3302      	adds	r3, #2
 8004360:	b2d9      	uxtb	r1, r3
 8004362:	88bb      	ldrh	r3, [r7, #4]
 8004364:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <Parser_process+0x664>)
 8004366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800436a:	461a      	mov	r2, r3
 800436c:	f7ff fcf0 	bl	8003d50 <Get_double>
 8004370:	e029      	b.n	80043c6 <Parser_process+0x57a>
							case type_FLOAT:  Get_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004372:	88bb      	ldrh	r3, [r7, #4]
 8004374:	4a55      	ldr	r2, [pc, #340]	; (80044cc <Parser_process+0x680>)
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	4618      	mov	r0, r3
 800437c:	2203      	movs	r2, #3
 800437e:	88bb      	ldrh	r3, [r7, #4]
 8004380:	494f      	ldr	r1, [pc, #316]	; (80044c0 <Parser_process+0x674>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	4413      	add	r3, r2
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3302      	adds	r3, #2
 800438a:	b2d9      	uxtb	r1, r3
 800438c:	88bb      	ldrh	r3, [r7, #4]
 800438e:	4a48      	ldr	r2, [pc, #288]	; (80044b0 <Parser_process+0x664>)
 8004390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004394:	461a      	mov	r2, r3
 8004396:	f7ff fc51 	bl	8003c3c <Get_float>
 800439a:	e014      	b.n	80043c6 <Parser_process+0x57a>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 800439c:	4b4c      	ldr	r3, [pc, #304]	; (80044d0 <Parser_process+0x684>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2209      	movs	r2, #9
 80043a2:	b292      	uxth	r2, r2
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f015 f87c 	bl	80194a4 <CDC_Transmit_FS>
 80043ac:	f7fe ffb2 	bl	8003314 <clear_buf>
 80043b0:	e009      	b.n	80043c6 <Parser_process+0x57a>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <Parser_process+0x684>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2209      	movs	r2, #9
 80043b8:	b292      	uxth	r2, r2
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f015 f871 	bl	80194a4 <CDC_Transmit_FS>
 80043c2:	e000      	b.n	80043c6 <Parser_process+0x57a>
							case type_INT16: break;
 80043c4:	bf00      	nop
					}
					clear_buf(); break;
 80043c6:	f7fe ffa5 	bl	8003314 <clear_buf>
 80043ca:	e0cf      	b.n	800456c <Parser_process+0x720>


				case SET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 80043cc:	2303      	movs	r3, #3
 80043ce:	3301      	adds	r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff f8e8 	bl	80035a8 <parser>
 80043d8:	4603      	mov	r3, r0
 80043da:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 80043dc:	88bb      	ldrh	r3, [r7, #4]
 80043de:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80043e2:	4293      	cmp	r3, r2
 80043e4:	f200 80a3 	bhi.w	800452e <Parser_process+0x6e2>
					{
						switch(GV_TYPE[RES])
 80043e8:	88bb      	ldrh	r3, [r7, #4]
 80043ea:	4a2e      	ldr	r2, [pc, #184]	; (80044a4 <Parser_process+0x658>)
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
 80043ee:	2b07      	cmp	r3, #7
 80043f0:	f200 8092 	bhi.w	8004518 <Parser_process+0x6cc>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <Parser_process+0x5b0>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	0800441d 	.word	0x0800441d
 8004400:	0800443f 	.word	0x0800443f
 8004404:	08004461 	.word	0x08004461
 8004408:	08004483 	.word	0x08004483
 800440c:	08004541 	.word	0x08004541
 8004410:	080044d5 	.word	0x080044d5
 8004414:	080044f7 	.word	0x080044f7
 8004418:	08004541 	.word	0x08004541
						{
							case type_INT8: Set_int8((int8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800441c:	88bb      	ldrh	r3, [r7, #4]
 800441e:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <Parser_process+0x680>)
 8004420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004424:	4618      	mov	r0, r3
 8004426:	2203      	movs	r2, #3
 8004428:	88bb      	ldrh	r3, [r7, #4]
 800442a:	4925      	ldr	r1, [pc, #148]	; (80044c0 <Parser_process+0x674>)
 800442c:	5ccb      	ldrb	r3, [r1, r3]
 800442e:	4413      	add	r3, r2
 8004430:	b2db      	uxtb	r3, r3
 8004432:	3302      	adds	r3, #2
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	f7ff f95c 	bl	80036f4 <Set_int8>
 800443c:	e081      	b.n	8004542 <Parser_process+0x6f6>
							case type_INT16: Set_int16((int16_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800443e:	88bb      	ldrh	r3, [r7, #4]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <Parser_process+0x680>)
 8004442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004446:	4618      	mov	r0, r3
 8004448:	2203      	movs	r2, #3
 800444a:	88bb      	ldrh	r3, [r7, #4]
 800444c:	491c      	ldr	r1, [pc, #112]	; (80044c0 <Parser_process+0x674>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	4413      	add	r3, r2
 8004452:	b2db      	uxtb	r3, r3
 8004454:	3302      	adds	r3, #2
 8004456:	b2db      	uxtb	r3, r3
 8004458:	4619      	mov	r1, r3
 800445a:	f7ff f9a1 	bl	80037a0 <Set_int16>
 800445e:	e070      	b.n	8004542 <Parser_process+0x6f6>
							case type_INT32: Set_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004460:	88bb      	ldrh	r3, [r7, #4]
 8004462:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <Parser_process+0x680>)
 8004464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004468:	4618      	mov	r0, r3
 800446a:	2203      	movs	r2, #3
 800446c:	88bb      	ldrh	r3, [r7, #4]
 800446e:	4914      	ldr	r1, [pc, #80]	; (80044c0 <Parser_process+0x674>)
 8004470:	5ccb      	ldrb	r3, [r1, r3]
 8004472:	4413      	add	r3, r2
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3302      	adds	r3, #2
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4619      	mov	r1, r3
 800447c:	f7ff f9e8 	bl	8003850 <Set_int32>
 8004480:	e05f      	b.n	8004542 <Parser_process+0x6f6>
							case type_UINT8: Set_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004482:	88bb      	ldrh	r3, [r7, #4]
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <Parser_process+0x680>)
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	4618      	mov	r0, r3
 800448c:	2203      	movs	r2, #3
 800448e:	88bb      	ldrh	r3, [r7, #4]
 8004490:	490b      	ldr	r1, [pc, #44]	; (80044c0 <Parser_process+0x674>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	4413      	add	r3, r2
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3302      	adds	r3, #2
 800449a:	b2db      	uxtb	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	f7ff f8d7 	bl	8003650 <Set_uint8>
 80044a2:	e04e      	b.n	8004542 <Parser_process+0x6f6>
 80044a4:	08023bd8 	.word	0x08023bd8
 80044a8:	2000013c 	.word	0x2000013c
 80044ac:	08021e3c 	.word	0x08021e3c
 80044b0:	08023bec 	.word	0x08023bec
 80044b4:	08021e34 	.word	0x08021e34
 80044b8:	20002090 	.word	0x20002090
 80044bc:	200000f8 	.word	0x200000f8
 80044c0:	08023bc4 	.word	0x08023bc4
 80044c4:	08021e38 	.word	0x08021e38
 80044c8:	08021cf8 	.word	0x08021cf8
 80044cc:	200000b4 	.word	0x200000b4
 80044d0:	2000015c 	.word	0x2000015c
							case type_UINT16: break;
							case type_UINT32: Set_uint32((uint32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80044d4:	88bb      	ldrh	r3, [r7, #4]
 80044d6:	4a2d      	ldr	r2, [pc, #180]	; (800458c <Parser_process+0x740>)
 80044d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044dc:	4618      	mov	r0, r3
 80044de:	2203      	movs	r2, #3
 80044e0:	88bb      	ldrh	r3, [r7, #4]
 80044e2:	492b      	ldr	r1, [pc, #172]	; (8004590 <Parser_process+0x744>)
 80044e4:	5ccb      	ldrb	r3, [r1, r3]
 80044e6:	4413      	add	r3, r2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	3302      	adds	r3, #2
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7ff fa10 	bl	8003914 <Set_uint32>
 80044f4:	e025      	b.n	8004542 <Parser_process+0x6f6>
							case type_DOUBLE: break;
							case type_FLOAT: Set_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80044f6:	88bb      	ldrh	r3, [r7, #4]
 80044f8:	4a24      	ldr	r2, [pc, #144]	; (800458c <Parser_process+0x740>)
 80044fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fe:	4618      	mov	r0, r3
 8004500:	2203      	movs	r2, #3
 8004502:	88bb      	ldrh	r3, [r7, #4]
 8004504:	4922      	ldr	r1, [pc, #136]	; (8004590 <Parser_process+0x744>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	4413      	add	r3, r2
 800450a:	b2db      	uxtb	r3, r3
 800450c:	3302      	adds	r3, #2
 800450e:	b2db      	uxtb	r3, r3
 8004510:	4619      	mov	r1, r3
 8004512:	f7ff fa47 	bl	80039a4 <Set_float>
 8004516:	e014      	b.n	8004542 <Parser_process+0x6f6>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <Parser_process+0x748>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2209      	movs	r2, #9
 800451e:	b292      	uxth	r2, r2
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f014 ffbe 	bl	80194a4 <CDC_Transmit_FS>
 8004528:	f7fe fef4 	bl	8003314 <clear_buf>
 800452c:	e009      	b.n	8004542 <Parser_process+0x6f6>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 800452e:	4b19      	ldr	r3, [pc, #100]	; (8004594 <Parser_process+0x748>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2209      	movs	r2, #9
 8004534:	b292      	uxth	r2, r2
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f014 ffb3 	bl	80194a4 <CDC_Transmit_FS>
 800453e:	e000      	b.n	8004542 <Parser_process+0x6f6>
							case type_UINT16: break;
 8004540:	bf00      	nop
					}
					clear_buf(); break;
 8004542:	f7fe fee7 	bl	8003314 <clear_buf>
 8004546:	e011      	b.n	800456c <Parser_process+0x720>


				case SAVE_CMD:
					CDC_Transmit_FS((unsigned char*)"FLASH MEMORY IS BROKEN!!", 24);
 8004548:	2118      	movs	r1, #24
 800454a:	4813      	ldr	r0, [pc, #76]	; (8004598 <Parser_process+0x74c>)
 800454c:	f014 ffaa 	bl	80194a4 <CDC_Transmit_FS>
					clear_buf(); break;
 8004550:	f7fe fee0 	bl	8003314 <clear_buf>
 8004554:	e00a      	b.n	800456c <Parser_process+0x720>

				default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <Parser_process+0x748>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2209      	movs	r2, #9
 800455c:	b292      	uxth	r2, r2
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f014 ff9f 	bl	80194a4 <CDC_Transmit_FS>
 8004566:	f7fe fed5 	bl	8003314 <clear_buf>
 800456a:	bf00      	nop

			}
			CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 800456c:	2102      	movs	r1, #2
 800456e:	480b      	ldr	r0, [pc, #44]	; (800459c <Parser_process+0x750>)
 8004570:	f014 ff98 	bl	80194a4 <CDC_Transmit_FS>
			USBTimeOutRX=-1;
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <Parser_process+0x754>)
 8004576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800457a:	801a      	strh	r2, [r3, #0]
		}
	}
	sleep(5);
 800457c:	2005      	movs	r0, #5
 800457e:	f7fe fe31 	bl	80031e4 <sleep>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200000b4 	.word	0x200000b4
 8004590:	08023bc4 	.word	0x08023bc4
 8004594:	2000015c 	.word	0x2000015c
 8004598:	08021e40 	.word	0x08021e40
 800459c:	08021cf8 	.word	0x08021cf8
 80045a0:	20000194 	.word	0x20000194

080045a4 <SPI1_Send>:
w25_info_t  w25_info;


//-------------------------------------------------------------
void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit (&hspi3, dt, cnt, 5000);
 80045b0:	887a      	ldrh	r2, [r7, #2]
 80045b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <SPI1_Send+0x24>)
 80045ba:	f009 fc6e 	bl	800de9a <HAL_SPI_Transmit>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000638c 	.word	0x2000638c

080045cc <SPI1_Recv>:
//-------------------------------------------------------------
void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive (&hspi3, dt, cnt, 5000);
 80045d8:	887a      	ldrh	r2, [r7, #2]
 80045da:	f241 3388 	movw	r3, #5000	; 0x1388
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4803      	ldr	r0, [pc, #12]	; (80045f0 <SPI1_Recv+0x24>)
 80045e2:	f009 fdc8 	bl	800e176 <HAL_SPI_Receive>
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2000638c 	.word	0x2000638c

080045f4 <W25_WriteEnable>:
//-------------------------------------------------------------

void W25_WriteEnable(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
	uint8_t command[1];
	cs_set();
 80045fa:	2200      	movs	r2, #0
 80045fc:	2104      	movs	r1, #4
 80045fe:	4809      	ldr	r0, [pc, #36]	; (8004624 <W25_WriteEnable+0x30>)
 8004600:	f005 fe2e 	bl	800a260 <HAL_GPIO_WritePin>
	command[0]=0x06;
 8004604:	2306      	movs	r3, #6
 8004606:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	2101      	movs	r1, #1
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ffc9 	bl	80045a4 <SPI1_Send>
	cs_reset();
 8004612:	2201      	movs	r2, #1
 8004614:	2104      	movs	r1, #4
 8004616:	4803      	ldr	r0, [pc, #12]	; (8004624 <W25_WriteEnable+0x30>)
 8004618:	f005 fe22 	bl	800a260 <HAL_GPIO_WritePin>
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	48000c00 	.word	0x48000c00

08004628 <W25_Reset>:
	SPI1_Send(command, 1);
	cs_reset();
}

void W25_Reset (void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	uint8_t command[1];
	while ((W25_Read_Status(0xC0)&0x01)==1);
 800462e:	bf00      	nop
 8004630:	20c0      	movs	r0, #192	; 0xc0
 8004632:	f000 f81d 	bl	8004670 <W25_Read_Status>
 8004636:	4603      	mov	r3, r0
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d0f7      	beq.n	8004630 <W25_Reset+0x8>
	cs_set();
 8004640:	2200      	movs	r2, #0
 8004642:	2104      	movs	r1, #4
 8004644:	4809      	ldr	r0, [pc, #36]	; (800466c <W25_Reset+0x44>)
 8004646:	f005 fe0b 	bl	800a260 <HAL_GPIO_WritePin>
	command[0] = W25_RESET;
 800464a:	23ff      	movs	r3, #255	; 0xff
 800464c:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff ffa6 	bl	80045a4 <SPI1_Send>
	cs_reset();
 8004658:	2201      	movs	r2, #1
 800465a:	2104      	movs	r1, #4
 800465c:	4803      	ldr	r0, [pc, #12]	; (800466c <W25_Reset+0x44>)
 800465e:	f005 fdff 	bl	800a260 <HAL_GPIO_WritePin>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	48000c00 	.word	0x48000c00

08004670 <W25_Read_Status>:
//-------------------------------------------------------------

uint8_t W25_Read_Status(uint8_t StatusRegAdd)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint8_t data[1];
	command[0] = 0x0F; 		// Read Status Register
 800467a:	230f      	movs	r3, #15
 800467c:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	737b      	strb	r3, [r7, #13]
	cs_set();
 8004682:	2200      	movs	r2, #0
 8004684:	2104      	movs	r1, #4
 8004686:	480c      	ldr	r0, [pc, #48]	; (80046b8 <W25_Read_Status+0x48>)
 8004688:	f005 fdea 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff86 	bl	80045a4 <SPI1_Send>
	SPI1_Recv(data, 1);
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff94 	bl	80045cc <SPI1_Recv>
	cs_reset();
 80046a4:	2201      	movs	r2, #1
 80046a6:	2104      	movs	r1, #4
 80046a8:	4803      	ldr	r0, [pc, #12]	; (80046b8 <W25_Read_Status+0x48>)
 80046aa:	f005 fdd9 	bl	800a260 <HAL_GPIO_WritePin>
	return data[0];
 80046ae:	7a3b      	ldrb	r3, [r7, #8]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	48000c00 	.word	0x48000c00

080046bc <W25_Write_Status>:

void W25_Write_Status(uint8_t StatusRegAdd, uint8_t data)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	460a      	mov	r2, r1
 80046c6:	71fb      	strb	r3, [r7, #7]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71bb      	strb	r3, [r7, #6]
	uint8_t command[3];
	command[0] = 0x1F; 		// Write Status Register
 80046cc:	231f      	movs	r3, #31
 80046ce:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	737b      	strb	r3, [r7, #13]
	command[2] = data;
 80046d4:	79bb      	ldrb	r3, [r7, #6]
 80046d6:	73bb      	strb	r3, [r7, #14]
	cs_set();
 80046d8:	2200      	movs	r2, #0
 80046da:	2104      	movs	r1, #4
 80046dc:	4808      	ldr	r0, [pc, #32]	; (8004700 <W25_Write_Status+0x44>)
 80046de:	f005 fdbf 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 80046e2:	f107 030c 	add.w	r3, r7, #12
 80046e6:	2103      	movs	r1, #3
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff ff5b 	bl	80045a4 <SPI1_Send>
	cs_reset();
 80046ee:	2201      	movs	r2, #1
 80046f0:	2104      	movs	r1, #4
 80046f2:	4803      	ldr	r0, [pc, #12]	; (8004700 <W25_Write_Status+0x44>)
 80046f4:	f005 fdb4 	bl	800a260 <HAL_GPIO_WritePin>
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	48000c00 	.word	0x48000c00

08004704 <W25_Block_Erase>:


void W25_Block_Erase(uint32_t page_addr)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	uint8_t command[4];

	W25_WriteEnable();
 800470c:	f7ff ff72 	bl	80045f4 <W25_WriteEnable>

	command[0] = 0xD8;						// Block erase
 8004710:	23d8      	movs	r3, #216	; 0xd8
 8004712:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;						// Dummy byte
 8004714:	2300      	movs	r3, #0
 8004716:	737b      	strb	r3, [r7, #13]
	command[2] = (page_addr >> 8) & 0xFF;	// Start page address
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	b2db      	uxtb	r3, r3
 800471e:	73bb      	strb	r3, [r7, #14]
	command[3] = page_addr & 0xFF;			// Start page address
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	73fb      	strb	r3, [r7, #15]

	cs_set();
 8004726:	2200      	movs	r2, #0
 8004728:	2104      	movs	r1, #4
 800472a:	480e      	ldr	r0, [pc, #56]	; (8004764 <W25_Block_Erase+0x60>)
 800472c:	f005 fd98 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	2104      	movs	r1, #4
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff ff34 	bl	80045a4 <SPI1_Send>
	cs_reset();
 800473c:	2201      	movs	r2, #1
 800473e:	2104      	movs	r1, #4
 8004740:	4808      	ldr	r0, [pc, #32]	; (8004764 <W25_Block_Erase+0x60>)
 8004742:	f005 fd8d 	bl	800a260 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(3)&0x01)==1);
 8004746:	bf00      	nop
 8004748:	2003      	movs	r0, #3
 800474a:	f7ff ff91 	bl	8004670 <W25_Read_Status>
 800474e:	4603      	mov	r3, r0
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d0f7      	beq.n	8004748 <W25_Block_Erase+0x44>
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	48000c00 	.word	0x48000c00

08004768 <W25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
//-------------------------------------------------------------
uint32_t W25_Read_ID(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
	uint8_t command[4];
	uint8_t dt[3];
	command[0] = W25_GET_JEDEC_ID;
 800476e:	239f      	movs	r3, #159	; 0x9f
 8004770:	713b      	strb	r3, [r7, #4]
	command[1] = 0x00;
 8004772:	2300      	movs	r3, #0
 8004774:	717b      	strb	r3, [r7, #5]
	cs_set();
 8004776:	2200      	movs	r2, #0
 8004778:	2104      	movs	r1, #4
 800477a:	480e      	ldr	r0, [pc, #56]	; (80047b4 <W25_Read_ID+0x4c>)
 800477c:	f005 fd70 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	2102      	movs	r1, #2
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff0d 	bl	80045a4 <SPI1_Send>
	SPI1_Recv(dt,3);
 800478a:	463b      	mov	r3, r7
 800478c:	2103      	movs	r1, #3
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff1c 	bl	80045cc <SPI1_Recv>
	cs_reset();
 8004794:	2201      	movs	r2, #1
 8004796:	2104      	movs	r1, #4
 8004798:	4806      	ldr	r0, [pc, #24]	; (80047b4 <W25_Read_ID+0x4c>)
 800479a:	f005 fd61 	bl	800a260 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800479e:	783b      	ldrb	r3, [r7, #0]
 80047a0:	041a      	lsls	r2, r3, #16
 80047a2:	787b      	ldrb	r3, [r7, #1]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	4313      	orrs	r3, r2
 80047a8:	78ba      	ldrb	r2, [r7, #2]
 80047aa:	4313      	orrs	r3, r2
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	48000c00 	.word	0x48000c00

080047b8 <W25_ReadBuf>:


void W25_ReadBuf(uint8_t*data, uint16_t blk_addr)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t address=(blk_addr>>2)*64;
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	019b      	lsls	r3, r3, #6
 80047cc:	81fb      	strh	r3, [r7, #14]
	uint16_t column=(blk_addr&0x03)*512;
 80047ce:	887b      	ldrh	r3, [r7, #2]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	025b      	lsls	r3, r3, #9
 80047d8:	81bb      	strh	r3, [r7, #12]

	while ((W25_Read_Status(0xC0)&0x01)==1);
 80047da:	bf00      	nop
 80047dc:	20c0      	movs	r0, #192	; 0xc0
 80047de:	f7ff ff47 	bl	8004670 <W25_Read_Status>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d0f7      	beq.n	80047dc <W25_ReadBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 80047ec:	2313      	movs	r3, #19
 80047ee:	723b      	strb	r3, [r7, #8]
	command[1] = W25_DUMMY;
 80047f0:	2300      	movs	r3, #0
 80047f2:	727b      	strb	r3, [r7, #9]
	command[2] = (address >> 8) & 0xFF;
 80047f4:	89fb      	ldrh	r3, [r7, #14]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	72bb      	strb	r3, [r7, #10]
	command[3] = address & 0xFF;
 80047fe:	89fb      	ldrh	r3, [r7, #14]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	72fb      	strb	r3, [r7, #11]
	cs_set();
 8004804:	2200      	movs	r2, #0
 8004806:	2104      	movs	r1, #4
 8004808:	4822      	ldr	r0, [pc, #136]	; (8004894 <W25_ReadBuf+0xdc>)
 800480a:	f005 fd29 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800480e:	f107 0308 	add.w	r3, r7, #8
 8004812:	2104      	movs	r1, #4
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fec5 	bl	80045a4 <SPI1_Send>
	cs_reset();
 800481a:	2201      	movs	r2, #1
 800481c:	2104      	movs	r1, #4
 800481e:	481d      	ldr	r0, [pc, #116]	; (8004894 <W25_ReadBuf+0xdc>)
 8004820:	f005 fd1e 	bl	800a260 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004824:	bf00      	nop
 8004826:	20c0      	movs	r0, #192	; 0xc0
 8004828:	f7ff ff22 	bl	8004670 <W25_Read_Status>
 800482c:	4603      	mov	r3, r0
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d0f7      	beq.n	8004826 <W25_ReadBuf+0x6e>

	// Read from buffer
	command[0] = W25_FAST_READ;
 8004836:	230b      	movs	r3, #11
 8004838:	723b      	strb	r3, [r7, #8]
	command[1] = (column >> 8) & 0xFF;
 800483a:	89bb      	ldrh	r3, [r7, #12]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	b29b      	uxth	r3, r3
 8004840:	b2db      	uxtb	r3, r3
 8004842:	727b      	strb	r3, [r7, #9]
	command[2] = column & 0xFF;
 8004844:	89bb      	ldrh	r3, [r7, #12]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	72bb      	strb	r3, [r7, #10]
	command[3] = W25_DUMMY;
 800484a:	2300      	movs	r3, #0
 800484c:	72fb      	strb	r3, [r7, #11]
	cs_set();
 800484e:	2200      	movs	r2, #0
 8004850:	2104      	movs	r1, #4
 8004852:	4810      	ldr	r0, [pc, #64]	; (8004894 <W25_ReadBuf+0xdc>)
 8004854:	f005 fd04 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004858:	f107 0308 	add.w	r3, r7, #8
 800485c:	2104      	movs	r1, #4
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fea0 	bl	80045a4 <SPI1_Send>
	SPI1_Recv(data, 512);
 8004864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff feaf 	bl	80045cc <SPI1_Recv>
	cs_reset();
 800486e:	2201      	movs	r2, #1
 8004870:	2104      	movs	r1, #4
 8004872:	4808      	ldr	r0, [pc, #32]	; (8004894 <W25_ReadBuf+0xdc>)
 8004874:	f005 fcf4 	bl	800a260 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004878:	bf00      	nop
 800487a:	20c0      	movs	r0, #192	; 0xc0
 800487c:	f7ff fef8 	bl	8004670 <W25_Read_Status>
 8004880:	4603      	mov	r3, r0
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d0f7      	beq.n	800487a <W25_ReadBuf+0xc2>
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	48000c00 	.word	0x48000c00

08004898 <W25_WriteBuf>:

void W25_WriteBuf(uint8_t*data, uint16_t blk_addr)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t i;
	uint16_t address=(blk_addr>>2)*64;
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	019b      	lsls	r3, r3, #6
 80048ac:	82bb      	strh	r3, [r7, #20]
	uint16_t column=(blk_addr&0x03)*512;
 80048ae:	887b      	ldrh	r3, [r7, #2]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	025b      	lsls	r3, r3, #9
 80048b8:	827b      	strh	r3, [r7, #18]

	// Прочитаем блок 2048 прежде чем стереть
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80048ba:	bf00      	nop
 80048bc:	20c0      	movs	r0, #192	; 0xc0
 80048be:	f7ff fed7 	bl	8004670 <W25_Read_Status>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d0f7      	beq.n	80048bc <W25_WriteBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 80048cc:	2313      	movs	r3, #19
 80048ce:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80048d0:	2300      	movs	r3, #0
 80048d2:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;
 80048d4:	8abb      	ldrh	r3, [r7, #20]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	b29b      	uxth	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;
 80048de:	8abb      	ldrh	r3, [r7, #20]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80048e4:	2200      	movs	r2, #0
 80048e6:	2104      	movs	r1, #4
 80048e8:	4857      	ldr	r0, [pc, #348]	; (8004a48 <W25_WriteBuf+0x1b0>)
 80048ea:	f005 fcb9 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80048ee:	f107 030c 	add.w	r3, r7, #12
 80048f2:	2104      	movs	r1, #4
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fe55 	bl	80045a4 <SPI1_Send>
	cs_reset();
 80048fa:	2201      	movs	r2, #1
 80048fc:	2104      	movs	r1, #4
 80048fe:	4852      	ldr	r0, [pc, #328]	; (8004a48 <W25_WriteBuf+0x1b0>)
 8004900:	f005 fcae 	bl	800a260 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004904:	bf00      	nop
 8004906:	20c0      	movs	r0, #192	; 0xc0
 8004908:	f7ff feb2 	bl	8004670 <W25_Read_Status>
 800490c:	4603      	mov	r3, r0
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d0f7      	beq.n	8004906 <W25_WriteBuf+0x6e>
	// Read from buffer
	command[0] = W25_FAST_READ;
 8004916:	230b      	movs	r3, #11
 8004918:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	73bb      	strb	r3, [r7, #14]
	command[3] = W25_DUMMY;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004926:	2200      	movs	r2, #0
 8004928:	2104      	movs	r1, #4
 800492a:	4847      	ldr	r0, [pc, #284]	; (8004a48 <W25_WriteBuf+0x1b0>)
 800492c:	f005 fc98 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004930:	f107 030c 	add.w	r3, r7, #12
 8004934:	2104      	movs	r1, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fe34 	bl	80045a4 <SPI1_Send>
	SPI1_Recv(buf, 2048);
 800493c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004940:	4842      	ldr	r0, [pc, #264]	; (8004a4c <W25_WriteBuf+0x1b4>)
 8004942:	f7ff fe43 	bl	80045cc <SPI1_Recv>
	cs_reset();
 8004946:	2201      	movs	r2, #1
 8004948:	2104      	movs	r1, #4
 800494a:	483f      	ldr	r0, [pc, #252]	; (8004a48 <W25_WriteBuf+0x1b0>)
 800494c:	f005 fc88 	bl	800a260 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004950:	bf00      	nop
 8004952:	20c0      	movs	r0, #192	; 0xc0
 8004954:	f7ff fe8c 	bl	8004670 <W25_Read_Status>
 8004958:	4603      	mov	r3, r0
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b01      	cmp	r3, #1
 8004960:	d0f7      	beq.n	8004952 <W25_WriteBuf+0xba>

	for(i=0;i<512;i++)buf[column+i]=data[i];
 8004962:	2300      	movs	r3, #0
 8004964:	82fb      	strh	r3, [r7, #22]
 8004966:	e00b      	b.n	8004980 <W25_WriteBuf+0xe8>
 8004968:	8afb      	ldrh	r3, [r7, #22]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	441a      	add	r2, r3
 800496e:	8a79      	ldrh	r1, [r7, #18]
 8004970:	8afb      	ldrh	r3, [r7, #22]
 8004972:	440b      	add	r3, r1
 8004974:	7811      	ldrb	r1, [r2, #0]
 8004976:	4a35      	ldr	r2, [pc, #212]	; (8004a4c <W25_WriteBuf+0x1b4>)
 8004978:	54d1      	strb	r1, [r2, r3]
 800497a:	8afb      	ldrh	r3, [r7, #22]
 800497c:	3301      	adds	r3, #1
 800497e:	82fb      	strh	r3, [r7, #22]
 8004980:	8afb      	ldrh	r3, [r7, #22]
 8004982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004986:	d3ef      	bcc.n	8004968 <W25_WriteBuf+0xd0>

	//memcpy(buf[column], data, 512);

	// Сотрем блок 128кБ
	W25_Block_Erase(address);
 8004988:	8abb      	ldrh	r3, [r7, #20]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff feba 	bl	8004704 <W25_Block_Erase>

	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004990:	bf00      	nop
 8004992:	20c0      	movs	r0, #192	; 0xc0
 8004994:	f7ff fe6c 	bl	8004670 <W25_Read_Status>
 8004998:	4603      	mov	r3, r0
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d0f7      	beq.n	8004992 <W25_WriteBuf+0xfa>
	// Пишем в буфер
	W25_WriteEnable();
 80049a2:	f7ff fe27 	bl	80045f4 <W25_WriteEnable>
	command[0] = PROGRAM_DATA_LOAD;
 80049a6:	2302      	movs	r3, #2
 80049a8:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73bb      	strb	r3, [r7, #14]
	cs_set();
 80049b2:	2200      	movs	r2, #0
 80049b4:	2104      	movs	r1, #4
 80049b6:	4824      	ldr	r0, [pc, #144]	; (8004a48 <W25_WriteBuf+0x1b0>)
 80049b8:	f005 fc52 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	2103      	movs	r1, #3
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fdee 	bl	80045a4 <SPI1_Send>
	SPI1_Send(buf, 2048);
 80049c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049cc:	481f      	ldr	r0, [pc, #124]	; (8004a4c <W25_WriteBuf+0x1b4>)
 80049ce:	f7ff fde9 	bl	80045a4 <SPI1_Send>
	cs_reset();
 80049d2:	2201      	movs	r2, #1
 80049d4:	2104      	movs	r1, #4
 80049d6:	481c      	ldr	r0, [pc, #112]	; (8004a48 <W25_WriteBuf+0x1b0>)
 80049d8:	f005 fc42 	bl	800a260 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80049dc:	bf00      	nop
 80049de:	20c0      	movs	r0, #192	; 0xc0
 80049e0:	f7ff fe46 	bl	8004670 <W25_Read_Status>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d0f7      	beq.n	80049de <W25_WriteBuf+0x146>

	// Переносим во внутреннюю память
	W25_WriteEnable();
 80049ee:	f7ff fe01 	bl	80045f4 <W25_WriteEnable>
	command[0] = PROGRAM_EXECUTE;
 80049f2:	2310      	movs	r3, #16
 80049f4:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80049f6:	2300      	movs	r3, #0
 80049f8:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;	// Адрес страницы
 80049fa:	8abb      	ldrh	r3, [r7, #20]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;			// Адрес страницы
 8004a04:	8abb      	ldrh	r3, [r7, #20]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	480e      	ldr	r0, [pc, #56]	; (8004a48 <W25_WriteBuf+0x1b0>)
 8004a10:	f005 fc26 	bl	800a260 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004a14:	f107 030c 	add.w	r3, r7, #12
 8004a18:	2104      	movs	r1, #4
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fdc2 	bl	80045a4 <SPI1_Send>
	cs_reset();
 8004a20:	2201      	movs	r2, #1
 8004a22:	2104      	movs	r1, #4
 8004a24:	4808      	ldr	r0, [pc, #32]	; (8004a48 <W25_WriteBuf+0x1b0>)
 8004a26:	f005 fc1b 	bl	800a260 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004a2a:	bf00      	nop
 8004a2c:	20c0      	movs	r0, #192	; 0xc0
 8004a2e:	f7ff fe1f 	bl	8004670 <W25_Read_Status>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d0f7      	beq.n	8004a2c <W25_WriteBuf+0x194>
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	48000c00 	.word	0x48000c00
 8004a4c:	200063f0 	.word	0x200063f0

08004a50 <W25_Init>:

//-------------------------------------------------------------
void W25_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8004a56:	2064      	movs	r0, #100	; 0x64
 8004a58:	f003 f918 	bl	8007c8c <HAL_Delay>
	W25_Reset();
 8004a5c:	f7ff fde4 	bl	8004628 <W25_Reset>
	HAL_Delay(100);
 8004a60:	2064      	movs	r0, #100	; 0x64
 8004a62:	f003 f913 	bl	8007c8c <HAL_Delay>
	unsigned int id = W25_Read_ID();
 8004a66:	f7ff fe7f 	bl	8004768 <W25_Read_ID>
 8004a6a:	6078      	str	r0, [r7, #4]

	if(id!=0xEFAA21)ERROR_REG|=(0x01<<Memory_err);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <W25_Init+0x68>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d005      	beq.n	8004a80 <W25_Init+0x30>
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <W25_Init+0x6c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <W25_Init+0x6c>)
 8004a7e:	6013      	str	r3, [r2, #0]

	w25_info.PageSize=2048;
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <W25_Init+0x70>)
 8004a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a86:	801a      	strh	r2, [r3, #0]
	w25_info.PageCount=0xFFFF;
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <W25_Init+0x70>)
 8004a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a8e:	605a      	str	r2, [r3, #4]
	w25_info.BlockSize=w25_info.PageSize*64;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <W25_Init+0x70>)
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	019b      	lsls	r3, r3, #6
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <W25_Init+0x70>)
 8004a9a:	611a      	str	r2, [r3, #16]
	w25_info.NumKB=(w25_info.BlockSize*128)/8;
 8004a9c:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <W25_Init+0x70>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	01db      	lsls	r3, r3, #7
 8004aa2:	08db      	lsrs	r3, r3, #3
 8004aa4:	4a06      	ldr	r2, [pc, #24]	; (8004ac0 <W25_Init+0x70>)
 8004aa6:	6193      	str	r3, [r2, #24]

	W25_Write_Status(0xA0, 0x00);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	20a0      	movs	r0, #160	; 0xa0
 8004aac:	f7ff fe06 	bl	80046bc <W25_Write_Status>
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	00efaa21 	.word	0x00efaa21
 8004abc:	20000898 	.word	0x20000898
 8004ac0:	2000636c 	.word	0x2000636c
 8004ac4:	00000000 	.word	0x00000000

08004ac8 <Approximation_MC110>:
double Temperature_correction(double uncorrect_Pressure, double affect_temp);



void Approximation_MC110(int32_t meas_data, int32_t power_data)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
	double LSB;
	double temp_diff;

	int32_t ADC_MEAS_ZERO = meas_data-zero_ADC[0];
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <Approximation_MC110+0x108>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	61fb      	str	r3, [r7, #28]

	// Считаем LSB
	LSB=0.00000000028857241176*(double)ADC_MEAS_ZERO+1.41200835380823000000;
 8004adc:	69f8      	ldr	r0, [r7, #28]
 8004ade:	f7fb fd31 	bl	8000544 <__aeabi_i2d>
 8004ae2:	a32f      	add	r3, pc, #188	; (adr r3, 8004ba0 <Approximation_MC110+0xd8>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fd96 	bl	8000618 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	a32c      	add	r3, pc, #176	; (adr r3, 8004ba8 <Approximation_MC110+0xe0>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb fbd7 	bl	80002ac <__adddf3>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим температуру
	Temperature2=0.000128471469464*(double)power_data-420.277295988542;
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f7fb fd1c 	bl	8000544 <__aeabi_i2d>
 8004b0c:	a328      	add	r3, pc, #160	; (adr r3, 8004bb0 <Approximation_MC110+0xe8>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fd81 	bl	8000618 <__aeabi_dmul>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	a326      	add	r3, pc, #152	; (adr r3, 8004bb8 <Approximation_MC110+0xf0>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fbc0 	bl	80002a8 <__aeabi_dsub>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4929      	ldr	r1, [pc, #164]	; (8004bd4 <Approximation_MC110+0x10c>)
 8004b2e:	e9c1 2300 	strd	r2, r3, [r1]
	// Дифференциал температуры
	temp_diff=Temperature2-cal_temperature;
 8004b32:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <Approximation_MC110+0x10c>)
 8004b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b38:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <Approximation_MC110+0x110>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f7fb fbb3 	bl	80002a8 <__aeabi_dsub>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// Находим термостабилизированное LSB
	LSB=LSB-(temp_diff*0.0000418240259295);
 8004b4a:	a31d      	add	r3, pc, #116	; (adr r3, 8004bc0 <Approximation_MC110+0xf8>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b54:	f7fb fd60 	bl	8000618 <__aeabi_dmul>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b60:	f7fb fba2 	bl	80002a8 <__aeabi_dsub>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим давление
	Pressure=(LSB*(double)ADC_MEAS_ZERO)/1000000.0;
 8004b6c:	69f8      	ldr	r0, [r7, #28]
 8004b6e:	f7fb fce9 	bl	8000544 <__aeabi_i2d>
 8004b72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b76:	f7fb fd4f 	bl	8000618 <__aeabi_dmul>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	a311      	add	r3, pc, #68	; (adr r3, 8004bc8 <Approximation_MC110+0x100>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fe70 	bl	800086c <__aeabi_ddiv>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4912      	ldr	r1, [pc, #72]	; (8004bdc <Approximation_MC110+0x114>)
 8004b92:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004b96:	bf00      	nop
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	9b278484 	.word	0x9b278484
 8004ba4:	3df3d49e 	.word	0x3df3d49e
 8004ba8:	12548ff4 	.word	0x12548ff4
 8004bac:	3ff69796 	.word	0x3ff69796
 8004bb0:	8506b9ef 	.word	0x8506b9ef
 8004bb4:	3f20d6c9 	.word	0x3f20d6c9
 8004bb8:	cdeb2199 	.word	0xcdeb2199
 8004bbc:	407a446f 	.word	0x407a446f
 8004bc0:	96a39d76 	.word	0x96a39d76
 8004bc4:	3f05ed86 	.word	0x3f05ed86
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	412e8480 	.word	0x412e8480
 8004bd0:	20002288 	.word	0x20002288
 8004bd4:	20000878 	.word	0x20000878
 8004bd8:	20000288 	.word	0x20000288
 8004bdc:	200022a0 	.word	0x200022a0

08004be0 <Calculate>:



void Calculate(int32_t adc_press, int32_t adc_pow)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	static double Press_old=0;
	// Считаем давлени
	Test_Pressure = Approximation_pressure(adc_press);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f85a 	bl	8004ca4 <Approximation_pressure>
 8004bf0:	eeb0 7a40 	vmov.f32	s14, s0
 8004bf4:	eef0 7a60 	vmov.f32	s15, s1
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <Calculate+0xb4>)
 8004bfa:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температурный коэффициент
	Temperature_coeff_25 = Approximation_Tcoef(adc_press, adc_pow);
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f921 	bl	8004e48 <Approximation_Tcoef>
 8004c06:	eeb0 7a40 	vmov.f32	s14, s0
 8004c0a:	eef0 7a60 	vmov.f32	s15, s1
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <Calculate+0xb8>)
 8004c10:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температуру
	Temperature = Approximation_temperature(Temperature_coeff_25);
 8004c14:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <Calculate+0xb8>)
 8004c16:	ed93 7b00 	vldr	d7, [r3]
 8004c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c1e:	eef0 0a67 	vmov.f32	s1, s15
 8004c22:	f000 f9db 	bl	8004fdc <Approximation_temperature>
 8004c26:	eeb0 7a40 	vmov.f32	s14, s0
 8004c2a:	eef0 7a60 	vmov.f32	s15, s1
 8004c2e:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <Calculate+0xbc>)
 8004c30:	ed83 7b00 	vstr	d7, [r3]
	// Корректируем давление по температуре
	Test_Pressure = (Temperature_correction(Test_Pressure, Temperature) + Press_old)/2.0;
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <Calculate+0xb4>)
 8004c36:	ed93 7b00 	vldr	d7, [r3]
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <Calculate+0xbc>)
 8004c3c:	ed93 6b00 	vldr	d6, [r3]
 8004c40:	eeb0 1a46 	vmov.f32	s2, s12
 8004c44:	eef0 1a66 	vmov.f32	s3, s13
 8004c48:	eeb0 0a47 	vmov.f32	s0, s14
 8004c4c:	eef0 0a67 	vmov.f32	s1, s15
 8004c50:	f000 fa80 	bl	8005154 <Temperature_correction>
 8004c54:	ec51 0b10 	vmov	r0, r1, d0
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <Calculate+0xc0>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fb25 	bl	80002ac <__adddf3>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c72:	f7fb fdfb 	bl	800086c <__aeabi_ddiv>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4906      	ldr	r1, [pc, #24]	; (8004c94 <Calculate+0xb4>)
 8004c7c:	e9c1 2300 	strd	r2, r3, [r1]
	Press_old = Test_Pressure;
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <Calculate+0xb4>)
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	4906      	ldr	r1, [pc, #24]	; (8004ca0 <Calculate+0xc0>)
 8004c88:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	200022a8 	.word	0x200022a8
 8004c98:	20000078 	.word	0x20000078
 8004c9c:	20000890 	.word	0x20000890
 8004ca0:	200008d0 	.word	0x200008d0

08004ca4 <Approximation_pressure>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация давления
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_pressure(int32_t current_ADC_measure)
{
 8004ca4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ca8:	b08c      	sub	sp, #48	; 0x30
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
	double RES=0, a, b;
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004cc2:	4b5e      	ldr	r3, [pc, #376]	; (8004e3c <Approximation_pressure+0x198>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <Approximation_pressure+0x38>
 8004cca:	4b5d      	ldr	r3, [pc, #372]	; (8004e40 <Approximation_pressure+0x19c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <Approximation_pressure+0x198>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	623b      	str	r3, [r7, #32]
 8004cda:	e001      	b.n	8004ce0 <Approximation_pressure+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if(ADC_MEAS_ZERO>ADC_measure_cal_points[i])index++;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e00c      	b.n	8004d00 <Approximation_pressure+0x5c>
 8004ce6:	4a56      	ldr	r2, [pc, #344]	; (8004e40 <Approximation_pressure+0x19c>)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cee:	6a3a      	ldr	r2, [r7, #32]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	dd02      	ble.n	8004cfa <Approximation_pressure+0x56>
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b09      	cmp	r3, #9
 8004d04:	ddef      	ble.n	8004ce6 <Approximation_pressure+0x42>

	if(index==0) a = (Pressure_cal_points[index+1] - Pressure_cal_points[index]) / (double)(ADC_measure_cal_points[index+1] - ADC_measure_cal_points[index]);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d12a      	bne.n	8004d62 <Approximation_pressure+0xbe>
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	3301      	adds	r3, #1
 8004d10:	4a4c      	ldr	r2, [pc, #304]	; (8004e44 <Approximation_pressure+0x1a0>)
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4413      	add	r3, r2
 8004d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d1a:	4a4a      	ldr	r2, [pc, #296]	; (8004e44 <Approximation_pressure+0x1a0>)
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f7fb fabf 	bl	80002a8 <__aeabi_dsub>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4614      	mov	r4, r2
 8004d30:	461d      	mov	r5, r3
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a42      	ldr	r2, [pc, #264]	; (8004e40 <Approximation_pressure+0x19c>)
 8004d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d3c:	4940      	ldr	r1, [pc, #256]	; (8004e40 <Approximation_pressure+0x19c>)
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fbfc 	bl	8000544 <__aeabi_i2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	f7fb fd8a 	bl	800086c <__aeabi_ddiv>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004d60:	e033      	b.n	8004dca <Approximation_pressure+0x126>
	else a = (Pressure_cal_points[index]-Pressure_cal_points[index-1]) / ((double)ADC_measure_cal_points[index]-(double)ADC_measure_cal_points[index-1]);
 8004d62:	4a38      	ldr	r2, [pc, #224]	; (8004e44 <Approximation_pressure+0x1a0>)
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	3b01      	subs	r3, #1
 8004d72:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <Approximation_pressure+0x1a0>)
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f7fb fa94 	bl	80002a8 <__aeabi_dsub>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4690      	mov	r8, r2
 8004d86:	4699      	mov	r9, r3
 8004d88:	4a2d      	ldr	r2, [pc, #180]	; (8004e40 <Approximation_pressure+0x19c>)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbd7 	bl	8000544 <__aeabi_i2d>
 8004d96:	4604      	mov	r4, r0
 8004d98:	460d      	mov	r5, r1
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <Approximation_pressure+0x19c>)
 8004da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fbcd 	bl	8000544 <__aeabi_i2d>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4620      	mov	r0, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb fa79 	bl	80002a8 <__aeabi_dsub>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4640      	mov	r0, r8
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	f7fb fd55 	bl	800086c <__aeabi_ddiv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	b = (double)Pressure_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004dca:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <Approximation_pressure+0x1a0>)
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <Approximation_pressure+0x19c>)
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fb fbb0 	bl	8000544 <__aeabi_i2d>
 8004de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004de8:	f7fb fc16 	bl	8000618 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fa58 	bl	80002a8 <__aeabi_dsub>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004e00:	6a38      	ldr	r0, [r7, #32]
 8004e02:	f7fb fb9f 	bl	8000544 <__aeabi_i2d>
 8004e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e0a:	f7fb fc05 	bl	8000618 <__aeabi_dmul>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e16:	f7fb fa49 	bl	80002ac <__adddf3>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8004e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e26:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e2e:	eef0 0a67 	vmov.f32	s1, s15
 8004e32:	3730      	adds	r7, #48	; 0x30
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20002288 	.word	0x20002288
 8004e40:	200001f0 	.word	0x200001f0
 8004e44:	20000198 	.word	0x20000198

08004e48 <Approximation_Tcoef>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температурного коэффициента
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_Tcoef(int32_t current_ADC_measure, int32_t current_ADC_power)
{
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	b08c      	sub	sp, #48	; 0x30
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
	double RES = 0, a, b;
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004e66:	4b5a      	ldr	r3, [pc, #360]	; (8004fd0 <Approximation_Tcoef+0x188>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <Approximation_Tcoef+0x38>
 8004e6e:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <Approximation_Tcoef+0x18c>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	441a      	add	r2, r3
 8004e76:	4b56      	ldr	r3, [pc, #344]	; (8004fd0 <Approximation_Tcoef+0x188>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	e001      	b.n	8004e84 <Approximation_Tcoef+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if (ADC_MEAS_ZERO > ADC_measure_cal_points[i]) index++;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	e00c      	b.n	8004ea4 <Approximation_Tcoef+0x5c>
 8004e8a:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <Approximation_Tcoef+0x18c>)
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	dd02      	ble.n	8004e9e <Approximation_Tcoef+0x56>
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b09      	cmp	r3, #9
 8004ea8:	ddef      	ble.n	8004e8a <Approximation_Tcoef+0x42>

	if (index == 0) a = (double)(ADC_power_cal_points[index + 1] - ADC_power_cal_points[index]) / (double)(ADC_measure_cal_points[index + 1] - ADC_measure_cal_points[index]);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d126      	bne.n	8004efe <Approximation_Tcoef+0xb6>
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a48      	ldr	r2, [pc, #288]	; (8004fd8 <Approximation_Tcoef+0x190>)
 8004eb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004eba:	4947      	ldr	r1, [pc, #284]	; (8004fd8 <Approximation_Tcoef+0x190>)
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb fb3d 	bl	8000544 <__aeabi_i2d>
 8004eca:	4604      	mov	r4, r0
 8004ecc:	460d      	mov	r5, r1
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	4a40      	ldr	r2, [pc, #256]	; (8004fd4 <Approximation_Tcoef+0x18c>)
 8004ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ed8:	493e      	ldr	r1, [pc, #248]	; (8004fd4 <Approximation_Tcoef+0x18c>)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fb2e 	bl	8000544 <__aeabi_i2d>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4620      	mov	r0, r4
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f7fb fcbc 	bl	800086c <__aeabi_ddiv>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004efc:	e025      	b.n	8004f4a <Approximation_Tcoef+0x102>
	else a = (double)(ADC_power_cal_points[index] - ADC_power_cal_points[index - 1]) / (double)(ADC_measure_cal_points[index] - ADC_measure_cal_points[index - 1]);
 8004efe:	4a36      	ldr	r2, [pc, #216]	; (8004fd8 <Approximation_Tcoef+0x190>)
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	4933      	ldr	r1, [pc, #204]	; (8004fd8 <Approximation_Tcoef+0x190>)
 8004f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fb fb16 	bl	8000544 <__aeabi_i2d>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	460d      	mov	r5, r1
 8004f1c:	4a2d      	ldr	r2, [pc, #180]	; (8004fd4 <Approximation_Tcoef+0x18c>)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	3b01      	subs	r3, #1
 8004f28:	492a      	ldr	r1, [pc, #168]	; (8004fd4 <Approximation_Tcoef+0x18c>)
 8004f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb fb07 	bl	8000544 <__aeabi_i2d>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	f7fb fc95 	bl	800086c <__aeabi_ddiv>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	b = (double)ADC_power_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004f4a:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <Approximation_Tcoef+0x190>)
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb faf6 	bl	8000544 <__aeabi_i2d>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <Approximation_Tcoef+0x18c>)
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fb faed 	bl	8000544 <__aeabi_i2d>
 8004f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f6e:	f7fb fb53 	bl	8000618 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb f995 	bl	80002a8 <__aeabi_dsub>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004f86:	6a38      	ldr	r0, [r7, #32]
 8004f88:	f7fb fadc 	bl	8000544 <__aeabi_i2d>
 8004f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f90:	f7fb fb42 	bl	8000618 <__aeabi_dmul>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f9c:	f7fb f986 	bl	80002ac <__adddf3>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES/current_ADC_power;
 8004fa8:	6838      	ldr	r0, [r7, #0]
 8004faa:	f7fb facb 	bl	8000544 <__aeabi_i2d>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fb6:	f7fb fc59 	bl	800086c <__aeabi_ddiv>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	ec43 2b17 	vmov	d7, r2, r3
}
 8004fc2:	eeb0 0a47 	vmov.f32	s0, s14
 8004fc6:	eef0 0a67 	vmov.f32	s1, s15
 8004fca:	3730      	adds	r7, #48	; 0x30
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd0:	20002288 	.word	0x20002288
 8004fd4:	200001f0 	.word	0x200001f0
 8004fd8:	2000021c 	.word	0x2000021c

08004fdc <Approximation_temperature>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температуры
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_temperature(double T_coef)
{
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	ed87 0b00 	vstr	d0, [r7]
	double RES = 0, a, b;
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < (num_of_temperature_cal_points-1); i++) if (T_coef > T_coef_cal[i]) index++;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e012      	b.n	8005022 <Approximation_temperature+0x46>
 8004ffc:	4a53      	ldr	r2, [pc, #332]	; (800514c <Approximation_temperature+0x170>)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4413      	add	r3, r2
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800500c:	f7fb fd94 	bl	8000b38 <__aeabi_dcmpgt>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <Approximation_temperature+0x40>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	3301      	adds	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b02      	cmp	r3, #2
 8005026:	dde9      	ble.n	8004ffc <Approximation_temperature+0x20>

	if (index == 0) a = (double)(Temperature_cal_points[index + 1] - Temperature_cal_points[index]) / (double)(T_coef_cal[index + 1] - T_coef_cal[index]);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d12c      	bne.n	8005088 <Approximation_temperature+0xac>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3301      	adds	r3, #1
 8005032:	4a47      	ldr	r2, [pc, #284]	; (8005150 <Approximation_temperature+0x174>)
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4413      	add	r3, r2
 8005038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800503c:	4a44      	ldr	r2, [pc, #272]	; (8005150 <Approximation_temperature+0x174>)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4413      	add	r3, r2
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f7fb f92e 	bl	80002a8 <__aeabi_dsub>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4614      	mov	r4, r2
 8005052:	461d      	mov	r5, r3
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	3301      	adds	r3, #1
 8005058:	4a3c      	ldr	r2, [pc, #240]	; (800514c <Approximation_temperature+0x170>)
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <Approximation_temperature+0x170>)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f7fb f91b 	bl	80002a8 <__aeabi_dsub>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4620      	mov	r0, r4
 8005078:	4629      	mov	r1, r5
 800507a:	f7fb fbf7 	bl	800086c <__aeabi_ddiv>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005086:	e02b      	b.n	80050e0 <Approximation_temperature+0x104>
	else a = (double)(Temperature_cal_points[index] - Temperature_cal_points[index - 1]) / (double)(T_coef_cal[index] - T_coef_cal[index - 1]);
 8005088:	4a31      	ldr	r2, [pc, #196]	; (8005150 <Approximation_temperature+0x174>)
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	4413      	add	r3, r2
 8005090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	3b01      	subs	r3, #1
 8005098:	4a2d      	ldr	r2, [pc, #180]	; (8005150 <Approximation_temperature+0x174>)
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	f7fb f901 	bl	80002a8 <__aeabi_dsub>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4614      	mov	r4, r2
 80050ac:	461d      	mov	r5, r3
 80050ae:	4a27      	ldr	r2, [pc, #156]	; (800514c <Approximation_temperature+0x170>)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4413      	add	r3, r2
 80050b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3b01      	subs	r3, #1
 80050be:	4a23      	ldr	r2, [pc, #140]	; (800514c <Approximation_temperature+0x170>)
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb f8ee 	bl	80002a8 <__aeabi_dsub>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4620      	mov	r0, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	f7fb fbca 	bl	800086c <__aeabi_ddiv>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = (double)Temperature_cal_points[index] - (double)T_coef_cal[index] * a;
 80050e0:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <Approximation_temperature+0x174>)
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050ec:	4a17      	ldr	r2, [pc, #92]	; (800514c <Approximation_temperature+0x170>)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	4413      	add	r3, r2
 80050f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050fc:	f7fb fa8c 	bl	8000618 <__aeabi_dmul>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb f8ce 	bl	80002a8 <__aeabi_dsub>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * T_coef;
 8005114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005118:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800511c:	f7fb fa7c 	bl	8000618 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005128:	f7fb f8c0 	bl	80002ac <__adddf3>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8005134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005138:	ec43 2b17 	vmov	d7, r2, r3
}
 800513c:	eeb0 0a47 	vmov.f32	s0, s14
 8005140:	eef0 0a67 	vmov.f32	s1, s15
 8005144:	3728      	adds	r7, #40	; 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bdb0      	pop	{r4, r5, r7, pc}
 800514a:	bf00      	nop
 800514c:	20000248 	.word	0x20000248
 8005150:	20000268 	.word	0x20000268

08005154 <Temperature_correction>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Коррекция давления по температуре
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Temperature_correction(double uncorrect_Pressure, double affect_temp)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	ed87 0b02 	vstr	d0, [r7, #8]
 800515e:	ed87 1b00 	vstr	d1, [r7]
	return (uncorrect_Pressure + (cal_temperature - affect_temp) * affect);
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <Temperature_correction+0x54>)
 8005164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800516c:	f7fb f89c 	bl	80002a8 <__aeabi_dsub>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <Temperature_correction+0x58>)
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f7fb fa4b 	bl	8000618 <__aeabi_dmul>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800518e:	f7fb f88d 	bl	80002ac <__adddf3>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	ec43 2b17 	vmov	d7, r2, r3
}
 800519a:	eeb0 0a47 	vmov.f32	s0, s14
 800519e:	eef0 0a67 	vmov.f32	s1, s15
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000288 	.word	0x20000288
 80051ac:	200008c8 	.word	0x200008c8

080051b0 <calculate_current>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Расчет тока и напряжения, формулы Тимура
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double calculate_current(double data)
{
 80051b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_current = -0.0000741921796439735;
	//b_current = 9.9684133071094100000;
	//c_current = 0.0080740815705555100;
	RES = (-b_current+(sqrt((b_current*b_current)-(4*a_current*(c_current-data)))))/(2*a_current);
 80051bc:	4b2e      	ldr	r3, [pc, #184]	; (8005278 <calculate_current+0xc8>)
 80051be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051c2:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <calculate_current+0xc8>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb fa26 	bl	8000618 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4614      	mov	r4, r2
 80051d2:	461d      	mov	r5, r3
 80051d4:	4b29      	ldr	r3, [pc, #164]	; (800527c <calculate_current+0xcc>)
 80051d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <calculate_current+0xd0>)
 80051e0:	f7fb fa1a 	bl	8000618 <__aeabi_dmul>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4690      	mov	r8, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	4b25      	ldr	r3, [pc, #148]	; (8005284 <calculate_current+0xd4>)
 80051ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f6:	f7fb f857 	bl	80002a8 <__aeabi_dsub>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4640      	mov	r0, r8
 8005200:	4649      	mov	r1, r9
 8005202:	f7fb fa09 	bl	8000618 <__aeabi_dmul>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	f7fb f84b 	bl	80002a8 <__aeabi_dsub>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	ec43 2b17 	vmov	d7, r2, r3
 800521a:	eeb0 0a47 	vmov.f32	s0, s14
 800521e:	eef0 0a67 	vmov.f32	s1, s15
 8005222:	f01c fb6d 	bl	8021900 <sqrt>
 8005226:	ec51 0b10 	vmov	r0, r1, d0
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <calculate_current+0xc8>)
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f7fb f83a 	bl	80002a8 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4614      	mov	r4, r2
 800523a:	461d      	mov	r5, r3
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <calculate_current+0xcc>)
 800523e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	f7fb f831 	bl	80002ac <__adddf3>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4620      	mov	r0, r4
 8005250:	4629      	mov	r1, r5
 8005252:	f7fb fb0b 	bl	800086c <__aeabi_ddiv>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 800525e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005262:	ec43 2b17 	vmov	d7, r2, r3
}
 8005266:	eeb0 0a47 	vmov.f32	s0, s14
 800526a:	eef0 0a67 	vmov.f32	s1, s15
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005276:	bf00      	nop
 8005278:	20006c18 	.word	0x20006c18
 800527c:	20006c00 	.word	0x20006c00
 8005280:	40100000 	.word	0x40100000
 8005284:	20006bf8 	.word	0x20006bf8

08005288 <calculate_voltage>:

double calculate_voltage(double data)
{
 8005288:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_voltage = 0.0000160989032721161;
	//b_voltage = 9.6660275246403800000;
	//c_voltage = 0.0066157945677234600;
	RES = (-b_voltage+(sqrt((b_voltage*b_voltage)-(4*a_voltage*(c_voltage-data)))))/(2*a_voltage);
 8005294:	4b2e      	ldr	r3, [pc, #184]	; (8005350 <calculate_voltage+0xc8>)
 8005296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800529a:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <calculate_voltage+0xc8>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fb f9ba 	bl	8000618 <__aeabi_dmul>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4614      	mov	r4, r2
 80052aa:	461d      	mov	r5, r3
 80052ac:	4b29      	ldr	r3, [pc, #164]	; (8005354 <calculate_voltage+0xcc>)
 80052ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	4b28      	ldr	r3, [pc, #160]	; (8005358 <calculate_voltage+0xd0>)
 80052b8:	f7fb f9ae 	bl	8000618 <__aeabi_dmul>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4690      	mov	r8, r2
 80052c2:	4699      	mov	r9, r3
 80052c4:	4b25      	ldr	r3, [pc, #148]	; (800535c <calculate_voltage+0xd4>)
 80052c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ce:	f7fa ffeb 	bl	80002a8 <__aeabi_dsub>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4640      	mov	r0, r8
 80052d8:	4649      	mov	r1, r9
 80052da:	f7fb f99d 	bl	8000618 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ffdf 	bl	80002a8 <__aeabi_dsub>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	ec43 2b17 	vmov	d7, r2, r3
 80052f2:	eeb0 0a47 	vmov.f32	s0, s14
 80052f6:	eef0 0a67 	vmov.f32	s1, s15
 80052fa:	f01c fb01 	bl	8021900 <sqrt>
 80052fe:	ec51 0b10 	vmov	r0, r1, d0
 8005302:	4b13      	ldr	r3, [pc, #76]	; (8005350 <calculate_voltage+0xc8>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ffce 	bl	80002a8 <__aeabi_dsub>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4614      	mov	r4, r2
 8005312:	461d      	mov	r5, r3
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <calculate_voltage+0xcc>)
 8005316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	f7fa ffc5 	bl	80002ac <__adddf3>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f7fb fa9f 	bl	800086c <__aeabi_ddiv>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 8005336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800533a:	ec43 2b17 	vmov	d7, r2, r3
}
 800533e:	eeb0 0a47 	vmov.f32	s0, s14
 8005342:	eef0 0a67 	vmov.f32	s1, s15
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800534e:	bf00      	nop
 8005350:	20006bf0 	.word	0x20006bf0
 8005354:	20006c08 	.word	0x20006c08
 8005358:	40100000 	.word	0x40100000
 800535c:	20006c10 	.word	0x20006c10

08005360 <Logging_init>:
	[RefVoltage_tag]=10,
	[AutoGainCoef_period_tag]=19,
};

void Logging_init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
	disk_initialize(W25FatFs.drv);
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <Logging_init+0x14>)
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	4618      	mov	r0, r3
 800536a:	f00c ff87 	bl	801227c <disk_initialize>
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20007620 	.word	0x20007620

08005378 <Create_File>:



void Create_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	461a      	mov	r2, r3
 8005384:	460b      	mov	r3, r1
 8005386:	72fb      	strb	r3, [r7, #11]
 8005388:	4613      	mov	r3, r2
 800538a:	813b      	strh	r3, [r7, #8]
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 800538c:	2200      	movs	r2, #0
 800538e:	490b      	ldr	r1, [pc, #44]	; (80053bc <Create_File+0x44>)
 8005390:	480b      	ldr	r0, [pc, #44]	; (80053c0 <Create_File+0x48>)
 8005392:	f00e fc97 	bl	8013cc4 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_WRITE|FA_CREATE_ALWAYS);
 8005396:	220a      	movs	r2, #10
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	480a      	ldr	r0, [pc, #40]	; (80053c4 <Create_File+0x4c>)
 800539c:	f00e fcd8 	bl	8013d50 <f_open>
	f_write(&MyFile, FileText, FileSize, &testBytes);
 80053a0:	893a      	ldrh	r2, [r7, #8]
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <Create_File+0x50>)
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4807      	ldr	r0, [pc, #28]	; (80053c4 <Create_File+0x4c>)
 80053a8:	f00e ffcf 	bl	801434a <f_write>
	f_close(&MyFile);
 80053ac:	4805      	ldr	r0, [pc, #20]	; (80053c4 <Create_File+0x4c>)
 80053ae:	f00f f9bf 	bl	8014730 <f_close>
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20008750 	.word	0x20008750
 80053c0:	20007620 	.word	0x20007620
 80053c4:	200073f0 	.word	0x200073f0
 80053c8:	20007850 	.word	0x20007850

080053cc <Read_File>:



uint8_t Read_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	461a      	mov	r2, r3
 80053d8:	460b      	mov	r3, r1
 80053da:	72fb      	strb	r3, [r7, #11]
 80053dc:	4613      	mov	r3, r2
 80053de:	813b      	strh	r3, [r7, #8]
	uint8_t RES;
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 80053e0:	2200      	movs	r2, #0
 80053e2:	490c      	ldr	r1, [pc, #48]	; (8005414 <Read_File+0x48>)
 80053e4:	480c      	ldr	r0, [pc, #48]	; (8005418 <Read_File+0x4c>)
 80053e6:	f00e fc6d 	bl	8013cc4 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_READ|FA_OPEN_ALWAYS);
 80053ea:	2211      	movs	r2, #17
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	480b      	ldr	r0, [pc, #44]	; (800541c <Read_File+0x50>)
 80053f0:	f00e fcae 	bl	8013d50 <f_open>
	RES=f_read(&MyFile, FileText, FileSize, &testBytes);
 80053f4:	893a      	ldrh	r2, [r7, #8]
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <Read_File+0x54>)
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4808      	ldr	r0, [pc, #32]	; (800541c <Read_File+0x50>)
 80053fc:	f00e fe66 	bl	80140cc <f_read>
 8005400:	4603      	mov	r3, r0
 8005402:	75fb      	strb	r3, [r7, #23]
	f_close(&MyFile);
 8005404:	4805      	ldr	r0, [pc, #20]	; (800541c <Read_File+0x50>)
 8005406:	f00f f993 	bl	8014730 <f_close>
	return RES;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20008750 	.word	0x20008750
 8005418:	20007620 	.word	0x20007620
 800541c:	200073f0 	.word	0x200073f0
 8005420:	20007850 	.word	0x20007850

08005424 <FileParser>:

uint16_t FileParser(uint8_t tag)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 800542e:	2300      	movs	r3, #0
 8005430:	81fb      	strh	r3, [r7, #14]
	uint16_t RES=0, Sym_cntr=0;
 8005432:	2300      	movs	r3, #0
 8005434:	81bb      	strh	r3, [r7, #12]
 8005436:	2300      	movs	r3, #0
 8005438:	817b      	strh	r3, [r7, #10]

	for(i=0;i<file_size;i++)
 800543a:	2300      	movs	r3, #0
 800543c:	81fb      	strh	r3, [r7, #14]
 800543e:	e042      	b.n	80054c6 <FileParser+0xa2>
	{
		if(ReadFileBuf[i]==TAG_STRING[tag][Sym_cntr])
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	4a26      	ldr	r2, [pc, #152]	; (80054dc <FileParser+0xb8>)
 8005444:	5cd2      	ldrb	r2, [r2, r3]
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	4925      	ldr	r1, [pc, #148]	; (80054e0 <FileParser+0xbc>)
 800544a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800544e:	897b      	ldrh	r3, [r7, #10]
 8005450:	440b      	add	r3, r1
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d133      	bne.n	80054c0 <FileParser+0x9c>
		{
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005458:	e013      	b.n	8005482 <FileParser+0x5e>
			{
				if(ReadFileBuf[i+Sym_cntr]==TAG_STRING[tag][Sym_cntr])
 800545a:	89fa      	ldrh	r2, [r7, #14]
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	4413      	add	r3, r2
 8005460:	4a1e      	ldr	r2, [pc, #120]	; (80054dc <FileParser+0xb8>)
 8005462:	5cd2      	ldrb	r2, [r2, r3]
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	491e      	ldr	r1, [pc, #120]	; (80054e0 <FileParser+0xbc>)
 8005468:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800546c:	897b      	ldrh	r3, [r7, #10]
 800546e:	440b      	add	r3, r1
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d102      	bne.n	800547c <FileParser+0x58>
				{RES++;}
 8005476:	89bb      	ldrh	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	81bb      	strh	r3, [r7, #12]
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 800547c:	897b      	ldrh	r3, [r7, #10]
 800547e:	3301      	adds	r3, #1
 8005480:	817b      	strh	r3, [r7, #10]
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <FileParser+0xc0>)
 8005486:	5cd3      	ldrb	r3, [r2, r3]
 8005488:	b29b      	uxth	r3, r3
 800548a:	897a      	ldrh	r2, [r7, #10]
 800548c:	429a      	cmp	r2, r3
 800548e:	d3e4      	bcc.n	800545a <FileParser+0x36>
			}
			if(RES==TAG_NUM_OF_SYM[tag])
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	4a14      	ldr	r2, [pc, #80]	; (80054e4 <FileParser+0xc0>)
 8005494:	5cd3      	ldrb	r3, [r2, r3]
 8005496:	b29b      	uxth	r3, r3
 8005498:	89ba      	ldrh	r2, [r7, #12]
 800549a:	429a      	cmp	r2, r3
 800549c:	d10c      	bne.n	80054b8 <FileParser+0x94>
			{RES=i+TAG_NUM_OF_SYM[tag]+1; i=file_size;}
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <FileParser+0xc0>)
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	89fb      	ldrh	r3, [r7, #14]
 80054a8:	4413      	add	r3, r2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3301      	adds	r3, #1
 80054ae:	81bb      	strh	r3, [r7, #12]
 80054b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80054b4:	81fb      	strh	r3, [r7, #14]
 80054b6:	e003      	b.n	80054c0 <FileParser+0x9c>
			else {RES=Sym_cntr=0;}
 80054b8:	2300      	movs	r3, #0
 80054ba:	817b      	strh	r3, [r7, #10]
 80054bc:	897b      	ldrh	r3, [r7, #10]
 80054be:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<file_size;i++)
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	3301      	adds	r3, #1
 80054c4:	81fb      	strh	r3, [r7, #14]
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054cc:	d3b8      	bcc.n	8005440 <FileParser+0x1c>
		}
	}

	return RES;
 80054ce:	89bb      	ldrh	r3, [r7, #12]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20006c20 	.word	0x20006c20
 80054e0:	20000290 	.word	0x20000290
 80054e4:	08023ecc 	.word	0x08023ecc

080054e8 <scan_double>:
	}
}


double scan_double(uint16_t offset, uint8_t *buff)
{
 80054e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ec:	b088      	sub	sp, #32
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	4603      	mov	r3, r0
 80054f2:	6039      	str	r1, [r7, #0]
 80054f4:	80fb      	strh	r3, [r7, #6]
	uint64_t res64=0;
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t i=0, point=0, sign=0, after_size=0;
 8005502:	2300      	movs	r3, #0
 8005504:	82fb      	strh	r3, [r7, #22]
 8005506:	2300      	movs	r3, #0
 8005508:	82bb      	strh	r3, [r7, #20]
 800550a:	2300      	movs	r3, #0
 800550c:	827b      	strh	r3, [r7, #18]
 800550e:	2300      	movs	r3, #0
 8005510:	823b      	strh	r3, [r7, #16]
	double RES=0;
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(buff[offset]=='-')sign=1;
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	4413      	add	r3, r2
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b2d      	cmp	r3, #45	; 0x2d
 8005528:	d101      	bne.n	800552e <scan_double+0x46>
 800552a:	2301      	movs	r3, #1
 800552c:	827b      	strh	r3, [r7, #18]

	// Find point
	for(i=0;i<30;i++)
 800552e:	2300      	movs	r3, #0
 8005530:	82fb      	strh	r3, [r7, #22]
 8005532:	e034      	b.n	800559e <scan_double+0xb6>
	{
		if((buff[i+sign+offset]==',')||(buff[i+sign+offset]=='.')) point=i;
 8005534:	8afa      	ldrh	r2, [r7, #22]
 8005536:	8a7b      	ldrh	r3, [r7, #18]
 8005538:	441a      	add	r2, r3
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	4413      	add	r3, r2
 800553e:	461a      	mov	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b2c      	cmp	r3, #44	; 0x2c
 8005548:	d00a      	beq.n	8005560 <scan_double+0x78>
 800554a:	8afa      	ldrh	r2, [r7, #22]
 800554c:	8a7b      	ldrh	r3, [r7, #18]
 800554e:	441a      	add	r2, r3
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	4413      	add	r3, r2
 8005554:	461a      	mov	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	4413      	add	r3, r2
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b2e      	cmp	r3, #46	; 0x2e
 800555e:	d101      	bne.n	8005564 <scan_double+0x7c>
 8005560:	8afb      	ldrh	r3, [r7, #22]
 8005562:	82bb      	strh	r3, [r7, #20]
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) {after_size=i; i=30;}
 8005564:	8afa      	ldrh	r2, [r7, #22]
 8005566:	8a7b      	ldrh	r3, [r7, #18]
 8005568:	441a      	add	r2, r3
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	4413      	add	r3, r2
 800556e:	461a      	mov	r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	4413      	add	r3, r2
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b0d      	cmp	r3, #13
 8005578:	d00a      	beq.n	8005590 <scan_double+0xa8>
 800557a:	8afa      	ldrh	r2, [r7, #22]
 800557c:	8a7b      	ldrh	r3, [r7, #18]
 800557e:	441a      	add	r2, r3
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	4413      	add	r3, r2
 8005584:	461a      	mov	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	4413      	add	r3, r2
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b0a      	cmp	r3, #10
 800558e:	d103      	bne.n	8005598 <scan_double+0xb0>
 8005590:	8afb      	ldrh	r3, [r7, #22]
 8005592:	823b      	strh	r3, [r7, #16]
 8005594:	231e      	movs	r3, #30
 8005596:	82fb      	strh	r3, [r7, #22]
	for(i=0;i<30;i++)
 8005598:	8afb      	ldrh	r3, [r7, #22]
 800559a:	3301      	adds	r3, #1
 800559c:	82fb      	strh	r3, [r7, #22]
 800559e:	8afb      	ldrh	r3, [r7, #22]
 80055a0:	2b1d      	cmp	r3, #29
 80055a2:	d9c7      	bls.n	8005534 <scan_double+0x4c>
	}

	if(after_size>19)after_size=19;
 80055a4:	8a3b      	ldrh	r3, [r7, #16]
 80055a6:	2b13      	cmp	r3, #19
 80055a8:	d901      	bls.n	80055ae <scan_double+0xc6>
 80055aa:	2313      	movs	r3, #19
 80055ac:	823b      	strh	r3, [r7, #16]
	for(i=0;i<after_size;i++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	82fb      	strh	r3, [r7, #22]
 80055b2:	e04d      	b.n	8005650 <scan_double+0x168>
	{
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) break;
 80055b4:	8afa      	ldrh	r2, [r7, #22]
 80055b6:	8a7b      	ldrh	r3, [r7, #18]
 80055b8:	441a      	add	r2, r3
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	4413      	add	r3, r2
 80055be:	461a      	mov	r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	4413      	add	r3, r2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b0d      	cmp	r3, #13
 80055c8:	d046      	beq.n	8005658 <scan_double+0x170>
 80055ca:	8afa      	ldrh	r2, [r7, #22]
 80055cc:	8a7b      	ldrh	r3, [r7, #18]
 80055ce:	441a      	add	r2, r3
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	4413      	add	r3, r2
 80055d4:	461a      	mov	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	4413      	add	r3, r2
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b0a      	cmp	r3, #10
 80055de:	d03b      	beq.n	8005658 <scan_double+0x170>
		if((i!=point)||(point==0))
 80055e0:	8afa      	ldrh	r2, [r7, #22]
 80055e2:	8abb      	ldrh	r3, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d102      	bne.n	80055ee <scan_double+0x106>
 80055e8:	8abb      	ldrh	r3, [r7, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d12d      	bne.n	800564a <scan_double+0x162>
		{
			res64*=10;
 80055ee:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80055f2:	4622      	mov	r2, r4
 80055f4:	462b      	mov	r3, r5
 80055f6:	f04f 0000 	mov.w	r0, #0
 80055fa:	f04f 0100 	mov.w	r1, #0
 80055fe:	0099      	lsls	r1, r3, #2
 8005600:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005604:	0090      	lsls	r0, r2, #2
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	1912      	adds	r2, r2, r4
 800560c:	eb45 0303 	adc.w	r3, r5, r3
 8005610:	eb12 0a02 	adds.w	sl, r2, r2
 8005614:	eb43 0b03 	adc.w	fp, r3, r3
 8005618:	4652      	mov	r2, sl
 800561a:	465b      	mov	r3, fp
 800561c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			res64+=buff[i+sign+offset]-48;
 8005620:	8afa      	ldrh	r2, [r7, #22]
 8005622:	8a7b      	ldrh	r3, [r7, #18]
 8005624:	441a      	add	r2, r3
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	4413      	add	r3, r2
 800562a:	461a      	mov	r2, r3
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	4413      	add	r3, r2
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	3b30      	subs	r3, #48	; 0x30
 8005634:	461a      	mov	r2, r3
 8005636:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800563a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800563e:	eb10 0802 	adds.w	r8, r0, r2
 8005642:	eb41 0903 	adc.w	r9, r1, r3
 8005646:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i=0;i<after_size;i++)
 800564a:	8afb      	ldrh	r3, [r7, #22]
 800564c:	3301      	adds	r3, #1
 800564e:	82fb      	strh	r3, [r7, #22]
 8005650:	8afa      	ldrh	r2, [r7, #22]
 8005652:	8a3b      	ldrh	r3, [r7, #16]
 8005654:	429a      	cmp	r2, r3
 8005656:	d3ad      	bcc.n	80055b4 <scan_double+0xcc>
		}
	}

	if(point!=0){after_size-=1;
 8005658:	8abb      	ldrh	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d022      	beq.n	80056a4 <scan_double+0x1bc>
 800565e:	8a3b      	ldrh	r3, [r7, #16]
 8005660:	3b01      	subs	r3, #1
 8005662:	823b      	strh	r3, [r7, #16]
	RES = (double)res64;
 8005664:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005668:	f7fa ffa0 	bl	80005ac <__aeabi_ul2d>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<(after_size-point);i++)RES *= 0.1;}
 8005674:	2300      	movs	r3, #0
 8005676:	82fb      	strh	r3, [r7, #22]
 8005678:	e00d      	b.n	8005696 <scan_double+0x1ae>
 800567a:	a319      	add	r3, pc, #100	; (adr r3, 80056e0 <scan_double+0x1f8>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005684:	f7fa ffc8 	bl	8000618 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005690:	8afb      	ldrh	r3, [r7, #22]
 8005692:	3301      	adds	r3, #1
 8005694:	82fb      	strh	r3, [r7, #22]
 8005696:	8afa      	ldrh	r2, [r7, #22]
 8005698:	8a39      	ldrh	r1, [r7, #16]
 800569a:	8abb      	ldrh	r3, [r7, #20]
 800569c:	1acb      	subs	r3, r1, r3
 800569e:	429a      	cmp	r2, r3
 80056a0:	dbeb      	blt.n	800567a <scan_double+0x192>
 80056a2:	e007      	b.n	80056b4 <scan_double+0x1cc>
	else RES = (double)res64;
 80056a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056a8:	f7fa ff80 	bl	80005ac <__aeabi_ul2d>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(sign==1)RES=-RES;
 80056b4:	8a7b      	ldrh	r3, [r7, #18]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d105      	bne.n	80056c6 <scan_double+0x1de>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	60fb      	str	r3, [r7, #12]
	return RES;
 80056c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80056ce:	eeb0 0a47 	vmov.f32	s0, s14
 80056d2:	eef0 0a67 	vmov.f32	s1, s15
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056de:	bf00      	nop
 80056e0:	9999999a 	.word	0x9999999a
 80056e4:	3fb99999 	.word	0x3fb99999

080056e8 <Save_Settings>:

void Save_Settings(uint8_t TAG, int32_t data)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
	uint8_t Name[11]="CONFIG.CSV\0";
 80056f4:	4a4c      	ldr	r2, [pc, #304]	; (8005828 <Save_Settings+0x140>)
 80056f6:	f107 030c 	add.w	r3, r7, #12
 80056fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80056fc:	c303      	stmia	r3!, {r0, r1}
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	3302      	adds	r3, #2
 8005702:	0c12      	lsrs	r2, r2, #16
 8005704:	701a      	strb	r2, [r3, #0]
	uint16_t index, i, end_index;
	while(Read_File(Name, 11, ReadFileBuf, file_size)!=FR_OK){};
 8005706:	bf00      	nop
 8005708:	f107 000c 	add.w	r0, r7, #12
 800570c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005710:	4a46      	ldr	r2, [pc, #280]	; (800582c <Save_Settings+0x144>)
 8005712:	210b      	movs	r1, #11
 8005714:	f7ff fe5a 	bl	80053cc <Read_File>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f4      	bne.n	8005708 <Save_Settings+0x20>
	//{
		index=FileParser(TAG);
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fe7f 	bl	8005424 <FileParser>
 8005726:	4603      	mov	r3, r0
 8005728:	837b      	strh	r3, [r7, #26]
		for(i=index;i<file_size-1;i++)
 800572a:	8b7b      	ldrh	r3, [r7, #26]
 800572c:	83fb      	strh	r3, [r7, #30]
 800572e:	e013      	b.n	8005758 <Save_Settings+0x70>
		{
			if((ReadFileBuf[i]==0x0D)&&(ReadFileBuf[i+1]==0x0A))
 8005730:	8bfb      	ldrh	r3, [r7, #30]
 8005732:	4a3e      	ldr	r2, [pc, #248]	; (800582c <Save_Settings+0x144>)
 8005734:	5cd3      	ldrb	r3, [r2, r3]
 8005736:	2b0d      	cmp	r3, #13
 8005738:	d10b      	bne.n	8005752 <Save_Settings+0x6a>
 800573a:	8bfb      	ldrh	r3, [r7, #30]
 800573c:	3301      	adds	r3, #1
 800573e:	4a3b      	ldr	r2, [pc, #236]	; (800582c <Save_Settings+0x144>)
 8005740:	5cd3      	ldrb	r3, [r2, r3]
 8005742:	2b0a      	cmp	r3, #10
 8005744:	d105      	bne.n	8005752 <Save_Settings+0x6a>
			{
				end_index=i+2;
 8005746:	8bfb      	ldrh	r3, [r7, #30]
 8005748:	3302      	adds	r3, #2
 800574a:	83bb      	strh	r3, [r7, #28]
				i=file_size-1;
 800574c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005750:	83fb      	strh	r3, [r7, #30]
		for(i=index;i<file_size-1;i++)
 8005752:	8bfb      	ldrh	r3, [r7, #30]
 8005754:	3301      	adds	r3, #1
 8005756:	83fb      	strh	r3, [r7, #30]
 8005758:	8bfb      	ldrh	r3, [r7, #30]
 800575a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800575e:	4293      	cmp	r3, r2
 8005760:	d9e6      	bls.n	8005730 <Save_Settings+0x48>
			}
		}

		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	4a32      	ldr	r2, [pc, #200]	; (8005830 <Save_Settings+0x148>)
 8005766:	5cd3      	ldrb	r3, [r2, r3]
 8005768:	b29b      	uxth	r3, r3
 800576a:	8b7a      	ldrh	r2, [r7, #26]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	83fb      	strh	r3, [r7, #30]
 8005774:	e011      	b.n	800579a <Save_Settings+0xb2>
		{
			ReadFileBuf[i]=ReadFileBuf[i+end_index-(index-TAG_NUM_OF_SYM[TAG]-1)];
 8005776:	8bfa      	ldrh	r2, [r7, #30]
 8005778:	8bbb      	ldrh	r3, [r7, #28]
 800577a:	441a      	add	r2, r3
 800577c:	8b7b      	ldrh	r3, [r7, #26]
 800577e:	79f9      	ldrb	r1, [r7, #7]
 8005780:	482b      	ldr	r0, [pc, #172]	; (8005830 <Save_Settings+0x148>)
 8005782:	5c41      	ldrb	r1, [r0, r1]
 8005784:	1a5b      	subs	r3, r3, r1
 8005786:	3b01      	subs	r3, #1
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	8bfb      	ldrh	r3, [r7, #30]
 800578c:	4927      	ldr	r1, [pc, #156]	; (800582c <Save_Settings+0x144>)
 800578e:	5c89      	ldrb	r1, [r1, r2]
 8005790:	4a26      	ldr	r2, [pc, #152]	; (800582c <Save_Settings+0x144>)
 8005792:	54d1      	strb	r1, [r2, r3]
		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 8005794:	8bfb      	ldrh	r3, [r7, #30]
 8005796:	3301      	adds	r3, #1
 8005798:	83fb      	strh	r3, [r7, #30]
 800579a:	8bfa      	ldrh	r2, [r7, #30]
 800579c:	8bbb      	ldrh	r3, [r7, #28]
 800579e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80057a2:	429a      	cmp	r2, r3
 80057a4:	dbe7      	blt.n	8005776 <Save_Settings+0x8e>
		}

		index=FileParser(end_of_file_tag)-TAG_NUM_OF_SYM[end_of_file_tag]-1;
 80057a6:	2000      	movs	r0, #0
 80057a8:	f7ff fe3c 	bl	8005424 <FileParser>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	230b      	movs	r3, #11
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	837b      	strh	r3, [r7, #26]

		for(i=0;i<TAG_NUM_OF_SYM[TAG];i++)ReadFileBuf[i+index]=TAG_STRING[TAG][i];
 80057bc:	2300      	movs	r3, #0
 80057be:	83fb      	strh	r3, [r7, #30]
 80057c0:	e00e      	b.n	80057e0 <Save_Settings+0xf8>
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	4a1b      	ldr	r2, [pc, #108]	; (8005834 <Save_Settings+0x14c>)
 80057c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057ca:	8bfb      	ldrh	r3, [r7, #30]
 80057cc:	441a      	add	r2, r3
 80057ce:	8bf9      	ldrh	r1, [r7, #30]
 80057d0:	8b7b      	ldrh	r3, [r7, #26]
 80057d2:	440b      	add	r3, r1
 80057d4:	7811      	ldrb	r1, [r2, #0]
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <Save_Settings+0x144>)
 80057d8:	54d1      	strb	r1, [r2, r3]
 80057da:	8bfb      	ldrh	r3, [r7, #30]
 80057dc:	3301      	adds	r3, #1
 80057de:	83fb      	strh	r3, [r7, #30]
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <Save_Settings+0x148>)
 80057e4:	5cd3      	ldrb	r3, [r2, r3]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8bfa      	ldrh	r2, [r7, #30]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d3e9      	bcc.n	80057c2 <Save_Settings+0xda>
		sprintf(ReadFileBuf+index+TAG_NUM_OF_SYM[TAG],";%d\r\nend_of_file;\r\n", data);
 80057ee:	8b7b      	ldrh	r3, [r7, #26]
 80057f0:	79fa      	ldrb	r2, [r7, #7]
 80057f2:	490f      	ldr	r1, [pc, #60]	; (8005830 <Save_Settings+0x148>)
 80057f4:	5c8a      	ldrb	r2, [r1, r2]
 80057f6:	4413      	add	r3, r2
 80057f8:	4a0c      	ldr	r2, [pc, #48]	; (800582c <Save_Settings+0x144>)
 80057fa:	4413      	add	r3, r2
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	490e      	ldr	r1, [pc, #56]	; (8005838 <Save_Settings+0x150>)
 8005800:	4618      	mov	r0, r3
 8005802:	f018 fac5 	bl	801dd90 <siprintf>
		ReadFileBuf[file_size-1]="\0";
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <Save_Settings+0x154>)
 8005808:	b2da      	uxtb	r2, r3
 800580a:	4b08      	ldr	r3, [pc, #32]	; (800582c <Save_Settings+0x144>)
 800580c:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
		Create_File(Name, 11, ReadFileBuf, file_size);
 8005810:	f107 000c 	add.w	r0, r7, #12
 8005814:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005818:	4a04      	ldr	r2, [pc, #16]	; (800582c <Save_Settings+0x144>)
 800581a:	210b      	movs	r1, #11
 800581c:	f7ff fdac 	bl	8005378 <Create_File>
	//}
}
 8005820:	bf00      	nop
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	0802204c 	.word	0x0802204c
 800582c:	20006c20 	.word	0x20006c20
 8005830:	08023ecc 	.word	0x08023ecc
 8005834:	20000290 	.word	0x20000290
 8005838:	08022034 	.word	0x08022034
 800583c:	08022048 	.word	0x08022048

08005840 <Read_Variable_From_File>:



double Read_Variable_From_File(uint8_t name)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
	return scan_double(FileParser(name), ReadFileBuf);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fde9 	bl	8005424 <FileParser>
 8005852:	4603      	mov	r3, r0
 8005854:	4907      	ldr	r1, [pc, #28]	; (8005874 <Read_Variable_From_File+0x34>)
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fe46 	bl	80054e8 <scan_double>
 800585c:	eeb0 7a40 	vmov.f32	s14, s0
 8005860:	eef0 7a60 	vmov.f32	s15, s1
}
 8005864:	eeb0 0a47 	vmov.f32	s0, s14
 8005868:	eef0 0a67 	vmov.f32	s1, s15
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20006c20 	.word	0x20006c20

08005878 <Load_Settings>:



void Load_Settings(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
	uint8_t Name_settings[11]="CONFIG.CSV\0";
 800587e:	4ad2      	ldr	r2, [pc, #840]	; (8005bc8 <Load_Settings+0x350>)
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	ca07      	ldmia	r2, {r0, r1, r2}
 8005886:	c303      	stmia	r3!, {r0, r1}
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	3302      	adds	r3, #2
 800588c:	0c12      	lsrs	r2, r2, #16
 800588e:	701a      	strb	r2, [r3, #0]
	uint8_t Name_calibr[8]="CAL.CSV\0";
 8005890:	4ace      	ldr	r2, [pc, #824]	; (8005bcc <Load_Settings+0x354>)
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005898:	e883 0003 	stmia.w	r3, {r0, r1}

	// Читаем конфигурационный файл
	while(Read_File(Name_settings, 11, ReadFileBuf, file_size)!=FR_OK){};
 800589c:	bf00      	nop
 800589e:	f107 000c 	add.w	r0, r7, #12
 80058a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80058a6:	4aca      	ldr	r2, [pc, #808]	; (8005bd0 <Load_Settings+0x358>)
 80058a8:	210b      	movs	r1, #11
 80058aa:	f7ff fd8f 	bl	80053cc <Read_File>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f4      	bne.n	800589e <Load_Settings+0x26>
	//{
		gauge_error = Read_Variable_From_File(gauge_error_tag);
 80058b4:	200f      	movs	r0, #15
 80058b6:	f7ff ffc3 	bl	8005840 <Read_Variable_From_File>
 80058ba:	eeb0 7a40 	vmov.f32	s14, s0
 80058be:	eef0 7a60 	vmov.f32	s15, s1
 80058c2:	4bc4      	ldr	r3, [pc, #784]	; (8005bd4 <Load_Settings+0x35c>)
 80058c4:	ed83 7b00 	vstr	d7, [r3]
		display_brightness = (uint16_t)Read_Variable_From_File(display_brightness_tag);
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7ff ffb9 	bl	8005840 <Read_Variable_From_File>
 80058ce:	ec53 2b10 	vmov	r2, r3, d0
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	f7fb f977 	bl	8000bc8 <__aeabi_d2uiz>
 80058da:	4603      	mov	r3, r0
 80058dc:	b29b      	uxth	r3, r3
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	4bbd      	ldr	r3, [pc, #756]	; (8005bd8 <Load_Settings+0x360>)
 80058e2:	701a      	strb	r2, [r3, #0]
		display_contrast = (uint16_t)Read_Variable_From_File(display_contrast_tag);
 80058e4:	2002      	movs	r0, #2
 80058e6:	f7ff ffab 	bl	8005840 <Read_Variable_From_File>
 80058ea:	ec53 2b10 	vmov	r2, r3, d0
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	f7fb f969 	bl	8000bc8 <__aeabi_d2uiz>
 80058f6:	4603      	mov	r3, r0
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4bb7      	ldr	r3, [pc, #732]	; (8005bdc <Load_Settings+0x364>)
 80058fe:	701a      	strb	r2, [r3, #0]
		mm_peak = (uint16_t)Read_Variable_From_File(mm_peak_tag);
 8005900:	2003      	movs	r0, #3
 8005902:	f7ff ff9d 	bl	8005840 <Read_Variable_From_File>
 8005906:	ec53 2b10 	vmov	r2, r3, d0
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	f7fb f95b 	bl	8000bc8 <__aeabi_d2uiz>
 8005912:	4603      	mov	r3, r0
 8005914:	b29b      	uxth	r3, r3
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4bb1      	ldr	r3, [pc, #708]	; (8005be0 <Load_Settings+0x368>)
 800591a:	701a      	strb	r2, [r3, #0]
		leak_detect = (uint16_t)Read_Variable_From_File(leak_detect_tag);
 800591c:	2004      	movs	r0, #4
 800591e:	f7ff ff8f 	bl	8005840 <Read_Variable_From_File>
 8005922:	ec53 2b10 	vmov	r2, r3, d0
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	f7fb f94d 	bl	8000bc8 <__aeabi_d2uiz>
 800592e:	4603      	mov	r3, r0
 8005930:	b29b      	uxth	r3, r3
 8005932:	b2da      	uxtb	r2, r3
 8005934:	4bab      	ldr	r3, [pc, #684]	; (8005be4 <Load_Settings+0x36c>)
 8005936:	701a      	strb	r2, [r3, #0]
		PV = (uint16_t)Read_Variable_From_File(PV_tag);
 8005938:	2005      	movs	r0, #5
 800593a:	f7ff ff81 	bl	8005840 <Read_Variable_From_File>
 800593e:	ec53 2b10 	vmov	r2, r3, d0
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	f7fb f93f 	bl	8000bc8 <__aeabi_d2uiz>
 800594a:	4603      	mov	r3, r0
 800594c:	b29b      	uxth	r3, r3
 800594e:	b2da      	uxtb	r2, r3
 8005950:	4ba5      	ldr	r3, [pc, #660]	; (8005be8 <Load_Settings+0x370>)
 8005952:	701a      	strb	r2, [r3, #0]
		PI = (uint16_t)Read_Variable_From_File(PI_tag);
 8005954:	2006      	movs	r0, #6
 8005956:	f7ff ff73 	bl	8005840 <Read_Variable_From_File>
 800595a:	ec53 2b10 	vmov	r2, r3, d0
 800595e:	4610      	mov	r0, r2
 8005960:	4619      	mov	r1, r3
 8005962:	f7fb f931 	bl	8000bc8 <__aeabi_d2uiz>
 8005966:	4603      	mov	r3, r0
 8005968:	b29b      	uxth	r3, r3
 800596a:	b2da      	uxtb	r2, r3
 800596c:	4b9f      	ldr	r3, [pc, #636]	; (8005bec <Load_Settings+0x374>)
 800596e:	701a      	strb	r2, [r3, #0]
		PE = (uint16_t)Read_Variable_From_File(PE_tag);
 8005970:	2007      	movs	r0, #7
 8005972:	f7ff ff65 	bl	8005840 <Read_Variable_From_File>
 8005976:	ec53 2b10 	vmov	r2, r3, d0
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	f7fb f923 	bl	8000bc8 <__aeabi_d2uiz>
 8005982:	4603      	mov	r3, r0
 8005984:	b29b      	uxth	r3, r3
 8005986:	b2da      	uxtb	r2, r3
 8005988:	4b99      	ldr	r3, [pc, #612]	; (8005bf0 <Load_Settings+0x378>)
 800598a:	701a      	strb	r2, [r3, #0]
		PGA_GAIN = (uint16_t)Read_Variable_From_File(PGA_GAIN_tag);
 800598c:	2008      	movs	r0, #8
 800598e:	f7ff ff57 	bl	8005840 <Read_Variable_From_File>
 8005992:	ec53 2b10 	vmov	r2, r3, d0
 8005996:	4610      	mov	r0, r2
 8005998:	4619      	mov	r1, r3
 800599a:	f7fb f915 	bl	8000bc8 <__aeabi_d2uiz>
 800599e:	4603      	mov	r3, r0
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	4b93      	ldr	r3, [pc, #588]	; (8005bf4 <Load_Settings+0x37c>)
 80059a6:	701a      	strb	r2, [r3, #0]
		ADC_SPS = (uint16_t)Read_Variable_From_File(ADC_SPS_tag);
 80059a8:	2009      	movs	r0, #9
 80059aa:	f7ff ff49 	bl	8005840 <Read_Variable_From_File>
 80059ae:	ec53 2b10 	vmov	r2, r3, d0
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	f7fb f907 	bl	8000bc8 <__aeabi_d2uiz>
 80059ba:	4603      	mov	r3, r0
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	4b8d      	ldr	r3, [pc, #564]	; (8005bf8 <Load_Settings+0x380>)
 80059c2:	701a      	strb	r2, [r3, #0]
		adc_calibration_mode = (uint16_t)Read_Variable_From_File(adc_calibration_mode_tag);
 80059c4:	200a      	movs	r0, #10
 80059c6:	f7ff ff3b 	bl	8005840 <Read_Variable_From_File>
 80059ca:	ec53 2b10 	vmov	r2, r3, d0
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	f7fb f8f9 	bl	8000bc8 <__aeabi_d2uiz>
 80059d6:	4603      	mov	r3, r0
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	4b87      	ldr	r3, [pc, #540]	; (8005bfc <Load_Settings+0x384>)
 80059de:	701a      	strb	r2, [r3, #0]
		ADC_Buff_size = (uint16_t)Read_Variable_From_File(ADC_Buff_size_tag);
 80059e0:	200b      	movs	r0, #11
 80059e2:	f7ff ff2d 	bl	8005840 <Read_Variable_From_File>
 80059e6:	ec53 2b10 	vmov	r2, r3, d0
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	f7fb f8eb 	bl	8000bc8 <__aeabi_d2uiz>
 80059f2:	4603      	mov	r3, r0
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	4b82      	ldr	r3, [pc, #520]	; (8005c00 <Load_Settings+0x388>)
 80059f8:	801a      	strh	r2, [r3, #0]
		Auto_Off_Time = (uint16_t)Read_Variable_From_File(Auto_Off_Time_tag);
 80059fa:	200c      	movs	r0, #12
 80059fc:	f7ff ff20 	bl	8005840 <Read_Variable_From_File>
 8005a00:	ec53 2b10 	vmov	r2, r3, d0
 8005a04:	4610      	mov	r0, r2
 8005a06:	4619      	mov	r1, r3
 8005a08:	f7fb f8de 	bl	8000bc8 <__aeabi_d2uiz>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	4b7c      	ldr	r3, [pc, #496]	; (8005c04 <Load_Settings+0x38c>)
 8005a12:	801a      	strh	r2, [r3, #0]
		serial_num = (uint16_t)Read_Variable_From_File(serial_num_tag);
 8005a14:	200d      	movs	r0, #13
 8005a16:	f7ff ff13 	bl	8005840 <Read_Variable_From_File>
 8005a1a:	ec53 2b10 	vmov	r2, r3, d0
 8005a1e:	4610      	mov	r0, r2
 8005a20:	4619      	mov	r1, r3
 8005a22:	f7fb f8d1 	bl	8000bc8 <__aeabi_d2uiz>
 8005a26:	4603      	mov	r3, r0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b76      	ldr	r3, [pc, #472]	; (8005c08 <Load_Settings+0x390>)
 8005a2e:	601a      	str	r2, [r3, #0]
		gauge_range = (uint16_t)Read_Variable_From_File(gauge_range_tag);
 8005a30:	200e      	movs	r0, #14
 8005a32:	f7ff ff05 	bl	8005840 <Read_Variable_From_File>
 8005a36:	ec53 2b10 	vmov	r2, r3, d0
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f7fb f8c3 	bl	8000bc8 <__aeabi_d2uiz>
 8005a42:	4603      	mov	r3, r0
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	4b70      	ldr	r3, [pc, #448]	; (8005c0c <Load_Settings+0x394>)
 8005a4a:	601a      	str	r2, [r3, #0]
		light_delay = (uint16_t)Read_Variable_From_File(light_delay_tag);
 8005a4c:	2010      	movs	r0, #16
 8005a4e:	f7ff fef7 	bl	8005840 <Read_Variable_From_File>
 8005a52:	ec53 2b10 	vmov	r2, r3, d0
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f7fb f8b5 	bl	8000bc8 <__aeabi_d2uiz>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	4b6b      	ldr	r3, [pc, #428]	; (8005c10 <Load_Settings+0x398>)
 8005a64:	801a      	strh	r2, [r3, #0]
		logging = (uint16_t)Read_Variable_From_File(logging_tag);
 8005a66:	2011      	movs	r0, #17
 8005a68:	f7ff feea 	bl	8005840 <Read_Variable_From_File>
 8005a6c:	ec53 2b10 	vmov	r2, r3, d0
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	f7fb f8a8 	bl	8000bc8 <__aeabi_d2uiz>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b65      	ldr	r3, [pc, #404]	; (8005c14 <Load_Settings+0x39c>)
 8005a80:	701a      	strb	r2, [r3, #0]
		logging_start_hour = (uint16_t)Read_Variable_From_File(logging_start_hour_tag);
 8005a82:	2012      	movs	r0, #18
 8005a84:	f7ff fedc 	bl	8005840 <Read_Variable_From_File>
 8005a88:	ec53 2b10 	vmov	r2, r3, d0
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f7fb f89a 	bl	8000bc8 <__aeabi_d2uiz>
 8005a94:	4603      	mov	r3, r0
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b5f      	ldr	r3, [pc, #380]	; (8005c18 <Load_Settings+0x3a0>)
 8005a9c:	701a      	strb	r2, [r3, #0]
		logging_start_min = (uint16_t)Read_Variable_From_File(logging_start_min_tag);
 8005a9e:	2013      	movs	r0, #19
 8005aa0:	f7ff fece 	bl	8005840 <Read_Variable_From_File>
 8005aa4:	ec53 2b10 	vmov	r2, r3, d0
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f7fb f88c 	bl	8000bc8 <__aeabi_d2uiz>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	4b59      	ldr	r3, [pc, #356]	; (8005c1c <Load_Settings+0x3a4>)
 8005ab8:	701a      	strb	r2, [r3, #0]
		logging_start_sec = (uint16_t)Read_Variable_From_File(logging_start_sec_tag);
 8005aba:	2014      	movs	r0, #20
 8005abc:	f7ff fec0 	bl	8005840 <Read_Variable_From_File>
 8005ac0:	ec53 2b10 	vmov	r2, r3, d0
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f7fb f87e 	bl	8000bc8 <__aeabi_d2uiz>
 8005acc:	4603      	mov	r3, r0
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	4b53      	ldr	r3, [pc, #332]	; (8005c20 <Load_Settings+0x3a8>)
 8005ad4:	701a      	strb	r2, [r3, #0]
		logging_period = (uint16_t)Read_Variable_From_File(logging_period_tag);
 8005ad6:	2015      	movs	r0, #21
 8005ad8:	f7ff feb2 	bl	8005840 <Read_Variable_From_File>
 8005adc:	ec53 2b10 	vmov	r2, r3, d0
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f7fb f870 	bl	8000bc8 <__aeabi_d2uiz>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4b4d      	ldr	r3, [pc, #308]	; (8005c24 <Load_Settings+0x3ac>)
 8005af0:	701a      	strb	r2, [r3, #0]
		logging_len = (uint16_t)Read_Variable_From_File(logging_len_tag);
 8005af2:	2016      	movs	r0, #22
 8005af4:	f7ff fea4 	bl	8005840 <Read_Variable_From_File>
 8005af8:	ec53 2b10 	vmov	r2, r3, d0
 8005afc:	4610      	mov	r0, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	f7fb f862 	bl	8000bc8 <__aeabi_d2uiz>
 8005b04:	4603      	mov	r3, r0
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <Load_Settings+0x3b0>)
 8005b0c:	701a      	strb	r2, [r3, #0]
		logging_num = (uint16_t)Read_Variable_From_File(logging_num_tag);
 8005b0e:	2017      	movs	r0, #23
 8005b10:	f7ff fe96 	bl	8005840 <Read_Variable_From_File>
 8005b14:	ec53 2b10 	vmov	r2, r3, d0
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	f7fb f854 	bl	8000bc8 <__aeabi_d2uiz>
 8005b20:	4603      	mov	r3, r0
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <Load_Settings+0x3b4>)
 8005b28:	701a      	strb	r2, [r3, #0]
		AutoAmpCoef=(uint8_t)Read_Variable_From_File(AutoAmpCoef_tag);
 8005b2a:	201e      	movs	r0, #30
 8005b2c:	f7ff fe88 	bl	8005840 <Read_Variable_From_File>
 8005b30:	ec53 2b10 	vmov	r2, r3, d0
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	f7fb f846 	bl	8000bc8 <__aeabi_d2uiz>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	4b3b      	ldr	r3, [pc, #236]	; (8005c30 <Load_Settings+0x3b8>)
 8005b42:	701a      	strb	r2, [r3, #0]
		AutoOffCoef_period=(uint16_t)Read_Variable_From_File(AutoOffCoef_period_tag);
 8005b44:	201f      	movs	r0, #31
 8005b46:	f7ff fe7b 	bl	8005840 <Read_Variable_From_File>
 8005b4a:	ec53 2b10 	vmov	r2, r3, d0
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7fb f839 	bl	8000bc8 <__aeabi_d2uiz>
 8005b56:	4603      	mov	r3, r0
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <Load_Settings+0x3bc>)
 8005b5c:	801a      	strh	r2, [r3, #0]
		AutoGainCoef_period=(uint16_t)Read_Variable_From_File(AutoGainCoef_period_tag);
 8005b5e:	2021      	movs	r0, #33	; 0x21
 8005b60:	f7ff fe6e 	bl	8005840 <Read_Variable_From_File>
 8005b64:	ec53 2b10 	vmov	r2, r3, d0
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f7fb f82c 	bl	8000bc8 <__aeabi_d2uiz>
 8005b70:	4603      	mov	r3, r0
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <Load_Settings+0x3c0>)
 8005b76:	801a      	strh	r2, [r3, #0]

	//}

		// Читаем калибровочный файл
		while(Read_File(Name_calibr, 8, ReadFileBuf, file_size)!=FR_OK){};
 8005b78:	bf00      	nop
 8005b7a:	1d38      	adds	r0, r7, #4
 8005b7c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b80:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <Load_Settings+0x358>)
 8005b82:	2108      	movs	r1, #8
 8005b84:	f7ff fc22 	bl	80053cc <Read_File>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f5      	bne.n	8005b7a <Load_Settings+0x302>
		a_current=Read_Variable_From_File(a_current_tag);
 8005b8e:	2018      	movs	r0, #24
 8005b90:	f7ff fe56 	bl	8005840 <Read_Variable_From_File>
 8005b94:	eeb0 7a40 	vmov.f32	s14, s0
 8005b98:	eef0 7a60 	vmov.f32	s15, s1
 8005b9c:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <Load_Settings+0x3c4>)
 8005b9e:	ed83 7b00 	vstr	d7, [r3]
		b_current=Read_Variable_From_File(b_current_tag);
 8005ba2:	2019      	movs	r0, #25
 8005ba4:	f7ff fe4c 	bl	8005840 <Read_Variable_From_File>
 8005ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8005bac:	eef0 7a60 	vmov.f32	s15, s1
 8005bb0:	4b23      	ldr	r3, [pc, #140]	; (8005c40 <Load_Settings+0x3c8>)
 8005bb2:	ed83 7b00 	vstr	d7, [r3]
		c_current=Read_Variable_From_File(c_current_tag);
 8005bb6:	201a      	movs	r0, #26
 8005bb8:	f7ff fe42 	bl	8005840 <Read_Variable_From_File>
 8005bbc:	eeb0 7a40 	vmov.f32	s14, s0
 8005bc0:	eef0 7a60 	vmov.f32	s15, s1
 8005bc4:	e03e      	b.n	8005c44 <Load_Settings+0x3cc>
 8005bc6:	bf00      	nop
 8005bc8:	0802204c 	.word	0x0802204c
 8005bcc:	08022058 	.word	0x08022058
 8005bd0:	20006c20 	.word	0x20006c20
 8005bd4:	200000a8 	.word	0x200000a8
 8005bd8:	20000098 	.word	0x20000098
 8005bdc:	20000099 	.word	0x20000099
 8005be0:	200008aa 	.word	0x200008aa
 8005be4:	200008ab 	.word	0x200008ab
 8005be8:	200008ac 	.word	0x200008ac
 8005bec:	200008ad 	.word	0x200008ad
 8005bf0:	200008ae 	.word	0x200008ae
 8005bf4:	2000009a 	.word	0x2000009a
 8005bf8:	2000009b 	.word	0x2000009b
 8005bfc:	200008af 	.word	0x200008af
 8005c00:	2000009c 	.word	0x2000009c
 8005c04:	200008b0 	.word	0x200008b0
 8005c08:	200000a0 	.word	0x200000a0
 8005c0c:	200008b4 	.word	0x200008b4
 8005c10:	200000b0 	.word	0x200000b0
 8005c14:	200008b8 	.word	0x200008b8
 8005c18:	200008b9 	.word	0x200008b9
 8005c1c:	200008ba 	.word	0x200008ba
 8005c20:	200008bb 	.word	0x200008bb
 8005c24:	200008bc 	.word	0x200008bc
 8005c28:	200008bd 	.word	0x200008bd
 8005c2c:	200008be 	.word	0x200008be
 8005c30:	200008a9 	.word	0x200008a9
 8005c34:	2000217c 	.word	0x2000217c
 8005c38:	20002114 	.word	0x20002114
 8005c3c:	20006c00 	.word	0x20006c00
 8005c40:	20006c18 	.word	0x20006c18
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <Load_Settings+0x42c>)
 8005c46:	ed83 7b00 	vstr	d7, [r3]
		a_voltage=Read_Variable_From_File(a_voltage_tag);
 8005c4a:	201b      	movs	r0, #27
 8005c4c:	f7ff fdf8 	bl	8005840 <Read_Variable_From_File>
 8005c50:	eeb0 7a40 	vmov.f32	s14, s0
 8005c54:	eef0 7a60 	vmov.f32	s15, s1
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <Load_Settings+0x430>)
 8005c5a:	ed83 7b00 	vstr	d7, [r3]
		b_voltage=Read_Variable_From_File(b_voltage_tag);
 8005c5e:	201c      	movs	r0, #28
 8005c60:	f7ff fdee 	bl	8005840 <Read_Variable_From_File>
 8005c64:	eeb0 7a40 	vmov.f32	s14, s0
 8005c68:	eef0 7a60 	vmov.f32	s15, s1
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <Load_Settings+0x434>)
 8005c6e:	ed83 7b00 	vstr	d7, [r3]
		c_voltage=Read_Variable_From_File(c_voltage_tag);
 8005c72:	201d      	movs	r0, #29
 8005c74:	f7ff fde4 	bl	8005840 <Read_Variable_From_File>
 8005c78:	eeb0 7a40 	vmov.f32	s14, s0
 8005c7c:	eef0 7a60 	vmov.f32	s15, s1
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <Load_Settings+0x438>)
 8005c82:	ed83 7b00 	vstr	d7, [r3]
		RefVoltage=Read_Variable_From_File(RefVoltage_tag);
 8005c86:	2020      	movs	r0, #32
 8005c88:	f7ff fdda 	bl	8005840 <Read_Variable_From_File>
 8005c8c:	eeb0 7a40 	vmov.f32	s14, s0
 8005c90:	eef0 7a60 	vmov.f32	s15, s1
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <Load_Settings+0x43c>)
 8005c96:	ed83 7b00 	vstr	d7, [r3]
//		my_itoa(123456.654321, RAM, 0, 20);
//		my_itoa(-654321.123456, RAM, 0, 20);
//		my_itoa(555555, RAM, 0, 20);
//		my_itoa(-444444, RAM, 0, 20);
//		RAM[0]=0;
}
 8005c9a:	bf00      	nop
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20006bf8 	.word	0x20006bf8
 8005ca8:	20006c08 	.word	0x20006c08
 8005cac:	20006bf0 	.word	0x20006bf0
 8005cb0:	20006c10 	.word	0x20006c10
 8005cb4:	20000088 	.word	0x20000088

08005cb8 <led_on>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_on(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
	if(ERROR_REG!=0)LED(1,0,0);
 8005cbc:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <led_on+0x28>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <led_on+0x16>
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f7fc fa49 	bl	8002160 <LED>
	Task_STOP(9);
 8005cce:	2009      	movs	r0, #9
 8005cd0:	f7fd faa0 	bl	8003214 <Task_STOP>
	Task_RUN(10, 250);
 8005cd4:	21fa      	movs	r1, #250	; 0xfa
 8005cd6:	200a      	movs	r0, #10
 8005cd8:	f7fd fab6 	bl	8003248 <Task_RUN>
}
 8005cdc:	bf00      	nop
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000898 	.word	0x20000898

08005ce4 <led_off>:
void led_off(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
	LED(0,0,0);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2100      	movs	r1, #0
 8005cec:	2000      	movs	r0, #0
 8005cee:	f7fc fa37 	bl	8002160 <LED>
	Task_STOP(10);
 8005cf2:	200a      	movs	r0, #10
 8005cf4:	f7fd fa8e 	bl	8003214 <Task_STOP>
	Task_RUN(9, 250);
 8005cf8:	21fa      	movs	r1, #250	; 0xfa
 8005cfa:	2009      	movs	r0, #9
 8005cfc:	f7fd faa4 	bl	8003248 <Task_RUN>
}
 8005d00:	bf00      	nop
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d0a:	f001 ff86 	bl	8007c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d0e:	f000 f891 	bl	8005e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d12:	f000 fcb7 	bl	8006684 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005d16:	f000 f9fd 	bl	8006114 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005d1a:	f000 fa3b 	bl	8006194 <MX_I2C2_Init>
  MX_RTC_Init();
 8005d1e:	f000 fa79 	bl	8006214 <MX_RTC_Init>
  MX_SPI1_Init();
 8005d22:	f000 faa3 	bl	800626c <MX_SPI1_Init>
  MX_SPI2_Init();
 8005d26:	f000 fadf 	bl	80062e8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8005d2a:	f000 fb1b 	bl	8006364 <MX_SPI3_Init>
  MX_TIM2_Init();
 8005d2e:	f000 fb57 	bl	80063e0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8005d32:	f000 fbb1 	bl	8006498 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005d36:	f000 fc3f 	bl	80065b8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8005d3a:	f00c f9ab 	bl	8012094 <MX_FATFS_Init>
  MX_DMA_Init();
 8005d3e:	f000 fc73 	bl	8006628 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8005d42:	f012 ff19 	bl	8018b78 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8005d46:	f000 f94f 	bl	8005fe8 <MX_ADC2_Init>
  MX_ADC1_Init();
 8005d4a:	f000 f8d3 	bl	8005ef4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8005d4e:	f000 fbfd 	bl	800654c <MX_TIM6_Init>
  MX_DAC1_Init();
 8005d52:	f000 f9ad 	bl	80060b0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Таски
  	new_task[1]=Parser_process;			// Парсинг команд через виртуальный компорт
 8005d56:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <main+0xf4>)
 8005d58:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <main+0xf8>)
 8005d5a:	605a      	str	r2, [r3, #4]
	new_task[2]=ADC_process;			// АЦП
 8005d5c:	4b26      	ldr	r3, [pc, #152]	; (8005df8 <main+0xf4>)
 8005d5e:	4a28      	ldr	r2, [pc, #160]	; (8005e00 <main+0xfc>)
 8005d60:	609a      	str	r2, [r3, #8]
	new_task[3]=Display_process;		// Дисплей
 8005d62:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <main+0xf4>)
 8005d64:	4a27      	ldr	r2, [pc, #156]	; (8005e04 <main+0x100>)
 8005d66:	60da      	str	r2, [r3, #12]
	new_task[4]=Buttons_process;		// Кнопки
 8005d68:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <main+0xf4>)
 8005d6a:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <main+0x104>)
 8005d6c:	611a      	str	r2, [r3, #16]
	new_task[5]=RTC_process;			// Часы реального времени
 8005d6e:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <main+0xf4>)
 8005d70:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <main+0x108>)
 8005d72:	615a      	str	r2, [r3, #20]
	new_task[6]=Auto_OFF_process;		// Автовыключение
 8005d74:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <main+0xf4>)
 8005d76:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <main+0x10c>)
 8005d78:	619a      	str	r2, [r3, #24]
	new_task[7]=Temperature_process;	// Температура МКУ
 8005d7a:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <main+0xf4>)
 8005d7c:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <main+0x110>)
 8005d7e:	61da      	str	r2, [r3, #28]
	new_task[8]=Battery_process;		// Напряжение на батарее
 8005d80:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <main+0xf4>)
 8005d82:	4a25      	ldr	r2, [pc, #148]	; (8005e18 <main+0x114>)
 8005d84:	621a      	str	r2, [r3, #32]

	new_task[9]=led_on;
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <main+0xf4>)
 8005d88:	4a24      	ldr	r2, [pc, #144]	; (8005e1c <main+0x118>)
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24
	new_task[10]=led_off;
 8005d8c:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <main+0xf4>)
 8005d8e:	4a24      	ldr	r2, [pc, #144]	; (8005e20 <main+0x11c>)
 8005d90:	629a      	str	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Питание на самоблокировку
 8005d92:	2201      	movs	r2, #1
 8005d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d98:	4822      	ldr	r0, [pc, #136]	; (8005e24 <main+0x120>)
 8005d9a:	f004 fa61 	bl	800a260 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Питание на самоблокировку
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005da4:	4820      	ldr	r0, [pc, #128]	; (8005e28 <main+0x124>)
 8005da6:	f004 fa5b 	bl	800a260 <HAL_GPIO_WritePin>
  TURN_ON_ADC_POWER();
 8005daa:	2201      	movs	r2, #1
 8005dac:	2140      	movs	r1, #64	; 0x40
 8005dae:	481d      	ldr	r0, [pc, #116]	; (8005e24 <main+0x120>)
 8005db0:	f004 fa56 	bl	800a260 <HAL_GPIO_WritePin>
 8005db4:	2201      	movs	r2, #1
 8005db6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dba:	481b      	ldr	r0, [pc, #108]	; (8005e28 <main+0x124>)
 8005dbc:	f004 fa50 	bl	800a260 <HAL_GPIO_WritePin>

  Buttons_init();
 8005dc0:	f7fc f8f6 	bl	8001fb0 <Buttons_init>
  Display_init();
 8005dc4:	f7fc ff4c 	bl	8002c60 <Display_init>
  ADC_init();
 8005dc8:	f7fb fbba 	bl	8001540 <ADC_init>
  W25_Init();
 8005dcc:	f7fe fe40 	bl	8004a50 <W25_Init>
  BLueTooth_Configuration(BLE_config);
 8005dd0:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <main+0x128>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fc f96d 	bl	80020b4 <BLueTooth_Configuration>
  Logging_init();
 8005dda:	f7ff fac1 	bl	8005360 <Logging_init>
  Load_Settings();
 8005dde:	f7ff fd4b 	bl	8005878 <Load_Settings>

  uint8_t CID = MAX77960_Read_Reg(MAX77960_CID);
 8005de2:	2000      	movs	r0, #0
 8005de4:	f7fd fa72 	bl	80032cc <MAX77960_Read_Reg>
 8005de8:	4603      	mov	r3, r0
 8005dea:	71fb      	strb	r3, [r7, #7]

  Play_Sound((char*)"INTRO.WAV");
 8005dec:	4810      	ldr	r0, [pc, #64]	; (8005e30 <main+0x12c>)
 8005dee:	f000 fd7b 	bl	80068e8 <Play_Sound>
  ELSPIRE_OS_KERNEL();
 8005df2:	f7fd f997 	bl	8003124 <ELSPIRE_OS_KERNEL>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005df6:	e7fe      	b.n	8005df6 <main+0xf2>
 8005df8:	20001f44 	.word	0x20001f44
 8005dfc:	08003e4d 	.word	0x08003e4d
 8005e00:	080019a9 	.word	0x080019a9
 8005e04:	08003039 	.word	0x08003039
 8005e08:	08002795 	.word	0x08002795
 8005e0c:	08017cb1 	.word	0x08017cb1
 8005e10:	08016f5d 	.word	0x08016f5d
 8005e14:	08007819 	.word	0x08007819
 8005e18:	08017ad1 	.word	0x08017ad1
 8005e1c:	08005cb9 	.word	0x08005cb9
 8005e20:	08005ce5 	.word	0x08005ce5
 8005e24:	48000800 	.word	0x48000800
 8005e28:	48000c00 	.word	0x48000c00
 8005e2c:	20000080 	.word	0x20000080
 8005e30:	08022060 	.word	0x08022060

08005e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b096      	sub	sp, #88	; 0x58
 8005e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e3a:	f107 0314 	add.w	r3, r7, #20
 8005e3e:	2244      	movs	r2, #68	; 0x44
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f017 f91c 	bl	801d080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e48:	463b      	mov	r3, r7
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
 8005e50:	609a      	str	r2, [r3, #8]
 8005e52:	60da      	str	r2, [r3, #12]
 8005e54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005e56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005e5a:	f006 f817 	bl	800be8c <HAL_PWREx_ControlVoltageScaling>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005e64:	f000 fd3a 	bl	80068dc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005e68:	f005 fff2 	bl	800be50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005e6c:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <SystemClock_Config+0xbc>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <SystemClock_Config+0xbc>)
 8005e74:	f023 0318 	bic.w	r3, r3, #24
 8005e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005e7c:	2305      	movs	r3, #5
 8005e7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005e86:	2301      	movs	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005e92:	2301      	movs	r3, #1
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005e96:	2314      	movs	r3, #20
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ea6:	f107 0314 	add.w	r3, r7, #20
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f006 f854 	bl	800bf58 <HAL_RCC_OscConfig>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005eb6:	f000 fd11 	bl	80068dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eba:	230f      	movs	r3, #15
 8005ebc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005ece:	463b      	mov	r3, r7
 8005ed0:	2104      	movs	r1, #4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f006 fc66 	bl	800c7a4 <HAL_RCC_ClockConfig>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005ede:	f000 fcfd 	bl	80068dc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8005ee2:	f007 f993 	bl	800d20c <HAL_RCCEx_EnableLSECSS>
}
 8005ee6:	bf00      	nop
 8005ee8:	3758      	adds	r7, #88	; 0x58
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000

08005ef4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08a      	sub	sp, #40	; 0x28
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005efa:	f107 031c 	add.w	r3, r7, #28
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	605a      	str	r2, [r3, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	611a      	str	r2, [r3, #16]
 8005f14:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005f16:	4b31      	ldr	r3, [pc, #196]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f18:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <MX_ADC1_Init+0xec>)
 8005f1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005f1c:	4b2f      	ldr	r3, [pc, #188]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f22:	4b2e      	ldr	r3, [pc, #184]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f28:	4b2c      	ldr	r3, [pc, #176]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f34:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f36:	2204      	movs	r2, #4
 8005f38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005f3a:	4b28      	ldr	r3, [pc, #160]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005f40:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005f46:	4b25      	ldr	r3, [pc, #148]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f4c:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f54:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005f60:	4b1e      	ldr	r3, [pc, #120]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005f68:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f76:	4819      	ldr	r0, [pc, #100]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f78:	f002 f894 	bl	80080a4 <HAL_ADC_Init>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8005f82:	f000 fcab 	bl	80068dc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005f8a:	f107 031c 	add.w	r3, r7, #28
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4812      	ldr	r0, [pc, #72]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005f92:	f003 f895 	bl	80090c0 <HAL_ADCEx_MultiModeConfigChannel>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005f9c:	f000 fc9e 	bl	80068dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005fa0:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <MX_ADC1_Init+0xf0>)
 8005fa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005fa8:	2304      	movs	r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005fac:	237f      	movs	r3, #127	; 0x7f
 8005fae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4807      	ldr	r0, [pc, #28]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005fbe:	f002 fb57 	bl	8008670 <HAL_ADC_ConfigChannel>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005fc8:	f000 fc88 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start(&hadc1);
 8005fcc:	4803      	ldr	r0, [pc, #12]	; (8005fdc <MX_ADC1_Init+0xe8>)
 8005fce:	f002 f9c3 	bl	8008358 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8005fd2:	bf00      	nop
 8005fd4:	3728      	adds	r7, #40	; 0x28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20007b3c 	.word	0x20007b3c
 8005fe0:	50040000 	.word	0x50040000
 8005fe4:	c7520000 	.word	0xc7520000

08005fe8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005fee:	463b      	mov	r3, r7
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	609a      	str	r2, [r3, #8]
 8005ff8:	60da      	str	r2, [r3, #12]
 8005ffa:	611a      	str	r2, [r3, #16]
 8005ffc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8005ffe:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006000:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <MX_ADC2_Init+0xc0>)
 8006002:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006004:	4b27      	ldr	r3, [pc, #156]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006006:	2200      	movs	r2, #0
 8006008:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800600a:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <MX_ADC2_Init+0xbc>)
 800600c:	2200      	movs	r2, #0
 800600e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006010:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006012:	2200      	movs	r2, #0
 8006014:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006016:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006018:	2200      	movs	r2, #0
 800601a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800601c:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <MX_ADC2_Init+0xbc>)
 800601e:	2204      	movs	r2, #4
 8006020:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006022:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006024:	2200      	movs	r2, #0
 8006026:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006028:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <MX_ADC2_Init+0xbc>)
 800602a:	2201      	movs	r2, #1
 800602c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006030:	2201      	movs	r2, #1
 8006032:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006034:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800603c:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <MX_ADC2_Init+0xbc>)
 800603e:	2200      	movs	r2, #0
 8006040:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006042:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006044:	2200      	movs	r2, #0
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <MX_ADC2_Init+0xbc>)
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006050:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006052:	2200      	movs	r2, #0
 8006054:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8006056:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800605e:	4811      	ldr	r0, [pc, #68]	; (80060a4 <MX_ADC2_Init+0xbc>)
 8006060:	f002 f820 	bl	80080a4 <HAL_ADC_Init>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800606a:	f000 fc37 	bl	80068dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <MX_ADC2_Init+0xc4>)
 8006070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006072:	2306      	movs	r3, #6
 8006074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8006076:	2304      	movs	r3, #4
 8006078:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800607a:	237f      	movs	r3, #127	; 0x7f
 800607c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800607e:	2304      	movs	r3, #4
 8006080:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006086:	463b      	mov	r3, r7
 8006088:	4619      	mov	r1, r3
 800608a:	4806      	ldr	r0, [pc, #24]	; (80060a4 <MX_ADC2_Init+0xbc>)
 800608c:	f002 faf0 	bl	8008670 <HAL_ADC_ConfigChannel>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8006096:	f000 fc21 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800609a:	bf00      	nop
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20007ad4 	.word	0x20007ad4
 80060a8:	50040100 	.word	0x50040100
 80060ac:	21800100 	.word	0x21800100

080060b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	2224      	movs	r2, #36	; 0x24
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f016 ffdf 	bl	801d080 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <MX_DAC1_Init+0x5c>)
 80060c4:	4a12      	ldr	r2, [pc, #72]	; (8006110 <MX_DAC1_Init+0x60>)
 80060c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80060c8:	4810      	ldr	r0, [pc, #64]	; (800610c <MX_DAC1_Init+0x5c>)
 80060ca:	f003 f98b 	bl	80093e4 <HAL_DAC_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80060d4:	f000 fc02 	bl	80068dc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80060dc:	2304      	movs	r3, #4
 80060de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	2210      	movs	r2, #16
 80060f0:	4619      	mov	r1, r3
 80060f2:	4806      	ldr	r0, [pc, #24]	; (800610c <MX_DAC1_Init+0x5c>)
 80060f4:	f003 fae6 	bl	80096c4 <HAL_DAC_ConfigChannel>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80060fe:	f000 fbed 	bl	80068dc <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//  HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf, 512, DAC_ALIGN_12B_R);
  /* USER CODE END DAC1_Init 2 */

}
 8006102:	bf00      	nop
 8006104:	3728      	adds	r7, #40	; 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20007ba4 	.word	0x20007ba4
 8006110:	40007400 	.word	0x40007400

08006114 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <MX_I2C1_Init+0x74>)
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <MX_I2C1_Init+0x78>)
 800611c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <MX_I2C1_Init+0x74>)
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <MX_I2C1_Init+0x7c>)
 8006122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006124:	4b18      	ldr	r3, [pc, #96]	; (8006188 <MX_I2C1_Init+0x74>)
 8006126:	2200      	movs	r2, #0
 8006128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800612a:	4b17      	ldr	r3, [pc, #92]	; (8006188 <MX_I2C1_Init+0x74>)
 800612c:	2201      	movs	r2, #1
 800612e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006130:	4b15      	ldr	r3, [pc, #84]	; (8006188 <MX_I2C1_Init+0x74>)
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <MX_I2C1_Init+0x74>)
 8006138:	2200      	movs	r2, #0
 800613a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <MX_I2C1_Init+0x74>)
 800613e:	2200      	movs	r2, #0
 8006140:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <MX_I2C1_Init+0x74>)
 8006144:	2200      	movs	r2, #0
 8006146:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006148:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <MX_I2C1_Init+0x74>)
 800614a:	2200      	movs	r2, #0
 800614c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800614e:	480e      	ldr	r0, [pc, #56]	; (8006188 <MX_I2C1_Init+0x74>)
 8006150:	f004 f8c1 	bl	800a2d6 <HAL_I2C_Init>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800615a:	f000 fbbf 	bl	80068dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800615e:	2100      	movs	r1, #0
 8006160:	4809      	ldr	r0, [pc, #36]	; (8006188 <MX_I2C1_Init+0x74>)
 8006162:	f004 fd11 	bl	800ab88 <HAL_I2CEx_ConfigAnalogFilter>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800616c:	f000 fbb6 	bl	80068dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006170:	2100      	movs	r1, #0
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <MX_I2C1_Init+0x74>)
 8006174:	f004 fd53 	bl	800ac1e <HAL_I2CEx_ConfigDigitalFilter>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800617e:	f000 fbad 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	2000792c 	.word	0x2000792c
 800618c:	40005400 	.word	0x40005400
 8006190:	10909cec 	.word	0x10909cec

08006194 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <MX_I2C2_Init+0x74>)
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <MX_I2C2_Init+0x78>)
 800619c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <MX_I2C2_Init+0x74>)
 80061a0:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <MX_I2C2_Init+0x7c>)
 80061a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80061a4:	4b18      	ldr	r3, [pc, #96]	; (8006208 <MX_I2C2_Init+0x74>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <MX_I2C2_Init+0x74>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061b0:	4b15      	ldr	r3, [pc, #84]	; (8006208 <MX_I2C2_Init+0x74>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <MX_I2C2_Init+0x74>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80061bc:	4b12      	ldr	r3, [pc, #72]	; (8006208 <MX_I2C2_Init+0x74>)
 80061be:	2200      	movs	r2, #0
 80061c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <MX_I2C2_Init+0x74>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <MX_I2C2_Init+0x74>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80061ce:	480e      	ldr	r0, [pc, #56]	; (8006208 <MX_I2C2_Init+0x74>)
 80061d0:	f004 f881 	bl	800a2d6 <HAL_I2C_Init>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80061da:	f000 fb7f 	bl	80068dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80061de:	2100      	movs	r1, #0
 80061e0:	4809      	ldr	r0, [pc, #36]	; (8006208 <MX_I2C2_Init+0x74>)
 80061e2:	f004 fcd1 	bl	800ab88 <HAL_I2CEx_ConfigAnalogFilter>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80061ec:	f000 fb76 	bl	80068dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80061f0:	2100      	movs	r1, #0
 80061f2:	4805      	ldr	r0, [pc, #20]	; (8006208 <MX_I2C2_Init+0x74>)
 80061f4:	f004 fd13 	bl	800ac1e <HAL_I2CEx_ConfigDigitalFilter>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80061fe:	f000 fb6d 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006202:	bf00      	nop
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	200078e0 	.word	0x200078e0
 800620c:	40005800 	.word	0x40005800
 8006210:	10909cec 	.word	0x10909cec

08006214 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006218:	4b12      	ldr	r3, [pc, #72]	; (8006264 <MX_RTC_Init+0x50>)
 800621a:	4a13      	ldr	r2, [pc, #76]	; (8006268 <MX_RTC_Init+0x54>)
 800621c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <MX_RTC_Init+0x50>)
 8006220:	2200      	movs	r2, #0
 8006222:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006224:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <MX_RTC_Init+0x50>)
 8006226:	227f      	movs	r2, #127	; 0x7f
 8006228:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800622a:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <MX_RTC_Init+0x50>)
 800622c:	22ff      	movs	r2, #255	; 0xff
 800622e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <MX_RTC_Init+0x50>)
 8006232:	2200      	movs	r2, #0
 8006234:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <MX_RTC_Init+0x50>)
 8006238:	2200      	movs	r2, #0
 800623a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <MX_RTC_Init+0x50>)
 800623e:	2200      	movs	r2, #0
 8006240:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <MX_RTC_Init+0x50>)
 8006244:	2200      	movs	r2, #0
 8006246:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006248:	4806      	ldr	r0, [pc, #24]	; (8006264 <MX_RTC_Init+0x50>)
 800624a:	f007 f9bf 	bl	800d5cc <HAL_RTC_Init>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006254:	f000 fb42 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_EnableBypassShadow(&hrtc);
 8006258:	4802      	ldr	r0, [pc, #8]	; (8006264 <MX_RTC_Init+0x50>)
 800625a:	f007 fd45 	bl	800dce8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_Init 2 */

}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20007858 	.word	0x20007858
 8006268:	40002800 	.word	0x40002800

0800626c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006270:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <MX_SPI1_Init+0x74>)
 8006272:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <MX_SPI1_Init+0x78>)
 8006274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006276:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <MX_SPI1_Init+0x74>)
 8006278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800627c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <MX_SPI1_Init+0x74>)
 8006280:	2200      	movs	r2, #0
 8006282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006284:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <MX_SPI1_Init+0x74>)
 8006286:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800628a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800628c:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <MX_SPI1_Init+0x74>)
 800628e:	2200      	movs	r2, #0
 8006290:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <MX_SPI1_Init+0x74>)
 8006294:	2200      	movs	r2, #0
 8006296:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <MX_SPI1_Init+0x74>)
 800629a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800629e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062a2:	2230      	movs	r2, #48	; 0x30
 80062a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b2:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062ba:	2207      	movs	r2, #7
 80062bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062be:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062c6:	2208      	movs	r2, #8
 80062c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80062ca:	4805      	ldr	r0, [pc, #20]	; (80062e0 <MX_SPI1_Init+0x74>)
 80062cc:	f007 fd42 	bl	800dd54 <HAL_SPI_Init>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80062d6:	f000 fb01 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80062da:	bf00      	nop
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	2000787c 	.word	0x2000787c
 80062e4:	40013000 	.word	0x40013000

080062e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80062ec:	4b1b      	ldr	r3, [pc, #108]	; (800635c <MX_SPI2_Init+0x74>)
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <MX_SPI2_Init+0x78>)
 80062f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80062f2:	4b1a      	ldr	r3, [pc, #104]	; (800635c <MX_SPI2_Init+0x74>)
 80062f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80062fa:	4b18      	ldr	r3, [pc, #96]	; (800635c <MX_SPI2_Init+0x74>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006300:	4b16      	ldr	r3, [pc, #88]	; (800635c <MX_SPI2_Init+0x74>)
 8006302:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006306:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006308:	4b14      	ldr	r3, [pc, #80]	; (800635c <MX_SPI2_Init+0x74>)
 800630a:	2200      	movs	r2, #0
 800630c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <MX_SPI2_Init+0x74>)
 8006310:	2200      	movs	r2, #0
 8006312:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006314:	4b11      	ldr	r3, [pc, #68]	; (800635c <MX_SPI2_Init+0x74>)
 8006316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800631c:	4b0f      	ldr	r3, [pc, #60]	; (800635c <MX_SPI2_Init+0x74>)
 800631e:	2230      	movs	r2, #48	; 0x30
 8006320:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <MX_SPI2_Init+0x74>)
 8006324:	2200      	movs	r2, #0
 8006326:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <MX_SPI2_Init+0x74>)
 800632a:	2200      	movs	r2, #0
 800632c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <MX_SPI2_Init+0x74>)
 8006330:	2200      	movs	r2, #0
 8006332:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <MX_SPI2_Init+0x74>)
 8006336:	2207      	movs	r2, #7
 8006338:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800633a:	4b08      	ldr	r3, [pc, #32]	; (800635c <MX_SPI2_Init+0x74>)
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <MX_SPI2_Init+0x74>)
 8006342:	2208      	movs	r2, #8
 8006344:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006346:	4805      	ldr	r0, [pc, #20]	; (800635c <MX_SPI2_Init+0x74>)
 8006348:	f007 fd04 	bl	800dd54 <HAL_SPI_Init>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006352:	f000 fac3 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006356:	bf00      	nop
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20001f70 	.word	0x20001f70
 8006360:	40003800 	.word	0x40003800

08006364 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006368:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <MX_SPI3_Init+0x74>)
 800636a:	4a1c      	ldr	r2, [pc, #112]	; (80063dc <MX_SPI3_Init+0x78>)
 800636c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800636e:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <MX_SPI3_Init+0x74>)
 8006370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006374:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <MX_SPI3_Init+0x74>)
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800637c:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <MX_SPI3_Init+0x74>)
 800637e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006382:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <MX_SPI3_Init+0x74>)
 8006386:	2200      	movs	r2, #0
 8006388:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <MX_SPI3_Init+0x74>)
 800638c:	2200      	movs	r2, #0
 800638e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <MX_SPI3_Init+0x74>)
 8006392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006396:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <MX_SPI3_Init+0x74>)
 800639a:	2220      	movs	r2, #32
 800639c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <MX_SPI3_Init+0x74>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <MX_SPI3_Init+0x74>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <MX_SPI3_Init+0x74>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <MX_SPI3_Init+0x74>)
 80063b2:	2207      	movs	r2, #7
 80063b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <MX_SPI3_Init+0x74>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <MX_SPI3_Init+0x74>)
 80063be:	2208      	movs	r2, #8
 80063c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80063c2:	4805      	ldr	r0, [pc, #20]	; (80063d8 <MX_SPI3_Init+0x74>)
 80063c4:	f007 fcc6 	bl	800dd54 <HAL_SPI_Init>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80063ce:	f000 fa85 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	2000638c 	.word	0x2000638c
 80063dc:	40003c00 	.word	0x40003c00

080063e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063e6:	f107 031c 	add.w	r3, r7, #28
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063f2:	463b      	mov	r3, r7
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	611a      	str	r2, [r3, #16]
 8006400:	615a      	str	r2, [r3, #20]
 8006402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006404:	4b23      	ldr	r3, [pc, #140]	; (8006494 <MX_TIM2_Init+0xb4>)
 8006406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800640a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 800640c:	4b21      	ldr	r3, [pc, #132]	; (8006494 <MX_TIM2_Init+0xb4>)
 800640e:	2202      	movs	r2, #2
 8006410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006412:	4b20      	ldr	r3, [pc, #128]	; (8006494 <MX_TIM2_Init+0xb4>)
 8006414:	2200      	movs	r2, #0
 8006416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8006418:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <MX_TIM2_Init+0xb4>)
 800641a:	2264      	movs	r2, #100	; 0x64
 800641c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800641e:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <MX_TIM2_Init+0xb4>)
 8006420:	2200      	movs	r2, #0
 8006422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <MX_TIM2_Init+0xb4>)
 8006426:	2200      	movs	r2, #0
 8006428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800642a:	481a      	ldr	r0, [pc, #104]	; (8006494 <MX_TIM2_Init+0xb4>)
 800642c:	f008 fcce 	bl	800edcc <HAL_TIM_PWM_Init>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8006436:	f000 fa51 	bl	80068dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800643e:	2300      	movs	r3, #0
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006442:	f107 031c 	add.w	r3, r7, #28
 8006446:	4619      	mov	r1, r3
 8006448:	4812      	ldr	r0, [pc, #72]	; (8006494 <MX_TIM2_Init+0xb4>)
 800644a:	f009 fc0b 	bl	800fc64 <HAL_TIMEx_MasterConfigSynchronization>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8006454:	f000 fa42 	bl	80068dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006458:	2360      	movs	r3, #96	; 0x60
 800645a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 800645c:	2332      	movs	r3, #50	; 0x32
 800645e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006460:	2300      	movs	r3, #0
 8006462:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006468:	463b      	mov	r3, r7
 800646a:	2200      	movs	r2, #0
 800646c:	4619      	mov	r1, r3
 800646e:	4809      	ldr	r0, [pc, #36]	; (8006494 <MX_TIM2_Init+0xb4>)
 8006470:	f008 ff2a 	bl	800f2c8 <HAL_TIM_PWM_ConfigChannel>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800647a:	f000 fa2f 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800647e:	2100      	movs	r1, #0
 8006480:	4804      	ldr	r0, [pc, #16]	; (8006494 <MX_TIM2_Init+0xb4>)
 8006482:	f008 fcfb 	bl	800ee7c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006486:	4803      	ldr	r0, [pc, #12]	; (8006494 <MX_TIM2_Init+0xb4>)
 8006488:	f000 ff0e 	bl	80072a8 <HAL_TIM_MspPostInit>

}
 800648c:	bf00      	nop
 800648e:	3728      	adds	r7, #40	; 0x28
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20007c50 	.word	0x20007c50

08006498 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800649e:	f107 031c 	add.w	r3, r7, #28
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064aa:	463b      	mov	r3, r7
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	605a      	str	r2, [r3, #4]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	611a      	str	r2, [r3, #16]
 80064b8:	615a      	str	r2, [r3, #20]
 80064ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80064bc:	4b21      	ldr	r3, [pc, #132]	; (8006544 <MX_TIM4_Init+0xac>)
 80064be:	4a22      	ldr	r2, [pc, #136]	; (8006548 <MX_TIM4_Init+0xb0>)
 80064c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <MX_TIM4_Init+0xac>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064c8:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <MX_TIM4_Init+0xac>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <MX_TIM4_Init+0xac>)
 80064d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064d6:	4b1b      	ldr	r3, [pc, #108]	; (8006544 <MX_TIM4_Init+0xac>)
 80064d8:	2200      	movs	r2, #0
 80064da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064dc:	4b19      	ldr	r3, [pc, #100]	; (8006544 <MX_TIM4_Init+0xac>)
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80064e2:	4818      	ldr	r0, [pc, #96]	; (8006544 <MX_TIM4_Init+0xac>)
 80064e4:	f008 fc72 	bl	800edcc <HAL_TIM_PWM_Init>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80064ee:	f000 f9f5 	bl	80068dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80064fa:	f107 031c 	add.w	r3, r7, #28
 80064fe:	4619      	mov	r1, r3
 8006500:	4810      	ldr	r0, [pc, #64]	; (8006544 <MX_TIM4_Init+0xac>)
 8006502:	f009 fbaf 	bl	800fc64 <HAL_TIMEx_MasterConfigSynchronization>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800650c:	f000 f9e6 	bl	80068dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006510:	2360      	movs	r3, #96	; 0x60
 8006512:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006518:	2300      	movs	r3, #0
 800651a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006520:	463b      	mov	r3, r7
 8006522:	2204      	movs	r2, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4807      	ldr	r0, [pc, #28]	; (8006544 <MX_TIM4_Init+0xac>)
 8006528:	f008 fece 	bl	800f2c8 <HAL_TIM_PWM_ConfigChannel>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8006532:	f000 f9d3 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006536:	4803      	ldr	r0, [pc, #12]	; (8006544 <MX_TIM4_Init+0xac>)
 8006538:	f000 feb6 	bl	80072a8 <HAL_TIM_MspPostInit>

}
 800653c:	bf00      	nop
 800653e:	3728      	adds	r7, #40	; 0x28
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20007c04 	.word	0x20007c04
 8006548:	40000800 	.word	0x40000800

0800654c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	605a      	str	r2, [r3, #4]
 800655a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <MX_TIM6_Init+0x64>)
 800655e:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <MX_TIM6_Init+0x68>)
 8006560:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <MX_TIM6_Init+0x64>)
 8006564:	2202      	movs	r2, #2
 8006566:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006568:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <MX_TIM6_Init+0x64>)
 800656a:	2200      	movs	r2, #0
 800656c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1666;
 800656e:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <MX_TIM6_Init+0x64>)
 8006570:	f240 6282 	movw	r2, #1666	; 0x682
 8006574:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006576:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <MX_TIM6_Init+0x64>)
 8006578:	2200      	movs	r2, #0
 800657a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800657c:	480c      	ldr	r0, [pc, #48]	; (80065b0 <MX_TIM6_Init+0x64>)
 800657e:	f008 faf5 	bl	800eb6c <HAL_TIM_Base_Init>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8006588:	f000 f9a8 	bl	80068dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800658c:	2320      	movs	r3, #32
 800658e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4805      	ldr	r0, [pc, #20]	; (80065b0 <MX_TIM6_Init+0x64>)
 800659a:	f009 fb63 	bl	800fc64 <HAL_TIMEx_MasterConfigSynchronization>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80065a4:	f000 f99a 	bl	80068dc <Error_Handler>
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//    HAL_TIM_Base_Start_IT(&htim6);
 //   HAL_TIM_Base_Start(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20007bb8 	.word	0x20007bb8
 80065b4:	40001000 	.word	0x40001000

080065b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80065bc:	4b18      	ldr	r3, [pc, #96]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065be:	4a19      	ldr	r2, [pc, #100]	; (8006624 <MX_USART1_UART_Init+0x6c>)
 80065c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80065c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80065ca:	4b15      	ldr	r3, [pc, #84]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80065d0:	4b13      	ldr	r3, [pc, #76]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80065d6:	4b12      	ldr	r3, [pc, #72]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80065dc:	4b10      	ldr	r3, [pc, #64]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065de:	220c      	movs	r2, #12
 80065e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065e2:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065ee:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80065fa:	4809      	ldr	r0, [pc, #36]	; (8006620 <MX_USART1_UART_Init+0x68>)
 80065fc:	f009 fbd8 	bl	800fdb0 <HAL_UART_Init>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006606:	f000 f969 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <MX_USART1_UART_Init+0x68>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b03      	ldr	r3, [pc, #12]	; (8006620 <MX_USART1_UART_Init+0x68>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0220 	orr.w	r2, r2, #32
 8006618:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 800661a:	bf00      	nop
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20007a50 	.word	0x20007a50
 8006624:	40013800 	.word	0x40013800

08006628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <MX_DMA_Init+0x58>)
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	4a13      	ldr	r2, [pc, #76]	; (8006680 <MX_DMA_Init+0x58>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	6493      	str	r3, [r2, #72]	; 0x48
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <MX_DMA_Init+0x58>)
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	607b      	str	r3, [r7, #4]
 8006644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006646:	2200      	movs	r2, #0
 8006648:	2100      	movs	r1, #0
 800664a:	200b      	movs	r0, #11
 800664c:	f002 fea0 	bl	8009390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006650:	200b      	movs	r0, #11
 8006652:	f002 feb9 	bl	80093c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	200c      	movs	r0, #12
 800665c:	f002 fe98 	bl	8009390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006660:	200c      	movs	r0, #12
 8006662:	f002 feb1 	bl	80093c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8006666:	2200      	movs	r2, #0
 8006668:	2100      	movs	r1, #0
 800666a:	200e      	movs	r0, #14
 800666c:	f002 fe90 	bl	8009390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006670:	200e      	movs	r0, #14
 8006672:	f002 fea9 	bl	80093c8 <HAL_NVIC_EnableIRQ>

}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40021000 	.word	0x40021000

08006684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08c      	sub	sp, #48	; 0x30
 8006688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800668a:	f107 031c 	add.w	r3, r7, #28
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	609a      	str	r2, [r3, #8]
 8006696:	60da      	str	r2, [r3, #12]
 8006698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800669a:	4b71      	ldr	r3, [pc, #452]	; (8006860 <MX_GPIO_Init+0x1dc>)
 800669c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669e:	4a70      	ldr	r2, [pc, #448]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066a0:	f043 0310 	orr.w	r3, r3, #16
 80066a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066a6:	4b6e      	ldr	r3, [pc, #440]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066aa:	f003 0310 	and.w	r3, r3, #16
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066b2:	4b6b      	ldr	r3, [pc, #428]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b6:	4a6a      	ldr	r2, [pc, #424]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066b8:	f043 0304 	orr.w	r3, r3, #4
 80066bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066be:	4b68      	ldr	r3, [pc, #416]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066ca:	4b65      	ldr	r3, [pc, #404]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ce:	4a64      	ldr	r2, [pc, #400]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066d6:	4b62      	ldr	r3, [pc, #392]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e2:	4b5f      	ldr	r3, [pc, #380]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e6:	4a5e      	ldr	r2, [pc, #376]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ee:	4b5c      	ldr	r3, [pc, #368]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066fa:	4b59      	ldr	r3, [pc, #356]	; (8006860 <MX_GPIO_Init+0x1dc>)
 80066fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fe:	4a58      	ldr	r2, [pc, #352]	; (8006860 <MX_GPIO_Init+0x1dc>)
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006706:	4b56      	ldr	r3, [pc, #344]	; (8006860 <MX_GPIO_Init+0x1dc>)
 8006708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006712:	4b53      	ldr	r3, [pc, #332]	; (8006860 <MX_GPIO_Init+0x1dc>)
 8006714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006716:	4a52      	ldr	r2, [pc, #328]	; (8006860 <MX_GPIO_Init+0x1dc>)
 8006718:	f043 0308 	orr.w	r3, r3, #8
 800671c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800671e:	4b50      	ldr	r3, [pc, #320]	; (8006860 <MX_GPIO_Init+0x1dc>)
 8006720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800672a:	2200      	movs	r2, #0
 800672c:	2115      	movs	r1, #21
 800672e:	484d      	ldr	r0, [pc, #308]	; (8006864 <MX_GPIO_Init+0x1e0>)
 8006730:	f003 fd96 	bl	800a260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin, GPIO_PIN_RESET);
 8006734:	2200      	movs	r2, #0
 8006736:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800673a:	484b      	ldr	r0, [pc, #300]	; (8006868 <MX_GPIO_Init+0x1e4>)
 800673c:	f003 fd90 	bl	800a260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 8006740:	2200      	movs	r2, #0
 8006742:	f241 3126 	movw	r1, #4902	; 0x1326
 8006746:	4849      	ldr	r0, [pc, #292]	; (800686c <MX_GPIO_Init+0x1e8>)
 8006748:	f003 fd8a 	bl	800a260 <HAL_GPIO_WritePin>
                          |I2C_ADDR_Pin|LCD_CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 800674c:	2200      	movs	r2, #0
 800674e:	f24c 014c 	movw	r1, #49228	; 0xc04c
 8006752:	4847      	ldr	r0, [pc, #284]	; (8006870 <MX_GPIO_Init+0x1ec>)
 8006754:	f003 fd84 	bl	800a260 <HAL_GPIO_WritePin>
                          |LCD_BL_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_ARK_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8006758:	2315      	movs	r3, #21
 800675a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800675c:	2301      	movs	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006764:	2300      	movs	r3, #0
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	4619      	mov	r1, r3
 800676e:	483d      	ldr	r0, [pc, #244]	; (8006864 <MX_GPIO_Init+0x1e0>)
 8006770:	f003 fbcc 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Reserved_Pin */
  GPIO_InitStruct.Pin = Reserved_Pin;
 8006774:	2308      	movs	r3, #8
 8006776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006778:	2300      	movs	r3, #0
 800677a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677c:	2300      	movs	r3, #0
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reserved_GPIO_Port, &GPIO_InitStruct);
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	4619      	mov	r1, r3
 8006786:	4837      	ldr	r0, [pc, #220]	; (8006864 <MX_GPIO_Init+0x1e0>)
 8006788:	f003 fbc0 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800678c:	2340      	movs	r3, #64	; 0x40
 800678e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006790:	2300      	movs	r3, #0
 8006792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006794:	2302      	movs	r3, #2
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006798:	f107 031c 	add.w	r3, r7, #28
 800679c:	4619      	mov	r1, r3
 800679e:	4831      	ldr	r0, [pc, #196]	; (8006864 <MX_GPIO_Init+0x1e0>)
 80067a0:	f003 fbb4 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RDYB_Pin */
  GPIO_InitStruct.Pin = ADC_RDYB_Pin;
 80067a4:	2310      	movs	r3, #16
 80067a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80067a8:	4b32      	ldr	r3, [pc, #200]	; (8006874 <MX_GPIO_Init+0x1f0>)
 80067aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_RDYB_GPIO_Port, &GPIO_InitStruct);
 80067b0:	f107 031c 	add.w	r3, r7, #28
 80067b4:	4619      	mov	r1, r3
 80067b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067ba:	f003 fba7 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin EN_AV6_Pin EN_V24_Pin EN_LCD_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin;
 80067be:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80067c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067c4:	2301      	movs	r3, #1
 80067c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067d0:	f107 031c 	add.w	r3, r7, #28
 80067d4:	4619      	mov	r1, r3
 80067d6:	4824      	ldr	r0, [pc, #144]	; (8006868 <MX_GPIO_Init+0x1e4>)
 80067d8:	f003 fb98 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_P_Pin */
  GPIO_InitStruct.Pin = SW_P_Pin;
 80067dc:	2320      	movs	r3, #32
 80067de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80067e0:	4b25      	ldr	r3, [pc, #148]	; (8006878 <MX_GPIO_Init+0x1f4>)
 80067e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_P_GPIO_Port, &GPIO_InitStruct);
 80067e8:	f107 031c 	add.w	r3, r7, #28
 80067ec:	4619      	mov	r1, r3
 80067ee:	481e      	ldr	r0, [pc, #120]	; (8006868 <MX_GPIO_Init+0x1e4>)
 80067f0:	f003 fb8c 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : I_P_ERROR_Pin */
  GPIO_InitStruct.Pin = I_P_ERROR_Pin;
 80067f4:	2301      	movs	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80067f8:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <MX_GPIO_Init+0x1f4>)
 80067fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I_P_ERROR_GPIO_Port, &GPIO_InitStruct);
 8006800:	f107 031c 	add.w	r3, r7, #28
 8006804:	4619      	mov	r1, r3
 8006806:	4819      	ldr	r0, [pc, #100]	; (800686c <MX_GPIO_Init+0x1e8>)
 8006808:	f003 fb80 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_EN_Pin INT_CHARGER_Pin LCD_SPI_CS_Pin PB5
                           I2C_ADDR_Pin LCD_CD_Pin */
  GPIO_InitStruct.Pin = Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 800680c:	f241 3326 	movw	r3, #4902	; 0x1326
 8006810:	61fb      	str	r3, [r7, #28]
                          |I2C_ADDR_Pin|LCD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006812:	2301      	movs	r3, #1
 8006814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006816:	2300      	movs	r3, #0
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800681a:	2300      	movs	r3, #0
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800681e:	f107 031c 	add.w	r3, r7, #28
 8006822:	4619      	mov	r1, r3
 8006824:	4811      	ldr	r0, [pc, #68]	; (800686c <MX_GPIO_Init+0x1e8>)
 8006826:	f003 fb71 	bl	8009f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LCD_reserv_Pin EN_AV6_reserv_Pin MEM1_CS_Pin MEM2_CS_Pin
                           LCD_BL_EN2_Pin */
  GPIO_InitStruct.Pin = EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 800682a:	f24c 034c 	movw	r3, #49228	; 0xc04c
 800682e:	61fb      	str	r3, [r7, #28]
                          |LCD_BL_EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006830:	2301      	movs	r3, #1
 8006832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006838:	2300      	movs	r3, #0
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800683c:	f107 031c 	add.w	r3, r7, #28
 8006840:	4619      	mov	r1, r3
 8006842:	480b      	ldr	r0, [pc, #44]	; (8006870 <MX_GPIO_Init+0x1ec>)
 8006844:	f003 fb62 	bl	8009f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006848:	2200      	movs	r2, #0
 800684a:	2100      	movs	r1, #0
 800684c:	200a      	movs	r0, #10
 800684e:	f002 fd9f 	bl	8009390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006852:	200a      	movs	r0, #10
 8006854:	f002 fdb8 	bl	80093c8 <HAL_NVIC_EnableIRQ>

}
 8006858:	bf00      	nop
 800685a:	3730      	adds	r7, #48	; 0x30
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40021000 	.word	0x40021000
 8006864:	48001000 	.word	0x48001000
 8006868:	48000800 	.word	0x48000800
 800686c:	48000400 	.word	0x48000400
 8006870:	48000c00 	.word	0x48000c00
 8006874:	10210000 	.word	0x10210000
 8006878:	10110000 	.word	0x10110000

0800687c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	ELSPIRE_OS_TIMER();
 8006884:	f7fc fc76 	bl	8003174 <ELSPIRE_OS_TIMER>

	Buttons_timer();
 8006888:	f7fc f94c 	bl	8002b24 <Buttons_timer>
	Blink_Edit_Parameter_timer();
 800688c:	f7fc fadc 	bl	8002e48 <Blink_Edit_Parameter_timer>
	menu_timer();
 8006890:	f012 f93e 	bl	8018b10 <menu_timer>
	Viewer_timer();
 8006894:	f011 f900 	bl	8017a98 <Viewer_timer>
	Light_OFF_process();
 8006898:	f010 fd4a 	bl	8017330 <Light_OFF_process>
	if(rx_cmplt>0)rx_cmplt--;
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800689e:	f993 3000 	ldrsb.w	r3, [r3]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dd08      	ble.n	80068b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80068a8:	f993 3000 	ldrsb.w	r3, [r3]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	b25a      	sxtb	r2, r3
 80068b4:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80068b6:	701a      	strb	r2, [r3, #0]
	spi_timeout();
 80068b8:	f001 f828 	bl	800790c <spi_timeout>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 80068c6:	f001 f9c1 	bl	8007c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	2000089e 	.word	0x2000089e
 80068d8:	40012c00 	.word	0x40012c00

080068dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80068e0:	b672      	cpsid	i
}
 80068e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80068e4:	e7fe      	b.n	80068e4 <Error_Handler+0x8>
	...

080068e8 <Play_Sound>:
uint8_t ReadComplete=0;			// Выставляется в 1, когда прочитана очередная порция данных
uint16_t sizecntr=0; 			// Счетчик байт
uint32_t wavcounter=0;

void Play_Sound(char*name)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	6078      	str	r0, [r7, #4]
	//uint8_t path[11] = "AUDIO_5.WAV";
	uint16_t i;

	// Открываем файл

	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 80068f0:	2200      	movs	r2, #0
 80068f2:	4934      	ldr	r1, [pc, #208]	; (80069c4 <Play_Sound+0xdc>)
 80068f4:	4834      	ldr	r0, [pc, #208]	; (80069c8 <Play_Sound+0xe0>)
 80068f6:	f00d f9e5 	bl	8013cc4 <f_mount>
	f_open(&MyFile, (char*)name, FA_READ|FA_OPEN_ALWAYS);
 80068fa:	2211      	movs	r2, #17
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4833      	ldr	r0, [pc, #204]	; (80069cc <Play_Sound+0xe4>)
 8006900:	f00d fa26 	bl	8013d50 <f_open>
	f_read(&MyFile, sound_buf, WAV_BUF_SIZE, &testBytes);
 8006904:	4b32      	ldr	r3, [pc, #200]	; (80069d0 <Play_Sound+0xe8>)
 8006906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690a:	4932      	ldr	r1, [pc, #200]	; (80069d4 <Play_Sound+0xec>)
 800690c:	482f      	ldr	r0, [pc, #188]	; (80069cc <Play_Sound+0xe4>)
 800690e:	f00d fbdd 	bl	80140cc <f_read>

	// Находим начало данных
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 8006912:	2300      	movs	r3, #0
 8006914:	81fb      	strh	r3, [r7, #14]
 8006916:	e01f      	b.n	8006958 <Play_Sound+0x70>
	{
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 8006918:	89fb      	ldrh	r3, [r7, #14]
 800691a:	4a2e      	ldr	r2, [pc, #184]	; (80069d4 <Play_Sound+0xec>)
 800691c:	5cd3      	ldrb	r3, [r2, r3]
 800691e:	2b64      	cmp	r3, #100	; 0x64
 8006920:	d117      	bne.n	8006952 <Play_Sound+0x6a>
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	3301      	adds	r3, #1
 8006926:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <Play_Sound+0xec>)
 8006928:	5cd3      	ldrb	r3, [r2, r3]
 800692a:	2b61      	cmp	r3, #97	; 0x61
 800692c:	d111      	bne.n	8006952 <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 800692e:	89fb      	ldrh	r3, [r7, #14]
 8006930:	3302      	adds	r3, #2
 8006932:	4a28      	ldr	r2, [pc, #160]	; (80069d4 <Play_Sound+0xec>)
 8006934:	5cd3      	ldrb	r3, [r2, r3]
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 8006936:	2b74      	cmp	r3, #116	; 0x74
 8006938:	d10b      	bne.n	8006952 <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 800693a:	89fb      	ldrh	r3, [r7, #14]
 800693c:	3303      	adds	r3, #3
 800693e:	4a25      	ldr	r2, [pc, #148]	; (80069d4 <Play_Sound+0xec>)
 8006940:	5cd3      	ldrb	r3, [r2, r3]
 8006942:	2b61      	cmp	r3, #97	; 0x61
 8006944:	d105      	bne.n	8006952 <Play_Sound+0x6a>
	    {
	        dataOffset = i + 8;
 8006946:	89fb      	ldrh	r3, [r7, #14]
 8006948:	3308      	adds	r3, #8
 800694a:	b29a      	uxth	r2, r3
 800694c:	4b22      	ldr	r3, [pc, #136]	; (80069d8 <Play_Sound+0xf0>)
 800694e:	801a      	strh	r2, [r3, #0]
	        break;
 8006950:	e006      	b.n	8006960 <Play_Sound+0x78>
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	3301      	adds	r3, #1
 8006956:	81fb      	strh	r3, [r7, #14]
 8006958:	89fb      	ldrh	r3, [r7, #14]
 800695a:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 800695e:	d9db      	bls.n	8006918 <Play_Sound+0x30>
	    }
	}

	//  перемещаем указатель FatFs
	f_lseek(&MyFile, dataOffset);
 8006960:	4b1d      	ldr	r3, [pc, #116]	; (80069d8 <Play_Sound+0xf0>)
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	4619      	mov	r1, r3
 8006966:	4819      	ldr	r0, [pc, #100]	; (80069cc <Play_Sound+0xe4>)
 8006968:	f00d ff0c 	bl	8014784 <f_lseek>
	// определяем количество байт данных
	wavDataSize = f_size(&MyFile) - dataOffset;
 800696c:	4b17      	ldr	r3, [pc, #92]	; (80069cc <Play_Sound+0xe4>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a19      	ldr	r2, [pc, #100]	; (80069d8 <Play_Sound+0xf0>)
 8006972:	8812      	ldrh	r2, [r2, #0]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	4a19      	ldr	r2, [pc, #100]	; (80069dc <Play_Sound+0xf4>)
 8006978:	6013      	str	r3, [r2, #0]

	// Заполняем оба буфера данными
	f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <Play_Sound+0xe8>)
 800697c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006980:	4914      	ldr	r1, [pc, #80]	; (80069d4 <Play_Sound+0xec>)
 8006982:	4812      	ldr	r0, [pc, #72]	; (80069cc <Play_Sound+0xe4>)
 8006984:	f00d fba2 	bl	80140cc <f_read>

	ReadComplete=1;
 8006988:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <Play_Sound+0xf8>)
 800698a:	2201      	movs	r2, #1
 800698c:	701a      	strb	r2, [r3, #0]

	TURN_ON_SOUND();
 800698e:	2201      	movs	r2, #1
 8006990:	2102      	movs	r1, #2
 8006992:	4814      	ldr	r0, [pc, #80]	; (80069e4 <Play_Sound+0xfc>)
 8006994:	f003 fc64 	bl	800a260 <HAL_GPIO_WritePin>
	//HAL_TIM_Base_Start_IT(&htim6);
	HAL_TIM_Base_Start(&htim6);
 8006998:	4813      	ldr	r0, [pc, #76]	; (80069e8 <Play_Sound+0x100>)
 800699a:	f008 f93f 	bl	800ec1c <HAL_TIM_Base_Start>
	DMA1_Channel4->CCR |= (DMA_CCR_TCIE_Msk);
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <Play_Sound+0x104>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a12      	ldr	r2, [pc, #72]	; (80069ec <Play_Sound+0x104>)
 80069a4:	f043 0302 	orr.w	r3, r3, #2
 80069a8:	6013      	str	r3, [r2, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf[0], WAV_BUF_SIZE, DAC_ALIGN_8B_R);
 80069aa:	2308      	movs	r3, #8
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069b2:	4a08      	ldr	r2, [pc, #32]	; (80069d4 <Play_Sound+0xec>)
 80069b4:	2110      	movs	r1, #16
 80069b6:	480e      	ldr	r0, [pc, #56]	; (80069f0 <Play_Sound+0x108>)
 80069b8:	f002 fd36 	bl	8009428 <HAL_DAC_Start_DMA>
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20008750 	.word	0x20008750
 80069c8:	20007620 	.word	0x20007620
 80069cc:	200073f0 	.word	0x200073f0
 80069d0:	20007850 	.word	0x20007850
 80069d4:	20007c9c 	.word	0x20007c9c
 80069d8:	200008d8 	.word	0x200008d8
 80069dc:	200008dc 	.word	0x200008dc
 80069e0:	200008e0 	.word	0x200008e0
 80069e4:	48000400 	.word	0x48000400
 80069e8:	20007bb8 	.word	0x20007bb8
 80069ec:	40020044 	.word	0x40020044
 80069f0:	20007ba4 	.word	0x20007ba4

080069f4 <StartReadNextSoundBuf>:


void StartReadNextSoundBuf(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
	if((DMA1->ISR&DMA_ISR_TCIF4_Msk)!=0)
 80069f8:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <StartReadNextSoundBuf+0x68>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d028      	beq.n	8006a56 <StartReadNextSoundBuf+0x62>
	{

		ReadComplete=0;
 8006a04:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <StartReadNextSoundBuf+0x6c>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
		if(buf_num==1)buf_num=0;
 8006a0a:	4b16      	ldr	r3, [pc, #88]	; (8006a64 <StartReadNextSoundBuf+0x70>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d103      	bne.n	8006a1a <StartReadNextSoundBuf+0x26>
 8006a12:	4b14      	ldr	r3, [pc, #80]	; (8006a64 <StartReadNextSoundBuf+0x70>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	e002      	b.n	8006a20 <StartReadNextSoundBuf+0x2c>
		else buf_num=1;
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <StartReadNextSoundBuf+0x70>)
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	701a      	strb	r2, [r3, #0]

		DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <StartReadNextSoundBuf+0x74>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <StartReadNextSoundBuf+0x74>)
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	6013      	str	r3, [r2, #0]
		DMA1_Channel4->CMAR=(uint32_t)sound_buf[buf_num];
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <StartReadNextSoundBuf+0x70>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	025b      	lsls	r3, r3, #9
 8006a32:	4a0e      	ldr	r2, [pc, #56]	; (8006a6c <StartReadNextSoundBuf+0x78>)
 8006a34:	441a      	add	r2, r3
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <StartReadNextSoundBuf+0x74>)
 8006a38:	60da      	str	r2, [r3, #12]
		//DMA1_Channel4->CNDTR=(uint32_t)WAV_BUF_SIZE;
		DMA1_Channel4->CCR |= (1 << DMA_CCR_EN_Pos);
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <StartReadNextSoundBuf+0x74>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <StartReadNextSoundBuf+0x74>)
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	6013      	str	r3, [r2, #0]

		wavcounter+=WAV_BUF_SIZE;
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <StartReadNextSoundBuf+0x7c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <StartReadNextSoundBuf+0x7c>)
 8006a50:	6013      	str	r3, [r2, #0]
		Sound_process();
 8006a52:	f000 f80f 	bl	8006a74 <Sound_process>
	}
}
 8006a56:	bf00      	nop
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40020000 	.word	0x40020000
 8006a60:	200008e0 	.word	0x200008e0
 8006a64:	200008da 	.word	0x200008da
 8006a68:	40020044 	.word	0x40020044
 8006a6c:	20007c9c 	.word	0x20007c9c
 8006a70:	200008e4 	.word	0x200008e4

08006a74 <Sound_process>:


void Sound_process(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	80fb      	strh	r3, [r7, #6]
	uint8_t sign=0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	717b      	strb	r3, [r7, #5]
	if(ReadComplete==0)
 8006a82:	4b2c      	ldr	r3, [pc, #176]	; (8006b34 <Sound_process+0xc0>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d14f      	bne.n	8006b2a <Sound_process+0xb6>
	{
		if(wavDataSize>wavcounter)
 8006a8a:	4b2b      	ldr	r3, [pc, #172]	; (8006b38 <Sound_process+0xc4>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b2b      	ldr	r3, [pc, #172]	; (8006b3c <Sound_process+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d938      	bls.n	8006b08 <Sound_process+0x94>
		{
			if(buf_num==0)
 8006a96:	4b2a      	ldr	r3, [pc, #168]	; (8006b40 <Sound_process+0xcc>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d117      	bne.n	8006ace <Sound_process+0x5a>
			{
				f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 8006a9e:	4b29      	ldr	r3, [pc, #164]	; (8006b44 <Sound_process+0xd0>)
 8006aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa4:	4928      	ldr	r1, [pc, #160]	; (8006b48 <Sound_process+0xd4>)
 8006aa6:	4829      	ldr	r0, [pc, #164]	; (8006b4c <Sound_process+0xd8>)
 8006aa8:	f00d fb10 	bl	80140cc <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006aac:	2300      	movs	r3, #0
 8006aae:	80fb      	strh	r3, [r7, #6]
 8006ab0:	e008      	b.n	8006ac4 <Sound_process+0x50>
				{
					//sign=sound_buf[0][i]&0x80;
					//sound_buf[0][i]=(sound_buf[0][i]&0x7F);
					//sound_buf[0][i]|=sign;
					sound_buf[0][i]=(sound_buf[0][i])&0xFF;
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	4924      	ldr	r1, [pc, #144]	; (8006b48 <Sound_process+0xd4>)
 8006ab8:	5c89      	ldrb	r1, [r1, r2]
 8006aba:	4a23      	ldr	r2, [pc, #140]	; (8006b48 <Sound_process+0xd4>)
 8006abc:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	80fb      	strh	r3, [r7, #6]
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aca:	d3f2      	bcc.n	8006ab2 <Sound_process+0x3e>
 8006acc:	e02a      	b.n	8006b24 <Sound_process+0xb0>
				}
			}
			else
			{
				f_read(&MyFile, sound_buf[1], WAV_BUF_SIZE, &testBytes);
 8006ace:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <Sound_process+0xd0>)
 8006ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad4:	491e      	ldr	r1, [pc, #120]	; (8006b50 <Sound_process+0xdc>)
 8006ad6:	481d      	ldr	r0, [pc, #116]	; (8006b4c <Sound_process+0xd8>)
 8006ad8:	f00d faf8 	bl	80140cc <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006adc:	2300      	movs	r3, #0
 8006ade:	80fb      	strh	r3, [r7, #6]
 8006ae0:	e00d      	b.n	8006afe <Sound_process+0x8a>
				{
					//sign=sound_buf[1][i]&0x80;
					//sound_buf[1][i]=(sound_buf[1][i]&0x7F);
					//sound_buf[1][i]|=sign;
					sound_buf[1][i]=(sound_buf[1][i])&0xFF;
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	88fb      	ldrh	r3, [r7, #6]
 8006ae6:	4918      	ldr	r1, [pc, #96]	; (8006b48 <Sound_process+0xd4>)
 8006ae8:	440a      	add	r2, r1
 8006aea:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8006aee:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <Sound_process+0xd4>)
 8006af0:	4413      	add	r3, r2
 8006af2:	460a      	mov	r2, r1
 8006af4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	3301      	adds	r3, #1
 8006afc:	80fb      	strh	r3, [r7, #6]
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b04:	d3ed      	bcc.n	8006ae2 <Sound_process+0x6e>
 8006b06:	e00d      	b.n	8006b24 <Sound_process+0xb0>
				}
			}
		}
		else
		{
			TURN_OFF_SOUND();
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4811      	ldr	r0, [pc, #68]	; (8006b54 <Sound_process+0xe0>)
 8006b0e:	f003 fba7 	bl	800a260 <HAL_GPIO_WritePin>
			DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <Sound_process+0xe4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a10      	ldr	r2, [pc, #64]	; (8006b58 <Sound_process+0xe4>)
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
			f_close(&MyFile);
 8006b1e:	480b      	ldr	r0, [pc, #44]	; (8006b4c <Sound_process+0xd8>)
 8006b20:	f00d fe06 	bl	8014730 <f_close>
		}
		ReadComplete=1;
 8006b24:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <Sound_process+0xc0>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
	}
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200008e0 	.word	0x200008e0
 8006b38:	200008dc 	.word	0x200008dc
 8006b3c:	200008e4 	.word	0x200008e4
 8006b40:	200008da 	.word	0x200008da
 8006b44:	20007850 	.word	0x20007850
 8006b48:	20007c9c 	.word	0x20007c9c
 8006b4c:	200073f0 	.word	0x200073f0
 8006b50:	20007e9c 	.word	0x20007e9c
 8006b54:	48000400 	.word	0x48000400
 8006b58:	40020044 	.word	0x40020044

08006b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <HAL_MspInit+0x44>)
 8006b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <HAL_MspInit+0x44>)
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <HAL_MspInit+0x44>)
 8006b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	607b      	str	r3, [r7, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b7a:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <HAL_MspInit+0x44>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	4a08      	ldr	r2, [pc, #32]	; (8006ba0 <HAL_MspInit+0x44>)
 8006b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b84:	6593      	str	r3, [r2, #88]	; 0x58
 8006b86:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <HAL_MspInit+0x44>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40021000 	.word	0x40021000

08006ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b0ae      	sub	sp, #184	; 0xb8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006bbc:	f107 0318 	add.w	r3, r7, #24
 8006bc0:	228c      	movs	r2, #140	; 0x8c
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f016 fa5b 	bl	801d080 <memset>
  if(hadc->Instance==ADC1)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a66      	ldr	r2, [pc, #408]	; (8006d68 <HAL_ADC_MspInit+0x1c4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d152      	bne.n	8006c7a <HAL_ADC_MspInit+0xd6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006bda:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006be2:	f107 0318 	add.w	r3, r7, #24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f006 f814 	bl	800cc14 <HAL_RCCEx_PeriphCLKConfig>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8006bf2:	f7ff fe73 	bl	80068dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8006bf6:	4b5d      	ldr	r3, [pc, #372]	; (8006d6c <HAL_ADC_MspInit+0x1c8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	4a5b      	ldr	r2, [pc, #364]	; (8006d6c <HAL_ADC_MspInit+0x1c8>)
 8006bfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006c00:	4b5a      	ldr	r3, [pc, #360]	; (8006d6c <HAL_ADC_MspInit+0x1c8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10b      	bne.n	8006c20 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006c08:	4b59      	ldr	r3, [pc, #356]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	4a58      	ldr	r2, [pc, #352]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006c0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c14:	4b56      	ldr	r3, [pc, #344]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006c20:	4b54      	ldr	r3, [pc, #336]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c22:	4a55      	ldr	r2, [pc, #340]	; (8006d78 <HAL_ADC_MspInit+0x1d4>)
 8006c24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006c26:	4b53      	ldr	r3, [pc, #332]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c2c:	4b51      	ldr	r3, [pc, #324]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c32:	4b50      	ldr	r3, [pc, #320]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006c38:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006c3e:	4b4d      	ldr	r3, [pc, #308]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006c46:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006c4e:	4b49      	ldr	r3, [pc, #292]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c50:	2220      	movs	r2, #32
 8006c52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006c54:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006c5c:	4845      	ldr	r0, [pc, #276]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c5e:	f002 fedf 	bl	8009a20 <HAL_DMA_Init>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8006c68:	f7ff fe38 	bl	80068dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a41      	ldr	r2, [pc, #260]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c70:	651a      	str	r2, [r3, #80]	; 0x50
 8006c72:	4a40      	ldr	r2, [pc, #256]	; (8006d74 <HAL_ADC_MspInit+0x1d0>)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006c78:	e072      	b.n	8006d60 <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC2)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a3f      	ldr	r2, [pc, #252]	; (8006d7c <HAL_ADC_MspInit+0x1d8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d16d      	bne.n	8006d60 <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006c8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f005 ffbc 	bl	800cc14 <HAL_RCCEx_PeriphCLKConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <HAL_ADC_MspInit+0x102>
      Error_Handler();
 8006ca2:	f7ff fe1b 	bl	80068dc <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006ca6:	4b31      	ldr	r3, [pc, #196]	; (8006d6c <HAL_ADC_MspInit+0x1c8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3301      	adds	r3, #1
 8006cac:	4a2f      	ldr	r2, [pc, #188]	; (8006d6c <HAL_ADC_MspInit+0x1c8>)
 8006cae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006cb0:	4b2e      	ldr	r3, [pc, #184]	; (8006d6c <HAL_ADC_MspInit+0x1c8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_ADC_MspInit+0x12c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006cb8:	4b2d      	ldr	r3, [pc, #180]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006cbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cc4:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ccc:	613b      	str	r3, [r7, #16]
 8006cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd0:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd4:	4a26      	ldr	r2, [pc, #152]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cdc:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <HAL_ADC_MspInit+0x1cc>)
 8006cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006cee:	230b      	movs	r3, #11
 8006cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d04:	f003 f902 	bl	8009f0c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <HAL_ADC_MspInit+0x1e0>)
 8006d0c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8006d0e:	4b1c      	ldr	r3, [pc, #112]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d14:	4b1a      	ldr	r3, [pc, #104]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d1a:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006d20:	4b17      	ldr	r3, [pc, #92]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d22:	2280      	movs	r2, #128	; 0x80
 8006d24:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d26:	4b16      	ldr	r3, [pc, #88]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d2c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d2e:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d34:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d38:	2220      	movs	r2, #32
 8006d3a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006d44:	480e      	ldr	r0, [pc, #56]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d46:	f002 fe6b 	bl	8009a20 <HAL_DMA_Init>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8006d50:	f7ff fdc4 	bl	80068dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d58:	651a      	str	r2, [r3, #80]	; 0x50
 8006d5a:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <HAL_ADC_MspInit+0x1dc>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006d60:	bf00      	nop
 8006d62:	37b8      	adds	r7, #184	; 0xb8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	50040000 	.word	0x50040000
 8006d6c:	200008e8 	.word	0x200008e8
 8006d70:	40021000 	.word	0x40021000
 8006d74:	20007978 	.word	0x20007978
 8006d78:	40020008 	.word	0x40020008
 8006d7c:	50040100 	.word	0x50040100
 8006d80:	200079c0 	.word	0x200079c0
 8006d84:	4002001c 	.word	0x4002001c

08006d88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	; 0x28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d90:	f107 0314 	add.w	r3, r7, #20
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	609a      	str	r2, [r3, #8]
 8006d9c:	60da      	str	r2, [r3, #12]
 8006d9e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2e      	ldr	r2, [pc, #184]	; (8006e60 <HAL_DAC_MspInit+0xd8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d156      	bne.n	8006e58 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006daa:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <HAL_DAC_MspInit+0xdc>)
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <HAL_DAC_MspInit+0xdc>)
 8006db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006db4:	6593      	str	r3, [r2, #88]	; 0x58
 8006db6:	4b2b      	ldr	r3, [pc, #172]	; (8006e64 <HAL_DAC_MspInit+0xdc>)
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dc2:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <HAL_DAC_MspInit+0xdc>)
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <HAL_DAC_MspInit+0xdc>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dce:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <HAL_DAC_MspInit+0xdc>)
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 8006dda:	2320      	movs	r3, #32
 8006ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dde:	2303      	movs	r3, #3
 8006de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	4619      	mov	r1, r3
 8006dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006df0:	f003 f88c 	bl	8009f0c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8006df4:	4b1c      	ldr	r3, [pc, #112]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006df6:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <HAL_DAC_MspInit+0xe4>)
 8006df8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e00:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e02:	2210      	movs	r2, #16
 8006e04:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e0e:	2280      	movs	r2, #128	; 0x80
 8006e10:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e18:	4b13      	ldr	r3, [pc, #76]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006e1e:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e20:	2220      	movs	r2, #32
 8006e22:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e24:	4b10      	ldr	r3, [pc, #64]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8006e2c:	480e      	ldr	r0, [pc, #56]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e2e:	f002 fdf7 	bl	8009a20 <HAL_DMA_Init>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8006e38:	f7ff fd50 	bl	80068dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e40:	60da      	str	r2, [r3, #12]
 8006e42:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <HAL_DAC_MspInit+0xe0>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2036      	movs	r0, #54	; 0x36
 8006e4e:	f002 fa9f 	bl	8009390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006e52:	2036      	movs	r0, #54	; 0x36
 8006e54:	f002 fab8 	bl	80093c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006e58:	bf00      	nop
 8006e5a:	3728      	adds	r7, #40	; 0x28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40007400 	.word	0x40007400
 8006e64:	40021000 	.word	0x40021000
 8006e68:	20007a08 	.word	0x20007a08
 8006e6c:	40020044 	.word	0x40020044

08006e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b0ae      	sub	sp, #184	; 0xb8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	609a      	str	r2, [r3, #8]
 8006e84:	60da      	str	r2, [r3, #12]
 8006e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e88:	f107 0318 	add.w	r3, r7, #24
 8006e8c:	228c      	movs	r2, #140	; 0x8c
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f016 f8f5 	bl	801d080 <memset>
  if(hi2c->Instance==I2C1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a42      	ldr	r2, [pc, #264]	; (8006fa4 <HAL_I2C_MspInit+0x134>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d13b      	bne.n	8006f18 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006ea0:	2340      	movs	r3, #64	; 0x40
 8006ea2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ea8:	f107 0318 	add.w	r3, r7, #24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f005 feb1 	bl	800cc14 <HAL_RCCEx_PeriphCLKConfig>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006eb8:	f7ff fd10 	bl	80068dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ebc:	4b3a      	ldr	r3, [pc, #232]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec0:	4a39      	ldr	r2, [pc, #228]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006ec2:	f043 0302 	orr.w	r3, r3, #2
 8006ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ec8:	4b37      	ldr	r3, [pc, #220]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = KEYPAD_SCL_Pin|KEYPAD_SDA_Pin;
 8006ed4:	23c0      	movs	r3, #192	; 0xc0
 8006ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006eda:	2312      	movs	r3, #18
 8006edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006eec:	2304      	movs	r3, #4
 8006eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	482c      	ldr	r0, [pc, #176]	; (8006fac <HAL_I2C_MspInit+0x13c>)
 8006efa:	f003 f807 	bl	8009f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006efe:	4b2a      	ldr	r3, [pc, #168]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	4a29      	ldr	r2, [pc, #164]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f08:	6593      	str	r3, [r2, #88]	; 0x58
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006f16:	e040      	b.n	8006f9a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <HAL_I2C_MspInit+0x140>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d13b      	bne.n	8006f9a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006f22:	2380      	movs	r3, #128	; 0x80
 8006f24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006f26:	2300      	movs	r3, #0
 8006f28:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f2a:	f107 0318 	add.w	r3, r7, #24
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f005 fe70 	bl	800cc14 <HAL_RCCEx_PeriphCLKConfig>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8006f3a:	f7ff fccf 	bl	80068dc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f3e:	4b1a      	ldr	r3, [pc, #104]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f42:	4a19      	ldr	r2, [pc, #100]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f44:	f043 0302 	orr.w	r3, r3, #2
 8006f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f4a:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POWER_SCL_Pin|POWER_SDA_Pin;
 8006f56:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f5e:	2312      	movs	r3, #18
 8006f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006f70:	2304      	movs	r3, #4
 8006f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	480b      	ldr	r0, [pc, #44]	; (8006fac <HAL_I2C_MspInit+0x13c>)
 8006f7e:	f002 ffc5 	bl	8009f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f86:	4a08      	ldr	r2, [pc, #32]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_I2C_MspInit+0x138>)
 8006f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f96:	60bb      	str	r3, [r7, #8]
 8006f98:	68bb      	ldr	r3, [r7, #8]
}
 8006f9a:	bf00      	nop
 8006f9c:	37b8      	adds	r7, #184	; 0xb8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40005400 	.word	0x40005400
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	48000400 	.word	0x48000400
 8006fb0:	40005800 	.word	0x40005800

08006fb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b0a6      	sub	sp, #152	; 0x98
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fbc:	f107 030c 	add.w	r3, r7, #12
 8006fc0:	228c      	movs	r2, #140	; 0x8c
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f016 f85b 	bl	801d080 <memset>
  if(hrtc->Instance==RTC)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a10      	ldr	r2, [pc, #64]	; (8007010 <HAL_RTC_MspInit+0x5c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d118      	bne.n	8007006 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fd8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fe2:	f107 030c 	add.w	r3, r7, #12
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f005 fe14 	bl	800cc14 <HAL_RCCEx_PeriphCLKConfig>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006ff2:	f7ff fc73 	bl	80068dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006ff6:	4b07      	ldr	r3, [pc, #28]	; (8007014 <HAL_RTC_MspInit+0x60>)
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	4a05      	ldr	r2, [pc, #20]	; (8007014 <HAL_RTC_MspInit+0x60>)
 8006ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007006:	bf00      	nop
 8007008:	3798      	adds	r7, #152	; 0x98
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40002800 	.word	0x40002800
 8007014:	40021000 	.word	0x40021000

08007018 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a08      	ldr	r2, [pc, #32]	; (8007048 <HAL_RTC_MspDeInit+0x30>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d107      	bne.n	800703a <HAL_RTC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800702a:	4b08      	ldr	r3, [pc, #32]	; (800704c <HAL_RTC_MspDeInit+0x34>)
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007030:	4a06      	ldr	r2, [pc, #24]	; (800704c <HAL_RTC_MspDeInit+0x34>)
 8007032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40002800 	.word	0x40002800
 800704c:	40021000 	.word	0x40021000

08007050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b08e      	sub	sp, #56	; 0x38
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	605a      	str	r2, [r3, #4]
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	60da      	str	r2, [r3, #12]
 8007066:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a5c      	ldr	r2, [pc, #368]	; (80071e0 <HAL_SPI_MspInit+0x190>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d129      	bne.n	80070c6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007072:	4b5c      	ldr	r3, [pc, #368]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007076:	4a5b      	ldr	r2, [pc, #364]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800707c:	6613      	str	r3, [r2, #96]	; 0x60
 800707e:	4b59      	ldr	r3, [pc, #356]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800708a:	4b56      	ldr	r3, [pc, #344]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 800708c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708e:	4a55      	ldr	r2, [pc, #340]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007096:	4b53      	ldr	r3, [pc, #332]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 80070a2:	23c2      	movs	r3, #194	; 0xc2
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a6:	2302      	movs	r3, #2
 80070a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ae:	2303      	movs	r3, #3
 80070b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80070b2:	2305      	movs	r3, #5
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ba:	4619      	mov	r1, r3
 80070bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070c0:	f002 ff24 	bl	8009f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80070c4:	e088      	b.n	80071d8 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a47      	ldr	r2, [pc, #284]	; (80071e8 <HAL_SPI_MspInit+0x198>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d155      	bne.n	800717c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80070d0:	4b44      	ldr	r3, [pc, #272]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80070d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d4:	4a43      	ldr	r2, [pc, #268]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80070d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070da:	6593      	str	r3, [r2, #88]	; 0x58
 80070dc:	4b41      	ldr	r3, [pc, #260]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80070de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070e8:	4b3e      	ldr	r3, [pc, #248]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80070ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ec:	4a3d      	ldr	r2, [pc, #244]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80070ee:	f043 0304 	orr.w	r3, r3, #4
 80070f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070f4:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80070f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007100:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007104:	4a37      	ldr	r2, [pc, #220]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007106:	f043 0302 	orr.w	r3, r3, #2
 800710a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800710c:	4b35      	ldr	r3, [pc, #212]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 800710e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8007118:	2302      	movs	r3, #2
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711c:	2302      	movs	r3, #2
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007120:	2300      	movs	r3, #0
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007124:	2303      	movs	r3, #3
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8007128:	2303      	movs	r3, #3
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 800712c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007130:	4619      	mov	r1, r3
 8007132:	482e      	ldr	r0, [pc, #184]	; (80071ec <HAL_SPI_MspInit+0x19c>)
 8007134:	f002 feea 	bl	8009f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8007138:	2304      	movs	r3, #4
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713c:	2302      	movs	r3, #2
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007140:	2300      	movs	r3, #0
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007144:	2303      	movs	r3, #3
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007148:	2305      	movs	r3, #5
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 800714c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007150:	4619      	mov	r1, r3
 8007152:	4826      	ldr	r0, [pc, #152]	; (80071ec <HAL_SPI_MspInit+0x19c>)
 8007154:	f002 feda 	bl	8009f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8007158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715e:	2302      	movs	r3, #2
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007162:	2300      	movs	r3, #0
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007166:	2303      	movs	r3, #3
 8007168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800716a:	2305      	movs	r3, #5
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 800716e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007172:	4619      	mov	r1, r3
 8007174:	481e      	ldr	r0, [pc, #120]	; (80071f0 <HAL_SPI_MspInit+0x1a0>)
 8007176:	f002 fec9 	bl	8009f0c <HAL_GPIO_Init>
}
 800717a:	e02d      	b.n	80071d8 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI3)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <HAL_SPI_MspInit+0x1a4>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d128      	bne.n	80071d8 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007186:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 800718c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007190:	6593      	str	r3, [r2, #88]	; 0x58
 8007192:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80071a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a2:	4a10      	ldr	r2, [pc, #64]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80071a4:	f043 0304 	orr.w	r3, r3, #4
 80071a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071aa:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <HAL_SPI_MspInit+0x194>)
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MEM_SCK_Pin|MEM_MISO_Pin|MEM_MOSI_Pin;
 80071b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071bc:	2302      	movs	r3, #2
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c4:	2303      	movs	r3, #3
 80071c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80071c8:	2306      	movs	r3, #6
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d0:	4619      	mov	r1, r3
 80071d2:	4806      	ldr	r0, [pc, #24]	; (80071ec <HAL_SPI_MspInit+0x19c>)
 80071d4:	f002 fe9a 	bl	8009f0c <HAL_GPIO_Init>
}
 80071d8:	bf00      	nop
 80071da:	3738      	adds	r7, #56	; 0x38
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40013000 	.word	0x40013000
 80071e4:	40021000 	.word	0x40021000
 80071e8:	40003800 	.word	0x40003800
 80071ec:	48000800 	.word	0x48000800
 80071f0:	48000400 	.word	0x48000400
 80071f4:	40003c00 	.word	0x40003c00

080071f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007208:	d10c      	bne.n	8007224 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800720a:	4b12      	ldr	r3, [pc, #72]	; (8007254 <HAL_TIM_PWM_MspInit+0x5c>)
 800720c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720e:	4a11      	ldr	r2, [pc, #68]	; (8007254 <HAL_TIM_PWM_MspInit+0x5c>)
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	6593      	str	r3, [r2, #88]	; 0x58
 8007216:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <HAL_TIM_PWM_MspInit+0x5c>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007222:	e010      	b.n	8007246 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a0b      	ldr	r2, [pc, #44]	; (8007258 <HAL_TIM_PWM_MspInit+0x60>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d10b      	bne.n	8007246 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <HAL_TIM_PWM_MspInit+0x5c>)
 8007230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007232:	4a08      	ldr	r2, [pc, #32]	; (8007254 <HAL_TIM_PWM_MspInit+0x5c>)
 8007234:	f043 0304 	orr.w	r3, r3, #4
 8007238:	6593      	str	r3, [r2, #88]	; 0x58
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <HAL_TIM_PWM_MspInit+0x5c>)
 800723c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	68bb      	ldr	r3, [r7, #8]
}
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40021000 	.word	0x40021000
 8007258:	40000800 	.word	0x40000800

0800725c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a0d      	ldr	r2, [pc, #52]	; (80072a0 <HAL_TIM_Base_MspInit+0x44>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d113      	bne.n	8007296 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800726e:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <HAL_TIM_Base_MspInit+0x48>)
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	4a0c      	ldr	r2, [pc, #48]	; (80072a4 <HAL_TIM_Base_MspInit+0x48>)
 8007274:	f043 0310 	orr.w	r3, r3, #16
 8007278:	6593      	str	r3, [r2, #88]	; 0x58
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <HAL_TIM_Base_MspInit+0x48>)
 800727c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007286:	2200      	movs	r2, #0
 8007288:	2100      	movs	r1, #0
 800728a:	2036      	movs	r0, #54	; 0x36
 800728c:	f002 f880 	bl	8009390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007290:	2036      	movs	r0, #54	; 0x36
 8007292:	f002 f899 	bl	80093c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40001000 	.word	0x40001000
 80072a4:	40021000 	.word	0x40021000

080072a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	; 0x28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b0:	f107 0314 	add.w	r3, r7, #20
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	605a      	str	r2, [r3, #4]
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c8:	d11d      	bne.n	8007306 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ca:	4b22      	ldr	r3, [pc, #136]	; (8007354 <HAL_TIM_MspPostInit+0xac>)
 80072cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ce:	4a21      	ldr	r2, [pc, #132]	; (8007354 <HAL_TIM_MspPostInit+0xac>)
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072d6:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <HAL_TIM_MspPostInit+0xac>)
 80072d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 80072e2:	2301      	movs	r3, #1
 80072e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e6:	2302      	movs	r3, #2
 80072e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072ee:	2300      	movs	r3, #0
 80072f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80072f2:	2301      	movs	r3, #1
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	4619      	mov	r1, r3
 80072fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007300:	f002 fe04 	bl	8009f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007304:	e021      	b.n	800734a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a13      	ldr	r2, [pc, #76]	; (8007358 <HAL_TIM_MspPostInit+0xb0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d11c      	bne.n	800734a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007310:	4b10      	ldr	r3, [pc, #64]	; (8007354 <HAL_TIM_MspPostInit+0xac>)
 8007312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007314:	4a0f      	ldr	r2, [pc, #60]	; (8007354 <HAL_TIM_MspPostInit+0xac>)
 8007316:	f043 0308 	orr.w	r3, r3, #8
 800731a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <HAL_TIM_MspPostInit+0xac>)
 800731e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_meter_UGen_Pin;
 8007328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800732c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800732e:	2302      	movs	r3, #2
 8007330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007336:	2300      	movs	r3, #0
 8007338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800733a:	2302      	movs	r3, #2
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P_meter_UGen_GPIO_Port, &GPIO_InitStruct);
 800733e:	f107 0314 	add.w	r3, r7, #20
 8007342:	4619      	mov	r1, r3
 8007344:	4805      	ldr	r0, [pc, #20]	; (800735c <HAL_TIM_MspPostInit+0xb4>)
 8007346:	f002 fde1 	bl	8009f0c <HAL_GPIO_Init>
}
 800734a:	bf00      	nop
 800734c:	3728      	adds	r7, #40	; 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40021000 	.word	0x40021000
 8007358:	40000800 	.word	0x40000800
 800735c:	48000c00 	.word	0x48000c00

08007360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b0ac      	sub	sp, #176	; 0xb0
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	609a      	str	r2, [r3, #8]
 8007374:	60da      	str	r2, [r3, #12]
 8007376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007378:	f107 0310 	add.w	r3, r7, #16
 800737c:	228c      	movs	r2, #140	; 0x8c
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f015 fe7d 	bl	801d080 <memset>
  if(huart->Instance==USART1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a26      	ldr	r2, [pc, #152]	; (8007424 <HAL_UART_MspInit+0xc4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d144      	bne.n	800741a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007390:	2301      	movs	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007394:	2300      	movs	r3, #0
 8007396:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007398:	f107 0310 	add.w	r3, r7, #16
 800739c:	4618      	mov	r0, r3
 800739e:	f005 fc39 	bl	800cc14 <HAL_RCCEx_PeriphCLKConfig>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80073a8:	f7ff fa98 	bl	80068dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80073ac:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <HAL_UART_MspInit+0xc8>)
 80073ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b0:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <HAL_UART_MspInit+0xc8>)
 80073b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073b6:	6613      	str	r3, [r2, #96]	; 0x60
 80073b8:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <HAL_UART_MspInit+0xc8>)
 80073ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073c4:	4b18      	ldr	r3, [pc, #96]	; (8007428 <HAL_UART_MspInit+0xc8>)
 80073c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c8:	4a17      	ldr	r2, [pc, #92]	; (8007428 <HAL_UART_MspInit+0xc8>)
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073d0:	4b15      	ldr	r3, [pc, #84]	; (8007428 <HAL_UART_MspInit+0xc8>)
 80073d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80073dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80073e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e4:	2302      	movs	r3, #2
 80073e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f0:	2303      	movs	r3, #3
 80073f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80073f6:	2307      	movs	r3, #7
 80073f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007400:	4619      	mov	r1, r3
 8007402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007406:	f002 fd81 	bl	8009f0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800740a:	2200      	movs	r2, #0
 800740c:	2100      	movs	r1, #0
 800740e:	2025      	movs	r0, #37	; 0x25
 8007410:	f001 ffbe 	bl	8009390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007414:	2025      	movs	r0, #37	; 0x25
 8007416:	f001 ffd7 	bl	80093c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800741a:	bf00      	nop
 800741c:	37b0      	adds	r7, #176	; 0xb0
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40013800 	.word	0x40013800
 8007428:	40021000 	.word	0x40021000

0800742c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08c      	sub	sp, #48	; 0x30
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800743c:	2200      	movs	r2, #0
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	2019      	movs	r0, #25
 8007442:	f001 ffa5 	bl	8009390 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007446:	2019      	movs	r0, #25
 8007448:	f001 ffbe 	bl	80093c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800744c:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <HAL_InitTick+0x9c>)
 800744e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007450:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <HAL_InitTick+0x9c>)
 8007452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007456:	6613      	str	r3, [r2, #96]	; 0x60
 8007458:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <HAL_InitTick+0x9c>)
 800745a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007464:	f107 0210 	add.w	r2, r7, #16
 8007468:	f107 0314 	add.w	r3, r7, #20
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f005 fb3e 	bl	800caf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007474:	f005 fb26 	bl	800cac4 <HAL_RCC_GetPCLK2Freq>
 8007478:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	4a13      	ldr	r2, [pc, #76]	; (80074cc <HAL_InitTick+0xa0>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	0c9b      	lsrs	r3, r3, #18
 8007484:	3b01      	subs	r3, #1
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <HAL_InitTick+0xa4>)
 800748a:	4a12      	ldr	r2, [pc, #72]	; (80074d4 <HAL_InitTick+0xa8>)
 800748c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <HAL_InitTick+0xa4>)
 8007490:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007494:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007496:	4a0e      	ldr	r2, [pc, #56]	; (80074d0 <HAL_InitTick+0xa4>)
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <HAL_InitTick+0xa4>)
 800749e:	2200      	movs	r2, #0
 80074a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <HAL_InitTick+0xa4>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80074a8:	4809      	ldr	r0, [pc, #36]	; (80074d0 <HAL_InitTick+0xa4>)
 80074aa:	f007 fb5f 	bl	800eb6c <HAL_TIM_Base_Init>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80074b4:	4806      	ldr	r0, [pc, #24]	; (80074d0 <HAL_InitTick+0xa4>)
 80074b6:	f007 fc19 	bl	800ecec <HAL_TIM_Base_Start_IT>
 80074ba:	4603      	mov	r3, r0
 80074bc:	e000      	b.n	80074c0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	; 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	431bde83 	.word	0x431bde83
 80074d0:	2000809c 	.word	0x2000809c
 80074d4:	40012c00 	.word	0x40012c00

080074d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80074dc:	e7fe      	b.n	80074dc <NMI_Handler+0x4>

080074de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074de:	b480      	push	{r7}
 80074e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074e2:	e7fe      	b.n	80074e2 <HardFault_Handler+0x4>

080074e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074e8:	e7fe      	b.n	80074e8 <MemManage_Handler+0x4>

080074ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074ea:	b480      	push	{r7}
 80074ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074ee:	e7fe      	b.n	80074ee <BusFault_Handler+0x4>

080074f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074f4:	e7fe      	b.n	80074f4 <UsageFault_Handler+0x4>

080074f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074f6:	b480      	push	{r7}
 80074f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074fa:	bf00      	nop
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007508:	bf00      	nop
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007512:	b480      	push	{r7}
 8007514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007516:	bf00      	nop
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  ADC_EXT();
 8007532:	f7fa f8d5 	bl	80016e0 <ADC_EXT>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007536:	2010      	movs	r0, #16
 8007538:	f002 feaa 	bl	800a290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800753c:	bf00      	nop
 800753e:	bd80      	pop	{r7, pc}

08007540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007544:	4802      	ldr	r0, [pc, #8]	; (8007550 <DMA1_Channel1_IRQHandler+0x10>)
 8007546:	f002 fc02 	bl	8009d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20007978 	.word	0x20007978

08007554 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007558:	4802      	ldr	r0, [pc, #8]	; (8007564 <DMA1_Channel2_IRQHandler+0x10>)
 800755a:	f002 fbf8 	bl	8009d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200079c0 	.word	0x200079c0

08007568 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	//
	StartReadNextSoundBuf();
 800756c:	f7ff fa42 	bl	80069f4 <StartReadNextSoundBuf>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8007570:	4802      	ldr	r0, [pc, #8]	; (800757c <DMA1_Channel4_IRQHandler+0x14>)
 8007572:	f002 fbec 	bl	8009d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007576:	bf00      	nop
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20007a08 	.word	0x20007a08

08007580 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007584:	4802      	ldr	r0, [pc, #8]	; (8007590 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007586:	f007 fd7f 	bl	800f088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	2000809c 	.word	0x2000809c

08007594 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1, UART_IT_RXNE)==SET)
 8007598:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <USART1_IRQHandler+0x4c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d016      	beq.n	80075d4 <USART1_IRQHandler+0x40>
	{
		usart1_data[usart1_counter]=(uint8_t)USART1->RDR;
 80075a6:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <USART1_IRQHandler+0x50>)
 80075a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075aa:	b299      	uxth	r1, r3
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <USART1_IRQHandler+0x54>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	b2c9      	uxtb	r1, r1
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <USART1_IRQHandler+0x58>)
 80075b6:	5499      	strb	r1, [r3, r2]
		usart1_counter++;
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <USART1_IRQHandler+0x54>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <USART1_IRQHandler+0x54>)
 80075c2:	701a      	strb	r2, [r3, #0]
		rx_cmplt=5;
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <USART1_IRQHandler+0x5c>)
 80075c6:	2205      	movs	r2, #5
 80075c8:	701a      	strb	r2, [r3, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_IT_RXNE);
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <USART1_IRQHandler+0x4c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f240 5225 	movw	r2, #1317	; 0x525
 80075d2:	621a      	str	r2, [r3, #32]
//		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80075d4:	4802      	ldr	r0, [pc, #8]	; (80075e0 <USART1_IRQHandler+0x4c>)
 80075d6:	f008 fccd 	bl	800ff74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80075da:	bf00      	nop
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20007a50 	.word	0x20007a50
 80075e4:	40013800 	.word	0x40013800
 80075e8:	2000089d 	.word	0x2000089d
 80075ec:	20002118 	.word	0x20002118
 80075f0:	2000089e 	.word	0x2000089e

080075f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//StartReadNextSoundBuf();
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80075f8:	4803      	ldr	r0, [pc, #12]	; (8007608 <TIM6_DAC_IRQHandler+0x14>)
 80075fa:	f007 fd45 	bl	800f088 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80075fe:	4803      	ldr	r0, [pc, #12]	; (800760c <TIM6_DAC_IRQHandler+0x18>)
 8007600:	f001 ffde 	bl	80095c0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007604:	bf00      	nop
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20007bb8 	.word	0x20007bb8
 800760c:	20007ba4 	.word	0x20007ba4

08007610 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007614:	4802      	ldr	r0, [pc, #8]	; (8007620 <OTG_FS_IRQHandler+0x10>)
 8007616:	f003 fca1 	bl	800af5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800761a:	bf00      	nop
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20009a38 	.word	0x20009a38

08007624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
	return 1;
 8007628:	2301      	movs	r3, #1
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <_kill>:

int _kill(int pid, int sig)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800763e:	f015 fcf5 	bl	801d02c <__errno>
 8007642:	4603      	mov	r3, r0
 8007644:	2216      	movs	r2, #22
 8007646:	601a      	str	r2, [r3, #0]
	return -1;
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <_exit>:

void _exit (int status)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800765c:	f04f 31ff 	mov.w	r1, #4294967295
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ffe7 	bl	8007634 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007666:	e7fe      	b.n	8007666 <_exit+0x12>

08007668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e00a      	b.n	8007690 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800767a:	f3af 8000 	nop.w
 800767e:	4601      	mov	r1, r0
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	60ba      	str	r2, [r7, #8]
 8007686:	b2ca      	uxtb	r2, r1
 8007688:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	3301      	adds	r3, #1
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	dbf0      	blt.n	800767a <_read+0x12>
	}

return len;
 8007698:	687b      	ldr	r3, [r7, #4]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b086      	sub	sp, #24
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076ae:	2300      	movs	r3, #0
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	e009      	b.n	80076c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	60ba      	str	r2, [r7, #8]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	3301      	adds	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	dbf1      	blt.n	80076b4 <_write+0x12>
	}
	return len;
 80076d0:	687b      	ldr	r3, [r7, #4]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <_close>:

int _close(int file)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
	return -1;
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007702:	605a      	str	r2, [r3, #4]
	return 0;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <_isatty>:

int _isatty(int file)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
	return 1;
 800771a:	2301      	movs	r3, #1
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
	return 0;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800774c:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <_sbrk+0x5c>)
 800774e:	4b15      	ldr	r3, [pc, #84]	; (80077a4 <_sbrk+0x60>)
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007758:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <_sbrk+0x64>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007760:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <_sbrk+0x64>)
 8007762:	4a12      	ldr	r2, [pc, #72]	; (80077ac <_sbrk+0x68>)
 8007764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007766:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <_sbrk+0x64>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d207      	bcs.n	8007784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007774:	f015 fc5a 	bl	801d02c <__errno>
 8007778:	4603      	mov	r3, r0
 800777a:	220c      	movs	r2, #12
 800777c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800777e:	f04f 33ff 	mov.w	r3, #4294967295
 8007782:	e009      	b.n	8007798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007784:	4b08      	ldr	r3, [pc, #32]	; (80077a8 <_sbrk+0x64>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800778a:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <_sbrk+0x64>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	4a05      	ldr	r2, [pc, #20]	; (80077a8 <_sbrk+0x64>)
 8007794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007796:	68fb      	ldr	r3, [r7, #12]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20040000 	.word	0x20040000
 80077a4:	00000400 	.word	0x00000400
 80077a8:	200008ec 	.word	0x200008ec
 80077ac:	2000a050 	.word	0x2000a050

080077b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80077b4:	4b15      	ldr	r3, [pc, #84]	; (800780c <SystemInit+0x5c>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ba:	4a14      	ldr	r2, [pc, #80]	; (800780c <SystemInit+0x5c>)
 80077bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80077c4:	4b12      	ldr	r3, [pc, #72]	; (8007810 <SystemInit+0x60>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a11      	ldr	r2, [pc, #68]	; (8007810 <SystemInit+0x60>)
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80077d0:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <SystemInit+0x60>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80077d6:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <SystemInit+0x60>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a0d      	ldr	r2, [pc, #52]	; (8007810 <SystemInit+0x60>)
 80077dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80077e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80077e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <SystemInit+0x60>)
 80077e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80077ee:	4b08      	ldr	r3, [pc, #32]	; (8007810 <SystemInit+0x60>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a07      	ldr	r2, [pc, #28]	; (8007810 <SystemInit+0x60>)
 80077f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80077fa:	4b05      	ldr	r3, [pc, #20]	; (8007810 <SystemInit+0x60>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	619a      	str	r2, [r3, #24]
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	e000ed00 	.word	0xe000ed00
 8007810:	40021000 	.word	0x40021000
 8007814:	00000000 	.word	0x00000000

08007818 <Temperature_process>:
extern ADC_HandleTypeDef hadc1;

uint16_t temperature_buf[256];

void Temperature_process(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_sum=0;
 8007822:	2300      	movs	r3, #0
 8007824:	60bb      	str	r3, [r7, #8]
	uint16_t temperature_middle = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &temperature_buf, 128);
 800782a:	2280      	movs	r2, #128	; 0x80
 800782c:	4932      	ldr	r1, [pc, #200]	; (80078f8 <Temperature_process+0xe0>)
 800782e:	4833      	ldr	r0, [pc, #204]	; (80078fc <Temperature_process+0xe4>)
 8007830:	f000 fe4c 	bl	80084cc <HAL_ADC_Start_DMA>

	for(i=0;i<128;i++)temp_sum+=temperature_buf[i];
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
 8007838:	e00a      	b.n	8007850 <Temperature_process+0x38>
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	4a2e      	ldr	r2, [pc, #184]	; (80078f8 <Temperature_process+0xe0>)
 800783e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007842:	461a      	mov	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4413      	add	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	3301      	adds	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007854:	2b00      	cmp	r3, #0
 8007856:	daf0      	bge.n	800783a <Temperature_process+0x22>
	temperature_middle = (temp_sum>>7);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	09db      	lsrs	r3, r3, #7
 800785c:	80fb      	strh	r3, [r7, #6]

	MCU_temp = (double)(temperature_middle/4096.0)*Vref;   // Напряжение в вольтах на датчике.
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	4618      	mov	r0, r3
 8007862:	f7f8 fe6f 	bl	8000544 <__aeabi_i2d>
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	4b25      	ldr	r3, [pc, #148]	; (8007900 <Temperature_process+0xe8>)
 800786c:	f7f8 fffe 	bl	800086c <__aeabi_ddiv>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4610      	mov	r0, r2
 8007876:	4619      	mov	r1, r3
 8007878:	a319      	add	r3, pc, #100	; (adr r3, 80078e0 <Temperature_process+0xc8>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fecb 	bl	8000618 <__aeabi_dmul>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	491f      	ldr	r1, [pc, #124]	; (8007904 <Temperature_process+0xec>)
 8007888:	e9c1 2300 	strd	r2, r3, [r1]
	MCU_temp = (tV_25-MCU_temp)/tSlope + 25.0;             // Температура в градусах.
 800788c:	4b1d      	ldr	r3, [pc, #116]	; (8007904 <Temperature_process+0xec>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	a115      	add	r1, pc, #84	; (adr r1, 80078e8 <Temperature_process+0xd0>)
 8007894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007898:	f7f8 fd06 	bl	80002a8 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4610      	mov	r0, r2
 80078a2:	4619      	mov	r1, r3
 80078a4:	a312      	add	r3, pc, #72	; (adr r3, 80078f0 <Temperature_process+0xd8>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 ffdf 	bl	800086c <__aeabi_ddiv>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	4b13      	ldr	r3, [pc, #76]	; (8007908 <Temperature_process+0xf0>)
 80078bc:	f7f8 fcf6 	bl	80002ac <__adddf3>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	490f      	ldr	r1, [pc, #60]	; (8007904 <Temperature_process+0xec>)
 80078c6:	e9c1 2300 	strd	r2, r3, [r1]


	sleep(1000);
 80078ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078ce:	f7fb fc89 	bl	80031e4 <sleep>
}
 80078d2:	bf00      	nop
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	f3af 8000 	nop.w
 80078e0:	66666666 	.word	0x66666666
 80078e4:	400a6666 	.word	0x400a6666
 80078e8:	22d0e560 	.word	0x22d0e560
 80078ec:	3ff2f9db 	.word	0x3ff2f9db
 80078f0:	75f6fd22 	.word	0x75f6fd22
 80078f4:	3f719ce0 	.word	0x3f719ce0
 80078f8:	200080e8 	.word	0x200080e8
 80078fc:	20007b3c 	.word	0x20007b3c
 8007900:	40b00000 	.word	0x40b00000
 8007904:	200008a0 	.word	0x200008a0
 8007908:	40390000 	.word	0x40390000

0800790c <spi_timeout>:
static SPI_HandleTypeDef hdisplayspi;



uint8_t spi_timeout(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
	if(++spitimeout==100) return 1;
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <spi_timeout+0x28>)
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <spi_timeout+0x28>)
 800791a:	801a      	strh	r2, [r3, #0]
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <spi_timeout+0x28>)
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	2b64      	cmp	r3, #100	; 0x64
 8007922:	d101      	bne.n	8007928 <spi_timeout+0x1c>
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <spi_timeout+0x1e>
	else return 0;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	200008f0 	.word	0x200008f0

08007938 <u8x8_gpio_and_delay_cb_stm32l4>:
/** @addtogroup _Exported_Functions
  * @{
  */
uint8_t u8x8_gpio_and_delay_cb_stm32l4 (U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg,
		U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08a      	sub	sp, #40	; 0x28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	607b      	str	r3, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	72fb      	strb	r3, [r7, #11]
 8007946:	4613      	mov	r3, r2
 8007948:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	605a      	str	r2, [r3, #4]
 8007954:	609a      	str	r2, [r3, #8]
 8007956:	60da      	str	r2, [r3, #12]
 8007958:	611a      	str	r2, [r3, #16]
	  switch (msg)
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	3b28      	subs	r3, #40	; 0x28
 800795e:	2b23      	cmp	r3, #35	; 0x23
 8007960:	d870      	bhi.n	8007a44 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <u8x8_gpio_and_delay_cb_stm32l4+0x30>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	080079f9 	.word	0x080079f9
 800796c:	08007a0f 	.word	0x08007a0f
 8007970:	08007a45 	.word	0x08007a45
 8007974:	08007a45 	.word	0x08007a45
 8007978:	08007a45 	.word	0x08007a45
 800797c:	08007a45 	.word	0x08007a45
 8007980:	08007a45 	.word	0x08007a45
 8007984:	08007a45 	.word	0x08007a45
 8007988:	08007a45 	.word	0x08007a45
 800798c:	08007a45 	.word	0x08007a45
 8007990:	08007a45 	.word	0x08007a45
 8007994:	08007a45 	.word	0x08007a45
 8007998:	08007a45 	.word	0x08007a45
 800799c:	08007a45 	.word	0x08007a45
 80079a0:	08007a45 	.word	0x08007a45
 80079a4:	08007a45 	.word	0x08007a45
 80079a8:	08007a45 	.word	0x08007a45
 80079ac:	08007a45 	.word	0x08007a45
 80079b0:	08007a45 	.word	0x08007a45
 80079b4:	08007a45 	.word	0x08007a45
 80079b8:	08007a45 	.word	0x08007a45
 80079bc:	08007a45 	.word	0x08007a45
 80079c0:	08007a45 	.word	0x08007a45
 80079c4:	08007a45 	.word	0x08007a45
 80079c8:	08007a45 	.word	0x08007a45
 80079cc:	08007a45 	.word	0x08007a45
 80079d0:	08007a45 	.word	0x08007a45
 80079d4:	08007a45 	.word	0x08007a45
 80079d8:	08007a45 	.word	0x08007a45
 80079dc:	08007a45 	.word	0x08007a45
 80079e0:	08007a45 	.word	0x08007a45
 80079e4:	08007a45 	.word	0x08007a45
 80079e8:	08007a45 	.word	0x08007a45
 80079ec:	08007a29 	.word	0x08007a29
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a37 	.word	0x08007a37
	  {
	  case U8X8_MSG_GPIO_AND_DELAY_INIT:
		  LCD_NRST_NOT_ACTIVE();
 80079f8:	2201      	movs	r2, #1
 80079fa:	2110      	movs	r1, #16
 80079fc:	4814      	ldr	r0, [pc, #80]	; (8007a50 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079fe:	f002 fc2f 	bl	800a260 <HAL_GPIO_WritePin>
		  LCD_NCS_NOT_ACTIVE();
 8007a02:	2201      	movs	r2, #1
 8007a04:	2101      	movs	r1, #1
 8007a06:	4812      	ldr	r0, [pc, #72]	; (8007a50 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007a08:	f002 fc2a 	bl	800a260 <HAL_GPIO_WritePin>
	    break;
 8007a0c:	e01a      	b.n	8007a44 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_DELAY_MILLI:
		  delay_ms(arg_int);
 8007a0e:	7abb      	ldrb	r3, [r7, #10]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fb fc33 	bl	800327c <delay_ms>
	    break;
 8007a16:	e015      	b.n	8007a44 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_DC:
	    HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, arg_int); //?
 8007a18:	7abb      	ldrb	r3, [r7, #10]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a20:	480c      	ldr	r0, [pc, #48]	; (8007a54 <u8x8_gpio_and_delay_cb_stm32l4+0x11c>)
 8007a22:	f002 fc1d 	bl	800a260 <HAL_GPIO_WritePin>
	    break;
 8007a26:	e00d      	b.n	8007a44 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_CS:
	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, arg_int); //?
 8007a28:	7abb      	ldrb	r3, [r7, #10]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4808      	ldr	r0, [pc, #32]	; (8007a50 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007a30:	f002 fc16 	bl	800a260 <HAL_GPIO_WritePin>
	    break;
 8007a34:	e006      	b.n	8007a44 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_RESET:
	    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, arg_int);
 8007a36:	7abb      	ldrb	r3, [r7, #10]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2110      	movs	r1, #16
 8007a3c:	4804      	ldr	r0, [pc, #16]	; (8007a50 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007a3e:	f002 fc0f 	bl	800a260 <HAL_GPIO_WritePin>
	    break;
 8007a42:	bf00      	nop
	  }
	  return 1;
 8007a44:	2301      	movs	r3, #1
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3728      	adds	r7, #40	; 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	48001000 	.word	0x48001000
 8007a54:	48000400 	.word	0x48000400

08007a58 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	607b      	str	r3, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	72fb      	strb	r3, [r7, #11]
 8007a66:	4613      	mov	r3, r2
 8007a68:	72bb      	strb	r3, [r7, #10]
	uint8_t *data;//, a_flag;
#ifdef  USE_BSP_SPI2
 hdisplayspi.Instance = huc1638_hspi.Instance;
#else
 hdisplayspi.Instance = hspi2.Instance;
 8007a6a:	4b54      	ldr	r3, [pc, #336]	; (8007bbc <u8x8_byte_4wire_hw_spi+0x164>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a54      	ldr	r2, [pc, #336]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a70:	6013      	str	r3, [r2, #0]
#endif

  switch (msg)
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	3b14      	subs	r3, #20
 8007a76:	2b0c      	cmp	r3, #12
 8007a78:	f200 8098 	bhi.w	8007bac <u8x8_byte_4wire_hw_spi+0x154>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <u8x8_byte_4wire_hw_spi+0x2c>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007b49 	.word	0x08007b49
 8007a88:	08007bad 	.word	0x08007bad
 8007a8c:	08007bad 	.word	0x08007bad
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007b69 	.word	0x08007b69
 8007a98:	08007b8b 	.word	0x08007b8b
 8007a9c:	08007bad 	.word	0x08007bad
 8007aa0:	08007bad 	.word	0x08007bad
 8007aa4:	08007bad 	.word	0x08007bad
 8007aa8:	08007bad 	.word	0x08007bad
 8007aac:	08007bad 	.word	0x08007bad
 8007ab0:	08007bad 	.word	0x08007bad
 8007ab4:	08007b5b 	.word	0x08007b5b
  {
  case U8X8_MSG_BYTE_SEND:
	data = (uint8_t *)arg_ptr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	617b      	str	r3, [r7, #20]
    while (arg_int > 0)
 8007abc:	e040      	b.n	8007b40 <u8x8_byte_4wire_hw_spi+0xe8>
    {
    	/* check TXE flag */
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
    	{
    		spitimeout = 0;
 8007abe:	4b41      	ldr	r3, [pc, #260]	; (8007bc4 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007ac4:	f7ff ff22 	bl	800790c <spi_timeout>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d007      	beq.n	8007ade <u8x8_byte_4wire_hw_spi+0x86>
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8007ace:	4b3c      	ldr	r3, [pc, #240]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d1f0      	bne.n	8007abe <u8x8_byte_4wire_hw_spi+0x66>
 8007adc:	e000      	b.n	8007ae0 <u8x8_byte_4wire_hw_spi+0x88>
    		if(spi_timeout()==1) break;
 8007ade:	bf00      	nop
    	}
    	/* Write the data */
    	*((__IO uint8_t*) &hdisplayspi.Instance->DR ) = (uint8_t) * data;
 8007ae0:	4b37      	ldr	r3, [pc, #220]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	701a      	strb	r2, [r3, #0]
    	/* Wait BSY flag */
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007aec:	e007      	b.n	8007afe <u8x8_byte_4wire_hw_spi+0xa6>
    		{
    			spitimeout = 0;
 8007aee:	4b35      	ldr	r3, [pc, #212]	; (8007bc4 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	801a      	strh	r2, [r3, #0]
    		    if(spi_timeout()==1) break;
 8007af4:	f7ff ff0a 	bl	800790c <spi_timeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d007      	beq.n	8007b0e <u8x8_byte_4wire_hw_spi+0xb6>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007afe:	4b30      	ldr	r3, [pc, #192]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f0      	bne.n	8007aee <u8x8_byte_4wire_hw_spi+0x96>
 8007b0c:	e009      	b.n	8007b22 <u8x8_byte_4wire_hw_spi+0xca>
    		    if(spi_timeout()==1) break;
 8007b0e:	bf00      	nop
    		}
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007b10:	e007      	b.n	8007b22 <u8x8_byte_4wire_hw_spi+0xca>
    	{
    		spitimeout = 0;
 8007b12:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007b18:	f7ff fef8 	bl	800790c <spi_timeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d007      	beq.n	8007b32 <u8x8_byte_4wire_hw_spi+0xda>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007b22:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2c:	2b80      	cmp	r3, #128	; 0x80
 8007b2e:	d0f0      	beq.n	8007b12 <u8x8_byte_4wire_hw_spi+0xba>
 8007b30:	e000      	b.n	8007b34 <u8x8_byte_4wire_hw_spi+0xdc>
    		if(spi_timeout()==1) break;
 8007b32:	bf00      	nop
    	}
        data++;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	3301      	adds	r3, #1
 8007b38:	617b      	str	r3, [r7, #20]
        arg_int--;
 8007b3a:	7abb      	ldrb	r3, [r7, #10]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	72bb      	strb	r3, [r7, #10]
    while (arg_int > 0)
 8007b40:	7abb      	ldrb	r3, [r7, #10]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1c3      	bne.n	8007ace <u8x8_byte_4wire_hw_spi+0x76>
    }
//	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, arg_int, 1000);
    break;
 8007b46:	e033      	b.n	8007bb0 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_INIT:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2149      	movs	r1, #73	; 0x49
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f00e feb9 	bl	80168ca <u8x8_gpio_call>
    break;
 8007b58:	e02a      	b.n	8007bb0 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_SET_DC:
	  u8x8_gpio_SetDC(u8x8, arg_int);
 8007b5a:	7abb      	ldrb	r3, [r7, #10]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	214a      	movs	r1, #74	; 0x4a
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f00e feb2 	bl	80168ca <u8x8_gpio_call>
    break;
 8007b66:	e023      	b.n	8007bb0 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_START_TRANSFER:
	  __HAL_SPI_ENABLE(&hdisplayspi);
 8007b68:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	4b14      	ldr	r3, [pc, #80]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b76:	601a      	str	r2, [r3, #0]
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2149      	movs	r1, #73	; 0x49
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f00e fea1 	bl	80168ca <u8x8_gpio_call>
    break;
 8007b88:	e012      	b.n	8007bb0 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_END_TRANSFER:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	461a      	mov	r2, r3
 8007b92:	2149      	movs	r1, #73	; 0x49
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f00e fe98 	bl	80168ca <u8x8_gpio_call>
	  __HAL_SPI_DISABLE(&hdisplayspi);
 8007b9a:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba8:	601a      	str	r2, [r3, #0]
    break;
 8007baa:	e001      	b.n	8007bb0 <u8x8_byte_4wire_hw_spi+0x158>
  default:
    return 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e000      	b.n	8007bb2 <u8x8_byte_4wire_hw_spi+0x15a>
  }
  return 1;
 8007bb0:	2301      	movs	r3, #1
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20001f70 	.word	0x20001f70
 8007bc0:	200008f4 	.word	0x200008f4
 8007bc4:	200008f0 	.word	0x200008f0

08007bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007bcc:	f7ff fdf0 	bl	80077b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007bd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007bd2:	e003      	b.n	8007bdc <LoopCopyDataInit>

08007bd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007bd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007bd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007bda:	3104      	adds	r1, #4

08007bdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007bdc:	480a      	ldr	r0, [pc, #40]	; (8007c08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007bde:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8007be0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007be2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007be4:	d3f6      	bcc.n	8007bd4 <CopyDataInit>
	ldr	r2, =_sbss
 8007be6:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007be8:	e002      	b.n	8007bf0 <LoopFillZerobss>

08007bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007bea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007bec:	f842 3b04 	str.w	r3, [r2], #4

08007bf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007bf0:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <LoopForever+0x16>)
	cmp	r2, r3
 8007bf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007bf4:	d3f9      	bcc.n	8007bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007bf6:	f015 fa1f 	bl	801d038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007bfa:	f7fe f883 	bl	8005d04 <main>

08007bfe <LoopForever>:

LoopForever:
    b LoopForever
 8007bfe:	e7fe      	b.n	8007bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007c00:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8007c04:	08029bd4 	.word	0x08029bd4
	ldr	r0, =_sdata
 8007c08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007c0c:	2000080c 	.word	0x2000080c
	ldr	r2, =_sbss
 8007c10:	20000810 	.word	0x20000810
	ldr	r3, = _ebss
 8007c14:	2000a050 	.word	0x2000a050

08007c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007c18:	e7fe      	b.n	8007c18 <ADC1_2_IRQHandler>

08007c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c24:	2003      	movs	r0, #3
 8007c26:	f001 fba8 	bl	800937a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c2a:	200f      	movs	r0, #15
 8007c2c:	f7ff fbfe 	bl	800742c <HAL_InitTick>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	71fb      	strb	r3, [r7, #7]
 8007c3a:	e001      	b.n	8007c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007c3c:	f7fe ff8e 	bl	8006b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007c40:	79fb      	ldrb	r3, [r7, #7]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <HAL_IncTick+0x20>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <HAL_IncTick+0x24>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	4a04      	ldr	r2, [pc, #16]	; (8007c70 <HAL_IncTick+0x24>)
 8007c5e:	6013      	str	r3, [r2, #0]
}
 8007c60:	bf00      	nop
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000320 	.word	0x20000320
 8007c70:	200082e8 	.word	0x200082e8

08007c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  return uwTick;
 8007c78:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <HAL_GetTick+0x14>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	200082e8 	.word	0x200082e8

08007c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c94:	f7ff ffee 	bl	8007c74 <HAL_GetTick>
 8007c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d005      	beq.n	8007cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <HAL_Delay+0x44>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007cb2:	bf00      	nop
 8007cb4:	f7ff ffde 	bl	8007c74 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d8f7      	bhi.n	8007cb4 <HAL_Delay+0x28>
  {
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000320 	.word	0x20000320

08007cd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	609a      	str	r2, [r3, #8]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3360      	adds	r3, #96	; 0x60
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <LL_ADC_SetOffset+0x44>)
 8007d5e:	4013      	ands	r3, r2
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007d74:	bf00      	nop
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	03fff000 	.word	0x03fff000

08007d84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3360      	adds	r3, #96	; 0x60
 8007d92:	461a      	mov	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3360      	adds	r3, #96	; 0x60
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007dda:	bf00      	nop
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	615a      	str	r2, [r3, #20]
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b087      	sub	sp, #28
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3330      	adds	r3, #48	; 0x30
 8007e42:	461a      	mov	r2, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	0a1b      	lsrs	r3, r3, #8
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	f003 030c 	and.w	r3, r3, #12
 8007e4e:	4413      	add	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	211f      	movs	r1, #31
 8007e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	401a      	ands	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	0e9b      	lsrs	r3, r3, #26
 8007e6a:	f003 011f 	and.w	r1, r3, #31
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f003 031f 	and.w	r3, r3, #31
 8007e74:	fa01 f303 	lsl.w	r3, r1, r3
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b087      	sub	sp, #28
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3314      	adds	r3, #20
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	0e5b      	lsrs	r3, r3, #25
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	4413      	add	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	0d1b      	lsrs	r3, r3, #20
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2107      	movs	r1, #7
 8007eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	401a      	ands	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	0d1b      	lsrs	r3, r3, #20
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007ed4:	bf00      	nop
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	401a      	ands	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f003 0318 	and.w	r3, r3, #24
 8007f02:	4908      	ldr	r1, [pc, #32]	; (8007f24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007f04:	40d9      	lsrs	r1, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	400b      	ands	r3, r1
 8007f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	0007ffff 	.word	0x0007ffff

08007f28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 031f 	and.w	r3, r3, #31
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6093      	str	r3, [r2, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7c:	d101      	bne.n	8007f82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e000      	b.n	8007f84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fcc:	d101      	bne.n	8007fd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ff4:	f043 0201 	orr.w	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <LL_ADC_IsEnabled+0x18>
 800801c:	2301      	movs	r3, #1
 800801e:	e000      	b.n	8008022 <LL_ADC_IsEnabled+0x1a>
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800803e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008042:	f043 0204 	orr.w	r2, r3, #4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 0304 	and.w	r3, r3, #4
 8008066:	2b04      	cmp	r3, #4
 8008068:	d101      	bne.n	800806e <LL_ADC_REG_IsConversionOngoing+0x18>
 800806a:	2301      	movs	r3, #1
 800806c:	e000      	b.n	8008070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b08      	cmp	r3, #8
 800808e:	d101      	bne.n	8008094 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
	...

080080a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b089      	sub	sp, #36	; 0x24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e139      	b.n	8008332 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7fe fd69 	bl	8006ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff ff3f 	bl	8007f68 <LL_ADC_IsDeepPowerDownEnabled>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff ff25 	bl	8007f44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4618      	mov	r0, r3
 8008100:	f7ff ff5a 	bl	8007fb8 <LL_ADC_IsInternalRegulatorEnabled>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d115      	bne.n	8008136 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff ff3e 	bl	8007f90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008114:	4b89      	ldr	r3, [pc, #548]	; (800833c <HAL_ADC_Init+0x298>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	099b      	lsrs	r3, r3, #6
 800811a:	4a89      	ldr	r2, [pc, #548]	; (8008340 <HAL_ADC_Init+0x29c>)
 800811c:	fba2 2303 	umull	r2, r3, r2, r3
 8008120:	099b      	lsrs	r3, r3, #6
 8008122:	3301      	adds	r3, #1
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008128:	e002      	b.n	8008130 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3b01      	subs	r3, #1
 800812e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f9      	bne.n	800812a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff ff3c 	bl	8007fb8 <LL_ADC_IsInternalRegulatorEnabled>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10d      	bne.n	8008162 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814a:	f043 0210 	orr.w	r2, r3, #16
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008156:	f043 0201 	orr.w	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff ff75 	bl	8008056 <LL_ADC_REG_IsConversionOngoing>
 800816c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008172:	f003 0310 	and.w	r3, r3, #16
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 80d2 	bne.w	8008320 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f040 80ce 	bne.w	8008320 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008188:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800818c:	f043 0202 	orr.w	r2, r3, #2
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff ff35 	bl	8008008 <LL_ADC_IsEnabled>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d115      	bne.n	80081d0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80081a4:	4867      	ldr	r0, [pc, #412]	; (8008344 <HAL_ADC_Init+0x2a0>)
 80081a6:	f7ff ff2f 	bl	8008008 <LL_ADC_IsEnabled>
 80081aa:	4604      	mov	r4, r0
 80081ac:	4866      	ldr	r0, [pc, #408]	; (8008348 <HAL_ADC_Init+0x2a4>)
 80081ae:	f7ff ff2b 	bl	8008008 <LL_ADC_IsEnabled>
 80081b2:	4603      	mov	r3, r0
 80081b4:	431c      	orrs	r4, r3
 80081b6:	4865      	ldr	r0, [pc, #404]	; (800834c <HAL_ADC_Init+0x2a8>)
 80081b8:	f7ff ff26 	bl	8008008 <LL_ADC_IsEnabled>
 80081bc:	4603      	mov	r3, r0
 80081be:	4323      	orrs	r3, r4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4619      	mov	r1, r3
 80081ca:	4861      	ldr	r0, [pc, #388]	; (8008350 <HAL_ADC_Init+0x2ac>)
 80081cc:	f7ff fd82 	bl	8007cd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7e5b      	ldrb	r3, [r3, #25]
 80081d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80081da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80081e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80081e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80081f0:	4313      	orrs	r3, r2
 80081f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d106      	bne.n	800820c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	3b01      	subs	r3, #1
 8008204:	045b      	lsls	r3, r3, #17
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	4313      	orrs	r3, r2
 800820a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008210:	2b00      	cmp	r3, #0
 8008212:	d009      	beq.n	8008228 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	4313      	orrs	r3, r2
 8008226:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	4b49      	ldr	r3, [pc, #292]	; (8008354 <HAL_ADC_Init+0x2b0>)
 8008230:	4013      	ands	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	69b9      	ldr	r1, [r7, #24]
 8008238:	430b      	orrs	r3, r1
 800823a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff ff08 	bl	8008056 <LL_ADC_REG_IsConversionOngoing>
 8008246:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff ff15 	bl	800807c <LL_ADC_INJ_IsConversionOngoing>
 8008252:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d140      	bne.n	80082dc <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d13d      	bne.n	80082dc <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	7e1b      	ldrb	r3, [r3, #24]
 8008268:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800826a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008272:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008274:	4313      	orrs	r3, r2
 8008276:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008282:	f023 0306 	bic.w	r3, r3, #6
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	69b9      	ldr	r1, [r7, #24]
 800828c:	430b      	orrs	r3, r1
 800828e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008296:	2b01      	cmp	r3, #1
 8008298:	d118      	bne.n	80082cc <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082a4:	f023 0304 	bic.w	r3, r3, #4
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80082b0:	4311      	orrs	r1, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80082b6:	4311      	orrs	r1, r2
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082bc:	430a      	orrs	r2, r1
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f042 0201 	orr.w	r2, r2, #1
 80082c8:	611a      	str	r2, [r3, #16]
 80082ca:	e007      	b.n	80082dc <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0201 	bic.w	r2, r2, #1
 80082da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d10c      	bne.n	80082fe <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ea:	f023 010f 	bic.w	r1, r3, #15
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	1e5a      	subs	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	631a      	str	r2, [r3, #48]	; 0x30
 80082fc:	e007      	b.n	800830e <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 020f 	bic.w	r2, r2, #15
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	f043 0201 	orr.w	r2, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	659a      	str	r2, [r3, #88]	; 0x58
 800831e:	e007      	b.n	8008330 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008324:	f043 0210 	orr.w	r2, r3, #16
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008330:	7ffb      	ldrb	r3, [r7, #31]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3724      	adds	r7, #36	; 0x24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd90      	pop	{r4, r7, pc}
 800833a:	bf00      	nop
 800833c:	20000318 	.word	0x20000318
 8008340:	053e2d63 	.word	0x053e2d63
 8008344:	50040000 	.word	0x50040000
 8008348:	50040100 	.word	0x50040100
 800834c:	50040200 	.word	0x50040200
 8008350:	50040300 	.word	0x50040300
 8008354:	fff0c007 	.word	0xfff0c007

08008358 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008360:	4857      	ldr	r0, [pc, #348]	; (80084c0 <HAL_ADC_Start+0x168>)
 8008362:	f7ff fde1 	bl	8007f28 <LL_ADC_GetMultimode>
 8008366:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff fe72 	bl	8008056 <LL_ADC_REG_IsConversionOngoing>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	f040 809c 	bne.w	80084b2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_ADC_Start+0x30>
 8008384:	2302      	movs	r3, #2
 8008386:	e097      	b.n	80084b8 <HAL_ADC_Start+0x160>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fd79 	bl	8008e88 <ADC_Enable>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f040 8083 	bne.w	80084a8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80083aa:	f023 0301 	bic.w	r3, r3, #1
 80083ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a42      	ldr	r2, [pc, #264]	; (80084c4 <HAL_ADC_Start+0x16c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d002      	beq.n	80083c6 <HAL_ADC_Start+0x6e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	e000      	b.n	80083c8 <HAL_ADC_Start+0x70>
 80083c6:	4b40      	ldr	r3, [pc, #256]	; (80084c8 <HAL_ADC_Start+0x170>)
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6812      	ldr	r2, [r2, #0]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d002      	beq.n	80083d6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ee:	d106      	bne.n	80083fe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f4:	f023 0206 	bic.w	r2, r3, #6
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80083fc:	e002      	b.n	8008404 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	221c      	movs	r2, #28
 800840a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a2a      	ldr	r2, [pc, #168]	; (80084c4 <HAL_ADC_Start+0x16c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d002      	beq.n	8008424 <HAL_ADC_Start+0xcc>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	e000      	b.n	8008426 <HAL_ADC_Start+0xce>
 8008424:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <HAL_ADC_Start+0x170>)
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6812      	ldr	r2, [r2, #0]
 800842a:	4293      	cmp	r3, r2
 800842c:	d008      	beq.n	8008440 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d002      	beq.n	8008440 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b09      	cmp	r3, #9
 800843e:	d114      	bne.n	800846a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fde3 	bl	800802e <LL_ADC_REG_StartConversion>
 8008468:	e025      	b.n	80084b6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a12      	ldr	r2, [pc, #72]	; (80084c4 <HAL_ADC_Start+0x16c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d002      	beq.n	8008486 <HAL_ADC_Start+0x12e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	e000      	b.n	8008488 <HAL_ADC_Start+0x130>
 8008486:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <HAL_ADC_Start+0x170>)
 8008488:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00f      	beq.n	80084b6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800849e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	659a      	str	r2, [r3, #88]	; 0x58
 80084a6:	e006      	b.n	80084b6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80084b0:	e001      	b.n	80084b6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80084b2:	2302      	movs	r3, #2
 80084b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	50040300 	.word	0x50040300
 80084c4:	50040100 	.word	0x50040100
 80084c8:	50040000 	.word	0x50040000

080084cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80084d8:	4850      	ldr	r0, [pc, #320]	; (800861c <HAL_ADC_Start_DMA+0x150>)
 80084da:	f7ff fd25 	bl	8007f28 <LL_ADC_GetMultimode>
 80084de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fdb6 	bl	8008056 <LL_ADC_REG_IsConversionOngoing>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 808e 	bne.w	800860e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_ADC_Start_DMA+0x34>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e089      	b.n	8008614 <HAL_ADC_Start_DMA+0x148>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b05      	cmp	r3, #5
 8008512:	d002      	beq.n	800851a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b09      	cmp	r3, #9
 8008518:	d172      	bne.n	8008600 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fcb4 	bl	8008e88 <ADC_Enable>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d165      	bne.n	80085f6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a37      	ldr	r2, [pc, #220]	; (8008620 <HAL_ADC_Start_DMA+0x154>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d002      	beq.n	800854e <HAL_ADC_Start_DMA+0x82>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	e000      	b.n	8008550 <HAL_ADC_Start_DMA+0x84>
 800854e:	4b35      	ldr	r3, [pc, #212]	; (8008624 <HAL_ADC_Start_DMA+0x158>)
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	6812      	ldr	r2, [r2, #0]
 8008554:	4293      	cmp	r3, r2
 8008556:	d002      	beq.n	800855e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d105      	bne.n	800856a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d006      	beq.n	8008584 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857a:	f023 0206 	bic.w	r2, r3, #6
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	65da      	str	r2, [r3, #92]	; 0x5c
 8008582:	e002      	b.n	800858a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858e:	4a26      	ldr	r2, [pc, #152]	; (8008628 <HAL_ADC_Start_DMA+0x15c>)
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008596:	4a25      	ldr	r2, [pc, #148]	; (800862c <HAL_ADC_Start_DMA+0x160>)
 8008598:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859e:	4a24      	ldr	r2, [pc, #144]	; (8008630 <HAL_ADC_Start_DMA+0x164>)
 80085a0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	221c      	movs	r2, #28
 80085a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0210 	orr.w	r2, r2, #16
 80085c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0201 	orr.w	r2, r2, #1
 80085d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3340      	adds	r3, #64	; 0x40
 80085dc:	4619      	mov	r1, r3
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f001 fad5 	bl	8009b90 <HAL_DMA_Start_IT>
 80085e6:	4603      	mov	r3, r0
 80085e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fd1d 	bl	800802e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80085f4:	e00d      	b.n	8008612 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80085fe:	e008      	b.n	8008612 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800860c:	e001      	b.n	8008612 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800860e:	2302      	movs	r3, #2
 8008610:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	50040300 	.word	0x50040300
 8008620:	50040100 	.word	0x50040100
 8008624:	50040000 	.word	0x50040000
 8008628:	08008f4d 	.word	0x08008f4d
 800862c:	08009025 	.word	0x08009025
 8008630:	08009041 	.word	0x08009041

08008634 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b0b6      	sub	sp, #216	; 0xd8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_ADC_ConfigChannel+0x22>
 800868e:	2302      	movs	r3, #2
 8008690:	e3e3      	b.n	8008e5a <HAL_ADC_ConfigChannel+0x7ea>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff fcd9 	bl	8008056 <LL_ADC_REG_IsConversionOngoing>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 83c4 	bne.w	8008e34 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b05      	cmp	r3, #5
 80086b2:	d824      	bhi.n	80086fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	3b02      	subs	r3, #2
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d81b      	bhi.n	80086f6 <HAL_ADC_ConfigChannel+0x86>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <HAL_ADC_ConfigChannel+0x54>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086d5 	.word	0x080086d5
 80086c8:	080086dd 	.word	0x080086dd
 80086cc:	080086e5 	.word	0x080086e5
 80086d0:	080086ed 	.word	0x080086ed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	220c      	movs	r2, #12
 80086d8:	605a      	str	r2, [r3, #4]
          break;
 80086da:	e011      	b.n	8008700 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2212      	movs	r2, #18
 80086e0:	605a      	str	r2, [r3, #4]
          break;
 80086e2:	e00d      	b.n	8008700 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2218      	movs	r2, #24
 80086e8:	605a      	str	r2, [r3, #4]
          break;
 80086ea:	e009      	b.n	8008700 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086f2:	605a      	str	r2, [r3, #4]
          break;
 80086f4:	e004      	b.n	8008700 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2206      	movs	r2, #6
 80086fa:	605a      	str	r2, [r3, #4]
          break;
 80086fc:	e000      	b.n	8008700 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80086fe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	6859      	ldr	r1, [r3, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	f7ff fb90 	bl	8007e32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fc9d 	bl	8008056 <LL_ADC_REG_IsConversionOngoing>
 800871c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fca9 	bl	800807c <LL_ADC_INJ_IsConversionOngoing>
 800872a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800872e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008732:	2b00      	cmp	r3, #0
 8008734:	f040 81c1 	bne.w	8008aba <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 81bc 	bne.w	8008aba <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800874a:	d10f      	bne.n	800876c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	4619      	mov	r1, r3
 8008758:	f7ff fb97 	bl	8007e8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008764:	4618      	mov	r0, r3
 8008766:	f7ff fb3e 	bl	8007de6 <LL_ADC_SetSamplingTimeCommonConfig>
 800876a:	e00e      	b.n	800878a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6818      	ldr	r0, [r3, #0]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	6819      	ldr	r1, [r3, #0]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	461a      	mov	r2, r3
 800877a:	f7ff fb86 	bl	8007e8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff fb2e 	bl	8007de6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695a      	ldr	r2, [r3, #20]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	08db      	lsrs	r3, r3, #3
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	fa02 f303 	lsl.w	r3, r2, r3
 80087a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d00a      	beq.n	80087c2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	6919      	ldr	r1, [r3, #16]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087bc:	f7ff fabe 	bl	8007d3c <LL_ADC_SetOffset>
 80087c0:	e17b      	b.n	8008aba <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fadb 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <HAL_ADC_ConfigChannel+0x17e>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff fad0 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 80087e4:	4603      	mov	r3, r0
 80087e6:	0e9b      	lsrs	r3, r3, #26
 80087e8:	f003 021f 	and.w	r2, r3, #31
 80087ec:	e01e      	b.n	800882c <HAL_ADC_ConfigChannel+0x1bc>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fac5 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 80087fa:	4603      	mov	r3, r0
 80087fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008800:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008804:	fa93 f3a3 	rbit	r3, r3
 8008808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800880c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008810:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800881c:	2320      	movs	r3, #32
 800881e:	e004      	b.n	800882a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8008820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008824:	fab3 f383 	clz	r3, r3
 8008828:	b2db      	uxtb	r3, r3
 800882a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008834:	2b00      	cmp	r3, #0
 8008836:	d105      	bne.n	8008844 <HAL_ADC_ConfigChannel+0x1d4>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	0e9b      	lsrs	r3, r3, #26
 800883e:	f003 031f 	and.w	r3, r3, #31
 8008842:	e018      	b.n	8008876 <HAL_ADC_ConfigChannel+0x206>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800884c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008850:	fa93 f3a3 	rbit	r3, r3
 8008854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800885c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8008868:	2320      	movs	r3, #32
 800886a:	e004      	b.n	8008876 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800886c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008870:	fab3 f383 	clz	r3, r3
 8008874:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008876:	429a      	cmp	r2, r3
 8008878:	d106      	bne.n	8008888 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fa94 	bl	8007db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2101      	movs	r1, #1
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff fa78 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 8008894:	4603      	mov	r3, r0
 8008896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <HAL_ADC_ConfigChannel+0x244>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2101      	movs	r1, #1
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff fa6d 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 80088aa:	4603      	mov	r3, r0
 80088ac:	0e9b      	lsrs	r3, r3, #26
 80088ae:	f003 021f 	and.w	r2, r3, #31
 80088b2:	e01e      	b.n	80088f2 <HAL_ADC_ConfigChannel+0x282>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2101      	movs	r1, #1
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fa62 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088ca:	fa93 f3a3 	rbit	r3, r3
 80088ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80088d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80088da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80088e2:	2320      	movs	r3, #32
 80088e4:	e004      	b.n	80088f0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80088e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088ea:	fab3 f383 	clz	r3, r3
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d105      	bne.n	800890a <HAL_ADC_ConfigChannel+0x29a>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	0e9b      	lsrs	r3, r3, #26
 8008904:	f003 031f 	and.w	r3, r3, #31
 8008908:	e018      	b.n	800893c <HAL_ADC_ConfigChannel+0x2cc>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008912:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008916:	fa93 f3a3 	rbit	r3, r3
 800891a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800891e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800892e:	2320      	movs	r3, #32
 8008930:	e004      	b.n	800893c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8008932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008936:	fab3 f383 	clz	r3, r3
 800893a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800893c:	429a      	cmp	r2, r3
 800893e:	d106      	bne.n	800894e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2200      	movs	r2, #0
 8008946:	2101      	movs	r1, #1
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fa31 	bl	8007db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2102      	movs	r1, #2
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff fa15 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 800895a:	4603      	mov	r3, r0
 800895c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <HAL_ADC_ConfigChannel+0x30a>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2102      	movs	r1, #2
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fa0a 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 8008970:	4603      	mov	r3, r0
 8008972:	0e9b      	lsrs	r3, r3, #26
 8008974:	f003 021f 	and.w	r2, r3, #31
 8008978:	e01e      	b.n	80089b8 <HAL_ADC_ConfigChannel+0x348>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2102      	movs	r1, #2
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff f9ff 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 8008986:	4603      	mov	r3, r0
 8008988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800898c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008990:	fa93 f3a3 	rbit	r3, r3
 8008994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008998:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800899c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80089a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80089a8:	2320      	movs	r3, #32
 80089aa:	e004      	b.n	80089b6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80089ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089b0:	fab3 f383 	clz	r3, r3
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d105      	bne.n	80089d0 <HAL_ADC_ConfigChannel+0x360>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	0e9b      	lsrs	r3, r3, #26
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	e016      	b.n	80089fe <HAL_ADC_ConfigChannel+0x38e>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089dc:	fa93 f3a3 	rbit	r3, r3
 80089e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80089e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80089e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80089f0:	2320      	movs	r3, #32
 80089f2:	e004      	b.n	80089fe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80089f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089f8:	fab3 f383 	clz	r3, r3
 80089fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d106      	bne.n	8008a10 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	2102      	movs	r1, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff f9d0 	bl	8007db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2103      	movs	r1, #3
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff f9b4 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <HAL_ADC_ConfigChannel+0x3cc>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2103      	movs	r1, #3
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff f9a9 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 8008a32:	4603      	mov	r3, r0
 8008a34:	0e9b      	lsrs	r3, r3, #26
 8008a36:	f003 021f 	and.w	r2, r3, #31
 8008a3a:	e017      	b.n	8008a6c <HAL_ADC_ConfigChannel+0x3fc>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2103      	movs	r1, #3
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff f99e 	bl	8007d84 <LL_ADC_GetOffsetChannel>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a4e:	fa93 f3a3 	rbit	r3, r3
 8008a52:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a56:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8008a5e:	2320      	movs	r3, #32
 8008a60:	e003      	b.n	8008a6a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8008a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a64:	fab3 f383 	clz	r3, r3
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d105      	bne.n	8008a84 <HAL_ADC_ConfigChannel+0x414>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	0e9b      	lsrs	r3, r3, #26
 8008a7e:	f003 031f 	and.w	r3, r3, #31
 8008a82:	e011      	b.n	8008aa8 <HAL_ADC_ConfigChannel+0x438>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a8c:	fa93 f3a3 	rbit	r3, r3
 8008a90:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	e003      	b.n	8008aa8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8008aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa2:	fab3 f383 	clz	r3, r3
 8008aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d106      	bne.n	8008aba <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2103      	movs	r1, #3
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff f97b 	bl	8007db0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff faa2 	bl	8008008 <LL_ADC_IsEnabled>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f040 8140 	bne.w	8008d4c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	f7ff fa01 	bl	8007ee0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	4a8f      	ldr	r2, [pc, #572]	; (8008d20 <HAL_ADC_ConfigChannel+0x6b0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	f040 8131 	bne.w	8008d4c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <HAL_ADC_ConfigChannel+0x4a2>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	0e9b      	lsrs	r3, r3, #26
 8008b00:	3301      	adds	r3, #1
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	2b09      	cmp	r3, #9
 8008b08:	bf94      	ite	ls
 8008b0a:	2301      	movls	r3, #1
 8008b0c:	2300      	movhi	r3, #0
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	e019      	b.n	8008b46 <HAL_ADC_ConfigChannel+0x4d6>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b1a:	fa93 f3a3 	rbit	r3, r3
 8008b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	e003      	b.n	8008b36 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8008b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b30:	fab3 f383 	clz	r3, r3
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	3301      	adds	r3, #1
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	2b09      	cmp	r3, #9
 8008b3e:	bf94      	ite	ls
 8008b40:	2301      	movls	r3, #1
 8008b42:	2300      	movhi	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d079      	beq.n	8008c3e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d107      	bne.n	8008b66 <HAL_ADC_ConfigChannel+0x4f6>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	0e9b      	lsrs	r3, r3, #26
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	069b      	lsls	r3, r3, #26
 8008b60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b64:	e015      	b.n	8008b92 <HAL_ADC_ConfigChannel+0x522>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6e:	fa93 f3a3 	rbit	r3, r3
 8008b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b76:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8008b7e:	2320      	movs	r3, #32
 8008b80:	e003      	b.n	8008b8a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8008b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b84:	fab3 f383 	clz	r3, r3
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	069b      	lsls	r3, r3, #26
 8008b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <HAL_ADC_ConfigChannel+0x542>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	0e9b      	lsrs	r3, r3, #26
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f003 031f 	and.w	r3, r3, #31
 8008baa:	2101      	movs	r1, #1
 8008bac:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb0:	e017      	b.n	8008be2 <HAL_ADC_ConfigChannel+0x572>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bba:	fa93 f3a3 	rbit	r3, r3
 8008bbe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8008bca:	2320      	movs	r3, #32
 8008bcc:	e003      	b.n	8008bd6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8008bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd0:	fab3 f383 	clz	r3, r3
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	2101      	movs	r1, #1
 8008bde:	fa01 f303 	lsl.w	r3, r1, r3
 8008be2:	ea42 0103 	orr.w	r1, r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <HAL_ADC_ConfigChannel+0x598>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	0e9b      	lsrs	r3, r3, #26
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	f003 021f 	and.w	r2, r3, #31
 8008bfe:	4613      	mov	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	051b      	lsls	r3, r3, #20
 8008c06:	e018      	b.n	8008c3a <HAL_ADC_ConfigChannel+0x5ca>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	fa93 f3a3 	rbit	r3, r3
 8008c14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8008c20:	2320      	movs	r3, #32
 8008c22:	e003      	b.n	8008c2c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8008c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c26:	fab3 f383 	clz	r3, r3
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	f003 021f 	and.w	r2, r3, #31
 8008c32:	4613      	mov	r3, r2
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	4413      	add	r3, r2
 8008c38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c3a:	430b      	orrs	r3, r1
 8008c3c:	e081      	b.n	8008d42 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d107      	bne.n	8008c5a <HAL_ADC_ConfigChannel+0x5ea>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	0e9b      	lsrs	r3, r3, #26
 8008c50:	3301      	adds	r3, #1
 8008c52:	069b      	lsls	r3, r3, #26
 8008c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c58:	e015      	b.n	8008c86 <HAL_ADC_ConfigChannel+0x616>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	fa93 f3a3 	rbit	r3, r3
 8008c66:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8008c72:	2320      	movs	r3, #32
 8008c74:	e003      	b.n	8008c7e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	fab3 f383 	clz	r3, r3
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	3301      	adds	r3, #1
 8008c80:	069b      	lsls	r3, r3, #26
 8008c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <HAL_ADC_ConfigChannel+0x636>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	0e9b      	lsrs	r3, r3, #26
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca4:	e017      	b.n	8008cd6 <HAL_ADC_ConfigChannel+0x666>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	fa93 f3a3 	rbit	r3, r3
 8008cb2:	61fb      	str	r3, [r7, #28]
  return result;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8008cbe:	2320      	movs	r3, #32
 8008cc0:	e003      	b.n	8008cca <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	fab3 f383 	clz	r3, r3
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd6:	ea42 0103 	orr.w	r1, r2, r3
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10d      	bne.n	8008d02 <HAL_ADC_ConfigChannel+0x692>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	0e9b      	lsrs	r3, r3, #26
 8008cec:	3301      	adds	r3, #1
 8008cee:	f003 021f 	and.w	r2, r3, #31
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3b1e      	subs	r3, #30
 8008cfa:	051b      	lsls	r3, r3, #20
 8008cfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d00:	e01e      	b.n	8008d40 <HAL_ADC_ConfigChannel+0x6d0>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	fa93 f3a3 	rbit	r3, r3
 8008d0e:	613b      	str	r3, [r7, #16]
  return result;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8008d1a:	2320      	movs	r3, #32
 8008d1c:	e006      	b.n	8008d2c <HAL_ADC_ConfigChannel+0x6bc>
 8008d1e:	bf00      	nop
 8008d20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	fab3 f383 	clz	r3, r3
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	f003 021f 	and.w	r2, r3, #31
 8008d32:	4613      	mov	r3, r2
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	4413      	add	r3, r2
 8008d38:	3b1e      	subs	r3, #30
 8008d3a:	051b      	lsls	r3, r3, #20
 8008d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d40:	430b      	orrs	r3, r1
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	6892      	ldr	r2, [r2, #8]
 8008d46:	4619      	mov	r1, r3
 8008d48:	f7ff f89f 	bl	8007e8a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	4b44      	ldr	r3, [pc, #272]	; (8008e64 <HAL_ADC_ConfigChannel+0x7f4>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d07a      	beq.n	8008e4e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008d58:	4843      	ldr	r0, [pc, #268]	; (8008e68 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d5a:	f7fe ffe1 	bl	8007d20 <LL_ADC_GetCommonPathInternalCh>
 8008d5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a41      	ldr	r2, [pc, #260]	; (8008e6c <HAL_ADC_ConfigChannel+0x7fc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d12c      	bne.n	8008dc6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d126      	bne.n	8008dc6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a3c      	ldr	r2, [pc, #240]	; (8008e70 <HAL_ADC_ConfigChannel+0x800>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d004      	beq.n	8008d8c <HAL_ADC_ConfigChannel+0x71c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a3b      	ldr	r2, [pc, #236]	; (8008e74 <HAL_ADC_ConfigChannel+0x804>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d15d      	bne.n	8008e48 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d94:	4619      	mov	r1, r3
 8008d96:	4834      	ldr	r0, [pc, #208]	; (8008e68 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d98:	f7fe ffaf 	bl	8007cfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008d9c:	4b36      	ldr	r3, [pc, #216]	; (8008e78 <HAL_ADC_ConfigChannel+0x808>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	099b      	lsrs	r3, r3, #6
 8008da2:	4a36      	ldr	r2, [pc, #216]	; (8008e7c <HAL_ADC_ConfigChannel+0x80c>)
 8008da4:	fba2 2303 	umull	r2, r3, r2, r3
 8008da8:	099b      	lsrs	r3, r3, #6
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	4613      	mov	r3, r2
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008db6:	e002      	b.n	8008dbe <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1f9      	bne.n	8008db8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008dc4:	e040      	b.n	8008e48 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a2d      	ldr	r2, [pc, #180]	; (8008e80 <HAL_ADC_ConfigChannel+0x810>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d118      	bne.n	8008e02 <HAL_ADC_ConfigChannel+0x792>
 8008dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d112      	bne.n	8008e02 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a23      	ldr	r2, [pc, #140]	; (8008e70 <HAL_ADC_ConfigChannel+0x800>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d004      	beq.n	8008df0 <HAL_ADC_ConfigChannel+0x780>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a22      	ldr	r2, [pc, #136]	; (8008e74 <HAL_ADC_ConfigChannel+0x804>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d12d      	bne.n	8008e4c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008df8:	4619      	mov	r1, r3
 8008dfa:	481b      	ldr	r0, [pc, #108]	; (8008e68 <HAL_ADC_ConfigChannel+0x7f8>)
 8008dfc:	f7fe ff7d 	bl	8007cfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e00:	e024      	b.n	8008e4c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <HAL_ADC_ConfigChannel+0x814>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d120      	bne.n	8008e4e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d11a      	bne.n	8008e4e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a14      	ldr	r2, [pc, #80]	; (8008e70 <HAL_ADC_ConfigChannel+0x800>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d115      	bne.n	8008e4e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	480e      	ldr	r0, [pc, #56]	; (8008e68 <HAL_ADC_ConfigChannel+0x7f8>)
 8008e2e:	f7fe ff64 	bl	8007cfa <LL_ADC_SetCommonPathInternalCh>
 8008e32:	e00c      	b.n	8008e4e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e38:	f043 0220 	orr.w	r2, r3, #32
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008e46:	e002      	b.n	8008e4e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e48:	bf00      	nop
 8008e4a:	e000      	b.n	8008e4e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008e56:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	37d8      	adds	r7, #216	; 0xd8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	80080000 	.word	0x80080000
 8008e68:	50040300 	.word	0x50040300
 8008e6c:	c7520000 	.word	0xc7520000
 8008e70:	50040000 	.word	0x50040000
 8008e74:	50040200 	.word	0x50040200
 8008e78:	20000318 	.word	0x20000318
 8008e7c:	053e2d63 	.word	0x053e2d63
 8008e80:	cb840000 	.word	0xcb840000
 8008e84:	80000001 	.word	0x80000001

08008e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff f8b7 	bl	8008008 <LL_ADC_IsEnabled>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d14d      	bne.n	8008f3c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	4b28      	ldr	r3, [pc, #160]	; (8008f48 <ADC_Enable+0xc0>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00d      	beq.n	8008eca <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb2:	f043 0210 	orr.w	r2, r3, #16
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ebe:	f043 0201 	orr.w	r2, r3, #1
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e039      	b.n	8008f3e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff f886 	bl	8007fe0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008ed4:	f7fe fece 	bl	8007c74 <HAL_GetTick>
 8008ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008eda:	e028      	b.n	8008f2e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff f891 	bl	8008008 <LL_ADC_IsEnabled>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff f875 	bl	8007fe0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008ef6:	f7fe febd 	bl	8007c74 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d914      	bls.n	8008f2e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d00d      	beq.n	8008f2e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f16:	f043 0210 	orr.w	r2, r3, #16
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f22:	f043 0201 	orr.w	r2, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e007      	b.n	8008f3e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d1cf      	bne.n	8008edc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	8000003f 	.word	0x8000003f

08008f4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d14b      	bne.n	8008ffe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0308 	and.w	r3, r3, #8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d021      	beq.n	8008fc4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe ff41 	bl	8007e0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d032      	beq.n	8008ff6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d12b      	bne.n	8008ff6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d11f      	bne.n	8008ff6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fba:	f043 0201 	orr.w	r2, r3, #1
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	659a      	str	r2, [r3, #88]	; 0x58
 8008fc2:	e018      	b.n	8008ff6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d111      	bne.n	8008ff6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d105      	bne.n	8008ff6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fee:	f043 0201 	orr.w	r2, r3, #1
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7ff fb1c 	bl	8008634 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008ffc:	e00e      	b.n	800901c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009002:	f003 0310 	and.w	r3, r3, #16
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fb26 	bl	800865c <HAL_ADC_ErrorCallback>
}
 8009010:	e004      	b.n	800901c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	4798      	blx	r3
}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009030:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fb08 	bl	8008648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905e:	f043 0204 	orr.w	r2, r3, #4
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff faf8 	bl	800865c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <LL_ADC_IsEnabled>:
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <LL_ADC_IsEnabled+0x18>
 8009088:	2301      	movs	r3, #1
 800908a:	e000      	b.n	800908e <LL_ADC_IsEnabled+0x1a>
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <LL_ADC_REG_IsConversionOngoing>:
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d101      	bne.n	80090b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80090c0:	b590      	push	{r4, r7, lr}
 80090c2:	b0a1      	sub	sp, #132	; 0x84
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80090da:	2302      	movs	r3, #2
 80090dc:	e093      	b.n	8009206 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80090e6:	2300      	movs	r3, #0
 80090e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80090ea:	2300      	movs	r3, #0
 80090ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a47      	ldr	r2, [pc, #284]	; (8009210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d102      	bne.n	80090fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80090f8:	4b46      	ldr	r3, [pc, #280]	; (8009214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	e001      	b.n	8009102 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910c:	f043 0220 	orr.w	r2, r3, #32
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e072      	b.n	8009206 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff ffb9 	bl	800909a <LL_ADC_REG_IsConversionOngoing>
 8009128:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ffb3 	bl	800909a <LL_ADC_REG_IsConversionOngoing>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d154      	bne.n	80091e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800913a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913c:	2b00      	cmp	r3, #0
 800913e:	d151      	bne.n	80091e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009140:	4b35      	ldr	r3, [pc, #212]	; (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8009142:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d02c      	beq.n	80091a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800914c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	6859      	ldr	r1, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800915e:	035b      	lsls	r3, r3, #13
 8009160:	430b      	orrs	r3, r1
 8009162:	431a      	orrs	r2, r3
 8009164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009166:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009168:	4829      	ldr	r0, [pc, #164]	; (8009210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800916a:	f7ff ff83 	bl	8009074 <LL_ADC_IsEnabled>
 800916e:	4604      	mov	r4, r0
 8009170:	4828      	ldr	r0, [pc, #160]	; (8009214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009172:	f7ff ff7f 	bl	8009074 <LL_ADC_IsEnabled>
 8009176:	4603      	mov	r3, r0
 8009178:	431c      	orrs	r4, r3
 800917a:	4828      	ldr	r0, [pc, #160]	; (800921c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800917c:	f7ff ff7a 	bl	8009074 <LL_ADC_IsEnabled>
 8009180:	4603      	mov	r3, r0
 8009182:	4323      	orrs	r3, r4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d137      	bne.n	80091f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009190:	f023 030f 	bic.w	r3, r3, #15
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	6811      	ldr	r1, [r2, #0]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	6892      	ldr	r2, [r2, #8]
 800919c:	430a      	orrs	r2, r1
 800919e:	431a      	orrs	r2, r3
 80091a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091a4:	e028      	b.n	80091f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80091a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091b2:	4817      	ldr	r0, [pc, #92]	; (8009210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80091b4:	f7ff ff5e 	bl	8009074 <LL_ADC_IsEnabled>
 80091b8:	4604      	mov	r4, r0
 80091ba:	4816      	ldr	r0, [pc, #88]	; (8009214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80091bc:	f7ff ff5a 	bl	8009074 <LL_ADC_IsEnabled>
 80091c0:	4603      	mov	r3, r0
 80091c2:	431c      	orrs	r4, r3
 80091c4:	4815      	ldr	r0, [pc, #84]	; (800921c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80091c6:	f7ff ff55 	bl	8009074 <LL_ADC_IsEnabled>
 80091ca:	4603      	mov	r3, r0
 80091cc:	4323      	orrs	r3, r4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d112      	bne.n	80091f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80091d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80091da:	f023 030f 	bic.w	r3, r3, #15
 80091de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80091e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091e2:	e009      	b.n	80091f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e8:	f043 0220 	orr.w	r2, r3, #32
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80091f6:	e000      	b.n	80091fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8009202:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009206:	4618      	mov	r0, r3
 8009208:	3784      	adds	r7, #132	; 0x84
 800920a:	46bd      	mov	sp, r7
 800920c:	bd90      	pop	{r4, r7, pc}
 800920e:	bf00      	nop
 8009210:	50040000 	.word	0x50040000
 8009214:	50040100 	.word	0x50040100
 8009218:	50040300 	.word	0x50040300
 800921c:	50040200 	.word	0x50040200

08009220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009230:	4b0c      	ldr	r3, [pc, #48]	; (8009264 <__NVIC_SetPriorityGrouping+0x44>)
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800923c:	4013      	ands	r3, r2
 800923e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800924c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009252:	4a04      	ldr	r2, [pc, #16]	; (8009264 <__NVIC_SetPriorityGrouping+0x44>)
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	60d3      	str	r3, [r2, #12]
}
 8009258:	bf00      	nop
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	e000ed00 	.word	0xe000ed00

08009268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <__NVIC_GetPriorityGrouping+0x18>)
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	f003 0307 	and.w	r3, r3, #7
}
 8009276:	4618      	mov	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	e000ed00 	.word	0xe000ed00

08009284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800928e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009292:	2b00      	cmp	r3, #0
 8009294:	db0b      	blt.n	80092ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	f003 021f 	and.w	r2, r3, #31
 800929c:	4907      	ldr	r1, [pc, #28]	; (80092bc <__NVIC_EnableIRQ+0x38>)
 800929e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	2001      	movs	r0, #1
 80092a6:	fa00 f202 	lsl.w	r2, r0, r2
 80092aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	e000e100 	.word	0xe000e100

080092c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	db0a      	blt.n	80092ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	490c      	ldr	r1, [pc, #48]	; (800930c <__NVIC_SetPriority+0x4c>)
 80092da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092de:	0112      	lsls	r2, r2, #4
 80092e0:	b2d2      	uxtb	r2, r2
 80092e2:	440b      	add	r3, r1
 80092e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80092e8:	e00a      	b.n	8009300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	4908      	ldr	r1, [pc, #32]	; (8009310 <__NVIC_SetPriority+0x50>)
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	3b04      	subs	r3, #4
 80092f8:	0112      	lsls	r2, r2, #4
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	440b      	add	r3, r1
 80092fe:	761a      	strb	r2, [r3, #24]
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	e000e100 	.word	0xe000e100
 8009310:	e000ed00 	.word	0xe000ed00

08009314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009314:	b480      	push	{r7}
 8009316:	b089      	sub	sp, #36	; 0x24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	f1c3 0307 	rsb	r3, r3, #7
 800932e:	2b04      	cmp	r3, #4
 8009330:	bf28      	it	cs
 8009332:	2304      	movcs	r3, #4
 8009334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	3304      	adds	r3, #4
 800933a:	2b06      	cmp	r3, #6
 800933c:	d902      	bls.n	8009344 <NVIC_EncodePriority+0x30>
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3b03      	subs	r3, #3
 8009342:	e000      	b.n	8009346 <NVIC_EncodePriority+0x32>
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009348:	f04f 32ff 	mov.w	r2, #4294967295
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	fa02 f303 	lsl.w	r3, r2, r3
 8009352:	43da      	mvns	r2, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	401a      	ands	r2, r3
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800935c:	f04f 31ff 	mov.w	r1, #4294967295
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	fa01 f303 	lsl.w	r3, r1, r3
 8009366:	43d9      	mvns	r1, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800936c:	4313      	orrs	r3, r2
         );
}
 800936e:	4618      	mov	r0, r3
 8009370:	3724      	adds	r7, #36	; 0x24
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff ff4c 	bl	8009220 <__NVIC_SetPriorityGrouping>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80093a2:	f7ff ff61 	bl	8009268 <__NVIC_GetPriorityGrouping>
 80093a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	6978      	ldr	r0, [r7, #20]
 80093ae:	f7ff ffb1 	bl	8009314 <NVIC_EncodePriority>
 80093b2:	4602      	mov	r2, r0
 80093b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff ff80 	bl	80092c0 <__NVIC_SetPriority>
}
 80093c0:	bf00      	nop
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80093d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff ff54 	bl	8009284 <__NVIC_EnableIRQ>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e014      	b.n	8009420 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	791b      	ldrb	r3, [r3, #4]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7fd fcbe 	bl	8006d88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	795b      	ldrb	r3, [r3, #5]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_DAC_Start_DMA+0x1e>
 8009442:	2302      	movs	r3, #2
 8009444:	e0ab      	b.n	800959e <HAL_DAC_Start_DMA+0x176>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2202      	movs	r2, #2
 8009450:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d12f      	bne.n	80094b8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	4a52      	ldr	r2, [pc, #328]	; (80095a8 <HAL_DAC_Start_DMA+0x180>)
 800945e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	4a51      	ldr	r2, [pc, #324]	; (80095ac <HAL_DAC_Start_DMA+0x184>)
 8009466:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	4a50      	ldr	r2, [pc, #320]	; (80095b0 <HAL_DAC_Start_DMA+0x188>)
 800946e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800947e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	2b08      	cmp	r3, #8
 8009484:	d013      	beq.n	80094ae <HAL_DAC_Start_DMA+0x86>
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	2b08      	cmp	r3, #8
 800948a:	d845      	bhi.n	8009518 <HAL_DAC_Start_DMA+0xf0>
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_DAC_Start_DMA+0x72>
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	2b04      	cmp	r3, #4
 8009496:	d005      	beq.n	80094a4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009498:	e03e      	b.n	8009518 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	613b      	str	r3, [r7, #16]
        break;
 80094a2:	e03c      	b.n	800951e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	330c      	adds	r3, #12
 80094aa:	613b      	str	r3, [r7, #16]
        break;
 80094ac:	e037      	b.n	800951e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3310      	adds	r3, #16
 80094b4:	613b      	str	r3, [r7, #16]
        break;
 80094b6:	e032      	b.n	800951e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	4a3d      	ldr	r2, [pc, #244]	; (80095b4 <HAL_DAC_Start_DMA+0x18c>)
 80094be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	4a3c      	ldr	r2, [pc, #240]	; (80095b8 <HAL_DAC_Start_DMA+0x190>)
 80094c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	4a3b      	ldr	r2, [pc, #236]	; (80095bc <HAL_DAC_Start_DMA+0x194>)
 80094ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80094de:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	d013      	beq.n	800950e <HAL_DAC_Start_DMA+0xe6>
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d817      	bhi.n	800951c <HAL_DAC_Start_DMA+0xf4>
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <HAL_DAC_Start_DMA+0xd2>
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d005      	beq.n	8009504 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80094f8:	e010      	b.n	800951c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	613b      	str	r3, [r7, #16]
        break;
 8009502:	e00c      	b.n	800951e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3318      	adds	r3, #24
 800950a:	613b      	str	r3, [r7, #16]
        break;
 800950c:	e007      	b.n	800951e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	331c      	adds	r3, #28
 8009514:	613b      	str	r3, [r7, #16]
        break;
 8009516:	e002      	b.n	800951e <HAL_DAC_Start_DMA+0xf6>
        break;
 8009518:	bf00      	nop
 800951a:	e000      	b.n	800951e <HAL_DAC_Start_DMA+0xf6>
        break;
 800951c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d111      	bne.n	8009548 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009532:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6898      	ldr	r0, [r3, #8]
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	f000 fb27 	bl	8009b90 <HAL_DMA_Start_IT>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]
 8009546:	e010      	b.n	800956a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009556:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	68d8      	ldr	r0, [r3, #12]
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	f000 fb15 	bl	8009b90 <HAL_DMA_Start_IT>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10c      	bne.n	8009590 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6819      	ldr	r1, [r3, #0]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	2201      	movs	r2, #1
 8009584:	409a      	lsls	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	e005      	b.n	800959c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	f043 0204 	orr.w	r2, r3, #4
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	080098f9 	.word	0x080098f9
 80095ac:	0800991b 	.word	0x0800991b
 80095b0:	08009937 	.word	0x08009937
 80095b4:	080099b5 	.word	0x080099b5
 80095b8:	080099d7 	.word	0x080099d7
 80095bc:	080099f3 	.word	0x080099f3

080095c0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d6:	d120      	bne.n	800961a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e6:	d118      	bne.n	800961a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2204      	movs	r2, #4
 80095ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f043 0201 	orr.w	r2, r3, #1
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009602:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009612:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f84b 	bl	80096b0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009628:	d120      	bne.n	800966c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009638:	d118      	bne.n	800966c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2204      	movs	r2, #4
 800963e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	f043 0202 	orr.w	r2, r3, #2
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009654:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009664:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f99a 	bl	80099a0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	795b      	ldrb	r3, [r3, #5]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_DAC_ConfigChannel+0x1c>
 80096dc:	2302      	movs	r3, #2
 80096de:	e107      	b.n	80098f0 <HAL_DAC_ConfigChannel+0x22c>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2202      	movs	r2, #2
 80096ea:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d174      	bne.n	80097de <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80096f4:	f7fe fabe 	bl	8007c74 <HAL_GetTick>
 80096f8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d134      	bne.n	800976a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009700:	e011      	b.n	8009726 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009702:	f7fe fab7 	bl	8007c74 <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	2b01      	cmp	r3, #1
 800970e:	d90a      	bls.n	8009726 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f043 0208 	orr.w	r2, r3, #8
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2203      	movs	r2, #3
 8009720:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e0e4      	b.n	80098f0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e6      	bne.n	8009702 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009734:	2001      	movs	r0, #1
 8009736:	f7fe faa9 	bl	8007c8c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	6992      	ldr	r2, [r2, #24]
 8009742:	641a      	str	r2, [r3, #64]	; 0x40
 8009744:	e01e      	b.n	8009784 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009746:	f7fe fa95 	bl	8007c74 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b01      	cmp	r3, #1
 8009752:	d90a      	bls.n	800976a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f043 0208 	orr.w	r2, r3, #8
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2203      	movs	r2, #3
 8009764:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e0c2      	b.n	80098f0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009770:	2b00      	cmp	r3, #0
 8009772:	dbe8      	blt.n	8009746 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009774:	2001      	movs	r0, #1
 8009776:	f7fe fa89 	bl	8007c8c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	6992      	ldr	r2, [r2, #24]
 8009782:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f003 0310 	and.w	r3, r3, #16
 8009790:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009794:	fa01 f303 	lsl.w	r3, r1, r3
 8009798:	43db      	mvns	r3, r3
 800979a:	ea02 0103 	and.w	r1, r2, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	69da      	ldr	r2, [r3, #28]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f003 0310 	and.w	r3, r3, #16
 80097a8:	409a      	lsls	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f003 0310 	and.w	r3, r3, #16
 80097be:	21ff      	movs	r1, #255	; 0xff
 80097c0:	fa01 f303 	lsl.w	r3, r1, r3
 80097c4:	43db      	mvns	r3, r3
 80097c6:	ea02 0103 	and.w	r1, r2, r3
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	6a1a      	ldr	r2, [r3, #32]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	409a      	lsls	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d11d      	bne.n	8009822 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f003 0310 	and.w	r3, r3, #16
 80097f4:	221f      	movs	r2, #31
 80097f6:	fa02 f303 	lsl.w	r3, r2, r3
 80097fa:	43db      	mvns	r3, r3
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	4013      	ands	r3, r2
 8009800:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	fa02 f303 	lsl.w	r3, r2, r3
 8009814:	69ba      	ldr	r2, [r7, #24]
 8009816:	4313      	orrs	r3, r2
 8009818:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009828:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2207      	movs	r2, #7
 8009832:	fa02 f303 	lsl.w	r3, r2, r3
 8009836:	43db      	mvns	r3, r3
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	4013      	ands	r3, r2
 800983c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	431a      	orrs	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	fa02 f303 	lsl.w	r3, r2, r3
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	4313      	orrs	r3, r2
 8009860:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6819      	ldr	r1, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f003 0310 	and.w	r3, r3, #16
 8009876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800987a:	fa02 f303 	lsl.w	r3, r2, r3
 800987e:	43da      	mvns	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	400a      	ands	r2, r1
 8009886:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f003 0310 	and.w	r3, r3, #16
 8009896:	f640 72fc 	movw	r2, #4092	; 0xffc
 800989a:	fa02 f303 	lsl.w	r3, r2, r3
 800989e:	43db      	mvns	r3, r3
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	4013      	ands	r3, r2
 80098a4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f003 0310 	and.w	r3, r3, #16
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6819      	ldr	r1, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f003 0310 	and.w	r3, r3, #16
 80098d2:	22c0      	movs	r2, #192	; 0xc0
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	43da      	mvns	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	400a      	ands	r2, r1
 80098e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2201      	movs	r2, #1
 80098e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3720      	adds	r7, #32
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009904:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f7ff feb4 	bl	8009674 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	711a      	strb	r2, [r3, #4]
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009926:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f7ff fead 	bl	8009688 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800992e:	bf00      	nop
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009942:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f043 0204 	orr.w	r2, r3, #4
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7ff fea3 	bl	800969c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	711a      	strb	r2, [r3, #4]
}
 800995c:	bf00      	nop
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff ffce 	bl	8009964 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	711a      	strb	r2, [r3, #4]
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff ffc7 	bl	8009978 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80099ea:	bf00      	nop
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f043 0204 	orr.w	r2, r3, #4
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff ffbd 	bl	800998c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	711a      	strb	r2, [r3, #4]
}
 8009a18:	bf00      	nop
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e098      	b.n	8009b64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	4b4d      	ldr	r3, [pc, #308]	; (8009b70 <HAL_DMA_Init+0x150>)
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d80f      	bhi.n	8009a5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	4b4b      	ldr	r3, [pc, #300]	; (8009b74 <HAL_DMA_Init+0x154>)
 8009a46:	4413      	add	r3, r2
 8009a48:	4a4b      	ldr	r2, [pc, #300]	; (8009b78 <HAL_DMA_Init+0x158>)
 8009a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4e:	091b      	lsrs	r3, r3, #4
 8009a50:	009a      	lsls	r2, r3, #2
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a48      	ldr	r2, [pc, #288]	; (8009b7c <HAL_DMA_Init+0x15c>)
 8009a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8009a5c:	e00e      	b.n	8009a7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	4b46      	ldr	r3, [pc, #280]	; (8009b80 <HAL_DMA_Init+0x160>)
 8009a66:	4413      	add	r3, r2
 8009a68:	4a43      	ldr	r2, [pc, #268]	; (8009b78 <HAL_DMA_Init+0x158>)
 8009a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a6e:	091b      	lsrs	r3, r3, #4
 8009a70:	009a      	lsls	r2, r3, #2
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a42      	ldr	r2, [pc, #264]	; (8009b84 <HAL_DMA_Init+0x164>)
 8009a7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ad6:	d039      	beq.n	8009b4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	4a27      	ldr	r2, [pc, #156]	; (8009b7c <HAL_DMA_Init+0x15c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d11a      	bne.n	8009b18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009ae2:	4b29      	ldr	r3, [pc, #164]	; (8009b88 <HAL_DMA_Init+0x168>)
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aea:	f003 031c 	and.w	r3, r3, #28
 8009aee:	210f      	movs	r1, #15
 8009af0:	fa01 f303 	lsl.w	r3, r1, r3
 8009af4:	43db      	mvns	r3, r3
 8009af6:	4924      	ldr	r1, [pc, #144]	; (8009b88 <HAL_DMA_Init+0x168>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009afc:	4b22      	ldr	r3, [pc, #136]	; (8009b88 <HAL_DMA_Init+0x168>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6859      	ldr	r1, [r3, #4]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b08:	f003 031c 	and.w	r3, r3, #28
 8009b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b10:	491d      	ldr	r1, [pc, #116]	; (8009b88 <HAL_DMA_Init+0x168>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	600b      	str	r3, [r1, #0]
 8009b16:	e019      	b.n	8009b4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009b18:	4b1c      	ldr	r3, [pc, #112]	; (8009b8c <HAL_DMA_Init+0x16c>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b20:	f003 031c 	and.w	r3, r3, #28
 8009b24:	210f      	movs	r1, #15
 8009b26:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2a:	43db      	mvns	r3, r3
 8009b2c:	4917      	ldr	r1, [pc, #92]	; (8009b8c <HAL_DMA_Init+0x16c>)
 8009b2e:	4013      	ands	r3, r2
 8009b30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009b32:	4b16      	ldr	r3, [pc, #88]	; (8009b8c <HAL_DMA_Init+0x16c>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6859      	ldr	r1, [r3, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3e:	f003 031c 	and.w	r3, r3, #28
 8009b42:	fa01 f303 	lsl.w	r3, r1, r3
 8009b46:	4911      	ldr	r1, [pc, #68]	; (8009b8c <HAL_DMA_Init+0x16c>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	40020407 	.word	0x40020407
 8009b74:	bffdfff8 	.word	0xbffdfff8
 8009b78:	cccccccd 	.word	0xcccccccd
 8009b7c:	40020000 	.word	0x40020000
 8009b80:	bffdfbf8 	.word	0xbffdfbf8
 8009b84:	40020400 	.word	0x40020400
 8009b88:	400200a8 	.word	0x400200a8
 8009b8c:	400204a8 	.word	0x400204a8

08009b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_DMA_Start_IT+0x20>
 8009bac:	2302      	movs	r3, #2
 8009bae:	e04b      	b.n	8009c48 <HAL_DMA_Start_IT+0xb8>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d13a      	bne.n	8009c3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 f95f 	bl	8009eac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d008      	beq.n	8009c08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f042 020e 	orr.w	r2, r2, #14
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	e00f      	b.n	8009c28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0204 	bic.w	r2, r2, #4
 8009c16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 020a 	orr.w	r2, r2, #10
 8009c26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	e005      	b.n	8009c46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009c42:	2302      	movs	r3, #2
 8009c44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d008      	beq.n	8009c7a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2204      	movs	r2, #4
 8009c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e022      	b.n	8009cc0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f022 020e 	bic.w	r2, r2, #14
 8009c88:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0201 	bic.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9e:	f003 021c 	and.w	r2, r3, #28
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8009cac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d005      	beq.n	8009cf0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]
 8009cee:	e029      	b.n	8009d44 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 020e 	bic.w	r2, r2, #14
 8009cfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0201 	bic.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d14:	f003 021c 	and.w	r2, r3, #28
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8009d22:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	4798      	blx	r3
    }
  }
  return status;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6a:	f003 031c 	and.w	r3, r3, #28
 8009d6e:	2204      	movs	r2, #4
 8009d70:	409a      	lsls	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	4013      	ands	r3, r2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d026      	beq.n	8009dc8 <HAL_DMA_IRQHandler+0x7a>
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d021      	beq.n	8009dc8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0320 	and.w	r3, r3, #32
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d107      	bne.n	8009da2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0204 	bic.w	r2, r2, #4
 8009da0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da6:	f003 021c 	and.w	r2, r3, #28
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	2104      	movs	r1, #4
 8009db0:	fa01 f202 	lsl.w	r2, r1, r2
 8009db4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d071      	beq.n	8009ea2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009dc6:	e06c      	b.n	8009ea2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dcc:	f003 031c 	and.w	r3, r3, #28
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	409a      	lsls	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d02e      	beq.n	8009e3a <HAL_DMA_IRQHandler+0xec>
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d029      	beq.n	8009e3a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0320 	and.w	r3, r3, #32
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10b      	bne.n	8009e0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 020a 	bic.w	r2, r2, #10
 8009e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e10:	f003 021c 	and.w	r2, r3, #28
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e18:	2102      	movs	r1, #2
 8009e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8009e1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d038      	beq.n	8009ea2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009e38:	e033      	b.n	8009ea2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3e:	f003 031c 	and.w	r3, r3, #28
 8009e42:	2208      	movs	r2, #8
 8009e44:	409a      	lsls	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	4013      	ands	r3, r2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d02a      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x156>
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d025      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 020e 	bic.w	r2, r2, #14
 8009e66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6c:	f003 021c 	and.w	r2, r3, #28
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e74:	2101      	movs	r1, #1
 8009e76:	fa01 f202 	lsl.w	r2, r1, r2
 8009e7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d004      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
}
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebe:	f003 021c 	and.w	r2, r3, #28
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8009ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	2b10      	cmp	r3, #16
 8009edc:	d108      	bne.n	8009ef0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009eee:	e007      	b.n	8009f00 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	60da      	str	r2, [r3, #12]
}
 8009f00:	bf00      	nop
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f16:	2300      	movs	r3, #0
 8009f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f1a:	e166      	b.n	800a1ea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	2101      	movs	r1, #1
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	fa01 f303 	lsl.w	r3, r1, r3
 8009f28:	4013      	ands	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 8158 	beq.w	800a1e4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d00b      	beq.n	8009f54 <HAL_GPIO_Init+0x48>
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d007      	beq.n	8009f54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f48:	2b11      	cmp	r3, #17
 8009f4a:	d003      	beq.n	8009f54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	2b12      	cmp	r3, #18
 8009f52:	d130      	bne.n	8009fb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	2203      	movs	r2, #3
 8009f60:	fa02 f303 	lsl.w	r3, r2, r3
 8009f64:	43db      	mvns	r3, r3
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	68da      	ldr	r2, [r3, #12]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	43db      	mvns	r3, r3
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	4013      	ands	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	091b      	lsrs	r3, r3, #4
 8009fa0:	f003 0201 	and.w	r2, r3, #1
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc6:	43db      	mvns	r3, r3
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	005b      	lsls	r3, r3, #1
 8009fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d003      	beq.n	8009ff6 <HAL_GPIO_Init+0xea>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b12      	cmp	r3, #18
 8009ff4:	d123      	bne.n	800a03e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	08da      	lsrs	r2, r3, #3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3208      	adds	r2, #8
 8009ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	220f      	movs	r2, #15
 800a00e:	fa02 f303 	lsl.w	r3, r2, r3
 800a012:	43db      	mvns	r3, r3
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4013      	ands	r3, r2
 800a018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f003 0307 	and.w	r3, r3, #7
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	fa02 f303 	lsl.w	r3, r2, r3
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	08da      	lsrs	r2, r3, #3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3208      	adds	r2, #8
 800a038:	6939      	ldr	r1, [r7, #16]
 800a03a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	2203      	movs	r2, #3
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	43db      	mvns	r3, r3
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	4013      	ands	r3, r2
 800a054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f003 0203 	and.w	r2, r3, #3
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4313      	orrs	r3, r2
 800a06a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 80b2 	beq.w	800a1e4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a080:	4b61      	ldr	r3, [pc, #388]	; (800a208 <HAL_GPIO_Init+0x2fc>)
 800a082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a084:	4a60      	ldr	r2, [pc, #384]	; (800a208 <HAL_GPIO_Init+0x2fc>)
 800a086:	f043 0301 	orr.w	r3, r3, #1
 800a08a:	6613      	str	r3, [r2, #96]	; 0x60
 800a08c:	4b5e      	ldr	r3, [pc, #376]	; (800a208 <HAL_GPIO_Init+0x2fc>)
 800a08e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	60bb      	str	r3, [r7, #8]
 800a096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a098:	4a5c      	ldr	r2, [pc, #368]	; (800a20c <HAL_GPIO_Init+0x300>)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	089b      	lsrs	r3, r3, #2
 800a09e:	3302      	adds	r3, #2
 800a0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	220f      	movs	r2, #15
 800a0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b4:	43db      	mvns	r3, r3
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a0c2:	d02b      	beq.n	800a11c <HAL_GPIO_Init+0x210>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a52      	ldr	r2, [pc, #328]	; (800a210 <HAL_GPIO_Init+0x304>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d025      	beq.n	800a118 <HAL_GPIO_Init+0x20c>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a51      	ldr	r2, [pc, #324]	; (800a214 <HAL_GPIO_Init+0x308>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d01f      	beq.n	800a114 <HAL_GPIO_Init+0x208>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a50      	ldr	r2, [pc, #320]	; (800a218 <HAL_GPIO_Init+0x30c>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d019      	beq.n	800a110 <HAL_GPIO_Init+0x204>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a4f      	ldr	r2, [pc, #316]	; (800a21c <HAL_GPIO_Init+0x310>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d013      	beq.n	800a10c <HAL_GPIO_Init+0x200>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a4e      	ldr	r2, [pc, #312]	; (800a220 <HAL_GPIO_Init+0x314>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00d      	beq.n	800a108 <HAL_GPIO_Init+0x1fc>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a4d      	ldr	r2, [pc, #308]	; (800a224 <HAL_GPIO_Init+0x318>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d007      	beq.n	800a104 <HAL_GPIO_Init+0x1f8>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a4c      	ldr	r2, [pc, #304]	; (800a228 <HAL_GPIO_Init+0x31c>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d101      	bne.n	800a100 <HAL_GPIO_Init+0x1f4>
 800a0fc:	2307      	movs	r3, #7
 800a0fe:	e00e      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a100:	2308      	movs	r3, #8
 800a102:	e00c      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a104:	2306      	movs	r3, #6
 800a106:	e00a      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a108:	2305      	movs	r3, #5
 800a10a:	e008      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a10c:	2304      	movs	r3, #4
 800a10e:	e006      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a110:	2303      	movs	r3, #3
 800a112:	e004      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a114:	2302      	movs	r3, #2
 800a116:	e002      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a118:	2301      	movs	r3, #1
 800a11a:	e000      	b.n	800a11e <HAL_GPIO_Init+0x212>
 800a11c:	2300      	movs	r3, #0
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	f002 0203 	and.w	r2, r2, #3
 800a124:	0092      	lsls	r2, r2, #2
 800a126:	4093      	lsls	r3, r2
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a12e:	4937      	ldr	r1, [pc, #220]	; (800a20c <HAL_GPIO_Init+0x300>)
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	089b      	lsrs	r3, r3, #2
 800a134:	3302      	adds	r3, #2
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a13c:	4b3b      	ldr	r3, [pc, #236]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	43db      	mvns	r3, r3
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4013      	ands	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a160:	4a32      	ldr	r2, [pc, #200]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a166:	4b31      	ldr	r3, [pc, #196]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	43db      	mvns	r3, r3
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	4013      	ands	r3, r2
 800a174:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a18a:	4a28      	ldr	r2, [pc, #160]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a190:	4b26      	ldr	r3, [pc, #152]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	43db      	mvns	r3, r3
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	4013      	ands	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a1b4:	4a1d      	ldr	r2, [pc, #116]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1de:	4a13      	ldr	r2, [pc, #76]	; (800a22c <HAL_GPIO_Init+0x320>)
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f47f ae91 	bne.w	8009f1c <HAL_GPIO_Init+0x10>
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	40021000 	.word	0x40021000
 800a20c:	40010000 	.word	0x40010000
 800a210:	48000400 	.word	0x48000400
 800a214:	48000800 	.word	0x48000800
 800a218:	48000c00 	.word	0x48000c00
 800a21c:	48001000 	.word	0x48001000
 800a220:	48001400 	.word	0x48001400
 800a224:	48001800 	.word	0x48001800
 800a228:	48001c00 	.word	0x48001c00
 800a22c:	40010400 	.word	0x40010400

0800a230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	887b      	ldrh	r3, [r7, #2]
 800a242:	4013      	ands	r3, r2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
 800a24c:	e001      	b.n	800a252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	807b      	strh	r3, [r7, #2]
 800a26c:	4613      	mov	r3, r2
 800a26e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a270:	787b      	ldrb	r3, [r7, #1]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a276:	887a      	ldrh	r2, [r7, #2]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a27c:	e002      	b.n	800a284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a27e:	887a      	ldrh	r2, [r7, #2]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a29a:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a29c:	695a      	ldr	r2, [r3, #20]
 800a29e:	88fb      	ldrh	r3, [r7, #6]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d006      	beq.n	800a2b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a2a6:	4a05      	ldr	r2, [pc, #20]	; (800a2bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2a8:	88fb      	ldrh	r3, [r7, #6]
 800a2aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 f806 	bl	800a2c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	40010400 	.word	0x40010400

0800a2c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e081      	b.n	800a3ec <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7fc fdb7 	bl	8006e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2224      	movs	r2, #36	; 0x24
 800a306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0201 	bic.w	r2, r2, #1
 800a318:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a326:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a336:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d107      	bne.n	800a350 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a34c:	609a      	str	r2, [r3, #8]
 800a34e:	e006      	b.n	800a35e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a35c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d104      	bne.n	800a370 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a36e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	6812      	ldr	r2, [r2, #0]
 800a37a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a37e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a382:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a392:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691a      	ldr	r2, [r3, #16]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	ea42 0103 	orr.w	r1, r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	021a      	lsls	r2, r3, #8
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	69d9      	ldr	r1, [r3, #28]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1a      	ldr	r2, [r3, #32]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0201 	orr.w	r2, r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	461a      	mov	r2, r3
 800a400:	460b      	mov	r3, r1
 800a402:	817b      	strh	r3, [r7, #10]
 800a404:	4613      	mov	r3, r2
 800a406:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b20      	cmp	r3, #32
 800a412:	f040 80da 	bne.w	800a5ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_I2C_Master_Transmit+0x30>
 800a420:	2302      	movs	r3, #2
 800a422:	e0d3      	b.n	800a5cc <HAL_I2C_Master_Transmit+0x1d8>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a42c:	f7fd fc22 	bl	8007c74 <HAL_GetTick>
 800a430:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	2319      	movs	r3, #25
 800a438:	2201      	movs	r2, #1
 800a43a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f9e6 	bl	800a810 <I2C_WaitOnFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e0be      	b.n	800a5cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2221      	movs	r2, #33	; 0x21
 800a452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2210      	movs	r2, #16
 800a45a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	893a      	ldrh	r2, [r7, #8]
 800a46e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	2bff      	cmp	r3, #255	; 0xff
 800a47e:	d90e      	bls.n	800a49e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	22ff      	movs	r2, #255	; 0xff
 800a484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	8979      	ldrh	r1, [r7, #10]
 800a48e:	4b51      	ldr	r3, [pc, #324]	; (800a5d4 <HAL_I2C_Master_Transmit+0x1e0>)
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f000 fb48 	bl	800ab2c <I2C_TransferConfig>
 800a49c:	e06c      	b.n	800a578 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	8979      	ldrh	r1, [r7, #10]
 800a4b0:	4b48      	ldr	r3, [pc, #288]	; (800a5d4 <HAL_I2C_Master_Transmit+0x1e0>)
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fb37 	bl	800ab2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a4be:	e05b      	b.n	800a578 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	6a39      	ldr	r1, [r7, #32]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f9e3 	bl	800a890 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e07b      	b.n	800a5cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	781a      	ldrb	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	1c5a      	adds	r2, r3, #1
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a508:	b29b      	uxth	r3, r3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d034      	beq.n	800a578 <HAL_I2C_Master_Transmit+0x184>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a512:	2b00      	cmp	r3, #0
 800a514:	d130      	bne.n	800a578 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	2200      	movs	r2, #0
 800a51e:	2180      	movs	r1, #128	; 0x80
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 f975 	bl	800a810 <I2C_WaitOnFlagUntilTimeout>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e04d      	b.n	800a5cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a534:	b29b      	uxth	r3, r3
 800a536:	2bff      	cmp	r3, #255	; 0xff
 800a538:	d90e      	bls.n	800a558 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	22ff      	movs	r2, #255	; 0xff
 800a53e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a544:	b2da      	uxtb	r2, r3
 800a546:	8979      	ldrh	r1, [r7, #10]
 800a548:	2300      	movs	r3, #0
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 faeb 	bl	800ab2c <I2C_TransferConfig>
 800a556:	e00f      	b.n	800a578 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a566:	b2da      	uxtb	r2, r3
 800a568:	8979      	ldrh	r1, [r7, #10]
 800a56a:	2300      	movs	r3, #0
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fada 	bl	800ab2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d19e      	bne.n	800a4c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	6a39      	ldr	r1, [r7, #32]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 f9c2 	bl	800a910 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e01a      	b.n	800a5cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2220      	movs	r2, #32
 800a59c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6859      	ldr	r1, [r3, #4]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <HAL_I2C_Master_Transmit+0x1e4>)
 800a5aa:	400b      	ands	r3, r1
 800a5ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e000      	b.n	800a5cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a5ca:	2302      	movs	r3, #2
  }
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	80002000 	.word	0x80002000
 800a5d8:	fe00e800 	.word	0xfe00e800

0800a5dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af02      	add	r7, sp, #8
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	607a      	str	r2, [r7, #4]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	817b      	strh	r3, [r7, #10]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	f040 80db 	bne.w	800a7b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a604:	2b01      	cmp	r3, #1
 800a606:	d101      	bne.n	800a60c <HAL_I2C_Master_Receive+0x30>
 800a608:	2302      	movs	r3, #2
 800a60a:	e0d4      	b.n	800a7b6 <HAL_I2C_Master_Receive+0x1da>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a614:	f7fd fb2e 	bl	8007c74 <HAL_GetTick>
 800a618:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	2319      	movs	r3, #25
 800a620:	2201      	movs	r2, #1
 800a622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 f8f2 	bl	800a810 <I2C_WaitOnFlagUntilTimeout>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e0bf      	b.n	800a7b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2222      	movs	r2, #34	; 0x22
 800a63a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2210      	movs	r2, #16
 800a642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	893a      	ldrh	r2, [r7, #8]
 800a656:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a662:	b29b      	uxth	r3, r3
 800a664:	2bff      	cmp	r3, #255	; 0xff
 800a666:	d90e      	bls.n	800a686 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	22ff      	movs	r2, #255	; 0xff
 800a66c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a672:	b2da      	uxtb	r2, r3
 800a674:	8979      	ldrh	r1, [r7, #10]
 800a676:	4b52      	ldr	r3, [pc, #328]	; (800a7c0 <HAL_I2C_Master_Receive+0x1e4>)
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 fa54 	bl	800ab2c <I2C_TransferConfig>
 800a684:	e06d      	b.n	800a762 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a694:	b2da      	uxtb	r2, r3
 800a696:	8979      	ldrh	r1, [r7, #10]
 800a698:	4b49      	ldr	r3, [pc, #292]	; (800a7c0 <HAL_I2C_Master_Receive+0x1e4>)
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fa43 	bl	800ab2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a6a6:	e05c      	b.n	800a762 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	6a39      	ldr	r1, [r7, #32]
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 f96b 	bl	800a988 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e07c      	b.n	800a7b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	b2d2      	uxtb	r2, r2
 800a6c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d034      	beq.n	800a762 <HAL_I2C_Master_Receive+0x186>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d130      	bne.n	800a762 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	2200      	movs	r2, #0
 800a708:	2180      	movs	r1, #128	; 0x80
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f880 	bl	800a810 <I2C_WaitOnFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e04d      	b.n	800a7b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a71e:	b29b      	uxth	r3, r3
 800a720:	2bff      	cmp	r3, #255	; 0xff
 800a722:	d90e      	bls.n	800a742 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	22ff      	movs	r2, #255	; 0xff
 800a728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	8979      	ldrh	r1, [r7, #10]
 800a732:	2300      	movs	r3, #0
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 f9f6 	bl	800ab2c <I2C_TransferConfig>
 800a740:	e00f      	b.n	800a762 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a746:	b29a      	uxth	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a750:	b2da      	uxtb	r2, r3
 800a752:	8979      	ldrh	r1, [r7, #10]
 800a754:	2300      	movs	r3, #0
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f9e5 	bl	800ab2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a766:	b29b      	uxth	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d19d      	bne.n	800a6a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	6a39      	ldr	r1, [r7, #32]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 f8cd 	bl	800a910 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e01a      	b.n	800a7b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2220      	movs	r2, #32
 800a786:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6859      	ldr	r1, [r3, #4]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <HAL_I2C_Master_Receive+0x1e8>)
 800a794:	400b      	ands	r3, r1
 800a796:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e000      	b.n	800a7b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a7b4:	2302      	movs	r3, #2
  }
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	80002400 	.word	0x80002400
 800a7c4:	fe00e800 	.word	0xfe00e800

0800a7c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d103      	bne.n	800a7e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d007      	beq.n	800a804 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f042 0201 	orr.w	r2, r2, #1
 800a802:	619a      	str	r2, [r3, #24]
  }
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a820:	e022      	b.n	800a868 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d01e      	beq.n	800a868 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a82a:	f7fd fa23 	bl	8007c74 <HAL_GetTick>
 800a82e:	4602      	mov	r2, r0
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	429a      	cmp	r2, r3
 800a838:	d302      	bcc.n	800a840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d113      	bne.n	800a868 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a844:	f043 0220 	orr.w	r2, r3, #32
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2220      	movs	r2, #32
 800a850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e00f      	b.n	800a888 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	699a      	ldr	r2, [r3, #24]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	4013      	ands	r3, r2
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	429a      	cmp	r2, r3
 800a876:	bf0c      	ite	eq
 800a878:	2301      	moveq	r3, #1
 800a87a:	2300      	movne	r3, #0
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	461a      	mov	r2, r3
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	429a      	cmp	r2, r3
 800a884:	d0cd      	beq.n	800a822 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a89c:	e02c      	b.n	800a8f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 f8dc 	bl	800aa60 <I2C_IsAcknowledgeFailed>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e02a      	b.n	800a908 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d01e      	beq.n	800a8f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ba:	f7fd f9db 	bl	8007c74 <HAL_GetTick>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d302      	bcc.n	800a8d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d113      	bne.n	800a8f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d4:	f043 0220 	orr.w	r2, r3, #32
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e007      	b.n	800a908 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	f003 0302 	and.w	r3, r3, #2
 800a902:	2b02      	cmp	r3, #2
 800a904:	d1cb      	bne.n	800a89e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a91c:	e028      	b.n	800a970 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 f89c 	bl	800aa60 <I2C_IsAcknowledgeFailed>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e026      	b.n	800a980 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a932:	f7fd f99f 	bl	8007c74 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d113      	bne.n	800a970 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a94c:	f043 0220 	orr.w	r2, r3, #32
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2220      	movs	r2, #32
 800a958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e007      	b.n	800a980 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d1cf      	bne.n	800a91e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a994:	e055      	b.n	800aa42 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	68b9      	ldr	r1, [r7, #8]
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 f860 	bl	800aa60 <I2C_IsAcknowledgeFailed>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e053      	b.n	800aa52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	d129      	bne.n	800aa0c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	f003 0304 	and.w	r3, r3, #4
 800a9c2:	2b04      	cmp	r3, #4
 800a9c4:	d105      	bne.n	800a9d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e03f      	b.n	800aa52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6859      	ldr	r1, [r3, #4]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	4b1d      	ldr	r3, [pc, #116]	; (800aa5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a9e6:	400b      	ands	r3, r1
 800a9e8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e022      	b.n	800aa52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa0c:	f7fd f932 	bl	8007c74 <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d302      	bcc.n	800aa22 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10f      	bne.n	800aa42 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa26:	f043 0220 	orr.w	r2, r3, #32
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2220      	movs	r2, #32
 800aa32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e007      	b.n	800aa52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	f003 0304 	and.w	r3, r3, #4
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	d1a2      	bne.n	800a996 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	fe00e800 	.word	0xfe00e800

0800aa60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	f003 0310 	and.w	r3, r3, #16
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	d151      	bne.n	800ab1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa7a:	e022      	b.n	800aac2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa82:	d01e      	beq.n	800aac2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa84:	f7fd f8f6 	bl	8007c74 <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d302      	bcc.n	800aa9a <I2C_IsAcknowledgeFailed+0x3a>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d113      	bne.n	800aac2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9e:	f043 0220 	orr.w	r2, r3, #32
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2220      	movs	r2, #32
 800aaaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e02e      	b.n	800ab20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	2b20      	cmp	r3, #32
 800aace:	d1d5      	bne.n	800aa7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2210      	movs	r2, #16
 800aad6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2220      	movs	r2, #32
 800aade:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f7ff fe71 	bl	800a7c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6859      	ldr	r1, [r3, #4]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	4b0d      	ldr	r3, [pc, #52]	; (800ab28 <I2C_IsAcknowledgeFailed+0xc8>)
 800aaf2:	400b      	ands	r3, r1
 800aaf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafa:	f043 0204 	orr.w	r2, r3, #4
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e000      	b.n	800ab20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	fe00e800 	.word	0xfe00e800

0800ab2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	607b      	str	r3, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	817b      	strh	r3, [r7, #10]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	0d5b      	lsrs	r3, r3, #21
 800ab48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <I2C_TransferConfig+0x58>)
 800ab4e:	430b      	orrs	r3, r1
 800ab50:	43db      	mvns	r3, r3
 800ab52:	ea02 0103 	and.w	r1, r2, r3
 800ab56:	897b      	ldrh	r3, [r7, #10]
 800ab58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab5c:	7a7b      	ldrb	r3, [r7, #9]
 800ab5e:	041b      	lsls	r3, r3, #16
 800ab60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ab76:	bf00      	nop
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	03ff63ff 	.word	0x03ff63ff

0800ab88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d138      	bne.n	800ac10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d101      	bne.n	800abac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e032      	b.n	800ac12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2224      	movs	r2, #36	; 0x24
 800abb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f022 0201 	bic.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6819      	ldr	r1, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	430a      	orrs	r2, r1
 800abea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f042 0201 	orr.w	r2, r2, #1
 800abfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2220      	movs	r2, #32
 800ac00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e000      	b.n	800ac12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac10:	2302      	movs	r3, #2
  }
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	d139      	bne.n	800aca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d101      	bne.n	800ac42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e033      	b.n	800acaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2224      	movs	r2, #36	; 0x24
 800ac4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f022 0201 	bic.w	r2, r2, #1
 800ac60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f042 0201 	orr.w	r2, r2, #1
 800ac92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2220      	movs	r2, #32
 800ac98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	e000      	b.n	800acaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aca8:	2302      	movs	r3, #2
  }
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800acb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb8:	b08f      	sub	sp, #60	; 0x3c
 800acba:	af0a      	add	r7, sp, #40	; 0x28
 800acbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e116      	b.n	800aef6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f00e fc30 	bl	8019548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2203      	movs	r2, #3
 800acec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f006 f889 	bl	8010e1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	603b      	str	r3, [r7, #0]
 800ad12:	687e      	ldr	r6, [r7, #4]
 800ad14:	466d      	mov	r5, sp
 800ad16:	f106 0410 	add.w	r4, r6, #16
 800ad1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad22:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad26:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad2a:	1d33      	adds	r3, r6, #4
 800ad2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad2e:	6838      	ldr	r0, [r7, #0]
 800ad30:	f005 ff9b 	bl	8010c6a <USB_CoreInit>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e0d7      	b.n	800aef6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f006 f877 	bl	8010e40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	e04a      	b.n	800adee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad58:	7bfa      	ldrb	r2, [r7, #15]
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	1a9b      	subs	r3, r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	440b      	add	r3, r1
 800ad66:	333d      	adds	r3, #61	; 0x3d
 800ad68:	2201      	movs	r2, #1
 800ad6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad6c:	7bfa      	ldrb	r2, [r7, #15]
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	4613      	mov	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	1a9b      	subs	r3, r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	440b      	add	r3, r1
 800ad7a:	333c      	adds	r3, #60	; 0x3c
 800ad7c:	7bfa      	ldrb	r2, [r7, #15]
 800ad7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ad80:	7bfa      	ldrb	r2, [r7, #15]
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	b298      	uxth	r0, r3
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	1a9b      	subs	r3, r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	3342      	adds	r3, #66	; 0x42
 800ad94:	4602      	mov	r2, r0
 800ad96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad98:	7bfa      	ldrb	r2, [r7, #15]
 800ad9a:	6879      	ldr	r1, [r7, #4]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	1a9b      	subs	r3, r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	440b      	add	r3, r1
 800ada6:	333f      	adds	r3, #63	; 0x3f
 800ada8:	2200      	movs	r2, #0
 800adaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800adac:	7bfa      	ldrb	r2, [r7, #15]
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4613      	mov	r3, r2
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	1a9b      	subs	r3, r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	440b      	add	r3, r1
 800adba:	3344      	adds	r3, #68	; 0x44
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800adc0:	7bfa      	ldrb	r2, [r7, #15]
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	3348      	adds	r3, #72	; 0x48
 800add0:	2200      	movs	r2, #0
 800add2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800add4:	7bfa      	ldrb	r2, [r7, #15]
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4613      	mov	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	1a9b      	subs	r3, r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	3350      	adds	r3, #80	; 0x50
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	3301      	adds	r3, #1
 800adec:	73fb      	strb	r3, [r7, #15]
 800adee:	7bfa      	ldrb	r2, [r7, #15]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d3af      	bcc.n	800ad58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]
 800adfc:	e044      	b.n	800ae88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800adfe:	7bfa      	ldrb	r2, [r7, #15]
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	1a9b      	subs	r3, r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae14:	7bfa      	ldrb	r2, [r7, #15]
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	1a9b      	subs	r3, r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ae26:	7bfa      	ldrb	r2, [r7, #15]
 800ae28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae2a:	7bfa      	ldrb	r2, [r7, #15]
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	1a9b      	subs	r3, r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	440b      	add	r3, r1
 800ae38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae40:	7bfa      	ldrb	r2, [r7, #15]
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	4613      	mov	r3, r2
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	1a9b      	subs	r3, r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	440b      	add	r3, r1
 800ae4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae56:	7bfa      	ldrb	r2, [r7, #15]
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	1a9b      	subs	r3, r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	440b      	add	r3, r1
 800ae64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae6c:	7bfa      	ldrb	r2, [r7, #15]
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	4613      	mov	r3, r2
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	1a9b      	subs	r3, r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	440b      	add	r3, r1
 800ae7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	3301      	adds	r3, #1
 800ae86:	73fb      	strb	r3, [r7, #15]
 800ae88:	7bfa      	ldrb	r2, [r7, #15]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d3b5      	bcc.n	800adfe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	687e      	ldr	r6, [r7, #4]
 800ae9a:	466d      	mov	r5, sp
 800ae9c:	f106 0410 	add.w	r4, r6, #16
 800aea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aeac:	e885 0003 	stmia.w	r5, {r0, r1}
 800aeb0:	1d33      	adds	r3, r6, #4
 800aeb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeb4:	6838      	ldr	r0, [r7, #0]
 800aeb6:	f005 ffed 	bl	8010e94 <USB_DevInit>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2202      	movs	r2, #2
 800aec4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e014      	b.n	800aef6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d102      	bne.n	800aeea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 ff8f 	bl	800be08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f006 ff6f 	bl	8011dd2 <USB_DevDisconnect>

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aefe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800af12:	2b01      	cmp	r3, #1
 800af14:	d101      	bne.n	800af1a <HAL_PCD_Start+0x1c>
 800af16:	2302      	movs	r3, #2
 800af18:	e01c      	b.n	800af54 <HAL_PCD_Start+0x56>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	2b01      	cmp	r3, #1
 800af28:	d105      	bne.n	800af36 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f005 ff5e 	bl	8010dfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4618      	mov	r0, r3
 800af46:	f006 ff23 	bl	8011d90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b08d      	sub	sp, #52	; 0x34
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4618      	mov	r0, r3
 800af74:	f006 ffe1 	bl	8011f3a <USB_GetMode>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 838f 	bne.w	800b69e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	f006 ff45 	bl	8011e14 <USB_ReadInterrupts>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8385 	beq.w	800b69c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4618      	mov	r0, r3
 800af98:	f006 ff3c 	bl	8011e14 <USB_ReadInterrupts>
 800af9c:	4603      	mov	r3, r0
 800af9e:	f003 0302 	and.w	r3, r3, #2
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d107      	bne.n	800afb6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695a      	ldr	r2, [r3, #20]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f002 0202 	and.w	r2, r2, #2
 800afb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4618      	mov	r0, r3
 800afbc:	f006 ff2a 	bl	8011e14 <USB_ReadInterrupts>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f003 0310 	and.w	r3, r3, #16
 800afc6:	2b10      	cmp	r3, #16
 800afc8:	d161      	bne.n	800b08e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	699a      	ldr	r2, [r3, #24]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f022 0210 	bic.w	r2, r2, #16
 800afd8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	f003 020f 	and.w	r2, r3, #15
 800afe6:	4613      	mov	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	4413      	add	r3, r2
 800aff6:	3304      	adds	r3, #4
 800aff8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	0c5b      	lsrs	r3, r3, #17
 800affe:	f003 030f 	and.w	r3, r3, #15
 800b002:	2b02      	cmp	r3, #2
 800b004:	d124      	bne.n	800b050 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b00c:	4013      	ands	r3, r2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d035      	beq.n	800b07e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	091b      	lsrs	r3, r3, #4
 800b01a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b01c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b020:	b29b      	uxth	r3, r3
 800b022:	461a      	mov	r2, r3
 800b024:	6a38      	ldr	r0, [r7, #32]
 800b026:	f006 fd90 	bl	8011b4a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	091b      	lsrs	r3, r3, #4
 800b032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b036:	441a      	add	r2, r3
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	699a      	ldr	r2, [r3, #24]
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	091b      	lsrs	r3, r3, #4
 800b044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b048:	441a      	add	r2, r3
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	619a      	str	r2, [r3, #24]
 800b04e:	e016      	b.n	800b07e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	0c5b      	lsrs	r3, r3, #17
 800b054:	f003 030f 	and.w	r3, r3, #15
 800b058:	2b06      	cmp	r3, #6
 800b05a:	d110      	bne.n	800b07e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b062:	2208      	movs	r2, #8
 800b064:	4619      	mov	r1, r3
 800b066:	6a38      	ldr	r0, [r7, #32]
 800b068:	f006 fd6f 	bl	8011b4a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	699a      	ldr	r2, [r3, #24]
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	091b      	lsrs	r3, r3, #4
 800b074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b078:	441a      	add	r2, r3
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	699a      	ldr	r2, [r3, #24]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0210 	orr.w	r2, r2, #16
 800b08c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f006 febe 	bl	8011e14 <USB_ReadInterrupts>
 800b098:	4603      	mov	r3, r0
 800b09a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b09e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b0a2:	d16e      	bne.n	800b182 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f006 fec4 	bl	8011e3a <USB_ReadDevAllOutEpInterrupt>
 800b0b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b0b4:	e062      	b.n	800b17c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d057      	beq.n	800b170 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f006 fee9 	bl	8011ea2 <USB_ReadDevOutEPInterrupt>
 800b0d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00c      	beq.n	800b0f6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b0ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fdaf 	bl	800bc54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f003 0308 	and.w	r3, r3, #8
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00c      	beq.n	800b11a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	4413      	add	r3, r2
 800b108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10c:	461a      	mov	r2, r3
 800b10e:	2308      	movs	r3, #8
 800b110:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fdeb 	bl	800bcf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f003 0310 	and.w	r3, r3, #16
 800b120:	2b00      	cmp	r3, #0
 800b122:	d008      	beq.n	800b136 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b130:	461a      	mov	r2, r3
 800b132:	2310      	movs	r3, #16
 800b134:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f003 0320 	and.w	r3, r3, #32
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	015a      	lsls	r2, r3, #5
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	4413      	add	r3, r2
 800b148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b14c:	461a      	mov	r2, r3
 800b14e:	2320      	movs	r3, #32
 800b150:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d009      	beq.n	800b170 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b168:	461a      	mov	r2, r3
 800b16a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b16e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	3301      	adds	r3, #1
 800b174:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	085b      	lsrs	r3, r3, #1
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d199      	bne.n	800b0b6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4618      	mov	r0, r3
 800b188:	f006 fe44 	bl	8011e14 <USB_ReadInterrupts>
 800b18c:	4603      	mov	r3, r0
 800b18e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b196:	f040 8087 	bne.w	800b2a8 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f006 fe65 	bl	8011e6e <USB_ReadDevAllInEpInterrupt>
 800b1a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b1aa:	e07a      	b.n	800b2a2 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d06f      	beq.n	800b296 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f006 fe8c 	bl	8011ede <USB_ReadDevInEPInterrupt>
 800b1c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d020      	beq.n	800b214 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	f003 030f 	and.w	r3, r3, #15
 800b1d8:	2201      	movs	r2, #1
 800b1da:	fa02 f303 	lsl.w	r3, r2, r3
 800b1de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	43db      	mvns	r3, r3
 800b1ec:	69f9      	ldr	r1, [r7, #28]
 800b1ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b202:	461a      	mov	r2, r3
 800b204:	2301      	movs	r3, #1
 800b206:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f00e fa59 	bl	80196c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f003 0308 	and.w	r3, r3, #8
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d008      	beq.n	800b230 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22a:	461a      	mov	r2, r3
 800b22c:	2308      	movs	r3, #8
 800b22e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	2b00      	cmp	r3, #0
 800b238:	d008      	beq.n	800b24c <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	015a      	lsls	r2, r3, #5
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	4413      	add	r3, r2
 800b242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b246:	461a      	mov	r2, r3
 800b248:	2310      	movs	r3, #16
 800b24a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b252:	2b00      	cmp	r3, #0
 800b254:	d008      	beq.n	800b268 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b262:	461a      	mov	r2, r3
 800b264:	2340      	movs	r3, #64	; 0x40
 800b266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d008      	beq.n	800b284 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27e:	461a      	mov	r2, r3
 800b280:	2302      	movs	r3, #2
 800b282:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b28e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fc56 	bl	800bb42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	3301      	adds	r3, #1
 800b29a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	085b      	lsrs	r3, r3, #1
 800b2a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d181      	bne.n	800b1ac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f006 fdb1 	bl	8011e14 <USB_ReadInterrupts>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2bc:	d122      	bne.n	800b304 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2cc:	f023 0301 	bic.w	r3, r3, #1
 800b2d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d108      	bne.n	800b2ee <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f00e fd46 	bl	8019d78 <HAL_PCDEx_LPM_Callback>
 800b2ec:	e002      	b.n	800b2f4 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f00e fa56 	bl	80197a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	695a      	ldr	r2, [r3, #20]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4618      	mov	r0, r3
 800b30a:	f006 fd83 	bl	8011e14 <USB_ReadInterrupts>
 800b30e:	4603      	mov	r3, r0
 800b310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b318:	d112      	bne.n	800b340 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	2b01      	cmp	r3, #1
 800b328:	d102      	bne.n	800b330 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f00e fa12 	bl	8019754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	695a      	ldr	r2, [r3, #20]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b33e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f006 fd65 	bl	8011e14 <USB_ReadInterrupts>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b354:	d121      	bne.n	800b39a <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	695a      	ldr	r2, [r3, #20]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b364:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d111      	bne.n	800b394 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37e:	089b      	lsrs	r3, r3, #2
 800b380:	f003 020f 	and.w	r2, r3, #15
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b38a:	2101      	movs	r1, #1
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f00e fcf3 	bl	8019d78 <HAL_PCDEx_LPM_Callback>
 800b392:	e002      	b.n	800b39a <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f00e f9dd 	bl	8019754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f006 fd38 	bl	8011e14 <USB_ReadInterrupts>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b3aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ae:	f040 80c5 	bne.w	800b53c <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3c0:	f023 0301 	bic.w	r3, r3, #1
 800b3c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2110      	movs	r1, #16
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f005 fead 	bl	801112c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d6:	e056      	b.n	800b486 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3fc:	0151      	lsls	r1, r2, #5
 800b3fe:	69fa      	ldr	r2, [r7, #28]
 800b400:	440a      	add	r2, r1
 800b402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b40a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b41c:	0151      	lsls	r1, r2, #5
 800b41e:	69fa      	ldr	r2, [r7, #28]
 800b420:	440a      	add	r2, r1
 800b422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b42a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b438:	461a      	mov	r2, r3
 800b43a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b43e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b450:	0151      	lsls	r1, r2, #5
 800b452:	69fa      	ldr	r2, [r7, #28]
 800b454:	440a      	add	r2, r1
 800b456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b45a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b45e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	4413      	add	r3, r2
 800b468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b470:	0151      	lsls	r1, r2, #5
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	440a      	add	r2, r1
 800b476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b47a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b47e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b482:	3301      	adds	r3, #1
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d3a3      	bcc.n	800b3d8 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	69fa      	ldr	r2, [r7, #28]
 800b49a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b49e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b4a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d016      	beq.n	800b4da <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4bc:	f043 030b 	orr.w	r3, r3, #11
 800b4c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4cc:	69fa      	ldr	r2, [r7, #28]
 800b4ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4d2:	f043 030b 	orr.w	r3, r3, #11
 800b4d6:	6453      	str	r3, [r2, #68]	; 0x44
 800b4d8:	e015      	b.n	800b506 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b4f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	69fa      	ldr	r2, [r7, #28]
 800b4fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b500:	f043 030b 	orr.w	r3, r3, #11
 800b504:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	69fa      	ldr	r2, [r7, #28]
 800b510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b514:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b518:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f006 fd38 	bl	8011f9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b53a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f006 fc67 	bl	8011e14 <USB_ReadInterrupts>
 800b546:	4603      	mov	r3, r0
 800b548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b550:	d124      	bne.n	800b59c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f006 fcfd 	bl	8011f56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4618      	mov	r0, r3
 800b562:	f005 fe44 	bl	80111ee <USB_GetDevSpeed>
 800b566:	4603      	mov	r3, r0
 800b568:	461a      	mov	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681c      	ldr	r4, [r3, #0]
 800b572:	f001 fa85 	bl	800ca80 <HAL_RCC_GetHCLKFreq>
 800b576:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	461a      	mov	r2, r3
 800b580:	4620      	mov	r0, r4
 800b582:	f005 fb9f 	bl	8010cc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f00e f8c5 	bl	8019716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	695a      	ldr	r2, [r3, #20]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b59a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f006 fc37 	bl	8011e14 <USB_ReadInterrupts>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	f003 0308 	and.w	r3, r3, #8
 800b5ac:	2b08      	cmp	r3, #8
 800b5ae:	d10a      	bne.n	800b5c6 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f00e f8a2 	bl	80196fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	695a      	ldr	r2, [r3, #20]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f002 0208 	and.w	r2, r2, #8
 800b5c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f006 fc22 	bl	8011e14 <USB_ReadInterrupts>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5da:	d10f      	bne.n	800b5fc <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f00e f914 	bl	8019814 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	695a      	ldr	r2, [r3, #20]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b5fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4618      	mov	r0, r3
 800b602:	f006 fc07 	bl	8011e14 <USB_ReadInterrupts>
 800b606:	4603      	mov	r3, r0
 800b608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b60c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b610:	d10f      	bne.n	800b632 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f00e f8e7 	bl	80197f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	695a      	ldr	r2, [r3, #20]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f006 fbec 	bl	8011e14 <USB_ReadInterrupts>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b646:	d10a      	bne.n	800b65e <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f00e f8f5 	bl	8019838 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	695a      	ldr	r2, [r3, #20]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b65c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4618      	mov	r0, r3
 800b664:	f006 fbd6 	bl	8011e14 <USB_ReadInterrupts>
 800b668:	4603      	mov	r3, r0
 800b66a:	f003 0304 	and.w	r3, r3, #4
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d115      	bne.n	800b69e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f00e f8e5 	bl	8019854 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6859      	ldr	r1, [r3, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	430a      	orrs	r2, r1
 800b698:	605a      	str	r2, [r3, #4]
 800b69a:	e000      	b.n	800b69e <HAL_PCD_IRQHandler+0x742>
      return;
 800b69c:	bf00      	nop
    }
  }
}
 800b69e:	3734      	adds	r7, #52	; 0x34
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd90      	pop	{r4, r7, pc}

0800b6a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d101      	bne.n	800b6be <HAL_PCD_SetAddress+0x1a>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e013      	b.n	800b6e6 <HAL_PCD_SetAddress+0x42>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	78fa      	ldrb	r2, [r7, #3]
 800b6ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	78fa      	ldrb	r2, [r7, #3]
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f006 fb34 	bl	8011d44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	4608      	mov	r0, r1
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	70fb      	strb	r3, [r7, #3]
 800b700:	460b      	mov	r3, r1
 800b702:	803b      	strh	r3, [r7, #0]
 800b704:	4613      	mov	r3, r2
 800b706:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b70c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b710:	2b00      	cmp	r3, #0
 800b712:	da0f      	bge.n	800b734 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b714:	78fb      	ldrb	r3, [r7, #3]
 800b716:	f003 020f 	and.w	r2, r3, #15
 800b71a:	4613      	mov	r3, r2
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	3338      	adds	r3, #56	; 0x38
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	4413      	add	r3, r2
 800b728:	3304      	adds	r3, #4
 800b72a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	705a      	strb	r2, [r3, #1]
 800b732:	e00f      	b.n	800b754 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b734:	78fb      	ldrb	r3, [r7, #3]
 800b736:	f003 020f 	and.w	r2, r3, #15
 800b73a:	4613      	mov	r3, r2
 800b73c:	00db      	lsls	r3, r3, #3
 800b73e:	1a9b      	subs	r3, r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	4413      	add	r3, r2
 800b74a:	3304      	adds	r3, #4
 800b74c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b754:	78fb      	ldrb	r3, [r7, #3]
 800b756:	f003 030f 	and.w	r3, r3, #15
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b760:	883a      	ldrh	r2, [r7, #0]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	78ba      	ldrb	r2, [r7, #2]
 800b76a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d004      	beq.n	800b77e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b29a      	uxth	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b77e:	78bb      	ldrb	r3, [r7, #2]
 800b780:	2b02      	cmp	r3, #2
 800b782:	d102      	bne.n	800b78a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_PCD_EP_Open+0xaa>
 800b794:	2302      	movs	r3, #2
 800b796:	e00e      	b.n	800b7b6 <HAL_PCD_EP_Open+0xc8>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68f9      	ldr	r1, [r7, #12]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f005 fd40 	bl	801122c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b7ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	da0f      	bge.n	800b7f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	f003 020f 	and.w	r2, r3, #15
 800b7d8:	4613      	mov	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	1a9b      	subs	r3, r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	3338      	adds	r3, #56	; 0x38
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	705a      	strb	r2, [r3, #1]
 800b7f0:	e00f      	b.n	800b812 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7f2:	78fb      	ldrb	r3, [r7, #3]
 800b7f4:	f003 020f 	and.w	r2, r3, #15
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	1a9b      	subs	r3, r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	4413      	add	r3, r2
 800b808:	3304      	adds	r3, #4
 800b80a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b824:	2b01      	cmp	r3, #1
 800b826:	d101      	bne.n	800b82c <HAL_PCD_EP_Close+0x6e>
 800b828:	2302      	movs	r3, #2
 800b82a:	e00e      	b.n	800b84a <HAL_PCD_EP_Close+0x8c>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f005 fd7e 	bl	801133c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b086      	sub	sp, #24
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	607a      	str	r2, [r7, #4]
 800b85c:	603b      	str	r3, [r7, #0]
 800b85e:	460b      	mov	r3, r1
 800b860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	f003 020f 	and.w	r2, r3, #15
 800b868:	4613      	mov	r3, r2
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	1a9b      	subs	r3, r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	4413      	add	r3, r2
 800b878:	3304      	adds	r3, #4
 800b87a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	2200      	movs	r2, #0
 800b88c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2200      	movs	r2, #0
 800b892:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	f003 030f 	and.w	r3, r3, #15
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	f003 030f 	and.w	r3, r3, #15
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d106      	bne.n	800b8b8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6979      	ldr	r1, [r7, #20]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f005 fffb 	bl	80118ac <USB_EP0StartXfer>
 800b8b6:	e005      	b.n	800b8c4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6979      	ldr	r1, [r7, #20]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f005 fe18 	bl	80114f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b083      	sub	sp, #12
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b8da:	78fb      	ldrb	r3, [r7, #3]
 800b8dc:	f003 020f 	and.w	r2, r3, #15
 800b8e0:	6879      	ldr	r1, [r7, #4]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	00db      	lsls	r3, r3, #3
 800b8e6:	1a9b      	subs	r3, r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	440b      	add	r3, r1
 800b8ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b8f0:	681b      	ldr	r3, [r3, #0]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b086      	sub	sp, #24
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
 800b90a:	460b      	mov	r3, r1
 800b90c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b90e:	7afb      	ldrb	r3, [r7, #11]
 800b910:	f003 020f 	and.w	r2, r3, #15
 800b914:	4613      	mov	r3, r2
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	3338      	adds	r3, #56	; 0x38
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	4413      	add	r3, r2
 800b922:	3304      	adds	r3, #4
 800b924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2200      	movs	r2, #0
 800b936:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2201      	movs	r2, #1
 800b93c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b93e:	7afb      	ldrb	r3, [r7, #11]
 800b940:	f003 030f 	and.w	r3, r3, #15
 800b944:	b2da      	uxtb	r2, r3
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b94a:	7afb      	ldrb	r3, [r7, #11]
 800b94c:	f003 030f 	and.w	r3, r3, #15
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6979      	ldr	r1, [r7, #20]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f005 ffa6 	bl	80118ac <USB_EP0StartXfer>
 800b960:	e005      	b.n	800b96e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6979      	ldr	r1, [r7, #20]
 800b968:	4618      	mov	r0, r3
 800b96a:	f005 fdc3 	bl	80114f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	460b      	mov	r3, r1
 800b982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b984:	78fb      	ldrb	r3, [r7, #3]
 800b986:	f003 020f 	and.w	r2, r3, #15
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d901      	bls.n	800b996 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e04e      	b.n	800ba34 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	da0f      	bge.n	800b9be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	f003 020f 	and.w	r2, r3, #15
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	1a9b      	subs	r3, r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	3338      	adds	r3, #56	; 0x38
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	705a      	strb	r2, [r3, #1]
 800b9bc:	e00d      	b.n	800b9da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b9be:	78fa      	ldrb	r2, [r7, #3]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	1a9b      	subs	r3, r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d101      	bne.n	800b9fa <HAL_PCD_EP_SetStall+0x82>
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	e01c      	b.n	800ba34 <HAL_PCD_EP_SetStall+0xbc>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68f9      	ldr	r1, [r7, #12]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f006 f8c7 	bl	8011b9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	f003 030f 	and.w	r3, r3, #15
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d108      	bne.n	800ba2a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ba22:	4619      	mov	r1, r3
 800ba24:	4610      	mov	r0, r2
 800ba26:	f006 fab9 	bl	8011f9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	f003 020f 	and.w	r2, r3, #15
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d901      	bls.n	800ba5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e042      	b.n	800bae0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	da0f      	bge.n	800ba82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba62:	78fb      	ldrb	r3, [r7, #3]
 800ba64:	f003 020f 	and.w	r2, r3, #15
 800ba68:	4613      	mov	r3, r2
 800ba6a:	00db      	lsls	r3, r3, #3
 800ba6c:	1a9b      	subs	r3, r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	3338      	adds	r3, #56	; 0x38
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	4413      	add	r3, r2
 800ba76:	3304      	adds	r3, #4
 800ba78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	705a      	strb	r2, [r3, #1]
 800ba80:	e00f      	b.n	800baa2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba82:	78fb      	ldrb	r3, [r7, #3]
 800ba84:	f003 020f 	and.w	r2, r3, #15
 800ba88:	4613      	mov	r3, r2
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	1a9b      	subs	r3, r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	4413      	add	r3, r2
 800ba98:	3304      	adds	r3, #4
 800ba9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800baa8:	78fb      	ldrb	r3, [r7, #3]
 800baaa:	f003 030f 	and.w	r3, r3, #15
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <HAL_PCD_EP_ClrStall+0x86>
 800babe:	2302      	movs	r3, #2
 800bac0:	e00e      	b.n	800bae0 <HAL_PCD_EP_ClrStall+0xa4>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f006 f8d1 	bl	8011c78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_PCD_EP_Flush+0x1a>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e01b      	b.n	800bb3a <HAL_PCD_EP_Flush+0x52>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800bb0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	da09      	bge.n	800bb26 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	f003 030f 	and.w	r3, r3, #15
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f005 fb04 	bl	801112c <USB_FlushTxFifo>
 800bb24:	e004      	b.n	800bb30 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f005 fb24 	bl	8011178 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b088      	sub	sp, #32
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	00db      	lsls	r3, r3, #3
 800bb5c:	1a9b      	subs	r3, r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	3338      	adds	r3, #56	; 0x38
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	4413      	add	r3, r2
 800bb66:	3304      	adds	r3, #4
 800bb68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	699a      	ldr	r2, [r3, #24]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d901      	bls.n	800bb7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e067      	b.n	800bc4a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	695a      	ldr	r2, [r3, #20]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d902      	bls.n	800bb96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	3303      	adds	r3, #3
 800bb9a:	089b      	lsrs	r3, r3, #2
 800bb9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb9e:	e026      	b.n	800bbee <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	695a      	ldr	r2, [r3, #20]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	69fa      	ldr	r2, [r7, #28]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d902      	bls.n	800bbbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	3303      	adds	r3, #3
 800bbc0:	089b      	lsrs	r3, r3, #2
 800bbc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68d9      	ldr	r1, [r3, #12]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	6978      	ldr	r0, [r7, #20]
 800bbd2:	f005 ff89 	bl	8011ae8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68da      	ldr	r2, [r3, #12]
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	441a      	add	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	699a      	ldr	r2, [r3, #24]
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	441a      	add	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d809      	bhi.n	800bc18 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	699a      	ldr	r2, [r3, #24]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d203      	bcs.n	800bc18 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1c3      	bne.n	800bba0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	695a      	ldr	r2, [r3, #20]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d811      	bhi.n	800bc48 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	f003 030f 	and.w	r3, r3, #15
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc30:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	43db      	mvns	r3, r3
 800bc3e:	6939      	ldr	r1, [r7, #16]
 800bc40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc44:	4013      	ands	r3, r2
 800bc46:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3720      	adds	r7, #32
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	333c      	adds	r3, #60	; 0x3c
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	015a      	lsls	r2, r3, #5
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	4413      	add	r3, r2
 800bc7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	4a19      	ldr	r2, [pc, #100]	; (800bcec <PCD_EP_OutXfrComplete_int+0x98>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d124      	bne.n	800bcd4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00a      	beq.n	800bcaa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	015a      	lsls	r2, r3, #5
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca0:	461a      	mov	r2, r3
 800bca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bca6:	6093      	str	r3, [r2, #8]
 800bca8:	e01a      	b.n	800bce0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f003 0320 	and.w	r3, r3, #32
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d008      	beq.n	800bcc6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	2320      	movs	r3, #32
 800bcc4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f00d fcdf 	bl	8019690 <HAL_PCD_DataOutStageCallback>
 800bcd2:	e005      	b.n	800bce0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f00d fcd8 	bl	8019690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	4f54310a 	.word	0x4f54310a

0800bcf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	333c      	adds	r3, #60	; 0x3c
 800bd08:	3304      	adds	r3, #4
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	015a      	lsls	r2, r3, #5
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	4413      	add	r3, r2
 800bd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	4a0c      	ldr	r2, [pc, #48]	; (800bd54 <PCD_EP_OutSetupPacket_int+0x64>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d90e      	bls.n	800bd44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d009      	beq.n	800bd44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f00d fc91 	bl	801966c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	4f54300a 	.word	0x4f54300a

0800bd58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	70fb      	strb	r3, [r7, #3]
 800bd64:	4613      	mov	r3, r2
 800bd66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d107      	bne.n	800bd86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bd76:	883b      	ldrh	r3, [r7, #0]
 800bd78:	0419      	lsls	r1, r3, #16
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	629a      	str	r2, [r3, #40]	; 0x28
 800bd84:	e028      	b.n	800bdd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8c:	0c1b      	lsrs	r3, r3, #16
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	4413      	add	r3, r2
 800bd92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]
 800bd98:	e00d      	b.n	800bdb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	3340      	adds	r3, #64	; 0x40
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	0c1b      	lsrs	r3, r3, #16
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	4413      	add	r3, r2
 800bdae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	73fb      	strb	r3, [r7, #15]
 800bdb6:	7bfa      	ldrb	r2, [r7, #15]
 800bdb8:	78fb      	ldrb	r3, [r7, #3]
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d3ec      	bcc.n	800bd9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bdc0:	883b      	ldrh	r3, [r7, #0]
 800bdc2:	0418      	lsls	r0, r3, #16
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6819      	ldr	r1, [r3, #0]
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	4302      	orrs	r2, r0
 800bdd0:	3340      	adds	r3, #64	; 0x40
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	440b      	add	r3, r1
 800bdd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	887a      	ldrh	r2, [r7, #2]
 800bdf8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2201      	movs	r2, #1
 800be1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be3a:	f043 0303 	orr.w	r3, r3, #3
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800be50:	b480      	push	{r7}
 800be52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be54:	4b05      	ldr	r3, [pc, #20]	; (800be6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a04      	ldr	r2, [pc, #16]	; (800be6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800be5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be5e:	6013      	str	r3, [r2, #0]
}
 800be60:	bf00      	nop
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	40007000 	.word	0x40007000

0800be70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800be70:	b480      	push	{r7}
 800be72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800be74:	4b04      	ldr	r3, [pc, #16]	; (800be88 <HAL_PWREx_GetVoltageRange+0x18>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	40007000 	.word	0x40007000

0800be8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be9a:	d130      	bne.n	800befe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800be9c:	4b23      	ldr	r3, [pc, #140]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bea8:	d038      	beq.n	800bf1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800beaa:	4b20      	ldr	r3, [pc, #128]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800beb2:	4a1e      	ldr	r2, [pc, #120]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800beb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800beb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800beba:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2232      	movs	r2, #50	; 0x32
 800bec0:	fb02 f303 	mul.w	r3, r2, r3
 800bec4:	4a1b      	ldr	r2, [pc, #108]	; (800bf34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bec6:	fba2 2303 	umull	r2, r3, r2, r3
 800beca:	0c9b      	lsrs	r3, r3, #18
 800becc:	3301      	adds	r3, #1
 800bece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bed0:	e002      	b.n	800bed8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bed8:	4b14      	ldr	r3, [pc, #80]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bee4:	d102      	bne.n	800beec <HAL_PWREx_ControlVoltageScaling+0x60>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f2      	bne.n	800bed2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef8:	d110      	bne.n	800bf1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800befa:	2303      	movs	r3, #3
 800befc:	e00f      	b.n	800bf1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800befe:	4b0b      	ldr	r3, [pc, #44]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bf06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf0a:	d007      	beq.n	800bf1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bf0c:	4b07      	ldr	r3, [pc, #28]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bf14:	4a05      	ldr	r2, [pc, #20]	; (800bf2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bf16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3714      	adds	r7, #20
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	40007000 	.word	0x40007000
 800bf30:	20000318 	.word	0x20000318
 800bf34:	431bde83 	.word	0x431bde83

0800bf38 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	4a04      	ldr	r2, [pc, #16]	; (800bf54 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bf42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf46:	6053      	str	r3, [r2, #4]
}
 800bf48:	bf00      	nop
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	40007000 	.word	0x40007000

0800bf58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d102      	bne.n	800bf6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	f000 bc16 	b.w	800c798 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf6c:	4ba0      	ldr	r3, [pc, #640]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f003 030c 	and.w	r3, r3, #12
 800bf74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf76:	4b9e      	ldr	r3, [pc, #632]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f003 0303 	and.w	r3, r3, #3
 800bf7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 0310 	and.w	r3, r3, #16
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 80e4 	beq.w	800c156 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d007      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x4c>
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	2b0c      	cmp	r3, #12
 800bf98:	f040 808b 	bne.w	800c0b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	f040 8087 	bne.w	800c0b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bfa4:	4b92      	ldr	r3, [pc, #584]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0302 	and.w	r3, r3, #2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d005      	beq.n	800bfbc <HAL_RCC_OscConfig+0x64>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	699b      	ldr	r3, [r3, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d101      	bne.n	800bfbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e3ed      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a1a      	ldr	r2, [r3, #32]
 800bfc0:	4b8b      	ldr	r3, [pc, #556]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0308 	and.w	r3, r3, #8
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d004      	beq.n	800bfd6 <HAL_RCC_OscConfig+0x7e>
 800bfcc:	4b88      	ldr	r3, [pc, #544]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfd4:	e005      	b.n	800bfe2 <HAL_RCC_OscConfig+0x8a>
 800bfd6:	4b86      	ldr	r3, [pc, #536]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800bfd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfdc:	091b      	lsrs	r3, r3, #4
 800bfde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d223      	bcs.n	800c02e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 fdb2 	bl	800cb54 <RCC_SetFlashLatencyFromMSIRange>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e3ce      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bffa:	4b7d      	ldr	r3, [pc, #500]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a7c      	ldr	r2, [pc, #496]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c000:	f043 0308 	orr.w	r3, r3, #8
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	4b7a      	ldr	r3, [pc, #488]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	4977      	ldr	r1, [pc, #476]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c014:	4313      	orrs	r3, r2
 800c016:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c018:	4b75      	ldr	r3, [pc, #468]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	69db      	ldr	r3, [r3, #28]
 800c024:	021b      	lsls	r3, r3, #8
 800c026:	4972      	ldr	r1, [pc, #456]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c028:	4313      	orrs	r3, r2
 800c02a:	604b      	str	r3, [r1, #4]
 800c02c:	e025      	b.n	800c07a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c02e:	4b70      	ldr	r3, [pc, #448]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a6f      	ldr	r2, [pc, #444]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c034:	f043 0308 	orr.w	r3, r3, #8
 800c038:	6013      	str	r3, [r2, #0]
 800c03a:	4b6d      	ldr	r3, [pc, #436]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	496a      	ldr	r1, [pc, #424]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c048:	4313      	orrs	r3, r2
 800c04a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c04c:	4b68      	ldr	r3, [pc, #416]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	021b      	lsls	r3, r3, #8
 800c05a:	4965      	ldr	r1, [pc, #404]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c05c:	4313      	orrs	r3, r2
 800c05e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d109      	bne.n	800c07a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 fd72 	bl	800cb54 <RCC_SetFlashLatencyFromMSIRange>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e38e      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c07a:	f000 fc75 	bl	800c968 <HAL_RCC_GetSysClockFreq>
 800c07e:	4602      	mov	r2, r0
 800c080:	4b5b      	ldr	r3, [pc, #364]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	091b      	lsrs	r3, r3, #4
 800c086:	f003 030f 	and.w	r3, r3, #15
 800c08a:	495a      	ldr	r1, [pc, #360]	; (800c1f4 <HAL_RCC_OscConfig+0x29c>)
 800c08c:	5ccb      	ldrb	r3, [r1, r3]
 800c08e:	f003 031f 	and.w	r3, r3, #31
 800c092:	fa22 f303 	lsr.w	r3, r2, r3
 800c096:	4a58      	ldr	r2, [pc, #352]	; (800c1f8 <HAL_RCC_OscConfig+0x2a0>)
 800c098:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c09a:	4b58      	ldr	r3, [pc, #352]	; (800c1fc <HAL_RCC_OscConfig+0x2a4>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fb f9c4 	bl	800742c <HAL_InitTick>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d052      	beq.n	800c154 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	e372      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d032      	beq.n	800c120 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c0ba:	4b4d      	ldr	r3, [pc, #308]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a4c      	ldr	r2, [pc, #304]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c0c0:	f043 0301 	orr.w	r3, r3, #1
 800c0c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c0c6:	f7fb fdd5 	bl	8007c74 <HAL_GetTick>
 800c0ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c0cc:	e008      	b.n	800c0e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0ce:	f7fb fdd1 	bl	8007c74 <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d901      	bls.n	800c0e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e35b      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c0e0:	4b43      	ldr	r3, [pc, #268]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 0302 	and.w	r3, r3, #2
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d0f0      	beq.n	800c0ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c0ec:	4b40      	ldr	r3, [pc, #256]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a3f      	ldr	r2, [pc, #252]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c0f2:	f043 0308 	orr.w	r3, r3, #8
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	4b3d      	ldr	r3, [pc, #244]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a1b      	ldr	r3, [r3, #32]
 800c104:	493a      	ldr	r1, [pc, #232]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c106:	4313      	orrs	r3, r2
 800c108:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c10a:	4b39      	ldr	r3, [pc, #228]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	021b      	lsls	r3, r3, #8
 800c118:	4935      	ldr	r1, [pc, #212]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	604b      	str	r3, [r1, #4]
 800c11e:	e01a      	b.n	800c156 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c120:	4b33      	ldr	r3, [pc, #204]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a32      	ldr	r2, [pc, #200]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c126:	f023 0301 	bic.w	r3, r3, #1
 800c12a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c12c:	f7fb fda2 	bl	8007c74 <HAL_GetTick>
 800c130:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c132:	e008      	b.n	800c146 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c134:	f7fb fd9e 	bl	8007c74 <HAL_GetTick>
 800c138:	4602      	mov	r2, r0
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d901      	bls.n	800c146 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	e328      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c146:	4b2a      	ldr	r3, [pc, #168]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0302 	and.w	r3, r3, #2
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1f0      	bne.n	800c134 <HAL_RCC_OscConfig+0x1dc>
 800c152:	e000      	b.n	800c156 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c154:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d073      	beq.n	800c24a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	2b08      	cmp	r3, #8
 800c166:	d005      	beq.n	800c174 <HAL_RCC_OscConfig+0x21c>
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	2b0c      	cmp	r3, #12
 800c16c:	d10e      	bne.n	800c18c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	2b03      	cmp	r3, #3
 800c172:	d10b      	bne.n	800c18c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c174:	4b1e      	ldr	r3, [pc, #120]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d063      	beq.n	800c248 <HAL_RCC_OscConfig+0x2f0>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d15f      	bne.n	800c248 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	e305      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c194:	d106      	bne.n	800c1a4 <HAL_RCC_OscConfig+0x24c>
 800c196:	4b16      	ldr	r3, [pc, #88]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a15      	ldr	r2, [pc, #84]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c19c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	e01d      	b.n	800c1e0 <HAL_RCC_OscConfig+0x288>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1ac:	d10c      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x270>
 800c1ae:	4b10      	ldr	r3, [pc, #64]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a0f      	ldr	r2, [pc, #60]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1b8:	6013      	str	r3, [r2, #0]
 800c1ba:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a0c      	ldr	r2, [pc, #48]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	e00b      	b.n	800c1e0 <HAL_RCC_OscConfig+0x288>
 800c1c8:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a08      	ldr	r2, [pc, #32]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	4b06      	ldr	r3, [pc, #24]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a05      	ldr	r2, [pc, #20]	; (800c1f0 <HAL_RCC_OscConfig+0x298>)
 800c1da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d01b      	beq.n	800c220 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1e8:	f7fb fd44 	bl	8007c74 <HAL_GetTick>
 800c1ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c1ee:	e010      	b.n	800c212 <HAL_RCC_OscConfig+0x2ba>
 800c1f0:	40021000 	.word	0x40021000
 800c1f4:	08023ef0 	.word	0x08023ef0
 800c1f8:	20000318 	.word	0x20000318
 800c1fc:	2000031c 	.word	0x2000031c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c200:	f7fb fd38 	bl	8007c74 <HAL_GetTick>
 800c204:	4602      	mov	r2, r0
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	2b64      	cmp	r3, #100	; 0x64
 800c20c:	d901      	bls.n	800c212 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c20e:	2303      	movs	r3, #3
 800c210:	e2c2      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c212:	4baf      	ldr	r3, [pc, #700]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0f0      	beq.n	800c200 <HAL_RCC_OscConfig+0x2a8>
 800c21e:	e014      	b.n	800c24a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c220:	f7fb fd28 	bl	8007c74 <HAL_GetTick>
 800c224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c226:	e008      	b.n	800c23a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c228:	f7fb fd24 	bl	8007c74 <HAL_GetTick>
 800c22c:	4602      	mov	r2, r0
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	2b64      	cmp	r3, #100	; 0x64
 800c234:	d901      	bls.n	800c23a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	e2ae      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c23a:	4ba5      	ldr	r3, [pc, #660]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1f0      	bne.n	800c228 <HAL_RCC_OscConfig+0x2d0>
 800c246:	e000      	b.n	800c24a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 0302 	and.w	r3, r3, #2
 800c252:	2b00      	cmp	r3, #0
 800c254:	d060      	beq.n	800c318 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b04      	cmp	r3, #4
 800c25a:	d005      	beq.n	800c268 <HAL_RCC_OscConfig+0x310>
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	2b0c      	cmp	r3, #12
 800c260:	d119      	bne.n	800c296 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b02      	cmp	r3, #2
 800c266:	d116      	bne.n	800c296 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c268:	4b99      	ldr	r3, [pc, #612]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c270:	2b00      	cmp	r3, #0
 800c272:	d005      	beq.n	800c280 <HAL_RCC_OscConfig+0x328>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e28b      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c280:	4b93      	ldr	r3, [pc, #588]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	061b      	lsls	r3, r3, #24
 800c28e:	4990      	ldr	r1, [pc, #576]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c290:	4313      	orrs	r3, r2
 800c292:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c294:	e040      	b.n	800c318 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d023      	beq.n	800c2e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c29e:	4b8c      	ldr	r3, [pc, #560]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a8b      	ldr	r2, [pc, #556]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c2a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2aa:	f7fb fce3 	bl	8007c74 <HAL_GetTick>
 800c2ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2b0:	e008      	b.n	800c2c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2b2:	f7fb fcdf 	bl	8007c74 <HAL_GetTick>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d901      	bls.n	800c2c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e269      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2c4:	4b82      	ldr	r3, [pc, #520]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0f0      	beq.n	800c2b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2d0:	4b7f      	ldr	r3, [pc, #508]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	061b      	lsls	r3, r3, #24
 800c2de:	497c      	ldr	r1, [pc, #496]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	604b      	str	r3, [r1, #4]
 800c2e4:	e018      	b.n	800c318 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c2e6:	4b7a      	ldr	r3, [pc, #488]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a79      	ldr	r2, [pc, #484]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c2ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2f2:	f7fb fcbf 	bl	8007c74 <HAL_GetTick>
 800c2f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c2f8:	e008      	b.n	800c30c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2fa:	f7fb fcbb 	bl	8007c74 <HAL_GetTick>
 800c2fe:	4602      	mov	r2, r0
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	2b02      	cmp	r3, #2
 800c306:	d901      	bls.n	800c30c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c308:	2303      	movs	r3, #3
 800c30a:	e245      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c30c:	4b70      	ldr	r3, [pc, #448]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1f0      	bne.n	800c2fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f003 0308 	and.w	r3, r3, #8
 800c320:	2b00      	cmp	r3, #0
 800c322:	d03c      	beq.n	800c39e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	695b      	ldr	r3, [r3, #20]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d01c      	beq.n	800c366 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c32c:	4b68      	ldr	r3, [pc, #416]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c332:	4a67      	ldr	r2, [pc, #412]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c334:	f043 0301 	orr.w	r3, r3, #1
 800c338:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c33c:	f7fb fc9a 	bl	8007c74 <HAL_GetTick>
 800c340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c342:	e008      	b.n	800c356 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c344:	f7fb fc96 	bl	8007c74 <HAL_GetTick>
 800c348:	4602      	mov	r2, r0
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d901      	bls.n	800c356 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c352:	2303      	movs	r3, #3
 800c354:	e220      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c356:	4b5e      	ldr	r3, [pc, #376]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c35c:	f003 0302 	and.w	r3, r3, #2
 800c360:	2b00      	cmp	r3, #0
 800c362:	d0ef      	beq.n	800c344 <HAL_RCC_OscConfig+0x3ec>
 800c364:	e01b      	b.n	800c39e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c366:	4b5a      	ldr	r3, [pc, #360]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c36c:	4a58      	ldr	r2, [pc, #352]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c376:	f7fb fc7d 	bl	8007c74 <HAL_GetTick>
 800c37a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c37c:	e008      	b.n	800c390 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c37e:	f7fb fc79 	bl	8007c74 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d901      	bls.n	800c390 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e203      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c390:	4b4f      	ldr	r3, [pc, #316]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c396:	f003 0302 	and.w	r3, r3, #2
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1ef      	bne.n	800c37e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0304 	and.w	r3, r3, #4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 80a6 	beq.w	800c4f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c3b0:	4b47      	ldr	r3, [pc, #284]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10d      	bne.n	800c3d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3bc:	4b44      	ldr	r3, [pc, #272]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3c0:	4a43      	ldr	r2, [pc, #268]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c3c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3c6:	6593      	str	r3, [r2, #88]	; 0x58
 800c3c8:	4b41      	ldr	r3, [pc, #260]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3d0:	60bb      	str	r3, [r7, #8]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3d8:	4b3e      	ldr	r3, [pc, #248]	; (800c4d4 <HAL_RCC_OscConfig+0x57c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d118      	bne.n	800c416 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c3e4:	4b3b      	ldr	r3, [pc, #236]	; (800c4d4 <HAL_RCC_OscConfig+0x57c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a3a      	ldr	r2, [pc, #232]	; (800c4d4 <HAL_RCC_OscConfig+0x57c>)
 800c3ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c3f0:	f7fb fc40 	bl	8007c74 <HAL_GetTick>
 800c3f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3f6:	e008      	b.n	800c40a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3f8:	f7fb fc3c 	bl	8007c74 <HAL_GetTick>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	2b02      	cmp	r3, #2
 800c404:	d901      	bls.n	800c40a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	e1c6      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c40a:	4b32      	ldr	r3, [pc, #200]	; (800c4d4 <HAL_RCC_OscConfig+0x57c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0f0      	beq.n	800c3f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d108      	bne.n	800c430 <HAL_RCC_OscConfig+0x4d8>
 800c41e:	4b2c      	ldr	r3, [pc, #176]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c424:	4a2a      	ldr	r2, [pc, #168]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c426:	f043 0301 	orr.w	r3, r3, #1
 800c42a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c42e:	e024      	b.n	800c47a <HAL_RCC_OscConfig+0x522>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	2b05      	cmp	r3, #5
 800c436:	d110      	bne.n	800c45a <HAL_RCC_OscConfig+0x502>
 800c438:	4b25      	ldr	r3, [pc, #148]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c43e:	4a24      	ldr	r2, [pc, #144]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c440:	f043 0304 	orr.w	r3, r3, #4
 800c444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c448:	4b21      	ldr	r3, [pc, #132]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c44e:	4a20      	ldr	r2, [pc, #128]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c450:	f043 0301 	orr.w	r3, r3, #1
 800c454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c458:	e00f      	b.n	800c47a <HAL_RCC_OscConfig+0x522>
 800c45a:	4b1d      	ldr	r3, [pc, #116]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c460:	4a1b      	ldr	r2, [pc, #108]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c462:	f023 0301 	bic.w	r3, r3, #1
 800c466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c46a:	4b19      	ldr	r3, [pc, #100]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c470:	4a17      	ldr	r2, [pc, #92]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c472:	f023 0304 	bic.w	r3, r3, #4
 800c476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d016      	beq.n	800c4b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c482:	f7fb fbf7 	bl	8007c74 <HAL_GetTick>
 800c486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c488:	e00a      	b.n	800c4a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c48a:	f7fb fbf3 	bl	8007c74 <HAL_GetTick>
 800c48e:	4602      	mov	r2, r0
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	f241 3288 	movw	r2, #5000	; 0x1388
 800c498:	4293      	cmp	r3, r2
 800c49a:	d901      	bls.n	800c4a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e17b      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4a0:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <HAL_RCC_OscConfig+0x578>)
 800c4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4a6:	f003 0302 	and.w	r3, r3, #2
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0ed      	beq.n	800c48a <HAL_RCC_OscConfig+0x532>
 800c4ae:	e01a      	b.n	800c4e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4b0:	f7fb fbe0 	bl	8007c74 <HAL_GetTick>
 800c4b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c4b6:	e00f      	b.n	800c4d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4b8:	f7fb fbdc 	bl	8007c74 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d906      	bls.n	800c4d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e164      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
 800c4ce:	bf00      	nop
 800c4d0:	40021000 	.word	0x40021000
 800c4d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c4d8:	4ba8      	ldr	r3, [pc, #672]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4de:	f003 0302 	and.w	r3, r3, #2
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e8      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c4e6:	7ffb      	ldrb	r3, [r7, #31]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d105      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4ec:	4ba3      	ldr	r3, [pc, #652]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c4ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f0:	4aa2      	ldr	r2, [pc, #648]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c4f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 0320 	and.w	r3, r3, #32
 800c500:	2b00      	cmp	r3, #0
 800c502:	d03c      	beq.n	800c57e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d01c      	beq.n	800c546 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c50c:	4b9b      	ldr	r3, [pc, #620]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c50e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c512:	4a9a      	ldr	r2, [pc, #616]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c514:	f043 0301 	orr.w	r3, r3, #1
 800c518:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c51c:	f7fb fbaa 	bl	8007c74 <HAL_GetTick>
 800c520:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c522:	e008      	b.n	800c536 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c524:	f7fb fba6 	bl	8007c74 <HAL_GetTick>
 800c528:	4602      	mov	r2, r0
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d901      	bls.n	800c536 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c532:	2303      	movs	r3, #3
 800c534:	e130      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c536:	4b91      	ldr	r3, [pc, #580]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c53c:	f003 0302 	and.w	r3, r3, #2
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0ef      	beq.n	800c524 <HAL_RCC_OscConfig+0x5cc>
 800c544:	e01b      	b.n	800c57e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c546:	4b8d      	ldr	r3, [pc, #564]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c54c:	4a8b      	ldr	r2, [pc, #556]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c54e:	f023 0301 	bic.w	r3, r3, #1
 800c552:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c556:	f7fb fb8d 	bl	8007c74 <HAL_GetTick>
 800c55a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c55c:	e008      	b.n	800c570 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c55e:	f7fb fb89 	bl	8007c74 <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d901      	bls.n	800c570 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e113      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c570:	4b82      	ldr	r3, [pc, #520]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c576:	f003 0302 	and.w	r3, r3, #2
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1ef      	bne.n	800c55e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 8107 	beq.w	800c796 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	f040 80cb 	bne.w	800c728 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c592:	4b7a      	ldr	r3, [pc, #488]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f003 0203 	and.w	r2, r3, #3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d12c      	bne.n	800c600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d123      	bne.n	800c600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d11b      	bne.n	800c600 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d113      	bne.n	800c600 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e2:	085b      	lsrs	r3, r3, #1
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d109      	bne.n	800c600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f6:	085b      	lsrs	r3, r3, #1
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d06d      	beq.n	800c6dc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	2b0c      	cmp	r3, #12
 800c604:	d068      	beq.n	800c6d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c606:	4b5d      	ldr	r3, [pc, #372]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d105      	bne.n	800c61e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c612:	4b5a      	ldr	r3, [pc, #360]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e0ba      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c622:	4b56      	ldr	r3, [pc, #344]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a55      	ldr	r2, [pc, #340]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c62c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c62e:	f7fb fb21 	bl	8007c74 <HAL_GetTick>
 800c632:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c634:	e008      	b.n	800c648 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c636:	f7fb fb1d 	bl	8007c74 <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b02      	cmp	r3, #2
 800c642:	d901      	bls.n	800c648 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e0a7      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c648:	4b4c      	ldr	r3, [pc, #304]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1f0      	bne.n	800c636 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c654:	4b49      	ldr	r3, [pc, #292]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c656:	68da      	ldr	r2, [r3, #12]
 800c658:	4b49      	ldr	r3, [pc, #292]	; (800c780 <HAL_RCC_OscConfig+0x828>)
 800c65a:	4013      	ands	r3, r2
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c664:	3a01      	subs	r2, #1
 800c666:	0112      	lsls	r2, r2, #4
 800c668:	4311      	orrs	r1, r2
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c66e:	0212      	lsls	r2, r2, #8
 800c670:	4311      	orrs	r1, r2
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c676:	0852      	lsrs	r2, r2, #1
 800c678:	3a01      	subs	r2, #1
 800c67a:	0552      	lsls	r2, r2, #21
 800c67c:	4311      	orrs	r1, r2
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c682:	0852      	lsrs	r2, r2, #1
 800c684:	3a01      	subs	r2, #1
 800c686:	0652      	lsls	r2, r2, #25
 800c688:	4311      	orrs	r1, r2
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c68e:	06d2      	lsls	r2, r2, #27
 800c690:	430a      	orrs	r2, r1
 800c692:	493a      	ldr	r1, [pc, #232]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c694:	4313      	orrs	r3, r2
 800c696:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c698:	4b38      	ldr	r3, [pc, #224]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a37      	ldr	r2, [pc, #220]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c69e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c6a4:	4b35      	ldr	r3, [pc, #212]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	4a34      	ldr	r2, [pc, #208]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c6b0:	f7fb fae0 	bl	8007c74 <HAL_GetTick>
 800c6b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c6b6:	e008      	b.n	800c6ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6b8:	f7fb fadc 	bl	8007c74 <HAL_GetTick>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d901      	bls.n	800c6ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e066      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c6ca:	4b2c      	ldr	r3, [pc, #176]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0f0      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c6d6:	e05e      	b.n	800c796 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e05d      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c6dc:	4b27      	ldr	r3, [pc, #156]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d156      	bne.n	800c796 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c6e8:	4b24      	ldr	r3, [pc, #144]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a23      	ldr	r2, [pc, #140]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c6f4:	4b21      	ldr	r3, [pc, #132]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	4a20      	ldr	r2, [pc, #128]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c6fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c700:	f7fb fab8 	bl	8007c74 <HAL_GetTick>
 800c704:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c706:	e008      	b.n	800c71a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c708:	f7fb fab4 	bl	8007c74 <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	2b02      	cmp	r3, #2
 800c714:	d901      	bls.n	800c71a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e03e      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c71a:	4b18      	ldr	r3, [pc, #96]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d0f0      	beq.n	800c708 <HAL_RCC_OscConfig+0x7b0>
 800c726:	e036      	b.n	800c796 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	2b0c      	cmp	r3, #12
 800c72c:	d031      	beq.n	800c792 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c72e:	4b13      	ldr	r3, [pc, #76]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a12      	ldr	r2, [pc, #72]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c734:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c738:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c73a:	4b10      	ldr	r3, [pc, #64]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800c742:	2b00      	cmp	r3, #0
 800c744:	d105      	bne.n	800c752 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c746:	4b0d      	ldr	r3, [pc, #52]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	4a0c      	ldr	r2, [pc, #48]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c74c:	f023 0303 	bic.w	r3, r3, #3
 800c750:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c752:	4b0a      	ldr	r3, [pc, #40]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	4a09      	ldr	r2, [pc, #36]	; (800c77c <HAL_RCC_OscConfig+0x824>)
 800c758:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c75c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c760:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c762:	f7fb fa87 	bl	8007c74 <HAL_GetTick>
 800c766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c768:	e00c      	b.n	800c784 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c76a:	f7fb fa83 	bl	8007c74 <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d905      	bls.n	800c784 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e00d      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
 800c77c:	40021000 	.word	0x40021000
 800c780:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c784:	4b06      	ldr	r3, [pc, #24]	; (800c7a0 <HAL_RCC_OscConfig+0x848>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1ec      	bne.n	800c76a <HAL_RCC_OscConfig+0x812>
 800c790:	e001      	b.n	800c796 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	e000      	b.n	800c798 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3720      	adds	r7, #32
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	40021000 	.word	0x40021000

0800c7a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e0c8      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c7b8:	4b66      	ldr	r3, [pc, #408]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0307 	and.w	r3, r3, #7
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d910      	bls.n	800c7e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7c6:	4b63      	ldr	r3, [pc, #396]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f023 0207 	bic.w	r2, r3, #7
 800c7ce:	4961      	ldr	r1, [pc, #388]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7d6:	4b5f      	ldr	r3, [pc, #380]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 0307 	and.w	r3, r3, #7
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d001      	beq.n	800c7e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e0b0      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d04c      	beq.n	800c88e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d107      	bne.n	800c80c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7fc:	4b56      	ldr	r3, [pc, #344]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d121      	bne.n	800c84c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	e09e      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d107      	bne.n	800c824 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c814:	4b50      	ldr	r3, [pc, #320]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d115      	bne.n	800c84c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	e092      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d107      	bne.n	800c83c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c82c:	4b4a      	ldr	r3, [pc, #296]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0302 	and.w	r3, r3, #2
 800c834:	2b00      	cmp	r3, #0
 800c836:	d109      	bne.n	800c84c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e086      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c83c:	4b46      	ldr	r3, [pc, #280]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c844:	2b00      	cmp	r3, #0
 800c846:	d101      	bne.n	800c84c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	e07e      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c84c:	4b42      	ldr	r3, [pc, #264]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	f023 0203 	bic.w	r2, r3, #3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	493f      	ldr	r1, [pc, #252]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c85a:	4313      	orrs	r3, r2
 800c85c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c85e:	f7fb fa09 	bl	8007c74 <HAL_GetTick>
 800c862:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c864:	e00a      	b.n	800c87c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c866:	f7fb fa05 	bl	8007c74 <HAL_GetTick>
 800c86a:	4602      	mov	r2, r0
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	f241 3288 	movw	r2, #5000	; 0x1388
 800c874:	4293      	cmp	r3, r2
 800c876:	d901      	bls.n	800c87c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c878:	2303      	movs	r3, #3
 800c87a:	e066      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c87c:	4b36      	ldr	r3, [pc, #216]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f003 020c 	and.w	r2, r3, #12
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d1eb      	bne.n	800c866 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d008      	beq.n	800c8ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c89a:	4b2f      	ldr	r3, [pc, #188]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	492c      	ldr	r1, [pc, #176]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c8ac:	4b29      	ldr	r3, [pc, #164]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0307 	and.w	r3, r3, #7
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d210      	bcs.n	800c8dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8ba:	4b26      	ldr	r3, [pc, #152]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f023 0207 	bic.w	r2, r3, #7
 800c8c2:	4924      	ldr	r1, [pc, #144]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8ca:	4b22      	ldr	r3, [pc, #136]	; (800c954 <HAL_RCC_ClockConfig+0x1b0>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d001      	beq.n	800c8dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e036      	b.n	800c94a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0304 	and.w	r3, r3, #4
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d008      	beq.n	800c8fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c8e8:	4b1b      	ldr	r3, [pc, #108]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	4918      	ldr	r1, [pc, #96]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f003 0308 	and.w	r3, r3, #8
 800c902:	2b00      	cmp	r3, #0
 800c904:	d009      	beq.n	800c91a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c906:	4b14      	ldr	r3, [pc, #80]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	4910      	ldr	r1, [pc, #64]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c916:	4313      	orrs	r3, r2
 800c918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c91a:	f000 f825 	bl	800c968 <HAL_RCC_GetSysClockFreq>
 800c91e:	4602      	mov	r2, r0
 800c920:	4b0d      	ldr	r3, [pc, #52]	; (800c958 <HAL_RCC_ClockConfig+0x1b4>)
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	091b      	lsrs	r3, r3, #4
 800c926:	f003 030f 	and.w	r3, r3, #15
 800c92a:	490c      	ldr	r1, [pc, #48]	; (800c95c <HAL_RCC_ClockConfig+0x1b8>)
 800c92c:	5ccb      	ldrb	r3, [r1, r3]
 800c92e:	f003 031f 	and.w	r3, r3, #31
 800c932:	fa22 f303 	lsr.w	r3, r2, r3
 800c936:	4a0a      	ldr	r2, [pc, #40]	; (800c960 <HAL_RCC_ClockConfig+0x1bc>)
 800c938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c93a:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <HAL_RCC_ClockConfig+0x1c0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fa fd74 	bl	800742c <HAL_InitTick>
 800c944:	4603      	mov	r3, r0
 800c946:	72fb      	strb	r3, [r7, #11]

  return status;
 800c948:	7afb      	ldrb	r3, [r7, #11]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	40022000 	.word	0x40022000
 800c958:	40021000 	.word	0x40021000
 800c95c:	08023ef0 	.word	0x08023ef0
 800c960:	20000318 	.word	0x20000318
 800c964:	2000031c 	.word	0x2000031c

0800c968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c968:	b480      	push	{r7}
 800c96a:	b089      	sub	sp, #36	; 0x24
 800c96c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	61fb      	str	r3, [r7, #28]
 800c972:	2300      	movs	r3, #0
 800c974:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c976:	4b3e      	ldr	r3, [pc, #248]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	f003 030c 	and.w	r3, r3, #12
 800c97e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c980:	4b3b      	ldr	r3, [pc, #236]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	f003 0303 	and.w	r3, r3, #3
 800c988:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d005      	beq.n	800c99c <HAL_RCC_GetSysClockFreq+0x34>
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	2b0c      	cmp	r3, #12
 800c994:	d121      	bne.n	800c9da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d11e      	bne.n	800c9da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c99c:	4b34      	ldr	r3, [pc, #208]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 0308 	and.w	r3, r3, #8
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d107      	bne.n	800c9b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c9a8:	4b31      	ldr	r3, [pc, #196]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9ae:	0a1b      	lsrs	r3, r3, #8
 800c9b0:	f003 030f 	and.w	r3, r3, #15
 800c9b4:	61fb      	str	r3, [r7, #28]
 800c9b6:	e005      	b.n	800c9c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c9b8:	4b2d      	ldr	r3, [pc, #180]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	091b      	lsrs	r3, r3, #4
 800c9be:	f003 030f 	and.w	r3, r3, #15
 800c9c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c9c4:	4a2b      	ldr	r2, [pc, #172]	; (800ca74 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10d      	bne.n	800c9f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c9d8:	e00a      	b.n	800c9f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	2b04      	cmp	r3, #4
 800c9de:	d102      	bne.n	800c9e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c9e0:	4b25      	ldr	r3, [pc, #148]	; (800ca78 <HAL_RCC_GetSysClockFreq+0x110>)
 800c9e2:	61bb      	str	r3, [r7, #24]
 800c9e4:	e004      	b.n	800c9f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	2b08      	cmp	r3, #8
 800c9ea:	d101      	bne.n	800c9f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c9ec:	4b23      	ldr	r3, [pc, #140]	; (800ca7c <HAL_RCC_GetSysClockFreq+0x114>)
 800c9ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	2b0c      	cmp	r3, #12
 800c9f4:	d134      	bne.n	800ca60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c9f6:	4b1e      	ldr	r3, [pc, #120]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	f003 0303 	and.w	r3, r3, #3
 800c9fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d003      	beq.n	800ca0e <HAL_RCC_GetSysClockFreq+0xa6>
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b03      	cmp	r3, #3
 800ca0a:	d003      	beq.n	800ca14 <HAL_RCC_GetSysClockFreq+0xac>
 800ca0c:	e005      	b.n	800ca1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ca0e:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <HAL_RCC_GetSysClockFreq+0x110>)
 800ca10:	617b      	str	r3, [r7, #20]
      break;
 800ca12:	e005      	b.n	800ca20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ca14:	4b19      	ldr	r3, [pc, #100]	; (800ca7c <HAL_RCC_GetSysClockFreq+0x114>)
 800ca16:	617b      	str	r3, [r7, #20]
      break;
 800ca18:	e002      	b.n	800ca20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	617b      	str	r3, [r7, #20]
      break;
 800ca1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ca20:	4b13      	ldr	r3, [pc, #76]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	091b      	lsrs	r3, r3, #4
 800ca26:	f003 0307 	and.w	r3, r3, #7
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ca2e:	4b10      	ldr	r3, [pc, #64]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	0a1b      	lsrs	r3, r3, #8
 800ca34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	fb02 f203 	mul.w	r2, r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ca46:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <HAL_RCC_GetSysClockFreq+0x108>)
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	0e5b      	lsrs	r3, r3, #25
 800ca4c:	f003 0303 	and.w	r3, r3, #3
 800ca50:	3301      	adds	r3, #1
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ca60:	69bb      	ldr	r3, [r7, #24]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3724      	adds	r7, #36	; 0x24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	40021000 	.word	0x40021000
 800ca74:	08023f08 	.word	0x08023f08
 800ca78:	00f42400 	.word	0x00f42400
 800ca7c:	007a1200 	.word	0x007a1200

0800ca80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ca80:	b480      	push	{r7}
 800ca82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ca84:	4b03      	ldr	r3, [pc, #12]	; (800ca94 <HAL_RCC_GetHCLKFreq+0x14>)
 800ca86:	681b      	ldr	r3, [r3, #0]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	20000318 	.word	0x20000318

0800ca98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ca9c:	f7ff fff0 	bl	800ca80 <HAL_RCC_GetHCLKFreq>
 800caa0:	4602      	mov	r2, r0
 800caa2:	4b06      	ldr	r3, [pc, #24]	; (800cabc <HAL_RCC_GetPCLK1Freq+0x24>)
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	0a1b      	lsrs	r3, r3, #8
 800caa8:	f003 0307 	and.w	r3, r3, #7
 800caac:	4904      	ldr	r1, [pc, #16]	; (800cac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800caae:	5ccb      	ldrb	r3, [r1, r3]
 800cab0:	f003 031f 	and.w	r3, r3, #31
 800cab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cab8:	4618      	mov	r0, r3
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	40021000 	.word	0x40021000
 800cac0:	08023f00 	.word	0x08023f00

0800cac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cac8:	f7ff ffda 	bl	800ca80 <HAL_RCC_GetHCLKFreq>
 800cacc:	4602      	mov	r2, r0
 800cace:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	0adb      	lsrs	r3, r3, #11
 800cad4:	f003 0307 	and.w	r3, r3, #7
 800cad8:	4904      	ldr	r1, [pc, #16]	; (800caec <HAL_RCC_GetPCLK2Freq+0x28>)
 800cada:	5ccb      	ldrb	r3, [r1, r3]
 800cadc:	f003 031f 	and.w	r3, r3, #31
 800cae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	40021000 	.word	0x40021000
 800caec:	08023f00 	.word	0x08023f00

0800caf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	220f      	movs	r2, #15
 800cafe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800cb00:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <HAL_RCC_GetClockConfig+0x5c>)
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	f003 0203 	and.w	r2, r3, #3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800cb0c:	4b0f      	ldr	r3, [pc, #60]	; (800cb4c <HAL_RCC_GetClockConfig+0x5c>)
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800cb18:	4b0c      	ldr	r3, [pc, #48]	; (800cb4c <HAL_RCC_GetClockConfig+0x5c>)
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800cb24:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <HAL_RCC_GetClockConfig+0x5c>)
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	08db      	lsrs	r3, r3, #3
 800cb2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cb32:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <HAL_RCC_GetClockConfig+0x60>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 0207 	and.w	r2, r3, #7
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	601a      	str	r2, [r3, #0]
}
 800cb3e:	bf00      	nop
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	40021000 	.word	0x40021000
 800cb50:	40022000 	.word	0x40022000

0800cb54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cb60:	4b2a      	ldr	r3, [pc, #168]	; (800cc0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d003      	beq.n	800cb74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cb6c:	f7ff f980 	bl	800be70 <HAL_PWREx_GetVoltageRange>
 800cb70:	6178      	str	r0, [r7, #20]
 800cb72:	e014      	b.n	800cb9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb74:	4b25      	ldr	r3, [pc, #148]	; (800cc0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb78:	4a24      	ldr	r2, [pc, #144]	; (800cc0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb7e:	6593      	str	r3, [r2, #88]	; 0x58
 800cb80:	4b22      	ldr	r3, [pc, #136]	; (800cc0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cb8c:	f7ff f970 	bl	800be70 <HAL_PWREx_GetVoltageRange>
 800cb90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cb92:	4b1e      	ldr	r3, [pc, #120]	; (800cc0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb96:	4a1d      	ldr	r2, [pc, #116]	; (800cc0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cba4:	d10b      	bne.n	800cbbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b80      	cmp	r3, #128	; 0x80
 800cbaa:	d919      	bls.n	800cbe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2ba0      	cmp	r3, #160	; 0xa0
 800cbb0:	d902      	bls.n	800cbb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	613b      	str	r3, [r7, #16]
 800cbb6:	e013      	b.n	800cbe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cbb8:	2301      	movs	r3, #1
 800cbba:	613b      	str	r3, [r7, #16]
 800cbbc:	e010      	b.n	800cbe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b80      	cmp	r3, #128	; 0x80
 800cbc2:	d902      	bls.n	800cbca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	613b      	str	r3, [r7, #16]
 800cbc8:	e00a      	b.n	800cbe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b80      	cmp	r3, #128	; 0x80
 800cbce:	d102      	bne.n	800cbd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	613b      	str	r3, [r7, #16]
 800cbd4:	e004      	b.n	800cbe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b70      	cmp	r3, #112	; 0x70
 800cbda:	d101      	bne.n	800cbe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cbdc:	2301      	movs	r3, #1
 800cbde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cbe0:	4b0b      	ldr	r3, [pc, #44]	; (800cc10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f023 0207 	bic.w	r2, r3, #7
 800cbe8:	4909      	ldr	r1, [pc, #36]	; (800cc10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cbf0:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 0307 	and.w	r3, r3, #7
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d001      	beq.n	800cc02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e000      	b.n	800cc04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	40021000 	.word	0x40021000
 800cc10:	40022000 	.word	0x40022000

0800cc14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cc20:	2300      	movs	r3, #0
 800cc22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d041      	beq.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cc38:	d02a      	beq.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cc3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cc3e:	d824      	bhi.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cc40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc44:	d008      	beq.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cc46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc4a:	d81e      	bhi.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00a      	beq.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cc50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc54:	d010      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cc56:	e018      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cc58:	4b86      	ldr	r3, [pc, #536]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	4a85      	ldr	r2, [pc, #532]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc64:	e015      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 fadf 	bl	800d230 <RCCEx_PLLSAI1_Config>
 800cc72:	4603      	mov	r3, r0
 800cc74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc76:	e00c      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3320      	adds	r3, #32
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f000 fbc8 	bl	800d414 <RCCEx_PLLSAI2_Config>
 800cc84:	4603      	mov	r3, r0
 800cc86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc88:	e003      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	74fb      	strb	r3, [r7, #19]
      break;
 800cc8e:	e000      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cc90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc92:	7cfb      	ldrb	r3, [r7, #19]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10b      	bne.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc98:	4b76      	ldr	r3, [pc, #472]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cca6:	4973      	ldr	r1, [pc, #460]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ccae:	e001      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb0:	7cfb      	ldrb	r3, [r7, #19]
 800ccb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d041      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccc8:	d02a      	beq.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800ccca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccce:	d824      	bhi.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ccd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccd4:	d008      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ccd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccda:	d81e      	bhi.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00a      	beq.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800cce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cce4:	d010      	beq.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cce6:	e018      	b.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cce8:	4b62      	ldr	r3, [pc, #392]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	4a61      	ldr	r2, [pc, #388]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ccf4:	e015      	b.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fa97 	bl	800d230 <RCCEx_PLLSAI1_Config>
 800cd02:	4603      	mov	r3, r0
 800cd04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cd06:	e00c      	b.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3320      	adds	r3, #32
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fb80 	bl	800d414 <RCCEx_PLLSAI2_Config>
 800cd14:	4603      	mov	r3, r0
 800cd16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cd18:	e003      	b.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	74fb      	strb	r3, [r7, #19]
      break;
 800cd1e:	e000      	b.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800cd20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd22:	7cfb      	ldrb	r3, [r7, #19]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10b      	bne.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cd28:	4b52      	ldr	r3, [pc, #328]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd36:	494f      	ldr	r1, [pc, #316]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cd3e:	e001      	b.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd40:	7cfb      	ldrb	r3, [r7, #19]
 800cd42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 80a0 	beq.w	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd52:	2300      	movs	r3, #0
 800cd54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cd56:	4b47      	ldr	r3, [pc, #284]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e000      	b.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800cd66:	2300      	movs	r3, #0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00d      	beq.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd6c:	4b41      	ldr	r3, [pc, #260]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd70:	4a40      	ldr	r2, [pc, #256]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd76:	6593      	str	r3, [r2, #88]	; 0x58
 800cd78:	4b3e      	ldr	r3, [pc, #248]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd80:	60bb      	str	r3, [r7, #8]
 800cd82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd84:	2301      	movs	r3, #1
 800cd86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd88:	4b3b      	ldr	r3, [pc, #236]	; (800ce78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a3a      	ldr	r2, [pc, #232]	; (800ce78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd94:	f7fa ff6e 	bl	8007c74 <HAL_GetTick>
 800cd98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd9a:	e009      	b.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd9c:	f7fa ff6a 	bl	8007c74 <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d902      	bls.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	74fb      	strb	r3, [r7, #19]
        break;
 800cdae:	e005      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cdb0:	4b31      	ldr	r3, [pc, #196]	; (800ce78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0ef      	beq.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800cdbc:	7cfb      	ldrb	r3, [r7, #19]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d15c      	bne.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cdc2:	4b2c      	ldr	r3, [pc, #176]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d01f      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d019      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cde0:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cde2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cde6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cdec:	4b21      	ldr	r3, [pc, #132]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf2:	4a20      	ldr	r2, [pc, #128]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cdfc:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce02:	4a1c      	ldr	r2, [pc, #112]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ce04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ce0c:	4a19      	ldr	r2, [pc, #100]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d016      	beq.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce1e:	f7fa ff29 	bl	8007c74 <HAL_GetTick>
 800ce22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce24:	e00b      	b.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce26:	f7fa ff25 	bl	8007c74 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d902      	bls.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	74fb      	strb	r3, [r7, #19]
            break;
 800ce3c:	e006      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ce40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce44:	f003 0302 	and.w	r3, r3, #2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0ec      	beq.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800ce4c:	7cfb      	ldrb	r3, [r7, #19]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10c      	bne.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce52:	4b08      	ldr	r3, [pc, #32]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ce54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce62:	4904      	ldr	r1, [pc, #16]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ce64:	4313      	orrs	r3, r2
 800ce66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ce6a:	e009      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce6c:	7cfb      	ldrb	r3, [r7, #19]
 800ce6e:	74bb      	strb	r3, [r7, #18]
 800ce70:	e006      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800ce72:	bf00      	nop
 800ce74:	40021000 	.word	0x40021000
 800ce78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce7c:	7cfb      	ldrb	r3, [r7, #19]
 800ce7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce80:	7c7b      	ldrb	r3, [r7, #17]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d105      	bne.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce86:	4ba6      	ldr	r3, [pc, #664]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce8a:	4aa5      	ldr	r2, [pc, #660]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce9e:	4ba0      	ldr	r3, [pc, #640]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cea4:	f023 0203 	bic.w	r2, r3, #3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceac:	499c      	ldr	r1, [pc, #624]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 0302 	and.w	r3, r3, #2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00a      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cec0:	4b97      	ldr	r3, [pc, #604]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec6:	f023 020c 	bic.w	r2, r3, #12
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cece:	4994      	ldr	r1, [pc, #592]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 0304 	and.w	r3, r3, #4
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cee2:	4b8f      	ldr	r3, [pc, #572]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef0:	498b      	ldr	r1, [pc, #556]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cef2:	4313      	orrs	r3, r2
 800cef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 0308 	and.w	r3, r3, #8
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00a      	beq.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cf04:	4b86      	ldr	r3, [pc, #536]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf12:	4983      	ldr	r1, [pc, #524]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf14:	4313      	orrs	r3, r2
 800cf16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0310 	and.w	r3, r3, #16
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cf26:	4b7e      	ldr	r3, [pc, #504]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf34:	497a      	ldr	r1, [pc, #488]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f003 0320 	and.w	r3, r3, #32
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00a      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf48:	4b75      	ldr	r3, [pc, #468]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf56:	4972      	ldr	r1, [pc, #456]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00a      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf6a:	4b6d      	ldr	r3, [pc, #436]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf78:	4969      	ldr	r1, [pc, #420]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf8c:	4b64      	ldr	r3, [pc, #400]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf9a:	4961      	ldr	r1, [pc, #388]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00a      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cfae:	4b5c      	ldr	r3, [pc, #368]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfbc:	4958      	ldr	r1, [pc, #352]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00a      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cfd0:	4b53      	ldr	r3, [pc, #332]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfde:	4950      	ldr	r1, [pc, #320]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00a      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cff2:	4b4b      	ldr	r3, [pc, #300]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d000:	4947      	ldr	r1, [pc, #284]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d002:	4313      	orrs	r3, r2
 800d004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00a      	beq.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d014:	4b42      	ldr	r3, [pc, #264]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d01a:	f023 0203 	bic.w	r2, r3, #3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d022:	493f      	ldr	r1, [pc, #252]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d024:	4313      	orrs	r3, r2
 800d026:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d032:	2b00      	cmp	r3, #0
 800d034:	d028      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d036:	4b3a      	ldr	r3, [pc, #232]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d03c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d044:	4936      	ldr	r1, [pc, #216]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d046:	4313      	orrs	r3, r2
 800d048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d054:	d106      	bne.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d056:	4b32      	ldr	r3, [pc, #200]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	4a31      	ldr	r2, [pc, #196]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d05c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d060:	60d3      	str	r3, [r2, #12]
 800d062:	e011      	b.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d06c:	d10c      	bne.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3304      	adds	r3, #4
 800d072:	2101      	movs	r1, #1
 800d074:	4618      	mov	r0, r3
 800d076:	f000 f8db 	bl	800d230 <RCCEx_PLLSAI1_Config>
 800d07a:	4603      	mov	r3, r0
 800d07c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d07e:	7cfb      	ldrb	r3, [r7, #19]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800d084:	7cfb      	ldrb	r3, [r7, #19]
 800d086:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d028      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d094:	4b22      	ldr	r3, [pc, #136]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d09a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a2:	491f      	ldr	r1, [pc, #124]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0b2:	d106      	bne.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0b4:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	4a19      	ldr	r2, [pc, #100]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d0ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0be:	60d3      	str	r3, [r2, #12]
 800d0c0:	e011      	b.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d0ca:	d10c      	bne.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	2101      	movs	r1, #1
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 f8ac 	bl	800d230 <RCCEx_PLLSAI1_Config>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0dc:	7cfb      	ldrb	r3, [r7, #19]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800d0e2:	7cfb      	ldrb	r3, [r7, #19]
 800d0e4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d02a      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d0f2:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d100:	4907      	ldr	r1, [pc, #28]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d102:	4313      	orrs	r3, r2
 800d104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d10c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d110:	d108      	bne.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d112:	4b03      	ldr	r3, [pc, #12]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	4a02      	ldr	r2, [pc, #8]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d11c:	60d3      	str	r3, [r2, #12]
 800d11e:	e013      	b.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800d120:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d12c:	d10c      	bne.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	3304      	adds	r3, #4
 800d132:	2101      	movs	r1, #1
 800d134:	4618      	mov	r0, r3
 800d136:	f000 f87b 	bl	800d230 <RCCEx_PLLSAI1_Config>
 800d13a:	4603      	mov	r3, r0
 800d13c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d13e:	7cfb      	ldrb	r3, [r7, #19]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800d144:	7cfb      	ldrb	r3, [r7, #19]
 800d146:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d02f      	beq.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d154:	4b2c      	ldr	r3, [pc, #176]	; (800d208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d15a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d162:	4929      	ldr	r1, [pc, #164]	; (800d208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d164:	4313      	orrs	r3, r2
 800d166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d16e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d172:	d10d      	bne.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	3304      	adds	r3, #4
 800d178:	2102      	movs	r1, #2
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 f858 	bl	800d230 <RCCEx_PLLSAI1_Config>
 800d180:	4603      	mov	r3, r0
 800d182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d184:	7cfb      	ldrb	r3, [r7, #19]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d014      	beq.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d18a:	7cfb      	ldrb	r3, [r7, #19]
 800d18c:	74bb      	strb	r3, [r7, #18]
 800d18e:	e011      	b.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d198:	d10c      	bne.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3320      	adds	r3, #32
 800d19e:	2102      	movs	r1, #2
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f937 	bl	800d414 <RCCEx_PLLSAI2_Config>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d1aa:	7cfb      	ldrb	r3, [r7, #19]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d1b0:	7cfb      	ldrb	r3, [r7, #19]
 800d1b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00b      	beq.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d1c0:	4b11      	ldr	r3, [pc, #68]	; (800d208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1d0:	490d      	ldr	r1, [pc, #52]	; (800d208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00b      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d1e4:	4b08      	ldr	r3, [pc, #32]	; (800d208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1f4:	4904      	ldr	r1, [pc, #16]	; (800d208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d1fc:	7cbb      	ldrb	r3, [r7, #18]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	40021000 	.word	0x40021000

0800d20c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800d210:	4b06      	ldr	r3, [pc, #24]	; (800d22c <HAL_RCCEx_EnableLSECSS+0x20>)
 800d212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d216:	4a05      	ldr	r2, [pc, #20]	; (800d22c <HAL_RCCEx_EnableLSECSS+0x20>)
 800d218:	f043 0320 	orr.w	r3, r3, #32
 800d21c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d220:	bf00      	nop
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	40021000 	.word	0x40021000

0800d230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d23e:	4b74      	ldr	r3, [pc, #464]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	f003 0303 	and.w	r3, r3, #3
 800d246:	2b00      	cmp	r3, #0
 800d248:	d018      	beq.n	800d27c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d24a:	4b71      	ldr	r3, [pc, #452]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	f003 0203 	and.w	r2, r3, #3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	429a      	cmp	r2, r3
 800d258:	d10d      	bne.n	800d276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
       ||
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d009      	beq.n	800d276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d262:	4b6b      	ldr	r3, [pc, #428]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	091b      	lsrs	r3, r3, #4
 800d268:	f003 0307 	and.w	r3, r3, #7
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
       ||
 800d272:	429a      	cmp	r2, r3
 800d274:	d047      	beq.n	800d306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	73fb      	strb	r3, [r7, #15]
 800d27a:	e044      	b.n	800d306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b03      	cmp	r3, #3
 800d282:	d018      	beq.n	800d2b6 <RCCEx_PLLSAI1_Config+0x86>
 800d284:	2b03      	cmp	r3, #3
 800d286:	d825      	bhi.n	800d2d4 <RCCEx_PLLSAI1_Config+0xa4>
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d002      	beq.n	800d292 <RCCEx_PLLSAI1_Config+0x62>
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d009      	beq.n	800d2a4 <RCCEx_PLLSAI1_Config+0x74>
 800d290:	e020      	b.n	800d2d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d292:	4b5f      	ldr	r3, [pc, #380]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d11d      	bne.n	800d2da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d2a2:	e01a      	b.n	800d2da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d2a4:	4b5a      	ldr	r3, [pc, #360]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d116      	bne.n	800d2de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d2b4:	e013      	b.n	800d2de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d2b6:	4b56      	ldr	r3, [pc, #344]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10f      	bne.n	800d2e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d2c2:	4b53      	ldr	r3, [pc, #332]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d109      	bne.n	800d2e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d2d2:	e006      	b.n	800d2e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d8:	e004      	b.n	800d2e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d2da:	bf00      	nop
 800d2dc:	e002      	b.n	800d2e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d2de:	bf00      	nop
 800d2e0:	e000      	b.n	800d2e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d2e2:	bf00      	nop
    }

    if(status == HAL_OK)
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10d      	bne.n	800d306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d2ea:	4b49      	ldr	r3, [pc, #292]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6819      	ldr	r1, [r3, #0]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	011b      	lsls	r3, r3, #4
 800d2fe:	430b      	orrs	r3, r1
 800d300:	4943      	ldr	r1, [pc, #268]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d302:	4313      	orrs	r3, r2
 800d304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d306:	7bfb      	ldrb	r3, [r7, #15]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d17c      	bne.n	800d406 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d30c:	4b40      	ldr	r3, [pc, #256]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a3f      	ldr	r2, [pc, #252]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d318:	f7fa fcac 	bl	8007c74 <HAL_GetTick>
 800d31c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d31e:	e009      	b.n	800d334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d320:	f7fa fca8 	bl	8007c74 <HAL_GetTick>
 800d324:	4602      	mov	r2, r0
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d902      	bls.n	800d334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d32e:	2303      	movs	r3, #3
 800d330:	73fb      	strb	r3, [r7, #15]
        break;
 800d332:	e005      	b.n	800d340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d334:	4b36      	ldr	r3, [pc, #216]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1ef      	bne.n	800d320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d15f      	bne.n	800d406 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d110      	bne.n	800d36e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d34c:	4b30      	ldr	r3, [pc, #192]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d34e:	691b      	ldr	r3, [r3, #16]
 800d350:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	6892      	ldr	r2, [r2, #8]
 800d35c:	0211      	lsls	r1, r2, #8
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	68d2      	ldr	r2, [r2, #12]
 800d362:	06d2      	lsls	r2, r2, #27
 800d364:	430a      	orrs	r2, r1
 800d366:	492a      	ldr	r1, [pc, #168]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d368:	4313      	orrs	r3, r2
 800d36a:	610b      	str	r3, [r1, #16]
 800d36c:	e027      	b.n	800d3be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	2b01      	cmp	r3, #1
 800d372:	d112      	bne.n	800d39a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d374:	4b26      	ldr	r3, [pc, #152]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d37c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	6892      	ldr	r2, [r2, #8]
 800d384:	0211      	lsls	r1, r2, #8
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	6912      	ldr	r2, [r2, #16]
 800d38a:	0852      	lsrs	r2, r2, #1
 800d38c:	3a01      	subs	r2, #1
 800d38e:	0552      	lsls	r2, r2, #21
 800d390:	430a      	orrs	r2, r1
 800d392:	491f      	ldr	r1, [pc, #124]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d394:	4313      	orrs	r3, r2
 800d396:	610b      	str	r3, [r1, #16]
 800d398:	e011      	b.n	800d3be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d39a:	4b1d      	ldr	r3, [pc, #116]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d3a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	6892      	ldr	r2, [r2, #8]
 800d3aa:	0211      	lsls	r1, r2, #8
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	6952      	ldr	r2, [r2, #20]
 800d3b0:	0852      	lsrs	r2, r2, #1
 800d3b2:	3a01      	subs	r2, #1
 800d3b4:	0652      	lsls	r2, r2, #25
 800d3b6:	430a      	orrs	r2, r1
 800d3b8:	4915      	ldr	r1, [pc, #84]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d3be:	4b14      	ldr	r3, [pc, #80]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a13      	ldr	r2, [pc, #76]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d3c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3ca:	f7fa fc53 	bl	8007c74 <HAL_GetTick>
 800d3ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d3d0:	e009      	b.n	800d3e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d3d2:	f7fa fc4f 	bl	8007c74 <HAL_GetTick>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	2b02      	cmp	r3, #2
 800d3de:	d902      	bls.n	800d3e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	73fb      	strb	r3, [r7, #15]
          break;
 800d3e4:	e005      	b.n	800d3f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d3e6:	4b0a      	ldr	r3, [pc, #40]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0ef      	beq.n	800d3d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d106      	bne.n	800d406 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d3f8:	4b05      	ldr	r3, [pc, #20]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d3fa:	691a      	ldr	r2, [r3, #16]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	4903      	ldr	r1, [pc, #12]	; (800d410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d402:	4313      	orrs	r3, r2
 800d404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d406:	7bfb      	ldrb	r3, [r7, #15]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	40021000 	.word	0x40021000

0800d414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d422:	4b69      	ldr	r3, [pc, #420]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	f003 0303 	and.w	r3, r3, #3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d018      	beq.n	800d460 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d42e:	4b66      	ldr	r3, [pc, #408]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	f003 0203 	and.w	r2, r3, #3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d10d      	bne.n	800d45a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
       ||
 800d442:	2b00      	cmp	r3, #0
 800d444:	d009      	beq.n	800d45a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d446:	4b60      	ldr	r3, [pc, #384]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	091b      	lsrs	r3, r3, #4
 800d44c:	f003 0307 	and.w	r3, r3, #7
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	685b      	ldr	r3, [r3, #4]
       ||
 800d456:	429a      	cmp	r2, r3
 800d458:	d047      	beq.n	800d4ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	73fb      	strb	r3, [r7, #15]
 800d45e:	e044      	b.n	800d4ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b03      	cmp	r3, #3
 800d466:	d018      	beq.n	800d49a <RCCEx_PLLSAI2_Config+0x86>
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d825      	bhi.n	800d4b8 <RCCEx_PLLSAI2_Config+0xa4>
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d002      	beq.n	800d476 <RCCEx_PLLSAI2_Config+0x62>
 800d470:	2b02      	cmp	r3, #2
 800d472:	d009      	beq.n	800d488 <RCCEx_PLLSAI2_Config+0x74>
 800d474:	e020      	b.n	800d4b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d476:	4b54      	ldr	r3, [pc, #336]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f003 0302 	and.w	r3, r3, #2
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d11d      	bne.n	800d4be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d486:	e01a      	b.n	800d4be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d488:	4b4f      	ldr	r3, [pc, #316]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d490:	2b00      	cmp	r3, #0
 800d492:	d116      	bne.n	800d4c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d498:	e013      	b.n	800d4c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d49a:	4b4b      	ldr	r3, [pc, #300]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10f      	bne.n	800d4c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d4a6:	4b48      	ldr	r3, [pc, #288]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d109      	bne.n	800d4c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d4b6:	e006      	b.n	800d4c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d4bc:	e004      	b.n	800d4c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d4be:	bf00      	nop
 800d4c0:	e002      	b.n	800d4c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d4c2:	bf00      	nop
 800d4c4:	e000      	b.n	800d4c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d4c6:	bf00      	nop
    }

    if(status == HAL_OK)
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10d      	bne.n	800d4ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d4ce:	4b3e      	ldr	r3, [pc, #248]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6819      	ldr	r1, [r3, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	011b      	lsls	r3, r3, #4
 800d4e2:	430b      	orrs	r3, r1
 800d4e4:	4938      	ldr	r1, [pc, #224]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d4ea:	7bfb      	ldrb	r3, [r7, #15]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d166      	bne.n	800d5be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d4f0:	4b35      	ldr	r3, [pc, #212]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a34      	ldr	r2, [pc, #208]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4fc:	f7fa fbba 	bl	8007c74 <HAL_GetTick>
 800d500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d502:	e009      	b.n	800d518 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d504:	f7fa fbb6 	bl	8007c74 <HAL_GetTick>
 800d508:	4602      	mov	r2, r0
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d902      	bls.n	800d518 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	73fb      	strb	r3, [r7, #15]
        break;
 800d516:	e005      	b.n	800d524 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d518:	4b2b      	ldr	r3, [pc, #172]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1ef      	bne.n	800d504 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d149      	bne.n	800d5be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d110      	bne.n	800d552 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d530:	4b25      	ldr	r3, [pc, #148]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d532:	695b      	ldr	r3, [r3, #20]
 800d534:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	6892      	ldr	r2, [r2, #8]
 800d540:	0211      	lsls	r1, r2, #8
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	68d2      	ldr	r2, [r2, #12]
 800d546:	06d2      	lsls	r2, r2, #27
 800d548:	430a      	orrs	r2, r1
 800d54a:	491f      	ldr	r1, [pc, #124]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d54c:	4313      	orrs	r3, r2
 800d54e:	614b      	str	r3, [r1, #20]
 800d550:	e011      	b.n	800d576 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d552:	4b1d      	ldr	r3, [pc, #116]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d55a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	6892      	ldr	r2, [r2, #8]
 800d562:	0211      	lsls	r1, r2, #8
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	6912      	ldr	r2, [r2, #16]
 800d568:	0852      	lsrs	r2, r2, #1
 800d56a:	3a01      	subs	r2, #1
 800d56c:	0652      	lsls	r2, r2, #25
 800d56e:	430a      	orrs	r2, r1
 800d570:	4915      	ldr	r1, [pc, #84]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d572:	4313      	orrs	r3, r2
 800d574:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d576:	4b14      	ldr	r3, [pc, #80]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a13      	ldr	r2, [pc, #76]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d57c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d580:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d582:	f7fa fb77 	bl	8007c74 <HAL_GetTick>
 800d586:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d588:	e009      	b.n	800d59e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d58a:	f7fa fb73 	bl	8007c74 <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	2b02      	cmp	r3, #2
 800d596:	d902      	bls.n	800d59e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	73fb      	strb	r3, [r7, #15]
          break;
 800d59c:	e005      	b.n	800d5aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d59e:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d0ef      	beq.n	800d58a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d5aa:	7bfb      	ldrb	r3, [r7, #15]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d106      	bne.n	800d5be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d5b0:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d5b2:	695a      	ldr	r2, [r3, #20]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	4903      	ldr	r1, [pc, #12]	; (800d5c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	40021000 	.word	0x40021000

0800d5cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d06c      	beq.n	800d6b8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d106      	bne.n	800d5f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7f9 fcde 	bl	8006fb4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	22ca      	movs	r2, #202	; 0xca
 800d606:	625a      	str	r2, [r3, #36]	; 0x24
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2253      	movs	r2, #83	; 0x53
 800d60e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 fabe 	bl	800db92 <RTC_EnterInitMode>
 800d616:	4603      	mov	r3, r0
 800d618:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d14b      	bne.n	800d6b8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	6812      	ldr	r2, [r2, #0]
 800d62a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d62e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d632:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6899      	ldr	r1, [r3, #8]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685a      	ldr	r2, [r3, #4]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	431a      	orrs	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	699b      	ldr	r3, [r3, #24]
 800d648:	431a      	orrs	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	430a      	orrs	r2, r1
 800d650:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	68d2      	ldr	r2, [r2, #12]
 800d65a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6919      	ldr	r1, [r3, #16]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	041a      	lsls	r2, r3, #16
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	430a      	orrs	r2, r1
 800d66e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fac1 	bl	800dbf8 <RTC_ExitInitMode>
 800d676:	4603      	mov	r3, r0
 800d678:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d11b      	bne.n	800d6b8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f022 0203 	bic.w	r2, r2, #3
 800d68e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	69da      	ldr	r2, [r3, #28]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	695b      	ldr	r3, [r3, #20]
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	430a      	orrs	r2, r1
 800d6a6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	22ff      	movs	r2, #255	; 0xff
 800d6ae:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <HAL_RTC_DeInit>:
  * @note   This function does not reset the RTC Backup Data registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d063      	beq.n	800d79e <HAL_RTC_DeInit+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2202      	movs	r2, #2
 800d6da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	22ca      	movs	r2, #202	; 0xca
 800d6e4:	625a      	str	r2, [r3, #36]	; 0x24
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2253      	movs	r2, #83	; 0x53
 800d6ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fa4f 	bl	800db92 <RTC_EnterInitMode>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d14f      	bne.n	800d79e <HAL_RTC_DeInit+0xda>
    {
      /* Reset all RTC CR register bits */
      hrtc->Instance->TR = 0x00000000U;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
      hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f242 1201 	movw	r2, #8449	; 0x2101
 800d70e:	605a      	str	r2, [r3, #4]
      hrtc->Instance->CR &= 0x00000000U;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2200      	movs	r2, #0
 800d71c:	609a      	str	r2, [r3, #8]

      hrtc->Instance->WUTR = RTC_WUTR_WUT;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d726:	615a      	str	r2, [r3, #20]
      hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a1e      	ldr	r2, [pc, #120]	; (800d7a8 <HAL_RTC_DeInit+0xe4>)
 800d72e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->ALRMAR = 0x00000000U;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2200      	movs	r2, #0
 800d736:	61da      	str	r2, [r3, #28]
      hrtc->Instance->ALRMBR = 0x00000000U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2200      	movs	r2, #0
 800d73e:	621a      	str	r2, [r3, #32]
      hrtc->Instance->SHIFTR = 0x00000000U;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2200      	movs	r2, #0
 800d746:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->Instance->CALR = 0x00000000U;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2200      	movs	r2, #0
 800d74e:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Instance->ALRMASSR = 0x00000000U;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2200      	movs	r2, #0
 800d756:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Instance->ALRMBSSR = 0x00000000U;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2200      	movs	r2, #0
 800d75e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Exit initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fa49 	bl	800dbf8 <RTC_ExitInitMode>
 800d766:	4603      	mov	r3, r0
 800d768:	73fb      	strb	r3, [r7, #15]


      if (status == HAL_OK)
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d116      	bne.n	800d79e <HAL_RTC_DeInit+0xda>
        /* Reset TAMP registers */
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR1 = 0xFFFF0000U;
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR2 = 0x00000000U;
#else
        /* Reset Tamper configuration register */
        hrtc->Instance->TAMPCR = 0x00000000U;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2200      	movs	r2, #0
 800d776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Reset Option register */
        hrtc->Instance->OR = 0x00000000U;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2200      	movs	r2, #0
 800d77e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	22ff      	movs	r2, #255	; 0xff
 800d786:	625a      	str	r2, [r3, #36]	; 0x24

        /* DeInit the low level hardware: CLOCK, NVIC.*/
        hrtc->MspDeInitCallback(hrtc);
#else
        /* De-Initialize RTC MSP */
        HAL_RTC_MspDeInit(hrtc);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7f9 fc45 	bl	8007018 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

        hrtc->State = HAL_RTC_STATE_RESET;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Release Lock */
        __HAL_UNLOCK(hrtc);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2020 	strb.w	r2, [r3, #32]
      }
    }
  }

  return status;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	007f00ff 	.word	0x007f00ff

0800d7ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d7ac:	b590      	push	{r4, r7, lr}
 800d7ae:	b087      	sub	sp, #28
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d101      	bne.n	800d7c6 <HAL_RTC_SetTime+0x1a>
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	e08b      	b.n	800d8de <HAL_RTC_SetTime+0x132>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2202      	movs	r2, #2
 800d7d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	22ca      	movs	r2, #202	; 0xca
 800d7dc:	625a      	str	r2, [r3, #36]	; 0x24
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2253      	movs	r2, #83	; 0x53
 800d7e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f000 f9d3 	bl	800db92 <RTC_EnterInitMode>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d7f0:	7cfb      	ldrb	r3, [r7, #19]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d163      	bne.n	800d8be <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d126      	bne.n	800d84a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2200      	movs	r2, #0
 800d80e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	4618      	mov	r0, r3
 800d816:	f000 fa2d 	bl	800dc74 <RTC_ByteToBcd2>
 800d81a:	4603      	mov	r3, r0
 800d81c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	785b      	ldrb	r3, [r3, #1]
 800d822:	4618      	mov	r0, r3
 800d824:	f000 fa26 	bl	800dc74 <RTC_ByteToBcd2>
 800d828:	4603      	mov	r3, r0
 800d82a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d82c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	789b      	ldrb	r3, [r3, #2]
 800d832:	4618      	mov	r0, r3
 800d834:	f000 fa1e 	bl	800dc74 <RTC_ByteToBcd2>
 800d838:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d83a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	78db      	ldrb	r3, [r3, #3]
 800d842:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d844:	4313      	orrs	r3, r2
 800d846:	617b      	str	r3, [r7, #20]
 800d848:	e018      	b.n	800d87c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d854:	2b00      	cmp	r3, #0
 800d856:	d102      	bne.n	800d85e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	2200      	movs	r2, #0
 800d85c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	785b      	ldrb	r3, [r3, #1]
 800d868:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d86a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d870:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	78db      	ldrb	r3, [r3, #3]
 800d876:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d878:	4313      	orrs	r3, r2
 800d87a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d886:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d88a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	689a      	ldr	r2, [r3, #8]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d89a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6899      	ldr	r1, [r3, #8]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	68da      	ldr	r2, [r3, #12]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	431a      	orrs	r2, r3
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	430a      	orrs	r2, r1
 800d8b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f000 f99f 	bl	800dbf8 <RTC_ExitInitMode>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	22ff      	movs	r2, #255	; 0xff
 800d8c4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d8c6:	7cfb      	ldrb	r3, [r7, #19]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d103      	bne.n	800d8d4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d8dc:	7cfb      	ldrb	r3, [r7, #19]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	371c      	adds	r7, #28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd90      	pop	{r4, r7, pc}

0800d8e6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b086      	sub	sp, #24
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	60f8      	str	r0, [r7, #12]
 800d8ee:	60b9      	str	r1, [r7, #8]
 800d8f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d914:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d918:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	0c1b      	lsrs	r3, r3, #16
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d924:	b2da      	uxtb	r2, r3
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	0a1b      	lsrs	r3, r3, #8
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d934:	b2da      	uxtb	r2, r3
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d942:	b2da      	uxtb	r2, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	0d9b      	lsrs	r3, r3, #22
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	b2da      	uxtb	r2, r3
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d11a      	bne.n	800d994 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	4618      	mov	r0, r3
 800d964:	f000 f9a6 	bl	800dcb4 <RTC_Bcd2ToByte>
 800d968:	4603      	mov	r3, r0
 800d96a:	461a      	mov	r2, r3
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	785b      	ldrb	r3, [r3, #1]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 f99d 	bl	800dcb4 <RTC_Bcd2ToByte>
 800d97a:	4603      	mov	r3, r0
 800d97c:	461a      	mov	r2, r3
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	789b      	ldrb	r3, [r3, #2]
 800d986:	4618      	mov	r0, r3
 800d988:	f000 f994 	bl	800dcb4 <RTC_Bcd2ToByte>
 800d98c:	4603      	mov	r3, r0
 800d98e:	461a      	mov	r2, r3
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d99e:	b590      	push	{r4, r7, lr}
 800d9a0:	b087      	sub	sp, #28
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	60f8      	str	r0, [r7, #12]
 800d9a6:	60b9      	str	r1, [r7, #8]
 800d9a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d101      	bne.n	800d9b8 <HAL_RTC_SetDate+0x1a>
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	e075      	b.n	800daa4 <HAL_RTC_SetDate+0x106>
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10e      	bne.n	800d9ec <HAL_RTC_SetDate+0x4e>
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	785b      	ldrb	r3, [r3, #1]
 800d9d2:	f003 0310 	and.w	r3, r3, #16
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d008      	beq.n	800d9ec <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	785b      	ldrb	r3, [r3, #1]
 800d9de:	f023 0310 	bic.w	r3, r3, #16
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	330a      	adds	r3, #10
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d11c      	bne.n	800da2c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	78db      	ldrb	r3, [r3, #3]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 f93c 	bl	800dc74 <RTC_ByteToBcd2>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	785b      	ldrb	r3, [r3, #1]
 800da04:	4618      	mov	r0, r3
 800da06:	f000 f935 	bl	800dc74 <RTC_ByteToBcd2>
 800da0a:	4603      	mov	r3, r0
 800da0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800da0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	789b      	ldrb	r3, [r3, #2]
 800da14:	4618      	mov	r0, r3
 800da16:	f000 f92d 	bl	800dc74 <RTC_ByteToBcd2>
 800da1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800da26:	4313      	orrs	r3, r2
 800da28:	617b      	str	r3, [r7, #20]
 800da2a:	e00e      	b.n	800da4a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	78db      	ldrb	r3, [r3, #3]
 800da30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	785b      	ldrb	r3, [r3, #1]
 800da36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800da38:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800da3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800da46:	4313      	orrs	r3, r2
 800da48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	22ca      	movs	r2, #202	; 0xca
 800da50:	625a      	str	r2, [r3, #36]	; 0x24
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2253      	movs	r2, #83	; 0x53
 800da58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 f899 	bl	800db92 <RTC_EnterInitMode>
 800da60:	4603      	mov	r3, r0
 800da62:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da64:	7cfb      	ldrb	r3, [r7, #19]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10c      	bne.n	800da84 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f000 f8bc 	bl	800dbf8 <RTC_ExitInitMode>
 800da80:	4603      	mov	r3, r0
 800da82:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	22ff      	movs	r2, #255	; 0xff
 800da8a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da8c:	7cfb      	ldrb	r3, [r7, #19]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d103      	bne.n	800da9a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800daa2:	7cfb      	ldrb	r3, [r7, #19]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	371c      	adds	r7, #28
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd90      	pop	{r4, r7, pc}

0800daac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dac2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dac6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	0c1b      	lsrs	r3, r3, #16
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	0a1b      	lsrs	r3, r3, #8
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	f003 031f 	and.w	r3, r3, #31
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daea:	b2da      	uxtb	r2, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	0b5b      	lsrs	r3, r3, #13
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	f003 0307 	and.w	r3, r3, #7
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d11a      	bne.n	800db3c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	78db      	ldrb	r3, [r3, #3]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 f8d2 	bl	800dcb4 <RTC_Bcd2ToByte>
 800db10:	4603      	mov	r3, r0
 800db12:	461a      	mov	r2, r3
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	785b      	ldrb	r3, [r3, #1]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f000 f8c9 	bl	800dcb4 <RTC_Bcd2ToByte>
 800db22:	4603      	mov	r3, r0
 800db24:	461a      	mov	r2, r3
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	789b      	ldrb	r3, [r3, #2]
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 f8c0 	bl	800dcb4 <RTC_Bcd2ToByte>
 800db34:	4603      	mov	r3, r0
 800db36:	461a      	mov	r2, r3
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3718      	adds	r7, #24
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68da      	ldr	r2, [r3, #12]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800db5c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800db5e:	f7fa f889 	bl	8007c74 <HAL_GetTick>
 800db62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db64:	e009      	b.n	800db7a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db66:	f7fa f885 	bl	8007c74 <HAL_GetTick>
 800db6a:	4602      	mov	r2, r0
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db74:	d901      	bls.n	800db7a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	e007      	b.n	800db8a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	f003 0320 	and.w	r3, r3, #32
 800db84:	2b00      	cmp	r3, #0
 800db86:	d0ee      	beq.n	800db66 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d120      	bne.n	800dbee <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dbb6:	f7fa f85d 	bl	8007c74 <HAL_GetTick>
 800dbba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dbbc:	e00d      	b.n	800dbda <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dbbe:	f7fa f859 	bl	8007c74 <HAL_GetTick>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbcc:	d905      	bls.n	800dbda <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2203      	movs	r2, #3
 800dbd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d102      	bne.n	800dbee <RTC_EnterInitMode+0x5c>
 800dbe8:	7bfb      	ldrb	r3, [r7, #15]
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d1e7      	bne.n	800dbbe <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800dbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dc04:	4b1a      	ldr	r3, [pc, #104]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	4a19      	ldr	r2, [pc, #100]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc0e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dc10:	4b17      	ldr	r3, [pc, #92]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	f003 0320 	and.w	r3, r3, #32
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10c      	bne.n	800dc36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ff92 	bl	800db46 <HAL_RTC_WaitForSynchro>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01e      	beq.n	800dc66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2203      	movs	r2, #3
 800dc2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dc30:	2303      	movs	r3, #3
 800dc32:	73fb      	strb	r3, [r7, #15]
 800dc34:	e017      	b.n	800dc66 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc36:	4b0e      	ldr	r3, [pc, #56]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	4a0d      	ldr	r2, [pc, #52]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc3c:	f023 0320 	bic.w	r3, r3, #32
 800dc40:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7ff ff7f 	bl	800db46 <HAL_RTC_WaitForSynchro>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2203      	movs	r2, #3
 800dc52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dc56:	2303      	movs	r3, #3
 800dc58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc5a:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	4a04      	ldr	r2, [pc, #16]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc60:	f043 0320 	orr.w	r3, r3, #32
 800dc64:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	40002800 	.word	0x40002800

0800dc74 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800dc82:	79fb      	ldrb	r3, [r7, #7]
 800dc84:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800dc86:	e005      	b.n	800dc94 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800dc8e:	7afb      	ldrb	r3, [r7, #11]
 800dc90:	3b0a      	subs	r3, #10
 800dc92:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800dc94:	7afb      	ldrb	r3, [r7, #11]
 800dc96:	2b09      	cmp	r3, #9
 800dc98:	d8f6      	bhi.n	800dc88 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	011b      	lsls	r3, r3, #4
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	7afb      	ldrb	r3, [r7, #11]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	b2db      	uxtb	r3, r3
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3714      	adds	r7, #20
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	091b      	lsrs	r3, r3, #4
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	0092      	lsls	r2, r2, #2
 800dcc8:	4413      	add	r3, r2
 800dcca:	005b      	lsls	r3, r3, #1
 800dccc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	f003 030f 	and.w	r3, r3, #15
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	4413      	add	r3, r2
 800dcda:	b2db      	uxtb	r3, r3
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3714      	adds	r7, #20
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d101      	bne.n	800dcfe <HAL_RTCEx_EnableBypassShadow+0x16>
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	e024      	b.n	800dd48 <HAL_RTCEx_EnableBypassShadow+0x60>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2202      	movs	r2, #2
 800dd0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	22ca      	movs	r2, #202	; 0xca
 800dd14:	625a      	str	r2, [r3, #36]	; 0x24
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2253      	movs	r2, #83	; 0x53
 800dd1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	689a      	ldr	r2, [r3, #8]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f042 0220 	orr.w	r2, r2, #32
 800dd2c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	22ff      	movs	r2, #255	; 0xff
 800dd34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dd46:	2300      	movs	r3, #0
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d101      	bne.n	800dd66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	e095      	b.n	800de92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d108      	bne.n	800dd80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd76:	d009      	beq.n	800dd8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	61da      	str	r2, [r3, #28]
 800dd7e:	e005      	b.n	800dd8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d106      	bne.n	800ddac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7f9 f952 	bl	8007050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2202      	movs	r2, #2
 800ddb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ddcc:	d902      	bls.n	800ddd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
 800ddd2:	e002      	b.n	800ddda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ddd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dde2:	d007      	beq.n	800ddf4 <HAL_SPI_Init+0xa0>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ddec:	d002      	beq.n	800ddf4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800de04:	431a      	orrs	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	f003 0302 	and.w	r3, r3, #2
 800de0e:	431a      	orrs	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	695b      	ldr	r3, [r3, #20]
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	431a      	orrs	r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de22:	431a      	orrs	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	69db      	ldr	r3, [r3, #28]
 800de28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de2c:	431a      	orrs	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a1b      	ldr	r3, [r3, #32]
 800de32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de36:	ea42 0103 	orr.w	r1, r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	430a      	orrs	r2, r1
 800de48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	0c1b      	lsrs	r3, r3, #16
 800de50:	f003 0204 	and.w	r2, r3, #4
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de58:	f003 0310 	and.w	r3, r3, #16
 800de5c:	431a      	orrs	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de62:	f003 0308 	and.w	r3, r3, #8
 800de66:	431a      	orrs	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800de70:	ea42 0103 	orr.w	r1, r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	430a      	orrs	r2, r1
 800de80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b088      	sub	sp, #32
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	603b      	str	r3, [r7, #0]
 800dea6:	4613      	mov	r3, r2
 800dea8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d101      	bne.n	800debc <HAL_SPI_Transmit+0x22>
 800deb8:	2302      	movs	r3, #2
 800deba:	e158      	b.n	800e16e <HAL_SPI_Transmit+0x2d4>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dec4:	f7f9 fed6 	bl	8007c74 <HAL_GetTick>
 800dec8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800deca:	88fb      	ldrh	r3, [r7, #6]
 800decc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d002      	beq.n	800dee0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800deda:	2302      	movs	r3, #2
 800dedc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dede:	e13d      	b.n	800e15c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d002      	beq.n	800deec <HAL_SPI_Transmit+0x52>
 800dee6:	88fb      	ldrh	r3, [r7, #6]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800deec:	2301      	movs	r3, #1
 800deee:	77fb      	strb	r3, [r7, #31]
    goto error;
 800def0:	e134      	b.n	800e15c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2203      	movs	r2, #3
 800def6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	88fa      	ldrh	r2, [r7, #6]
 800df0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	88fa      	ldrh	r2, [r7, #6]
 800df10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df3c:	d10f      	bne.n	800df5e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df68:	2b40      	cmp	r3, #64	; 0x40
 800df6a:	d007      	beq.n	800df7c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df84:	d94b      	bls.n	800e01e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <HAL_SPI_Transmit+0xfa>
 800df8e:	8afb      	ldrh	r3, [r7, #22]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d13e      	bne.n	800e012 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df98:	881a      	ldrh	r2, [r3, #0]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa4:	1c9a      	adds	r2, r3, #2
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dfb8:	e02b      	b.n	800e012 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	f003 0302 	and.w	r3, r3, #2
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d112      	bne.n	800dfee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfcc:	881a      	ldrh	r2, [r3, #0]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd8:	1c9a      	adds	r2, r3, #2
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfec:	e011      	b.n	800e012 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfee:	f7f9 fe41 	bl	8007c74 <HAL_GetTick>
 800dff2:	4602      	mov	r2, r0
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d803      	bhi.n	800e006 <HAL_SPI_Transmit+0x16c>
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e004:	d102      	bne.n	800e00c <HAL_SPI_Transmit+0x172>
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d102      	bne.n	800e012 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800e00c:	2303      	movs	r3, #3
 800e00e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e010:	e0a4      	b.n	800e15c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e016:	b29b      	uxth	r3, r3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1ce      	bne.n	800dfba <HAL_SPI_Transmit+0x120>
 800e01c:	e07c      	b.n	800e118 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <HAL_SPI_Transmit+0x192>
 800e026:	8afb      	ldrh	r3, [r7, #22]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d170      	bne.n	800e10e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e030:	b29b      	uxth	r3, r3
 800e032:	2b01      	cmp	r3, #1
 800e034:	d912      	bls.n	800e05c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e03a:	881a      	ldrh	r2, [r3, #0]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e046:	1c9a      	adds	r2, r3, #2
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e050:	b29b      	uxth	r3, r3
 800e052:	3b02      	subs	r3, #2
 800e054:	b29a      	uxth	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e05a:	e058      	b.n	800e10e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	330c      	adds	r3, #12
 800e066:	7812      	ldrb	r2, [r2, #0]
 800e068:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06e:	1c5a      	adds	r2, r3, #1
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e078:	b29b      	uxth	r3, r3
 800e07a:	3b01      	subs	r3, #1
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e082:	e044      	b.n	800e10e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f003 0302 	and.w	r3, r3, #2
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d12b      	bne.n	800e0ea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e096:	b29b      	uxth	r3, r3
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d912      	bls.n	800e0c2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a0:	881a      	ldrh	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ac:	1c9a      	adds	r2, r3, #2
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	3b02      	subs	r3, #2
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e0c0:	e025      	b.n	800e10e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	330c      	adds	r3, #12
 800e0cc:	7812      	ldrb	r2, [r2, #0]
 800e0ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d4:	1c5a      	adds	r2, r3, #1
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e0e8:	e011      	b.n	800e10e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0ea:	f7f9 fdc3 	bl	8007c74 <HAL_GetTick>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d803      	bhi.n	800e102 <HAL_SPI_Transmit+0x268>
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e100:	d102      	bne.n	800e108 <HAL_SPI_Transmit+0x26e>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d102      	bne.n	800e10e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e108:	2303      	movs	r3, #3
 800e10a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e10c:	e026      	b.n	800e15c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e112:	b29b      	uxth	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1b5      	bne.n	800e084 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e118:	69ba      	ldr	r2, [r7, #24]
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f000 fcdf 	bl	800eae0 <SPI_EndRxTxTransaction>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2220      	movs	r2, #32
 800e12c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10a      	bne.n	800e14c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e136:	2300      	movs	r3, #0
 800e138:	613b      	str	r3, [r7, #16]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	613b      	str	r3, [r7, #16]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	613b      	str	r3, [r7, #16]
 800e14a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e150:	2b00      	cmp	r3, #0
 800e152:	d002      	beq.n	800e15a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e154:	2301      	movs	r3, #1
 800e156:	77fb      	strb	r3, [r7, #31]
 800e158:	e000      	b.n	800e15c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e15a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e16c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b088      	sub	sp, #32
 800e17a:	af02      	add	r7, sp, #8
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	603b      	str	r3, [r7, #0]
 800e182:	4613      	mov	r3, r2
 800e184:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e192:	d112      	bne.n	800e1ba <HAL_SPI_Receive+0x44>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10e      	bne.n	800e1ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2204      	movs	r2, #4
 800e1a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e1a4:	88fa      	ldrh	r2, [r7, #6]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	68b9      	ldr	r1, [r7, #8]
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f000 f910 	bl	800e3d6 <HAL_SPI_TransmitReceive>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	e109      	b.n	800e3ce <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d101      	bne.n	800e1c8 <HAL_SPI_Receive+0x52>
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	e102      	b.n	800e3ce <HAL_SPI_Receive+0x258>
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1d0:	f7f9 fd50 	bl	8007c74 <HAL_GetTick>
 800e1d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d002      	beq.n	800e1e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1e6:	e0e9      	b.n	800e3bc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <HAL_SPI_Receive+0x7e>
 800e1ee:	88fb      	ldrh	r3, [r7, #6]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d102      	bne.n	800e1fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1f8:	e0e0      	b.n	800e3bc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2204      	movs	r2, #4
 800e1fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	68ba      	ldr	r2, [r7, #8]
 800e20c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	88fa      	ldrh	r2, [r7, #6]
 800e212:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	88fa      	ldrh	r2, [r7, #6]
 800e21a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2200      	movs	r2, #0
 800e222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2200      	movs	r2, #0
 800e228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2200      	movs	r2, #0
 800e22e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2200      	movs	r2, #0
 800e23a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e244:	d908      	bls.n	800e258 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	685a      	ldr	r2, [r3, #4]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e254:	605a      	str	r2, [r3, #4]
 800e256:	e007      	b.n	800e268 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e266:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e270:	d10f      	bne.n	800e292 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e280:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e290:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e29c:	2b40      	cmp	r3, #64	; 0x40
 800e29e:	d007      	beq.n	800e2b0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2b8:	d867      	bhi.n	800e38a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e2ba:	e030      	b.n	800e31e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	f003 0301 	and.w	r3, r3, #1
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d117      	bne.n	800e2fa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f103 020c 	add.w	r2, r3, #12
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d6:	7812      	ldrb	r2, [r2, #0]
 800e2d8:	b2d2      	uxtb	r2, r2
 800e2da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e0:	1c5a      	adds	r2, r3, #1
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e2f8:	e011      	b.n	800e31e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2fa:	f7f9 fcbb 	bl	8007c74 <HAL_GetTick>
 800e2fe:	4602      	mov	r2, r0
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	429a      	cmp	r2, r3
 800e308:	d803      	bhi.n	800e312 <HAL_SPI_Receive+0x19c>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e310:	d102      	bne.n	800e318 <HAL_SPI_Receive+0x1a2>
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d102      	bne.n	800e31e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e318:	2303      	movs	r3, #3
 800e31a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e31c:	e04e      	b.n	800e3bc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e324:	b29b      	uxth	r3, r3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1c8      	bne.n	800e2bc <HAL_SPI_Receive+0x146>
 800e32a:	e034      	b.n	800e396 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	f003 0301 	and.w	r3, r3, #1
 800e336:	2b01      	cmp	r3, #1
 800e338:	d115      	bne.n	800e366 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	68da      	ldr	r2, [r3, #12]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e344:	b292      	uxth	r2, r2
 800e346:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e34c:	1c9a      	adds	r2, r3, #2
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e358:	b29b      	uxth	r3, r3
 800e35a:	3b01      	subs	r3, #1
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e364:	e011      	b.n	800e38a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e366:	f7f9 fc85 	bl	8007c74 <HAL_GetTick>
 800e36a:	4602      	mov	r2, r0
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	1ad3      	subs	r3, r2, r3
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	429a      	cmp	r2, r3
 800e374:	d803      	bhi.n	800e37e <HAL_SPI_Receive+0x208>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e37c:	d102      	bne.n	800e384 <HAL_SPI_Receive+0x20e>
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e384:	2303      	movs	r3, #3
 800e386:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e388:	e018      	b.n	800e3bc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e390:	b29b      	uxth	r3, r3
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1ca      	bne.n	800e32c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e396:	693a      	ldr	r2, [r7, #16]
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f000 fb48 	bl	800ea30 <SPI_EndRxTransaction>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d002      	beq.n	800e3ac <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2220      	movs	r2, #32
 800e3aa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d002      	beq.n	800e3ba <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	75fb      	strb	r3, [r7, #23]
 800e3b8:	e000      	b.n	800e3bc <HAL_SPI_Receive+0x246>
  }

error :
 800e3ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3718      	adds	r7, #24
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b08a      	sub	sp, #40	; 0x28
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	607a      	str	r2, [r7, #4]
 800e3e2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d101      	bne.n	800e3fc <HAL_SPI_TransmitReceive+0x26>
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	e1fb      	b.n	800e7f4 <HAL_SPI_TransmitReceive+0x41e>
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e404:	f7f9 fc36 	bl	8007c74 <HAL_GetTick>
 800e408:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e410:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e418:	887b      	ldrh	r3, [r7, #2]
 800e41a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e41c:	887b      	ldrh	r3, [r7, #2]
 800e41e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e420:	7efb      	ldrb	r3, [r7, #27]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d00e      	beq.n	800e444 <HAL_SPI_TransmitReceive+0x6e>
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e42c:	d106      	bne.n	800e43c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d102      	bne.n	800e43c <HAL_SPI_TransmitReceive+0x66>
 800e436:	7efb      	ldrb	r3, [r7, #27]
 800e438:	2b04      	cmp	r3, #4
 800e43a:	d003      	beq.n	800e444 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e43c:	2302      	movs	r3, #2
 800e43e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e442:	e1cd      	b.n	800e7e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d005      	beq.n	800e456 <HAL_SPI_TransmitReceive+0x80>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d002      	beq.n	800e456 <HAL_SPI_TransmitReceive+0x80>
 800e450:	887b      	ldrh	r3, [r7, #2]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d103      	bne.n	800e45e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e45c:	e1c0      	b.n	800e7e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e464:	b2db      	uxtb	r3, r3
 800e466:	2b04      	cmp	r3, #4
 800e468:	d003      	beq.n	800e472 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2205      	movs	r2, #5
 800e46e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	887a      	ldrh	r2, [r7, #2]
 800e482:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	887a      	ldrh	r2, [r7, #2]
 800e48a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	887a      	ldrh	r2, [r7, #2]
 800e498:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	887a      	ldrh	r2, [r7, #2]
 800e49e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e4b4:	d802      	bhi.n	800e4bc <HAL_SPI_TransmitReceive+0xe6>
 800e4b6:	8a3b      	ldrh	r3, [r7, #16]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d908      	bls.n	800e4ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	685a      	ldr	r2, [r3, #4]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e4ca:	605a      	str	r2, [r3, #4]
 800e4cc:	e007      	b.n	800e4de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	685a      	ldr	r2, [r3, #4]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4e8:	2b40      	cmp	r3, #64	; 0x40
 800e4ea:	d007      	beq.n	800e4fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e504:	d97c      	bls.n	800e600 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <HAL_SPI_TransmitReceive+0x13e>
 800e50e:	8a7b      	ldrh	r3, [r7, #18]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d169      	bne.n	800e5e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e518:	881a      	ldrh	r2, [r3, #0]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e524:	1c9a      	adds	r2, r3, #2
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e52e:	b29b      	uxth	r3, r3
 800e530:	3b01      	subs	r3, #1
 800e532:	b29a      	uxth	r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e538:	e056      	b.n	800e5e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	f003 0302 	and.w	r3, r3, #2
 800e544:	2b02      	cmp	r3, #2
 800e546:	d11b      	bne.n	800e580 <HAL_SPI_TransmitReceive+0x1aa>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d016      	beq.n	800e580 <HAL_SPI_TransmitReceive+0x1aa>
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	2b01      	cmp	r3, #1
 800e556:	d113      	bne.n	800e580 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e55c:	881a      	ldrh	r2, [r3, #0]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e568:	1c9a      	adds	r2, r3, #2
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e572:	b29b      	uxth	r3, r3
 800e574:	3b01      	subs	r3, #1
 800e576:	b29a      	uxth	r2, r3
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e57c:	2300      	movs	r3, #0
 800e57e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	f003 0301 	and.w	r3, r3, #1
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d11c      	bne.n	800e5c8 <HAL_SPI_TransmitReceive+0x1f2>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e594:	b29b      	uxth	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d016      	beq.n	800e5c8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68da      	ldr	r2, [r3, #12]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a4:	b292      	uxth	r2, r2
 800e5a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ac:	1c9a      	adds	r2, r3, #2
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e5c8:	f7f9 fb54 	bl	8007c74 <HAL_GetTick>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d807      	bhi.n	800e5e8 <HAL_SPI_TransmitReceive+0x212>
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5de:	d003      	beq.n	800e5e8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e5e0:	2303      	movs	r3, #3
 800e5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e5e6:	e0fb      	b.n	800e7e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1a3      	bne.n	800e53a <HAL_SPI_TransmitReceive+0x164>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d19d      	bne.n	800e53a <HAL_SPI_TransmitReceive+0x164>
 800e5fe:	e0df      	b.n	800e7c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d003      	beq.n	800e610 <HAL_SPI_TransmitReceive+0x23a>
 800e608:	8a7b      	ldrh	r3, [r7, #18]
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	f040 80cb 	bne.w	800e7a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e614:	b29b      	uxth	r3, r3
 800e616:	2b01      	cmp	r3, #1
 800e618:	d912      	bls.n	800e640 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61e:	881a      	ldrh	r2, [r3, #0]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e62a:	1c9a      	adds	r2, r3, #2
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e634:	b29b      	uxth	r3, r3
 800e636:	3b02      	subs	r3, #2
 800e638:	b29a      	uxth	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e63e:	e0b2      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	330c      	adds	r3, #12
 800e64a:	7812      	ldrb	r2, [r2, #0]
 800e64c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	3b01      	subs	r3, #1
 800e660:	b29a      	uxth	r2, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e666:	e09e      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	f003 0302 	and.w	r3, r3, #2
 800e672:	2b02      	cmp	r3, #2
 800e674:	d134      	bne.n	800e6e0 <HAL_SPI_TransmitReceive+0x30a>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d02f      	beq.n	800e6e0 <HAL_SPI_TransmitReceive+0x30a>
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	2b01      	cmp	r3, #1
 800e684:	d12c      	bne.n	800e6e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d912      	bls.n	800e6b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e694:	881a      	ldrh	r2, [r3, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a0:	1c9a      	adds	r2, r3, #2
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	3b02      	subs	r3, #2
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e6b4:	e012      	b.n	800e6dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	330c      	adds	r3, #12
 800e6c0:	7812      	ldrb	r2, [r2, #0]
 800e6c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c8:	1c5a      	adds	r2, r3, #1
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	3b01      	subs	r3, #1
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d148      	bne.n	800e780 <HAL_SPI_TransmitReceive+0x3aa>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d042      	beq.n	800e780 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e700:	b29b      	uxth	r3, r3
 800e702:	2b01      	cmp	r3, #1
 800e704:	d923      	bls.n	800e74e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	68da      	ldr	r2, [r3, #12]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e710:	b292      	uxth	r2, r2
 800e712:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e718:	1c9a      	adds	r2, r3, #2
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e724:	b29b      	uxth	r3, r3
 800e726:	3b02      	subs	r3, #2
 800e728:	b29a      	uxth	r2, r3
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e736:	b29b      	uxth	r3, r3
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d81f      	bhi.n	800e77c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	685a      	ldr	r2, [r3, #4]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e74a:	605a      	str	r2, [r3, #4]
 800e74c:	e016      	b.n	800e77c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f103 020c 	add.w	r2, r3, #12
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75a:	7812      	ldrb	r2, [r2, #0]
 800e75c:	b2d2      	uxtb	r2, r2
 800e75e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e770:	b29b      	uxth	r3, r3
 800e772:	3b01      	subs	r3, #1
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e77c:	2301      	movs	r3, #1
 800e77e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e780:	f7f9 fa78 	bl	8007c74 <HAL_GetTick>
 800e784:	4602      	mov	r2, r0
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d803      	bhi.n	800e798 <HAL_SPI_TransmitReceive+0x3c2>
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e796:	d102      	bne.n	800e79e <HAL_SPI_TransmitReceive+0x3c8>
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d103      	bne.n	800e7a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e7a4:	e01c      	b.n	800e7e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f47f af5b 	bne.w	800e668 <HAL_SPI_TransmitReceive+0x292>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f47f af54 	bne.w	800e668 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7c0:	69fa      	ldr	r2, [r7, #28]
 800e7c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f000 f98b 	bl	800eae0 <SPI_EndRxTxTransaction>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d006      	beq.n	800e7de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2220      	movs	r2, #32
 800e7da:	661a      	str	r2, [r3, #96]	; 0x60
 800e7dc:	e000      	b.n	800e7e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e7de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e7f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3728      	adds	r7, #40	; 0x28
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b088      	sub	sp, #32
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	603b      	str	r3, [r7, #0]
 800e808:	4613      	mov	r3, r2
 800e80a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e80c:	f7f9 fa32 	bl	8007c74 <HAL_GetTick>
 800e810:	4602      	mov	r2, r0
 800e812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e814:	1a9b      	subs	r3, r3, r2
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	4413      	add	r3, r2
 800e81a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e81c:	f7f9 fa2a 	bl	8007c74 <HAL_GetTick>
 800e820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e822:	4b39      	ldr	r3, [pc, #228]	; (800e908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	015b      	lsls	r3, r3, #5
 800e828:	0d1b      	lsrs	r3, r3, #20
 800e82a:	69fa      	ldr	r2, [r7, #28]
 800e82c:	fb02 f303 	mul.w	r3, r2, r3
 800e830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e832:	e054      	b.n	800e8de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83a:	d050      	beq.n	800e8de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e83c:	f7f9 fa1a 	bl	8007c74 <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	69fa      	ldr	r2, [r7, #28]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d902      	bls.n	800e852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d13d      	bne.n	800e8ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	685a      	ldr	r2, [r3, #4]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e86a:	d111      	bne.n	800e890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e874:	d004      	beq.n	800e880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	689b      	ldr	r3, [r3, #8]
 800e87a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e87e:	d107      	bne.n	800e890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e88e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e898:	d10f      	bne.n	800e8ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e8a8:	601a      	str	r2, [r3, #0]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	e017      	b.n	800e8fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d101      	bne.n	800e8d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689a      	ldr	r2, [r3, #8]
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	4013      	ands	r3, r2
 800e8e8:	68ba      	ldr	r2, [r7, #8]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	bf0c      	ite	eq
 800e8ee:	2301      	moveq	r3, #1
 800e8f0:	2300      	movne	r3, #0
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	79fb      	ldrb	r3, [r7, #7]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d19b      	bne.n	800e834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3720      	adds	r7, #32
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	20000318 	.word	0x20000318

0800e90c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b088      	sub	sp, #32
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e91a:	f7f9 f9ab 	bl	8007c74 <HAL_GetTick>
 800e91e:	4602      	mov	r2, r0
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	1a9b      	subs	r3, r3, r2
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	4413      	add	r3, r2
 800e928:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e92a:	f7f9 f9a3 	bl	8007c74 <HAL_GetTick>
 800e92e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e930:	4b3e      	ldr	r3, [pc, #248]	; (800ea2c <SPI_WaitFifoStateUntilTimeout+0x120>)
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	4613      	mov	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	00da      	lsls	r2, r3, #3
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	0d1b      	lsrs	r3, r3, #20
 800e940:	69fa      	ldr	r2, [r7, #28]
 800e942:	fb02 f303 	mul.w	r3, r2, r3
 800e946:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800e948:	e062      	b.n	800ea10 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e950:	d109      	bne.n	800e966 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d106      	bne.n	800e966 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	330c      	adds	r3, #12
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	b2db      	uxtb	r3, r3
 800e962:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800e964:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96c:	d050      	beq.n	800ea10 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e96e:	f7f9 f981 	bl	8007c74 <HAL_GetTick>
 800e972:	4602      	mov	r2, r0
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	69fa      	ldr	r2, [r7, #28]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d902      	bls.n	800e984 <SPI_WaitFifoStateUntilTimeout+0x78>
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d13d      	bne.n	800ea00 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	685a      	ldr	r2, [r3, #4]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e992:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e99c:	d111      	bne.n	800e9c2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9a6:	d004      	beq.n	800e9b2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9b0:	d107      	bne.n	800e9c2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9ca:	d10f      	bne.n	800e9ec <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e9da:	601a      	str	r2, [r3, #0]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e9ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e9fc:	2303      	movs	r3, #3
 800e9fe:	e010      	b.n	800ea22 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800ea06:	2300      	movs	r3, #0
 800ea08:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	689a      	ldr	r2, [r3, #8]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	4013      	ands	r3, r2
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d194      	bne.n	800e94a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3720      	adds	r7, #32
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20000318 	.word	0x20000318

0800ea30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af02      	add	r7, sp, #8
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea44:	d111      	bne.n	800ea6a <SPI_EndRxTransaction+0x3a>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea4e:	d004      	beq.n	800ea5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea58:	d107      	bne.n	800ea6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2200      	movs	r2, #0
 800ea72:	2180      	movs	r1, #128	; 0x80
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	f7ff fec1 	bl	800e7fc <SPI_WaitFlagStateUntilTimeout>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d007      	beq.n	800ea90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea84:	f043 0220 	orr.w	r2, r3, #32
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea8c:	2303      	movs	r3, #3
 800ea8e:	e023      	b.n	800ead8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea98:	d11d      	bne.n	800ead6 <SPI_EndRxTransaction+0xa6>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaa2:	d004      	beq.n	800eaae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaac:	d113      	bne.n	800ead6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f7ff ff26 	bl	800e90c <SPI_WaitFifoStateUntilTimeout>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d007      	beq.n	800ead6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaca:	f043 0220 	orr.w	r2, r3, #32
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e000      	b.n	800ead8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ead6:	2300      	movs	r3, #0
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af02      	add	r7, sp, #8
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7ff ff07 	bl	800e90c <SPI_WaitFifoStateUntilTimeout>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d007      	beq.n	800eb14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb08:	f043 0220 	orr.w	r2, r3, #32
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb10:	2303      	movs	r3, #3
 800eb12:	e027      	b.n	800eb64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	2180      	movs	r1, #128	; 0x80
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f7ff fe6c 	bl	800e7fc <SPI_WaitFlagStateUntilTimeout>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d007      	beq.n	800eb3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb2e:	f043 0220 	orr.w	r2, r3, #32
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb36:	2303      	movs	r3, #3
 800eb38:	e014      	b.n	800eb64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f7ff fee0 	bl	800e90c <SPI_WaitFifoStateUntilTimeout>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d007      	beq.n	800eb62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb56:	f043 0220 	orr.w	r2, r3, #32
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	e000      	b.n	800eb64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eb62:	2300      	movs	r3, #0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e049      	b.n	800ec12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7f8 fb62 	bl	800725c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3304      	adds	r3, #4
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f000 fcc4 	bl	800f538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
	...

0800ec1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d001      	beq.n	800ec34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
 800ec32:	e047      	b.n	800ecc4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2202      	movs	r2, #2
 800ec38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a23      	ldr	r2, [pc, #140]	; (800ecd0 <HAL_TIM_Base_Start+0xb4>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d01d      	beq.n	800ec82 <HAL_TIM_Base_Start+0x66>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec4e:	d018      	beq.n	800ec82 <HAL_TIM_Base_Start+0x66>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a1f      	ldr	r2, [pc, #124]	; (800ecd4 <HAL_TIM_Base_Start+0xb8>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d013      	beq.n	800ec82 <HAL_TIM_Base_Start+0x66>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4a1e      	ldr	r2, [pc, #120]	; (800ecd8 <HAL_TIM_Base_Start+0xbc>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d00e      	beq.n	800ec82 <HAL_TIM_Base_Start+0x66>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a1c      	ldr	r2, [pc, #112]	; (800ecdc <HAL_TIM_Base_Start+0xc0>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d009      	beq.n	800ec82 <HAL_TIM_Base_Start+0x66>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4a1b      	ldr	r2, [pc, #108]	; (800ece0 <HAL_TIM_Base_Start+0xc4>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d004      	beq.n	800ec82 <HAL_TIM_Base_Start+0x66>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a19      	ldr	r2, [pc, #100]	; (800ece4 <HAL_TIM_Base_Start+0xc8>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d115      	bne.n	800ecae <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	689a      	ldr	r2, [r3, #8]
 800ec88:	4b17      	ldr	r3, [pc, #92]	; (800ece8 <HAL_TIM_Base_Start+0xcc>)
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2b06      	cmp	r3, #6
 800ec92:	d015      	beq.n	800ecc0 <HAL_TIM_Base_Start+0xa4>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec9a:	d011      	beq.n	800ecc0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f042 0201 	orr.w	r2, r2, #1
 800ecaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecac:	e008      	b.n	800ecc0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f042 0201 	orr.w	r2, r2, #1
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	e000      	b.n	800ecc2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3714      	adds	r7, #20
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	40012c00 	.word	0x40012c00
 800ecd4:	40000400 	.word	0x40000400
 800ecd8:	40000800 	.word	0x40000800
 800ecdc:	40000c00 	.word	0x40000c00
 800ece0:	40013400 	.word	0x40013400
 800ece4:	40014000 	.word	0x40014000
 800ece8:	00010007 	.word	0x00010007

0800ecec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d001      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ed00:	2301      	movs	r3, #1
 800ed02:	e04f      	b.n	800eda4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2202      	movs	r2, #2
 800ed08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68da      	ldr	r2, [r3, #12]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f042 0201 	orr.w	r2, r2, #1
 800ed1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a23      	ldr	r2, [pc, #140]	; (800edb0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d01d      	beq.n	800ed62 <HAL_TIM_Base_Start_IT+0x76>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed2e:	d018      	beq.n	800ed62 <HAL_TIM_Base_Start_IT+0x76>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a1f      	ldr	r2, [pc, #124]	; (800edb4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d013      	beq.n	800ed62 <HAL_TIM_Base_Start_IT+0x76>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a1e      	ldr	r2, [pc, #120]	; (800edb8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d00e      	beq.n	800ed62 <HAL_TIM_Base_Start_IT+0x76>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a1c      	ldr	r2, [pc, #112]	; (800edbc <HAL_TIM_Base_Start_IT+0xd0>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d009      	beq.n	800ed62 <HAL_TIM_Base_Start_IT+0x76>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a1b      	ldr	r2, [pc, #108]	; (800edc0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d004      	beq.n	800ed62 <HAL_TIM_Base_Start_IT+0x76>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a19      	ldr	r2, [pc, #100]	; (800edc4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d115      	bne.n	800ed8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	689a      	ldr	r2, [r3, #8]
 800ed68:	4b17      	ldr	r3, [pc, #92]	; (800edc8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2b06      	cmp	r3, #6
 800ed72:	d015      	beq.n	800eda0 <HAL_TIM_Base_Start_IT+0xb4>
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed7a:	d011      	beq.n	800eda0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f042 0201 	orr.w	r2, r2, #1
 800ed8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed8c:	e008      	b.n	800eda0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f042 0201 	orr.w	r2, r2, #1
 800ed9c:	601a      	str	r2, [r3, #0]
 800ed9e:	e000      	b.n	800eda2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eda0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr
 800edb0:	40012c00 	.word	0x40012c00
 800edb4:	40000400 	.word	0x40000400
 800edb8:	40000800 	.word	0x40000800
 800edbc:	40000c00 	.word	0x40000c00
 800edc0:	40013400 	.word	0x40013400
 800edc4:	40014000 	.word	0x40014000
 800edc8:	00010007 	.word	0x00010007

0800edcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d101      	bne.n	800edde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800edda:	2301      	movs	r3, #1
 800eddc:	e049      	b.n	800ee72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d106      	bne.n	800edf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7f8 fa00 	bl	80071f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2202      	movs	r2, #2
 800edfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	3304      	adds	r3, #4
 800ee08:	4619      	mov	r1, r3
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	f000 fb94 	bl	800f538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
	...

0800ee7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d109      	bne.n	800eea0 <HAL_TIM_PWM_Start+0x24>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	bf14      	ite	ne
 800ee98:	2301      	movne	r3, #1
 800ee9a:	2300      	moveq	r3, #0
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	e03c      	b.n	800ef1a <HAL_TIM_PWM_Start+0x9e>
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	2b04      	cmp	r3, #4
 800eea4:	d109      	bne.n	800eeba <HAL_TIM_PWM_Start+0x3e>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	bf14      	ite	ne
 800eeb2:	2301      	movne	r3, #1
 800eeb4:	2300      	moveq	r3, #0
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	e02f      	b.n	800ef1a <HAL_TIM_PWM_Start+0x9e>
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2b08      	cmp	r3, #8
 800eebe:	d109      	bne.n	800eed4 <HAL_TIM_PWM_Start+0x58>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	bf14      	ite	ne
 800eecc:	2301      	movne	r3, #1
 800eece:	2300      	moveq	r3, #0
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	e022      	b.n	800ef1a <HAL_TIM_PWM_Start+0x9e>
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	2b0c      	cmp	r3, #12
 800eed8:	d109      	bne.n	800eeee <HAL_TIM_PWM_Start+0x72>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	bf14      	ite	ne
 800eee6:	2301      	movne	r3, #1
 800eee8:	2300      	moveq	r3, #0
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	e015      	b.n	800ef1a <HAL_TIM_PWM_Start+0x9e>
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	2b10      	cmp	r3, #16
 800eef2:	d109      	bne.n	800ef08 <HAL_TIM_PWM_Start+0x8c>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	bf14      	ite	ne
 800ef00:	2301      	movne	r3, #1
 800ef02:	2300      	moveq	r3, #0
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	e008      	b.n	800ef1a <HAL_TIM_PWM_Start+0x9e>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	bf14      	ite	ne
 800ef14:	2301      	movne	r3, #1
 800ef16:	2300      	moveq	r3, #0
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e09c      	b.n	800f05c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d104      	bne.n	800ef32 <HAL_TIM_PWM_Start+0xb6>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef30:	e023      	b.n	800ef7a <HAL_TIM_PWM_Start+0xfe>
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	2b04      	cmp	r3, #4
 800ef36:	d104      	bne.n	800ef42 <HAL_TIM_PWM_Start+0xc6>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2202      	movs	r2, #2
 800ef3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef40:	e01b      	b.n	800ef7a <HAL_TIM_PWM_Start+0xfe>
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2b08      	cmp	r3, #8
 800ef46:	d104      	bne.n	800ef52 <HAL_TIM_PWM_Start+0xd6>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef50:	e013      	b.n	800ef7a <HAL_TIM_PWM_Start+0xfe>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	2b0c      	cmp	r3, #12
 800ef56:	d104      	bne.n	800ef62 <HAL_TIM_PWM_Start+0xe6>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef60:	e00b      	b.n	800ef7a <HAL_TIM_PWM_Start+0xfe>
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	2b10      	cmp	r3, #16
 800ef66:	d104      	bne.n	800ef72 <HAL_TIM_PWM_Start+0xf6>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef70:	e003      	b.n	800ef7a <HAL_TIM_PWM_Start+0xfe>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2202      	movs	r2, #2
 800ef76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	6839      	ldr	r1, [r7, #0]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 fe48 	bl	800fc18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a35      	ldr	r2, [pc, #212]	; (800f064 <HAL_TIM_PWM_Start+0x1e8>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d013      	beq.n	800efba <HAL_TIM_PWM_Start+0x13e>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a34      	ldr	r2, [pc, #208]	; (800f068 <HAL_TIM_PWM_Start+0x1ec>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d00e      	beq.n	800efba <HAL_TIM_PWM_Start+0x13e>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a32      	ldr	r2, [pc, #200]	; (800f06c <HAL_TIM_PWM_Start+0x1f0>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d009      	beq.n	800efba <HAL_TIM_PWM_Start+0x13e>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a31      	ldr	r2, [pc, #196]	; (800f070 <HAL_TIM_PWM_Start+0x1f4>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d004      	beq.n	800efba <HAL_TIM_PWM_Start+0x13e>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a2f      	ldr	r2, [pc, #188]	; (800f074 <HAL_TIM_PWM_Start+0x1f8>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d101      	bne.n	800efbe <HAL_TIM_PWM_Start+0x142>
 800efba:	2301      	movs	r3, #1
 800efbc:	e000      	b.n	800efc0 <HAL_TIM_PWM_Start+0x144>
 800efbe:	2300      	movs	r3, #0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d007      	beq.n	800efd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800efd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a22      	ldr	r2, [pc, #136]	; (800f064 <HAL_TIM_PWM_Start+0x1e8>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d01d      	beq.n	800f01a <HAL_TIM_PWM_Start+0x19e>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efe6:	d018      	beq.n	800f01a <HAL_TIM_PWM_Start+0x19e>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a22      	ldr	r2, [pc, #136]	; (800f078 <HAL_TIM_PWM_Start+0x1fc>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d013      	beq.n	800f01a <HAL_TIM_PWM_Start+0x19e>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4a21      	ldr	r2, [pc, #132]	; (800f07c <HAL_TIM_PWM_Start+0x200>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d00e      	beq.n	800f01a <HAL_TIM_PWM_Start+0x19e>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a1f      	ldr	r2, [pc, #124]	; (800f080 <HAL_TIM_PWM_Start+0x204>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d009      	beq.n	800f01a <HAL_TIM_PWM_Start+0x19e>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a17      	ldr	r2, [pc, #92]	; (800f068 <HAL_TIM_PWM_Start+0x1ec>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d004      	beq.n	800f01a <HAL_TIM_PWM_Start+0x19e>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a15      	ldr	r2, [pc, #84]	; (800f06c <HAL_TIM_PWM_Start+0x1f0>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d115      	bne.n	800f046 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	689a      	ldr	r2, [r3, #8]
 800f020:	4b18      	ldr	r3, [pc, #96]	; (800f084 <HAL_TIM_PWM_Start+0x208>)
 800f022:	4013      	ands	r3, r2
 800f024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2b06      	cmp	r3, #6
 800f02a:	d015      	beq.n	800f058 <HAL_TIM_PWM_Start+0x1dc>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f032:	d011      	beq.n	800f058 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f042 0201 	orr.w	r2, r2, #1
 800f042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f044:	e008      	b.n	800f058 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f042 0201 	orr.w	r2, r2, #1
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	e000      	b.n	800f05a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	40012c00 	.word	0x40012c00
 800f068:	40013400 	.word	0x40013400
 800f06c:	40014000 	.word	0x40014000
 800f070:	40014400 	.word	0x40014400
 800f074:	40014800 	.word	0x40014800
 800f078:	40000400 	.word	0x40000400
 800f07c:	40000800 	.word	0x40000800
 800f080:	40000c00 	.word	0x40000c00
 800f084:	00010007 	.word	0x00010007

0800f088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	f003 0302 	and.w	r3, r3, #2
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d122      	bne.n	800f0e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	f003 0302 	and.w	r3, r3, #2
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d11b      	bne.n	800f0e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f06f 0202 	mvn.w	r2, #2
 800f0b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	699b      	ldr	r3, [r3, #24]
 800f0c2:	f003 0303 	and.w	r3, r3, #3
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d003      	beq.n	800f0d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 fa16 	bl	800f4fc <HAL_TIM_IC_CaptureCallback>
 800f0d0:	e005      	b.n	800f0de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 fa08 	bl	800f4e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 fa19 	bl	800f510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	f003 0304 	and.w	r3, r3, #4
 800f0ee:	2b04      	cmp	r3, #4
 800f0f0:	d122      	bne.n	800f138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	68db      	ldr	r3, [r3, #12]
 800f0f8:	f003 0304 	and.w	r3, r3, #4
 800f0fc:	2b04      	cmp	r3, #4
 800f0fe:	d11b      	bne.n	800f138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f06f 0204 	mvn.w	r2, #4
 800f108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2202      	movs	r2, #2
 800f10e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	699b      	ldr	r3, [r3, #24]
 800f116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d003      	beq.n	800f126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 f9ec 	bl	800f4fc <HAL_TIM_IC_CaptureCallback>
 800f124:	e005      	b.n	800f132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f9de 	bl	800f4e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 f9ef 	bl	800f510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	f003 0308 	and.w	r3, r3, #8
 800f142:	2b08      	cmp	r3, #8
 800f144:	d122      	bne.n	800f18c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	f003 0308 	and.w	r3, r3, #8
 800f150:	2b08      	cmp	r3, #8
 800f152:	d11b      	bne.n	800f18c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f06f 0208 	mvn.w	r2, #8
 800f15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2204      	movs	r2, #4
 800f162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	69db      	ldr	r3, [r3, #28]
 800f16a:	f003 0303 	and.w	r3, r3, #3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d003      	beq.n	800f17a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 f9c2 	bl	800f4fc <HAL_TIM_IC_CaptureCallback>
 800f178:	e005      	b.n	800f186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f9b4 	bl	800f4e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 f9c5 	bl	800f510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	691b      	ldr	r3, [r3, #16]
 800f192:	f003 0310 	and.w	r3, r3, #16
 800f196:	2b10      	cmp	r3, #16
 800f198:	d122      	bne.n	800f1e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	f003 0310 	and.w	r3, r3, #16
 800f1a4:	2b10      	cmp	r3, #16
 800f1a6:	d11b      	bne.n	800f1e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f06f 0210 	mvn.w	r2, #16
 800f1b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2208      	movs	r2, #8
 800f1b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	69db      	ldr	r3, [r3, #28]
 800f1be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d003      	beq.n	800f1ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f998 	bl	800f4fc <HAL_TIM_IC_CaptureCallback>
 800f1cc:	e005      	b.n	800f1da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f98a 	bl	800f4e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f99b 	bl	800f510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	f003 0301 	and.w	r3, r3, #1
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d10e      	bne.n	800f20c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	f003 0301 	and.w	r3, r3, #1
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d107      	bne.n	800f20c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f06f 0201 	mvn.w	r2, #1
 800f204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7f7 fb38 	bl	800687c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	691b      	ldr	r3, [r3, #16]
 800f212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f216:	2b80      	cmp	r3, #128	; 0x80
 800f218:	d10e      	bne.n	800f238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f224:	2b80      	cmp	r3, #128	; 0x80
 800f226:	d107      	bne.n	800f238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 fda8 	bl	800fd88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	691b      	ldr	r3, [r3, #16]
 800f23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f246:	d10e      	bne.n	800f266 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f252:	2b80      	cmp	r3, #128	; 0x80
 800f254:	d107      	bne.n	800f266 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f25e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 fd9b 	bl	800fd9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f270:	2b40      	cmp	r3, #64	; 0x40
 800f272:	d10e      	bne.n	800f292 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f27e:	2b40      	cmp	r3, #64	; 0x40
 800f280:	d107      	bne.n	800f292 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f28a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f949 	bl	800f524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	691b      	ldr	r3, [r3, #16]
 800f298:	f003 0320 	and.w	r3, r3, #32
 800f29c:	2b20      	cmp	r3, #32
 800f29e:	d10e      	bne.n	800f2be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	f003 0320 	and.w	r3, r3, #32
 800f2aa:	2b20      	cmp	r3, #32
 800f2ac:	d107      	bne.n	800f2be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f06f 0220 	mvn.w	r2, #32
 800f2b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fd5b 	bl	800fd74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2be:	bf00      	nop
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
	...

0800f2c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d101      	bne.n	800f2e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f2de:	2302      	movs	r3, #2
 800f2e0:	e0fd      	b.n	800f4de <HAL_TIM_PWM_ConfigChannel+0x216>
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2b14      	cmp	r3, #20
 800f2ee:	f200 80f0 	bhi.w	800f4d2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f2f2:	a201      	add	r2, pc, #4	; (adr r2, 800f2f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f8:	0800f34d 	.word	0x0800f34d
 800f2fc:	0800f4d3 	.word	0x0800f4d3
 800f300:	0800f4d3 	.word	0x0800f4d3
 800f304:	0800f4d3 	.word	0x0800f4d3
 800f308:	0800f38d 	.word	0x0800f38d
 800f30c:	0800f4d3 	.word	0x0800f4d3
 800f310:	0800f4d3 	.word	0x0800f4d3
 800f314:	0800f4d3 	.word	0x0800f4d3
 800f318:	0800f3cf 	.word	0x0800f3cf
 800f31c:	0800f4d3 	.word	0x0800f4d3
 800f320:	0800f4d3 	.word	0x0800f4d3
 800f324:	0800f4d3 	.word	0x0800f4d3
 800f328:	0800f40f 	.word	0x0800f40f
 800f32c:	0800f4d3 	.word	0x0800f4d3
 800f330:	0800f4d3 	.word	0x0800f4d3
 800f334:	0800f4d3 	.word	0x0800f4d3
 800f338:	0800f451 	.word	0x0800f451
 800f33c:	0800f4d3 	.word	0x0800f4d3
 800f340:	0800f4d3 	.word	0x0800f4d3
 800f344:	0800f4d3 	.word	0x0800f4d3
 800f348:	0800f491 	.word	0x0800f491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68b9      	ldr	r1, [r7, #8]
 800f352:	4618      	mov	r0, r3
 800f354:	f000 f98a 	bl	800f66c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	699a      	ldr	r2, [r3, #24]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f042 0208 	orr.w	r2, r2, #8
 800f366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	699a      	ldr	r2, [r3, #24]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f022 0204 	bic.w	r2, r2, #4
 800f376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	6999      	ldr	r1, [r3, #24]
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	691a      	ldr	r2, [r3, #16]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	430a      	orrs	r2, r1
 800f388:	619a      	str	r2, [r3, #24]
      break;
 800f38a:	e0a3      	b.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	68b9      	ldr	r1, [r7, #8]
 800f392:	4618      	mov	r0, r3
 800f394:	f000 f9fa 	bl	800f78c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	699a      	ldr	r2, [r3, #24]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	699a      	ldr	r2, [r3, #24]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	6999      	ldr	r1, [r3, #24]
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	021a      	lsls	r2, r3, #8
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	619a      	str	r2, [r3, #24]
      break;
 800f3cc:	e082      	b.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	68b9      	ldr	r1, [r7, #8]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f000 fa63 	bl	800f8a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	69da      	ldr	r2, [r3, #28]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f042 0208 	orr.w	r2, r2, #8
 800f3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	69da      	ldr	r2, [r3, #28]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f022 0204 	bic.w	r2, r2, #4
 800f3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	69d9      	ldr	r1, [r3, #28]
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	691a      	ldr	r2, [r3, #16]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	430a      	orrs	r2, r1
 800f40a:	61da      	str	r2, [r3, #28]
      break;
 800f40c:	e062      	b.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68b9      	ldr	r1, [r7, #8]
 800f414:	4618      	mov	r0, r3
 800f416:	f000 facb 	bl	800f9b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	69da      	ldr	r2, [r3, #28]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	69da      	ldr	r2, [r3, #28]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	69d9      	ldr	r1, [r3, #28]
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	021a      	lsls	r2, r3, #8
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	430a      	orrs	r2, r1
 800f44c:	61da      	str	r2, [r3, #28]
      break;
 800f44e:	e041      	b.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	68b9      	ldr	r1, [r7, #8]
 800f456:	4618      	mov	r0, r3
 800f458:	f000 fb14 	bl	800fa84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f042 0208 	orr.w	r2, r2, #8
 800f46a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f022 0204 	bic.w	r2, r2, #4
 800f47a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	691a      	ldr	r2, [r3, #16]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	430a      	orrs	r2, r1
 800f48c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f48e:	e021      	b.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	68b9      	ldr	r1, [r7, #8]
 800f496:	4618      	mov	r0, r3
 800f498:	f000 fb58 	bl	800fb4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	021a      	lsls	r2, r3, #8
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	430a      	orrs	r2, r1
 800f4ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f4d0:	e000      	b.n	800f4d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f4d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop

0800f4e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f504:	bf00      	nop
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f518:	bf00      	nop
 800f51a:	370c      	adds	r7, #12
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr

0800f524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f52c:	bf00      	nop
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f538:	b480      	push	{r7}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a40      	ldr	r2, [pc, #256]	; (800f64c <TIM_Base_SetConfig+0x114>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d013      	beq.n	800f578 <TIM_Base_SetConfig+0x40>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f556:	d00f      	beq.n	800f578 <TIM_Base_SetConfig+0x40>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a3d      	ldr	r2, [pc, #244]	; (800f650 <TIM_Base_SetConfig+0x118>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d00b      	beq.n	800f578 <TIM_Base_SetConfig+0x40>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a3c      	ldr	r2, [pc, #240]	; (800f654 <TIM_Base_SetConfig+0x11c>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d007      	beq.n	800f578 <TIM_Base_SetConfig+0x40>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a3b      	ldr	r2, [pc, #236]	; (800f658 <TIM_Base_SetConfig+0x120>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d003      	beq.n	800f578 <TIM_Base_SetConfig+0x40>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a3a      	ldr	r2, [pc, #232]	; (800f65c <TIM_Base_SetConfig+0x124>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d108      	bne.n	800f58a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f57e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	4313      	orrs	r3, r2
 800f588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4a2f      	ldr	r2, [pc, #188]	; (800f64c <TIM_Base_SetConfig+0x114>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d01f      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f598:	d01b      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4a2c      	ldr	r2, [pc, #176]	; (800f650 <TIM_Base_SetConfig+0x118>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d017      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4a2b      	ldr	r2, [pc, #172]	; (800f654 <TIM_Base_SetConfig+0x11c>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d013      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a2a      	ldr	r2, [pc, #168]	; (800f658 <TIM_Base_SetConfig+0x120>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d00f      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a29      	ldr	r2, [pc, #164]	; (800f65c <TIM_Base_SetConfig+0x124>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d00b      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a28      	ldr	r2, [pc, #160]	; (800f660 <TIM_Base_SetConfig+0x128>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d007      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a27      	ldr	r2, [pc, #156]	; (800f664 <TIM_Base_SetConfig+0x12c>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d003      	beq.n	800f5d2 <TIM_Base_SetConfig+0x9a>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4a26      	ldr	r2, [pc, #152]	; (800f668 <TIM_Base_SetConfig+0x130>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d108      	bne.n	800f5e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	695b      	ldr	r3, [r3, #20]
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	689a      	ldr	r2, [r3, #8]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4a10      	ldr	r2, [pc, #64]	; (800f64c <TIM_Base_SetConfig+0x114>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d00f      	beq.n	800f630 <TIM_Base_SetConfig+0xf8>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a12      	ldr	r2, [pc, #72]	; (800f65c <TIM_Base_SetConfig+0x124>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d00b      	beq.n	800f630 <TIM_Base_SetConfig+0xf8>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a11      	ldr	r2, [pc, #68]	; (800f660 <TIM_Base_SetConfig+0x128>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d007      	beq.n	800f630 <TIM_Base_SetConfig+0xf8>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a10      	ldr	r2, [pc, #64]	; (800f664 <TIM_Base_SetConfig+0x12c>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d003      	beq.n	800f630 <TIM_Base_SetConfig+0xf8>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a0f      	ldr	r2, [pc, #60]	; (800f668 <TIM_Base_SetConfig+0x130>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d103      	bne.n	800f638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	691a      	ldr	r2, [r3, #16]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2201      	movs	r2, #1
 800f63c:	615a      	str	r2, [r3, #20]
}
 800f63e:	bf00      	nop
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	40012c00 	.word	0x40012c00
 800f650:	40000400 	.word	0x40000400
 800f654:	40000800 	.word	0x40000800
 800f658:	40000c00 	.word	0x40000c00
 800f65c:	40013400 	.word	0x40013400
 800f660:	40014000 	.word	0x40014000
 800f664:	40014400 	.word	0x40014400
 800f668:	40014800 	.word	0x40014800

0800f66c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	f023 0201 	bic.w	r2, r3, #1
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6a1b      	ldr	r3, [r3, #32]
 800f686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f023 0303 	bic.w	r3, r3, #3
 800f6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f023 0302 	bic.w	r3, r3, #2
 800f6b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a2c      	ldr	r2, [pc, #176]	; (800f778 <TIM_OC1_SetConfig+0x10c>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d00f      	beq.n	800f6ec <TIM_OC1_SetConfig+0x80>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a2b      	ldr	r2, [pc, #172]	; (800f77c <TIM_OC1_SetConfig+0x110>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d00b      	beq.n	800f6ec <TIM_OC1_SetConfig+0x80>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a2a      	ldr	r2, [pc, #168]	; (800f780 <TIM_OC1_SetConfig+0x114>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d007      	beq.n	800f6ec <TIM_OC1_SetConfig+0x80>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a29      	ldr	r2, [pc, #164]	; (800f784 <TIM_OC1_SetConfig+0x118>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d003      	beq.n	800f6ec <TIM_OC1_SetConfig+0x80>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a28      	ldr	r2, [pc, #160]	; (800f788 <TIM_OC1_SetConfig+0x11c>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d10c      	bne.n	800f706 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	f023 0308 	bic.w	r3, r3, #8
 800f6f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	697a      	ldr	r2, [r7, #20]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	f023 0304 	bic.w	r3, r3, #4
 800f704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a1b      	ldr	r2, [pc, #108]	; (800f778 <TIM_OC1_SetConfig+0x10c>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d00f      	beq.n	800f72e <TIM_OC1_SetConfig+0xc2>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a1a      	ldr	r2, [pc, #104]	; (800f77c <TIM_OC1_SetConfig+0x110>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d00b      	beq.n	800f72e <TIM_OC1_SetConfig+0xc2>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a19      	ldr	r2, [pc, #100]	; (800f780 <TIM_OC1_SetConfig+0x114>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d007      	beq.n	800f72e <TIM_OC1_SetConfig+0xc2>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4a18      	ldr	r2, [pc, #96]	; (800f784 <TIM_OC1_SetConfig+0x118>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d003      	beq.n	800f72e <TIM_OC1_SetConfig+0xc2>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4a17      	ldr	r2, [pc, #92]	; (800f788 <TIM_OC1_SetConfig+0x11c>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d111      	bne.n	800f752 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f73c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	695b      	ldr	r3, [r3, #20]
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	4313      	orrs	r3, r2
 800f746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	693a      	ldr	r2, [r7, #16]
 800f74e:	4313      	orrs	r3, r2
 800f750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	693a      	ldr	r2, [r7, #16]
 800f756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	685a      	ldr	r2, [r3, #4]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	697a      	ldr	r2, [r7, #20]
 800f76a:	621a      	str	r2, [r3, #32]
}
 800f76c:	bf00      	nop
 800f76e:	371c      	adds	r7, #28
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr
 800f778:	40012c00 	.word	0x40012c00
 800f77c:	40013400 	.word	0x40013400
 800f780:	40014000 	.word	0x40014000
 800f784:	40014400 	.word	0x40014400
 800f788:	40014800 	.word	0x40014800

0800f78c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6a1b      	ldr	r3, [r3, #32]
 800f79a:	f023 0210 	bic.w	r2, r3, #16
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a1b      	ldr	r3, [r3, #32]
 800f7a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	699b      	ldr	r3, [r3, #24]
 800f7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f7ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	021b      	lsls	r3, r3, #8
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	f023 0320 	bic.w	r3, r3, #32
 800f7da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	011b      	lsls	r3, r3, #4
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a28      	ldr	r2, [pc, #160]	; (800f88c <TIM_OC2_SetConfig+0x100>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d003      	beq.n	800f7f8 <TIM_OC2_SetConfig+0x6c>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a27      	ldr	r2, [pc, #156]	; (800f890 <TIM_OC2_SetConfig+0x104>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d10d      	bne.n	800f814 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	697a      	ldr	r2, [r7, #20]
 800f808:	4313      	orrs	r3, r2
 800f80a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4a1d      	ldr	r2, [pc, #116]	; (800f88c <TIM_OC2_SetConfig+0x100>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d00f      	beq.n	800f83c <TIM_OC2_SetConfig+0xb0>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a1c      	ldr	r2, [pc, #112]	; (800f890 <TIM_OC2_SetConfig+0x104>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d00b      	beq.n	800f83c <TIM_OC2_SetConfig+0xb0>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a1b      	ldr	r2, [pc, #108]	; (800f894 <TIM_OC2_SetConfig+0x108>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d007      	beq.n	800f83c <TIM_OC2_SetConfig+0xb0>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4a1a      	ldr	r2, [pc, #104]	; (800f898 <TIM_OC2_SetConfig+0x10c>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d003      	beq.n	800f83c <TIM_OC2_SetConfig+0xb0>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	4a19      	ldr	r2, [pc, #100]	; (800f89c <TIM_OC2_SetConfig+0x110>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d113      	bne.n	800f864 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f84a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	695b      	ldr	r3, [r3, #20]
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	693a      	ldr	r2, [r7, #16]
 800f854:	4313      	orrs	r3, r2
 800f856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	699b      	ldr	r3, [r3, #24]
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	693a      	ldr	r2, [r7, #16]
 800f860:	4313      	orrs	r3, r2
 800f862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	685a      	ldr	r2, [r3, #4]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	621a      	str	r2, [r3, #32]
}
 800f87e:	bf00      	nop
 800f880:	371c      	adds	r7, #28
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	40012c00 	.word	0x40012c00
 800f890:	40013400 	.word	0x40013400
 800f894:	40014000 	.word	0x40014000
 800f898:	40014400 	.word	0x40014400
 800f89c:	40014800 	.word	0x40014800

0800f8a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b087      	sub	sp, #28
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	69db      	ldr	r3, [r3, #28]
 800f8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f023 0303 	bic.w	r3, r3, #3
 800f8da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	021b      	lsls	r3, r3, #8
 800f8f4:	697a      	ldr	r2, [r7, #20]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4a27      	ldr	r2, [pc, #156]	; (800f99c <TIM_OC3_SetConfig+0xfc>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d003      	beq.n	800f90a <TIM_OC3_SetConfig+0x6a>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a26      	ldr	r2, [pc, #152]	; (800f9a0 <TIM_OC3_SetConfig+0x100>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d10d      	bne.n	800f926 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	021b      	lsls	r3, r3, #8
 800f918:	697a      	ldr	r2, [r7, #20]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a1c      	ldr	r2, [pc, #112]	; (800f99c <TIM_OC3_SetConfig+0xfc>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d00f      	beq.n	800f94e <TIM_OC3_SetConfig+0xae>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a1b      	ldr	r2, [pc, #108]	; (800f9a0 <TIM_OC3_SetConfig+0x100>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d00b      	beq.n	800f94e <TIM_OC3_SetConfig+0xae>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a1a      	ldr	r2, [pc, #104]	; (800f9a4 <TIM_OC3_SetConfig+0x104>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d007      	beq.n	800f94e <TIM_OC3_SetConfig+0xae>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a19      	ldr	r2, [pc, #100]	; (800f9a8 <TIM_OC3_SetConfig+0x108>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d003      	beq.n	800f94e <TIM_OC3_SetConfig+0xae>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4a18      	ldr	r2, [pc, #96]	; (800f9ac <TIM_OC3_SetConfig+0x10c>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d113      	bne.n	800f976 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	695b      	ldr	r3, [r3, #20]
 800f962:	011b      	lsls	r3, r3, #4
 800f964:	693a      	ldr	r2, [r7, #16]
 800f966:	4313      	orrs	r3, r2
 800f968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	011b      	lsls	r3, r3, #4
 800f970:	693a      	ldr	r2, [r7, #16]
 800f972:	4313      	orrs	r3, r2
 800f974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	693a      	ldr	r2, [r7, #16]
 800f97a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	685a      	ldr	r2, [r3, #4]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	697a      	ldr	r2, [r7, #20]
 800f98e:	621a      	str	r2, [r3, #32]
}
 800f990:	bf00      	nop
 800f992:	371c      	adds	r7, #28
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	40012c00 	.word	0x40012c00
 800f9a0:	40013400 	.word	0x40013400
 800f9a4:	40014000 	.word	0x40014000
 800f9a8:	40014400 	.word	0x40014400
 800f9ac:	40014800 	.word	0x40014800

0800f9b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b087      	sub	sp, #28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6a1b      	ldr	r3, [r3, #32]
 800f9be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a1b      	ldr	r3, [r3, #32]
 800f9ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	69db      	ldr	r3, [r3, #28]
 800f9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f9de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	021b      	lsls	r3, r3, #8
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	031b      	lsls	r3, r3, #12
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a18      	ldr	r2, [pc, #96]	; (800fa70 <TIM_OC4_SetConfig+0xc0>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d00f      	beq.n	800fa34 <TIM_OC4_SetConfig+0x84>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a17      	ldr	r2, [pc, #92]	; (800fa74 <TIM_OC4_SetConfig+0xc4>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d00b      	beq.n	800fa34 <TIM_OC4_SetConfig+0x84>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4a16      	ldr	r2, [pc, #88]	; (800fa78 <TIM_OC4_SetConfig+0xc8>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d007      	beq.n	800fa34 <TIM_OC4_SetConfig+0x84>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a15      	ldr	r2, [pc, #84]	; (800fa7c <TIM_OC4_SetConfig+0xcc>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d003      	beq.n	800fa34 <TIM_OC4_SetConfig+0x84>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a14      	ldr	r2, [pc, #80]	; (800fa80 <TIM_OC4_SetConfig+0xd0>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d109      	bne.n	800fa48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	695b      	ldr	r3, [r3, #20]
 800fa40:	019b      	lsls	r3, r3, #6
 800fa42:	697a      	ldr	r2, [r7, #20]
 800fa44:	4313      	orrs	r3, r2
 800fa46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	621a      	str	r2, [r3, #32]
}
 800fa62:	bf00      	nop
 800fa64:	371c      	adds	r7, #28
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	40012c00 	.word	0x40012c00
 800fa74:	40013400 	.word	0x40013400
 800fa78:	40014000 	.word	0x40014000
 800fa7c:	40014400 	.word	0x40014400
 800fa80:	40014800 	.word	0x40014800

0800fa84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b087      	sub	sp, #28
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	689b      	ldr	r3, [r3, #8]
 800face:	041b      	lsls	r3, r3, #16
 800fad0:	693a      	ldr	r2, [r7, #16]
 800fad2:	4313      	orrs	r3, r2
 800fad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a17      	ldr	r2, [pc, #92]	; (800fb38 <TIM_OC5_SetConfig+0xb4>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d00f      	beq.n	800fafe <TIM_OC5_SetConfig+0x7a>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a16      	ldr	r2, [pc, #88]	; (800fb3c <TIM_OC5_SetConfig+0xb8>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d00b      	beq.n	800fafe <TIM_OC5_SetConfig+0x7a>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a15      	ldr	r2, [pc, #84]	; (800fb40 <TIM_OC5_SetConfig+0xbc>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d007      	beq.n	800fafe <TIM_OC5_SetConfig+0x7a>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a14      	ldr	r2, [pc, #80]	; (800fb44 <TIM_OC5_SetConfig+0xc0>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d003      	beq.n	800fafe <TIM_OC5_SetConfig+0x7a>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a13      	ldr	r2, [pc, #76]	; (800fb48 <TIM_OC5_SetConfig+0xc4>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d109      	bne.n	800fb12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	695b      	ldr	r3, [r3, #20]
 800fb0a:	021b      	lsls	r3, r3, #8
 800fb0c:	697a      	ldr	r2, [r7, #20]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	68fa      	ldr	r2, [r7, #12]
 800fb1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	685a      	ldr	r2, [r3, #4]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	693a      	ldr	r2, [r7, #16]
 800fb2a:	621a      	str	r2, [r3, #32]
}
 800fb2c:	bf00      	nop
 800fb2e:	371c      	adds	r7, #28
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr
 800fb38:	40012c00 	.word	0x40012c00
 800fb3c:	40013400 	.word	0x40013400
 800fb40:	40014000 	.word	0x40014000
 800fb44:	40014400 	.word	0x40014400
 800fb48:	40014800 	.word	0x40014800

0800fb4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b087      	sub	sp, #28
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	021b      	lsls	r3, r3, #8
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	051b      	lsls	r3, r3, #20
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4a18      	ldr	r2, [pc, #96]	; (800fc04 <TIM_OC6_SetConfig+0xb8>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d00f      	beq.n	800fbc8 <TIM_OC6_SetConfig+0x7c>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a17      	ldr	r2, [pc, #92]	; (800fc08 <TIM_OC6_SetConfig+0xbc>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d00b      	beq.n	800fbc8 <TIM_OC6_SetConfig+0x7c>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a16      	ldr	r2, [pc, #88]	; (800fc0c <TIM_OC6_SetConfig+0xc0>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d007      	beq.n	800fbc8 <TIM_OC6_SetConfig+0x7c>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a15      	ldr	r2, [pc, #84]	; (800fc10 <TIM_OC6_SetConfig+0xc4>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d003      	beq.n	800fbc8 <TIM_OC6_SetConfig+0x7c>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a14      	ldr	r2, [pc, #80]	; (800fc14 <TIM_OC6_SetConfig+0xc8>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d109      	bne.n	800fbdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fbce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	695b      	ldr	r3, [r3, #20]
 800fbd4:	029b      	lsls	r3, r3, #10
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	621a      	str	r2, [r3, #32]
}
 800fbf6:	bf00      	nop
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	40012c00 	.word	0x40012c00
 800fc08:	40013400 	.word	0x40013400
 800fc0c:	40014000 	.word	0x40014000
 800fc10:	40014400 	.word	0x40014400
 800fc14:	40014800 	.word	0x40014800

0800fc18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	f003 031f 	and.w	r3, r3, #31
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6a1a      	ldr	r2, [r3, #32]
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	43db      	mvns	r3, r3
 800fc3a:	401a      	ands	r2, r3
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6a1a      	ldr	r2, [r3, #32]
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	f003 031f 	and.w	r3, r3, #31
 800fc4a:	6879      	ldr	r1, [r7, #4]
 800fc4c:	fa01 f303 	lsl.w	r3, r1, r3
 800fc50:	431a      	orrs	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	621a      	str	r2, [r3, #32]
}
 800fc56:	bf00      	nop
 800fc58:	371c      	adds	r7, #28
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
	...

0800fc64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d101      	bne.n	800fc7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc78:	2302      	movs	r3, #2
 800fc7a:	e068      	b.n	800fd4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2202      	movs	r2, #2
 800fc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	689b      	ldr	r3, [r3, #8]
 800fc9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a2e      	ldr	r2, [pc, #184]	; (800fd5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d004      	beq.n	800fcb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a2d      	ldr	r2, [pc, #180]	; (800fd60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d108      	bne.n	800fcc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fcb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a1e      	ldr	r2, [pc, #120]	; (800fd5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d01d      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcee:	d018      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a1b      	ldr	r2, [pc, #108]	; (800fd64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d013      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a1a      	ldr	r2, [pc, #104]	; (800fd68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d00e      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a18      	ldr	r2, [pc, #96]	; (800fd6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d009      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4a13      	ldr	r2, [pc, #76]	; (800fd60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d004      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4a14      	ldr	r2, [pc, #80]	; (800fd70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d10c      	bne.n	800fd3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	68ba      	ldr	r2, [r7, #8]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68ba      	ldr	r2, [r7, #8]
 800fd3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2200      	movs	r2, #0
 800fd48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	40012c00 	.word	0x40012c00
 800fd60:	40013400 	.word	0x40013400
 800fd64:	40000400 	.word	0x40000400
 800fd68:	40000800 	.word	0x40000800
 800fd6c:	40000c00 	.word	0x40000c00
 800fd70:	40014000 	.word	0x40014000

0800fd74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd7c:	bf00      	nop
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd90:	bf00      	nop
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d101      	bne.n	800fdc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e040      	b.n	800fe44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d106      	bne.n	800fdd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7f7 fac4 	bl	8007360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2224      	movs	r2, #36	; 0x24
 800fddc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f022 0201 	bic.w	r2, r2, #1
 800fdec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 fae2 	bl	80103b8 <UART_SetConfig>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d101      	bne.n	800fdfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e022      	b.n	800fe44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d002      	beq.n	800fe0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fd60 	bl	80108cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	685a      	ldr	r2, [r3, #4]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	689a      	ldr	r2, [r3, #8]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fe2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f042 0201 	orr.w	r2, r2, #1
 800fe3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fde7 	bl	8010a10 <UART_CheckIdleState>
 800fe42:	4603      	mov	r3, r0
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b08a      	sub	sp, #40	; 0x28
 800fe50:	af02      	add	r7, sp, #8
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	603b      	str	r3, [r7, #0]
 800fe58:	4613      	mov	r3, r2
 800fe5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe60:	2b20      	cmp	r3, #32
 800fe62:	f040 8082 	bne.w	800ff6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <HAL_UART_Transmit+0x26>
 800fe6c:	88fb      	ldrh	r3, [r7, #6]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d101      	bne.n	800fe76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fe72:	2301      	movs	r3, #1
 800fe74:	e07a      	b.n	800ff6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d101      	bne.n	800fe84 <HAL_UART_Transmit+0x38>
 800fe80:	2302      	movs	r3, #2
 800fe82:	e073      	b.n	800ff6c <HAL_UART_Transmit+0x120>
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2221      	movs	r2, #33	; 0x21
 800fe98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe9a:	f7f7 feeb 	bl	8007c74 <HAL_GetTick>
 800fe9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	88fa      	ldrh	r2, [r7, #6]
 800fea4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	88fa      	ldrh	r2, [r7, #6]
 800feac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feb8:	d108      	bne.n	800fecc <HAL_UART_Transmit+0x80>
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d104      	bne.n	800fecc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800fec2:	2300      	movs	r3, #0
 800fec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	61bb      	str	r3, [r7, #24]
 800feca:	e003      	b.n	800fed4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fed0:	2300      	movs	r3, #0
 800fed2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fedc:	e02d      	b.n	800ff3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	2200      	movs	r2, #0
 800fee6:	2180      	movs	r1, #128	; 0x80
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 fdda 	bl	8010aa2 <UART_WaitOnFlagUntilTimeout>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fef4:	2303      	movs	r3, #3
 800fef6:	e039      	b.n	800ff6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d10b      	bne.n	800ff16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	881a      	ldrh	r2, [r3, #0]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff0a:	b292      	uxth	r2, r2
 800ff0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	3302      	adds	r3, #2
 800ff12:	61bb      	str	r3, [r7, #24]
 800ff14:	e008      	b.n	800ff28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	781a      	ldrb	r2, [r3, #0]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	b292      	uxth	r2, r2
 800ff20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	3301      	adds	r3, #1
 800ff26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	3b01      	subs	r3, #1
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1cb      	bne.n	800fede <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	2140      	movs	r1, #64	; 0x40
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f000 fda6 	bl	8010aa2 <UART_WaitOnFlagUntilTimeout>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ff5c:	2303      	movs	r3, #3
 800ff5e:	e005      	b.n	800ff6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2220      	movs	r2, #32
 800ff64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ff66:	2300      	movs	r3, #0
 800ff68:	e000      	b.n	800ff6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800ff6a:	2302      	movs	r3, #2
  }
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3720      	adds	r7, #32
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b088      	sub	sp, #32
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	69db      	ldr	r3, [r3, #28]
 800ff82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff94:	69fa      	ldr	r2, [r7, #28]
 800ff96:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d113      	bne.n	800ffcc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	f003 0320 	and.w	r3, r3, #32
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00e      	beq.n	800ffcc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	f003 0320 	and.w	r3, r3, #32
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d009      	beq.n	800ffcc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f000 81ce 	beq.w	801035e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	4798      	blx	r3
      }
      return;
 800ffca:	e1c8      	b.n	801035e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f000 80e3 	beq.w	801019a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	f003 0301 	and.w	r3, r3, #1
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d105      	bne.n	800ffea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ffde:	69ba      	ldr	r2, [r7, #24]
 800ffe0:	4ba6      	ldr	r3, [pc, #664]	; (801027c <HAL_UART_IRQHandler+0x308>)
 800ffe2:	4013      	ands	r3, r2
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f000 80d8 	beq.w	801019a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffea:	69fb      	ldr	r3, [r7, #28]
 800ffec:	f003 0301 	and.w	r3, r3, #1
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d010      	beq.n	8010016 <HAL_UART_IRQHandler+0xa2>
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00b      	beq.n	8010016 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2201      	movs	r2, #1
 8010004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801000c:	f043 0201 	orr.w	r2, r3, #1
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	f003 0302 	and.w	r3, r3, #2
 801001c:	2b00      	cmp	r3, #0
 801001e:	d010      	beq.n	8010042 <HAL_UART_IRQHandler+0xce>
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00b      	beq.n	8010042 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2202      	movs	r2, #2
 8010030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010038:	f043 0204 	orr.w	r2, r3, #4
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	f003 0304 	and.w	r3, r3, #4
 8010048:	2b00      	cmp	r3, #0
 801004a:	d010      	beq.n	801006e <HAL_UART_IRQHandler+0xfa>
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	f003 0301 	and.w	r3, r3, #1
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00b      	beq.n	801006e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2204      	movs	r2, #4
 801005c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010064:	f043 0202 	orr.w	r2, r3, #2
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	f003 0308 	and.w	r3, r3, #8
 8010074:	2b00      	cmp	r3, #0
 8010076:	d015      	beq.n	80100a4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	f003 0320 	and.w	r3, r3, #32
 801007e:	2b00      	cmp	r3, #0
 8010080:	d104      	bne.n	801008c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010088:	2b00      	cmp	r3, #0
 801008a:	d00b      	beq.n	80100a4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2208      	movs	r2, #8
 8010092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801009a:	f043 0208 	orr.w	r2, r3, #8
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d011      	beq.n	80100d2 <HAL_UART_IRQHandler+0x15e>
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00c      	beq.n	80100d2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100c8:	f043 0220 	orr.w	r2, r3, #32
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f000 8142 	beq.w	8010362 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	f003 0320 	and.w	r3, r3, #32
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d00c      	beq.n	8010102 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	f003 0320 	and.w	r3, r3, #32
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d007      	beq.n	8010102 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d003      	beq.n	8010102 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010108:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010114:	2b40      	cmp	r3, #64	; 0x40
 8010116:	d004      	beq.n	8010122 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801011e:	2b00      	cmp	r3, #0
 8010120:	d031      	beq.n	8010186 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 fd39 	bl	8010b9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010132:	2b40      	cmp	r3, #64	; 0x40
 8010134:	d123      	bne.n	801017e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	689a      	ldr	r2, [r3, #8]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010144:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801014a:	2b00      	cmp	r3, #0
 801014c:	d013      	beq.n	8010176 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010152:	4a4b      	ldr	r2, [pc, #300]	; (8010280 <HAL_UART_IRQHandler+0x30c>)
 8010154:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801015a:	4618      	mov	r0, r3
 801015c:	f7f9 fdb6 	bl	8009ccc <HAL_DMA_Abort_IT>
 8010160:	4603      	mov	r3, r0
 8010162:	2b00      	cmp	r3, #0
 8010164:	d017      	beq.n	8010196 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801016a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8010170:	4610      	mov	r0, r2
 8010172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010174:	e00f      	b.n	8010196 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f908 	bl	801038c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801017c:	e00b      	b.n	8010196 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 f904 	bl	801038c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010184:	e007      	b.n	8010196 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f000 f900 	bl	801038c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8010194:	e0e5      	b.n	8010362 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010196:	bf00      	nop
    return;
 8010198:	e0e3      	b.n	8010362 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801019e:	2b01      	cmp	r3, #1
 80101a0:	f040 80a9 	bne.w	80102f6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	f003 0310 	and.w	r3, r3, #16
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f000 80a3 	beq.w	80102f6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	f003 0310 	and.w	r3, r3, #16
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f000 809d 	beq.w	80102f6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2210      	movs	r2, #16
 80101c2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101ce:	2b40      	cmp	r3, #64	; 0x40
 80101d0:	d158      	bne.n	8010284 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80101dc:	893b      	ldrh	r3, [r7, #8]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f000 80c1 	beq.w	8010366 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80101ea:	893a      	ldrh	r2, [r7, #8]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	f080 80ba 	bcs.w	8010366 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	893a      	ldrh	r2, [r7, #8]
 80101f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f003 0320 	and.w	r3, r3, #32
 8010206:	2b00      	cmp	r3, #0
 8010208:	d12a      	bne.n	8010260 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010218:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	689a      	ldr	r2, [r3, #8]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f022 0201 	bic.w	r2, r2, #1
 8010228:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	689a      	ldr	r2, [r3, #8]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010238:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2220      	movs	r2, #32
 801023e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f022 0210 	bic.w	r2, r2, #16
 8010254:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801025a:	4618      	mov	r0, r3
 801025c:	f7f9 fcf8 	bl	8009c50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801026c:	b29b      	uxth	r3, r3
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	b29b      	uxth	r3, r3
 8010272:	4619      	mov	r1, r3
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f893 	bl	80103a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801027a:	e074      	b.n	8010366 <HAL_UART_IRQHandler+0x3f2>
 801027c:	04000120 	.word	0x04000120
 8010280:	08010bf9 	.word	0x08010bf9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010290:	b29b      	uxth	r3, r3
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801029c:	b29b      	uxth	r3, r3
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d063      	beq.n	801036a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80102a2:	897b      	ldrh	r3, [r7, #10]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d060      	beq.n	801036a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80102b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	689a      	ldr	r2, [r3, #8]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f022 0201 	bic.w	r2, r2, #1
 80102c6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2220      	movs	r2, #32
 80102cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f022 0210 	bic.w	r2, r2, #16
 80102e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80102ea:	897b      	ldrh	r3, [r7, #10]
 80102ec:	4619      	mov	r1, r3
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 f856 	bl	80103a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80102f4:	e039      	b.n	801036a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00d      	beq.n	801031c <HAL_UART_IRQHandler+0x3a8>
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010306:	2b00      	cmp	r3, #0
 8010308:	d008      	beq.n	801031c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fc9e 	bl	8010c56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801031a:	e029      	b.n	8010370 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00d      	beq.n	8010342 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801032c:	2b00      	cmp	r3, #0
 801032e:	d008      	beq.n	8010342 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010334:	2b00      	cmp	r3, #0
 8010336:	d01a      	beq.n	801036e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	4798      	blx	r3
    }
    return;
 8010340:	e015      	b.n	801036e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010348:	2b00      	cmp	r3, #0
 801034a:	d011      	beq.n	8010370 <HAL_UART_IRQHandler+0x3fc>
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00c      	beq.n	8010370 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 fc64 	bl	8010c24 <UART_EndTransmit_IT>
    return;
 801035c:	e008      	b.n	8010370 <HAL_UART_IRQHandler+0x3fc>
      return;
 801035e:	bf00      	nop
 8010360:	e006      	b.n	8010370 <HAL_UART_IRQHandler+0x3fc>
    return;
 8010362:	bf00      	nop
 8010364:	e004      	b.n	8010370 <HAL_UART_IRQHandler+0x3fc>
      return;
 8010366:	bf00      	nop
 8010368:	e002      	b.n	8010370 <HAL_UART_IRQHandler+0x3fc>
      return;
 801036a:	bf00      	nop
 801036c:	e000      	b.n	8010370 <HAL_UART_IRQHandler+0x3fc>
    return;
 801036e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop

08010378 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010380:	bf00      	nop
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr

0801038c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801038c:	b480      	push	{r7}
 801038e:	b083      	sub	sp, #12
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010394:	bf00      	nop
 8010396:	370c      	adds	r7, #12
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr

080103a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	460b      	mov	r3, r1
 80103aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80103ac:	bf00      	nop
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80103b8:	b5b0      	push	{r4, r5, r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80103c0:	2300      	movs	r3, #0
 80103c2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	689a      	ldr	r2, [r3, #8]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	691b      	ldr	r3, [r3, #16]
 80103cc:	431a      	orrs	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	431a      	orrs	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	69db      	ldr	r3, [r3, #28]
 80103d8:	4313      	orrs	r3, r2
 80103da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	4bad      	ldr	r3, [pc, #692]	; (8010698 <UART_SetConfig+0x2e0>)
 80103e4:	4013      	ands	r3, r2
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	6812      	ldr	r2, [r2, #0]
 80103ea:	69f9      	ldr	r1, [r7, #28]
 80103ec:	430b      	orrs	r3, r1
 80103ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	68da      	ldr	r2, [r3, #12]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	430a      	orrs	r2, r1
 8010404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	699b      	ldr	r3, [r3, #24]
 801040a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4aa2      	ldr	r2, [pc, #648]	; (801069c <UART_SetConfig+0x2e4>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d004      	beq.n	8010420 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6a1b      	ldr	r3, [r3, #32]
 801041a:	69fa      	ldr	r2, [r7, #28]
 801041c:	4313      	orrs	r3, r2
 801041e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	69fa      	ldr	r2, [r7, #28]
 8010430:	430a      	orrs	r2, r1
 8010432:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	4a99      	ldr	r2, [pc, #612]	; (80106a0 <UART_SetConfig+0x2e8>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d121      	bne.n	8010482 <UART_SetConfig+0xca>
 801043e:	4b99      	ldr	r3, [pc, #612]	; (80106a4 <UART_SetConfig+0x2ec>)
 8010440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010444:	f003 0303 	and.w	r3, r3, #3
 8010448:	2b03      	cmp	r3, #3
 801044a:	d817      	bhi.n	801047c <UART_SetConfig+0xc4>
 801044c:	a201      	add	r2, pc, #4	; (adr r2, 8010454 <UART_SetConfig+0x9c>)
 801044e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010452:	bf00      	nop
 8010454:	08010465 	.word	0x08010465
 8010458:	08010471 	.word	0x08010471
 801045c:	0801046b 	.word	0x0801046b
 8010460:	08010477 	.word	0x08010477
 8010464:	2301      	movs	r3, #1
 8010466:	76fb      	strb	r3, [r7, #27]
 8010468:	e0e7      	b.n	801063a <UART_SetConfig+0x282>
 801046a:	2302      	movs	r3, #2
 801046c:	76fb      	strb	r3, [r7, #27]
 801046e:	e0e4      	b.n	801063a <UART_SetConfig+0x282>
 8010470:	2304      	movs	r3, #4
 8010472:	76fb      	strb	r3, [r7, #27]
 8010474:	e0e1      	b.n	801063a <UART_SetConfig+0x282>
 8010476:	2308      	movs	r3, #8
 8010478:	76fb      	strb	r3, [r7, #27]
 801047a:	e0de      	b.n	801063a <UART_SetConfig+0x282>
 801047c:	2310      	movs	r3, #16
 801047e:	76fb      	strb	r3, [r7, #27]
 8010480:	e0db      	b.n	801063a <UART_SetConfig+0x282>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4a88      	ldr	r2, [pc, #544]	; (80106a8 <UART_SetConfig+0x2f0>)
 8010488:	4293      	cmp	r3, r2
 801048a:	d132      	bne.n	80104f2 <UART_SetConfig+0x13a>
 801048c:	4b85      	ldr	r3, [pc, #532]	; (80106a4 <UART_SetConfig+0x2ec>)
 801048e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010492:	f003 030c 	and.w	r3, r3, #12
 8010496:	2b0c      	cmp	r3, #12
 8010498:	d828      	bhi.n	80104ec <UART_SetConfig+0x134>
 801049a:	a201      	add	r2, pc, #4	; (adr r2, 80104a0 <UART_SetConfig+0xe8>)
 801049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a0:	080104d5 	.word	0x080104d5
 80104a4:	080104ed 	.word	0x080104ed
 80104a8:	080104ed 	.word	0x080104ed
 80104ac:	080104ed 	.word	0x080104ed
 80104b0:	080104e1 	.word	0x080104e1
 80104b4:	080104ed 	.word	0x080104ed
 80104b8:	080104ed 	.word	0x080104ed
 80104bc:	080104ed 	.word	0x080104ed
 80104c0:	080104db 	.word	0x080104db
 80104c4:	080104ed 	.word	0x080104ed
 80104c8:	080104ed 	.word	0x080104ed
 80104cc:	080104ed 	.word	0x080104ed
 80104d0:	080104e7 	.word	0x080104e7
 80104d4:	2300      	movs	r3, #0
 80104d6:	76fb      	strb	r3, [r7, #27]
 80104d8:	e0af      	b.n	801063a <UART_SetConfig+0x282>
 80104da:	2302      	movs	r3, #2
 80104dc:	76fb      	strb	r3, [r7, #27]
 80104de:	e0ac      	b.n	801063a <UART_SetConfig+0x282>
 80104e0:	2304      	movs	r3, #4
 80104e2:	76fb      	strb	r3, [r7, #27]
 80104e4:	e0a9      	b.n	801063a <UART_SetConfig+0x282>
 80104e6:	2308      	movs	r3, #8
 80104e8:	76fb      	strb	r3, [r7, #27]
 80104ea:	e0a6      	b.n	801063a <UART_SetConfig+0x282>
 80104ec:	2310      	movs	r3, #16
 80104ee:	76fb      	strb	r3, [r7, #27]
 80104f0:	e0a3      	b.n	801063a <UART_SetConfig+0x282>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a6d      	ldr	r2, [pc, #436]	; (80106ac <UART_SetConfig+0x2f4>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d120      	bne.n	801053e <UART_SetConfig+0x186>
 80104fc:	4b69      	ldr	r3, [pc, #420]	; (80106a4 <UART_SetConfig+0x2ec>)
 80104fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010502:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010506:	2b30      	cmp	r3, #48	; 0x30
 8010508:	d013      	beq.n	8010532 <UART_SetConfig+0x17a>
 801050a:	2b30      	cmp	r3, #48	; 0x30
 801050c:	d814      	bhi.n	8010538 <UART_SetConfig+0x180>
 801050e:	2b20      	cmp	r3, #32
 8010510:	d009      	beq.n	8010526 <UART_SetConfig+0x16e>
 8010512:	2b20      	cmp	r3, #32
 8010514:	d810      	bhi.n	8010538 <UART_SetConfig+0x180>
 8010516:	2b00      	cmp	r3, #0
 8010518:	d002      	beq.n	8010520 <UART_SetConfig+0x168>
 801051a:	2b10      	cmp	r3, #16
 801051c:	d006      	beq.n	801052c <UART_SetConfig+0x174>
 801051e:	e00b      	b.n	8010538 <UART_SetConfig+0x180>
 8010520:	2300      	movs	r3, #0
 8010522:	76fb      	strb	r3, [r7, #27]
 8010524:	e089      	b.n	801063a <UART_SetConfig+0x282>
 8010526:	2302      	movs	r3, #2
 8010528:	76fb      	strb	r3, [r7, #27]
 801052a:	e086      	b.n	801063a <UART_SetConfig+0x282>
 801052c:	2304      	movs	r3, #4
 801052e:	76fb      	strb	r3, [r7, #27]
 8010530:	e083      	b.n	801063a <UART_SetConfig+0x282>
 8010532:	2308      	movs	r3, #8
 8010534:	76fb      	strb	r3, [r7, #27]
 8010536:	e080      	b.n	801063a <UART_SetConfig+0x282>
 8010538:	2310      	movs	r3, #16
 801053a:	76fb      	strb	r3, [r7, #27]
 801053c:	e07d      	b.n	801063a <UART_SetConfig+0x282>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4a5b      	ldr	r2, [pc, #364]	; (80106b0 <UART_SetConfig+0x2f8>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d120      	bne.n	801058a <UART_SetConfig+0x1d2>
 8010548:	4b56      	ldr	r3, [pc, #344]	; (80106a4 <UART_SetConfig+0x2ec>)
 801054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801054e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010552:	2bc0      	cmp	r3, #192	; 0xc0
 8010554:	d013      	beq.n	801057e <UART_SetConfig+0x1c6>
 8010556:	2bc0      	cmp	r3, #192	; 0xc0
 8010558:	d814      	bhi.n	8010584 <UART_SetConfig+0x1cc>
 801055a:	2b80      	cmp	r3, #128	; 0x80
 801055c:	d009      	beq.n	8010572 <UART_SetConfig+0x1ba>
 801055e:	2b80      	cmp	r3, #128	; 0x80
 8010560:	d810      	bhi.n	8010584 <UART_SetConfig+0x1cc>
 8010562:	2b00      	cmp	r3, #0
 8010564:	d002      	beq.n	801056c <UART_SetConfig+0x1b4>
 8010566:	2b40      	cmp	r3, #64	; 0x40
 8010568:	d006      	beq.n	8010578 <UART_SetConfig+0x1c0>
 801056a:	e00b      	b.n	8010584 <UART_SetConfig+0x1cc>
 801056c:	2300      	movs	r3, #0
 801056e:	76fb      	strb	r3, [r7, #27]
 8010570:	e063      	b.n	801063a <UART_SetConfig+0x282>
 8010572:	2302      	movs	r3, #2
 8010574:	76fb      	strb	r3, [r7, #27]
 8010576:	e060      	b.n	801063a <UART_SetConfig+0x282>
 8010578:	2304      	movs	r3, #4
 801057a:	76fb      	strb	r3, [r7, #27]
 801057c:	e05d      	b.n	801063a <UART_SetConfig+0x282>
 801057e:	2308      	movs	r3, #8
 8010580:	76fb      	strb	r3, [r7, #27]
 8010582:	e05a      	b.n	801063a <UART_SetConfig+0x282>
 8010584:	2310      	movs	r3, #16
 8010586:	76fb      	strb	r3, [r7, #27]
 8010588:	e057      	b.n	801063a <UART_SetConfig+0x282>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	4a49      	ldr	r2, [pc, #292]	; (80106b4 <UART_SetConfig+0x2fc>)
 8010590:	4293      	cmp	r3, r2
 8010592:	d125      	bne.n	80105e0 <UART_SetConfig+0x228>
 8010594:	4b43      	ldr	r3, [pc, #268]	; (80106a4 <UART_SetConfig+0x2ec>)
 8010596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801059a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801059e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80105a2:	d017      	beq.n	80105d4 <UART_SetConfig+0x21c>
 80105a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80105a8:	d817      	bhi.n	80105da <UART_SetConfig+0x222>
 80105aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105ae:	d00b      	beq.n	80105c8 <UART_SetConfig+0x210>
 80105b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105b4:	d811      	bhi.n	80105da <UART_SetConfig+0x222>
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d003      	beq.n	80105c2 <UART_SetConfig+0x20a>
 80105ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105be:	d006      	beq.n	80105ce <UART_SetConfig+0x216>
 80105c0:	e00b      	b.n	80105da <UART_SetConfig+0x222>
 80105c2:	2300      	movs	r3, #0
 80105c4:	76fb      	strb	r3, [r7, #27]
 80105c6:	e038      	b.n	801063a <UART_SetConfig+0x282>
 80105c8:	2302      	movs	r3, #2
 80105ca:	76fb      	strb	r3, [r7, #27]
 80105cc:	e035      	b.n	801063a <UART_SetConfig+0x282>
 80105ce:	2304      	movs	r3, #4
 80105d0:	76fb      	strb	r3, [r7, #27]
 80105d2:	e032      	b.n	801063a <UART_SetConfig+0x282>
 80105d4:	2308      	movs	r3, #8
 80105d6:	76fb      	strb	r3, [r7, #27]
 80105d8:	e02f      	b.n	801063a <UART_SetConfig+0x282>
 80105da:	2310      	movs	r3, #16
 80105dc:	76fb      	strb	r3, [r7, #27]
 80105de:	e02c      	b.n	801063a <UART_SetConfig+0x282>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a2d      	ldr	r2, [pc, #180]	; (801069c <UART_SetConfig+0x2e4>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d125      	bne.n	8010636 <UART_SetConfig+0x27e>
 80105ea:	4b2e      	ldr	r3, [pc, #184]	; (80106a4 <UART_SetConfig+0x2ec>)
 80105ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80105f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80105f8:	d017      	beq.n	801062a <UART_SetConfig+0x272>
 80105fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80105fe:	d817      	bhi.n	8010630 <UART_SetConfig+0x278>
 8010600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010604:	d00b      	beq.n	801061e <UART_SetConfig+0x266>
 8010606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801060a:	d811      	bhi.n	8010630 <UART_SetConfig+0x278>
 801060c:	2b00      	cmp	r3, #0
 801060e:	d003      	beq.n	8010618 <UART_SetConfig+0x260>
 8010610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010614:	d006      	beq.n	8010624 <UART_SetConfig+0x26c>
 8010616:	e00b      	b.n	8010630 <UART_SetConfig+0x278>
 8010618:	2300      	movs	r3, #0
 801061a:	76fb      	strb	r3, [r7, #27]
 801061c:	e00d      	b.n	801063a <UART_SetConfig+0x282>
 801061e:	2302      	movs	r3, #2
 8010620:	76fb      	strb	r3, [r7, #27]
 8010622:	e00a      	b.n	801063a <UART_SetConfig+0x282>
 8010624:	2304      	movs	r3, #4
 8010626:	76fb      	strb	r3, [r7, #27]
 8010628:	e007      	b.n	801063a <UART_SetConfig+0x282>
 801062a:	2308      	movs	r3, #8
 801062c:	76fb      	strb	r3, [r7, #27]
 801062e:	e004      	b.n	801063a <UART_SetConfig+0x282>
 8010630:	2310      	movs	r3, #16
 8010632:	76fb      	strb	r3, [r7, #27]
 8010634:	e001      	b.n	801063a <UART_SetConfig+0x282>
 8010636:	2310      	movs	r3, #16
 8010638:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4a17      	ldr	r2, [pc, #92]	; (801069c <UART_SetConfig+0x2e4>)
 8010640:	4293      	cmp	r3, r2
 8010642:	f040 8087 	bne.w	8010754 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010646:	7efb      	ldrb	r3, [r7, #27]
 8010648:	2b08      	cmp	r3, #8
 801064a:	d837      	bhi.n	80106bc <UART_SetConfig+0x304>
 801064c:	a201      	add	r2, pc, #4	; (adr r2, 8010654 <UART_SetConfig+0x29c>)
 801064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010652:	bf00      	nop
 8010654:	08010679 	.word	0x08010679
 8010658:	080106bd 	.word	0x080106bd
 801065c:	08010681 	.word	0x08010681
 8010660:	080106bd 	.word	0x080106bd
 8010664:	08010687 	.word	0x08010687
 8010668:	080106bd 	.word	0x080106bd
 801066c:	080106bd 	.word	0x080106bd
 8010670:	080106bd 	.word	0x080106bd
 8010674:	0801068f 	.word	0x0801068f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010678:	f7fc fa0e 	bl	800ca98 <HAL_RCC_GetPCLK1Freq>
 801067c:	6178      	str	r0, [r7, #20]
        break;
 801067e:	e022      	b.n	80106c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010680:	4b0d      	ldr	r3, [pc, #52]	; (80106b8 <UART_SetConfig+0x300>)
 8010682:	617b      	str	r3, [r7, #20]
        break;
 8010684:	e01f      	b.n	80106c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010686:	f7fc f96f 	bl	800c968 <HAL_RCC_GetSysClockFreq>
 801068a:	6178      	str	r0, [r7, #20]
        break;
 801068c:	e01b      	b.n	80106c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801068e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010692:	617b      	str	r3, [r7, #20]
        break;
 8010694:	e017      	b.n	80106c6 <UART_SetConfig+0x30e>
 8010696:	bf00      	nop
 8010698:	efff69f3 	.word	0xefff69f3
 801069c:	40008000 	.word	0x40008000
 80106a0:	40013800 	.word	0x40013800
 80106a4:	40021000 	.word	0x40021000
 80106a8:	40004400 	.word	0x40004400
 80106ac:	40004800 	.word	0x40004800
 80106b0:	40004c00 	.word	0x40004c00
 80106b4:	40005000 	.word	0x40005000
 80106b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80106bc:	2300      	movs	r3, #0
 80106be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80106c0:	2301      	movs	r3, #1
 80106c2:	76bb      	strb	r3, [r7, #26]
        break;
 80106c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f000 80f1 	beq.w	80108b0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	685a      	ldr	r2, [r3, #4]
 80106d2:	4613      	mov	r3, r2
 80106d4:	005b      	lsls	r3, r3, #1
 80106d6:	4413      	add	r3, r2
 80106d8:	697a      	ldr	r2, [r7, #20]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d305      	bcc.n	80106ea <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80106e4:	697a      	ldr	r2, [r7, #20]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d902      	bls.n	80106f0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80106ea:	2301      	movs	r3, #1
 80106ec:	76bb      	strb	r3, [r7, #26]
 80106ee:	e0df      	b.n	80108b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f04f 0100 	mov.w	r1, #0
 80106f8:	f04f 0200 	mov.w	r2, #0
 80106fc:	f04f 0300 	mov.w	r3, #0
 8010700:	020b      	lsls	r3, r1, #8
 8010702:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010706:	0202      	lsls	r2, r0, #8
 8010708:	6879      	ldr	r1, [r7, #4]
 801070a:	6849      	ldr	r1, [r1, #4]
 801070c:	0849      	lsrs	r1, r1, #1
 801070e:	4608      	mov	r0, r1
 8010710:	f04f 0100 	mov.w	r1, #0
 8010714:	1814      	adds	r4, r2, r0
 8010716:	eb43 0501 	adc.w	r5, r3, r1
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	461a      	mov	r2, r3
 8010720:	f04f 0300 	mov.w	r3, #0
 8010724:	4620      	mov	r0, r4
 8010726:	4629      	mov	r1, r5
 8010728:	f7f0 fb0e 	bl	8000d48 <__aeabi_uldivmod>
 801072c:	4602      	mov	r2, r0
 801072e:	460b      	mov	r3, r1
 8010730:	4613      	mov	r3, r2
 8010732:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801073a:	d308      	bcc.n	801074e <UART_SetConfig+0x396>
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010742:	d204      	bcs.n	801074e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	60da      	str	r2, [r3, #12]
 801074c:	e0b0      	b.n	80108b0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 801074e:	2301      	movs	r3, #1
 8010750:	76bb      	strb	r3, [r7, #26]
 8010752:	e0ad      	b.n	80108b0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	69db      	ldr	r3, [r3, #28]
 8010758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801075c:	d15c      	bne.n	8010818 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 801075e:	7efb      	ldrb	r3, [r7, #27]
 8010760:	2b08      	cmp	r3, #8
 8010762:	d828      	bhi.n	80107b6 <UART_SetConfig+0x3fe>
 8010764:	a201      	add	r2, pc, #4	; (adr r2, 801076c <UART_SetConfig+0x3b4>)
 8010766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076a:	bf00      	nop
 801076c:	08010791 	.word	0x08010791
 8010770:	08010799 	.word	0x08010799
 8010774:	080107a1 	.word	0x080107a1
 8010778:	080107b7 	.word	0x080107b7
 801077c:	080107a7 	.word	0x080107a7
 8010780:	080107b7 	.word	0x080107b7
 8010784:	080107b7 	.word	0x080107b7
 8010788:	080107b7 	.word	0x080107b7
 801078c:	080107af 	.word	0x080107af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010790:	f7fc f982 	bl	800ca98 <HAL_RCC_GetPCLK1Freq>
 8010794:	6178      	str	r0, [r7, #20]
        break;
 8010796:	e013      	b.n	80107c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010798:	f7fc f994 	bl	800cac4 <HAL_RCC_GetPCLK2Freq>
 801079c:	6178      	str	r0, [r7, #20]
        break;
 801079e:	e00f      	b.n	80107c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80107a0:	4b49      	ldr	r3, [pc, #292]	; (80108c8 <UART_SetConfig+0x510>)
 80107a2:	617b      	str	r3, [r7, #20]
        break;
 80107a4:	e00c      	b.n	80107c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80107a6:	f7fc f8df 	bl	800c968 <HAL_RCC_GetSysClockFreq>
 80107aa:	6178      	str	r0, [r7, #20]
        break;
 80107ac:	e008      	b.n	80107c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80107b2:	617b      	str	r3, [r7, #20]
        break;
 80107b4:	e004      	b.n	80107c0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80107b6:	2300      	movs	r3, #0
 80107b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80107ba:	2301      	movs	r3, #1
 80107bc:	76bb      	strb	r3, [r7, #26]
        break;
 80107be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d074      	beq.n	80108b0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	005a      	lsls	r2, r3, #1
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	085b      	lsrs	r3, r3, #1
 80107d0:	441a      	add	r2, r3
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80107da:	b29b      	uxth	r3, r3
 80107dc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	2b0f      	cmp	r3, #15
 80107e2:	d916      	bls.n	8010812 <UART_SetConfig+0x45a>
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107ea:	d212      	bcs.n	8010812 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	f023 030f 	bic.w	r3, r3, #15
 80107f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	085b      	lsrs	r3, r3, #1
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	f003 0307 	and.w	r3, r3, #7
 8010800:	b29a      	uxth	r2, r3
 8010802:	89fb      	ldrh	r3, [r7, #14]
 8010804:	4313      	orrs	r3, r2
 8010806:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	89fa      	ldrh	r2, [r7, #14]
 801080e:	60da      	str	r2, [r3, #12]
 8010810:	e04e      	b.n	80108b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8010812:	2301      	movs	r3, #1
 8010814:	76bb      	strb	r3, [r7, #26]
 8010816:	e04b      	b.n	80108b0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010818:	7efb      	ldrb	r3, [r7, #27]
 801081a:	2b08      	cmp	r3, #8
 801081c:	d827      	bhi.n	801086e <UART_SetConfig+0x4b6>
 801081e:	a201      	add	r2, pc, #4	; (adr r2, 8010824 <UART_SetConfig+0x46c>)
 8010820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010824:	08010849 	.word	0x08010849
 8010828:	08010851 	.word	0x08010851
 801082c:	08010859 	.word	0x08010859
 8010830:	0801086f 	.word	0x0801086f
 8010834:	0801085f 	.word	0x0801085f
 8010838:	0801086f 	.word	0x0801086f
 801083c:	0801086f 	.word	0x0801086f
 8010840:	0801086f 	.word	0x0801086f
 8010844:	08010867 	.word	0x08010867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010848:	f7fc f926 	bl	800ca98 <HAL_RCC_GetPCLK1Freq>
 801084c:	6178      	str	r0, [r7, #20]
        break;
 801084e:	e013      	b.n	8010878 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010850:	f7fc f938 	bl	800cac4 <HAL_RCC_GetPCLK2Freq>
 8010854:	6178      	str	r0, [r7, #20]
        break;
 8010856:	e00f      	b.n	8010878 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010858:	4b1b      	ldr	r3, [pc, #108]	; (80108c8 <UART_SetConfig+0x510>)
 801085a:	617b      	str	r3, [r7, #20]
        break;
 801085c:	e00c      	b.n	8010878 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801085e:	f7fc f883 	bl	800c968 <HAL_RCC_GetSysClockFreq>
 8010862:	6178      	str	r0, [r7, #20]
        break;
 8010864:	e008      	b.n	8010878 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801086a:	617b      	str	r3, [r7, #20]
        break;
 801086c:	e004      	b.n	8010878 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801086e:	2300      	movs	r3, #0
 8010870:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010872:	2301      	movs	r3, #1
 8010874:	76bb      	strb	r3, [r7, #26]
        break;
 8010876:	bf00      	nop
    }

    if (pclk != 0U)
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d018      	beq.n	80108b0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	085a      	lsrs	r2, r3, #1
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	441a      	add	r2, r3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010890:	b29b      	uxth	r3, r3
 8010892:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	2b0f      	cmp	r3, #15
 8010898:	d908      	bls.n	80108ac <UART_SetConfig+0x4f4>
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108a0:	d204      	bcs.n	80108ac <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	693a      	ldr	r2, [r7, #16]
 80108a8:	60da      	str	r2, [r3, #12]
 80108aa:	e001      	b.n	80108b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80108ac:	2301      	movs	r3, #1
 80108ae:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2200      	movs	r2, #0
 80108b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80108bc:	7ebb      	ldrb	r3, [r7, #26]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3720      	adds	r7, #32
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bdb0      	pop	{r4, r5, r7, pc}
 80108c6:	bf00      	nop
 80108c8:	00f42400 	.word	0x00f42400

080108cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d8:	f003 0301 	and.w	r3, r3, #1
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d00a      	beq.n	80108f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	430a      	orrs	r2, r1
 80108f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108fa:	f003 0302 	and.w	r3, r3, #2
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	430a      	orrs	r2, r1
 8010916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	f003 0304 	and.w	r3, r3, #4
 8010920:	2b00      	cmp	r3, #0
 8010922:	d00a      	beq.n	801093a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	430a      	orrs	r2, r1
 8010938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093e:	f003 0308 	and.w	r3, r3, #8
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00a      	beq.n	801095c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	430a      	orrs	r2, r1
 801095a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010960:	f003 0310 	and.w	r3, r3, #16
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00a      	beq.n	801097e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	430a      	orrs	r2, r1
 801097c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010982:	f003 0320 	and.w	r3, r3, #32
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00a      	beq.n	80109a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	430a      	orrs	r2, r1
 801099e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d01a      	beq.n	80109e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	430a      	orrs	r2, r1
 80109c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80109ca:	d10a      	bne.n	80109e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	430a      	orrs	r2, r1
 80109e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00a      	beq.n	8010a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	430a      	orrs	r2, r1
 8010a02:	605a      	str	r2, [r3, #4]
  }
}
 8010a04:	bf00      	nop
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b086      	sub	sp, #24
 8010a14:	af02      	add	r7, sp, #8
 8010a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a20:	f7f7 f928 	bl	8007c74 <HAL_GetTick>
 8010a24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f003 0308 	and.w	r3, r3, #8
 8010a30:	2b08      	cmp	r3, #8
 8010a32:	d10e      	bne.n	8010a52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 f82d 	bl	8010aa2 <UART_WaitOnFlagUntilTimeout>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d001      	beq.n	8010a52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a4e:	2303      	movs	r3, #3
 8010a50:	e023      	b.n	8010a9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	2b04      	cmp	r3, #4
 8010a5e:	d10e      	bne.n	8010a7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f817 	bl	8010aa2 <UART_WaitOnFlagUntilTimeout>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d001      	beq.n	8010a7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a7a:	2303      	movs	r3, #3
 8010a7c:	e00d      	b.n	8010a9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2220      	movs	r2, #32
 8010a82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2220      	movs	r2, #32
 8010a88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b084      	sub	sp, #16
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	60f8      	str	r0, [r7, #12]
 8010aaa:	60b9      	str	r1, [r7, #8]
 8010aac:	603b      	str	r3, [r7, #0]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ab2:	e05e      	b.n	8010b72 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ab4:	69bb      	ldr	r3, [r7, #24]
 8010ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aba:	d05a      	beq.n	8010b72 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010abc:	f7f7 f8da 	bl	8007c74 <HAL_GetTick>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	1ad3      	subs	r3, r2, r3
 8010ac6:	69ba      	ldr	r2, [r7, #24]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d302      	bcc.n	8010ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d11b      	bne.n	8010b0a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010ae0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	689a      	ldr	r2, [r3, #8]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f022 0201 	bic.w	r2, r2, #1
 8010af0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2220      	movs	r2, #32
 8010af6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2220      	movs	r2, #32
 8010afc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010b06:	2303      	movs	r3, #3
 8010b08:	e043      	b.n	8010b92 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f003 0304 	and.w	r3, r3, #4
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d02c      	beq.n	8010b72 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	69db      	ldr	r3, [r3, #28]
 8010b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b26:	d124      	bne.n	8010b72 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b30:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b40:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	689a      	ldr	r2, [r3, #8]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f022 0201 	bic.w	r2, r2, #1
 8010b50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2220      	movs	r2, #32
 8010b56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2220      	movs	r2, #32
 8010b5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2220      	movs	r2, #32
 8010b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010b6e:	2303      	movs	r3, #3
 8010b70:	e00f      	b.n	8010b92 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	69da      	ldr	r2, [r3, #28]
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	4013      	ands	r3, r2
 8010b7c:	68ba      	ldr	r2, [r7, #8]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	bf0c      	ite	eq
 8010b82:	2301      	moveq	r3, #1
 8010b84:	2300      	movne	r3, #0
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	461a      	mov	r2, r3
 8010b8a:	79fb      	ldrb	r3, [r7, #7]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d091      	beq.n	8010ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b9a:	b480      	push	{r7}
 8010b9c:	b083      	sub	sp, #12
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010bb0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	689a      	ldr	r2, [r3, #8]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f022 0201 	bic.w	r2, r2, #1
 8010bc0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d107      	bne.n	8010bda <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f022 0210 	bic.w	r2, r2, #16
 8010bd8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2220      	movs	r2, #32
 8010bde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010bec:	bf00      	nop
 8010bee:	370c      	adds	r7, #12
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f7ff fbb8 	bl	801038c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c1c:	bf00      	nop
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c3a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2220      	movs	r2, #32
 8010c40:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2200      	movs	r2, #0
 8010c46:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7ff fb95 	bl	8010378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c4e:	bf00      	nop
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010c56:	b480      	push	{r7}
 8010c58:	b083      	sub	sp, #12
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010c5e:	bf00      	nop
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	f107 001c 	add.w	r0, r7, #28
 8010c78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f001 f9cf 	bl	801202c <USB_CoreReset>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d106      	bne.n	8010ca6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8010ca4:	e005      	b.n	8010cb2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010caa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010cbe:	b004      	add	sp, #16
 8010cc0:	4770      	bx	lr
	...

08010cc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b087      	sub	sp, #28
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	60b9      	str	r1, [r7, #8]
 8010cce:	4613      	mov	r3, r2
 8010cd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	2b02      	cmp	r3, #2
 8010cd6:	d165      	bne.n	8010da4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	4a3e      	ldr	r2, [pc, #248]	; (8010dd4 <USB_SetTurnaroundTime+0x110>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d906      	bls.n	8010cee <USB_SetTurnaroundTime+0x2a>
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	4a3d      	ldr	r2, [pc, #244]	; (8010dd8 <USB_SetTurnaroundTime+0x114>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d202      	bcs.n	8010cee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010ce8:	230f      	movs	r3, #15
 8010cea:	617b      	str	r3, [r7, #20]
 8010cec:	e05c      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	4a39      	ldr	r2, [pc, #228]	; (8010dd8 <USB_SetTurnaroundTime+0x114>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d306      	bcc.n	8010d04 <USB_SetTurnaroundTime+0x40>
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	4a38      	ldr	r2, [pc, #224]	; (8010ddc <USB_SetTurnaroundTime+0x118>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d202      	bcs.n	8010d04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010cfe:	230e      	movs	r3, #14
 8010d00:	617b      	str	r3, [r7, #20]
 8010d02:	e051      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	4a35      	ldr	r2, [pc, #212]	; (8010ddc <USB_SetTurnaroundTime+0x118>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d306      	bcc.n	8010d1a <USB_SetTurnaroundTime+0x56>
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	4a34      	ldr	r2, [pc, #208]	; (8010de0 <USB_SetTurnaroundTime+0x11c>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d202      	bcs.n	8010d1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010d14:	230d      	movs	r3, #13
 8010d16:	617b      	str	r3, [r7, #20]
 8010d18:	e046      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	4a30      	ldr	r2, [pc, #192]	; (8010de0 <USB_SetTurnaroundTime+0x11c>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d306      	bcc.n	8010d30 <USB_SetTurnaroundTime+0x6c>
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	4a2f      	ldr	r2, [pc, #188]	; (8010de4 <USB_SetTurnaroundTime+0x120>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d802      	bhi.n	8010d30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010d2a:	230c      	movs	r3, #12
 8010d2c:	617b      	str	r3, [r7, #20]
 8010d2e:	e03b      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	4a2c      	ldr	r2, [pc, #176]	; (8010de4 <USB_SetTurnaroundTime+0x120>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d906      	bls.n	8010d46 <USB_SetTurnaroundTime+0x82>
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	4a2b      	ldr	r2, [pc, #172]	; (8010de8 <USB_SetTurnaroundTime+0x124>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d802      	bhi.n	8010d46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010d40:	230b      	movs	r3, #11
 8010d42:	617b      	str	r3, [r7, #20]
 8010d44:	e030      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	4a27      	ldr	r2, [pc, #156]	; (8010de8 <USB_SetTurnaroundTime+0x124>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d906      	bls.n	8010d5c <USB_SetTurnaroundTime+0x98>
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	4a26      	ldr	r2, [pc, #152]	; (8010dec <USB_SetTurnaroundTime+0x128>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d802      	bhi.n	8010d5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010d56:	230a      	movs	r3, #10
 8010d58:	617b      	str	r3, [r7, #20]
 8010d5a:	e025      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	4a23      	ldr	r2, [pc, #140]	; (8010dec <USB_SetTurnaroundTime+0x128>)
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d906      	bls.n	8010d72 <USB_SetTurnaroundTime+0xae>
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	4a22      	ldr	r2, [pc, #136]	; (8010df0 <USB_SetTurnaroundTime+0x12c>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d202      	bcs.n	8010d72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d6c:	2309      	movs	r3, #9
 8010d6e:	617b      	str	r3, [r7, #20]
 8010d70:	e01a      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	4a1e      	ldr	r2, [pc, #120]	; (8010df0 <USB_SetTurnaroundTime+0x12c>)
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d306      	bcc.n	8010d88 <USB_SetTurnaroundTime+0xc4>
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	4a1d      	ldr	r2, [pc, #116]	; (8010df4 <USB_SetTurnaroundTime+0x130>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d802      	bhi.n	8010d88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d82:	2308      	movs	r3, #8
 8010d84:	617b      	str	r3, [r7, #20]
 8010d86:	e00f      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	4a1a      	ldr	r2, [pc, #104]	; (8010df4 <USB_SetTurnaroundTime+0x130>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d906      	bls.n	8010d9e <USB_SetTurnaroundTime+0xda>
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	4a19      	ldr	r2, [pc, #100]	; (8010df8 <USB_SetTurnaroundTime+0x134>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d202      	bcs.n	8010d9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d98:	2307      	movs	r3, #7
 8010d9a:	617b      	str	r3, [r7, #20]
 8010d9c:	e004      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d9e:	2306      	movs	r3, #6
 8010da0:	617b      	str	r3, [r7, #20]
 8010da2:	e001      	b.n	8010da8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010da4:	2309      	movs	r3, #9
 8010da6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	68da      	ldr	r2, [r3, #12]
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	029b      	lsls	r3, r3, #10
 8010dbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010dc0:	431a      	orrs	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	371c      	adds	r7, #28
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr
 8010dd4:	00d8acbf 	.word	0x00d8acbf
 8010dd8:	00e4e1c0 	.word	0x00e4e1c0
 8010ddc:	00f42400 	.word	0x00f42400
 8010de0:	01067380 	.word	0x01067380
 8010de4:	011a499f 	.word	0x011a499f
 8010de8:	01312cff 	.word	0x01312cff
 8010dec:	014ca43f 	.word	0x014ca43f
 8010df0:	016e3600 	.word	0x016e3600
 8010df4:	01a6ab1f 	.word	0x01a6ab1f
 8010df8:	01e84800 	.word	0x01e84800

08010dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	689b      	ldr	r3, [r3, #8]
 8010e08:	f043 0201 	orr.w	r2, r3, #1
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010e10:	2300      	movs	r3, #0
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	370c      	adds	r7, #12
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr

08010e1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010e1e:	b480      	push	{r7}
 8010e20:	b083      	sub	sp, #12
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	689b      	ldr	r3, [r3, #8]
 8010e2a:	f023 0201 	bic.w	r2, r3, #1
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	370c      	adds	r7, #12
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	460b      	mov	r3, r1
 8010e4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e58:	78fb      	ldrb	r3, [r7, #3]
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d106      	bne.n	8010e6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	60da      	str	r2, [r3, #12]
 8010e6a:	e00b      	b.n	8010e84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e6c:	78fb      	ldrb	r3, [r7, #3]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d106      	bne.n	8010e80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	60da      	str	r2, [r3, #12]
 8010e7e:	e001      	b.n	8010e84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010e80:	2301      	movs	r3, #1
 8010e82:	e003      	b.n	8010e8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010e84:	2032      	movs	r0, #50	; 0x32
 8010e86:	f7f6 ff01 	bl	8007c8c <HAL_Delay>

  return HAL_OK;
 8010e8a:	2300      	movs	r3, #0
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e94:	b084      	sub	sp, #16
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b086      	sub	sp, #24
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010eae:	2300      	movs	r3, #0
 8010eb0:	613b      	str	r3, [r7, #16]
 8010eb2:	e009      	b.n	8010ec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	3340      	adds	r3, #64	; 0x40
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	4413      	add	r3, r2
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	613b      	str	r3, [r7, #16]
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	2b0e      	cmp	r3, #14
 8010ecc:	d9f2      	bls.n	8010eb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d11c      	bne.n	8010f0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	68fa      	ldr	r2, [r7, #12]
 8010ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ee2:	f043 0302 	orr.w	r3, r3, #2
 8010ee6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	601a      	str	r2, [r3, #0]
 8010f0c:	e005      	b.n	8010f1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f20:	461a      	mov	r2, r3
 8010f22:	2300      	movs	r3, #0
 8010f24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f34:	461a      	mov	r2, r3
 8010f36:	680b      	ldr	r3, [r1, #0]
 8010f38:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010f3a:	2103      	movs	r1, #3
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f000 f93d 	bl	80111bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f42:	2110      	movs	r1, #16
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f8f1 	bl	801112c <USB_FlushTxFifo>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d001      	beq.n	8010f54 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010f50:	2301      	movs	r3, #1
 8010f52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f90f 	bl	8011178 <USB_FlushRxFifo>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d001      	beq.n	8010f64 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010f60:	2301      	movs	r3, #1
 8010f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f76:	461a      	mov	r2, r3
 8010f78:	2300      	movs	r3, #0
 8010f7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f82:	461a      	mov	r2, r3
 8010f84:	2300      	movs	r3, #0
 8010f86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f88:	2300      	movs	r3, #0
 8010f8a:	613b      	str	r3, [r7, #16]
 8010f8c:	e043      	b.n	8011016 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	015a      	lsls	r2, r3, #5
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	4413      	add	r3, r2
 8010f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fa4:	d118      	bne.n	8010fd8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10a      	bne.n	8010fc2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	015a      	lsls	r2, r3, #5
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb8:	461a      	mov	r2, r3
 8010fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010fbe:	6013      	str	r3, [r2, #0]
 8010fc0:	e013      	b.n	8010fea <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	015a      	lsls	r2, r3, #5
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	4413      	add	r3, r2
 8010fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fce:	461a      	mov	r2, r3
 8010fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010fd4:	6013      	str	r3, [r2, #0]
 8010fd6:	e008      	b.n	8010fea <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	015a      	lsls	r2, r3, #5
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	4413      	add	r3, r2
 8010fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	015a      	lsls	r2, r3, #5
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	015a      	lsls	r2, r3, #5
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	4413      	add	r3, r2
 8011004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011008:	461a      	mov	r2, r3
 801100a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801100e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	3301      	adds	r3, #1
 8011014:	613b      	str	r3, [r7, #16]
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	693a      	ldr	r2, [r7, #16]
 801101a:	429a      	cmp	r2, r3
 801101c:	d3b7      	bcc.n	8010f8e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801101e:	2300      	movs	r3, #0
 8011020:	613b      	str	r3, [r7, #16]
 8011022:	e043      	b.n	80110ac <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	015a      	lsls	r2, r3, #5
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	4413      	add	r3, r2
 801102c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801103a:	d118      	bne.n	801106e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d10a      	bne.n	8011058 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	015a      	lsls	r2, r3, #5
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	4413      	add	r3, r2
 801104a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801104e:	461a      	mov	r2, r3
 8011050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011054:	6013      	str	r3, [r2, #0]
 8011056:	e013      	b.n	8011080 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	015a      	lsls	r2, r3, #5
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	4413      	add	r3, r2
 8011060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011064:	461a      	mov	r2, r3
 8011066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801106a:	6013      	str	r3, [r2, #0]
 801106c:	e008      	b.n	8011080 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	015a      	lsls	r2, r3, #5
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	4413      	add	r3, r2
 8011076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801107a:	461a      	mov	r2, r3
 801107c:	2300      	movs	r3, #0
 801107e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	015a      	lsls	r2, r3, #5
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	4413      	add	r3, r2
 8011088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801108c:	461a      	mov	r2, r3
 801108e:	2300      	movs	r3, #0
 8011090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	015a      	lsls	r2, r3, #5
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	4413      	add	r3, r2
 801109a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801109e:	461a      	mov	r2, r3
 80110a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80110a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	3301      	adds	r3, #1
 80110aa:	613b      	str	r3, [r7, #16]
 80110ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ae:	693a      	ldr	r2, [r7, #16]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d3b7      	bcc.n	8011024 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110ba:	691b      	ldr	r3, [r3, #16]
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80110c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80110d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	699b      	ldr	r3, [r3, #24]
 80110da:	f043 0210 	orr.w	r2, r3, #16
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	699a      	ldr	r2, [r3, #24]
 80110e6:	4b10      	ldr	r3, [pc, #64]	; (8011128 <USB_DevInit+0x294>)
 80110e8:	4313      	orrs	r3, r2
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80110ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d005      	beq.n	8011100 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	699b      	ldr	r3, [r3, #24]
 80110f8:	f043 0208 	orr.w	r2, r3, #8
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011102:	2b01      	cmp	r3, #1
 8011104:	d107      	bne.n	8011116 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	699b      	ldr	r3, [r3, #24]
 801110a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801110e:	f043 0304 	orr.w	r3, r3, #4
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011116:	7dfb      	ldrb	r3, [r7, #23]
}
 8011118:	4618      	mov	r0, r3
 801111a:	3718      	adds	r7, #24
 801111c:	46bd      	mov	sp, r7
 801111e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011122:	b004      	add	sp, #16
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	803c3800 	.word	0x803c3800

0801112c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801112c:	b480      	push	{r7}
 801112e:	b085      	sub	sp, #20
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011136:	2300      	movs	r3, #0
 8011138:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	019b      	lsls	r3, r3, #6
 801113e:	f043 0220 	orr.w	r2, r3, #32
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	3301      	adds	r3, #1
 801114a:	60fb      	str	r3, [r7, #12]
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	4a09      	ldr	r2, [pc, #36]	; (8011174 <USB_FlushTxFifo+0x48>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d901      	bls.n	8011158 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011154:	2303      	movs	r3, #3
 8011156:	e006      	b.n	8011166 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	f003 0320 	and.w	r3, r3, #32
 8011160:	2b20      	cmp	r3, #32
 8011162:	d0f0      	beq.n	8011146 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	3714      	adds	r7, #20
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	00030d40 	.word	0x00030d40

08011178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011178:	b480      	push	{r7}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011180:	2300      	movs	r3, #0
 8011182:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2210      	movs	r2, #16
 8011188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	3301      	adds	r3, #1
 801118e:	60fb      	str	r3, [r7, #12]
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	4a09      	ldr	r2, [pc, #36]	; (80111b8 <USB_FlushRxFifo+0x40>)
 8011194:	4293      	cmp	r3, r2
 8011196:	d901      	bls.n	801119c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011198:	2303      	movs	r3, #3
 801119a:	e006      	b.n	80111aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	691b      	ldr	r3, [r3, #16]
 80111a0:	f003 0310 	and.w	r3, r3, #16
 80111a4:	2b10      	cmp	r3, #16
 80111a6:	d0f0      	beq.n	801118a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	00030d40 	.word	0x00030d40

080111bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	460b      	mov	r3, r1
 80111c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	78fb      	ldrb	r3, [r7, #3]
 80111d6:	68f9      	ldr	r1, [r7, #12]
 80111d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111dc:	4313      	orrs	r3, r2
 80111de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80111e0:	2300      	movs	r3, #0
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3714      	adds	r7, #20
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr

080111ee <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80111ee:	b480      	push	{r7}
 80111f0:	b087      	sub	sp, #28
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	f003 0306 	and.w	r3, r3, #6
 8011206:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2b02      	cmp	r3, #2
 801120c:	d002      	beq.n	8011214 <USB_GetDevSpeed+0x26>
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2b06      	cmp	r3, #6
 8011212:	d102      	bne.n	801121a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011214:	2302      	movs	r3, #2
 8011216:	75fb      	strb	r3, [r7, #23]
 8011218:	e001      	b.n	801121e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801121a:	230f      	movs	r3, #15
 801121c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801121e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011220:	4618      	mov	r0, r3
 8011222:	371c      	adds	r7, #28
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	785b      	ldrb	r3, [r3, #1]
 8011244:	2b01      	cmp	r3, #1
 8011246:	d13a      	bne.n	80112be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801124e:	69da      	ldr	r2, [r3, #28]
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	f003 030f 	and.w	r3, r3, #15
 8011258:	2101      	movs	r1, #1
 801125a:	fa01 f303 	lsl.w	r3, r1, r3
 801125e:	b29b      	uxth	r3, r3
 8011260:	68f9      	ldr	r1, [r7, #12]
 8011262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011266:	4313      	orrs	r3, r2
 8011268:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	015a      	lsls	r2, r3, #5
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	4413      	add	r3, r2
 8011272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d155      	bne.n	801132c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	015a      	lsls	r2, r3, #5
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	4413      	add	r3, r2
 8011288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	689b      	ldr	r3, [r3, #8]
 8011292:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	78db      	ldrb	r3, [r3, #3]
 801129a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801129c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	059b      	lsls	r3, r3, #22
 80112a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112a4:	4313      	orrs	r3, r2
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	0151      	lsls	r1, r2, #5
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	440a      	add	r2, r1
 80112ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112ba:	6013      	str	r3, [r2, #0]
 80112bc:	e036      	b.n	801132c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112c4:	69da      	ldr	r2, [r3, #28]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	f003 030f 	and.w	r3, r3, #15
 80112ce:	2101      	movs	r1, #1
 80112d0:	fa01 f303 	lsl.w	r3, r1, r3
 80112d4:	041b      	lsls	r3, r3, #16
 80112d6:	68f9      	ldr	r1, [r7, #12]
 80112d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112dc:	4313      	orrs	r3, r2
 80112de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	015a      	lsls	r2, r3, #5
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	4413      	add	r3, r2
 80112e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d11a      	bne.n	801132c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	015a      	lsls	r2, r3, #5
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	4413      	add	r3, r2
 80112fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	78db      	ldrb	r3, [r3, #3]
 8011310:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011312:	430b      	orrs	r3, r1
 8011314:	4313      	orrs	r3, r2
 8011316:	68ba      	ldr	r2, [r7, #8]
 8011318:	0151      	lsls	r1, r2, #5
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	440a      	add	r2, r1
 801131e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801132a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801132c:	2300      	movs	r3, #0
}
 801132e:	4618      	mov	r0, r3
 8011330:	3714      	adds	r7, #20
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
	...

0801133c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	785b      	ldrb	r3, [r3, #1]
 8011354:	2b01      	cmp	r3, #1
 8011356:	d161      	bne.n	801141c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	015a      	lsls	r2, r3, #5
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	4413      	add	r3, r2
 8011360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801136a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801136e:	d11f      	bne.n	80113b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	015a      	lsls	r2, r3, #5
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	4413      	add	r3, r2
 8011378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	68ba      	ldr	r2, [r7, #8]
 8011380:	0151      	lsls	r1, r2, #5
 8011382:	68fa      	ldr	r2, [r7, #12]
 8011384:	440a      	add	r2, r1
 8011386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801138a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801138e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	015a      	lsls	r2, r3, #5
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	4413      	add	r3, r2
 8011398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	0151      	lsls	r1, r2, #5
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	440a      	add	r2, r1
 80113a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	f003 030f 	and.w	r3, r3, #15
 80113c0:	2101      	movs	r1, #1
 80113c2:	fa01 f303 	lsl.w	r3, r1, r3
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	43db      	mvns	r3, r3
 80113ca:	68f9      	ldr	r1, [r7, #12]
 80113cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113d0:	4013      	ands	r3, r2
 80113d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113da:	69da      	ldr	r2, [r3, #28]
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	f003 030f 	and.w	r3, r3, #15
 80113e4:	2101      	movs	r1, #1
 80113e6:	fa01 f303 	lsl.w	r3, r1, r3
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	43db      	mvns	r3, r3
 80113ee:	68f9      	ldr	r1, [r7, #12]
 80113f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113f4:	4013      	ands	r3, r2
 80113f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	015a      	lsls	r2, r3, #5
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	4413      	add	r3, r2
 8011400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	0159      	lsls	r1, r3, #5
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	440b      	add	r3, r1
 801140e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011412:	4619      	mov	r1, r3
 8011414:	4b35      	ldr	r3, [pc, #212]	; (80114ec <USB_DeactivateEndpoint+0x1b0>)
 8011416:	4013      	ands	r3, r2
 8011418:	600b      	str	r3, [r1, #0]
 801141a:	e060      	b.n	80114de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	015a      	lsls	r2, r3, #5
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	4413      	add	r3, r2
 8011424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801142e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011432:	d11f      	bne.n	8011474 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	015a      	lsls	r2, r3, #5
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	4413      	add	r3, r2
 801143c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	68ba      	ldr	r2, [r7, #8]
 8011444:	0151      	lsls	r1, r2, #5
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	440a      	add	r2, r1
 801144a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801144e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011452:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	015a      	lsls	r2, r3, #5
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	4413      	add	r3, r2
 801145c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	68ba      	ldr	r2, [r7, #8]
 8011464:	0151      	lsls	r1, r2, #5
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	440a      	add	r2, r1
 801146a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801146e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801147a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f003 030f 	and.w	r3, r3, #15
 8011484:	2101      	movs	r1, #1
 8011486:	fa01 f303 	lsl.w	r3, r1, r3
 801148a:	041b      	lsls	r3, r3, #16
 801148c:	43db      	mvns	r3, r3
 801148e:	68f9      	ldr	r1, [r7, #12]
 8011490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011494:	4013      	ands	r3, r2
 8011496:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801149e:	69da      	ldr	r2, [r3, #28]
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	f003 030f 	and.w	r3, r3, #15
 80114a8:	2101      	movs	r1, #1
 80114aa:	fa01 f303 	lsl.w	r3, r1, r3
 80114ae:	041b      	lsls	r3, r3, #16
 80114b0:	43db      	mvns	r3, r3
 80114b2:	68f9      	ldr	r1, [r7, #12]
 80114b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80114b8:	4013      	ands	r3, r2
 80114ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	015a      	lsls	r2, r3, #5
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	4413      	add	r3, r2
 80114c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	0159      	lsls	r1, r3, #5
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	440b      	add	r3, r1
 80114d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114d6:	4619      	mov	r1, r3
 80114d8:	4b05      	ldr	r3, [pc, #20]	; (80114f0 <USB_DeactivateEndpoint+0x1b4>)
 80114da:	4013      	ands	r3, r2
 80114dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3714      	adds	r7, #20
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	ec337800 	.word	0xec337800
 80114f0:	eff37800 	.word	0xeff37800

080114f4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b086      	sub	sp, #24
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	785b      	ldrb	r3, [r3, #1]
 801150c:	2b01      	cmp	r3, #1
 801150e:	f040 810a 	bne.w	8011726 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	695b      	ldr	r3, [r3, #20]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d132      	bne.n	8011580 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	015a      	lsls	r2, r3, #5
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	4413      	add	r3, r2
 8011522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011526:	691b      	ldr	r3, [r3, #16]
 8011528:	693a      	ldr	r2, [r7, #16]
 801152a:	0151      	lsls	r1, r2, #5
 801152c:	697a      	ldr	r2, [r7, #20]
 801152e:	440a      	add	r2, r1
 8011530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801153c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	015a      	lsls	r2, r3, #5
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	4413      	add	r3, r2
 8011546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801154a:	691b      	ldr	r3, [r3, #16]
 801154c:	693a      	ldr	r2, [r7, #16]
 801154e:	0151      	lsls	r1, r2, #5
 8011550:	697a      	ldr	r2, [r7, #20]
 8011552:	440a      	add	r2, r1
 8011554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801155c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	015a      	lsls	r2, r3, #5
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	4413      	add	r3, r2
 8011566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801156a:	691b      	ldr	r3, [r3, #16]
 801156c:	693a      	ldr	r2, [r7, #16]
 801156e:	0151      	lsls	r1, r2, #5
 8011570:	697a      	ldr	r2, [r7, #20]
 8011572:	440a      	add	r2, r1
 8011574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011578:	0cdb      	lsrs	r3, r3, #19
 801157a:	04db      	lsls	r3, r3, #19
 801157c:	6113      	str	r3, [r2, #16]
 801157e:	e074      	b.n	801166a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	015a      	lsls	r2, r3, #5
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	4413      	add	r3, r2
 8011588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801158c:	691b      	ldr	r3, [r3, #16]
 801158e:	693a      	ldr	r2, [r7, #16]
 8011590:	0151      	lsls	r1, r2, #5
 8011592:	697a      	ldr	r2, [r7, #20]
 8011594:	440a      	add	r2, r1
 8011596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801159a:	0cdb      	lsrs	r3, r3, #19
 801159c:	04db      	lsls	r3, r3, #19
 801159e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	015a      	lsls	r2, r3, #5
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	4413      	add	r3, r2
 80115a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	693a      	ldr	r2, [r7, #16]
 80115b0:	0151      	lsls	r1, r2, #5
 80115b2:	697a      	ldr	r2, [r7, #20]
 80115b4:	440a      	add	r2, r1
 80115b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80115be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80115c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	015a      	lsls	r2, r3, #5
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	4413      	add	r3, r2
 80115cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115d0:	691a      	ldr	r2, [r3, #16]
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	6959      	ldr	r1, [r3, #20]
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	440b      	add	r3, r1
 80115dc:	1e59      	subs	r1, r3, #1
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80115e6:	04d9      	lsls	r1, r3, #19
 80115e8:	4baf      	ldr	r3, [pc, #700]	; (80118a8 <USB_EPStartXfer+0x3b4>)
 80115ea:	400b      	ands	r3, r1
 80115ec:	6939      	ldr	r1, [r7, #16]
 80115ee:	0148      	lsls	r0, r1, #5
 80115f0:	6979      	ldr	r1, [r7, #20]
 80115f2:	4401      	add	r1, r0
 80115f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115f8:	4313      	orrs	r3, r2
 80115fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	015a      	lsls	r2, r3, #5
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	4413      	add	r3, r2
 8011604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011608:	691a      	ldr	r2, [r3, #16]
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011612:	6939      	ldr	r1, [r7, #16]
 8011614:	0148      	lsls	r0, r1, #5
 8011616:	6979      	ldr	r1, [r7, #20]
 8011618:	4401      	add	r1, r0
 801161a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801161e:	4313      	orrs	r3, r2
 8011620:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	78db      	ldrb	r3, [r3, #3]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d11f      	bne.n	801166a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	015a      	lsls	r2, r3, #5
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	4413      	add	r3, r2
 8011632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	693a      	ldr	r2, [r7, #16]
 801163a:	0151      	lsls	r1, r2, #5
 801163c:	697a      	ldr	r2, [r7, #20]
 801163e:	440a      	add	r2, r1
 8011640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011644:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011648:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	015a      	lsls	r2, r3, #5
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	4413      	add	r3, r2
 8011652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011656:	691b      	ldr	r3, [r3, #16]
 8011658:	693a      	ldr	r2, [r7, #16]
 801165a:	0151      	lsls	r1, r2, #5
 801165c:	697a      	ldr	r2, [r7, #20]
 801165e:	440a      	add	r2, r1
 8011660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011668:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	015a      	lsls	r2, r3, #5
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	4413      	add	r3, r2
 8011672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	693a      	ldr	r2, [r7, #16]
 801167a:	0151      	lsls	r1, r2, #5
 801167c:	697a      	ldr	r2, [r7, #20]
 801167e:	440a      	add	r2, r1
 8011680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011688:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	78db      	ldrb	r3, [r3, #3]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d015      	beq.n	80116be <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	695b      	ldr	r3, [r3, #20]
 8011696:	2b00      	cmp	r3, #0
 8011698:	f000 8100 	beq.w	801189c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	f003 030f 	and.w	r3, r3, #15
 80116ac:	2101      	movs	r1, #1
 80116ae:	fa01 f303 	lsl.w	r3, r1, r3
 80116b2:	6979      	ldr	r1, [r7, #20]
 80116b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80116b8:	4313      	orrs	r3, r2
 80116ba:	634b      	str	r3, [r1, #52]	; 0x34
 80116bc:	e0ee      	b.n	801189c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d110      	bne.n	80116f0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	015a      	lsls	r2, r3, #5
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	4413      	add	r3, r2
 80116d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	693a      	ldr	r2, [r7, #16]
 80116de:	0151      	lsls	r1, r2, #5
 80116e0:	697a      	ldr	r2, [r7, #20]
 80116e2:	440a      	add	r2, r1
 80116e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	e00f      	b.n	8011710 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	015a      	lsls	r2, r3, #5
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	4413      	add	r3, r2
 80116f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	693a      	ldr	r2, [r7, #16]
 8011700:	0151      	lsls	r1, r2, #5
 8011702:	697a      	ldr	r2, [r7, #20]
 8011704:	440a      	add	r2, r1
 8011706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801170a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801170e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	68d9      	ldr	r1, [r3, #12]
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	781a      	ldrb	r2, [r3, #0]
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	695b      	ldr	r3, [r3, #20]
 801171c:	b29b      	uxth	r3, r3
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f000 f9e2 	bl	8011ae8 <USB_WritePacket>
 8011724:	e0ba      	b.n	801189c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	015a      	lsls	r2, r3, #5
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	4413      	add	r3, r2
 801172e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011732:	691b      	ldr	r3, [r3, #16]
 8011734:	693a      	ldr	r2, [r7, #16]
 8011736:	0151      	lsls	r1, r2, #5
 8011738:	697a      	ldr	r2, [r7, #20]
 801173a:	440a      	add	r2, r1
 801173c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011740:	0cdb      	lsrs	r3, r3, #19
 8011742:	04db      	lsls	r3, r3, #19
 8011744:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	015a      	lsls	r2, r3, #5
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	4413      	add	r3, r2
 801174e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011752:	691b      	ldr	r3, [r3, #16]
 8011754:	693a      	ldr	r2, [r7, #16]
 8011756:	0151      	lsls	r1, r2, #5
 8011758:	697a      	ldr	r2, [r7, #20]
 801175a:	440a      	add	r2, r1
 801175c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011768:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	695b      	ldr	r3, [r3, #20]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d123      	bne.n	80117ba <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	015a      	lsls	r2, r3, #5
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	4413      	add	r3, r2
 801177a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801177e:	691a      	ldr	r2, [r3, #16]
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011788:	6939      	ldr	r1, [r7, #16]
 801178a:	0148      	lsls	r0, r1, #5
 801178c:	6979      	ldr	r1, [r7, #20]
 801178e:	4401      	add	r1, r0
 8011790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011794:	4313      	orrs	r3, r2
 8011796:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	015a      	lsls	r2, r3, #5
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	4413      	add	r3, r2
 80117a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117a4:	691b      	ldr	r3, [r3, #16]
 80117a6:	693a      	ldr	r2, [r7, #16]
 80117a8:	0151      	lsls	r1, r2, #5
 80117aa:	697a      	ldr	r2, [r7, #20]
 80117ac:	440a      	add	r2, r1
 80117ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80117b6:	6113      	str	r3, [r2, #16]
 80117b8:	e033      	b.n	8011822 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	695a      	ldr	r2, [r3, #20]
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	4413      	add	r3, r2
 80117c4:	1e5a      	subs	r2, r3, #1
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	689b      	ldr	r3, [r3, #8]
 80117ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80117ce:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	015a      	lsls	r2, r3, #5
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	4413      	add	r3, r2
 80117d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117dc:	691a      	ldr	r2, [r3, #16]
 80117de:	89fb      	ldrh	r3, [r7, #14]
 80117e0:	04d9      	lsls	r1, r3, #19
 80117e2:	4b31      	ldr	r3, [pc, #196]	; (80118a8 <USB_EPStartXfer+0x3b4>)
 80117e4:	400b      	ands	r3, r1
 80117e6:	6939      	ldr	r1, [r7, #16]
 80117e8:	0148      	lsls	r0, r1, #5
 80117ea:	6979      	ldr	r1, [r7, #20]
 80117ec:	4401      	add	r1, r0
 80117ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80117f2:	4313      	orrs	r3, r2
 80117f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	015a      	lsls	r2, r3, #5
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	4413      	add	r3, r2
 80117fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011802:	691a      	ldr	r2, [r3, #16]
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	689b      	ldr	r3, [r3, #8]
 8011808:	89f9      	ldrh	r1, [r7, #14]
 801180a:	fb01 f303 	mul.w	r3, r1, r3
 801180e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011812:	6939      	ldr	r1, [r7, #16]
 8011814:	0148      	lsls	r0, r1, #5
 8011816:	6979      	ldr	r1, [r7, #20]
 8011818:	4401      	add	r1, r0
 801181a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801181e:	4313      	orrs	r3, r2
 8011820:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	78db      	ldrb	r3, [r3, #3]
 8011826:	2b01      	cmp	r3, #1
 8011828:	d128      	bne.n	801187c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011836:	2b00      	cmp	r3, #0
 8011838:	d110      	bne.n	801185c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	015a      	lsls	r2, r3, #5
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	4413      	add	r3, r2
 8011842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	693a      	ldr	r2, [r7, #16]
 801184a:	0151      	lsls	r1, r2, #5
 801184c:	697a      	ldr	r2, [r7, #20]
 801184e:	440a      	add	r2, r1
 8011850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011858:	6013      	str	r3, [r2, #0]
 801185a:	e00f      	b.n	801187c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	015a      	lsls	r2, r3, #5
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	4413      	add	r3, r2
 8011864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	693a      	ldr	r2, [r7, #16]
 801186c:	0151      	lsls	r1, r2, #5
 801186e:	697a      	ldr	r2, [r7, #20]
 8011870:	440a      	add	r2, r1
 8011872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801187a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	015a      	lsls	r2, r3, #5
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	4413      	add	r3, r2
 8011884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	693a      	ldr	r2, [r7, #16]
 801188c:	0151      	lsls	r1, r2, #5
 801188e:	697a      	ldr	r2, [r7, #20]
 8011890:	440a      	add	r2, r1
 8011892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801189a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801189c:	2300      	movs	r3, #0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3718      	adds	r7, #24
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	1ff80000 	.word	0x1ff80000

080118ac <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	785b      	ldrb	r3, [r3, #1]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	f040 80ab 	bne.w	8011a20 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	695b      	ldr	r3, [r3, #20]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d132      	bne.n	8011938 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	015a      	lsls	r2, r3, #5
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	4413      	add	r3, r2
 80118da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118de:	691b      	ldr	r3, [r3, #16]
 80118e0:	68ba      	ldr	r2, [r7, #8]
 80118e2:	0151      	lsls	r1, r2, #5
 80118e4:	68fa      	ldr	r2, [r7, #12]
 80118e6:	440a      	add	r2, r1
 80118e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80118f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80118f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	015a      	lsls	r2, r3, #5
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	4413      	add	r3, r2
 80118fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011902:	691b      	ldr	r3, [r3, #16]
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	0151      	lsls	r1, r2, #5
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	440a      	add	r2, r1
 801190c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011914:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	015a      	lsls	r2, r3, #5
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	4413      	add	r3, r2
 801191e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011922:	691b      	ldr	r3, [r3, #16]
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	0151      	lsls	r1, r2, #5
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	440a      	add	r2, r1
 801192c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011930:	0cdb      	lsrs	r3, r3, #19
 8011932:	04db      	lsls	r3, r3, #19
 8011934:	6113      	str	r3, [r2, #16]
 8011936:	e04e      	b.n	80119d6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	015a      	lsls	r2, r3, #5
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	4413      	add	r3, r2
 8011940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	68ba      	ldr	r2, [r7, #8]
 8011948:	0151      	lsls	r1, r2, #5
 801194a:	68fa      	ldr	r2, [r7, #12]
 801194c:	440a      	add	r2, r1
 801194e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011952:	0cdb      	lsrs	r3, r3, #19
 8011954:	04db      	lsls	r3, r3, #19
 8011956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	015a      	lsls	r2, r3, #5
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	4413      	add	r3, r2
 8011960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	68ba      	ldr	r2, [r7, #8]
 8011968:	0151      	lsls	r1, r2, #5
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	440a      	add	r2, r1
 801196e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011972:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011976:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801197a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	695a      	ldr	r2, [r3, #20]
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	689b      	ldr	r3, [r3, #8]
 8011984:	429a      	cmp	r2, r3
 8011986:	d903      	bls.n	8011990 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	689a      	ldr	r2, [r3, #8]
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	015a      	lsls	r2, r3, #5
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	4413      	add	r3, r2
 8011998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801199c:	691b      	ldr	r3, [r3, #16]
 801199e:	68ba      	ldr	r2, [r7, #8]
 80119a0:	0151      	lsls	r1, r2, #5
 80119a2:	68fa      	ldr	r2, [r7, #12]
 80119a4:	440a      	add	r2, r1
 80119a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	015a      	lsls	r2, r3, #5
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	4413      	add	r3, r2
 80119b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119bc:	691a      	ldr	r2, [r3, #16]
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	695b      	ldr	r3, [r3, #20]
 80119c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119c6:	68b9      	ldr	r1, [r7, #8]
 80119c8:	0148      	lsls	r0, r1, #5
 80119ca:	68f9      	ldr	r1, [r7, #12]
 80119cc:	4401      	add	r1, r0
 80119ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80119d2:	4313      	orrs	r3, r2
 80119d4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	015a      	lsls	r2, r3, #5
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	4413      	add	r3, r2
 80119de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	68ba      	ldr	r2, [r7, #8]
 80119e6:	0151      	lsls	r1, r2, #5
 80119e8:	68fa      	ldr	r2, [r7, #12]
 80119ea:	440a      	add	r2, r1
 80119ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80119f4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	695b      	ldr	r3, [r3, #20]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d06d      	beq.n	8011ada <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	f003 030f 	and.w	r3, r3, #15
 8011a0e:	2101      	movs	r1, #1
 8011a10:	fa01 f303 	lsl.w	r3, r1, r3
 8011a14:	68f9      	ldr	r1, [r7, #12]
 8011a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	634b      	str	r3, [r1, #52]	; 0x34
 8011a1e:	e05c      	b.n	8011ada <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	015a      	lsls	r2, r3, #5
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	4413      	add	r3, r2
 8011a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a2c:	691b      	ldr	r3, [r3, #16]
 8011a2e:	68ba      	ldr	r2, [r7, #8]
 8011a30:	0151      	lsls	r1, r2, #5
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	440a      	add	r2, r1
 8011a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a3a:	0cdb      	lsrs	r3, r3, #19
 8011a3c:	04db      	lsls	r3, r3, #19
 8011a3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	015a      	lsls	r2, r3, #5
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	4413      	add	r3, r2
 8011a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a4c:	691b      	ldr	r3, [r3, #16]
 8011a4e:	68ba      	ldr	r2, [r7, #8]
 8011a50:	0151      	lsls	r1, r2, #5
 8011a52:	68fa      	ldr	r2, [r7, #12]
 8011a54:	440a      	add	r2, r1
 8011a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011a5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011a62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	695b      	ldr	r3, [r3, #20]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d003      	beq.n	8011a74 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	689a      	ldr	r2, [r3, #8]
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	015a      	lsls	r2, r3, #5
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a80:	691b      	ldr	r3, [r3, #16]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	0151      	lsls	r1, r2, #5
 8011a86:	68fa      	ldr	r2, [r7, #12]
 8011a88:	440a      	add	r2, r1
 8011a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	015a      	lsls	r2, r3, #5
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aa0:	691a      	ldr	r2, [r3, #16]
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011aaa:	68b9      	ldr	r1, [r7, #8]
 8011aac:	0148      	lsls	r0, r1, #5
 8011aae:	68f9      	ldr	r1, [r7, #12]
 8011ab0:	4401      	add	r1, r0
 8011ab2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	015a      	lsls	r2, r3, #5
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	68ba      	ldr	r2, [r7, #8]
 8011aca:	0151      	lsls	r1, r2, #5
 8011acc:	68fa      	ldr	r2, [r7, #12]
 8011ace:	440a      	add	r2, r1
 8011ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ad4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ad8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ada:	2300      	movs	r3, #0
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3714      	adds	r7, #20
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr

08011ae8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b089      	sub	sp, #36	; 0x24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	4611      	mov	r1, r2
 8011af4:	461a      	mov	r2, r3
 8011af6:	460b      	mov	r3, r1
 8011af8:	71fb      	strb	r3, [r7, #7]
 8011afa:	4613      	mov	r3, r2
 8011afc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011b06:	88bb      	ldrh	r3, [r7, #4]
 8011b08:	3303      	adds	r3, #3
 8011b0a:	089b      	lsrs	r3, r3, #2
 8011b0c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011b0e:	2300      	movs	r3, #0
 8011b10:	61bb      	str	r3, [r7, #24]
 8011b12:	e00f      	b.n	8011b34 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011b14:	79fb      	ldrb	r3, [r7, #7]
 8011b16:	031a      	lsls	r2, r3, #12
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	4413      	add	r3, r2
 8011b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b20:	461a      	mov	r2, r3
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	3304      	adds	r3, #4
 8011b2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	3301      	adds	r3, #1
 8011b32:	61bb      	str	r3, [r7, #24]
 8011b34:	69ba      	ldr	r2, [r7, #24]
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d3eb      	bcc.n	8011b14 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3724      	adds	r7, #36	; 0x24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr

08011b4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011b4a:	b480      	push	{r7}
 8011b4c:	b089      	sub	sp, #36	; 0x24
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	60f8      	str	r0, [r7, #12]
 8011b52:	60b9      	str	r1, [r7, #8]
 8011b54:	4613      	mov	r3, r2
 8011b56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011b60:	88fb      	ldrh	r3, [r7, #6]
 8011b62:	3303      	adds	r3, #3
 8011b64:	089b      	lsrs	r3, r3, #2
 8011b66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011b68:	2300      	movs	r3, #0
 8011b6a:	61bb      	str	r3, [r7, #24]
 8011b6c:	e00b      	b.n	8011b86 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	69fb      	ldr	r3, [r7, #28]
 8011b78:	601a      	str	r2, [r3, #0]
    pDest++;
 8011b7a:	69fb      	ldr	r3, [r7, #28]
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011b80:	69bb      	ldr	r3, [r7, #24]
 8011b82:	3301      	adds	r3, #1
 8011b84:	61bb      	str	r3, [r7, #24]
 8011b86:	69ba      	ldr	r2, [r7, #24]
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d3ef      	bcc.n	8011b6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011b8e:	69fb      	ldr	r3, [r7, #28]
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3724      	adds	r7, #36	; 0x24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr

08011b9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b9c:	b480      	push	{r7}
 8011b9e:	b085      	sub	sp, #20
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	785b      	ldrb	r3, [r3, #1]
 8011bb4:	2b01      	cmp	r3, #1
 8011bb6:	d12c      	bne.n	8011c12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	015a      	lsls	r2, r3, #5
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	db12      	blt.n	8011bf0 <USB_EPSetStall+0x54>
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00f      	beq.n	8011bf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	015a      	lsls	r2, r3, #5
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	0151      	lsls	r1, r2, #5
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	440a      	add	r2, r1
 8011be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011bee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	015a      	lsls	r2, r3, #5
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	0151      	lsls	r1, r2, #5
 8011c02:	68fa      	ldr	r2, [r7, #12]
 8011c04:	440a      	add	r2, r1
 8011c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011c0e:	6013      	str	r3, [r2, #0]
 8011c10:	e02b      	b.n	8011c6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	015a      	lsls	r2, r3, #5
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	4413      	add	r3, r2
 8011c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	db12      	blt.n	8011c4a <USB_EPSetStall+0xae>
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00f      	beq.n	8011c4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	015a      	lsls	r2, r3, #5
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	4413      	add	r3, r2
 8011c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	68ba      	ldr	r2, [r7, #8]
 8011c3a:	0151      	lsls	r1, r2, #5
 8011c3c:	68fa      	ldr	r2, [r7, #12]
 8011c3e:	440a      	add	r2, r1
 8011c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011c48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	015a      	lsls	r2, r3, #5
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	4413      	add	r3, r2
 8011c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	0151      	lsls	r1, r2, #5
 8011c5c:	68fa      	ldr	r2, [r7, #12]
 8011c5e:	440a      	add	r2, r1
 8011c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011c68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3714      	adds	r7, #20
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr

08011c78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b085      	sub	sp, #20
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	785b      	ldrb	r3, [r3, #1]
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d128      	bne.n	8011ce6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	015a      	lsls	r2, r3, #5
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	4413      	add	r3, r2
 8011c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	68ba      	ldr	r2, [r7, #8]
 8011ca4:	0151      	lsls	r1, r2, #5
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	440a      	add	r2, r1
 8011caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	78db      	ldrb	r3, [r3, #3]
 8011cb8:	2b03      	cmp	r3, #3
 8011cba:	d003      	beq.n	8011cc4 <USB_EPClearStall+0x4c>
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	78db      	ldrb	r3, [r3, #3]
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d138      	bne.n	8011d36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	015a      	lsls	r2, r3, #5
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	4413      	add	r3, r2
 8011ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	68ba      	ldr	r2, [r7, #8]
 8011cd4:	0151      	lsls	r1, r2, #5
 8011cd6:	68fa      	ldr	r2, [r7, #12]
 8011cd8:	440a      	add	r2, r1
 8011cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ce2:	6013      	str	r3, [r2, #0]
 8011ce4:	e027      	b.n	8011d36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	015a      	lsls	r2, r3, #5
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	4413      	add	r3, r2
 8011cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	0151      	lsls	r1, r2, #5
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	440a      	add	r2, r1
 8011cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011d04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	78db      	ldrb	r3, [r3, #3]
 8011d0a:	2b03      	cmp	r3, #3
 8011d0c:	d003      	beq.n	8011d16 <USB_EPClearStall+0x9e>
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	78db      	ldrb	r3, [r3, #3]
 8011d12:	2b02      	cmp	r3, #2
 8011d14:	d10f      	bne.n	8011d36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	015a      	lsls	r2, r3, #5
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	68ba      	ldr	r2, [r7, #8]
 8011d26:	0151      	lsls	r1, r2, #5
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	440a      	add	r2, r1
 8011d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3714      	adds	r7, #20
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr

08011d44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b085      	sub	sp, #20
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	68fa      	ldr	r2, [r7, #12]
 8011d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011d66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	78fb      	ldrb	r3, [r7, #3]
 8011d72:	011b      	lsls	r3, r3, #4
 8011d74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011d78:	68f9      	ldr	r1, [r7, #12]
 8011d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d7e:	4313      	orrs	r3, r2
 8011d80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68fa      	ldr	r2, [r7, #12]
 8011da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011daa:	f023 0303 	bic.w	r3, r3, #3
 8011dae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011dbe:	f023 0302 	bic.w	r3, r3, #2
 8011dc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3714      	adds	r7, #20
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b085      	sub	sp, #20
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011dec:	f023 0303 	bic.w	r3, r3, #3
 8011df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e00:	f043 0302 	orr.w	r3, r3, #2
 8011e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011e06:	2300      	movs	r3, #0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3714      	adds	r7, #20
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b085      	sub	sp, #20
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	695b      	ldr	r3, [r3, #20]
 8011e20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	699b      	ldr	r3, [r3, #24]
 8011e26:	68fa      	ldr	r2, [r7, #12]
 8011e28:	4013      	ands	r3, r2
 8011e2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3714      	adds	r7, #20
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr

08011e3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e3a:	b480      	push	{r7}
 8011e3c:	b085      	sub	sp, #20
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e4c:	699b      	ldr	r3, [r3, #24]
 8011e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e56:	69db      	ldr	r3, [r3, #28]
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	0c1b      	lsrs	r3, r3, #16
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3714      	adds	r7, #20
 8011e66:	46bd      	mov	sp, r7
 8011e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6c:	4770      	bx	lr

08011e6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e6e:	b480      	push	{r7}
 8011e70:	b085      	sub	sp, #20
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e80:	699b      	ldr	r3, [r3, #24]
 8011e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e8a:	69db      	ldr	r3, [r3, #28]
 8011e8c:	68ba      	ldr	r2, [r7, #8]
 8011e8e:	4013      	ands	r3, r2
 8011e90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	b29b      	uxth	r3, r3
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3714      	adds	r7, #20
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea0:	4770      	bx	lr

08011ea2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011ea2:	b480      	push	{r7}
 8011ea4:	b085      	sub	sp, #20
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
 8011eaa:	460b      	mov	r3, r1
 8011eac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011eb2:	78fb      	ldrb	r3, [r7, #3]
 8011eb4:	015a      	lsls	r2, r3, #5
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	4413      	add	r3, r2
 8011eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ec8:	695b      	ldr	r3, [r3, #20]
 8011eca:	68ba      	ldr	r2, [r7, #8]
 8011ecc:	4013      	ands	r3, r2
 8011ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011ed0:	68bb      	ldr	r3, [r7, #8]
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3714      	adds	r7, #20
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011edc:	4770      	bx	lr

08011ede <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011ede:	b480      	push	{r7}
 8011ee0:	b087      	sub	sp, #28
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011f02:	78fb      	ldrb	r3, [r7, #3]
 8011f04:	f003 030f 	and.w	r3, r3, #15
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8011f0e:	01db      	lsls	r3, r3, #7
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	693a      	ldr	r2, [r7, #16]
 8011f14:	4313      	orrs	r3, r2
 8011f16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011f18:	78fb      	ldrb	r3, [r7, #3]
 8011f1a:	015a      	lsls	r2, r3, #5
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	4413      	add	r3, r2
 8011f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	693a      	ldr	r2, [r7, #16]
 8011f28:	4013      	ands	r3, r2
 8011f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011f2c:	68bb      	ldr	r3, [r7, #8]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	371c      	adds	r7, #28
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr

08011f3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011f3a:	b480      	push	{r7}
 8011f3c:	b083      	sub	sp, #12
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	695b      	ldr	r3, [r3, #20]
 8011f46:	f003 0301 	and.w	r3, r3, #1
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	370c      	adds	r7, #12
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011f56:	b480      	push	{r7}
 8011f58:	b085      	sub	sp, #20
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011f74:	f023 0307 	bic.w	r3, r3, #7
 8011f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3714      	adds	r7, #20
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	333c      	adds	r3, #60	; 0x3c
 8011fae:	3304      	adds	r3, #4
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	4a1c      	ldr	r2, [pc, #112]	; (8012028 <USB_EP0_OutStart+0x8c>)
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d90a      	bls.n	8011fd2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fcc:	d101      	bne.n	8011fd2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	e024      	b.n	801201c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fd8:	461a      	mov	r2, r3
 8011fda:	2300      	movs	r3, #0
 8011fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fe4:	691b      	ldr	r3, [r3, #16]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ff8:	691b      	ldr	r3, [r3, #16]
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012000:	f043 0318 	orr.w	r3, r3, #24
 8012004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801200c:	691b      	ldr	r3, [r3, #16]
 801200e:	68fa      	ldr	r2, [r7, #12]
 8012010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012014:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012018:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3714      	adds	r7, #20
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr
 8012028:	4f54300a 	.word	0x4f54300a

0801202c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012034:	2300      	movs	r3, #0
 8012036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	3301      	adds	r3, #1
 801203c:	60fb      	str	r3, [r7, #12]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	4a13      	ldr	r2, [pc, #76]	; (8012090 <USB_CoreReset+0x64>)
 8012042:	4293      	cmp	r3, r2
 8012044:	d901      	bls.n	801204a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012046:	2303      	movs	r3, #3
 8012048:	e01b      	b.n	8012082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	691b      	ldr	r3, [r3, #16]
 801204e:	2b00      	cmp	r3, #0
 8012050:	daf2      	bge.n	8012038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012052:	2300      	movs	r3, #0
 8012054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	691b      	ldr	r3, [r3, #16]
 801205a:	f043 0201 	orr.w	r2, r3, #1
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	3301      	adds	r3, #1
 8012066:	60fb      	str	r3, [r7, #12]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	4a09      	ldr	r2, [pc, #36]	; (8012090 <USB_CoreReset+0x64>)
 801206c:	4293      	cmp	r3, r2
 801206e:	d901      	bls.n	8012074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012070:	2303      	movs	r3, #3
 8012072:	e006      	b.n	8012082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	691b      	ldr	r3, [r3, #16]
 8012078:	f003 0301 	and.w	r3, r3, #1
 801207c:	2b01      	cmp	r3, #1
 801207e:	d0f0      	beq.n	8012062 <USB_CoreReset+0x36>

  return HAL_OK;
 8012080:	2300      	movs	r3, #0
}
 8012082:	4618      	mov	r0, r3
 8012084:	3714      	adds	r7, #20
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	00030d40 	.word	0x00030d40

08012094 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012098:	4904      	ldr	r1, [pc, #16]	; (80120ac <MX_FATFS_Init+0x18>)
 801209a:	4805      	ldr	r0, [pc, #20]	; (80120b0 <MX_FATFS_Init+0x1c>)
 801209c:	f002 fdc8 	bl	8014c30 <FATFS_LinkDriver>
 80120a0:	4603      	mov	r3, r0
 80120a2:	461a      	mov	r2, r3
 80120a4:	4b03      	ldr	r3, [pc, #12]	; (80120b4 <MX_FATFS_Init+0x20>)
 80120a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80120a8:	bf00      	nop
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	20008750 	.word	0x20008750
 80120b0:	20000324 	.word	0x20000324
 80120b4:	2000874c 	.word	0x2000874c

080120b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80120b8:	b480      	push	{r7}
 80120ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80120bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80120be:	4618      	mov	r0, r3
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	4603      	mov	r3, r0
 80120d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat &= ~STA_NOINIT;
 80120d2:	4b08      	ldr	r3, [pc, #32]	; (80120f4 <USER_initialize+0x2c>)
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	f023 0301 	bic.w	r3, r3, #1
 80120dc:	b2da      	uxtb	r2, r3
 80120de:	4b05      	ldr	r3, [pc, #20]	; (80120f4 <USER_initialize+0x2c>)
 80120e0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80120e2:	4b04      	ldr	r3, [pc, #16]	; (80120f4 <USER_initialize+0x2c>)
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	20000321 	.word	0x20000321

080120f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	4603      	mov	r3, r0
 8012100:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(pdrv) return STA_NOINIT;
 8012102:	79fb      	ldrb	r3, [r7, #7]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d001      	beq.n	801210c <USER_status+0x14>
 8012108:	2301      	movs	r3, #1
 801210a:	e002      	b.n	8012112 <USER_status+0x1a>
    return Stat;
 801210c:	4b04      	ldr	r3, [pc, #16]	; (8012120 <USER_status+0x28>)
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8012112:	4618      	mov	r0, r3
 8012114:	370c      	adds	r7, #12
 8012116:	46bd      	mov	sp, r7
 8012118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop
 8012120:	20000321 	.word	0x20000321

08012124 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b086      	sub	sp, #24
 8012128:	af00      	add	r7, sp, #0
 801212a:	60b9      	str	r1, [r7, #8]
 801212c:	607a      	str	r2, [r7, #4]
 801212e:	603b      	str	r3, [r7, #0]
 8012130:	4603      	mov	r3, r0
 8012132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		uint8_t block_cnt = 0;
 8012134:	2300      	movs	r3, #0
 8012136:	75fb      	strb	r3, [r7, #23]
		for(block_cnt=0;block_cnt<count;block_cnt++) W25_ReadBuf(&buff[block_cnt*512], sector+block_cnt);
 8012138:	2300      	movs	r3, #0
 801213a:	75fb      	strb	r3, [r7, #23]
 801213c:	e010      	b.n	8012160 <USER_read+0x3c>
 801213e:	7dfb      	ldrb	r3, [r7, #23]
 8012140:	025b      	lsls	r3, r3, #9
 8012142:	461a      	mov	r2, r3
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	1898      	adds	r0, r3, r2
 8012148:	7dfb      	ldrb	r3, [r7, #23]
 801214a:	b29a      	uxth	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	b29b      	uxth	r3, r3
 8012150:	4413      	add	r3, r2
 8012152:	b29b      	uxth	r3, r3
 8012154:	4619      	mov	r1, r3
 8012156:	f7f2 fb2f 	bl	80047b8 <W25_ReadBuf>
 801215a:	7dfb      	ldrb	r3, [r7, #23]
 801215c:	3301      	adds	r3, #1
 801215e:	75fb      	strb	r3, [r7, #23]
 8012160:	7dfb      	ldrb	r3, [r7, #23]
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	429a      	cmp	r2, r3
 8012166:	d8ea      	bhi.n	801213e <USER_read+0x1a>
		return RES_OK;
 8012168:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801216a:	4618      	mov	r0, r3
 801216c:	3718      	adds	r7, #24
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}

08012172 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012172:	b580      	push	{r7, lr}
 8012174:	b086      	sub	sp, #24
 8012176:	af00      	add	r7, sp, #0
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
 801217c:	603b      	str	r3, [r7, #0]
 801217e:	4603      	mov	r3, r0
 8012180:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t block_cnt = 0;
 8012182:	2300      	movs	r3, #0
 8012184:	75fb      	strb	r3, [r7, #23]
	for(block_cnt=0;block_cnt<count;block_cnt++) W25_WriteBuf(&buff[block_cnt*512], sector+block_cnt);
 8012186:	2300      	movs	r3, #0
 8012188:	75fb      	strb	r3, [r7, #23]
 801218a:	e010      	b.n	80121ae <USER_write+0x3c>
 801218c:	7dfb      	ldrb	r3, [r7, #23]
 801218e:	025b      	lsls	r3, r3, #9
 8012190:	461a      	mov	r2, r3
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	1898      	adds	r0, r3, r2
 8012196:	7dfb      	ldrb	r3, [r7, #23]
 8012198:	b29a      	uxth	r2, r3
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	b29b      	uxth	r3, r3
 801219e:	4413      	add	r3, r2
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	4619      	mov	r1, r3
 80121a4:	f7f2 fb78 	bl	8004898 <W25_WriteBuf>
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	3301      	adds	r3, #1
 80121ac:	75fb      	strb	r3, [r7, #23]
 80121ae:	7dfb      	ldrb	r3, [r7, #23]
 80121b0:	683a      	ldr	r2, [r7, #0]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d8ea      	bhi.n	801218c <USER_write+0x1a>

	return RES_OK;
 80121b6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3718      	adds	r7, #24
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b085      	sub	sp, #20
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	4603      	mov	r3, r0
 80121c8:	603a      	str	r2, [r7, #0]
 80121ca:	71fb      	strb	r3, [r7, #7]
 80121cc:	460b      	mov	r3, r1
 80121ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 80121d0:	2300      	movs	r3, #0
 80121d2:	73fb      	strb	r3, [r7, #15]
	    if(pdrv) return RES_PARERR;
 80121d4:	79fb      	ldrb	r3, [r7, #7]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d001      	beq.n	80121de <USER_ioctl+0x1e>
 80121da:	2304      	movs	r3, #4
 80121dc:	e02b      	b.n	8012236 <USER_ioctl+0x76>
	    if(Stat&STA_NOINIT) return RES_NOTRDY;
 80121de:	4b19      	ldr	r3, [pc, #100]	; (8012244 <USER_ioctl+0x84>)
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	f003 0301 	and.w	r3, r3, #1
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <USER_ioctl+0x30>
 80121ec:	2303      	movs	r3, #3
 80121ee:	e022      	b.n	8012236 <USER_ioctl+0x76>
	    switch(cmd)
 80121f0:	79bb      	ldrb	r3, [r7, #6]
 80121f2:	2b03      	cmp	r3, #3
 80121f4:	d81b      	bhi.n	801222e <USER_ioctl+0x6e>
 80121f6:	a201      	add	r2, pc, #4	; (adr r2, 80121fc <USER_ioctl+0x3c>)
 80121f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121fc:	08012229 	.word	0x08012229
 8012200:	08012219 	.word	0x08012219
 8012204:	0801220d 	.word	0x0801220d
 8012208:	08012221 	.word	0x08012221
	    {
			case GET_SECTOR_SIZE:
				*(WORD*)buff=50; // Размер сектора
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2232      	movs	r2, #50	; 0x32
 8012210:	801a      	strh	r2, [r3, #0]
				res=RES_OK;
 8012212:	2300      	movs	r3, #0
 8012214:	73fb      	strb	r3, [r7, #15]
				break;
 8012216:	e00d      	b.n	8012234 <USER_ioctl+0x74>
			case GET_SECTOR_COUNT: *(WORD*)buff=50; break;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	2232      	movs	r2, #50	; 0x32
 801221c:	801a      	strh	r2, [r3, #0]
 801221e:	e009      	b.n	8012234 <USER_ioctl+0x74>
			case GET_BLOCK_SIZE: *(WORD*)buff=50; break;
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	2232      	movs	r2, #50	; 0x32
 8012224:	801a      	strh	r2, [r3, #0]
 8012226:	e005      	b.n	8012234 <USER_ioctl+0x74>
			case CTRL_SYNC: res=RES_OK; break;
 8012228:	2300      	movs	r3, #0
 801222a:	73fb      	strb	r3, [r7, #15]
 801222c:	e002      	b.n	8012234 <USER_ioctl+0x74>
			default: res = RES_PARERR; break;
 801222e:	2304      	movs	r3, #4
 8012230:	73fb      	strb	r3, [r7, #15]
 8012232:	bf00      	nop
	    }

	    return res;
 8012234:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8012236:	4618      	mov	r0, r3
 8012238:	3714      	adds	r7, #20
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop
 8012244:	20000321 	.word	0x20000321

08012248 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	4603      	mov	r3, r0
 8012250:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012252:	79fb      	ldrb	r3, [r7, #7]
 8012254:	4a08      	ldr	r2, [pc, #32]	; (8012278 <disk_status+0x30>)
 8012256:	009b      	lsls	r3, r3, #2
 8012258:	4413      	add	r3, r2
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	79fa      	ldrb	r2, [r7, #7]
 8012260:	4905      	ldr	r1, [pc, #20]	; (8012278 <disk_status+0x30>)
 8012262:	440a      	add	r2, r1
 8012264:	7a12      	ldrb	r2, [r2, #8]
 8012266:	4610      	mov	r0, r2
 8012268:	4798      	blx	r3
 801226a:	4603      	mov	r3, r0
 801226c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012270:	4618      	mov	r0, r3
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	20000980 	.word	0x20000980

0801227c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	4603      	mov	r3, r0
 8012284:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012286:	2300      	movs	r3, #0
 8012288:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801228a:	79fb      	ldrb	r3, [r7, #7]
 801228c:	4a0d      	ldr	r2, [pc, #52]	; (80122c4 <disk_initialize+0x48>)
 801228e:	5cd3      	ldrb	r3, [r2, r3]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d111      	bne.n	80122b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012294:	79fb      	ldrb	r3, [r7, #7]
 8012296:	4a0b      	ldr	r2, [pc, #44]	; (80122c4 <disk_initialize+0x48>)
 8012298:	2101      	movs	r1, #1
 801229a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801229c:	79fb      	ldrb	r3, [r7, #7]
 801229e:	4a09      	ldr	r2, [pc, #36]	; (80122c4 <disk_initialize+0x48>)
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	4413      	add	r3, r2
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	79fa      	ldrb	r2, [r7, #7]
 80122aa:	4906      	ldr	r1, [pc, #24]	; (80122c4 <disk_initialize+0x48>)
 80122ac:	440a      	add	r2, r1
 80122ae:	7a12      	ldrb	r2, [r2, #8]
 80122b0:	4610      	mov	r0, r2
 80122b2:	4798      	blx	r3
 80122b4:	4603      	mov	r3, r0
 80122b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80122b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3710      	adds	r7, #16
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	20000980 	.word	0x20000980

080122c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80122c8:	b590      	push	{r4, r7, lr}
 80122ca:	b087      	sub	sp, #28
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60b9      	str	r1, [r7, #8]
 80122d0:	607a      	str	r2, [r7, #4]
 80122d2:	603b      	str	r3, [r7, #0]
 80122d4:	4603      	mov	r3, r0
 80122d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80122d8:	7bfb      	ldrb	r3, [r7, #15]
 80122da:	4a0a      	ldr	r2, [pc, #40]	; (8012304 <disk_read+0x3c>)
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	4413      	add	r3, r2
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	689c      	ldr	r4, [r3, #8]
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
 80122e6:	4a07      	ldr	r2, [pc, #28]	; (8012304 <disk_read+0x3c>)
 80122e8:	4413      	add	r3, r2
 80122ea:	7a18      	ldrb	r0, [r3, #8]
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	68b9      	ldr	r1, [r7, #8]
 80122f2:	47a0      	blx	r4
 80122f4:	4603      	mov	r3, r0
 80122f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80122f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122fa:	4618      	mov	r0, r3
 80122fc:	371c      	adds	r7, #28
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd90      	pop	{r4, r7, pc}
 8012302:	bf00      	nop
 8012304:	20000980 	.word	0x20000980

08012308 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012308:	b590      	push	{r4, r7, lr}
 801230a:	b087      	sub	sp, #28
 801230c:	af00      	add	r7, sp, #0
 801230e:	60b9      	str	r1, [r7, #8]
 8012310:	607a      	str	r2, [r7, #4]
 8012312:	603b      	str	r3, [r7, #0]
 8012314:	4603      	mov	r3, r0
 8012316:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012318:	7bfb      	ldrb	r3, [r7, #15]
 801231a:	4a0a      	ldr	r2, [pc, #40]	; (8012344 <disk_write+0x3c>)
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	4413      	add	r3, r2
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	68dc      	ldr	r4, [r3, #12]
 8012324:	7bfb      	ldrb	r3, [r7, #15]
 8012326:	4a07      	ldr	r2, [pc, #28]	; (8012344 <disk_write+0x3c>)
 8012328:	4413      	add	r3, r2
 801232a:	7a18      	ldrb	r0, [r3, #8]
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	68b9      	ldr	r1, [r7, #8]
 8012332:	47a0      	blx	r4
 8012334:	4603      	mov	r3, r0
 8012336:	75fb      	strb	r3, [r7, #23]
  return res;
 8012338:	7dfb      	ldrb	r3, [r7, #23]
}
 801233a:	4618      	mov	r0, r3
 801233c:	371c      	adds	r7, #28
 801233e:	46bd      	mov	sp, r7
 8012340:	bd90      	pop	{r4, r7, pc}
 8012342:	bf00      	nop
 8012344:	20000980 	.word	0x20000980

08012348 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	4603      	mov	r3, r0
 8012350:	603a      	str	r2, [r7, #0]
 8012352:	71fb      	strb	r3, [r7, #7]
 8012354:	460b      	mov	r3, r1
 8012356:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012358:	79fb      	ldrb	r3, [r7, #7]
 801235a:	4a09      	ldr	r2, [pc, #36]	; (8012380 <disk_ioctl+0x38>)
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	4413      	add	r3, r2
 8012360:	685b      	ldr	r3, [r3, #4]
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	79fa      	ldrb	r2, [r7, #7]
 8012366:	4906      	ldr	r1, [pc, #24]	; (8012380 <disk_ioctl+0x38>)
 8012368:	440a      	add	r2, r1
 801236a:	7a10      	ldrb	r0, [r2, #8]
 801236c:	79b9      	ldrb	r1, [r7, #6]
 801236e:	683a      	ldr	r2, [r7, #0]
 8012370:	4798      	blx	r3
 8012372:	4603      	mov	r3, r0
 8012374:	73fb      	strb	r3, [r7, #15]
  return res;
 8012376:	7bfb      	ldrb	r3, [r7, #15]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	20000980 	.word	0x20000980

08012384 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012384:	b480      	push	{r7}
 8012386:	b085      	sub	sp, #20
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	3301      	adds	r3, #1
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012394:	89fb      	ldrh	r3, [r7, #14]
 8012396:	021b      	lsls	r3, r3, #8
 8012398:	b21a      	sxth	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	b21b      	sxth	r3, r3
 80123a0:	4313      	orrs	r3, r2
 80123a2:	b21b      	sxth	r3, r3
 80123a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80123a6:	89fb      	ldrh	r3, [r7, #14]
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3714      	adds	r7, #20
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3303      	adds	r3, #3
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	021b      	lsls	r3, r3, #8
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	3202      	adds	r2, #2
 80123cc:	7812      	ldrb	r2, [r2, #0]
 80123ce:	4313      	orrs	r3, r2
 80123d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	021b      	lsls	r3, r3, #8
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	3201      	adds	r2, #1
 80123da:	7812      	ldrb	r2, [r2, #0]
 80123dc:	4313      	orrs	r3, r2
 80123de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	021b      	lsls	r3, r3, #8
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	7812      	ldrb	r2, [r2, #0]
 80123e8:	4313      	orrs	r3, r2
 80123ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80123ec:	68fb      	ldr	r3, [r7, #12]
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3714      	adds	r7, #20
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr

080123fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80123fa:	b480      	push	{r7}
 80123fc:	b083      	sub	sp, #12
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
 8012402:	460b      	mov	r3, r1
 8012404:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	1c5a      	adds	r2, r3, #1
 801240a:	607a      	str	r2, [r7, #4]
 801240c:	887a      	ldrh	r2, [r7, #2]
 801240e:	b2d2      	uxtb	r2, r2
 8012410:	701a      	strb	r2, [r3, #0]
 8012412:	887b      	ldrh	r3, [r7, #2]
 8012414:	0a1b      	lsrs	r3, r3, #8
 8012416:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	1c5a      	adds	r2, r3, #1
 801241c:	607a      	str	r2, [r7, #4]
 801241e:	887a      	ldrh	r2, [r7, #2]
 8012420:	b2d2      	uxtb	r2, r2
 8012422:	701a      	strb	r2, [r3, #0]
}
 8012424:	bf00      	nop
 8012426:	370c      	adds	r7, #12
 8012428:	46bd      	mov	sp, r7
 801242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242e:	4770      	bx	lr

08012430 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	607a      	str	r2, [r7, #4]
 8012440:	683a      	ldr	r2, [r7, #0]
 8012442:	b2d2      	uxtb	r2, r2
 8012444:	701a      	strb	r2, [r3, #0]
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	0a1b      	lsrs	r3, r3, #8
 801244a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	1c5a      	adds	r2, r3, #1
 8012450:	607a      	str	r2, [r7, #4]
 8012452:	683a      	ldr	r2, [r7, #0]
 8012454:	b2d2      	uxtb	r2, r2
 8012456:	701a      	strb	r2, [r3, #0]
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	0a1b      	lsrs	r3, r3, #8
 801245c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	1c5a      	adds	r2, r3, #1
 8012462:	607a      	str	r2, [r7, #4]
 8012464:	683a      	ldr	r2, [r7, #0]
 8012466:	b2d2      	uxtb	r2, r2
 8012468:	701a      	strb	r2, [r3, #0]
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	0a1b      	lsrs	r3, r3, #8
 801246e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	1c5a      	adds	r2, r3, #1
 8012474:	607a      	str	r2, [r7, #4]
 8012476:	683a      	ldr	r2, [r7, #0]
 8012478:	b2d2      	uxtb	r2, r2
 801247a:	701a      	strb	r2, [r3, #0]
}
 801247c:	bf00      	nop
 801247e:	370c      	adds	r7, #12
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr

08012488 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012488:	b480      	push	{r7}
 801248a:	b087      	sub	sp, #28
 801248c:	af00      	add	r7, sp, #0
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00d      	beq.n	80124be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80124a2:	693a      	ldr	r2, [r7, #16]
 80124a4:	1c53      	adds	r3, r2, #1
 80124a6:	613b      	str	r3, [r7, #16]
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	1c59      	adds	r1, r3, #1
 80124ac:	6179      	str	r1, [r7, #20]
 80124ae:	7812      	ldrb	r2, [r2, #0]
 80124b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	3b01      	subs	r3, #1
 80124b6:	607b      	str	r3, [r7, #4]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1f1      	bne.n	80124a2 <mem_cpy+0x1a>
	}
}
 80124be:	bf00      	nop
 80124c0:	371c      	adds	r7, #28
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80124ca:	b480      	push	{r7}
 80124cc:	b087      	sub	sp, #28
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	60f8      	str	r0, [r7, #12]
 80124d2:	60b9      	str	r1, [r7, #8]
 80124d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	1c5a      	adds	r2, r3, #1
 80124de:	617a      	str	r2, [r7, #20]
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	b2d2      	uxtb	r2, r2
 80124e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	3b01      	subs	r3, #1
 80124ea:	607b      	str	r3, [r7, #4]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1f3      	bne.n	80124da <mem_set+0x10>
}
 80124f2:	bf00      	nop
 80124f4:	bf00      	nop
 80124f6:	371c      	adds	r7, #28
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012500:	b480      	push	{r7}
 8012502:	b089      	sub	sp, #36	; 0x24
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	61fb      	str	r3, [r7, #28]
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	61fa      	str	r2, [r7, #28]
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	4619      	mov	r1, r3
 8012522:	69bb      	ldr	r3, [r7, #24]
 8012524:	1c5a      	adds	r2, r3, #1
 8012526:	61ba      	str	r2, [r7, #24]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	1acb      	subs	r3, r1, r3
 801252c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	3b01      	subs	r3, #1
 8012532:	607b      	str	r3, [r7, #4]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d002      	beq.n	8012540 <mem_cmp+0x40>
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d0eb      	beq.n	8012518 <mem_cmp+0x18>

	return r;
 8012540:	697b      	ldr	r3, [r7, #20]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3724      	adds	r7, #36	; 0x24
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr

0801254e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801254e:	b480      	push	{r7}
 8012550:	b083      	sub	sp, #12
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
 8012556:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012558:	e002      	b.n	8012560 <chk_chr+0x12>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	3301      	adds	r3, #1
 801255e:	607b      	str	r3, [r7, #4]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d005      	beq.n	8012574 <chk_chr+0x26>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	461a      	mov	r2, r3
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	4293      	cmp	r3, r2
 8012572:	d1f2      	bne.n	801255a <chk_chr+0xc>
	return *str;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	781b      	ldrb	r3, [r3, #0]
}
 8012578:	4618      	mov	r0, r3
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012584:	b480      	push	{r7}
 8012586:	b085      	sub	sp, #20
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801258e:	2300      	movs	r3, #0
 8012590:	60bb      	str	r3, [r7, #8]
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	60fb      	str	r3, [r7, #12]
 8012596:	e029      	b.n	80125ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012598:	4a27      	ldr	r2, [pc, #156]	; (8012638 <chk_lock+0xb4>)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	011b      	lsls	r3, r3, #4
 801259e:	4413      	add	r3, r2
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d01d      	beq.n	80125e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80125a6:	4a24      	ldr	r2, [pc, #144]	; (8012638 <chk_lock+0xb4>)
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	011b      	lsls	r3, r3, #4
 80125ac:	4413      	add	r3, r2
 80125ae:	681a      	ldr	r2, [r3, #0]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d116      	bne.n	80125e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80125b8:	4a1f      	ldr	r2, [pc, #124]	; (8012638 <chk_lock+0xb4>)
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	011b      	lsls	r3, r3, #4
 80125be:	4413      	add	r3, r2
 80125c0:	3304      	adds	r3, #4
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d10c      	bne.n	80125e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80125cc:	4a1a      	ldr	r2, [pc, #104]	; (8012638 <chk_lock+0xb4>)
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	011b      	lsls	r3, r3, #4
 80125d2:	4413      	add	r3, r2
 80125d4:	3308      	adds	r3, #8
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80125dc:	429a      	cmp	r2, r3
 80125de:	d102      	bne.n	80125e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80125e0:	e007      	b.n	80125f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80125e2:	2301      	movs	r3, #1
 80125e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	3301      	adds	r3, #1
 80125ea:	60fb      	str	r3, [r7, #12]
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d9d2      	bls.n	8012598 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2b02      	cmp	r3, #2
 80125f6:	d109      	bne.n	801260c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d102      	bne.n	8012604 <chk_lock+0x80>
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	2b02      	cmp	r3, #2
 8012602:	d101      	bne.n	8012608 <chk_lock+0x84>
 8012604:	2300      	movs	r3, #0
 8012606:	e010      	b.n	801262a <chk_lock+0xa6>
 8012608:	2312      	movs	r3, #18
 801260a:	e00e      	b.n	801262a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d108      	bne.n	8012624 <chk_lock+0xa0>
 8012612:	4a09      	ldr	r2, [pc, #36]	; (8012638 <chk_lock+0xb4>)
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	011b      	lsls	r3, r3, #4
 8012618:	4413      	add	r3, r2
 801261a:	330c      	adds	r3, #12
 801261c:	881b      	ldrh	r3, [r3, #0]
 801261e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012622:	d101      	bne.n	8012628 <chk_lock+0xa4>
 8012624:	2310      	movs	r3, #16
 8012626:	e000      	b.n	801262a <chk_lock+0xa6>
 8012628:	2300      	movs	r3, #0
}
 801262a:	4618      	mov	r0, r3
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	20000960 	.word	0x20000960

0801263c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012642:	2300      	movs	r3, #0
 8012644:	607b      	str	r3, [r7, #4]
 8012646:	e002      	b.n	801264e <enq_lock+0x12>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	3301      	adds	r3, #1
 801264c:	607b      	str	r3, [r7, #4]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d806      	bhi.n	8012662 <enq_lock+0x26>
 8012654:	4a09      	ldr	r2, [pc, #36]	; (801267c <enq_lock+0x40>)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	011b      	lsls	r3, r3, #4
 801265a:	4413      	add	r3, r2
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d1f2      	bne.n	8012648 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b02      	cmp	r3, #2
 8012666:	bf14      	ite	ne
 8012668:	2301      	movne	r3, #1
 801266a:	2300      	moveq	r3, #0
 801266c:	b2db      	uxtb	r3, r3
}
 801266e:	4618      	mov	r0, r3
 8012670:	370c      	adds	r7, #12
 8012672:	46bd      	mov	sp, r7
 8012674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	20000960 	.word	0x20000960

08012680 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012680:	b480      	push	{r7}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801268a:	2300      	movs	r3, #0
 801268c:	60fb      	str	r3, [r7, #12]
 801268e:	e01f      	b.n	80126d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012690:	4a41      	ldr	r2, [pc, #260]	; (8012798 <inc_lock+0x118>)
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	011b      	lsls	r3, r3, #4
 8012696:	4413      	add	r3, r2
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d113      	bne.n	80126ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80126a2:	4a3d      	ldr	r2, [pc, #244]	; (8012798 <inc_lock+0x118>)
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	011b      	lsls	r3, r3, #4
 80126a8:	4413      	add	r3, r2
 80126aa:	3304      	adds	r3, #4
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d109      	bne.n	80126ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80126b6:	4a38      	ldr	r2, [pc, #224]	; (8012798 <inc_lock+0x118>)
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	011b      	lsls	r3, r3, #4
 80126bc:	4413      	add	r3, r2
 80126be:	3308      	adds	r3, #8
 80126c0:	681a      	ldr	r2, [r3, #0]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d006      	beq.n	80126d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	3301      	adds	r3, #1
 80126ce:	60fb      	str	r3, [r7, #12]
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d9dc      	bls.n	8012690 <inc_lock+0x10>
 80126d6:	e000      	b.n	80126da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80126d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2b02      	cmp	r3, #2
 80126de:	d132      	bne.n	8012746 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80126e0:	2300      	movs	r3, #0
 80126e2:	60fb      	str	r3, [r7, #12]
 80126e4:	e002      	b.n	80126ec <inc_lock+0x6c>
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	3301      	adds	r3, #1
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d806      	bhi.n	8012700 <inc_lock+0x80>
 80126f2:	4a29      	ldr	r2, [pc, #164]	; (8012798 <inc_lock+0x118>)
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	011b      	lsls	r3, r3, #4
 80126f8:	4413      	add	r3, r2
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d1f2      	bne.n	80126e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b02      	cmp	r3, #2
 8012704:	d101      	bne.n	801270a <inc_lock+0x8a>
 8012706:	2300      	movs	r3, #0
 8012708:	e040      	b.n	801278c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681a      	ldr	r2, [r3, #0]
 801270e:	4922      	ldr	r1, [pc, #136]	; (8012798 <inc_lock+0x118>)
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	011b      	lsls	r3, r3, #4
 8012714:	440b      	add	r3, r1
 8012716:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	689a      	ldr	r2, [r3, #8]
 801271c:	491e      	ldr	r1, [pc, #120]	; (8012798 <inc_lock+0x118>)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	011b      	lsls	r3, r3, #4
 8012722:	440b      	add	r3, r1
 8012724:	3304      	adds	r3, #4
 8012726:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	695a      	ldr	r2, [r3, #20]
 801272c:	491a      	ldr	r1, [pc, #104]	; (8012798 <inc_lock+0x118>)
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	011b      	lsls	r3, r3, #4
 8012732:	440b      	add	r3, r1
 8012734:	3308      	adds	r3, #8
 8012736:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012738:	4a17      	ldr	r2, [pc, #92]	; (8012798 <inc_lock+0x118>)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	011b      	lsls	r3, r3, #4
 801273e:	4413      	add	r3, r2
 8012740:	330c      	adds	r3, #12
 8012742:	2200      	movs	r2, #0
 8012744:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d009      	beq.n	8012760 <inc_lock+0xe0>
 801274c:	4a12      	ldr	r2, [pc, #72]	; (8012798 <inc_lock+0x118>)
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	011b      	lsls	r3, r3, #4
 8012752:	4413      	add	r3, r2
 8012754:	330c      	adds	r3, #12
 8012756:	881b      	ldrh	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d001      	beq.n	8012760 <inc_lock+0xe0>
 801275c:	2300      	movs	r3, #0
 801275e:	e015      	b.n	801278c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d108      	bne.n	8012778 <inc_lock+0xf8>
 8012766:	4a0c      	ldr	r2, [pc, #48]	; (8012798 <inc_lock+0x118>)
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	011b      	lsls	r3, r3, #4
 801276c:	4413      	add	r3, r2
 801276e:	330c      	adds	r3, #12
 8012770:	881b      	ldrh	r3, [r3, #0]
 8012772:	3301      	adds	r3, #1
 8012774:	b29a      	uxth	r2, r3
 8012776:	e001      	b.n	801277c <inc_lock+0xfc>
 8012778:	f44f 7280 	mov.w	r2, #256	; 0x100
 801277c:	4906      	ldr	r1, [pc, #24]	; (8012798 <inc_lock+0x118>)
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	011b      	lsls	r3, r3, #4
 8012782:	440b      	add	r3, r1
 8012784:	330c      	adds	r3, #12
 8012786:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	3301      	adds	r3, #1
}
 801278c:	4618      	mov	r0, r3
 801278e:	3714      	adds	r7, #20
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr
 8012798:	20000960 	.word	0x20000960

0801279c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801279c:	b480      	push	{r7}
 801279e:	b085      	sub	sp, #20
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	3b01      	subs	r3, #1
 80127a8:	607b      	str	r3, [r7, #4]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d825      	bhi.n	80127fc <dec_lock+0x60>
		n = Files[i].ctr;
 80127b0:	4a17      	ldr	r2, [pc, #92]	; (8012810 <dec_lock+0x74>)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	011b      	lsls	r3, r3, #4
 80127b6:	4413      	add	r3, r2
 80127b8:	330c      	adds	r3, #12
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80127be:	89fb      	ldrh	r3, [r7, #14]
 80127c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127c4:	d101      	bne.n	80127ca <dec_lock+0x2e>
 80127c6:	2300      	movs	r3, #0
 80127c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80127ca:	89fb      	ldrh	r3, [r7, #14]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <dec_lock+0x3a>
 80127d0:	89fb      	ldrh	r3, [r7, #14]
 80127d2:	3b01      	subs	r3, #1
 80127d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80127d6:	4a0e      	ldr	r2, [pc, #56]	; (8012810 <dec_lock+0x74>)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	011b      	lsls	r3, r3, #4
 80127dc:	4413      	add	r3, r2
 80127de:	330c      	adds	r3, #12
 80127e0:	89fa      	ldrh	r2, [r7, #14]
 80127e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80127e4:	89fb      	ldrh	r3, [r7, #14]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d105      	bne.n	80127f6 <dec_lock+0x5a>
 80127ea:	4a09      	ldr	r2, [pc, #36]	; (8012810 <dec_lock+0x74>)
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	011b      	lsls	r3, r3, #4
 80127f0:	4413      	add	r3, r2
 80127f2:	2200      	movs	r2, #0
 80127f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80127f6:	2300      	movs	r3, #0
 80127f8:	737b      	strb	r3, [r7, #13]
 80127fa:	e001      	b.n	8012800 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80127fc:	2302      	movs	r3, #2
 80127fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012800:	7b7b      	ldrb	r3, [r7, #13]
}
 8012802:	4618      	mov	r0, r3
 8012804:	3714      	adds	r7, #20
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	20000960 	.word	0x20000960

08012814 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012814:	b480      	push	{r7}
 8012816:	b085      	sub	sp, #20
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801281c:	2300      	movs	r3, #0
 801281e:	60fb      	str	r3, [r7, #12]
 8012820:	e010      	b.n	8012844 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012822:	4a0d      	ldr	r2, [pc, #52]	; (8012858 <clear_lock+0x44>)
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	011b      	lsls	r3, r3, #4
 8012828:	4413      	add	r3, r2
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	429a      	cmp	r2, r3
 8012830:	d105      	bne.n	801283e <clear_lock+0x2a>
 8012832:	4a09      	ldr	r2, [pc, #36]	; (8012858 <clear_lock+0x44>)
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	011b      	lsls	r3, r3, #4
 8012838:	4413      	add	r3, r2
 801283a:	2200      	movs	r2, #0
 801283c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	3301      	adds	r3, #1
 8012842:	60fb      	str	r3, [r7, #12]
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2b01      	cmp	r3, #1
 8012848:	d9eb      	bls.n	8012822 <clear_lock+0xe>
	}
}
 801284a:	bf00      	nop
 801284c:	bf00      	nop
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr
 8012858:	20000960 	.word	0x20000960

0801285c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b086      	sub	sp, #24
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012864:	2300      	movs	r3, #0
 8012866:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	78db      	ldrb	r3, [r3, #3]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d034      	beq.n	80128da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012874:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	7858      	ldrb	r0, [r3, #1]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012880:	2301      	movs	r3, #1
 8012882:	697a      	ldr	r2, [r7, #20]
 8012884:	f7ff fd40 	bl	8012308 <disk_write>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d002      	beq.n	8012894 <sync_window+0x38>
			res = FR_DISK_ERR;
 801288e:	2301      	movs	r3, #1
 8012890:	73fb      	strb	r3, [r7, #15]
 8012892:	e022      	b.n	80128da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2200      	movs	r2, #0
 8012898:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6a1b      	ldr	r3, [r3, #32]
 801289e:	697a      	ldr	r2, [r7, #20]
 80128a0:	1ad2      	subs	r2, r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	699b      	ldr	r3, [r3, #24]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d217      	bcs.n	80128da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	789b      	ldrb	r3, [r3, #2]
 80128ae:	613b      	str	r3, [r7, #16]
 80128b0:	e010      	b.n	80128d4 <sync_window+0x78>
					wsect += fs->fsize;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	699b      	ldr	r3, [r3, #24]
 80128b6:	697a      	ldr	r2, [r7, #20]
 80128b8:	4413      	add	r3, r2
 80128ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	7858      	ldrb	r0, [r3, #1]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128c6:	2301      	movs	r3, #1
 80128c8:	697a      	ldr	r2, [r7, #20]
 80128ca:	f7ff fd1d 	bl	8012308 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	3b01      	subs	r3, #1
 80128d2:	613b      	str	r3, [r7, #16]
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d8eb      	bhi.n	80128b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80128da:	7bfb      	ldrb	r3, [r7, #15]
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3718      	adds	r7, #24
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b084      	sub	sp, #16
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80128ee:	2300      	movs	r3, #0
 80128f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f6:	683a      	ldr	r2, [r7, #0]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d01b      	beq.n	8012934 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff ffad 	bl	801285c <sync_window>
 8012902:	4603      	mov	r3, r0
 8012904:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012906:	7bfb      	ldrb	r3, [r7, #15]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d113      	bne.n	8012934 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	7858      	ldrb	r0, [r3, #1]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012916:	2301      	movs	r3, #1
 8012918:	683a      	ldr	r2, [r7, #0]
 801291a:	f7ff fcd5 	bl	80122c8 <disk_read>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	d004      	beq.n	801292e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012924:	f04f 33ff 	mov.w	r3, #4294967295
 8012928:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801292a:	2301      	movs	r3, #1
 801292c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	683a      	ldr	r2, [r7, #0]
 8012932:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8012934:	7bfb      	ldrb	r3, [r7, #15]
}
 8012936:	4618      	mov	r0, r3
 8012938:	3710      	adds	r7, #16
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
	...

08012940 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f7ff ff87 	bl	801285c <sync_window>
 801294e:	4603      	mov	r3, r0
 8012950:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012952:	7bfb      	ldrb	r3, [r7, #15]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d158      	bne.n	8012a0a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b03      	cmp	r3, #3
 801295e:	d148      	bne.n	80129f2 <sync_fs+0xb2>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	791b      	ldrb	r3, [r3, #4]
 8012964:	2b01      	cmp	r3, #1
 8012966:	d144      	bne.n	80129f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	3330      	adds	r3, #48	; 0x30
 801296c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012970:	2100      	movs	r1, #0
 8012972:	4618      	mov	r0, r3
 8012974:	f7ff fda9 	bl	80124ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	3330      	adds	r3, #48	; 0x30
 801297c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012980:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012984:	4618      	mov	r0, r3
 8012986:	f7ff fd38 	bl	80123fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3330      	adds	r3, #48	; 0x30
 801298e:	4921      	ldr	r1, [pc, #132]	; (8012a14 <sync_fs+0xd4>)
 8012990:	4618      	mov	r0, r3
 8012992:	f7ff fd4d 	bl	8012430 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3330      	adds	r3, #48	; 0x30
 801299a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801299e:	491e      	ldr	r1, [pc, #120]	; (8012a18 <sync_fs+0xd8>)
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7ff fd45 	bl	8012430 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	3330      	adds	r3, #48	; 0x30
 80129aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	691b      	ldr	r3, [r3, #16]
 80129b2:	4619      	mov	r1, r3
 80129b4:	4610      	mov	r0, r2
 80129b6:	f7ff fd3b 	bl	8012430 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	3330      	adds	r3, #48	; 0x30
 80129be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	4619      	mov	r1, r3
 80129c8:	4610      	mov	r0, r2
 80129ca:	f7ff fd31 	bl	8012430 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	69db      	ldr	r3, [r3, #28]
 80129d2:	1c5a      	adds	r2, r3, #1
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	7858      	ldrb	r0, [r3, #1]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129e6:	2301      	movs	r3, #1
 80129e8:	f7ff fc8e 	bl	8012308 <disk_write>
			fs->fsi_flag = 0;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	785b      	ldrb	r3, [r3, #1]
 80129f6:	2200      	movs	r2, #0
 80129f8:	2100      	movs	r1, #0
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7ff fca4 	bl	8012348 <disk_ioctl>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <sync_fs+0xca>
 8012a06:	2301      	movs	r3, #1
 8012a08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3710      	adds	r7, #16
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	41615252 	.word	0x41615252
 8012a18:	61417272 	.word	0x61417272

08012a1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	b083      	sub	sp, #12
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	3b02      	subs	r3, #2
 8012a2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	695b      	ldr	r3, [r3, #20]
 8012a30:	3b02      	subs	r3, #2
 8012a32:	683a      	ldr	r2, [r7, #0]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d301      	bcc.n	8012a3c <clust2sect+0x20>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	e008      	b.n	8012a4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	895b      	ldrh	r3, [r3, #10]
 8012a40:	461a      	mov	r2, r3
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	fb03 f202 	mul.w	r2, r3, r2
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a4c:	4413      	add	r3, r2
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	370c      	adds	r7, #12
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr

08012a5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b086      	sub	sp, #24
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
 8012a62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	d904      	bls.n	8012a7a <get_fat+0x20>
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	695b      	ldr	r3, [r3, #20]
 8012a74:	683a      	ldr	r2, [r7, #0]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d302      	bcc.n	8012a80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	617b      	str	r3, [r7, #20]
 8012a7e:	e08f      	b.n	8012ba0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a80:	f04f 33ff 	mov.w	r3, #4294967295
 8012a84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	2b03      	cmp	r3, #3
 8012a8c:	d062      	beq.n	8012b54 <get_fat+0xfa>
 8012a8e:	2b03      	cmp	r3, #3
 8012a90:	dc7c      	bgt.n	8012b8c <get_fat+0x132>
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d002      	beq.n	8012a9c <get_fat+0x42>
 8012a96:	2b02      	cmp	r3, #2
 8012a98:	d042      	beq.n	8012b20 <get_fat+0xc6>
 8012a9a:	e077      	b.n	8012b8c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	60fb      	str	r3, [r7, #12]
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	085b      	lsrs	r3, r3, #1
 8012aa4:	68fa      	ldr	r2, [r7, #12]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	6a1a      	ldr	r2, [r3, #32]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	0a5b      	lsrs	r3, r3, #9
 8012ab2:	4413      	add	r3, r2
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	6938      	ldr	r0, [r7, #16]
 8012ab8:	f7ff ff14 	bl	80128e4 <move_window>
 8012abc:	4603      	mov	r3, r0
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d167      	bne.n	8012b92 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	1c5a      	adds	r2, r3, #1
 8012ac6:	60fa      	str	r2, [r7, #12]
 8012ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012acc:	693a      	ldr	r2, [r7, #16]
 8012ace:	4413      	add	r3, r2
 8012ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ad4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	6a1a      	ldr	r2, [r3, #32]
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	0a5b      	lsrs	r3, r3, #9
 8012ade:	4413      	add	r3, r2
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6938      	ldr	r0, [r7, #16]
 8012ae4:	f7ff fefe 	bl	80128e4 <move_window>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d153      	bne.n	8012b96 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012af4:	693a      	ldr	r2, [r7, #16]
 8012af6:	4413      	add	r3, r2
 8012af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012afc:	021b      	lsls	r3, r3, #8
 8012afe:	461a      	mov	r2, r3
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	4313      	orrs	r3, r2
 8012b04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	f003 0301 	and.w	r3, r3, #1
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d002      	beq.n	8012b16 <get_fat+0xbc>
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	091b      	lsrs	r3, r3, #4
 8012b14:	e002      	b.n	8012b1c <get_fat+0xc2>
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b1c:	617b      	str	r3, [r7, #20]
			break;
 8012b1e:	e03f      	b.n	8012ba0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	6a1a      	ldr	r2, [r3, #32]
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	0a1b      	lsrs	r3, r3, #8
 8012b28:	4413      	add	r3, r2
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	6938      	ldr	r0, [r7, #16]
 8012b2e:	f7ff fed9 	bl	80128e4 <move_window>
 8012b32:	4603      	mov	r3, r0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d130      	bne.n	8012b9a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012b38:	693b      	ldr	r3, [r7, #16]
 8012b3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	005b      	lsls	r3, r3, #1
 8012b42:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012b46:	4413      	add	r3, r2
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7ff fc1b 	bl	8012384 <ld_word>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	617b      	str	r3, [r7, #20]
			break;
 8012b52:	e025      	b.n	8012ba0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	6a1a      	ldr	r2, [r3, #32]
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	09db      	lsrs	r3, r3, #7
 8012b5c:	4413      	add	r3, r2
 8012b5e:	4619      	mov	r1, r3
 8012b60:	6938      	ldr	r0, [r7, #16]
 8012b62:	f7ff febf 	bl	80128e4 <move_window>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d118      	bne.n	8012b9e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012b7a:	4413      	add	r3, r2
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff fc19 	bl	80123b4 <ld_dword>
 8012b82:	4603      	mov	r3, r0
 8012b84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012b88:	617b      	str	r3, [r7, #20]
			break;
 8012b8a:	e009      	b.n	8012ba0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	617b      	str	r3, [r7, #20]
 8012b90:	e006      	b.n	8012ba0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b92:	bf00      	nop
 8012b94:	e004      	b.n	8012ba0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b96:	bf00      	nop
 8012b98:	e002      	b.n	8012ba0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b9a:	bf00      	nop
 8012b9c:	e000      	b.n	8012ba0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b9e:	bf00      	nop
		}
	}

	return val;
 8012ba0:	697b      	ldr	r3, [r7, #20]
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3718      	adds	r7, #24
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012baa:	b590      	push	{r4, r7, lr}
 8012bac:	b089      	sub	sp, #36	; 0x24
 8012bae:	af00      	add	r7, sp, #0
 8012bb0:	60f8      	str	r0, [r7, #12]
 8012bb2:	60b9      	str	r1, [r7, #8]
 8012bb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012bb6:	2302      	movs	r3, #2
 8012bb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	f240 80d2 	bls.w	8012d66 <put_fat+0x1bc>
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	695b      	ldr	r3, [r3, #20]
 8012bc6:	68ba      	ldr	r2, [r7, #8]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	f080 80cc 	bcs.w	8012d66 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b03      	cmp	r3, #3
 8012bd4:	f000 8096 	beq.w	8012d04 <put_fat+0x15a>
 8012bd8:	2b03      	cmp	r3, #3
 8012bda:	f300 80cd 	bgt.w	8012d78 <put_fat+0x1ce>
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d002      	beq.n	8012be8 <put_fat+0x3e>
 8012be2:	2b02      	cmp	r3, #2
 8012be4:	d06e      	beq.n	8012cc4 <put_fat+0x11a>
 8012be6:	e0c7      	b.n	8012d78 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	61bb      	str	r3, [r7, #24]
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	085b      	lsrs	r3, r3, #1
 8012bf0:	69ba      	ldr	r2, [r7, #24]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6a1a      	ldr	r2, [r3, #32]
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	0a5b      	lsrs	r3, r3, #9
 8012bfe:	4413      	add	r3, r2
 8012c00:	4619      	mov	r1, r3
 8012c02:	68f8      	ldr	r0, [r7, #12]
 8012c04:	f7ff fe6e 	bl	80128e4 <move_window>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c0c:	7ffb      	ldrb	r3, [r7, #31]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f040 80ab 	bne.w	8012d6a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c1a:	69bb      	ldr	r3, [r7, #24]
 8012c1c:	1c59      	adds	r1, r3, #1
 8012c1e:	61b9      	str	r1, [r7, #24]
 8012c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c24:	4413      	add	r3, r2
 8012c26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	f003 0301 	and.w	r3, r3, #1
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d00d      	beq.n	8012c4e <put_fat+0xa4>
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	b25b      	sxtb	r3, r3
 8012c38:	f003 030f 	and.w	r3, r3, #15
 8012c3c:	b25a      	sxtb	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	011b      	lsls	r3, r3, #4
 8012c44:	b25b      	sxtb	r3, r3
 8012c46:	4313      	orrs	r3, r2
 8012c48:	b25b      	sxtb	r3, r3
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	e001      	b.n	8012c52 <put_fat+0xa8>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	b2db      	uxtb	r3, r3
 8012c52:	697a      	ldr	r2, [r7, #20]
 8012c54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	6a1a      	ldr	r2, [r3, #32]
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	0a5b      	lsrs	r3, r3, #9
 8012c64:	4413      	add	r3, r2
 8012c66:	4619      	mov	r1, r3
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f7ff fe3b 	bl	80128e4 <move_window>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c72:	7ffb      	ldrb	r3, [r7, #31]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d17a      	bne.n	8012d6e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c84:	4413      	add	r3, r2
 8012c86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	f003 0301 	and.w	r3, r3, #1
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d003      	beq.n	8012c9a <put_fat+0xf0>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	091b      	lsrs	r3, r3, #4
 8012c96:	b2db      	uxtb	r3, r3
 8012c98:	e00e      	b.n	8012cb8 <put_fat+0x10e>
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	b25b      	sxtb	r3, r3
 8012ca0:	f023 030f 	bic.w	r3, r3, #15
 8012ca4:	b25a      	sxtb	r2, r3
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	0a1b      	lsrs	r3, r3, #8
 8012caa:	b25b      	sxtb	r3, r3
 8012cac:	f003 030f 	and.w	r3, r3, #15
 8012cb0:	b25b      	sxtb	r3, r3
 8012cb2:	4313      	orrs	r3, r2
 8012cb4:	b25b      	sxtb	r3, r3
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	697a      	ldr	r2, [r7, #20]
 8012cba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2201      	movs	r2, #1
 8012cc0:	70da      	strb	r2, [r3, #3]
			break;
 8012cc2:	e059      	b.n	8012d78 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	6a1a      	ldr	r2, [r3, #32]
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	0a1b      	lsrs	r3, r3, #8
 8012ccc:	4413      	add	r3, r2
 8012cce:	4619      	mov	r1, r3
 8012cd0:	68f8      	ldr	r0, [r7, #12]
 8012cd2:	f7ff fe07 	bl	80128e4 <move_window>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012cda:	7ffb      	ldrb	r3, [r7, #31]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d148      	bne.n	8012d72 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	005b      	lsls	r3, r3, #1
 8012cea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012cee:	4413      	add	r3, r2
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	b292      	uxth	r2, r2
 8012cf4:	4611      	mov	r1, r2
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7ff fb7f 	bl	80123fa <st_word>
			fs->wflag = 1;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	70da      	strb	r2, [r3, #3]
			break;
 8012d02:	e039      	b.n	8012d78 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	6a1a      	ldr	r2, [r3, #32]
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	09db      	lsrs	r3, r3, #7
 8012d0c:	4413      	add	r3, r2
 8012d0e:	4619      	mov	r1, r3
 8012d10:	68f8      	ldr	r0, [r7, #12]
 8012d12:	f7ff fde7 	bl	80128e4 <move_window>
 8012d16:	4603      	mov	r3, r0
 8012d18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d1a:	7ffb      	ldrb	r3, [r7, #31]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d12a      	bne.n	8012d76 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	009b      	lsls	r3, r3, #2
 8012d30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d34:	4413      	add	r3, r2
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7ff fb3c 	bl	80123b4 <ld_dword>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012d42:	4323      	orrs	r3, r4
 8012d44:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d54:	4413      	add	r3, r2
 8012d56:	6879      	ldr	r1, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7ff fb69 	bl	8012430 <st_dword>
			fs->wflag = 1;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2201      	movs	r2, #1
 8012d62:	70da      	strb	r2, [r3, #3]
			break;
 8012d64:	e008      	b.n	8012d78 <put_fat+0x1ce>
		}
	}
 8012d66:	bf00      	nop
 8012d68:	e006      	b.n	8012d78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d6a:	bf00      	nop
 8012d6c:	e004      	b.n	8012d78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d6e:	bf00      	nop
 8012d70:	e002      	b.n	8012d78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d72:	bf00      	nop
 8012d74:	e000      	b.n	8012d78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d76:	bf00      	nop
	return res;
 8012d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3724      	adds	r7, #36	; 0x24
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd90      	pop	{r4, r7, pc}

08012d82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012d82:	b580      	push	{r7, lr}
 8012d84:	b088      	sub	sp, #32
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	60f8      	str	r0, [r7, #12]
 8012d8a:	60b9      	str	r1, [r7, #8]
 8012d8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d904      	bls.n	8012da8 <remove_chain+0x26>
 8012d9e:	69bb      	ldr	r3, [r7, #24]
 8012da0:	695b      	ldr	r3, [r3, #20]
 8012da2:	68ba      	ldr	r2, [r7, #8]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d301      	bcc.n	8012dac <remove_chain+0x2a>
 8012da8:	2302      	movs	r3, #2
 8012daa:	e04b      	b.n	8012e44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d00c      	beq.n	8012dcc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012db2:	f04f 32ff 	mov.w	r2, #4294967295
 8012db6:	6879      	ldr	r1, [r7, #4]
 8012db8:	69b8      	ldr	r0, [r7, #24]
 8012dba:	f7ff fef6 	bl	8012baa <put_fat>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012dc2:	7ffb      	ldrb	r3, [r7, #31]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d001      	beq.n	8012dcc <remove_chain+0x4a>
 8012dc8:	7ffb      	ldrb	r3, [r7, #31]
 8012dca:	e03b      	b.n	8012e44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012dcc:	68b9      	ldr	r1, [r7, #8]
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f7ff fe43 	bl	8012a5a <get_fat>
 8012dd4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d031      	beq.n	8012e40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d101      	bne.n	8012de6 <remove_chain+0x64>
 8012de2:	2302      	movs	r3, #2
 8012de4:	e02e      	b.n	8012e44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dec:	d101      	bne.n	8012df2 <remove_chain+0x70>
 8012dee:	2301      	movs	r3, #1
 8012df0:	e028      	b.n	8012e44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012df2:	2200      	movs	r2, #0
 8012df4:	68b9      	ldr	r1, [r7, #8]
 8012df6:	69b8      	ldr	r0, [r7, #24]
 8012df8:	f7ff fed7 	bl	8012baa <put_fat>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012e00:	7ffb      	ldrb	r3, [r7, #31]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d001      	beq.n	8012e0a <remove_chain+0x88>
 8012e06:	7ffb      	ldrb	r3, [r7, #31]
 8012e08:	e01c      	b.n	8012e44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	691a      	ldr	r2, [r3, #16]
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	695b      	ldr	r3, [r3, #20]
 8012e12:	3b02      	subs	r3, #2
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d20b      	bcs.n	8012e30 <remove_chain+0xae>
			fs->free_clst++;
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	1c5a      	adds	r2, r3, #1
 8012e1e:	69bb      	ldr	r3, [r7, #24]
 8012e20:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	791b      	ldrb	r3, [r3, #4]
 8012e26:	f043 0301 	orr.w	r3, r3, #1
 8012e2a:	b2da      	uxtb	r2, r3
 8012e2c:	69bb      	ldr	r3, [r7, #24]
 8012e2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	695b      	ldr	r3, [r3, #20]
 8012e38:	68ba      	ldr	r2, [r7, #8]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d3c6      	bcc.n	8012dcc <remove_chain+0x4a>
 8012e3e:	e000      	b.n	8012e42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012e40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012e42:	2300      	movs	r3, #0
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3720      	adds	r7, #32
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b088      	sub	sp, #32
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d10d      	bne.n	8012e7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012e68:	69bb      	ldr	r3, [r7, #24]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d004      	beq.n	8012e78 <create_chain+0x2c>
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	695b      	ldr	r3, [r3, #20]
 8012e72:	69ba      	ldr	r2, [r7, #24]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d31b      	bcc.n	8012eb0 <create_chain+0x64>
 8012e78:	2301      	movs	r3, #1
 8012e7a:	61bb      	str	r3, [r7, #24]
 8012e7c:	e018      	b.n	8012eb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012e7e:	6839      	ldr	r1, [r7, #0]
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f7ff fdea 	bl	8012a5a <get_fat>
 8012e86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2b01      	cmp	r3, #1
 8012e8c:	d801      	bhi.n	8012e92 <create_chain+0x46>
 8012e8e:	2301      	movs	r3, #1
 8012e90:	e070      	b.n	8012f74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e98:	d101      	bne.n	8012e9e <create_chain+0x52>
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	e06a      	b.n	8012f74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	695b      	ldr	r3, [r3, #20]
 8012ea2:	68fa      	ldr	r2, [r7, #12]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d201      	bcs.n	8012eac <create_chain+0x60>
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	e063      	b.n	8012f74 <create_chain+0x128>
		scl = clst;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012eb4:	69fb      	ldr	r3, [r7, #28]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	695b      	ldr	r3, [r3, #20]
 8012ebe:	69fa      	ldr	r2, [r7, #28]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d307      	bcc.n	8012ed4 <create_chain+0x88>
				ncl = 2;
 8012ec4:	2302      	movs	r3, #2
 8012ec6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012ec8:	69fa      	ldr	r2, [r7, #28]
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d901      	bls.n	8012ed4 <create_chain+0x88>
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	e04f      	b.n	8012f74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012ed4:	69f9      	ldr	r1, [r7, #28]
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7ff fdbf 	bl	8012a5a <get_fat>
 8012edc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d00e      	beq.n	8012f02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d003      	beq.n	8012ef2 <create_chain+0xa6>
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef0:	d101      	bne.n	8012ef6 <create_chain+0xaa>
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	e03e      	b.n	8012f74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012ef6:	69fa      	ldr	r2, [r7, #28]
 8012ef8:	69bb      	ldr	r3, [r7, #24]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d1da      	bne.n	8012eb4 <create_chain+0x68>
 8012efe:	2300      	movs	r3, #0
 8012f00:	e038      	b.n	8012f74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012f02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012f04:	f04f 32ff 	mov.w	r2, #4294967295
 8012f08:	69f9      	ldr	r1, [r7, #28]
 8012f0a:	6938      	ldr	r0, [r7, #16]
 8012f0c:	f7ff fe4d 	bl	8012baa <put_fat>
 8012f10:	4603      	mov	r3, r0
 8012f12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012f14:	7dfb      	ldrb	r3, [r7, #23]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d109      	bne.n	8012f2e <create_chain+0xe2>
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012f20:	69fa      	ldr	r2, [r7, #28]
 8012f22:	6839      	ldr	r1, [r7, #0]
 8012f24:	6938      	ldr	r0, [r7, #16]
 8012f26:	f7ff fe40 	bl	8012baa <put_fat>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012f2e:	7dfb      	ldrb	r3, [r7, #23]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d116      	bne.n	8012f62 <create_chain+0x116>
		fs->last_clst = ncl;
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	69fa      	ldr	r2, [r7, #28]
 8012f38:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	691a      	ldr	r2, [r3, #16]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	695b      	ldr	r3, [r3, #20]
 8012f42:	3b02      	subs	r3, #2
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d804      	bhi.n	8012f52 <create_chain+0x106>
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	691b      	ldr	r3, [r3, #16]
 8012f4c:	1e5a      	subs	r2, r3, #1
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	791b      	ldrb	r3, [r3, #4]
 8012f56:	f043 0301 	orr.w	r3, r3, #1
 8012f5a:	b2da      	uxtb	r2, r3
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	711a      	strb	r2, [r3, #4]
 8012f60:	e007      	b.n	8012f72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f62:	7dfb      	ldrb	r3, [r7, #23]
 8012f64:	2b01      	cmp	r3, #1
 8012f66:	d102      	bne.n	8012f6e <create_chain+0x122>
 8012f68:	f04f 33ff 	mov.w	r3, #4294967295
 8012f6c:	e000      	b.n	8012f70 <create_chain+0x124>
 8012f6e:	2301      	movs	r3, #1
 8012f70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012f72:	69fb      	ldr	r3, [r7, #28]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3720      	adds	r7, #32
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b087      	sub	sp, #28
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f90:	3304      	adds	r3, #4
 8012f92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	0a5b      	lsrs	r3, r3, #9
 8012f98:	68fa      	ldr	r2, [r7, #12]
 8012f9a:	8952      	ldrh	r2, [r2, #10]
 8012f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fa0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	1d1a      	adds	r2, r3, #4
 8012fa6:	613a      	str	r2, [r7, #16]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d101      	bne.n	8012fb6 <clmt_clust+0x3a>
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	e010      	b.n	8012fd8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012fb6:	697a      	ldr	r2, [r7, #20]
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d307      	bcc.n	8012fce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012fbe:	697a      	ldr	r2, [r7, #20]
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	1ad3      	subs	r3, r2, r3
 8012fc4:	617b      	str	r3, [r7, #20]
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	3304      	adds	r3, #4
 8012fca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012fcc:	e7e9      	b.n	8012fa2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012fce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	681a      	ldr	r2, [r3, #0]
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	4413      	add	r3, r2
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	371c      	adds	r7, #28
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr

08012fe4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b086      	sub	sp, #24
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012ffa:	d204      	bcs.n	8013006 <dir_sdi+0x22>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	f003 031f 	and.w	r3, r3, #31
 8013002:	2b00      	cmp	r3, #0
 8013004:	d001      	beq.n	801300a <dir_sdi+0x26>
		return FR_INT_ERR;
 8013006:	2302      	movs	r3, #2
 8013008:	e063      	b.n	80130d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d106      	bne.n	801302a <dir_sdi+0x46>
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	2b02      	cmp	r3, #2
 8013022:	d902      	bls.n	801302a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013028:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d10c      	bne.n	801304a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	095b      	lsrs	r3, r3, #5
 8013034:	693a      	ldr	r2, [r7, #16]
 8013036:	8912      	ldrh	r2, [r2, #8]
 8013038:	4293      	cmp	r3, r2
 801303a:	d301      	bcc.n	8013040 <dir_sdi+0x5c>
 801303c:	2302      	movs	r3, #2
 801303e:	e048      	b.n	80130d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	61da      	str	r2, [r3, #28]
 8013048:	e029      	b.n	801309e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	895b      	ldrh	r3, [r3, #10]
 801304e:	025b      	lsls	r3, r3, #9
 8013050:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013052:	e019      	b.n	8013088 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6979      	ldr	r1, [r7, #20]
 8013058:	4618      	mov	r0, r3
 801305a:	f7ff fcfe 	bl	8012a5a <get_fat>
 801305e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013066:	d101      	bne.n	801306c <dir_sdi+0x88>
 8013068:	2301      	movs	r3, #1
 801306a:	e032      	b.n	80130d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	2b01      	cmp	r3, #1
 8013070:	d904      	bls.n	801307c <dir_sdi+0x98>
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	695b      	ldr	r3, [r3, #20]
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	429a      	cmp	r2, r3
 801307a:	d301      	bcc.n	8013080 <dir_sdi+0x9c>
 801307c:	2302      	movs	r3, #2
 801307e:	e028      	b.n	80130d2 <dir_sdi+0xee>
			ofs -= csz;
 8013080:	683a      	ldr	r2, [r7, #0]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	1ad3      	subs	r3, r2, r3
 8013086:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013088:	683a      	ldr	r2, [r7, #0]
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	429a      	cmp	r2, r3
 801308e:	d2e1      	bcs.n	8013054 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013090:	6979      	ldr	r1, [r7, #20]
 8013092:	6938      	ldr	r0, [r7, #16]
 8013094:	f7ff fcc2 	bl	8012a1c <clust2sect>
 8013098:	4602      	mov	r2, r0
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	697a      	ldr	r2, [r7, #20]
 80130a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	69db      	ldr	r3, [r3, #28]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d101      	bne.n	80130b0 <dir_sdi+0xcc>
 80130ac:	2302      	movs	r3, #2
 80130ae:	e010      	b.n	80130d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	69da      	ldr	r2, [r3, #28]
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	0a5b      	lsrs	r3, r3, #9
 80130b8:	441a      	add	r2, r3
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ca:	441a      	add	r2, r3
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80130d0:	2300      	movs	r3, #0
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3718      	adds	r7, #24
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b086      	sub	sp, #24
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
 80130e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	695b      	ldr	r3, [r3, #20]
 80130ee:	3320      	adds	r3, #32
 80130f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	69db      	ldr	r3, [r3, #28]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d003      	beq.n	8013102 <dir_next+0x28>
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013100:	d301      	bcc.n	8013106 <dir_next+0x2c>
 8013102:	2304      	movs	r3, #4
 8013104:	e0aa      	b.n	801325c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801310c:	2b00      	cmp	r3, #0
 801310e:	f040 8098 	bne.w	8013242 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	69db      	ldr	r3, [r3, #28]
 8013116:	1c5a      	adds	r2, r3, #1
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	699b      	ldr	r3, [r3, #24]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10b      	bne.n	801313c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	095b      	lsrs	r3, r3, #5
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	8912      	ldrh	r2, [r2, #8]
 801312c:	4293      	cmp	r3, r2
 801312e:	f0c0 8088 	bcc.w	8013242 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	61da      	str	r2, [r3, #28]
 8013138:	2304      	movs	r3, #4
 801313a:	e08f      	b.n	801325c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	0a5b      	lsrs	r3, r3, #9
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	8952      	ldrh	r2, [r2, #10]
 8013144:	3a01      	subs	r2, #1
 8013146:	4013      	ands	r3, r2
 8013148:	2b00      	cmp	r3, #0
 801314a:	d17a      	bne.n	8013242 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	699b      	ldr	r3, [r3, #24]
 8013152:	4619      	mov	r1, r3
 8013154:	4610      	mov	r0, r2
 8013156:	f7ff fc80 	bl	8012a5a <get_fat>
 801315a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	2b01      	cmp	r3, #1
 8013160:	d801      	bhi.n	8013166 <dir_next+0x8c>
 8013162:	2302      	movs	r3, #2
 8013164:	e07a      	b.n	801325c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801316c:	d101      	bne.n	8013172 <dir_next+0x98>
 801316e:	2301      	movs	r3, #1
 8013170:	e074      	b.n	801325c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	695b      	ldr	r3, [r3, #20]
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	429a      	cmp	r2, r3
 801317a:	d358      	bcc.n	801322e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d104      	bne.n	801318c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2200      	movs	r2, #0
 8013186:	61da      	str	r2, [r3, #28]
 8013188:	2304      	movs	r3, #4
 801318a:	e067      	b.n	801325c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	699b      	ldr	r3, [r3, #24]
 8013192:	4619      	mov	r1, r3
 8013194:	4610      	mov	r0, r2
 8013196:	f7ff fe59 	bl	8012e4c <create_chain>
 801319a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d101      	bne.n	80131a6 <dir_next+0xcc>
 80131a2:	2307      	movs	r3, #7
 80131a4:	e05a      	b.n	801325c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d101      	bne.n	80131b0 <dir_next+0xd6>
 80131ac:	2302      	movs	r3, #2
 80131ae:	e055      	b.n	801325c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131b6:	d101      	bne.n	80131bc <dir_next+0xe2>
 80131b8:	2301      	movs	r3, #1
 80131ba:	e04f      	b.n	801325c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80131bc:	68f8      	ldr	r0, [r7, #12]
 80131be:	f7ff fb4d 	bl	801285c <sync_window>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <dir_next+0xf2>
 80131c8:	2301      	movs	r3, #1
 80131ca:	e047      	b.n	801325c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	3330      	adds	r3, #48	; 0x30
 80131d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131d4:	2100      	movs	r1, #0
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7ff f977 	bl	80124ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80131dc:	2300      	movs	r3, #0
 80131de:	613b      	str	r3, [r7, #16]
 80131e0:	6979      	ldr	r1, [r7, #20]
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f7ff fc1a 	bl	8012a1c <clust2sect>
 80131e8:	4602      	mov	r2, r0
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80131ee:	e012      	b.n	8013216 <dir_next+0x13c>
						fs->wflag = 1;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2201      	movs	r2, #1
 80131f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f7ff fb30 	bl	801285c <sync_window>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d001      	beq.n	8013206 <dir_next+0x12c>
 8013202:	2301      	movs	r3, #1
 8013204:	e02a      	b.n	801325c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	3301      	adds	r3, #1
 801320a:	613b      	str	r3, [r7, #16]
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013210:	1c5a      	adds	r2, r3, #1
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	62da      	str	r2, [r3, #44]	; 0x2c
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	895b      	ldrh	r3, [r3, #10]
 801321a:	461a      	mov	r2, r3
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	4293      	cmp	r3, r2
 8013220:	d3e6      	bcc.n	80131f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	1ad2      	subs	r2, r2, r3
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	697a      	ldr	r2, [r7, #20]
 8013232:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013234:	6979      	ldr	r1, [r7, #20]
 8013236:	68f8      	ldr	r0, [r7, #12]
 8013238:	f7ff fbf0 	bl	8012a1c <clust2sect>
 801323c:	4602      	mov	r2, r0
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013254:	441a      	add	r2, r3
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801325a:	2300      	movs	r3, #0
}
 801325c:	4618      	mov	r0, r3
 801325e:	3718      	adds	r7, #24
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013274:	2100      	movs	r1, #0
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f7ff feb4 	bl	8012fe4 <dir_sdi>
 801327c:	4603      	mov	r3, r0
 801327e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013280:	7dfb      	ldrb	r3, [r7, #23]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d12b      	bne.n	80132de <dir_alloc+0x7a>
		n = 0;
 8013286:	2300      	movs	r3, #0
 8013288:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	69db      	ldr	r3, [r3, #28]
 801328e:	4619      	mov	r1, r3
 8013290:	68f8      	ldr	r0, [r7, #12]
 8013292:	f7ff fb27 	bl	80128e4 <move_window>
 8013296:	4603      	mov	r3, r0
 8013298:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801329a:	7dfb      	ldrb	r3, [r7, #23]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d11d      	bne.n	80132dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	6a1b      	ldr	r3, [r3, #32]
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	2be5      	cmp	r3, #229	; 0xe5
 80132a8:	d004      	beq.n	80132b4 <dir_alloc+0x50>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6a1b      	ldr	r3, [r3, #32]
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d107      	bne.n	80132c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	3301      	adds	r3, #1
 80132b8:	613b      	str	r3, [r7, #16]
 80132ba:	693a      	ldr	r2, [r7, #16]
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d102      	bne.n	80132c8 <dir_alloc+0x64>
 80132c2:	e00c      	b.n	80132de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80132c4:	2300      	movs	r3, #0
 80132c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80132c8:	2101      	movs	r1, #1
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f7ff ff05 	bl	80130da <dir_next>
 80132d0:	4603      	mov	r3, r0
 80132d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80132d4:	7dfb      	ldrb	r3, [r7, #23]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d0d7      	beq.n	801328a <dir_alloc+0x26>
 80132da:	e000      	b.n	80132de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80132dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80132de:	7dfb      	ldrb	r3, [r7, #23]
 80132e0:	2b04      	cmp	r3, #4
 80132e2:	d101      	bne.n	80132e8 <dir_alloc+0x84>
 80132e4:	2307      	movs	r3, #7
 80132e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80132e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3718      	adds	r7, #24
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b084      	sub	sp, #16
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	6078      	str	r0, [r7, #4]
 80132fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	331a      	adds	r3, #26
 8013300:	4618      	mov	r0, r3
 8013302:	f7ff f83f 	bl	8012384 <ld_word>
 8013306:	4603      	mov	r3, r0
 8013308:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	2b03      	cmp	r3, #3
 8013310:	d109      	bne.n	8013326 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	3314      	adds	r3, #20
 8013316:	4618      	mov	r0, r3
 8013318:	f7ff f834 	bl	8012384 <ld_word>
 801331c:	4603      	mov	r3, r0
 801331e:	041b      	lsls	r3, r3, #16
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	4313      	orrs	r3, r2
 8013324:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013326:	68fb      	ldr	r3, [r7, #12]
}
 8013328:	4618      	mov	r0, r3
 801332a:	3710      	adds	r7, #16
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}

08013330 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	331a      	adds	r3, #26
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	b292      	uxth	r2, r2
 8013344:	4611      	mov	r1, r2
 8013346:	4618      	mov	r0, r3
 8013348:	f7ff f857 	bl	80123fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	2b03      	cmp	r3, #3
 8013352:	d109      	bne.n	8013368 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	f103 0214 	add.w	r2, r3, #20
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	0c1b      	lsrs	r3, r3, #16
 801335e:	b29b      	uxth	r3, r3
 8013360:	4619      	mov	r1, r3
 8013362:	4610      	mov	r0, r2
 8013364:	f7ff f849 	bl	80123fa <st_word>
	}
}
 8013368:	bf00      	nop
 801336a:	3710      	adds	r7, #16
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801337e:	2100      	movs	r1, #0
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7ff fe2f 	bl	8012fe4 <dir_sdi>
 8013386:	4603      	mov	r3, r0
 8013388:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801338a:	7dfb      	ldrb	r3, [r7, #23]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d001      	beq.n	8013394 <dir_find+0x24>
 8013390:	7dfb      	ldrb	r3, [r7, #23]
 8013392:	e03e      	b.n	8013412 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	69db      	ldr	r3, [r3, #28]
 8013398:	4619      	mov	r1, r3
 801339a:	6938      	ldr	r0, [r7, #16]
 801339c:	f7ff faa2 	bl	80128e4 <move_window>
 80133a0:	4603      	mov	r3, r0
 80133a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80133a4:	7dfb      	ldrb	r3, [r7, #23]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d12f      	bne.n	801340a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6a1b      	ldr	r3, [r3, #32]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80133b2:	7bfb      	ldrb	r3, [r7, #15]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d102      	bne.n	80133be <dir_find+0x4e>
 80133b8:	2304      	movs	r3, #4
 80133ba:	75fb      	strb	r3, [r7, #23]
 80133bc:	e028      	b.n	8013410 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6a1b      	ldr	r3, [r3, #32]
 80133c2:	330b      	adds	r3, #11
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133ca:	b2da      	uxtb	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6a1b      	ldr	r3, [r3, #32]
 80133d4:	330b      	adds	r3, #11
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	f003 0308 	and.w	r3, r3, #8
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d10a      	bne.n	80133f6 <dir_find+0x86>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6a18      	ldr	r0, [r3, #32]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	3324      	adds	r3, #36	; 0x24
 80133e8:	220b      	movs	r2, #11
 80133ea:	4619      	mov	r1, r3
 80133ec:	f7ff f888 	bl	8012500 <mem_cmp>
 80133f0:	4603      	mov	r3, r0
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d00b      	beq.n	801340e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80133f6:	2100      	movs	r1, #0
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7ff fe6e 	bl	80130da <dir_next>
 80133fe:	4603      	mov	r3, r0
 8013400:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013402:	7dfb      	ldrb	r3, [r7, #23]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d0c5      	beq.n	8013394 <dir_find+0x24>
 8013408:	e002      	b.n	8013410 <dir_find+0xa0>
		if (res != FR_OK) break;
 801340a:	bf00      	nop
 801340c:	e000      	b.n	8013410 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801340e:	bf00      	nop

	return res;
 8013410:	7dfb      	ldrb	r3, [r7, #23]
}
 8013412:	4618      	mov	r0, r3
 8013414:	3718      	adds	r7, #24
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801341a:	b580      	push	{r7, lr}
 801341c:	b084      	sub	sp, #16
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013428:	2101      	movs	r1, #1
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7ff ff1a 	bl	8013264 <dir_alloc>
 8013430:	4603      	mov	r3, r0
 8013432:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013434:	7bfb      	ldrb	r3, [r7, #15]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d11c      	bne.n	8013474 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	69db      	ldr	r3, [r3, #28]
 801343e:	4619      	mov	r1, r3
 8013440:	68b8      	ldr	r0, [r7, #8]
 8013442:	f7ff fa4f 	bl	80128e4 <move_window>
 8013446:	4603      	mov	r3, r0
 8013448:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801344a:	7bfb      	ldrb	r3, [r7, #15]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d111      	bne.n	8013474 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6a1b      	ldr	r3, [r3, #32]
 8013454:	2220      	movs	r2, #32
 8013456:	2100      	movs	r1, #0
 8013458:	4618      	mov	r0, r3
 801345a:	f7ff f836 	bl	80124ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6a18      	ldr	r0, [r3, #32]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	3324      	adds	r3, #36	; 0x24
 8013466:	220b      	movs	r2, #11
 8013468:	4619      	mov	r1, r3
 801346a:	f7ff f80d 	bl	8012488 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	2201      	movs	r2, #1
 8013472:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013474:	7bfb      	ldrb	r3, [r7, #15]
}
 8013476:	4618      	mov	r0, r3
 8013478:	3710      	adds	r7, #16
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
	...

08013480 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b088      	sub	sp, #32
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	3324      	adds	r3, #36	; 0x24
 8013494:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013496:	220b      	movs	r2, #11
 8013498:	2120      	movs	r1, #32
 801349a:	68b8      	ldr	r0, [r7, #8]
 801349c:	f7ff f815 	bl	80124ca <mem_set>
	si = i = 0; ni = 8;
 80134a0:	2300      	movs	r3, #0
 80134a2:	613b      	str	r3, [r7, #16]
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	61fb      	str	r3, [r7, #28]
 80134a8:	2308      	movs	r3, #8
 80134aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	1c5a      	adds	r2, r3, #1
 80134b0:	61fa      	str	r2, [r7, #28]
 80134b2:	68fa      	ldr	r2, [r7, #12]
 80134b4:	4413      	add	r3, r2
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80134ba:	7efb      	ldrb	r3, [r7, #27]
 80134bc:	2b20      	cmp	r3, #32
 80134be:	d94e      	bls.n	801355e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80134c0:	7efb      	ldrb	r3, [r7, #27]
 80134c2:	2b2f      	cmp	r3, #47	; 0x2f
 80134c4:	d006      	beq.n	80134d4 <create_name+0x54>
 80134c6:	7efb      	ldrb	r3, [r7, #27]
 80134c8:	2b5c      	cmp	r3, #92	; 0x5c
 80134ca:	d110      	bne.n	80134ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80134cc:	e002      	b.n	80134d4 <create_name+0x54>
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	3301      	adds	r3, #1
 80134d2:	61fb      	str	r3, [r7, #28]
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	69fb      	ldr	r3, [r7, #28]
 80134d8:	4413      	add	r3, r2
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	2b2f      	cmp	r3, #47	; 0x2f
 80134de:	d0f6      	beq.n	80134ce <create_name+0x4e>
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	69fb      	ldr	r3, [r7, #28]
 80134e4:	4413      	add	r3, r2
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	2b5c      	cmp	r3, #92	; 0x5c
 80134ea:	d0f0      	beq.n	80134ce <create_name+0x4e>
			break;
 80134ec:	e038      	b.n	8013560 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80134ee:	7efb      	ldrb	r3, [r7, #27]
 80134f0:	2b2e      	cmp	r3, #46	; 0x2e
 80134f2:	d003      	beq.n	80134fc <create_name+0x7c>
 80134f4:	693a      	ldr	r2, [r7, #16]
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d30c      	bcc.n	8013516 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	2b0b      	cmp	r3, #11
 8013500:	d002      	beq.n	8013508 <create_name+0x88>
 8013502:	7efb      	ldrb	r3, [r7, #27]
 8013504:	2b2e      	cmp	r3, #46	; 0x2e
 8013506:	d001      	beq.n	801350c <create_name+0x8c>
 8013508:	2306      	movs	r3, #6
 801350a:	e044      	b.n	8013596 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801350c:	2308      	movs	r3, #8
 801350e:	613b      	str	r3, [r7, #16]
 8013510:	230b      	movs	r3, #11
 8013512:	617b      	str	r3, [r7, #20]
			continue;
 8013514:	e022      	b.n	801355c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013516:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801351a:	2b00      	cmp	r3, #0
 801351c:	da04      	bge.n	8013528 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801351e:	7efb      	ldrb	r3, [r7, #27]
 8013520:	3b80      	subs	r3, #128	; 0x80
 8013522:	4a1f      	ldr	r2, [pc, #124]	; (80135a0 <create_name+0x120>)
 8013524:	5cd3      	ldrb	r3, [r2, r3]
 8013526:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013528:	7efb      	ldrb	r3, [r7, #27]
 801352a:	4619      	mov	r1, r3
 801352c:	481d      	ldr	r0, [pc, #116]	; (80135a4 <create_name+0x124>)
 801352e:	f7ff f80e 	bl	801254e <chk_chr>
 8013532:	4603      	mov	r3, r0
 8013534:	2b00      	cmp	r3, #0
 8013536:	d001      	beq.n	801353c <create_name+0xbc>
 8013538:	2306      	movs	r3, #6
 801353a:	e02c      	b.n	8013596 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801353c:	7efb      	ldrb	r3, [r7, #27]
 801353e:	2b60      	cmp	r3, #96	; 0x60
 8013540:	d905      	bls.n	801354e <create_name+0xce>
 8013542:	7efb      	ldrb	r3, [r7, #27]
 8013544:	2b7a      	cmp	r3, #122	; 0x7a
 8013546:	d802      	bhi.n	801354e <create_name+0xce>
 8013548:	7efb      	ldrb	r3, [r7, #27]
 801354a:	3b20      	subs	r3, #32
 801354c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	1c5a      	adds	r2, r3, #1
 8013552:	613a      	str	r2, [r7, #16]
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	4413      	add	r3, r2
 8013558:	7efa      	ldrb	r2, [r7, #27]
 801355a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801355c:	e7a6      	b.n	80134ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801355e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013560:	68fa      	ldr	r2, [r7, #12]
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	441a      	add	r2, r3
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d101      	bne.n	8013574 <create_name+0xf4>
 8013570:	2306      	movs	r3, #6
 8013572:	e010      	b.n	8013596 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	2be5      	cmp	r3, #229	; 0xe5
 801357a:	d102      	bne.n	8013582 <create_name+0x102>
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	2205      	movs	r2, #5
 8013580:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013582:	7efb      	ldrb	r3, [r7, #27]
 8013584:	2b20      	cmp	r3, #32
 8013586:	d801      	bhi.n	801358c <create_name+0x10c>
 8013588:	2204      	movs	r2, #4
 801358a:	e000      	b.n	801358e <create_name+0x10e>
 801358c:	2200      	movs	r2, #0
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	330b      	adds	r3, #11
 8013592:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013594:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013596:	4618      	mov	r0, r3
 8013598:	3720      	adds	r7, #32
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	08023f38 	.word	0x08023f38
 80135a4:	0802206c 	.word	0x0802206c

080135a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80135bc:	e002      	b.n	80135c4 <follow_path+0x1c>
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	3301      	adds	r3, #1
 80135c2:	603b      	str	r3, [r7, #0]
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	2b2f      	cmp	r3, #47	; 0x2f
 80135ca:	d0f8      	beq.n	80135be <follow_path+0x16>
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	2b5c      	cmp	r3, #92	; 0x5c
 80135d2:	d0f4      	beq.n	80135be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	2200      	movs	r2, #0
 80135d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	2b1f      	cmp	r3, #31
 80135e0:	d80a      	bhi.n	80135f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2280      	movs	r2, #128	; 0x80
 80135e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80135ea:	2100      	movs	r1, #0
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f7ff fcf9 	bl	8012fe4 <dir_sdi>
 80135f2:	4603      	mov	r3, r0
 80135f4:	75fb      	strb	r3, [r7, #23]
 80135f6:	e043      	b.n	8013680 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135f8:	463b      	mov	r3, r7
 80135fa:	4619      	mov	r1, r3
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f7ff ff3f 	bl	8013480 <create_name>
 8013602:	4603      	mov	r3, r0
 8013604:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013606:	7dfb      	ldrb	r3, [r7, #23]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d134      	bne.n	8013676 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7ff feaf 	bl	8013370 <dir_find>
 8013612:	4603      	mov	r3, r0
 8013614:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801361c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801361e:	7dfb      	ldrb	r3, [r7, #23]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d00a      	beq.n	801363a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013624:	7dfb      	ldrb	r3, [r7, #23]
 8013626:	2b04      	cmp	r3, #4
 8013628:	d127      	bne.n	801367a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801362a:	7afb      	ldrb	r3, [r7, #11]
 801362c:	f003 0304 	and.w	r3, r3, #4
 8013630:	2b00      	cmp	r3, #0
 8013632:	d122      	bne.n	801367a <follow_path+0xd2>
 8013634:	2305      	movs	r3, #5
 8013636:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013638:	e01f      	b.n	801367a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801363a:	7afb      	ldrb	r3, [r7, #11]
 801363c:	f003 0304 	and.w	r3, r3, #4
 8013640:	2b00      	cmp	r3, #0
 8013642:	d11c      	bne.n	801367e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	799b      	ldrb	r3, [r3, #6]
 8013648:	f003 0310 	and.w	r3, r3, #16
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013650:	2305      	movs	r3, #5
 8013652:	75fb      	strb	r3, [r7, #23]
 8013654:	e014      	b.n	8013680 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	695b      	ldr	r3, [r3, #20]
 8013660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013664:	4413      	add	r3, r2
 8013666:	4619      	mov	r1, r3
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f7ff fe42 	bl	80132f2 <ld_clust>
 801366e:	4602      	mov	r2, r0
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013674:	e7c0      	b.n	80135f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8013676:	bf00      	nop
 8013678:	e002      	b.n	8013680 <follow_path+0xd8>
				break;
 801367a:	bf00      	nop
 801367c:	e000      	b.n	8013680 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801367e:	bf00      	nop
			}
		}
	}

	return res;
 8013680:	7dfb      	ldrb	r3, [r7, #23]
}
 8013682:	4618      	mov	r0, r3
 8013684:	3718      	adds	r7, #24
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801368a:	b480      	push	{r7}
 801368c:	b087      	sub	sp, #28
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013692:	f04f 33ff 	mov.w	r3, #4294967295
 8013696:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d031      	beq.n	8013704 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	617b      	str	r3, [r7, #20]
 80136a6:	e002      	b.n	80136ae <get_ldnumber+0x24>
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	3301      	adds	r3, #1
 80136ac:	617b      	str	r3, [r7, #20]
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	2b20      	cmp	r3, #32
 80136b4:	d903      	bls.n	80136be <get_ldnumber+0x34>
 80136b6:	697b      	ldr	r3, [r7, #20]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	2b3a      	cmp	r3, #58	; 0x3a
 80136bc:	d1f4      	bne.n	80136a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	2b3a      	cmp	r3, #58	; 0x3a
 80136c4:	d11c      	bne.n	8013700 <get_ldnumber+0x76>
			tp = *path;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	1c5a      	adds	r2, r3, #1
 80136d0:	60fa      	str	r2, [r7, #12]
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	3b30      	subs	r3, #48	; 0x30
 80136d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	2b09      	cmp	r3, #9
 80136dc:	d80e      	bhi.n	80136fc <get_ldnumber+0x72>
 80136de:	68fa      	ldr	r2, [r7, #12]
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d10a      	bne.n	80136fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d107      	bne.n	80136fc <get_ldnumber+0x72>
					vol = (int)i;
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	3301      	adds	r3, #1
 80136f4:	617b      	str	r3, [r7, #20]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	697a      	ldr	r2, [r7, #20]
 80136fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	e002      	b.n	8013706 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013700:	2300      	movs	r3, #0
 8013702:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013704:	693b      	ldr	r3, [r7, #16]
}
 8013706:	4618      	mov	r0, r3
 8013708:	371c      	adds	r7, #28
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr
	...

08013714 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2200      	movs	r2, #0
 8013722:	70da      	strb	r2, [r3, #3]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f04f 32ff 	mov.w	r2, #4294967295
 801372a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801372c:	6839      	ldr	r1, [r7, #0]
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f7ff f8d8 	bl	80128e4 <move_window>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d001      	beq.n	801373e <check_fs+0x2a>
 801373a:	2304      	movs	r3, #4
 801373c:	e038      	b.n	80137b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	3330      	adds	r3, #48	; 0x30
 8013742:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013746:	4618      	mov	r0, r3
 8013748:	f7fe fe1c 	bl	8012384 <ld_word>
 801374c:	4603      	mov	r3, r0
 801374e:	461a      	mov	r2, r3
 8013750:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013754:	429a      	cmp	r2, r3
 8013756:	d001      	beq.n	801375c <check_fs+0x48>
 8013758:	2303      	movs	r3, #3
 801375a:	e029      	b.n	80137b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013762:	2be9      	cmp	r3, #233	; 0xe9
 8013764:	d009      	beq.n	801377a <check_fs+0x66>
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801376c:	2beb      	cmp	r3, #235	; 0xeb
 801376e:	d11e      	bne.n	80137ae <check_fs+0x9a>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013776:	2b90      	cmp	r3, #144	; 0x90
 8013778:	d119      	bne.n	80137ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	3330      	adds	r3, #48	; 0x30
 801377e:	3336      	adds	r3, #54	; 0x36
 8013780:	4618      	mov	r0, r3
 8013782:	f7fe fe17 	bl	80123b4 <ld_dword>
 8013786:	4603      	mov	r3, r0
 8013788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801378c:	4a0a      	ldr	r2, [pc, #40]	; (80137b8 <check_fs+0xa4>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d101      	bne.n	8013796 <check_fs+0x82>
 8013792:	2300      	movs	r3, #0
 8013794:	e00c      	b.n	80137b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3330      	adds	r3, #48	; 0x30
 801379a:	3352      	adds	r3, #82	; 0x52
 801379c:	4618      	mov	r0, r3
 801379e:	f7fe fe09 	bl	80123b4 <ld_dword>
 80137a2:	4603      	mov	r3, r0
 80137a4:	4a05      	ldr	r2, [pc, #20]	; (80137bc <check_fs+0xa8>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d101      	bne.n	80137ae <check_fs+0x9a>
 80137aa:	2300      	movs	r3, #0
 80137ac:	e000      	b.n	80137b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80137ae:	2302      	movs	r3, #2
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	00544146 	.word	0x00544146
 80137bc:	33544146 	.word	0x33544146

080137c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b096      	sub	sp, #88	; 0x58
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	4613      	mov	r3, r2
 80137cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	2200      	movs	r2, #0
 80137d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80137d4:	68f8      	ldr	r0, [r7, #12]
 80137d6:	f7ff ff58 	bl	801368a <get_ldnumber>
 80137da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80137dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137de:	2b00      	cmp	r3, #0
 80137e0:	da01      	bge.n	80137e6 <find_volume+0x26>
 80137e2:	230b      	movs	r3, #11
 80137e4:	e22e      	b.n	8013c44 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80137e6:	4aa8      	ldr	r2, [pc, #672]	; (8013a88 <find_volume+0x2c8>)
 80137e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80137f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d101      	bne.n	80137fa <find_volume+0x3a>
 80137f6:	230c      	movs	r3, #12
 80137f8:	e224      	b.n	8013c44 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013800:	79fb      	ldrb	r3, [r7, #7]
 8013802:	f023 0301 	bic.w	r3, r3, #1
 8013806:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d01a      	beq.n	8013846 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013812:	785b      	ldrb	r3, [r3, #1]
 8013814:	4618      	mov	r0, r3
 8013816:	f7fe fd17 	bl	8012248 <disk_status>
 801381a:	4603      	mov	r3, r0
 801381c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013824:	f003 0301 	and.w	r3, r3, #1
 8013828:	2b00      	cmp	r3, #0
 801382a:	d10c      	bne.n	8013846 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801382c:	79fb      	ldrb	r3, [r7, #7]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d007      	beq.n	8013842 <find_volume+0x82>
 8013832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013836:	f003 0304 	and.w	r3, r3, #4
 801383a:	2b00      	cmp	r3, #0
 801383c:	d001      	beq.n	8013842 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801383e:	230a      	movs	r3, #10
 8013840:	e200      	b.n	8013c44 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8013842:	2300      	movs	r3, #0
 8013844:	e1fe      	b.n	8013c44 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013848:	2200      	movs	r2, #0
 801384a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801384c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801384e:	b2da      	uxtb	r2, r3
 8013850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013852:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	4618      	mov	r0, r3
 801385a:	f7fe fd0f 	bl	801227c <disk_initialize>
 801385e:	4603      	mov	r3, r0
 8013860:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013864:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013868:	f003 0301 	and.w	r3, r3, #1
 801386c:	2b00      	cmp	r3, #0
 801386e:	d001      	beq.n	8013874 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013870:	2303      	movs	r3, #3
 8013872:	e1e7      	b.n	8013c44 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013874:	79fb      	ldrb	r3, [r7, #7]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d007      	beq.n	801388a <find_volume+0xca>
 801387a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801387e:	f003 0304 	and.w	r3, r3, #4
 8013882:	2b00      	cmp	r3, #0
 8013884:	d001      	beq.n	801388a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013886:	230a      	movs	r3, #10
 8013888:	e1dc      	b.n	8013c44 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801388a:	2300      	movs	r3, #0
 801388c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801388e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013892:	f7ff ff3f 	bl	8013714 <check_fs>
 8013896:	4603      	mov	r3, r0
 8013898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801389c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138a0:	2b02      	cmp	r3, #2
 80138a2:	d14b      	bne.n	801393c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138a4:	2300      	movs	r3, #0
 80138a6:	643b      	str	r3, [r7, #64]	; 0x40
 80138a8:	e01f      	b.n	80138ea <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80138aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b2:	011b      	lsls	r3, r3, #4
 80138b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80138b8:	4413      	add	r3, r2
 80138ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80138bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138be:	3304      	adds	r3, #4
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d006      	beq.n	80138d4 <find_volume+0x114>
 80138c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c8:	3308      	adds	r3, #8
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fe fd72 	bl	80123b4 <ld_dword>
 80138d0:	4602      	mov	r2, r0
 80138d2:	e000      	b.n	80138d6 <find_volume+0x116>
 80138d4:	2200      	movs	r2, #0
 80138d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138d8:	009b      	lsls	r3, r3, #2
 80138da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80138de:	440b      	add	r3, r1
 80138e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138e6:	3301      	adds	r3, #1
 80138e8:	643b      	str	r3, [r7, #64]	; 0x40
 80138ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138ec:	2b03      	cmp	r3, #3
 80138ee:	d9dc      	bls.n	80138aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80138f0:	2300      	movs	r3, #0
 80138f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80138f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d002      	beq.n	8013900 <find_volume+0x140>
 80138fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138fc:	3b01      	subs	r3, #1
 80138fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013908:	4413      	add	r3, r2
 801390a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801390e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013912:	2b00      	cmp	r3, #0
 8013914:	d005      	beq.n	8013922 <find_volume+0x162>
 8013916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801391a:	f7ff fefb 	bl	8013714 <check_fs>
 801391e:	4603      	mov	r3, r0
 8013920:	e000      	b.n	8013924 <find_volume+0x164>
 8013922:	2303      	movs	r3, #3
 8013924:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801392c:	2b01      	cmp	r3, #1
 801392e:	d905      	bls.n	801393c <find_volume+0x17c>
 8013930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013932:	3301      	adds	r3, #1
 8013934:	643b      	str	r3, [r7, #64]	; 0x40
 8013936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013938:	2b03      	cmp	r3, #3
 801393a:	d9e1      	bls.n	8013900 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801393c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013940:	2b04      	cmp	r3, #4
 8013942:	d101      	bne.n	8013948 <find_volume+0x188>
 8013944:	2301      	movs	r3, #1
 8013946:	e17d      	b.n	8013c44 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801394c:	2b01      	cmp	r3, #1
 801394e:	d901      	bls.n	8013954 <find_volume+0x194>
 8013950:	230d      	movs	r3, #13
 8013952:	e177      	b.n	8013c44 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013956:	3330      	adds	r3, #48	; 0x30
 8013958:	330b      	adds	r3, #11
 801395a:	4618      	mov	r0, r3
 801395c:	f7fe fd12 	bl	8012384 <ld_word>
 8013960:	4603      	mov	r3, r0
 8013962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013966:	d001      	beq.n	801396c <find_volume+0x1ac>
 8013968:	230d      	movs	r3, #13
 801396a:	e16b      	b.n	8013c44 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396e:	3330      	adds	r3, #48	; 0x30
 8013970:	3316      	adds	r3, #22
 8013972:	4618      	mov	r0, r3
 8013974:	f7fe fd06 	bl	8012384 <ld_word>
 8013978:	4603      	mov	r3, r0
 801397a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <find_volume+0x1d0>
 8013982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013984:	3330      	adds	r3, #48	; 0x30
 8013986:	3324      	adds	r3, #36	; 0x24
 8013988:	4618      	mov	r0, r3
 801398a:	f7fe fd13 	bl	80123b4 <ld_dword>
 801398e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013994:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013998:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801399e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80139a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a2:	789b      	ldrb	r3, [r3, #2]
 80139a4:	2b01      	cmp	r3, #1
 80139a6:	d005      	beq.n	80139b4 <find_volume+0x1f4>
 80139a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139aa:	789b      	ldrb	r3, [r3, #2]
 80139ac:	2b02      	cmp	r3, #2
 80139ae:	d001      	beq.n	80139b4 <find_volume+0x1f4>
 80139b0:	230d      	movs	r3, #13
 80139b2:	e147      	b.n	8013c44 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80139b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b6:	789b      	ldrb	r3, [r3, #2]
 80139b8:	461a      	mov	r2, r3
 80139ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139bc:	fb02 f303 	mul.w	r3, r2, r3
 80139c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80139c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80139ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d0:	895b      	ldrh	r3, [r3, #10]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d008      	beq.n	80139e8 <find_volume+0x228>
 80139d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d8:	895b      	ldrh	r3, [r3, #10]
 80139da:	461a      	mov	r2, r3
 80139dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139de:	895b      	ldrh	r3, [r3, #10]
 80139e0:	3b01      	subs	r3, #1
 80139e2:	4013      	ands	r3, r2
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <find_volume+0x22c>
 80139e8:	230d      	movs	r3, #13
 80139ea:	e12b      	b.n	8013c44 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80139ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ee:	3330      	adds	r3, #48	; 0x30
 80139f0:	3311      	adds	r3, #17
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fe fcc6 	bl	8012384 <ld_word>
 80139f8:	4603      	mov	r3, r0
 80139fa:	461a      	mov	r2, r3
 80139fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a02:	891b      	ldrh	r3, [r3, #8]
 8013a04:	f003 030f 	and.w	r3, r3, #15
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d001      	beq.n	8013a12 <find_volume+0x252>
 8013a0e:	230d      	movs	r3, #13
 8013a10:	e118      	b.n	8013c44 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a14:	3330      	adds	r3, #48	; 0x30
 8013a16:	3313      	adds	r3, #19
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fe fcb3 	bl	8012384 <ld_word>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d106      	bne.n	8013a36 <find_volume+0x276>
 8013a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2a:	3330      	adds	r3, #48	; 0x30
 8013a2c:	3320      	adds	r3, #32
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7fe fcc0 	bl	80123b4 <ld_dword>
 8013a34:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a38:	3330      	adds	r3, #48	; 0x30
 8013a3a:	330e      	adds	r3, #14
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fe fca1 	bl	8012384 <ld_word>
 8013a42:	4603      	mov	r3, r0
 8013a44:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d101      	bne.n	8013a50 <find_volume+0x290>
 8013a4c:	230d      	movs	r3, #13
 8013a4e:	e0f9      	b.n	8013c44 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a54:	4413      	add	r3, r2
 8013a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a58:	8912      	ldrh	r2, [r2, #8]
 8013a5a:	0912      	lsrs	r2, r2, #4
 8013a5c:	b292      	uxth	r2, r2
 8013a5e:	4413      	add	r3, r2
 8013a60:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d201      	bcs.n	8013a6e <find_volume+0x2ae>
 8013a6a:	230d      	movs	r3, #13
 8013a6c:	e0ea      	b.n	8013c44 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a72:	1ad3      	subs	r3, r2, r3
 8013a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a76:	8952      	ldrh	r2, [r2, #10]
 8013a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d103      	bne.n	8013a8c <find_volume+0x2cc>
 8013a84:	230d      	movs	r3, #13
 8013a86:	e0dd      	b.n	8013c44 <find_volume+0x484>
 8013a88:	20000958 	.word	0x20000958
		fmt = FS_FAT32;
 8013a8c:	2303      	movs	r3, #3
 8013a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d802      	bhi.n	8013aa2 <find_volume+0x2e2>
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013aa8:	4293      	cmp	r3, r2
 8013aaa:	d802      	bhi.n	8013ab2 <find_volume+0x2f2>
 8013aac:	2301      	movs	r3, #1
 8013aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab4:	1c9a      	adds	r2, r3, #2
 8013ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013abe:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013ac0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ac4:	441a      	add	r2, r3
 8013ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013aca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ace:	441a      	add	r2, r3
 8013ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ad8:	2b03      	cmp	r3, #3
 8013ada:	d11e      	bne.n	8013b1a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ade:	3330      	adds	r3, #48	; 0x30
 8013ae0:	332a      	adds	r3, #42	; 0x2a
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fe fc4e 	bl	8012384 <ld_word>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <find_volume+0x332>
 8013aee:	230d      	movs	r3, #13
 8013af0:	e0a8      	b.n	8013c44 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af4:	891b      	ldrh	r3, [r3, #8]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d001      	beq.n	8013afe <find_volume+0x33e>
 8013afa:	230d      	movs	r3, #13
 8013afc:	e0a2      	b.n	8013c44 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b00:	3330      	adds	r3, #48	; 0x30
 8013b02:	332c      	adds	r3, #44	; 0x2c
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7fe fc55 	bl	80123b4 <ld_dword>
 8013b0a:	4602      	mov	r2, r0
 8013b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b12:	695b      	ldr	r3, [r3, #20]
 8013b14:	009b      	lsls	r3, r3, #2
 8013b16:	647b      	str	r3, [r7, #68]	; 0x44
 8013b18:	e01f      	b.n	8013b5a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b1c:	891b      	ldrh	r3, [r3, #8]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <find_volume+0x366>
 8013b22:	230d      	movs	r3, #13
 8013b24:	e08e      	b.n	8013c44 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b28:	6a1a      	ldr	r2, [r3, #32]
 8013b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b2c:	441a      	add	r2, r3
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b30:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013b32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b36:	2b02      	cmp	r3, #2
 8013b38:	d103      	bne.n	8013b42 <find_volume+0x382>
 8013b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b3c:	695b      	ldr	r3, [r3, #20]
 8013b3e:	005b      	lsls	r3, r3, #1
 8013b40:	e00a      	b.n	8013b58 <find_volume+0x398>
 8013b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b44:	695a      	ldr	r2, [r3, #20]
 8013b46:	4613      	mov	r3, r2
 8013b48:	005b      	lsls	r3, r3, #1
 8013b4a:	4413      	add	r3, r2
 8013b4c:	085a      	lsrs	r2, r3, #1
 8013b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b50:	695b      	ldr	r3, [r3, #20]
 8013b52:	f003 0301 	and.w	r3, r3, #1
 8013b56:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b58:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5c:	699a      	ldr	r2, [r3, #24]
 8013b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013b64:	0a5b      	lsrs	r3, r3, #9
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d201      	bcs.n	8013b6e <find_volume+0x3ae>
 8013b6a:	230d      	movs	r3, #13
 8013b6c:	e06a      	b.n	8013c44 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b70:	f04f 32ff 	mov.w	r2, #4294967295
 8013b74:	611a      	str	r2, [r3, #16]
 8013b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b78:	691a      	ldr	r2, [r3, #16]
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b80:	2280      	movs	r2, #128	; 0x80
 8013b82:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b88:	2b03      	cmp	r3, #3
 8013b8a:	d149      	bne.n	8013c20 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b8e:	3330      	adds	r3, #48	; 0x30
 8013b90:	3330      	adds	r3, #48	; 0x30
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7fe fbf6 	bl	8012384 <ld_word>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b01      	cmp	r3, #1
 8013b9c:	d140      	bne.n	8013c20 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ba6:	f7fe fe9d 	bl	80128e4 <move_window>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d137      	bne.n	8013c20 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb8:	3330      	adds	r3, #48	; 0x30
 8013bba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7fe fbe0 	bl	8012384 <ld_word>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d127      	bne.n	8013c20 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd2:	3330      	adds	r3, #48	; 0x30
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fe fbed 	bl	80123b4 <ld_dword>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	4a1b      	ldr	r2, [pc, #108]	; (8013c4c <find_volume+0x48c>)
 8013bde:	4293      	cmp	r3, r2
 8013be0:	d11e      	bne.n	8013c20 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be4:	3330      	adds	r3, #48	; 0x30
 8013be6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7fe fbe2 	bl	80123b4 <ld_dword>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	4a17      	ldr	r2, [pc, #92]	; (8013c50 <find_volume+0x490>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d113      	bne.n	8013c20 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfa:	3330      	adds	r3, #48	; 0x30
 8013bfc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fe fbd7 	bl	80123b4 <ld_dword>
 8013c06:	4602      	mov	r2, r0
 8013c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0e:	3330      	adds	r3, #48	; 0x30
 8013c10:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fe fbcd 	bl	80123b4 <ld_dword>
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c22:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013c26:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013c28:	4b0a      	ldr	r3, [pc, #40]	; (8013c54 <find_volume+0x494>)
 8013c2a:	881b      	ldrh	r3, [r3, #0]
 8013c2c:	3301      	adds	r3, #1
 8013c2e:	b29a      	uxth	r2, r3
 8013c30:	4b08      	ldr	r3, [pc, #32]	; (8013c54 <find_volume+0x494>)
 8013c32:	801a      	strh	r2, [r3, #0]
 8013c34:	4b07      	ldr	r3, [pc, #28]	; (8013c54 <find_volume+0x494>)
 8013c36:	881a      	ldrh	r2, [r3, #0]
 8013c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013c3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c3e:	f7fe fde9 	bl	8012814 <clear_lock>
#endif
	return FR_OK;
 8013c42:	2300      	movs	r3, #0
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3758      	adds	r7, #88	; 0x58
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	41615252 	.word	0x41615252
 8013c50:	61417272 	.word	0x61417272
 8013c54:	2000095c 	.word	0x2000095c

08013c58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c62:	2309      	movs	r3, #9
 8013c64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d01c      	beq.n	8013ca6 <validate+0x4e>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d018      	beq.n	8013ca6 <validate+0x4e>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d013      	beq.n	8013ca6 <validate+0x4e>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	889a      	ldrh	r2, [r3, #4]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	88db      	ldrh	r3, [r3, #6]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d10c      	bne.n	8013ca6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	785b      	ldrb	r3, [r3, #1]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fe fad8 	bl	8012248 <disk_status>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	f003 0301 	and.w	r3, r3, #1
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d101      	bne.n	8013ca6 <validate+0x4e>
			res = FR_OK;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013ca6:	7bfb      	ldrb	r3, [r7, #15]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d102      	bne.n	8013cb2 <validate+0x5a>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	e000      	b.n	8013cb4 <validate+0x5c>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	683a      	ldr	r2, [r7, #0]
 8013cb6:	6013      	str	r3, [r2, #0]
	return res;
 8013cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3710      	adds	r7, #16
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
	...

08013cc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b088      	sub	sp, #32
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	4613      	mov	r3, r2
 8013cd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013cd6:	f107 0310 	add.w	r3, r7, #16
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7ff fcd5 	bl	801368a <get_ldnumber>
 8013ce0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013ce2:	69fb      	ldr	r3, [r7, #28]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	da01      	bge.n	8013cec <f_mount+0x28>
 8013ce8:	230b      	movs	r3, #11
 8013cea:	e02b      	b.n	8013d44 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013cec:	4a17      	ldr	r2, [pc, #92]	; (8013d4c <f_mount+0x88>)
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cf4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013cf6:	69bb      	ldr	r3, [r7, #24]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d005      	beq.n	8013d08 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013cfc:	69b8      	ldr	r0, [r7, #24]
 8013cfe:	f7fe fd89 	bl	8012814 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013d02:	69bb      	ldr	r3, [r7, #24]
 8013d04:	2200      	movs	r2, #0
 8013d06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d002      	beq.n	8013d14 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2200      	movs	r2, #0
 8013d12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d14:	68fa      	ldr	r2, [r7, #12]
 8013d16:	490d      	ldr	r1, [pc, #52]	; (8013d4c <f_mount+0x88>)
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d002      	beq.n	8013d2a <f_mount+0x66>
 8013d24:	79fb      	ldrb	r3, [r7, #7]
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d001      	beq.n	8013d2e <f_mount+0x6a>
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	e00a      	b.n	8013d44 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d2e:	f107 010c 	add.w	r1, r7, #12
 8013d32:	f107 0308 	add.w	r3, r7, #8
 8013d36:	2200      	movs	r2, #0
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7ff fd41 	bl	80137c0 <find_volume>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3720      	adds	r7, #32
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	20000958 	.word	0x20000958

08013d50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b098      	sub	sp, #96	; 0x60
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d101      	bne.n	8013d68 <f_open+0x18>
 8013d64:	2309      	movs	r3, #9
 8013d66:	e1ad      	b.n	80140c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d68:	79fb      	ldrb	r3, [r7, #7]
 8013d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013d70:	79fa      	ldrb	r2, [r7, #7]
 8013d72:	f107 0110 	add.w	r1, r7, #16
 8013d76:	f107 0308 	add.w	r3, r7, #8
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7ff fd20 	bl	80137c0 <find_volume>
 8013d80:	4603      	mov	r3, r0
 8013d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f040 8191 	bne.w	80140b2 <f_open+0x362>
		dj.obj.fs = fs;
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d94:	68ba      	ldr	r2, [r7, #8]
 8013d96:	f107 0314 	add.w	r3, r7, #20
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7ff fc03 	bl	80135a8 <follow_path>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d11a      	bne.n	8013de6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013db0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013db4:	b25b      	sxtb	r3, r3
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	da03      	bge.n	8013dc2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8013dba:	2306      	movs	r3, #6
 8013dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013dc0:	e011      	b.n	8013de6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013dc2:	79fb      	ldrb	r3, [r7, #7]
 8013dc4:	f023 0301 	bic.w	r3, r3, #1
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	bf14      	ite	ne
 8013dcc:	2301      	movne	r3, #1
 8013dce:	2300      	moveq	r3, #0
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	f107 0314 	add.w	r3, r7, #20
 8013dd8:	4611      	mov	r1, r2
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fe fbd2 	bl	8012584 <chk_lock>
 8013de0:	4603      	mov	r3, r0
 8013de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013de6:	79fb      	ldrb	r3, [r7, #7]
 8013de8:	f003 031c 	and.w	r3, r3, #28
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d07f      	beq.n	8013ef0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d017      	beq.n	8013e28 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013df8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dfc:	2b04      	cmp	r3, #4
 8013dfe:	d10e      	bne.n	8013e1e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013e00:	f7fe fc1c 	bl	801263c <enq_lock>
 8013e04:	4603      	mov	r3, r0
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d006      	beq.n	8013e18 <f_open+0xc8>
 8013e0a:	f107 0314 	add.w	r3, r7, #20
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ff fb03 	bl	801341a <dir_register>
 8013e14:	4603      	mov	r3, r0
 8013e16:	e000      	b.n	8013e1a <f_open+0xca>
 8013e18:	2312      	movs	r3, #18
 8013e1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	f043 0308 	orr.w	r3, r3, #8
 8013e24:	71fb      	strb	r3, [r7, #7]
 8013e26:	e010      	b.n	8013e4a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013e28:	7ebb      	ldrb	r3, [r7, #26]
 8013e2a:	f003 0311 	and.w	r3, r3, #17
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d003      	beq.n	8013e3a <f_open+0xea>
					res = FR_DENIED;
 8013e32:	2307      	movs	r3, #7
 8013e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e38:	e007      	b.n	8013e4a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013e3a:	79fb      	ldrb	r3, [r7, #7]
 8013e3c:	f003 0304 	and.w	r3, r3, #4
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d002      	beq.n	8013e4a <f_open+0xfa>
 8013e44:	2308      	movs	r3, #8
 8013e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d168      	bne.n	8013f24 <f_open+0x1d4>
 8013e52:	79fb      	ldrb	r3, [r7, #7]
 8013e54:	f003 0308 	and.w	r3, r3, #8
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d063      	beq.n	8013f24 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013e5c:	f7fe f92c 	bl	80120b8 <get_fattime>
 8013e60:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e64:	330e      	adds	r3, #14
 8013e66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fe fae1 	bl	8012430 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e70:	3316      	adds	r3, #22
 8013e72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fe fadb 	bl	8012430 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e7c:	330b      	adds	r3, #11
 8013e7e:	2220      	movs	r2, #32
 8013e80:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e86:	4611      	mov	r1, r2
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7ff fa32 	bl	80132f2 <ld_clust>
 8013e8e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e94:	2200      	movs	r2, #0
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7ff fa4a 	bl	8013330 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9e:	331c      	adds	r3, #28
 8013ea0:	2100      	movs	r1, #0
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fe fac4 	bl	8012430 <st_dword>
					fs->wflag = 1;
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	2201      	movs	r2, #1
 8013eac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d037      	beq.n	8013f24 <f_open+0x1d4>
						dw = fs->winsect;
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eb8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013eba:	f107 0314 	add.w	r3, r7, #20
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fe ff5d 	bl	8012d82 <remove_chain>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013ece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d126      	bne.n	8013f24 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7fe fd02 	bl	80128e4 <move_window>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013eea:	3a01      	subs	r2, #1
 8013eec:	60da      	str	r2, [r3, #12]
 8013eee:	e019      	b.n	8013f24 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d115      	bne.n	8013f24 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013ef8:	7ebb      	ldrb	r3, [r7, #26]
 8013efa:	f003 0310 	and.w	r3, r3, #16
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d003      	beq.n	8013f0a <f_open+0x1ba>
					res = FR_NO_FILE;
 8013f02:	2304      	movs	r3, #4
 8013f04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013f08:	e00c      	b.n	8013f24 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013f0a:	79fb      	ldrb	r3, [r7, #7]
 8013f0c:	f003 0302 	and.w	r3, r3, #2
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d007      	beq.n	8013f24 <f_open+0x1d4>
 8013f14:	7ebb      	ldrb	r3, [r7, #26]
 8013f16:	f003 0301 	and.w	r3, r3, #1
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d002      	beq.n	8013f24 <f_open+0x1d4>
						res = FR_DENIED;
 8013f1e:	2307      	movs	r3, #7
 8013f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d128      	bne.n	8013f7e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013f2c:	79fb      	ldrb	r3, [r7, #7]
 8013f2e:	f003 0308 	and.w	r3, r3, #8
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d003      	beq.n	8013f3e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013f36:	79fb      	ldrb	r3, [r7, #7]
 8013f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013f4c:	79fb      	ldrb	r3, [r7, #7]
 8013f4e:	f023 0301 	bic.w	r3, r3, #1
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	bf14      	ite	ne
 8013f56:	2301      	movne	r3, #1
 8013f58:	2300      	moveq	r3, #0
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	f107 0314 	add.w	r3, r7, #20
 8013f62:	4611      	mov	r1, r2
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fe fb8b 	bl	8012680 <inc_lock>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	691b      	ldr	r3, [r3, #16]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d102      	bne.n	8013f7e <f_open+0x22e>
 8013f78:	2302      	movs	r3, #2
 8013f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f040 8095 	bne.w	80140b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f8c:	4611      	mov	r1, r2
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7ff f9af 	bl	80132f2 <ld_clust>
 8013f94:	4602      	mov	r2, r0
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f9c:	331c      	adds	r3, #28
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7fe fa08 	bl	80123b4 <ld_dword>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2200      	movs	r2, #0
 8013fae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013fb0:	693a      	ldr	r2, [r7, #16]
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	88da      	ldrh	r2, [r3, #6]
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	79fa      	ldrb	r2, [r7, #7]
 8013fc2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	3330      	adds	r3, #48	; 0x30
 8013fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013fde:	2100      	movs	r1, #0
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fe fa72 	bl	80124ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013fe6:	79fb      	ldrb	r3, [r7, #7]
 8013fe8:	f003 0320 	and.w	r3, r3, #32
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d060      	beq.n	80140b2 <f_open+0x362>
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	68db      	ldr	r3, [r3, #12]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d05c      	beq.n	80140b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	68da      	ldr	r2, [r3, #12]
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014000:	693b      	ldr	r3, [r7, #16]
 8014002:	895b      	ldrh	r3, [r3, #10]
 8014004:	025b      	lsls	r3, r3, #9
 8014006:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	689b      	ldr	r3, [r3, #8]
 801400c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	657b      	str	r3, [r7, #84]	; 0x54
 8014014:	e016      	b.n	8014044 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801401a:	4618      	mov	r0, r3
 801401c:	f7fe fd1d 	bl	8012a5a <get_fat>
 8014020:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014024:	2b01      	cmp	r3, #1
 8014026:	d802      	bhi.n	801402e <f_open+0x2de>
 8014028:	2302      	movs	r3, #2
 801402a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801402e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014034:	d102      	bne.n	801403c <f_open+0x2ec>
 8014036:	2301      	movs	r3, #1
 8014038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801403c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801403e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014040:	1ad3      	subs	r3, r2, r3
 8014042:	657b      	str	r3, [r7, #84]	; 0x54
 8014044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014048:	2b00      	cmp	r3, #0
 801404a:	d103      	bne.n	8014054 <f_open+0x304>
 801404c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801404e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014050:	429a      	cmp	r2, r3
 8014052:	d8e0      	bhi.n	8014016 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014058:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801405a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801405e:	2b00      	cmp	r3, #0
 8014060:	d127      	bne.n	80140b2 <f_open+0x362>
 8014062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014068:	2b00      	cmp	r3, #0
 801406a:	d022      	beq.n	80140b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014070:	4618      	mov	r0, r3
 8014072:	f7fe fcd3 	bl	8012a1c <clust2sect>
 8014076:	6478      	str	r0, [r7, #68]	; 0x44
 8014078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801407a:	2b00      	cmp	r3, #0
 801407c:	d103      	bne.n	8014086 <f_open+0x336>
						res = FR_INT_ERR;
 801407e:	2302      	movs	r3, #2
 8014080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014084:	e015      	b.n	80140b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014088:	0a5a      	lsrs	r2, r3, #9
 801408a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801408c:	441a      	add	r2, r3
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	7858      	ldrb	r0, [r3, #1]
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	6a1a      	ldr	r2, [r3, #32]
 80140a0:	2301      	movs	r3, #1
 80140a2:	f7fe f911 	bl	80122c8 <disk_read>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d002      	beq.n	80140b2 <f_open+0x362>
 80140ac:	2301      	movs	r3, #1
 80140ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80140b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d002      	beq.n	80140c0 <f_open+0x370>
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2200      	movs	r2, #0
 80140be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80140c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3760      	adds	r7, #96	; 0x60
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b08e      	sub	sp, #56	; 0x38
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	60f8      	str	r0, [r7, #12]
 80140d4:	60b9      	str	r1, [r7, #8]
 80140d6:	607a      	str	r2, [r7, #4]
 80140d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	2200      	movs	r2, #0
 80140e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	f107 0214 	add.w	r2, r7, #20
 80140ea:	4611      	mov	r1, r2
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7ff fdb3 	bl	8013c58 <validate>
 80140f2:	4603      	mov	r3, r0
 80140f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80140f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d107      	bne.n	8014110 <f_read+0x44>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	7d5b      	ldrb	r3, [r3, #21]
 8014104:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801410c:	2b00      	cmp	r3, #0
 801410e:	d002      	beq.n	8014116 <f_read+0x4a>
 8014110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014114:	e115      	b.n	8014342 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	7d1b      	ldrb	r3, [r3, #20]
 801411a:	f003 0301 	and.w	r3, r3, #1
 801411e:	2b00      	cmp	r3, #0
 8014120:	d101      	bne.n	8014126 <f_read+0x5a>
 8014122:	2307      	movs	r3, #7
 8014124:	e10d      	b.n	8014342 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	68da      	ldr	r2, [r3, #12]
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	699b      	ldr	r3, [r3, #24]
 801412e:	1ad3      	subs	r3, r2, r3
 8014130:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	6a3b      	ldr	r3, [r7, #32]
 8014136:	429a      	cmp	r2, r3
 8014138:	f240 80fe 	bls.w	8014338 <f_read+0x26c>
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014140:	e0fa      	b.n	8014338 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	699b      	ldr	r3, [r3, #24]
 8014146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801414a:	2b00      	cmp	r3, #0
 801414c:	f040 80c6 	bne.w	80142dc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	699b      	ldr	r3, [r3, #24]
 8014154:	0a5b      	lsrs	r3, r3, #9
 8014156:	697a      	ldr	r2, [r7, #20]
 8014158:	8952      	ldrh	r2, [r2, #10]
 801415a:	3a01      	subs	r2, #1
 801415c:	4013      	ands	r3, r2
 801415e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d12f      	bne.n	80141c6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	699b      	ldr	r3, [r3, #24]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d103      	bne.n	8014176 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	689b      	ldr	r3, [r3, #8]
 8014172:	633b      	str	r3, [r7, #48]	; 0x30
 8014174:	e013      	b.n	801419e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801417a:	2b00      	cmp	r3, #0
 801417c:	d007      	beq.n	801418e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	699b      	ldr	r3, [r3, #24]
 8014182:	4619      	mov	r1, r3
 8014184:	68f8      	ldr	r0, [r7, #12]
 8014186:	f7fe fef9 	bl	8012f7c <clmt_clust>
 801418a:	6338      	str	r0, [r7, #48]	; 0x30
 801418c:	e007      	b.n	801419e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801418e:	68fa      	ldr	r2, [r7, #12]
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	69db      	ldr	r3, [r3, #28]
 8014194:	4619      	mov	r1, r3
 8014196:	4610      	mov	r0, r2
 8014198:	f7fe fc5f 	bl	8012a5a <get_fat>
 801419c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d804      	bhi.n	80141ae <f_read+0xe2>
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	2202      	movs	r2, #2
 80141a8:	755a      	strb	r2, [r3, #21]
 80141aa:	2302      	movs	r3, #2
 80141ac:	e0c9      	b.n	8014342 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80141ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141b4:	d104      	bne.n	80141c0 <f_read+0xf4>
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2201      	movs	r2, #1
 80141ba:	755a      	strb	r2, [r3, #21]
 80141bc:	2301      	movs	r3, #1
 80141be:	e0c0      	b.n	8014342 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141c6:	697a      	ldr	r2, [r7, #20]
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	69db      	ldr	r3, [r3, #28]
 80141cc:	4619      	mov	r1, r3
 80141ce:	4610      	mov	r0, r2
 80141d0:	f7fe fc24 	bl	8012a1c <clust2sect>
 80141d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d104      	bne.n	80141e6 <f_read+0x11a>
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2202      	movs	r2, #2
 80141e0:	755a      	strb	r2, [r3, #21]
 80141e2:	2302      	movs	r3, #2
 80141e4:	e0ad      	b.n	8014342 <f_read+0x276>
			sect += csect;
 80141e6:	69ba      	ldr	r2, [r7, #24]
 80141e8:	69fb      	ldr	r3, [r7, #28]
 80141ea:	4413      	add	r3, r2
 80141ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	0a5b      	lsrs	r3, r3, #9
 80141f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80141f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d039      	beq.n	801426e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141fa:	69fa      	ldr	r2, [r7, #28]
 80141fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fe:	4413      	add	r3, r2
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	8952      	ldrh	r2, [r2, #10]
 8014204:	4293      	cmp	r3, r2
 8014206:	d905      	bls.n	8014214 <f_read+0x148>
					cc = fs->csize - csect;
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	895b      	ldrh	r3, [r3, #10]
 801420c:	461a      	mov	r2, r3
 801420e:	69fb      	ldr	r3, [r7, #28]
 8014210:	1ad3      	subs	r3, r2, r3
 8014212:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	7858      	ldrb	r0, [r3, #1]
 8014218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421a:	69ba      	ldr	r2, [r7, #24]
 801421c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801421e:	f7fe f853 	bl	80122c8 <disk_read>
 8014222:	4603      	mov	r3, r0
 8014224:	2b00      	cmp	r3, #0
 8014226:	d004      	beq.n	8014232 <f_read+0x166>
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2201      	movs	r2, #1
 801422c:	755a      	strb	r2, [r3, #21]
 801422e:	2301      	movs	r3, #1
 8014230:	e087      	b.n	8014342 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	7d1b      	ldrb	r3, [r3, #20]
 8014236:	b25b      	sxtb	r3, r3
 8014238:	2b00      	cmp	r3, #0
 801423a:	da14      	bge.n	8014266 <f_read+0x19a>
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	6a1a      	ldr	r2, [r3, #32]
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014246:	429a      	cmp	r2, r3
 8014248:	d90d      	bls.n	8014266 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	6a1a      	ldr	r2, [r3, #32]
 801424e:	69bb      	ldr	r3, [r7, #24]
 8014250:	1ad3      	subs	r3, r2, r3
 8014252:	025b      	lsls	r3, r3, #9
 8014254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014256:	18d0      	adds	r0, r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	3330      	adds	r3, #48	; 0x30
 801425c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014260:	4619      	mov	r1, r3
 8014262:	f7fe f911 	bl	8012488 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014268:	025b      	lsls	r3, r3, #9
 801426a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801426c:	e050      	b.n	8014310 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	6a1b      	ldr	r3, [r3, #32]
 8014272:	69ba      	ldr	r2, [r7, #24]
 8014274:	429a      	cmp	r2, r3
 8014276:	d02e      	beq.n	80142d6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	7d1b      	ldrb	r3, [r3, #20]
 801427c:	b25b      	sxtb	r3, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	da18      	bge.n	80142b4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	7858      	ldrb	r0, [r3, #1]
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	6a1a      	ldr	r2, [r3, #32]
 8014290:	2301      	movs	r3, #1
 8014292:	f7fe f839 	bl	8012308 <disk_write>
 8014296:	4603      	mov	r3, r0
 8014298:	2b00      	cmp	r3, #0
 801429a:	d004      	beq.n	80142a6 <f_read+0x1da>
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2201      	movs	r2, #1
 80142a0:	755a      	strb	r2, [r3, #21]
 80142a2:	2301      	movs	r3, #1
 80142a4:	e04d      	b.n	8014342 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	7d1b      	ldrb	r3, [r3, #20]
 80142aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142ae:	b2da      	uxtb	r2, r3
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	7858      	ldrb	r0, [r3, #1]
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142be:	2301      	movs	r3, #1
 80142c0:	69ba      	ldr	r2, [r7, #24]
 80142c2:	f7fe f801 	bl	80122c8 <disk_read>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d004      	beq.n	80142d6 <f_read+0x20a>
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2201      	movs	r2, #1
 80142d0:	755a      	strb	r2, [r3, #21]
 80142d2:	2301      	movs	r3, #1
 80142d4:	e035      	b.n	8014342 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	69ba      	ldr	r2, [r7, #24]
 80142da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	699b      	ldr	r3, [r3, #24]
 80142e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142e4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80142e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80142ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d901      	bls.n	80142f6 <f_read+0x22a>
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	699b      	ldr	r3, [r3, #24]
 8014300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014304:	4413      	add	r3, r2
 8014306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014308:	4619      	mov	r1, r3
 801430a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801430c:	f7fe f8bc 	bl	8012488 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014314:	4413      	add	r3, r2
 8014316:	627b      	str	r3, [r7, #36]	; 0x24
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	699a      	ldr	r2, [r3, #24]
 801431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431e:	441a      	add	r2, r3
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	619a      	str	r2, [r3, #24]
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432a:	441a      	add	r2, r3
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	601a      	str	r2, [r3, #0]
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014334:	1ad3      	subs	r3, r2, r3
 8014336:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	f47f af01 	bne.w	8014142 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014340:	2300      	movs	r3, #0
}
 8014342:	4618      	mov	r0, r3
 8014344:	3738      	adds	r7, #56	; 0x38
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b08c      	sub	sp, #48	; 0x30
 801434e:	af00      	add	r7, sp, #0
 8014350:	60f8      	str	r0, [r7, #12]
 8014352:	60b9      	str	r1, [r7, #8]
 8014354:	607a      	str	r2, [r7, #4]
 8014356:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	2200      	movs	r2, #0
 8014360:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	f107 0210 	add.w	r2, r7, #16
 8014368:	4611      	mov	r1, r2
 801436a:	4618      	mov	r0, r3
 801436c:	f7ff fc74 	bl	8013c58 <validate>
 8014370:	4603      	mov	r3, r0
 8014372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801437a:	2b00      	cmp	r3, #0
 801437c:	d107      	bne.n	801438e <f_write+0x44>
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	7d5b      	ldrb	r3, [r3, #21]
 8014382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801438a:	2b00      	cmp	r3, #0
 801438c:	d002      	beq.n	8014394 <f_write+0x4a>
 801438e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014392:	e14b      	b.n	801462c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	7d1b      	ldrb	r3, [r3, #20]
 8014398:	f003 0302 	and.w	r3, r3, #2
 801439c:	2b00      	cmp	r3, #0
 801439e:	d101      	bne.n	80143a4 <f_write+0x5a>
 80143a0:	2307      	movs	r3, #7
 80143a2:	e143      	b.n	801462c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	699a      	ldr	r2, [r3, #24]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	441a      	add	r2, r3
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	699b      	ldr	r3, [r3, #24]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	f080 812d 	bcs.w	8014610 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	699b      	ldr	r3, [r3, #24]
 80143ba:	43db      	mvns	r3, r3
 80143bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80143be:	e127      	b.n	8014610 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	699b      	ldr	r3, [r3, #24]
 80143c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	f040 80e3 	bne.w	8014594 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	699b      	ldr	r3, [r3, #24]
 80143d2:	0a5b      	lsrs	r3, r3, #9
 80143d4:	693a      	ldr	r2, [r7, #16]
 80143d6:	8952      	ldrh	r2, [r2, #10]
 80143d8:	3a01      	subs	r2, #1
 80143da:	4013      	ands	r3, r2
 80143dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d143      	bne.n	801446c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	699b      	ldr	r3, [r3, #24]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d10c      	bne.n	8014406 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	689b      	ldr	r3, [r3, #8]
 80143f0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80143f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d11a      	bne.n	801442e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2100      	movs	r1, #0
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7fe fd25 	bl	8012e4c <create_chain>
 8014402:	62b8      	str	r0, [r7, #40]	; 0x28
 8014404:	e013      	b.n	801442e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801440a:	2b00      	cmp	r3, #0
 801440c:	d007      	beq.n	801441e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	699b      	ldr	r3, [r3, #24]
 8014412:	4619      	mov	r1, r3
 8014414:	68f8      	ldr	r0, [r7, #12]
 8014416:	f7fe fdb1 	bl	8012f7c <clmt_clust>
 801441a:	62b8      	str	r0, [r7, #40]	; 0x28
 801441c:	e007      	b.n	801442e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801441e:	68fa      	ldr	r2, [r7, #12]
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	69db      	ldr	r3, [r3, #28]
 8014424:	4619      	mov	r1, r3
 8014426:	4610      	mov	r0, r2
 8014428:	f7fe fd10 	bl	8012e4c <create_chain>
 801442c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014430:	2b00      	cmp	r3, #0
 8014432:	f000 80f2 	beq.w	801461a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014438:	2b01      	cmp	r3, #1
 801443a:	d104      	bne.n	8014446 <f_write+0xfc>
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	2202      	movs	r2, #2
 8014440:	755a      	strb	r2, [r3, #21]
 8014442:	2302      	movs	r3, #2
 8014444:	e0f2      	b.n	801462c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801444c:	d104      	bne.n	8014458 <f_write+0x10e>
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	2201      	movs	r2, #1
 8014452:	755a      	strb	r2, [r3, #21]
 8014454:	2301      	movs	r3, #1
 8014456:	e0e9      	b.n	801462c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801445c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	689b      	ldr	r3, [r3, #8]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d102      	bne.n	801446c <f_write+0x122>
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801446a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	7d1b      	ldrb	r3, [r3, #20]
 8014470:	b25b      	sxtb	r3, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	da18      	bge.n	80144a8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	7858      	ldrb	r0, [r3, #1]
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	6a1a      	ldr	r2, [r3, #32]
 8014484:	2301      	movs	r3, #1
 8014486:	f7fd ff3f 	bl	8012308 <disk_write>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d004      	beq.n	801449a <f_write+0x150>
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2201      	movs	r2, #1
 8014494:	755a      	strb	r2, [r3, #21]
 8014496:	2301      	movs	r3, #1
 8014498:	e0c8      	b.n	801462c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	7d1b      	ldrb	r3, [r3, #20]
 801449e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144a2:	b2da      	uxtb	r2, r3
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80144a8:	693a      	ldr	r2, [r7, #16]
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	69db      	ldr	r3, [r3, #28]
 80144ae:	4619      	mov	r1, r3
 80144b0:	4610      	mov	r0, r2
 80144b2:	f7fe fab3 	bl	8012a1c <clust2sect>
 80144b6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d104      	bne.n	80144c8 <f_write+0x17e>
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	2202      	movs	r2, #2
 80144c2:	755a      	strb	r2, [r3, #21]
 80144c4:	2302      	movs	r3, #2
 80144c6:	e0b1      	b.n	801462c <f_write+0x2e2>
			sect += csect;
 80144c8:	697a      	ldr	r2, [r7, #20]
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	4413      	add	r3, r2
 80144ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	0a5b      	lsrs	r3, r3, #9
 80144d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80144d6:	6a3b      	ldr	r3, [r7, #32]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d03c      	beq.n	8014556 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80144dc:	69ba      	ldr	r2, [r7, #24]
 80144de:	6a3b      	ldr	r3, [r7, #32]
 80144e0:	4413      	add	r3, r2
 80144e2:	693a      	ldr	r2, [r7, #16]
 80144e4:	8952      	ldrh	r2, [r2, #10]
 80144e6:	4293      	cmp	r3, r2
 80144e8:	d905      	bls.n	80144f6 <f_write+0x1ac>
					cc = fs->csize - csect;
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	895b      	ldrh	r3, [r3, #10]
 80144ee:	461a      	mov	r2, r3
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	7858      	ldrb	r0, [r3, #1]
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	697a      	ldr	r2, [r7, #20]
 80144fe:	69f9      	ldr	r1, [r7, #28]
 8014500:	f7fd ff02 	bl	8012308 <disk_write>
 8014504:	4603      	mov	r3, r0
 8014506:	2b00      	cmp	r3, #0
 8014508:	d004      	beq.n	8014514 <f_write+0x1ca>
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2201      	movs	r2, #1
 801450e:	755a      	strb	r2, [r3, #21]
 8014510:	2301      	movs	r3, #1
 8014512:	e08b      	b.n	801462c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	6a1a      	ldr	r2, [r3, #32]
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	6a3a      	ldr	r2, [r7, #32]
 801451e:	429a      	cmp	r2, r3
 8014520:	d915      	bls.n	801454e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	6a1a      	ldr	r2, [r3, #32]
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	1ad3      	subs	r3, r2, r3
 8014530:	025b      	lsls	r3, r3, #9
 8014532:	69fa      	ldr	r2, [r7, #28]
 8014534:	4413      	add	r3, r2
 8014536:	f44f 7200 	mov.w	r2, #512	; 0x200
 801453a:	4619      	mov	r1, r3
 801453c:	f7fd ffa4 	bl	8012488 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	7d1b      	ldrb	r3, [r3, #20]
 8014544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014548:	b2da      	uxtb	r2, r3
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801454e:	6a3b      	ldr	r3, [r7, #32]
 8014550:	025b      	lsls	r3, r3, #9
 8014552:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014554:	e03f      	b.n	80145d6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	6a1b      	ldr	r3, [r3, #32]
 801455a:	697a      	ldr	r2, [r7, #20]
 801455c:	429a      	cmp	r2, r3
 801455e:	d016      	beq.n	801458e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	699a      	ldr	r2, [r3, #24]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014568:	429a      	cmp	r2, r3
 801456a:	d210      	bcs.n	801458e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	7858      	ldrb	r0, [r3, #1]
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014576:	2301      	movs	r3, #1
 8014578:	697a      	ldr	r2, [r7, #20]
 801457a:	f7fd fea5 	bl	80122c8 <disk_read>
 801457e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014580:	2b00      	cmp	r3, #0
 8014582:	d004      	beq.n	801458e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	2201      	movs	r2, #1
 8014588:	755a      	strb	r2, [r3, #21]
 801458a:	2301      	movs	r3, #1
 801458c:	e04e      	b.n	801462c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	697a      	ldr	r2, [r7, #20]
 8014592:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	699b      	ldr	r3, [r3, #24]
 8014598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801459c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80145a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80145a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	429a      	cmp	r2, r3
 80145a8:	d901      	bls.n	80145ae <f_write+0x264>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	699b      	ldr	r3, [r3, #24]
 80145b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145bc:	4413      	add	r3, r2
 80145be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145c0:	69f9      	ldr	r1, [r7, #28]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fd ff60 	bl	8012488 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	7d1b      	ldrb	r3, [r3, #20]
 80145cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80145d0:	b2da      	uxtb	r2, r3
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80145d6:	69fa      	ldr	r2, [r7, #28]
 80145d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145da:	4413      	add	r3, r2
 80145dc:	61fb      	str	r3, [r7, #28]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	699a      	ldr	r2, [r3, #24]
 80145e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e4:	441a      	add	r2, r3
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	619a      	str	r2, [r3, #24]
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	68da      	ldr	r2, [r3, #12]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	699b      	ldr	r3, [r3, #24]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	bf38      	it	cc
 80145f6:	461a      	movcc	r2, r3
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	60da      	str	r2, [r3, #12]
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	681a      	ldr	r2, [r3, #0]
 8014600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014602:	441a      	add	r2, r3
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	601a      	str	r2, [r3, #0]
 8014608:	687a      	ldr	r2, [r7, #4]
 801460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460c:	1ad3      	subs	r3, r2, r3
 801460e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	f47f aed4 	bne.w	80143c0 <f_write+0x76>
 8014618:	e000      	b.n	801461c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801461a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	7d1b      	ldrb	r3, [r3, #20]
 8014620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014624:	b2da      	uxtb	r2, r3
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801462a:	2300      	movs	r3, #0
}
 801462c:	4618      	mov	r0, r3
 801462e:	3730      	adds	r7, #48	; 0x30
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b086      	sub	sp, #24
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f107 0208 	add.w	r2, r7, #8
 8014642:	4611      	mov	r1, r2
 8014644:	4618      	mov	r0, r3
 8014646:	f7ff fb07 	bl	8013c58 <validate>
 801464a:	4603      	mov	r3, r0
 801464c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801464e:	7dfb      	ldrb	r3, [r7, #23]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d168      	bne.n	8014726 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	7d1b      	ldrb	r3, [r3, #20]
 8014658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801465c:	2b00      	cmp	r3, #0
 801465e:	d062      	beq.n	8014726 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	7d1b      	ldrb	r3, [r3, #20]
 8014664:	b25b      	sxtb	r3, r3
 8014666:	2b00      	cmp	r3, #0
 8014668:	da15      	bge.n	8014696 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	7858      	ldrb	r0, [r3, #1]
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6a1a      	ldr	r2, [r3, #32]
 8014678:	2301      	movs	r3, #1
 801467a:	f7fd fe45 	bl	8012308 <disk_write>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	d001      	beq.n	8014688 <f_sync+0x54>
 8014684:	2301      	movs	r3, #1
 8014686:	e04f      	b.n	8014728 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	7d1b      	ldrb	r3, [r3, #20]
 801468c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014690:	b2da      	uxtb	r2, r3
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014696:	f7fd fd0f 	bl	80120b8 <get_fattime>
 801469a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801469c:	68ba      	ldr	r2, [r7, #8]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146a2:	4619      	mov	r1, r3
 80146a4:	4610      	mov	r0, r2
 80146a6:	f7fe f91d 	bl	80128e4 <move_window>
 80146aa:	4603      	mov	r3, r0
 80146ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80146ae:	7dfb      	ldrb	r3, [r7, #23]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d138      	bne.n	8014726 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	330b      	adds	r3, #11
 80146be:	781a      	ldrb	r2, [r3, #0]
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	330b      	adds	r3, #11
 80146c4:	f042 0220 	orr.w	r2, r2, #32
 80146c8:	b2d2      	uxtb	r2, r2
 80146ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6818      	ldr	r0, [r3, #0]
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	689b      	ldr	r3, [r3, #8]
 80146d4:	461a      	mov	r2, r3
 80146d6:	68f9      	ldr	r1, [r7, #12]
 80146d8:	f7fe fe2a 	bl	8013330 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f103 021c 	add.w	r2, r3, #28
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	68db      	ldr	r3, [r3, #12]
 80146e6:	4619      	mov	r1, r3
 80146e8:	4610      	mov	r0, r2
 80146ea:	f7fd fea1 	bl	8012430 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	3316      	adds	r3, #22
 80146f2:	6939      	ldr	r1, [r7, #16]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fd fe9b 	bl	8012430 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	3312      	adds	r3, #18
 80146fe:	2100      	movs	r1, #0
 8014700:	4618      	mov	r0, r3
 8014702:	f7fd fe7a 	bl	80123fa <st_word>
					fs->wflag = 1;
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	2201      	movs	r2, #1
 801470a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	4618      	mov	r0, r3
 8014710:	f7fe f916 	bl	8012940 <sync_fs>
 8014714:	4603      	mov	r3, r0
 8014716:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	7d1b      	ldrb	r3, [r3, #20]
 801471c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014720:	b2da      	uxtb	r2, r3
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014726:	7dfb      	ldrb	r3, [r7, #23]
}
 8014728:	4618      	mov	r0, r3
 801472a:	3718      	adds	r7, #24
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f7ff ff7b 	bl	8014634 <f_sync>
 801473e:	4603      	mov	r3, r0
 8014740:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014742:	7bfb      	ldrb	r3, [r7, #15]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d118      	bne.n	801477a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f107 0208 	add.w	r2, r7, #8
 801474e:	4611      	mov	r1, r2
 8014750:	4618      	mov	r0, r3
 8014752:	f7ff fa81 	bl	8013c58 <validate>
 8014756:	4603      	mov	r3, r0
 8014758:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801475a:	7bfb      	ldrb	r3, [r7, #15]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d10c      	bne.n	801477a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	691b      	ldr	r3, [r3, #16]
 8014764:	4618      	mov	r0, r3
 8014766:	f7fe f819 	bl	801279c <dec_lock>
 801476a:	4603      	mov	r3, r0
 801476c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801476e:	7bfb      	ldrb	r3, [r7, #15]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d102      	bne.n	801477a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801477a:	7bfb      	ldrb	r3, [r7, #15]
}
 801477c:	4618      	mov	r0, r3
 801477e:	3710      	adds	r7, #16
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b090      	sub	sp, #64	; 0x40
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f107 0208 	add.w	r2, r7, #8
 8014794:	4611      	mov	r1, r2
 8014796:	4618      	mov	r0, r3
 8014798:	f7ff fa5e 	bl	8013c58 <validate>
 801479c:	4603      	mov	r3, r0
 801479e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80147a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d103      	bne.n	80147b2 <f_lseek+0x2e>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	7d5b      	ldrb	r3, [r3, #21]
 80147ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80147b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d002      	beq.n	80147c0 <f_lseek+0x3c>
 80147ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147be:	e1e6      	b.n	8014b8e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	f000 80d1 	beq.w	801496c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d0:	d15a      	bne.n	8014888 <f_lseek+0x104>
			tbl = fp->cltbl;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147d6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80147d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147da:	1d1a      	adds	r2, r3, #4
 80147dc:	627a      	str	r2, [r7, #36]	; 0x24
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	617b      	str	r3, [r7, #20]
 80147e2:	2302      	movs	r3, #2
 80147e4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	689b      	ldr	r3, [r3, #8]
 80147ea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80147ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d03a      	beq.n	8014868 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80147f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f4:	613b      	str	r3, [r7, #16]
 80147f6:	2300      	movs	r3, #0
 80147f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fc:	3302      	adds	r3, #2
 80147fe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014802:	60fb      	str	r3, [r7, #12]
 8014804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014806:	3301      	adds	r3, #1
 8014808:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801480e:	4618      	mov	r0, r3
 8014810:	f7fe f923 	bl	8012a5a <get_fat>
 8014814:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014818:	2b01      	cmp	r3, #1
 801481a:	d804      	bhi.n	8014826 <f_lseek+0xa2>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2202      	movs	r2, #2
 8014820:	755a      	strb	r2, [r3, #21]
 8014822:	2302      	movs	r3, #2
 8014824:	e1b3      	b.n	8014b8e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801482c:	d104      	bne.n	8014838 <f_lseek+0xb4>
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	2201      	movs	r2, #1
 8014832:	755a      	strb	r2, [r3, #21]
 8014834:	2301      	movs	r3, #1
 8014836:	e1aa      	b.n	8014b8e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	3301      	adds	r3, #1
 801483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801483e:	429a      	cmp	r2, r3
 8014840:	d0de      	beq.n	8014800 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	429a      	cmp	r2, r3
 8014848:	d809      	bhi.n	801485e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484c:	1d1a      	adds	r2, r3, #4
 801484e:	627a      	str	r2, [r7, #36]	; 0x24
 8014850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014852:	601a      	str	r2, [r3, #0]
 8014854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014856:	1d1a      	adds	r2, r3, #4
 8014858:	627a      	str	r2, [r7, #36]	; 0x24
 801485a:	693a      	ldr	r2, [r7, #16]
 801485c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	695b      	ldr	r3, [r3, #20]
 8014862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014864:	429a      	cmp	r2, r3
 8014866:	d3c4      	bcc.n	80147f2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801486c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801486e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	429a      	cmp	r2, r3
 8014876:	d803      	bhi.n	8014880 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487a:	2200      	movs	r2, #0
 801487c:	601a      	str	r2, [r3, #0]
 801487e:	e184      	b.n	8014b8a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014880:	2311      	movs	r3, #17
 8014882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014886:	e180      	b.n	8014b8a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	683a      	ldr	r2, [r7, #0]
 801488e:	429a      	cmp	r2, r3
 8014890:	d902      	bls.n	8014898 <f_lseek+0x114>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	683a      	ldr	r2, [r7, #0]
 801489c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f000 8172 	beq.w	8014b8a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	3b01      	subs	r3, #1
 80148aa:	4619      	mov	r1, r3
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f7fe fb65 	bl	8012f7c <clmt_clust>
 80148b2:	4602      	mov	r2, r0
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80148b8:	68ba      	ldr	r2, [r7, #8]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	69db      	ldr	r3, [r3, #28]
 80148be:	4619      	mov	r1, r3
 80148c0:	4610      	mov	r0, r2
 80148c2:	f7fe f8ab 	bl	8012a1c <clust2sect>
 80148c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80148c8:	69bb      	ldr	r3, [r7, #24]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d104      	bne.n	80148d8 <f_lseek+0x154>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2202      	movs	r2, #2
 80148d2:	755a      	strb	r2, [r3, #21]
 80148d4:	2302      	movs	r3, #2
 80148d6:	e15a      	b.n	8014b8e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	3b01      	subs	r3, #1
 80148dc:	0a5b      	lsrs	r3, r3, #9
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	8952      	ldrh	r2, [r2, #10]
 80148e2:	3a01      	subs	r2, #1
 80148e4:	4013      	ands	r3, r2
 80148e6:	69ba      	ldr	r2, [r7, #24]
 80148e8:	4413      	add	r3, r2
 80148ea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	699b      	ldr	r3, [r3, #24]
 80148f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	f000 8148 	beq.w	8014b8a <f_lseek+0x406>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6a1b      	ldr	r3, [r3, #32]
 80148fe:	69ba      	ldr	r2, [r7, #24]
 8014900:	429a      	cmp	r2, r3
 8014902:	f000 8142 	beq.w	8014b8a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	7d1b      	ldrb	r3, [r3, #20]
 801490a:	b25b      	sxtb	r3, r3
 801490c:	2b00      	cmp	r3, #0
 801490e:	da18      	bge.n	8014942 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	7858      	ldrb	r0, [r3, #1]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6a1a      	ldr	r2, [r3, #32]
 801491e:	2301      	movs	r3, #1
 8014920:	f7fd fcf2 	bl	8012308 <disk_write>
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d004      	beq.n	8014934 <f_lseek+0x1b0>
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2201      	movs	r2, #1
 801492e:	755a      	strb	r2, [r3, #21]
 8014930:	2301      	movs	r3, #1
 8014932:	e12c      	b.n	8014b8e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	7d1b      	ldrb	r3, [r3, #20]
 8014938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801493c:	b2da      	uxtb	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	7858      	ldrb	r0, [r3, #1]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801494c:	2301      	movs	r3, #1
 801494e:	69ba      	ldr	r2, [r7, #24]
 8014950:	f7fd fcba 	bl	80122c8 <disk_read>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d004      	beq.n	8014964 <f_lseek+0x1e0>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2201      	movs	r2, #1
 801495e:	755a      	strb	r2, [r3, #21]
 8014960:	2301      	movs	r3, #1
 8014962:	e114      	b.n	8014b8e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	69ba      	ldr	r2, [r7, #24]
 8014968:	621a      	str	r2, [r3, #32]
 801496a:	e10e      	b.n	8014b8a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	683a      	ldr	r2, [r7, #0]
 8014972:	429a      	cmp	r2, r3
 8014974:	d908      	bls.n	8014988 <f_lseek+0x204>
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	7d1b      	ldrb	r3, [r3, #20]
 801497a:	f003 0302 	and.w	r3, r3, #2
 801497e:	2b00      	cmp	r3, #0
 8014980:	d102      	bne.n	8014988 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	68db      	ldr	r3, [r3, #12]
 8014986:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	699b      	ldr	r3, [r3, #24]
 801498c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801498e:	2300      	movs	r3, #0
 8014990:	637b      	str	r3, [r7, #52]	; 0x34
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014996:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	2b00      	cmp	r3, #0
 801499c:	f000 80a7 	beq.w	8014aee <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	895b      	ldrh	r3, [r3, #10]
 80149a4:	025b      	lsls	r3, r3, #9
 80149a6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80149a8:	6a3b      	ldr	r3, [r7, #32]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d01b      	beq.n	80149e6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	1e5a      	subs	r2, r3, #1
 80149b2:	69fb      	ldr	r3, [r7, #28]
 80149b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80149b8:	6a3b      	ldr	r3, [r7, #32]
 80149ba:	1e59      	subs	r1, r3, #1
 80149bc:	69fb      	ldr	r3, [r7, #28]
 80149be:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d30f      	bcc.n	80149e6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80149c6:	6a3b      	ldr	r3, [r7, #32]
 80149c8:	1e5a      	subs	r2, r3, #1
 80149ca:	69fb      	ldr	r3, [r7, #28]
 80149cc:	425b      	negs	r3, r3
 80149ce:	401a      	ands	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	699b      	ldr	r3, [r3, #24]
 80149d8:	683a      	ldr	r2, [r7, #0]
 80149da:	1ad3      	subs	r3, r2, r3
 80149dc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	69db      	ldr	r3, [r3, #28]
 80149e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80149e4:	e022      	b.n	8014a2c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	689b      	ldr	r3, [r3, #8]
 80149ea:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80149ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d119      	bne.n	8014a26 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2100      	movs	r1, #0
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7fe fa28 	bl	8012e4c <create_chain>
 80149fc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80149fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d104      	bne.n	8014a0e <f_lseek+0x28a>
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2202      	movs	r2, #2
 8014a08:	755a      	strb	r2, [r3, #21]
 8014a0a:	2302      	movs	r3, #2
 8014a0c:	e0bf      	b.n	8014b8e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a14:	d104      	bne.n	8014a20 <f_lseek+0x29c>
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2201      	movs	r2, #1
 8014a1a:	755a      	strb	r2, [r3, #21]
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e0b6      	b.n	8014b8e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a24:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a2a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d05d      	beq.n	8014aee <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8014a32:	e03a      	b.n	8014aaa <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8014a34:	683a      	ldr	r2, [r7, #0]
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	1ad3      	subs	r3, r2, r3
 8014a3a:	603b      	str	r3, [r7, #0]
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	699a      	ldr	r2, [r3, #24]
 8014a40:	69fb      	ldr	r3, [r7, #28]
 8014a42:	441a      	add	r2, r3
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	7d1b      	ldrb	r3, [r3, #20]
 8014a4c:	f003 0302 	and.w	r3, r3, #2
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d00b      	beq.n	8014a6c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7fe f9f7 	bl	8012e4c <create_chain>
 8014a5e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d108      	bne.n	8014a78 <f_lseek+0x2f4>
							ofs = 0; break;
 8014a66:	2300      	movs	r3, #0
 8014a68:	603b      	str	r3, [r7, #0]
 8014a6a:	e022      	b.n	8014ab2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fd fff2 	bl	8012a5a <get_fat>
 8014a76:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a7e:	d104      	bne.n	8014a8a <f_lseek+0x306>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	2201      	movs	r2, #1
 8014a84:	755a      	strb	r2, [r3, #21]
 8014a86:	2301      	movs	r3, #1
 8014a88:	e081      	b.n	8014b8e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8c:	2b01      	cmp	r3, #1
 8014a8e:	d904      	bls.n	8014a9a <f_lseek+0x316>
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	695b      	ldr	r3, [r3, #20]
 8014a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d304      	bcc.n	8014aa4 <f_lseek+0x320>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2202      	movs	r2, #2
 8014a9e:	755a      	strb	r2, [r3, #21]
 8014aa0:	2302      	movs	r3, #2
 8014aa2:	e074      	b.n	8014b8e <f_lseek+0x40a>
					fp->clust = clst;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014aa8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014aaa:	683a      	ldr	r2, [r7, #0]
 8014aac:	69fb      	ldr	r3, [r7, #28]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d8c0      	bhi.n	8014a34 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	699a      	ldr	r2, [r3, #24]
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	441a      	add	r2, r3
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d012      	beq.n	8014aee <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7fd ffa5 	bl	8012a1c <clust2sect>
 8014ad2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d104      	bne.n	8014ae4 <f_lseek+0x360>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2202      	movs	r2, #2
 8014ade:	755a      	strb	r2, [r3, #21]
 8014ae0:	2302      	movs	r3, #2
 8014ae2:	e054      	b.n	8014b8e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	0a5b      	lsrs	r3, r3, #9
 8014ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014aea:	4413      	add	r3, r2
 8014aec:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	699a      	ldr	r2, [r3, #24]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d90a      	bls.n	8014b10 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	699a      	ldr	r2, [r3, #24]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	7d1b      	ldrb	r3, [r3, #20]
 8014b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b0a:	b2da      	uxtb	r2, r3
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	699b      	ldr	r3, [r3, #24]
 8014b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d036      	beq.n	8014b8a <f_lseek+0x406>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6a1b      	ldr	r3, [r3, #32]
 8014b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d031      	beq.n	8014b8a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	7d1b      	ldrb	r3, [r3, #20]
 8014b2a:	b25b      	sxtb	r3, r3
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	da18      	bge.n	8014b62 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	7858      	ldrb	r0, [r3, #1]
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	6a1a      	ldr	r2, [r3, #32]
 8014b3e:	2301      	movs	r3, #1
 8014b40:	f7fd fbe2 	bl	8012308 <disk_write>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d004      	beq.n	8014b54 <f_lseek+0x3d0>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	755a      	strb	r2, [r3, #21]
 8014b50:	2301      	movs	r3, #1
 8014b52:	e01c      	b.n	8014b8e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	7d1b      	ldrb	r3, [r3, #20]
 8014b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b5c:	b2da      	uxtb	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	7858      	ldrb	r0, [r3, #1]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b70:	f7fd fbaa 	bl	80122c8 <disk_read>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d004      	beq.n	8014b84 <f_lseek+0x400>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	755a      	strb	r2, [r3, #21]
 8014b80:	2301      	movs	r3, #1
 8014b82:	e004      	b.n	8014b8e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b88:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3740      	adds	r7, #64	; 0x40
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
	...

08014b98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014b98:	b480      	push	{r7}
 8014b9a:	b087      	sub	sp, #28
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014baa:	2300      	movs	r3, #0
 8014bac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014bae:	4b1f      	ldr	r3, [pc, #124]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014bb0:	7a5b      	ldrb	r3, [r3, #9]
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d131      	bne.n	8014c1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014bb8:	4b1c      	ldr	r3, [pc, #112]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014bba:	7a5b      	ldrb	r3, [r3, #9]
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	4b1a      	ldr	r3, [pc, #104]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014bc6:	4b19      	ldr	r3, [pc, #100]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014bc8:	7a5b      	ldrb	r3, [r3, #9]
 8014bca:	b2db      	uxtb	r3, r3
 8014bcc:	4a17      	ldr	r2, [pc, #92]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	4413      	add	r3, r2
 8014bd2:	68fa      	ldr	r2, [r7, #12]
 8014bd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014bd6:	4b15      	ldr	r3, [pc, #84]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014bd8:	7a5b      	ldrb	r3, [r3, #9]
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	461a      	mov	r2, r3
 8014bde:	4b13      	ldr	r3, [pc, #76]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014be0:	4413      	add	r3, r2
 8014be2:	79fa      	ldrb	r2, [r7, #7]
 8014be4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014be6:	4b11      	ldr	r3, [pc, #68]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014be8:	7a5b      	ldrb	r3, [r3, #9]
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	1c5a      	adds	r2, r3, #1
 8014bee:	b2d1      	uxtb	r1, r2
 8014bf0:	4a0e      	ldr	r2, [pc, #56]	; (8014c2c <FATFS_LinkDriverEx+0x94>)
 8014bf2:	7251      	strb	r1, [r2, #9]
 8014bf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014bf6:	7dbb      	ldrb	r3, [r7, #22]
 8014bf8:	3330      	adds	r3, #48	; 0x30
 8014bfa:	b2da      	uxtb	r2, r3
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	3301      	adds	r3, #1
 8014c04:	223a      	movs	r2, #58	; 0x3a
 8014c06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	3302      	adds	r3, #2
 8014c0c:	222f      	movs	r2, #47	; 0x2f
 8014c0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	3303      	adds	r3, #3
 8014c14:	2200      	movs	r2, #0
 8014c16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	371c      	adds	r7, #28
 8014c22:	46bd      	mov	sp, r7
 8014c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c28:	4770      	bx	lr
 8014c2a:	bf00      	nop
 8014c2c:	20000980 	.word	0x20000980

08014c30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	6839      	ldr	r1, [r7, #0]
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7ff ffaa 	bl	8014b98 <FATFS_LinkDriverEx>
 8014c44:	4603      	mov	r3, r0
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	3708      	adds	r7, #8
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}

08014c4e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014c4e:	b580      	push	{r7, lr}
 8014c50:	b086      	sub	sp, #24
 8014c52:	af02      	add	r7, sp, #8
 8014c54:	60f8      	str	r0, [r7, #12]
 8014c56:	4608      	mov	r0, r1
 8014c58:	4611      	mov	r1, r2
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	817b      	strh	r3, [r7, #10]
 8014c60:	460b      	mov	r3, r1
 8014c62:	813b      	strh	r3, [r7, #8]
 8014c64:	4613      	mov	r3, r2
 8014c66:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014c68:	897a      	ldrh	r2, [r7, #10]
 8014c6a:	88fb      	ldrh	r3, [r7, #6]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	b298      	uxth	r0, r3
 8014c70:	893a      	ldrh	r2, [r7, #8]
 8014c72:	8b3b      	ldrh	r3, [r7, #24]
 8014c74:	4413      	add	r3, r2
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	893a      	ldrh	r2, [r7, #8]
 8014c7a:	8979      	ldrh	r1, [r7, #10]
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	4603      	mov	r3, r0
 8014c80:	68f8      	ldr	r0, [r7, #12]
 8014c82:	f001 f8a1 	bl	8015dc8 <u8g2_IsIntersection>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d012      	beq.n	8014cb2 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8014c8c:	e00d      	b.n	8014caa <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c8e:	88fb      	ldrh	r3, [r7, #6]
 8014c90:	893a      	ldrh	r2, [r7, #8]
 8014c92:	8979      	ldrh	r1, [r7, #10]
 8014c94:	2000      	movs	r0, #0
 8014c96:	9000      	str	r0, [sp, #0]
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f000 ffa4 	bl	8015be6 <u8g2_DrawHVLine>
    y++;    
 8014c9e:	893b      	ldrh	r3, [r7, #8]
 8014ca0:	3301      	adds	r3, #1
 8014ca2:	813b      	strh	r3, [r7, #8]
    h--;
 8014ca4:	8b3b      	ldrh	r3, [r7, #24]
 8014ca6:	3b01      	subs	r3, #1
 8014ca8:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8014caa:	8b3b      	ldrh	r3, [r7, #24]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1ee      	bne.n	8014c8e <u8g2_DrawBox+0x40>
 8014cb0:	e000      	b.n	8014cb4 <u8g2_DrawBox+0x66>
    return;
 8014cb2:	bf00      	nop
  }
}
 8014cb4:	3710      	adds	r7, #16
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}

08014cba <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014cba:	b580      	push	{r7, lr}
 8014cbc:	b088      	sub	sp, #32
 8014cbe:	af02      	add	r7, sp, #8
 8014cc0:	60f8      	str	r0, [r7, #12]
 8014cc2:	4608      	mov	r0, r1
 8014cc4:	4611      	mov	r1, r2
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	4603      	mov	r3, r0
 8014cca:	817b      	strh	r3, [r7, #10]
 8014ccc:	460b      	mov	r3, r1
 8014cce:	813b      	strh	r3, [r7, #8]
 8014cd0:	4613      	mov	r3, r2
 8014cd2:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8014cd4:	897b      	ldrh	r3, [r7, #10]
 8014cd6:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014cd8:	897a      	ldrh	r2, [r7, #10]
 8014cda:	88fb      	ldrh	r3, [r7, #6]
 8014cdc:	4413      	add	r3, r2
 8014cde:	b298      	uxth	r0, r3
 8014ce0:	893a      	ldrh	r2, [r7, #8]
 8014ce2:	8c3b      	ldrh	r3, [r7, #32]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	893a      	ldrh	r2, [r7, #8]
 8014cea:	8979      	ldrh	r1, [r7, #10]
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	4603      	mov	r3, r0
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f001 f869 	bl	8015dc8 <u8g2_IsIntersection>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d037      	beq.n	8014d6c <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014cfc:	88fb      	ldrh	r3, [r7, #6]
 8014cfe:	893a      	ldrh	r2, [r7, #8]
 8014d00:	8979      	ldrh	r1, [r7, #10]
 8014d02:	2000      	movs	r0, #0
 8014d04:	9000      	str	r0, [sp, #0]
 8014d06:	68f8      	ldr	r0, [r7, #12]
 8014d08:	f000 ff6d 	bl	8015be6 <u8g2_DrawHVLine>
  if (h >= 2) {
 8014d0c:	8c3b      	ldrh	r3, [r7, #32]
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d92d      	bls.n	8014d6e <u8g2_DrawFrame+0xb4>
    h-=2;
 8014d12:	8c3b      	ldrh	r3, [r7, #32]
 8014d14:	3b02      	subs	r3, #2
 8014d16:	843b      	strh	r3, [r7, #32]
    y++;
 8014d18:	893b      	ldrh	r3, [r7, #8]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8014d1e:	8c3b      	ldrh	r3, [r7, #32]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d01a      	beq.n	8014d5a <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014d24:	8c3b      	ldrh	r3, [r7, #32]
 8014d26:	893a      	ldrh	r2, [r7, #8]
 8014d28:	8979      	ldrh	r1, [r7, #10]
 8014d2a:	2001      	movs	r0, #1
 8014d2c:	9000      	str	r0, [sp, #0]
 8014d2e:	68f8      	ldr	r0, [r7, #12]
 8014d30:	f000 ff59 	bl	8015be6 <u8g2_DrawHVLine>
      x+=w;
 8014d34:	897a      	ldrh	r2, [r7, #10]
 8014d36:	88fb      	ldrh	r3, [r7, #6]
 8014d38:	4413      	add	r3, r2
 8014d3a:	817b      	strh	r3, [r7, #10]
      x--;
 8014d3c:	897b      	ldrh	r3, [r7, #10]
 8014d3e:	3b01      	subs	r3, #1
 8014d40:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014d42:	8c3b      	ldrh	r3, [r7, #32]
 8014d44:	893a      	ldrh	r2, [r7, #8]
 8014d46:	8979      	ldrh	r1, [r7, #10]
 8014d48:	2001      	movs	r0, #1
 8014d4a:	9000      	str	r0, [sp, #0]
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f000 ff4a 	bl	8015be6 <u8g2_DrawHVLine>
      y+=h;
 8014d52:	893a      	ldrh	r2, [r7, #8]
 8014d54:	8c3b      	ldrh	r3, [r7, #32]
 8014d56:	4413      	add	r3, r2
 8014d58:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8014d5a:	88fb      	ldrh	r3, [r7, #6]
 8014d5c:	893a      	ldrh	r2, [r7, #8]
 8014d5e:	8af9      	ldrh	r1, [r7, #22]
 8014d60:	2000      	movs	r0, #0
 8014d62:	9000      	str	r0, [sp, #0]
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f000 ff3e 	bl	8015be6 <u8g2_DrawHVLine>
 8014d6a:	e000      	b.n	8014d6e <u8g2_DrawFrame+0xb4>
    return;
 8014d6c:	bf00      	nop
  }
}
 8014d6e:	3718      	adds	r7, #24
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	7c1b      	ldrb	r3, [r3, #16]
 8014d82:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	fb02 f303 	mul.w	r3, r2, r3
 8014d92:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d9e:	68fa      	ldr	r2, [r7, #12]
 8014da0:	2100      	movs	r1, #0
 8014da2:	4618      	mov	r0, r3
 8014da4:	f008 f96c 	bl	801d080 <memset>
}
 8014da8:	bf00      	nop
 8014daa:	3710      	adds	r7, #16
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b086      	sub	sp, #24
 8014db4:	af02      	add	r7, sp, #8
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	70fb      	strb	r3, [r7, #3]
 8014dbc:	4613      	mov	r3, r2
 8014dbe:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	7c1b      	ldrb	r3, [r3, #16]
 8014dc6:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8014dc8:	78fb      	ldrb	r3, [r7, #3]
 8014dca:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dd0:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8014dd2:	7bfb      	ldrb	r3, [r7, #15]
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	89ba      	ldrh	r2, [r7, #12]
 8014dd8:	fb12 f303 	smulbb	r3, r2, r3
 8014ddc:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8014dde:	89bb      	ldrh	r3, [r7, #12]
 8014de0:	00db      	lsls	r3, r3, #3
 8014de2:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8014de4:	89bb      	ldrh	r3, [r7, #12]
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	4413      	add	r3, r2
 8014dea:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8014dec:	7bf9      	ldrb	r1, [r7, #15]
 8014dee:	78ba      	ldrb	r2, [r7, #2]
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	460b      	mov	r3, r1
 8014df6:	2100      	movs	r1, #0
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f001 fd06 	bl	801680a <u8x8_DrawTile>
}
 8014dfe:	bf00      	nop
 8014e00:	3710      	adds	r7, #16
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}

08014e06 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8014e06:	b580      	push	{r7, lr}
 8014e08:	b084      	sub	sp, #16
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e18:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014e20:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	7c5b      	ldrb	r3, [r3, #17]
 8014e28:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8014e2a:	7bba      	ldrb	r2, [r7, #14]
 8014e2c:	7bfb      	ldrb	r3, [r7, #15]
 8014e2e:	4619      	mov	r1, r3
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f7ff ffbd 	bl	8014db0 <u8g2_send_tile_row>
    src_row++;
 8014e36:	7bfb      	ldrb	r3, [r7, #15]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8014e3c:	7bbb      	ldrb	r3, [r7, #14]
 8014e3e:	3301      	adds	r3, #1
 8014e40:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8014e42:	7bfa      	ldrb	r2, [r7, #15]
 8014e44:	7b7b      	ldrb	r3, [r7, #13]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d203      	bcs.n	8014e52 <u8g2_send_buffer+0x4c>
 8014e4a:	7bba      	ldrb	r2, [r7, #14]
 8014e4c:	7b3b      	ldrb	r3, [r7, #12]
 8014e4e:	429a      	cmp	r2, r3
 8014e50:	d3eb      	bcc.n	8014e2a <u8g2_send_buffer+0x24>
}
 8014e52:	bf00      	nop
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8014e5a:	b580      	push	{r7, lr}
 8014e5c:	b082      	sub	sp, #8
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f7ff ffcf 	bl	8014e06 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f001 fd1f 	bl	80168ac <u8x8_RefreshDisplay>
}
 8014e6e:	bf00      	nop
 8014e70:	3708      	adds	r7, #8
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}

08014e76 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8014e76:	b580      	push	{r7, lr}
 8014e78:	b082      	sub	sp, #8
 8014e7a:	af00      	add	r7, sp, #0
 8014e7c:	6078      	str	r0, [r7, #4]
 8014e7e:	460b      	mov	r3, r1
 8014e80:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	78fa      	ldrb	r2, [r7, #3]
 8014e86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e98:	685b      	ldr	r3, [r3, #4]
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	4798      	blx	r3
}
 8014e9e:	bf00      	nop
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b082      	sub	sp, #8
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d002      	beq.n	8014ebe <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7ff ff5b 	bl	8014d74 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8014ebe:	2100      	movs	r1, #0
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7ff ffd8 	bl	8014e76 <u8g2_SetBufferCurrTileRow>
}
 8014ec6:	bf00      	nop
 8014ec8:	3708      	adds	r7, #8
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}

08014ece <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8014ece:	b580      	push	{r7, lr}
 8014ed0:	b084      	sub	sp, #16
 8014ed2:	af00      	add	r7, sp, #0
 8014ed4:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f7ff ff95 	bl	8014e06 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014ee2:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8014eea:	7bfb      	ldrb	r3, [r7, #15]
 8014eec:	4413      	add	r3, r2
 8014eee:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	7c5b      	ldrb	r3, [r3, #17]
 8014ef6:	7bfa      	ldrb	r2, [r7, #15]
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d304      	bcc.n	8014f06 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f001 fcd5 	bl	80168ac <u8x8_RefreshDisplay>
    return 0;
 8014f02:	2300      	movs	r3, #0
 8014f04:	e00d      	b.n	8014f22 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d002      	beq.n	8014f16 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f7ff ff2f 	bl	8014d74 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8014f16:	7bfb      	ldrb	r3, [r7, #15]
 8014f18:	4619      	mov	r1, r3
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f7ff ffab 	bl	8014e76 <u8g2_SetBufferCurrTileRow>
  return 1;
 8014f20:	2301      	movs	r3, #1
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3710      	adds	r7, #16
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}

08014f2a <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8014f2a:	b580      	push	{r7, lr}
 8014f2c:	b082      	sub	sp, #8
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f7ff ffb7 	bl	8014ea6 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f7ff ffc8 	bl	8014ece <u8g2_NextPage>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d1f9      	bne.n	8014f38 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8014f44:	2100      	movs	r1, #0
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f7ff ff95 	bl	8014e76 <u8g2_SetBufferCurrTileRow>
}
 8014f4c:	bf00      	nop
 8014f4e:	3708      	adds	r7, #8
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}

08014f54 <u8g2_m_30_20_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_30_20_f(uint8_t *page_cnt)
{
 8014f54:	b480      	push	{r7}
 8014f56:	b083      	sub	sp, #12
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 20;
  return 0;
  #else
  static uint8_t buf[4800];
  *page_cnt = 20;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2214      	movs	r2, #20
 8014f60:	701a      	strb	r2, [r3, #0]
  return buf;
 8014f62:	4b03      	ldr	r3, [pc, #12]	; (8014f70 <u8g2_m_30_20_f+0x1c>)
  #endif
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	370c      	adds	r7, #12
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr
 8014f70:	2000098c 	.word	0x2000098c

08014f74 <u8g2_Setup_uc1638_240x160_f>:
  buf = u8g2_m_30_20_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1638 f */
void u8g2_Setup_uc1638_240x160_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b088      	sub	sp, #32
 8014f78:	af02      	add	r7, sp, #8
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
 8014f80:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1638_240x160, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	4a0b      	ldr	r2, [pc, #44]	; (8014fb8 <u8g2_Setup_uc1638_240x160_f+0x44>)
 8014f8a:	490c      	ldr	r1, [pc, #48]	; (8014fbc <u8g2_Setup_uc1638_240x160_f+0x48>)
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f001 fced 	bl	801696c <u8x8_Setup>
  buf = u8g2_m_30_20_f(&tile_buf_height);
 8014f92:	f107 0313 	add.w	r3, r7, #19
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7ff ffdc 	bl	8014f54 <u8g2_m_30_20_f>
 8014f9c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8014f9e:	7cfa      	ldrb	r2, [r7, #19]
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	9300      	str	r3, [sp, #0]
 8014fa4:	4b06      	ldr	r3, [pc, #24]	; (8014fc0 <u8g2_Setup_uc1638_240x160_f+0x4c>)
 8014fa6:	6979      	ldr	r1, [r7, #20]
 8014fa8:	68f8      	ldr	r0, [r7, #12]
 8014faa:	f000 fff7 	bl	8015f9c <u8g2_SetupBuffer>
}
 8014fae:	bf00      	nop
 8014fb0:	3718      	adds	r7, #24
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	08016505 	.word	0x08016505
 8014fbc:	08016705 	.word	0x08016705
 8014fc0:	08015e1f 	.word	0x08015e1f

08014fc4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8014fc4:	b480      	push	{r7}
 8014fc6:	b083      	sub	sp, #12
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	460b      	mov	r3, r1
 8014fce:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8014fd0:	78fb      	ldrb	r3, [r7, #3]
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	781b      	ldrb	r3, [r3, #0]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	370c      	adds	r7, #12
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr

08014fe8 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b085      	sub	sp, #20
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	460b      	mov	r3, r1
 8014ff2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8014ff4:	78fb      	ldrb	r3, [r7, #3]
 8014ff6:	687a      	ldr	r2, [r7, #4]
 8014ff8:	4413      	add	r3, r2
 8014ffa:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	81fb      	strh	r3, [r7, #14]
    font++;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	3301      	adds	r3, #1
 8015006:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8015008:	89fb      	ldrh	r3, [r7, #14]
 801500a:	021b      	lsls	r3, r3, #8
 801500c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	781b      	ldrb	r3, [r3, #0]
 8015012:	b29a      	uxth	r2, r3
 8015014:	89fb      	ldrh	r3, [r7, #14]
 8015016:	4413      	add	r3, r2
 8015018:	81fb      	strh	r3, [r7, #14]
    return pos;
 801501a:	89fb      	ldrh	r3, [r7, #14]
}
 801501c:	4618      	mov	r0, r3
 801501e:	3714      	adds	r7, #20
 8015020:	46bd      	mov	sp, r7
 8015022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015026:	4770      	bx	lr

08015028 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8015032:	2100      	movs	r1, #0
 8015034:	6838      	ldr	r0, [r7, #0]
 8015036:	f7ff ffc5 	bl	8014fc4 <u8g2_font_get_byte>
 801503a:	4603      	mov	r3, r0
 801503c:	461a      	mov	r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8015042:	2101      	movs	r1, #1
 8015044:	6838      	ldr	r0, [r7, #0]
 8015046:	f7ff ffbd 	bl	8014fc4 <u8g2_font_get_byte>
 801504a:	4603      	mov	r3, r0
 801504c:	461a      	mov	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8015052:	2102      	movs	r1, #2
 8015054:	6838      	ldr	r0, [r7, #0]
 8015056:	f7ff ffb5 	bl	8014fc4 <u8g2_font_get_byte>
 801505a:	4603      	mov	r3, r0
 801505c:	461a      	mov	r2, r3
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8015062:	2103      	movs	r1, #3
 8015064:	6838      	ldr	r0, [r7, #0]
 8015066:	f7ff ffad 	bl	8014fc4 <u8g2_font_get_byte>
 801506a:	4603      	mov	r3, r0
 801506c:	461a      	mov	r2, r3
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8015072:	2104      	movs	r1, #4
 8015074:	6838      	ldr	r0, [r7, #0]
 8015076:	f7ff ffa5 	bl	8014fc4 <u8g2_font_get_byte>
 801507a:	4603      	mov	r3, r0
 801507c:	461a      	mov	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8015082:	2105      	movs	r1, #5
 8015084:	6838      	ldr	r0, [r7, #0]
 8015086:	f7ff ff9d 	bl	8014fc4 <u8g2_font_get_byte>
 801508a:	4603      	mov	r3, r0
 801508c:	461a      	mov	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8015092:	2106      	movs	r1, #6
 8015094:	6838      	ldr	r0, [r7, #0]
 8015096:	f7ff ff95 	bl	8014fc4 <u8g2_font_get_byte>
 801509a:	4603      	mov	r3, r0
 801509c:	461a      	mov	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80150a2:	2107      	movs	r1, #7
 80150a4:	6838      	ldr	r0, [r7, #0]
 80150a6:	f7ff ff8d 	bl	8014fc4 <u8g2_font_get_byte>
 80150aa:	4603      	mov	r3, r0
 80150ac:	461a      	mov	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80150b2:	2108      	movs	r1, #8
 80150b4:	6838      	ldr	r0, [r7, #0]
 80150b6:	f7ff ff85 	bl	8014fc4 <u8g2_font_get_byte>
 80150ba:	4603      	mov	r3, r0
 80150bc:	461a      	mov	r2, r3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80150c2:	2109      	movs	r1, #9
 80150c4:	6838      	ldr	r0, [r7, #0]
 80150c6:	f7ff ff7d 	bl	8014fc4 <u8g2_font_get_byte>
 80150ca:	4603      	mov	r3, r0
 80150cc:	b25a      	sxtb	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80150d2:	210a      	movs	r1, #10
 80150d4:	6838      	ldr	r0, [r7, #0]
 80150d6:	f7ff ff75 	bl	8014fc4 <u8g2_font_get_byte>
 80150da:	4603      	mov	r3, r0
 80150dc:	b25a      	sxtb	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80150e2:	210b      	movs	r1, #11
 80150e4:	6838      	ldr	r0, [r7, #0]
 80150e6:	f7ff ff6d 	bl	8014fc4 <u8g2_font_get_byte>
 80150ea:	4603      	mov	r3, r0
 80150ec:	b25a      	sxtb	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80150f2:	210c      	movs	r1, #12
 80150f4:	6838      	ldr	r0, [r7, #0]
 80150f6:	f7ff ff65 	bl	8014fc4 <u8g2_font_get_byte>
 80150fa:	4603      	mov	r3, r0
 80150fc:	b25a      	sxtb	r2, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8015102:	210d      	movs	r1, #13
 8015104:	6838      	ldr	r0, [r7, #0]
 8015106:	f7ff ff5d 	bl	8014fc4 <u8g2_font_get_byte>
 801510a:	4603      	mov	r3, r0
 801510c:	b25a      	sxtb	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8015112:	210e      	movs	r1, #14
 8015114:	6838      	ldr	r0, [r7, #0]
 8015116:	f7ff ff55 	bl	8014fc4 <u8g2_font_get_byte>
 801511a:	4603      	mov	r3, r0
 801511c:	b25a      	sxtb	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8015122:	210f      	movs	r1, #15
 8015124:	6838      	ldr	r0, [r7, #0]
 8015126:	f7ff ff4d 	bl	8014fc4 <u8g2_font_get_byte>
 801512a:	4603      	mov	r3, r0
 801512c:	b25a      	sxtb	r2, r3
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8015132:	2110      	movs	r1, #16
 8015134:	6838      	ldr	r0, [r7, #0]
 8015136:	f7ff ff45 	bl	8014fc4 <u8g2_font_get_byte>
 801513a:	4603      	mov	r3, r0
 801513c:	b25a      	sxtb	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8015142:	2111      	movs	r1, #17
 8015144:	6838      	ldr	r0, [r7, #0]
 8015146:	f7ff ff4f 	bl	8014fe8 <u8g2_font_get_word>
 801514a:	4603      	mov	r3, r0
 801514c:	461a      	mov	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8015152:	2113      	movs	r1, #19
 8015154:	6838      	ldr	r0, [r7, #0]
 8015156:	f7ff ff47 	bl	8014fe8 <u8g2_font_get_word>
 801515a:	4603      	mov	r3, r0
 801515c:	461a      	mov	r2, r3
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8015162:	2115      	movs	r1, #21
 8015164:	6838      	ldr	r0, [r7, #0]
 8015166:	f7ff ff3f 	bl	8014fe8 <u8g2_font_get_word>
 801516a:	4603      	mov	r3, r0
 801516c:	461a      	mov	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	82da      	strh	r2, [r3, #22]
#endif
}
 8015172:	bf00      	nop
 8015174:	3708      	adds	r7, #8
 8015176:	46bd      	mov	sp, r7
 8015178:	bd80      	pop	{r7, pc}

0801517a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 801517a:	b480      	push	{r7}
 801517c:	b085      	sub	sp, #20
 801517e:	af00      	add	r7, sp, #0
 8015180:	6078      	str	r0, [r7, #4]
 8015182:	460b      	mov	r3, r1
 8015184:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	7b1b      	ldrb	r3, [r3, #12]
 801518a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8015194:	7bfa      	ldrb	r2, [r7, #15]
 8015196:	7b7b      	ldrb	r3, [r7, #13]
 8015198:	fa42 f303 	asr.w	r3, r2, r3
 801519c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 801519e:	7b7b      	ldrb	r3, [r7, #13]
 80151a0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80151a2:	7bba      	ldrb	r2, [r7, #14]
 80151a4:	78fb      	ldrb	r3, [r7, #3]
 80151a6:	4413      	add	r3, r2
 80151a8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80151aa:	7bbb      	ldrb	r3, [r7, #14]
 80151ac:	2b07      	cmp	r3, #7
 80151ae:	d91a      	bls.n	80151e6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80151b0:	2308      	movs	r3, #8
 80151b2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80151b4:	7b3a      	ldrb	r2, [r7, #12]
 80151b6:	7b7b      	ldrb	r3, [r7, #13]
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	1c5a      	adds	r2, r3, #1
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	781b      	ldrb	r3, [r3, #0]
 80151cc:	461a      	mov	r2, r3
 80151ce:	7b3b      	ldrb	r3, [r7, #12]
 80151d0:	fa02 f303 	lsl.w	r3, r2, r3
 80151d4:	b25a      	sxtb	r2, r3
 80151d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151da:	4313      	orrs	r3, r2
 80151dc:	b25b      	sxtb	r3, r3
 80151de:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80151e0:	7bbb      	ldrb	r3, [r7, #14]
 80151e2:	3b08      	subs	r3, #8
 80151e4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80151e6:	78fb      	ldrb	r3, [r7, #3]
 80151e8:	f04f 32ff 	mov.w	r2, #4294967295
 80151ec:	fa02 f303 	lsl.w	r3, r2, r3
 80151f0:	b2db      	uxtb	r3, r3
 80151f2:	43db      	mvns	r3, r3
 80151f4:	b2da      	uxtb	r2, r3
 80151f6:	7bfb      	ldrb	r3, [r7, #15]
 80151f8:	4013      	ands	r3, r2
 80151fa:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	7bba      	ldrb	r2, [r7, #14]
 8015200:	731a      	strb	r2, [r3, #12]
  return val;
 8015202:	7bfb      	ldrb	r3, [r7, #15]
}
 8015204:	4618      	mov	r0, r3
 8015206:	3714      	adds	r7, #20
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b084      	sub	sp, #16
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	460b      	mov	r3, r1
 801521a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 801521c:	78fb      	ldrb	r3, [r7, #3]
 801521e:	4619      	mov	r1, r3
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7ff ffaa 	bl	801517a <u8g2_font_decode_get_unsigned_bits>
 8015226:	4603      	mov	r3, r0
 8015228:	73fb      	strb	r3, [r7, #15]
  d = 1;
 801522a:	2301      	movs	r3, #1
 801522c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 801522e:	78fb      	ldrb	r3, [r7, #3]
 8015230:	3b01      	subs	r3, #1
 8015232:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8015234:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8015238:	78fb      	ldrb	r3, [r7, #3]
 801523a:	fa02 f303 	lsl.w	r3, r2, r3
 801523e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8015240:	7bfa      	ldrb	r2, [r7, #15]
 8015242:	7bbb      	ldrb	r3, [r7, #14]
 8015244:	1ad3      	subs	r3, r2, r3
 8015246:	b2db      	uxtb	r3, r3
 8015248:	73fb      	strb	r3, [r7, #15]
  return v;
 801524a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 801524e:	4618      	mov	r0, r3
 8015250:	3710      	adds	r7, #16
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}

08015256 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8015256:	b490      	push	{r4, r7}
 8015258:	b082      	sub	sp, #8
 801525a:	af00      	add	r7, sp, #0
 801525c:	4604      	mov	r4, r0
 801525e:	4608      	mov	r0, r1
 8015260:	4611      	mov	r1, r2
 8015262:	461a      	mov	r2, r3
 8015264:	4623      	mov	r3, r4
 8015266:	80fb      	strh	r3, [r7, #6]
 8015268:	4603      	mov	r3, r0
 801526a:	717b      	strb	r3, [r7, #5]
 801526c:	460b      	mov	r3, r1
 801526e:	713b      	strb	r3, [r7, #4]
 8015270:	4613      	mov	r3, r2
 8015272:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8015274:	78fb      	ldrb	r3, [r7, #3]
 8015276:	2b02      	cmp	r3, #2
 8015278:	d014      	beq.n	80152a4 <u8g2_add_vector_y+0x4e>
 801527a:	2b02      	cmp	r3, #2
 801527c:	dc19      	bgt.n	80152b2 <u8g2_add_vector_y+0x5c>
 801527e:	2b00      	cmp	r3, #0
 8015280:	d002      	beq.n	8015288 <u8g2_add_vector_y+0x32>
 8015282:	2b01      	cmp	r3, #1
 8015284:	d007      	beq.n	8015296 <u8g2_add_vector_y+0x40>
 8015286:	e014      	b.n	80152b2 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8015288:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801528c:	b29a      	uxth	r2, r3
 801528e:	88fb      	ldrh	r3, [r7, #6]
 8015290:	4413      	add	r3, r2
 8015292:	80fb      	strh	r3, [r7, #6]
      break;
 8015294:	e014      	b.n	80152c0 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8015296:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801529a:	b29a      	uxth	r2, r3
 801529c:	88fb      	ldrh	r3, [r7, #6]
 801529e:	4413      	add	r3, r2
 80152a0:	80fb      	strh	r3, [r7, #6]
      break;
 80152a2:	e00d      	b.n	80152c0 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80152a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	88fa      	ldrh	r2, [r7, #6]
 80152ac:	1ad3      	subs	r3, r2, r3
 80152ae:	80fb      	strh	r3, [r7, #6]
      break;
 80152b0:	e006      	b.n	80152c0 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80152b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	88fa      	ldrh	r2, [r7, #6]
 80152ba:	1ad3      	subs	r3, r2, r3
 80152bc:	80fb      	strh	r3, [r7, #6]
      break;      
 80152be:	bf00      	nop
  }
  return dy;
 80152c0:	88fb      	ldrh	r3, [r7, #6]
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3708      	adds	r7, #8
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bc90      	pop	{r4, r7}
 80152ca:	4770      	bx	lr

080152cc <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80152cc:	b490      	push	{r4, r7}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	4604      	mov	r4, r0
 80152d4:	4608      	mov	r0, r1
 80152d6:	4611      	mov	r1, r2
 80152d8:	461a      	mov	r2, r3
 80152da:	4623      	mov	r3, r4
 80152dc:	80fb      	strh	r3, [r7, #6]
 80152de:	4603      	mov	r3, r0
 80152e0:	717b      	strb	r3, [r7, #5]
 80152e2:	460b      	mov	r3, r1
 80152e4:	713b      	strb	r3, [r7, #4]
 80152e6:	4613      	mov	r3, r2
 80152e8:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80152ea:	78fb      	ldrb	r3, [r7, #3]
 80152ec:	2b02      	cmp	r3, #2
 80152ee:	d014      	beq.n	801531a <u8g2_add_vector_x+0x4e>
 80152f0:	2b02      	cmp	r3, #2
 80152f2:	dc19      	bgt.n	8015328 <u8g2_add_vector_x+0x5c>
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d002      	beq.n	80152fe <u8g2_add_vector_x+0x32>
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d007      	beq.n	801530c <u8g2_add_vector_x+0x40>
 80152fc:	e014      	b.n	8015328 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80152fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015302:	b29a      	uxth	r2, r3
 8015304:	88fb      	ldrh	r3, [r7, #6]
 8015306:	4413      	add	r3, r2
 8015308:	80fb      	strh	r3, [r7, #6]
      break;
 801530a:	e014      	b.n	8015336 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 801530c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015310:	b29b      	uxth	r3, r3
 8015312:	88fa      	ldrh	r2, [r7, #6]
 8015314:	1ad3      	subs	r3, r2, r3
 8015316:	80fb      	strh	r3, [r7, #6]
      break;
 8015318:	e00d      	b.n	8015336 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 801531a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801531e:	b29b      	uxth	r3, r3
 8015320:	88fa      	ldrh	r2, [r7, #6]
 8015322:	1ad3      	subs	r3, r2, r3
 8015324:	80fb      	strh	r3, [r7, #6]
      break;
 8015326:	e006      	b.n	8015336 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8015328:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801532c:	b29a      	uxth	r2, r3
 801532e:	88fb      	ldrh	r3, [r7, #6]
 8015330:	4413      	add	r3, r2
 8015332:	80fb      	strh	r3, [r7, #6]
      break;      
 8015334:	bf00      	nop
  }
  return dx;
 8015336:	88fb      	ldrh	r3, [r7, #6]
}
 8015338:	4618      	mov	r0, r3
 801533a:	3708      	adds	r7, #8
 801533c:	46bd      	mov	sp, r7
 801533e:	bc90      	pop	{r4, r7}
 8015340:	4770      	bx	lr

08015342 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8015342:	b580      	push	{r7, lr}
 8015344:	b088      	sub	sp, #32
 8015346:	af02      	add	r7, sp, #8
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	460b      	mov	r3, r1
 801534c:	70fb      	strb	r3, [r7, #3]
 801534e:	4613      	mov	r3, r2
 8015350:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	3360      	adds	r3, #96	; 0x60
 8015356:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8015358:	78fb      	ldrb	r3, [r7, #3]
 801535a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015362:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801536a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015372:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8015374:	7bfa      	ldrb	r2, [r7, #15]
 8015376:	7d7b      	ldrb	r3, [r7, #21]
 8015378:	1ad3      	subs	r3, r2, r3
 801537a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 801537c:	7bfb      	ldrb	r3, [r7, #15]
 801537e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8015380:	7dfa      	ldrb	r2, [r7, #23]
 8015382:	7bfb      	ldrb	r3, [r7, #15]
 8015384:	429a      	cmp	r2, r3
 8015386:	d201      	bcs.n	801538c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8015388:	7dfb      	ldrb	r3, [r7, #23]
 801538a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	889b      	ldrh	r3, [r3, #4]
 8015390:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	88db      	ldrh	r3, [r3, #6]
 8015396:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8015398:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801539c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	7c1b      	ldrb	r3, [r3, #16]
 80153a4:	89b8      	ldrh	r0, [r7, #12]
 80153a6:	f7ff ff91 	bl	80152cc <u8g2_add_vector_x>
 80153aa:	4603      	mov	r3, r0
 80153ac:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80153ae:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80153b2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	7c1b      	ldrb	r3, [r3, #16]
 80153ba:	8978      	ldrh	r0, [r7, #10]
 80153bc:	f7ff ff4b 	bl	8015256 <u8g2_add_vector_y>
 80153c0:	4603      	mov	r3, r0
 80153c2:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80153c4:	78bb      	ldrb	r3, [r7, #2]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d010      	beq.n	80153ec <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	7b9a      	ldrb	r2, [r3, #14]
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80153d4:	7dbb      	ldrb	r3, [r7, #22]
 80153d6:	b298      	uxth	r0, r3
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	7c1b      	ldrb	r3, [r3, #16]
 80153dc:	897a      	ldrh	r2, [r7, #10]
 80153de:	89b9      	ldrh	r1, [r7, #12]
 80153e0:	9300      	str	r3, [sp, #0]
 80153e2:	4603      	mov	r3, r0
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f000 fbfe 	bl	8015be6 <u8g2_DrawHVLine>
 80153ea:	e013      	b.n	8015414 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	7b5b      	ldrb	r3, [r3, #13]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d10f      	bne.n	8015414 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	7bda      	ldrb	r2, [r3, #15]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80153fe:	7dbb      	ldrb	r3, [r7, #22]
 8015400:	b298      	uxth	r0, r3
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	7c1b      	ldrb	r3, [r3, #16]
 8015406:	897a      	ldrh	r2, [r7, #10]
 8015408:	89b9      	ldrh	r1, [r7, #12]
 801540a:	9300      	str	r3, [sp, #0]
 801540c:	4603      	mov	r3, r0
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 fbe9 	bl	8015be6 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8015414:	7dfa      	ldrb	r2, [r7, #23]
 8015416:	7bfb      	ldrb	r3, [r7, #15]
 8015418:	429a      	cmp	r2, r3
 801541a:	d309      	bcc.n	8015430 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 801541c:	7dfa      	ldrb	r2, [r7, #23]
 801541e:	7bfb      	ldrb	r3, [r7, #15]
 8015420:	1ad3      	subs	r3, r2, r3
 8015422:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8015424:	2300      	movs	r3, #0
 8015426:	757b      	strb	r3, [r7, #21]
    ly++;
 8015428:	7d3b      	ldrb	r3, [r7, #20]
 801542a:	3301      	adds	r3, #1
 801542c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 801542e:	e79d      	b.n	801536c <u8g2_font_decode_len+0x2a>
      break;
 8015430:	bf00      	nop
  }
  lx += cnt;
 8015432:	7d7a      	ldrb	r2, [r7, #21]
 8015434:	7dfb      	ldrb	r3, [r7, #23]
 8015436:	4413      	add	r3, r2
 8015438:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 801543a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8015442:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	725a      	strb	r2, [r3, #9]
  
}
 801544a:	bf00      	nop
 801544c:	3718      	adds	r7, #24
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}

08015452 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8015452:	b580      	push	{r7, lr}
 8015454:	b084      	sub	sp, #16
 8015456:	af00      	add	r7, sp, #0
 8015458:	6078      	str	r0, [r7, #4]
 801545a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	3360      	adds	r3, #96	; 0x60
 8015460:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	2200      	movs	r2, #0
 801546c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8015474:	4619      	mov	r1, r3
 8015476:	68f8      	ldr	r0, [r7, #12]
 8015478:	f7ff fe7f 	bl	801517a <u8g2_font_decode_get_unsigned_bits>
 801547c:	4603      	mov	r3, r0
 801547e:	b25a      	sxtb	r2, r3
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801548a:	4619      	mov	r1, r3
 801548c:	68f8      	ldr	r0, [r7, #12]
 801548e:	f7ff fe74 	bl	801517a <u8g2_font_decode_get_unsigned_bits>
 8015492:	4603      	mov	r3, r0
 8015494:	b25a      	sxtb	r2, r3
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	7b9b      	ldrb	r3, [r3, #14]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	bf0c      	ite	eq
 80154ac:	2301      	moveq	r3, #1
 80154ae:	2300      	movne	r3, #0
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	461a      	mov	r2, r3
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	73da      	strb	r2, [r3, #15]
}
 80154b8:	bf00      	nop
 80154ba:	3710      	adds	r7, #16
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b08a      	sub	sp, #40	; 0x28
 80154c4:	af02      	add	r7, sp, #8
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	3360      	adds	r3, #96	; 0x60
 80154ce:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80154d0:	6839      	ldr	r1, [r7, #0]
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7ff ffbd 	bl	8015452 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80154de:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80154e6:	4619      	mov	r1, r3
 80154e8:	6978      	ldr	r0, [r7, #20]
 80154ea:	f7ff fe91 	bl	8015210 <u8g2_font_decode_get_signed_bits>
 80154ee:	4603      	mov	r3, r0
 80154f0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80154f8:	4619      	mov	r1, r3
 80154fa:	6978      	ldr	r0, [r7, #20]
 80154fc:	f7ff fe88 	bl	8015210 <u8g2_font_decode_get_signed_bits>
 8015500:	4603      	mov	r3, r0
 8015502:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801550a:	4619      	mov	r1, r3
 801550c:	6978      	ldr	r0, [r7, #20]
 801550e:	f7ff fe7f 	bl	8015210 <u8g2_font_decode_get_signed_bits>
 8015512:	4603      	mov	r3, r0
 8015514:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801551c:	2b00      	cmp	r3, #0
 801551e:	f340 80d7 	ble.w	80156d0 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	8898      	ldrh	r0, [r3, #4]
 8015526:	7cfa      	ldrb	r2, [r7, #19]
 8015528:	7c7b      	ldrb	r3, [r7, #17]
 801552a:	4413      	add	r3, r2
 801552c:	b2db      	uxtb	r3, r3
 801552e:	425b      	negs	r3, r3
 8015530:	b2db      	uxtb	r3, r3
 8015532:	b25a      	sxtb	r2, r3
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	7c1b      	ldrb	r3, [r3, #16]
 8015538:	f997 1012 	ldrsb.w	r1, [r7, #18]
 801553c:	f7ff fec6 	bl	80152cc <u8g2_add_vector_x>
 8015540:	4603      	mov	r3, r0
 8015542:	461a      	mov	r2, r3
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8015548:	697b      	ldr	r3, [r7, #20]
 801554a:	88d8      	ldrh	r0, [r3, #6]
 801554c:	7cfa      	ldrb	r2, [r7, #19]
 801554e:	7c7b      	ldrb	r3, [r7, #17]
 8015550:	4413      	add	r3, r2
 8015552:	b2db      	uxtb	r3, r3
 8015554:	425b      	negs	r3, r3
 8015556:	b2db      	uxtb	r3, r3
 8015558:	b25a      	sxtb	r2, r3
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	7c1b      	ldrb	r3, [r3, #16]
 801555e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8015562:	f7ff fe78 	bl	8015256 <u8g2_add_vector_y>
 8015566:	4603      	mov	r3, r0
 8015568:	461a      	mov	r2, r3
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	889b      	ldrh	r3, [r3, #4]
 8015572:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	88db      	ldrh	r3, [r3, #6]
 8015578:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 801557a:	8bfb      	ldrh	r3, [r7, #30]
 801557c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 801557e:	8b7b      	ldrh	r3, [r7, #26]
 8015580:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	7c1b      	ldrb	r3, [r3, #16]
 8015586:	2b03      	cmp	r3, #3
 8015588:	d85a      	bhi.n	8015640 <u8g2_font_decode_glyph+0x180>
 801558a:	a201      	add	r2, pc, #4	; (adr r2, 8015590 <u8g2_font_decode_glyph+0xd0>)
 801558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015590:	080155a1 	.word	0x080155a1
 8015594:	080155bd 	.word	0x080155bd
 8015598:	080155e5 	.word	0x080155e5
 801559c:	08015619 	.word	0x08015619
      {
	case 0:
	    x1 += decode->glyph_width;
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	8bbb      	ldrh	r3, [r7, #28]
 80155aa:	4413      	add	r3, r2
 80155ac:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80155ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155b2:	b29a      	uxth	r2, r3
 80155b4:	8b3b      	ldrh	r3, [r7, #24]
 80155b6:	4413      	add	r3, r2
 80155b8:	833b      	strh	r3, [r7, #24]
	    break;
 80155ba:	e041      	b.n	8015640 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80155bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	8bfa      	ldrh	r2, [r7, #30]
 80155c4:	1ad3      	subs	r3, r2, r3
 80155c6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155c8:	8bfb      	ldrh	r3, [r7, #30]
 80155ca:	3301      	adds	r3, #1
 80155cc:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80155ce:	8bbb      	ldrh	r3, [r7, #28]
 80155d0:	3301      	adds	r3, #1
 80155d2:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155da:	b29a      	uxth	r2, r3
 80155dc:	8b3b      	ldrh	r3, [r7, #24]
 80155de:	4413      	add	r3, r2
 80155e0:	833b      	strh	r3, [r7, #24]
	    break;
 80155e2:	e02d      	b.n	8015640 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	8bfa      	ldrh	r2, [r7, #30]
 80155ee:	1ad3      	subs	r3, r2, r3
 80155f0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155f2:	8bfb      	ldrh	r3, [r7, #30]
 80155f4:	3301      	adds	r3, #1
 80155f6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80155f8:	8bbb      	ldrh	r3, [r7, #28]
 80155fa:	3301      	adds	r3, #1
 80155fc:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80155fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015602:	b29b      	uxth	r3, r3
 8015604:	8b7a      	ldrh	r2, [r7, #26]
 8015606:	1ad3      	subs	r3, r2, r3
 8015608:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801560a:	8b7b      	ldrh	r3, [r7, #26]
 801560c:	3301      	adds	r3, #1
 801560e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015610:	8b3b      	ldrh	r3, [r7, #24]
 8015612:	3301      	adds	r3, #1
 8015614:	833b      	strh	r3, [r7, #24]
	    break;	  
 8015616:	e013      	b.n	8015640 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8015618:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801561c:	b29a      	uxth	r2, r3
 801561e:	8bbb      	ldrh	r3, [r7, #28]
 8015620:	4413      	add	r3, r2
 8015622:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801562a:	b29b      	uxth	r3, r3
 801562c:	8b7a      	ldrh	r2, [r7, #26]
 801562e:	1ad3      	subs	r3, r2, r3
 8015630:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015632:	8b7b      	ldrh	r3, [r7, #26]
 8015634:	3301      	adds	r3, #1
 8015636:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015638:	8b3b      	ldrh	r3, [r7, #24]
 801563a:	3301      	adds	r3, #1
 801563c:	833b      	strh	r3, [r7, #24]
	    break;	  
 801563e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8015640:	8bb8      	ldrh	r0, [r7, #28]
 8015642:	8b7a      	ldrh	r2, [r7, #26]
 8015644:	8bf9      	ldrh	r1, [r7, #30]
 8015646:	8b3b      	ldrh	r3, [r7, #24]
 8015648:	9300      	str	r3, [sp, #0]
 801564a:	4603      	mov	r3, r0
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f000 fbbb 	bl	8015dc8 <u8g2_IsIntersection>
 8015652:	4603      	mov	r3, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d102      	bne.n	801565e <u8g2_font_decode_glyph+0x19e>
	return d;
 8015658:	f997 3010 	ldrsb.w	r3, [r7, #16]
 801565c:	e03a      	b.n	80156d4 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	2200      	movs	r2, #0
 8015662:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	2200      	movs	r2, #0
 8015668:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8015670:	4619      	mov	r1, r3
 8015672:	6978      	ldr	r0, [r7, #20]
 8015674:	f7ff fd81 	bl	801517a <u8g2_font_decode_get_unsigned_bits>
 8015678:	4603      	mov	r3, r0
 801567a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8015682:	4619      	mov	r1, r3
 8015684:	6978      	ldr	r0, [r7, #20]
 8015686:	f7ff fd78 	bl	801517a <u8g2_font_decode_get_unsigned_bits>
 801568a:	4603      	mov	r3, r0
 801568c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 801568e:	7bfb      	ldrb	r3, [r7, #15]
 8015690:	2200      	movs	r2, #0
 8015692:	4619      	mov	r1, r3
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f7ff fe54 	bl	8015342 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 801569a:	7bbb      	ldrb	r3, [r7, #14]
 801569c:	2201      	movs	r2, #1
 801569e:	4619      	mov	r1, r3
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7ff fe4e 	bl	8015342 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80156a6:	2101      	movs	r1, #1
 80156a8:	6978      	ldr	r0, [r7, #20]
 80156aa:	f7ff fd66 	bl	801517a <u8g2_font_decode_get_unsigned_bits>
 80156ae:	4603      	mov	r3, r0
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d1ec      	bne.n	801568e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80156b4:	697b      	ldr	r3, [r7, #20]
 80156b6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80156ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80156be:	429a      	cmp	r2, r3
 80156c0:	dd00      	ble.n	80156c4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80156c2:	e7d2      	b.n	801566a <u8g2_font_decode_glyph+0x1aa>
	break;
 80156c4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	7b9a      	ldrb	r2, [r3, #14]
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80156d0:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3720      	adds	r7, #32
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b086      	sub	sp, #24
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	460b      	mov	r3, r1
 80156e6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156ec:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	3317      	adds	r3, #23
 80156f2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80156f4:	887b      	ldrh	r3, [r7, #2]
 80156f6:	2bff      	cmp	r3, #255	; 0xff
 80156f8:	d82a      	bhi.n	8015750 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80156fa:	887b      	ldrh	r3, [r7, #2]
 80156fc:	2b60      	cmp	r3, #96	; 0x60
 80156fe:	d907      	bls.n	8015710 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8015706:	461a      	mov	r2, r3
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	4413      	add	r3, r2
 801570c:	617b      	str	r3, [r7, #20]
 801570e:	e009      	b.n	8015724 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8015710:	887b      	ldrh	r3, [r7, #2]
 8015712:	2b40      	cmp	r3, #64	; 0x40
 8015714:	d906      	bls.n	8015724 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801571c:	461a      	mov	r2, r3
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	4413      	add	r3, r2
 8015722:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	3301      	adds	r3, #1
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d04e      	beq.n	80157cc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	b29b      	uxth	r3, r3
 8015734:	887a      	ldrh	r2, [r7, #2]
 8015736:	429a      	cmp	r2, r3
 8015738:	d102      	bne.n	8015740 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	3302      	adds	r3, #2
 801573e:	e049      	b.n	80157d4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	3301      	adds	r3, #1
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	461a      	mov	r2, r3
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	4413      	add	r3, r2
 801574c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801574e:	e7e9      	b.n	8015724 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8015756:	461a      	mov	r2, r3
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	4413      	add	r3, r2
 801575c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 801575e:	697b      	ldr	r3, [r7, #20]
 8015760:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8015762:	2100      	movs	r1, #0
 8015764:	6938      	ldr	r0, [r7, #16]
 8015766:	f7ff fc3f 	bl	8014fe8 <u8g2_font_get_word>
 801576a:	4603      	mov	r3, r0
 801576c:	461a      	mov	r2, r3
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	4413      	add	r3, r2
 8015772:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8015774:	2102      	movs	r1, #2
 8015776:	6938      	ldr	r0, [r7, #16]
 8015778:	f7ff fc36 	bl	8014fe8 <u8g2_font_get_word>
 801577c:	4603      	mov	r3, r0
 801577e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	3304      	adds	r3, #4
 8015784:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8015786:	89fa      	ldrh	r2, [r7, #14]
 8015788:	887b      	ldrh	r3, [r7, #2]
 801578a:	429a      	cmp	r2, r3
 801578c:	d3e9      	bcc.n	8015762 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8015794:	89fb      	ldrh	r3, [r7, #14]
 8015796:	021b      	lsls	r3, r3, #8
 8015798:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	3301      	adds	r3, #1
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	b29a      	uxth	r2, r3
 80157a2:	89fb      	ldrh	r3, [r7, #14]
 80157a4:	4313      	orrs	r3, r2
 80157a6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80157a8:	89fb      	ldrh	r3, [r7, #14]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d010      	beq.n	80157d0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80157ae:	89fa      	ldrh	r2, [r7, #14]
 80157b0:	887b      	ldrh	r3, [r7, #2]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d102      	bne.n	80157bc <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	3303      	adds	r3, #3
 80157ba:	e00b      	b.n	80157d4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	3302      	adds	r3, #2
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	461a      	mov	r2, r3
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	4413      	add	r3, r2
 80157c8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80157ca:	e7e0      	b.n	801578e <u8g2_font_get_glyph_data+0xb2>
	break;
 80157cc:	bf00      	nop
 80157ce:	e000      	b.n	80157d2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80157d0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80157d2:	2300      	movs	r3, #0
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3718      	adds	r7, #24
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}

080157dc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b086      	sub	sp, #24
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	4608      	mov	r0, r1
 80157e6:	4611      	mov	r1, r2
 80157e8:	461a      	mov	r2, r3
 80157ea:	4603      	mov	r3, r0
 80157ec:	817b      	strh	r3, [r7, #10]
 80157ee:	460b      	mov	r3, r1
 80157f0:	813b      	strh	r3, [r7, #8]
 80157f2:	4613      	mov	r3, r2
 80157f4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80157f6:	2300      	movs	r3, #0
 80157f8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	897a      	ldrh	r2, [r7, #10]
 80157fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	893a      	ldrh	r2, [r7, #8]
 8015806:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 801580a:	88fb      	ldrh	r3, [r7, #6]
 801580c:	4619      	mov	r1, r3
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f7ff ff64 	bl	80156dc <u8g2_font_get_glyph_data>
 8015814:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d005      	beq.n	8015828 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 801581c:	6939      	ldr	r1, [r7, #16]
 801581e:	68f8      	ldr	r0, [r7, #12]
 8015820:	f7ff fe4e 	bl	80154c0 <u8g2_font_decode_glyph>
 8015824:	4603      	mov	r3, r0
 8015826:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8015828:	8afb      	ldrh	r3, [r7, #22]
}
 801582a:	4618      	mov	r0, r3
 801582c:	3718      	adds	r7, #24
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
	...

08015834 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b084      	sub	sp, #16
 8015838:	af00      	add	r7, sp, #0
 801583a:	60f8      	str	r0, [r7, #12]
 801583c:	4608      	mov	r0, r1
 801583e:	4611      	mov	r1, r2
 8015840:	461a      	mov	r2, r3
 8015842:	4603      	mov	r3, r0
 8015844:	817b      	strh	r3, [r7, #10]
 8015846:	460b      	mov	r3, r1
 8015848:	813b      	strh	r3, [r7, #8]
 801584a:	4613      	mov	r3, r2
 801584c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015854:	2b03      	cmp	r3, #3
 8015856:	d833      	bhi.n	80158c0 <u8g2_DrawGlyph+0x8c>
 8015858:	a201      	add	r2, pc, #4	; (adr r2, 8015860 <u8g2_DrawGlyph+0x2c>)
 801585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801585e:	bf00      	nop
 8015860:	08015871 	.word	0x08015871
 8015864:	08015885 	.word	0x08015885
 8015868:	08015899 	.word	0x08015899
 801586c:	080158ad 	.word	0x080158ad
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	4798      	blx	r3
 8015878:	4603      	mov	r3, r0
 801587a:	461a      	mov	r2, r3
 801587c:	893b      	ldrh	r3, [r7, #8]
 801587e:	4413      	add	r3, r2
 8015880:	813b      	strh	r3, [r7, #8]
      break;
 8015882:	e01d      	b.n	80158c0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015888:	68f8      	ldr	r0, [r7, #12]
 801588a:	4798      	blx	r3
 801588c:	4603      	mov	r3, r0
 801588e:	461a      	mov	r2, r3
 8015890:	897b      	ldrh	r3, [r7, #10]
 8015892:	1a9b      	subs	r3, r3, r2
 8015894:	817b      	strh	r3, [r7, #10]
      break;
 8015896:	e013      	b.n	80158c0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	4798      	blx	r3
 80158a0:	4603      	mov	r3, r0
 80158a2:	461a      	mov	r2, r3
 80158a4:	893b      	ldrh	r3, [r7, #8]
 80158a6:	1a9b      	subs	r3, r3, r2
 80158a8:	813b      	strh	r3, [r7, #8]
      break;
 80158aa:	e009      	b.n	80158c0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	4798      	blx	r3
 80158b4:	4603      	mov	r3, r0
 80158b6:	461a      	mov	r2, r3
 80158b8:	897b      	ldrh	r3, [r7, #10]
 80158ba:	4413      	add	r3, r2
 80158bc:	817b      	strh	r3, [r7, #10]
      break;
 80158be:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80158c0:	88fb      	ldrh	r3, [r7, #6]
 80158c2:	893a      	ldrh	r2, [r7, #8]
 80158c4:	8979      	ldrh	r1, [r7, #10]
 80158c6:	68f8      	ldr	r0, [r7, #12]
 80158c8:	f7ff ff88 	bl	80157dc <u8g2_font_draw_glyph>
 80158cc:	4603      	mov	r3, r0
}
 80158ce:	4618      	mov	r0, r3
 80158d0:	3710      	adds	r7, #16
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop

080158d8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b086      	sub	sp, #24
 80158dc:	af00      	add	r7, sp, #0
 80158de:	60f8      	str	r0, [r7, #12]
 80158e0:	607b      	str	r3, [r7, #4]
 80158e2:	460b      	mov	r3, r1
 80158e4:	817b      	strh	r3, [r7, #10]
 80158e6:	4613      	mov	r3, r2
 80158e8:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80158ea:	68f8      	ldr	r0, [r7, #12]
 80158ec:	f000 fc99 	bl	8016222 <u8x8_utf8_init>
  sum = 0;
 80158f0:	2300      	movs	r3, #0
 80158f2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	685b      	ldr	r3, [r3, #4]
 80158f8:	687a      	ldr	r2, [r7, #4]
 80158fa:	7812      	ldrb	r2, [r2, #0]
 80158fc:	4611      	mov	r1, r2
 80158fe:	68f8      	ldr	r0, [r7, #12]
 8015900:	4798      	blx	r3
 8015902:	4603      	mov	r3, r0
 8015904:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8015906:	8abb      	ldrh	r3, [r7, #20]
 8015908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801590c:	4293      	cmp	r3, r2
 801590e:	d038      	beq.n	8015982 <u8g2_draw_string+0xaa>
      break;
    str++;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	3301      	adds	r3, #1
 8015914:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8015916:	8abb      	ldrh	r3, [r7, #20]
 8015918:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801591c:	4293      	cmp	r3, r2
 801591e:	d0e9      	beq.n	80158f4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8015920:	8abb      	ldrh	r3, [r7, #20]
 8015922:	893a      	ldrh	r2, [r7, #8]
 8015924:	8979      	ldrh	r1, [r7, #10]
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f7ff ff84 	bl	8015834 <u8g2_DrawGlyph>
 801592c:	4603      	mov	r3, r0
 801592e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015936:	2b03      	cmp	r3, #3
 8015938:	d81e      	bhi.n	8015978 <u8g2_draw_string+0xa0>
 801593a:	a201      	add	r2, pc, #4	; (adr r2, 8015940 <u8g2_draw_string+0x68>)
 801593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015940:	08015951 	.word	0x08015951
 8015944:	0801595b 	.word	0x0801595b
 8015948:	08015965 	.word	0x08015965
 801594c:	0801596f 	.word	0x0801596f
      {
	case 0:
	  x += delta;
 8015950:	897a      	ldrh	r2, [r7, #10]
 8015952:	8a7b      	ldrh	r3, [r7, #18]
 8015954:	4413      	add	r3, r2
 8015956:	817b      	strh	r3, [r7, #10]
	  break;
 8015958:	e00e      	b.n	8015978 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 801595a:	893a      	ldrh	r2, [r7, #8]
 801595c:	8a7b      	ldrh	r3, [r7, #18]
 801595e:	4413      	add	r3, r2
 8015960:	813b      	strh	r3, [r7, #8]
	  break;
 8015962:	e009      	b.n	8015978 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8015964:	897a      	ldrh	r2, [r7, #10]
 8015966:	8a7b      	ldrh	r3, [r7, #18]
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	817b      	strh	r3, [r7, #10]
	  break;
 801596c:	e004      	b.n	8015978 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 801596e:	893a      	ldrh	r2, [r7, #8]
 8015970:	8a7b      	ldrh	r3, [r7, #18]
 8015972:	1ad3      	subs	r3, r2, r3
 8015974:	813b      	strh	r3, [r7, #8]
	  break;
 8015976:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8015978:	8afa      	ldrh	r2, [r7, #22]
 801597a:	8a7b      	ldrh	r3, [r7, #18]
 801597c:	4413      	add	r3, r2
 801597e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8015980:	e7b8      	b.n	80158f4 <u8g2_draw_string+0x1c>
      break;
 8015982:	bf00      	nop
    }
  }
  return sum;
 8015984:	8afb      	ldrh	r3, [r7, #22]
}
 8015986:	4618      	mov	r0, r3
 8015988:	3718      	adds	r7, #24
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop

08015990 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	60f8      	str	r0, [r7, #12]
 8015998:	607b      	str	r3, [r7, #4]
 801599a:	460b      	mov	r3, r1
 801599c:	817b      	strh	r3, [r7, #10]
 801599e:	4613      	mov	r3, r2
 80159a0:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	4a06      	ldr	r2, [pc, #24]	; (80159c0 <u8g2_DrawUTF8+0x30>)
 80159a6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80159a8:	893a      	ldrh	r2, [r7, #8]
 80159aa:	8979      	ldrh	r1, [r7, #10]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	68f8      	ldr	r0, [r7, #12]
 80159b0:	f7ff ff92 	bl	80158d8 <u8g2_draw_string>
 80159b4:	4603      	mov	r3, r0
}
 80159b6:	4618      	mov	r0, r3
 80159b8:	3710      	adds	r7, #16
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bd80      	pop	{r7, pc}
 80159be:	bf00      	nop
 80159c0:	0801623f 	.word	0x0801623f

080159c4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80159c4:	b480      	push	{r7}
 80159c6:	b083      	sub	sp, #12
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d05d      	beq.n	8015a90 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d04d      	beq.n	8015a92 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80159fc:	2b01      	cmp	r3, #1
 80159fe:	d11c      	bne.n	8015a3a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	da05      	bge.n	8015a1c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	dd32      	ble.n	8015a92 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015a38:	e02b      	b.n	8015a92 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8015a40:	461a      	mov	r2, r3
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015a48:	4619      	mov	r1, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a50:	440b      	add	r3, r1
 8015a52:	429a      	cmp	r2, r3
 8015a54:	da0d      	bge.n	8015a72 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015a5c:	b2da      	uxtb	r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a64:	b2db      	uxtb	r3, r3
 8015a66:	4413      	add	r3, r2
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	b25a      	sxtb	r2, r3
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a7e:	429a      	cmp	r2, r3
 8015a80:	dd07      	ble.n	8015a92 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015a8e:	e000      	b.n	8015a92 <u8g2_UpdateRefHeight+0xce>
    return;
 8015a90:	bf00      	nop
  }  
}
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr

08015a9c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  return 0;
 8015aa4:	2300      	movs	r3, #0
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	370c      	adds	r7, #12
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab0:	4770      	bx	lr
	...

08015ab4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8015ab4:	b480      	push	{r7}
 8015ab6:	b083      	sub	sp, #12
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	4a04      	ldr	r2, [pc, #16]	; (8015ad0 <u8g2_SetFontPosBaseline+0x1c>)
 8015ac0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8015ac2:	bf00      	nop
 8015ac4:	370c      	adds	r7, #12
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015acc:	4770      	bx	lr
 8015ace:	bf00      	nop
 8015ad0:	08015a9d 	.word	0x08015a9d

08015ad4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b082      	sub	sp, #8
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d00b      	beq.n	8015b00 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	683a      	ldr	r2, [r7, #0]
 8015aec:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	3374      	adds	r3, #116	; 0x74
 8015af2:	6839      	ldr	r1, [r7, #0]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7ff fa97 	bl	8015028 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7ff ff62 	bl	80159c4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8015b08:	b480      	push	{r7}
 8015b0a:	b087      	sub	sp, #28
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	60f8      	str	r0, [r7, #12]
 8015b10:	60b9      	str	r1, [r7, #8]
 8015b12:	4611      	mov	r1, r2
 8015b14:	461a      	mov	r2, r3
 8015b16:	460b      	mov	r3, r1
 8015b18:	80fb      	strh	r3, [r7, #6]
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	881b      	ldrh	r3, [r3, #0]
 8015b22:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8015b24:	8afb      	ldrh	r3, [r7, #22]
 8015b26:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	881a      	ldrh	r2, [r3, #0]
 8015b2c:	8abb      	ldrh	r3, [r7, #20]
 8015b2e:	4413      	add	r3, r2
 8015b30:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8015b32:	8afa      	ldrh	r2, [r7, #22]
 8015b34:	8abb      	ldrh	r3, [r7, #20]
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d90b      	bls.n	8015b52 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8015b3a:	8afa      	ldrh	r2, [r7, #22]
 8015b3c:	88bb      	ldrh	r3, [r7, #4]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d205      	bcs.n	8015b4e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8015b42:	88bb      	ldrh	r3, [r7, #4]
 8015b44:	82bb      	strh	r3, [r7, #20]
      b--;
 8015b46:	8abb      	ldrh	r3, [r7, #20]
 8015b48:	3b01      	subs	r3, #1
 8015b4a:	82bb      	strh	r3, [r7, #20]
 8015b4c:	e001      	b.n	8015b52 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8015b4e:	88fb      	ldrh	r3, [r7, #6]
 8015b50:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8015b52:	8afa      	ldrh	r2, [r7, #22]
 8015b54:	88bb      	ldrh	r3, [r7, #4]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d301      	bcc.n	8015b5e <u8g2_clip_intersection2+0x56>
    return 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e01c      	b.n	8015b98 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8015b5e:	8aba      	ldrh	r2, [r7, #20]
 8015b60:	88fb      	ldrh	r3, [r7, #6]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d801      	bhi.n	8015b6a <u8g2_clip_intersection2+0x62>
    return 0;
 8015b66:	2300      	movs	r3, #0
 8015b68:	e016      	b.n	8015b98 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8015b6a:	8afa      	ldrh	r2, [r7, #22]
 8015b6c:	88fb      	ldrh	r3, [r7, #6]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d201      	bcs.n	8015b76 <u8g2_clip_intersection2+0x6e>
    a = c;
 8015b72:	88fb      	ldrh	r3, [r7, #6]
 8015b74:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8015b76:	8aba      	ldrh	r2, [r7, #20]
 8015b78:	88bb      	ldrh	r3, [r7, #4]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d901      	bls.n	8015b82 <u8g2_clip_intersection2+0x7a>
    b = d;
 8015b7e:	88bb      	ldrh	r3, [r7, #4]
 8015b80:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	8afa      	ldrh	r2, [r7, #22]
 8015b86:	801a      	strh	r2, [r3, #0]
  b -= a;
 8015b88:	8aba      	ldrh	r2, [r7, #20]
 8015b8a:	8afb      	ldrh	r3, [r7, #22]
 8015b8c:	1ad3      	subs	r3, r2, r3
 8015b8e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8015b90:	68bb      	ldr	r3, [r7, #8]
 8015b92:	8aba      	ldrh	r2, [r7, #20]
 8015b94:	801a      	strh	r2, [r3, #0]
  return 1;
 8015b96:	2301      	movs	r3, #1
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	371c      	adds	r7, #28
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba2:	4770      	bx	lr

08015ba4 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015ba4:	b590      	push	{r4, r7, lr}
 8015ba6:	b087      	sub	sp, #28
 8015ba8:	af02      	add	r7, sp, #8
 8015baa:	60f8      	str	r0, [r7, #12]
 8015bac:	4608      	mov	r0, r1
 8015bae:	4611      	mov	r1, r2
 8015bb0:	461a      	mov	r2, r3
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	817b      	strh	r3, [r7, #10]
 8015bb6:	460b      	mov	r3, r1
 8015bb8:	813b      	strh	r3, [r7, #8]
 8015bba:	4613      	mov	r3, r2
 8015bbc:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015bc2:	893a      	ldrh	r2, [r7, #8]
 8015bc4:	1ad3      	subs	r3, r2, r3
 8015bc6:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015bcc:	88f8      	ldrh	r0, [r7, #6]
 8015bce:	893a      	ldrh	r2, [r7, #8]
 8015bd0:	8979      	ldrh	r1, [r7, #10]
 8015bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	4603      	mov	r3, r0
 8015bda:	68f8      	ldr	r0, [r7, #12]
 8015bdc:	47a0      	blx	r4
}
 8015bde:	bf00      	nop
 8015be0:	3714      	adds	r7, #20
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd90      	pop	{r4, r7, pc}

08015be6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015be6:	b590      	push	{r4, r7, lr}
 8015be8:	b087      	sub	sp, #28
 8015bea:	af02      	add	r7, sp, #8
 8015bec:	60f8      	str	r0, [r7, #12]
 8015bee:	4608      	mov	r0, r1
 8015bf0:	4611      	mov	r1, r2
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	817b      	strh	r3, [r7, #10]
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	813b      	strh	r3, [r7, #8]
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d075      	beq.n	8015cf6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8015c0a:	88fb      	ldrh	r3, [r7, #6]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d072      	beq.n	8015cf6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8015c10:	88fb      	ldrh	r3, [r7, #6]
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d91a      	bls.n	8015c4c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8015c16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c1a:	2b02      	cmp	r3, #2
 8015c1c:	d109      	bne.n	8015c32 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8015c1e:	897a      	ldrh	r2, [r7, #10]
 8015c20:	88fb      	ldrh	r3, [r7, #6]
 8015c22:	1ad3      	subs	r3, r2, r3
 8015c24:	b29b      	uxth	r3, r3
 8015c26:	817b      	strh	r3, [r7, #10]
	  x++;
 8015c28:	897b      	ldrh	r3, [r7, #10]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	817b      	strh	r3, [r7, #10]
 8015c30:	e00c      	b.n	8015c4c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8015c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c36:	2b03      	cmp	r3, #3
 8015c38:	d108      	bne.n	8015c4c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8015c3a:	893a      	ldrh	r2, [r7, #8]
 8015c3c:	88fb      	ldrh	r3, [r7, #6]
 8015c3e:	1ad3      	subs	r3, r2, r3
 8015c40:	b29b      	uxth	r3, r3
 8015c42:	813b      	strh	r3, [r7, #8]
	  y++;
 8015c44:	893b      	ldrh	r3, [r7, #8]
 8015c46:	3301      	adds	r3, #1
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8015c4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c50:	f003 0301 	and.w	r3, r3, #1
 8015c54:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8015c58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d11a      	bne.n	8015c96 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015c66:	893b      	ldrh	r3, [r7, #8]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d83b      	bhi.n	8015ce4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8015c72:	893b      	ldrh	r3, [r7, #8]
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d937      	bls.n	8015ce8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c84:	1db9      	adds	r1, r7, #6
 8015c86:	f107 000a 	add.w	r0, r7, #10
 8015c8a:	f7ff ff3d 	bl	8015b08 <u8g2_clip_intersection2>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d11a      	bne.n	8015cca <u8g2_DrawHVLine+0xe4>
	  return;
 8015c94:	e02f      	b.n	8015cf6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c9c:	897b      	ldrh	r3, [r7, #10]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	d824      	bhi.n	8015cec <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015ca8:	897b      	ldrh	r3, [r7, #10]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d920      	bls.n	8015cf0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015cba:	1db9      	adds	r1, r7, #6
 8015cbc:	f107 0008 	add.w	r0, r7, #8
 8015cc0:	f7ff ff22 	bl	8015b08 <u8g2_clip_intersection2>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d014      	beq.n	8015cf4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cce:	689c      	ldr	r4, [r3, #8]
 8015cd0:	8979      	ldrh	r1, [r7, #10]
 8015cd2:	893a      	ldrh	r2, [r7, #8]
 8015cd4:	88f8      	ldrh	r0, [r7, #6]
 8015cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015cda:	9300      	str	r3, [sp, #0]
 8015cdc:	4603      	mov	r3, r0
 8015cde:	68f8      	ldr	r0, [r7, #12]
 8015ce0:	47a0      	blx	r4
 8015ce2:	e008      	b.n	8015cf6 <u8g2_DrawHVLine+0x110>
	  return;
 8015ce4:	bf00      	nop
 8015ce6:	e006      	b.n	8015cf6 <u8g2_DrawHVLine+0x110>
	  return;
 8015ce8:	bf00      	nop
 8015cea:	e004      	b.n	8015cf6 <u8g2_DrawHVLine+0x110>
	  return;
 8015cec:	bf00      	nop
 8015cee:	e002      	b.n	8015cf6 <u8g2_DrawHVLine+0x110>
	  return;
 8015cf0:	bf00      	nop
 8015cf2:	e000      	b.n	8015cf6 <u8g2_DrawHVLine+0x110>
	  return;
 8015cf4:	bf00      	nop
    }
}
 8015cf6:	3714      	adds	r7, #20
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd90      	pop	{r4, r7, pc}

08015cfc <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af02      	add	r7, sp, #8
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	460b      	mov	r3, r1
 8015d06:	807b      	strh	r3, [r7, #2]
 8015d08:	4613      	mov	r3, r2
 8015d0a:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015d12:	883a      	ldrh	r2, [r7, #0]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d31a      	bcc.n	8015d4e <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015d1e:	883a      	ldrh	r2, [r7, #0]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d216      	bcs.n	8015d52 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015d2a:	887a      	ldrh	r2, [r7, #2]
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d312      	bcc.n	8015d56 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015d36:	887a      	ldrh	r2, [r7, #2]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d20e      	bcs.n	8015d5a <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8015d3c:	883a      	ldrh	r2, [r7, #0]
 8015d3e:	8879      	ldrh	r1, [r7, #2]
 8015d40:	2300      	movs	r3, #0
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	2301      	movs	r3, #1
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f7ff ff4d 	bl	8015be6 <u8g2_DrawHVLine>
 8015d4c:	e006      	b.n	8015d5c <u8g2_DrawPixel+0x60>
    return;
 8015d4e:	bf00      	nop
 8015d50:	e004      	b.n	8015d5c <u8g2_DrawPixel+0x60>
    return;
 8015d52:	bf00      	nop
 8015d54:	e002      	b.n	8015d5c <u8g2_DrawPixel+0x60>
    return;
 8015d56:	bf00      	nop
 8015d58:	e000      	b.n	8015d5c <u8g2_DrawPixel+0x60>
    return;
 8015d5a:	bf00      	nop
}
 8015d5c:	3708      	adds	r7, #8
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}

08015d62 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8015d62:	b490      	push	{r4, r7}
 8015d64:	b082      	sub	sp, #8
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	4604      	mov	r4, r0
 8015d6a:	4608      	mov	r0, r1
 8015d6c:	4611      	mov	r1, r2
 8015d6e:	461a      	mov	r2, r3
 8015d70:	4623      	mov	r3, r4
 8015d72:	80fb      	strh	r3, [r7, #6]
 8015d74:	4603      	mov	r3, r0
 8015d76:	80bb      	strh	r3, [r7, #4]
 8015d78:	460b      	mov	r3, r1
 8015d7a:	807b      	strh	r3, [r7, #2]
 8015d7c:	4613      	mov	r3, r2
 8015d7e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8015d80:	887a      	ldrh	r2, [r7, #2]
 8015d82:	88bb      	ldrh	r3, [r7, #4]
 8015d84:	429a      	cmp	r2, r3
 8015d86:	d20d      	bcs.n	8015da4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d88:	883a      	ldrh	r2, [r7, #0]
 8015d8a:	88fb      	ldrh	r3, [r7, #6]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d901      	bls.n	8015d94 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8015d90:	2301      	movs	r3, #1
 8015d92:	e014      	b.n	8015dbe <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015d94:	887a      	ldrh	r2, [r7, #2]
 8015d96:	883b      	ldrh	r3, [r7, #0]
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	d901      	bls.n	8015da0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	e00e      	b.n	8015dbe <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015da0:	2300      	movs	r3, #0
 8015da2:	e00c      	b.n	8015dbe <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015da4:	883a      	ldrh	r2, [r7, #0]
 8015da6:	88fb      	ldrh	r3, [r7, #6]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d907      	bls.n	8015dbc <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8015dac:	887a      	ldrh	r2, [r7, #2]
 8015dae:	883b      	ldrh	r3, [r7, #0]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d901      	bls.n	8015db8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015db4:	2301      	movs	r3, #1
 8015db6:	e002      	b.n	8015dbe <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015db8:	2300      	movs	r3, #0
 8015dba:	e000      	b.n	8015dbe <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8015dbc:	2300      	movs	r3, #0
    }
  }
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3708      	adds	r7, #8
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bc90      	pop	{r4, r7}
 8015dc6:	4770      	bx	lr

08015dc8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	4608      	mov	r0, r1
 8015dd2:	4611      	mov	r1, r2
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	817b      	strh	r3, [r7, #10]
 8015dda:	460b      	mov	r3, r1
 8015ddc:	813b      	strh	r3, [r7, #8]
 8015dde:	4613      	mov	r3, r2
 8015de0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8015dee:	8b3b      	ldrh	r3, [r7, #24]
 8015df0:	893a      	ldrh	r2, [r7, #8]
 8015df2:	f7ff ffb6 	bl	8015d62 <u8g2_is_intersection_decision_tree>
 8015df6:	4603      	mov	r3, r0
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d101      	bne.n	8015e00 <u8g2_IsIntersection+0x38>
    return 0; 
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	e00a      	b.n	8015e16 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8015e0c:	88fb      	ldrh	r3, [r7, #6]
 8015e0e:	897a      	ldrh	r2, [r7, #10]
 8015e10:	f7ff ffa7 	bl	8015d62 <u8g2_is_intersection_decision_tree>
 8015e14:	4603      	mov	r3, r0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3710      	adds	r7, #16
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}

08015e1e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015e1e:	b480      	push	{r7}
 8015e20:	b089      	sub	sp, #36	; 0x24
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	60f8      	str	r0, [r7, #12]
 8015e26:	4608      	mov	r0, r1
 8015e28:	4611      	mov	r1, r2
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	817b      	strh	r3, [r7, #10]
 8015e30:	460b      	mov	r3, r1
 8015e32:	813b      	strh	r3, [r7, #8]
 8015e34:	4613      	mov	r3, r2
 8015e36:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8015e38:	893b      	ldrh	r3, [r7, #8]
 8015e3a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8015e3c:	7efb      	ldrb	r3, [r7, #27]
 8015e3e:	f003 0307 	and.w	r3, r3, #7
 8015e42:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8015e44:	2301      	movs	r3, #1
 8015e46:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8015e48:	7e3a      	ldrb	r2, [r7, #24]
 8015e4a:	7efb      	ldrb	r3, [r7, #27]
 8015e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8015e50:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8015e52:	2300      	movs	r3, #0
 8015e54:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8015e56:	2300      	movs	r3, #0
 8015e58:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e60:	2b01      	cmp	r3, #1
 8015e62:	d801      	bhi.n	8015e68 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8015e64:	7e3b      	ldrb	r3, [r7, #24]
 8015e66:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e6e:	2b01      	cmp	r3, #1
 8015e70:	d001      	beq.n	8015e76 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015e72:	7e3b      	ldrb	r3, [r7, #24]
 8015e74:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015e76:	893b      	ldrh	r3, [r7, #8]
 8015e78:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8015e7a:	8afb      	ldrh	r3, [r7, #22]
 8015e7c:	f023 0307 	bic.w	r3, r3, #7
 8015e80:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	7c1b      	ldrb	r3, [r3, #16]
 8015e88:	b29b      	uxth	r3, r3
 8015e8a:	8afa      	ldrh	r2, [r7, #22]
 8015e8c:	fb12 f303 	smulbb	r3, r2, r3
 8015e90:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e96:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8015e98:	8afb      	ldrh	r3, [r7, #22]
 8015e9a:	69fa      	ldr	r2, [r7, #28]
 8015e9c:	4413      	add	r3, r2
 8015e9e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8015ea0:	897b      	ldrh	r3, [r7, #10]
 8015ea2:	69fa      	ldr	r2, [r7, #28]
 8015ea4:	4413      	add	r3, r2
 8015ea6:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8015ea8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d117      	bne.n	8015ee0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	781a      	ldrb	r2, [r3, #0]
 8015eb4:	7ebb      	ldrb	r3, [r7, #26]
 8015eb6:	4313      	orrs	r3, r2
 8015eb8:	b2da      	uxtb	r2, r3
 8015eba:	69fb      	ldr	r3, [r7, #28]
 8015ebc:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8015ebe:	69fb      	ldr	r3, [r7, #28]
 8015ec0:	781a      	ldrb	r2, [r3, #0]
 8015ec2:	7e7b      	ldrb	r3, [r7, #25]
 8015ec4:	4053      	eors	r3, r2
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	69fb      	ldr	r3, [r7, #28]
 8015eca:	701a      	strb	r2, [r3, #0]
	ptr++;
 8015ecc:	69fb      	ldr	r3, [r7, #28]
 8015ece:	3301      	adds	r3, #1
 8015ed0:	61fb      	str	r3, [r7, #28]
	len--;
 8015ed2:	88fb      	ldrh	r3, [r7, #6]
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8015ed8:	88fb      	ldrh	r3, [r7, #6]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1e8      	bne.n	8015eb0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8015ede:	e038      	b.n	8015f52 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8015ee0:	69fb      	ldr	r3, [r7, #28]
 8015ee2:	781a      	ldrb	r2, [r3, #0]
 8015ee4:	7ebb      	ldrb	r3, [r7, #26]
 8015ee6:	4313      	orrs	r3, r2
 8015ee8:	b2da      	uxtb	r2, r3
 8015eea:	69fb      	ldr	r3, [r7, #28]
 8015eec:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	781a      	ldrb	r2, [r3, #0]
 8015ef2:	7e7b      	ldrb	r3, [r7, #25]
 8015ef4:	4053      	eors	r3, r2
 8015ef6:	b2da      	uxtb	r2, r3
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8015efc:	7efb      	ldrb	r3, [r7, #27]
 8015efe:	3301      	adds	r3, #1
 8015f00:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8015f02:	7efb      	ldrb	r3, [r7, #27]
 8015f04:	f003 0307 	and.w	r3, r3, #7
 8015f08:	76fb      	strb	r3, [r7, #27]
      len--;
 8015f0a:	88fb      	ldrh	r3, [r7, #6]
 8015f0c:	3b01      	subs	r3, #1
 8015f0e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8015f10:	7efb      	ldrb	r3, [r7, #27]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d114      	bne.n	8015f40 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	4413      	add	r3, r2
 8015f20:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d801      	bhi.n	8015f30 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8015f2c:	2301      	movs	r3, #1
 8015f2e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015f36:	2b01      	cmp	r3, #1
 8015f38:	d008      	beq.n	8015f4c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	767b      	strb	r3, [r7, #25]
 8015f3e:	e005      	b.n	8015f4c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8015f40:	7ebb      	ldrb	r3, [r7, #26]
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8015f46:	7e7b      	ldrb	r3, [r7, #25]
 8015f48:	005b      	lsls	r3, r3, #1
 8015f4a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8015f4c:	88fb      	ldrh	r3, [r7, #6]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d1c6      	bne.n	8015ee0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8015f52:	bf00      	nop
 8015f54:	3724      	adds	r7, #36	; 0x24
 8015f56:	46bd      	mov	sp, r7
 8015f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5c:	4770      	bx	lr

08015f5e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015f5e:	b580      	push	{r7, lr}
 8015f60:	b082      	sub	sp, #8
 8015f62:	af00      	add	r7, sp, #0
 8015f64:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	2200      	movs	r2, #0
 8015f72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f8e:	685b      	ldr	r3, [r3, #4]
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	4798      	blx	r3
}
 8015f94:	bf00      	nop
 8015f96:	3708      	adds	r7, #8
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b084      	sub	sp, #16
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	60f8      	str	r0, [r7, #12]
 8015fa4:	60b9      	str	r1, [r7, #8]
 8015fa6:	603b      	str	r3, [r7, #0]
 8015fa8:	4613      	mov	r3, r2
 8015faa:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	2200      	movs	r2, #0
 8015fb0:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	683a      	ldr	r2, [r7, #0]
 8015fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	79fa      	ldrb	r2, [r7, #7]
 8015fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2201      	movs	r2, #1
 8015fe2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	69ba      	ldr	r2, [r7, #24]
 8015ff2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	68f8      	ldr	r0, [r7, #12]
 8015ffc:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015ffe:	68f8      	ldr	r0, [r7, #12]
 8016000:	f7ff ffad 	bl	8015f5e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8016004:	68f8      	ldr	r0, [r7, #12]
 8016006:	f7ff fd55 	bl	8015ab4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2200      	movs	r2, #0
 801600e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8016012:	bf00      	nop
 8016014:	3710      	adds	r7, #16
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 801601a:	b480      	push	{r7}
 801601c:	b085      	sub	sp, #20
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801602e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8016030:	89fb      	ldrh	r3, [r7, #14]
 8016032:	00db      	lsls	r3, r3, #3
 8016034:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	89fa      	ldrh	r2, [r7, #14]
 801603a:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	7c1b      	ldrb	r3, [r3, #16]
 8016040:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8016042:	89fb      	ldrh	r3, [r7, #14]
 8016044:	00db      	lsls	r3, r3, #3
 8016046:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	89fa      	ldrh	r2, [r7, #14]
 801604c:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016054:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8016056:	89fb      	ldrh	r3, [r7, #14]
 8016058:	00db      	lsls	r3, r3, #3
 801605a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	89fa      	ldrh	r2, [r7, #14]
 8016060:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016068:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 801606a:	89fb      	ldrh	r3, [r7, #14]
 801606c:	687a      	ldr	r2, [r7, #4]
 801606e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8016072:	4413      	add	r3, r2
 8016074:	68ba      	ldr	r2, [r7, #8]
 8016076:	7c52      	ldrb	r2, [r2, #17]
 8016078:	4293      	cmp	r3, r2
 801607a:	dd08      	ble.n	801608e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	7c5b      	ldrb	r3, [r3, #17]
 8016080:	b29a      	uxth	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016088:	b29b      	uxth	r3, r3
 801608a:	1ad3      	subs	r3, r2, r3
 801608c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 801608e:	89fb      	ldrh	r3, [r7, #14]
 8016090:	00db      	lsls	r3, r3, #3
 8016092:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80160b0:	89fb      	ldrh	r3, [r7, #14]
 80160b2:	4413      	add	r3, r2
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	8a9a      	ldrh	r2, [r3, #20]
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	8ada      	ldrh	r2, [r3, #22]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80160d0:	bf00      	nop
 80160d2:	3714      	adds	r7, #20
 80160d4:	46bd      	mov	sp, r7
 80160d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160da:	4770      	bx	lr

080160dc <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b084      	sub	sp, #16
 80160e0:	af02      	add	r7, sp, #8
 80160e2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	4603      	mov	r3, r0
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f7ff fe61 	bl	8015dc8 <u8g2_IsIntersection>
 8016106:	4603      	mov	r3, r0
 8016108:	2b00      	cmp	r3, #0
 801610a:	d104      	bne.n	8016116 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2200      	movs	r2, #0
 8016110:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8016114:	e03b      	b.n	801618e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2201      	movs	r2, #1
 801611a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801612a:	429a      	cmp	r2, r3
 801612c:	d205      	bcs.n	801613a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8016146:	429a      	cmp	r2, r3
 8016148:	d905      	bls.n	8016156 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016162:	429a      	cmp	r2, r3
 8016164:	d205      	bcs.n	8016172 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801617e:	429a      	cmp	r2, r3
 8016180:	d905      	bls.n	801618e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 801618e:	bf00      	nop
 8016190:	3708      	adds	r7, #8
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}

08016196 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8016196:	b580      	push	{r7, lr}
 8016198:	b082      	sub	sp, #8
 801619a:	af00      	add	r7, sp, #0
 801619c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f7ff ff3b 	bl	801601a <u8g2_update_dimension_common>
}
 80161a4:	bf00      	nop
 80161a6:	3708      	adds	r7, #8
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}

080161ac <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b082      	sub	sp, #8
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2200      	movs	r2, #0
 80161b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f7ff ff7b 	bl	80160dc <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80161e6:	bf00      	nop
 80161e8:	3708      	adds	r7, #8
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}

080161ee <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80161ee:	b580      	push	{r7, lr}
 80161f0:	b086      	sub	sp, #24
 80161f2:	af02      	add	r7, sp, #8
 80161f4:	60f8      	str	r0, [r7, #12]
 80161f6:	4608      	mov	r0, r1
 80161f8:	4611      	mov	r1, r2
 80161fa:	461a      	mov	r2, r3
 80161fc:	4603      	mov	r3, r0
 80161fe:	817b      	strh	r3, [r7, #10]
 8016200:	460b      	mov	r3, r1
 8016202:	813b      	strh	r3, [r7, #8]
 8016204:	4613      	mov	r3, r2
 8016206:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8016208:	88f8      	ldrh	r0, [r7, #6]
 801620a:	893a      	ldrh	r2, [r7, #8]
 801620c:	8979      	ldrh	r1, [r7, #10]
 801620e:	7e3b      	ldrb	r3, [r7, #24]
 8016210:	9300      	str	r3, [sp, #0]
 8016212:	4603      	mov	r3, r0
 8016214:	68f8      	ldr	r0, [r7, #12]
 8016216:	f7ff fcc5 	bl	8015ba4 <u8g2_draw_hv_line_2dir>
}
 801621a:	bf00      	nop
 801621c:	3710      	adds	r7, #16
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}

08016222 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8016222:	b480      	push	{r7}
 8016224:	b083      	sub	sp, #12
 8016226:	af00      	add	r7, sp, #0
 8016228:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2200      	movs	r2, #0
 801622e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8016232:	bf00      	nop
 8016234:	370c      	adds	r7, #12
 8016236:	46bd      	mov	sp, r7
 8016238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623c:	4770      	bx	lr

0801623e <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 801623e:	b480      	push	{r7}
 8016240:	b083      	sub	sp, #12
 8016242:	af00      	add	r7, sp, #0
 8016244:	6078      	str	r0, [r7, #4]
 8016246:	460b      	mov	r3, r1
 8016248:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 801624a:	78fb      	ldrb	r3, [r7, #3]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d002      	beq.n	8016256 <u8x8_utf8_next+0x18>
 8016250:	78fb      	ldrb	r3, [r7, #3]
 8016252:	2b0a      	cmp	r3, #10
 8016254:	d102      	bne.n	801625c <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8016256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801625a:	e06e      	b.n	801633a <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016262:	2b00      	cmp	r3, #0
 8016264:	d145      	bne.n	80162f2 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8016266:	78fb      	ldrb	r3, [r7, #3]
 8016268:	2bfb      	cmp	r3, #251	; 0xfb
 801626a:	d908      	bls.n	801627e <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	2205      	movs	r2, #5
 8016270:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8016274:	78fb      	ldrb	r3, [r7, #3]
 8016276:	f003 0301 	and.w	r3, r3, #1
 801627a:	70fb      	strb	r3, [r7, #3]
 801627c:	e032      	b.n	80162e4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 801627e:	78fb      	ldrb	r3, [r7, #3]
 8016280:	2bf7      	cmp	r3, #247	; 0xf7
 8016282:	d908      	bls.n	8016296 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2204      	movs	r2, #4
 8016288:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 801628c:	78fb      	ldrb	r3, [r7, #3]
 801628e:	f003 0303 	and.w	r3, r3, #3
 8016292:	70fb      	strb	r3, [r7, #3]
 8016294:	e026      	b.n	80162e4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8016296:	78fb      	ldrb	r3, [r7, #3]
 8016298:	2bef      	cmp	r3, #239	; 0xef
 801629a:	d908      	bls.n	80162ae <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2203      	movs	r2, #3
 80162a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 80162a4:	78fb      	ldrb	r3, [r7, #3]
 80162a6:	f003 0307 	and.w	r3, r3, #7
 80162aa:	70fb      	strb	r3, [r7, #3]
 80162ac:	e01a      	b.n	80162e4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80162ae:	78fb      	ldrb	r3, [r7, #3]
 80162b0:	2bdf      	cmp	r3, #223	; 0xdf
 80162b2:	d908      	bls.n	80162c6 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2202      	movs	r2, #2
 80162b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80162bc:	78fb      	ldrb	r3, [r7, #3]
 80162be:	f003 030f 	and.w	r3, r3, #15
 80162c2:	70fb      	strb	r3, [r7, #3]
 80162c4:	e00e      	b.n	80162e4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80162c6:	78fb      	ldrb	r3, [r7, #3]
 80162c8:	2bbf      	cmp	r3, #191	; 0xbf
 80162ca:	d908      	bls.n	80162de <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	2201      	movs	r2, #1
 80162d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 80162d4:	78fb      	ldrb	r3, [r7, #3]
 80162d6:	f003 031f 	and.w	r3, r3, #31
 80162da:	70fb      	strb	r3, [r7, #3]
 80162dc:	e002      	b.n	80162e4 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80162de:	78fb      	ldrb	r3, [r7, #3]
 80162e0:	b29b      	uxth	r3, r3
 80162e2:	e02a      	b.n	801633a <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 80162e4:	78fb      	ldrb	r3, [r7, #3]
 80162e6:	b29a      	uxth	r2, r3
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 80162ec:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162f0:	e023      	b.n	801633a <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80162f8:	3b01      	subs	r3, #1
 80162fa:	b2da      	uxtb	r2, r3
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	8c1b      	ldrh	r3, [r3, #32]
 8016306:	019b      	lsls	r3, r3, #6
 8016308:	b29a      	uxth	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 801630e:	78fb      	ldrb	r3, [r7, #3]
 8016310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016314:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	8c1a      	ldrh	r2, [r3, #32]
 801631a:	78fb      	ldrb	r3, [r7, #3]
 801631c:	b29b      	uxth	r3, r3
 801631e:	4313      	orrs	r3, r2
 8016320:	b29a      	uxth	r2, r3
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801632c:	2b00      	cmp	r3, #0
 801632e:	d002      	beq.n	8016336 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8016330:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8016334:	e001      	b.n	801633a <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	8c1b      	ldrh	r3, [r3, #32]
}
 801633a:	4618      	mov	r0, r3
 801633c:	370c      	adds	r7, #12
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr

08016346 <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8016346:	b590      	push	{r4, r7, lr}
 8016348:	b083      	sub	sp, #12
 801634a:	af00      	add	r7, sp, #0
 801634c:	6078      	str	r0, [r7, #4]
 801634e:	460b      	mov	r3, r1
 8016350:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	691c      	ldr	r4, [r3, #16]
 8016356:	78fa      	ldrb	r2, [r7, #3]
 8016358:	2300      	movs	r3, #0
 801635a:	2120      	movs	r1, #32
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	47a0      	blx	r4
 8016360:	4603      	mov	r3, r0
}
 8016362:	4618      	mov	r0, r3
 8016364:	370c      	adds	r7, #12
 8016366:	46bd      	mov	sp, r7
 8016368:	bd90      	pop	{r4, r7, pc}

0801636a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 801636a:	b590      	push	{r4, r7, lr}
 801636c:	b085      	sub	sp, #20
 801636e:	af00      	add	r7, sp, #0
 8016370:	60f8      	str	r0, [r7, #12]
 8016372:	460b      	mov	r3, r1
 8016374:	607a      	str	r2, [r7, #4]
 8016376:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	691c      	ldr	r4, [r3, #16]
 801637c:	7afa      	ldrb	r2, [r7, #11]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2117      	movs	r1, #23
 8016382:	68f8      	ldr	r0, [r7, #12]
 8016384:	47a0      	blx	r4
 8016386:	4603      	mov	r3, r0
}
 8016388:	4618      	mov	r0, r3
 801638a:	3714      	adds	r7, #20
 801638c:	46bd      	mov	sp, r7
 801638e:	bd90      	pop	{r4, r7, pc}

08016390 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	460b      	mov	r3, r1
 801639a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 801639c:	1cfb      	adds	r3, r7, #3
 801639e:	461a      	mov	r2, r3
 80163a0:	2101      	movs	r1, #1
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f7ff ffe1 	bl	801636a <u8x8_byte_SendBytes>
 80163a8:	4603      	mov	r3, r0
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3708      	adds	r7, #8
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}

080163b2 <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80163b2:	b590      	push	{r4, r7, lr}
 80163b4:	b083      	sub	sp, #12
 80163b6:	af00      	add	r7, sp, #0
 80163b8:	6078      	str	r0, [r7, #4]
 80163ba:	460b      	mov	r3, r1
 80163bc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	68dc      	ldr	r4, [r3, #12]
 80163c2:	78fa      	ldrb	r2, [r7, #3]
 80163c4:	2300      	movs	r3, #0
 80163c6:	2115      	movs	r1, #21
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	47a0      	blx	r4
 80163cc:	4603      	mov	r3, r0
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	370c      	adds	r7, #12
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd90      	pop	{r4, r7, pc}

080163d6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80163d6:	b590      	push	{r4, r7, lr}
 80163d8:	b083      	sub	sp, #12
 80163da:	af00      	add	r7, sp, #0
 80163dc:	6078      	str	r0, [r7, #4]
 80163de:	460b      	mov	r3, r1
 80163e0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	68dc      	ldr	r4, [r3, #12]
 80163e6:	78fa      	ldrb	r2, [r7, #3]
 80163e8:	2300      	movs	r3, #0
 80163ea:	2116      	movs	r1, #22
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	47a0      	blx	r4
 80163f0:	4603      	mov	r3, r0
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	370c      	adds	r7, #12
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd90      	pop	{r4, r7, pc}

080163fa <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80163fa:	b590      	push	{r4, r7, lr}
 80163fc:	b085      	sub	sp, #20
 80163fe:	af00      	add	r7, sp, #0
 8016400:	60f8      	str	r0, [r7, #12]
 8016402:	460b      	mov	r3, r1
 8016404:	607a      	str	r2, [r7, #4]
 8016406:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	68dc      	ldr	r4, [r3, #12]
 801640c:	7afa      	ldrb	r2, [r7, #11]
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2117      	movs	r1, #23
 8016412:	68f8      	ldr	r0, [r7, #12]
 8016414:	47a0      	blx	r4
 8016416:	4603      	mov	r3, r0
}
 8016418:	4618      	mov	r0, r3
 801641a:	3714      	adds	r7, #20
 801641c:	46bd      	mov	sp, r7
 801641e:	bd90      	pop	{r4, r7, pc}

08016420 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8016420:	b590      	push	{r4, r7, lr}
 8016422:	b083      	sub	sp, #12
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	68dc      	ldr	r4, [r3, #12]
 801642c:	2300      	movs	r3, #0
 801642e:	2200      	movs	r2, #0
 8016430:	2118      	movs	r1, #24
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	47a0      	blx	r4
 8016436:	4603      	mov	r3, r0
}
 8016438:	4618      	mov	r0, r3
 801643a:	370c      	adds	r7, #12
 801643c:	46bd      	mov	sp, r7
 801643e:	bd90      	pop	{r4, r7, pc}

08016440 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8016440:	b590      	push	{r4, r7, lr}
 8016442:	b083      	sub	sp, #12
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	68dc      	ldr	r4, [r3, #12]
 801644c:	2300      	movs	r3, #0
 801644e:	2200      	movs	r2, #0
 8016450:	2119      	movs	r1, #25
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	47a0      	blx	r4
 8016456:	4603      	mov	r3, r0
}
 8016458:	4618      	mov	r0, r3
 801645a:	370c      	adds	r7, #12
 801645c:	46bd      	mov	sp, r7
 801645e:	bd90      	pop	{r4, r7, pc}

08016460 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8016460:	b590      	push	{r4, r7, lr}
 8016462:	b085      	sub	sp, #20
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	73fb      	strb	r3, [r7, #15]
    data++;
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	3301      	adds	r3, #1
 8016474:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8016476:	7bfb      	ldrb	r3, [r7, #15]
 8016478:	2bfe      	cmp	r3, #254	; 0xfe
 801647a:	d031      	beq.n	80164e0 <u8x8_cad_SendSequence+0x80>
 801647c:	2bfe      	cmp	r3, #254	; 0xfe
 801647e:	dc3d      	bgt.n	80164fc <u8x8_cad_SendSequence+0x9c>
 8016480:	2b19      	cmp	r3, #25
 8016482:	dc3b      	bgt.n	80164fc <u8x8_cad_SendSequence+0x9c>
 8016484:	2b18      	cmp	r3, #24
 8016486:	da23      	bge.n	80164d0 <u8x8_cad_SendSequence+0x70>
 8016488:	2b16      	cmp	r3, #22
 801648a:	dc02      	bgt.n	8016492 <u8x8_cad_SendSequence+0x32>
 801648c:	2b15      	cmp	r3, #21
 801648e:	da03      	bge.n	8016498 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8016490:	e034      	b.n	80164fc <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8016492:	2b17      	cmp	r3, #23
 8016494:	d00e      	beq.n	80164b4 <u8x8_cad_SendSequence+0x54>
	return;
 8016496:	e031      	b.n	80164fc <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	781b      	ldrb	r3, [r3, #0]
 801649c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	68dc      	ldr	r4, [r3, #12]
 80164a2:	7bba      	ldrb	r2, [r7, #14]
 80164a4:	7bf9      	ldrb	r1, [r7, #15]
 80164a6:	2300      	movs	r3, #0
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	47a0      	blx	r4
	  data++;
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	3301      	adds	r3, #1
 80164b0:	603b      	str	r3, [r7, #0]
	  break;
 80164b2:	e022      	b.n	80164fa <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80164b4:	683b      	ldr	r3, [r7, #0]
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80164ba:	f107 030e 	add.w	r3, r7, #14
 80164be:	461a      	mov	r2, r3
 80164c0:	2101      	movs	r1, #1
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7ff ff99 	bl	80163fa <u8x8_cad_SendData>
	  data++;
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	3301      	adds	r3, #1
 80164cc:	603b      	str	r3, [r7, #0]
	  break;
 80164ce:	e014      	b.n	80164fa <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	68dc      	ldr	r4, [r3, #12]
 80164d4:	7bf9      	ldrb	r1, [r7, #15]
 80164d6:	2300      	movs	r3, #0
 80164d8:	2200      	movs	r2, #0
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	47a0      	blx	r4
	  break;
 80164de:	e00c      	b.n	80164fa <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	781b      	ldrb	r3, [r3, #0]
 80164e4:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80164e6:	7bbb      	ldrb	r3, [r7, #14]
 80164e8:	461a      	mov	r2, r3
 80164ea:	2129      	movs	r1, #41	; 0x29
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f000 f9ec 	bl	80168ca <u8x8_gpio_call>
	  data++;
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	3301      	adds	r3, #1
 80164f6:	603b      	str	r3, [r7, #0]
	  break;
 80164f8:	bf00      	nop
    cmd = *data;
 80164fa:	e7b6      	b.n	801646a <u8x8_cad_SendSequence+0xa>
	return;
 80164fc:	bf00      	nop
    }
  }
}
 80164fe:	3714      	adds	r7, #20
 8016500:	46bd      	mov	sp, r7
 8016502:	bd90      	pop	{r4, r7, pc}

08016504 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8016504:	b590      	push	{r4, r7, lr}
 8016506:	b085      	sub	sp, #20
 8016508:	af00      	add	r7, sp, #0
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	607b      	str	r3, [r7, #4]
 801650e:	460b      	mov	r3, r1
 8016510:	72fb      	strb	r3, [r7, #11]
 8016512:	4613      	mov	r3, r2
 8016514:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8016516:	7afb      	ldrb	r3, [r7, #11]
 8016518:	3b14      	subs	r3, #20
 801651a:	2b05      	cmp	r3, #5
 801651c:	d82f      	bhi.n	801657e <u8x8_cad_011+0x7a>
 801651e:	a201      	add	r2, pc, #4	; (adr r2, 8016524 <u8x8_cad_011+0x20>)
 8016520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016524:	0801656d 	.word	0x0801656d
 8016528:	0801653d 	.word	0x0801653d
 801652c:	08016551 	.word	0x08016551
 8016530:	08016565 	.word	0x08016565
 8016534:	0801656d 	.word	0x0801656d
 8016538:	0801656d 	.word	0x0801656d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 801653c:	2100      	movs	r1, #0
 801653e:	68f8      	ldr	r0, [r7, #12]
 8016540:	f7ff ff01 	bl	8016346 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016544:	7abb      	ldrb	r3, [r7, #10]
 8016546:	4619      	mov	r1, r3
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	f7ff ff21 	bl	8016390 <u8x8_byte_SendByte>
      break;
 801654e:	e018      	b.n	8016582 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8016550:	2101      	movs	r1, #1
 8016552:	68f8      	ldr	r0, [r7, #12]
 8016554:	f7ff fef7 	bl	8016346 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016558:	7abb      	ldrb	r3, [r7, #10]
 801655a:	4619      	mov	r1, r3
 801655c:	68f8      	ldr	r0, [r7, #12]
 801655e:	f7ff ff17 	bl	8016390 <u8x8_byte_SendByte>
      break;
 8016562:	e00e      	b.n	8016582 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8016564:	2101      	movs	r1, #1
 8016566:	68f8      	ldr	r0, [r7, #12]
 8016568:	f7ff feed 	bl	8016346 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	691c      	ldr	r4, [r3, #16]
 8016570:	7aba      	ldrb	r2, [r7, #10]
 8016572:	7af9      	ldrb	r1, [r7, #11]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	68f8      	ldr	r0, [r7, #12]
 8016578:	47a0      	blx	r4
 801657a:	4603      	mov	r3, r0
 801657c:	e002      	b.n	8016584 <u8x8_cad_011+0x80>
    default:
      return 0;
 801657e:	2300      	movs	r3, #0
 8016580:	e000      	b.n	8016584 <u8x8_cad_011+0x80>
  }
  return 1;
 8016582:	2301      	movs	r3, #1
}
 8016584:	4618      	mov	r0, r3
 8016586:	3714      	adds	r7, #20
 8016588:	46bd      	mov	sp, r7
 801658a:	bd90      	pop	{r4, r7, pc}

0801658c <u8x8_d_uc1638_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1638_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b086      	sub	sp, #24
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	607b      	str	r3, [r7, #4]
 8016596:	460b      	mov	r3, r1
 8016598:	72fb      	strb	r3, [r7, #11]
 801659a:	4613      	mov	r3, r2
 801659c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 801659e:	7afb      	ldrb	r3, [r7, #11]
 80165a0:	3b0b      	subs	r3, #11
 80165a2:	2b04      	cmp	r3, #4
 80165a4:	f200 809e 	bhi.w	80166e4 <u8x8_d_uc1638_common+0x158>
 80165a8:	a201      	add	r2, pc, #4	; (adr r2, 80165b0 <u8x8_d_uc1638_common+0x24>)
 80165aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165ae:	bf00      	nop
 80165b0:	08016679 	.word	0x08016679
 80165b4:	080166e5 	.word	0x080166e5
 80165b8:	08016693 	.word	0x08016693
 80165bc:	080166c5 	.word	0x080166c5
 80165c0:	080165c5 	.word	0x080165c5
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	f7ff ff2b 	bl	8016420 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	795b      	ldrb	r3, [r3, #5]
 80165ce:	75fb      	strb	r3, [r7, #23]
	  x += u8x8->x_offset & 15; //I find this string in the new version
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80165d6:	f003 030f 	and.w	r3, r3, #15
 80165da:	b2da      	uxtb	r2, r3
 80165dc:	7dfb      	ldrb	r3, [r7, #23]
 80165de:	4413      	add	r3, r2
 80165e0:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80165e2:	7dfb      	ldrb	r3, [r7, #23]
 80165e4:	00db      	lsls	r3, r3, #3
 80165e6:	75fb      	strb	r3, [r7, #23]

      u8x8_cad_SendCmd(u8x8, 0x004);  /* UC1638 */
 80165e8:	2104      	movs	r1, #4
 80165ea:	68f8      	ldr	r0, [r7, #12]
 80165ec:	f7ff fee1 	bl	80163b2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, x);
 80165f0:	7dfb      	ldrb	r3, [r7, #23]
 80165f2:	4619      	mov	r1, r3
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	f7ff feee 	bl	80163d6 <u8x8_cad_SendArg>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	799b      	ldrb	r3, [r3, #6]
 80165fe:	75bb      	strb	r3, [r7, #22]
	  y += u8x8->x_offset >> 4;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8016606:	091b      	lsrs	r3, r3, #4
 8016608:	b2da      	uxtb	r2, r3
 801660a:	7dbb      	ldrb	r3, [r7, #22]
 801660c:	4413      	add	r3, r2
 801660e:	75bb      	strb	r3, [r7, #22]
      //y += u8x8->x_offset;
      //y *= 2;		/* for B/W mode, use only every second page */

      u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));  /* UC1638 */
 8016610:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016614:	f003 030f 	and.w	r3, r3, #15
 8016618:	b25b      	sxtb	r3, r3
 801661a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801661e:	b25b      	sxtb	r3, r3
 8016620:	b2db      	uxtb	r3, r3
 8016622:	4619      	mov	r1, r3
 8016624:	68f8      	ldr	r0, [r7, #12]
 8016626:	f7ff fec4 	bl	80163b2 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));  /* UC1638 */
 801662a:	7dbb      	ldrb	r3, [r7, #22]
 801662c:	091b      	lsrs	r3, r3, #4
 801662e:	b2db      	uxtb	r3, r3
 8016630:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8016634:	b2db      	uxtb	r3, r3
 8016636:	4619      	mov	r1, r3
 8016638:	68f8      	ldr	r0, [r7, #12]
 801663a:	f7ff feba 	bl	80163b2 <u8x8_cad_SendCmd>
    
    
      u8x8_cad_SendCmd(u8x8, 0x001); /* UC1638 */
 801663e:	2101      	movs	r1, #1
 8016640:	68f8      	ldr	r0, [r7, #12]
 8016642:	f7ff feb6 	bl	80163b2 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	791b      	ldrb	r3, [r3, #4]
 801664a:	757b      	strb	r3, [r7, #21]
      c *= 8;
 801664c:	7d7b      	ldrb	r3, [r7, #21]
 801664e:	00db      	lsls	r3, r3, #3
 8016650:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8016658:	7d7b      	ldrb	r3, [r7, #21]
 801665a:	693a      	ldr	r2, [r7, #16]
 801665c:	4619      	mov	r1, r3
 801665e:	68f8      	ldr	r0, [r7, #12]
 8016660:	f7ff fecb 	bl	80163fa <u8x8_cad_SendData>
	arg_int--;
 8016664:	7abb      	ldrb	r3, [r7, #10]
 8016666:	3b01      	subs	r3, #1
 8016668:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 801666a:	7abb      	ldrb	r3, [r7, #10]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d1f3      	bne.n	8016658 <u8x8_d_uc1638_common+0xcc>
      
      u8x8_cad_EndTransfer(u8x8);
 8016670:	68f8      	ldr	r0, [r7, #12]
 8016672:	f7ff fee5 	bl	8016440 <u8x8_cad_EndTransfer>
      break;
 8016676:	e037      	b.n	80166e8 <u8x8_d_uc1638_common+0x15c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8016678:	7abb      	ldrb	r3, [r7, #10]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d104      	bne.n	8016688 <u8x8_d_uc1638_common+0xfc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave0_seq);
 801667e:	491d      	ldr	r1, [pc, #116]	; (80166f4 <u8x8_d_uc1638_common+0x168>)
 8016680:	68f8      	ldr	r0, [r7, #12]
 8016682:	f7ff feed 	bl	8016460 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
      break;
 8016686:	e02f      	b.n	80166e8 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
 8016688:	491b      	ldr	r1, [pc, #108]	; (80166f8 <u8x8_d_uc1638_common+0x16c>)
 801668a:	68f8      	ldr	r0, [r7, #12]
 801668c:	f7ff fee8 	bl	8016460 <u8x8_cad_SendSequence>
      break;
 8016690:	e02a      	b.n	80166e8 <u8x8_d_uc1638_common+0x15c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8016692:	7abb      	ldrb	r3, [r7, #10]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d10a      	bne.n	80166ae <u8x8_d_uc1638_common+0x122>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip0_seq);
 8016698:	4918      	ldr	r1, [pc, #96]	; (80166fc <u8x8_d_uc1638_common+0x170>)
 801669a:	68f8      	ldr	r0, [r7, #12]
 801669c:	f7ff fee0 	bl	8016460 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	7c9a      	ldrb	r2, [r3, #18]
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 80166ac:	e01c      	b.n	80166e8 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
 80166ae:	4914      	ldr	r1, [pc, #80]	; (8016700 <u8x8_d_uc1638_common+0x174>)
 80166b0:	68f8      	ldr	r0, [r7, #12]
 80166b2:	f7ff fed5 	bl	8016460 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	7cda      	ldrb	r2, [r3, #19]
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80166c2:	e011      	b.n	80166e8 <u8x8_d_uc1638_common+0x15c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80166c4:	68f8      	ldr	r0, [r7, #12]
 80166c6:	f7ff feab 	bl	8016420 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80166ca:	2181      	movs	r1, #129	; 0x81
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f7ff fe70 	bl	80163b2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1638 has range from 0 to 255 */
 80166d2:	7abb      	ldrb	r3, [r7, #10]
 80166d4:	4619      	mov	r1, r3
 80166d6:	68f8      	ldr	r0, [r7, #12]
 80166d8:	f7ff fe7d 	bl	80163d6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80166dc:	68f8      	ldr	r0, [r7, #12]
 80166de:	f7ff feaf 	bl	8016440 <u8x8_cad_EndTransfer>
      break;
 80166e2:	e001      	b.n	80166e8 <u8x8_d_uc1638_common+0x15c>
#endif
    default:
      return 0;
 80166e4:	2300      	movs	r3, #0
 80166e6:	e000      	b.n	80166ea <u8x8_d_uc1638_common+0x15e>
  }
  return 1;
 80166e8:	2301      	movs	r3, #1
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3718      	adds	r7, #24
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	080291a8 	.word	0x080291a8
 80166f8:	080291b0 	.word	0x080291b0
 80166fc:	080291b8 	.word	0x080291b8
 8016700:	080291c0 	.word	0x080291c0

08016704 <u8x8_d_uc1638_240x160>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1638_240x160(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	607b      	str	r3, [r7, #4]
 801670e:	460b      	mov	r3, r1
 8016710:	72fb      	strb	r3, [r7, #11]
 8016712:	4613      	mov	r3, r2
 8016714:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1638_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8016716:	7aba      	ldrb	r2, [r7, #10]
 8016718:	7af9      	ldrb	r1, [r7, #11]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f7ff ff35 	bl	801658c <u8x8_d_uc1638_common>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d114      	bne.n	8016752 <u8x8_d_uc1638_240x160+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8016728:	7afb      	ldrb	r3, [r7, #11]
 801672a:	2b09      	cmp	r3, #9
 801672c:	d002      	beq.n	8016734 <u8x8_d_uc1638_240x160+0x30>
 801672e:	2b0a      	cmp	r3, #10
 8016730:	d005      	beq.n	801673e <u8x8_d_uc1638_240x160+0x3a>
 8016732:	e00c      	b.n	801674e <u8x8_d_uc1638_240x160+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_240x160_display_info);
 8016734:	490a      	ldr	r1, [pc, #40]	; (8016760 <u8x8_d_uc1638_240x160+0x5c>)
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	f000 f816 	bl	8016768 <u8x8_d_helper_display_setup_memory>
	break;
 801673c:	e00a      	b.n	8016754 <u8x8_d_uc1638_240x160+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f000 f826 	bl	8016790 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_240x160_init_seq);
 8016744:	4907      	ldr	r1, [pc, #28]	; (8016764 <u8x8_d_uc1638_240x160+0x60>)
 8016746:	68f8      	ldr	r0, [r7, #12]
 8016748:	f7ff fe8a 	bl	8016460 <u8x8_cad_SendSequence>
	break;
 801674c:	e002      	b.n	8016754 <u8x8_d_uc1638_240x160+0x50>
      default:
	return 0;		/* msg unknown */
 801674e:	2300      	movs	r3, #0
 8016750:	e001      	b.n	8016756 <u8x8_d_uc1638_240x160+0x52>
    }
  }
 8016752:	bf00      	nop
  return 1;
 8016754:	2301      	movs	r3, #1
}
 8016756:	4618      	mov	r0, r3
 8016758:	3710      	adds	r7, #16
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	080291c8 	.word	0x080291c8
 8016764:	080291e0 	.word	0x080291e0

08016768 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8016768:	b480      	push	{r7}
 801676a:	b083      	sub	sp, #12
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	683a      	ldr	r2, [r7, #0]
 8016776:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	7c9a      	ldrb	r2, [r3, #18]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8016784:	bf00      	nop
 8016786:	370c      	adds	r7, #12
 8016788:	46bd      	mov	sp, r7
 801678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678e:	4770      	bx	lr

08016790 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016790:	b590      	push	{r4, r7, lr}
 8016792:	b083      	sub	sp, #12
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	695c      	ldr	r4, [r3, #20]
 801679c:	2300      	movs	r3, #0
 801679e:	2200      	movs	r2, #0
 80167a0:	2128      	movs	r1, #40	; 0x28
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	68dc      	ldr	r4, [r3, #12]
 80167aa:	2300      	movs	r3, #0
 80167ac:	2200      	movs	r2, #0
 80167ae:	2114      	movs	r1, #20
 80167b0:	6878      	ldr	r0, [r7, #4]
 80167b2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80167b4:	2201      	movs	r2, #1
 80167b6:	214b      	movs	r1, #75	; 0x4b
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 f886 	bl	80168ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	791b      	ldrb	r3, [r3, #4]
 80167c4:	461a      	mov	r2, r3
 80167c6:	2129      	movs	r1, #41	; 0x29
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f000 f87e 	bl	80168ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80167ce:	2200      	movs	r2, #0
 80167d0:	214b      	movs	r1, #75	; 0x4b
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f000 f879 	bl	80168ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	791b      	ldrb	r3, [r3, #4]
 80167de:	461a      	mov	r2, r3
 80167e0:	2129      	movs	r1, #41	; 0x29
 80167e2:	6878      	ldr	r0, [r7, #4]
 80167e4:	f000 f871 	bl	80168ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80167e8:	2201      	movs	r2, #1
 80167ea:	214b      	movs	r1, #75	; 0x4b
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 f86c 	bl	80168ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	795b      	ldrb	r3, [r3, #5]
 80167f8:	461a      	mov	r2, r3
 80167fa:	2129      	movs	r1, #41	; 0x29
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	f000 f864 	bl	80168ca <u8x8_gpio_call>
}    
 8016802:	bf00      	nop
 8016804:	370c      	adds	r7, #12
 8016806:	46bd      	mov	sp, r7
 8016808:	bd90      	pop	{r4, r7, pc}

0801680a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 801680a:	b590      	push	{r4, r7, lr}
 801680c:	b085      	sub	sp, #20
 801680e:	af00      	add	r7, sp, #0
 8016810:	6078      	str	r0, [r7, #4]
 8016812:	4608      	mov	r0, r1
 8016814:	4611      	mov	r1, r2
 8016816:	461a      	mov	r2, r3
 8016818:	4603      	mov	r3, r0
 801681a:	70fb      	strb	r3, [r7, #3]
 801681c:	460b      	mov	r3, r1
 801681e:	70bb      	strb	r3, [r7, #2]
 8016820:	4613      	mov	r3, r2
 8016822:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8016824:	78fb      	ldrb	r3, [r7, #3]
 8016826:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8016828:	78bb      	ldrb	r3, [r7, #2]
 801682a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 801682c:	787b      	ldrb	r3, [r7, #1]
 801682e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8016830:	6a3b      	ldr	r3, [r7, #32]
 8016832:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	689c      	ldr	r4, [r3, #8]
 8016838:	f107 0308 	add.w	r3, r7, #8
 801683c:	2201      	movs	r2, #1
 801683e:	210f      	movs	r1, #15
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	47a0      	blx	r4
 8016844:	4603      	mov	r3, r0
}
 8016846:	4618      	mov	r0, r3
 8016848:	3714      	adds	r7, #20
 801684a:	46bd      	mov	sp, r7
 801684c:	bd90      	pop	{r4, r7, pc}

0801684e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 801684e:	b590      	push	{r4, r7, lr}
 8016850:	b083      	sub	sp, #12
 8016852:	af00      	add	r7, sp, #0
 8016854:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	689c      	ldr	r4, [r3, #8]
 801685a:	2300      	movs	r3, #0
 801685c:	2200      	movs	r2, #0
 801685e:	2109      	movs	r1, #9
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	47a0      	blx	r4
}
 8016864:	bf00      	nop
 8016866:	370c      	adds	r7, #12
 8016868:	46bd      	mov	sp, r7
 801686a:	bd90      	pop	{r4, r7, pc}

0801686c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 801686c:	b590      	push	{r4, r7, lr}
 801686e:	b083      	sub	sp, #12
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	689c      	ldr	r4, [r3, #8]
 8016878:	2300      	movs	r3, #0
 801687a:	2200      	movs	r2, #0
 801687c:	210a      	movs	r1, #10
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	47a0      	blx	r4
}
 8016882:	bf00      	nop
 8016884:	370c      	adds	r7, #12
 8016886:	46bd      	mov	sp, r7
 8016888:	bd90      	pop	{r4, r7, pc}

0801688a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 801688a:	b590      	push	{r4, r7, lr}
 801688c:	b083      	sub	sp, #12
 801688e:	af00      	add	r7, sp, #0
 8016890:	6078      	str	r0, [r7, #4]
 8016892:	460b      	mov	r3, r1
 8016894:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	689c      	ldr	r4, [r3, #8]
 801689a:	78fa      	ldrb	r2, [r7, #3]
 801689c:	2300      	movs	r3, #0
 801689e:	210b      	movs	r1, #11
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	47a0      	blx	r4
}
 80168a4:	bf00      	nop
 80168a6:	370c      	adds	r7, #12
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd90      	pop	{r4, r7, pc}

080168ac <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80168ac:	b590      	push	{r4, r7, lr}
 80168ae:	b083      	sub	sp, #12
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	689c      	ldr	r4, [r3, #8]
 80168b8:	2300      	movs	r3, #0
 80168ba:	2200      	movs	r2, #0
 80168bc:	2110      	movs	r1, #16
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	47a0      	blx	r4
}
 80168c2:	bf00      	nop
 80168c4:	370c      	adds	r7, #12
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd90      	pop	{r4, r7, pc}

080168ca <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80168ca:	b590      	push	{r4, r7, lr}
 80168cc:	b083      	sub	sp, #12
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	6078      	str	r0, [r7, #4]
 80168d2:	460b      	mov	r3, r1
 80168d4:	70fb      	strb	r3, [r7, #3]
 80168d6:	4613      	mov	r3, r2
 80168d8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	695c      	ldr	r4, [r3, #20]
 80168de:	78ba      	ldrb	r2, [r7, #2]
 80168e0:	78f9      	ldrb	r1, [r7, #3]
 80168e2:	2300      	movs	r3, #0
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	47a0      	blx	r4
}
 80168e8:	bf00      	nop
 80168ea:	370c      	adds	r7, #12
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd90      	pop	{r4, r7, pc}

080168f0 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80168f0:	b480      	push	{r7}
 80168f2:	b085      	sub	sp, #20
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	607b      	str	r3, [r7, #4]
 80168fa:	460b      	mov	r3, r1
 80168fc:	72fb      	strb	r3, [r7, #11]
 80168fe:	4613      	mov	r3, r2
 8016900:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8016902:	2300      	movs	r3, #0
}
 8016904:	4618      	mov	r0, r3
 8016906:	3714      	adds	r7, #20
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr

08016910 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8016910:	b480      	push	{r7}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2200      	movs	r2, #0
 801691c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	4a11      	ldr	r2, [pc, #68]	; (8016968 <u8x8_SetupDefaults+0x58>)
 8016922:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	4a10      	ldr	r2, [pc, #64]	; (8016968 <u8x8_SetupDefaults+0x58>)
 8016928:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	4a0e      	ldr	r2, [pc, #56]	; (8016968 <u8x8_SetupDefaults+0x58>)
 801692e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	4a0d      	ldr	r2, [pc, #52]	; (8016968 <u8x8_SetupDefaults+0x58>)
 8016934:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2200      	movs	r2, #0
 801693a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2200      	movs	r2, #0
 8016942:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2200      	movs	r2, #0
 801694a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	22ff      	movs	r2, #255	; 0xff
 8016950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	22ff      	movs	r2, #255	; 0xff
 8016958:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 801695c:	bf00      	nop
 801695e:	370c      	adds	r7, #12
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr
 8016968:	080168f1 	.word	0x080168f1

0801696c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
 8016978:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 801697a:	68f8      	ldr	r0, [r7, #12]
 801697c:	f7ff ffc8 	bl	8016910 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	68ba      	ldr	r2, [r7, #8]
 8016984:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	687a      	ldr	r2, [r7, #4]
 801698a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	683a      	ldr	r2, [r7, #0]
 8016990:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	69ba      	ldr	r2, [r7, #24]
 8016996:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8016998:	68f8      	ldr	r0, [r7, #12]
 801699a:	f7ff ff58 	bl	801684e <u8x8_SetupMemory>
}
 801699e:	bf00      	nop
 80169a0:	3710      	adds	r7, #16
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}
	...

080169a8 <ADC_options_screen_func>:

const char* SPS_name[16]={ "RATE_2SPS", "RATE_4SPS", "RATE_8SPS", "RATE_16SPS", "RATE_32SPS", "RATE_63SPS", "RATE_125SPS", "RATE_250SPS",
		"RATE_500SPS", "RATE_1000SPS", "RATE_2000SPS", "RATE_4000SPS", "RATE_8000SPS", "RATE_16000SPS", "RATE_32000SPS", "RATE_64000SPS"};

void ADC_options_screen_func(void)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af02      	add	r7, sp, #8
	RTC_view();
 80169ae:	f001 f89f 	bl	8017af0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80169b2:	4953      	ldr	r1, [pc, #332]	; (8016b00 <ADC_options_screen_func+0x158>)
 80169b4:	4853      	ldr	r0, [pc, #332]	; (8016b04 <ADC_options_screen_func+0x15c>)
 80169b6:	f7ff f88d 	bl	8015ad4 <u8g2_SetFont>

	// PGA
	u8g2_DrawUTF8(&u8g2, 10, 40, "PGA:");
 80169ba:	4b53      	ldr	r3, [pc, #332]	; (8016b08 <ADC_options_screen_func+0x160>)
 80169bc:	2228      	movs	r2, #40	; 0x28
 80169be:	210a      	movs	r1, #10
 80169c0:	4850      	ldr	r0, [pc, #320]	; (8016b04 <ADC_options_screen_func+0x15c>)
 80169c2:	f7fe ffe5 	bl	8015990 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 40, PGA_name[PGA_GAIN], edit_param, 0);
 80169c6:	4b51      	ldr	r3, [pc, #324]	; (8016b0c <ADC_options_screen_func+0x164>)
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	461a      	mov	r2, r3
 80169cc:	4b50      	ldr	r3, [pc, #320]	; (8016b10 <ADC_options_screen_func+0x168>)
 80169ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169d2:	4b50      	ldr	r3, [pc, #320]	; (8016b14 <ADC_options_screen_func+0x16c>)
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	2100      	movs	r1, #0
 80169d8:	9100      	str	r1, [sp, #0]
 80169da:	2128      	movs	r1, #40	; 0x28
 80169dc:	2078      	movs	r0, #120	; 0x78
 80169de:	f7ec fa57 	bl	8002e90 <Blink_Edit_Parameter>

	// SPS
	u8g2_DrawUTF8(&u8g2, 10, 60, "SPS:");
 80169e2:	4b4d      	ldr	r3, [pc, #308]	; (8016b18 <ADC_options_screen_func+0x170>)
 80169e4:	223c      	movs	r2, #60	; 0x3c
 80169e6:	210a      	movs	r1, #10
 80169e8:	4846      	ldr	r0, [pc, #280]	; (8016b04 <ADC_options_screen_func+0x15c>)
 80169ea:	f7fe ffd1 	bl	8015990 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 60,SPS_name[ADC_SPS], edit_param, 1);
 80169ee:	4b4b      	ldr	r3, [pc, #300]	; (8016b1c <ADC_options_screen_func+0x174>)
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	461a      	mov	r2, r3
 80169f4:	4b4a      	ldr	r3, [pc, #296]	; (8016b20 <ADC_options_screen_func+0x178>)
 80169f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169fa:	4b46      	ldr	r3, [pc, #280]	; (8016b14 <ADC_options_screen_func+0x16c>)
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	2101      	movs	r1, #1
 8016a00:	9100      	str	r1, [sp, #0]
 8016a02:	213c      	movs	r1, #60	; 0x3c
 8016a04:	2078      	movs	r0, #120	; 0x78
 8016a06:	f7ec fa43 	bl	8002e90 <Blink_Edit_Parameter>

	// Calibration
	u8g2_DrawUTF8(&u8g2, 10, 80, "CAL:");
 8016a0a:	4b46      	ldr	r3, [pc, #280]	; (8016b24 <ADC_options_screen_func+0x17c>)
 8016a0c:	2250      	movs	r2, #80	; 0x50
 8016a0e:	210a      	movs	r1, #10
 8016a10:	483c      	ldr	r0, [pc, #240]	; (8016b04 <ADC_options_screen_func+0x15c>)
 8016a12:	f7fe ffbd 	bl	8015990 <u8g2_DrawUTF8>
	switch(adc_calibration_mode)
 8016a16:	4b44      	ldr	r3, [pc, #272]	; (8016b28 <ADC_options_screen_func+0x180>)
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	2b02      	cmp	r3, #2
 8016a1c:	d01a      	beq.n	8016a54 <ADC_options_screen_func+0xac>
 8016a1e:	2b02      	cmp	r3, #2
 8016a20:	dc22      	bgt.n	8016a68 <ADC_options_screen_func+0xc0>
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d002      	beq.n	8016a2c <ADC_options_screen_func+0x84>
 8016a26:	2b01      	cmp	r3, #1
 8016a28:	d00a      	beq.n	8016a40 <ADC_options_screen_func+0x98>
 8016a2a:	e01d      	b.n	8016a68 <ADC_options_screen_func+0xc0>
	{
		case 0: Blink_Edit_Parameter(120, 80, "SELF", edit_param, 2); break;
 8016a2c:	4b39      	ldr	r3, [pc, #228]	; (8016b14 <ADC_options_screen_func+0x16c>)
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	2202      	movs	r2, #2
 8016a32:	9200      	str	r2, [sp, #0]
 8016a34:	4a3d      	ldr	r2, [pc, #244]	; (8016b2c <ADC_options_screen_func+0x184>)
 8016a36:	2150      	movs	r1, #80	; 0x50
 8016a38:	2078      	movs	r0, #120	; 0x78
 8016a3a:	f7ec fa29 	bl	8002e90 <Blink_Edit_Parameter>
 8016a3e:	e013      	b.n	8016a68 <ADC_options_screen_func+0xc0>
		case 1: Blink_Edit_Parameter(120, 80, "OFFSET", edit_param, 2); break;
 8016a40:	4b34      	ldr	r3, [pc, #208]	; (8016b14 <ADC_options_screen_func+0x16c>)
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	2202      	movs	r2, #2
 8016a46:	9200      	str	r2, [sp, #0]
 8016a48:	4a39      	ldr	r2, [pc, #228]	; (8016b30 <ADC_options_screen_func+0x188>)
 8016a4a:	2150      	movs	r1, #80	; 0x50
 8016a4c:	2078      	movs	r0, #120	; 0x78
 8016a4e:	f7ec fa1f 	bl	8002e90 <Blink_Edit_Parameter>
 8016a52:	e009      	b.n	8016a68 <ADC_options_screen_func+0xc0>
		case 2: Blink_Edit_Parameter(120, 80, "FULL SCALE", edit_param, 2); break;
 8016a54:	4b2f      	ldr	r3, [pc, #188]	; (8016b14 <ADC_options_screen_func+0x16c>)
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	2202      	movs	r2, #2
 8016a5a:	9200      	str	r2, [sp, #0]
 8016a5c:	4a35      	ldr	r2, [pc, #212]	; (8016b34 <ADC_options_screen_func+0x18c>)
 8016a5e:	2150      	movs	r1, #80	; 0x50
 8016a60:	2078      	movs	r0, #120	; 0x78
 8016a62:	f7ec fa15 	bl	8002e90 <Blink_Edit_Parameter>
 8016a66:	bf00      	nop
	}

	// Window size
	u8g2_DrawUTF8(&u8g2, 10, 100, "SIZE:");
 8016a68:	4b33      	ldr	r3, [pc, #204]	; (8016b38 <ADC_options_screen_func+0x190>)
 8016a6a:	2264      	movs	r2, #100	; 0x64
 8016a6c:	210a      	movs	r1, #10
 8016a6e:	4825      	ldr	r0, [pc, #148]	; (8016b04 <ADC_options_screen_func+0x15c>)
 8016a70:	f7fe ff8e 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", ADC_Buff_size);
 8016a74:	4b31      	ldr	r3, [pc, #196]	; (8016b3c <ADC_options_screen_func+0x194>)
 8016a76:	881b      	ldrh	r3, [r3, #0]
 8016a78:	461a      	mov	r2, r3
 8016a7a:	4931      	ldr	r1, [pc, #196]	; (8016b40 <ADC_options_screen_func+0x198>)
 8016a7c:	4831      	ldr	r0, [pc, #196]	; (8016b44 <ADC_options_screen_func+0x19c>)
 8016a7e:	f007 f987 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(120, 100, RAM, edit_param, 3);
 8016a82:	4b24      	ldr	r3, [pc, #144]	; (8016b14 <ADC_options_screen_func+0x16c>)
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	2203      	movs	r2, #3
 8016a88:	9200      	str	r2, [sp, #0]
 8016a8a:	4a2e      	ldr	r2, [pc, #184]	; (8016b44 <ADC_options_screen_func+0x19c>)
 8016a8c:	2164      	movs	r1, #100	; 0x64
 8016a8e:	2078      	movs	r0, #120	; 0x78
 8016a90:	f7ec f9fe 	bl	8002e90 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 120, "OFF PERIOD:");
 8016a94:	4b2c      	ldr	r3, [pc, #176]	; (8016b48 <ADC_options_screen_func+0x1a0>)
 8016a96:	2278      	movs	r2, #120	; 0x78
 8016a98:	210a      	movs	r1, #10
 8016a9a:	481a      	ldr	r0, [pc, #104]	; (8016b04 <ADC_options_screen_func+0x15c>)
 8016a9c:	f7fe ff78 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoOffCoef_period);
 8016aa0:	4b2a      	ldr	r3, [pc, #168]	; (8016b4c <ADC_options_screen_func+0x1a4>)
 8016aa2:	881b      	ldrh	r3, [r3, #0]
 8016aa4:	461a      	mov	r2, r3
 8016aa6:	4926      	ldr	r1, [pc, #152]	; (8016b40 <ADC_options_screen_func+0x198>)
 8016aa8:	4826      	ldr	r0, [pc, #152]	; (8016b44 <ADC_options_screen_func+0x19c>)
 8016aaa:	f007 f971 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(160, 120, RAM, edit_param, 4);
 8016aae:	4b19      	ldr	r3, [pc, #100]	; (8016b14 <ADC_options_screen_func+0x16c>)
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	2204      	movs	r2, #4
 8016ab4:	9200      	str	r2, [sp, #0]
 8016ab6:	4a23      	ldr	r2, [pc, #140]	; (8016b44 <ADC_options_screen_func+0x19c>)
 8016ab8:	2178      	movs	r1, #120	; 0x78
 8016aba:	20a0      	movs	r0, #160	; 0xa0
 8016abc:	f7ec f9e8 	bl	8002e90 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 140, "GAIN PERIOD:");
 8016ac0:	4b23      	ldr	r3, [pc, #140]	; (8016b50 <ADC_options_screen_func+0x1a8>)
 8016ac2:	228c      	movs	r2, #140	; 0x8c
 8016ac4:	210a      	movs	r1, #10
 8016ac6:	480f      	ldr	r0, [pc, #60]	; (8016b04 <ADC_options_screen_func+0x15c>)
 8016ac8:	f7fe ff62 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoGainCoef_period);
 8016acc:	4b21      	ldr	r3, [pc, #132]	; (8016b54 <ADC_options_screen_func+0x1ac>)
 8016ace:	881b      	ldrh	r3, [r3, #0]
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	491b      	ldr	r1, [pc, #108]	; (8016b40 <ADC_options_screen_func+0x198>)
 8016ad4:	481b      	ldr	r0, [pc, #108]	; (8016b44 <ADC_options_screen_func+0x19c>)
 8016ad6:	f007 f95b 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(160, 140, RAM, edit_param, 5);
 8016ada:	4b0e      	ldr	r3, [pc, #56]	; (8016b14 <ADC_options_screen_func+0x16c>)
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	2205      	movs	r2, #5
 8016ae0:	9200      	str	r2, [sp, #0]
 8016ae2:	4a18      	ldr	r2, [pc, #96]	; (8016b44 <ADC_options_screen_func+0x19c>)
 8016ae4:	218c      	movs	r1, #140	; 0x8c
 8016ae6:	20a0      	movs	r0, #160	; 0xa0
 8016ae8:	f7ec f9d2 	bl	8002e90 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016aec:	4805      	ldr	r0, [pc, #20]	; (8016b04 <ADC_options_screen_func+0x15c>)
 8016aee:	f7fe f9b4 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016af2:	4804      	ldr	r0, [pc, #16]	; (8016b04 <ADC_options_screen_func+0x15c>)
 8016af4:	f7fe f93e 	bl	8014d74 <u8g2_ClearBuffer>
}
 8016af8:	bf00      	nop
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}
 8016afe:	bf00      	nop
 8016b00:	08027258 	.word	0x08027258
 8016b04:	20001fd4 	.word	0x20001fd4
 8016b08:	0802218c 	.word	0x0802218c
 8016b0c:	2000009a 	.word	0x2000009a
 8016b10:	20000050 	.word	0x20000050
 8016b14:	20000864 	.word	0x20000864
 8016b18:	08022194 	.word	0x08022194
 8016b1c:	2000009b 	.word	0x2000009b
 8016b20:	20000338 	.word	0x20000338
 8016b24:	0802219c 	.word	0x0802219c
 8016b28:	200008af 	.word	0x200008af
 8016b2c:	080221a4 	.word	0x080221a4
 8016b30:	080221ac 	.word	0x080221ac
 8016b34:	080221b4 	.word	0x080221b4
 8016b38:	080221c0 	.word	0x080221c0
 8016b3c:	2000009c 	.word	0x2000009c
 8016b40:	080221c8 	.word	0x080221c8
 8016b44:	20002090 	.word	0x20002090
 8016b48:	080221cc 	.word	0x080221cc
 8016b4c:	2000217c 	.word	0x2000217c
 8016b50:	080221d8 	.word	0x080221d8
 8016b54:	20002114 	.word	0x20002114

08016b58 <ADC_options_screen_S6>:



// DOWN
void ADC_options_screen_S6(void)
{
 8016b58:	b480      	push	{r7}
 8016b5a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8016b5c:	4b07      	ldr	r3, [pc, #28]	; (8016b7c <ADC_options_screen_S6+0x24>)
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	2b04      	cmp	r3, #4
 8016b62:	d805      	bhi.n	8016b70 <ADC_options_screen_S6+0x18>
 8016b64:	4b05      	ldr	r3, [pc, #20]	; (8016b7c <ADC_options_screen_S6+0x24>)
 8016b66:	781b      	ldrb	r3, [r3, #0]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	b2da      	uxtb	r2, r3
 8016b6c:	4b03      	ldr	r3, [pc, #12]	; (8016b7c <ADC_options_screen_S6+0x24>)
 8016b6e:	701a      	strb	r2, [r3, #0]
}
 8016b70:	bf00      	nop
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop
 8016b7c:	20000864 	.word	0x20000864

08016b80 <ADC_options_screen_S7>:

// UP
void ADC_options_screen_S7(void)
{
 8016b80:	b480      	push	{r7}
 8016b82:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8016b84:	4b07      	ldr	r3, [pc, #28]	; (8016ba4 <ADC_options_screen_S7+0x24>)
 8016b86:	781b      	ldrb	r3, [r3, #0]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d005      	beq.n	8016b98 <ADC_options_screen_S7+0x18>
 8016b8c:	4b05      	ldr	r3, [pc, #20]	; (8016ba4 <ADC_options_screen_S7+0x24>)
 8016b8e:	781b      	ldrb	r3, [r3, #0]
 8016b90:	3b01      	subs	r3, #1
 8016b92:	b2da      	uxtb	r2, r3
 8016b94:	4b03      	ldr	r3, [pc, #12]	; (8016ba4 <ADC_options_screen_S7+0x24>)
 8016b96:	701a      	strb	r2, [r3, #0]
}
 8016b98:	bf00      	nop
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop
 8016ba4:	20000864 	.word	0x20000864

08016ba8 <ADC_options_screen_S9>:


// MENU
void ADC_options_screen_S9(void)
{
 8016ba8:	b480      	push	{r7}
 8016baa:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016bac:	4b06      	ldr	r3, [pc, #24]	; (8016bc8 <ADC_options_screen_S9+0x20>)
 8016bae:	2208      	movs	r2, #8
 8016bb0:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016bb2:	4b06      	ldr	r3, [pc, #24]	; (8016bcc <ADC_options_screen_S9+0x24>)
 8016bb4:	22ff      	movs	r2, #255	; 0xff
 8016bb6:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8016bb8:	4b05      	ldr	r3, [pc, #20]	; (8016bd0 <ADC_options_screen_S9+0x28>)
 8016bba:	2205      	movs	r2, #5
 8016bbc:	701a      	strb	r2, [r3, #0]
}
 8016bbe:	bf00      	nop
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc6:	4770      	bx	lr
 8016bc8:	2000004c 	.word	0x2000004c
 8016bcc:	200003a8 	.word	0x200003a8
 8016bd0:	200003a9 	.word	0x200003a9

08016bd4 <ADC_options_screen_S4>:



// ENTER
void ADC_options_screen_S4(void)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016bd8:	4b21      	ldr	r3, [pc, #132]	; (8016c60 <ADC_options_screen_S4+0x8c>)
 8016bda:	781b      	ldrb	r3, [r3, #0]
 8016bdc:	2b05      	cmp	r3, #5
 8016bde:	d83c      	bhi.n	8016c5a <ADC_options_screen_S4+0x86>
 8016be0:	a201      	add	r2, pc, #4	; (adr r2, 8016be8 <ADC_options_screen_S4+0x14>)
 8016be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016be6:	bf00      	nop
 8016be8:	08016c01 	.word	0x08016c01
 8016bec:	08016c0f 	.word	0x08016c0f
 8016bf0:	08016c1d 	.word	0x08016c1d
 8016bf4:	08016c31 	.word	0x08016c31
 8016bf8:	08016c3f 	.word	0x08016c3f
 8016bfc:	08016c4d 	.word	0x08016c4d
	{
		case 0: Save_Settings(PGA_GAIN_tag, PGA_GAIN); break;
 8016c00:	4b18      	ldr	r3, [pc, #96]	; (8016c64 <ADC_options_screen_S4+0x90>)
 8016c02:	781b      	ldrb	r3, [r3, #0]
 8016c04:	4619      	mov	r1, r3
 8016c06:	2008      	movs	r0, #8
 8016c08:	f7ee fd6e 	bl	80056e8 <Save_Settings>
 8016c0c:	e025      	b.n	8016c5a <ADC_options_screen_S4+0x86>
		case 1: Save_Settings(ADC_SPS_tag, ADC_SPS); break;
 8016c0e:	4b16      	ldr	r3, [pc, #88]	; (8016c68 <ADC_options_screen_S4+0x94>)
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	4619      	mov	r1, r3
 8016c14:	2009      	movs	r0, #9
 8016c16:	f7ee fd67 	bl	80056e8 <Save_Settings>
 8016c1a:	e01e      	b.n	8016c5a <ADC_options_screen_S4+0x86>
		case 2: Save_Settings(adc_calibration_mode_tag, adc_calibration_mode); adc_start_calibration=1; break;
 8016c1c:	4b13      	ldr	r3, [pc, #76]	; (8016c6c <ADC_options_screen_S4+0x98>)
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	4619      	mov	r1, r3
 8016c22:	200a      	movs	r0, #10
 8016c24:	f7ee fd60 	bl	80056e8 <Save_Settings>
 8016c28:	4b11      	ldr	r3, [pc, #68]	; (8016c70 <ADC_options_screen_S4+0x9c>)
 8016c2a:	2201      	movs	r2, #1
 8016c2c:	701a      	strb	r2, [r3, #0]
 8016c2e:	e014      	b.n	8016c5a <ADC_options_screen_S4+0x86>
		case 3: Save_Settings(ADC_Buff_size_tag, ADC_Buff_size); break;
 8016c30:	4b10      	ldr	r3, [pc, #64]	; (8016c74 <ADC_options_screen_S4+0xa0>)
 8016c32:	881b      	ldrh	r3, [r3, #0]
 8016c34:	4619      	mov	r1, r3
 8016c36:	200b      	movs	r0, #11
 8016c38:	f7ee fd56 	bl	80056e8 <Save_Settings>
 8016c3c:	e00d      	b.n	8016c5a <ADC_options_screen_S4+0x86>
		case 4: Save_Settings(AutoOffCoef_period_tag, AutoOffCoef_period); break;
 8016c3e:	4b0e      	ldr	r3, [pc, #56]	; (8016c78 <ADC_options_screen_S4+0xa4>)
 8016c40:	881b      	ldrh	r3, [r3, #0]
 8016c42:	4619      	mov	r1, r3
 8016c44:	201f      	movs	r0, #31
 8016c46:	f7ee fd4f 	bl	80056e8 <Save_Settings>
 8016c4a:	e006      	b.n	8016c5a <ADC_options_screen_S4+0x86>
		case 5: Save_Settings(AutoGainCoef_period_tag, AutoGainCoef_period); break;
 8016c4c:	4b0b      	ldr	r3, [pc, #44]	; (8016c7c <ADC_options_screen_S4+0xa8>)
 8016c4e:	881b      	ldrh	r3, [r3, #0]
 8016c50:	4619      	mov	r1, r3
 8016c52:	2021      	movs	r0, #33	; 0x21
 8016c54:	f7ee fd48 	bl	80056e8 <Save_Settings>
 8016c58:	bf00      	nop
	}
}
 8016c5a:	bf00      	nop
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	20000864 	.word	0x20000864
 8016c64:	2000009a 	.word	0x2000009a
 8016c68:	2000009b 	.word	0x2000009b
 8016c6c:	200008af 	.word	0x200008af
 8016c70:	2000082c 	.word	0x2000082c
 8016c74:	2000009c 	.word	0x2000009c
 8016c78:	2000217c 	.word	0x2000217c
 8016c7c:	20002114 	.word	0x20002114

08016c80 <ADC_options_screen_S8>:



// BACKWARD
void ADC_options_screen_S8(void)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016c84:	4b35      	ldr	r3, [pc, #212]	; (8016d5c <ADC_options_screen_S8+0xdc>)
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	2b05      	cmp	r3, #5
 8016c8a:	d864      	bhi.n	8016d56 <ADC_options_screen_S8+0xd6>
 8016c8c:	a201      	add	r2, pc, #4	; (adr r2, 8016c94 <ADC_options_screen_S8+0x14>)
 8016c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c92:	bf00      	nop
 8016c94:	08016cad 	.word	0x08016cad
 8016c98:	08016cd7 	.word	0x08016cd7
 8016c9c:	08016ced 	.word	0x08016ced
 8016ca0:	08016d03 	.word	0x08016d03
 8016ca4:	08016d19 	.word	0x08016d19
 8016ca8:	08016d2f 	.word	0x08016d2f
	{
		case 0: if(PGA_GAIN>0)PGA_GAIN--;
 8016cac:	4b2c      	ldr	r3, [pc, #176]	; (8016d60 <ADC_options_screen_S8+0xe0>)
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d005      	beq.n	8016cc0 <ADC_options_screen_S8+0x40>
 8016cb4:	4b2a      	ldr	r3, [pc, #168]	; (8016d60 <ADC_options_screen_S8+0xe0>)
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	3b01      	subs	r3, #1
 8016cba:	b2da      	uxtb	r2, r3
 8016cbc:	4b28      	ldr	r3, [pc, #160]	; (8016d60 <ADC_options_screen_S8+0xe0>)
 8016cbe:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016cc0:	4b27      	ldr	r3, [pc, #156]	; (8016d60 <ADC_options_screen_S8+0xe0>)
 8016cc2:	781b      	ldrb	r3, [r3, #0]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7ea fce3 	bl	8001690 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016cca:	4b26      	ldr	r3, [pc, #152]	; (8016d64 <ADC_options_screen_S8+0xe4>)
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ea fa3c 	bl	800114c <ADC_Conversion>
		break;
 8016cd4:	e03f      	b.n	8016d56 <ADC_options_screen_S8+0xd6>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016cd6:	4b23      	ldr	r3, [pc, #140]	; (8016d64 <ADC_options_screen_S8+0xe4>)
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d032      	beq.n	8016d44 <ADC_options_screen_S8+0xc4>
 8016cde:	4b21      	ldr	r3, [pc, #132]	; (8016d64 <ADC_options_screen_S8+0xe4>)
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	3b01      	subs	r3, #1
 8016ce4:	b2da      	uxtb	r2, r3
 8016ce6:	4b1f      	ldr	r3, [pc, #124]	; (8016d64 <ADC_options_screen_S8+0xe4>)
 8016ce8:	701a      	strb	r2, [r3, #0]
 8016cea:	e02b      	b.n	8016d44 <ADC_options_screen_S8+0xc4>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016cec:	4b1e      	ldr	r3, [pc, #120]	; (8016d68 <ADC_options_screen_S8+0xe8>)
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d029      	beq.n	8016d48 <ADC_options_screen_S8+0xc8>
 8016cf4:	4b1c      	ldr	r3, [pc, #112]	; (8016d68 <ADC_options_screen_S8+0xe8>)
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	3b01      	subs	r3, #1
 8016cfa:	b2da      	uxtb	r2, r3
 8016cfc:	4b1a      	ldr	r3, [pc, #104]	; (8016d68 <ADC_options_screen_S8+0xe8>)
 8016cfe:	701a      	strb	r2, [r3, #0]
 8016d00:	e022      	b.n	8016d48 <ADC_options_screen_S8+0xc8>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016d02:	4b1a      	ldr	r3, [pc, #104]	; (8016d6c <ADC_options_screen_S8+0xec>)
 8016d04:	881b      	ldrh	r3, [r3, #0]
 8016d06:	2b01      	cmp	r3, #1
 8016d08:	d920      	bls.n	8016d4c <ADC_options_screen_S8+0xcc>
 8016d0a:	4b18      	ldr	r3, [pc, #96]	; (8016d6c <ADC_options_screen_S8+0xec>)
 8016d0c:	881b      	ldrh	r3, [r3, #0]
 8016d0e:	3b01      	subs	r3, #1
 8016d10:	b29a      	uxth	r2, r3
 8016d12:	4b16      	ldr	r3, [pc, #88]	; (8016d6c <ADC_options_screen_S8+0xec>)
 8016d14:	801a      	strh	r2, [r3, #0]
 8016d16:	e019      	b.n	8016d4c <ADC_options_screen_S8+0xcc>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016d18:	4b15      	ldr	r3, [pc, #84]	; (8016d70 <ADC_options_screen_S8+0xf0>)
 8016d1a:	881b      	ldrh	r3, [r3, #0]
 8016d1c:	2b05      	cmp	r3, #5
 8016d1e:	d917      	bls.n	8016d50 <ADC_options_screen_S8+0xd0>
 8016d20:	4b13      	ldr	r3, [pc, #76]	; (8016d70 <ADC_options_screen_S8+0xf0>)
 8016d22:	881b      	ldrh	r3, [r3, #0]
 8016d24:	3b01      	subs	r3, #1
 8016d26:	b29a      	uxth	r2, r3
 8016d28:	4b11      	ldr	r3, [pc, #68]	; (8016d70 <ADC_options_screen_S8+0xf0>)
 8016d2a:	801a      	strh	r2, [r3, #0]
 8016d2c:	e010      	b.n	8016d50 <ADC_options_screen_S8+0xd0>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016d2e:	4b11      	ldr	r3, [pc, #68]	; (8016d74 <ADC_options_screen_S8+0xf4>)
 8016d30:	881b      	ldrh	r3, [r3, #0]
 8016d32:	2b05      	cmp	r3, #5
 8016d34:	d90e      	bls.n	8016d54 <ADC_options_screen_S8+0xd4>
 8016d36:	4b0f      	ldr	r3, [pc, #60]	; (8016d74 <ADC_options_screen_S8+0xf4>)
 8016d38:	881b      	ldrh	r3, [r3, #0]
 8016d3a:	3b01      	subs	r3, #1
 8016d3c:	b29a      	uxth	r2, r3
 8016d3e:	4b0d      	ldr	r3, [pc, #52]	; (8016d74 <ADC_options_screen_S8+0xf4>)
 8016d40:	801a      	strh	r2, [r3, #0]
 8016d42:	e007      	b.n	8016d54 <ADC_options_screen_S8+0xd4>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016d44:	bf00      	nop
 8016d46:	e006      	b.n	8016d56 <ADC_options_screen_S8+0xd6>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016d48:	bf00      	nop
 8016d4a:	e004      	b.n	8016d56 <ADC_options_screen_S8+0xd6>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016d4c:	bf00      	nop
 8016d4e:	e002      	b.n	8016d56 <ADC_options_screen_S8+0xd6>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016d50:	bf00      	nop
 8016d52:	e000      	b.n	8016d56 <ADC_options_screen_S8+0xd6>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016d54:	bf00      	nop
	}
}
 8016d56:	bf00      	nop
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	20000864 	.word	0x20000864
 8016d60:	2000009a 	.word	0x2000009a
 8016d64:	2000009b 	.word	0x2000009b
 8016d68:	200008af 	.word	0x200008af
 8016d6c:	2000009c 	.word	0x2000009c
 8016d70:	2000217c 	.word	0x2000217c
 8016d74:	20002114 	.word	0x20002114

08016d78 <ADC_options_screen_S5>:


// FORWARD
void ADC_options_screen_S5(void)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016d7c:	4b36      	ldr	r3, [pc, #216]	; (8016e58 <ADC_options_screen_S5+0xe0>)
 8016d7e:	781b      	ldrb	r3, [r3, #0]
 8016d80:	2b05      	cmp	r3, #5
 8016d82:	d867      	bhi.n	8016e54 <ADC_options_screen_S5+0xdc>
 8016d84:	a201      	add	r2, pc, #4	; (adr r2, 8016d8c <ADC_options_screen_S5+0x14>)
 8016d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d8a:	bf00      	nop
 8016d8c:	08016da5 	.word	0x08016da5
 8016d90:	08016dcf 	.word	0x08016dcf
 8016d94:	08016de5 	.word	0x08016de5
 8016d98:	08016dfb 	.word	0x08016dfb
 8016d9c:	08016e13 	.word	0x08016e13
 8016da0:	08016e2b 	.word	0x08016e2b
	{
		case 0: if(PGA_GAIN<8)PGA_GAIN++;
 8016da4:	4b2d      	ldr	r3, [pc, #180]	; (8016e5c <ADC_options_screen_S5+0xe4>)
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	2b07      	cmp	r3, #7
 8016daa:	d805      	bhi.n	8016db8 <ADC_options_screen_S5+0x40>
 8016dac:	4b2b      	ldr	r3, [pc, #172]	; (8016e5c <ADC_options_screen_S5+0xe4>)
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	3301      	adds	r3, #1
 8016db2:	b2da      	uxtb	r2, r3
 8016db4:	4b29      	ldr	r3, [pc, #164]	; (8016e5c <ADC_options_screen_S5+0xe4>)
 8016db6:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016db8:	4b28      	ldr	r3, [pc, #160]	; (8016e5c <ADC_options_screen_S5+0xe4>)
 8016dba:	781b      	ldrb	r3, [r3, #0]
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7ea fc67 	bl	8001690 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016dc2:	4b27      	ldr	r3, [pc, #156]	; (8016e60 <ADC_options_screen_S5+0xe8>)
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f7ea f9c0 	bl	800114c <ADC_Conversion>
		break;
 8016dcc:	e042      	b.n	8016e54 <ADC_options_screen_S5+0xdc>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016dce:	4b24      	ldr	r3, [pc, #144]	; (8016e60 <ADC_options_screen_S5+0xe8>)
 8016dd0:	781b      	ldrb	r3, [r3, #0]
 8016dd2:	2b0e      	cmp	r3, #14
 8016dd4:	d835      	bhi.n	8016e42 <ADC_options_screen_S5+0xca>
 8016dd6:	4b22      	ldr	r3, [pc, #136]	; (8016e60 <ADC_options_screen_S5+0xe8>)
 8016dd8:	781b      	ldrb	r3, [r3, #0]
 8016dda:	3301      	adds	r3, #1
 8016ddc:	b2da      	uxtb	r2, r3
 8016dde:	4b20      	ldr	r3, [pc, #128]	; (8016e60 <ADC_options_screen_S5+0xe8>)
 8016de0:	701a      	strb	r2, [r3, #0]
 8016de2:	e02e      	b.n	8016e42 <ADC_options_screen_S5+0xca>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016de4:	4b1f      	ldr	r3, [pc, #124]	; (8016e64 <ADC_options_screen_S5+0xec>)
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	2b01      	cmp	r3, #1
 8016dea:	d82c      	bhi.n	8016e46 <ADC_options_screen_S5+0xce>
 8016dec:	4b1d      	ldr	r3, [pc, #116]	; (8016e64 <ADC_options_screen_S5+0xec>)
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	3301      	adds	r3, #1
 8016df2:	b2da      	uxtb	r2, r3
 8016df4:	4b1b      	ldr	r3, [pc, #108]	; (8016e64 <ADC_options_screen_S5+0xec>)
 8016df6:	701a      	strb	r2, [r3, #0]
 8016df8:	e025      	b.n	8016e46 <ADC_options_screen_S5+0xce>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016dfa:	4b1b      	ldr	r3, [pc, #108]	; (8016e68 <ADC_options_screen_S5+0xf0>)
 8016dfc:	881b      	ldrh	r3, [r3, #0]
 8016dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e02:	d222      	bcs.n	8016e4a <ADC_options_screen_S5+0xd2>
 8016e04:	4b18      	ldr	r3, [pc, #96]	; (8016e68 <ADC_options_screen_S5+0xf0>)
 8016e06:	881b      	ldrh	r3, [r3, #0]
 8016e08:	3301      	adds	r3, #1
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	4b16      	ldr	r3, [pc, #88]	; (8016e68 <ADC_options_screen_S5+0xf0>)
 8016e0e:	801a      	strh	r2, [r3, #0]
 8016e10:	e01b      	b.n	8016e4a <ADC_options_screen_S5+0xd2>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016e12:	4b16      	ldr	r3, [pc, #88]	; (8016e6c <ADC_options_screen_S5+0xf4>)
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e1a:	d218      	bcs.n	8016e4e <ADC_options_screen_S5+0xd6>
 8016e1c:	4b13      	ldr	r3, [pc, #76]	; (8016e6c <ADC_options_screen_S5+0xf4>)
 8016e1e:	881b      	ldrh	r3, [r3, #0]
 8016e20:	3301      	adds	r3, #1
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	4b11      	ldr	r3, [pc, #68]	; (8016e6c <ADC_options_screen_S5+0xf4>)
 8016e26:	801a      	strh	r2, [r3, #0]
 8016e28:	e011      	b.n	8016e4e <ADC_options_screen_S5+0xd6>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016e2a:	4b11      	ldr	r3, [pc, #68]	; (8016e70 <ADC_options_screen_S5+0xf8>)
 8016e2c:	881b      	ldrh	r3, [r3, #0]
 8016e2e:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8016e32:	d20e      	bcs.n	8016e52 <ADC_options_screen_S5+0xda>
 8016e34:	4b0e      	ldr	r3, [pc, #56]	; (8016e70 <ADC_options_screen_S5+0xf8>)
 8016e36:	881b      	ldrh	r3, [r3, #0]
 8016e38:	3301      	adds	r3, #1
 8016e3a:	b29a      	uxth	r2, r3
 8016e3c:	4b0c      	ldr	r3, [pc, #48]	; (8016e70 <ADC_options_screen_S5+0xf8>)
 8016e3e:	801a      	strh	r2, [r3, #0]
 8016e40:	e007      	b.n	8016e52 <ADC_options_screen_S5+0xda>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016e42:	bf00      	nop
 8016e44:	e006      	b.n	8016e54 <ADC_options_screen_S5+0xdc>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016e46:	bf00      	nop
 8016e48:	e004      	b.n	8016e54 <ADC_options_screen_S5+0xdc>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016e4a:	bf00      	nop
 8016e4c:	e002      	b.n	8016e54 <ADC_options_screen_S5+0xdc>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016e4e:	bf00      	nop
 8016e50:	e000      	b.n	8016e54 <ADC_options_screen_S5+0xdc>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016e52:	bf00      	nop
	}
}
 8016e54:	bf00      	nop
 8016e56:	bd80      	pop	{r7, pc}
 8016e58:	20000864 	.word	0x20000864
 8016e5c:	2000009a 	.word	0x2000009a
 8016e60:	2000009b 	.word	0x2000009b
 8016e64:	200008af 	.word	0x200008af
 8016e68:	2000009c 	.word	0x2000009c
 8016e6c:	2000217c 	.word	0x2000217c
 8016e70:	20002114 	.word	0x20002114

08016e74 <Auto_Off_option_screen_func>:
uint16_t off_min = 0;



void Auto_Off_option_screen_func(void)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af02      	add	r7, sp, #8
	RTC_view();
 8016e7a:	f000 fe39 	bl	8017af0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016e7e:	4911      	ldr	r1, [pc, #68]	; (8016ec4 <Auto_Off_option_screen_func+0x50>)
 8016e80:	4811      	ldr	r0, [pc, #68]	; (8016ec8 <Auto_Off_option_screen_func+0x54>)
 8016e82:	f7fe fe27 	bl	8015ad4 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 20, 60, "Автовыключение:");
 8016e86:	4b11      	ldr	r3, [pc, #68]	; (8016ecc <Auto_Off_option_screen_func+0x58>)
 8016e88:	223c      	movs	r2, #60	; 0x3c
 8016e8a:	2114      	movs	r1, #20
 8016e8c:	480e      	ldr	r0, [pc, #56]	; (8016ec8 <Auto_Off_option_screen_func+0x54>)
 8016e8e:	f7fe fd7f 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", Auto_Off_Time);
 8016e92:	4b0f      	ldr	r3, [pc, #60]	; (8016ed0 <Auto_Off_option_screen_func+0x5c>)
 8016e94:	881b      	ldrh	r3, [r3, #0]
 8016e96:	461a      	mov	r2, r3
 8016e98:	490e      	ldr	r1, [pc, #56]	; (8016ed4 <Auto_Off_option_screen_func+0x60>)
 8016e9a:	480f      	ldr	r0, [pc, #60]	; (8016ed8 <Auto_Off_option_screen_func+0x64>)
 8016e9c:	f006 ff78 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(180, 60, RAM, edit_param, 0);
 8016ea0:	4b0e      	ldr	r3, [pc, #56]	; (8016edc <Auto_Off_option_screen_func+0x68>)
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	9200      	str	r2, [sp, #0]
 8016ea8:	4a0b      	ldr	r2, [pc, #44]	; (8016ed8 <Auto_Off_option_screen_func+0x64>)
 8016eaa:	213c      	movs	r1, #60	; 0x3c
 8016eac:	20b4      	movs	r0, #180	; 0xb4
 8016eae:	f7eb ffef 	bl	8002e90 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016eb2:	4805      	ldr	r0, [pc, #20]	; (8016ec8 <Auto_Off_option_screen_func+0x54>)
 8016eb4:	f7fd ffd1 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016eb8:	4803      	ldr	r0, [pc, #12]	; (8016ec8 <Auto_Off_option_screen_func+0x54>)
 8016eba:	f7fd ff5b 	bl	8014d74 <u8g2_ClearBuffer>
}
 8016ebe:	bf00      	nop
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}
 8016ec4:	08027258 	.word	0x08027258
 8016ec8:	20001fd4 	.word	0x20001fd4
 8016ecc:	080221e8 	.word	0x080221e8
 8016ed0:	200008b0 	.word	0x200008b0
 8016ed4:	08022208 	.word	0x08022208
 8016ed8:	20002090 	.word	0x20002090
 8016edc:	20000864 	.word	0x20000864

08016ee0 <Auto_Off_option_screen_S9>:



// MENU
void Auto_Off_option_screen_S9(void)
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016ee4:	4b06      	ldr	r3, [pc, #24]	; (8016f00 <Auto_Off_option_screen_S9+0x20>)
 8016ee6:	2208      	movs	r2, #8
 8016ee8:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016eea:	4b06      	ldr	r3, [pc, #24]	; (8016f04 <Auto_Off_option_screen_S9+0x24>)
 8016eec:	22ff      	movs	r2, #255	; 0xff
 8016eee:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8016ef0:	4b05      	ldr	r3, [pc, #20]	; (8016f08 <Auto_Off_option_screen_S9+0x28>)
 8016ef2:	2203      	movs	r2, #3
 8016ef4:	701a      	strb	r2, [r3, #0]
}
 8016ef6:	bf00      	nop
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efe:	4770      	bx	lr
 8016f00:	2000004c 	.word	0x2000004c
 8016f04:	200003a8 	.word	0x200003a8
 8016f08:	200003a9 	.word	0x200003a9

08016f0c <Auto_Off_option_screen_S8>:

// BACKWARD
void Auto_Off_option_screen_S8(void)
{ if(Auto_Off_Time>1)Auto_Off_Time--; }
 8016f0c:	b480      	push	{r7}
 8016f0e:	af00      	add	r7, sp, #0
 8016f10:	4b07      	ldr	r3, [pc, #28]	; (8016f30 <Auto_Off_option_screen_S8+0x24>)
 8016f12:	881b      	ldrh	r3, [r3, #0]
 8016f14:	2b01      	cmp	r3, #1
 8016f16:	d905      	bls.n	8016f24 <Auto_Off_option_screen_S8+0x18>
 8016f18:	4b05      	ldr	r3, [pc, #20]	; (8016f30 <Auto_Off_option_screen_S8+0x24>)
 8016f1a:	881b      	ldrh	r3, [r3, #0]
 8016f1c:	3b01      	subs	r3, #1
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	4b03      	ldr	r3, [pc, #12]	; (8016f30 <Auto_Off_option_screen_S8+0x24>)
 8016f22:	801a      	strh	r2, [r3, #0]
 8016f24:	bf00      	nop
 8016f26:	46bd      	mov	sp, r7
 8016f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2c:	4770      	bx	lr
 8016f2e:	bf00      	nop
 8016f30:	200008b0 	.word	0x200008b0

08016f34 <Auto_Off_option_screen_S5>:

// FORWARD
void Auto_Off_option_screen_S5(void)
{ if(Auto_Off_Time<120)Auto_Off_Time++; }
 8016f34:	b480      	push	{r7}
 8016f36:	af00      	add	r7, sp, #0
 8016f38:	4b07      	ldr	r3, [pc, #28]	; (8016f58 <Auto_Off_option_screen_S5+0x24>)
 8016f3a:	881b      	ldrh	r3, [r3, #0]
 8016f3c:	2b77      	cmp	r3, #119	; 0x77
 8016f3e:	d805      	bhi.n	8016f4c <Auto_Off_option_screen_S5+0x18>
 8016f40:	4b05      	ldr	r3, [pc, #20]	; (8016f58 <Auto_Off_option_screen_S5+0x24>)
 8016f42:	881b      	ldrh	r3, [r3, #0]
 8016f44:	3301      	adds	r3, #1
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	4b03      	ldr	r3, [pc, #12]	; (8016f58 <Auto_Off_option_screen_S5+0x24>)
 8016f4a:	801a      	strh	r2, [r3, #0]
 8016f4c:	bf00      	nop
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f54:	4770      	bx	lr
 8016f56:	bf00      	nop
 8016f58:	200008b0 	.word	0x200008b0

08016f5c <Auto_OFF_process>:




void Auto_OFF_process(void)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	af00      	add	r7, sp, #0
	if(Auto_Off_Time!=0)
 8016f60:	4b17      	ldr	r3, [pc, #92]	; (8016fc0 <Auto_OFF_process+0x64>)
 8016f62:	881b      	ldrh	r3, [r3, #0]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d025      	beq.n	8016fb4 <Auto_OFF_process+0x58>
	{
		if(++off_sec>=59){off_min++;off_sec=0;}
 8016f68:	4b16      	ldr	r3, [pc, #88]	; (8016fc4 <Auto_OFF_process+0x68>)
 8016f6a:	881b      	ldrh	r3, [r3, #0]
 8016f6c:	3301      	adds	r3, #1
 8016f6e:	b29a      	uxth	r2, r3
 8016f70:	4b14      	ldr	r3, [pc, #80]	; (8016fc4 <Auto_OFF_process+0x68>)
 8016f72:	801a      	strh	r2, [r3, #0]
 8016f74:	4b13      	ldr	r3, [pc, #76]	; (8016fc4 <Auto_OFF_process+0x68>)
 8016f76:	881b      	ldrh	r3, [r3, #0]
 8016f78:	2b3a      	cmp	r3, #58	; 0x3a
 8016f7a:	d908      	bls.n	8016f8e <Auto_OFF_process+0x32>
 8016f7c:	4b12      	ldr	r3, [pc, #72]	; (8016fc8 <Auto_OFF_process+0x6c>)
 8016f7e:	881b      	ldrh	r3, [r3, #0]
 8016f80:	3301      	adds	r3, #1
 8016f82:	b29a      	uxth	r2, r3
 8016f84:	4b10      	ldr	r3, [pc, #64]	; (8016fc8 <Auto_OFF_process+0x6c>)
 8016f86:	801a      	strh	r2, [r3, #0]
 8016f88:	4b0e      	ldr	r3, [pc, #56]	; (8016fc4 <Auto_OFF_process+0x68>)
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	801a      	strh	r2, [r3, #0]

		if(screen != Off_screen)
 8016f8e:	4b0f      	ldr	r3, [pc, #60]	; (8016fcc <Auto_OFF_process+0x70>)
 8016f90:	781b      	ldrb	r3, [r3, #0]
 8016f92:	2b03      	cmp	r3, #3
 8016f94:	d00e      	beq.n	8016fb4 <Auto_OFF_process+0x58>
		{
			if(off_min>=Auto_Off_Time)
 8016f96:	4b0c      	ldr	r3, [pc, #48]	; (8016fc8 <Auto_OFF_process+0x6c>)
 8016f98:	881a      	ldrh	r2, [r3, #0]
 8016f9a:	4b09      	ldr	r3, [pc, #36]	; (8016fc0 <Auto_OFF_process+0x64>)
 8016f9c:	881b      	ldrh	r3, [r3, #0]
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	d308      	bcc.n	8016fb4 <Auto_OFF_process+0x58>
			{
				old_active_string=0xFF;
 8016fa2:	4b0b      	ldr	r3, [pc, #44]	; (8016fd0 <Auto_OFF_process+0x74>)
 8016fa4:	22ff      	movs	r2, #255	; 0xff
 8016fa6:	701a      	strb	r2, [r3, #0]
				OnOffCntr = on_off_time;
 8016fa8:	4b0a      	ldr	r3, [pc, #40]	; (8016fd4 <Auto_OFF_process+0x78>)
 8016faa:	22c8      	movs	r2, #200	; 0xc8
 8016fac:	801a      	strh	r2, [r3, #0]
				screen = Off_screen;
 8016fae:	4b07      	ldr	r3, [pc, #28]	; (8016fcc <Auto_OFF_process+0x70>)
 8016fb0:	2203      	movs	r2, #3
 8016fb2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	sleep(1000);
 8016fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016fb8:	f7ec f914 	bl	80031e4 <sleep>
}
 8016fbc:	bf00      	nop
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	200008b0 	.word	0x200008b0
 8016fc4:	20001c4c 	.word	0x20001c4c
 8016fc8:	20001c4e 	.word	0x20001c4e
 8016fcc:	2000004c 	.word	0x2000004c
 8016fd0:	200003a8 	.word	0x200003a8
 8016fd4:	2000004a 	.word	0x2000004a

08016fd8 <Display_options_screen_func>:
uint8_t temp_light=0;
uint8_t soft_onoff_cntr=0;


void Display_options_screen_func(void)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	RTC_view();
 8016fde:	f000 fd87 	bl	8017af0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016fe2:	494e      	ldr	r1, [pc, #312]	; (801711c <Display_options_screen_func+0x144>)
 8016fe4:	484e      	ldr	r0, [pc, #312]	; (8017120 <Display_options_screen_func+0x148>)
 8016fe6:	f7fe fd75 	bl	8015ad4 <u8g2_SetFont>

	// brightness
	u8g2_DrawUTF8(&u8g2, 20, 60, "Яркость:");
 8016fea:	4b4e      	ldr	r3, [pc, #312]	; (8017124 <Display_options_screen_func+0x14c>)
 8016fec:	223c      	movs	r2, #60	; 0x3c
 8016fee:	2114      	movs	r1, #20
 8016ff0:	484b      	ldr	r0, [pc, #300]	; (8017120 <Display_options_screen_func+0x148>)
 8016ff2:	f7fe fccd 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_brightness);
 8016ff6:	4b4c      	ldr	r3, [pc, #304]	; (8017128 <Display_options_screen_func+0x150>)
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	494b      	ldr	r1, [pc, #300]	; (801712c <Display_options_screen_func+0x154>)
 8016ffe:	484c      	ldr	r0, [pc, #304]	; (8017130 <Display_options_screen_func+0x158>)
 8017000:	f006 fec6 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(170, 60, RAM, edit_param, 0);
 8017004:	4b4b      	ldr	r3, [pc, #300]	; (8017134 <Display_options_screen_func+0x15c>)
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	2200      	movs	r2, #0
 801700a:	9200      	str	r2, [sp, #0]
 801700c:	4a48      	ldr	r2, [pc, #288]	; (8017130 <Display_options_screen_func+0x158>)
 801700e:	213c      	movs	r1, #60	; 0x3c
 8017010:	20aa      	movs	r0, #170	; 0xaa
 8017012:	f7eb ff3d 	bl	8002e90 <Blink_Edit_Parameter>
	// contrast
	u8g2_DrawUTF8(&u8g2, 20, 80, "Контрастность:");
 8017016:	4b48      	ldr	r3, [pc, #288]	; (8017138 <Display_options_screen_func+0x160>)
 8017018:	2250      	movs	r2, #80	; 0x50
 801701a:	2114      	movs	r1, #20
 801701c:	4840      	ldr	r0, [pc, #256]	; (8017120 <Display_options_screen_func+0x148>)
 801701e:	f7fe fcb7 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_contrast);
 8017022:	4b46      	ldr	r3, [pc, #280]	; (801713c <Display_options_screen_func+0x164>)
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	461a      	mov	r2, r3
 8017028:	4940      	ldr	r1, [pc, #256]	; (801712c <Display_options_screen_func+0x154>)
 801702a:	4841      	ldr	r0, [pc, #260]	; (8017130 <Display_options_screen_func+0x158>)
 801702c:	f006 feb0 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(170, 80, RAM, edit_param, 1);
 8017030:	4b40      	ldr	r3, [pc, #256]	; (8017134 <Display_options_screen_func+0x15c>)
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	2201      	movs	r2, #1
 8017036:	9200      	str	r2, [sp, #0]
 8017038:	4a3d      	ldr	r2, [pc, #244]	; (8017130 <Display_options_screen_func+0x158>)
 801703a:	2150      	movs	r1, #80	; 0x50
 801703c:	20aa      	movs	r0, #170	; 0xaa
 801703e:	f7eb ff27 	bl	8002e90 <Blink_Edit_Parameter>
	// delay
	u8g2_DrawUTF8(&u8g2, 20, 100, "Длительность:");
 8017042:	4b3f      	ldr	r3, [pc, #252]	; (8017140 <Display_options_screen_func+0x168>)
 8017044:	2264      	movs	r2, #100	; 0x64
 8017046:	2114      	movs	r1, #20
 8017048:	4835      	ldr	r0, [pc, #212]	; (8017120 <Display_options_screen_func+0x148>)
 801704a:	f7fe fca1 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", light_delay);
 801704e:	4b3d      	ldr	r3, [pc, #244]	; (8017144 <Display_options_screen_func+0x16c>)
 8017050:	881b      	ldrh	r3, [r3, #0]
 8017052:	461a      	mov	r2, r3
 8017054:	4935      	ldr	r1, [pc, #212]	; (801712c <Display_options_screen_func+0x154>)
 8017056:	4836      	ldr	r0, [pc, #216]	; (8017130 <Display_options_screen_func+0x158>)
 8017058:	f006 fe9a 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(170, 100, RAM, edit_param, 2);
 801705c:	4b35      	ldr	r3, [pc, #212]	; (8017134 <Display_options_screen_func+0x15c>)
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	2202      	movs	r2, #2
 8017062:	9200      	str	r2, [sp, #0]
 8017064:	4a32      	ldr	r2, [pc, #200]	; (8017130 <Display_options_screen_func+0x158>)
 8017066:	2164      	movs	r1, #100	; 0x64
 8017068:	20aa      	movs	r0, #170	; 0xaa
 801706a:	f7eb ff11 	bl	8002e90 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 801706e:	482c      	ldr	r0, [pc, #176]	; (8017120 <Display_options_screen_func+0x148>)
 8017070:	f7fd fef3 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017074:	482a      	ldr	r0, [pc, #168]	; (8017120 <Display_options_screen_func+0x148>)
 8017076:	f7fd fe7d 	bl	8014d74 <u8g2_ClearBuffer>

	TIM2->CCR1=temp_light;//display_brightness;
 801707a:	4b33      	ldr	r3, [pc, #204]	; (8017148 <Display_options_screen_func+0x170>)
 801707c:	781a      	ldrb	r2, [r3, #0]
 801707e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017082:	635a      	str	r2, [r3, #52]	; 0x34

	// Vbias
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8017084:	2200      	movs	r2, #0
 8017086:	f44f 7100 	mov.w	r1, #512	; 0x200
 801708a:	4830      	ldr	r0, [pc, #192]	; (801714c <Display_options_screen_func+0x174>)
 801708c:	f7f3 f8e8 	bl	800a260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8017090:	2200      	movs	r2, #0
 8017092:	2101      	movs	r1, #1
 8017094:	482e      	ldr	r0, [pc, #184]	; (8017150 <Display_options_screen_func+0x178>)
 8017096:	f7f3 f8e3 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+Vbias;
 801709a:	4b2e      	ldr	r3, [pc, #184]	; (8017154 <Display_options_screen_func+0x17c>)
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	3b18      	subs	r3, #24
 80170a0:	b2db      	uxtb	r3, r3
 80170a2:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80170a4:	463a      	mov	r2, r7
 80170a6:	1d39      	adds	r1, r7, #4
 80170a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80170ac:	9300      	str	r3, [sp, #0]
 80170ae:	2301      	movs	r3, #1
 80170b0:	4829      	ldr	r0, [pc, #164]	; (8017158 <Display_options_screen_func+0x180>)
 80170b2:	f7f7 f990 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80170b6:	2201      	movs	r2, #1
 80170b8:	2101      	movs	r1, #1
 80170ba:	4825      	ldr	r0, [pc, #148]	; (8017150 <Display_options_screen_func+0x178>)
 80170bc:	f7f3 f8d0 	bl	800a260 <HAL_GPIO_WritePin>
	// Temp compensation
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80170c0:	2200      	movs	r2, #0
 80170c2:	2101      	movs	r1, #1
 80170c4:	4822      	ldr	r0, [pc, #136]	; (8017150 <Display_options_screen_func+0x178>)
 80170c6:	f7f3 f8cb 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 80170ca:	2381      	movs	r3, #129	; 0x81
 80170cc:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80170ce:	463a      	mov	r2, r7
 80170d0:	1d39      	adds	r1, r7, #4
 80170d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80170d6:	9300      	str	r3, [sp, #0]
 80170d8:	2301      	movs	r3, #1
 80170da:	481f      	ldr	r0, [pc, #124]	; (8017158 <Display_options_screen_func+0x180>)
 80170dc:	f7f7 f97b 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 80170e0:	2201      	movs	r2, #1
 80170e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80170e6:	4819      	ldr	r0, [pc, #100]	; (801714c <Display_options_screen_func+0x174>)
 80170e8:	f7f3 f8ba 	bl	800a260 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 80170ec:	4b13      	ldr	r3, [pc, #76]	; (801713c <Display_options_screen_func+0x164>)
 80170ee:	781b      	ldrb	r3, [r3, #0]
 80170f0:	337d      	adds	r3, #125	; 0x7d
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80170f6:	463a      	mov	r2, r7
 80170f8:	1d39      	adds	r1, r7, #4
 80170fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80170fe:	9300      	str	r3, [sp, #0]
 8017100:	2301      	movs	r3, #1
 8017102:	4815      	ldr	r0, [pc, #84]	; (8017158 <Display_options_screen_func+0x180>)
 8017104:	f7f7 f967 	bl	800e3d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8017108:	2201      	movs	r2, #1
 801710a:	2101      	movs	r1, #1
 801710c:	4810      	ldr	r0, [pc, #64]	; (8017150 <Display_options_screen_func+0x178>)
 801710e:	f7f3 f8a7 	bl	800a260 <HAL_GPIO_WritePin>
}
 8017112:	bf00      	nop
 8017114:	3708      	adds	r7, #8
 8017116:	46bd      	mov	sp, r7
 8017118:	bd80      	pop	{r7, pc}
 801711a:	bf00      	nop
 801711c:	08027258 	.word	0x08027258
 8017120:	20001fd4 	.word	0x20001fd4
 8017124:	0802220c 	.word	0x0802220c
 8017128:	20000098 	.word	0x20000098
 801712c:	0802221c 	.word	0x0802221c
 8017130:	20002090 	.word	0x20002090
 8017134:	20000864 	.word	0x20000864
 8017138:	08022220 	.word	0x08022220
 801713c:	20000099 	.word	0x20000099
 8017140:	0802223c 	.word	0x0802223c
 8017144:	200000b0 	.word	0x200000b0
 8017148:	20001c54 	.word	0x20001c54
 801714c:	48000400 	.word	0x48000400
 8017150:	48001000 	.word	0x48001000
 8017154:	20000378 	.word	0x20000378
 8017158:	20001f70 	.word	0x20001f70

0801715c <Display_options_screen_S9>:


// MENU
void Display_options_screen_S9(void)
{
 801715c:	b480      	push	{r7}
 801715e:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8017160:	4b06      	ldr	r3, [pc, #24]	; (801717c <Display_options_screen_S9+0x20>)
 8017162:	2208      	movs	r2, #8
 8017164:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8017166:	4b06      	ldr	r3, [pc, #24]	; (8017180 <Display_options_screen_S9+0x24>)
 8017168:	22ff      	movs	r2, #255	; 0xff
 801716a:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 801716c:	4b05      	ldr	r3, [pc, #20]	; (8017184 <Display_options_screen_S9+0x28>)
 801716e:	2200      	movs	r2, #0
 8017170:	701a      	strb	r2, [r3, #0]
}
 8017172:	bf00      	nop
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr
 801717c:	2000004c 	.word	0x2000004c
 8017180:	200003a8 	.word	0x200003a8
 8017184:	200003a9 	.word	0x200003a9

08017188 <Display_options_screen_S6>:

// DOWN
void Display_options_screen_S6(void)
{
 8017188:	b480      	push	{r7}
 801718a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801718c:	4b07      	ldr	r3, [pc, #28]	; (80171ac <Display_options_screen_S6+0x24>)
 801718e:	781b      	ldrb	r3, [r3, #0]
 8017190:	2b01      	cmp	r3, #1
 8017192:	d805      	bhi.n	80171a0 <Display_options_screen_S6+0x18>
 8017194:	4b05      	ldr	r3, [pc, #20]	; (80171ac <Display_options_screen_S6+0x24>)
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	3301      	adds	r3, #1
 801719a:	b2da      	uxtb	r2, r3
 801719c:	4b03      	ldr	r3, [pc, #12]	; (80171ac <Display_options_screen_S6+0x24>)
 801719e:	701a      	strb	r2, [r3, #0]
}
 80171a0:	bf00      	nop
 80171a2:	46bd      	mov	sp, r7
 80171a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a8:	4770      	bx	lr
 80171aa:	bf00      	nop
 80171ac:	20000864 	.word	0x20000864

080171b0 <Display_options_screen_S7>:

// UP
void Display_options_screen_S7(void)
{
 80171b0:	b480      	push	{r7}
 80171b2:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80171b4:	4b07      	ldr	r3, [pc, #28]	; (80171d4 <Display_options_screen_S7+0x24>)
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d005      	beq.n	80171c8 <Display_options_screen_S7+0x18>
 80171bc:	4b05      	ldr	r3, [pc, #20]	; (80171d4 <Display_options_screen_S7+0x24>)
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	3b01      	subs	r3, #1
 80171c2:	b2da      	uxtb	r2, r3
 80171c4:	4b03      	ldr	r3, [pc, #12]	; (80171d4 <Display_options_screen_S7+0x24>)
 80171c6:	701a      	strb	r2, [r3, #0]
}
 80171c8:	bf00      	nop
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr
 80171d2:	bf00      	nop
 80171d4:	20000864 	.word	0x20000864

080171d8 <Display_options_screen_S4>:

// ENTER
void Display_options_screen_S4(void)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	af00      	add	r7, sp, #0
	switch(edit_param)
 80171dc:	4b10      	ldr	r3, [pc, #64]	; (8017220 <Display_options_screen_S4+0x48>)
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	2b02      	cmp	r3, #2
 80171e2:	d014      	beq.n	801720e <Display_options_screen_S4+0x36>
 80171e4:	2b02      	cmp	r3, #2
 80171e6:	dc19      	bgt.n	801721c <Display_options_screen_S4+0x44>
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d002      	beq.n	80171f2 <Display_options_screen_S4+0x1a>
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	d007      	beq.n	8017200 <Display_options_screen_S4+0x28>
	{
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
		case 2: Save_Settings(light_delay_tag, light_delay); break;
	}
}
 80171f0:	e014      	b.n	801721c <Display_options_screen_S4+0x44>
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
 80171f2:	4b0c      	ldr	r3, [pc, #48]	; (8017224 <Display_options_screen_S4+0x4c>)
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	4619      	mov	r1, r3
 80171f8:	2001      	movs	r0, #1
 80171fa:	f7ee fa75 	bl	80056e8 <Save_Settings>
 80171fe:	e00d      	b.n	801721c <Display_options_screen_S4+0x44>
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
 8017200:	4b09      	ldr	r3, [pc, #36]	; (8017228 <Display_options_screen_S4+0x50>)
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	4619      	mov	r1, r3
 8017206:	2002      	movs	r0, #2
 8017208:	f7ee fa6e 	bl	80056e8 <Save_Settings>
 801720c:	e006      	b.n	801721c <Display_options_screen_S4+0x44>
		case 2: Save_Settings(light_delay_tag, light_delay); break;
 801720e:	4b07      	ldr	r3, [pc, #28]	; (801722c <Display_options_screen_S4+0x54>)
 8017210:	881b      	ldrh	r3, [r3, #0]
 8017212:	4619      	mov	r1, r3
 8017214:	2010      	movs	r0, #16
 8017216:	f7ee fa67 	bl	80056e8 <Save_Settings>
 801721a:	bf00      	nop
}
 801721c:	bf00      	nop
 801721e:	bd80      	pop	{r7, pc}
 8017220:	20000864 	.word	0x20000864
 8017224:	20000098 	.word	0x20000098
 8017228:	20000099 	.word	0x20000099
 801722c:	200000b0 	.word	0x200000b0

08017230 <Display_options_screen_S8>:



// BACKWARD
void Display_options_screen_S8(void)
{
 8017230:	b480      	push	{r7}
 8017232:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017234:	4b1a      	ldr	r3, [pc, #104]	; (80172a0 <Display_options_screen_S8+0x70>)
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	2b02      	cmp	r3, #2
 801723a:	d01c      	beq.n	8017276 <Display_options_screen_S8+0x46>
 801723c:	2b02      	cmp	r3, #2
 801723e:	dc2a      	bgt.n	8017296 <Display_options_screen_S8+0x66>
 8017240:	2b00      	cmp	r3, #0
 8017242:	d002      	beq.n	801724a <Display_options_screen_S8+0x1a>
 8017244:	2b01      	cmp	r3, #1
 8017246:	d00b      	beq.n	8017260 <Display_options_screen_S8+0x30>
	{
		case 0: if(display_brightness>0)display_brightness--; break;
		case 1: if(display_contrast>0)display_contrast--; break;
		case 2: if(light_delay>0)light_delay--; break;
	}
}
 8017248:	e025      	b.n	8017296 <Display_options_screen_S8+0x66>
		case 0: if(display_brightness>0)display_brightness--; break;
 801724a:	4b16      	ldr	r3, [pc, #88]	; (80172a4 <Display_options_screen_S8+0x74>)
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d01c      	beq.n	801728c <Display_options_screen_S8+0x5c>
 8017252:	4b14      	ldr	r3, [pc, #80]	; (80172a4 <Display_options_screen_S8+0x74>)
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	3b01      	subs	r3, #1
 8017258:	b2da      	uxtb	r2, r3
 801725a:	4b12      	ldr	r3, [pc, #72]	; (80172a4 <Display_options_screen_S8+0x74>)
 801725c:	701a      	strb	r2, [r3, #0]
 801725e:	e015      	b.n	801728c <Display_options_screen_S8+0x5c>
		case 1: if(display_contrast>0)display_contrast--; break;
 8017260:	4b11      	ldr	r3, [pc, #68]	; (80172a8 <Display_options_screen_S8+0x78>)
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d013      	beq.n	8017290 <Display_options_screen_S8+0x60>
 8017268:	4b0f      	ldr	r3, [pc, #60]	; (80172a8 <Display_options_screen_S8+0x78>)
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	3b01      	subs	r3, #1
 801726e:	b2da      	uxtb	r2, r3
 8017270:	4b0d      	ldr	r3, [pc, #52]	; (80172a8 <Display_options_screen_S8+0x78>)
 8017272:	701a      	strb	r2, [r3, #0]
 8017274:	e00c      	b.n	8017290 <Display_options_screen_S8+0x60>
		case 2: if(light_delay>0)light_delay--; break;
 8017276:	4b0d      	ldr	r3, [pc, #52]	; (80172ac <Display_options_screen_S8+0x7c>)
 8017278:	881b      	ldrh	r3, [r3, #0]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d00a      	beq.n	8017294 <Display_options_screen_S8+0x64>
 801727e:	4b0b      	ldr	r3, [pc, #44]	; (80172ac <Display_options_screen_S8+0x7c>)
 8017280:	881b      	ldrh	r3, [r3, #0]
 8017282:	3b01      	subs	r3, #1
 8017284:	b29a      	uxth	r2, r3
 8017286:	4b09      	ldr	r3, [pc, #36]	; (80172ac <Display_options_screen_S8+0x7c>)
 8017288:	801a      	strh	r2, [r3, #0]
 801728a:	e003      	b.n	8017294 <Display_options_screen_S8+0x64>
		case 0: if(display_brightness>0)display_brightness--; break;
 801728c:	bf00      	nop
 801728e:	e002      	b.n	8017296 <Display_options_screen_S8+0x66>
		case 1: if(display_contrast>0)display_contrast--; break;
 8017290:	bf00      	nop
 8017292:	e000      	b.n	8017296 <Display_options_screen_S8+0x66>
		case 2: if(light_delay>0)light_delay--; break;
 8017294:	bf00      	nop
}
 8017296:	bf00      	nop
 8017298:	46bd      	mov	sp, r7
 801729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729e:	4770      	bx	lr
 80172a0:	20000864 	.word	0x20000864
 80172a4:	20000098 	.word	0x20000098
 80172a8:	20000099 	.word	0x20000099
 80172ac:	200000b0 	.word	0x200000b0

080172b0 <Display_options_screen_S5>:

// FORWARD
void Display_options_screen_S5(void)
{
 80172b0:	b480      	push	{r7}
 80172b2:	af00      	add	r7, sp, #0
	switch(edit_param)
 80172b4:	4b1a      	ldr	r3, [pc, #104]	; (8017320 <Display_options_screen_S5+0x70>)
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	2b02      	cmp	r3, #2
 80172ba:	d01c      	beq.n	80172f6 <Display_options_screen_S5+0x46>
 80172bc:	2b02      	cmp	r3, #2
 80172be:	dc2a      	bgt.n	8017316 <Display_options_screen_S5+0x66>
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d002      	beq.n	80172ca <Display_options_screen_S5+0x1a>
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d00b      	beq.n	80172e0 <Display_options_screen_S5+0x30>
	{
		case 0:if(display_brightness<50)display_brightness++; break;
		case 1: if(display_contrast<50)display_contrast++; break;
		case 2: if(light_delay<50)light_delay++; break;
	}
}
 80172c8:	e025      	b.n	8017316 <Display_options_screen_S5+0x66>
		case 0:if(display_brightness<50)display_brightness++; break;
 80172ca:	4b16      	ldr	r3, [pc, #88]	; (8017324 <Display_options_screen_S5+0x74>)
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	2b31      	cmp	r3, #49	; 0x31
 80172d0:	d81c      	bhi.n	801730c <Display_options_screen_S5+0x5c>
 80172d2:	4b14      	ldr	r3, [pc, #80]	; (8017324 <Display_options_screen_S5+0x74>)
 80172d4:	781b      	ldrb	r3, [r3, #0]
 80172d6:	3301      	adds	r3, #1
 80172d8:	b2da      	uxtb	r2, r3
 80172da:	4b12      	ldr	r3, [pc, #72]	; (8017324 <Display_options_screen_S5+0x74>)
 80172dc:	701a      	strb	r2, [r3, #0]
 80172de:	e015      	b.n	801730c <Display_options_screen_S5+0x5c>
		case 1: if(display_contrast<50)display_contrast++; break;
 80172e0:	4b11      	ldr	r3, [pc, #68]	; (8017328 <Display_options_screen_S5+0x78>)
 80172e2:	781b      	ldrb	r3, [r3, #0]
 80172e4:	2b31      	cmp	r3, #49	; 0x31
 80172e6:	d813      	bhi.n	8017310 <Display_options_screen_S5+0x60>
 80172e8:	4b0f      	ldr	r3, [pc, #60]	; (8017328 <Display_options_screen_S5+0x78>)
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	3301      	adds	r3, #1
 80172ee:	b2da      	uxtb	r2, r3
 80172f0:	4b0d      	ldr	r3, [pc, #52]	; (8017328 <Display_options_screen_S5+0x78>)
 80172f2:	701a      	strb	r2, [r3, #0]
 80172f4:	e00c      	b.n	8017310 <Display_options_screen_S5+0x60>
		case 2: if(light_delay<50)light_delay++; break;
 80172f6:	4b0d      	ldr	r3, [pc, #52]	; (801732c <Display_options_screen_S5+0x7c>)
 80172f8:	881b      	ldrh	r3, [r3, #0]
 80172fa:	2b31      	cmp	r3, #49	; 0x31
 80172fc:	d80a      	bhi.n	8017314 <Display_options_screen_S5+0x64>
 80172fe:	4b0b      	ldr	r3, [pc, #44]	; (801732c <Display_options_screen_S5+0x7c>)
 8017300:	881b      	ldrh	r3, [r3, #0]
 8017302:	3301      	adds	r3, #1
 8017304:	b29a      	uxth	r2, r3
 8017306:	4b09      	ldr	r3, [pc, #36]	; (801732c <Display_options_screen_S5+0x7c>)
 8017308:	801a      	strh	r2, [r3, #0]
 801730a:	e003      	b.n	8017314 <Display_options_screen_S5+0x64>
		case 0:if(display_brightness<50)display_brightness++; break;
 801730c:	bf00      	nop
 801730e:	e002      	b.n	8017316 <Display_options_screen_S5+0x66>
		case 1: if(display_contrast<50)display_contrast++; break;
 8017310:	bf00      	nop
 8017312:	e000      	b.n	8017316 <Display_options_screen_S5+0x66>
		case 2: if(light_delay<50)light_delay++; break;
 8017314:	bf00      	nop
}
 8017316:	bf00      	nop
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr
 8017320:	20000864 	.word	0x20000864
 8017324:	20000098 	.word	0x20000098
 8017328:	20000099 	.word	0x20000099
 801732c:	200000b0 	.word	0x200000b0

08017330 <Light_OFF_process>:



void Light_OFF_process(void)
{
 8017330:	b480      	push	{r7}
 8017332:	af00      	add	r7, sp, #0
	if(++light_ms>=1000)
 8017334:	4b37      	ldr	r3, [pc, #220]	; (8017414 <Light_OFF_process+0xe4>)
 8017336:	881b      	ldrh	r3, [r3, #0]
 8017338:	3301      	adds	r3, #1
 801733a:	b29a      	uxth	r2, r3
 801733c:	4b35      	ldr	r3, [pc, #212]	; (8017414 <Light_OFF_process+0xe4>)
 801733e:	801a      	strh	r2, [r3, #0]
 8017340:	4b34      	ldr	r3, [pc, #208]	; (8017414 <Light_OFF_process+0xe4>)
 8017342:	881b      	ldrh	r3, [r3, #0]
 8017344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017348:	d315      	bcc.n	8017376 <Light_OFF_process+0x46>
	{
		light_ms=0;
 801734a:	4b32      	ldr	r3, [pc, #200]	; (8017414 <Light_OFF_process+0xe4>)
 801734c:	2200      	movs	r2, #0
 801734e:	801a      	strh	r2, [r3, #0]
		if(++light_sec>59){light_min++; light_sec=0;}
 8017350:	4b31      	ldr	r3, [pc, #196]	; (8017418 <Light_OFF_process+0xe8>)
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	3301      	adds	r3, #1
 8017356:	b2da      	uxtb	r2, r3
 8017358:	4b2f      	ldr	r3, [pc, #188]	; (8017418 <Light_OFF_process+0xe8>)
 801735a:	701a      	strb	r2, [r3, #0]
 801735c:	4b2e      	ldr	r3, [pc, #184]	; (8017418 <Light_OFF_process+0xe8>)
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	2b3b      	cmp	r3, #59	; 0x3b
 8017362:	d908      	bls.n	8017376 <Light_OFF_process+0x46>
 8017364:	4b2d      	ldr	r3, [pc, #180]	; (801741c <Light_OFF_process+0xec>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	3301      	adds	r3, #1
 801736a:	b2da      	uxtb	r2, r3
 801736c:	4b2b      	ldr	r3, [pc, #172]	; (801741c <Light_OFF_process+0xec>)
 801736e:	701a      	strb	r2, [r3, #0]
 8017370:	4b29      	ldr	r3, [pc, #164]	; (8017418 <Light_OFF_process+0xe8>)
 8017372:	2200      	movs	r2, #0
 8017374:	701a      	strb	r2, [r3, #0]
	}

	if(++soft_onoff_cntr>=50)
 8017376:	4b2a      	ldr	r3, [pc, #168]	; (8017420 <Light_OFF_process+0xf0>)
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	3301      	adds	r3, #1
 801737c:	b2da      	uxtb	r2, r3
 801737e:	4b28      	ldr	r3, [pc, #160]	; (8017420 <Light_OFF_process+0xf0>)
 8017380:	701a      	strb	r2, [r3, #0]
 8017382:	4b27      	ldr	r3, [pc, #156]	; (8017420 <Light_OFF_process+0xf0>)
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	2b31      	cmp	r3, #49	; 0x31
 8017388:	d93e      	bls.n	8017408 <Light_OFF_process+0xd8>
	{
		soft_onoff_cntr=0;
 801738a:	4b25      	ldr	r3, [pc, #148]	; (8017420 <Light_OFF_process+0xf0>)
 801738c:	2200      	movs	r2, #0
 801738e:	701a      	strb	r2, [r3, #0]
		if(light_min>=light_delay)
 8017390:	4b22      	ldr	r3, [pc, #136]	; (801741c <Light_OFF_process+0xec>)
 8017392:	781b      	ldrb	r3, [r3, #0]
 8017394:	b29a      	uxth	r2, r3
 8017396:	4b23      	ldr	r3, [pc, #140]	; (8017424 <Light_OFF_process+0xf4>)
 8017398:	881b      	ldrh	r3, [r3, #0]
 801739a:	429a      	cmp	r2, r3
 801739c:	d319      	bcc.n	80173d2 <Light_OFF_process+0xa2>
		{
			light_min=light_delay;
 801739e:	4b21      	ldr	r3, [pc, #132]	; (8017424 <Light_OFF_process+0xf4>)
 80173a0:	881b      	ldrh	r3, [r3, #0]
 80173a2:	b2da      	uxtb	r2, r3
 80173a4:	4b1d      	ldr	r3, [pc, #116]	; (801741c <Light_OFF_process+0xec>)
 80173a6:	701a      	strb	r2, [r3, #0]
			if(temp_light>0)temp_light--;
 80173a8:	4b1f      	ldr	r3, [pc, #124]	; (8017428 <Light_OFF_process+0xf8>)
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d005      	beq.n	80173bc <Light_OFF_process+0x8c>
 80173b0:	4b1d      	ldr	r3, [pc, #116]	; (8017428 <Light_OFF_process+0xf8>)
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	3b01      	subs	r3, #1
 80173b6:	b2da      	uxtb	r2, r3
 80173b8:	4b1b      	ldr	r3, [pc, #108]	; (8017428 <Light_OFF_process+0xf8>)
 80173ba:	701a      	strb	r2, [r3, #0]
			light_min=light_delay;
 80173bc:	4b19      	ldr	r3, [pc, #100]	; (8017424 <Light_OFF_process+0xf4>)
 80173be:	881b      	ldrh	r3, [r3, #0]
 80173c0:	b2da      	uxtb	r2, r3
 80173c2:	4b16      	ldr	r3, [pc, #88]	; (801741c <Light_OFF_process+0xec>)
 80173c4:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 80173c6:	4b18      	ldr	r3, [pc, #96]	; (8017428 <Light_OFF_process+0xf8>)
 80173c8:	781a      	ldrb	r2, [r3, #0]
 80173ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173ce:	635a      	str	r2, [r3, #52]	; 0x34
			if(temp_light<display_brightness)temp_light++;
			if(temp_light>=display_brightness)temp_light=display_brightness;
			TIM2->CCR1=temp_light;
		}
	}
}
 80173d0:	e01a      	b.n	8017408 <Light_OFF_process+0xd8>
			if(temp_light<display_brightness)temp_light++;
 80173d2:	4b15      	ldr	r3, [pc, #84]	; (8017428 <Light_OFF_process+0xf8>)
 80173d4:	781a      	ldrb	r2, [r3, #0]
 80173d6:	4b15      	ldr	r3, [pc, #84]	; (801742c <Light_OFF_process+0xfc>)
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	429a      	cmp	r2, r3
 80173dc:	d205      	bcs.n	80173ea <Light_OFF_process+0xba>
 80173de:	4b12      	ldr	r3, [pc, #72]	; (8017428 <Light_OFF_process+0xf8>)
 80173e0:	781b      	ldrb	r3, [r3, #0]
 80173e2:	3301      	adds	r3, #1
 80173e4:	b2da      	uxtb	r2, r3
 80173e6:	4b10      	ldr	r3, [pc, #64]	; (8017428 <Light_OFF_process+0xf8>)
 80173e8:	701a      	strb	r2, [r3, #0]
			if(temp_light>=display_brightness)temp_light=display_brightness;
 80173ea:	4b0f      	ldr	r3, [pc, #60]	; (8017428 <Light_OFF_process+0xf8>)
 80173ec:	781a      	ldrb	r2, [r3, #0]
 80173ee:	4b0f      	ldr	r3, [pc, #60]	; (801742c <Light_OFF_process+0xfc>)
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d303      	bcc.n	80173fe <Light_OFF_process+0xce>
 80173f6:	4b0d      	ldr	r3, [pc, #52]	; (801742c <Light_OFF_process+0xfc>)
 80173f8:	781a      	ldrb	r2, [r3, #0]
 80173fa:	4b0b      	ldr	r3, [pc, #44]	; (8017428 <Light_OFF_process+0xf8>)
 80173fc:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 80173fe:	4b0a      	ldr	r3, [pc, #40]	; (8017428 <Light_OFF_process+0xf8>)
 8017400:	781a      	ldrb	r2, [r3, #0]
 8017402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017406:	635a      	str	r2, [r3, #52]	; 0x34
}
 8017408:	bf00      	nop
 801740a:	46bd      	mov	sp, r7
 801740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017410:	4770      	bx	lr
 8017412:	bf00      	nop
 8017414:	20001c52 	.word	0x20001c52
 8017418:	20001c50 	.word	0x20001c50
 801741c:	20001c51 	.word	0x20001c51
 8017420:	20001c55 	.word	0x20001c55
 8017424:	200000b0 	.word	0x200000b0
 8017428:	20001c54 	.word	0x20001c54
 801742c:	20000098 	.word	0x20000098

08017430 <Measure_options_screen_func>:
const uint8_t time_icon[]={0,24,0,24,0x1F, 0xFF, 0xF8, 0x7F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFE, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x31, 0x87, 0xE0, 0x33, 0x87, 0xE0, 0x3F, 0x07, 0xE0, 0x1E, 0x07, 0xE0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0x7F, 0xFF, 0xFE, 0x3F, 0xFF, 0xFC, 0x1F, 0xFF, 0xF8};



void Measure_options_screen_func(void)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af02      	add	r7, sp, #8
	RTC_view();
 8017436:	f000 fb5b 	bl	8017af0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801743a:	4974      	ldr	r1, [pc, #464]	; (801760c <Measure_options_screen_func+0x1dc>)
 801743c:	4874      	ldr	r0, [pc, #464]	; (8017610 <Measure_options_screen_func+0x1e0>)
 801743e:	f7fe fb49 	bl	8015ad4 <u8g2_SetFont>


		// "ПИКОВЫЕ ЗНАЧЕНИЯ");
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*0+6, "ПИКОВЫЕ ЗНАЧЕНИЯ", edit_param, 0);
 8017442:	4b74      	ldr	r3, [pc, #464]	; (8017614 <Measure_options_screen_func+0x1e4>)
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	2200      	movs	r2, #0
 8017448:	9200      	str	r2, [sp, #0]
 801744a:	4a73      	ldr	r2, [pc, #460]	; (8017618 <Measure_options_screen_func+0x1e8>)
 801744c:	211f      	movs	r1, #31
 801744e:	200f      	movs	r0, #15
 8017450:	f7eb fd1e 	bl	8002e90 <Blink_Edit_Parameter>
		switch(mm_peak)
 8017454:	4b71      	ldr	r3, [pc, #452]	; (801761c <Measure_options_screen_func+0x1ec>)
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d002      	beq.n	8017462 <Measure_options_screen_func+0x32>
 801745c:	2b01      	cmp	r3, #1
 801745e:	d007      	beq.n	8017470 <Measure_options_screen_func+0x40>
 8017460:	e00d      	b.n	801747e <Measure_options_screen_func+0x4e>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 8017462:	2301      	movs	r3, #1
 8017464:	2219      	movs	r2, #25
 8017466:	21c8      	movs	r1, #200	; 0xc8
 8017468:	486d      	ldr	r0, [pc, #436]	; (8017620 <Measure_options_screen_func+0x1f0>)
 801746a:	f7eb fb83 	bl	8002b74 <DrawImage>
 801746e:	e006      	b.n	801747e <Measure_options_screen_func+0x4e>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 8017470:	2301      	movs	r3, #1
 8017472:	2219      	movs	r2, #25
 8017474:	21c8      	movs	r1, #200	; 0xc8
 8017476:	486b      	ldr	r0, [pc, #428]	; (8017624 <Measure_options_screen_func+0x1f4>)
 8017478:	f7eb fb7c 	bl	8002b74 <DrawImage>
 801747c:	bf00      	nop
		}

		// "ОБНАРУЖЕНИЕ УТЕЧЕК"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*1+6, "ОБНАРУЖЕНИЕ УТЕЧЕК", edit_param, 1);
 801747e:	4b65      	ldr	r3, [pc, #404]	; (8017614 <Measure_options_screen_func+0x1e4>)
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	2201      	movs	r2, #1
 8017484:	9200      	str	r2, [sp, #0]
 8017486:	4a68      	ldr	r2, [pc, #416]	; (8017628 <Measure_options_screen_func+0x1f8>)
 8017488:	2139      	movs	r1, #57	; 0x39
 801748a:	200f      	movs	r0, #15
 801748c:	f7eb fd00 	bl	8002e90 <Blink_Edit_Parameter>
		switch(leak_detect)
 8017490:	4b66      	ldr	r3, [pc, #408]	; (801762c <Measure_options_screen_func+0x1fc>)
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	2b02      	cmp	r3, #2
 8017496:	d014      	beq.n	80174c2 <Measure_options_screen_func+0x92>
 8017498:	2b02      	cmp	r3, #2
 801749a:	dc19      	bgt.n	80174d0 <Measure_options_screen_func+0xa0>
 801749c:	2b00      	cmp	r3, #0
 801749e:	d002      	beq.n	80174a6 <Measure_options_screen_func+0x76>
 80174a0:	2b01      	cmp	r3, #1
 80174a2:	d007      	beq.n	80174b4 <Measure_options_screen_func+0x84>
 80174a4:	e014      	b.n	80174d0 <Measure_options_screen_func+0xa0>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80174a6:	2301      	movs	r3, #1
 80174a8:	2233      	movs	r2, #51	; 0x33
 80174aa:	21c8      	movs	r1, #200	; 0xc8
 80174ac:	485c      	ldr	r0, [pc, #368]	; (8017620 <Measure_options_screen_func+0x1f0>)
 80174ae:	f7eb fb61 	bl	8002b74 <DrawImage>
 80174b2:	e00d      	b.n	80174d0 <Measure_options_screen_func+0xa0>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80174b4:	2301      	movs	r3, #1
 80174b6:	2233      	movs	r2, #51	; 0x33
 80174b8:	21c8      	movs	r1, #200	; 0xc8
 80174ba:	485a      	ldr	r0, [pc, #360]	; (8017624 <Measure_options_screen_func+0x1f4>)
 80174bc:	f7eb fb5a 	bl	8002b74 <DrawImage>
 80174c0:	e006      	b.n	80174d0 <Measure_options_screen_func+0xa0>
			case 2: DrawImage(time_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80174c2:	2301      	movs	r3, #1
 80174c4:	2233      	movs	r2, #51	; 0x33
 80174c6:	21c8      	movs	r1, #200	; 0xc8
 80174c8:	4859      	ldr	r0, [pc, #356]	; (8017630 <Measure_options_screen_func+0x200>)
 80174ca:	f7eb fb53 	bl	8002b74 <DrawImage>
 80174ce:	bf00      	nop
		}

		// "P+V"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*2+6, "P+V", edit_param, 2);
 80174d0:	4b50      	ldr	r3, [pc, #320]	; (8017614 <Measure_options_screen_func+0x1e4>)
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	2202      	movs	r2, #2
 80174d6:	9200      	str	r2, [sp, #0]
 80174d8:	4a56      	ldr	r2, [pc, #344]	; (8017634 <Measure_options_screen_func+0x204>)
 80174da:	2153      	movs	r1, #83	; 0x53
 80174dc:	200f      	movs	r0, #15
 80174de:	f7eb fcd7 	bl	8002e90 <Blink_Edit_Parameter>
		switch(PV)
 80174e2:	4b55      	ldr	r3, [pc, #340]	; (8017638 <Measure_options_screen_func+0x208>)
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d002      	beq.n	80174f0 <Measure_options_screen_func+0xc0>
 80174ea:	2b01      	cmp	r3, #1
 80174ec:	d007      	beq.n	80174fe <Measure_options_screen_func+0xce>
 80174ee:	e00d      	b.n	801750c <Measure_options_screen_func+0xdc>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 80174f0:	2301      	movs	r3, #1
 80174f2:	224d      	movs	r2, #77	; 0x4d
 80174f4:	21c8      	movs	r1, #200	; 0xc8
 80174f6:	484a      	ldr	r0, [pc, #296]	; (8017620 <Measure_options_screen_func+0x1f0>)
 80174f8:	f7eb fb3c 	bl	8002b74 <DrawImage>
 80174fc:	e006      	b.n	801750c <Measure_options_screen_func+0xdc>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 80174fe:	2301      	movs	r3, #1
 8017500:	224d      	movs	r2, #77	; 0x4d
 8017502:	21c8      	movs	r1, #200	; 0xc8
 8017504:	4847      	ldr	r0, [pc, #284]	; (8017624 <Measure_options_screen_func+0x1f4>)
 8017506:	f7eb fb35 	bl	8002b74 <DrawImage>
 801750a:	bf00      	nop
		}

		// "P+I"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*3+6, "P+I", edit_param, 3);
 801750c:	4b41      	ldr	r3, [pc, #260]	; (8017614 <Measure_options_screen_func+0x1e4>)
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	2203      	movs	r2, #3
 8017512:	9200      	str	r2, [sp, #0]
 8017514:	4a49      	ldr	r2, [pc, #292]	; (801763c <Measure_options_screen_func+0x20c>)
 8017516:	216d      	movs	r1, #109	; 0x6d
 8017518:	200f      	movs	r0, #15
 801751a:	f7eb fcb9 	bl	8002e90 <Blink_Edit_Parameter>
		switch(PI)
 801751e:	4b48      	ldr	r3, [pc, #288]	; (8017640 <Measure_options_screen_func+0x210>)
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d002      	beq.n	801752c <Measure_options_screen_func+0xfc>
 8017526:	2b01      	cmp	r3, #1
 8017528:	d007      	beq.n	801753a <Measure_options_screen_func+0x10a>
 801752a:	e00d      	b.n	8017548 <Measure_options_screen_func+0x118>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 801752c:	2301      	movs	r3, #1
 801752e:	2267      	movs	r2, #103	; 0x67
 8017530:	21c8      	movs	r1, #200	; 0xc8
 8017532:	483b      	ldr	r0, [pc, #236]	; (8017620 <Measure_options_screen_func+0x1f0>)
 8017534:	f7eb fb1e 	bl	8002b74 <DrawImage>
 8017538:	e006      	b.n	8017548 <Measure_options_screen_func+0x118>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 801753a:	2301      	movs	r3, #1
 801753c:	2267      	movs	r2, #103	; 0x67
 801753e:	21c8      	movs	r1, #200	; 0xc8
 8017540:	4838      	ldr	r0, [pc, #224]	; (8017624 <Measure_options_screen_func+0x1f4>)
 8017542:	f7eb fb17 	bl	8002b74 <DrawImage>
 8017546:	bf00      	nop
		}

		// "P+E"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*4+6, "P+E", edit_param, 4);
 8017548:	4b32      	ldr	r3, [pc, #200]	; (8017614 <Measure_options_screen_func+0x1e4>)
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	2204      	movs	r2, #4
 801754e:	9200      	str	r2, [sp, #0]
 8017550:	4a3c      	ldr	r2, [pc, #240]	; (8017644 <Measure_options_screen_func+0x214>)
 8017552:	2187      	movs	r1, #135	; 0x87
 8017554:	200f      	movs	r0, #15
 8017556:	f7eb fc9b 	bl	8002e90 <Blink_Edit_Parameter>
		switch(PE)
 801755a:	4b3b      	ldr	r3, [pc, #236]	; (8017648 <Measure_options_screen_func+0x218>)
 801755c:	781b      	ldrb	r3, [r3, #0]
 801755e:	2b07      	cmp	r3, #7
 8017560:	d84a      	bhi.n	80175f8 <Measure_options_screen_func+0x1c8>
 8017562:	a201      	add	r2, pc, #4	; (adr r2, 8017568 <Measure_options_screen_func+0x138>)
 8017564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017568:	08017589 	.word	0x08017589
 801756c:	08017597 	.word	0x08017597
 8017570:	080175a5 	.word	0x080175a5
 8017574:	080175b3 	.word	0x080175b3
 8017578:	080175c1 	.word	0x080175c1
 801757c:	080175cf 	.word	0x080175cf
 8017580:	080175dd 	.word	0x080175dd
 8017584:	080175eb 	.word	0x080175eb
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017588:	2301      	movs	r3, #1
 801758a:	2281      	movs	r2, #129	; 0x81
 801758c:	21c8      	movs	r1, #200	; 0xc8
 801758e:	4824      	ldr	r0, [pc, #144]	; (8017620 <Measure_options_screen_func+0x1f0>)
 8017590:	f7eb faf0 	bl	8002b74 <DrawImage>
 8017594:	e030      	b.n	80175f8 <Measure_options_screen_func+0x1c8>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017596:	2301      	movs	r3, #1
 8017598:	2281      	movs	r2, #129	; 0x81
 801759a:	21c8      	movs	r1, #200	; 0xc8
 801759c:	4821      	ldr	r0, [pc, #132]	; (8017624 <Measure_options_screen_func+0x1f4>)
 801759e:	f7eb fae9 	bl	8002b74 <DrawImage>
 80175a2:	e029      	b.n	80175f8 <Measure_options_screen_func+0x1c8>
			case 2: DrawImage(press_on_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175a4:	2301      	movs	r3, #1
 80175a6:	2281      	movs	r2, #129	; 0x81
 80175a8:	21c8      	movs	r1, #200	; 0xc8
 80175aa:	4828      	ldr	r0, [pc, #160]	; (801764c <Measure_options_screen_func+0x21c>)
 80175ac:	f7eb fae2 	bl	8002b74 <DrawImage>
 80175b0:	e022      	b.n	80175f8 <Measure_options_screen_func+0x1c8>
			case 3: DrawImage(press_off_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175b2:	2301      	movs	r3, #1
 80175b4:	2281      	movs	r2, #129	; 0x81
 80175b6:	21c8      	movs	r1, #200	; 0xc8
 80175b8:	4825      	ldr	r0, [pc, #148]	; (8017650 <Measure_options_screen_func+0x220>)
 80175ba:	f7eb fadb 	bl	8002b74 <DrawImage>
 80175be:	e01b      	b.n	80175f8 <Measure_options_screen_func+0x1c8>
			case 4: DrawImage(up_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175c0:	2301      	movs	r3, #1
 80175c2:	2281      	movs	r2, #129	; 0x81
 80175c4:	21c8      	movs	r1, #200	; 0xc8
 80175c6:	4823      	ldr	r0, [pc, #140]	; (8017654 <Measure_options_screen_func+0x224>)
 80175c8:	f7eb fad4 	bl	8002b74 <DrawImage>
 80175cc:	e014      	b.n	80175f8 <Measure_options_screen_func+0x1c8>
			case 5: DrawImage(down_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175ce:	2301      	movs	r3, #1
 80175d0:	2281      	movs	r2, #129	; 0x81
 80175d2:	21c8      	movs	r1, #200	; 0xc8
 80175d4:	4820      	ldr	r0, [pc, #128]	; (8017658 <Measure_options_screen_func+0x228>)
 80175d6:	f7eb facd 	bl	8002b74 <DrawImage>
 80175da:	e00d      	b.n	80175f8 <Measure_options_screen_func+0x1c8>
			case 6: DrawImage(pos_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175dc:	2301      	movs	r3, #1
 80175de:	2281      	movs	r2, #129	; 0x81
 80175e0:	21c8      	movs	r1, #200	; 0xc8
 80175e2:	481e      	ldr	r0, [pc, #120]	; (801765c <Measure_options_screen_func+0x22c>)
 80175e4:	f7eb fac6 	bl	8002b74 <DrawImage>
 80175e8:	e006      	b.n	80175f8 <Measure_options_screen_func+0x1c8>
			case 7: DrawImage(neg_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80175ea:	2301      	movs	r3, #1
 80175ec:	2281      	movs	r2, #129	; 0x81
 80175ee:	21c8      	movs	r1, #200	; 0xc8
 80175f0:	481b      	ldr	r0, [pc, #108]	; (8017660 <Measure_options_screen_func+0x230>)
 80175f2:	f7eb fabf 	bl	8002b74 <DrawImage>
 80175f6:	bf00      	nop
		}



	u8g2_SendBuffer(&u8g2);
 80175f8:	4805      	ldr	r0, [pc, #20]	; (8017610 <Measure_options_screen_func+0x1e0>)
 80175fa:	f7fd fc2e 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80175fe:	4804      	ldr	r0, [pc, #16]	; (8017610 <Measure_options_screen_func+0x1e0>)
 8017600:	f7fd fbb8 	bl	8014d74 <u8g2_ClearBuffer>
}
 8017604:	bf00      	nop
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	08027258 	.word	0x08027258
 8017610:	20001fd4 	.word	0x20001fd4
 8017614:	20000864 	.word	0x20000864
 8017618:	08022258 	.word	0x08022258
 801761c:	200008aa 	.word	0x200008aa
 8017620:	0802922c 	.word	0x0802922c
 8017624:	08029278 	.word	0x08029278
 8017628:	08022278 	.word	0x08022278
 801762c:	200008ab 	.word	0x200008ab
 8017630:	0802948c 	.word	0x0802948c
 8017634:	0802229c 	.word	0x0802229c
 8017638:	200008ac 	.word	0x200008ac
 801763c:	080222a0 	.word	0x080222a0
 8017640:	200008ad 	.word	0x200008ad
 8017644:	080222a4 	.word	0x080222a4
 8017648:	200008ae 	.word	0x200008ae
 801764c:	080293f4 	.word	0x080293f4
 8017650:	08029440 	.word	0x08029440
 8017654:	080292c4 	.word	0x080292c4
 8017658:	08029310 	.word	0x08029310
 801765c:	080293a8 	.word	0x080293a8
 8017660:	0802935c 	.word	0x0802935c

08017664 <Measure_options_screen_S6>:


// DOWN
void Measure_options_screen_S6(void)
{
 8017664:	b480      	push	{r7}
 8017666:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8017668:	4b07      	ldr	r3, [pc, #28]	; (8017688 <Measure_options_screen_S6+0x24>)
 801766a:	781b      	ldrb	r3, [r3, #0]
 801766c:	2b03      	cmp	r3, #3
 801766e:	d805      	bhi.n	801767c <Measure_options_screen_S6+0x18>
 8017670:	4b05      	ldr	r3, [pc, #20]	; (8017688 <Measure_options_screen_S6+0x24>)
 8017672:	781b      	ldrb	r3, [r3, #0]
 8017674:	3301      	adds	r3, #1
 8017676:	b2da      	uxtb	r2, r3
 8017678:	4b03      	ldr	r3, [pc, #12]	; (8017688 <Measure_options_screen_S6+0x24>)
 801767a:	701a      	strb	r2, [r3, #0]
}
 801767c:	bf00      	nop
 801767e:	46bd      	mov	sp, r7
 8017680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017684:	4770      	bx	lr
 8017686:	bf00      	nop
 8017688:	20000864 	.word	0x20000864

0801768c <Measure_options_screen_S7>:

// UP
void Measure_options_screen_S7(void)
{
 801768c:	b480      	push	{r7}
 801768e:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017690:	4b07      	ldr	r3, [pc, #28]	; (80176b0 <Measure_options_screen_S7+0x24>)
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d005      	beq.n	80176a4 <Measure_options_screen_S7+0x18>
 8017698:	4b05      	ldr	r3, [pc, #20]	; (80176b0 <Measure_options_screen_S7+0x24>)
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	3b01      	subs	r3, #1
 801769e:	b2da      	uxtb	r2, r3
 80176a0:	4b03      	ldr	r3, [pc, #12]	; (80176b0 <Measure_options_screen_S7+0x24>)
 80176a2:	701a      	strb	r2, [r3, #0]
}
 80176a4:	bf00      	nop
 80176a6:	46bd      	mov	sp, r7
 80176a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ac:	4770      	bx	lr
 80176ae:	bf00      	nop
 80176b0:	20000864 	.word	0x20000864

080176b4 <Measure_options_screen_S9>:



// MENU
void Measure_options_screen_S9(void)
{
 80176b4:	b480      	push	{r7}
 80176b6:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80176b8:	4b06      	ldr	r3, [pc, #24]	; (80176d4 <Measure_options_screen_S9+0x20>)
 80176ba:	2204      	movs	r2, #4
 80176bc:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80176be:	4b06      	ldr	r3, [pc, #24]	; (80176d8 <Measure_options_screen_S9+0x24>)
 80176c0:	22ff      	movs	r2, #255	; 0xff
 80176c2:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 80176c4:	4b05      	ldr	r3, [pc, #20]	; (80176dc <Measure_options_screen_S9+0x28>)
 80176c6:	2200      	movs	r2, #0
 80176c8:	701a      	strb	r2, [r3, #0]
}
 80176ca:	bf00      	nop
 80176cc:	46bd      	mov	sp, r7
 80176ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d2:	4770      	bx	lr
 80176d4:	2000004c 	.word	0x2000004c
 80176d8:	200003a8 	.word	0x200003a8
 80176dc:	200003a9 	.word	0x200003a9

080176e0 <Measure_options_screen_S8>:

// BACKWARD
void Measure_options_screen_S8(void)
{
 80176e0:	b480      	push	{r7}
 80176e2:	af00      	add	r7, sp, #0
	switch(edit_param)
 80176e4:	4b2b      	ldr	r3, [pc, #172]	; (8017794 <Measure_options_screen_S8+0xb4>)
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	2b04      	cmp	r3, #4
 80176ea:	d84d      	bhi.n	8017788 <Measure_options_screen_S8+0xa8>
 80176ec:	a201      	add	r2, pc, #4	; (adr r2, 80176f4 <Measure_options_screen_S8+0x14>)
 80176ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176f2:	bf00      	nop
 80176f4:	08017709 	.word	0x08017709
 80176f8:	0801771f 	.word	0x0801771f
 80176fc:	08017735 	.word	0x08017735
 8017700:	0801774b 	.word	0x0801774b
 8017704:	08017761 	.word	0x08017761
	{
		case 0: if(mm_peak>0)mm_peak--; break;
 8017708:	4b23      	ldr	r3, [pc, #140]	; (8017798 <Measure_options_screen_S8+0xb8>)
 801770a:	781b      	ldrb	r3, [r3, #0]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d032      	beq.n	8017776 <Measure_options_screen_S8+0x96>
 8017710:	4b21      	ldr	r3, [pc, #132]	; (8017798 <Measure_options_screen_S8+0xb8>)
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	3b01      	subs	r3, #1
 8017716:	b2da      	uxtb	r2, r3
 8017718:	4b1f      	ldr	r3, [pc, #124]	; (8017798 <Measure_options_screen_S8+0xb8>)
 801771a:	701a      	strb	r2, [r3, #0]
 801771c:	e02b      	b.n	8017776 <Measure_options_screen_S8+0x96>
		case 1: if(leak_detect>0)leak_detect--; break;
 801771e:	4b1f      	ldr	r3, [pc, #124]	; (801779c <Measure_options_screen_S8+0xbc>)
 8017720:	781b      	ldrb	r3, [r3, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d029      	beq.n	801777a <Measure_options_screen_S8+0x9a>
 8017726:	4b1d      	ldr	r3, [pc, #116]	; (801779c <Measure_options_screen_S8+0xbc>)
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	3b01      	subs	r3, #1
 801772c:	b2da      	uxtb	r2, r3
 801772e:	4b1b      	ldr	r3, [pc, #108]	; (801779c <Measure_options_screen_S8+0xbc>)
 8017730:	701a      	strb	r2, [r3, #0]
 8017732:	e022      	b.n	801777a <Measure_options_screen_S8+0x9a>
		case 2: if(PV>0)PV--; break;
 8017734:	4b1a      	ldr	r3, [pc, #104]	; (80177a0 <Measure_options_screen_S8+0xc0>)
 8017736:	781b      	ldrb	r3, [r3, #0]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d020      	beq.n	801777e <Measure_options_screen_S8+0x9e>
 801773c:	4b18      	ldr	r3, [pc, #96]	; (80177a0 <Measure_options_screen_S8+0xc0>)
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	3b01      	subs	r3, #1
 8017742:	b2da      	uxtb	r2, r3
 8017744:	4b16      	ldr	r3, [pc, #88]	; (80177a0 <Measure_options_screen_S8+0xc0>)
 8017746:	701a      	strb	r2, [r3, #0]
 8017748:	e019      	b.n	801777e <Measure_options_screen_S8+0x9e>
		case 3: if(PI>0)PI--; break;
 801774a:	4b16      	ldr	r3, [pc, #88]	; (80177a4 <Measure_options_screen_S8+0xc4>)
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d017      	beq.n	8017782 <Measure_options_screen_S8+0xa2>
 8017752:	4b14      	ldr	r3, [pc, #80]	; (80177a4 <Measure_options_screen_S8+0xc4>)
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	3b01      	subs	r3, #1
 8017758:	b2da      	uxtb	r2, r3
 801775a:	4b12      	ldr	r3, [pc, #72]	; (80177a4 <Measure_options_screen_S8+0xc4>)
 801775c:	701a      	strb	r2, [r3, #0]
 801775e:	e010      	b.n	8017782 <Measure_options_screen_S8+0xa2>
		case 4: if(PE>0)PE--; break;
 8017760:	4b11      	ldr	r3, [pc, #68]	; (80177a8 <Measure_options_screen_S8+0xc8>)
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d00e      	beq.n	8017786 <Measure_options_screen_S8+0xa6>
 8017768:	4b0f      	ldr	r3, [pc, #60]	; (80177a8 <Measure_options_screen_S8+0xc8>)
 801776a:	781b      	ldrb	r3, [r3, #0]
 801776c:	3b01      	subs	r3, #1
 801776e:	b2da      	uxtb	r2, r3
 8017770:	4b0d      	ldr	r3, [pc, #52]	; (80177a8 <Measure_options_screen_S8+0xc8>)
 8017772:	701a      	strb	r2, [r3, #0]
 8017774:	e007      	b.n	8017786 <Measure_options_screen_S8+0xa6>
		case 0: if(mm_peak>0)mm_peak--; break;
 8017776:	bf00      	nop
 8017778:	e006      	b.n	8017788 <Measure_options_screen_S8+0xa8>
		case 1: if(leak_detect>0)leak_detect--; break;
 801777a:	bf00      	nop
 801777c:	e004      	b.n	8017788 <Measure_options_screen_S8+0xa8>
		case 2: if(PV>0)PV--; break;
 801777e:	bf00      	nop
 8017780:	e002      	b.n	8017788 <Measure_options_screen_S8+0xa8>
		case 3: if(PI>0)PI--; break;
 8017782:	bf00      	nop
 8017784:	e000      	b.n	8017788 <Measure_options_screen_S8+0xa8>
		case 4: if(PE>0)PE--; break;
 8017786:	bf00      	nop
	}
}
 8017788:	bf00      	nop
 801778a:	46bd      	mov	sp, r7
 801778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017790:	4770      	bx	lr
 8017792:	bf00      	nop
 8017794:	20000864 	.word	0x20000864
 8017798:	200008aa 	.word	0x200008aa
 801779c:	200008ab 	.word	0x200008ab
 80177a0:	200008ac 	.word	0x200008ac
 80177a4:	200008ad 	.word	0x200008ad
 80177a8:	200008ae 	.word	0x200008ae

080177ac <Measure_options_screen_S5>:

// FORWARD
void Measure_options_screen_S5(void)
{
 80177ac:	b480      	push	{r7}
 80177ae:	af00      	add	r7, sp, #0
	switch(edit_param)
 80177b0:	4b2b      	ldr	r3, [pc, #172]	; (8017860 <Measure_options_screen_S5+0xb4>)
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	2b04      	cmp	r3, #4
 80177b6:	d84d      	bhi.n	8017854 <Measure_options_screen_S5+0xa8>
 80177b8:	a201      	add	r2, pc, #4	; (adr r2, 80177c0 <Measure_options_screen_S5+0x14>)
 80177ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177be:	bf00      	nop
 80177c0:	080177d5 	.word	0x080177d5
 80177c4:	080177eb 	.word	0x080177eb
 80177c8:	08017801 	.word	0x08017801
 80177cc:	08017817 	.word	0x08017817
 80177d0:	0801782d 	.word	0x0801782d
	{
		case 0: if(mm_peak<1)mm_peak++; break;
 80177d4:	4b23      	ldr	r3, [pc, #140]	; (8017864 <Measure_options_screen_S5+0xb8>)
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d132      	bne.n	8017842 <Measure_options_screen_S5+0x96>
 80177dc:	4b21      	ldr	r3, [pc, #132]	; (8017864 <Measure_options_screen_S5+0xb8>)
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	3301      	adds	r3, #1
 80177e2:	b2da      	uxtb	r2, r3
 80177e4:	4b1f      	ldr	r3, [pc, #124]	; (8017864 <Measure_options_screen_S5+0xb8>)
 80177e6:	701a      	strb	r2, [r3, #0]
 80177e8:	e02b      	b.n	8017842 <Measure_options_screen_S5+0x96>
		case 1: if(leak_detect<2)leak_detect++; break;
 80177ea:	4b1f      	ldr	r3, [pc, #124]	; (8017868 <Measure_options_screen_S5+0xbc>)
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	2b01      	cmp	r3, #1
 80177f0:	d829      	bhi.n	8017846 <Measure_options_screen_S5+0x9a>
 80177f2:	4b1d      	ldr	r3, [pc, #116]	; (8017868 <Measure_options_screen_S5+0xbc>)
 80177f4:	781b      	ldrb	r3, [r3, #0]
 80177f6:	3301      	adds	r3, #1
 80177f8:	b2da      	uxtb	r2, r3
 80177fa:	4b1b      	ldr	r3, [pc, #108]	; (8017868 <Measure_options_screen_S5+0xbc>)
 80177fc:	701a      	strb	r2, [r3, #0]
 80177fe:	e022      	b.n	8017846 <Measure_options_screen_S5+0x9a>
		case 2: if(PV<1)PV++; break;
 8017800:	4b1a      	ldr	r3, [pc, #104]	; (801786c <Measure_options_screen_S5+0xc0>)
 8017802:	781b      	ldrb	r3, [r3, #0]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d120      	bne.n	801784a <Measure_options_screen_S5+0x9e>
 8017808:	4b18      	ldr	r3, [pc, #96]	; (801786c <Measure_options_screen_S5+0xc0>)
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	3301      	adds	r3, #1
 801780e:	b2da      	uxtb	r2, r3
 8017810:	4b16      	ldr	r3, [pc, #88]	; (801786c <Measure_options_screen_S5+0xc0>)
 8017812:	701a      	strb	r2, [r3, #0]
 8017814:	e019      	b.n	801784a <Measure_options_screen_S5+0x9e>
		case 3: if(PI<1)PI++; break;
 8017816:	4b16      	ldr	r3, [pc, #88]	; (8017870 <Measure_options_screen_S5+0xc4>)
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d117      	bne.n	801784e <Measure_options_screen_S5+0xa2>
 801781e:	4b14      	ldr	r3, [pc, #80]	; (8017870 <Measure_options_screen_S5+0xc4>)
 8017820:	781b      	ldrb	r3, [r3, #0]
 8017822:	3301      	adds	r3, #1
 8017824:	b2da      	uxtb	r2, r3
 8017826:	4b12      	ldr	r3, [pc, #72]	; (8017870 <Measure_options_screen_S5+0xc4>)
 8017828:	701a      	strb	r2, [r3, #0]
 801782a:	e010      	b.n	801784e <Measure_options_screen_S5+0xa2>
		case 4: if(PE<7)PE++; break;
 801782c:	4b11      	ldr	r3, [pc, #68]	; (8017874 <Measure_options_screen_S5+0xc8>)
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	2b06      	cmp	r3, #6
 8017832:	d80e      	bhi.n	8017852 <Measure_options_screen_S5+0xa6>
 8017834:	4b0f      	ldr	r3, [pc, #60]	; (8017874 <Measure_options_screen_S5+0xc8>)
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	3301      	adds	r3, #1
 801783a:	b2da      	uxtb	r2, r3
 801783c:	4b0d      	ldr	r3, [pc, #52]	; (8017874 <Measure_options_screen_S5+0xc8>)
 801783e:	701a      	strb	r2, [r3, #0]
 8017840:	e007      	b.n	8017852 <Measure_options_screen_S5+0xa6>
		case 0: if(mm_peak<1)mm_peak++; break;
 8017842:	bf00      	nop
 8017844:	e006      	b.n	8017854 <Measure_options_screen_S5+0xa8>
		case 1: if(leak_detect<2)leak_detect++; break;
 8017846:	bf00      	nop
 8017848:	e004      	b.n	8017854 <Measure_options_screen_S5+0xa8>
		case 2: if(PV<1)PV++; break;
 801784a:	bf00      	nop
 801784c:	e002      	b.n	8017854 <Measure_options_screen_S5+0xa8>
		case 3: if(PI<1)PI++; break;
 801784e:	bf00      	nop
 8017850:	e000      	b.n	8017854 <Measure_options_screen_S5+0xa8>
		case 4: if(PE<7)PE++; break;
 8017852:	bf00      	nop
	}
}
 8017854:	bf00      	nop
 8017856:	46bd      	mov	sp, r7
 8017858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop
 8017860:	20000864 	.word	0x20000864
 8017864:	200008aa 	.word	0x200008aa
 8017868:	200008ab 	.word	0x200008ab
 801786c:	200008ac 	.word	0x200008ac
 8017870:	200008ad 	.word	0x200008ad
 8017874:	200008ae 	.word	0x200008ae

08017878 <Main_screen_func>:

uint16_t view_tim=0;
uint8_t view =0;

void Main_screen_func(void)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	af00      	add	r7, sp, #0
	if(view==1)
 801787c:	4b61      	ldr	r3, [pc, #388]	; (8017a04 <Main_screen_func+0x18c>)
 801787e:	781b      	ldrb	r3, [r3, #0]
 8017880:	2b01      	cmp	r3, #1
 8017882:	f040 80bd 	bne.w	8017a00 <Main_screen_func+0x188>
	{
		RTC_view();
 8017886:	f000 f933 	bl	8017af0 <RTC_view>

		view=0;
 801788a:	4b5e      	ldr	r3, [pc, #376]	; (8017a04 <Main_screen_func+0x18c>)
 801788c:	2200      	movs	r2, #0
 801788e:	701a      	strb	r2, [r3, #0]
		u8g2_SetFont(&u8g2, u8g2_font_inr30_mn);
 8017890:	495d      	ldr	r1, [pc, #372]	; (8017a08 <Main_screen_func+0x190>)
 8017892:	485e      	ldr	r0, [pc, #376]	; (8017a0c <Main_screen_func+0x194>)
 8017894:	f7fe f91e 	bl	8015ad4 <u8g2_SetFont>

		sprintf(RAM,"%+fV", Pressure);
 8017898:	4b5d      	ldr	r3, [pc, #372]	; (8017a10 <Main_screen_func+0x198>)
 801789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801789e:	495d      	ldr	r1, [pc, #372]	; (8017a14 <Main_screen_func+0x19c>)
 80178a0:	485d      	ldr	r0, [pc, #372]	; (8017a18 <Main_screen_func+0x1a0>)
 80178a2:	f006 fa75 	bl	801dd90 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 70, RAM);
 80178a6:	4b5c      	ldr	r3, [pc, #368]	; (8017a18 <Main_screen_func+0x1a0>)
 80178a8:	2246      	movs	r2, #70	; 0x46
 80178aa:	2105      	movs	r1, #5
 80178ac:	4857      	ldr	r0, [pc, #348]	; (8017a0c <Main_screen_func+0x194>)
 80178ae:	f7fe f86f 	bl	8015990 <u8g2_DrawUTF8>

		switch(E_fun)
 80178b2:	4b5a      	ldr	r3, [pc, #360]	; (8017a1c <Main_screen_func+0x1a4>)
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	2b02      	cmp	r3, #2
 80178b8:	d03d      	beq.n	8017936 <Main_screen_func+0xbe>
 80178ba:	2b02      	cmp	r3, #2
 80178bc:	dc5a      	bgt.n	8017974 <Main_screen_func+0xfc>
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d002      	beq.n	80178c8 <Main_screen_func+0x50>
 80178c2:	2b01      	cmp	r3, #1
 80178c4:	d018      	beq.n	80178f8 <Main_screen_func+0x80>
 80178c6:	e055      	b.n	8017974 <Main_screen_func+0xfc>
		{
		// Давление
		case 0:
			sprintf(RAM,"%+fV", Test_Pressure);
 80178c8:	4b55      	ldr	r3, [pc, #340]	; (8017a20 <Main_screen_func+0x1a8>)
 80178ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ce:	4951      	ldr	r1, [pc, #324]	; (8017a14 <Main_screen_func+0x19c>)
 80178d0:	4851      	ldr	r0, [pc, #324]	; (8017a18 <Main_screen_func+0x1a0>)
 80178d2:	f006 fa5d 	bl	801dd90 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 80178d6:	4b50      	ldr	r3, [pc, #320]	; (8017a18 <Main_screen_func+0x1a0>)
 80178d8:	2282      	movs	r2, #130	; 0x82
 80178da:	2105      	movs	r1, #5
 80178dc:	484b      	ldr	r0, [pc, #300]	; (8017a0c <Main_screen_func+0x194>)
 80178de:	f7fe f857 	bl	8015990 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 80178e2:	4950      	ldr	r1, [pc, #320]	; (8017a24 <Main_screen_func+0x1ac>)
 80178e4:	4849      	ldr	r0, [pc, #292]	; (8017a0c <Main_screen_func+0x194>)
 80178e6:	f7fe f8f5 	bl	8015ad4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "давление");
 80178ea:	4b4f      	ldr	r3, [pc, #316]	; (8017a28 <Main_screen_func+0x1b0>)
 80178ec:	229b      	movs	r2, #155	; 0x9b
 80178ee:	21a0      	movs	r1, #160	; 0xa0
 80178f0:	4846      	ldr	r0, [pc, #280]	; (8017a0c <Main_screen_func+0x194>)
 80178f2:	f7fe f84d 	bl	8015990 <u8g2_DrawUTF8>
			break;
 80178f6:	e03d      	b.n	8017974 <Main_screen_func+0xfc>

			// Ток
		case 1:
			sprintf(RAM,"%+fV", current_4_20mA-Electric_zero);
 80178f8:	4b4c      	ldr	r3, [pc, #304]	; (8017a2c <Main_screen_func+0x1b4>)
 80178fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80178fe:	4b4c      	ldr	r3, [pc, #304]	; (8017a30 <Main_screen_func+0x1b8>)
 8017900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017904:	f7e8 fcd0 	bl	80002a8 <__aeabi_dsub>
 8017908:	4602      	mov	r2, r0
 801790a:	460b      	mov	r3, r1
 801790c:	4941      	ldr	r1, [pc, #260]	; (8017a14 <Main_screen_func+0x19c>)
 801790e:	4842      	ldr	r0, [pc, #264]	; (8017a18 <Main_screen_func+0x1a0>)
 8017910:	f006 fa3e 	bl	801dd90 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 8017914:	4b40      	ldr	r3, [pc, #256]	; (8017a18 <Main_screen_func+0x1a0>)
 8017916:	2282      	movs	r2, #130	; 0x82
 8017918:	2105      	movs	r1, #5
 801791a:	483c      	ldr	r0, [pc, #240]	; (8017a0c <Main_screen_func+0x194>)
 801791c:	f7fe f838 	bl	8015990 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017920:	4940      	ldr	r1, [pc, #256]	; (8017a24 <Main_screen_func+0x1ac>)
 8017922:	483a      	ldr	r0, [pc, #232]	; (8017a0c <Main_screen_func+0x194>)
 8017924:	f7fe f8d6 	bl	8015ad4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "ток");
 8017928:	4b42      	ldr	r3, [pc, #264]	; (8017a34 <Main_screen_func+0x1bc>)
 801792a:	229b      	movs	r2, #155	; 0x9b
 801792c:	21a0      	movs	r1, #160	; 0xa0
 801792e:	4837      	ldr	r0, [pc, #220]	; (8017a0c <Main_screen_func+0x194>)
 8017930:	f7fe f82e 	bl	8015990 <u8g2_DrawUTF8>
			break;
 8017934:	e01e      	b.n	8017974 <Main_screen_func+0xfc>

			// Напряжение
		case 2:
			sprintf(RAM,"%+fV", voltage_measure-Electric_zero);
 8017936:	4b40      	ldr	r3, [pc, #256]	; (8017a38 <Main_screen_func+0x1c0>)
 8017938:	e9d3 0100 	ldrd	r0, r1, [r3]
 801793c:	4b3c      	ldr	r3, [pc, #240]	; (8017a30 <Main_screen_func+0x1b8>)
 801793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017942:	f7e8 fcb1 	bl	80002a8 <__aeabi_dsub>
 8017946:	4602      	mov	r2, r0
 8017948:	460b      	mov	r3, r1
 801794a:	4932      	ldr	r1, [pc, #200]	; (8017a14 <Main_screen_func+0x19c>)
 801794c:	4832      	ldr	r0, [pc, #200]	; (8017a18 <Main_screen_func+0x1a0>)
 801794e:	f006 fa1f 	bl	801dd90 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 8017952:	4b31      	ldr	r3, [pc, #196]	; (8017a18 <Main_screen_func+0x1a0>)
 8017954:	2282      	movs	r2, #130	; 0x82
 8017956:	2105      	movs	r1, #5
 8017958:	482c      	ldr	r0, [pc, #176]	; (8017a0c <Main_screen_func+0x194>)
 801795a:	f7fe f819 	bl	8015990 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 801795e:	4931      	ldr	r1, [pc, #196]	; (8017a24 <Main_screen_func+0x1ac>)
 8017960:	482a      	ldr	r0, [pc, #168]	; (8017a0c <Main_screen_func+0x194>)
 8017962:	f7fe f8b7 	bl	8015ad4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "напряжение");
 8017966:	4b35      	ldr	r3, [pc, #212]	; (8017a3c <Main_screen_func+0x1c4>)
 8017968:	229b      	movs	r2, #155	; 0x9b
 801796a:	21a0      	movs	r1, #160	; 0xa0
 801796c:	4827      	ldr	r0, [pc, #156]	; (8017a0c <Main_screen_func+0x194>)
 801796e:	f7fe f80f 	bl	8015990 <u8g2_DrawUTF8>
			break;
 8017972:	bf00      	nop
		}

		u8g2_DrawUTF8(&u8g2, 5, 35, "Каюков А.Н.");
 8017974:	4b32      	ldr	r3, [pc, #200]	; (8017a40 <Main_screen_func+0x1c8>)
 8017976:	2223      	movs	r2, #35	; 0x23
 8017978:	2105      	movs	r1, #5
 801797a:	4824      	ldr	r0, [pc, #144]	; (8017a0c <Main_screen_func+0x194>)
 801797c:	f7fe f808 	bl	8015990 <u8g2_DrawUTF8>
		u8g2_DrawUTF8(&u8g2, 5, 95, "Агапов А.Д.");
 8017980:	4b30      	ldr	r3, [pc, #192]	; (8017a44 <Main_screen_func+0x1cc>)
 8017982:	225f      	movs	r2, #95	; 0x5f
 8017984:	2105      	movs	r1, #5
 8017986:	4821      	ldr	r0, [pc, #132]	; (8017a0c <Main_screen_func+0x194>)
 8017988:	f7fe f802 	bl	8015990 <u8g2_DrawUTF8>

		sprintf(RAM,"t %.2f", Temperature2);
 801798c:	4b2e      	ldr	r3, [pc, #184]	; (8017a48 <Main_screen_func+0x1d0>)
 801798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017992:	492e      	ldr	r1, [pc, #184]	; (8017a4c <Main_screen_func+0x1d4>)
 8017994:	4820      	ldr	r0, [pc, #128]	; (8017a18 <Main_screen_func+0x1a0>)
 8017996:	f006 f9fb 	bl	801dd90 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 35, RAM);
 801799a:	4b1f      	ldr	r3, [pc, #124]	; (8017a18 <Main_screen_func+0x1a0>)
 801799c:	2223      	movs	r2, #35	; 0x23
 801799e:	2178      	movs	r1, #120	; 0x78
 80179a0:	481a      	ldr	r0, [pc, #104]	; (8017a0c <Main_screen_func+0x194>)
 80179a2:	f7fd fff5 	bl	8015990 <u8g2_DrawUTF8>

		sprintf(RAM,"%.6f", Temperature_coeff_25);
 80179a6:	4b2a      	ldr	r3, [pc, #168]	; (8017a50 <Main_screen_func+0x1d8>)
 80179a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ac:	4929      	ldr	r1, [pc, #164]	; (8017a54 <Main_screen_func+0x1dc>)
 80179ae:	481a      	ldr	r0, [pc, #104]	; (8017a18 <Main_screen_func+0x1a0>)
 80179b0:	f006 f9ee 	bl	801dd90 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 155, RAM);
 80179b4:	4b18      	ldr	r3, [pc, #96]	; (8017a18 <Main_screen_func+0x1a0>)
 80179b6:	229b      	movs	r2, #155	; 0x9b
 80179b8:	2105      	movs	r1, #5
 80179ba:	4814      	ldr	r0, [pc, #80]	; (8017a0c <Main_screen_func+0x194>)
 80179bc:	f7fd ffe8 	bl	8015990 <u8g2_DrawUTF8>

		sprintf(RAM,"%.2f", MCU_temp);
 80179c0:	4b25      	ldr	r3, [pc, #148]	; (8017a58 <Main_screen_func+0x1e0>)
 80179c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c6:	4925      	ldr	r1, [pc, #148]	; (8017a5c <Main_screen_func+0x1e4>)
 80179c8:	4813      	ldr	r0, [pc, #76]	; (8017a18 <Main_screen_func+0x1a0>)
 80179ca:	f006 f9e1 	bl	801dd90 <siprintf>
		u8g2_DrawUTF8(&u8g2, 95, 155, RAM);
 80179ce:	4b12      	ldr	r3, [pc, #72]	; (8017a18 <Main_screen_func+0x1a0>)
 80179d0:	229b      	movs	r2, #155	; 0x9b
 80179d2:	215f      	movs	r1, #95	; 0x5f
 80179d4:	480d      	ldr	r0, [pc, #52]	; (8017a0c <Main_screen_func+0x194>)
 80179d6:	f7fd ffdb 	bl	8015990 <u8g2_DrawUTF8>


		sprintf(RAM,"t %.2f", Temperature);
 80179da:	4b21      	ldr	r3, [pc, #132]	; (8017a60 <Main_screen_func+0x1e8>)
 80179dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179e0:	491a      	ldr	r1, [pc, #104]	; (8017a4c <Main_screen_func+0x1d4>)
 80179e2:	480d      	ldr	r0, [pc, #52]	; (8017a18 <Main_screen_func+0x1a0>)
 80179e4:	f006 f9d4 	bl	801dd90 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 95, RAM);
 80179e8:	4b0b      	ldr	r3, [pc, #44]	; (8017a18 <Main_screen_func+0x1a0>)
 80179ea:	225f      	movs	r2, #95	; 0x5f
 80179ec:	2178      	movs	r1, #120	; 0x78
 80179ee:	4807      	ldr	r0, [pc, #28]	; (8017a0c <Main_screen_func+0x194>)
 80179f0:	f7fd ffce 	bl	8015990 <u8g2_DrawUTF8>

		u8g2_SendBuffer(&u8g2);
 80179f4:	4805      	ldr	r0, [pc, #20]	; (8017a0c <Main_screen_func+0x194>)
 80179f6:	f7fd fa30 	bl	8014e5a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 80179fa:	4804      	ldr	r0, [pc, #16]	; (8017a0c <Main_screen_func+0x194>)
 80179fc:	f7fd f9ba 	bl	8014d74 <u8g2_ClearBuffer>
	}
}
 8017a00:	bf00      	nop
 8017a02:	bd80      	pop	{r7, pc}
 8017a04:	20001c58 	.word	0x20001c58
 8017a08:	08028e84 	.word	0x08028e84
 8017a0c:	20001fd4 	.word	0x20001fd4
 8017a10:	200022a0 	.word	0x200022a0
 8017a14:	080222a8 	.word	0x080222a8
 8017a18:	20002090 	.word	0x20002090
 8017a1c:	200008a8 	.word	0x200008a8
 8017a20:	200022a8 	.word	0x200022a8
 8017a24:	08025c2c 	.word	0x08025c2c
 8017a28:	080222b0 	.word	0x080222b0
 8017a2c:	200052c8 	.word	0x200052c8
 8017a30:	20000888 	.word	0x20000888
 8017a34:	080222c4 	.word	0x080222c4
 8017a38:	20002180 	.word	0x20002180
 8017a3c:	080222cc 	.word	0x080222cc
 8017a40:	080222e4 	.word	0x080222e4
 8017a44:	080222f8 	.word	0x080222f8
 8017a48:	20000878 	.word	0x20000878
 8017a4c:	0802230c 	.word	0x0802230c
 8017a50:	20000078 	.word	0x20000078
 8017a54:	08022314 	.word	0x08022314
 8017a58:	200008a0 	.word	0x200008a0
 8017a5c:	0802231c 	.word	0x0802231c
 8017a60:	20000890 	.word	0x20000890

08017a64 <Main_screen_S9>:



// Меню
void Main_screen_S9(void)
{
 8017a64:	b480      	push	{r7}
 8017a66:	af00      	add	r7, sp, #0
	if(screen=Main_screen)
 8017a68:	4b08      	ldr	r3, [pc, #32]	; (8017a8c <Main_screen_S9+0x28>)
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	701a      	strb	r2, [r3, #0]
	{
		screen=Option_screen;
 8017a6e:	4b07      	ldr	r3, [pc, #28]	; (8017a8c <Main_screen_S9+0x28>)
 8017a70:	2204      	movs	r2, #4
 8017a72:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8017a74:	4b06      	ldr	r3, [pc, #24]	; (8017a90 <Main_screen_S9+0x2c>)
 8017a76:	22ff      	movs	r2, #255	; 0xff
 8017a78:	701a      	strb	r2, [r3, #0]
		Menu_num=0;
 8017a7a:	4b06      	ldr	r3, [pc, #24]	; (8017a94 <Main_screen_S9+0x30>)
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	701a      	strb	r2, [r3, #0]
	}
}
 8017a80:	bf00      	nop
 8017a82:	46bd      	mov	sp, r7
 8017a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a88:	4770      	bx	lr
 8017a8a:	bf00      	nop
 8017a8c:	2000004c 	.word	0x2000004c
 8017a90:	200003a8 	.word	0x200003a8
 8017a94:	200003a9 	.word	0x200003a9

08017a98 <Viewer_timer>:


void Viewer_timer(void)
{
 8017a98:	b480      	push	{r7}
 8017a9a:	af00      	add	r7, sp, #0
	if(++view_tim==300){view=1;view_tim=0;}
 8017a9c:	4b0a      	ldr	r3, [pc, #40]	; (8017ac8 <Viewer_timer+0x30>)
 8017a9e:	881b      	ldrh	r3, [r3, #0]
 8017aa0:	3301      	adds	r3, #1
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	4b08      	ldr	r3, [pc, #32]	; (8017ac8 <Viewer_timer+0x30>)
 8017aa6:	801a      	strh	r2, [r3, #0]
 8017aa8:	4b07      	ldr	r3, [pc, #28]	; (8017ac8 <Viewer_timer+0x30>)
 8017aaa:	881b      	ldrh	r3, [r3, #0]
 8017aac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017ab0:	d105      	bne.n	8017abe <Viewer_timer+0x26>
 8017ab2:	4b06      	ldr	r3, [pc, #24]	; (8017acc <Viewer_timer+0x34>)
 8017ab4:	2201      	movs	r2, #1
 8017ab6:	701a      	strb	r2, [r3, #0]
 8017ab8:	4b03      	ldr	r3, [pc, #12]	; (8017ac8 <Viewer_timer+0x30>)
 8017aba:	2200      	movs	r2, #0
 8017abc:	801a      	strh	r2, [r3, #0]
}
 8017abe:	bf00      	nop
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac6:	4770      	bx	lr
 8017ac8:	20001c56 	.word	0x20001c56
 8017acc:	20001c58 	.word	0x20001c58

08017ad0 <Battery_process>:
const uint8_t eltara_icon[]={0,16,0,16, 0x3F, 0xFC, 0x40, 0x02, 0x80, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x86, 0x01, 0x86, 0x01, 0x87, 0x81, 0x87, 0x81, 0x86, 0x01, 0x86, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x80, 0x01, 0x40, 0x02, 0x3F, 0xFC};



void Battery_process(void)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*) &Vbat_uint,128);
 8017ad4:	2280      	movs	r2, #128	; 0x80
 8017ad6:	4904      	ldr	r1, [pc, #16]	; (8017ae8 <Battery_process+0x18>)
 8017ad8:	4804      	ldr	r0, [pc, #16]	; (8017aec <Battery_process+0x1c>)
 8017ada:	f7f0 fcf7 	bl	80084cc <HAL_ADC_Start_DMA>
	sleep(100);
 8017ade:	2064      	movs	r0, #100	; 0x64
 8017ae0:	f7eb fb80 	bl	80031e4 <sleep>
}
 8017ae4:	bf00      	nop
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	20002188 	.word	0x20002188
 8017aec:	20007ad4 	.word	0x20007ad4

08017af0 <RTC_view>:



void RTC_view(void)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b086      	sub	sp, #24
 8017af4:	af02      	add	r7, sp, #8
	uint8_t battery_percent, i;
	uint32_t bat_sum=0;
 8017af6:	2300      	movs	r3, #0
 8017af8:	60bb      	str	r3, [r7, #8]
	float battery_volt;

	// date & time
	u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017afa:	4959      	ldr	r1, [pc, #356]	; (8017c60 <RTC_view+0x170>)
 8017afc:	4859      	ldr	r0, [pc, #356]	; (8017c64 <RTC_view+0x174>)
 8017afe:	f7fd ffe9 	bl	8015ad4 <u8g2_SetFont>
	sprintf(RAM,"%02d.%02d.%02d", day, month, year);
 8017b02:	4b59      	ldr	r3, [pc, #356]	; (8017c68 <RTC_view+0x178>)
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	461a      	mov	r2, r3
 8017b08:	4b58      	ldr	r3, [pc, #352]	; (8017c6c <RTC_view+0x17c>)
 8017b0a:	781b      	ldrb	r3, [r3, #0]
 8017b0c:	4619      	mov	r1, r3
 8017b0e:	4b58      	ldr	r3, [pc, #352]	; (8017c70 <RTC_view+0x180>)
 8017b10:	781b      	ldrb	r3, [r3, #0]
 8017b12:	9300      	str	r3, [sp, #0]
 8017b14:	460b      	mov	r3, r1
 8017b16:	4957      	ldr	r1, [pc, #348]	; (8017c74 <RTC_view+0x184>)
 8017b18:	4857      	ldr	r0, [pc, #348]	; (8017c78 <RTC_view+0x188>)
 8017b1a:	f006 f939 	bl	801dd90 <siprintf>
	u8g2_DrawUTF8(&u8g2, 0, 12, RAM);
 8017b1e:	4b56      	ldr	r3, [pc, #344]	; (8017c78 <RTC_view+0x188>)
 8017b20:	220c      	movs	r2, #12
 8017b22:	2100      	movs	r1, #0
 8017b24:	484f      	ldr	r0, [pc, #316]	; (8017c64 <RTC_view+0x174>)
 8017b26:	f7fd ff33 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:%02d:%02d", hour, minute, sec);
 8017b2a:	4b54      	ldr	r3, [pc, #336]	; (8017c7c <RTC_view+0x18c>)
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	461a      	mov	r2, r3
 8017b30:	4b53      	ldr	r3, [pc, #332]	; (8017c80 <RTC_view+0x190>)
 8017b32:	781b      	ldrb	r3, [r3, #0]
 8017b34:	4619      	mov	r1, r3
 8017b36:	4b53      	ldr	r3, [pc, #332]	; (8017c84 <RTC_view+0x194>)
 8017b38:	781b      	ldrb	r3, [r3, #0]
 8017b3a:	9300      	str	r3, [sp, #0]
 8017b3c:	460b      	mov	r3, r1
 8017b3e:	4952      	ldr	r1, [pc, #328]	; (8017c88 <RTC_view+0x198>)
 8017b40:	484d      	ldr	r0, [pc, #308]	; (8017c78 <RTC_view+0x188>)
 8017b42:	f006 f925 	bl	801dd90 <siprintf>
	u8g2_DrawUTF8(&u8g2, 81, 12, RAM);
 8017b46:	4b4c      	ldr	r3, [pc, #304]	; (8017c78 <RTC_view+0x188>)
 8017b48:	220c      	movs	r2, #12
 8017b4a:	2151      	movs	r1, #81	; 0x51
 8017b4c:	4845      	ldr	r0, [pc, #276]	; (8017c64 <RTC_view+0x174>)
 8017b4e:	f7fd ff1f 	bl	8015990 <u8g2_DrawUTF8>

	// Tarring
	if(Pressure_zero!=0)DrawImage(tara_icon, 194, 2, 1);
 8017b52:	4b4e      	ldr	r3, [pc, #312]	; (8017c8c <RTC_view+0x19c>)
 8017b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017b58:	f04f 0200 	mov.w	r2, #0
 8017b5c:	f04f 0300 	mov.w	r3, #0
 8017b60:	f7e8 ffc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8017b64:	4603      	mov	r3, r0
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d105      	bne.n	8017b76 <RTC_view+0x86>
 8017b6a:	2301      	movs	r3, #1
 8017b6c:	2202      	movs	r2, #2
 8017b6e:	21c2      	movs	r1, #194	; 0xc2
 8017b70:	4847      	ldr	r0, [pc, #284]	; (8017c90 <RTC_view+0x1a0>)
 8017b72:	f7ea ffff 	bl	8002b74 <DrawImage>

	//El tarring
	if(Electric_zero!=0)DrawImage(eltara_icon, 176, 2, 1);
 8017b76:	4b47      	ldr	r3, [pc, #284]	; (8017c94 <RTC_view+0x1a4>)
 8017b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017b7c:	f04f 0200 	mov.w	r2, #0
 8017b80:	f04f 0300 	mov.w	r3, #0
 8017b84:	f7e8 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d105      	bne.n	8017b9a <RTC_view+0xaa>
 8017b8e:	2301      	movs	r3, #1
 8017b90:	2202      	movs	r2, #2
 8017b92:	21b0      	movs	r1, #176	; 0xb0
 8017b94:	4840      	ldr	r0, [pc, #256]	; (8017c98 <RTC_view+0x1a8>)
 8017b96:	f7ea ffed 	bl	8002b74 <DrawImage>

	// Battery
	for(i=0;i<128;i++)bat_sum+=Vbat_uint[i];
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	73fb      	strb	r3, [r7, #15]
 8017b9e:	e00a      	b.n	8017bb6 <RTC_view+0xc6>
 8017ba0:	7bfb      	ldrb	r3, [r7, #15]
 8017ba2:	4a3e      	ldr	r2, [pc, #248]	; (8017c9c <RTC_view+0x1ac>)
 8017ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017ba8:	461a      	mov	r2, r3
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	4413      	add	r3, r2
 8017bae:	60bb      	str	r3, [r7, #8]
 8017bb0:	7bfb      	ldrb	r3, [r7, #15]
 8017bb2:	3301      	adds	r3, #1
 8017bb4:	73fb      	strb	r3, [r7, #15]
 8017bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	daf0      	bge.n	8017ba0 <RTC_view+0xb0>
	battery_volt = 0.0074258*(bat_sum>>7);
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	09db      	lsrs	r3, r3, #7
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f7e8 fcae 	bl	8000524 <__aeabi_ui2d>
 8017bc8:	a321      	add	r3, pc, #132	; (adr r3, 8017c50 <RTC_view+0x160>)
 8017bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bce:	f7e8 fd23 	bl	8000618 <__aeabi_dmul>
 8017bd2:	4602      	mov	r2, r0
 8017bd4:	460b      	mov	r3, r1
 8017bd6:	4610      	mov	r0, r2
 8017bd8:	4619      	mov	r1, r3
 8017bda:	f7e9 f815 	bl	8000c08 <__aeabi_d2f>
 8017bde:	4603      	mov	r3, r0
 8017be0:	607b      	str	r3, [r7, #4]
	DrawImage(bat_icon, 216, 4, 1);
 8017be2:	2301      	movs	r3, #1
 8017be4:	2204      	movs	r2, #4
 8017be6:	21d8      	movs	r1, #216	; 0xd8
 8017be8:	482d      	ldr	r0, [pc, #180]	; (8017ca0 <RTC_view+0x1b0>)
 8017bea:	f7ea ffc3 	bl	8002b74 <DrawImage>
	battery_percent = (uint8_t)((battery_volt-2.9)*100);
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	f7e8 fcba 	bl	8000568 <__aeabi_f2d>
 8017bf4:	a318      	add	r3, pc, #96	; (adr r3, 8017c58 <RTC_view+0x168>)
 8017bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bfa:	f7e8 fb55 	bl	80002a8 <__aeabi_dsub>
 8017bfe:	4602      	mov	r2, r0
 8017c00:	460b      	mov	r3, r1
 8017c02:	4610      	mov	r0, r2
 8017c04:	4619      	mov	r1, r3
 8017c06:	f04f 0200 	mov.w	r2, #0
 8017c0a:	4b26      	ldr	r3, [pc, #152]	; (8017ca4 <RTC_view+0x1b4>)
 8017c0c:	f7e8 fd04 	bl	8000618 <__aeabi_dmul>
 8017c10:	4602      	mov	r2, r0
 8017c12:	460b      	mov	r3, r1
 8017c14:	4610      	mov	r0, r2
 8017c16:	4619      	mov	r1, r3
 8017c18:	f7e8 ffd6 	bl	8000bc8 <__aeabi_d2uiz>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	70fb      	strb	r3, [r7, #3]

	u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8017c20:	4921      	ldr	r1, [pc, #132]	; (8017ca8 <RTC_view+0x1b8>)
 8017c22:	4810      	ldr	r0, [pc, #64]	; (8017c64 <RTC_view+0x174>)
 8017c24:	f7fd ff56 	bl	8015ad4 <u8g2_SetFont>
	sprintf(RAM,"%.2f", battery_volt);
 8017c28:	6878      	ldr	r0, [r7, #4]
 8017c2a:	f7e8 fc9d 	bl	8000568 <__aeabi_f2d>
 8017c2e:	4602      	mov	r2, r0
 8017c30:	460b      	mov	r3, r1
 8017c32:	491e      	ldr	r1, [pc, #120]	; (8017cac <RTC_view+0x1bc>)
 8017c34:	4810      	ldr	r0, [pc, #64]	; (8017c78 <RTC_view+0x188>)
 8017c36:	f006 f8ab 	bl	801dd90 <siprintf>
	//sprintf(RAM,"%d", battery_percent);
	u8g2_DrawUTF8(&u8g2, 219, 13, RAM);
 8017c3a:	4b0f      	ldr	r3, [pc, #60]	; (8017c78 <RTC_view+0x188>)
 8017c3c:	220d      	movs	r2, #13
 8017c3e:	21db      	movs	r1, #219	; 0xdb
 8017c40:	4808      	ldr	r0, [pc, #32]	; (8017c64 <RTC_view+0x174>)
 8017c42:	f7fd fea5 	bl	8015990 <u8g2_DrawUTF8>
}
 8017c46:	bf00      	nop
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
 8017c4e:	bf00      	nop
 8017c50:	02589fd4 	.word	0x02589fd4
 8017c54:	3f7e6a84 	.word	0x3f7e6a84
 8017c58:	33333333 	.word	0x33333333
 8017c5c:	40073333 	.word	0x40073333
 8017c60:	08025c2c 	.word	0x08025c2c
 8017c64:	20001fd4 	.word	0x20001fd4
 8017c68:	20008754 	.word	0x20008754
 8017c6c:	2000875b 	.word	0x2000875b
 8017c70:	2000875c 	.word	0x2000875c
 8017c74:	08022324 	.word	0x08022324
 8017c78:	20002090 	.word	0x20002090
 8017c7c:	20008757 	.word	0x20008757
 8017c80:	2000875e 	.word	0x2000875e
 8017c84:	20008758 	.word	0x20008758
 8017c88:	08022334 	.word	0x08022334
 8017c8c:	20000880 	.word	0x20000880
 8017c90:	08029500 	.word	0x08029500
 8017c94:	20000888 	.word	0x20000888
 8017c98:	08029524 	.word	0x08029524
 8017c9c:	20002188 	.word	0x20002188
 8017ca0:	080294d8 	.word	0x080294d8
 8017ca4:	40590000 	.word	0x40590000
 8017ca8:	08023fb8 	.word	0x08023fb8
 8017cac:	08022344 	.word	0x08022344

08017cb0 <RTC_process>:


void RTC_process(void)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b086      	sub	sp, #24
 8017cb4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8017cb6:	1d3b      	adds	r3, r7, #4
 8017cb8:	2200      	movs	r2, #0
 8017cba:	601a      	str	r2, [r3, #0]
 8017cbc:	605a      	str	r2, [r3, #4]
 8017cbe:	609a      	str	r2, [r3, #8]
 8017cc0:	60da      	str	r2, [r3, #12]
 8017cc2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8017cc8:	463b      	mov	r3, r7
 8017cca:	2200      	movs	r2, #0
 8017ccc:	4619      	mov	r1, r3
 8017cce:	4811      	ldr	r0, [pc, #68]	; (8017d14 <RTC_process+0x64>)
 8017cd0:	f7f5 feec 	bl	800daac <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8017cd4:	1d3b      	adds	r3, r7, #4
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	4619      	mov	r1, r3
 8017cda:	480e      	ldr	r0, [pc, #56]	; (8017d14 <RTC_process+0x64>)
 8017cdc:	f7f5 fe03 	bl	800d8e6 <HAL_RTC_GetTime>

	year=sDate.Year;
 8017ce0:	78fa      	ldrb	r2, [r7, #3]
 8017ce2:	4b0d      	ldr	r3, [pc, #52]	; (8017d18 <RTC_process+0x68>)
 8017ce4:	701a      	strb	r2, [r3, #0]
	month=sDate.Month;
 8017ce6:	787a      	ldrb	r2, [r7, #1]
 8017ce8:	4b0c      	ldr	r3, [pc, #48]	; (8017d1c <RTC_process+0x6c>)
 8017cea:	701a      	strb	r2, [r3, #0]
	day=sDate.Date;
 8017cec:	78ba      	ldrb	r2, [r7, #2]
 8017cee:	4b0c      	ldr	r3, [pc, #48]	; (8017d20 <RTC_process+0x70>)
 8017cf0:	701a      	strb	r2, [r3, #0]
	hour=sTime.Hours;
 8017cf2:	793a      	ldrb	r2, [r7, #4]
 8017cf4:	4b0b      	ldr	r3, [pc, #44]	; (8017d24 <RTC_process+0x74>)
 8017cf6:	701a      	strb	r2, [r3, #0]
	minute=sTime.Minutes;
 8017cf8:	797a      	ldrb	r2, [r7, #5]
 8017cfa:	4b0b      	ldr	r3, [pc, #44]	; (8017d28 <RTC_process+0x78>)
 8017cfc:	701a      	strb	r2, [r3, #0]
	sec=sTime.Seconds;
 8017cfe:	79ba      	ldrb	r2, [r7, #6]
 8017d00:	4b0a      	ldr	r3, [pc, #40]	; (8017d2c <RTC_process+0x7c>)
 8017d02:	701a      	strb	r2, [r3, #0]

	sleep(1000);
 8017d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017d08:	f7eb fa6c 	bl	80031e4 <sleep>
}
 8017d0c:	bf00      	nop
 8017d0e:	3718      	adds	r7, #24
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}
 8017d14:	20007858 	.word	0x20007858
 8017d18:	2000875c 	.word	0x2000875c
 8017d1c:	2000875b 	.word	0x2000875b
 8017d20:	20008754 	.word	0x20008754
 8017d24:	20008757 	.word	0x20008757
 8017d28:	2000875e 	.word	0x2000875e
 8017d2c:	20008758 	.word	0x20008758

08017d30 <RTC_set>:


void RTC_set(uint8_t rtc_year, uint8_t rtc_month, uint8_t rtc_day, uint8_t rtc_hour, uint8_t rtc_min, uint8_t rtc_sec)
{
 8017d30:	b590      	push	{r4, r7, lr}
 8017d32:	b089      	sub	sp, #36	; 0x24
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	4604      	mov	r4, r0
 8017d38:	4608      	mov	r0, r1
 8017d3a:	4611      	mov	r1, r2
 8017d3c:	461a      	mov	r2, r3
 8017d3e:	4623      	mov	r3, r4
 8017d40:	71fb      	strb	r3, [r7, #7]
 8017d42:	4603      	mov	r3, r0
 8017d44:	71bb      	strb	r3, [r7, #6]
 8017d46:	460b      	mov	r3, r1
 8017d48:	717b      	strb	r3, [r7, #5]
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8017d4e:	f107 030c 	add.w	r3, r7, #12
 8017d52:	2200      	movs	r2, #0
 8017d54:	601a      	str	r2, [r3, #0]
 8017d56:	605a      	str	r2, [r3, #4]
 8017d58:	609a      	str	r2, [r3, #8]
 8017d5a:	60da      	str	r2, [r3, #12]
 8017d5c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017d5e:	2300      	movs	r3, #0
 8017d60:	60bb      	str	r3, [r7, #8]
	HAL_RTC_DeInit(&hrtc);
 8017d62:	482b      	ldr	r0, [pc, #172]	; (8017e10 <RTC_set+0xe0>)
 8017d64:	f7f5 fcae 	bl	800d6c4 <HAL_RTC_DeInit>


	hrtc.Instance = RTC;
 8017d68:	4b29      	ldr	r3, [pc, #164]	; (8017e10 <RTC_set+0xe0>)
 8017d6a:	4a2a      	ldr	r2, [pc, #168]	; (8017e14 <RTC_set+0xe4>)
 8017d6c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8017d6e:	4b28      	ldr	r3, [pc, #160]	; (8017e10 <RTC_set+0xe0>)
 8017d70:	2200      	movs	r2, #0
 8017d72:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8017d74:	4b26      	ldr	r3, [pc, #152]	; (8017e10 <RTC_set+0xe0>)
 8017d76:	227f      	movs	r2, #127	; 0x7f
 8017d78:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8017d7a:	4b25      	ldr	r3, [pc, #148]	; (8017e10 <RTC_set+0xe0>)
 8017d7c:	22ff      	movs	r2, #255	; 0xff
 8017d7e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8017d80:	4b23      	ldr	r3, [pc, #140]	; (8017e10 <RTC_set+0xe0>)
 8017d82:	2200      	movs	r2, #0
 8017d84:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8017d86:	4b22      	ldr	r3, [pc, #136]	; (8017e10 <RTC_set+0xe0>)
 8017d88:	2200      	movs	r2, #0
 8017d8a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8017d8c:	4b20      	ldr	r3, [pc, #128]	; (8017e10 <RTC_set+0xe0>)
 8017d8e:	2200      	movs	r2, #0
 8017d90:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8017d92:	4b1f      	ldr	r3, [pc, #124]	; (8017e10 <RTC_set+0xe0>)
 8017d94:	2200      	movs	r2, #0
 8017d96:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8017d98:	481d      	ldr	r0, [pc, #116]	; (8017e10 <RTC_set+0xe0>)
 8017d9a:	f7f5 fc17 	bl	800d5cc <HAL_RTC_Init>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d001      	beq.n	8017da8 <RTC_set+0x78>
	{
	Error_Handler();
 8017da4:	f7ee fd9a 	bl	80068dc <Error_Handler>
	}


	sTime.Hours = rtc_hour;
 8017da8:	793b      	ldrb	r3, [r7, #4]
 8017daa:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtc_min;
 8017dac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017db0:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtc_sec;
 8017db2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017db6:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017db8:	2300      	movs	r3, #0
 8017dba:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8017dc0:	f107 030c 	add.w	r3, r7, #12
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	4619      	mov	r1, r3
 8017dc8:	4811      	ldr	r0, [pc, #68]	; (8017e10 <RTC_set+0xe0>)
 8017dca:	f7f5 fcef 	bl	800d7ac <HAL_RTC_SetTime>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d001      	beq.n	8017dd8 <RTC_set+0xa8>
	{
		Error_Handler();
 8017dd4:	f7ee fd82 	bl	80068dc <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017dd8:	2301      	movs	r3, #1
 8017dda:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtc_month;
 8017ddc:	79bb      	ldrb	r3, [r7, #6]
 8017dde:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtc_day;
 8017de0:	797b      	ldrb	r3, [r7, #5]
 8017de2:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtc_year;
 8017de4:	79fb      	ldrb	r3, [r7, #7]
 8017de6:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8017de8:	f107 0308 	add.w	r3, r7, #8
 8017dec:	2200      	movs	r2, #0
 8017dee:	4619      	mov	r1, r3
 8017df0:	4807      	ldr	r0, [pc, #28]	; (8017e10 <RTC_set+0xe0>)
 8017df2:	f7f5 fdd4 	bl	800d99e <HAL_RTC_SetDate>
 8017df6:	4603      	mov	r3, r0
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d001      	beq.n	8017e00 <RTC_set+0xd0>
	{
		Error_Handler();
 8017dfc:	f7ee fd6e 	bl	80068dc <Error_Handler>
	}

	HAL_RTCEx_EnableBypassShadow(&hrtc);
 8017e00:	4803      	ldr	r0, [pc, #12]	; (8017e10 <RTC_set+0xe0>)
 8017e02:	f7f5 ff71 	bl	800dce8 <HAL_RTCEx_EnableBypassShadow>
}
 8017e06:	bf00      	nop
 8017e08:	3724      	adds	r7, #36	; 0x24
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd90      	pop	{r4, r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	20007858 	.word	0x20007858
 8017e14:	40002800 	.word	0x40002800

08017e18 <RTC_screen_func>:


void RTC_screen_func(void)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b082      	sub	sp, #8
 8017e1c:	af02      	add	r7, sp, #8
	if(old_active_string==0xFF)
 8017e1e:	4b4d      	ldr	r3, [pc, #308]	; (8017f54 <RTC_screen_func+0x13c>)
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	2bff      	cmp	r3, #255	; 0xff
 8017e24:	d11a      	bne.n	8017e5c <RTC_screen_func+0x44>
	{
		old_active_string=0;
 8017e26:	4b4b      	ldr	r3, [pc, #300]	; (8017f54 <RTC_screen_func+0x13c>)
 8017e28:	2200      	movs	r2, #0
 8017e2a:	701a      	strb	r2, [r3, #0]
		year_temp=year;
 8017e2c:	4b4a      	ldr	r3, [pc, #296]	; (8017f58 <RTC_screen_func+0x140>)
 8017e2e:	781a      	ldrb	r2, [r3, #0]
 8017e30:	4b4a      	ldr	r3, [pc, #296]	; (8017f5c <RTC_screen_func+0x144>)
 8017e32:	701a      	strb	r2, [r3, #0]
		month_temp=month;
 8017e34:	4b4a      	ldr	r3, [pc, #296]	; (8017f60 <RTC_screen_func+0x148>)
 8017e36:	781a      	ldrb	r2, [r3, #0]
 8017e38:	4b4a      	ldr	r3, [pc, #296]	; (8017f64 <RTC_screen_func+0x14c>)
 8017e3a:	701a      	strb	r2, [r3, #0]
		day_temp=day;
 8017e3c:	4b4a      	ldr	r3, [pc, #296]	; (8017f68 <RTC_screen_func+0x150>)
 8017e3e:	781a      	ldrb	r2, [r3, #0]
 8017e40:	4b4a      	ldr	r3, [pc, #296]	; (8017f6c <RTC_screen_func+0x154>)
 8017e42:	701a      	strb	r2, [r3, #0]
		hour_temp=hour;
 8017e44:	4b4a      	ldr	r3, [pc, #296]	; (8017f70 <RTC_screen_func+0x158>)
 8017e46:	781a      	ldrb	r2, [r3, #0]
 8017e48:	4b4a      	ldr	r3, [pc, #296]	; (8017f74 <RTC_screen_func+0x15c>)
 8017e4a:	701a      	strb	r2, [r3, #0]
		minute_temp=minute;
 8017e4c:	4b4a      	ldr	r3, [pc, #296]	; (8017f78 <RTC_screen_func+0x160>)
 8017e4e:	781a      	ldrb	r2, [r3, #0]
 8017e50:	4b4a      	ldr	r3, [pc, #296]	; (8017f7c <RTC_screen_func+0x164>)
 8017e52:	701a      	strb	r2, [r3, #0]
		sec_temp=sec;
 8017e54:	4b4a      	ldr	r3, [pc, #296]	; (8017f80 <RTC_screen_func+0x168>)
 8017e56:	781a      	ldrb	r2, [r3, #0]
 8017e58:	4b4a      	ldr	r3, [pc, #296]	; (8017f84 <RTC_screen_func+0x16c>)
 8017e5a:	701a      	strb	r2, [r3, #0]
	}

	// date time
	RTC_view();
 8017e5c:	f7ff fe48 	bl	8017af0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017e60:	4949      	ldr	r1, [pc, #292]	; (8017f88 <RTC_screen_func+0x170>)
 8017e62:	484a      	ldr	r0, [pc, #296]	; (8017f8c <RTC_screen_func+0x174>)
 8017e64:	f7fd fe36 	bl	8015ad4 <u8g2_SetFont>

	// Date
	u8g2_DrawUTF8(&u8g2, 20, 50, "Дата:");
 8017e68:	4b49      	ldr	r3, [pc, #292]	; (8017f90 <RTC_screen_func+0x178>)
 8017e6a:	2232      	movs	r2, #50	; 0x32
 8017e6c:	2114      	movs	r1, #20
 8017e6e:	4847      	ldr	r0, [pc, #284]	; (8017f8c <RTC_screen_func+0x174>)
 8017e70:	f7fd fd8e 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d.", day_temp);
 8017e74:	4b3d      	ldr	r3, [pc, #244]	; (8017f6c <RTC_screen_func+0x154>)
 8017e76:	781b      	ldrb	r3, [r3, #0]
 8017e78:	461a      	mov	r2, r3
 8017e7a:	4946      	ldr	r1, [pc, #280]	; (8017f94 <RTC_screen_func+0x17c>)
 8017e7c:	4846      	ldr	r0, [pc, #280]	; (8017f98 <RTC_screen_func+0x180>)
 8017e7e:	f005 ff87 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(120, 50, RAM, edit_param, 0);
 8017e82:	4b46      	ldr	r3, [pc, #280]	; (8017f9c <RTC_screen_func+0x184>)
 8017e84:	781b      	ldrb	r3, [r3, #0]
 8017e86:	2200      	movs	r2, #0
 8017e88:	9200      	str	r2, [sp, #0]
 8017e8a:	4a43      	ldr	r2, [pc, #268]	; (8017f98 <RTC_screen_func+0x180>)
 8017e8c:	2132      	movs	r1, #50	; 0x32
 8017e8e:	2078      	movs	r0, #120	; 0x78
 8017e90:	f7ea fffe 	bl	8002e90 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d.", month_temp);
 8017e94:	4b33      	ldr	r3, [pc, #204]	; (8017f64 <RTC_screen_func+0x14c>)
 8017e96:	781b      	ldrb	r3, [r3, #0]
 8017e98:	461a      	mov	r2, r3
 8017e9a:	493e      	ldr	r1, [pc, #248]	; (8017f94 <RTC_screen_func+0x17c>)
 8017e9c:	483e      	ldr	r0, [pc, #248]	; (8017f98 <RTC_screen_func+0x180>)
 8017e9e:	f005 ff77 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(150, 50, RAM, edit_param, 1);
 8017ea2:	4b3e      	ldr	r3, [pc, #248]	; (8017f9c <RTC_screen_func+0x184>)
 8017ea4:	781b      	ldrb	r3, [r3, #0]
 8017ea6:	2201      	movs	r2, #1
 8017ea8:	9200      	str	r2, [sp, #0]
 8017eaa:	4a3b      	ldr	r2, [pc, #236]	; (8017f98 <RTC_screen_func+0x180>)
 8017eac:	2132      	movs	r1, #50	; 0x32
 8017eae:	2096      	movs	r0, #150	; 0x96
 8017eb0:	f7ea ffee 	bl	8002e90 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", year_temp);
 8017eb4:	4b29      	ldr	r3, [pc, #164]	; (8017f5c <RTC_screen_func+0x144>)
 8017eb6:	781b      	ldrb	r3, [r3, #0]
 8017eb8:	461a      	mov	r2, r3
 8017eba:	4939      	ldr	r1, [pc, #228]	; (8017fa0 <RTC_screen_func+0x188>)
 8017ebc:	4836      	ldr	r0, [pc, #216]	; (8017f98 <RTC_screen_func+0x180>)
 8017ebe:	f005 ff67 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(180, 50, RAM, edit_param, 2);
 8017ec2:	4b36      	ldr	r3, [pc, #216]	; (8017f9c <RTC_screen_func+0x184>)
 8017ec4:	781b      	ldrb	r3, [r3, #0]
 8017ec6:	2202      	movs	r2, #2
 8017ec8:	9200      	str	r2, [sp, #0]
 8017eca:	4a33      	ldr	r2, [pc, #204]	; (8017f98 <RTC_screen_func+0x180>)
 8017ecc:	2132      	movs	r1, #50	; 0x32
 8017ece:	20b4      	movs	r0, #180	; 0xb4
 8017ed0:	f7ea ffde 	bl	8002e90 <Blink_Edit_Parameter>


	// Date
	u8g2_DrawUTF8(&u8g2, 20, 70, "Время:");
 8017ed4:	4b33      	ldr	r3, [pc, #204]	; (8017fa4 <RTC_screen_func+0x18c>)
 8017ed6:	2246      	movs	r2, #70	; 0x46
 8017ed8:	2114      	movs	r1, #20
 8017eda:	482c      	ldr	r0, [pc, #176]	; (8017f8c <RTC_screen_func+0x174>)
 8017edc:	f7fd fd58 	bl	8015990 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:", hour_temp);
 8017ee0:	4b24      	ldr	r3, [pc, #144]	; (8017f74 <RTC_screen_func+0x15c>)
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	461a      	mov	r2, r3
 8017ee6:	4930      	ldr	r1, [pc, #192]	; (8017fa8 <RTC_screen_func+0x190>)
 8017ee8:	482b      	ldr	r0, [pc, #172]	; (8017f98 <RTC_screen_func+0x180>)
 8017eea:	f005 ff51 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(120, 70, RAM, edit_param, 3);
 8017eee:	4b2b      	ldr	r3, [pc, #172]	; (8017f9c <RTC_screen_func+0x184>)
 8017ef0:	781b      	ldrb	r3, [r3, #0]
 8017ef2:	2203      	movs	r2, #3
 8017ef4:	9200      	str	r2, [sp, #0]
 8017ef6:	4a28      	ldr	r2, [pc, #160]	; (8017f98 <RTC_screen_func+0x180>)
 8017ef8:	2146      	movs	r1, #70	; 0x46
 8017efa:	2078      	movs	r0, #120	; 0x78
 8017efc:	f7ea ffc8 	bl	8002e90 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d:", minute_temp);
 8017f00:	4b1e      	ldr	r3, [pc, #120]	; (8017f7c <RTC_screen_func+0x164>)
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	461a      	mov	r2, r3
 8017f06:	4928      	ldr	r1, [pc, #160]	; (8017fa8 <RTC_screen_func+0x190>)
 8017f08:	4823      	ldr	r0, [pc, #140]	; (8017f98 <RTC_screen_func+0x180>)
 8017f0a:	f005 ff41 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(150, 70, RAM, edit_param, 4);
 8017f0e:	4b23      	ldr	r3, [pc, #140]	; (8017f9c <RTC_screen_func+0x184>)
 8017f10:	781b      	ldrb	r3, [r3, #0]
 8017f12:	2204      	movs	r2, #4
 8017f14:	9200      	str	r2, [sp, #0]
 8017f16:	4a20      	ldr	r2, [pc, #128]	; (8017f98 <RTC_screen_func+0x180>)
 8017f18:	2146      	movs	r1, #70	; 0x46
 8017f1a:	2096      	movs	r0, #150	; 0x96
 8017f1c:	f7ea ffb8 	bl	8002e90 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", sec_temp);
 8017f20:	4b18      	ldr	r3, [pc, #96]	; (8017f84 <RTC_screen_func+0x16c>)
 8017f22:	781b      	ldrb	r3, [r3, #0]
 8017f24:	461a      	mov	r2, r3
 8017f26:	491e      	ldr	r1, [pc, #120]	; (8017fa0 <RTC_screen_func+0x188>)
 8017f28:	481b      	ldr	r0, [pc, #108]	; (8017f98 <RTC_screen_func+0x180>)
 8017f2a:	f005 ff31 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(180, 70, RAM, edit_param, 5);
 8017f2e:	4b1b      	ldr	r3, [pc, #108]	; (8017f9c <RTC_screen_func+0x184>)
 8017f30:	781b      	ldrb	r3, [r3, #0]
 8017f32:	2205      	movs	r2, #5
 8017f34:	9200      	str	r2, [sp, #0]
 8017f36:	4a18      	ldr	r2, [pc, #96]	; (8017f98 <RTC_screen_func+0x180>)
 8017f38:	2146      	movs	r1, #70	; 0x46
 8017f3a:	20b4      	movs	r0, #180	; 0xb4
 8017f3c:	f7ea ffa8 	bl	8002e90 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8017f40:	4812      	ldr	r0, [pc, #72]	; (8017f8c <RTC_screen_func+0x174>)
 8017f42:	f7fc ff8a 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017f46:	4811      	ldr	r0, [pc, #68]	; (8017f8c <RTC_screen_func+0x174>)
 8017f48:	f7fc ff14 	bl	8014d74 <u8g2_ClearBuffer>
}
 8017f4c:	bf00      	nop
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
 8017f52:	bf00      	nop
 8017f54:	200003a8 	.word	0x200003a8
 8017f58:	2000875c 	.word	0x2000875c
 8017f5c:	2000875d 	.word	0x2000875d
 8017f60:	2000875b 	.word	0x2000875b
 8017f64:	20008759 	.word	0x20008759
 8017f68:	20008754 	.word	0x20008754
 8017f6c:	20008756 	.word	0x20008756
 8017f70:	20008757 	.word	0x20008757
 8017f74:	2000875f 	.word	0x2000875f
 8017f78:	2000875e 	.word	0x2000875e
 8017f7c:	20008755 	.word	0x20008755
 8017f80:	20008758 	.word	0x20008758
 8017f84:	2000875a 	.word	0x2000875a
 8017f88:	08027258 	.word	0x08027258
 8017f8c:	20001fd4 	.word	0x20001fd4
 8017f90:	0802234c 	.word	0x0802234c
 8017f94:	08022358 	.word	0x08022358
 8017f98:	20002090 	.word	0x20002090
 8017f9c:	20000864 	.word	0x20000864
 8017fa0:	08022360 	.word	0x08022360
 8017fa4:	08022368 	.word	0x08022368
 8017fa8:	08022374 	.word	0x08022374

08017fac <RTC_screen_S9>:



// MENU
void RTC_screen_S9(void)
{
 8017fac:	b480      	push	{r7}
 8017fae:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8017fb0:	4b06      	ldr	r3, [pc, #24]	; (8017fcc <RTC_screen_S9+0x20>)
 8017fb2:	2208      	movs	r2, #8
 8017fb4:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8017fb6:	4b06      	ldr	r3, [pc, #24]	; (8017fd0 <RTC_screen_S9+0x24>)
 8017fb8:	22ff      	movs	r2, #255	; 0xff
 8017fba:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 8017fbc:	4b05      	ldr	r3, [pc, #20]	; (8017fd4 <RTC_screen_S9+0x28>)
 8017fbe:	2202      	movs	r2, #2
 8017fc0:	701a      	strb	r2, [r3, #0]
}
 8017fc2:	bf00      	nop
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fca:	4770      	bx	lr
 8017fcc:	2000004c 	.word	0x2000004c
 8017fd0:	200003a8 	.word	0x200003a8
 8017fd4:	200003a9 	.word	0x200003a9

08017fd8 <RTC_screen_S5>:

// DOWN
void RTC_screen_S5(void)
{
 8017fd8:	b480      	push	{r7}
 8017fda:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8017fdc:	4b07      	ldr	r3, [pc, #28]	; (8017ffc <RTC_screen_S5+0x24>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	2b04      	cmp	r3, #4
 8017fe2:	d805      	bhi.n	8017ff0 <RTC_screen_S5+0x18>
 8017fe4:	4b05      	ldr	r3, [pc, #20]	; (8017ffc <RTC_screen_S5+0x24>)
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	3301      	adds	r3, #1
 8017fea:	b2da      	uxtb	r2, r3
 8017fec:	4b03      	ldr	r3, [pc, #12]	; (8017ffc <RTC_screen_S5+0x24>)
 8017fee:	701a      	strb	r2, [r3, #0]
}
 8017ff0:	bf00      	nop
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff8:	4770      	bx	lr
 8017ffa:	bf00      	nop
 8017ffc:	20000864 	.word	0x20000864

08018000 <RTC_screen_S8>:

// UP
void RTC_screen_S8(void)
{
 8018000:	b480      	push	{r7}
 8018002:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8018004:	4b07      	ldr	r3, [pc, #28]	; (8018024 <RTC_screen_S8+0x24>)
 8018006:	781b      	ldrb	r3, [r3, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d005      	beq.n	8018018 <RTC_screen_S8+0x18>
 801800c:	4b05      	ldr	r3, [pc, #20]	; (8018024 <RTC_screen_S8+0x24>)
 801800e:	781b      	ldrb	r3, [r3, #0]
 8018010:	3b01      	subs	r3, #1
 8018012:	b2da      	uxtb	r2, r3
 8018014:	4b03      	ldr	r3, [pc, #12]	; (8018024 <RTC_screen_S8+0x24>)
 8018016:	701a      	strb	r2, [r3, #0]
}
 8018018:	bf00      	nop
 801801a:	46bd      	mov	sp, r7
 801801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018020:	4770      	bx	lr
 8018022:	bf00      	nop
 8018024:	20000864 	.word	0x20000864

08018028 <RTC_screen_S6>:



// BACKWARD
void RTC_screen_S6(void)
{
 8018028:	b480      	push	{r7}
 801802a:	af00      	add	r7, sp, #0
	switch(edit_param)
 801802c:	4b32      	ldr	r3, [pc, #200]	; (80180f8 <RTC_screen_S6+0xd0>)
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	2b05      	cmp	r3, #5
 8018032:	d85c      	bhi.n	80180ee <RTC_screen_S6+0xc6>
 8018034:	a201      	add	r2, pc, #4	; (adr r2, 801803c <RTC_screen_S6+0x14>)
 8018036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801803a:	bf00      	nop
 801803c:	08018055 	.word	0x08018055
 8018040:	0801806b 	.word	0x0801806b
 8018044:	08018081 	.word	0x08018081
 8018048:	08018097 	.word	0x08018097
 801804c:	080180ad 	.word	0x080180ad
 8018050:	080180c3 	.word	0x080180c3
	{
		case 0: if(day_temp>0)day_temp--; break;
 8018054:	4b29      	ldr	r3, [pc, #164]	; (80180fc <RTC_screen_S6+0xd4>)
 8018056:	781b      	ldrb	r3, [r3, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d03d      	beq.n	80180d8 <RTC_screen_S6+0xb0>
 801805c:	4b27      	ldr	r3, [pc, #156]	; (80180fc <RTC_screen_S6+0xd4>)
 801805e:	781b      	ldrb	r3, [r3, #0]
 8018060:	3b01      	subs	r3, #1
 8018062:	b2da      	uxtb	r2, r3
 8018064:	4b25      	ldr	r3, [pc, #148]	; (80180fc <RTC_screen_S6+0xd4>)
 8018066:	701a      	strb	r2, [r3, #0]
 8018068:	e036      	b.n	80180d8 <RTC_screen_S6+0xb0>
		case 1: if(month_temp>0)month_temp--; break;
 801806a:	4b25      	ldr	r3, [pc, #148]	; (8018100 <RTC_screen_S6+0xd8>)
 801806c:	781b      	ldrb	r3, [r3, #0]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d034      	beq.n	80180dc <RTC_screen_S6+0xb4>
 8018072:	4b23      	ldr	r3, [pc, #140]	; (8018100 <RTC_screen_S6+0xd8>)
 8018074:	781b      	ldrb	r3, [r3, #0]
 8018076:	3b01      	subs	r3, #1
 8018078:	b2da      	uxtb	r2, r3
 801807a:	4b21      	ldr	r3, [pc, #132]	; (8018100 <RTC_screen_S6+0xd8>)
 801807c:	701a      	strb	r2, [r3, #0]
 801807e:	e02d      	b.n	80180dc <RTC_screen_S6+0xb4>
		case 2: if(year_temp>0)year_temp--; break;
 8018080:	4b20      	ldr	r3, [pc, #128]	; (8018104 <RTC_screen_S6+0xdc>)
 8018082:	781b      	ldrb	r3, [r3, #0]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d02b      	beq.n	80180e0 <RTC_screen_S6+0xb8>
 8018088:	4b1e      	ldr	r3, [pc, #120]	; (8018104 <RTC_screen_S6+0xdc>)
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	3b01      	subs	r3, #1
 801808e:	b2da      	uxtb	r2, r3
 8018090:	4b1c      	ldr	r3, [pc, #112]	; (8018104 <RTC_screen_S6+0xdc>)
 8018092:	701a      	strb	r2, [r3, #0]
 8018094:	e024      	b.n	80180e0 <RTC_screen_S6+0xb8>
		case 3: if(hour_temp>0)hour_temp--; break;
 8018096:	4b1c      	ldr	r3, [pc, #112]	; (8018108 <RTC_screen_S6+0xe0>)
 8018098:	781b      	ldrb	r3, [r3, #0]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d022      	beq.n	80180e4 <RTC_screen_S6+0xbc>
 801809e:	4b1a      	ldr	r3, [pc, #104]	; (8018108 <RTC_screen_S6+0xe0>)
 80180a0:	781b      	ldrb	r3, [r3, #0]
 80180a2:	3b01      	subs	r3, #1
 80180a4:	b2da      	uxtb	r2, r3
 80180a6:	4b18      	ldr	r3, [pc, #96]	; (8018108 <RTC_screen_S6+0xe0>)
 80180a8:	701a      	strb	r2, [r3, #0]
 80180aa:	e01b      	b.n	80180e4 <RTC_screen_S6+0xbc>
		case 4: if(minute_temp>0)minute_temp--; break;
 80180ac:	4b17      	ldr	r3, [pc, #92]	; (801810c <RTC_screen_S6+0xe4>)
 80180ae:	781b      	ldrb	r3, [r3, #0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d019      	beq.n	80180e8 <RTC_screen_S6+0xc0>
 80180b4:	4b15      	ldr	r3, [pc, #84]	; (801810c <RTC_screen_S6+0xe4>)
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	3b01      	subs	r3, #1
 80180ba:	b2da      	uxtb	r2, r3
 80180bc:	4b13      	ldr	r3, [pc, #76]	; (801810c <RTC_screen_S6+0xe4>)
 80180be:	701a      	strb	r2, [r3, #0]
 80180c0:	e012      	b.n	80180e8 <RTC_screen_S6+0xc0>
		case 5: if(sec_temp>0)sec_temp--; break;
 80180c2:	4b13      	ldr	r3, [pc, #76]	; (8018110 <RTC_screen_S6+0xe8>)
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d010      	beq.n	80180ec <RTC_screen_S6+0xc4>
 80180ca:	4b11      	ldr	r3, [pc, #68]	; (8018110 <RTC_screen_S6+0xe8>)
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	3b01      	subs	r3, #1
 80180d0:	b2da      	uxtb	r2, r3
 80180d2:	4b0f      	ldr	r3, [pc, #60]	; (8018110 <RTC_screen_S6+0xe8>)
 80180d4:	701a      	strb	r2, [r3, #0]
 80180d6:	e009      	b.n	80180ec <RTC_screen_S6+0xc4>
		case 0: if(day_temp>0)day_temp--; break;
 80180d8:	bf00      	nop
 80180da:	e008      	b.n	80180ee <RTC_screen_S6+0xc6>
		case 1: if(month_temp>0)month_temp--; break;
 80180dc:	bf00      	nop
 80180de:	e006      	b.n	80180ee <RTC_screen_S6+0xc6>
		case 2: if(year_temp>0)year_temp--; break;
 80180e0:	bf00      	nop
 80180e2:	e004      	b.n	80180ee <RTC_screen_S6+0xc6>
		case 3: if(hour_temp>0)hour_temp--; break;
 80180e4:	bf00      	nop
 80180e6:	e002      	b.n	80180ee <RTC_screen_S6+0xc6>
		case 4: if(minute_temp>0)minute_temp--; break;
 80180e8:	bf00      	nop
 80180ea:	e000      	b.n	80180ee <RTC_screen_S6+0xc6>
		case 5: if(sec_temp>0)sec_temp--; break;
 80180ec:	bf00      	nop
	}
}
 80180ee:	bf00      	nop
 80180f0:	46bd      	mov	sp, r7
 80180f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f6:	4770      	bx	lr
 80180f8:	20000864 	.word	0x20000864
 80180fc:	20008756 	.word	0x20008756
 8018100:	20008759 	.word	0x20008759
 8018104:	2000875d 	.word	0x2000875d
 8018108:	2000875f 	.word	0x2000875f
 801810c:	20008755 	.word	0x20008755
 8018110:	2000875a 	.word	0x2000875a

08018114 <RTC_screen_S7>:

// FORWARD
void RTC_screen_S7(void)
{
 8018114:	b480      	push	{r7}
 8018116:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018118:	4b32      	ldr	r3, [pc, #200]	; (80181e4 <RTC_screen_S7+0xd0>)
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	2b05      	cmp	r3, #5
 801811e:	d85c      	bhi.n	80181da <RTC_screen_S7+0xc6>
 8018120:	a201      	add	r2, pc, #4	; (adr r2, 8018128 <RTC_screen_S7+0x14>)
 8018122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018126:	bf00      	nop
 8018128:	08018141 	.word	0x08018141
 801812c:	08018157 	.word	0x08018157
 8018130:	0801816d 	.word	0x0801816d
 8018134:	08018183 	.word	0x08018183
 8018138:	08018199 	.word	0x08018199
 801813c:	080181af 	.word	0x080181af
	{
		case 0: if(day_temp<31)day_temp++; break;
 8018140:	4b29      	ldr	r3, [pc, #164]	; (80181e8 <RTC_screen_S7+0xd4>)
 8018142:	781b      	ldrb	r3, [r3, #0]
 8018144:	2b1e      	cmp	r3, #30
 8018146:	d83d      	bhi.n	80181c4 <RTC_screen_S7+0xb0>
 8018148:	4b27      	ldr	r3, [pc, #156]	; (80181e8 <RTC_screen_S7+0xd4>)
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	3301      	adds	r3, #1
 801814e:	b2da      	uxtb	r2, r3
 8018150:	4b25      	ldr	r3, [pc, #148]	; (80181e8 <RTC_screen_S7+0xd4>)
 8018152:	701a      	strb	r2, [r3, #0]
 8018154:	e036      	b.n	80181c4 <RTC_screen_S7+0xb0>
		case 1: if(month_temp<12)month_temp++; break;
 8018156:	4b25      	ldr	r3, [pc, #148]	; (80181ec <RTC_screen_S7+0xd8>)
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	2b0b      	cmp	r3, #11
 801815c:	d834      	bhi.n	80181c8 <RTC_screen_S7+0xb4>
 801815e:	4b23      	ldr	r3, [pc, #140]	; (80181ec <RTC_screen_S7+0xd8>)
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	3301      	adds	r3, #1
 8018164:	b2da      	uxtb	r2, r3
 8018166:	4b21      	ldr	r3, [pc, #132]	; (80181ec <RTC_screen_S7+0xd8>)
 8018168:	701a      	strb	r2, [r3, #0]
 801816a:	e02d      	b.n	80181c8 <RTC_screen_S7+0xb4>
		case 2: if(year_temp<60)year_temp++; break;
 801816c:	4b20      	ldr	r3, [pc, #128]	; (80181f0 <RTC_screen_S7+0xdc>)
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	2b3b      	cmp	r3, #59	; 0x3b
 8018172:	d82b      	bhi.n	80181cc <RTC_screen_S7+0xb8>
 8018174:	4b1e      	ldr	r3, [pc, #120]	; (80181f0 <RTC_screen_S7+0xdc>)
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	3301      	adds	r3, #1
 801817a:	b2da      	uxtb	r2, r3
 801817c:	4b1c      	ldr	r3, [pc, #112]	; (80181f0 <RTC_screen_S7+0xdc>)
 801817e:	701a      	strb	r2, [r3, #0]
 8018180:	e024      	b.n	80181cc <RTC_screen_S7+0xb8>
		case 3: if(hour_temp<24)hour_temp++; break;
 8018182:	4b1c      	ldr	r3, [pc, #112]	; (80181f4 <RTC_screen_S7+0xe0>)
 8018184:	781b      	ldrb	r3, [r3, #0]
 8018186:	2b17      	cmp	r3, #23
 8018188:	d822      	bhi.n	80181d0 <RTC_screen_S7+0xbc>
 801818a:	4b1a      	ldr	r3, [pc, #104]	; (80181f4 <RTC_screen_S7+0xe0>)
 801818c:	781b      	ldrb	r3, [r3, #0]
 801818e:	3301      	adds	r3, #1
 8018190:	b2da      	uxtb	r2, r3
 8018192:	4b18      	ldr	r3, [pc, #96]	; (80181f4 <RTC_screen_S7+0xe0>)
 8018194:	701a      	strb	r2, [r3, #0]
 8018196:	e01b      	b.n	80181d0 <RTC_screen_S7+0xbc>
		case 4: if(minute_temp<60)minute_temp++; break;
 8018198:	4b17      	ldr	r3, [pc, #92]	; (80181f8 <RTC_screen_S7+0xe4>)
 801819a:	781b      	ldrb	r3, [r3, #0]
 801819c:	2b3b      	cmp	r3, #59	; 0x3b
 801819e:	d819      	bhi.n	80181d4 <RTC_screen_S7+0xc0>
 80181a0:	4b15      	ldr	r3, [pc, #84]	; (80181f8 <RTC_screen_S7+0xe4>)
 80181a2:	781b      	ldrb	r3, [r3, #0]
 80181a4:	3301      	adds	r3, #1
 80181a6:	b2da      	uxtb	r2, r3
 80181a8:	4b13      	ldr	r3, [pc, #76]	; (80181f8 <RTC_screen_S7+0xe4>)
 80181aa:	701a      	strb	r2, [r3, #0]
 80181ac:	e012      	b.n	80181d4 <RTC_screen_S7+0xc0>
		case 5: if(sec_temp<60)sec_temp++; break;
 80181ae:	4b13      	ldr	r3, [pc, #76]	; (80181fc <RTC_screen_S7+0xe8>)
 80181b0:	781b      	ldrb	r3, [r3, #0]
 80181b2:	2b3b      	cmp	r3, #59	; 0x3b
 80181b4:	d810      	bhi.n	80181d8 <RTC_screen_S7+0xc4>
 80181b6:	4b11      	ldr	r3, [pc, #68]	; (80181fc <RTC_screen_S7+0xe8>)
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	3301      	adds	r3, #1
 80181bc:	b2da      	uxtb	r2, r3
 80181be:	4b0f      	ldr	r3, [pc, #60]	; (80181fc <RTC_screen_S7+0xe8>)
 80181c0:	701a      	strb	r2, [r3, #0]
 80181c2:	e009      	b.n	80181d8 <RTC_screen_S7+0xc4>
		case 0: if(day_temp<31)day_temp++; break;
 80181c4:	bf00      	nop
 80181c6:	e008      	b.n	80181da <RTC_screen_S7+0xc6>
		case 1: if(month_temp<12)month_temp++; break;
 80181c8:	bf00      	nop
 80181ca:	e006      	b.n	80181da <RTC_screen_S7+0xc6>
		case 2: if(year_temp<60)year_temp++; break;
 80181cc:	bf00      	nop
 80181ce:	e004      	b.n	80181da <RTC_screen_S7+0xc6>
		case 3: if(hour_temp<24)hour_temp++; break;
 80181d0:	bf00      	nop
 80181d2:	e002      	b.n	80181da <RTC_screen_S7+0xc6>
		case 4: if(minute_temp<60)minute_temp++; break;
 80181d4:	bf00      	nop
 80181d6:	e000      	b.n	80181da <RTC_screen_S7+0xc6>
		case 5: if(sec_temp<60)sec_temp++; break;
 80181d8:	bf00      	nop
	}
}
 80181da:	bf00      	nop
 80181dc:	46bd      	mov	sp, r7
 80181de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e2:	4770      	bx	lr
 80181e4:	20000864 	.word	0x20000864
 80181e8:	20008756 	.word	0x20008756
 80181ec:	20008759 	.word	0x20008759
 80181f0:	2000875d 	.word	0x2000875d
 80181f4:	2000875f 	.word	0x2000875f
 80181f8:	20008755 	.word	0x20008755
 80181fc:	2000875a 	.word	0x2000875a

08018200 <RTC_screen_S4>:

// ENTER
void RTC_screen_S4(void)
{
 8018200:	b5b0      	push	{r4, r5, r7, lr}
 8018202:	b082      	sub	sp, #8
 8018204:	af02      	add	r7, sp, #8
	RTC_set(year_temp, month_temp, day_temp, hour_temp, minute_temp, sec_temp);
 8018206:	4b0a      	ldr	r3, [pc, #40]	; (8018230 <RTC_screen_S4+0x30>)
 8018208:	7818      	ldrb	r0, [r3, #0]
 801820a:	4b0a      	ldr	r3, [pc, #40]	; (8018234 <RTC_screen_S4+0x34>)
 801820c:	7819      	ldrb	r1, [r3, #0]
 801820e:	4b0a      	ldr	r3, [pc, #40]	; (8018238 <RTC_screen_S4+0x38>)
 8018210:	781c      	ldrb	r4, [r3, #0]
 8018212:	4b0a      	ldr	r3, [pc, #40]	; (801823c <RTC_screen_S4+0x3c>)
 8018214:	781d      	ldrb	r5, [r3, #0]
 8018216:	4b0a      	ldr	r3, [pc, #40]	; (8018240 <RTC_screen_S4+0x40>)
 8018218:	781b      	ldrb	r3, [r3, #0]
 801821a:	4a0a      	ldr	r2, [pc, #40]	; (8018244 <RTC_screen_S4+0x44>)
 801821c:	7812      	ldrb	r2, [r2, #0]
 801821e:	9201      	str	r2, [sp, #4]
 8018220:	9300      	str	r3, [sp, #0]
 8018222:	462b      	mov	r3, r5
 8018224:	4622      	mov	r2, r4
 8018226:	f7ff fd83 	bl	8017d30 <RTC_set>
}
 801822a:	bf00      	nop
 801822c:	46bd      	mov	sp, r7
 801822e:	bdb0      	pop	{r4, r5, r7, pc}
 8018230:	2000875d 	.word	0x2000875d
 8018234:	20008759 	.word	0x20008759
 8018238:	20008756 	.word	0x20008756
 801823c:	2000875f 	.word	0x2000875f
 8018240:	20008755 	.word	0x20008755
 8018244:	2000875a 	.word	0x2000875a

08018248 <About_options_screen_func>:
};



void About_options_screen_func(void)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	af00      	add	r7, sp, #0
	RTC_view();
 801824c:	f7ff fc50 	bl	8017af0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018250:	492a      	ldr	r1, [pc, #168]	; (80182fc <About_options_screen_func+0xb4>)
 8018252:	482b      	ldr	r0, [pc, #172]	; (8018300 <About_options_screen_func+0xb8>)
 8018254:	f7fd fc3e 	bl	8015ad4 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 10, 35, "Серийный номер:");
 8018258:	4b2a      	ldr	r3, [pc, #168]	; (8018304 <About_options_screen_func+0xbc>)
 801825a:	2223      	movs	r2, #35	; 0x23
 801825c:	210a      	movs	r1, #10
 801825e:	4828      	ldr	r0, [pc, #160]	; (8018300 <About_options_screen_func+0xb8>)
 8018260:	f7fd fb96 	bl	8015990 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%05d", serial_num);
 8018264:	4b28      	ldr	r3, [pc, #160]	; (8018308 <About_options_screen_func+0xc0>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	461a      	mov	r2, r3
 801826a:	4928      	ldr	r1, [pc, #160]	; (801830c <About_options_screen_func+0xc4>)
 801826c:	4828      	ldr	r0, [pc, #160]	; (8018310 <About_options_screen_func+0xc8>)
 801826e:	f005 fd8f 	bl	801dd90 <siprintf>
	u8g2_DrawUTF8(&u8g2, 170, 35, (char*)RAM);
 8018272:	4b27      	ldr	r3, [pc, #156]	; (8018310 <About_options_screen_func+0xc8>)
 8018274:	2223      	movs	r2, #35	; 0x23
 8018276:	21aa      	movs	r1, #170	; 0xaa
 8018278:	4821      	ldr	r0, [pc, #132]	; (8018300 <About_options_screen_func+0xb8>)
 801827a:	f7fd fb89 	bl	8015990 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 50, "Диапазон:");
 801827e:	4b25      	ldr	r3, [pc, #148]	; (8018314 <About_options_screen_func+0xcc>)
 8018280:	2232      	movs	r2, #50	; 0x32
 8018282:	210a      	movs	r1, #10
 8018284:	481e      	ldr	r0, [pc, #120]	; (8018300 <About_options_screen_func+0xb8>)
 8018286:	f7fd fb83 	bl	8015990 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 110, 50, GAUGE_RANGE_TEXT[gauge_range]);
 801828a:	4b23      	ldr	r3, [pc, #140]	; (8018318 <About_options_screen_func+0xd0>)
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	4a23      	ldr	r2, [pc, #140]	; (801831c <About_options_screen_func+0xd4>)
 8018290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018294:	2232      	movs	r2, #50	; 0x32
 8018296:	216e      	movs	r1, #110	; 0x6e
 8018298:	4819      	ldr	r0, [pc, #100]	; (8018300 <About_options_screen_func+0xb8>)
 801829a:	f7fd fb79 	bl	8015990 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 65, "Погрешность:");
 801829e:	4b20      	ldr	r3, [pc, #128]	; (8018320 <About_options_screen_func+0xd8>)
 80182a0:	2241      	movs	r2, #65	; 0x41
 80182a2:	210a      	movs	r1, #10
 80182a4:	4816      	ldr	r0, [pc, #88]	; (8018300 <About_options_screen_func+0xb8>)
 80182a6:	f7fd fb73 	bl	8015990 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%.4f", gauge_error);
 80182aa:	4b1e      	ldr	r3, [pc, #120]	; (8018324 <About_options_screen_func+0xdc>)
 80182ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b0:	491d      	ldr	r1, [pc, #116]	; (8018328 <About_options_screen_func+0xe0>)
 80182b2:	4817      	ldr	r0, [pc, #92]	; (8018310 <About_options_screen_func+0xc8>)
 80182b4:	f005 fd6c 	bl	801dd90 <siprintf>
	u8g2_DrawUTF8(&u8g2, 140, 65, (char*)RAM);
 80182b8:	4b15      	ldr	r3, [pc, #84]	; (8018310 <About_options_screen_func+0xc8>)
 80182ba:	2241      	movs	r2, #65	; 0x41
 80182bc:	218c      	movs	r1, #140	; 0x8c
 80182be:	4810      	ldr	r0, [pc, #64]	; (8018300 <About_options_screen_func+0xb8>)
 80182c0:	f7fd fb66 	bl	8015990 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 145, "Код ошибки:");
 80182c4:	4b19      	ldr	r3, [pc, #100]	; (801832c <About_options_screen_func+0xe4>)
 80182c6:	2291      	movs	r2, #145	; 0x91
 80182c8:	210a      	movs	r1, #10
 80182ca:	480d      	ldr	r0, [pc, #52]	; (8018300 <About_options_screen_func+0xb8>)
 80182cc:	f7fd fb60 	bl	8015990 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%d", ERROR_REG);
 80182d0:	4b17      	ldr	r3, [pc, #92]	; (8018330 <About_options_screen_func+0xe8>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	461a      	mov	r2, r3
 80182d6:	4917      	ldr	r1, [pc, #92]	; (8018334 <About_options_screen_func+0xec>)
 80182d8:	480d      	ldr	r0, [pc, #52]	; (8018310 <About_options_screen_func+0xc8>)
 80182da:	f005 fd59 	bl	801dd90 <siprintf>
	u8g2_DrawUTF8(&u8g2, 130, 145, (char*)RAM);
 80182de:	4b0c      	ldr	r3, [pc, #48]	; (8018310 <About_options_screen_func+0xc8>)
 80182e0:	2291      	movs	r2, #145	; 0x91
 80182e2:	2182      	movs	r1, #130	; 0x82
 80182e4:	4806      	ldr	r0, [pc, #24]	; (8018300 <About_options_screen_func+0xb8>)
 80182e6:	f7fd fb53 	bl	8015990 <u8g2_DrawUTF8>



	u8g2_SendBuffer(&u8g2);
 80182ea:	4805      	ldr	r0, [pc, #20]	; (8018300 <About_options_screen_func+0xb8>)
 80182ec:	f7fc fdb5 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80182f0:	4803      	ldr	r0, [pc, #12]	; (8018300 <About_options_screen_func+0xb8>)
 80182f2:	f7fc fd3f 	bl	8014d74 <u8g2_ClearBuffer>
}
 80182f6:	bf00      	nop
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	08027258 	.word	0x08027258
 8018300:	20001fd4 	.word	0x20001fd4
 8018304:	080223b0 	.word	0x080223b0
 8018308:	200000a0 	.word	0x200000a0
 801830c:	080223d0 	.word	0x080223d0
 8018310:	20002090 	.word	0x20002090
 8018314:	080223d8 	.word	0x080223d8
 8018318:	200008b4 	.word	0x200008b4
 801831c:	2000037c 	.word	0x2000037c
 8018320:	080223ec 	.word	0x080223ec
 8018324:	200000a8 	.word	0x200000a8
 8018328:	08022404 	.word	0x08022404
 801832c:	0802240c 	.word	0x0802240c
 8018330:	20000898 	.word	0x20000898
 8018334:	08022424 	.word	0x08022424

08018338 <About_options_screen_S9>:


// MENU
void About_options_screen_S9(void)
{
 8018338:	b480      	push	{r7}
 801833a:	af00      	add	r7, sp, #0
	screen=Option_screen;
 801833c:	4b06      	ldr	r3, [pc, #24]	; (8018358 <About_options_screen_S9+0x20>)
 801833e:	2204      	movs	r2, #4
 8018340:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018342:	4b06      	ldr	r3, [pc, #24]	; (801835c <About_options_screen_S9+0x24>)
 8018344:	22ff      	movs	r2, #255	; 0xff
 8018346:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8018348:	4b05      	ldr	r3, [pc, #20]	; (8018360 <About_options_screen_S9+0x28>)
 801834a:	2203      	movs	r2, #3
 801834c:	701a      	strb	r2, [r3, #0]
}
 801834e:	bf00      	nop
 8018350:	46bd      	mov	sp, r7
 8018352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018356:	4770      	bx	lr
 8018358:	2000004c 	.word	0x2000004c
 801835c:	200003a8 	.word	0x200003a8
 8018360:	200003a9 	.word	0x200003a9

08018364 <Logging_options_screen_func>:
#define max_edit_param 6



void Logging_options_screen_func(void)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b082      	sub	sp, #8
 8018368:	af02      	add	r7, sp, #8
	RTC_view();
 801836a:	f7ff fbc1 	bl	8017af0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801836e:	4951      	ldr	r1, [pc, #324]	; (80184b4 <Logging_options_screen_func+0x150>)
 8018370:	4851      	ldr	r0, [pc, #324]	; (80184b8 <Logging_options_screen_func+0x154>)
 8018372:	f7fd fbaf 	bl	8015ad4 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 5, 40, "Логгирование:");
 8018376:	4b51      	ldr	r3, [pc, #324]	; (80184bc <Logging_options_screen_func+0x158>)
 8018378:	2228      	movs	r2, #40	; 0x28
 801837a:	2105      	movs	r1, #5
 801837c:	484e      	ldr	r0, [pc, #312]	; (80184b8 <Logging_options_screen_func+0x154>)
 801837e:	f7fd fb07 	bl	8015990 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 60, "Время старта:");
 8018382:	4b4f      	ldr	r3, [pc, #316]	; (80184c0 <Logging_options_screen_func+0x15c>)
 8018384:	223c      	movs	r2, #60	; 0x3c
 8018386:	2105      	movs	r1, #5
 8018388:	484b      	ldr	r0, [pc, #300]	; (80184b8 <Logging_options_screen_func+0x154>)
 801838a:	f7fd fb01 	bl	8015990 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 80, "Период сохранения:");
 801838e:	4b4d      	ldr	r3, [pc, #308]	; (80184c4 <Logging_options_screen_func+0x160>)
 8018390:	2250      	movs	r2, #80	; 0x50
 8018392:	2105      	movs	r1, #5
 8018394:	4848      	ldr	r0, [pc, #288]	; (80184b8 <Logging_options_screen_func+0x154>)
 8018396:	f7fd fafb 	bl	8015990 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 100, "Длительность:");
 801839a:	4b4b      	ldr	r3, [pc, #300]	; (80184c8 <Logging_options_screen_func+0x164>)
 801839c:	2264      	movs	r2, #100	; 0x64
 801839e:	2105      	movs	r1, #5
 80183a0:	4845      	ldr	r0, [pc, #276]	; (80184b8 <Logging_options_screen_func+0x154>)
 80183a2:	f7fd faf5 	bl	8015990 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 120, "Всего файлов:");
 80183a6:	4b49      	ldr	r3, [pc, #292]	; (80184cc <Logging_options_screen_func+0x168>)
 80183a8:	2278      	movs	r2, #120	; 0x78
 80183aa:	2105      	movs	r1, #5
 80183ac:	4842      	ldr	r0, [pc, #264]	; (80184b8 <Logging_options_screen_func+0x154>)
 80183ae:	f7fd faef 	bl	8015990 <u8g2_DrawUTF8>


	// 0 parameter
	if(logging==0)Blink_Edit_Parameter(155, 40, "ДА", edit_param, 0);
 80183b2:	4b47      	ldr	r3, [pc, #284]	; (80184d0 <Logging_options_screen_func+0x16c>)
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d109      	bne.n	80183ce <Logging_options_screen_func+0x6a>
 80183ba:	4b46      	ldr	r3, [pc, #280]	; (80184d4 <Logging_options_screen_func+0x170>)
 80183bc:	781b      	ldrb	r3, [r3, #0]
 80183be:	2200      	movs	r2, #0
 80183c0:	9200      	str	r2, [sp, #0]
 80183c2:	4a45      	ldr	r2, [pc, #276]	; (80184d8 <Logging_options_screen_func+0x174>)
 80183c4:	2128      	movs	r1, #40	; 0x28
 80183c6:	209b      	movs	r0, #155	; 0x9b
 80183c8:	f7ea fd62 	bl	8002e90 <Blink_Edit_Parameter>
 80183cc:	e008      	b.n	80183e0 <Logging_options_screen_func+0x7c>
	else Blink_Edit_Parameter(155, 40, "НЕТ", edit_param, 0);
 80183ce:	4b41      	ldr	r3, [pc, #260]	; (80184d4 <Logging_options_screen_func+0x170>)
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	2200      	movs	r2, #0
 80183d4:	9200      	str	r2, [sp, #0]
 80183d6:	4a41      	ldr	r2, [pc, #260]	; (80184dc <Logging_options_screen_func+0x178>)
 80183d8:	2128      	movs	r1, #40	; 0x28
 80183da:	209b      	movs	r0, #155	; 0x9b
 80183dc:	f7ea fd58 	bl	8002e90 <Blink_Edit_Parameter>
	// 1 parameter
	sprintf(RAM,"%02d:", logging_start_hour);
 80183e0:	4b3f      	ldr	r3, [pc, #252]	; (80184e0 <Logging_options_screen_func+0x17c>)
 80183e2:	781b      	ldrb	r3, [r3, #0]
 80183e4:	461a      	mov	r2, r3
 80183e6:	493f      	ldr	r1, [pc, #252]	; (80184e4 <Logging_options_screen_func+0x180>)
 80183e8:	483f      	ldr	r0, [pc, #252]	; (80184e8 <Logging_options_screen_func+0x184>)
 80183ea:	f005 fcd1 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(155, 60, RAM, edit_param, 1);
 80183ee:	4b39      	ldr	r3, [pc, #228]	; (80184d4 <Logging_options_screen_func+0x170>)
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	2201      	movs	r2, #1
 80183f4:	9200      	str	r2, [sp, #0]
 80183f6:	4a3c      	ldr	r2, [pc, #240]	; (80184e8 <Logging_options_screen_func+0x184>)
 80183f8:	213c      	movs	r1, #60	; 0x3c
 80183fa:	209b      	movs	r0, #155	; 0x9b
 80183fc:	f7ea fd48 	bl	8002e90 <Blink_Edit_Parameter>
	// 2 parameter
	sprintf(RAM,"%02d:", logging_start_min);
 8018400:	4b3a      	ldr	r3, [pc, #232]	; (80184ec <Logging_options_screen_func+0x188>)
 8018402:	781b      	ldrb	r3, [r3, #0]
 8018404:	461a      	mov	r2, r3
 8018406:	4937      	ldr	r1, [pc, #220]	; (80184e4 <Logging_options_screen_func+0x180>)
 8018408:	4837      	ldr	r0, [pc, #220]	; (80184e8 <Logging_options_screen_func+0x184>)
 801840a:	f005 fcc1 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(185, 60, RAM, edit_param, 2);
 801840e:	4b31      	ldr	r3, [pc, #196]	; (80184d4 <Logging_options_screen_func+0x170>)
 8018410:	781b      	ldrb	r3, [r3, #0]
 8018412:	2202      	movs	r2, #2
 8018414:	9200      	str	r2, [sp, #0]
 8018416:	4a34      	ldr	r2, [pc, #208]	; (80184e8 <Logging_options_screen_func+0x184>)
 8018418:	213c      	movs	r1, #60	; 0x3c
 801841a:	20b9      	movs	r0, #185	; 0xb9
 801841c:	f7ea fd38 	bl	8002e90 <Blink_Edit_Parameter>
	// 3 parameter
	sprintf(RAM,"%02d", logging_start_sec);
 8018420:	4b33      	ldr	r3, [pc, #204]	; (80184f0 <Logging_options_screen_func+0x18c>)
 8018422:	781b      	ldrb	r3, [r3, #0]
 8018424:	461a      	mov	r2, r3
 8018426:	4933      	ldr	r1, [pc, #204]	; (80184f4 <Logging_options_screen_func+0x190>)
 8018428:	482f      	ldr	r0, [pc, #188]	; (80184e8 <Logging_options_screen_func+0x184>)
 801842a:	f005 fcb1 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(215, 60, RAM, edit_param, 3);
 801842e:	4b29      	ldr	r3, [pc, #164]	; (80184d4 <Logging_options_screen_func+0x170>)
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	2203      	movs	r2, #3
 8018434:	9200      	str	r2, [sp, #0]
 8018436:	4a2c      	ldr	r2, [pc, #176]	; (80184e8 <Logging_options_screen_func+0x184>)
 8018438:	213c      	movs	r1, #60	; 0x3c
 801843a:	20d7      	movs	r0, #215	; 0xd7
 801843c:	f7ea fd28 	bl	8002e90 <Blink_Edit_Parameter>
	// 4 parameter
	sprintf(RAM,"%d", logging_period);
 8018440:	4b2d      	ldr	r3, [pc, #180]	; (80184f8 <Logging_options_screen_func+0x194>)
 8018442:	781b      	ldrb	r3, [r3, #0]
 8018444:	461a      	mov	r2, r3
 8018446:	492d      	ldr	r1, [pc, #180]	; (80184fc <Logging_options_screen_func+0x198>)
 8018448:	4827      	ldr	r0, [pc, #156]	; (80184e8 <Logging_options_screen_func+0x184>)
 801844a:	f005 fca1 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(195, 80, RAM, edit_param, 4);
 801844e:	4b21      	ldr	r3, [pc, #132]	; (80184d4 <Logging_options_screen_func+0x170>)
 8018450:	781b      	ldrb	r3, [r3, #0]
 8018452:	2204      	movs	r2, #4
 8018454:	9200      	str	r2, [sp, #0]
 8018456:	4a24      	ldr	r2, [pc, #144]	; (80184e8 <Logging_options_screen_func+0x184>)
 8018458:	2150      	movs	r1, #80	; 0x50
 801845a:	20c3      	movs	r0, #195	; 0xc3
 801845c:	f7ea fd18 	bl	8002e90 <Blink_Edit_Parameter>
	// 5 parameter
	sprintf(RAM,"%d", logging_len);
 8018460:	4b27      	ldr	r3, [pc, #156]	; (8018500 <Logging_options_screen_func+0x19c>)
 8018462:	781b      	ldrb	r3, [r3, #0]
 8018464:	461a      	mov	r2, r3
 8018466:	4925      	ldr	r1, [pc, #148]	; (80184fc <Logging_options_screen_func+0x198>)
 8018468:	481f      	ldr	r0, [pc, #124]	; (80184e8 <Logging_options_screen_func+0x184>)
 801846a:	f005 fc91 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(155, 100, RAM, edit_param, 5);
 801846e:	4b19      	ldr	r3, [pc, #100]	; (80184d4 <Logging_options_screen_func+0x170>)
 8018470:	781b      	ldrb	r3, [r3, #0]
 8018472:	2205      	movs	r2, #5
 8018474:	9200      	str	r2, [sp, #0]
 8018476:	4a1c      	ldr	r2, [pc, #112]	; (80184e8 <Logging_options_screen_func+0x184>)
 8018478:	2164      	movs	r1, #100	; 0x64
 801847a:	209b      	movs	r0, #155	; 0x9b
 801847c:	f7ea fd08 	bl	8002e90 <Blink_Edit_Parameter>
	// 6 parameter
	sprintf(RAM,"%d", logging_num);
 8018480:	4b20      	ldr	r3, [pc, #128]	; (8018504 <Logging_options_screen_func+0x1a0>)
 8018482:	781b      	ldrb	r3, [r3, #0]
 8018484:	461a      	mov	r2, r3
 8018486:	491d      	ldr	r1, [pc, #116]	; (80184fc <Logging_options_screen_func+0x198>)
 8018488:	4817      	ldr	r0, [pc, #92]	; (80184e8 <Logging_options_screen_func+0x184>)
 801848a:	f005 fc81 	bl	801dd90 <siprintf>
	Blink_Edit_Parameter(155, 120, RAM, edit_param, 6);
 801848e:	4b11      	ldr	r3, [pc, #68]	; (80184d4 <Logging_options_screen_func+0x170>)
 8018490:	781b      	ldrb	r3, [r3, #0]
 8018492:	2206      	movs	r2, #6
 8018494:	9200      	str	r2, [sp, #0]
 8018496:	4a14      	ldr	r2, [pc, #80]	; (80184e8 <Logging_options_screen_func+0x184>)
 8018498:	2178      	movs	r1, #120	; 0x78
 801849a:	209b      	movs	r0, #155	; 0x9b
 801849c:	f7ea fcf8 	bl	8002e90 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 80184a0:	4805      	ldr	r0, [pc, #20]	; (80184b8 <Logging_options_screen_func+0x154>)
 80184a2:	f7fc fcda 	bl	8014e5a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80184a6:	4804      	ldr	r0, [pc, #16]	; (80184b8 <Logging_options_screen_func+0x154>)
 80184a8:	f7fc fc64 	bl	8014d74 <u8g2_ClearBuffer>
}
 80184ac:	bf00      	nop
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd80      	pop	{r7, pc}
 80184b2:	bf00      	nop
 80184b4:	08027258 	.word	0x08027258
 80184b8:	20001fd4 	.word	0x20001fd4
 80184bc:	08022428 	.word	0x08022428
 80184c0:	08022444 	.word	0x08022444
 80184c4:	08022460 	.word	0x08022460
 80184c8:	08022484 	.word	0x08022484
 80184cc:	080224a0 	.word	0x080224a0
 80184d0:	200008b8 	.word	0x200008b8
 80184d4:	20000864 	.word	0x20000864
 80184d8:	080224bc 	.word	0x080224bc
 80184dc:	080224c4 	.word	0x080224c4
 80184e0:	200008b9 	.word	0x200008b9
 80184e4:	080224cc 	.word	0x080224cc
 80184e8:	20002090 	.word	0x20002090
 80184ec:	200008ba 	.word	0x200008ba
 80184f0:	200008bb 	.word	0x200008bb
 80184f4:	080224d4 	.word	0x080224d4
 80184f8:	200008bc 	.word	0x200008bc
 80184fc:	080224dc 	.word	0x080224dc
 8018500:	200008bd 	.word	0x200008bd
 8018504:	200008be 	.word	0x200008be

08018508 <Logging_options_screen_S6>:


// DOWN
void Logging_options_screen_S6(void)
{
 8018508:	b480      	push	{r7}
 801850a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801850c:	4b07      	ldr	r3, [pc, #28]	; (801852c <Logging_options_screen_S6+0x24>)
 801850e:	781b      	ldrb	r3, [r3, #0]
 8018510:	2b04      	cmp	r3, #4
 8018512:	d805      	bhi.n	8018520 <Logging_options_screen_S6+0x18>
 8018514:	4b05      	ldr	r3, [pc, #20]	; (801852c <Logging_options_screen_S6+0x24>)
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	3301      	adds	r3, #1
 801851a:	b2da      	uxtb	r2, r3
 801851c:	4b03      	ldr	r3, [pc, #12]	; (801852c <Logging_options_screen_S6+0x24>)
 801851e:	701a      	strb	r2, [r3, #0]
}
 8018520:	bf00      	nop
 8018522:	46bd      	mov	sp, r7
 8018524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018528:	4770      	bx	lr
 801852a:	bf00      	nop
 801852c:	20000864 	.word	0x20000864

08018530 <Logging_options_screen_S7>:

// UP
void Logging_options_screen_S7(void)
{
 8018530:	b480      	push	{r7}
 8018532:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8018534:	4b07      	ldr	r3, [pc, #28]	; (8018554 <Logging_options_screen_S7+0x24>)
 8018536:	781b      	ldrb	r3, [r3, #0]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d005      	beq.n	8018548 <Logging_options_screen_S7+0x18>
 801853c:	4b05      	ldr	r3, [pc, #20]	; (8018554 <Logging_options_screen_S7+0x24>)
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	3b01      	subs	r3, #1
 8018542:	b2da      	uxtb	r2, r3
 8018544:	4b03      	ldr	r3, [pc, #12]	; (8018554 <Logging_options_screen_S7+0x24>)
 8018546:	701a      	strb	r2, [r3, #0]
}
 8018548:	bf00      	nop
 801854a:	46bd      	mov	sp, r7
 801854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018550:	4770      	bx	lr
 8018552:	bf00      	nop
 8018554:	20000864 	.word	0x20000864

08018558 <Logging_options_screen_S9>:



// MENU
void Logging_options_screen_S9(void)
{
 8018558:	b480      	push	{r7}
 801855a:	af00      	add	r7, sp, #0
	screen=Option_screen;
 801855c:	4b06      	ldr	r3, [pc, #24]	; (8018578 <Logging_options_screen_S9+0x20>)
 801855e:	2204      	movs	r2, #4
 8018560:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018562:	4b06      	ldr	r3, [pc, #24]	; (801857c <Logging_options_screen_S9+0x24>)
 8018564:	22ff      	movs	r2, #255	; 0xff
 8018566:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8018568:	4b05      	ldr	r3, [pc, #20]	; (8018580 <Logging_options_screen_S9+0x28>)
 801856a:	2205      	movs	r2, #5
 801856c:	701a      	strb	r2, [r3, #0]
}
 801856e:	bf00      	nop
 8018570:	46bd      	mov	sp, r7
 8018572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018576:	4770      	bx	lr
 8018578:	2000004c 	.word	0x2000004c
 801857c:	200003a8 	.word	0x200003a8
 8018580:	200003a9 	.word	0x200003a9

08018584 <Logging_options_screen_S8>:

// BACKWARD
void Logging_options_screen_S8(void)
{
 8018584:	b480      	push	{r7}
 8018586:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018588:	4b32      	ldr	r3, [pc, #200]	; (8018654 <Logging_options_screen_S8+0xd0>)
 801858a:	781b      	ldrb	r3, [r3, #0]
 801858c:	2b05      	cmp	r3, #5
 801858e:	d85c      	bhi.n	801864a <Logging_options_screen_S8+0xc6>
 8018590:	a201      	add	r2, pc, #4	; (adr r2, 8018598 <Logging_options_screen_S8+0x14>)
 8018592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018596:	bf00      	nop
 8018598:	080185b1 	.word	0x080185b1
 801859c:	080185c7 	.word	0x080185c7
 80185a0:	080185dd 	.word	0x080185dd
 80185a4:	080185f3 	.word	0x080185f3
 80185a8:	08018609 	.word	0x08018609
 80185ac:	0801861f 	.word	0x0801861f
	{
		case 0: if(logging>0)logging--; break;
 80185b0:	4b29      	ldr	r3, [pc, #164]	; (8018658 <Logging_options_screen_S8+0xd4>)
 80185b2:	781b      	ldrb	r3, [r3, #0]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d03d      	beq.n	8018634 <Logging_options_screen_S8+0xb0>
 80185b8:	4b27      	ldr	r3, [pc, #156]	; (8018658 <Logging_options_screen_S8+0xd4>)
 80185ba:	781b      	ldrb	r3, [r3, #0]
 80185bc:	3b01      	subs	r3, #1
 80185be:	b2da      	uxtb	r2, r3
 80185c0:	4b25      	ldr	r3, [pc, #148]	; (8018658 <Logging_options_screen_S8+0xd4>)
 80185c2:	701a      	strb	r2, [r3, #0]
 80185c4:	e036      	b.n	8018634 <Logging_options_screen_S8+0xb0>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 80185c6:	4b25      	ldr	r3, [pc, #148]	; (801865c <Logging_options_screen_S8+0xd8>)
 80185c8:	781b      	ldrb	r3, [r3, #0]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d034      	beq.n	8018638 <Logging_options_screen_S8+0xb4>
 80185ce:	4b23      	ldr	r3, [pc, #140]	; (801865c <Logging_options_screen_S8+0xd8>)
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	3b01      	subs	r3, #1
 80185d4:	b2da      	uxtb	r2, r3
 80185d6:	4b21      	ldr	r3, [pc, #132]	; (801865c <Logging_options_screen_S8+0xd8>)
 80185d8:	701a      	strb	r2, [r3, #0]
 80185da:	e02d      	b.n	8018638 <Logging_options_screen_S8+0xb4>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 80185dc:	4b20      	ldr	r3, [pc, #128]	; (8018660 <Logging_options_screen_S8+0xdc>)
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d02b      	beq.n	801863c <Logging_options_screen_S8+0xb8>
 80185e4:	4b1e      	ldr	r3, [pc, #120]	; (8018660 <Logging_options_screen_S8+0xdc>)
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	3b01      	subs	r3, #1
 80185ea:	b2da      	uxtb	r2, r3
 80185ec:	4b1c      	ldr	r3, [pc, #112]	; (8018660 <Logging_options_screen_S8+0xdc>)
 80185ee:	701a      	strb	r2, [r3, #0]
 80185f0:	e024      	b.n	801863c <Logging_options_screen_S8+0xb8>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 80185f2:	4b1c      	ldr	r3, [pc, #112]	; (8018664 <Logging_options_screen_S8+0xe0>)
 80185f4:	781b      	ldrb	r3, [r3, #0]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d022      	beq.n	8018640 <Logging_options_screen_S8+0xbc>
 80185fa:	4b1a      	ldr	r3, [pc, #104]	; (8018664 <Logging_options_screen_S8+0xe0>)
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	3b01      	subs	r3, #1
 8018600:	b2da      	uxtb	r2, r3
 8018602:	4b18      	ldr	r3, [pc, #96]	; (8018664 <Logging_options_screen_S8+0xe0>)
 8018604:	701a      	strb	r2, [r3, #0]
 8018606:	e01b      	b.n	8018640 <Logging_options_screen_S8+0xbc>
		case 4: if(logging_period>0)logging_period--; break;
 8018608:	4b17      	ldr	r3, [pc, #92]	; (8018668 <Logging_options_screen_S8+0xe4>)
 801860a:	781b      	ldrb	r3, [r3, #0]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d019      	beq.n	8018644 <Logging_options_screen_S8+0xc0>
 8018610:	4b15      	ldr	r3, [pc, #84]	; (8018668 <Logging_options_screen_S8+0xe4>)
 8018612:	781b      	ldrb	r3, [r3, #0]
 8018614:	3b01      	subs	r3, #1
 8018616:	b2da      	uxtb	r2, r3
 8018618:	4b13      	ldr	r3, [pc, #76]	; (8018668 <Logging_options_screen_S8+0xe4>)
 801861a:	701a      	strb	r2, [r3, #0]
 801861c:	e012      	b.n	8018644 <Logging_options_screen_S8+0xc0>
		case 5: if(logging_len>0)logging_len--; break;
 801861e:	4b13      	ldr	r3, [pc, #76]	; (801866c <Logging_options_screen_S8+0xe8>)
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d010      	beq.n	8018648 <Logging_options_screen_S8+0xc4>
 8018626:	4b11      	ldr	r3, [pc, #68]	; (801866c <Logging_options_screen_S8+0xe8>)
 8018628:	781b      	ldrb	r3, [r3, #0]
 801862a:	3b01      	subs	r3, #1
 801862c:	b2da      	uxtb	r2, r3
 801862e:	4b0f      	ldr	r3, [pc, #60]	; (801866c <Logging_options_screen_S8+0xe8>)
 8018630:	701a      	strb	r2, [r3, #0]
 8018632:	e009      	b.n	8018648 <Logging_options_screen_S8+0xc4>
		case 0: if(logging>0)logging--; break;
 8018634:	bf00      	nop
 8018636:	e008      	b.n	801864a <Logging_options_screen_S8+0xc6>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 8018638:	bf00      	nop
 801863a:	e006      	b.n	801864a <Logging_options_screen_S8+0xc6>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 801863c:	bf00      	nop
 801863e:	e004      	b.n	801864a <Logging_options_screen_S8+0xc6>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 8018640:	bf00      	nop
 8018642:	e002      	b.n	801864a <Logging_options_screen_S8+0xc6>
		case 4: if(logging_period>0)logging_period--; break;
 8018644:	bf00      	nop
 8018646:	e000      	b.n	801864a <Logging_options_screen_S8+0xc6>
		case 5: if(logging_len>0)logging_len--; break;
 8018648:	bf00      	nop
	}
}
 801864a:	bf00      	nop
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr
 8018654:	20000864 	.word	0x20000864
 8018658:	200008b8 	.word	0x200008b8
 801865c:	200008b9 	.word	0x200008b9
 8018660:	200008ba 	.word	0x200008ba
 8018664:	200008bb 	.word	0x200008bb
 8018668:	200008bc 	.word	0x200008bc
 801866c:	200008bd 	.word	0x200008bd

08018670 <Logging_options_screen_S5>:

// FORWARD
void Logging_options_screen_S5(void)
{
 8018670:	b480      	push	{r7}
 8018672:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018674:	4b32      	ldr	r3, [pc, #200]	; (8018740 <Logging_options_screen_S5+0xd0>)
 8018676:	781b      	ldrb	r3, [r3, #0]
 8018678:	2b05      	cmp	r3, #5
 801867a:	d85c      	bhi.n	8018736 <Logging_options_screen_S5+0xc6>
 801867c:	a201      	add	r2, pc, #4	; (adr r2, 8018684 <Logging_options_screen_S5+0x14>)
 801867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018682:	bf00      	nop
 8018684:	0801869d 	.word	0x0801869d
 8018688:	080186b3 	.word	0x080186b3
 801868c:	080186c9 	.word	0x080186c9
 8018690:	080186df 	.word	0x080186df
 8018694:	080186f5 	.word	0x080186f5
 8018698:	0801870b 	.word	0x0801870b
	{
		case 0: if(logging<1)logging++; break;
 801869c:	4b29      	ldr	r3, [pc, #164]	; (8018744 <Logging_options_screen_S5+0xd4>)
 801869e:	781b      	ldrb	r3, [r3, #0]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d13d      	bne.n	8018720 <Logging_options_screen_S5+0xb0>
 80186a4:	4b27      	ldr	r3, [pc, #156]	; (8018744 <Logging_options_screen_S5+0xd4>)
 80186a6:	781b      	ldrb	r3, [r3, #0]
 80186a8:	3301      	adds	r3, #1
 80186aa:	b2da      	uxtb	r2, r3
 80186ac:	4b25      	ldr	r3, [pc, #148]	; (8018744 <Logging_options_screen_S5+0xd4>)
 80186ae:	701a      	strb	r2, [r3, #0]
 80186b0:	e036      	b.n	8018720 <Logging_options_screen_S5+0xb0>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 80186b2:	4b25      	ldr	r3, [pc, #148]	; (8018748 <Logging_options_screen_S5+0xd8>)
 80186b4:	781b      	ldrb	r3, [r3, #0]
 80186b6:	2b16      	cmp	r3, #22
 80186b8:	d834      	bhi.n	8018724 <Logging_options_screen_S5+0xb4>
 80186ba:	4b23      	ldr	r3, [pc, #140]	; (8018748 <Logging_options_screen_S5+0xd8>)
 80186bc:	781b      	ldrb	r3, [r3, #0]
 80186be:	3301      	adds	r3, #1
 80186c0:	b2da      	uxtb	r2, r3
 80186c2:	4b21      	ldr	r3, [pc, #132]	; (8018748 <Logging_options_screen_S5+0xd8>)
 80186c4:	701a      	strb	r2, [r3, #0]
 80186c6:	e02d      	b.n	8018724 <Logging_options_screen_S5+0xb4>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 80186c8:	4b20      	ldr	r3, [pc, #128]	; (801874c <Logging_options_screen_S5+0xdc>)
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	2b3a      	cmp	r3, #58	; 0x3a
 80186ce:	d82b      	bhi.n	8018728 <Logging_options_screen_S5+0xb8>
 80186d0:	4b1e      	ldr	r3, [pc, #120]	; (801874c <Logging_options_screen_S5+0xdc>)
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	3301      	adds	r3, #1
 80186d6:	b2da      	uxtb	r2, r3
 80186d8:	4b1c      	ldr	r3, [pc, #112]	; (801874c <Logging_options_screen_S5+0xdc>)
 80186da:	701a      	strb	r2, [r3, #0]
 80186dc:	e024      	b.n	8018728 <Logging_options_screen_S5+0xb8>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 80186de:	4b1c      	ldr	r3, [pc, #112]	; (8018750 <Logging_options_screen_S5+0xe0>)
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	2b3a      	cmp	r3, #58	; 0x3a
 80186e4:	d822      	bhi.n	801872c <Logging_options_screen_S5+0xbc>
 80186e6:	4b1a      	ldr	r3, [pc, #104]	; (8018750 <Logging_options_screen_S5+0xe0>)
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	3301      	adds	r3, #1
 80186ec:	b2da      	uxtb	r2, r3
 80186ee:	4b18      	ldr	r3, [pc, #96]	; (8018750 <Logging_options_screen_S5+0xe0>)
 80186f0:	701a      	strb	r2, [r3, #0]
 80186f2:	e01b      	b.n	801872c <Logging_options_screen_S5+0xbc>
		case 4: if(logging_period<30)logging_period++; break;
 80186f4:	4b17      	ldr	r3, [pc, #92]	; (8018754 <Logging_options_screen_S5+0xe4>)
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	2b1d      	cmp	r3, #29
 80186fa:	d819      	bhi.n	8018730 <Logging_options_screen_S5+0xc0>
 80186fc:	4b15      	ldr	r3, [pc, #84]	; (8018754 <Logging_options_screen_S5+0xe4>)
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	3301      	adds	r3, #1
 8018702:	b2da      	uxtb	r2, r3
 8018704:	4b13      	ldr	r3, [pc, #76]	; (8018754 <Logging_options_screen_S5+0xe4>)
 8018706:	701a      	strb	r2, [r3, #0]
 8018708:	e012      	b.n	8018730 <Logging_options_screen_S5+0xc0>
		case 5: if(logging_len<100)logging_len++; break;
 801870a:	4b13      	ldr	r3, [pc, #76]	; (8018758 <Logging_options_screen_S5+0xe8>)
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	2b63      	cmp	r3, #99	; 0x63
 8018710:	d810      	bhi.n	8018734 <Logging_options_screen_S5+0xc4>
 8018712:	4b11      	ldr	r3, [pc, #68]	; (8018758 <Logging_options_screen_S5+0xe8>)
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	3301      	adds	r3, #1
 8018718:	b2da      	uxtb	r2, r3
 801871a:	4b0f      	ldr	r3, [pc, #60]	; (8018758 <Logging_options_screen_S5+0xe8>)
 801871c:	701a      	strb	r2, [r3, #0]
 801871e:	e009      	b.n	8018734 <Logging_options_screen_S5+0xc4>
		case 0: if(logging<1)logging++; break;
 8018720:	bf00      	nop
 8018722:	e008      	b.n	8018736 <Logging_options_screen_S5+0xc6>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 8018724:	bf00      	nop
 8018726:	e006      	b.n	8018736 <Logging_options_screen_S5+0xc6>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 8018728:	bf00      	nop
 801872a:	e004      	b.n	8018736 <Logging_options_screen_S5+0xc6>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 801872c:	bf00      	nop
 801872e:	e002      	b.n	8018736 <Logging_options_screen_S5+0xc6>
		case 4: if(logging_period<30)logging_period++; break;
 8018730:	bf00      	nop
 8018732:	e000      	b.n	8018736 <Logging_options_screen_S5+0xc6>
		case 5: if(logging_len<100)logging_len++; break;
 8018734:	bf00      	nop
	}
}
 8018736:	bf00      	nop
 8018738:	46bd      	mov	sp, r7
 801873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801873e:	4770      	bx	lr
 8018740:	20000864 	.word	0x20000864
 8018744:	200008b8 	.word	0x200008b8
 8018748:	200008b9 	.word	0x200008b9
 801874c:	200008ba 	.word	0x200008ba
 8018750:	200008bb 	.word	0x200008bb
 8018754:	200008bc 	.word	0x200008bc
 8018758:	200008bd 	.word	0x200008bd

0801875c <Menu_GUI>:



void Menu_GUI(uint16_t x_pos, uint16_t y_pos, const unsigned char *menu_string[], uint8_t *str_size,
		uint8_t str_to_str, uint8_t menu_size, uint8_t active_string)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b086      	sub	sp, #24
 8018760:	af00      	add	r7, sp, #0
 8018762:	60ba      	str	r2, [r7, #8]
 8018764:	607b      	str	r3, [r7, #4]
 8018766:	4603      	mov	r3, r0
 8018768:	81fb      	strh	r3, [r7, #14]
 801876a:	460b      	mov	r3, r1
 801876c:	81bb      	strh	r3, [r7, #12]
	uint8_t i=0;
 801876e:	2300      	movs	r3, #0
 8018770:	75fb      	strb	r3, [r7, #23]
	if((old_active_string!=active_string)||(float_menu!=0))
 8018772:	4b42      	ldr	r3, [pc, #264]	; (801887c <Menu_GUI+0x120>)
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801877a:	429a      	cmp	r2, r3
 801877c:	d104      	bne.n	8018788 <Menu_GUI+0x2c>
 801877e:	4b40      	ldr	r3, [pc, #256]	; (8018880 <Menu_GUI+0x124>)
 8018780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d075      	beq.n	8018874 <Menu_GUI+0x118>
	{
		for(i=0;i<menu_size;i++)
 8018788:	2300      	movs	r3, #0
 801878a:	75fb      	strb	r3, [r7, #23]
 801878c:	e063      	b.n	8018856 <Menu_GUI+0xfa>
		{
			if(active_string==i)
 801878e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018792:	7dfb      	ldrb	r3, [r7, #23]
 8018794:	429a      	cmp	r2, r3
 8018796:	d12d      	bne.n	80187f4 <Menu_GUI+0x98>
			{
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018798:	493a      	ldr	r1, [pc, #232]	; (8018884 <Menu_GUI+0x128>)
 801879a:	483b      	ldr	r0, [pc, #236]	; (8018888 <Menu_GUI+0x12c>)
 801879c:	f7fd f99a 	bl	8015ad4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*10))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 80187a0:	7dfb      	ldrb	r3, [r7, #23]
 80187a2:	687a      	ldr	r2, [r7, #4]
 80187a4:	4413      	add	r3, r2
 80187a6:	781b      	ldrb	r3, [r3, #0]
 80187a8:	461a      	mov	r2, r3
 80187aa:	f06f 0309 	mvn.w	r3, #9
 80187ae:	fb03 f302 	mul.w	r3, r3, r2
 80187b2:	33f0      	adds	r3, #240	; 0xf0
 80187b4:	105b      	asrs	r3, r3, #1
 80187b6:	b29a      	uxth	r2, r3
 80187b8:	89fb      	ldrh	r3, [r7, #14]
 80187ba:	4413      	add	r3, r2
 80187bc:	b299      	uxth	r1, r3
 80187be:	7dfb      	ldrb	r3, [r7, #23]
 80187c0:	b29a      	uxth	r2, r3
 80187c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	fb12 f303 	smulbb	r3, r2, r3
 80187cc:	b29a      	uxth	r2, r3
 80187ce:	89bb      	ldrh	r3, [r7, #12]
 80187d0:	4413      	add	r3, r2
 80187d2:	b29a      	uxth	r2, r3
 80187d4:	4b2a      	ldr	r3, [pc, #168]	; (8018880 <Menu_GUI+0x124>)
 80187d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187da:	b29b      	uxth	r3, r3
 80187dc:	4413      	add	r3, r2
 80187de:	b298      	uxth	r0, r3
 80187e0:	7dfb      	ldrb	r3, [r7, #23]
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	68ba      	ldr	r2, [r7, #8]
 80187e6:	4413      	add	r3, r2
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	4602      	mov	r2, r0
 80187ec:	4826      	ldr	r0, [pc, #152]	; (8018888 <Menu_GUI+0x12c>)
 80187ee:	f7fd f8cf 	bl	8015990 <u8g2_DrawUTF8>
 80187f2:	e02d      	b.n	8018850 <Menu_GUI+0xf4>
			}
			else
			{
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 80187f4:	4925      	ldr	r1, [pc, #148]	; (801888c <Menu_GUI+0x130>)
 80187f6:	4824      	ldr	r0, [pc, #144]	; (8018888 <Menu_GUI+0x12c>)
 80187f8:	f7fd f96c 	bl	8015ad4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*9))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 80187fc:	7dfb      	ldrb	r3, [r7, #23]
 80187fe:	687a      	ldr	r2, [r7, #4]
 8018800:	4413      	add	r3, r2
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	461a      	mov	r2, r3
 8018806:	4613      	mov	r3, r2
 8018808:	075b      	lsls	r3, r3, #29
 801880a:	1a9b      	subs	r3, r3, r2
 801880c:	00db      	lsls	r3, r3, #3
 801880e:	1a9b      	subs	r3, r3, r2
 8018810:	33f0      	adds	r3, #240	; 0xf0
 8018812:	105b      	asrs	r3, r3, #1
 8018814:	b29a      	uxth	r2, r3
 8018816:	89fb      	ldrh	r3, [r7, #14]
 8018818:	4413      	add	r3, r2
 801881a:	b299      	uxth	r1, r3
 801881c:	7dfb      	ldrb	r3, [r7, #23]
 801881e:	b29a      	uxth	r2, r3
 8018820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018824:	b29b      	uxth	r3, r3
 8018826:	fb12 f303 	smulbb	r3, r2, r3
 801882a:	b29a      	uxth	r2, r3
 801882c:	89bb      	ldrh	r3, [r7, #12]
 801882e:	4413      	add	r3, r2
 8018830:	b29a      	uxth	r2, r3
 8018832:	4b13      	ldr	r3, [pc, #76]	; (8018880 <Menu_GUI+0x124>)
 8018834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018838:	b29b      	uxth	r3, r3
 801883a:	4413      	add	r3, r2
 801883c:	b298      	uxth	r0, r3
 801883e:	7dfb      	ldrb	r3, [r7, #23]
 8018840:	009b      	lsls	r3, r3, #2
 8018842:	68ba      	ldr	r2, [r7, #8]
 8018844:	4413      	add	r3, r2
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4602      	mov	r2, r0
 801884a:	480f      	ldr	r0, [pc, #60]	; (8018888 <Menu_GUI+0x12c>)
 801884c:	f7fd f8a0 	bl	8015990 <u8g2_DrawUTF8>
		for(i=0;i<menu_size;i++)
 8018850:	7dfb      	ldrb	r3, [r7, #23]
 8018852:	3301      	adds	r3, #1
 8018854:	75fb      	strb	r3, [r7, #23]
 8018856:	7dfa      	ldrb	r2, [r7, #23]
 8018858:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801885c:	429a      	cmp	r2, r3
 801885e:	d396      	bcc.n	801878e <Menu_GUI+0x32>
			}
		}
		old_active_string=active_string;
 8018860:	4a06      	ldr	r2, [pc, #24]	; (801887c <Menu_GUI+0x120>)
 8018862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018866:	7013      	strb	r3, [r2, #0]

		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8018868:	4807      	ldr	r0, [pc, #28]	; (8018888 <Menu_GUI+0x12c>)
 801886a:	f7fc faf6 	bl	8014e5a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 801886e:	4806      	ldr	r0, [pc, #24]	; (8018888 <Menu_GUI+0x12c>)
 8018870:	f7fc fa80 	bl	8014d74 <u8g2_ClearBuffer>
	}
}
 8018874:	bf00      	nop
 8018876:	3718      	adds	r7, #24
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	200003a8 	.word	0x200003a8
 8018880:	20001c5a 	.word	0x20001c5a
 8018884:	08027258 	.word	0x08027258
 8018888:	20001fd4 	.word	0x20001fd4
 801888c:	08025c2c 	.word	0x08025c2c

08018890 <Parameter_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Parameter_screen_func(void)
{ Menu_GUI(0, 40, menu_parameter, menu_parameter_size, 17, Menu_parameter_num, Menu_num); }
 8018890:	b580      	push	{r7, lr}
 8018892:	b084      	sub	sp, #16
 8018894:	af04      	add	r7, sp, #16
 8018896:	4b08      	ldr	r3, [pc, #32]	; (80188b8 <Parameter_screen_func+0x28>)
 8018898:	781b      	ldrb	r3, [r3, #0]
 801889a:	9302      	str	r3, [sp, #8]
 801889c:	2307      	movs	r3, #7
 801889e:	9301      	str	r3, [sp, #4]
 80188a0:	2311      	movs	r3, #17
 80188a2:	9300      	str	r3, [sp, #0]
 80188a4:	4b05      	ldr	r3, [pc, #20]	; (80188bc <Parameter_screen_func+0x2c>)
 80188a6:	4a06      	ldr	r2, [pc, #24]	; (80188c0 <Parameter_screen_func+0x30>)
 80188a8:	2128      	movs	r1, #40	; 0x28
 80188aa:	2000      	movs	r0, #0
 80188ac:	f7ff ff56 	bl	801875c <Menu_GUI>
 80188b0:	bf00      	nop
 80188b2:	46bd      	mov	sp, r7
 80188b4:	bd80      	pop	{r7, pc}
 80188b6:	bf00      	nop
 80188b8:	200003a9 	.word	0x200003a9
 80188bc:	080296e4 	.word	0x080296e4
 80188c0:	200003d0 	.word	0x200003d0

080188c4 <Parameter_screen_S9>:



// MENU
void Parameter_screen_S9(void)
{
 80188c4:	b480      	push	{r7}
 80188c6:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80188c8:	4b06      	ldr	r3, [pc, #24]	; (80188e4 <Parameter_screen_S9+0x20>)
 80188ca:	2204      	movs	r2, #4
 80188cc:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80188ce:	4b06      	ldr	r3, [pc, #24]	; (80188e8 <Parameter_screen_S9+0x24>)
 80188d0:	22ff      	movs	r2, #255	; 0xff
 80188d2:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 80188d4:	4b05      	ldr	r3, [pc, #20]	; (80188ec <Parameter_screen_S9+0x28>)
 80188d6:	2202      	movs	r2, #2
 80188d8:	701a      	strb	r2, [r3, #0]
}
 80188da:	bf00      	nop
 80188dc:	46bd      	mov	sp, r7
 80188de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e2:	4770      	bx	lr
 80188e4:	2000004c 	.word	0x2000004c
 80188e8:	200003a8 	.word	0x200003a8
 80188ec:	200003a9 	.word	0x200003a9

080188f0 <Parameter_screen_S4>:


// ENTER
void Parameter_screen_S4(void)
{
 80188f0:	b480      	push	{r7}
 80188f2:	af00      	add	r7, sp, #0
	switch(Menu_num)
 80188f4:	4b1c      	ldr	r3, [pc, #112]	; (8018968 <Parameter_screen_S4+0x78>)
 80188f6:	781b      	ldrb	r3, [r3, #0]
 80188f8:	2b06      	cmp	r3, #6
 80188fa:	d82d      	bhi.n	8018958 <Parameter_screen_S4+0x68>
 80188fc:	a201      	add	r2, pc, #4	; (adr r2, 8018904 <Parameter_screen_S4+0x14>)
 80188fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018902:	bf00      	nop
 8018904:	08018921 	.word	0x08018921
 8018908:	08018959 	.word	0x08018959
 801890c:	0801892f 	.word	0x0801892f
 8018910:	0801893d 	.word	0x0801893d
 8018914:	08018959 	.word	0x08018959
 8018918:	0801894b 	.word	0x0801894b
 801891c:	08018959 	.word	0x08018959
	{
		// ДИСПЛЕЙ
		case 0: screen=Display_options_screen; old_active_string=0xFF; break;
 8018920:	4b12      	ldr	r3, [pc, #72]	; (801896c <Parameter_screen_S4+0x7c>)
 8018922:	2205      	movs	r2, #5
 8018924:	701a      	strb	r2, [r3, #0]
 8018926:	4b12      	ldr	r3, [pc, #72]	; (8018970 <Parameter_screen_S4+0x80>)
 8018928:	22ff      	movs	r2, #255	; 0xff
 801892a:	701a      	strb	r2, [r3, #0]
 801892c:	e014      	b.n	8018958 <Parameter_screen_S4+0x68>
		// ГРОМКОСТЬ
		case 1:
		break;
		// ДАТА И ВРЕМЯ
		case 2: screen=RTC_screen; old_active_string=0xFF; break;
 801892e:	4b0f      	ldr	r3, [pc, #60]	; (801896c <Parameter_screen_S4+0x7c>)
 8018930:	2209      	movs	r2, #9
 8018932:	701a      	strb	r2, [r3, #0]
 8018934:	4b0e      	ldr	r3, [pc, #56]	; (8018970 <Parameter_screen_S4+0x80>)
 8018936:	22ff      	movs	r2, #255	; 0xff
 8018938:	701a      	strb	r2, [r3, #0]
 801893a:	e00d      	b.n	8018958 <Parameter_screen_S4+0x68>
		// АВТООТКЛЮЧЕНИЕ
		case 3: screen=Auto_Off_option_screen; old_active_string=0xFF; break;
 801893c:	4b0b      	ldr	r3, [pc, #44]	; (801896c <Parameter_screen_S4+0x7c>)
 801893e:	220a      	movs	r2, #10
 8018940:	701a      	strb	r2, [r3, #0]
 8018942:	4b0b      	ldr	r3, [pc, #44]	; (8018970 <Parameter_screen_S4+0x80>)
 8018944:	22ff      	movs	r2, #255	; 0xff
 8018946:	701a      	strb	r2, [r3, #0]
 8018948:	e006      	b.n	8018958 <Parameter_screen_S4+0x68>
		// НАСТРОЙКА ПОДКЛЮЧЕНИЯ
		case 4: break;
		// НАСТРОЙКА АЦП
		case 5: screen=ADC_options_screen; old_active_string=0xFF; break;
 801894a:	4b08      	ldr	r3, [pc, #32]	; (801896c <Parameter_screen_S4+0x7c>)
 801894c:	2206      	movs	r2, #6
 801894e:	701a      	strb	r2, [r3, #0]
 8018950:	4b07      	ldr	r3, [pc, #28]	; (8018970 <Parameter_screen_S4+0x80>)
 8018952:	22ff      	movs	r2, #255	; 0xff
 8018954:	701a      	strb	r2, [r3, #0]
 8018956:	bf00      	nop
		// РЕЧЕВОЕ ИНФОРМИРОВАНИЕ
		case 6: break;
	}
	edit_param=0;
 8018958:	4b06      	ldr	r3, [pc, #24]	; (8018974 <Parameter_screen_S4+0x84>)
 801895a:	2200      	movs	r2, #0
 801895c:	701a      	strb	r2, [r3, #0]
}
 801895e:	bf00      	nop
 8018960:	46bd      	mov	sp, r7
 8018962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018966:	4770      	bx	lr
 8018968:	200003a9 	.word	0x200003a9
 801896c:	2000004c 	.word	0x2000004c
 8018970:	200003a8 	.word	0x200003a8
 8018974:	20000864 	.word	0x20000864

08018978 <Parameter_screen_S7>:

// DOWN
void Parameter_screen_S7(void)
{
 8018978:	b480      	push	{r7}
 801897a:	af00      	add	r7, sp, #0
		if(Menu_num>0)
 801897c:	4b09      	ldr	r3, [pc, #36]	; (80189a4 <Parameter_screen_S7+0x2c>)
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d006      	beq.n	8018992 <Parameter_screen_S7+0x1a>
		{
			Menu_num--;
 8018984:	4b07      	ldr	r3, [pc, #28]	; (80189a4 <Parameter_screen_S7+0x2c>)
 8018986:	781b      	ldrb	r3, [r3, #0]
 8018988:	3b01      	subs	r3, #1
 801898a:	b2da      	uxtb	r2, r3
 801898c:	4b05      	ldr	r3, [pc, #20]	; (80189a4 <Parameter_screen_S7+0x2c>)
 801898e:	701a      	strb	r2, [r3, #0]
			//float_menu=-2;
		}
		else Menu_num=Menu_parameter_num-1;
}
 8018990:	e002      	b.n	8018998 <Parameter_screen_S7+0x20>
		else Menu_num=Menu_parameter_num-1;
 8018992:	4b04      	ldr	r3, [pc, #16]	; (80189a4 <Parameter_screen_S7+0x2c>)
 8018994:	2206      	movs	r2, #6
 8018996:	701a      	strb	r2, [r3, #0]
}
 8018998:	bf00      	nop
 801899a:	46bd      	mov	sp, r7
 801899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a0:	4770      	bx	lr
 80189a2:	bf00      	nop
 80189a4:	200003a9 	.word	0x200003a9

080189a8 <Parameter_screen_S6>:

// UP
void Parameter_screen_S6(void)
{
 80189a8:	b480      	push	{r7}
 80189aa:	af00      	add	r7, sp, #0
		if(Menu_num<(Menu_parameter_num-1))
 80189ac:	4b09      	ldr	r3, [pc, #36]	; (80189d4 <Parameter_screen_S6+0x2c>)
 80189ae:	781b      	ldrb	r3, [r3, #0]
 80189b0:	2b05      	cmp	r3, #5
 80189b2:	d806      	bhi.n	80189c2 <Parameter_screen_S6+0x1a>
		{
			Menu_num++;
 80189b4:	4b07      	ldr	r3, [pc, #28]	; (80189d4 <Parameter_screen_S6+0x2c>)
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	3301      	adds	r3, #1
 80189ba:	b2da      	uxtb	r2, r3
 80189bc:	4b05      	ldr	r3, [pc, #20]	; (80189d4 <Parameter_screen_S6+0x2c>)
 80189be:	701a      	strb	r2, [r3, #0]
			//float_menu=2;
		}
		else Menu_num=0;
}
 80189c0:	e002      	b.n	80189c8 <Parameter_screen_S6+0x20>
		else Menu_num=0;
 80189c2:	4b04      	ldr	r3, [pc, #16]	; (80189d4 <Parameter_screen_S6+0x2c>)
 80189c4:	2200      	movs	r2, #0
 80189c6:	701a      	strb	r2, [r3, #0]
}
 80189c8:	bf00      	nop
 80189ca:	46bd      	mov	sp, r7
 80189cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d0:	4770      	bx	lr
 80189d2:	bf00      	nop
 80189d4:	200003a9 	.word	0x200003a9

080189d8 <Option_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Option_screen_func(void)
{ Menu_GUI(0, 16, menu_option, menu_option_size, 17, Menu_option_num, Menu_num); }
 80189d8:	b580      	push	{r7, lr}
 80189da:	b084      	sub	sp, #16
 80189dc:	af04      	add	r7, sp, #16
 80189de:	4b08      	ldr	r3, [pc, #32]	; (8018a00 <Option_screen_func+0x28>)
 80189e0:	781b      	ldrb	r3, [r3, #0]
 80189e2:	9302      	str	r3, [sp, #8]
 80189e4:	2309      	movs	r3, #9
 80189e6:	9301      	str	r3, [sp, #4]
 80189e8:	2311      	movs	r3, #17
 80189ea:	9300      	str	r3, [sp, #0]
 80189ec:	4b05      	ldr	r3, [pc, #20]	; (8018a04 <Option_screen_func+0x2c>)
 80189ee:	4a06      	ldr	r2, [pc, #24]	; (8018a08 <Option_screen_func+0x30>)
 80189f0:	2110      	movs	r1, #16
 80189f2:	2000      	movs	r0, #0
 80189f4:	f7ff feb2 	bl	801875c <Menu_GUI>
 80189f8:	bf00      	nop
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	200003a9 	.word	0x200003a9
 8018a04:	0802960c 	.word	0x0802960c
 8018a08:	200003ac 	.word	0x200003ac

08018a0c <Option_screen_S9>:


// MENU
void Option_screen_S9(void)
{
 8018a0c:	b480      	push	{r7}
 8018a0e:	af00      	add	r7, sp, #0
		screen=Main_screen;
 8018a10:	4b05      	ldr	r3, [pc, #20]	; (8018a28 <Option_screen_S9+0x1c>)
 8018a12:	2201      	movs	r2, #1
 8018a14:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8018a16:	4b05      	ldr	r3, [pc, #20]	; (8018a2c <Option_screen_S9+0x20>)
 8018a18:	22ff      	movs	r2, #255	; 0xff
 8018a1a:	701a      	strb	r2, [r3, #0]
}
 8018a1c:	bf00      	nop
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a24:	4770      	bx	lr
 8018a26:	bf00      	nop
 8018a28:	2000004c 	.word	0x2000004c
 8018a2c:	200003a8 	.word	0x200003a8

08018a30 <Option_screen_S7>:

// DOWN
void Option_screen_S7(void)
{
 8018a30:	b480      	push	{r7}
 8018a32:	af00      	add	r7, sp, #0
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018a34:	4b09      	ldr	r3, [pc, #36]	; (8018a5c <Option_screen_S7+0x2c>)
 8018a36:	781b      	ldrb	r3, [r3, #0]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d006      	beq.n	8018a4a <Option_screen_S7+0x1a>
 8018a3c:	4b07      	ldr	r3, [pc, #28]	; (8018a5c <Option_screen_S7+0x2c>)
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	3b01      	subs	r3, #1
 8018a42:	b2da      	uxtb	r2, r3
 8018a44:	4b05      	ldr	r3, [pc, #20]	; (8018a5c <Option_screen_S7+0x2c>)
 8018a46:	701a      	strb	r2, [r3, #0]
}
 8018a48:	e002      	b.n	8018a50 <Option_screen_S7+0x20>
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018a4a:	4b04      	ldr	r3, [pc, #16]	; (8018a5c <Option_screen_S7+0x2c>)
 8018a4c:	2208      	movs	r2, #8
 8018a4e:	701a      	strb	r2, [r3, #0]
}
 8018a50:	bf00      	nop
 8018a52:	46bd      	mov	sp, r7
 8018a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop
 8018a5c:	200003a9 	.word	0x200003a9

08018a60 <Option_screen_S6>:

// UP
void Option_screen_S6(void)
{
 8018a60:	b480      	push	{r7}
 8018a62:	af00      	add	r7, sp, #0
		if(++Menu_num==Menu_option_num)Menu_num=0;
 8018a64:	4b08      	ldr	r3, [pc, #32]	; (8018a88 <Option_screen_S6+0x28>)
 8018a66:	781b      	ldrb	r3, [r3, #0]
 8018a68:	3301      	adds	r3, #1
 8018a6a:	b2da      	uxtb	r2, r3
 8018a6c:	4b06      	ldr	r3, [pc, #24]	; (8018a88 <Option_screen_S6+0x28>)
 8018a6e:	701a      	strb	r2, [r3, #0]
 8018a70:	4b05      	ldr	r3, [pc, #20]	; (8018a88 <Option_screen_S6+0x28>)
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	2b09      	cmp	r3, #9
 8018a76:	d102      	bne.n	8018a7e <Option_screen_S6+0x1e>
 8018a78:	4b03      	ldr	r3, [pc, #12]	; (8018a88 <Option_screen_S6+0x28>)
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	701a      	strb	r2, [r3, #0]
}
 8018a7e:	bf00      	nop
 8018a80:	46bd      	mov	sp, r7
 8018a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a86:	4770      	bx	lr
 8018a88:	200003a9 	.word	0x200003a9

08018a8c <Option_screen_S4>:

// ENTER
void Option_screen_S4(void)
{
 8018a8c:	b480      	push	{r7}
 8018a8e:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018a90:	4b1b      	ldr	r3, [pc, #108]	; (8018b00 <Option_screen_S4+0x74>)
 8018a92:	781b      	ldrb	r3, [r3, #0]
 8018a94:	2b08      	cmp	r3, #8
 8018a96:	d825      	bhi.n	8018ae4 <Option_screen_S4+0x58>
 8018a98:	a201      	add	r2, pc, #4	; (adr r2, 8018aa0 <Option_screen_S4+0x14>)
 8018a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a9e:	bf00      	nop
 8018aa0:	08018ac5 	.word	0x08018ac5
 8018aa4:	08018ae5 	.word	0x08018ae5
 8018aa8:	08018acd 	.word	0x08018acd
 8018aac:	08018ad5 	.word	0x08018ad5
 8018ab0:	08018ae5 	.word	0x08018ae5
 8018ab4:	08018add 	.word	0x08018add
 8018ab8:	08018ae5 	.word	0x08018ae5
 8018abc:	08018ae5 	.word	0x08018ae5
 8018ac0:	08018ae5 	.word	0x08018ae5
	{
		// ИЗМЕРЕНИЕ
		case 0: screen=Measure_options_screen; break;
 8018ac4:	4b0f      	ldr	r3, [pc, #60]	; (8018b04 <Option_screen_S4+0x78>)
 8018ac6:	2207      	movs	r2, #7
 8018ac8:	701a      	strb	r2, [r3, #0]
 8018aca:	e00b      	b.n	8018ae4 <Option_screen_S4+0x58>
		// 24 ВОЛЬТА
		case 1: break;
		// ПАРАМЕТРЫ
		case 2: screen=Parameter_screen; break;
 8018acc:	4b0d      	ldr	r3, [pc, #52]	; (8018b04 <Option_screen_S4+0x78>)
 8018ace:	2208      	movs	r2, #8
 8018ad0:	701a      	strb	r2, [r3, #0]
 8018ad2:	e007      	b.n	8018ae4 <Option_screen_S4+0x58>
		// О ПРИБОРЕ
		case 3: screen=About_options_screen; break;
 8018ad4:	4b0b      	ldr	r3, [pc, #44]	; (8018b04 <Option_screen_S4+0x78>)
 8018ad6:	220b      	movs	r2, #11
 8018ad8:	701a      	strb	r2, [r3, #0]
 8018ada:	e003      	b.n	8018ae4 <Option_screen_S4+0x58>
		// КАЛИБРОВКА
		case 4: break;
		// ЛОГГИРОВАНИЕ
		case 5: screen=Logging_options_screen; break;
 8018adc:	4b09      	ldr	r3, [pc, #36]	; (8018b04 <Option_screen_S4+0x78>)
 8018ade:	220c      	movs	r2, #12
 8018ae0:	701a      	strb	r2, [r3, #0]
 8018ae2:	bf00      	nop
		// ТЕХ ПАРАМЕТРЫ
		case 7: break;
		// СЕРВИСНОЕ МЕНЮ
		case 8: break;
	}
	Menu_num=0;
 8018ae4:	4b06      	ldr	r3, [pc, #24]	; (8018b00 <Option_screen_S4+0x74>)
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018aea:	4b07      	ldr	r3, [pc, #28]	; (8018b08 <Option_screen_S4+0x7c>)
 8018aec:	22ff      	movs	r2, #255	; 0xff
 8018aee:	701a      	strb	r2, [r3, #0]
	edit_param=0;
 8018af0:	4b06      	ldr	r3, [pc, #24]	; (8018b0c <Option_screen_S4+0x80>)
 8018af2:	2200      	movs	r2, #0
 8018af4:	701a      	strb	r2, [r3, #0]
}
 8018af6:	bf00      	nop
 8018af8:	46bd      	mov	sp, r7
 8018afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afe:	4770      	bx	lr
 8018b00:	200003a9 	.word	0x200003a9
 8018b04:	2000004c 	.word	0x2000004c
 8018b08:	200003a8 	.word	0x200003a8
 8018b0c:	20000864 	.word	0x20000864

08018b10 <menu_timer>:
//
//------------------------------------------------------------------------------------------------------------------

uint8_t menu_delay = 0;
void menu_timer(void)
{
 8018b10:	b480      	push	{r7}
 8018b12:	af00      	add	r7, sp, #0
	if(++menu_delay==25)
 8018b14:	4b16      	ldr	r3, [pc, #88]	; (8018b70 <menu_timer+0x60>)
 8018b16:	781b      	ldrb	r3, [r3, #0]
 8018b18:	3301      	adds	r3, #1
 8018b1a:	b2da      	uxtb	r2, r3
 8018b1c:	4b14      	ldr	r3, [pc, #80]	; (8018b70 <menu_timer+0x60>)
 8018b1e:	701a      	strb	r2, [r3, #0]
 8018b20:	4b13      	ldr	r3, [pc, #76]	; (8018b70 <menu_timer+0x60>)
 8018b22:	781b      	ldrb	r3, [r3, #0]
 8018b24:	2b19      	cmp	r3, #25
 8018b26:	d11e      	bne.n	8018b66 <menu_timer+0x56>
	{
		if(float_menu>0)float_menu--;
 8018b28:	4b12      	ldr	r3, [pc, #72]	; (8018b74 <menu_timer+0x64>)
 8018b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	dd08      	ble.n	8018b44 <menu_timer+0x34>
 8018b32:	4b10      	ldr	r3, [pc, #64]	; (8018b74 <menu_timer+0x64>)
 8018b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b38:	b29b      	uxth	r3, r3
 8018b3a:	3b01      	subs	r3, #1
 8018b3c:	b29b      	uxth	r3, r3
 8018b3e:	b21a      	sxth	r2, r3
 8018b40:	4b0c      	ldr	r3, [pc, #48]	; (8018b74 <menu_timer+0x64>)
 8018b42:	801a      	strh	r2, [r3, #0]
		if(float_menu<0)float_menu++;
 8018b44:	4b0b      	ldr	r3, [pc, #44]	; (8018b74 <menu_timer+0x64>)
 8018b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	da08      	bge.n	8018b60 <menu_timer+0x50>
 8018b4e:	4b09      	ldr	r3, [pc, #36]	; (8018b74 <menu_timer+0x64>)
 8018b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b54:	b29b      	uxth	r3, r3
 8018b56:	3301      	adds	r3, #1
 8018b58:	b29b      	uxth	r3, r3
 8018b5a:	b21a      	sxth	r2, r3
 8018b5c:	4b05      	ldr	r3, [pc, #20]	; (8018b74 <menu_timer+0x64>)
 8018b5e:	801a      	strh	r2, [r3, #0]
		menu_delay=0;
 8018b60:	4b03      	ldr	r3, [pc, #12]	; (8018b70 <menu_timer+0x60>)
 8018b62:	2200      	movs	r2, #0
 8018b64:	701a      	strb	r2, [r3, #0]
	}
}
 8018b66:	bf00      	nop
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6e:	4770      	bx	lr
 8018b70:	20001c5c 	.word	0x20001c5c
 8018b74:	20001c5a 	.word	0x20001c5a

08018b78 <MX_USB_DEVICE_Init>:




void MX_USB_DEVICE_Init(void)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	490a      	ldr	r1, [pc, #40]	; (8018ba8 <MX_USB_DEVICE_Init+0x30>)
 8018b80:	480a      	ldr	r0, [pc, #40]	; (8018bac <MX_USB_DEVICE_Init+0x34>)
 8018b82:	f001 f965 	bl	8019e50 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC_CDC);
 8018b86:	490a      	ldr	r1, [pc, #40]	; (8018bb0 <MX_USB_DEVICE_Init+0x38>)
 8018b88:	4808      	ldr	r0, [pc, #32]	; (8018bac <MX_USB_DEVICE_Init+0x34>)
 8018b8a:	f001 f995 	bl	8019eb8 <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8018b8e:	4909      	ldr	r1, [pc, #36]	; (8018bb4 <MX_USB_DEVICE_Init+0x3c>)
 8018b90:	4806      	ldr	r0, [pc, #24]	; (8018bac <MX_USB_DEVICE_Init+0x34>)
 8018b92:	f000 fb3c 	bl	801920e <USBD_CDC_RegisterInterface>
	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8018b96:	4908      	ldr	r1, [pc, #32]	; (8018bb8 <MX_USB_DEVICE_Init+0x40>)
 8018b98:	4804      	ldr	r0, [pc, #16]	; (8018bac <MX_USB_DEVICE_Init+0x34>)
 8018b9a:	f002 fd9d 	bl	801b6d8 <USBD_MSC_RegisterStorage>
	USBD_Start(&hUsbDeviceFS);
 8018b9e:	4803      	ldr	r0, [pc, #12]	; (8018bac <MX_USB_DEVICE_Init+0x34>)
 8018ba0:	f001 f9b1 	bl	8019f06 <USBD_Start>
}
 8018ba4:	bf00      	nop
 8018ba6:	bd80      	pop	{r7, pc}
 8018ba8:	20000570 	.word	0x20000570
 8018bac:	20008760 	.word	0x20008760
 8018bb0:	200003ec 	.word	0x200003ec
 8018bb4:	2000055c 	.word	0x2000055c
 8018bb8:	20000614 	.word	0x20000614

08018bbc <USBD_MSC_CDC_GetDeviceQualifierDescriptor>:
};



uint8_t *USBD_MSC_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018bbc:	b480      	push	{r7}
 8018bbe:	b083      	sub	sp, #12
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_DeviceQualifierDesc);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	220a      	movs	r2, #10
 8018bc8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_DeviceQualifierDesc;
 8018bca:	4b03      	ldr	r3, [pc, #12]	; (8018bd8 <USBD_MSC_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018bcc:	4618      	mov	r0, r3
 8018bce:	370c      	adds	r7, #12
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd6:	4770      	bx	lr
 8018bd8:	20000550 	.word	0x20000550

08018bdc <USBD_MSC_CDC_GetOtherSpeedCfgDesc>:


uint8_t *USBD_MSC_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018bdc:	b480      	push	{r7}
 8018bde:	b083      	sub	sp, #12
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_OtherSpeedCfgDesc);
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	2262      	movs	r2, #98	; 0x62
 8018be8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_OtherSpeedCfgDesc;
 8018bea:	4b03      	ldr	r3, [pc, #12]	; (8018bf8 <USBD_MSC_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	370c      	adds	r7, #12
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf6:	4770      	bx	lr
 8018bf8:	200004ec 	.word	0x200004ec

08018bfc <USBD_MSC_CDC_GetHSCfgDesc>:

uint8_t *USBD_MSC_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018bfc:	b480      	push	{r7}
 8018bfe:	b083      	sub	sp, #12
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgHSDesc);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	2262      	movs	r2, #98	; 0x62
 8018c08:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgHSDesc;
 8018c0a:	4b03      	ldr	r3, [pc, #12]	; (8018c18 <USBD_MSC_CDC_GetHSCfgDesc+0x1c>)
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	370c      	adds	r7, #12
 8018c10:	46bd      	mov	sp, r7
 8018c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c16:	4770      	bx	lr
 8018c18:	20000424 	.word	0x20000424

08018c1c <USBD_MSC_CDC_GetFSCfgDesc>:


uint8_t *USBD_MSC_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgFSDesc);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	2262      	movs	r2, #98	; 0x62
 8018c28:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgFSDesc;
 8018c2a:	4b03      	ldr	r3, [pc, #12]	; (8018c38 <USBD_MSC_CDC_GetFSCfgDesc+0x1c>)
}
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	370c      	adds	r7, #12
 8018c30:	46bd      	mov	sp, r7
 8018c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c36:	4770      	bx	lr
 8018c38:	20000488 	.word	0x20000488

08018c3c <USBD_MSC_CDC_Init>:


// Инициализация композитного устройства
static uint8_t  USBD_MSC_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
 8018c44:	460b      	mov	r3, r1
 8018c46:	70fb      	strb	r3, [r7, #3]
	/* MSC initialization */
	uint8_t ret = USBD_MSC_Init (pdev, cfgidx);
 8018c48:	78fb      	ldrb	r3, [r7, #3]
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	f002 fbb8 	bl	801b3c2 <USBD_MSC_Init>
 8018c52:	4603      	mov	r3, r0
 8018c54:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018c56:	7bfb      	ldrb	r3, [r7, #15]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d001      	beq.n	8018c60 <USBD_MSC_CDC_Init+0x24>
			return ret;
 8018c5c:	7bfb      	ldrb	r3, [r7, #15]
 8018c5e:	e00c      	b.n	8018c7a <USBD_MSC_CDC_Init+0x3e>

	/* CDC initialization */
	ret = USBD_CDC_Init (pdev, cfgidx);
 8018c60:	78fb      	ldrb	r3, [r7, #3]
 8018c62:	4619      	mov	r1, r3
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f000 f88b 	bl	8018d80 <USBD_CDC_Init>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018c6e:	7bfb      	ldrb	r3, [r7, #15]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d001      	beq.n	8018c78 <USBD_MSC_CDC_Init+0x3c>
			return ret;
 8018c74:	7bfb      	ldrb	r3, [r7, #15]
 8018c76:	e000      	b.n	8018c7a <USBD_MSC_CDC_Init+0x3e>

	return USBD_OK;
 8018c78:	2300      	movs	r3, #0
}
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	3710      	adds	r7, #16
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}

08018c82 <USBD_MSC_CDC_DeInit>:


// Деинициализация композитного устройства
static uint8_t  USBD_MSC_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018c82:	b580      	push	{r7, lr}
 8018c84:	b082      	sub	sp, #8
 8018c86:	af00      	add	r7, sp, #0
 8018c88:	6078      	str	r0, [r7, #4]
 8018c8a:	460b      	mov	r3, r1
 8018c8c:	70fb      	strb	r3, [r7, #3]
       	/* MSC De-initialization */
       	USBD_MSC_DeInit(pdev, cfgidx);
 8018c8e:	78fb      	ldrb	r3, [r7, #3]
 8018c90:	4619      	mov	r1, r3
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	f002 fbe2 	bl	801b45c <USBD_MSC_DeInit>

       	/* CDC De-initialization */
       	USBD_CDC_DeInit(pdev, cfgidx);
 8018c98:	78fb      	ldrb	r3, [r7, #3]
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f000 f8ed 	bl	8018e7c <USBD_CDC_DeInit>

       	return USBD_OK;
 8018ca2:	2300      	movs	r3, #0
}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	3708      	adds	r7, #8
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}

08018cac <USBD_MSC_CDC_Setup>:



// Setup для композитного устройства
static uint8_t  USBD_MSC_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
 8018cb4:	6039      	str	r1, [r7, #0]
	// Route requests to MSC interface or its endpoints to MSC class implementaion
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	781b      	ldrb	r3, [r3, #0]
 8018cba:	f003 0303 	and.w	r3, r3, #3
 8018cbe:	2b01      	cmp	r3, #1
 8018cc0:	d103      	bne.n	8018cca <USBD_MSC_CDC_Setup+0x1e>
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	889b      	ldrh	r3, [r3, #4]
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	d00b      	beq.n	8018ce2 <USBD_MSC_CDC_Setup+0x36>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	f003 0303 	and.w	r3, r3, #3
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018cd2:	2b02      	cmp	r3, #2
 8018cd4:	d10b      	bne.n	8018cee <USBD_MSC_CDC_Setup+0x42>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018cd6:	683b      	ldr	r3, [r7, #0]
 8018cd8:	889b      	ldrh	r3, [r3, #4]
 8018cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018cde:	2b01      	cmp	r3, #1
 8018ce0:	d105      	bne.n	8018cee <USBD_MSC_CDC_Setup+0x42>
	{
		return USBD_MSC_Setup(pdev, req);
 8018ce2:	6839      	ldr	r1, [r7, #0]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f002 fbe5 	bl	801b4b4 <USBD_MSC_Setup>
 8018cea:	4603      	mov	r3, r0
 8018cec:	e004      	b.n	8018cf8 <USBD_MSC_CDC_Setup+0x4c>
	}

	return USBD_CDC_Setup(pdev, req);
 8018cee:	6839      	ldr	r1, [r7, #0]
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f000 f8ff 	bl	8018ef4 <USBD_CDC_Setup>
 8018cf6:	4603      	mov	r3, r0
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3708      	adds	r7, #8
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}

08018d00 <USBD_MSC_CDC_DataIn>:


// Data IN для композитного устройства
static uint8_t  USBD_MSC_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b082      	sub	sp, #8
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
 8018d08:	460b      	mov	r3, r1
 8018d0a:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018d0c:	78fb      	ldrb	r3, [r7, #3]
 8018d0e:	2b01      	cmp	r3, #1
 8018d10:	d106      	bne.n	8018d20 <USBD_MSC_CDC_DataIn+0x20>
		return USBD_MSC_DataIn(pdev, epnum);
 8018d12:	78fb      	ldrb	r3, [r7, #3]
 8018d14:	4619      	mov	r1, r3
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f002 fcbe 	bl	801b698 <USBD_MSC_DataIn>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	e005      	b.n	8018d2c <USBD_MSC_CDC_DataIn+0x2c>

	return USBD_CDC_DataIn(pdev, epnum);
 8018d20:	78fb      	ldrb	r3, [r7, #3]
 8018d22:	4619      	mov	r1, r3
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f000 f9b3 	bl	8019090 <USBD_CDC_DataIn>
 8018d2a:	4603      	mov	r3, r0
}
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	3708      	adds	r7, #8
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}

08018d34 <USBD_MSC_CDC_DataOut>:


// Data OUT для композитного устройства
static uint8_t  USBD_MSC_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b082      	sub	sp, #8
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
 8018d3c:	460b      	mov	r3, r1
 8018d3e:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018d40:	78fb      	ldrb	r3, [r7, #3]
 8018d42:	2b01      	cmp	r3, #1
 8018d44:	d106      	bne.n	8018d54 <USBD_MSC_CDC_DataOut+0x20>
		return USBD_MSC_DataOut(pdev, epnum);
 8018d46:	78fb      	ldrb	r3, [r7, #3]
 8018d48:	4619      	mov	r1, r3
 8018d4a:	6878      	ldr	r0, [r7, #4]
 8018d4c:	f002 fcb4 	bl	801b6b8 <USBD_MSC_DataOut>
 8018d50:	4603      	mov	r3, r0
 8018d52:	e005      	b.n	8018d60 <USBD_MSC_CDC_DataOut+0x2c>

	return USBD_CDC_DataOut(pdev, epnum);
 8018d54:	78fb      	ldrb	r3, [r7, #3]
 8018d56:	4619      	mov	r1, r3
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	f000 f9fe 	bl	801915a <USBD_CDC_DataOut>
 8018d5e:	4603      	mov	r3, r0
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3708      	adds	r7, #8
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}

08018d68 <USBD_MSC_CDC_EP0_RxReady>:


// Обработчик приема EP0
static uint8_t  USBD_MSC_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b082      	sub	sp, #8
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
    	return USBD_CDC_EP0_RxReady(pdev);
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f000 fa1d 	bl	80191b0 <USBD_CDC_EP0_RxReady>
 8018d76:	4603      	mov	r3, r0
}
 8018d78:	4618      	mov	r0, r3
 8018d7a:	3708      	adds	r7, #8
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}

08018d80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b084      	sub	sp, #16
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	460b      	mov	r3, r1
 8018d8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hcdc;


  hcdc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 8018d8c:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8018d90:	f001 f840 	bl	8019e14 <USBD_static_malloc>
 8018d94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d105      	bne.n	8018da8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassDataCDC = NULL;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	2200      	movs	r2, #0
 8018da0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    return (uint8_t)USBD_EMEM;
 8018da4:	2302      	movs	r3, #2
 8018da6:	e065      	b.n	8018e74 <USBD_CDC_Init+0xf4>
  }

  pdev->pClassDataCDC = (void *)hcdc;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	68fa      	ldr	r2, [r7, #12]
 8018dac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	7c1b      	ldrb	r3, [r3, #16]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d118      	bne.n	8018dea <USBD_CDC_Init+0x6a>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018db8:	2340      	movs	r3, #64	; 0x40
 8018dba:	2202      	movs	r2, #2
 8018dbc:	2183      	movs	r1, #131	; 0x83
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f000 fdde 	bl	8019980 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2201      	movs	r2, #1
 8018dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018dcc:	2340      	movs	r3, #64	; 0x40
 8018dce:	2202      	movs	r2, #2
 8018dd0:	2103      	movs	r1, #3
 8018dd2:	6878      	ldr	r0, [r7, #4]
 8018dd4:	f000 fdd4 	bl	8019980 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2201      	movs	r2, #1
 8018ddc:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2264      	movs	r2, #100	; 0x64
 8018de4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8018de8:	e017      	b.n	8018e1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018dea:	2340      	movs	r3, #64	; 0x40
 8018dec:	2202      	movs	r2, #2
 8018dee:	2183      	movs	r1, #131	; 0x83
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f000 fdc5 	bl	8019980 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	2201      	movs	r2, #1
 8018dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018dfe:	2340      	movs	r3, #64	; 0x40
 8018e00:	2202      	movs	r2, #2
 8018e02:	2103      	movs	r1, #3
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f000 fdbb 	bl	8019980 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	2201      	movs	r2, #1
 8018e0e:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	2264      	movs	r2, #100	; 0x64
 8018e16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018e1a:	2340      	movs	r3, #64	; 0x40
 8018e1c:	2203      	movs	r2, #3
 8018e1e:	2182      	movs	r1, #130	; 0x82
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	f000 fdad 	bl	8019980 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2201      	movs	r2, #1
 8018e2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Init();
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  hcdc->RxState = 0U;
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	2200      	movs	r2, #0
 8018e44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	7c1b      	ldrb	r3, [r3, #16]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d108      	bne.n	8018e62 <USBD_CDC_Init+0xe2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018e56:	2340      	movs	r3, #64	; 0x40
 8018e58:	2103      	movs	r1, #3
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f000 ff40 	bl	8019ce0 <USBD_LL_PrepareReceive>
 8018e60:	e007      	b.n	8018e72 <USBD_CDC_Init+0xf2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018e68:	2340      	movs	r3, #64	; 0x40
 8018e6a:	2103      	movs	r1, #3
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f000 ff37 	bl	8019ce0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018e72:	2300      	movs	r3, #0
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3710      	adds	r7, #16
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}

08018e7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	460b      	mov	r3, r1
 8018e86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018e88:	2183      	movs	r1, #131	; 0x83
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 fdb6 	bl	80199fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2200      	movs	r2, #0
 8018e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018e98:	2103      	movs	r1, #3
 8018e9a:	6878      	ldr	r0, [r7, #4]
 8018e9c:	f000 fdae 	bl	80199fc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8018ea8:	2182      	movs	r1, #130	; 0x82
 8018eaa:	6878      	ldr	r0, [r7, #4]
 8018eac:	f000 fda6 	bl	80199fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2200      	movs	r2, #0
 8018ebc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCDC != NULL)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d00e      	beq.n	8018ee8 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->DeInit();
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ed0:	685b      	ldr	r3, [r3, #4]
 8018ed2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCDC);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018eda:	4618      	mov	r0, r3
 8018edc:	f000 ffa8 	bl	8019e30 <USBD_static_free>
    pdev->pClassDataCDC = NULL;
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }

  return (uint8_t)USBD_OK;
 8018ee8:	2300      	movs	r3, #0
}
 8018eea:	4618      	mov	r0, r3
 8018eec:	3708      	adds	r7, #8
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
	...

08018ef4 <USBD_CDC_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b086      	sub	sp, #24
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
 8018efc:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018f04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018f06:	2300      	movs	r3, #0
 8018f08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018f12:	693b      	ldr	r3, [r7, #16]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d101      	bne.n	8018f1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8018f18:	2303      	movs	r3, #3
 8018f1a:	e0b5      	b.n	8019088 <USBD_CDC_Setup+0x194>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	781b      	ldrb	r3, [r3, #0]
 8018f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d045      	beq.n	8018fb4 <USBD_CDC_Setup+0xc0>
 8018f28:	2b20      	cmp	r3, #32
 8018f2a:	f040 80a5 	bne.w	8019078 <USBD_CDC_Setup+0x184>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	88db      	ldrh	r3, [r3, #6]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d034      	beq.n	8018fa0 <USBD_CDC_Setup+0xac>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018f36:	683b      	ldr	r3, [r7, #0]
 8018f38:	781b      	ldrb	r3, [r3, #0]
 8018f3a:	b25b      	sxtb	r3, r3
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	da1a      	bge.n	8018f76 <USBD_CDC_Setup+0x82>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018f46:	689b      	ldr	r3, [r3, #8]
 8018f48:	683a      	ldr	r2, [r7, #0]
 8018f4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8018f4c:	693a      	ldr	r2, [r7, #16]
 8018f4e:	f502 711d 	add.w	r1, r2, #628	; 0x274
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018f52:	683a      	ldr	r2, [r7, #0]
 8018f54:	88d2      	ldrh	r2, [r2, #6]
 8018f56:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018f58:	683b      	ldr	r3, [r7, #0]
 8018f5a:	88db      	ldrh	r3, [r3, #6]
 8018f5c:	2b08      	cmp	r3, #8
 8018f5e:	bf28      	it	cs
 8018f60:	2308      	movcs	r3, #8
 8018f62:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8018f64:	693b      	ldr	r3, [r7, #16]
 8018f66:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8018f6a:	89fa      	ldrh	r2, [r7, #14]
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	6878      	ldr	r0, [r7, #4]
 8018f70:	f002 f9a7 	bl	801b2c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8018f74:	e087      	b.n	8019086 <USBD_CDC_Setup+0x192>
          hcdc->CmdOpCode = req->bRequest;
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	785a      	ldrb	r2, [r3, #1]
 8018f7a:	693b      	ldr	r3, [r7, #16]
 8018f7c:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	88db      	ldrh	r3, [r3, #6]
 8018f84:	b2da      	uxtb	r2, r3
 8018f86:	693b      	ldr	r3, [r7, #16]
 8018f88:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8018f8c:	693b      	ldr	r3, [r7, #16]
 8018f8e:	f503 711d 	add.w	r1, r3, #628	; 0x274
 8018f92:	683b      	ldr	r3, [r7, #0]
 8018f94:	88db      	ldrh	r3, [r3, #6]
 8018f96:	461a      	mov	r2, r3
 8018f98:	6878      	ldr	r0, [r7, #4]
 8018f9a:	f002 f9be 	bl	801b31a <USBD_CtlPrepareRx>
      break;
 8018f9e:	e072      	b.n	8019086 <USBD_CDC_Setup+0x192>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018fa6:	689b      	ldr	r3, [r3, #8]
 8018fa8:	683a      	ldr	r2, [r7, #0]
 8018faa:	7850      	ldrb	r0, [r2, #1]
 8018fac:	2200      	movs	r2, #0
 8018fae:	6839      	ldr	r1, [r7, #0]
 8018fb0:	4798      	blx	r3
      break;
 8018fb2:	e068      	b.n	8019086 <USBD_CDC_Setup+0x192>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	785b      	ldrb	r3, [r3, #1]
 8018fb8:	2b0b      	cmp	r3, #11
 8018fba:	d852      	bhi.n	8019062 <USBD_CDC_Setup+0x16e>
 8018fbc:	a201      	add	r2, pc, #4	; (adr r2, 8018fc4 <USBD_CDC_Setup+0xd0>)
 8018fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fc2:	bf00      	nop
 8018fc4:	08018ff5 	.word	0x08018ff5
 8018fc8:	08019071 	.word	0x08019071
 8018fcc:	08019063 	.word	0x08019063
 8018fd0:	08019063 	.word	0x08019063
 8018fd4:	08019063 	.word	0x08019063
 8018fd8:	08019063 	.word	0x08019063
 8018fdc:	08019063 	.word	0x08019063
 8018fe0:	08019063 	.word	0x08019063
 8018fe4:	08019063 	.word	0x08019063
 8018fe8:	08019063 	.word	0x08019063
 8018fec:	0801901f 	.word	0x0801901f
 8018ff0:	08019049 	.word	0x08019049
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ffa:	b2db      	uxtb	r3, r3
 8018ffc:	2b03      	cmp	r3, #3
 8018ffe:	d107      	bne.n	8019010 <USBD_CDC_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8019000:	f107 030a 	add.w	r3, r7, #10
 8019004:	2202      	movs	r2, #2
 8019006:	4619      	mov	r1, r3
 8019008:	6878      	ldr	r0, [r7, #4]
 801900a:	f002 f95a 	bl	801b2c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801900e:	e032      	b.n	8019076 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 8019010:	6839      	ldr	r1, [r7, #0]
 8019012:	6878      	ldr	r0, [r7, #4]
 8019014:	f001 ffc2 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 8019018:	2303      	movs	r3, #3
 801901a:	75fb      	strb	r3, [r7, #23]
          break;
 801901c:	e02b      	b.n	8019076 <USBD_CDC_Setup+0x182>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019024:	b2db      	uxtb	r3, r3
 8019026:	2b03      	cmp	r3, #3
 8019028:	d107      	bne.n	801903a <USBD_CDC_Setup+0x146>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801902a:	f107 030d 	add.w	r3, r7, #13
 801902e:	2201      	movs	r2, #1
 8019030:	4619      	mov	r1, r3
 8019032:	6878      	ldr	r0, [r7, #4]
 8019034:	f002 f945 	bl	801b2c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019038:	e01d      	b.n	8019076 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 801903a:	6839      	ldr	r1, [r7, #0]
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	f001 ffad 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 8019042:	2303      	movs	r3, #3
 8019044:	75fb      	strb	r3, [r7, #23]
          break;
 8019046:	e016      	b.n	8019076 <USBD_CDC_Setup+0x182>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801904e:	b2db      	uxtb	r3, r3
 8019050:	2b03      	cmp	r3, #3
 8019052:	d00f      	beq.n	8019074 <USBD_CDC_Setup+0x180>
          {
            USBD_CtlError(pdev, req);
 8019054:	6839      	ldr	r1, [r7, #0]
 8019056:	6878      	ldr	r0, [r7, #4]
 8019058:	f001 ffa0 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 801905c:	2303      	movs	r3, #3
 801905e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8019060:	e008      	b.n	8019074 <USBD_CDC_Setup+0x180>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8019062:	6839      	ldr	r1, [r7, #0]
 8019064:	6878      	ldr	r0, [r7, #4]
 8019066:	f001 ff99 	bl	801af9c <USBD_CtlError>
          ret = USBD_FAIL;
 801906a:	2303      	movs	r3, #3
 801906c:	75fb      	strb	r3, [r7, #23]
          break;
 801906e:	e002      	b.n	8019076 <USBD_CDC_Setup+0x182>
          break;
 8019070:	bf00      	nop
 8019072:	e008      	b.n	8019086 <USBD_CDC_Setup+0x192>
          break;
 8019074:	bf00      	nop
      }
      break;
 8019076:	e006      	b.n	8019086 <USBD_CDC_Setup+0x192>

    default:
      USBD_CtlError(pdev, req);
 8019078:	6839      	ldr	r1, [r7, #0]
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f001 ff8e 	bl	801af9c <USBD_CtlError>
      ret = USBD_FAIL;
 8019080:	2303      	movs	r3, #3
 8019082:	75fb      	strb	r3, [r7, #23]
      break;
 8019084:	bf00      	nop
  }

  return (uint8_t)ret;
 8019086:	7dfb      	ldrb	r3, [r7, #23]
}
 8019088:	4618      	mov	r0, r3
 801908a:	3718      	adds	r7, #24
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b084      	sub	sp, #16
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	460b      	mov	r3, r1
 801909a:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80190a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d101      	bne.n	80190b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80190ae:	2303      	movs	r3, #3
 80190b0:	e04f      	b.n	8019152 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80190ba:	78fa      	ldrb	r2, [r7, #3]
 80190bc:	6879      	ldr	r1, [r7, #4]
 80190be:	4613      	mov	r3, r2
 80190c0:	009b      	lsls	r3, r3, #2
 80190c2:	4413      	add	r3, r2
 80190c4:	009b      	lsls	r3, r3, #2
 80190c6:	440b      	add	r3, r1
 80190c8:	3318      	adds	r3, #24
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d029      	beq.n	8019124 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80190d0:	78fa      	ldrb	r2, [r7, #3]
 80190d2:	6879      	ldr	r1, [r7, #4]
 80190d4:	4613      	mov	r3, r2
 80190d6:	009b      	lsls	r3, r3, #2
 80190d8:	4413      	add	r3, r2
 80190da:	009b      	lsls	r3, r3, #2
 80190dc:	440b      	add	r3, r1
 80190de:	3318      	adds	r3, #24
 80190e0:	681a      	ldr	r2, [r3, #0]
 80190e2:	78f9      	ldrb	r1, [r7, #3]
 80190e4:	68f8      	ldr	r0, [r7, #12]
 80190e6:	460b      	mov	r3, r1
 80190e8:	00db      	lsls	r3, r3, #3
 80190ea:	1a5b      	subs	r3, r3, r1
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	4403      	add	r3, r0
 80190f0:	3344      	adds	r3, #68	; 0x44
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80190f8:	fb03 f301 	mul.w	r3, r3, r1
 80190fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d110      	bne.n	8019124 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8019102:	78fa      	ldrb	r2, [r7, #3]
 8019104:	6879      	ldr	r1, [r7, #4]
 8019106:	4613      	mov	r3, r2
 8019108:	009b      	lsls	r3, r3, #2
 801910a:	4413      	add	r3, r2
 801910c:	009b      	lsls	r3, r3, #2
 801910e:	440b      	add	r3, r1
 8019110:	3318      	adds	r3, #24
 8019112:	2200      	movs	r2, #0
 8019114:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8019116:	78f9      	ldrb	r1, [r7, #3]
 8019118:	2300      	movs	r3, #0
 801911a:	2200      	movs	r2, #0
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f000 fda7 	bl	8019c70 <USBD_LL_Transmit>
 8019122:	e015      	b.n	8019150 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8019124:	68bb      	ldr	r3, [r7, #8]
 8019126:	2200      	movs	r2, #0
 8019128:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt != NULL)
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019132:	691b      	ldr	r3, [r3, #16]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d00b      	beq.n	8019150 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801913e:	691b      	ldr	r3, [r3, #16]
 8019140:	68ba      	ldr	r2, [r7, #8]
 8019142:	f8d2 02bc 	ldr.w	r0, [r2, #700]	; 0x2bc
 8019146:	68ba      	ldr	r2, [r7, #8]
 8019148:	f502 7131 	add.w	r1, r2, #708	; 0x2c4
 801914c:	78fa      	ldrb	r2, [r7, #3]
 801914e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8019150:	2300      	movs	r3, #0
}
 8019152:	4618      	mov	r0, r3
 8019154:	3710      	adds	r7, #16
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}

0801915a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801915a:	b580      	push	{r7, lr}
 801915c:	b084      	sub	sp, #16
 801915e:	af00      	add	r7, sp, #0
 8019160:	6078      	str	r0, [r7, #4]
 8019162:	460b      	mov	r3, r1
 8019164:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801916c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019174:	2b00      	cmp	r3, #0
 8019176:	d101      	bne.n	801917c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019178:	2303      	movs	r3, #3
 801917a:	e015      	b.n	80191a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801917c:	78fb      	ldrb	r3, [r7, #3]
 801917e:	4619      	mov	r1, r3
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f000 fde5 	bl	8019d50 <USBD_LL_GetRxDataSize>
 8019186:	4602      	mov	r2, r0
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019194:	68db      	ldr	r3, [r3, #12]
 8019196:	68fa      	ldr	r2, [r7, #12]
 8019198:	f8d2 02b8 	ldr.w	r0, [r2, #696]	; 0x2b8
 801919c:	68fa      	ldr	r2, [r7, #12]
 801919e:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 80191a2:	4611      	mov	r1, r2
 80191a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80191a6:	2300      	movs	r3, #0
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	3710      	adds	r7, #16
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}

080191b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b084      	sub	sp, #16
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d101      	bne.n	80191ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80191c6:	2303      	movs	r3, #3
 80191c8:	e01d      	b.n	8019206 <USBD_CDC_EP0_RxReady+0x56>
  }

  if ((pdev->pUserDataCDC != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d017      	beq.n	8019204 <USBD_CDC_EP0_RxReady+0x54>
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 80191da:	2bff      	cmp	r3, #255	; 0xff
 80191dc:	d012      	beq.n	8019204 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80191e4:	689b      	ldr	r3, [r3, #8]
 80191e6:	68fa      	ldr	r2, [r7, #12]
 80191e8:	f892 02b4 	ldrb.w	r0, [r2, #692]	; 0x2b4
                                                      (uint8_t *)hcdc->data,
 80191ec:	68fa      	ldr	r2, [r7, #12]
 80191ee:	f502 711d 	add.w	r1, r2, #628	; 0x274
                                                      (uint16_t)hcdc->CmdLength);
 80191f2:	68fa      	ldr	r2, [r7, #12]
 80191f4:	f892 22b5 	ldrb.w	r2, [r2, #693]	; 0x2b5
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 80191f8:	b292      	uxth	r2, r2
 80191fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	22ff      	movs	r2, #255	; 0xff
 8019200:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
  }

  return (uint8_t)USBD_OK;
 8019204:	2300      	movs	r3, #0
}
 8019206:	4618      	mov	r0, r3
 8019208:	3710      	adds	r7, #16
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}

0801920e <USBD_CDC_RegisterInterface>:
  * @param  pdev: device instance
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_CDC_ItfTypeDef *fops)
{
 801920e:	b480      	push	{r7}
 8019210:	b083      	sub	sp, #12
 8019212:	af00      	add	r7, sp, #0
 8019214:	6078      	str	r0, [r7, #4]
 8019216:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8019218:	683b      	ldr	r3, [r7, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d101      	bne.n	8019222 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801921e:	2303      	movs	r3, #3
 8019220:	e004      	b.n	801922c <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserDataCDC = fops;
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	683a      	ldr	r2, [r7, #0]
 8019226:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  return (uint8_t)USBD_OK;
 801922a:	2300      	movs	r3, #0
}
 801922c:	4618      	mov	r0, r3
 801922e:	370c      	adds	r7, #12
 8019230:	46bd      	mov	sp, r7
 8019232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019236:	4770      	bx	lr

08019238 <USBD_CDC_SetTxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 8019238:	b480      	push	{r7}
 801923a:	b087      	sub	sp, #28
 801923c:	af00      	add	r7, sp, #0
 801923e:	60f8      	str	r0, [r7, #12]
 8019240:	60b9      	str	r1, [r7, #8]
 8019242:	607a      	str	r2, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801924a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801924c:	697b      	ldr	r3, [r7, #20]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d101      	bne.n	8019256 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019252:	2303      	movs	r3, #3
 8019254:	e008      	b.n	8019268 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8019256:	697b      	ldr	r3, [r7, #20]
 8019258:	68ba      	ldr	r2, [r7, #8]
 801925a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  hcdc->TxLength = length;
 801925e:	697b      	ldr	r3, [r7, #20]
 8019260:	687a      	ldr	r2, [r7, #4]
 8019262:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  return (uint8_t)USBD_OK;
 8019266:	2300      	movs	r3, #0
}
 8019268:	4618      	mov	r0, r3
 801926a:	371c      	adds	r7, #28
 801926c:	46bd      	mov	sp, r7
 801926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019272:	4770      	bx	lr

08019274 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8019274:	b480      	push	{r7}
 8019276:	b085      	sub	sp, #20
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
 801927c:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019284:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d101      	bne.n	8019290 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801928c:	2303      	movs	r3, #3
 801928e:	e004      	b.n	801929a <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	683a      	ldr	r2, [r7, #0]
 8019294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  return (uint8_t)USBD_OK;
 8019298:	2300      	movs	r3, #0
}
 801929a:	4618      	mov	r0, r3
 801929c:	3714      	adds	r7, #20
 801929e:	46bd      	mov	sp, r7
 80192a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a4:	4770      	bx	lr

080192a6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80192a6:	b580      	push	{r7, lr}
 80192a8:	b084      	sub	sp, #16
 80192aa:	af00      	add	r7, sp, #0
 80192ac:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192b4:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80192b6:	2301      	movs	r3, #1
 80192b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCDC == NULL)
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d101      	bne.n	80192c8 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80192c4:	2303      	movs	r3, #3
 80192c6:	e01a      	b.n	80192fe <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80192c8:	68bb      	ldr	r3, [r7, #8]
 80192ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d114      	bne.n	80192fc <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	2201      	movs	r2, #1
 80192d6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80192e4:	68bb      	ldr	r3, [r7, #8]
 80192e6:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 80192ea:	68bb      	ldr	r3, [r7, #8]
 80192ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192f0:	2183      	movs	r1, #131	; 0x83
 80192f2:	6878      	ldr	r0, [r7, #4]
 80192f4:	f000 fcbc 	bl	8019c70 <USBD_LL_Transmit>

    ret = USBD_OK;
 80192f8:	2300      	movs	r3, #0
 80192fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80192fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80192fe:	4618      	mov	r0, r3
 8019300:	3710      	adds	r7, #16
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}

08019306 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8019306:	b580      	push	{r7, lr}
 8019308:	b084      	sub	sp, #16
 801930a:	af00      	add	r7, sp, #0
 801930c:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019314:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801931c:	2b00      	cmp	r3, #0
 801931e:	d101      	bne.n	8019324 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019320:	2303      	movs	r3, #3
 8019322:	e015      	b.n	8019350 <USBD_CDC_ReceivePacket+0x4a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	7c1b      	ldrb	r3, [r3, #16]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d108      	bne.n	801933e <USBD_CDC_ReceivePacket+0x38>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019332:	2340      	movs	r3, #64	; 0x40
 8019334:	2103      	movs	r1, #3
 8019336:	6878      	ldr	r0, [r7, #4]
 8019338:	f000 fcd2 	bl	8019ce0 <USBD_LL_PrepareReceive>
 801933c:	e007      	b.n	801934e <USBD_CDC_ReceivePacket+0x48>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019344:	2340      	movs	r3, #64	; 0x40
 8019346:	2103      	movs	r1, #3
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	f000 fcc9 	bl	8019ce0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801934e:	2300      	movs	r3, #0
}
 8019350:	4618      	mov	r0, r3
 8019352:	3710      	adds	r7, #16
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}

08019358 <CDC_Init_FS>:
};



static int8_t CDC_Init_FS(void)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801935c:	2200      	movs	r2, #0
 801935e:	4905      	ldr	r1, [pc, #20]	; (8019374 <CDC_Init_FS+0x1c>)
 8019360:	4805      	ldr	r0, [pc, #20]	; (8019378 <CDC_Init_FS+0x20>)
 8019362:	f7ff ff69 	bl	8019238 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019366:	4905      	ldr	r1, [pc, #20]	; (801937c <CDC_Init_FS+0x24>)
 8019368:	4803      	ldr	r0, [pc, #12]	; (8019378 <CDC_Init_FS+0x20>)
 801936a:	f7ff ff83 	bl	8019274 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801936e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019370:	4618      	mov	r0, r3
 8019372:	bd80      	pop	{r7, pc}
 8019374:	20008a38 	.word	0x20008a38
 8019378:	20008760 	.word	0x20008760
 801937c:	20009238 	.word	0x20009238

08019380 <CDC_DeInit_FS>:



static int8_t CDC_DeInit_FS(void)
{
 8019380:	b480      	push	{r7}
 8019382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019384:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019386:	4618      	mov	r0, r3
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019390:	b480      	push	{r7}
 8019392:	b083      	sub	sp, #12
 8019394:	af00      	add	r7, sp, #0
 8019396:	4603      	mov	r3, r0
 8019398:	6039      	str	r1, [r7, #0]
 801939a:	71fb      	strb	r3, [r7, #7]
 801939c:	4613      	mov	r3, r2
 801939e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80193a0:	79fb      	ldrb	r3, [r7, #7]
 80193a2:	2b23      	cmp	r3, #35	; 0x23
 80193a4:	d84a      	bhi.n	801943c <CDC_Control_FS+0xac>
 80193a6:	a201      	add	r2, pc, #4	; (adr r2, 80193ac <CDC_Control_FS+0x1c>)
 80193a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193ac:	0801943d 	.word	0x0801943d
 80193b0:	0801943d 	.word	0x0801943d
 80193b4:	0801943d 	.word	0x0801943d
 80193b8:	0801943d 	.word	0x0801943d
 80193bc:	0801943d 	.word	0x0801943d
 80193c0:	0801943d 	.word	0x0801943d
 80193c4:	0801943d 	.word	0x0801943d
 80193c8:	0801943d 	.word	0x0801943d
 80193cc:	0801943d 	.word	0x0801943d
 80193d0:	0801943d 	.word	0x0801943d
 80193d4:	0801943d 	.word	0x0801943d
 80193d8:	0801943d 	.word	0x0801943d
 80193dc:	0801943d 	.word	0x0801943d
 80193e0:	0801943d 	.word	0x0801943d
 80193e4:	0801943d 	.word	0x0801943d
 80193e8:	0801943d 	.word	0x0801943d
 80193ec:	0801943d 	.word	0x0801943d
 80193f0:	0801943d 	.word	0x0801943d
 80193f4:	0801943d 	.word	0x0801943d
 80193f8:	0801943d 	.word	0x0801943d
 80193fc:	0801943d 	.word	0x0801943d
 8019400:	0801943d 	.word	0x0801943d
 8019404:	0801943d 	.word	0x0801943d
 8019408:	0801943d 	.word	0x0801943d
 801940c:	0801943d 	.word	0x0801943d
 8019410:	0801943d 	.word	0x0801943d
 8019414:	0801943d 	.word	0x0801943d
 8019418:	0801943d 	.word	0x0801943d
 801941c:	0801943d 	.word	0x0801943d
 8019420:	0801943d 	.word	0x0801943d
 8019424:	0801943d 	.word	0x0801943d
 8019428:	0801943d 	.word	0x0801943d
 801942c:	0801943d 	.word	0x0801943d
 8019430:	0801943d 	.word	0x0801943d
 8019434:	0801943d 	.word	0x0801943d
 8019438:	0801943d 	.word	0x0801943d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801943c:	bf00      	nop
  }

  return (USBD_OK);
 801943e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019440:	4618      	mov	r0, r3
 8019442:	370c      	adds	r7, #12
 8019444:	46bd      	mov	sp, r7
 8019446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944a:	4770      	bx	lr

0801944c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b082      	sub	sp, #8
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
 8019454:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  strncpy(rx_buf+rxcntr, (char*)Buf, *Len);
 8019456:	4b0f      	ldr	r3, [pc, #60]	; (8019494 <CDC_Receive_FS+0x48>)
 8019458:	881b      	ldrh	r3, [r3, #0]
 801945a:	461a      	mov	r2, r3
 801945c:	4b0e      	ldr	r3, [pc, #56]	; (8019498 <CDC_Receive_FS+0x4c>)
 801945e:	18d0      	adds	r0, r2, r3
 8019460:	683b      	ldr	r3, [r7, #0]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	461a      	mov	r2, r3
 8019466:	6879      	ldr	r1, [r7, #4]
 8019468:	f004 fcb2 	bl	801ddd0 <strncpy>
  	rxcntr+=*Len;
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	b29a      	uxth	r2, r3
 8019472:	4b08      	ldr	r3, [pc, #32]	; (8019494 <CDC_Receive_FS+0x48>)
 8019474:	881b      	ldrh	r3, [r3, #0]
 8019476:	4413      	add	r3, r2
 8019478:	b29a      	uxth	r2, r3
 801947a:	4b06      	ldr	r3, [pc, #24]	; (8019494 <CDC_Receive_FS+0x48>)
 801947c:	801a      	strh	r2, [r3, #0]
  	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801947e:	4807      	ldr	r0, [pc, #28]	; (801949c <CDC_Receive_FS+0x50>)
 8019480:	f7ff ff41 	bl	8019306 <USBD_CDC_ReceivePacket>
  	USBTimeOutRX=timeout_const;
 8019484:	4b06      	ldr	r3, [pc, #24]	; (80194a0 <CDC_Receive_FS+0x54>)
 8019486:	2202      	movs	r2, #2
 8019488:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 801948a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801948c:	4618      	mov	r0, r3
 801948e:	3708      	adds	r7, #8
 8019490:	46bd      	mov	sp, r7
 8019492:	bd80      	pop	{r7, pc}
 8019494:	200008c2 	.word	0x200008c2
 8019498:	20005b6c 	.word	0x20005b6c
 801949c:	20008760 	.word	0x20008760
 80194a0:	20000194 	.word	0x20000194

080194a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b084      	sub	sp, #16
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	460b      	mov	r3, r1
 80194ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80194b0:	2300      	movs	r3, #0
 80194b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef*)hUsbDeviceFS.pClassDataCDC;
 80194b4:	4b18      	ldr	r3, [pc, #96]	; (8019518 <CDC_Transmit_FS+0x74>)
 80194b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80194ba:	60bb      	str	r3, [r7, #8]
  USB_timeout=15000;
 80194bc:	4b17      	ldr	r3, [pc, #92]	; (801951c <CDC_Transmit_FS+0x78>)
 80194be:	f643 2298 	movw	r2, #15000	; 0x3a98
 80194c2:	601a      	str	r2, [r3, #0]
  while(hcdc->TxState!=0)
 80194c4:	e013      	b.n	80194ee <CDC_Transmit_FS+0x4a>
  {
	  USB_timeout--;
 80194c6:	4b15      	ldr	r3, [pc, #84]	; (801951c <CDC_Transmit_FS+0x78>)
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	3b01      	subs	r3, #1
 80194cc:	4a13      	ldr	r2, [pc, #76]	; (801951c <CDC_Transmit_FS+0x78>)
 80194ce:	6013      	str	r3, [r2, #0]
	  if(USB_timeout==0) {ERROR_REG|=(0x01<<USB_CVC_err); hcdc->TxState=0; break;}
 80194d0:	4b12      	ldr	r3, [pc, #72]	; (801951c <CDC_Transmit_FS+0x78>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d10a      	bne.n	80194ee <CDC_Transmit_FS+0x4a>
 80194d8:	4b11      	ldr	r3, [pc, #68]	; (8019520 <CDC_Transmit_FS+0x7c>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	f043 0308 	orr.w	r3, r3, #8
 80194e0:	4a0f      	ldr	r2, [pc, #60]	; (8019520 <CDC_Transmit_FS+0x7c>)
 80194e2:	6013      	str	r3, [r2, #0]
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	2200      	movs	r2, #0
 80194e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 80194ec:	e004      	b.n	80194f8 <CDC_Transmit_FS+0x54>
  while(hcdc->TxState!=0)
 80194ee:	68bb      	ldr	r3, [r7, #8]
 80194f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d1e6      	bne.n	80194c6 <CDC_Transmit_FS+0x22>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80194f8:	887b      	ldrh	r3, [r7, #2]
 80194fa:	461a      	mov	r2, r3
 80194fc:	6879      	ldr	r1, [r7, #4]
 80194fe:	4806      	ldr	r0, [pc, #24]	; (8019518 <CDC_Transmit_FS+0x74>)
 8019500:	f7ff fe9a 	bl	8019238 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019504:	4804      	ldr	r0, [pc, #16]	; (8019518 <CDC_Transmit_FS+0x74>)
 8019506:	f7ff fece 	bl	80192a6 <USBD_CDC_TransmitPacket>
 801950a:	4603      	mov	r3, r0
 801950c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3710      	adds	r7, #16
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	20008760 	.word	0x20008760
 801951c:	20001c60 	.word	0x20001c60
 8019520:	20000898 	.word	0x20000898

08019524 <CDC_TransmitCplt_FS>:



static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019524:	b480      	push	{r7}
 8019526:	b087      	sub	sp, #28
 8019528:	af00      	add	r7, sp, #0
 801952a:	60f8      	str	r0, [r7, #12]
 801952c:	60b9      	str	r1, [r7, #8]
 801952e:	4613      	mov	r3, r2
 8019530:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019532:	2300      	movs	r3, #0
 8019534:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801953a:	4618      	mov	r0, r3
 801953c:	371c      	adds	r7, #28
 801953e:	46bd      	mov	sp, r7
 8019540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019544:	4770      	bx	lr
	...

08019548 <HAL_PCD_MspInit>:




void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b0ae      	sub	sp, #184	; 0xb8
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019550:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019554:	2200      	movs	r2, #0
 8019556:	601a      	str	r2, [r3, #0]
 8019558:	605a      	str	r2, [r3, #4]
 801955a:	609a      	str	r2, [r3, #8]
 801955c:	60da      	str	r2, [r3, #12]
 801955e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019560:	f107 0318 	add.w	r3, r7, #24
 8019564:	228c      	movs	r2, #140	; 0x8c
 8019566:	2100      	movs	r1, #0
 8019568:	4618      	mov	r0, r3
 801956a:	f003 fd89 	bl	801d080 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019576:	d173      	bne.n	8019660 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801957c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801957e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8019582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8019586:	2303      	movs	r3, #3
 8019588:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 801958a:	2301      	movs	r3, #1
 801958c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801958e:	230c      	movs	r3, #12
 8019590:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8019592:	2302      	movs	r3, #2
 8019594:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8019596:	2302      	movs	r3, #2
 8019598:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801959a:	2302      	movs	r3, #2
 801959c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801959e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80195a2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80195a4:	f107 0318 	add.w	r3, r7, #24
 80195a8:	4618      	mov	r0, r3
 80195aa:	f7f3 fb33 	bl	800cc14 <HAL_RCCEx_PeriphCLKConfig>
 80195ae:	4603      	mov	r3, r0
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d001      	beq.n	80195b8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80195b4:	f7ed f992 	bl	80068dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80195b8:	4b2b      	ldr	r3, [pc, #172]	; (8019668 <HAL_PCD_MspInit+0x120>)
 80195ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195bc:	4a2a      	ldr	r2, [pc, #168]	; (8019668 <HAL_PCD_MspInit+0x120>)
 80195be:	f043 0301 	orr.w	r3, r3, #1
 80195c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80195c4:	4b28      	ldr	r3, [pc, #160]	; (8019668 <HAL_PCD_MspInit+0x120>)
 80195c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195c8:	f003 0301 	and.w	r3, r3, #1
 80195cc:	617b      	str	r3, [r7, #20]
 80195ce:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80195d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80195d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80195d8:	2302      	movs	r3, #2
 80195da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80195de:	2300      	movs	r3, #0
 80195e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80195e4:	2303      	movs	r3, #3
 80195e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80195ea:	230a      	movs	r3, #10
 80195ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80195f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80195f4:	4619      	mov	r1, r3
 80195f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80195fa:	f7f0 fc87 	bl	8009f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80195fe:	4b1a      	ldr	r3, [pc, #104]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019602:	4a19      	ldr	r2, [pc, #100]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019608:	64d3      	str	r3, [r2, #76]	; 0x4c
 801960a:	4b17      	ldr	r3, [pc, #92]	; (8019668 <HAL_PCD_MspInit+0x120>)
 801960c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801960e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019612:	613b      	str	r3, [r7, #16]
 8019614:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019616:	4b14      	ldr	r3, [pc, #80]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801961a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801961e:	2b00      	cmp	r3, #0
 8019620:	d114      	bne.n	801964c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019622:	4b11      	ldr	r3, [pc, #68]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019626:	4a10      	ldr	r2, [pc, #64]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801962c:	6593      	str	r3, [r2, #88]	; 0x58
 801962e:	4b0e      	ldr	r3, [pc, #56]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019636:	60fb      	str	r3, [r7, #12]
 8019638:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 801963a:	f7f2 fc7d 	bl	800bf38 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801963e:	4b0a      	ldr	r3, [pc, #40]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019642:	4a09      	ldr	r2, [pc, #36]	; (8019668 <HAL_PCD_MspInit+0x120>)
 8019644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019648:	6593      	str	r3, [r2, #88]	; 0x58
 801964a:	e001      	b.n	8019650 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801964c:	f7f2 fc74 	bl	800bf38 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019650:	2200      	movs	r2, #0
 8019652:	2100      	movs	r1, #0
 8019654:	2043      	movs	r0, #67	; 0x43
 8019656:	f7ef fe9b 	bl	8009390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801965a:	2043      	movs	r0, #67	; 0x43
 801965c:	f7ef feb4 	bl	80093c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019660:	bf00      	nop
 8019662:	37b8      	adds	r7, #184	; 0xb8
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}
 8019668:	40021000 	.word	0x40021000

0801966c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b082      	sub	sp, #8
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019680:	4619      	mov	r1, r3
 8019682:	4610      	mov	r0, r2
 8019684:	f000 fc8a 	bl	8019f9c <USBD_LL_SetupStage>
}
 8019688:	bf00      	nop
 801968a:	3708      	adds	r7, #8
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}

08019690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	460b      	mov	r3, r1
 801969a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196a2:	78fa      	ldrb	r2, [r7, #3]
 80196a4:	6879      	ldr	r1, [r7, #4]
 80196a6:	4613      	mov	r3, r2
 80196a8:	00db      	lsls	r3, r3, #3
 80196aa:	1a9b      	subs	r3, r3, r2
 80196ac:	009b      	lsls	r3, r3, #2
 80196ae:	440b      	add	r3, r1
 80196b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80196b4:	681a      	ldr	r2, [r3, #0]
 80196b6:	78fb      	ldrb	r3, [r7, #3]
 80196b8:	4619      	mov	r1, r3
 80196ba:	f000 fcc4 	bl	801a046 <USBD_LL_DataOutStage>
}
 80196be:	bf00      	nop
 80196c0:	3708      	adds	r7, #8
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}

080196c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196c6:	b580      	push	{r7, lr}
 80196c8:	b082      	sub	sp, #8
 80196ca:	af00      	add	r7, sp, #0
 80196cc:	6078      	str	r0, [r7, #4]
 80196ce:	460b      	mov	r3, r1
 80196d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196d8:	78fa      	ldrb	r2, [r7, #3]
 80196da:	6879      	ldr	r1, [r7, #4]
 80196dc:	4613      	mov	r3, r2
 80196de:	00db      	lsls	r3, r3, #3
 80196e0:	1a9b      	subs	r3, r3, r2
 80196e2:	009b      	lsls	r3, r3, #2
 80196e4:	440b      	add	r3, r1
 80196e6:	3348      	adds	r3, #72	; 0x48
 80196e8:	681a      	ldr	r2, [r3, #0]
 80196ea:	78fb      	ldrb	r3, [r7, #3]
 80196ec:	4619      	mov	r1, r3
 80196ee:	f000 fd0d 	bl	801a10c <USBD_LL_DataInStage>
}
 80196f2:	bf00      	nop
 80196f4:	3708      	adds	r7, #8
 80196f6:	46bd      	mov	sp, r7
 80196f8:	bd80      	pop	{r7, pc}

080196fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196fa:	b580      	push	{r7, lr}
 80196fc:	b082      	sub	sp, #8
 80196fe:	af00      	add	r7, sp, #0
 8019700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019708:	4618      	mov	r0, r3
 801970a:	f000 fe21 	bl	801a350 <USBD_LL_SOF>
}
 801970e:	bf00      	nop
 8019710:	3708      	adds	r7, #8
 8019712:	46bd      	mov	sp, r7
 8019714:	bd80      	pop	{r7, pc}

08019716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019716:	b580      	push	{r7, lr}
 8019718:	b084      	sub	sp, #16
 801971a:	af00      	add	r7, sp, #0
 801971c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801971e:	2301      	movs	r3, #1
 8019720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	68db      	ldr	r3, [r3, #12]
 8019726:	2b02      	cmp	r3, #2
 8019728:	d001      	beq.n	801972e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801972a:	f7ed f8d7 	bl	80068dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019734:	7bfa      	ldrb	r2, [r7, #15]
 8019736:	4611      	mov	r1, r2
 8019738:	4618      	mov	r0, r3
 801973a:	f000 fdcb 	bl	801a2d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019744:	4618      	mov	r0, r3
 8019746:	f000 fd77 	bl	801a238 <USBD_LL_Reset>
}
 801974a:	bf00      	nop
 801974c:	3710      	adds	r7, #16
 801974e:	46bd      	mov	sp, r7
 8019750:	bd80      	pop	{r7, pc}
	...

08019754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b082      	sub	sp, #8
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	687a      	ldr	r2, [r7, #4]
 8019768:	6812      	ldr	r2, [r2, #0]
 801976a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801976e:	f043 0301 	orr.w	r3, r3, #1
 8019772:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801977a:	4618      	mov	r0, r3
 801977c:	f000 fdba 	bl	801a2f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	6a1b      	ldr	r3, [r3, #32]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d005      	beq.n	8019794 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019788:	4b04      	ldr	r3, [pc, #16]	; (801979c <HAL_PCD_SuspendCallback+0x48>)
 801978a:	691b      	ldr	r3, [r3, #16]
 801978c:	4a03      	ldr	r2, [pc, #12]	; (801979c <HAL_PCD_SuspendCallback+0x48>)
 801978e:	f043 0306 	orr.w	r3, r3, #6
 8019792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019794:	bf00      	nop
 8019796:	3708      	adds	r7, #8
 8019798:	46bd      	mov	sp, r7
 801979a:	bd80      	pop	{r7, pc}
 801979c:	e000ed00 	.word	0xe000ed00

080197a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b082      	sub	sp, #8
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	687a      	ldr	r2, [r7, #4]
 80197b4:	6812      	ldr	r2, [r2, #0]
 80197b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80197ba:	f023 0301 	bic.w	r3, r3, #1
 80197be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6a1b      	ldr	r3, [r3, #32]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d007      	beq.n	80197d8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80197c8:	4b08      	ldr	r3, [pc, #32]	; (80197ec <HAL_PCD_ResumeCallback+0x4c>)
 80197ca:	691b      	ldr	r3, [r3, #16]
 80197cc:	4a07      	ldr	r2, [pc, #28]	; (80197ec <HAL_PCD_ResumeCallback+0x4c>)
 80197ce:	f023 0306 	bic.w	r3, r3, #6
 80197d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80197d4:	f000 fb36 	bl	8019e44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197de:	4618      	mov	r0, r3
 80197e0:	f000 fd9e 	bl	801a320 <USBD_LL_Resume>
}
 80197e4:	bf00      	nop
 80197e6:	3708      	adds	r7, #8
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	e000ed00 	.word	0xe000ed00

080197f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b082      	sub	sp, #8
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	460b      	mov	r3, r1
 80197fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019802:	78fa      	ldrb	r2, [r7, #3]
 8019804:	4611      	mov	r1, r2
 8019806:	4618      	mov	r0, r3
 8019808:	f000 fdea 	bl	801a3e0 <USBD_LL_IsoOUTIncomplete>
}
 801980c:	bf00      	nop
 801980e:	3708      	adds	r7, #8
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}

08019814 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b082      	sub	sp, #8
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
 801981c:	460b      	mov	r3, r1
 801981e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019826:	78fa      	ldrb	r2, [r7, #3]
 8019828:	4611      	mov	r1, r2
 801982a:	4618      	mov	r0, r3
 801982c:	f000 fdb2 	bl	801a394 <USBD_LL_IsoINIncomplete>
}
 8019830:	bf00      	nop
 8019832:	3708      	adds	r7, #8
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}

08019838 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019846:	4618      	mov	r0, r3
 8019848:	f000 fdf0 	bl	801a42c <USBD_LL_DevConnected>
}
 801984c:	bf00      	nop
 801984e:	3708      	adds	r7, #8
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}

08019854 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b082      	sub	sp, #8
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019862:	4618      	mov	r0, r3
 8019864:	f000 fded 	bl	801a442 <USBD_LL_DevDisconnected>
}
 8019868:	bf00      	nop
 801986a:	3708      	adds	r7, #8
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}

08019870 <USBD_LL_Init>:
/*******************************************************************************
                       LL Driver Interface (USB Device Library --> PCD)
*******************************************************************************/

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b082      	sub	sp, #8
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	781b      	ldrb	r3, [r3, #0]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d146      	bne.n	801990e <USBD_LL_Init+0x9e>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019880:	4a25      	ldr	r2, [pc, #148]	; (8019918 <USBD_LL_Init+0xa8>)
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	4a23      	ldr	r2, [pc, #140]	; (8019918 <USBD_LL_Init+0xa8>)
 801988c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019890:	4b21      	ldr	r3, [pc, #132]	; (8019918 <USBD_LL_Init+0xa8>)
 8019892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 7;
 8019898:	4b1f      	ldr	r3, [pc, #124]	; (8019918 <USBD_LL_Init+0xa8>)
 801989a:	2207      	movs	r2, #7
 801989c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801989e:	4b1e      	ldr	r3, [pc, #120]	; (8019918 <USBD_LL_Init+0xa8>)
 80198a0:	2202      	movs	r2, #2
 80198a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80198a4:	4b1c      	ldr	r3, [pc, #112]	; (8019918 <USBD_LL_Init+0xa8>)
 80198a6:	2202      	movs	r2, #2
 80198a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80198aa:	4b1b      	ldr	r3, [pc, #108]	; (8019918 <USBD_LL_Init+0xa8>)
 80198ac:	2200      	movs	r2, #0
 80198ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80198b0:	4b19      	ldr	r3, [pc, #100]	; (8019918 <USBD_LL_Init+0xa8>)
 80198b2:	2200      	movs	r2, #0
 80198b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80198b6:	4b18      	ldr	r3, [pc, #96]	; (8019918 <USBD_LL_Init+0xa8>)
 80198b8:	2200      	movs	r2, #0
 80198ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80198bc:	4b16      	ldr	r3, [pc, #88]	; (8019918 <USBD_LL_Init+0xa8>)
 80198be:	2200      	movs	r2, #0
 80198c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80198c2:	4b15      	ldr	r3, [pc, #84]	; (8019918 <USBD_LL_Init+0xa8>)
 80198c4:	2200      	movs	r2, #0
 80198c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80198c8:	4b13      	ldr	r3, [pc, #76]	; (8019918 <USBD_LL_Init+0xa8>)
 80198ca:	2200      	movs	r2, #0
 80198cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80198ce:	4812      	ldr	r0, [pc, #72]	; (8019918 <USBD_LL_Init+0xa8>)
 80198d0:	f7f1 f9f1 	bl	800acb6 <HAL_PCD_Init>
 80198d4:	4603      	mov	r3, r0
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d001      	beq.n	80198de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80198da:	f7ec ffff 	bl	80068dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 80198de:	2140      	movs	r1, #64	; 0x40
 80198e0:	480d      	ldr	r0, [pc, #52]	; (8019918 <USBD_LL_Init+0xa8>)
 80198e2:	f7f2 fa80 	bl	800bde6 <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80198e6:	2240      	movs	r2, #64	; 0x40
 80198e8:	2100      	movs	r1, #0
 80198ea:	480b      	ldr	r0, [pc, #44]	; (8019918 <USBD_LL_Init+0xa8>)
 80198ec:	f7f2 fa34 	bl	800bd58 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 80198f0:	2240      	movs	r2, #64	; 0x40
 80198f2:	2101      	movs	r1, #1
 80198f4:	4808      	ldr	r0, [pc, #32]	; (8019918 <USBD_LL_Init+0xa8>)
 80198f6:	f7f2 fa2f 	bl	800bd58 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 80198fa:	2240      	movs	r2, #64	; 0x40
 80198fc:	2102      	movs	r1, #2
 80198fe:	4806      	ldr	r0, [pc, #24]	; (8019918 <USBD_LL_Init+0xa8>)
 8019900:	f7f2 fa2a 	bl	800bd58 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8019904:	2240      	movs	r2, #64	; 0x40
 8019906:	2103      	movs	r1, #3
 8019908:	4803      	ldr	r0, [pc, #12]	; (8019918 <USBD_LL_Init+0xa8>)
 801990a:	f7f2 fa25 	bl	800bd58 <HAL_PCDEx_SetTxFiFo>

	//


  }
  return USBD_OK;
 801990e:	2300      	movs	r3, #0
}
 8019910:	4618      	mov	r0, r3
 8019912:	3708      	adds	r7, #8
 8019914:	46bd      	mov	sp, r7
 8019916:	bd80      	pop	{r7, pc}
 8019918:	20009a38 	.word	0x20009a38

0801991c <USBD_LL_Start>:




USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801991c:	b580      	push	{r7, lr}
 801991e:	b084      	sub	sp, #16
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019924:	2300      	movs	r3, #0
 8019926:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019928:	2300      	movs	r3, #0
 801992a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019932:	4618      	mov	r0, r3
 8019934:	f7f1 fae3 	bl	800aefe <HAL_PCD_Start>
 8019938:	4603      	mov	r3, r0
 801993a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801993c:	7bbb      	ldrb	r3, [r7, #14]
 801993e:	2b03      	cmp	r3, #3
 8019940:	d816      	bhi.n	8019970 <USBD_LL_Start+0x54>
 8019942:	a201      	add	r2, pc, #4	; (adr r2, 8019948 <USBD_LL_Start+0x2c>)
 8019944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019948:	08019959 	.word	0x08019959
 801994c:	0801995f 	.word	0x0801995f
 8019950:	08019965 	.word	0x08019965
 8019954:	0801996b 	.word	0x0801996b
    case HAL_OK :
      usb_status = USBD_OK;
 8019958:	2300      	movs	r3, #0
 801995a:	73fb      	strb	r3, [r7, #15]
    break;
 801995c:	e00b      	b.n	8019976 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801995e:	2303      	movs	r3, #3
 8019960:	73fb      	strb	r3, [r7, #15]
    break;
 8019962:	e008      	b.n	8019976 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019964:	2301      	movs	r3, #1
 8019966:	73fb      	strb	r3, [r7, #15]
    break;
 8019968:	e005      	b.n	8019976 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801996a:	2303      	movs	r3, #3
 801996c:	73fb      	strb	r3, [r7, #15]
    break;
 801996e:	e002      	b.n	8019976 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019970:	2303      	movs	r3, #3
 8019972:	73fb      	strb	r3, [r7, #15]
    break;
 8019974:	bf00      	nop
  }
  return usb_status;
 8019976:	7bfb      	ldrb	r3, [r7, #15]
}
 8019978:	4618      	mov	r0, r3
 801997a:	3710      	adds	r7, #16
 801997c:	46bd      	mov	sp, r7
 801997e:	bd80      	pop	{r7, pc}

08019980 <USBD_LL_OpenEP>:




USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019980:	b580      	push	{r7, lr}
 8019982:	b084      	sub	sp, #16
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
 8019988:	4608      	mov	r0, r1
 801998a:	4611      	mov	r1, r2
 801998c:	461a      	mov	r2, r3
 801998e:	4603      	mov	r3, r0
 8019990:	70fb      	strb	r3, [r7, #3]
 8019992:	460b      	mov	r3, r1
 8019994:	70bb      	strb	r3, [r7, #2]
 8019996:	4613      	mov	r3, r2
 8019998:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801999a:	2300      	movs	r3, #0
 801999c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801999e:	2300      	movs	r3, #0
 80199a0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80199a8:	78bb      	ldrb	r3, [r7, #2]
 80199aa:	883a      	ldrh	r2, [r7, #0]
 80199ac:	78f9      	ldrb	r1, [r7, #3]
 80199ae:	f7f1 fe9e 	bl	800b6ee <HAL_PCD_EP_Open>
 80199b2:	4603      	mov	r3, r0
 80199b4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80199b6:	7bbb      	ldrb	r3, [r7, #14]
 80199b8:	2b03      	cmp	r3, #3
 80199ba:	d817      	bhi.n	80199ec <USBD_LL_OpenEP+0x6c>
 80199bc:	a201      	add	r2, pc, #4	; (adr r2, 80199c4 <USBD_LL_OpenEP+0x44>)
 80199be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199c2:	bf00      	nop
 80199c4:	080199d5 	.word	0x080199d5
 80199c8:	080199db 	.word	0x080199db
 80199cc:	080199e1 	.word	0x080199e1
 80199d0:	080199e7 	.word	0x080199e7
    case HAL_OK :
      usb_status = USBD_OK;
 80199d4:	2300      	movs	r3, #0
 80199d6:	73fb      	strb	r3, [r7, #15]
    break;
 80199d8:	e00b      	b.n	80199f2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80199da:	2303      	movs	r3, #3
 80199dc:	73fb      	strb	r3, [r7, #15]
    break;
 80199de:	e008      	b.n	80199f2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80199e0:	2301      	movs	r3, #1
 80199e2:	73fb      	strb	r3, [r7, #15]
    break;
 80199e4:	e005      	b.n	80199f2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80199e6:	2303      	movs	r3, #3
 80199e8:	73fb      	strb	r3, [r7, #15]
    break;
 80199ea:	e002      	b.n	80199f2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80199ec:	2303      	movs	r3, #3
 80199ee:	73fb      	strb	r3, [r7, #15]
    break;
 80199f0:	bf00      	nop
  }
  return usb_status;
 80199f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80199f4:	4618      	mov	r0, r3
 80199f6:	3710      	adds	r7, #16
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}

080199fc <USBD_LL_CloseEP>:



USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b084      	sub	sp, #16
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
 8019a04:	460b      	mov	r3, r1
 8019a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a08:	2300      	movs	r3, #0
 8019a0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019a16:	78fa      	ldrb	r2, [r7, #3]
 8019a18:	4611      	mov	r1, r2
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f7f1 fecf 	bl	800b7be <HAL_PCD_EP_Close>
 8019a20:	4603      	mov	r3, r0
 8019a22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a24:	7bbb      	ldrb	r3, [r7, #14]
 8019a26:	2b03      	cmp	r3, #3
 8019a28:	d816      	bhi.n	8019a58 <USBD_LL_CloseEP+0x5c>
 8019a2a:	a201      	add	r2, pc, #4	; (adr r2, 8019a30 <USBD_LL_CloseEP+0x34>)
 8019a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a30:	08019a41 	.word	0x08019a41
 8019a34:	08019a47 	.word	0x08019a47
 8019a38:	08019a4d 	.word	0x08019a4d
 8019a3c:	08019a53 	.word	0x08019a53
    case HAL_OK :
      usb_status = USBD_OK;
 8019a40:	2300      	movs	r3, #0
 8019a42:	73fb      	strb	r3, [r7, #15]
    break;
 8019a44:	e00b      	b.n	8019a5e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a46:	2303      	movs	r3, #3
 8019a48:	73fb      	strb	r3, [r7, #15]
    break;
 8019a4a:	e008      	b.n	8019a5e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a4c:	2301      	movs	r3, #1
 8019a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8019a50:	e005      	b.n	8019a5e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a52:	2303      	movs	r3, #3
 8019a54:	73fb      	strb	r3, [r7, #15]
    break;
 8019a56:	e002      	b.n	8019a5e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019a58:	2303      	movs	r3, #3
 8019a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8019a5c:	bf00      	nop
  }
  return usb_status;
 8019a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a60:	4618      	mov	r0, r3
 8019a62:	3710      	adds	r7, #16
 8019a64:	46bd      	mov	sp, r7
 8019a66:	bd80      	pop	{r7, pc}

08019a68 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b084      	sub	sp, #16
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
 8019a70:	460b      	mov	r3, r1
 8019a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a74:	2300      	movs	r3, #0
 8019a76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a78:	2300      	movs	r3, #0
 8019a7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019a82:	78fa      	ldrb	r2, [r7, #3]
 8019a84:	4611      	mov	r1, r2
 8019a86:	4618      	mov	r0, r3
 8019a88:	f7f2 f82e 	bl	800bae8 <HAL_PCD_EP_Flush>
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a90:	7bbb      	ldrb	r3, [r7, #14]
 8019a92:	2b03      	cmp	r3, #3
 8019a94:	d816      	bhi.n	8019ac4 <USBD_LL_FlushEP+0x5c>
 8019a96:	a201      	add	r2, pc, #4	; (adr r2, 8019a9c <USBD_LL_FlushEP+0x34>)
 8019a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a9c:	08019aad 	.word	0x08019aad
 8019aa0:	08019ab3 	.word	0x08019ab3
 8019aa4:	08019ab9 	.word	0x08019ab9
 8019aa8:	08019abf 	.word	0x08019abf
    case HAL_OK :
      usb_status = USBD_OK;
 8019aac:	2300      	movs	r3, #0
 8019aae:	73fb      	strb	r3, [r7, #15]
    break;
 8019ab0:	e00b      	b.n	8019aca <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019ab2:	2303      	movs	r3, #3
 8019ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8019ab6:	e008      	b.n	8019aca <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019ab8:	2301      	movs	r3, #1
 8019aba:	73fb      	strb	r3, [r7, #15]
    break;
 8019abc:	e005      	b.n	8019aca <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019abe:	2303      	movs	r3, #3
 8019ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8019ac2:	e002      	b.n	8019aca <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019ac4:	2303      	movs	r3, #3
 8019ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ac8:	bf00      	nop
  }
  return usb_status;
 8019aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3710      	adds	r7, #16
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}

08019ad4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b084      	sub	sp, #16
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	460b      	mov	r3, r1
 8019ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019aee:	78fa      	ldrb	r2, [r7, #3]
 8019af0:	4611      	mov	r1, r2
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7f1 ff40 	bl	800b978 <HAL_PCD_EP_SetStall>
 8019af8:	4603      	mov	r3, r0
 8019afa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019afc:	7bbb      	ldrb	r3, [r7, #14]
 8019afe:	2b03      	cmp	r3, #3
 8019b00:	d816      	bhi.n	8019b30 <USBD_LL_StallEP+0x5c>
 8019b02:	a201      	add	r2, pc, #4	; (adr r2, 8019b08 <USBD_LL_StallEP+0x34>)
 8019b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b08:	08019b19 	.word	0x08019b19
 8019b0c:	08019b1f 	.word	0x08019b1f
 8019b10:	08019b25 	.word	0x08019b25
 8019b14:	08019b2b 	.word	0x08019b2b
    case HAL_OK :
      usb_status = USBD_OK;
 8019b18:	2300      	movs	r3, #0
 8019b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b1c:	e00b      	b.n	8019b36 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b1e:	2303      	movs	r3, #3
 8019b20:	73fb      	strb	r3, [r7, #15]
    break;
 8019b22:	e008      	b.n	8019b36 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b24:	2301      	movs	r3, #1
 8019b26:	73fb      	strb	r3, [r7, #15]
    break;
 8019b28:	e005      	b.n	8019b36 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b2a:	2303      	movs	r3, #3
 8019b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b2e:	e002      	b.n	8019b36 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b30:	2303      	movs	r3, #3
 8019b32:	73fb      	strb	r3, [r7, #15]
    break;
 8019b34:	bf00      	nop
  }
  return usb_status;
 8019b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b38:	4618      	mov	r0, r3
 8019b3a:	3710      	adds	r7, #16
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	bd80      	pop	{r7, pc}

08019b40 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b084      	sub	sp, #16
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
 8019b48:	460b      	mov	r3, r1
 8019b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b50:	2300      	movs	r3, #0
 8019b52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b5a:	78fa      	ldrb	r2, [r7, #3]
 8019b5c:	4611      	mov	r1, r2
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7f1 ff6c 	bl	800ba3c <HAL_PCD_EP_ClrStall>
 8019b64:	4603      	mov	r3, r0
 8019b66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b68:	7bbb      	ldrb	r3, [r7, #14]
 8019b6a:	2b03      	cmp	r3, #3
 8019b6c:	d816      	bhi.n	8019b9c <USBD_LL_ClearStallEP+0x5c>
 8019b6e:	a201      	add	r2, pc, #4	; (adr r2, 8019b74 <USBD_LL_ClearStallEP+0x34>)
 8019b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b74:	08019b85 	.word	0x08019b85
 8019b78:	08019b8b 	.word	0x08019b8b
 8019b7c:	08019b91 	.word	0x08019b91
 8019b80:	08019b97 	.word	0x08019b97
    case HAL_OK :
      usb_status = USBD_OK;
 8019b84:	2300      	movs	r3, #0
 8019b86:	73fb      	strb	r3, [r7, #15]
    break;
 8019b88:	e00b      	b.n	8019ba2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b8a:	2303      	movs	r3, #3
 8019b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b8e:	e008      	b.n	8019ba2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b90:	2301      	movs	r3, #1
 8019b92:	73fb      	strb	r3, [r7, #15]
    break;
 8019b94:	e005      	b.n	8019ba2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b96:	2303      	movs	r3, #3
 8019b98:	73fb      	strb	r3, [r7, #15]
    break;
 8019b9a:	e002      	b.n	8019ba2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b9c:	2303      	movs	r3, #3
 8019b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8019ba0:	bf00      	nop
  }
  return usb_status;
 8019ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3710      	adds	r7, #16
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}

08019bac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bac:	b480      	push	{r7}
 8019bae:	b085      	sub	sp, #20
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
 8019bb4:	460b      	mov	r3, r1
 8019bb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019bbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	da0b      	bge.n	8019be0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019bc8:	78fb      	ldrb	r3, [r7, #3]
 8019bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019bce:	68f9      	ldr	r1, [r7, #12]
 8019bd0:	4613      	mov	r3, r2
 8019bd2:	00db      	lsls	r3, r3, #3
 8019bd4:	1a9b      	subs	r3, r3, r2
 8019bd6:	009b      	lsls	r3, r3, #2
 8019bd8:	440b      	add	r3, r1
 8019bda:	333e      	adds	r3, #62	; 0x3e
 8019bdc:	781b      	ldrb	r3, [r3, #0]
 8019bde:	e00b      	b.n	8019bf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019be0:	78fb      	ldrb	r3, [r7, #3]
 8019be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019be6:	68f9      	ldr	r1, [r7, #12]
 8019be8:	4613      	mov	r3, r2
 8019bea:	00db      	lsls	r3, r3, #3
 8019bec:	1a9b      	subs	r3, r3, r2
 8019bee:	009b      	lsls	r3, r3, #2
 8019bf0:	440b      	add	r3, r1
 8019bf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019bf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	3714      	adds	r7, #20
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c02:	4770      	bx	lr

08019c04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b084      	sub	sp, #16
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
 8019c0c:	460b      	mov	r3, r1
 8019c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c10:	2300      	movs	r3, #0
 8019c12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c14:	2300      	movs	r3, #0
 8019c16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019c1e:	78fa      	ldrb	r2, [r7, #3]
 8019c20:	4611      	mov	r1, r2
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7f1 fd3e 	bl	800b6a4 <HAL_PCD_SetAddress>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019c2c:	7bbb      	ldrb	r3, [r7, #14]
 8019c2e:	2b03      	cmp	r3, #3
 8019c30:	d816      	bhi.n	8019c60 <USBD_LL_SetUSBAddress+0x5c>
 8019c32:	a201      	add	r2, pc, #4	; (adr r2, 8019c38 <USBD_LL_SetUSBAddress+0x34>)
 8019c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c38:	08019c49 	.word	0x08019c49
 8019c3c:	08019c4f 	.word	0x08019c4f
 8019c40:	08019c55 	.word	0x08019c55
 8019c44:	08019c5b 	.word	0x08019c5b
    case HAL_OK :
      usb_status = USBD_OK;
 8019c48:	2300      	movs	r3, #0
 8019c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c4c:	e00b      	b.n	8019c66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c4e:	2303      	movs	r3, #3
 8019c50:	73fb      	strb	r3, [r7, #15]
    break;
 8019c52:	e008      	b.n	8019c66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c54:	2301      	movs	r3, #1
 8019c56:	73fb      	strb	r3, [r7, #15]
    break;
 8019c58:	e005      	b.n	8019c66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c5a:	2303      	movs	r3, #3
 8019c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8019c5e:	e002      	b.n	8019c66 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019c60:	2303      	movs	r3, #3
 8019c62:	73fb      	strb	r3, [r7, #15]
    break;
 8019c64:	bf00      	nop
  }
  return usb_status;
 8019c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c68:	4618      	mov	r0, r3
 8019c6a:	3710      	adds	r7, #16
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}

08019c70 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b086      	sub	sp, #24
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	60f8      	str	r0, [r7, #12]
 8019c78:	607a      	str	r2, [r7, #4]
 8019c7a:	603b      	str	r3, [r7, #0]
 8019c7c:	460b      	mov	r3, r1
 8019c7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c80:	2300      	movs	r3, #0
 8019c82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c84:	2300      	movs	r3, #0
 8019c86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019c8e:	7af9      	ldrb	r1, [r7, #11]
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	687a      	ldr	r2, [r7, #4]
 8019c94:	f7f1 fe33 	bl	800b8fe <HAL_PCD_EP_Transmit>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019c9c:	7dbb      	ldrb	r3, [r7, #22]
 8019c9e:	2b03      	cmp	r3, #3
 8019ca0:	d816      	bhi.n	8019cd0 <USBD_LL_Transmit+0x60>
 8019ca2:	a201      	add	r2, pc, #4	; (adr r2, 8019ca8 <USBD_LL_Transmit+0x38>)
 8019ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ca8:	08019cb9 	.word	0x08019cb9
 8019cac:	08019cbf 	.word	0x08019cbf
 8019cb0:	08019cc5 	.word	0x08019cc5
 8019cb4:	08019ccb 	.word	0x08019ccb
    case HAL_OK :
      usb_status = USBD_OK;
 8019cb8:	2300      	movs	r3, #0
 8019cba:	75fb      	strb	r3, [r7, #23]
    break;
 8019cbc:	e00b      	b.n	8019cd6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019cbe:	2303      	movs	r3, #3
 8019cc0:	75fb      	strb	r3, [r7, #23]
    break;
 8019cc2:	e008      	b.n	8019cd6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	75fb      	strb	r3, [r7, #23]
    break;
 8019cc8:	e005      	b.n	8019cd6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019cca:	2303      	movs	r3, #3
 8019ccc:	75fb      	strb	r3, [r7, #23]
    break;
 8019cce:	e002      	b.n	8019cd6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019cd0:	2303      	movs	r3, #3
 8019cd2:	75fb      	strb	r3, [r7, #23]
    break;
 8019cd4:	bf00      	nop
  }
  return usb_status;
 8019cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cd8:	4618      	mov	r0, r3
 8019cda:	3718      	adds	r7, #24
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	bd80      	pop	{r7, pc}

08019ce0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b086      	sub	sp, #24
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	607a      	str	r2, [r7, #4]
 8019cea:	603b      	str	r3, [r7, #0]
 8019cec:	460b      	mov	r3, r1
 8019cee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019cfe:	7af9      	ldrb	r1, [r7, #11]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	687a      	ldr	r2, [r7, #4]
 8019d04:	f7f1 fda5 	bl	800b852 <HAL_PCD_EP_Receive>
 8019d08:	4603      	mov	r3, r0
 8019d0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019d0c:	7dbb      	ldrb	r3, [r7, #22]
 8019d0e:	2b03      	cmp	r3, #3
 8019d10:	d816      	bhi.n	8019d40 <USBD_LL_PrepareReceive+0x60>
 8019d12:	a201      	add	r2, pc, #4	; (adr r2, 8019d18 <USBD_LL_PrepareReceive+0x38>)
 8019d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d18:	08019d29 	.word	0x08019d29
 8019d1c:	08019d2f 	.word	0x08019d2f
 8019d20:	08019d35 	.word	0x08019d35
 8019d24:	08019d3b 	.word	0x08019d3b
    case HAL_OK :
      usb_status = USBD_OK;
 8019d28:	2300      	movs	r3, #0
 8019d2a:	75fb      	strb	r3, [r7, #23]
    break;
 8019d2c:	e00b      	b.n	8019d46 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019d2e:	2303      	movs	r3, #3
 8019d30:	75fb      	strb	r3, [r7, #23]
    break;
 8019d32:	e008      	b.n	8019d46 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019d34:	2301      	movs	r3, #1
 8019d36:	75fb      	strb	r3, [r7, #23]
    break;
 8019d38:	e005      	b.n	8019d46 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019d3a:	2303      	movs	r3, #3
 8019d3c:	75fb      	strb	r3, [r7, #23]
    break;
 8019d3e:	e002      	b.n	8019d46 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019d40:	2303      	movs	r3, #3
 8019d42:	75fb      	strb	r3, [r7, #23]
    break;
 8019d44:	bf00      	nop
  }
  return usb_status;
 8019d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	3718      	adds	r7, #24
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bd80      	pop	{r7, pc}

08019d50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b082      	sub	sp, #8
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
 8019d58:	460b      	mov	r3, r1
 8019d5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019d62:	78fa      	ldrb	r2, [r7, #3]
 8019d64:	4611      	mov	r1, r2
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7f1 fdb1 	bl	800b8ce <HAL_PCD_EP_GetRxCount>
 8019d6c:	4603      	mov	r3, r0
}
 8019d6e:	4618      	mov	r0, r3
 8019d70:	3708      	adds	r7, #8
 8019d72:	46bd      	mov	sp, r7
 8019d74:	bd80      	pop	{r7, pc}
	...

08019d78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b082      	sub	sp, #8
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
 8019d80:	460b      	mov	r3, r1
 8019d82:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019d84:	78fb      	ldrb	r3, [r7, #3]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d002      	beq.n	8019d90 <HAL_PCDEx_LPM_Callback+0x18>
 8019d8a:	2b01      	cmp	r3, #1
 8019d8c:	d01f      	beq.n	8019dce <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019d8e:	e03b      	b.n	8019e08 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	6a1b      	ldr	r3, [r3, #32]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d007      	beq.n	8019da8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019d98:	f000 f854 	bl	8019e44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019d9c:	4b1c      	ldr	r3, [pc, #112]	; (8019e10 <HAL_PCDEx_LPM_Callback+0x98>)
 8019d9e:	691b      	ldr	r3, [r3, #16]
 8019da0:	4a1b      	ldr	r2, [pc, #108]	; (8019e10 <HAL_PCDEx_LPM_Callback+0x98>)
 8019da2:	f023 0306 	bic.w	r3, r3, #6
 8019da6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	6812      	ldr	r2, [r2, #0]
 8019db6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019dba:	f023 0301 	bic.w	r3, r3, #1
 8019dbe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f000 faaa 	bl	801a320 <USBD_LL_Resume>
    break;
 8019dcc:	e01c      	b.n	8019e08 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	687a      	ldr	r2, [r7, #4]
 8019dda:	6812      	ldr	r2, [r2, #0]
 8019ddc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019de0:	f043 0301 	orr.w	r3, r3, #1
 8019de4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019dec:	4618      	mov	r0, r3
 8019dee:	f000 fa81 	bl	801a2f4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	6a1b      	ldr	r3, [r3, #32]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d005      	beq.n	8019e06 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019dfa:	4b05      	ldr	r3, [pc, #20]	; (8019e10 <HAL_PCDEx_LPM_Callback+0x98>)
 8019dfc:	691b      	ldr	r3, [r3, #16]
 8019dfe:	4a04      	ldr	r2, [pc, #16]	; (8019e10 <HAL_PCDEx_LPM_Callback+0x98>)
 8019e00:	f043 0306 	orr.w	r3, r3, #6
 8019e04:	6113      	str	r3, [r2, #16]
    break;
 8019e06:	bf00      	nop
}
 8019e08:	bf00      	nop
 8019e0a:	3708      	adds	r7, #8
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	bd80      	pop	{r7, pc}
 8019e10:	e000ed00 	.word	0xe000ed00

08019e14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019e14:	b480      	push	{r7}
 8019e16:	b083      	sub	sp, #12
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
  //static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  static uint32_t mem[(sizeof(USBD_CDCMSC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  //static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */

  return mem;
 8019e1c:	4b03      	ldr	r3, [pc, #12]	; (8019e2c <USBD_static_malloc+0x18>)
}
 8019e1e:	4618      	mov	r0, r3
 8019e20:	370c      	adds	r7, #12
 8019e22:	46bd      	mov	sp, r7
 8019e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e28:	4770      	bx	lr
 8019e2a:	bf00      	nop
 8019e2c:	20001c64 	.word	0x20001c64

08019e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019e30:	b480      	push	{r7}
 8019e32:	b083      	sub	sp, #12
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	6078      	str	r0, [r7, #4]

}
 8019e38:	bf00      	nop
 8019e3a:	370c      	adds	r7, #12
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e42:	4770      	bx	lr

08019e44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019e44:	b580      	push	{r7, lr}
 8019e46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019e48:	f7eb fff4 	bl	8005e34 <SystemClock_Config>
}
 8019e4c:	bf00      	nop
 8019e4e:	bd80      	pop	{r7, pc}

08019e50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b086      	sub	sp, #24
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	60f8      	str	r0, [r7, #12]
 8019e58:	60b9      	str	r1, [r7, #8]
 8019e5a:	4613      	mov	r3, r2
 8019e5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d101      	bne.n	8019e68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019e64:	2303      	movs	r3, #3
 8019e66:	e023      	b.n	8019eb0 <USBD_Init+0x60>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserDataCDC = NULL;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	2200      	movs	r2, #0
 8019e74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pdev->pUserDataMSC = NULL;
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	2200      	movs	r2, #0
 8019e84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d003      	beq.n	8019e96 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	68ba      	ldr	r2, [r7, #8]
 8019e92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	2201      	movs	r2, #1
 8019e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	79fa      	ldrb	r2, [r7, #7]
 8019ea2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8019ea4:	68f8      	ldr	r0, [r7, #12]
 8019ea6:	f7ff fce3 	bl	8019870 <USBD_LL_Init>
 8019eaa:	4603      	mov	r3, r0
 8019eac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8019eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	3718      	adds	r7, #24
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd80      	pop	{r7, pc}

08019eb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b084      	sub	sp, #16
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
 8019ec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8019ec6:	683b      	ldr	r3, [r7, #0]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d101      	bne.n	8019ed0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8019ecc:	2303      	movs	r3, #3
 8019ece:	e016      	b.n	8019efe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	683a      	ldr	r2, [r7, #0]
 8019ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d00b      	beq.n	8019efc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019eec:	f107 020e 	add.w	r2, r7, #14
 8019ef0:	4610      	mov	r0, r2
 8019ef2:	4798      	blx	r3
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8019efc:	2300      	movs	r3, #0
}
 8019efe:	4618      	mov	r0, r3
 8019f00:	3710      	adds	r7, #16
 8019f02:	46bd      	mov	sp, r7
 8019f04:	bd80      	pop	{r7, pc}

08019f06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8019f06:	b580      	push	{r7, lr}
 8019f08:	b082      	sub	sp, #8
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8019f0e:	6878      	ldr	r0, [r7, #4]
 8019f10:	f7ff fd04 	bl	801991c <USBD_LL_Start>
 8019f14:	4603      	mov	r3, r0
}
 8019f16:	4618      	mov	r0, r3
 8019f18:	3708      	adds	r7, #8
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	bd80      	pop	{r7, pc}

08019f1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019f1e:	b480      	push	{r7}
 8019f20:	b083      	sub	sp, #12
 8019f22:	af00      	add	r7, sp, #0
 8019f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019f26:	2300      	movs	r3, #0
}
 8019f28:	4618      	mov	r0, r3
 8019f2a:	370c      	adds	r7, #12
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f32:	4770      	bx	lr

08019f34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b084      	sub	sp, #16
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
 8019f3c:	460b      	mov	r3, r1
 8019f3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019f40:	2303      	movs	r3, #3
 8019f42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d009      	beq.n	8019f62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	78fa      	ldrb	r2, [r7, #3]
 8019f58:	4611      	mov	r1, r2
 8019f5a:	6878      	ldr	r0, [r7, #4]
 8019f5c:	4798      	blx	r3
 8019f5e:	4603      	mov	r3, r0
 8019f60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8019f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f64:	4618      	mov	r0, r3
 8019f66:	3710      	adds	r7, #16
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bd80      	pop	{r7, pc}

08019f6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	6078      	str	r0, [r7, #4]
 8019f74:	460b      	mov	r3, r1
 8019f76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d007      	beq.n	8019f92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019f88:	685b      	ldr	r3, [r3, #4]
 8019f8a:	78fa      	ldrb	r2, [r7, #3]
 8019f8c:	4611      	mov	r1, r2
 8019f8e:	6878      	ldr	r0, [r7, #4]
 8019f90:	4798      	blx	r3
  }

  return USBD_OK;
 8019f92:	2300      	movs	r3, #0
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	3708      	adds	r7, #8
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bd80      	pop	{r7, pc}

08019f9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b084      	sub	sp, #16
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
 8019fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019fac:	6839      	ldr	r1, [r7, #0]
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f000 ffba 	bl	801af28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	2201      	movs	r2, #1
 8019fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8019fc2:	461a      	mov	r2, r3
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8019fd0:	f003 031f 	and.w	r3, r3, #31
 8019fd4:	2b02      	cmp	r3, #2
 8019fd6:	d01a      	beq.n	801a00e <USBD_LL_SetupStage+0x72>
 8019fd8:	2b02      	cmp	r3, #2
 8019fda:	d822      	bhi.n	801a022 <USBD_LL_SetupStage+0x86>
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d002      	beq.n	8019fe6 <USBD_LL_SetupStage+0x4a>
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d00a      	beq.n	8019ffa <USBD_LL_SetupStage+0x5e>
 8019fe4:	e01d      	b.n	801a022 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019fec:	4619      	mov	r1, r3
 8019fee:	6878      	ldr	r0, [r7, #4]
 8019ff0:	f000 fa62 	bl	801a4b8 <USBD_StdDevReq>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8019ff8:	e020      	b.n	801a03c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a000:	4619      	mov	r1, r3
 801a002:	6878      	ldr	r0, [r7, #4]
 801a004:	f000 fac6 	bl	801a594 <USBD_StdItfReq>
 801a008:	4603      	mov	r3, r0
 801a00a:	73fb      	strb	r3, [r7, #15]
      break;
 801a00c:	e016      	b.n	801a03c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a014:	4619      	mov	r1, r3
 801a016:	6878      	ldr	r0, [r7, #4]
 801a018:	f000 fb05 	bl	801a626 <USBD_StdEPReq>
 801a01c:	4603      	mov	r3, r0
 801a01e:	73fb      	strb	r3, [r7, #15]
      break;
 801a020:	e00c      	b.n	801a03c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a028:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a02c:	b2db      	uxtb	r3, r3
 801a02e:	4619      	mov	r1, r3
 801a030:	6878      	ldr	r0, [r7, #4]
 801a032:	f7ff fd4f 	bl	8019ad4 <USBD_LL_StallEP>
 801a036:	4603      	mov	r3, r0
 801a038:	73fb      	strb	r3, [r7, #15]
      break;
 801a03a:	bf00      	nop
  }

  return ret;
 801a03c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a03e:	4618      	mov	r0, r3
 801a040:	3710      	adds	r7, #16
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}

0801a046 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a046:	b580      	push	{r7, lr}
 801a048:	b086      	sub	sp, #24
 801a04a:	af00      	add	r7, sp, #0
 801a04c:	60f8      	str	r0, [r7, #12]
 801a04e:	460b      	mov	r3, r1
 801a050:	607a      	str	r2, [r7, #4]
 801a052:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a054:	7afb      	ldrb	r3, [r7, #11]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d138      	bne.n	801a0cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801a060:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a068:	2b03      	cmp	r3, #3
 801a06a:	d14a      	bne.n	801a102 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801a06c:	693b      	ldr	r3, [r7, #16]
 801a06e:	689a      	ldr	r2, [r3, #8]
 801a070:	693b      	ldr	r3, [r7, #16]
 801a072:	68db      	ldr	r3, [r3, #12]
 801a074:	429a      	cmp	r2, r3
 801a076:	d913      	bls.n	801a0a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a078:	693b      	ldr	r3, [r7, #16]
 801a07a:	689a      	ldr	r2, [r3, #8]
 801a07c:	693b      	ldr	r3, [r7, #16]
 801a07e:	68db      	ldr	r3, [r3, #12]
 801a080:	1ad2      	subs	r2, r2, r3
 801a082:	693b      	ldr	r3, [r7, #16]
 801a084:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801a086:	693b      	ldr	r3, [r7, #16]
 801a088:	68da      	ldr	r2, [r3, #12]
 801a08a:	693b      	ldr	r3, [r7, #16]
 801a08c:	689b      	ldr	r3, [r3, #8]
 801a08e:	4293      	cmp	r3, r2
 801a090:	bf28      	it	cs
 801a092:	4613      	movcs	r3, r2
 801a094:	461a      	mov	r2, r3
 801a096:	6879      	ldr	r1, [r7, #4]
 801a098:	68f8      	ldr	r0, [r7, #12]
 801a09a:	f001 f95b 	bl	801b354 <USBD_CtlContinueRx>
 801a09e:	e030      	b.n	801a102 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a0a6:	b2db      	uxtb	r3, r3
 801a0a8:	2b03      	cmp	r3, #3
 801a0aa:	d10b      	bne.n	801a0c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0b2:	691b      	ldr	r3, [r3, #16]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d005      	beq.n	801a0c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0be:	691b      	ldr	r3, [r3, #16]
 801a0c0:	68f8      	ldr	r0, [r7, #12]
 801a0c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801a0c4:	68f8      	ldr	r0, [r7, #12]
 801a0c6:	f001 f956 	bl	801b376 <USBD_CtlSendStatus>
 801a0ca:	e01a      	b.n	801a102 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a0d2:	b2db      	uxtb	r3, r3
 801a0d4:	2b03      	cmp	r3, #3
 801a0d6:	d114      	bne.n	801a102 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0de:	699b      	ldr	r3, [r3, #24]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d00e      	beq.n	801a102 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0ea:	699b      	ldr	r3, [r3, #24]
 801a0ec:	7afa      	ldrb	r2, [r7, #11]
 801a0ee:	4611      	mov	r1, r2
 801a0f0:	68f8      	ldr	r0, [r7, #12]
 801a0f2:	4798      	blx	r3
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a0f8:	7dfb      	ldrb	r3, [r7, #23]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d001      	beq.n	801a102 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a0fe:	7dfb      	ldrb	r3, [r7, #23]
 801a100:	e000      	b.n	801a104 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a102:	2300      	movs	r3, #0
}
 801a104:	4618      	mov	r0, r3
 801a106:	3718      	adds	r7, #24
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}

0801a10c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b086      	sub	sp, #24
 801a110:	af00      	add	r7, sp, #0
 801a112:	60f8      	str	r0, [r7, #12]
 801a114:	460b      	mov	r3, r1
 801a116:	607a      	str	r2, [r7, #4]
 801a118:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a11a:	7afb      	ldrb	r3, [r7, #11]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d16b      	bne.n	801a1f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	3314      	adds	r3, #20
 801a124:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a12c:	2b02      	cmp	r3, #2
 801a12e:	d156      	bne.n	801a1de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a130:	693b      	ldr	r3, [r7, #16]
 801a132:	689a      	ldr	r2, [r3, #8]
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	68db      	ldr	r3, [r3, #12]
 801a138:	429a      	cmp	r2, r3
 801a13a:	d914      	bls.n	801a166 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a13c:	693b      	ldr	r3, [r7, #16]
 801a13e:	689a      	ldr	r2, [r3, #8]
 801a140:	693b      	ldr	r3, [r7, #16]
 801a142:	68db      	ldr	r3, [r3, #12]
 801a144:	1ad2      	subs	r2, r2, r3
 801a146:	693b      	ldr	r3, [r7, #16]
 801a148:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a14a:	693b      	ldr	r3, [r7, #16]
 801a14c:	689b      	ldr	r3, [r3, #8]
 801a14e:	461a      	mov	r2, r3
 801a150:	6879      	ldr	r1, [r7, #4]
 801a152:	68f8      	ldr	r0, [r7, #12]
 801a154:	f001 f8d0 	bl	801b2f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a158:	2300      	movs	r3, #0
 801a15a:	2200      	movs	r2, #0
 801a15c:	2100      	movs	r1, #0
 801a15e:	68f8      	ldr	r0, [r7, #12]
 801a160:	f7ff fdbe 	bl	8019ce0 <USBD_LL_PrepareReceive>
 801a164:	e03b      	b.n	801a1de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a166:	693b      	ldr	r3, [r7, #16]
 801a168:	68da      	ldr	r2, [r3, #12]
 801a16a:	693b      	ldr	r3, [r7, #16]
 801a16c:	689b      	ldr	r3, [r3, #8]
 801a16e:	429a      	cmp	r2, r3
 801a170:	d11c      	bne.n	801a1ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a172:	693b      	ldr	r3, [r7, #16]
 801a174:	685a      	ldr	r2, [r3, #4]
 801a176:	693b      	ldr	r3, [r7, #16]
 801a178:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a17a:	429a      	cmp	r2, r3
 801a17c:	d316      	bcc.n	801a1ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a17e:	693b      	ldr	r3, [r7, #16]
 801a180:	685a      	ldr	r2, [r3, #4]
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a188:	429a      	cmp	r2, r3
 801a18a:	d20f      	bcs.n	801a1ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a18c:	2200      	movs	r2, #0
 801a18e:	2100      	movs	r1, #0
 801a190:	68f8      	ldr	r0, [r7, #12]
 801a192:	f001 f8b1 	bl	801b2f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	2200      	movs	r2, #0
 801a19a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a19e:	2300      	movs	r3, #0
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	2100      	movs	r1, #0
 801a1a4:	68f8      	ldr	r0, [r7, #12]
 801a1a6:	f7ff fd9b 	bl	8019ce0 <USBD_LL_PrepareReceive>
 801a1aa:	e018      	b.n	801a1de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a1b2:	b2db      	uxtb	r3, r3
 801a1b4:	2b03      	cmp	r3, #3
 801a1b6:	d10b      	bne.n	801a1d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1be:	68db      	ldr	r3, [r3, #12]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d005      	beq.n	801a1d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1ca:	68db      	ldr	r3, [r3, #12]
 801a1cc:	68f8      	ldr	r0, [r7, #12]
 801a1ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a1d0:	2180      	movs	r1, #128	; 0x80
 801a1d2:	68f8      	ldr	r0, [r7, #12]
 801a1d4:	f7ff fc7e 	bl	8019ad4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a1d8:	68f8      	ldr	r0, [r7, #12]
 801a1da:	f001 f8df 	bl	801b39c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a1e4:	2b01      	cmp	r3, #1
 801a1e6:	d122      	bne.n	801a22e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a1e8:	68f8      	ldr	r0, [r7, #12]
 801a1ea:	f7ff fe98 	bl	8019f1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a1f6:	e01a      	b.n	801a22e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a1fe:	b2db      	uxtb	r3, r3
 801a200:	2b03      	cmp	r3, #3
 801a202:	d114      	bne.n	801a22e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a20a:	695b      	ldr	r3, [r3, #20]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d00e      	beq.n	801a22e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a216:	695b      	ldr	r3, [r3, #20]
 801a218:	7afa      	ldrb	r2, [r7, #11]
 801a21a:	4611      	mov	r1, r2
 801a21c:	68f8      	ldr	r0, [r7, #12]
 801a21e:	4798      	blx	r3
 801a220:	4603      	mov	r3, r0
 801a222:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a224:	7dfb      	ldrb	r3, [r7, #23]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d001      	beq.n	801a22e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801a22a:	7dfb      	ldrb	r3, [r7, #23]
 801a22c:	e000      	b.n	801a230 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801a22e:	2300      	movs	r3, #0
}
 801a230:	4618      	mov	r0, r3
 801a232:	3718      	adds	r7, #24
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}

0801a238 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b082      	sub	sp, #8
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	2201      	movs	r2, #1
 801a244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	2200      	movs	r2, #0
 801a24c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	2200      	movs	r2, #0
 801a254:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	2200      	movs	r2, #0
 801a25a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a264:	2b00      	cmp	r3, #0
 801a266:	d101      	bne.n	801a26c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801a268:	2303      	movs	r3, #3
 801a26a:	e02f      	b.n	801a2cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassDataCDC != NULL)
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a272:	2b00      	cmp	r3, #0
 801a274:	d00f      	beq.n	801a296 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a27c:	685b      	ldr	r3, [r3, #4]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d009      	beq.n	801a296 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a288:	685b      	ldr	r3, [r3, #4]
 801a28a:	687a      	ldr	r2, [r7, #4]
 801a28c:	6852      	ldr	r2, [r2, #4]
 801a28e:	b2d2      	uxtb	r2, r2
 801a290:	4611      	mov	r1, r2
 801a292:	6878      	ldr	r0, [r7, #4]
 801a294:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a296:	2340      	movs	r3, #64	; 0x40
 801a298:	2200      	movs	r2, #0
 801a29a:	2100      	movs	r1, #0
 801a29c:	6878      	ldr	r0, [r7, #4]
 801a29e:	f7ff fb6f 	bl	8019980 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	2201      	movs	r2, #1
 801a2a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	2240      	movs	r2, #64	; 0x40
 801a2ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a2b2:	2340      	movs	r3, #64	; 0x40
 801a2b4:	2200      	movs	r2, #0
 801a2b6:	2180      	movs	r1, #128	; 0x80
 801a2b8:	6878      	ldr	r0, [r7, #4]
 801a2ba:	f7ff fb61 	bl	8019980 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	2201      	movs	r2, #1
 801a2c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	2240      	movs	r2, #64	; 0x40
 801a2c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801a2ca:	2300      	movs	r3, #0
}
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	3708      	adds	r7, #8
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bd80      	pop	{r7, pc}

0801a2d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a2d4:	b480      	push	{r7}
 801a2d6:	b083      	sub	sp, #12
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
 801a2dc:	460b      	mov	r3, r1
 801a2de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	78fa      	ldrb	r2, [r7, #3]
 801a2e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a2e6:	2300      	movs	r3, #0
}
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	370c      	adds	r7, #12
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f2:	4770      	bx	lr

0801a2f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a2f4:	b480      	push	{r7}
 801a2f6:	b083      	sub	sp, #12
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a302:	b2da      	uxtb	r2, r3
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2204      	movs	r2, #4
 801a30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a312:	2300      	movs	r3, #0
}
 801a314:	4618      	mov	r0, r3
 801a316:	370c      	adds	r7, #12
 801a318:	46bd      	mov	sp, r7
 801a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31e:	4770      	bx	lr

0801a320 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a320:	b480      	push	{r7}
 801a322:	b083      	sub	sp, #12
 801a324:	af00      	add	r7, sp, #0
 801a326:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a32e:	b2db      	uxtb	r3, r3
 801a330:	2b04      	cmp	r3, #4
 801a332:	d106      	bne.n	801a342 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801a33a:	b2da      	uxtb	r2, r3
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a342:	2300      	movs	r3, #0
}
 801a344:	4618      	mov	r0, r3
 801a346:	370c      	adds	r7, #12
 801a348:	46bd      	mov	sp, r7
 801a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a34e:	4770      	bx	lr

0801a350 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b082      	sub	sp, #8
 801a354:	af00      	add	r7, sp, #0
 801a356:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d101      	bne.n	801a366 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801a362:	2303      	movs	r3, #3
 801a364:	e012      	b.n	801a38c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a36c:	b2db      	uxtb	r3, r3
 801a36e:	2b03      	cmp	r3, #3
 801a370:	d10b      	bne.n	801a38a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a378:	69db      	ldr	r3, [r3, #28]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d005      	beq.n	801a38a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a384:	69db      	ldr	r3, [r3, #28]
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a38a:	2300      	movs	r3, #0
}
 801a38c:	4618      	mov	r0, r3
 801a38e:	3708      	adds	r7, #8
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}

0801a394 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b082      	sub	sp, #8
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	460b      	mov	r3, r1
 801a39e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d101      	bne.n	801a3ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a3aa:	2303      	movs	r3, #3
 801a3ac:	e014      	b.n	801a3d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	2b03      	cmp	r3, #3
 801a3b8:	d10d      	bne.n	801a3d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3c0:	6a1b      	ldr	r3, [r3, #32]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d007      	beq.n	801a3d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3cc:	6a1b      	ldr	r3, [r3, #32]
 801a3ce:	78fa      	ldrb	r2, [r7, #3]
 801a3d0:	4611      	mov	r1, r2
 801a3d2:	6878      	ldr	r0, [r7, #4]
 801a3d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a3d6:	2300      	movs	r3, #0
}
 801a3d8:	4618      	mov	r0, r3
 801a3da:	3708      	adds	r7, #8
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	bd80      	pop	{r7, pc}

0801a3e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b082      	sub	sp, #8
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	6078      	str	r0, [r7, #4]
 801a3e8:	460b      	mov	r3, r1
 801a3ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d101      	bne.n	801a3fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a3f6:	2303      	movs	r3, #3
 801a3f8:	e014      	b.n	801a424 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a400:	b2db      	uxtb	r3, r3
 801a402:	2b03      	cmp	r3, #3
 801a404:	d10d      	bne.n	801a422 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d007      	beq.n	801a422 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a41a:	78fa      	ldrb	r2, [r7, #3]
 801a41c:	4611      	mov	r1, r2
 801a41e:	6878      	ldr	r0, [r7, #4]
 801a420:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a422:	2300      	movs	r3, #0
}
 801a424:	4618      	mov	r0, r3
 801a426:	3708      	adds	r7, #8
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd80      	pop	{r7, pc}

0801a42c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801a42c:	b480      	push	{r7}
 801a42e:	b083      	sub	sp, #12
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a434:	2300      	movs	r3, #0
}
 801a436:	4618      	mov	r0, r3
 801a438:	370c      	adds	r7, #12
 801a43a:	46bd      	mov	sp, r7
 801a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a440:	4770      	bx	lr

0801a442 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801a442:	b580      	push	{r7, lr}
 801a444:	b082      	sub	sp, #8
 801a446:	af00      	add	r7, sp, #0
 801a448:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2201      	movs	r2, #1
 801a44e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d009      	beq.n	801a470 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a462:	685b      	ldr	r3, [r3, #4]
 801a464:	687a      	ldr	r2, [r7, #4]
 801a466:	6852      	ldr	r2, [r2, #4]
 801a468:	b2d2      	uxtb	r2, r2
 801a46a:	4611      	mov	r1, r2
 801a46c:	6878      	ldr	r0, [r7, #4]
 801a46e:	4798      	blx	r3
  }

  return USBD_OK;
 801a470:	2300      	movs	r3, #0
}
 801a472:	4618      	mov	r0, r3
 801a474:	3708      	adds	r7, #8
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}

0801a47a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a47a:	b480      	push	{r7}
 801a47c:	b087      	sub	sp, #28
 801a47e:	af00      	add	r7, sp, #0
 801a480:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a486:	697b      	ldr	r3, [r7, #20]
 801a488:	781b      	ldrb	r3, [r3, #0]
 801a48a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801a48c:	697b      	ldr	r3, [r7, #20]
 801a48e:	3301      	adds	r3, #1
 801a490:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a492:	697b      	ldr	r3, [r7, #20]
 801a494:	781b      	ldrb	r3, [r3, #0]
 801a496:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a498:	8a3b      	ldrh	r3, [r7, #16]
 801a49a:	021b      	lsls	r3, r3, #8
 801a49c:	b21a      	sxth	r2, r3
 801a49e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a4a2:	4313      	orrs	r3, r2
 801a4a4:	b21b      	sxth	r3, r3
 801a4a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801a4a8:	89fb      	ldrh	r3, [r7, #14]
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	371c      	adds	r7, #28
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b4:	4770      	bx	lr
	...

0801a4b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a4c6:	683b      	ldr	r3, [r7, #0]
 801a4c8:	781b      	ldrb	r3, [r3, #0]
 801a4ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a4ce:	2b40      	cmp	r3, #64	; 0x40
 801a4d0:	d005      	beq.n	801a4de <USBD_StdDevReq+0x26>
 801a4d2:	2b40      	cmp	r3, #64	; 0x40
 801a4d4:	d853      	bhi.n	801a57e <USBD_StdDevReq+0xc6>
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d00b      	beq.n	801a4f2 <USBD_StdDevReq+0x3a>
 801a4da:	2b20      	cmp	r3, #32
 801a4dc:	d14f      	bne.n	801a57e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4e4:	689b      	ldr	r3, [r3, #8]
 801a4e6:	6839      	ldr	r1, [r7, #0]
 801a4e8:	6878      	ldr	r0, [r7, #4]
 801a4ea:	4798      	blx	r3
 801a4ec:	4603      	mov	r3, r0
 801a4ee:	73fb      	strb	r3, [r7, #15]
      break;
 801a4f0:	e04a      	b.n	801a588 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a4f2:	683b      	ldr	r3, [r7, #0]
 801a4f4:	785b      	ldrb	r3, [r3, #1]
 801a4f6:	2b09      	cmp	r3, #9
 801a4f8:	d83b      	bhi.n	801a572 <USBD_StdDevReq+0xba>
 801a4fa:	a201      	add	r2, pc, #4	; (adr r2, 801a500 <USBD_StdDevReq+0x48>)
 801a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a500:	0801a555 	.word	0x0801a555
 801a504:	0801a569 	.word	0x0801a569
 801a508:	0801a573 	.word	0x0801a573
 801a50c:	0801a55f 	.word	0x0801a55f
 801a510:	0801a573 	.word	0x0801a573
 801a514:	0801a533 	.word	0x0801a533
 801a518:	0801a529 	.word	0x0801a529
 801a51c:	0801a573 	.word	0x0801a573
 801a520:	0801a54b 	.word	0x0801a54b
 801a524:	0801a53d 	.word	0x0801a53d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a528:	6839      	ldr	r1, [r7, #0]
 801a52a:	6878      	ldr	r0, [r7, #4]
 801a52c:	f000 f9de 	bl	801a8ec <USBD_GetDescriptor>
          break;
 801a530:	e024      	b.n	801a57c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a532:	6839      	ldr	r1, [r7, #0]
 801a534:	6878      	ldr	r0, [r7, #4]
 801a536:	f000 fb6d 	bl	801ac14 <USBD_SetAddress>
          break;
 801a53a:	e01f      	b.n	801a57c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a53c:	6839      	ldr	r1, [r7, #0]
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	f000 fbac 	bl	801ac9c <USBD_SetConfig>
 801a544:	4603      	mov	r3, r0
 801a546:	73fb      	strb	r3, [r7, #15]
          break;
 801a548:	e018      	b.n	801a57c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a54a:	6839      	ldr	r1, [r7, #0]
 801a54c:	6878      	ldr	r0, [r7, #4]
 801a54e:	f000 fc4b 	bl	801ade8 <USBD_GetConfig>
          break;
 801a552:	e013      	b.n	801a57c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a554:	6839      	ldr	r1, [r7, #0]
 801a556:	6878      	ldr	r0, [r7, #4]
 801a558:	f000 fc7c 	bl	801ae54 <USBD_GetStatus>
          break;
 801a55c:	e00e      	b.n	801a57c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a55e:	6839      	ldr	r1, [r7, #0]
 801a560:	6878      	ldr	r0, [r7, #4]
 801a562:	f000 fcab 	bl	801aebc <USBD_SetFeature>
          break;
 801a566:	e009      	b.n	801a57c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a568:	6839      	ldr	r1, [r7, #0]
 801a56a:	6878      	ldr	r0, [r7, #4]
 801a56c:	f000 fcba 	bl	801aee4 <USBD_ClrFeature>
          break;
 801a570:	e004      	b.n	801a57c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801a572:	6839      	ldr	r1, [r7, #0]
 801a574:	6878      	ldr	r0, [r7, #4]
 801a576:	f000 fd11 	bl	801af9c <USBD_CtlError>
          break;
 801a57a:	bf00      	nop
      }
      break;
 801a57c:	e004      	b.n	801a588 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a57e:	6839      	ldr	r1, [r7, #0]
 801a580:	6878      	ldr	r0, [r7, #4]
 801a582:	f000 fd0b 	bl	801af9c <USBD_CtlError>
      break;
 801a586:	bf00      	nop
  }

  return ret;
 801a588:	7bfb      	ldrb	r3, [r7, #15]
}
 801a58a:	4618      	mov	r0, r3
 801a58c:	3710      	adds	r7, #16
 801a58e:	46bd      	mov	sp, r7
 801a590:	bd80      	pop	{r7, pc}
 801a592:	bf00      	nop

0801a594 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b084      	sub	sp, #16
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
 801a59c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a59e:	2300      	movs	r3, #0
 801a5a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a5a2:	683b      	ldr	r3, [r7, #0]
 801a5a4:	781b      	ldrb	r3, [r3, #0]
 801a5a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a5aa:	2b40      	cmp	r3, #64	; 0x40
 801a5ac:	d005      	beq.n	801a5ba <USBD_StdItfReq+0x26>
 801a5ae:	2b40      	cmp	r3, #64	; 0x40
 801a5b0:	d82f      	bhi.n	801a612 <USBD_StdItfReq+0x7e>
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d001      	beq.n	801a5ba <USBD_StdItfReq+0x26>
 801a5b6:	2b20      	cmp	r3, #32
 801a5b8:	d12b      	bne.n	801a612 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	3b01      	subs	r3, #1
 801a5c4:	2b02      	cmp	r3, #2
 801a5c6:	d81d      	bhi.n	801a604 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a5c8:	683b      	ldr	r3, [r7, #0]
 801a5ca:	889b      	ldrh	r3, [r3, #4]
 801a5cc:	b2db      	uxtb	r3, r3
 801a5ce:	2b03      	cmp	r3, #3
 801a5d0:	d813      	bhi.n	801a5fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5d8:	689b      	ldr	r3, [r3, #8]
 801a5da:	6839      	ldr	r1, [r7, #0]
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	4798      	blx	r3
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	88db      	ldrh	r3, [r3, #6]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d110      	bne.n	801a60e <USBD_StdItfReq+0x7a>
 801a5ec:	7bfb      	ldrb	r3, [r7, #15]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d10d      	bne.n	801a60e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a5f2:	6878      	ldr	r0, [r7, #4]
 801a5f4:	f000 febf 	bl	801b376 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a5f8:	e009      	b.n	801a60e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801a5fa:	6839      	ldr	r1, [r7, #0]
 801a5fc:	6878      	ldr	r0, [r7, #4]
 801a5fe:	f000 fccd 	bl	801af9c <USBD_CtlError>
          break;
 801a602:	e004      	b.n	801a60e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801a604:	6839      	ldr	r1, [r7, #0]
 801a606:	6878      	ldr	r0, [r7, #4]
 801a608:	f000 fcc8 	bl	801af9c <USBD_CtlError>
          break;
 801a60c:	e000      	b.n	801a610 <USBD_StdItfReq+0x7c>
          break;
 801a60e:	bf00      	nop
      }
      break;
 801a610:	e004      	b.n	801a61c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801a612:	6839      	ldr	r1, [r7, #0]
 801a614:	6878      	ldr	r0, [r7, #4]
 801a616:	f000 fcc1 	bl	801af9c <USBD_CtlError>
      break;
 801a61a:	bf00      	nop
  }

  return ret;
 801a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a61e:	4618      	mov	r0, r3
 801a620:	3710      	adds	r7, #16
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}

0801a626 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a626:	b580      	push	{r7, lr}
 801a628:	b084      	sub	sp, #16
 801a62a:	af00      	add	r7, sp, #0
 801a62c:	6078      	str	r0, [r7, #4]
 801a62e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a630:	2300      	movs	r3, #0
 801a632:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801a634:	683b      	ldr	r3, [r7, #0]
 801a636:	889b      	ldrh	r3, [r3, #4]
 801a638:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	781b      	ldrb	r3, [r3, #0]
 801a63e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a642:	2b40      	cmp	r3, #64	; 0x40
 801a644:	d007      	beq.n	801a656 <USBD_StdEPReq+0x30>
 801a646:	2b40      	cmp	r3, #64	; 0x40
 801a648:	f200 8145 	bhi.w	801a8d6 <USBD_StdEPReq+0x2b0>
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d00c      	beq.n	801a66a <USBD_StdEPReq+0x44>
 801a650:	2b20      	cmp	r3, #32
 801a652:	f040 8140 	bne.w	801a8d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a65c:	689b      	ldr	r3, [r3, #8]
 801a65e:	6839      	ldr	r1, [r7, #0]
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	4798      	blx	r3
 801a664:	4603      	mov	r3, r0
 801a666:	73fb      	strb	r3, [r7, #15]
      break;
 801a668:	e13a      	b.n	801a8e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a66a:	683b      	ldr	r3, [r7, #0]
 801a66c:	785b      	ldrb	r3, [r3, #1]
 801a66e:	2b03      	cmp	r3, #3
 801a670:	d007      	beq.n	801a682 <USBD_StdEPReq+0x5c>
 801a672:	2b03      	cmp	r3, #3
 801a674:	f300 8129 	bgt.w	801a8ca <USBD_StdEPReq+0x2a4>
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d07f      	beq.n	801a77c <USBD_StdEPReq+0x156>
 801a67c:	2b01      	cmp	r3, #1
 801a67e:	d03c      	beq.n	801a6fa <USBD_StdEPReq+0xd4>
 801a680:	e123      	b.n	801a8ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	2b02      	cmp	r3, #2
 801a68c:	d002      	beq.n	801a694 <USBD_StdEPReq+0x6e>
 801a68e:	2b03      	cmp	r3, #3
 801a690:	d016      	beq.n	801a6c0 <USBD_StdEPReq+0x9a>
 801a692:	e02c      	b.n	801a6ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a694:	7bbb      	ldrb	r3, [r7, #14]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d00d      	beq.n	801a6b6 <USBD_StdEPReq+0x90>
 801a69a:	7bbb      	ldrb	r3, [r7, #14]
 801a69c:	2b80      	cmp	r3, #128	; 0x80
 801a69e:	d00a      	beq.n	801a6b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a6a0:	7bbb      	ldrb	r3, [r7, #14]
 801a6a2:	4619      	mov	r1, r3
 801a6a4:	6878      	ldr	r0, [r7, #4]
 801a6a6:	f7ff fa15 	bl	8019ad4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a6aa:	2180      	movs	r1, #128	; 0x80
 801a6ac:	6878      	ldr	r0, [r7, #4]
 801a6ae:	f7ff fa11 	bl	8019ad4 <USBD_LL_StallEP>
 801a6b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a6b4:	e020      	b.n	801a6f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801a6b6:	6839      	ldr	r1, [r7, #0]
 801a6b8:	6878      	ldr	r0, [r7, #4]
 801a6ba:	f000 fc6f 	bl	801af9c <USBD_CtlError>
              break;
 801a6be:	e01b      	b.n	801a6f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	885b      	ldrh	r3, [r3, #2]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d10e      	bne.n	801a6e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a6c8:	7bbb      	ldrb	r3, [r7, #14]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d00b      	beq.n	801a6e6 <USBD_StdEPReq+0xc0>
 801a6ce:	7bbb      	ldrb	r3, [r7, #14]
 801a6d0:	2b80      	cmp	r3, #128	; 0x80
 801a6d2:	d008      	beq.n	801a6e6 <USBD_StdEPReq+0xc0>
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	88db      	ldrh	r3, [r3, #6]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d104      	bne.n	801a6e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a6dc:	7bbb      	ldrb	r3, [r7, #14]
 801a6de:	4619      	mov	r1, r3
 801a6e0:	6878      	ldr	r0, [r7, #4]
 801a6e2:	f7ff f9f7 	bl	8019ad4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a6e6:	6878      	ldr	r0, [r7, #4]
 801a6e8:	f000 fe45 	bl	801b376 <USBD_CtlSendStatus>

              break;
 801a6ec:	e004      	b.n	801a6f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801a6ee:	6839      	ldr	r1, [r7, #0]
 801a6f0:	6878      	ldr	r0, [r7, #4]
 801a6f2:	f000 fc53 	bl	801af9c <USBD_CtlError>
              break;
 801a6f6:	bf00      	nop
          }
          break;
 801a6f8:	e0ec      	b.n	801a8d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a700:	b2db      	uxtb	r3, r3
 801a702:	2b02      	cmp	r3, #2
 801a704:	d002      	beq.n	801a70c <USBD_StdEPReq+0xe6>
 801a706:	2b03      	cmp	r3, #3
 801a708:	d016      	beq.n	801a738 <USBD_StdEPReq+0x112>
 801a70a:	e030      	b.n	801a76e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a70c:	7bbb      	ldrb	r3, [r7, #14]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d00d      	beq.n	801a72e <USBD_StdEPReq+0x108>
 801a712:	7bbb      	ldrb	r3, [r7, #14]
 801a714:	2b80      	cmp	r3, #128	; 0x80
 801a716:	d00a      	beq.n	801a72e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a718:	7bbb      	ldrb	r3, [r7, #14]
 801a71a:	4619      	mov	r1, r3
 801a71c:	6878      	ldr	r0, [r7, #4]
 801a71e:	f7ff f9d9 	bl	8019ad4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a722:	2180      	movs	r1, #128	; 0x80
 801a724:	6878      	ldr	r0, [r7, #4]
 801a726:	f7ff f9d5 	bl	8019ad4 <USBD_LL_StallEP>
 801a72a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a72c:	e025      	b.n	801a77a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801a72e:	6839      	ldr	r1, [r7, #0]
 801a730:	6878      	ldr	r0, [r7, #4]
 801a732:	f000 fc33 	bl	801af9c <USBD_CtlError>
              break;
 801a736:	e020      	b.n	801a77a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	885b      	ldrh	r3, [r3, #2]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d11b      	bne.n	801a778 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a740:	7bbb      	ldrb	r3, [r7, #14]
 801a742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a746:	2b00      	cmp	r3, #0
 801a748:	d004      	beq.n	801a754 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a74a:	7bbb      	ldrb	r3, [r7, #14]
 801a74c:	4619      	mov	r1, r3
 801a74e:	6878      	ldr	r0, [r7, #4]
 801a750:	f7ff f9f6 	bl	8019b40 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a754:	6878      	ldr	r0, [r7, #4]
 801a756:	f000 fe0e 	bl	801b376 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a760:	689b      	ldr	r3, [r3, #8]
 801a762:	6839      	ldr	r1, [r7, #0]
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	4798      	blx	r3
 801a768:	4603      	mov	r3, r0
 801a76a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801a76c:	e004      	b.n	801a778 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801a76e:	6839      	ldr	r1, [r7, #0]
 801a770:	6878      	ldr	r0, [r7, #4]
 801a772:	f000 fc13 	bl	801af9c <USBD_CtlError>
              break;
 801a776:	e000      	b.n	801a77a <USBD_StdEPReq+0x154>
              break;
 801a778:	bf00      	nop
          }
          break;
 801a77a:	e0ab      	b.n	801a8d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a782:	b2db      	uxtb	r3, r3
 801a784:	2b02      	cmp	r3, #2
 801a786:	d002      	beq.n	801a78e <USBD_StdEPReq+0x168>
 801a788:	2b03      	cmp	r3, #3
 801a78a:	d032      	beq.n	801a7f2 <USBD_StdEPReq+0x1cc>
 801a78c:	e097      	b.n	801a8be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a78e:	7bbb      	ldrb	r3, [r7, #14]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d007      	beq.n	801a7a4 <USBD_StdEPReq+0x17e>
 801a794:	7bbb      	ldrb	r3, [r7, #14]
 801a796:	2b80      	cmp	r3, #128	; 0x80
 801a798:	d004      	beq.n	801a7a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801a79a:	6839      	ldr	r1, [r7, #0]
 801a79c:	6878      	ldr	r0, [r7, #4]
 801a79e:	f000 fbfd 	bl	801af9c <USBD_CtlError>
                break;
 801a7a2:	e091      	b.n	801a8c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a7a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	da0b      	bge.n	801a7c4 <USBD_StdEPReq+0x19e>
 801a7ac:	7bbb      	ldrb	r3, [r7, #14]
 801a7ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a7b2:	4613      	mov	r3, r2
 801a7b4:	009b      	lsls	r3, r3, #2
 801a7b6:	4413      	add	r3, r2
 801a7b8:	009b      	lsls	r3, r3, #2
 801a7ba:	3310      	adds	r3, #16
 801a7bc:	687a      	ldr	r2, [r7, #4]
 801a7be:	4413      	add	r3, r2
 801a7c0:	3304      	adds	r3, #4
 801a7c2:	e00b      	b.n	801a7dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a7c4:	7bbb      	ldrb	r3, [r7, #14]
 801a7c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a7ca:	4613      	mov	r3, r2
 801a7cc:	009b      	lsls	r3, r3, #2
 801a7ce:	4413      	add	r3, r2
 801a7d0:	009b      	lsls	r3, r3, #2
 801a7d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a7d6:	687a      	ldr	r2, [r7, #4]
 801a7d8:	4413      	add	r3, r2
 801a7da:	3304      	adds	r3, #4
 801a7dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a7de:	68bb      	ldr	r3, [r7, #8]
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	2202      	movs	r2, #2
 801a7e8:	4619      	mov	r1, r3
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	f000 fd69 	bl	801b2c2 <USBD_CtlSendData>
              break;
 801a7f0:	e06a      	b.n	801a8c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a7f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	da11      	bge.n	801a81e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a7fa:	7bbb      	ldrb	r3, [r7, #14]
 801a7fc:	f003 020f 	and.w	r2, r3, #15
 801a800:	6879      	ldr	r1, [r7, #4]
 801a802:	4613      	mov	r3, r2
 801a804:	009b      	lsls	r3, r3, #2
 801a806:	4413      	add	r3, r2
 801a808:	009b      	lsls	r3, r3, #2
 801a80a:	440b      	add	r3, r1
 801a80c:	3324      	adds	r3, #36	; 0x24
 801a80e:	881b      	ldrh	r3, [r3, #0]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d117      	bne.n	801a844 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a814:	6839      	ldr	r1, [r7, #0]
 801a816:	6878      	ldr	r0, [r7, #4]
 801a818:	f000 fbc0 	bl	801af9c <USBD_CtlError>
                  break;
 801a81c:	e054      	b.n	801a8c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a81e:	7bbb      	ldrb	r3, [r7, #14]
 801a820:	f003 020f 	and.w	r2, r3, #15
 801a824:	6879      	ldr	r1, [r7, #4]
 801a826:	4613      	mov	r3, r2
 801a828:	009b      	lsls	r3, r3, #2
 801a82a:	4413      	add	r3, r2
 801a82c:	009b      	lsls	r3, r3, #2
 801a82e:	440b      	add	r3, r1
 801a830:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a834:	881b      	ldrh	r3, [r3, #0]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d104      	bne.n	801a844 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a83a:	6839      	ldr	r1, [r7, #0]
 801a83c:	6878      	ldr	r0, [r7, #4]
 801a83e:	f000 fbad 	bl	801af9c <USBD_CtlError>
                  break;
 801a842:	e041      	b.n	801a8c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a848:	2b00      	cmp	r3, #0
 801a84a:	da0b      	bge.n	801a864 <USBD_StdEPReq+0x23e>
 801a84c:	7bbb      	ldrb	r3, [r7, #14]
 801a84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a852:	4613      	mov	r3, r2
 801a854:	009b      	lsls	r3, r3, #2
 801a856:	4413      	add	r3, r2
 801a858:	009b      	lsls	r3, r3, #2
 801a85a:	3310      	adds	r3, #16
 801a85c:	687a      	ldr	r2, [r7, #4]
 801a85e:	4413      	add	r3, r2
 801a860:	3304      	adds	r3, #4
 801a862:	e00b      	b.n	801a87c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a864:	7bbb      	ldrb	r3, [r7, #14]
 801a866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a86a:	4613      	mov	r3, r2
 801a86c:	009b      	lsls	r3, r3, #2
 801a86e:	4413      	add	r3, r2
 801a870:	009b      	lsls	r3, r3, #2
 801a872:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a876:	687a      	ldr	r2, [r7, #4]
 801a878:	4413      	add	r3, r2
 801a87a:	3304      	adds	r3, #4
 801a87c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a87e:	7bbb      	ldrb	r3, [r7, #14]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d002      	beq.n	801a88a <USBD_StdEPReq+0x264>
 801a884:	7bbb      	ldrb	r3, [r7, #14]
 801a886:	2b80      	cmp	r3, #128	; 0x80
 801a888:	d103      	bne.n	801a892 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801a88a:	68bb      	ldr	r3, [r7, #8]
 801a88c:	2200      	movs	r2, #0
 801a88e:	601a      	str	r2, [r3, #0]
 801a890:	e00e      	b.n	801a8b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801a892:	7bbb      	ldrb	r3, [r7, #14]
 801a894:	4619      	mov	r1, r3
 801a896:	6878      	ldr	r0, [r7, #4]
 801a898:	f7ff f988 	bl	8019bac <USBD_LL_IsStallEP>
 801a89c:	4603      	mov	r3, r0
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d003      	beq.n	801a8aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	2201      	movs	r2, #1
 801a8a6:	601a      	str	r2, [r3, #0]
 801a8a8:	e002      	b.n	801a8b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801a8aa:	68bb      	ldr	r3, [r7, #8]
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	2202      	movs	r2, #2
 801a8b4:	4619      	mov	r1, r3
 801a8b6:	6878      	ldr	r0, [r7, #4]
 801a8b8:	f000 fd03 	bl	801b2c2 <USBD_CtlSendData>
              break;
 801a8bc:	e004      	b.n	801a8c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801a8be:	6839      	ldr	r1, [r7, #0]
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	f000 fb6b 	bl	801af9c <USBD_CtlError>
              break;
 801a8c6:	bf00      	nop
          }
          break;
 801a8c8:	e004      	b.n	801a8d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801a8ca:	6839      	ldr	r1, [r7, #0]
 801a8cc:	6878      	ldr	r0, [r7, #4]
 801a8ce:	f000 fb65 	bl	801af9c <USBD_CtlError>
          break;
 801a8d2:	bf00      	nop
      }
      break;
 801a8d4:	e004      	b.n	801a8e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801a8d6:	6839      	ldr	r1, [r7, #0]
 801a8d8:	6878      	ldr	r0, [r7, #4]
 801a8da:	f000 fb5f 	bl	801af9c <USBD_CtlError>
      break;
 801a8de:	bf00      	nop
  }

  return ret;
 801a8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	3710      	adds	r7, #16
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	bd80      	pop	{r7, pc}
	...

0801a8ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b084      	sub	sp, #16
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
 801a8f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a8fe:	2300      	movs	r3, #0
 801a900:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801a902:	683b      	ldr	r3, [r7, #0]
 801a904:	885b      	ldrh	r3, [r3, #2]
 801a906:	0a1b      	lsrs	r3, r3, #8
 801a908:	b29b      	uxth	r3, r3
 801a90a:	3b01      	subs	r3, #1
 801a90c:	2b0e      	cmp	r3, #14
 801a90e:	f200 8152 	bhi.w	801abb6 <USBD_GetDescriptor+0x2ca>
 801a912:	a201      	add	r2, pc, #4	; (adr r2, 801a918 <USBD_GetDescriptor+0x2c>)
 801a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a918:	0801a989 	.word	0x0801a989
 801a91c:	0801a9a1 	.word	0x0801a9a1
 801a920:	0801a9e1 	.word	0x0801a9e1
 801a924:	0801abb7 	.word	0x0801abb7
 801a928:	0801abb7 	.word	0x0801abb7
 801a92c:	0801ab57 	.word	0x0801ab57
 801a930:	0801ab83 	.word	0x0801ab83
 801a934:	0801abb7 	.word	0x0801abb7
 801a938:	0801abb7 	.word	0x0801abb7
 801a93c:	0801abb7 	.word	0x0801abb7
 801a940:	0801abb7 	.word	0x0801abb7
 801a944:	0801abb7 	.word	0x0801abb7
 801a948:	0801abb7 	.word	0x0801abb7
 801a94c:	0801abb7 	.word	0x0801abb7
 801a950:	0801a955 	.word	0x0801a955
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a95a:	69db      	ldr	r3, [r3, #28]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d00b      	beq.n	801a978 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a966:	69db      	ldr	r3, [r3, #28]
 801a968:	687a      	ldr	r2, [r7, #4]
 801a96a:	7c12      	ldrb	r2, [r2, #16]
 801a96c:	f107 0108 	add.w	r1, r7, #8
 801a970:	4610      	mov	r0, r2
 801a972:	4798      	blx	r3
 801a974:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a976:	e126      	b.n	801abc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801a978:	6839      	ldr	r1, [r7, #0]
 801a97a:	6878      	ldr	r0, [r7, #4]
 801a97c:	f000 fb0e 	bl	801af9c <USBD_CtlError>
        err++;
 801a980:	7afb      	ldrb	r3, [r7, #11]
 801a982:	3301      	adds	r3, #1
 801a984:	72fb      	strb	r3, [r7, #11]
      break;
 801a986:	e11e      	b.n	801abc6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	687a      	ldr	r2, [r7, #4]
 801a992:	7c12      	ldrb	r2, [r2, #16]
 801a994:	f107 0108 	add.w	r1, r7, #8
 801a998:	4610      	mov	r0, r2
 801a99a:	4798      	blx	r3
 801a99c:	60f8      	str	r0, [r7, #12]
      break;
 801a99e:	e112      	b.n	801abc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	7c1b      	ldrb	r3, [r3, #16]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d10d      	bne.n	801a9c4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9b0:	f107 0208 	add.w	r2, r7, #8
 801a9b4:	4610      	mov	r0, r2
 801a9b6:	4798      	blx	r3
 801a9b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	3301      	adds	r3, #1
 801a9be:	2202      	movs	r2, #2
 801a9c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a9c2:	e100      	b.n	801abc6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9cc:	f107 0208 	add.w	r2, r7, #8
 801a9d0:	4610      	mov	r0, r2
 801a9d2:	4798      	blx	r3
 801a9d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	3301      	adds	r3, #1
 801a9da:	2202      	movs	r2, #2
 801a9dc:	701a      	strb	r2, [r3, #0]
      break;
 801a9de:	e0f2      	b.n	801abc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	885b      	ldrh	r3, [r3, #2]
 801a9e4:	b2db      	uxtb	r3, r3
 801a9e6:	2b05      	cmp	r3, #5
 801a9e8:	f200 80ac 	bhi.w	801ab44 <USBD_GetDescriptor+0x258>
 801a9ec:	a201      	add	r2, pc, #4	; (adr r2, 801a9f4 <USBD_GetDescriptor+0x108>)
 801a9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9f2:	bf00      	nop
 801a9f4:	0801aa0d 	.word	0x0801aa0d
 801a9f8:	0801aa41 	.word	0x0801aa41
 801a9fc:	0801aa75 	.word	0x0801aa75
 801aa00:	0801aaa9 	.word	0x0801aaa9
 801aa04:	0801aadd 	.word	0x0801aadd
 801aa08:	0801ab11 	.word	0x0801ab11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa12:	685b      	ldr	r3, [r3, #4]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d00b      	beq.n	801aa30 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa1e:	685b      	ldr	r3, [r3, #4]
 801aa20:	687a      	ldr	r2, [r7, #4]
 801aa22:	7c12      	ldrb	r2, [r2, #16]
 801aa24:	f107 0108 	add.w	r1, r7, #8
 801aa28:	4610      	mov	r0, r2
 801aa2a:	4798      	blx	r3
 801aa2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa2e:	e091      	b.n	801ab54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa30:	6839      	ldr	r1, [r7, #0]
 801aa32:	6878      	ldr	r0, [r7, #4]
 801aa34:	f000 fab2 	bl	801af9c <USBD_CtlError>
            err++;
 801aa38:	7afb      	ldrb	r3, [r7, #11]
 801aa3a:	3301      	adds	r3, #1
 801aa3c:	72fb      	strb	r3, [r7, #11]
          break;
 801aa3e:	e089      	b.n	801ab54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa46:	689b      	ldr	r3, [r3, #8]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d00b      	beq.n	801aa64 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa52:	689b      	ldr	r3, [r3, #8]
 801aa54:	687a      	ldr	r2, [r7, #4]
 801aa56:	7c12      	ldrb	r2, [r2, #16]
 801aa58:	f107 0108 	add.w	r1, r7, #8
 801aa5c:	4610      	mov	r0, r2
 801aa5e:	4798      	blx	r3
 801aa60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa62:	e077      	b.n	801ab54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa64:	6839      	ldr	r1, [r7, #0]
 801aa66:	6878      	ldr	r0, [r7, #4]
 801aa68:	f000 fa98 	bl	801af9c <USBD_CtlError>
            err++;
 801aa6c:	7afb      	ldrb	r3, [r7, #11]
 801aa6e:	3301      	adds	r3, #1
 801aa70:	72fb      	strb	r3, [r7, #11]
          break;
 801aa72:	e06f      	b.n	801ab54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa7a:	68db      	ldr	r3, [r3, #12]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d00b      	beq.n	801aa98 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa86:	68db      	ldr	r3, [r3, #12]
 801aa88:	687a      	ldr	r2, [r7, #4]
 801aa8a:	7c12      	ldrb	r2, [r2, #16]
 801aa8c:	f107 0108 	add.w	r1, r7, #8
 801aa90:	4610      	mov	r0, r2
 801aa92:	4798      	blx	r3
 801aa94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa96:	e05d      	b.n	801ab54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa98:	6839      	ldr	r1, [r7, #0]
 801aa9a:	6878      	ldr	r0, [r7, #4]
 801aa9c:	f000 fa7e 	bl	801af9c <USBD_CtlError>
            err++;
 801aaa0:	7afb      	ldrb	r3, [r7, #11]
 801aaa2:	3301      	adds	r3, #1
 801aaa4:	72fb      	strb	r3, [r7, #11]
          break;
 801aaa6:	e055      	b.n	801ab54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aaae:	691b      	ldr	r3, [r3, #16]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d00b      	beq.n	801aacc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aaba:	691b      	ldr	r3, [r3, #16]
 801aabc:	687a      	ldr	r2, [r7, #4]
 801aabe:	7c12      	ldrb	r2, [r2, #16]
 801aac0:	f107 0108 	add.w	r1, r7, #8
 801aac4:	4610      	mov	r0, r2
 801aac6:	4798      	blx	r3
 801aac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aaca:	e043      	b.n	801ab54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aacc:	6839      	ldr	r1, [r7, #0]
 801aace:	6878      	ldr	r0, [r7, #4]
 801aad0:	f000 fa64 	bl	801af9c <USBD_CtlError>
            err++;
 801aad4:	7afb      	ldrb	r3, [r7, #11]
 801aad6:	3301      	adds	r3, #1
 801aad8:	72fb      	strb	r3, [r7, #11]
          break;
 801aada:	e03b      	b.n	801ab54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aae2:	695b      	ldr	r3, [r3, #20]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d00b      	beq.n	801ab00 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aaee:	695b      	ldr	r3, [r3, #20]
 801aaf0:	687a      	ldr	r2, [r7, #4]
 801aaf2:	7c12      	ldrb	r2, [r2, #16]
 801aaf4:	f107 0108 	add.w	r1, r7, #8
 801aaf8:	4610      	mov	r0, r2
 801aafa:	4798      	blx	r3
 801aafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aafe:	e029      	b.n	801ab54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ab00:	6839      	ldr	r1, [r7, #0]
 801ab02:	6878      	ldr	r0, [r7, #4]
 801ab04:	f000 fa4a 	bl	801af9c <USBD_CtlError>
            err++;
 801ab08:	7afb      	ldrb	r3, [r7, #11]
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	72fb      	strb	r3, [r7, #11]
          break;
 801ab0e:	e021      	b.n	801ab54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab16:	699b      	ldr	r3, [r3, #24]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d00b      	beq.n	801ab34 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab22:	699b      	ldr	r3, [r3, #24]
 801ab24:	687a      	ldr	r2, [r7, #4]
 801ab26:	7c12      	ldrb	r2, [r2, #16]
 801ab28:	f107 0108 	add.w	r1, r7, #8
 801ab2c:	4610      	mov	r0, r2
 801ab2e:	4798      	blx	r3
 801ab30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ab32:	e00f      	b.n	801ab54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ab34:	6839      	ldr	r1, [r7, #0]
 801ab36:	6878      	ldr	r0, [r7, #4]
 801ab38:	f000 fa30 	bl	801af9c <USBD_CtlError>
            err++;
 801ab3c:	7afb      	ldrb	r3, [r7, #11]
 801ab3e:	3301      	adds	r3, #1
 801ab40:	72fb      	strb	r3, [r7, #11]
          break;
 801ab42:	e007      	b.n	801ab54 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801ab44:	6839      	ldr	r1, [r7, #0]
 801ab46:	6878      	ldr	r0, [r7, #4]
 801ab48:	f000 fa28 	bl	801af9c <USBD_CtlError>
          err++;
 801ab4c:	7afb      	ldrb	r3, [r7, #11]
 801ab4e:	3301      	adds	r3, #1
 801ab50:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801ab52:	bf00      	nop
      }
      break;
 801ab54:	e037      	b.n	801abc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	7c1b      	ldrb	r3, [r3, #16]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d109      	bne.n	801ab72 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab66:	f107 0208 	add.w	r2, r7, #8
 801ab6a:	4610      	mov	r0, r2
 801ab6c:	4798      	blx	r3
 801ab6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ab70:	e029      	b.n	801abc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ab72:	6839      	ldr	r1, [r7, #0]
 801ab74:	6878      	ldr	r0, [r7, #4]
 801ab76:	f000 fa11 	bl	801af9c <USBD_CtlError>
        err++;
 801ab7a:	7afb      	ldrb	r3, [r7, #11]
 801ab7c:	3301      	adds	r3, #1
 801ab7e:	72fb      	strb	r3, [r7, #11]
      break;
 801ab80:	e021      	b.n	801abc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	7c1b      	ldrb	r3, [r3, #16]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d10d      	bne.n	801aba6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab92:	f107 0208 	add.w	r2, r7, #8
 801ab96:	4610      	mov	r0, r2
 801ab98:	4798      	blx	r3
 801ab9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	3301      	adds	r3, #1
 801aba0:	2207      	movs	r2, #7
 801aba2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aba4:	e00f      	b.n	801abc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801aba6:	6839      	ldr	r1, [r7, #0]
 801aba8:	6878      	ldr	r0, [r7, #4]
 801abaa:	f000 f9f7 	bl	801af9c <USBD_CtlError>
        err++;
 801abae:	7afb      	ldrb	r3, [r7, #11]
 801abb0:	3301      	adds	r3, #1
 801abb2:	72fb      	strb	r3, [r7, #11]
      break;
 801abb4:	e007      	b.n	801abc6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801abb6:	6839      	ldr	r1, [r7, #0]
 801abb8:	6878      	ldr	r0, [r7, #4]
 801abba:	f000 f9ef 	bl	801af9c <USBD_CtlError>
      err++;
 801abbe:	7afb      	ldrb	r3, [r7, #11]
 801abc0:	3301      	adds	r3, #1
 801abc2:	72fb      	strb	r3, [r7, #11]
      break;
 801abc4:	bf00      	nop
  }

  if (err != 0U)
 801abc6:	7afb      	ldrb	r3, [r7, #11]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d11e      	bne.n	801ac0a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801abcc:	683b      	ldr	r3, [r7, #0]
 801abce:	88db      	ldrh	r3, [r3, #6]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d016      	beq.n	801ac02 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801abd4:	893b      	ldrh	r3, [r7, #8]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d00e      	beq.n	801abf8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	88da      	ldrh	r2, [r3, #6]
 801abde:	893b      	ldrh	r3, [r7, #8]
 801abe0:	4293      	cmp	r3, r2
 801abe2:	bf28      	it	cs
 801abe4:	4613      	movcs	r3, r2
 801abe6:	b29b      	uxth	r3, r3
 801abe8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801abea:	893b      	ldrh	r3, [r7, #8]
 801abec:	461a      	mov	r2, r3
 801abee:	68f9      	ldr	r1, [r7, #12]
 801abf0:	6878      	ldr	r0, [r7, #4]
 801abf2:	f000 fb66 	bl	801b2c2 <USBD_CtlSendData>
 801abf6:	e009      	b.n	801ac0c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801abf8:	6839      	ldr	r1, [r7, #0]
 801abfa:	6878      	ldr	r0, [r7, #4]
 801abfc:	f000 f9ce 	bl	801af9c <USBD_CtlError>
 801ac00:	e004      	b.n	801ac0c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f000 fbb7 	bl	801b376 <USBD_CtlSendStatus>
 801ac08:	e000      	b.n	801ac0c <USBD_GetDescriptor+0x320>
    return;
 801ac0a:	bf00      	nop
  }
}
 801ac0c:	3710      	adds	r7, #16
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}
 801ac12:	bf00      	nop

0801ac14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b084      	sub	sp, #16
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
 801ac1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ac1e:	683b      	ldr	r3, [r7, #0]
 801ac20:	889b      	ldrh	r3, [r3, #4]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d131      	bne.n	801ac8a <USBD_SetAddress+0x76>
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	88db      	ldrh	r3, [r3, #6]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d12d      	bne.n	801ac8a <USBD_SetAddress+0x76>
 801ac2e:	683b      	ldr	r3, [r7, #0]
 801ac30:	885b      	ldrh	r3, [r3, #2]
 801ac32:	2b7f      	cmp	r3, #127	; 0x7f
 801ac34:	d829      	bhi.n	801ac8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ac36:	683b      	ldr	r3, [r7, #0]
 801ac38:	885b      	ldrh	r3, [r3, #2]
 801ac3a:	b2db      	uxtb	r3, r3
 801ac3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ac40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ac48:	b2db      	uxtb	r3, r3
 801ac4a:	2b03      	cmp	r3, #3
 801ac4c:	d104      	bne.n	801ac58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801ac4e:	6839      	ldr	r1, [r7, #0]
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	f000 f9a3 	bl	801af9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ac56:	e01d      	b.n	801ac94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	7bfa      	ldrb	r2, [r7, #15]
 801ac5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ac60:	7bfb      	ldrb	r3, [r7, #15]
 801ac62:	4619      	mov	r1, r3
 801ac64:	6878      	ldr	r0, [r7, #4]
 801ac66:	f7fe ffcd 	bl	8019c04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	f000 fb83 	bl	801b376 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ac70:	7bfb      	ldrb	r3, [r7, #15]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d004      	beq.n	801ac80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	2202      	movs	r2, #2
 801ac7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ac7e:	e009      	b.n	801ac94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2201      	movs	r2, #1
 801ac84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ac88:	e004      	b.n	801ac94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ac8a:	6839      	ldr	r1, [r7, #0]
 801ac8c:	6878      	ldr	r0, [r7, #4]
 801ac8e:	f000 f985 	bl	801af9c <USBD_CtlError>
  }
}
 801ac92:	bf00      	nop
 801ac94:	bf00      	nop
 801ac96:	3710      	adds	r7, #16
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	bd80      	pop	{r7, pc}

0801ac9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b084      	sub	sp, #16
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
 801aca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801aca6:	2300      	movs	r3, #0
 801aca8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801acaa:	683b      	ldr	r3, [r7, #0]
 801acac:	885b      	ldrh	r3, [r3, #2]
 801acae:	b2da      	uxtb	r2, r3
 801acb0:	4b4c      	ldr	r3, [pc, #304]	; (801ade4 <USBD_SetConfig+0x148>)
 801acb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801acb4:	4b4b      	ldr	r3, [pc, #300]	; (801ade4 <USBD_SetConfig+0x148>)
 801acb6:	781b      	ldrb	r3, [r3, #0]
 801acb8:	2b01      	cmp	r3, #1
 801acba:	d905      	bls.n	801acc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801acbc:	6839      	ldr	r1, [r7, #0]
 801acbe:	6878      	ldr	r0, [r7, #4]
 801acc0:	f000 f96c 	bl	801af9c <USBD_CtlError>
    return USBD_FAIL;
 801acc4:	2303      	movs	r3, #3
 801acc6:	e088      	b.n	801adda <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801acce:	b2db      	uxtb	r3, r3
 801acd0:	2b02      	cmp	r3, #2
 801acd2:	d002      	beq.n	801acda <USBD_SetConfig+0x3e>
 801acd4:	2b03      	cmp	r3, #3
 801acd6:	d025      	beq.n	801ad24 <USBD_SetConfig+0x88>
 801acd8:	e071      	b.n	801adbe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801acda:	4b42      	ldr	r3, [pc, #264]	; (801ade4 <USBD_SetConfig+0x148>)
 801acdc:	781b      	ldrb	r3, [r3, #0]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d01c      	beq.n	801ad1c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801ace2:	4b40      	ldr	r3, [pc, #256]	; (801ade4 <USBD_SetConfig+0x148>)
 801ace4:	781b      	ldrb	r3, [r3, #0]
 801ace6:	461a      	mov	r2, r3
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801acec:	4b3d      	ldr	r3, [pc, #244]	; (801ade4 <USBD_SetConfig+0x148>)
 801acee:	781b      	ldrb	r3, [r3, #0]
 801acf0:	4619      	mov	r1, r3
 801acf2:	6878      	ldr	r0, [r7, #4]
 801acf4:	f7ff f91e 	bl	8019f34 <USBD_SetClassConfig>
 801acf8:	4603      	mov	r3, r0
 801acfa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801acfc:	7bfb      	ldrb	r3, [r7, #15]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d004      	beq.n	801ad0c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801ad02:	6839      	ldr	r1, [r7, #0]
 801ad04:	6878      	ldr	r0, [r7, #4]
 801ad06:	f000 f949 	bl	801af9c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ad0a:	e065      	b.n	801add8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801ad0c:	6878      	ldr	r0, [r7, #4]
 801ad0e:	f000 fb32 	bl	801b376 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	2203      	movs	r2, #3
 801ad16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ad1a:	e05d      	b.n	801add8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801ad1c:	6878      	ldr	r0, [r7, #4]
 801ad1e:	f000 fb2a 	bl	801b376 <USBD_CtlSendStatus>
      break;
 801ad22:	e059      	b.n	801add8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801ad24:	4b2f      	ldr	r3, [pc, #188]	; (801ade4 <USBD_SetConfig+0x148>)
 801ad26:	781b      	ldrb	r3, [r3, #0]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d112      	bne.n	801ad52 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	2202      	movs	r2, #2
 801ad30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801ad34:	4b2b      	ldr	r3, [pc, #172]	; (801ade4 <USBD_SetConfig+0x148>)
 801ad36:	781b      	ldrb	r3, [r3, #0]
 801ad38:	461a      	mov	r2, r3
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801ad3e:	4b29      	ldr	r3, [pc, #164]	; (801ade4 <USBD_SetConfig+0x148>)
 801ad40:	781b      	ldrb	r3, [r3, #0]
 801ad42:	4619      	mov	r1, r3
 801ad44:	6878      	ldr	r0, [r7, #4]
 801ad46:	f7ff f911 	bl	8019f6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801ad4a:	6878      	ldr	r0, [r7, #4]
 801ad4c:	f000 fb13 	bl	801b376 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ad50:	e042      	b.n	801add8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801ad52:	4b24      	ldr	r3, [pc, #144]	; (801ade4 <USBD_SetConfig+0x148>)
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	461a      	mov	r2, r3
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	685b      	ldr	r3, [r3, #4]
 801ad5c:	429a      	cmp	r2, r3
 801ad5e:	d02a      	beq.n	801adb6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	685b      	ldr	r3, [r3, #4]
 801ad64:	b2db      	uxtb	r3, r3
 801ad66:	4619      	mov	r1, r3
 801ad68:	6878      	ldr	r0, [r7, #4]
 801ad6a:	f7ff f8ff 	bl	8019f6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801ad6e:	4b1d      	ldr	r3, [pc, #116]	; (801ade4 <USBD_SetConfig+0x148>)
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	461a      	mov	r2, r3
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ad78:	4b1a      	ldr	r3, [pc, #104]	; (801ade4 <USBD_SetConfig+0x148>)
 801ad7a:	781b      	ldrb	r3, [r3, #0]
 801ad7c:	4619      	mov	r1, r3
 801ad7e:	6878      	ldr	r0, [r7, #4]
 801ad80:	f7ff f8d8 	bl	8019f34 <USBD_SetClassConfig>
 801ad84:	4603      	mov	r3, r0
 801ad86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801ad88:	7bfb      	ldrb	r3, [r7, #15]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d00f      	beq.n	801adae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801ad8e:	6839      	ldr	r1, [r7, #0]
 801ad90:	6878      	ldr	r0, [r7, #4]
 801ad92:	f000 f903 	bl	801af9c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	685b      	ldr	r3, [r3, #4]
 801ad9a:	b2db      	uxtb	r3, r3
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	6878      	ldr	r0, [r7, #4]
 801ada0:	f7ff f8e4 	bl	8019f6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2202      	movs	r2, #2
 801ada8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801adac:	e014      	b.n	801add8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801adae:	6878      	ldr	r0, [r7, #4]
 801adb0:	f000 fae1 	bl	801b376 <USBD_CtlSendStatus>
      break;
 801adb4:	e010      	b.n	801add8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801adb6:	6878      	ldr	r0, [r7, #4]
 801adb8:	f000 fadd 	bl	801b376 <USBD_CtlSendStatus>
      break;
 801adbc:	e00c      	b.n	801add8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801adbe:	6839      	ldr	r1, [r7, #0]
 801adc0:	6878      	ldr	r0, [r7, #4]
 801adc2:	f000 f8eb 	bl	801af9c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801adc6:	4b07      	ldr	r3, [pc, #28]	; (801ade4 <USBD_SetConfig+0x148>)
 801adc8:	781b      	ldrb	r3, [r3, #0]
 801adca:	4619      	mov	r1, r3
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f7ff f8cd 	bl	8019f6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801add2:	2303      	movs	r3, #3
 801add4:	73fb      	strb	r3, [r7, #15]
      break;
 801add6:	bf00      	nop
  }

  return ret;
 801add8:	7bfb      	ldrb	r3, [r7, #15]
}
 801adda:	4618      	mov	r0, r3
 801addc:	3710      	adds	r7, #16
 801adde:	46bd      	mov	sp, r7
 801ade0:	bd80      	pop	{r7, pc}
 801ade2:	bf00      	nop
 801ade4:	20001f38 	.word	0x20001f38

0801ade8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	b082      	sub	sp, #8
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
 801adf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	88db      	ldrh	r3, [r3, #6]
 801adf6:	2b01      	cmp	r3, #1
 801adf8:	d004      	beq.n	801ae04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801adfa:	6839      	ldr	r1, [r7, #0]
 801adfc:	6878      	ldr	r0, [r7, #4]
 801adfe:	f000 f8cd 	bl	801af9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801ae02:	e023      	b.n	801ae4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae0a:	b2db      	uxtb	r3, r3
 801ae0c:	2b02      	cmp	r3, #2
 801ae0e:	dc02      	bgt.n	801ae16 <USBD_GetConfig+0x2e>
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	dc03      	bgt.n	801ae1c <USBD_GetConfig+0x34>
 801ae14:	e015      	b.n	801ae42 <USBD_GetConfig+0x5a>
 801ae16:	2b03      	cmp	r3, #3
 801ae18:	d00b      	beq.n	801ae32 <USBD_GetConfig+0x4a>
 801ae1a:	e012      	b.n	801ae42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	2200      	movs	r2, #0
 801ae20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	3308      	adds	r3, #8
 801ae26:	2201      	movs	r2, #1
 801ae28:	4619      	mov	r1, r3
 801ae2a:	6878      	ldr	r0, [r7, #4]
 801ae2c:	f000 fa49 	bl	801b2c2 <USBD_CtlSendData>
        break;
 801ae30:	e00c      	b.n	801ae4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	3304      	adds	r3, #4
 801ae36:	2201      	movs	r2, #1
 801ae38:	4619      	mov	r1, r3
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f000 fa41 	bl	801b2c2 <USBD_CtlSendData>
        break;
 801ae40:	e004      	b.n	801ae4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801ae42:	6839      	ldr	r1, [r7, #0]
 801ae44:	6878      	ldr	r0, [r7, #4]
 801ae46:	f000 f8a9 	bl	801af9c <USBD_CtlError>
        break;
 801ae4a:	bf00      	nop
}
 801ae4c:	bf00      	nop
 801ae4e:	3708      	adds	r7, #8
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd80      	pop	{r7, pc}

0801ae54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae54:	b580      	push	{r7, lr}
 801ae56:	b082      	sub	sp, #8
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
 801ae5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae64:	b2db      	uxtb	r3, r3
 801ae66:	3b01      	subs	r3, #1
 801ae68:	2b02      	cmp	r3, #2
 801ae6a:	d81e      	bhi.n	801aeaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ae6c:	683b      	ldr	r3, [r7, #0]
 801ae6e:	88db      	ldrh	r3, [r3, #6]
 801ae70:	2b02      	cmp	r3, #2
 801ae72:	d004      	beq.n	801ae7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801ae74:	6839      	ldr	r1, [r7, #0]
 801ae76:	6878      	ldr	r0, [r7, #4]
 801ae78:	f000 f890 	bl	801af9c <USBD_CtlError>
        break;
 801ae7c:	e01a      	b.n	801aeb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	2201      	movs	r2, #1
 801ae82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d005      	beq.n	801ae9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	68db      	ldr	r3, [r3, #12]
 801ae92:	f043 0202 	orr.w	r2, r3, #2
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	330c      	adds	r3, #12
 801ae9e:	2202      	movs	r2, #2
 801aea0:	4619      	mov	r1, r3
 801aea2:	6878      	ldr	r0, [r7, #4]
 801aea4:	f000 fa0d 	bl	801b2c2 <USBD_CtlSendData>
      break;
 801aea8:	e004      	b.n	801aeb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801aeaa:	6839      	ldr	r1, [r7, #0]
 801aeac:	6878      	ldr	r0, [r7, #4]
 801aeae:	f000 f875 	bl	801af9c <USBD_CtlError>
      break;
 801aeb2:	bf00      	nop
  }
}
 801aeb4:	bf00      	nop
 801aeb6:	3708      	adds	r7, #8
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd80      	pop	{r7, pc}

0801aebc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b082      	sub	sp, #8
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801aec6:	683b      	ldr	r3, [r7, #0]
 801aec8:	885b      	ldrh	r3, [r3, #2]
 801aeca:	2b01      	cmp	r3, #1
 801aecc:	d106      	bne.n	801aedc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	2201      	movs	r2, #1
 801aed2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801aed6:	6878      	ldr	r0, [r7, #4]
 801aed8:	f000 fa4d 	bl	801b376 <USBD_CtlSendStatus>
  }
}
 801aedc:	bf00      	nop
 801aede:	3708      	adds	r7, #8
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b082      	sub	sp, #8
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
 801aeec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aef4:	b2db      	uxtb	r3, r3
 801aef6:	3b01      	subs	r3, #1
 801aef8:	2b02      	cmp	r3, #2
 801aefa:	d80b      	bhi.n	801af14 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801aefc:	683b      	ldr	r3, [r7, #0]
 801aefe:	885b      	ldrh	r3, [r3, #2]
 801af00:	2b01      	cmp	r3, #1
 801af02:	d10c      	bne.n	801af1e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	2200      	movs	r2, #0
 801af08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801af0c:	6878      	ldr	r0, [r7, #4]
 801af0e:	f000 fa32 	bl	801b376 <USBD_CtlSendStatus>
      }
      break;
 801af12:	e004      	b.n	801af1e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801af14:	6839      	ldr	r1, [r7, #0]
 801af16:	6878      	ldr	r0, [r7, #4]
 801af18:	f000 f840 	bl	801af9c <USBD_CtlError>
      break;
 801af1c:	e000      	b.n	801af20 <USBD_ClrFeature+0x3c>
      break;
 801af1e:	bf00      	nop
  }
}
 801af20:	bf00      	nop
 801af22:	3708      	adds	r7, #8
 801af24:	46bd      	mov	sp, r7
 801af26:	bd80      	pop	{r7, pc}

0801af28 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b084      	sub	sp, #16
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
 801af30:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801af32:	683b      	ldr	r3, [r7, #0]
 801af34:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	781a      	ldrb	r2, [r3, #0]
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	3301      	adds	r3, #1
 801af42:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	781a      	ldrb	r2, [r3, #0]
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	3301      	adds	r3, #1
 801af50:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801af52:	68f8      	ldr	r0, [r7, #12]
 801af54:	f7ff fa91 	bl	801a47a <SWAPBYTE>
 801af58:	4603      	mov	r3, r0
 801af5a:	461a      	mov	r2, r3
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	3301      	adds	r3, #1
 801af64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	3301      	adds	r3, #1
 801af6a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801af6c:	68f8      	ldr	r0, [r7, #12]
 801af6e:	f7ff fa84 	bl	801a47a <SWAPBYTE>
 801af72:	4603      	mov	r3, r0
 801af74:	461a      	mov	r2, r3
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	3301      	adds	r3, #1
 801af7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	3301      	adds	r3, #1
 801af84:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801af86:	68f8      	ldr	r0, [r7, #12]
 801af88:	f7ff fa77 	bl	801a47a <SWAPBYTE>
 801af8c:	4603      	mov	r3, r0
 801af8e:	461a      	mov	r2, r3
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	80da      	strh	r2, [r3, #6]
}
 801af94:	bf00      	nop
 801af96:	3710      	adds	r7, #16
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd80      	pop	{r7, pc}

0801af9c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b082      	sub	sp, #8
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
 801afa4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801afa6:	2180      	movs	r1, #128	; 0x80
 801afa8:	6878      	ldr	r0, [r7, #4]
 801afaa:	f7fe fd93 	bl	8019ad4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801afae:	2100      	movs	r1, #0
 801afb0:	6878      	ldr	r0, [r7, #4]
 801afb2:	f7fe fd8f 	bl	8019ad4 <USBD_LL_StallEP>
}
 801afb6:	bf00      	nop
 801afb8:	3708      	adds	r7, #8
 801afba:	46bd      	mov	sp, r7
 801afbc:	bd80      	pop	{r7, pc}

0801afbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801afbe:	b580      	push	{r7, lr}
 801afc0:	b086      	sub	sp, #24
 801afc2:	af00      	add	r7, sp, #0
 801afc4:	60f8      	str	r0, [r7, #12]
 801afc6:	60b9      	str	r1, [r7, #8]
 801afc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801afca:	2300      	movs	r3, #0
 801afcc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d036      	beq.n	801b042 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801afd8:	6938      	ldr	r0, [r7, #16]
 801afda:	f000 f836 	bl	801b04a <USBD_GetLen>
 801afde:	4603      	mov	r3, r0
 801afe0:	3301      	adds	r3, #1
 801afe2:	b29b      	uxth	r3, r3
 801afe4:	005b      	lsls	r3, r3, #1
 801afe6:	b29a      	uxth	r2, r3
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801afec:	7dfb      	ldrb	r3, [r7, #23]
 801afee:	68ba      	ldr	r2, [r7, #8]
 801aff0:	4413      	add	r3, r2
 801aff2:	687a      	ldr	r2, [r7, #4]
 801aff4:	7812      	ldrb	r2, [r2, #0]
 801aff6:	701a      	strb	r2, [r3, #0]
  idx++;
 801aff8:	7dfb      	ldrb	r3, [r7, #23]
 801affa:	3301      	adds	r3, #1
 801affc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801affe:	7dfb      	ldrb	r3, [r7, #23]
 801b000:	68ba      	ldr	r2, [r7, #8]
 801b002:	4413      	add	r3, r2
 801b004:	2203      	movs	r2, #3
 801b006:	701a      	strb	r2, [r3, #0]
  idx++;
 801b008:	7dfb      	ldrb	r3, [r7, #23]
 801b00a:	3301      	adds	r3, #1
 801b00c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801b00e:	e013      	b.n	801b038 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801b010:	7dfb      	ldrb	r3, [r7, #23]
 801b012:	68ba      	ldr	r2, [r7, #8]
 801b014:	4413      	add	r3, r2
 801b016:	693a      	ldr	r2, [r7, #16]
 801b018:	7812      	ldrb	r2, [r2, #0]
 801b01a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801b01c:	693b      	ldr	r3, [r7, #16]
 801b01e:	3301      	adds	r3, #1
 801b020:	613b      	str	r3, [r7, #16]
    idx++;
 801b022:	7dfb      	ldrb	r3, [r7, #23]
 801b024:	3301      	adds	r3, #1
 801b026:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801b028:	7dfb      	ldrb	r3, [r7, #23]
 801b02a:	68ba      	ldr	r2, [r7, #8]
 801b02c:	4413      	add	r3, r2
 801b02e:	2200      	movs	r2, #0
 801b030:	701a      	strb	r2, [r3, #0]
    idx++;
 801b032:	7dfb      	ldrb	r3, [r7, #23]
 801b034:	3301      	adds	r3, #1
 801b036:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801b038:	693b      	ldr	r3, [r7, #16]
 801b03a:	781b      	ldrb	r3, [r3, #0]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d1e7      	bne.n	801b010 <USBD_GetString+0x52>
 801b040:	e000      	b.n	801b044 <USBD_GetString+0x86>
    return;
 801b042:	bf00      	nop
  }
}
 801b044:	3718      	adds	r7, #24
 801b046:	46bd      	mov	sp, r7
 801b048:	bd80      	pop	{r7, pc}

0801b04a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b04a:	b480      	push	{r7}
 801b04c:	b085      	sub	sp, #20
 801b04e:	af00      	add	r7, sp, #0
 801b050:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b052:	2300      	movs	r3, #0
 801b054:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801b05a:	e005      	b.n	801b068 <USBD_GetLen+0x1e>
  {
    len++;
 801b05c:	7bfb      	ldrb	r3, [r7, #15]
 801b05e:	3301      	adds	r3, #1
 801b060:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801b062:	68bb      	ldr	r3, [r7, #8]
 801b064:	3301      	adds	r3, #1
 801b066:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801b068:	68bb      	ldr	r3, [r7, #8]
 801b06a:	781b      	ldrb	r3, [r3, #0]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d1f5      	bne.n	801b05c <USBD_GetLen+0x12>
  }

  return len;
 801b070:	7bfb      	ldrb	r3, [r7, #15]
}
 801b072:	4618      	mov	r0, r3
 801b074:	3714      	adds	r7, #20
 801b076:	46bd      	mov	sp, r7
 801b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b07c:	4770      	bx	lr
	...

0801b080 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b080:	b480      	push	{r7}
 801b082:	b083      	sub	sp, #12
 801b084:	af00      	add	r7, sp, #0
 801b086:	4603      	mov	r3, r0
 801b088:	6039      	str	r1, [r7, #0]
 801b08a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b08c:	683b      	ldr	r3, [r7, #0]
 801b08e:	2212      	movs	r2, #18
 801b090:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b092:	4b03      	ldr	r3, [pc, #12]	; (801b0a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b094:	4618      	mov	r0, r3
 801b096:	370c      	adds	r7, #12
 801b098:	46bd      	mov	sp, r7
 801b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09e:	4770      	bx	lr
 801b0a0:	20000590 	.word	0x20000590

0801b0a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0a4:	b480      	push	{r7}
 801b0a6:	b083      	sub	sp, #12
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	6039      	str	r1, [r7, #0]
 801b0ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b0b0:	683b      	ldr	r3, [r7, #0]
 801b0b2:	2204      	movs	r2, #4
 801b0b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b0b6:	4b03      	ldr	r3, [pc, #12]	; (801b0c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	370c      	adds	r7, #12
 801b0bc:	46bd      	mov	sp, r7
 801b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c2:	4770      	bx	lr
 801b0c4:	200005b0 	.word	0x200005b0

0801b0c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b082      	sub	sp, #8
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	6039      	str	r1, [r7, #0]
 801b0d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b0d4:	79fb      	ldrb	r3, [r7, #7]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d105      	bne.n	801b0e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b0da:	683a      	ldr	r2, [r7, #0]
 801b0dc:	4907      	ldr	r1, [pc, #28]	; (801b0fc <USBD_FS_ProductStrDescriptor+0x34>)
 801b0de:	4808      	ldr	r0, [pc, #32]	; (801b100 <USBD_FS_ProductStrDescriptor+0x38>)
 801b0e0:	f7ff ff6d 	bl	801afbe <USBD_GetString>
 801b0e4:	e004      	b.n	801b0f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b0e6:	683a      	ldr	r2, [r7, #0]
 801b0e8:	4904      	ldr	r1, [pc, #16]	; (801b0fc <USBD_FS_ProductStrDescriptor+0x34>)
 801b0ea:	4805      	ldr	r0, [pc, #20]	; (801b100 <USBD_FS_ProductStrDescriptor+0x38>)
 801b0ec:	f7ff ff67 	bl	801afbe <USBD_GetString>
  }
  return USBD_StrDesc;
 801b0f0:	4b02      	ldr	r3, [pc, #8]	; (801b0fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	3708      	adds	r7, #8
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	bd80      	pop	{r7, pc}
 801b0fa:	bf00      	nop
 801b0fc:	20009e40 	.word	0x20009e40
 801b100:	080224e0 	.word	0x080224e0

0801b104 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b082      	sub	sp, #8
 801b108:	af00      	add	r7, sp, #0
 801b10a:	4603      	mov	r3, r0
 801b10c:	6039      	str	r1, [r7, #0]
 801b10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b110:	683a      	ldr	r2, [r7, #0]
 801b112:	4904      	ldr	r1, [pc, #16]	; (801b124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b114:	4804      	ldr	r0, [pc, #16]	; (801b128 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b116:	f7ff ff52 	bl	801afbe <USBD_GetString>
  return USBD_StrDesc;
 801b11a:	4b02      	ldr	r3, [pc, #8]	; (801b124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b11c:	4618      	mov	r0, r3
 801b11e:	3708      	adds	r7, #8
 801b120:	46bd      	mov	sp, r7
 801b122:	bd80      	pop	{r7, pc}
 801b124:	20009e40 	.word	0x20009e40
 801b128:	080224e8 	.word	0x080224e8

0801b12c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b082      	sub	sp, #8
 801b130:	af00      	add	r7, sp, #0
 801b132:	4603      	mov	r3, r0
 801b134:	6039      	str	r1, [r7, #0]
 801b136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b138:	683b      	ldr	r3, [r7, #0]
 801b13a:	221a      	movs	r2, #26
 801b13c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b13e:	f000 f855 	bl	801b1ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b142:	4b02      	ldr	r3, [pc, #8]	; (801b14c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b144:	4618      	mov	r0, r3
 801b146:	3708      	adds	r7, #8
 801b148:	46bd      	mov	sp, r7
 801b14a:	bd80      	pop	{r7, pc}
 801b14c:	200005b4 	.word	0x200005b4

0801b150 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b150:	b580      	push	{r7, lr}
 801b152:	b082      	sub	sp, #8
 801b154:	af00      	add	r7, sp, #0
 801b156:	4603      	mov	r3, r0
 801b158:	6039      	str	r1, [r7, #0]
 801b15a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b15c:	79fb      	ldrb	r3, [r7, #7]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d105      	bne.n	801b16e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b162:	683a      	ldr	r2, [r7, #0]
 801b164:	4907      	ldr	r1, [pc, #28]	; (801b184 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b166:	4808      	ldr	r0, [pc, #32]	; (801b188 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b168:	f7ff ff29 	bl	801afbe <USBD_GetString>
 801b16c:	e004      	b.n	801b178 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b16e:	683a      	ldr	r2, [r7, #0]
 801b170:	4904      	ldr	r1, [pc, #16]	; (801b184 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b172:	4805      	ldr	r0, [pc, #20]	; (801b188 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b174:	f7ff ff23 	bl	801afbe <USBD_GetString>
  }
  return USBD_StrDesc;
 801b178:	4b02      	ldr	r3, [pc, #8]	; (801b184 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b17a:	4618      	mov	r0, r3
 801b17c:	3708      	adds	r7, #8
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd80      	pop	{r7, pc}
 801b182:	bf00      	nop
 801b184:	20009e40 	.word	0x20009e40
 801b188:	080224fc 	.word	0x080224fc

0801b18c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b082      	sub	sp, #8
 801b190:	af00      	add	r7, sp, #0
 801b192:	4603      	mov	r3, r0
 801b194:	6039      	str	r1, [r7, #0]
 801b196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b198:	79fb      	ldrb	r3, [r7, #7]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d105      	bne.n	801b1aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b19e:	683a      	ldr	r2, [r7, #0]
 801b1a0:	4907      	ldr	r1, [pc, #28]	; (801b1c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b1a2:	4808      	ldr	r0, [pc, #32]	; (801b1c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b1a4:	f7ff ff0b 	bl	801afbe <USBD_GetString>
 801b1a8:	e004      	b.n	801b1b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b1aa:	683a      	ldr	r2, [r7, #0]
 801b1ac:	4904      	ldr	r1, [pc, #16]	; (801b1c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b1ae:	4805      	ldr	r0, [pc, #20]	; (801b1c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b1b0:	f7ff ff05 	bl	801afbe <USBD_GetString>
  }
  return USBD_StrDesc;
 801b1b4:	4b02      	ldr	r3, [pc, #8]	; (801b1c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3708      	adds	r7, #8
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	20009e40 	.word	0x20009e40
 801b1c4:	0802250c 	.word	0x0802250c

0801b1c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1c8:	b480      	push	{r7}
 801b1ca:	b083      	sub	sp, #12
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	4603      	mov	r3, r0
 801b1d0:	6039      	str	r1, [r7, #0]
 801b1d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801b1d4:	683b      	ldr	r3, [r7, #0]
 801b1d6:	220c      	movs	r2, #12
 801b1d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801b1da:	4b03      	ldr	r3, [pc, #12]	; (801b1e8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801b1dc:	4618      	mov	r0, r3
 801b1de:	370c      	adds	r7, #12
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e6:	4770      	bx	lr
 801b1e8:	200005a4 	.word	0x200005a4

0801b1ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b084      	sub	sp, #16
 801b1f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b1f2:	4b0f      	ldr	r3, [pc, #60]	; (801b230 <Get_SerialNum+0x44>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b1f8:	4b0e      	ldr	r3, [pc, #56]	; (801b234 <Get_SerialNum+0x48>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b1fe:	4b0e      	ldr	r3, [pc, #56]	; (801b238 <Get_SerialNum+0x4c>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b204:	68fa      	ldr	r2, [r7, #12]
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	4413      	add	r3, r2
 801b20a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d009      	beq.n	801b226 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b212:	2208      	movs	r2, #8
 801b214:	4909      	ldr	r1, [pc, #36]	; (801b23c <Get_SerialNum+0x50>)
 801b216:	68f8      	ldr	r0, [r7, #12]
 801b218:	f000 f814 	bl	801b244 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b21c:	2204      	movs	r2, #4
 801b21e:	4908      	ldr	r1, [pc, #32]	; (801b240 <Get_SerialNum+0x54>)
 801b220:	68b8      	ldr	r0, [r7, #8]
 801b222:	f000 f80f 	bl	801b244 <IntToUnicode>
  }
}
 801b226:	bf00      	nop
 801b228:	3710      	adds	r7, #16
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd80      	pop	{r7, pc}
 801b22e:	bf00      	nop
 801b230:	1fff7590 	.word	0x1fff7590
 801b234:	1fff7594 	.word	0x1fff7594
 801b238:	1fff7598 	.word	0x1fff7598
 801b23c:	200005b6 	.word	0x200005b6
 801b240:	200005c6 	.word	0x200005c6

0801b244 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b244:	b480      	push	{r7}
 801b246:	b087      	sub	sp, #28
 801b248:	af00      	add	r7, sp, #0
 801b24a:	60f8      	str	r0, [r7, #12]
 801b24c:	60b9      	str	r1, [r7, #8]
 801b24e:	4613      	mov	r3, r2
 801b250:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b252:	2300      	movs	r3, #0
 801b254:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b256:	2300      	movs	r3, #0
 801b258:	75fb      	strb	r3, [r7, #23]
 801b25a:	e027      	b.n	801b2ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	0f1b      	lsrs	r3, r3, #28
 801b260:	2b09      	cmp	r3, #9
 801b262:	d80b      	bhi.n	801b27c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	0f1b      	lsrs	r3, r3, #28
 801b268:	b2da      	uxtb	r2, r3
 801b26a:	7dfb      	ldrb	r3, [r7, #23]
 801b26c:	005b      	lsls	r3, r3, #1
 801b26e:	4619      	mov	r1, r3
 801b270:	68bb      	ldr	r3, [r7, #8]
 801b272:	440b      	add	r3, r1
 801b274:	3230      	adds	r2, #48	; 0x30
 801b276:	b2d2      	uxtb	r2, r2
 801b278:	701a      	strb	r2, [r3, #0]
 801b27a:	e00a      	b.n	801b292 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	0f1b      	lsrs	r3, r3, #28
 801b280:	b2da      	uxtb	r2, r3
 801b282:	7dfb      	ldrb	r3, [r7, #23]
 801b284:	005b      	lsls	r3, r3, #1
 801b286:	4619      	mov	r1, r3
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	440b      	add	r3, r1
 801b28c:	3237      	adds	r2, #55	; 0x37
 801b28e:	b2d2      	uxtb	r2, r2
 801b290:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	011b      	lsls	r3, r3, #4
 801b296:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b298:	7dfb      	ldrb	r3, [r7, #23]
 801b29a:	005b      	lsls	r3, r3, #1
 801b29c:	3301      	adds	r3, #1
 801b29e:	68ba      	ldr	r2, [r7, #8]
 801b2a0:	4413      	add	r3, r2
 801b2a2:	2200      	movs	r2, #0
 801b2a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b2a6:	7dfb      	ldrb	r3, [r7, #23]
 801b2a8:	3301      	adds	r3, #1
 801b2aa:	75fb      	strb	r3, [r7, #23]
 801b2ac:	7dfa      	ldrb	r2, [r7, #23]
 801b2ae:	79fb      	ldrb	r3, [r7, #7]
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	d3d3      	bcc.n	801b25c <IntToUnicode+0x18>
  }
}
 801b2b4:	bf00      	nop
 801b2b6:	bf00      	nop
 801b2b8:	371c      	adds	r7, #28
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c0:	4770      	bx	lr

0801b2c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b2c2:	b580      	push	{r7, lr}
 801b2c4:	b084      	sub	sp, #16
 801b2c6:	af00      	add	r7, sp, #0
 801b2c8:	60f8      	str	r0, [r7, #12]
 801b2ca:	60b9      	str	r1, [r7, #8]
 801b2cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	2202      	movs	r2, #2
 801b2d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	687a      	ldr	r2, [r7, #4]
 801b2da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	687a      	ldr	r2, [r7, #4]
 801b2e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	68ba      	ldr	r2, [r7, #8]
 801b2e6:	2100      	movs	r1, #0
 801b2e8:	68f8      	ldr	r0, [r7, #12]
 801b2ea:	f7fe fcc1 	bl	8019c70 <USBD_LL_Transmit>

  return USBD_OK;
 801b2ee:	2300      	movs	r3, #0
}
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	3710      	adds	r7, #16
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}

0801b2f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b084      	sub	sp, #16
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	60f8      	str	r0, [r7, #12]
 801b300:	60b9      	str	r1, [r7, #8]
 801b302:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	68ba      	ldr	r2, [r7, #8]
 801b308:	2100      	movs	r1, #0
 801b30a:	68f8      	ldr	r0, [r7, #12]
 801b30c:	f7fe fcb0 	bl	8019c70 <USBD_LL_Transmit>

  return USBD_OK;
 801b310:	2300      	movs	r3, #0
}
 801b312:	4618      	mov	r0, r3
 801b314:	3710      	adds	r7, #16
 801b316:	46bd      	mov	sp, r7
 801b318:	bd80      	pop	{r7, pc}

0801b31a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b31a:	b580      	push	{r7, lr}
 801b31c:	b084      	sub	sp, #16
 801b31e:	af00      	add	r7, sp, #0
 801b320:	60f8      	str	r0, [r7, #12]
 801b322:	60b9      	str	r1, [r7, #8]
 801b324:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	2203      	movs	r2, #3
 801b32a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	687a      	ldr	r2, [r7, #4]
 801b332:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	687a      	ldr	r2, [r7, #4]
 801b33a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	68ba      	ldr	r2, [r7, #8]
 801b342:	2100      	movs	r1, #0
 801b344:	68f8      	ldr	r0, [r7, #12]
 801b346:	f7fe fccb 	bl	8019ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b34a:	2300      	movs	r3, #0
}
 801b34c:	4618      	mov	r0, r3
 801b34e:	3710      	adds	r7, #16
 801b350:	46bd      	mov	sp, r7
 801b352:	bd80      	pop	{r7, pc}

0801b354 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b354:	b580      	push	{r7, lr}
 801b356:	b084      	sub	sp, #16
 801b358:	af00      	add	r7, sp, #0
 801b35a:	60f8      	str	r0, [r7, #12]
 801b35c:	60b9      	str	r1, [r7, #8]
 801b35e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	68ba      	ldr	r2, [r7, #8]
 801b364:	2100      	movs	r1, #0
 801b366:	68f8      	ldr	r0, [r7, #12]
 801b368:	f7fe fcba 	bl	8019ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b36c:	2300      	movs	r3, #0
}
 801b36e:	4618      	mov	r0, r3
 801b370:	3710      	adds	r7, #16
 801b372:	46bd      	mov	sp, r7
 801b374:	bd80      	pop	{r7, pc}

0801b376 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b376:	b580      	push	{r7, lr}
 801b378:	b082      	sub	sp, #8
 801b37a:	af00      	add	r7, sp, #0
 801b37c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	2204      	movs	r2, #4
 801b382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b386:	2300      	movs	r3, #0
 801b388:	2200      	movs	r2, #0
 801b38a:	2100      	movs	r1, #0
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	f7fe fc6f 	bl	8019c70 <USBD_LL_Transmit>

  return USBD_OK;
 801b392:	2300      	movs	r3, #0
}
 801b394:	4618      	mov	r0, r3
 801b396:	3708      	adds	r7, #8
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}

0801b39c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b082      	sub	sp, #8
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	2205      	movs	r2, #5
 801b3a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b3ac:	2300      	movs	r3, #0
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	2100      	movs	r1, #0
 801b3b2:	6878      	ldr	r0, [r7, #4]
 801b3b4:	f7fe fc94 	bl	8019ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b3b8:	2300      	movs	r3, #0
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3708      	adds	r7, #8
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	bd80      	pop	{r7, pc}

0801b3c2 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b3c2:	b580      	push	{r7, lr}
 801b3c4:	b084      	sub	sp, #16
 801b3c6:	af00      	add	r7, sp, #0
 801b3c8:	6078      	str	r0, [r7, #4]
 801b3ca:	460b      	mov	r3, r1
 801b3cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 801b3ce:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b3d2:	f7fe fd1f 	bl	8019e14 <USBD_static_malloc>
 801b3d6:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d105      	bne.n	801b3ea <USBD_MSC_Init+0x28>
  {
    pdev->pClassDataMSC = NULL;
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	2200      	movs	r2, #0
 801b3e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801b3e6:	2302      	movs	r3, #2
 801b3e8:	e034      	b.n	801b454 <USBD_MSC_Init+0x92>
  }

  pdev->pClassDataMSC = (void *)hmsc;
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	68fa      	ldr	r2, [r7, #12]
 801b3ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	7c1b      	ldrb	r3, [r3, #16]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d115      	bne.n	801b426 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b3fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b3fe:	2202      	movs	r2, #2
 801b400:	2101      	movs	r1, #1
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f7fe fabc 	bl	8019980 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	2201      	movs	r2, #1
 801b40c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b410:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b414:	2202      	movs	r2, #2
 801b416:	2181      	movs	r1, #129	; 0x81
 801b418:	6878      	ldr	r0, [r7, #4]
 801b41a:	f7fe fab1 	bl	8019980 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2201      	movs	r2, #1
 801b422:	871a      	strh	r2, [r3, #56]	; 0x38
 801b424:	e012      	b.n	801b44c <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b426:	2340      	movs	r3, #64	; 0x40
 801b428:	2202      	movs	r2, #2
 801b42a:	2101      	movs	r1, #1
 801b42c:	6878      	ldr	r0, [r7, #4]
 801b42e:	f7fe faa7 	bl	8019980 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	2201      	movs	r2, #1
 801b436:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b43a:	2340      	movs	r3, #64	; 0x40
 801b43c:	2202      	movs	r2, #2
 801b43e:	2181      	movs	r1, #129	; 0x81
 801b440:	6878      	ldr	r0, [r7, #4]
 801b442:	f7fe fa9d 	bl	8019980 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	2201      	movs	r2, #1
 801b44a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801b44c:	6878      	ldr	r0, [r7, #4]
 801b44e:	f000 f958 	bl	801b702 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801b452:	2300      	movs	r3, #0
}
 801b454:	4618      	mov	r0, r3
 801b456:	3710      	adds	r7, #16
 801b458:	46bd      	mov	sp, r7
 801b45a:	bd80      	pop	{r7, pc}

0801b45c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b082      	sub	sp, #8
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
 801b464:	460b      	mov	r3, r1
 801b466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 801b468:	2101      	movs	r1, #1
 801b46a:	6878      	ldr	r0, [r7, #4]
 801b46c:	f7fe fac6 	bl	80199fc <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	2200      	movs	r2, #0
 801b474:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 801b478:	2181      	movs	r1, #129	; 0x81
 801b47a:	6878      	ldr	r0, [r7, #4]
 801b47c:	f7fe fabe 	bl	80199fc <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	2200      	movs	r2, #0
 801b484:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassDataMSC != NULL)
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d00c      	beq.n	801b4aa <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801b490:	6878      	ldr	r0, [r7, #4]
 801b492:	f000 f994 	bl	801b7be <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataMSC);
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b49c:	4618      	mov	r0, r3
 801b49e:	f7fe fcc7 	bl	8019e30 <USBD_static_free>
    pdev->pClassDataMSC = NULL;
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b4aa:	2300      	movs	r3, #0
}
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	3708      	adds	r7, #8
 801b4b0:	46bd      	mov	sp, r7
 801b4b2:	bd80      	pop	{r7, pc}

0801b4b4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b086      	sub	sp, #24
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	6078      	str	r0, [r7, #4]
 801b4bc:	6039      	str	r1, [r7, #0]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b4c4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801b4ce:	693b      	ldr	r3, [r7, #16]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d101      	bne.n	801b4d8 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801b4d4:	2303      	movs	r3, #3
 801b4d6:	e0db      	b.n	801b690 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	781b      	ldrb	r3, [r3, #0]
 801b4dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d04e      	beq.n	801b582 <USBD_MSC_Setup+0xce>
 801b4e4:	2b20      	cmp	r3, #32
 801b4e6:	f040 80cb 	bne.w	801b680 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801b4ea:	683b      	ldr	r3, [r7, #0]
 801b4ec:	785b      	ldrb	r3, [r3, #1]
 801b4ee:	2bfe      	cmp	r3, #254	; 0xfe
 801b4f0:	d002      	beq.n	801b4f8 <USBD_MSC_Setup+0x44>
 801b4f2:	2bff      	cmp	r3, #255	; 0xff
 801b4f4:	d025      	beq.n	801b542 <USBD_MSC_Setup+0x8e>
 801b4f6:	e03c      	b.n	801b572 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b4f8:	683b      	ldr	r3, [r7, #0]
 801b4fa:	885b      	ldrh	r3, [r3, #2]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d119      	bne.n	801b534 <USBD_MSC_Setup+0x80>
 801b500:	683b      	ldr	r3, [r7, #0]
 801b502:	88db      	ldrh	r3, [r3, #6]
 801b504:	2b01      	cmp	r3, #1
 801b506:	d115      	bne.n	801b534 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b50e:	2b00      	cmp	r3, #0
 801b510:	da10      	bge.n	801b534 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetMaxLun();
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b518:	699b      	ldr	r3, [r3, #24]
 801b51a:	4798      	blx	r3
 801b51c:	4603      	mov	r3, r0
 801b51e:	461a      	mov	r2, r3
 801b520:	693b      	ldr	r3, [r7, #16]
 801b522:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801b524:	693b      	ldr	r3, [r7, #16]
 801b526:	2201      	movs	r2, #1
 801b528:	4619      	mov	r1, r3
 801b52a:	6878      	ldr	r0, [r7, #4]
 801b52c:	f7ff fec9 	bl	801b2c2 <USBD_CtlSendData>
 801b530:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b532:	e025      	b.n	801b580 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b534:	6839      	ldr	r1, [r7, #0]
 801b536:	6878      	ldr	r0, [r7, #4]
 801b538:	f7ff fd30 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 801b53c:	2303      	movs	r3, #3
 801b53e:	75fb      	strb	r3, [r7, #23]
          break;
 801b540:	e01e      	b.n	801b580 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	885b      	ldrh	r3, [r3, #2]
 801b546:	2b00      	cmp	r3, #0
 801b548:	d10c      	bne.n	801b564 <USBD_MSC_Setup+0xb0>
 801b54a:	683b      	ldr	r3, [r7, #0]
 801b54c:	88db      	ldrh	r3, [r3, #6]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d108      	bne.n	801b564 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801b552:	683b      	ldr	r3, [r7, #0]
 801b554:	781b      	ldrb	r3, [r3, #0]
 801b556:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b558:	2b00      	cmp	r3, #0
 801b55a:	db03      	blt.n	801b564 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801b55c:	6878      	ldr	r0, [r7, #4]
 801b55e:	f000 f908 	bl	801b772 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b562:	e00d      	b.n	801b580 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b564:	6839      	ldr	r1, [r7, #0]
 801b566:	6878      	ldr	r0, [r7, #4]
 801b568:	f7ff fd18 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 801b56c:	2303      	movs	r3, #3
 801b56e:	75fb      	strb	r3, [r7, #23]
          break;
 801b570:	e006      	b.n	801b580 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b572:	6839      	ldr	r1, [r7, #0]
 801b574:	6878      	ldr	r0, [r7, #4]
 801b576:	f7ff fd11 	bl	801af9c <USBD_CtlError>
          ret = USBD_FAIL;
 801b57a:	2303      	movs	r3, #3
 801b57c:	75fb      	strb	r3, [r7, #23]
          break;
 801b57e:	bf00      	nop
      }
      break;
 801b580:	e085      	b.n	801b68e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b582:	683b      	ldr	r3, [r7, #0]
 801b584:	785b      	ldrb	r3, [r3, #1]
 801b586:	2b0b      	cmp	r3, #11
 801b588:	d871      	bhi.n	801b66e <USBD_MSC_Setup+0x1ba>
 801b58a:	a201      	add	r2, pc, #4	; (adr r2, 801b590 <USBD_MSC_Setup+0xdc>)
 801b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b590:	0801b5c1 	.word	0x0801b5c1
 801b594:	0801b63d 	.word	0x0801b63d
 801b598:	0801b66f 	.word	0x0801b66f
 801b59c:	0801b66f 	.word	0x0801b66f
 801b5a0:	0801b66f 	.word	0x0801b66f
 801b5a4:	0801b66f 	.word	0x0801b66f
 801b5a8:	0801b66f 	.word	0x0801b66f
 801b5ac:	0801b66f 	.word	0x0801b66f
 801b5b0:	0801b66f 	.word	0x0801b66f
 801b5b4:	0801b66f 	.word	0x0801b66f
 801b5b8:	0801b5eb 	.word	0x0801b5eb
 801b5bc:	0801b615 	.word	0x0801b615
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b5c6:	b2db      	uxtb	r3, r3
 801b5c8:	2b03      	cmp	r3, #3
 801b5ca:	d107      	bne.n	801b5dc <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b5cc:	f107 030e 	add.w	r3, r7, #14
 801b5d0:	2202      	movs	r2, #2
 801b5d2:	4619      	mov	r1, r3
 801b5d4:	6878      	ldr	r0, [r7, #4]
 801b5d6:	f7ff fe74 	bl	801b2c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b5da:	e050      	b.n	801b67e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b5dc:	6839      	ldr	r1, [r7, #0]
 801b5de:	6878      	ldr	r0, [r7, #4]
 801b5e0:	f7ff fcdc 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 801b5e4:	2303      	movs	r3, #3
 801b5e6:	75fb      	strb	r3, [r7, #23]
          break;
 801b5e8:	e049      	b.n	801b67e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b5f0:	b2db      	uxtb	r3, r3
 801b5f2:	2b03      	cmp	r3, #3
 801b5f4:	d107      	bne.n	801b606 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801b5f6:	693b      	ldr	r3, [r7, #16]
 801b5f8:	3304      	adds	r3, #4
 801b5fa:	2201      	movs	r2, #1
 801b5fc:	4619      	mov	r1, r3
 801b5fe:	6878      	ldr	r0, [r7, #4]
 801b600:	f7ff fe5f 	bl	801b2c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b604:	e03b      	b.n	801b67e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b606:	6839      	ldr	r1, [r7, #0]
 801b608:	6878      	ldr	r0, [r7, #4]
 801b60a:	f7ff fcc7 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 801b60e:	2303      	movs	r3, #3
 801b610:	75fb      	strb	r3, [r7, #23]
          break;
 801b612:	e034      	b.n	801b67e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b61a:	b2db      	uxtb	r3, r3
 801b61c:	2b03      	cmp	r3, #3
 801b61e:	d106      	bne.n	801b62e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801b620:	683b      	ldr	r3, [r7, #0]
 801b622:	885b      	ldrh	r3, [r3, #2]
 801b624:	b2db      	uxtb	r3, r3
 801b626:	461a      	mov	r2, r3
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b62c:	e027      	b.n	801b67e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b62e:	6839      	ldr	r1, [r7, #0]
 801b630:	6878      	ldr	r0, [r7, #4]
 801b632:	f7ff fcb3 	bl	801af9c <USBD_CtlError>
            ret = USBD_FAIL;
 801b636:	2303      	movs	r3, #3
 801b638:	75fb      	strb	r3, [r7, #23]
          break;
 801b63a:	e020      	b.n	801b67e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b642:	b2db      	uxtb	r3, r3
 801b644:	2b03      	cmp	r3, #3
 801b646:	d119      	bne.n	801b67c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801b648:	683b      	ldr	r3, [r7, #0]
 801b64a:	885b      	ldrh	r3, [r3, #2]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d115      	bne.n	801b67c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801b650:	683b      	ldr	r3, [r7, #0]
 801b652:	889b      	ldrh	r3, [r3, #4]
 801b654:	b2db      	uxtb	r3, r3
 801b656:	4619      	mov	r1, r3
 801b658:	6878      	ldr	r0, [r7, #4]
 801b65a:	f7fe fa05 	bl	8019a68 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	889b      	ldrh	r3, [r3, #4]
 801b662:	b2db      	uxtb	r3, r3
 801b664:	4619      	mov	r1, r3
 801b666:	6878      	ldr	r0, [r7, #4]
 801b668:	f000 fa42 	bl	801baf0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801b66c:	e006      	b.n	801b67c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801b66e:	6839      	ldr	r1, [r7, #0]
 801b670:	6878      	ldr	r0, [r7, #4]
 801b672:	f7ff fc93 	bl	801af9c <USBD_CtlError>
          ret = USBD_FAIL;
 801b676:	2303      	movs	r3, #3
 801b678:	75fb      	strb	r3, [r7, #23]
          break;
 801b67a:	e000      	b.n	801b67e <USBD_MSC_Setup+0x1ca>
          break;
 801b67c:	bf00      	nop
      }
      break;
 801b67e:	e006      	b.n	801b68e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801b680:	6839      	ldr	r1, [r7, #0]
 801b682:	6878      	ldr	r0, [r7, #4]
 801b684:	f7ff fc8a 	bl	801af9c <USBD_CtlError>
      ret = USBD_FAIL;
 801b688:	2303      	movs	r3, #3
 801b68a:	75fb      	strb	r3, [r7, #23]
      break;
 801b68c:	bf00      	nop
  }

  return (uint8_t)ret;
 801b68e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b690:	4618      	mov	r0, r3
 801b692:	3718      	adds	r7, #24
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}

0801b698 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b082      	sub	sp, #8
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
 801b6a0:	460b      	mov	r3, r1
 801b6a2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801b6a4:	78fb      	ldrb	r3, [r7, #3]
 801b6a6:	4619      	mov	r1, r3
 801b6a8:	6878      	ldr	r0, [r7, #4]
 801b6aa:	f000 f89c 	bl	801b7e6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801b6ae:	2300      	movs	r3, #0
}
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	3708      	adds	r7, #8
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}

0801b6b8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b082      	sub	sp, #8
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	6078      	str	r0, [r7, #4]
 801b6c0:	460b      	mov	r3, r1
 801b6c2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801b6c4:	78fb      	ldrb	r3, [r7, #3]
 801b6c6:	4619      	mov	r1, r3
 801b6c8:	6878      	ldr	r0, [r7, #4]
 801b6ca:	f000 f8c2 	bl	801b852 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801b6ce:	2300      	movs	r3, #0
}
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	3708      	adds	r7, #8
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}

0801b6d8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801b6d8:	b480      	push	{r7}
 801b6da:	b083      	sub	sp, #12
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
 801b6e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801b6e2:	683b      	ldr	r3, [r7, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d101      	bne.n	801b6ec <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801b6e8:	2303      	movs	r3, #3
 801b6ea:	e004      	b.n	801b6f6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserDataMSC = fops;
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	683a      	ldr	r2, [r7, #0]
 801b6f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801b6f4:	2300      	movs	r3, #0
}
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	370c      	adds	r7, #12
 801b6fa:	46bd      	mov	sp, r7
 801b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b700:	4770      	bx	lr

0801b702 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801b702:	b580      	push	{r7, lr}
 801b704:	b084      	sub	sp, #16
 801b706:	af00      	add	r7, sp, #0
 801b708:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b710:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d028      	beq.n	801b76a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	2200      	movs	r2, #0
 801b71c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	2200      	movs	r2, #0
 801b722:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	2200      	movs	r2, #0
 801b728:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	2200      	movs	r2, #0
 801b730:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	2200      	movs	r2, #0
 801b738:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Init(0U);
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	2000      	movs	r0, #0
 801b746:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 801b748:	2101      	movs	r1, #1
 801b74a:	6878      	ldr	r0, [r7, #4]
 801b74c:	f7fe f98c 	bl	8019a68 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 801b750:	2181      	movs	r1, #129	; 0x81
 801b752:	6878      	ldr	r0, [r7, #4]
 801b754:	f7fe f988 	bl	8019a68 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b75e:	231f      	movs	r3, #31
 801b760:	2101      	movs	r1, #1
 801b762:	6878      	ldr	r0, [r7, #4]
 801b764:	f7fe fabc 	bl	8019ce0 <USBD_LL_PrepareReceive>
 801b768:	e000      	b.n	801b76c <MSC_BOT_Init+0x6a>
    return;
 801b76a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b76c:	3710      	adds	r7, #16
 801b76e:	46bd      	mov	sp, r7
 801b770:	bd80      	pop	{r7, pc}

0801b772 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801b772:	b580      	push	{r7, lr}
 801b774:	b084      	sub	sp, #16
 801b776:	af00      	add	r7, sp, #0
 801b778:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b780:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	2b00      	cmp	r3, #0
 801b786:	d016      	beq.n	801b7b6 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	2200      	movs	r2, #0
 801b78c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	2201      	movs	r2, #1
 801b792:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 801b794:	2181      	movs	r1, #129	; 0x81
 801b796:	6878      	ldr	r0, [r7, #4]
 801b798:	f7fe f9d2 	bl	8019b40 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 801b79c:	2101      	movs	r1, #1
 801b79e:	6878      	ldr	r0, [r7, #4]
 801b7a0:	f7fe f9ce 	bl	8019b40 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b7aa:	231f      	movs	r3, #31
 801b7ac:	2101      	movs	r1, #1
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f7fe fa96 	bl	8019ce0 <USBD_LL_PrepareReceive>
 801b7b4:	e000      	b.n	801b7b8 <MSC_BOT_Reset+0x46>
    return;
 801b7b6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b7b8:	3710      	adds	r7, #16
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	bd80      	pop	{r7, pc}

0801b7be <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801b7be:	b480      	push	{r7}
 801b7c0:	b085      	sub	sp, #20
 801b7c2:	af00      	add	r7, sp, #0
 801b7c4:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b7cc:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d002      	beq.n	801b7da <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	721a      	strb	r2, [r3, #8]
  }
}
 801b7da:	bf00      	nop
 801b7dc:	3714      	adds	r7, #20
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e4:	4770      	bx	lr

0801b7e6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b7e6:	b580      	push	{r7, lr}
 801b7e8:	b084      	sub	sp, #16
 801b7ea:	af00      	add	r7, sp, #0
 801b7ec:	6078      	str	r0, [r7, #4]
 801b7ee:	460b      	mov	r3, r1
 801b7f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b7f8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d020      	beq.n	801b842 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	7a1b      	ldrb	r3, [r3, #8]
 801b804:	2b02      	cmp	r3, #2
 801b806:	d005      	beq.n	801b814 <MSC_BOT_DataIn+0x2e>
 801b808:	2b02      	cmp	r3, #2
 801b80a:	db1c      	blt.n	801b846 <MSC_BOT_DataIn+0x60>
 801b80c:	3b03      	subs	r3, #3
 801b80e:	2b01      	cmp	r3, #1
 801b810:	d819      	bhi.n	801b846 <MSC_BOT_DataIn+0x60>
 801b812:	e011      	b.n	801b838 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b820:	461a      	mov	r2, r3
 801b822:	6878      	ldr	r0, [r7, #4]
 801b824:	f000 f992 	bl	801bb4c <SCSI_ProcessCmd>
 801b828:	4603      	mov	r3, r0
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	da0d      	bge.n	801b84a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b82e:	2101      	movs	r1, #1
 801b830:	6878      	ldr	r0, [r7, #4]
 801b832:	f000 f8fb 	bl	801ba2c <MSC_BOT_SendCSW>
      }
      break;
 801b836:	e008      	b.n	801b84a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b838:	2100      	movs	r1, #0
 801b83a:	6878      	ldr	r0, [r7, #4]
 801b83c:	f000 f8f6 	bl	801ba2c <MSC_BOT_SendCSW>
      break;
 801b840:	e004      	b.n	801b84c <MSC_BOT_DataIn+0x66>
    return;
 801b842:	bf00      	nop
 801b844:	e002      	b.n	801b84c <MSC_BOT_DataIn+0x66>

    default:
      break;
 801b846:	bf00      	nop
 801b848:	e000      	b.n	801b84c <MSC_BOT_DataIn+0x66>
      break;
 801b84a:	bf00      	nop
  }
}
 801b84c:	3710      	adds	r7, #16
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}

0801b852 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b852:	b580      	push	{r7, lr}
 801b854:	b084      	sub	sp, #16
 801b856:	af00      	add	r7, sp, #0
 801b858:	6078      	str	r0, [r7, #4]
 801b85a:	460b      	mov	r3, r1
 801b85c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b864:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d01c      	beq.n	801b8a6 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	7a1b      	ldrb	r3, [r3, #8]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d002      	beq.n	801b87a <MSC_BOT_DataOut+0x28>
 801b874:	2b01      	cmp	r3, #1
 801b876:	d004      	beq.n	801b882 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801b878:	e018      	b.n	801b8ac <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801b87a:	6878      	ldr	r0, [r7, #4]
 801b87c:	f000 f81a 	bl	801b8b4 <MSC_BOT_CBW_Decode>
      break;
 801b880:	e014      	b.n	801b8ac <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b882:	68fb      	ldr	r3, [r7, #12]
 801b884:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b88e:	461a      	mov	r2, r3
 801b890:	6878      	ldr	r0, [r7, #4]
 801b892:	f000 f95b 	bl	801bb4c <SCSI_ProcessCmd>
 801b896:	4603      	mov	r3, r0
 801b898:	2b00      	cmp	r3, #0
 801b89a:	da06      	bge.n	801b8aa <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b89c:	2101      	movs	r1, #1
 801b89e:	6878      	ldr	r0, [r7, #4]
 801b8a0:	f000 f8c4 	bl	801ba2c <MSC_BOT_SendCSW>
      break;
 801b8a4:	e001      	b.n	801b8aa <MSC_BOT_DataOut+0x58>
    return;
 801b8a6:	bf00      	nop
 801b8a8:	e000      	b.n	801b8ac <MSC_BOT_DataOut+0x5a>
      break;
 801b8aa:	bf00      	nop
  }
}
 801b8ac:	3710      	adds	r7, #16
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	bd80      	pop	{r7, pc}
	...

0801b8b4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801b8b4:	b580      	push	{r7, lr}
 801b8b6:	b084      	sub	sp, #16
 801b8b8:	af00      	add	r7, sp, #0
 801b8ba:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b8c2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d077      	beq.n	801b9ba <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b8e2:	2101      	movs	r1, #1
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f7fe fa33 	bl	8019d50 <USBD_LL_GetRxDataSize>
 801b8ea:	4603      	mov	r3, r0
 801b8ec:	2b1f      	cmp	r3, #31
 801b8ee:	d114      	bne.n	801b91a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b8f6:	4a34      	ldr	r2, [pc, #208]	; (801b9c8 <MSC_BOT_CBW_Decode+0x114>)
 801b8f8:	4293      	cmp	r3, r2
 801b8fa:	d10e      	bne.n	801b91a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b902:	2b01      	cmp	r3, #1
 801b904:	d809      	bhi.n	801b91a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d004      	beq.n	801b91a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b916:	2b10      	cmp	r3, #16
 801b918:	d90e      	bls.n	801b938 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b920:	2320      	movs	r3, #32
 801b922:	2205      	movs	r2, #5
 801b924:	6878      	ldr	r0, [r7, #4]
 801b926:	f000 fdbc 	bl	801c4a2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	2202      	movs	r2, #2
 801b92e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801b930:	6878      	ldr	r0, [r7, #4]
 801b932:	f000 f8ab 	bl	801ba8c <MSC_BOT_Abort>
 801b936:	e043      	b.n	801b9c0 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b944:	461a      	mov	r2, r3
 801b946:	6878      	ldr	r0, [r7, #4]
 801b948:	f000 f900 	bl	801bb4c <SCSI_ProcessCmd>
 801b94c:	4603      	mov	r3, r0
 801b94e:	2b00      	cmp	r3, #0
 801b950:	da0c      	bge.n	801b96c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	7a1b      	ldrb	r3, [r3, #8]
 801b956:	2b05      	cmp	r3, #5
 801b958:	d104      	bne.n	801b964 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b95a:	2101      	movs	r1, #1
 801b95c:	6878      	ldr	r0, [r7, #4]
 801b95e:	f000 f865 	bl	801ba2c <MSC_BOT_SendCSW>
 801b962:	e02d      	b.n	801b9c0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801b964:	6878      	ldr	r0, [r7, #4]
 801b966:	f000 f891 	bl	801ba8c <MSC_BOT_Abort>
 801b96a:	e029      	b.n	801b9c0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	7a1b      	ldrb	r3, [r3, #8]
 801b970:	2b02      	cmp	r3, #2
 801b972:	d024      	beq.n	801b9be <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801b978:	2b01      	cmp	r3, #1
 801b97a:	d020      	beq.n	801b9be <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801b97c:	68fb      	ldr	r3, [r7, #12]
 801b97e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801b980:	2b03      	cmp	r3, #3
 801b982:	d01c      	beq.n	801b9be <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	68db      	ldr	r3, [r3, #12]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d009      	beq.n	801b9a0 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	f103 0110 	add.w	r1, r3, #16
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	68db      	ldr	r3, [r3, #12]
 801b996:	461a      	mov	r2, r3
 801b998:	6878      	ldr	r0, [r7, #4]
 801b99a:	f000 f817 	bl	801b9cc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801b99e:	e00f      	b.n	801b9c0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	68db      	ldr	r3, [r3, #12]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d104      	bne.n	801b9b2 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b9a8:	2100      	movs	r1, #0
 801b9aa:	6878      	ldr	r0, [r7, #4]
 801b9ac:	f000 f83e 	bl	801ba2c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801b9b0:	e006      	b.n	801b9c0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801b9b2:	6878      	ldr	r0, [r7, #4]
 801b9b4:	f000 f86a 	bl	801ba8c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801b9b8:	e002      	b.n	801b9c0 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801b9ba:	bf00      	nop
 801b9bc:	e000      	b.n	801b9c0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801b9be:	bf00      	nop
    }
  }
}
 801b9c0:	3710      	adds	r7, #16
 801b9c2:	46bd      	mov	sp, r7
 801b9c4:	bd80      	pop	{r7, pc}
 801b9c6:	bf00      	nop
 801b9c8:	43425355 	.word	0x43425355

0801b9cc <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b086      	sub	sp, #24
 801b9d0:	af00      	add	r7, sp, #0
 801b9d2:	60f8      	str	r0, [r7, #12]
 801b9d4:	60b9      	str	r1, [r7, #8]
 801b9d6:	607a      	str	r2, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b9de:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801b9e0:	697b      	ldr	r3, [r7, #20]
 801b9e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801b9e6:	687a      	ldr	r2, [r7, #4]
 801b9e8:	4293      	cmp	r3, r2
 801b9ea:	bf28      	it	cs
 801b9ec:	4613      	movcs	r3, r2
 801b9ee:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801b9f0:	697b      	ldr	r3, [r7, #20]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d015      	beq.n	801ba22 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801b9f6:	697b      	ldr	r3, [r7, #20]
 801b9f8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	1ad2      	subs	r2, r2, r3
 801ba00:	697b      	ldr	r3, [r7, #20]
 801ba02:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801ba06:	697b      	ldr	r3, [r7, #20]
 801ba08:	2200      	movs	r2, #0
 801ba0a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801ba0e:	697b      	ldr	r3, [r7, #20]
 801ba10:	2204      	movs	r2, #4
 801ba12:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 801ba14:	693b      	ldr	r3, [r7, #16]
 801ba16:	68ba      	ldr	r2, [r7, #8]
 801ba18:	2181      	movs	r1, #129	; 0x81
 801ba1a:	68f8      	ldr	r0, [r7, #12]
 801ba1c:	f7fe f928 	bl	8019c70 <USBD_LL_Transmit>
 801ba20:	e000      	b.n	801ba24 <MSC_BOT_SendData+0x58>
    return;
 801ba22:	bf00      	nop
}
 801ba24:	3718      	adds	r7, #24
 801ba26:	46bd      	mov	sp, r7
 801ba28:	bd80      	pop	{r7, pc}
	...

0801ba2c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b084      	sub	sp, #16
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
 801ba34:	460b      	mov	r3, r1
 801ba36:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba3e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d01b      	beq.n	801ba7e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	4a0f      	ldr	r2, [pc, #60]	; (801ba88 <MSC_BOT_SendCSW+0x5c>)
 801ba4a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	78fa      	ldrb	r2, [r7, #3]
 801ba52:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	2200      	movs	r2, #0
 801ba5a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801ba62:	230d      	movs	r3, #13
 801ba64:	2181      	movs	r1, #129	; 0x81
 801ba66:	6878      	ldr	r0, [r7, #4]
 801ba68:	f7fe f902 	bl	8019c70 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801ba72:	231f      	movs	r3, #31
 801ba74:	2101      	movs	r1, #1
 801ba76:	6878      	ldr	r0, [r7, #4]
 801ba78:	f7fe f932 	bl	8019ce0 <USBD_LL_PrepareReceive>
 801ba7c:	e000      	b.n	801ba80 <MSC_BOT_SendCSW+0x54>
    return;
 801ba7e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801ba80:	3710      	adds	r7, #16
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}
 801ba86:	bf00      	nop
 801ba88:	53425355 	.word	0x53425355

0801ba8c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	b084      	sub	sp, #16
 801ba90:	af00      	add	r7, sp, #0
 801ba92:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba9a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d022      	beq.n	801bae8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d10c      	bne.n	801bac6 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d007      	beq.n	801bac6 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801baba:	2b00      	cmp	r3, #0
 801babc:	d103      	bne.n	801bac6 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801babe:	2101      	movs	r1, #1
 801bac0:	6878      	ldr	r0, [r7, #4]
 801bac2:	f7fe f807 	bl	8019ad4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bac6:	2181      	movs	r1, #129	; 0x81
 801bac8:	6878      	ldr	r0, [r7, #4]
 801baca:	f7fe f803 	bl	8019ad4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	7a5b      	ldrb	r3, [r3, #9]
 801bad2:	2b02      	cmp	r3, #2
 801bad4:	d109      	bne.n	801baea <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bad6:	2181      	movs	r1, #129	; 0x81
 801bad8:	6878      	ldr	r0, [r7, #4]
 801bada:	f7fd fffb 	bl	8019ad4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bade:	2101      	movs	r1, #1
 801bae0:	6878      	ldr	r0, [r7, #4]
 801bae2:	f7fd fff7 	bl	8019ad4 <USBD_LL_StallEP>
 801bae6:	e000      	b.n	801baea <MSC_BOT_Abort+0x5e>
    return;
 801bae8:	bf00      	nop
  }
}
 801baea:	3710      	adds	r7, #16
 801baec:	46bd      	mov	sp, r7
 801baee:	bd80      	pop	{r7, pc}

0801baf0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b084      	sub	sp, #16
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	6078      	str	r0, [r7, #4]
 801baf8:	460b      	mov	r3, r1
 801bafa:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bb02:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d019      	beq.n	801bb3e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	7a5b      	ldrb	r3, [r3, #9]
 801bb0e:	2b02      	cmp	r3, #2
 801bb10:	d108      	bne.n	801bb24 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bb12:	2181      	movs	r1, #129	; 0x81
 801bb14:	6878      	ldr	r0, [r7, #4]
 801bb16:	f7fd ffdd 	bl	8019ad4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bb1a:	2101      	movs	r1, #1
 801bb1c:	6878      	ldr	r0, [r7, #4]
 801bb1e:	f7fd ffd9 	bl	8019ad4 <USBD_LL_StallEP>
 801bb22:	e00f      	b.n	801bb44 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801bb24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	da0a      	bge.n	801bb42 <MSC_BOT_CplClrFeature+0x52>
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	7a5b      	ldrb	r3, [r3, #9]
 801bb30:	2b01      	cmp	r3, #1
 801bb32:	d006      	beq.n	801bb42 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801bb34:	2101      	movs	r1, #1
 801bb36:	6878      	ldr	r0, [r7, #4]
 801bb38:	f7ff ff78 	bl	801ba2c <MSC_BOT_SendCSW>
 801bb3c:	e002      	b.n	801bb44 <MSC_BOT_CplClrFeature+0x54>
    return;
 801bb3e:	bf00      	nop
 801bb40:	e000      	b.n	801bb44 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801bb42:	bf00      	nop
  }
}
 801bb44:	3710      	adds	r7, #16
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd80      	pop	{r7, pc}
	...

0801bb4c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b086      	sub	sp, #24
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	60f8      	str	r0, [r7, #12]
 801bb54:	460b      	mov	r3, r1
 801bb56:	607a      	str	r2, [r7, #4]
 801bb58:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bb60:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801bb62:	693b      	ldr	r3, [r7, #16]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d102      	bne.n	801bb6e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801bb68:	f04f 33ff 	mov.w	r3, #4294967295
 801bb6c:	e168      	b.n	801be40 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	781b      	ldrb	r3, [r3, #0]
 801bb72:	2baa      	cmp	r3, #170	; 0xaa
 801bb74:	f000 8144 	beq.w	801be00 <SCSI_ProcessCmd+0x2b4>
 801bb78:	2baa      	cmp	r3, #170	; 0xaa
 801bb7a:	f300 8153 	bgt.w	801be24 <SCSI_ProcessCmd+0x2d8>
 801bb7e:	2ba8      	cmp	r3, #168	; 0xa8
 801bb80:	f000 812c 	beq.w	801bddc <SCSI_ProcessCmd+0x290>
 801bb84:	2ba8      	cmp	r3, #168	; 0xa8
 801bb86:	f300 814d 	bgt.w	801be24 <SCSI_ProcessCmd+0x2d8>
 801bb8a:	2b5a      	cmp	r3, #90	; 0x5a
 801bb8c:	f300 80c0 	bgt.w	801bd10 <SCSI_ProcessCmd+0x1c4>
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	f2c0 8147 	blt.w	801be24 <SCSI_ProcessCmd+0x2d8>
 801bb96:	2b5a      	cmp	r3, #90	; 0x5a
 801bb98:	f200 8144 	bhi.w	801be24 <SCSI_ProcessCmd+0x2d8>
 801bb9c:	a201      	add	r2, pc, #4	; (adr r2, 801bba4 <SCSI_ProcessCmd+0x58>)
 801bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bba2:	bf00      	nop
 801bba4:	0801bd17 	.word	0x0801bd17
 801bba8:	0801be25 	.word	0x0801be25
 801bbac:	0801be25 	.word	0x0801be25
 801bbb0:	0801bd29 	.word	0x0801bd29
 801bbb4:	0801be25 	.word	0x0801be25
 801bbb8:	0801be25 	.word	0x0801be25
 801bbbc:	0801be25 	.word	0x0801be25
 801bbc0:	0801be25 	.word	0x0801be25
 801bbc4:	0801be25 	.word	0x0801be25
 801bbc8:	0801be25 	.word	0x0801be25
 801bbcc:	0801be25 	.word	0x0801be25
 801bbd0:	0801be25 	.word	0x0801be25
 801bbd4:	0801be25 	.word	0x0801be25
 801bbd8:	0801be25 	.word	0x0801be25
 801bbdc:	0801be25 	.word	0x0801be25
 801bbe0:	0801be25 	.word	0x0801be25
 801bbe4:	0801be25 	.word	0x0801be25
 801bbe8:	0801be25 	.word	0x0801be25
 801bbec:	0801bd3b 	.word	0x0801bd3b
 801bbf0:	0801be25 	.word	0x0801be25
 801bbf4:	0801be25 	.word	0x0801be25
 801bbf8:	0801be25 	.word	0x0801be25
 801bbfc:	0801be25 	.word	0x0801be25
 801bc00:	0801be25 	.word	0x0801be25
 801bc04:	0801be25 	.word	0x0801be25
 801bc08:	0801be25 	.word	0x0801be25
 801bc0c:	0801bd71 	.word	0x0801bd71
 801bc10:	0801bd4d 	.word	0x0801bd4d
 801bc14:	0801be25 	.word	0x0801be25
 801bc18:	0801be25 	.word	0x0801be25
 801bc1c:	0801bd5f 	.word	0x0801bd5f
 801bc20:	0801be25 	.word	0x0801be25
 801bc24:	0801be25 	.word	0x0801be25
 801bc28:	0801be25 	.word	0x0801be25
 801bc2c:	0801be25 	.word	0x0801be25
 801bc30:	0801bd95 	.word	0x0801bd95
 801bc34:	0801be25 	.word	0x0801be25
 801bc38:	0801bda7 	.word	0x0801bda7
 801bc3c:	0801be25 	.word	0x0801be25
 801bc40:	0801be25 	.word	0x0801be25
 801bc44:	0801bdcb 	.word	0x0801bdcb
 801bc48:	0801be25 	.word	0x0801be25
 801bc4c:	0801bdef 	.word	0x0801bdef
 801bc50:	0801be25 	.word	0x0801be25
 801bc54:	0801be25 	.word	0x0801be25
 801bc58:	0801be25 	.word	0x0801be25
 801bc5c:	0801be25 	.word	0x0801be25
 801bc60:	0801be13 	.word	0x0801be13
 801bc64:	0801be25 	.word	0x0801be25
 801bc68:	0801be25 	.word	0x0801be25
 801bc6c:	0801be25 	.word	0x0801be25
 801bc70:	0801be25 	.word	0x0801be25
 801bc74:	0801be25 	.word	0x0801be25
 801bc78:	0801be25 	.word	0x0801be25
 801bc7c:	0801be25 	.word	0x0801be25
 801bc80:	0801be25 	.word	0x0801be25
 801bc84:	0801be25 	.word	0x0801be25
 801bc88:	0801be25 	.word	0x0801be25
 801bc8c:	0801be25 	.word	0x0801be25
 801bc90:	0801be25 	.word	0x0801be25
 801bc94:	0801be25 	.word	0x0801be25
 801bc98:	0801be25 	.word	0x0801be25
 801bc9c:	0801be25 	.word	0x0801be25
 801bca0:	0801be25 	.word	0x0801be25
 801bca4:	0801be25 	.word	0x0801be25
 801bca8:	0801be25 	.word	0x0801be25
 801bcac:	0801be25 	.word	0x0801be25
 801bcb0:	0801be25 	.word	0x0801be25
 801bcb4:	0801be25 	.word	0x0801be25
 801bcb8:	0801be25 	.word	0x0801be25
 801bcbc:	0801be25 	.word	0x0801be25
 801bcc0:	0801be25 	.word	0x0801be25
 801bcc4:	0801be25 	.word	0x0801be25
 801bcc8:	0801be25 	.word	0x0801be25
 801bccc:	0801be25 	.word	0x0801be25
 801bcd0:	0801be25 	.word	0x0801be25
 801bcd4:	0801be25 	.word	0x0801be25
 801bcd8:	0801be25 	.word	0x0801be25
 801bcdc:	0801be25 	.word	0x0801be25
 801bce0:	0801be25 	.word	0x0801be25
 801bce4:	0801be25 	.word	0x0801be25
 801bce8:	0801be25 	.word	0x0801be25
 801bcec:	0801be25 	.word	0x0801be25
 801bcf0:	0801be25 	.word	0x0801be25
 801bcf4:	0801be25 	.word	0x0801be25
 801bcf8:	0801be25 	.word	0x0801be25
 801bcfc:	0801be25 	.word	0x0801be25
 801bd00:	0801be25 	.word	0x0801be25
 801bd04:	0801be25 	.word	0x0801be25
 801bd08:	0801be25 	.word	0x0801be25
 801bd0c:	0801bd83 	.word	0x0801bd83
 801bd10:	2b9e      	cmp	r3, #158	; 0x9e
 801bd12:	d051      	beq.n	801bdb8 <SCSI_ProcessCmd+0x26c>
 801bd14:	e086      	b.n	801be24 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801bd16:	7afb      	ldrb	r3, [r7, #11]
 801bd18:	687a      	ldr	r2, [r7, #4]
 801bd1a:	4619      	mov	r1, r3
 801bd1c:	68f8      	ldr	r0, [r7, #12]
 801bd1e:	f000 f893 	bl	801be48 <SCSI_TestUnitReady>
 801bd22:	4603      	mov	r3, r0
 801bd24:	75fb      	strb	r3, [r7, #23]
      break;
 801bd26:	e089      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801bd28:	7afb      	ldrb	r3, [r7, #11]
 801bd2a:	687a      	ldr	r2, [r7, #4]
 801bd2c:	4619      	mov	r1, r3
 801bd2e:	68f8      	ldr	r0, [r7, #12]
 801bd30:	f000 fb38 	bl	801c3a4 <SCSI_RequestSense>
 801bd34:	4603      	mov	r3, r0
 801bd36:	75fb      	strb	r3, [r7, #23]
      break;
 801bd38:	e080      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801bd3a:	7afb      	ldrb	r3, [r7, #11]
 801bd3c:	687a      	ldr	r2, [r7, #4]
 801bd3e:	4619      	mov	r1, r3
 801bd40:	68f8      	ldr	r0, [r7, #12]
 801bd42:	f000 f8d1 	bl	801bee8 <SCSI_Inquiry>
 801bd46:	4603      	mov	r3, r0
 801bd48:	75fb      	strb	r3, [r7, #23]
      break;
 801bd4a:	e077      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801bd4c:	7afb      	ldrb	r3, [r7, #11]
 801bd4e:	687a      	ldr	r2, [r7, #4]
 801bd50:	4619      	mov	r1, r3
 801bd52:	68f8      	ldr	r0, [r7, #12]
 801bd54:	f000 fbec 	bl	801c530 <SCSI_StartStopUnit>
 801bd58:	4603      	mov	r3, r0
 801bd5a:	75fb      	strb	r3, [r7, #23]
      break;
 801bd5c:	e06e      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801bd5e:	7afb      	ldrb	r3, [r7, #11]
 801bd60:	687a      	ldr	r2, [r7, #4]
 801bd62:	4619      	mov	r1, r3
 801bd64:	68f8      	ldr	r0, [r7, #12]
 801bd66:	f000 fc34 	bl	801c5d2 <SCSI_AllowPreventRemovable>
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	75fb      	strb	r3, [r7, #23]
      break;
 801bd6e:	e065      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801bd70:	7afb      	ldrb	r3, [r7, #11]
 801bd72:	687a      	ldr	r2, [r7, #4]
 801bd74:	4619      	mov	r1, r3
 801bd76:	68f8      	ldr	r0, [r7, #12]
 801bd78:	f000 fabc 	bl	801c2f4 <SCSI_ModeSense6>
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	75fb      	strb	r3, [r7, #23]
      break;
 801bd80:	e05c      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801bd82:	7afb      	ldrb	r3, [r7, #11]
 801bd84:	687a      	ldr	r2, [r7, #4]
 801bd86:	4619      	mov	r1, r3
 801bd88:	68f8      	ldr	r0, [r7, #12]
 801bd8a:	f000 fadf 	bl	801c34c <SCSI_ModeSense10>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	75fb      	strb	r3, [r7, #23]
      break;
 801bd92:	e053      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801bd94:	7afb      	ldrb	r3, [r7, #11]
 801bd96:	687a      	ldr	r2, [r7, #4]
 801bd98:	4619      	mov	r1, r3
 801bd9a:	68f8      	ldr	r0, [r7, #12]
 801bd9c:	f000 fa37 	bl	801c20e <SCSI_ReadFormatCapacity>
 801bda0:	4603      	mov	r3, r0
 801bda2:	75fb      	strb	r3, [r7, #23]
      break;
 801bda4:	e04a      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801bda6:	7afb      	ldrb	r3, [r7, #11]
 801bda8:	687a      	ldr	r2, [r7, #4]
 801bdaa:	4619      	mov	r1, r3
 801bdac:	68f8      	ldr	r0, [r7, #12]
 801bdae:	f000 f90f 	bl	801bfd0 <SCSI_ReadCapacity10>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	75fb      	strb	r3, [r7, #23]
      break;
 801bdb6:	e041      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801bdb8:	7afb      	ldrb	r3, [r7, #11]
 801bdba:	687a      	ldr	r2, [r7, #4]
 801bdbc:	4619      	mov	r1, r3
 801bdbe:	68f8      	ldr	r0, [r7, #12]
 801bdc0:	f000 f97b 	bl	801c0ba <SCSI_ReadCapacity16>
 801bdc4:	4603      	mov	r3, r0
 801bdc6:	75fb      	strb	r3, [r7, #23]
      break;
 801bdc8:	e038      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801bdca:	7afb      	ldrb	r3, [r7, #11]
 801bdcc:	687a      	ldr	r2, [r7, #4]
 801bdce:	4619      	mov	r1, r3
 801bdd0:	68f8      	ldr	r0, [r7, #12]
 801bdd2:	f000 fc27 	bl	801c624 <SCSI_Read10>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	75fb      	strb	r3, [r7, #23]
      break;
 801bdda:	e02f      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801bddc:	7afb      	ldrb	r3, [r7, #11]
 801bdde:	687a      	ldr	r2, [r7, #4]
 801bde0:	4619      	mov	r1, r3
 801bde2:	68f8      	ldr	r0, [r7, #12]
 801bde4:	f000 fcbe 	bl	801c764 <SCSI_Read12>
 801bde8:	4603      	mov	r3, r0
 801bdea:	75fb      	strb	r3, [r7, #23]
      break;
 801bdec:	e026      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801bdee:	7afb      	ldrb	r3, [r7, #11]
 801bdf0:	687a      	ldr	r2, [r7, #4]
 801bdf2:	4619      	mov	r1, r3
 801bdf4:	68f8      	ldr	r0, [r7, #12]
 801bdf6:	f000 fd60 	bl	801c8ba <SCSI_Write10>
 801bdfa:	4603      	mov	r3, r0
 801bdfc:	75fb      	strb	r3, [r7, #23]
      break;
 801bdfe:	e01d      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801be00:	7afb      	ldrb	r3, [r7, #11]
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	4619      	mov	r1, r3
 801be06:	68f8      	ldr	r0, [r7, #12]
 801be08:	f000 fe1c 	bl	801ca44 <SCSI_Write12>
 801be0c:	4603      	mov	r3, r0
 801be0e:	75fb      	strb	r3, [r7, #23]
      break;
 801be10:	e014      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801be12:	7afb      	ldrb	r3, [r7, #11]
 801be14:	687a      	ldr	r2, [r7, #4]
 801be16:	4619      	mov	r1, r3
 801be18:	68f8      	ldr	r0, [r7, #12]
 801be1a:	f000 fee8 	bl	801cbee <SCSI_Verify10>
 801be1e:	4603      	mov	r3, r0
 801be20:	75fb      	strb	r3, [r7, #23]
      break;
 801be22:	e00b      	b.n	801be3c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801be24:	7af9      	ldrb	r1, [r7, #11]
 801be26:	2320      	movs	r3, #32
 801be28:	2205      	movs	r2, #5
 801be2a:	68f8      	ldr	r0, [r7, #12]
 801be2c:	f000 fb39 	bl	801c4a2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801be30:	693b      	ldr	r3, [r7, #16]
 801be32:	2202      	movs	r2, #2
 801be34:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801be36:	23ff      	movs	r3, #255	; 0xff
 801be38:	75fb      	strb	r3, [r7, #23]
      break;
 801be3a:	bf00      	nop
  }

  return ret;
 801be3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801be40:	4618      	mov	r0, r3
 801be42:	3718      	adds	r7, #24
 801be44:	46bd      	mov	sp, r7
 801be46:	bd80      	pop	{r7, pc}

0801be48 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801be48:	b580      	push	{r7, lr}
 801be4a:	b086      	sub	sp, #24
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	60f8      	str	r0, [r7, #12]
 801be50:	460b      	mov	r3, r1
 801be52:	607a      	str	r2, [r7, #4]
 801be54:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801be5c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801be5e:	697b      	ldr	r3, [r7, #20]
 801be60:	2b00      	cmp	r3, #0
 801be62:	d102      	bne.n	801be6a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801be64:	f04f 33ff 	mov.w	r3, #4294967295
 801be68:	e03a      	b.n	801bee0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801be70:	2b00      	cmp	r3, #0
 801be72:	d00a      	beq.n	801be8a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801be7a:	2320      	movs	r3, #32
 801be7c:	2205      	movs	r2, #5
 801be7e:	68f8      	ldr	r0, [r7, #12]
 801be80:	f000 fb0f 	bl	801c4a2 <SCSI_SenseCode>

    return -1;
 801be84:	f04f 33ff 	mov.w	r3, #4294967295
 801be88:	e02a      	b.n	801bee0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801be8a:	697b      	ldr	r3, [r7, #20]
 801be8c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801be90:	2b02      	cmp	r3, #2
 801be92:	d10b      	bne.n	801beac <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801be94:	7af9      	ldrb	r1, [r7, #11]
 801be96:	233a      	movs	r3, #58	; 0x3a
 801be98:	2202      	movs	r2, #2
 801be9a:	68f8      	ldr	r0, [r7, #12]
 801be9c:	f000 fb01 	bl	801c4a2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801bea0:	697b      	ldr	r3, [r7, #20]
 801bea2:	2205      	movs	r2, #5
 801bea4:	721a      	strb	r2, [r3, #8]
    return -1;
 801bea6:	f04f 33ff 	mov.w	r3, #4294967295
 801beaa:	e019      	b.n	801bee0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801beb2:	689b      	ldr	r3, [r3, #8]
 801beb4:	7afa      	ldrb	r2, [r7, #11]
 801beb6:	4610      	mov	r0, r2
 801beb8:	4798      	blx	r3
 801beba:	4603      	mov	r3, r0
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d00b      	beq.n	801bed8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bec0:	7af9      	ldrb	r1, [r7, #11]
 801bec2:	233a      	movs	r3, #58	; 0x3a
 801bec4:	2202      	movs	r2, #2
 801bec6:	68f8      	ldr	r0, [r7, #12]
 801bec8:	f000 faeb 	bl	801c4a2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801becc:	697b      	ldr	r3, [r7, #20]
 801bece:	2205      	movs	r2, #5
 801bed0:	721a      	strb	r2, [r3, #8]

    return -1;
 801bed2:	f04f 33ff 	mov.w	r3, #4294967295
 801bed6:	e003      	b.n	801bee0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801bed8:	697b      	ldr	r3, [r7, #20]
 801beda:	2200      	movs	r2, #0
 801bedc:	60da      	str	r2, [r3, #12]

  return 0;
 801bede:	2300      	movs	r3, #0
}
 801bee0:	4618      	mov	r0, r3
 801bee2:	3718      	adds	r7, #24
 801bee4:	46bd      	mov	sp, r7
 801bee6:	bd80      	pop	{r7, pc}

0801bee8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b088      	sub	sp, #32
 801beec:	af00      	add	r7, sp, #0
 801beee:	60f8      	str	r0, [r7, #12]
 801bef0:	460b      	mov	r3, r1
 801bef2:	607a      	str	r2, [r7, #4]
 801bef4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801befc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801befe:	69bb      	ldr	r3, [r7, #24]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d102      	bne.n	801bf0a <SCSI_Inquiry+0x22>
  {
    return -1;
 801bf04:	f04f 33ff 	mov.w	r3, #4294967295
 801bf08:	e05a      	b.n	801bfc0 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801bf0a:	69bb      	ldr	r3, [r7, #24]
 801bf0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d10a      	bne.n	801bf2a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801bf14:	69bb      	ldr	r3, [r7, #24]
 801bf16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bf1a:	2320      	movs	r3, #32
 801bf1c:	2205      	movs	r2, #5
 801bf1e:	68f8      	ldr	r0, [r7, #12]
 801bf20:	f000 fabf 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801bf24:	f04f 33ff 	mov.w	r3, #4294967295
 801bf28:	e04a      	b.n	801bfc0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	3301      	adds	r3, #1
 801bf2e:	781b      	ldrb	r3, [r3, #0]
 801bf30:	f003 0301 	and.w	r3, r3, #1
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d020      	beq.n	801bf7a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	3302      	adds	r3, #2
 801bf3c:	781b      	ldrb	r3, [r3, #0]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d105      	bne.n	801bf4e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801bf42:	2206      	movs	r2, #6
 801bf44:	4920      	ldr	r1, [pc, #128]	; (801bfc8 <SCSI_Inquiry+0xe0>)
 801bf46:	69b8      	ldr	r0, [r7, #24]
 801bf48:	f000 ffb4 	bl	801ceb4 <SCSI_UpdateBotData>
 801bf4c:	e037      	b.n	801bfbe <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	3302      	adds	r3, #2
 801bf52:	781b      	ldrb	r3, [r3, #0]
 801bf54:	2b80      	cmp	r3, #128	; 0x80
 801bf56:	d105      	bne.n	801bf64 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801bf58:	2208      	movs	r2, #8
 801bf5a:	491c      	ldr	r1, [pc, #112]	; (801bfcc <SCSI_Inquiry+0xe4>)
 801bf5c:	69b8      	ldr	r0, [r7, #24]
 801bf5e:	f000 ffa9 	bl	801ceb4 <SCSI_UpdateBotData>
 801bf62:	e02c      	b.n	801bfbe <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801bf64:	69bb      	ldr	r3, [r7, #24]
 801bf66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bf6a:	2324      	movs	r3, #36	; 0x24
 801bf6c:	2205      	movs	r2, #5
 801bf6e:	68f8      	ldr	r0, [r7, #12]
 801bf70:	f000 fa97 	bl	801c4a2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801bf74:	f04f 33ff 	mov.w	r3, #4294967295
 801bf78:	e022      	b.n	801bfc0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserDataMSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bf80:	69d9      	ldr	r1, [r3, #28]
 801bf82:	7afa      	ldrb	r2, [r7, #11]
 801bf84:	4613      	mov	r3, r2
 801bf86:	00db      	lsls	r3, r3, #3
 801bf88:	4413      	add	r3, r2
 801bf8a:	009b      	lsls	r3, r3, #2
 801bf8c:	440b      	add	r3, r1
 801bf8e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801bf90:	697b      	ldr	r3, [r7, #20]
 801bf92:	3304      	adds	r3, #4
 801bf94:	781b      	ldrb	r3, [r3, #0]
 801bf96:	b29b      	uxth	r3, r3
 801bf98:	3305      	adds	r3, #5
 801bf9a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	3304      	adds	r3, #4
 801bfa0:	781b      	ldrb	r3, [r3, #0]
 801bfa2:	b29b      	uxth	r3, r3
 801bfa4:	8bfa      	ldrh	r2, [r7, #30]
 801bfa6:	429a      	cmp	r2, r3
 801bfa8:	d303      	bcc.n	801bfb2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	3304      	adds	r3, #4
 801bfae:	781b      	ldrb	r3, [r3, #0]
 801bfb0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801bfb2:	8bfb      	ldrh	r3, [r7, #30]
 801bfb4:	461a      	mov	r2, r3
 801bfb6:	6979      	ldr	r1, [r7, #20]
 801bfb8:	69b8      	ldr	r0, [r7, #24]
 801bfba:	f000 ff7b 	bl	801ceb4 <SCSI_UpdateBotData>
  }

  return 0;
 801bfbe:	2300      	movs	r3, #0
}
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	3720      	adds	r7, #32
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	bd80      	pop	{r7, pc}
 801bfc8:	200005d0 	.word	0x200005d0
 801bfcc:	200005d8 	.word	0x200005d8

0801bfd0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bfd0:	b580      	push	{r7, lr}
 801bfd2:	b086      	sub	sp, #24
 801bfd4:	af00      	add	r7, sp, #0
 801bfd6:	60f8      	str	r0, [r7, #12]
 801bfd8:	460b      	mov	r3, r1
 801bfda:	607a      	str	r2, [r7, #4]
 801bfdc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bfe4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801bfe6:	697b      	ldr	r3, [r7, #20]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d102      	bne.n	801bff2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801bfec:	f04f 33ff 	mov.w	r3, #4294967295
 801bff0:	e05f      	b.n	801c0b2 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bff8:	685b      	ldr	r3, [r3, #4]
 801bffa:	697a      	ldr	r2, [r7, #20]
 801bffc:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c000:	697a      	ldr	r2, [r7, #20]
 801c002:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c006:	7af8      	ldrb	r0, [r7, #11]
 801c008:	4798      	blx	r3
 801c00a:	4603      	mov	r3, r0
 801c00c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c00e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d104      	bne.n	801c020 <SCSI_ReadCapacity10+0x50>
 801c016:	697b      	ldr	r3, [r7, #20]
 801c018:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c01c:	2b02      	cmp	r3, #2
 801c01e:	d108      	bne.n	801c032 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c020:	7af9      	ldrb	r1, [r7, #11]
 801c022:	233a      	movs	r3, #58	; 0x3a
 801c024:	2202      	movs	r2, #2
 801c026:	68f8      	ldr	r0, [r7, #12]
 801c028:	f000 fa3b 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801c02c:	f04f 33ff 	mov.w	r3, #4294967295
 801c030:	e03f      	b.n	801c0b2 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c032:	697b      	ldr	r3, [r7, #20]
 801c034:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c038:	3b01      	subs	r3, #1
 801c03a:	0e1b      	lsrs	r3, r3, #24
 801c03c:	b2da      	uxtb	r2, r3
 801c03e:	697b      	ldr	r3, [r7, #20]
 801c040:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c042:	697b      	ldr	r3, [r7, #20]
 801c044:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c048:	3b01      	subs	r3, #1
 801c04a:	0c1b      	lsrs	r3, r3, #16
 801c04c:	b2da      	uxtb	r2, r3
 801c04e:	697b      	ldr	r3, [r7, #20]
 801c050:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c052:	697b      	ldr	r3, [r7, #20]
 801c054:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c058:	3b01      	subs	r3, #1
 801c05a:	0a1b      	lsrs	r3, r3, #8
 801c05c:	b2da      	uxtb	r2, r3
 801c05e:	697b      	ldr	r3, [r7, #20]
 801c060:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c062:	697b      	ldr	r3, [r7, #20]
 801c064:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c068:	b2db      	uxtb	r3, r3
 801c06a:	3b01      	subs	r3, #1
 801c06c:	b2da      	uxtb	r2, r3
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c072:	697b      	ldr	r3, [r7, #20]
 801c074:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c078:	161b      	asrs	r3, r3, #24
 801c07a:	b2da      	uxtb	r2, r3
 801c07c:	697b      	ldr	r3, [r7, #20]
 801c07e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c080:	697b      	ldr	r3, [r7, #20]
 801c082:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c086:	141b      	asrs	r3, r3, #16
 801c088:	b2da      	uxtb	r2, r3
 801c08a:	697b      	ldr	r3, [r7, #20]
 801c08c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c08e:	697b      	ldr	r3, [r7, #20]
 801c090:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c094:	0a1b      	lsrs	r3, r3, #8
 801c096:	b29b      	uxth	r3, r3
 801c098:	b2da      	uxtb	r2, r3
 801c09a:	697b      	ldr	r3, [r7, #20]
 801c09c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801c09e:	697b      	ldr	r3, [r7, #20]
 801c0a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c0a4:	b2da      	uxtb	r2, r3
 801c0a6:	697b      	ldr	r3, [r7, #20]
 801c0a8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801c0aa:	697b      	ldr	r3, [r7, #20]
 801c0ac:	2208      	movs	r2, #8
 801c0ae:	60da      	str	r2, [r3, #12]

  return 0;
 801c0b0:	2300      	movs	r3, #0

}
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	3718      	adds	r7, #24
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}

0801c0ba <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c0ba:	b580      	push	{r7, lr}
 801c0bc:	b088      	sub	sp, #32
 801c0be:	af00      	add	r7, sp, #0
 801c0c0:	60f8      	str	r0, [r7, #12]
 801c0c2:	460b      	mov	r3, r1
 801c0c4:	607a      	str	r2, [r7, #4]
 801c0c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c0ce:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c0d0:	69bb      	ldr	r3, [r7, #24]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d102      	bne.n	801c0dc <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801c0d6:	f04f 33ff 	mov.w	r3, #4294967295
 801c0da:	e094      	b.n	801c206 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c0e2:	685b      	ldr	r3, [r3, #4]
 801c0e4:	69ba      	ldr	r2, [r7, #24]
 801c0e6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c0ea:	69ba      	ldr	r2, [r7, #24]
 801c0ec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c0f0:	7af8      	ldrb	r0, [r7, #11]
 801c0f2:	4798      	blx	r3
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c0f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d104      	bne.n	801c10a <SCSI_ReadCapacity16+0x50>
 801c100:	69bb      	ldr	r3, [r7, #24]
 801c102:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c106:	2b02      	cmp	r3, #2
 801c108:	d108      	bne.n	801c11c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c10a:	7af9      	ldrb	r1, [r7, #11]
 801c10c:	233a      	movs	r3, #58	; 0x3a
 801c10e:	2202      	movs	r2, #2
 801c110:	68f8      	ldr	r0, [r7, #12]
 801c112:	f000 f9c6 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801c116:	f04f 33ff 	mov.w	r3, #4294967295
 801c11a:	e074      	b.n	801c206 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	330a      	adds	r3, #10
 801c120:	781b      	ldrb	r3, [r3, #0]
 801c122:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	330b      	adds	r3, #11
 801c128:	781b      	ldrb	r3, [r3, #0]
 801c12a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c12c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	330c      	adds	r3, #12
 801c132:	781b      	ldrb	r3, [r3, #0]
 801c134:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c136:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c138:	687a      	ldr	r2, [r7, #4]
 801c13a:	320d      	adds	r2, #13
 801c13c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c13e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c140:	69bb      	ldr	r3, [r7, #24]
 801c142:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c144:	2300      	movs	r3, #0
 801c146:	77fb      	strb	r3, [r7, #31]
 801c148:	e007      	b.n	801c15a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801c14a:	7ffb      	ldrb	r3, [r7, #31]
 801c14c:	69ba      	ldr	r2, [r7, #24]
 801c14e:	4413      	add	r3, r2
 801c150:	2200      	movs	r2, #0
 801c152:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c154:	7ffb      	ldrb	r3, [r7, #31]
 801c156:	3301      	adds	r3, #1
 801c158:	77fb      	strb	r3, [r7, #31]
 801c15a:	7ffa      	ldrb	r2, [r7, #31]
 801c15c:	69bb      	ldr	r3, [r7, #24]
 801c15e:	68db      	ldr	r3, [r3, #12]
 801c160:	429a      	cmp	r2, r3
 801c162:	d3f2      	bcc.n	801c14a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c164:	69bb      	ldr	r3, [r7, #24]
 801c166:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c16a:	3b01      	subs	r3, #1
 801c16c:	0e1b      	lsrs	r3, r3, #24
 801c16e:	b2da      	uxtb	r2, r3
 801c170:	69bb      	ldr	r3, [r7, #24]
 801c172:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c174:	69bb      	ldr	r3, [r7, #24]
 801c176:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c17a:	3b01      	subs	r3, #1
 801c17c:	0c1b      	lsrs	r3, r3, #16
 801c17e:	b2da      	uxtb	r2, r3
 801c180:	69bb      	ldr	r3, [r7, #24]
 801c182:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c184:	69bb      	ldr	r3, [r7, #24]
 801c186:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c18a:	3b01      	subs	r3, #1
 801c18c:	0a1b      	lsrs	r3, r3, #8
 801c18e:	b2da      	uxtb	r2, r3
 801c190:	69bb      	ldr	r3, [r7, #24]
 801c192:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c194:	69bb      	ldr	r3, [r7, #24]
 801c196:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c19a:	b2db      	uxtb	r3, r3
 801c19c:	3b01      	subs	r3, #1
 801c19e:	b2da      	uxtb	r2, r3
 801c1a0:	69bb      	ldr	r3, [r7, #24]
 801c1a2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c1a4:	69bb      	ldr	r3, [r7, #24]
 801c1a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c1aa:	161b      	asrs	r3, r3, #24
 801c1ac:	b2da      	uxtb	r2, r3
 801c1ae:	69bb      	ldr	r3, [r7, #24]
 801c1b0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c1b2:	69bb      	ldr	r3, [r7, #24]
 801c1b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c1b8:	141b      	asrs	r3, r3, #16
 801c1ba:	b2da      	uxtb	r2, r3
 801c1bc:	69bb      	ldr	r3, [r7, #24]
 801c1be:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c1c0:	69bb      	ldr	r3, [r7, #24]
 801c1c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c1c6:	0a1b      	lsrs	r3, r3, #8
 801c1c8:	b29b      	uxth	r3, r3
 801c1ca:	b2da      	uxtb	r2, r3
 801c1cc:	69bb      	ldr	r3, [r7, #24]
 801c1ce:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801c1d0:	69bb      	ldr	r3, [r7, #24]
 801c1d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c1d6:	b2da      	uxtb	r2, r3
 801c1d8:	69bb      	ldr	r3, [r7, #24]
 801c1da:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	330a      	adds	r3, #10
 801c1e0:	781b      	ldrb	r3, [r3, #0]
 801c1e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	330b      	adds	r3, #11
 801c1e8:	781b      	ldrb	r3, [r3, #0]
 801c1ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c1ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	330c      	adds	r3, #12
 801c1f2:	781b      	ldrb	r3, [r3, #0]
 801c1f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c1f6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c1f8:	687a      	ldr	r2, [r7, #4]
 801c1fa:	320d      	adds	r2, #13
 801c1fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c1fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c200:	69bb      	ldr	r3, [r7, #24]
 801c202:	60da      	str	r2, [r3, #12]

  return 0;
 801c204:	2300      	movs	r3, #0
}
 801c206:	4618      	mov	r0, r3
 801c208:	3720      	adds	r7, #32
 801c20a:	46bd      	mov	sp, r7
 801c20c:	bd80      	pop	{r7, pc}

0801c20e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c20e:	b580      	push	{r7, lr}
 801c210:	b088      	sub	sp, #32
 801c212:	af00      	add	r7, sp, #0
 801c214:	60f8      	str	r0, [r7, #12]
 801c216:	460b      	mov	r3, r1
 801c218:	607a      	str	r2, [r7, #4]
 801c21a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c222:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c224:	69bb      	ldr	r3, [r7, #24]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d102      	bne.n	801c230 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801c22a:	f04f 33ff 	mov.w	r3, #4294967295
 801c22e:	e05c      	b.n	801c2ea <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c236:	685b      	ldr	r3, [r3, #4]
 801c238:	f107 0214 	add.w	r2, r7, #20
 801c23c:	f107 0110 	add.w	r1, r7, #16
 801c240:	7af8      	ldrb	r0, [r7, #11]
 801c242:	4798      	blx	r3
 801c244:	4603      	mov	r3, r0
 801c246:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d104      	bne.n	801c25a <SCSI_ReadFormatCapacity+0x4c>
 801c250:	69bb      	ldr	r3, [r7, #24]
 801c252:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c256:	2b02      	cmp	r3, #2
 801c258:	d108      	bne.n	801c26c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c25a:	7af9      	ldrb	r1, [r7, #11]
 801c25c:	233a      	movs	r3, #58	; 0x3a
 801c25e:	2202      	movs	r2, #2
 801c260:	68f8      	ldr	r0, [r7, #12]
 801c262:	f000 f91e 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801c266:	f04f 33ff 	mov.w	r3, #4294967295
 801c26a:	e03e      	b.n	801c2ea <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 801c26c:	2300      	movs	r3, #0
 801c26e:	83fb      	strh	r3, [r7, #30]
 801c270:	e007      	b.n	801c282 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801c272:	8bfb      	ldrh	r3, [r7, #30]
 801c274:	69ba      	ldr	r2, [r7, #24]
 801c276:	4413      	add	r3, r2
 801c278:	2200      	movs	r2, #0
 801c27a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801c27c:	8bfb      	ldrh	r3, [r7, #30]
 801c27e:	3301      	adds	r3, #1
 801c280:	83fb      	strh	r3, [r7, #30]
 801c282:	8bfb      	ldrh	r3, [r7, #30]
 801c284:	2b0b      	cmp	r3, #11
 801c286:	d9f4      	bls.n	801c272 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 801c288:	69bb      	ldr	r3, [r7, #24]
 801c28a:	2208      	movs	r2, #8
 801c28c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801c28e:	693b      	ldr	r3, [r7, #16]
 801c290:	3b01      	subs	r3, #1
 801c292:	0e1b      	lsrs	r3, r3, #24
 801c294:	b2da      	uxtb	r2, r3
 801c296:	69bb      	ldr	r3, [r7, #24]
 801c298:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801c29a:	693b      	ldr	r3, [r7, #16]
 801c29c:	3b01      	subs	r3, #1
 801c29e:	0c1b      	lsrs	r3, r3, #16
 801c2a0:	b2da      	uxtb	r2, r3
 801c2a2:	69bb      	ldr	r3, [r7, #24]
 801c2a4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801c2a6:	693b      	ldr	r3, [r7, #16]
 801c2a8:	3b01      	subs	r3, #1
 801c2aa:	0a1b      	lsrs	r3, r3, #8
 801c2ac:	b2da      	uxtb	r2, r3
 801c2ae:	69bb      	ldr	r3, [r7, #24]
 801c2b0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801c2b2:	693b      	ldr	r3, [r7, #16]
 801c2b4:	b2db      	uxtb	r3, r3
 801c2b6:	3b01      	subs	r3, #1
 801c2b8:	b2da      	uxtb	r2, r3
 801c2ba:	69bb      	ldr	r3, [r7, #24]
 801c2bc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801c2be:	69bb      	ldr	r3, [r7, #24]
 801c2c0:	2202      	movs	r2, #2
 801c2c2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801c2c4:	8abb      	ldrh	r3, [r7, #20]
 801c2c6:	141b      	asrs	r3, r3, #16
 801c2c8:	b2da      	uxtb	r2, r3
 801c2ca:	69bb      	ldr	r3, [r7, #24]
 801c2cc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801c2ce:	8abb      	ldrh	r3, [r7, #20]
 801c2d0:	0a1b      	lsrs	r3, r3, #8
 801c2d2:	b29b      	uxth	r3, r3
 801c2d4:	b2da      	uxtb	r2, r3
 801c2d6:	69bb      	ldr	r3, [r7, #24]
 801c2d8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801c2da:	8abb      	ldrh	r3, [r7, #20]
 801c2dc:	b2da      	uxtb	r2, r3
 801c2de:	69bb      	ldr	r3, [r7, #24]
 801c2e0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801c2e2:	69bb      	ldr	r3, [r7, #24]
 801c2e4:	220c      	movs	r2, #12
 801c2e6:	60da      	str	r2, [r3, #12]

  return 0;
 801c2e8:	2300      	movs	r3, #0
}
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	3720      	adds	r7, #32
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	bd80      	pop	{r7, pc}
	...

0801c2f4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b086      	sub	sp, #24
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	60f8      	str	r0, [r7, #12]
 801c2fc:	460b      	mov	r3, r1
 801c2fe:	607a      	str	r2, [r7, #4]
 801c300:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c308:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801c30a:	2317      	movs	r3, #23
 801c30c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c30e:	693b      	ldr	r3, [r7, #16]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d102      	bne.n	801c31a <SCSI_ModeSense6+0x26>
  {
    return -1;
 801c314:	f04f 33ff 	mov.w	r3, #4294967295
 801c318:	e011      	b.n	801c33e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	3304      	adds	r3, #4
 801c31e:	781b      	ldrb	r3, [r3, #0]
 801c320:	b29b      	uxth	r3, r3
 801c322:	8afa      	ldrh	r2, [r7, #22]
 801c324:	429a      	cmp	r2, r3
 801c326:	d303      	bcc.n	801c330 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	3304      	adds	r3, #4
 801c32c:	781b      	ldrb	r3, [r3, #0]
 801c32e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801c330:	8afb      	ldrh	r3, [r7, #22]
 801c332:	461a      	mov	r2, r3
 801c334:	4904      	ldr	r1, [pc, #16]	; (801c348 <SCSI_ModeSense6+0x54>)
 801c336:	6938      	ldr	r0, [r7, #16]
 801c338:	f000 fdbc 	bl	801ceb4 <SCSI_UpdateBotData>

  return 0;
 801c33c:	2300      	movs	r3, #0
}
 801c33e:	4618      	mov	r0, r3
 801c340:	3718      	adds	r7, #24
 801c342:	46bd      	mov	sp, r7
 801c344:	bd80      	pop	{r7, pc}
 801c346:	bf00      	nop
 801c348:	200005e0 	.word	0x200005e0

0801c34c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b086      	sub	sp, #24
 801c350:	af00      	add	r7, sp, #0
 801c352:	60f8      	str	r0, [r7, #12]
 801c354:	460b      	mov	r3, r1
 801c356:	607a      	str	r2, [r7, #4]
 801c358:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c360:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801c362:	231b      	movs	r3, #27
 801c364:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c366:	693b      	ldr	r3, [r7, #16]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d102      	bne.n	801c372 <SCSI_ModeSense10+0x26>
  {
    return -1;
 801c36c:	f04f 33ff 	mov.w	r3, #4294967295
 801c370:	e011      	b.n	801c396 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	3308      	adds	r3, #8
 801c376:	781b      	ldrb	r3, [r3, #0]
 801c378:	b29b      	uxth	r3, r3
 801c37a:	8afa      	ldrh	r2, [r7, #22]
 801c37c:	429a      	cmp	r2, r3
 801c37e:	d303      	bcc.n	801c388 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	3308      	adds	r3, #8
 801c384:	781b      	ldrb	r3, [r3, #0]
 801c386:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 801c388:	8afb      	ldrh	r3, [r7, #22]
 801c38a:	461a      	mov	r2, r3
 801c38c:	4904      	ldr	r1, [pc, #16]	; (801c3a0 <SCSI_ModeSense10+0x54>)
 801c38e:	6938      	ldr	r0, [r7, #16]
 801c390:	f000 fd90 	bl	801ceb4 <SCSI_UpdateBotData>

  return 0;
 801c394:	2300      	movs	r3, #0
}
 801c396:	4618      	mov	r0, r3
 801c398:	3718      	adds	r7, #24
 801c39a:	46bd      	mov	sp, r7
 801c39c:	bd80      	pop	{r7, pc}
 801c39e:	bf00      	nop
 801c3a0:	200005f8 	.word	0x200005f8

0801c3a4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b086      	sub	sp, #24
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	60f8      	str	r0, [r7, #12]
 801c3ac:	460b      	mov	r3, r1
 801c3ae:	607a      	str	r2, [r7, #4]
 801c3b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c3b8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801c3ba:	693b      	ldr	r3, [r7, #16]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d102      	bne.n	801c3c6 <SCSI_RequestSense+0x22>
  {
    return -1;
 801c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c3c4:	e069      	b.n	801c49a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c3c6:	693b      	ldr	r3, [r7, #16]
 801c3c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d10a      	bne.n	801c3e6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c3d0:	693b      	ldr	r3, [r7, #16]
 801c3d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c3d6:	2320      	movs	r3, #32
 801c3d8:	2205      	movs	r2, #5
 801c3da:	68f8      	ldr	r0, [r7, #12]
 801c3dc:	f000 f861 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801c3e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c3e4:	e059      	b.n	801c49a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c3e6:	2300      	movs	r3, #0
 801c3e8:	75fb      	strb	r3, [r7, #23]
 801c3ea:	e007      	b.n	801c3fc <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801c3ec:	7dfb      	ldrb	r3, [r7, #23]
 801c3ee:	693a      	ldr	r2, [r7, #16]
 801c3f0:	4413      	add	r3, r2
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c3f6:	7dfb      	ldrb	r3, [r7, #23]
 801c3f8:	3301      	adds	r3, #1
 801c3fa:	75fb      	strb	r3, [r7, #23]
 801c3fc:	7dfb      	ldrb	r3, [r7, #23]
 801c3fe:	2b11      	cmp	r3, #17
 801c400:	d9f4      	bls.n	801c3ec <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 801c402:	693b      	ldr	r3, [r7, #16]
 801c404:	2270      	movs	r2, #112	; 0x70
 801c406:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801c408:	693b      	ldr	r3, [r7, #16]
 801c40a:	220c      	movs	r2, #12
 801c40c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801c40e:	693b      	ldr	r3, [r7, #16]
 801c410:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801c414:	693b      	ldr	r3, [r7, #16]
 801c416:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c41a:	429a      	cmp	r2, r3
 801c41c:	d02e      	beq.n	801c47c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801c41e:	693b      	ldr	r3, [r7, #16]
 801c420:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c424:	461a      	mov	r2, r3
 801c426:	693b      	ldr	r3, [r7, #16]
 801c428:	3248      	adds	r2, #72	; 0x48
 801c42a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801c42e:	693b      	ldr	r3, [r7, #16]
 801c430:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801c432:	693b      	ldr	r3, [r7, #16]
 801c434:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c438:	693a      	ldr	r2, [r7, #16]
 801c43a:	3348      	adds	r3, #72	; 0x48
 801c43c:	00db      	lsls	r3, r3, #3
 801c43e:	4413      	add	r3, r2
 801c440:	791a      	ldrb	r2, [r3, #4]
 801c442:	693b      	ldr	r3, [r7, #16]
 801c444:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801c446:	693b      	ldr	r3, [r7, #16]
 801c448:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c44c:	693a      	ldr	r2, [r7, #16]
 801c44e:	3348      	adds	r3, #72	; 0x48
 801c450:	00db      	lsls	r3, r3, #3
 801c452:	4413      	add	r3, r2
 801c454:	795a      	ldrb	r2, [r3, #5]
 801c456:	693b      	ldr	r3, [r7, #16]
 801c458:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801c45a:	693b      	ldr	r3, [r7, #16]
 801c45c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c460:	3301      	adds	r3, #1
 801c462:	b2da      	uxtb	r2, r3
 801c464:	693b      	ldr	r3, [r7, #16]
 801c466:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801c46a:	693b      	ldr	r3, [r7, #16]
 801c46c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c470:	2b04      	cmp	r3, #4
 801c472:	d103      	bne.n	801c47c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 801c474:	693b      	ldr	r3, [r7, #16]
 801c476:	2200      	movs	r2, #0
 801c478:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801c47c:	693b      	ldr	r3, [r7, #16]
 801c47e:	2212      	movs	r2, #18
 801c480:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	3304      	adds	r3, #4
 801c486:	781b      	ldrb	r3, [r3, #0]
 801c488:	2b12      	cmp	r3, #18
 801c48a:	d805      	bhi.n	801c498 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	3304      	adds	r3, #4
 801c490:	781b      	ldrb	r3, [r3, #0]
 801c492:	461a      	mov	r2, r3
 801c494:	693b      	ldr	r3, [r7, #16]
 801c496:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801c498:	2300      	movs	r3, #0
}
 801c49a:	4618      	mov	r0, r3
 801c49c:	3718      	adds	r7, #24
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bd80      	pop	{r7, pc}

0801c4a2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801c4a2:	b480      	push	{r7}
 801c4a4:	b085      	sub	sp, #20
 801c4a6:	af00      	add	r7, sp, #0
 801c4a8:	6078      	str	r0, [r7, #4]
 801c4aa:	4608      	mov	r0, r1
 801c4ac:	4611      	mov	r1, r2
 801c4ae:	461a      	mov	r2, r3
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	70fb      	strb	r3, [r7, #3]
 801c4b4:	460b      	mov	r3, r1
 801c4b6:	70bb      	strb	r3, [r7, #2]
 801c4b8:	4613      	mov	r3, r2
 801c4ba:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c4c2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d02c      	beq.n	801c524 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c4d0:	461a      	mov	r2, r3
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	3248      	adds	r2, #72	; 0x48
 801c4d6:	78b9      	ldrb	r1, [r7, #2]
 801c4d8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c4e2:	68fa      	ldr	r2, [r7, #12]
 801c4e4:	3348      	adds	r3, #72	; 0x48
 801c4e6:	00db      	lsls	r3, r3, #3
 801c4e8:	4413      	add	r3, r2
 801c4ea:	787a      	ldrb	r2, [r7, #1]
 801c4ec:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c4f4:	68fa      	ldr	r2, [r7, #12]
 801c4f6:	3348      	adds	r3, #72	; 0x48
 801c4f8:	00db      	lsls	r3, r3, #3
 801c4fa:	4413      	add	r3, r2
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c506:	3301      	adds	r3, #1
 801c508:	b2da      	uxtb	r2, r3
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c516:	2b04      	cmp	r3, #4
 801c518:	d105      	bne.n	801c526 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	2200      	movs	r2, #0
 801c51e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801c522:	e000      	b.n	801c526 <SCSI_SenseCode+0x84>
    return;
 801c524:	bf00      	nop
  }
}
 801c526:	3714      	adds	r7, #20
 801c528:	46bd      	mov	sp, r7
 801c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c52e:	4770      	bx	lr

0801c530 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b086      	sub	sp, #24
 801c534:	af00      	add	r7, sp, #0
 801c536:	60f8      	str	r0, [r7, #12]
 801c538:	460b      	mov	r3, r1
 801c53a:	607a      	str	r2, [r7, #4]
 801c53c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c544:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c546:	697b      	ldr	r3, [r7, #20]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d102      	bne.n	801c552 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801c54c:	f04f 33ff 	mov.w	r3, #4294967295
 801c550:	e03b      	b.n	801c5ca <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c558:	2b01      	cmp	r3, #1
 801c55a:	d10f      	bne.n	801c57c <SCSI_StartStopUnit+0x4c>
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	3304      	adds	r3, #4
 801c560:	781b      	ldrb	r3, [r3, #0]
 801c562:	f003 0303 	and.w	r3, r3, #3
 801c566:	2b02      	cmp	r3, #2
 801c568:	d108      	bne.n	801c57c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801c56a:	7af9      	ldrb	r1, [r7, #11]
 801c56c:	2324      	movs	r3, #36	; 0x24
 801c56e:	2205      	movs	r2, #5
 801c570:	68f8      	ldr	r0, [r7, #12]
 801c572:	f7ff ff96 	bl	801c4a2 <SCSI_SenseCode>

    return -1;
 801c576:	f04f 33ff 	mov.w	r3, #4294967295
 801c57a:	e026      	b.n	801c5ca <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	3304      	adds	r3, #4
 801c580:	781b      	ldrb	r3, [r3, #0]
 801c582:	f003 0303 	and.w	r3, r3, #3
 801c586:	2b01      	cmp	r3, #1
 801c588:	d104      	bne.n	801c594 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c58a:	697b      	ldr	r3, [r7, #20]
 801c58c:	2200      	movs	r2, #0
 801c58e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c592:	e016      	b.n	801c5c2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	3304      	adds	r3, #4
 801c598:	781b      	ldrb	r3, [r3, #0]
 801c59a:	f003 0303 	and.w	r3, r3, #3
 801c59e:	2b02      	cmp	r3, #2
 801c5a0:	d104      	bne.n	801c5ac <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801c5a2:	697b      	ldr	r3, [r7, #20]
 801c5a4:	2202      	movs	r2, #2
 801c5a6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c5aa:	e00a      	b.n	801c5c2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	3304      	adds	r3, #4
 801c5b0:	781b      	ldrb	r3, [r3, #0]
 801c5b2:	f003 0303 	and.w	r3, r3, #3
 801c5b6:	2b03      	cmp	r3, #3
 801c5b8:	d103      	bne.n	801c5c2 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	2200      	movs	r2, #0
 801c5be:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801c5c2:	697b      	ldr	r3, [r7, #20]
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	60da      	str	r2, [r3, #12]

  return 0;
 801c5c8:	2300      	movs	r3, #0
}
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	3718      	adds	r7, #24
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	bd80      	pop	{r7, pc}

0801c5d2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c5d2:	b480      	push	{r7}
 801c5d4:	b087      	sub	sp, #28
 801c5d6:	af00      	add	r7, sp, #0
 801c5d8:	60f8      	str	r0, [r7, #12]
 801c5da:	460b      	mov	r3, r1
 801c5dc:	607a      	str	r2, [r7, #4]
 801c5de:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c5e6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c5e8:	697b      	ldr	r3, [r7, #20]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d102      	bne.n	801c5f4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801c5ee:	f04f 33ff 	mov.w	r3, #4294967295
 801c5f2:	e011      	b.n	801c618 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	3304      	adds	r3, #4
 801c5f8:	781b      	ldrb	r3, [r3, #0]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d104      	bne.n	801c608 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c5fe:	697b      	ldr	r3, [r7, #20]
 801c600:	2200      	movs	r2, #0
 801c602:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c606:	e003      	b.n	801c610 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801c608:	697b      	ldr	r3, [r7, #20]
 801c60a:	2201      	movs	r2, #1
 801c60c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801c610:	697b      	ldr	r3, [r7, #20]
 801c612:	2200      	movs	r2, #0
 801c614:	60da      	str	r2, [r3, #12]

  return 0;
 801c616:	2300      	movs	r3, #0
}
 801c618:	4618      	mov	r0, r3
 801c61a:	371c      	adds	r7, #28
 801c61c:	46bd      	mov	sp, r7
 801c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c622:	4770      	bx	lr

0801c624 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c624:	b580      	push	{r7, lr}
 801c626:	b086      	sub	sp, #24
 801c628:	af00      	add	r7, sp, #0
 801c62a:	60f8      	str	r0, [r7, #12]
 801c62c:	460b      	mov	r3, r1
 801c62e:	607a      	str	r2, [r7, #4]
 801c630:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c638:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c63a:	697b      	ldr	r3, [r7, #20]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d102      	bne.n	801c646 <SCSI_Read10+0x22>
  {
    return -1;
 801c640:	f04f 33ff 	mov.w	r3, #4294967295
 801c644:	e08a      	b.n	801c75c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c646:	697b      	ldr	r3, [r7, #20]
 801c648:	7a1b      	ldrb	r3, [r3, #8]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d17c      	bne.n	801c748 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c64e:	697b      	ldr	r3, [r7, #20]
 801c650:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c654:	b25b      	sxtb	r3, r3
 801c656:	2b00      	cmp	r3, #0
 801c658:	db0a      	blt.n	801c670 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c65a:	697b      	ldr	r3, [r7, #20]
 801c65c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c660:	2320      	movs	r3, #32
 801c662:	2205      	movs	r2, #5
 801c664:	68f8      	ldr	r0, [r7, #12]
 801c666:	f7ff ff1c 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c66a:	f04f 33ff 	mov.w	r3, #4294967295
 801c66e:	e075      	b.n	801c75c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c670:	697b      	ldr	r3, [r7, #20]
 801c672:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c676:	2b02      	cmp	r3, #2
 801c678:	d108      	bne.n	801c68c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c67a:	7af9      	ldrb	r1, [r7, #11]
 801c67c:	233a      	movs	r3, #58	; 0x3a
 801c67e:	2202      	movs	r2, #2
 801c680:	68f8      	ldr	r0, [r7, #12]
 801c682:	f7ff ff0e 	bl	801c4a2 <SCSI_SenseCode>

      return -1;
 801c686:	f04f 33ff 	mov.w	r3, #4294967295
 801c68a:	e067      	b.n	801c75c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c692:	689b      	ldr	r3, [r3, #8]
 801c694:	7afa      	ldrb	r2, [r7, #11]
 801c696:	4610      	mov	r0, r2
 801c698:	4798      	blx	r3
 801c69a:	4603      	mov	r3, r0
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d008      	beq.n	801c6b2 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c6a0:	7af9      	ldrb	r1, [r7, #11]
 801c6a2:	233a      	movs	r3, #58	; 0x3a
 801c6a4:	2202      	movs	r2, #2
 801c6a6:	68f8      	ldr	r0, [r7, #12]
 801c6a8:	f7ff fefb 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c6ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c6b0:	e054      	b.n	801c75c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	3302      	adds	r3, #2
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	3303      	adds	r3, #3
 801c6be:	781b      	ldrb	r3, [r3, #0]
 801c6c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c6c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	3304      	adds	r3, #4
 801c6c8:	781b      	ldrb	r3, [r3, #0]
 801c6ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c6cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c6ce:	687a      	ldr	r2, [r7, #4]
 801c6d0:	3205      	adds	r2, #5
 801c6d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c6d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c6d6:	697b      	ldr	r3, [r7, #20]
 801c6d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	3307      	adds	r3, #7
 801c6e0:	781b      	ldrb	r3, [r3, #0]
 801c6e2:	021b      	lsls	r3, r3, #8
 801c6e4:	687a      	ldr	r2, [r7, #4]
 801c6e6:	3208      	adds	r2, #8
 801c6e8:	7812      	ldrb	r2, [r2, #0]
 801c6ea:	431a      	orrs	r2, r3
 801c6ec:	697b      	ldr	r3, [r7, #20]
 801c6ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c6f2:	697b      	ldr	r3, [r7, #20]
 801c6f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c6fe:	7af9      	ldrb	r1, [r7, #11]
 801c700:	68f8      	ldr	r0, [r7, #12]
 801c702:	f000 faad 	bl	801cc60 <SCSI_CheckAddressRange>
 801c706:	4603      	mov	r3, r0
 801c708:	2b00      	cmp	r3, #0
 801c70a:	da02      	bge.n	801c712 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c70c:	f04f 33ff 	mov.w	r3, #4294967295
 801c710:	e024      	b.n	801c75c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c712:	697b      	ldr	r3, [r7, #20]
 801c714:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c71e:	6979      	ldr	r1, [r7, #20]
 801c720:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c724:	fb01 f303 	mul.w	r3, r1, r3
 801c728:	429a      	cmp	r2, r3
 801c72a:	d00a      	beq.n	801c742 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c72c:	697b      	ldr	r3, [r7, #20]
 801c72e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c732:	2320      	movs	r3, #32
 801c734:	2205      	movs	r2, #5
 801c736:	68f8      	ldr	r0, [r7, #12]
 801c738:	f7ff feb3 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c73c:	f04f 33ff 	mov.w	r3, #4294967295
 801c740:	e00c      	b.n	801c75c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c742:	697b      	ldr	r3, [r7, #20]
 801c744:	2202      	movs	r2, #2
 801c746:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c748:	697b      	ldr	r3, [r7, #20]
 801c74a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c74e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c750:	7afb      	ldrb	r3, [r7, #11]
 801c752:	4619      	mov	r1, r3
 801c754:	68f8      	ldr	r0, [r7, #12]
 801c756:	f000 faab 	bl	801ccb0 <SCSI_ProcessRead>
 801c75a:	4603      	mov	r3, r0
}
 801c75c:	4618      	mov	r0, r3
 801c75e:	3718      	adds	r7, #24
 801c760:	46bd      	mov	sp, r7
 801c762:	bd80      	pop	{r7, pc}

0801c764 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c764:	b580      	push	{r7, lr}
 801c766:	b086      	sub	sp, #24
 801c768:	af00      	add	r7, sp, #0
 801c76a:	60f8      	str	r0, [r7, #12]
 801c76c:	460b      	mov	r3, r1
 801c76e:	607a      	str	r2, [r7, #4]
 801c770:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c778:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c77a:	697b      	ldr	r3, [r7, #20]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d102      	bne.n	801c786 <SCSI_Read12+0x22>
  {
    return -1;
 801c780:	f04f 33ff 	mov.w	r3, #4294967295
 801c784:	e095      	b.n	801c8b2 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c786:	697b      	ldr	r3, [r7, #20]
 801c788:	7a1b      	ldrb	r3, [r3, #8]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	f040 8087 	bne.w	801c89e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c790:	697b      	ldr	r3, [r7, #20]
 801c792:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c796:	b25b      	sxtb	r3, r3
 801c798:	2b00      	cmp	r3, #0
 801c79a:	db0a      	blt.n	801c7b2 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c79c:	697b      	ldr	r3, [r7, #20]
 801c79e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c7a2:	2320      	movs	r3, #32
 801c7a4:	2205      	movs	r2, #5
 801c7a6:	68f8      	ldr	r0, [r7, #12]
 801c7a8:	f7ff fe7b 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c7b0:	e07f      	b.n	801c8b2 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c7b2:	697b      	ldr	r3, [r7, #20]
 801c7b4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c7b8:	2b02      	cmp	r3, #2
 801c7ba:	d108      	bne.n	801c7ce <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c7bc:	7af9      	ldrb	r1, [r7, #11]
 801c7be:	233a      	movs	r3, #58	; 0x3a
 801c7c0:	2202      	movs	r2, #2
 801c7c2:	68f8      	ldr	r0, [r7, #12]
 801c7c4:	f7ff fe6d 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c7c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c7cc:	e071      	b.n	801c8b2 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c7d4:	689b      	ldr	r3, [r3, #8]
 801c7d6:	7afa      	ldrb	r2, [r7, #11]
 801c7d8:	4610      	mov	r0, r2
 801c7da:	4798      	blx	r3
 801c7dc:	4603      	mov	r3, r0
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d008      	beq.n	801c7f4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c7e2:	7af9      	ldrb	r1, [r7, #11]
 801c7e4:	233a      	movs	r3, #58	; 0x3a
 801c7e6:	2202      	movs	r2, #2
 801c7e8:	68f8      	ldr	r0, [r7, #12]
 801c7ea:	f7ff fe5a 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c7ee:	f04f 33ff 	mov.w	r3, #4294967295
 801c7f2:	e05e      	b.n	801c8b2 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	3302      	adds	r3, #2
 801c7f8:	781b      	ldrb	r3, [r3, #0]
 801c7fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	3303      	adds	r3, #3
 801c800:	781b      	ldrb	r3, [r3, #0]
 801c802:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c804:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	3304      	adds	r3, #4
 801c80a:	781b      	ldrb	r3, [r3, #0]
 801c80c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c80e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c810:	687a      	ldr	r2, [r7, #4]
 801c812:	3205      	adds	r2, #5
 801c814:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c816:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c818:	697b      	ldr	r3, [r7, #20]
 801c81a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	3306      	adds	r3, #6
 801c822:	781b      	ldrb	r3, [r3, #0]
 801c824:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	3307      	adds	r3, #7
 801c82a:	781b      	ldrb	r3, [r3, #0]
 801c82c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c82e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	3308      	adds	r3, #8
 801c834:	781b      	ldrb	r3, [r3, #0]
 801c836:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801c838:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801c83a:	687a      	ldr	r2, [r7, #4]
 801c83c:	3209      	adds	r2, #9
 801c83e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801c840:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c842:	697b      	ldr	r3, [r7, #20]
 801c844:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c848:	697b      	ldr	r3, [r7, #20]
 801c84a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c84e:	697b      	ldr	r3, [r7, #20]
 801c850:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c854:	7af9      	ldrb	r1, [r7, #11]
 801c856:	68f8      	ldr	r0, [r7, #12]
 801c858:	f000 fa02 	bl	801cc60 <SCSI_CheckAddressRange>
 801c85c:	4603      	mov	r3, r0
 801c85e:	2b00      	cmp	r3, #0
 801c860:	da02      	bge.n	801c868 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c862:	f04f 33ff 	mov.w	r3, #4294967295
 801c866:	e024      	b.n	801c8b2 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c868:	697b      	ldr	r3, [r7, #20]
 801c86a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c874:	6979      	ldr	r1, [r7, #20]
 801c876:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c87a:	fb01 f303 	mul.w	r3, r1, r3
 801c87e:	429a      	cmp	r2, r3
 801c880:	d00a      	beq.n	801c898 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c882:	697b      	ldr	r3, [r7, #20]
 801c884:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c888:	2320      	movs	r3, #32
 801c88a:	2205      	movs	r2, #5
 801c88c:	68f8      	ldr	r0, [r7, #12]
 801c88e:	f7ff fe08 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c892:	f04f 33ff 	mov.w	r3, #4294967295
 801c896:	e00c      	b.n	801c8b2 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c898:	697b      	ldr	r3, [r7, #20]
 801c89a:	2202      	movs	r2, #2
 801c89c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c89e:	697b      	ldr	r3, [r7, #20]
 801c8a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c8a4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c8a6:	7afb      	ldrb	r3, [r7, #11]
 801c8a8:	4619      	mov	r1, r3
 801c8aa:	68f8      	ldr	r0, [r7, #12]
 801c8ac:	f000 fa00 	bl	801ccb0 <SCSI_ProcessRead>
 801c8b0:	4603      	mov	r3, r0
}
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	3718      	adds	r7, #24
 801c8b6:	46bd      	mov	sp, r7
 801c8b8:	bd80      	pop	{r7, pc}

0801c8ba <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c8ba:	b580      	push	{r7, lr}
 801c8bc:	b086      	sub	sp, #24
 801c8be:	af00      	add	r7, sp, #0
 801c8c0:	60f8      	str	r0, [r7, #12]
 801c8c2:	460b      	mov	r3, r1
 801c8c4:	607a      	str	r2, [r7, #4]
 801c8c6:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c8ce:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801c8d0:	697b      	ldr	r3, [r7, #20]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d102      	bne.n	801c8dc <SCSI_Write10+0x22>
  {
    return -1;
 801c8d6:	f04f 33ff 	mov.w	r3, #4294967295
 801c8da:	e0af      	b.n	801ca3c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c8dc:	697b      	ldr	r3, [r7, #20]
 801c8de:	7a1b      	ldrb	r3, [r3, #8]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	f040 80a5 	bne.w	801ca30 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801c8e6:	697b      	ldr	r3, [r7, #20]
 801c8e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d10a      	bne.n	801c906 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c8f0:	697b      	ldr	r3, [r7, #20]
 801c8f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c8f6:	2320      	movs	r3, #32
 801c8f8:	2205      	movs	r2, #5
 801c8fa:	68f8      	ldr	r0, [r7, #12]
 801c8fc:	f7ff fdd1 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c900:	f04f 33ff 	mov.w	r3, #4294967295
 801c904:	e09a      	b.n	801ca3c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c90c:	b25b      	sxtb	r3, r3
 801c90e:	2b00      	cmp	r3, #0
 801c910:	da0a      	bge.n	801c928 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c912:	697b      	ldr	r3, [r7, #20]
 801c914:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c918:	2320      	movs	r3, #32
 801c91a:	2205      	movs	r2, #5
 801c91c:	68f8      	ldr	r0, [r7, #12]
 801c91e:	f7ff fdc0 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c922:	f04f 33ff 	mov.w	r3, #4294967295
 801c926:	e089      	b.n	801ca3c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c92e:	689b      	ldr	r3, [r3, #8]
 801c930:	7afa      	ldrb	r2, [r7, #11]
 801c932:	4610      	mov	r0, r2
 801c934:	4798      	blx	r3
 801c936:	4603      	mov	r3, r0
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d008      	beq.n	801c94e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c93c:	7af9      	ldrb	r1, [r7, #11]
 801c93e:	233a      	movs	r3, #58	; 0x3a
 801c940:	2202      	movs	r2, #2
 801c942:	68f8      	ldr	r0, [r7, #12]
 801c944:	f7ff fdad 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c948:	f04f 33ff 	mov.w	r3, #4294967295
 801c94c:	e076      	b.n	801ca3c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c954:	68db      	ldr	r3, [r3, #12]
 801c956:	7afa      	ldrb	r2, [r7, #11]
 801c958:	4610      	mov	r0, r2
 801c95a:	4798      	blx	r3
 801c95c:	4603      	mov	r3, r0
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d008      	beq.n	801c974 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801c962:	7af9      	ldrb	r1, [r7, #11]
 801c964:	2327      	movs	r3, #39	; 0x27
 801c966:	2202      	movs	r2, #2
 801c968:	68f8      	ldr	r0, [r7, #12]
 801c96a:	f7ff fd9a 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801c96e:	f04f 33ff 	mov.w	r3, #4294967295
 801c972:	e063      	b.n	801ca3c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	3302      	adds	r3, #2
 801c978:	781b      	ldrb	r3, [r3, #0]
 801c97a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	3303      	adds	r3, #3
 801c980:	781b      	ldrb	r3, [r3, #0]
 801c982:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c984:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	3304      	adds	r3, #4
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c98e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c990:	687a      	ldr	r2, [r7, #4]
 801c992:	3205      	adds	r2, #5
 801c994:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801c996:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c998:	697b      	ldr	r3, [r7, #20]
 801c99a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	3307      	adds	r3, #7
 801c9a2:	781b      	ldrb	r3, [r3, #0]
 801c9a4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801c9a6:	687a      	ldr	r2, [r7, #4]
 801c9a8:	3208      	adds	r2, #8
 801c9aa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801c9ac:	431a      	orrs	r2, r3
 801c9ae:	697b      	ldr	r3, [r7, #20]
 801c9b0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c9b4:	697b      	ldr	r3, [r7, #20]
 801c9b6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c9ba:	697b      	ldr	r3, [r7, #20]
 801c9bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c9c0:	7af9      	ldrb	r1, [r7, #11]
 801c9c2:	68f8      	ldr	r0, [r7, #12]
 801c9c4:	f000 f94c 	bl	801cc60 <SCSI_CheckAddressRange>
 801c9c8:	4603      	mov	r3, r0
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	da02      	bge.n	801c9d4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c9ce:	f04f 33ff 	mov.w	r3, #4294967295
 801c9d2:	e033      	b.n	801ca3c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801c9d4:	697b      	ldr	r3, [r7, #20]
 801c9d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c9da:	697a      	ldr	r2, [r7, #20]
 801c9dc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801c9e0:	fb02 f303 	mul.w	r3, r2, r3
 801c9e4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801c9e6:	697b      	ldr	r3, [r7, #20]
 801c9e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c9ec:	693a      	ldr	r2, [r7, #16]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	d00a      	beq.n	801ca08 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c9f2:	697b      	ldr	r3, [r7, #20]
 801c9f4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c9f8:	2320      	movs	r3, #32
 801c9fa:	2205      	movs	r2, #5
 801c9fc:	68f8      	ldr	r0, [r7, #12]
 801c9fe:	f7ff fd50 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801ca02:	f04f 33ff 	mov.w	r3, #4294967295
 801ca06:	e019      	b.n	801ca3c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801ca08:	693b      	ldr	r3, [r7, #16]
 801ca0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ca0e:	bf28      	it	cs
 801ca10:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801ca14:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801ca16:	697b      	ldr	r3, [r7, #20]
 801ca18:	2201      	movs	r2, #1
 801ca1a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801ca1c:	697b      	ldr	r3, [r7, #20]
 801ca1e:	f103 0210 	add.w	r2, r3, #16
 801ca22:	693b      	ldr	r3, [r7, #16]
 801ca24:	2101      	movs	r1, #1
 801ca26:	68f8      	ldr	r0, [r7, #12]
 801ca28:	f7fd f95a 	bl	8019ce0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	e005      	b.n	801ca3c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 801ca30:	7afb      	ldrb	r3, [r7, #11]
 801ca32:	4619      	mov	r1, r3
 801ca34:	68f8      	ldr	r0, [r7, #12]
 801ca36:	f000 f9b4 	bl	801cda2 <SCSI_ProcessWrite>
 801ca3a:	4603      	mov	r3, r0
}
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	3718      	adds	r7, #24
 801ca40:	46bd      	mov	sp, r7
 801ca42:	bd80      	pop	{r7, pc}

0801ca44 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b086      	sub	sp, #24
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	60f8      	str	r0, [r7, #12]
 801ca4c:	460b      	mov	r3, r1
 801ca4e:	607a      	str	r2, [r7, #4]
 801ca50:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ca58:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801ca5a:	697b      	ldr	r3, [r7, #20]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d102      	bne.n	801ca66 <SCSI_Write12+0x22>
  {
    return -1;
 801ca60:	f04f 33ff 	mov.w	r3, #4294967295
 801ca64:	e0bf      	b.n	801cbe6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	7a1b      	ldrb	r3, [r3, #8]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	f040 80b5 	bne.w	801cbda <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801ca70:	697b      	ldr	r3, [r7, #20]
 801ca72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d10a      	bne.n	801ca90 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ca7a:	697b      	ldr	r3, [r7, #20]
 801ca7c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ca80:	2320      	movs	r3, #32
 801ca82:	2205      	movs	r2, #5
 801ca84:	68f8      	ldr	r0, [r7, #12]
 801ca86:	f7ff fd0c 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801ca8a:	f04f 33ff 	mov.w	r3, #4294967295
 801ca8e:	e0aa      	b.n	801cbe6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801ca90:	697b      	ldr	r3, [r7, #20]
 801ca92:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801ca96:	b25b      	sxtb	r3, r3
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	da0a      	bge.n	801cab2 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ca9c:	697b      	ldr	r3, [r7, #20]
 801ca9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801caa2:	2320      	movs	r3, #32
 801caa4:	2205      	movs	r2, #5
 801caa6:	68f8      	ldr	r0, [r7, #12]
 801caa8:	f7ff fcfb 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801caac:	f04f 33ff 	mov.w	r3, #4294967295
 801cab0:	e099      	b.n	801cbe6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cab8:	689b      	ldr	r3, [r3, #8]
 801caba:	7afa      	ldrb	r2, [r7, #11]
 801cabc:	4610      	mov	r0, r2
 801cabe:	4798      	blx	r3
 801cac0:	4603      	mov	r3, r0
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d00b      	beq.n	801cade <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801cac6:	7af9      	ldrb	r1, [r7, #11]
 801cac8:	233a      	movs	r3, #58	; 0x3a
 801caca:	2202      	movs	r2, #2
 801cacc:	68f8      	ldr	r0, [r7, #12]
 801cace:	f7ff fce8 	bl	801c4a2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801cad2:	697b      	ldr	r3, [r7, #20]
 801cad4:	2205      	movs	r2, #5
 801cad6:	721a      	strb	r2, [r3, #8]
      return -1;
 801cad8:	f04f 33ff 	mov.w	r3, #4294967295
 801cadc:	e083      	b.n	801cbe6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cae4:	68db      	ldr	r3, [r3, #12]
 801cae6:	7afa      	ldrb	r2, [r7, #11]
 801cae8:	4610      	mov	r0, r2
 801caea:	4798      	blx	r3
 801caec:	4603      	mov	r3, r0
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d00b      	beq.n	801cb0a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801caf2:	7af9      	ldrb	r1, [r7, #11]
 801caf4:	2327      	movs	r3, #39	; 0x27
 801caf6:	2202      	movs	r2, #2
 801caf8:	68f8      	ldr	r0, [r7, #12]
 801cafa:	f7ff fcd2 	bl	801c4a2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801cafe:	697b      	ldr	r3, [r7, #20]
 801cb00:	2205      	movs	r2, #5
 801cb02:	721a      	strb	r2, [r3, #8]
      return -1;
 801cb04:	f04f 33ff 	mov.w	r3, #4294967295
 801cb08:	e06d      	b.n	801cbe6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	3302      	adds	r3, #2
 801cb0e:	781b      	ldrb	r3, [r3, #0]
 801cb10:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	3303      	adds	r3, #3
 801cb16:	781b      	ldrb	r3, [r3, #0]
 801cb18:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cb1a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	3304      	adds	r3, #4
 801cb20:	781b      	ldrb	r3, [r3, #0]
 801cb22:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801cb24:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801cb26:	687a      	ldr	r2, [r7, #4]
 801cb28:	3205      	adds	r2, #5
 801cb2a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801cb2c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cb2e:	697b      	ldr	r3, [r7, #20]
 801cb30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	3306      	adds	r3, #6
 801cb38:	781b      	ldrb	r3, [r3, #0]
 801cb3a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	3307      	adds	r3, #7
 801cb40:	781b      	ldrb	r3, [r3, #0]
 801cb42:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cb44:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	3308      	adds	r3, #8
 801cb4a:	781b      	ldrb	r3, [r3, #0]
 801cb4c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801cb4e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801cb50:	687a      	ldr	r2, [r7, #4]
 801cb52:	3209      	adds	r2, #9
 801cb54:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801cb56:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cb58:	697b      	ldr	r3, [r7, #20]
 801cb5a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801cb5e:	697b      	ldr	r3, [r7, #20]
 801cb60:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cb64:	697b      	ldr	r3, [r7, #20]
 801cb66:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cb6a:	7af9      	ldrb	r1, [r7, #11]
 801cb6c:	68f8      	ldr	r0, [r7, #12]
 801cb6e:	f000 f877 	bl	801cc60 <SCSI_CheckAddressRange>
 801cb72:	4603      	mov	r3, r0
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	da02      	bge.n	801cb7e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801cb78:	f04f 33ff 	mov.w	r3, #4294967295
 801cb7c:	e033      	b.n	801cbe6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cb7e:	697b      	ldr	r3, [r7, #20]
 801cb80:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cb84:	697a      	ldr	r2, [r7, #20]
 801cb86:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cb8a:	fb02 f303 	mul.w	r3, r2, r3
 801cb8e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cb96:	693a      	ldr	r2, [r7, #16]
 801cb98:	429a      	cmp	r2, r3
 801cb9a:	d00a      	beq.n	801cbb2 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cb9c:	697b      	ldr	r3, [r7, #20]
 801cb9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cba2:	2320      	movs	r3, #32
 801cba4:	2205      	movs	r2, #5
 801cba6:	68f8      	ldr	r0, [r7, #12]
 801cba8:	f7ff fc7b 	bl	801c4a2 <SCSI_SenseCode>
      return -1;
 801cbac:	f04f 33ff 	mov.w	r3, #4294967295
 801cbb0:	e019      	b.n	801cbe6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801cbb2:	693b      	ldr	r3, [r7, #16]
 801cbb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cbb8:	bf28      	it	cs
 801cbba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cbbe:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cbc0:	697b      	ldr	r3, [r7, #20]
 801cbc2:	2201      	movs	r2, #1
 801cbc4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cbc6:	697b      	ldr	r3, [r7, #20]
 801cbc8:	f103 0210 	add.w	r2, r3, #16
 801cbcc:	693b      	ldr	r3, [r7, #16]
 801cbce:	2101      	movs	r1, #1
 801cbd0:	68f8      	ldr	r0, [r7, #12]
 801cbd2:	f7fd f885 	bl	8019ce0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	e005      	b.n	801cbe6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 801cbda:	7afb      	ldrb	r3, [r7, #11]
 801cbdc:	4619      	mov	r1, r3
 801cbde:	68f8      	ldr	r0, [r7, #12]
 801cbe0:	f000 f8df 	bl	801cda2 <SCSI_ProcessWrite>
 801cbe4:	4603      	mov	r3, r0
}
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	3718      	adds	r7, #24
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}

0801cbee <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cbee:	b580      	push	{r7, lr}
 801cbf0:	b086      	sub	sp, #24
 801cbf2:	af00      	add	r7, sp, #0
 801cbf4:	60f8      	str	r0, [r7, #12]
 801cbf6:	460b      	mov	r3, r1
 801cbf8:	607a      	str	r2, [r7, #4]
 801cbfa:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc02:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cc04:	697b      	ldr	r3, [r7, #20]
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d102      	bne.n	801cc10 <SCSI_Verify10+0x22>
  {
    return -1;
 801cc0a:	f04f 33ff 	mov.w	r3, #4294967295
 801cc0e:	e023      	b.n	801cc58 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	3301      	adds	r3, #1
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	f003 0302 	and.w	r3, r3, #2
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d008      	beq.n	801cc30 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801cc1e:	7af9      	ldrb	r1, [r7, #11]
 801cc20:	2324      	movs	r3, #36	; 0x24
 801cc22:	2205      	movs	r2, #5
 801cc24:	68f8      	ldr	r0, [r7, #12]
 801cc26:	f7ff fc3c 	bl	801c4a2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801cc2a:	f04f 33ff 	mov.w	r3, #4294967295
 801cc2e:	e013      	b.n	801cc58 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801cc30:	697b      	ldr	r3, [r7, #20]
 801cc32:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cc36:	697b      	ldr	r3, [r7, #20]
 801cc38:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cc3c:	7af9      	ldrb	r1, [r7, #11]
 801cc3e:	68f8      	ldr	r0, [r7, #12]
 801cc40:	f000 f80e 	bl	801cc60 <SCSI_CheckAddressRange>
 801cc44:	4603      	mov	r3, r0
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	da02      	bge.n	801cc50 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801cc4a:	f04f 33ff 	mov.w	r3, #4294967295
 801cc4e:	e003      	b.n	801cc58 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 801cc50:	697b      	ldr	r3, [r7, #20]
 801cc52:	2200      	movs	r2, #0
 801cc54:	60da      	str	r2, [r3, #12]

  return 0;
 801cc56:	2300      	movs	r3, #0
}
 801cc58:	4618      	mov	r0, r3
 801cc5a:	3718      	adds	r7, #24
 801cc5c:	46bd      	mov	sp, r7
 801cc5e:	bd80      	pop	{r7, pc}

0801cc60 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b086      	sub	sp, #24
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	60f8      	str	r0, [r7, #12]
 801cc68:	607a      	str	r2, [r7, #4]
 801cc6a:	603b      	str	r3, [r7, #0]
 801cc6c:	460b      	mov	r3, r1
 801cc6e:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc76:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cc78:	697b      	ldr	r3, [r7, #20]
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d102      	bne.n	801cc84 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801cc7e:	f04f 33ff 	mov.w	r3, #4294967295
 801cc82:	e011      	b.n	801cca8 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801cc84:	687a      	ldr	r2, [r7, #4]
 801cc86:	683b      	ldr	r3, [r7, #0]
 801cc88:	441a      	add	r2, r3
 801cc8a:	697b      	ldr	r3, [r7, #20]
 801cc8c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801cc90:	429a      	cmp	r2, r3
 801cc92:	d908      	bls.n	801cca6 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801cc94:	7af9      	ldrb	r1, [r7, #11]
 801cc96:	2321      	movs	r3, #33	; 0x21
 801cc98:	2205      	movs	r2, #5
 801cc9a:	68f8      	ldr	r0, [r7, #12]
 801cc9c:	f7ff fc01 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801cca0:	f04f 33ff 	mov.w	r3, #4294967295
 801cca4:	e000      	b.n	801cca8 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 801cca6:	2300      	movs	r3, #0
}
 801cca8:	4618      	mov	r0, r3
 801ccaa:	3718      	adds	r7, #24
 801ccac:	46bd      	mov	sp, r7
 801ccae:	bd80      	pop	{r7, pc}

0801ccb0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801ccb0:	b590      	push	{r4, r7, lr}
 801ccb2:	b085      	sub	sp, #20
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
 801ccb8:	460b      	mov	r3, r1
 801ccba:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ccc2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ccca:	68fa      	ldr	r2, [r7, #12]
 801cccc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801ccd0:	fb02 f303 	mul.w	r3, r2, r3
 801ccd4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801ccd6:	68fb      	ldr	r3, [r7, #12]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d102      	bne.n	801cce2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 801ccdc:	f04f 33ff 	mov.w	r3, #4294967295
 801cce0:	e05b      	b.n	801cd9a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cce2:	68bb      	ldr	r3, [r7, #8]
 801cce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cce8:	bf28      	it	cs
 801ccea:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801ccee:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ccf6:	691c      	ldr	r4, [r3, #16]
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	f103 0110 	add.w	r1, r3, #16
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cd12:	b29b      	uxth	r3, r3
 801cd14:	78f8      	ldrb	r0, [r7, #3]
 801cd16:	47a0      	blx	r4
 801cd18:	4603      	mov	r3, r0
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	da08      	bge.n	801cd30 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801cd1e:	78f9      	ldrb	r1, [r7, #3]
 801cd20:	2311      	movs	r3, #17
 801cd22:	2204      	movs	r2, #4
 801cd24:	6878      	ldr	r0, [r7, #4]
 801cd26:	f7ff fbbc 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801cd2a:	f04f 33ff 	mov.w	r3, #4294967295
 801cd2e:	e034      	b.n	801cd9a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	f103 0210 	add.w	r2, r3, #16
 801cd36:	68bb      	ldr	r3, [r7, #8]
 801cd38:	2181      	movs	r1, #129	; 0x81
 801cd3a:	6878      	ldr	r0, [r7, #4]
 801cd3c:	f7fc ff98 	bl	8019c70 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cd4c:	4619      	mov	r1, r3
 801cd4e:	68bb      	ldr	r3, [r7, #8]
 801cd50:	fbb3 f3f1 	udiv	r3, r3, r1
 801cd54:	441a      	add	r2, r3
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cd68:	4619      	mov	r1, r3
 801cd6a:	68bb      	ldr	r3, [r7, #8]
 801cd6c:	fbb3 f3f1 	udiv	r3, r3, r1
 801cd70:	1ad2      	subs	r2, r2, r3
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801cd7e:	68bb      	ldr	r3, [r7, #8]
 801cd80:	1ad2      	subs	r2, r2, r3
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d102      	bne.n	801cd98 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	2203      	movs	r2, #3
 801cd96:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801cd98:	2300      	movs	r3, #0
}
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	3714      	adds	r7, #20
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd90      	pop	{r4, r7, pc}

0801cda2 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cda2:	b590      	push	{r4, r7, lr}
 801cda4:	b085      	sub	sp, #20
 801cda6:	af00      	add	r7, sp, #0
 801cda8:	6078      	str	r0, [r7, #4]
 801cdaa:	460b      	mov	r3, r1
 801cdac:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cdb4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cdbc:	68fa      	ldr	r2, [r7, #12]
 801cdbe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cdc2:	fb02 f303 	mul.w	r3, r2, r3
 801cdc6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cdc8:	68fb      	ldr	r3, [r7, #12]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d102      	bne.n	801cdd4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801cdce:	f04f 33ff 	mov.w	r3, #4294967295
 801cdd2:	e06b      	b.n	801ceac <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cdd4:	68bb      	ldr	r3, [r7, #8]
 801cdd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cdda:	bf28      	it	cs
 801cddc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cde0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cde8:	695c      	ldr	r4, [r3, #20]
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	f103 0110 	add.w	r1, r3, #16
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	68bb      	ldr	r3, [r7, #8]
 801ce00:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801ce04:	b29b      	uxth	r3, r3
 801ce06:	78f8      	ldrb	r0, [r7, #3]
 801ce08:	47a0      	blx	r4
 801ce0a:	4603      	mov	r3, r0
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	da08      	bge.n	801ce22 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801ce10:	78f9      	ldrb	r1, [r7, #3]
 801ce12:	2303      	movs	r3, #3
 801ce14:	2204      	movs	r2, #4
 801ce16:	6878      	ldr	r0, [r7, #4]
 801ce18:	f7ff fb43 	bl	801c4a2 <SCSI_SenseCode>
    return -1;
 801ce1c:	f04f 33ff 	mov.w	r3, #4294967295
 801ce20:	e044      	b.n	801ceac <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ce2e:	4619      	mov	r1, r3
 801ce30:	68bb      	ldr	r3, [r7, #8]
 801ce32:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce36:	441a      	add	r2, r3
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ce4a:	4619      	mov	r1, r3
 801ce4c:	68bb      	ldr	r3, [r7, #8]
 801ce4e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce52:	1ad2      	subs	r2, r2, r3
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801ce60:	68bb      	ldr	r3, [r7, #8]
 801ce62:	1ad2      	subs	r2, r2, r3
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d104      	bne.n	801ce7e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801ce74:	2100      	movs	r1, #0
 801ce76:	6878      	ldr	r0, [r7, #4]
 801ce78:	f7fe fdd8 	bl	801ba2c <MSC_BOT_SendCSW>
 801ce7c:	e015      	b.n	801ceaa <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801ce7e:	68fb      	ldr	r3, [r7, #12]
 801ce80:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ce84:	68fa      	ldr	r2, [r7, #12]
 801ce86:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801ce8a:	fb02 f303 	mul.w	r3, r2, r3
 801ce8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce92:	bf28      	it	cs
 801ce94:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801ce98:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	f103 0210 	add.w	r2, r3, #16
 801cea0:	68bb      	ldr	r3, [r7, #8]
 801cea2:	2101      	movs	r1, #1
 801cea4:	6878      	ldr	r0, [r7, #4]
 801cea6:	f7fc ff1b 	bl	8019ce0 <USBD_LL_PrepareReceive>
  }

  return 0;
 801ceaa:	2300      	movs	r3, #0
}
 801ceac:	4618      	mov	r0, r3
 801ceae:	3714      	adds	r7, #20
 801ceb0:	46bd      	mov	sp, r7
 801ceb2:	bd90      	pop	{r4, r7, pc}

0801ceb4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_CDCMSC_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801ceb4:	b480      	push	{r7}
 801ceb6:	b087      	sub	sp, #28
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	60f8      	str	r0, [r7, #12]
 801cebc:	60b9      	str	r1, [r7, #8]
 801cebe:	4613      	mov	r3, r2
 801cec0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801cec2:	88fb      	ldrh	r3, [r7, #6]
 801cec4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d102      	bne.n	801ced2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801cecc:	f04f 33ff 	mov.w	r3, #4294967295
 801ced0:	e013      	b.n	801cefa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801ced2:	8afa      	ldrh	r2, [r7, #22]
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801ced8:	e00b      	b.n	801cef2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801ceda:	8afb      	ldrh	r3, [r7, #22]
 801cedc:	3b01      	subs	r3, #1
 801cede:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801cee0:	8afb      	ldrh	r3, [r7, #22]
 801cee2:	68ba      	ldr	r2, [r7, #8]
 801cee4:	441a      	add	r2, r3
 801cee6:	8afb      	ldrh	r3, [r7, #22]
 801cee8:	7811      	ldrb	r1, [r2, #0]
 801ceea:	68fa      	ldr	r2, [r7, #12]
 801ceec:	4413      	add	r3, r2
 801ceee:	460a      	mov	r2, r1
 801cef0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801cef2:	8afb      	ldrh	r3, [r7, #22]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d1f0      	bne.n	801ceda <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801cef8:	2300      	movs	r3, #0
}
 801cefa:	4618      	mov	r0, r3
 801cefc:	371c      	adds	r7, #28
 801cefe:	46bd      	mov	sp, r7
 801cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf04:	4770      	bx	lr

0801cf06 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801cf06:	b480      	push	{r7}
 801cf08:	b083      	sub	sp, #12
 801cf0a:	af00      	add	r7, sp, #0
 801cf0c:	4603      	mov	r3, r0
 801cf0e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801cf10:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801cf12:	4618      	mov	r0, r3
 801cf14:	370c      	adds	r7, #12
 801cf16:	46bd      	mov	sp, r7
 801cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf1c:	4770      	bx	lr

0801cf1e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801cf1e:	b480      	push	{r7}
 801cf20:	b085      	sub	sp, #20
 801cf22:	af00      	add	r7, sp, #0
 801cf24:	4603      	mov	r3, r0
 801cf26:	60b9      	str	r1, [r7, #8]
 801cf28:	607a      	str	r2, [r7, #4]
 801cf2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 801cf2c:	68bb      	ldr	r3, [r7, #8]
 801cf2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801cf32:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	f44f 7200 	mov.w	r2, #512	; 0x200
 801cf3a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801cf3c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cf3e:	4618      	mov	r0, r3
 801cf40:	3714      	adds	r7, #20
 801cf42:	46bd      	mov	sp, r7
 801cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf48:	4770      	bx	lr

0801cf4a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801cf4a:	b480      	push	{r7}
 801cf4c:	b083      	sub	sp, #12
 801cf4e:	af00      	add	r7, sp, #0
 801cf50:	4603      	mov	r3, r0
 801cf52:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801cf54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cf56:	4618      	mov	r0, r3
 801cf58:	370c      	adds	r7, #12
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf60:	4770      	bx	lr

0801cf62 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801cf62:	b480      	push	{r7}
 801cf64:	b083      	sub	sp, #12
 801cf66:	af00      	add	r7, sp, #0
 801cf68:	4603      	mov	r3, r0
 801cf6a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801cf6c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cf6e:	4618      	mov	r0, r3
 801cf70:	370c      	adds	r7, #12
 801cf72:	46bd      	mov	sp, r7
 801cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf78:	4770      	bx	lr

0801cf7a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801cf7a:	b580      	push	{r7, lr}
 801cf7c:	b086      	sub	sp, #24
 801cf7e:	af00      	add	r7, sp, #0
 801cf80:	60b9      	str	r1, [r7, #8]
 801cf82:	607a      	str	r2, [r7, #4]
 801cf84:	461a      	mov	r2, r3
 801cf86:	4603      	mov	r3, r0
 801cf88:	73fb      	strb	r3, [r7, #15]
 801cf8a:	4613      	mov	r3, r2
 801cf8c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	uint16_t block_cntr=0;
 801cf8e:	2300      	movs	r3, #0
 801cf90:	82fb      	strh	r3, [r7, #22]
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cf92:	2300      	movs	r3, #0
 801cf94:	82fb      	strh	r3, [r7, #22]
 801cf96:	e00f      	b.n	801cfb8 <STORAGE_Read_FS+0x3e>
				W25_ReadBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801cf98:	8afb      	ldrh	r3, [r7, #22]
 801cf9a:	025b      	lsls	r3, r3, #9
 801cf9c:	461a      	mov	r2, r3
 801cf9e:	68bb      	ldr	r3, [r7, #8]
 801cfa0:	1898      	adds	r0, r3, r2
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	b29a      	uxth	r2, r3
 801cfa6:	8afb      	ldrh	r3, [r7, #22]
 801cfa8:	4413      	add	r3, r2
 801cfaa:	b29b      	uxth	r3, r3
 801cfac:	4619      	mov	r1, r3
 801cfae:	f7e7 fc03 	bl	80047b8 <W25_ReadBuf>
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cfb2:	8afb      	ldrh	r3, [r7, #22]
 801cfb4:	3301      	adds	r3, #1
 801cfb6:	82fb      	strh	r3, [r7, #22]
 801cfb8:	8afa      	ldrh	r2, [r7, #22]
 801cfba:	89bb      	ldrh	r3, [r7, #12]
 801cfbc:	429a      	cmp	r2, r3
 801cfbe:	d3eb      	bcc.n	801cf98 <STORAGE_Read_FS+0x1e>
	  return (USBD_OK);
 801cfc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	3718      	adds	r7, #24
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	bd80      	pop	{r7, pc}

0801cfca <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801cfca:	b580      	push	{r7, lr}
 801cfcc:	b086      	sub	sp, #24
 801cfce:	af00      	add	r7, sp, #0
 801cfd0:	60b9      	str	r1, [r7, #8]
 801cfd2:	607a      	str	r2, [r7, #4]
 801cfd4:	461a      	mov	r2, r3
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	73fb      	strb	r3, [r7, #15]
 801cfda:	4613      	mov	r3, r2
 801cfdc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint16_t block_cntr=0;
 801cfde:	2300      	movs	r3, #0
 801cfe0:	82fb      	strh	r3, [r7, #22]
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	82fb      	strh	r3, [r7, #22]
 801cfe6:	e00f      	b.n	801d008 <STORAGE_Write_FS+0x3e>
					W25_WriteBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801cfe8:	8afb      	ldrh	r3, [r7, #22]
 801cfea:	025b      	lsls	r3, r3, #9
 801cfec:	461a      	mov	r2, r3
 801cfee:	68bb      	ldr	r3, [r7, #8]
 801cff0:	1898      	adds	r0, r3, r2
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	b29a      	uxth	r2, r3
 801cff6:	8afb      	ldrh	r3, [r7, #22]
 801cff8:	4413      	add	r3, r2
 801cffa:	b29b      	uxth	r3, r3
 801cffc:	4619      	mov	r1, r3
 801cffe:	f7e7 fc4b 	bl	8004898 <W25_WriteBuf>
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d002:	8afb      	ldrh	r3, [r7, #22]
 801d004:	3301      	adds	r3, #1
 801d006:	82fb      	strh	r3, [r7, #22]
 801d008:	8afa      	ldrh	r2, [r7, #22]
 801d00a:	89bb      	ldrh	r3, [r7, #12]
 801d00c:	429a      	cmp	r2, r3
 801d00e:	d3eb      	bcc.n	801cfe8 <STORAGE_Write_FS+0x1e>
	  return (USBD_OK);
 801d010:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801d012:	4618      	mov	r0, r3
 801d014:	3718      	adds	r7, #24
 801d016:	46bd      	mov	sp, r7
 801d018:	bd80      	pop	{r7, pc}

0801d01a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d01a:	b480      	push	{r7}
 801d01c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d01e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d020:	4618      	mov	r0, r3
 801d022:	46bd      	mov	sp, r7
 801d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d028:	4770      	bx	lr
	...

0801d02c <__errno>:
 801d02c:	4b01      	ldr	r3, [pc, #4]	; (801d034 <__errno+0x8>)
 801d02e:	6818      	ldr	r0, [r3, #0]
 801d030:	4770      	bx	lr
 801d032:	bf00      	nop
 801d034:	20000634 	.word	0x20000634

0801d038 <__libc_init_array>:
 801d038:	b570      	push	{r4, r5, r6, lr}
 801d03a:	4d0d      	ldr	r5, [pc, #52]	; (801d070 <__libc_init_array+0x38>)
 801d03c:	4c0d      	ldr	r4, [pc, #52]	; (801d074 <__libc_init_array+0x3c>)
 801d03e:	1b64      	subs	r4, r4, r5
 801d040:	10a4      	asrs	r4, r4, #2
 801d042:	2600      	movs	r6, #0
 801d044:	42a6      	cmp	r6, r4
 801d046:	d109      	bne.n	801d05c <__libc_init_array+0x24>
 801d048:	4d0b      	ldr	r5, [pc, #44]	; (801d078 <__libc_init_array+0x40>)
 801d04a:	4c0c      	ldr	r4, [pc, #48]	; (801d07c <__libc_init_array+0x44>)
 801d04c:	f004 fd40 	bl	8021ad0 <_init>
 801d050:	1b64      	subs	r4, r4, r5
 801d052:	10a4      	asrs	r4, r4, #2
 801d054:	2600      	movs	r6, #0
 801d056:	42a6      	cmp	r6, r4
 801d058:	d105      	bne.n	801d066 <__libc_init_array+0x2e>
 801d05a:	bd70      	pop	{r4, r5, r6, pc}
 801d05c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d060:	4798      	blx	r3
 801d062:	3601      	adds	r6, #1
 801d064:	e7ee      	b.n	801d044 <__libc_init_array+0xc>
 801d066:	f855 3b04 	ldr.w	r3, [r5], #4
 801d06a:	4798      	blx	r3
 801d06c:	3601      	adds	r6, #1
 801d06e:	e7f2      	b.n	801d056 <__libc_init_array+0x1e>
 801d070:	08029bcc 	.word	0x08029bcc
 801d074:	08029bcc 	.word	0x08029bcc
 801d078:	08029bcc 	.word	0x08029bcc
 801d07c:	08029bd0 	.word	0x08029bd0

0801d080 <memset>:
 801d080:	4402      	add	r2, r0
 801d082:	4603      	mov	r3, r0
 801d084:	4293      	cmp	r3, r2
 801d086:	d100      	bne.n	801d08a <memset+0xa>
 801d088:	4770      	bx	lr
 801d08a:	f803 1b01 	strb.w	r1, [r3], #1
 801d08e:	e7f9      	b.n	801d084 <memset+0x4>

0801d090 <__cvt>:
 801d090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d094:	ec55 4b10 	vmov	r4, r5, d0
 801d098:	2d00      	cmp	r5, #0
 801d09a:	460e      	mov	r6, r1
 801d09c:	4619      	mov	r1, r3
 801d09e:	462b      	mov	r3, r5
 801d0a0:	bfbb      	ittet	lt
 801d0a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d0a6:	461d      	movlt	r5, r3
 801d0a8:	2300      	movge	r3, #0
 801d0aa:	232d      	movlt	r3, #45	; 0x2d
 801d0ac:	700b      	strb	r3, [r1, #0]
 801d0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d0b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d0b4:	4691      	mov	r9, r2
 801d0b6:	f023 0820 	bic.w	r8, r3, #32
 801d0ba:	bfbc      	itt	lt
 801d0bc:	4622      	movlt	r2, r4
 801d0be:	4614      	movlt	r4, r2
 801d0c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d0c4:	d005      	beq.n	801d0d2 <__cvt+0x42>
 801d0c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d0ca:	d100      	bne.n	801d0ce <__cvt+0x3e>
 801d0cc:	3601      	adds	r6, #1
 801d0ce:	2102      	movs	r1, #2
 801d0d0:	e000      	b.n	801d0d4 <__cvt+0x44>
 801d0d2:	2103      	movs	r1, #3
 801d0d4:	ab03      	add	r3, sp, #12
 801d0d6:	9301      	str	r3, [sp, #4]
 801d0d8:	ab02      	add	r3, sp, #8
 801d0da:	9300      	str	r3, [sp, #0]
 801d0dc:	ec45 4b10 	vmov	d0, r4, r5
 801d0e0:	4653      	mov	r3, sl
 801d0e2:	4632      	mov	r2, r6
 801d0e4:	f001 fdc8 	bl	801ec78 <_dtoa_r>
 801d0e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d0ec:	4607      	mov	r7, r0
 801d0ee:	d102      	bne.n	801d0f6 <__cvt+0x66>
 801d0f0:	f019 0f01 	tst.w	r9, #1
 801d0f4:	d022      	beq.n	801d13c <__cvt+0xac>
 801d0f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d0fa:	eb07 0906 	add.w	r9, r7, r6
 801d0fe:	d110      	bne.n	801d122 <__cvt+0x92>
 801d100:	783b      	ldrb	r3, [r7, #0]
 801d102:	2b30      	cmp	r3, #48	; 0x30
 801d104:	d10a      	bne.n	801d11c <__cvt+0x8c>
 801d106:	2200      	movs	r2, #0
 801d108:	2300      	movs	r3, #0
 801d10a:	4620      	mov	r0, r4
 801d10c:	4629      	mov	r1, r5
 801d10e:	f7e3 fceb 	bl	8000ae8 <__aeabi_dcmpeq>
 801d112:	b918      	cbnz	r0, 801d11c <__cvt+0x8c>
 801d114:	f1c6 0601 	rsb	r6, r6, #1
 801d118:	f8ca 6000 	str.w	r6, [sl]
 801d11c:	f8da 3000 	ldr.w	r3, [sl]
 801d120:	4499      	add	r9, r3
 801d122:	2200      	movs	r2, #0
 801d124:	2300      	movs	r3, #0
 801d126:	4620      	mov	r0, r4
 801d128:	4629      	mov	r1, r5
 801d12a:	f7e3 fcdd 	bl	8000ae8 <__aeabi_dcmpeq>
 801d12e:	b108      	cbz	r0, 801d134 <__cvt+0xa4>
 801d130:	f8cd 900c 	str.w	r9, [sp, #12]
 801d134:	2230      	movs	r2, #48	; 0x30
 801d136:	9b03      	ldr	r3, [sp, #12]
 801d138:	454b      	cmp	r3, r9
 801d13a:	d307      	bcc.n	801d14c <__cvt+0xbc>
 801d13c:	9b03      	ldr	r3, [sp, #12]
 801d13e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d140:	1bdb      	subs	r3, r3, r7
 801d142:	4638      	mov	r0, r7
 801d144:	6013      	str	r3, [r2, #0]
 801d146:	b004      	add	sp, #16
 801d148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d14c:	1c59      	adds	r1, r3, #1
 801d14e:	9103      	str	r1, [sp, #12]
 801d150:	701a      	strb	r2, [r3, #0]
 801d152:	e7f0      	b.n	801d136 <__cvt+0xa6>

0801d154 <__exponent>:
 801d154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d156:	4603      	mov	r3, r0
 801d158:	2900      	cmp	r1, #0
 801d15a:	bfb8      	it	lt
 801d15c:	4249      	neglt	r1, r1
 801d15e:	f803 2b02 	strb.w	r2, [r3], #2
 801d162:	bfb4      	ite	lt
 801d164:	222d      	movlt	r2, #45	; 0x2d
 801d166:	222b      	movge	r2, #43	; 0x2b
 801d168:	2909      	cmp	r1, #9
 801d16a:	7042      	strb	r2, [r0, #1]
 801d16c:	dd2a      	ble.n	801d1c4 <__exponent+0x70>
 801d16e:	f10d 0407 	add.w	r4, sp, #7
 801d172:	46a4      	mov	ip, r4
 801d174:	270a      	movs	r7, #10
 801d176:	46a6      	mov	lr, r4
 801d178:	460a      	mov	r2, r1
 801d17a:	fb91 f6f7 	sdiv	r6, r1, r7
 801d17e:	fb07 1516 	mls	r5, r7, r6, r1
 801d182:	3530      	adds	r5, #48	; 0x30
 801d184:	2a63      	cmp	r2, #99	; 0x63
 801d186:	f104 34ff 	add.w	r4, r4, #4294967295
 801d18a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d18e:	4631      	mov	r1, r6
 801d190:	dcf1      	bgt.n	801d176 <__exponent+0x22>
 801d192:	3130      	adds	r1, #48	; 0x30
 801d194:	f1ae 0502 	sub.w	r5, lr, #2
 801d198:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d19c:	1c44      	adds	r4, r0, #1
 801d19e:	4629      	mov	r1, r5
 801d1a0:	4561      	cmp	r1, ip
 801d1a2:	d30a      	bcc.n	801d1ba <__exponent+0x66>
 801d1a4:	f10d 0209 	add.w	r2, sp, #9
 801d1a8:	eba2 020e 	sub.w	r2, r2, lr
 801d1ac:	4565      	cmp	r5, ip
 801d1ae:	bf88      	it	hi
 801d1b0:	2200      	movhi	r2, #0
 801d1b2:	4413      	add	r3, r2
 801d1b4:	1a18      	subs	r0, r3, r0
 801d1b6:	b003      	add	sp, #12
 801d1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d1be:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d1c2:	e7ed      	b.n	801d1a0 <__exponent+0x4c>
 801d1c4:	2330      	movs	r3, #48	; 0x30
 801d1c6:	3130      	adds	r1, #48	; 0x30
 801d1c8:	7083      	strb	r3, [r0, #2]
 801d1ca:	70c1      	strb	r1, [r0, #3]
 801d1cc:	1d03      	adds	r3, r0, #4
 801d1ce:	e7f1      	b.n	801d1b4 <__exponent+0x60>

0801d1d0 <_printf_float>:
 801d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1d4:	ed2d 8b02 	vpush	{d8}
 801d1d8:	b08d      	sub	sp, #52	; 0x34
 801d1da:	460c      	mov	r4, r1
 801d1dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d1e0:	4616      	mov	r6, r2
 801d1e2:	461f      	mov	r7, r3
 801d1e4:	4605      	mov	r5, r0
 801d1e6:	f002 ff97 	bl	8020118 <_localeconv_r>
 801d1ea:	f8d0 a000 	ldr.w	sl, [r0]
 801d1ee:	4650      	mov	r0, sl
 801d1f0:	f7e2 fffe 	bl	80001f0 <strlen>
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	930a      	str	r3, [sp, #40]	; 0x28
 801d1f8:	6823      	ldr	r3, [r4, #0]
 801d1fa:	9305      	str	r3, [sp, #20]
 801d1fc:	f8d8 3000 	ldr.w	r3, [r8]
 801d200:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d204:	3307      	adds	r3, #7
 801d206:	f023 0307 	bic.w	r3, r3, #7
 801d20a:	f103 0208 	add.w	r2, r3, #8
 801d20e:	f8c8 2000 	str.w	r2, [r8]
 801d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d216:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d21a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801d21e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d222:	9307      	str	r3, [sp, #28]
 801d224:	f8cd 8018 	str.w	r8, [sp, #24]
 801d228:	ee08 0a10 	vmov	s16, r0
 801d22c:	4b9f      	ldr	r3, [pc, #636]	; (801d4ac <_printf_float+0x2dc>)
 801d22e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d232:	f04f 32ff 	mov.w	r2, #4294967295
 801d236:	f7e3 fc89 	bl	8000b4c <__aeabi_dcmpun>
 801d23a:	bb88      	cbnz	r0, 801d2a0 <_printf_float+0xd0>
 801d23c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d240:	4b9a      	ldr	r3, [pc, #616]	; (801d4ac <_printf_float+0x2dc>)
 801d242:	f04f 32ff 	mov.w	r2, #4294967295
 801d246:	f7e3 fc63 	bl	8000b10 <__aeabi_dcmple>
 801d24a:	bb48      	cbnz	r0, 801d2a0 <_printf_float+0xd0>
 801d24c:	2200      	movs	r2, #0
 801d24e:	2300      	movs	r3, #0
 801d250:	4640      	mov	r0, r8
 801d252:	4649      	mov	r1, r9
 801d254:	f7e3 fc52 	bl	8000afc <__aeabi_dcmplt>
 801d258:	b110      	cbz	r0, 801d260 <_printf_float+0x90>
 801d25a:	232d      	movs	r3, #45	; 0x2d
 801d25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d260:	4b93      	ldr	r3, [pc, #588]	; (801d4b0 <_printf_float+0x2e0>)
 801d262:	4894      	ldr	r0, [pc, #592]	; (801d4b4 <_printf_float+0x2e4>)
 801d264:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d268:	bf94      	ite	ls
 801d26a:	4698      	movls	r8, r3
 801d26c:	4680      	movhi	r8, r0
 801d26e:	2303      	movs	r3, #3
 801d270:	6123      	str	r3, [r4, #16]
 801d272:	9b05      	ldr	r3, [sp, #20]
 801d274:	f023 0204 	bic.w	r2, r3, #4
 801d278:	6022      	str	r2, [r4, #0]
 801d27a:	f04f 0900 	mov.w	r9, #0
 801d27e:	9700      	str	r7, [sp, #0]
 801d280:	4633      	mov	r3, r6
 801d282:	aa0b      	add	r2, sp, #44	; 0x2c
 801d284:	4621      	mov	r1, r4
 801d286:	4628      	mov	r0, r5
 801d288:	f000 f9d8 	bl	801d63c <_printf_common>
 801d28c:	3001      	adds	r0, #1
 801d28e:	f040 8090 	bne.w	801d3b2 <_printf_float+0x1e2>
 801d292:	f04f 30ff 	mov.w	r0, #4294967295
 801d296:	b00d      	add	sp, #52	; 0x34
 801d298:	ecbd 8b02 	vpop	{d8}
 801d29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2a0:	4642      	mov	r2, r8
 801d2a2:	464b      	mov	r3, r9
 801d2a4:	4640      	mov	r0, r8
 801d2a6:	4649      	mov	r1, r9
 801d2a8:	f7e3 fc50 	bl	8000b4c <__aeabi_dcmpun>
 801d2ac:	b140      	cbz	r0, 801d2c0 <_printf_float+0xf0>
 801d2ae:	464b      	mov	r3, r9
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	bfbc      	itt	lt
 801d2b4:	232d      	movlt	r3, #45	; 0x2d
 801d2b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d2ba:	487f      	ldr	r0, [pc, #508]	; (801d4b8 <_printf_float+0x2e8>)
 801d2bc:	4b7f      	ldr	r3, [pc, #508]	; (801d4bc <_printf_float+0x2ec>)
 801d2be:	e7d1      	b.n	801d264 <_printf_float+0x94>
 801d2c0:	6863      	ldr	r3, [r4, #4]
 801d2c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d2c6:	9206      	str	r2, [sp, #24]
 801d2c8:	1c5a      	adds	r2, r3, #1
 801d2ca:	d13f      	bne.n	801d34c <_printf_float+0x17c>
 801d2cc:	2306      	movs	r3, #6
 801d2ce:	6063      	str	r3, [r4, #4]
 801d2d0:	9b05      	ldr	r3, [sp, #20]
 801d2d2:	6861      	ldr	r1, [r4, #4]
 801d2d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d2d8:	2300      	movs	r3, #0
 801d2da:	9303      	str	r3, [sp, #12]
 801d2dc:	ab0a      	add	r3, sp, #40	; 0x28
 801d2de:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d2e2:	ab09      	add	r3, sp, #36	; 0x24
 801d2e4:	ec49 8b10 	vmov	d0, r8, r9
 801d2e8:	9300      	str	r3, [sp, #0]
 801d2ea:	6022      	str	r2, [r4, #0]
 801d2ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d2f0:	4628      	mov	r0, r5
 801d2f2:	f7ff fecd 	bl	801d090 <__cvt>
 801d2f6:	9b06      	ldr	r3, [sp, #24]
 801d2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d2fa:	2b47      	cmp	r3, #71	; 0x47
 801d2fc:	4680      	mov	r8, r0
 801d2fe:	d108      	bne.n	801d312 <_printf_float+0x142>
 801d300:	1cc8      	adds	r0, r1, #3
 801d302:	db02      	blt.n	801d30a <_printf_float+0x13a>
 801d304:	6863      	ldr	r3, [r4, #4]
 801d306:	4299      	cmp	r1, r3
 801d308:	dd41      	ble.n	801d38e <_printf_float+0x1be>
 801d30a:	f1ab 0b02 	sub.w	fp, fp, #2
 801d30e:	fa5f fb8b 	uxtb.w	fp, fp
 801d312:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d316:	d820      	bhi.n	801d35a <_printf_float+0x18a>
 801d318:	3901      	subs	r1, #1
 801d31a:	465a      	mov	r2, fp
 801d31c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d320:	9109      	str	r1, [sp, #36]	; 0x24
 801d322:	f7ff ff17 	bl	801d154 <__exponent>
 801d326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d328:	1813      	adds	r3, r2, r0
 801d32a:	2a01      	cmp	r2, #1
 801d32c:	4681      	mov	r9, r0
 801d32e:	6123      	str	r3, [r4, #16]
 801d330:	dc02      	bgt.n	801d338 <_printf_float+0x168>
 801d332:	6822      	ldr	r2, [r4, #0]
 801d334:	07d2      	lsls	r2, r2, #31
 801d336:	d501      	bpl.n	801d33c <_printf_float+0x16c>
 801d338:	3301      	adds	r3, #1
 801d33a:	6123      	str	r3, [r4, #16]
 801d33c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d340:	2b00      	cmp	r3, #0
 801d342:	d09c      	beq.n	801d27e <_printf_float+0xae>
 801d344:	232d      	movs	r3, #45	; 0x2d
 801d346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d34a:	e798      	b.n	801d27e <_printf_float+0xae>
 801d34c:	9a06      	ldr	r2, [sp, #24]
 801d34e:	2a47      	cmp	r2, #71	; 0x47
 801d350:	d1be      	bne.n	801d2d0 <_printf_float+0x100>
 801d352:	2b00      	cmp	r3, #0
 801d354:	d1bc      	bne.n	801d2d0 <_printf_float+0x100>
 801d356:	2301      	movs	r3, #1
 801d358:	e7b9      	b.n	801d2ce <_printf_float+0xfe>
 801d35a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d35e:	d118      	bne.n	801d392 <_printf_float+0x1c2>
 801d360:	2900      	cmp	r1, #0
 801d362:	6863      	ldr	r3, [r4, #4]
 801d364:	dd0b      	ble.n	801d37e <_printf_float+0x1ae>
 801d366:	6121      	str	r1, [r4, #16]
 801d368:	b913      	cbnz	r3, 801d370 <_printf_float+0x1a0>
 801d36a:	6822      	ldr	r2, [r4, #0]
 801d36c:	07d0      	lsls	r0, r2, #31
 801d36e:	d502      	bpl.n	801d376 <_printf_float+0x1a6>
 801d370:	3301      	adds	r3, #1
 801d372:	440b      	add	r3, r1
 801d374:	6123      	str	r3, [r4, #16]
 801d376:	65a1      	str	r1, [r4, #88]	; 0x58
 801d378:	f04f 0900 	mov.w	r9, #0
 801d37c:	e7de      	b.n	801d33c <_printf_float+0x16c>
 801d37e:	b913      	cbnz	r3, 801d386 <_printf_float+0x1b6>
 801d380:	6822      	ldr	r2, [r4, #0]
 801d382:	07d2      	lsls	r2, r2, #31
 801d384:	d501      	bpl.n	801d38a <_printf_float+0x1ba>
 801d386:	3302      	adds	r3, #2
 801d388:	e7f4      	b.n	801d374 <_printf_float+0x1a4>
 801d38a:	2301      	movs	r3, #1
 801d38c:	e7f2      	b.n	801d374 <_printf_float+0x1a4>
 801d38e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d394:	4299      	cmp	r1, r3
 801d396:	db05      	blt.n	801d3a4 <_printf_float+0x1d4>
 801d398:	6823      	ldr	r3, [r4, #0]
 801d39a:	6121      	str	r1, [r4, #16]
 801d39c:	07d8      	lsls	r0, r3, #31
 801d39e:	d5ea      	bpl.n	801d376 <_printf_float+0x1a6>
 801d3a0:	1c4b      	adds	r3, r1, #1
 801d3a2:	e7e7      	b.n	801d374 <_printf_float+0x1a4>
 801d3a4:	2900      	cmp	r1, #0
 801d3a6:	bfd4      	ite	le
 801d3a8:	f1c1 0202 	rsble	r2, r1, #2
 801d3ac:	2201      	movgt	r2, #1
 801d3ae:	4413      	add	r3, r2
 801d3b0:	e7e0      	b.n	801d374 <_printf_float+0x1a4>
 801d3b2:	6823      	ldr	r3, [r4, #0]
 801d3b4:	055a      	lsls	r2, r3, #21
 801d3b6:	d407      	bmi.n	801d3c8 <_printf_float+0x1f8>
 801d3b8:	6923      	ldr	r3, [r4, #16]
 801d3ba:	4642      	mov	r2, r8
 801d3bc:	4631      	mov	r1, r6
 801d3be:	4628      	mov	r0, r5
 801d3c0:	47b8      	blx	r7
 801d3c2:	3001      	adds	r0, #1
 801d3c4:	d12c      	bne.n	801d420 <_printf_float+0x250>
 801d3c6:	e764      	b.n	801d292 <_printf_float+0xc2>
 801d3c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d3cc:	f240 80e0 	bls.w	801d590 <_printf_float+0x3c0>
 801d3d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d3d4:	2200      	movs	r2, #0
 801d3d6:	2300      	movs	r3, #0
 801d3d8:	f7e3 fb86 	bl	8000ae8 <__aeabi_dcmpeq>
 801d3dc:	2800      	cmp	r0, #0
 801d3de:	d034      	beq.n	801d44a <_printf_float+0x27a>
 801d3e0:	4a37      	ldr	r2, [pc, #220]	; (801d4c0 <_printf_float+0x2f0>)
 801d3e2:	2301      	movs	r3, #1
 801d3e4:	4631      	mov	r1, r6
 801d3e6:	4628      	mov	r0, r5
 801d3e8:	47b8      	blx	r7
 801d3ea:	3001      	adds	r0, #1
 801d3ec:	f43f af51 	beq.w	801d292 <_printf_float+0xc2>
 801d3f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d3f4:	429a      	cmp	r2, r3
 801d3f6:	db02      	blt.n	801d3fe <_printf_float+0x22e>
 801d3f8:	6823      	ldr	r3, [r4, #0]
 801d3fa:	07d8      	lsls	r0, r3, #31
 801d3fc:	d510      	bpl.n	801d420 <_printf_float+0x250>
 801d3fe:	ee18 3a10 	vmov	r3, s16
 801d402:	4652      	mov	r2, sl
 801d404:	4631      	mov	r1, r6
 801d406:	4628      	mov	r0, r5
 801d408:	47b8      	blx	r7
 801d40a:	3001      	adds	r0, #1
 801d40c:	f43f af41 	beq.w	801d292 <_printf_float+0xc2>
 801d410:	f04f 0800 	mov.w	r8, #0
 801d414:	f104 091a 	add.w	r9, r4, #26
 801d418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d41a:	3b01      	subs	r3, #1
 801d41c:	4543      	cmp	r3, r8
 801d41e:	dc09      	bgt.n	801d434 <_printf_float+0x264>
 801d420:	6823      	ldr	r3, [r4, #0]
 801d422:	079b      	lsls	r3, r3, #30
 801d424:	f100 8105 	bmi.w	801d632 <_printf_float+0x462>
 801d428:	68e0      	ldr	r0, [r4, #12]
 801d42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d42c:	4298      	cmp	r0, r3
 801d42e:	bfb8      	it	lt
 801d430:	4618      	movlt	r0, r3
 801d432:	e730      	b.n	801d296 <_printf_float+0xc6>
 801d434:	2301      	movs	r3, #1
 801d436:	464a      	mov	r2, r9
 801d438:	4631      	mov	r1, r6
 801d43a:	4628      	mov	r0, r5
 801d43c:	47b8      	blx	r7
 801d43e:	3001      	adds	r0, #1
 801d440:	f43f af27 	beq.w	801d292 <_printf_float+0xc2>
 801d444:	f108 0801 	add.w	r8, r8, #1
 801d448:	e7e6      	b.n	801d418 <_printf_float+0x248>
 801d44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	dc39      	bgt.n	801d4c4 <_printf_float+0x2f4>
 801d450:	4a1b      	ldr	r2, [pc, #108]	; (801d4c0 <_printf_float+0x2f0>)
 801d452:	2301      	movs	r3, #1
 801d454:	4631      	mov	r1, r6
 801d456:	4628      	mov	r0, r5
 801d458:	47b8      	blx	r7
 801d45a:	3001      	adds	r0, #1
 801d45c:	f43f af19 	beq.w	801d292 <_printf_float+0xc2>
 801d460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d464:	4313      	orrs	r3, r2
 801d466:	d102      	bne.n	801d46e <_printf_float+0x29e>
 801d468:	6823      	ldr	r3, [r4, #0]
 801d46a:	07d9      	lsls	r1, r3, #31
 801d46c:	d5d8      	bpl.n	801d420 <_printf_float+0x250>
 801d46e:	ee18 3a10 	vmov	r3, s16
 801d472:	4652      	mov	r2, sl
 801d474:	4631      	mov	r1, r6
 801d476:	4628      	mov	r0, r5
 801d478:	47b8      	blx	r7
 801d47a:	3001      	adds	r0, #1
 801d47c:	f43f af09 	beq.w	801d292 <_printf_float+0xc2>
 801d480:	f04f 0900 	mov.w	r9, #0
 801d484:	f104 0a1a 	add.w	sl, r4, #26
 801d488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d48a:	425b      	negs	r3, r3
 801d48c:	454b      	cmp	r3, r9
 801d48e:	dc01      	bgt.n	801d494 <_printf_float+0x2c4>
 801d490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d492:	e792      	b.n	801d3ba <_printf_float+0x1ea>
 801d494:	2301      	movs	r3, #1
 801d496:	4652      	mov	r2, sl
 801d498:	4631      	mov	r1, r6
 801d49a:	4628      	mov	r0, r5
 801d49c:	47b8      	blx	r7
 801d49e:	3001      	adds	r0, #1
 801d4a0:	f43f aef7 	beq.w	801d292 <_printf_float+0xc2>
 801d4a4:	f109 0901 	add.w	r9, r9, #1
 801d4a8:	e7ee      	b.n	801d488 <_printf_float+0x2b8>
 801d4aa:	bf00      	nop
 801d4ac:	7fefffff 	.word	0x7fefffff
 801d4b0:	08029714 	.word	0x08029714
 801d4b4:	08029718 	.word	0x08029718
 801d4b8:	08029720 	.word	0x08029720
 801d4bc:	0802971c 	.word	0x0802971c
 801d4c0:	08029724 	.word	0x08029724
 801d4c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d4c8:	429a      	cmp	r2, r3
 801d4ca:	bfa8      	it	ge
 801d4cc:	461a      	movge	r2, r3
 801d4ce:	2a00      	cmp	r2, #0
 801d4d0:	4691      	mov	r9, r2
 801d4d2:	dc37      	bgt.n	801d544 <_printf_float+0x374>
 801d4d4:	f04f 0b00 	mov.w	fp, #0
 801d4d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d4dc:	f104 021a 	add.w	r2, r4, #26
 801d4e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d4e2:	9305      	str	r3, [sp, #20]
 801d4e4:	eba3 0309 	sub.w	r3, r3, r9
 801d4e8:	455b      	cmp	r3, fp
 801d4ea:	dc33      	bgt.n	801d554 <_printf_float+0x384>
 801d4ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d4f0:	429a      	cmp	r2, r3
 801d4f2:	db3b      	blt.n	801d56c <_printf_float+0x39c>
 801d4f4:	6823      	ldr	r3, [r4, #0]
 801d4f6:	07da      	lsls	r2, r3, #31
 801d4f8:	d438      	bmi.n	801d56c <_printf_float+0x39c>
 801d4fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4fc:	9b05      	ldr	r3, [sp, #20]
 801d4fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d500:	1ad3      	subs	r3, r2, r3
 801d502:	eba2 0901 	sub.w	r9, r2, r1
 801d506:	4599      	cmp	r9, r3
 801d508:	bfa8      	it	ge
 801d50a:	4699      	movge	r9, r3
 801d50c:	f1b9 0f00 	cmp.w	r9, #0
 801d510:	dc35      	bgt.n	801d57e <_printf_float+0x3ae>
 801d512:	f04f 0800 	mov.w	r8, #0
 801d516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d51a:	f104 0a1a 	add.w	sl, r4, #26
 801d51e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d522:	1a9b      	subs	r3, r3, r2
 801d524:	eba3 0309 	sub.w	r3, r3, r9
 801d528:	4543      	cmp	r3, r8
 801d52a:	f77f af79 	ble.w	801d420 <_printf_float+0x250>
 801d52e:	2301      	movs	r3, #1
 801d530:	4652      	mov	r2, sl
 801d532:	4631      	mov	r1, r6
 801d534:	4628      	mov	r0, r5
 801d536:	47b8      	blx	r7
 801d538:	3001      	adds	r0, #1
 801d53a:	f43f aeaa 	beq.w	801d292 <_printf_float+0xc2>
 801d53e:	f108 0801 	add.w	r8, r8, #1
 801d542:	e7ec      	b.n	801d51e <_printf_float+0x34e>
 801d544:	4613      	mov	r3, r2
 801d546:	4631      	mov	r1, r6
 801d548:	4642      	mov	r2, r8
 801d54a:	4628      	mov	r0, r5
 801d54c:	47b8      	blx	r7
 801d54e:	3001      	adds	r0, #1
 801d550:	d1c0      	bne.n	801d4d4 <_printf_float+0x304>
 801d552:	e69e      	b.n	801d292 <_printf_float+0xc2>
 801d554:	2301      	movs	r3, #1
 801d556:	4631      	mov	r1, r6
 801d558:	4628      	mov	r0, r5
 801d55a:	9205      	str	r2, [sp, #20]
 801d55c:	47b8      	blx	r7
 801d55e:	3001      	adds	r0, #1
 801d560:	f43f ae97 	beq.w	801d292 <_printf_float+0xc2>
 801d564:	9a05      	ldr	r2, [sp, #20]
 801d566:	f10b 0b01 	add.w	fp, fp, #1
 801d56a:	e7b9      	b.n	801d4e0 <_printf_float+0x310>
 801d56c:	ee18 3a10 	vmov	r3, s16
 801d570:	4652      	mov	r2, sl
 801d572:	4631      	mov	r1, r6
 801d574:	4628      	mov	r0, r5
 801d576:	47b8      	blx	r7
 801d578:	3001      	adds	r0, #1
 801d57a:	d1be      	bne.n	801d4fa <_printf_float+0x32a>
 801d57c:	e689      	b.n	801d292 <_printf_float+0xc2>
 801d57e:	9a05      	ldr	r2, [sp, #20]
 801d580:	464b      	mov	r3, r9
 801d582:	4442      	add	r2, r8
 801d584:	4631      	mov	r1, r6
 801d586:	4628      	mov	r0, r5
 801d588:	47b8      	blx	r7
 801d58a:	3001      	adds	r0, #1
 801d58c:	d1c1      	bne.n	801d512 <_printf_float+0x342>
 801d58e:	e680      	b.n	801d292 <_printf_float+0xc2>
 801d590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d592:	2a01      	cmp	r2, #1
 801d594:	dc01      	bgt.n	801d59a <_printf_float+0x3ca>
 801d596:	07db      	lsls	r3, r3, #31
 801d598:	d538      	bpl.n	801d60c <_printf_float+0x43c>
 801d59a:	2301      	movs	r3, #1
 801d59c:	4642      	mov	r2, r8
 801d59e:	4631      	mov	r1, r6
 801d5a0:	4628      	mov	r0, r5
 801d5a2:	47b8      	blx	r7
 801d5a4:	3001      	adds	r0, #1
 801d5a6:	f43f ae74 	beq.w	801d292 <_printf_float+0xc2>
 801d5aa:	ee18 3a10 	vmov	r3, s16
 801d5ae:	4652      	mov	r2, sl
 801d5b0:	4631      	mov	r1, r6
 801d5b2:	4628      	mov	r0, r5
 801d5b4:	47b8      	blx	r7
 801d5b6:	3001      	adds	r0, #1
 801d5b8:	f43f ae6b 	beq.w	801d292 <_printf_float+0xc2>
 801d5bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d5c0:	2200      	movs	r2, #0
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	f7e3 fa90 	bl	8000ae8 <__aeabi_dcmpeq>
 801d5c8:	b9d8      	cbnz	r0, 801d602 <_printf_float+0x432>
 801d5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5cc:	f108 0201 	add.w	r2, r8, #1
 801d5d0:	3b01      	subs	r3, #1
 801d5d2:	4631      	mov	r1, r6
 801d5d4:	4628      	mov	r0, r5
 801d5d6:	47b8      	blx	r7
 801d5d8:	3001      	adds	r0, #1
 801d5da:	d10e      	bne.n	801d5fa <_printf_float+0x42a>
 801d5dc:	e659      	b.n	801d292 <_printf_float+0xc2>
 801d5de:	2301      	movs	r3, #1
 801d5e0:	4652      	mov	r2, sl
 801d5e2:	4631      	mov	r1, r6
 801d5e4:	4628      	mov	r0, r5
 801d5e6:	47b8      	blx	r7
 801d5e8:	3001      	adds	r0, #1
 801d5ea:	f43f ae52 	beq.w	801d292 <_printf_float+0xc2>
 801d5ee:	f108 0801 	add.w	r8, r8, #1
 801d5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5f4:	3b01      	subs	r3, #1
 801d5f6:	4543      	cmp	r3, r8
 801d5f8:	dcf1      	bgt.n	801d5de <_printf_float+0x40e>
 801d5fa:	464b      	mov	r3, r9
 801d5fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d600:	e6dc      	b.n	801d3bc <_printf_float+0x1ec>
 801d602:	f04f 0800 	mov.w	r8, #0
 801d606:	f104 0a1a 	add.w	sl, r4, #26
 801d60a:	e7f2      	b.n	801d5f2 <_printf_float+0x422>
 801d60c:	2301      	movs	r3, #1
 801d60e:	4642      	mov	r2, r8
 801d610:	e7df      	b.n	801d5d2 <_printf_float+0x402>
 801d612:	2301      	movs	r3, #1
 801d614:	464a      	mov	r2, r9
 801d616:	4631      	mov	r1, r6
 801d618:	4628      	mov	r0, r5
 801d61a:	47b8      	blx	r7
 801d61c:	3001      	adds	r0, #1
 801d61e:	f43f ae38 	beq.w	801d292 <_printf_float+0xc2>
 801d622:	f108 0801 	add.w	r8, r8, #1
 801d626:	68e3      	ldr	r3, [r4, #12]
 801d628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d62a:	1a5b      	subs	r3, r3, r1
 801d62c:	4543      	cmp	r3, r8
 801d62e:	dcf0      	bgt.n	801d612 <_printf_float+0x442>
 801d630:	e6fa      	b.n	801d428 <_printf_float+0x258>
 801d632:	f04f 0800 	mov.w	r8, #0
 801d636:	f104 0919 	add.w	r9, r4, #25
 801d63a:	e7f4      	b.n	801d626 <_printf_float+0x456>

0801d63c <_printf_common>:
 801d63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d640:	4616      	mov	r6, r2
 801d642:	4699      	mov	r9, r3
 801d644:	688a      	ldr	r2, [r1, #8]
 801d646:	690b      	ldr	r3, [r1, #16]
 801d648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d64c:	4293      	cmp	r3, r2
 801d64e:	bfb8      	it	lt
 801d650:	4613      	movlt	r3, r2
 801d652:	6033      	str	r3, [r6, #0]
 801d654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d658:	4607      	mov	r7, r0
 801d65a:	460c      	mov	r4, r1
 801d65c:	b10a      	cbz	r2, 801d662 <_printf_common+0x26>
 801d65e:	3301      	adds	r3, #1
 801d660:	6033      	str	r3, [r6, #0]
 801d662:	6823      	ldr	r3, [r4, #0]
 801d664:	0699      	lsls	r1, r3, #26
 801d666:	bf42      	ittt	mi
 801d668:	6833      	ldrmi	r3, [r6, #0]
 801d66a:	3302      	addmi	r3, #2
 801d66c:	6033      	strmi	r3, [r6, #0]
 801d66e:	6825      	ldr	r5, [r4, #0]
 801d670:	f015 0506 	ands.w	r5, r5, #6
 801d674:	d106      	bne.n	801d684 <_printf_common+0x48>
 801d676:	f104 0a19 	add.w	sl, r4, #25
 801d67a:	68e3      	ldr	r3, [r4, #12]
 801d67c:	6832      	ldr	r2, [r6, #0]
 801d67e:	1a9b      	subs	r3, r3, r2
 801d680:	42ab      	cmp	r3, r5
 801d682:	dc26      	bgt.n	801d6d2 <_printf_common+0x96>
 801d684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d688:	1e13      	subs	r3, r2, #0
 801d68a:	6822      	ldr	r2, [r4, #0]
 801d68c:	bf18      	it	ne
 801d68e:	2301      	movne	r3, #1
 801d690:	0692      	lsls	r2, r2, #26
 801d692:	d42b      	bmi.n	801d6ec <_printf_common+0xb0>
 801d694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d698:	4649      	mov	r1, r9
 801d69a:	4638      	mov	r0, r7
 801d69c:	47c0      	blx	r8
 801d69e:	3001      	adds	r0, #1
 801d6a0:	d01e      	beq.n	801d6e0 <_printf_common+0xa4>
 801d6a2:	6823      	ldr	r3, [r4, #0]
 801d6a4:	68e5      	ldr	r5, [r4, #12]
 801d6a6:	6832      	ldr	r2, [r6, #0]
 801d6a8:	f003 0306 	and.w	r3, r3, #6
 801d6ac:	2b04      	cmp	r3, #4
 801d6ae:	bf08      	it	eq
 801d6b0:	1aad      	subeq	r5, r5, r2
 801d6b2:	68a3      	ldr	r3, [r4, #8]
 801d6b4:	6922      	ldr	r2, [r4, #16]
 801d6b6:	bf0c      	ite	eq
 801d6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d6bc:	2500      	movne	r5, #0
 801d6be:	4293      	cmp	r3, r2
 801d6c0:	bfc4      	itt	gt
 801d6c2:	1a9b      	subgt	r3, r3, r2
 801d6c4:	18ed      	addgt	r5, r5, r3
 801d6c6:	2600      	movs	r6, #0
 801d6c8:	341a      	adds	r4, #26
 801d6ca:	42b5      	cmp	r5, r6
 801d6cc:	d11a      	bne.n	801d704 <_printf_common+0xc8>
 801d6ce:	2000      	movs	r0, #0
 801d6d0:	e008      	b.n	801d6e4 <_printf_common+0xa8>
 801d6d2:	2301      	movs	r3, #1
 801d6d4:	4652      	mov	r2, sl
 801d6d6:	4649      	mov	r1, r9
 801d6d8:	4638      	mov	r0, r7
 801d6da:	47c0      	blx	r8
 801d6dc:	3001      	adds	r0, #1
 801d6de:	d103      	bne.n	801d6e8 <_printf_common+0xac>
 801d6e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6e8:	3501      	adds	r5, #1
 801d6ea:	e7c6      	b.n	801d67a <_printf_common+0x3e>
 801d6ec:	18e1      	adds	r1, r4, r3
 801d6ee:	1c5a      	adds	r2, r3, #1
 801d6f0:	2030      	movs	r0, #48	; 0x30
 801d6f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d6f6:	4422      	add	r2, r4
 801d6f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d6fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d700:	3302      	adds	r3, #2
 801d702:	e7c7      	b.n	801d694 <_printf_common+0x58>
 801d704:	2301      	movs	r3, #1
 801d706:	4622      	mov	r2, r4
 801d708:	4649      	mov	r1, r9
 801d70a:	4638      	mov	r0, r7
 801d70c:	47c0      	blx	r8
 801d70e:	3001      	adds	r0, #1
 801d710:	d0e6      	beq.n	801d6e0 <_printf_common+0xa4>
 801d712:	3601      	adds	r6, #1
 801d714:	e7d9      	b.n	801d6ca <_printf_common+0x8e>
	...

0801d718 <_printf_i>:
 801d718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d71c:	460c      	mov	r4, r1
 801d71e:	4691      	mov	r9, r2
 801d720:	7e27      	ldrb	r7, [r4, #24]
 801d722:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d724:	2f78      	cmp	r7, #120	; 0x78
 801d726:	4680      	mov	r8, r0
 801d728:	469a      	mov	sl, r3
 801d72a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d72e:	d807      	bhi.n	801d740 <_printf_i+0x28>
 801d730:	2f62      	cmp	r7, #98	; 0x62
 801d732:	d80a      	bhi.n	801d74a <_printf_i+0x32>
 801d734:	2f00      	cmp	r7, #0
 801d736:	f000 80d8 	beq.w	801d8ea <_printf_i+0x1d2>
 801d73a:	2f58      	cmp	r7, #88	; 0x58
 801d73c:	f000 80a3 	beq.w	801d886 <_printf_i+0x16e>
 801d740:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d748:	e03a      	b.n	801d7c0 <_printf_i+0xa8>
 801d74a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d74e:	2b15      	cmp	r3, #21
 801d750:	d8f6      	bhi.n	801d740 <_printf_i+0x28>
 801d752:	a001      	add	r0, pc, #4	; (adr r0, 801d758 <_printf_i+0x40>)
 801d754:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d758:	0801d7b1 	.word	0x0801d7b1
 801d75c:	0801d7c5 	.word	0x0801d7c5
 801d760:	0801d741 	.word	0x0801d741
 801d764:	0801d741 	.word	0x0801d741
 801d768:	0801d741 	.word	0x0801d741
 801d76c:	0801d741 	.word	0x0801d741
 801d770:	0801d7c5 	.word	0x0801d7c5
 801d774:	0801d741 	.word	0x0801d741
 801d778:	0801d741 	.word	0x0801d741
 801d77c:	0801d741 	.word	0x0801d741
 801d780:	0801d741 	.word	0x0801d741
 801d784:	0801d8d1 	.word	0x0801d8d1
 801d788:	0801d7f5 	.word	0x0801d7f5
 801d78c:	0801d8b3 	.word	0x0801d8b3
 801d790:	0801d741 	.word	0x0801d741
 801d794:	0801d741 	.word	0x0801d741
 801d798:	0801d8f3 	.word	0x0801d8f3
 801d79c:	0801d741 	.word	0x0801d741
 801d7a0:	0801d7f5 	.word	0x0801d7f5
 801d7a4:	0801d741 	.word	0x0801d741
 801d7a8:	0801d741 	.word	0x0801d741
 801d7ac:	0801d8bb 	.word	0x0801d8bb
 801d7b0:	680b      	ldr	r3, [r1, #0]
 801d7b2:	1d1a      	adds	r2, r3, #4
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	600a      	str	r2, [r1, #0]
 801d7b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d7bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d7c0:	2301      	movs	r3, #1
 801d7c2:	e0a3      	b.n	801d90c <_printf_i+0x1f4>
 801d7c4:	6825      	ldr	r5, [r4, #0]
 801d7c6:	6808      	ldr	r0, [r1, #0]
 801d7c8:	062e      	lsls	r6, r5, #24
 801d7ca:	f100 0304 	add.w	r3, r0, #4
 801d7ce:	d50a      	bpl.n	801d7e6 <_printf_i+0xce>
 801d7d0:	6805      	ldr	r5, [r0, #0]
 801d7d2:	600b      	str	r3, [r1, #0]
 801d7d4:	2d00      	cmp	r5, #0
 801d7d6:	da03      	bge.n	801d7e0 <_printf_i+0xc8>
 801d7d8:	232d      	movs	r3, #45	; 0x2d
 801d7da:	426d      	negs	r5, r5
 801d7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d7e0:	485e      	ldr	r0, [pc, #376]	; (801d95c <_printf_i+0x244>)
 801d7e2:	230a      	movs	r3, #10
 801d7e4:	e019      	b.n	801d81a <_printf_i+0x102>
 801d7e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d7ea:	6805      	ldr	r5, [r0, #0]
 801d7ec:	600b      	str	r3, [r1, #0]
 801d7ee:	bf18      	it	ne
 801d7f0:	b22d      	sxthne	r5, r5
 801d7f2:	e7ef      	b.n	801d7d4 <_printf_i+0xbc>
 801d7f4:	680b      	ldr	r3, [r1, #0]
 801d7f6:	6825      	ldr	r5, [r4, #0]
 801d7f8:	1d18      	adds	r0, r3, #4
 801d7fa:	6008      	str	r0, [r1, #0]
 801d7fc:	0628      	lsls	r0, r5, #24
 801d7fe:	d501      	bpl.n	801d804 <_printf_i+0xec>
 801d800:	681d      	ldr	r5, [r3, #0]
 801d802:	e002      	b.n	801d80a <_printf_i+0xf2>
 801d804:	0669      	lsls	r1, r5, #25
 801d806:	d5fb      	bpl.n	801d800 <_printf_i+0xe8>
 801d808:	881d      	ldrh	r5, [r3, #0]
 801d80a:	4854      	ldr	r0, [pc, #336]	; (801d95c <_printf_i+0x244>)
 801d80c:	2f6f      	cmp	r7, #111	; 0x6f
 801d80e:	bf0c      	ite	eq
 801d810:	2308      	moveq	r3, #8
 801d812:	230a      	movne	r3, #10
 801d814:	2100      	movs	r1, #0
 801d816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d81a:	6866      	ldr	r6, [r4, #4]
 801d81c:	60a6      	str	r6, [r4, #8]
 801d81e:	2e00      	cmp	r6, #0
 801d820:	bfa2      	ittt	ge
 801d822:	6821      	ldrge	r1, [r4, #0]
 801d824:	f021 0104 	bicge.w	r1, r1, #4
 801d828:	6021      	strge	r1, [r4, #0]
 801d82a:	b90d      	cbnz	r5, 801d830 <_printf_i+0x118>
 801d82c:	2e00      	cmp	r6, #0
 801d82e:	d04d      	beq.n	801d8cc <_printf_i+0x1b4>
 801d830:	4616      	mov	r6, r2
 801d832:	fbb5 f1f3 	udiv	r1, r5, r3
 801d836:	fb03 5711 	mls	r7, r3, r1, r5
 801d83a:	5dc7      	ldrb	r7, [r0, r7]
 801d83c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d840:	462f      	mov	r7, r5
 801d842:	42bb      	cmp	r3, r7
 801d844:	460d      	mov	r5, r1
 801d846:	d9f4      	bls.n	801d832 <_printf_i+0x11a>
 801d848:	2b08      	cmp	r3, #8
 801d84a:	d10b      	bne.n	801d864 <_printf_i+0x14c>
 801d84c:	6823      	ldr	r3, [r4, #0]
 801d84e:	07df      	lsls	r7, r3, #31
 801d850:	d508      	bpl.n	801d864 <_printf_i+0x14c>
 801d852:	6923      	ldr	r3, [r4, #16]
 801d854:	6861      	ldr	r1, [r4, #4]
 801d856:	4299      	cmp	r1, r3
 801d858:	bfde      	ittt	le
 801d85a:	2330      	movle	r3, #48	; 0x30
 801d85c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d860:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d864:	1b92      	subs	r2, r2, r6
 801d866:	6122      	str	r2, [r4, #16]
 801d868:	f8cd a000 	str.w	sl, [sp]
 801d86c:	464b      	mov	r3, r9
 801d86e:	aa03      	add	r2, sp, #12
 801d870:	4621      	mov	r1, r4
 801d872:	4640      	mov	r0, r8
 801d874:	f7ff fee2 	bl	801d63c <_printf_common>
 801d878:	3001      	adds	r0, #1
 801d87a:	d14c      	bne.n	801d916 <_printf_i+0x1fe>
 801d87c:	f04f 30ff 	mov.w	r0, #4294967295
 801d880:	b004      	add	sp, #16
 801d882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d886:	4835      	ldr	r0, [pc, #212]	; (801d95c <_printf_i+0x244>)
 801d888:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d88c:	6823      	ldr	r3, [r4, #0]
 801d88e:	680e      	ldr	r6, [r1, #0]
 801d890:	061f      	lsls	r7, r3, #24
 801d892:	f856 5b04 	ldr.w	r5, [r6], #4
 801d896:	600e      	str	r6, [r1, #0]
 801d898:	d514      	bpl.n	801d8c4 <_printf_i+0x1ac>
 801d89a:	07d9      	lsls	r1, r3, #31
 801d89c:	bf44      	itt	mi
 801d89e:	f043 0320 	orrmi.w	r3, r3, #32
 801d8a2:	6023      	strmi	r3, [r4, #0]
 801d8a4:	b91d      	cbnz	r5, 801d8ae <_printf_i+0x196>
 801d8a6:	6823      	ldr	r3, [r4, #0]
 801d8a8:	f023 0320 	bic.w	r3, r3, #32
 801d8ac:	6023      	str	r3, [r4, #0]
 801d8ae:	2310      	movs	r3, #16
 801d8b0:	e7b0      	b.n	801d814 <_printf_i+0xfc>
 801d8b2:	6823      	ldr	r3, [r4, #0]
 801d8b4:	f043 0320 	orr.w	r3, r3, #32
 801d8b8:	6023      	str	r3, [r4, #0]
 801d8ba:	2378      	movs	r3, #120	; 0x78
 801d8bc:	4828      	ldr	r0, [pc, #160]	; (801d960 <_printf_i+0x248>)
 801d8be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d8c2:	e7e3      	b.n	801d88c <_printf_i+0x174>
 801d8c4:	065e      	lsls	r6, r3, #25
 801d8c6:	bf48      	it	mi
 801d8c8:	b2ad      	uxthmi	r5, r5
 801d8ca:	e7e6      	b.n	801d89a <_printf_i+0x182>
 801d8cc:	4616      	mov	r6, r2
 801d8ce:	e7bb      	b.n	801d848 <_printf_i+0x130>
 801d8d0:	680b      	ldr	r3, [r1, #0]
 801d8d2:	6826      	ldr	r6, [r4, #0]
 801d8d4:	6960      	ldr	r0, [r4, #20]
 801d8d6:	1d1d      	adds	r5, r3, #4
 801d8d8:	600d      	str	r5, [r1, #0]
 801d8da:	0635      	lsls	r5, r6, #24
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	d501      	bpl.n	801d8e4 <_printf_i+0x1cc>
 801d8e0:	6018      	str	r0, [r3, #0]
 801d8e2:	e002      	b.n	801d8ea <_printf_i+0x1d2>
 801d8e4:	0671      	lsls	r1, r6, #25
 801d8e6:	d5fb      	bpl.n	801d8e0 <_printf_i+0x1c8>
 801d8e8:	8018      	strh	r0, [r3, #0]
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	6123      	str	r3, [r4, #16]
 801d8ee:	4616      	mov	r6, r2
 801d8f0:	e7ba      	b.n	801d868 <_printf_i+0x150>
 801d8f2:	680b      	ldr	r3, [r1, #0]
 801d8f4:	1d1a      	adds	r2, r3, #4
 801d8f6:	600a      	str	r2, [r1, #0]
 801d8f8:	681e      	ldr	r6, [r3, #0]
 801d8fa:	6862      	ldr	r2, [r4, #4]
 801d8fc:	2100      	movs	r1, #0
 801d8fe:	4630      	mov	r0, r6
 801d900:	f7e2 fc7e 	bl	8000200 <memchr>
 801d904:	b108      	cbz	r0, 801d90a <_printf_i+0x1f2>
 801d906:	1b80      	subs	r0, r0, r6
 801d908:	6060      	str	r0, [r4, #4]
 801d90a:	6863      	ldr	r3, [r4, #4]
 801d90c:	6123      	str	r3, [r4, #16]
 801d90e:	2300      	movs	r3, #0
 801d910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d914:	e7a8      	b.n	801d868 <_printf_i+0x150>
 801d916:	6923      	ldr	r3, [r4, #16]
 801d918:	4632      	mov	r2, r6
 801d91a:	4649      	mov	r1, r9
 801d91c:	4640      	mov	r0, r8
 801d91e:	47d0      	blx	sl
 801d920:	3001      	adds	r0, #1
 801d922:	d0ab      	beq.n	801d87c <_printf_i+0x164>
 801d924:	6823      	ldr	r3, [r4, #0]
 801d926:	079b      	lsls	r3, r3, #30
 801d928:	d413      	bmi.n	801d952 <_printf_i+0x23a>
 801d92a:	68e0      	ldr	r0, [r4, #12]
 801d92c:	9b03      	ldr	r3, [sp, #12]
 801d92e:	4298      	cmp	r0, r3
 801d930:	bfb8      	it	lt
 801d932:	4618      	movlt	r0, r3
 801d934:	e7a4      	b.n	801d880 <_printf_i+0x168>
 801d936:	2301      	movs	r3, #1
 801d938:	4632      	mov	r2, r6
 801d93a:	4649      	mov	r1, r9
 801d93c:	4640      	mov	r0, r8
 801d93e:	47d0      	blx	sl
 801d940:	3001      	adds	r0, #1
 801d942:	d09b      	beq.n	801d87c <_printf_i+0x164>
 801d944:	3501      	adds	r5, #1
 801d946:	68e3      	ldr	r3, [r4, #12]
 801d948:	9903      	ldr	r1, [sp, #12]
 801d94a:	1a5b      	subs	r3, r3, r1
 801d94c:	42ab      	cmp	r3, r5
 801d94e:	dcf2      	bgt.n	801d936 <_printf_i+0x21e>
 801d950:	e7eb      	b.n	801d92a <_printf_i+0x212>
 801d952:	2500      	movs	r5, #0
 801d954:	f104 0619 	add.w	r6, r4, #25
 801d958:	e7f5      	b.n	801d946 <_printf_i+0x22e>
 801d95a:	bf00      	nop
 801d95c:	08029726 	.word	0x08029726
 801d960:	08029737 	.word	0x08029737

0801d964 <_scanf_float>:
 801d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d968:	b087      	sub	sp, #28
 801d96a:	4617      	mov	r7, r2
 801d96c:	9303      	str	r3, [sp, #12]
 801d96e:	688b      	ldr	r3, [r1, #8]
 801d970:	1e5a      	subs	r2, r3, #1
 801d972:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d976:	bf83      	ittte	hi
 801d978:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d97c:	195b      	addhi	r3, r3, r5
 801d97e:	9302      	strhi	r3, [sp, #8]
 801d980:	2300      	movls	r3, #0
 801d982:	bf86      	itte	hi
 801d984:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d988:	608b      	strhi	r3, [r1, #8]
 801d98a:	9302      	strls	r3, [sp, #8]
 801d98c:	680b      	ldr	r3, [r1, #0]
 801d98e:	468b      	mov	fp, r1
 801d990:	2500      	movs	r5, #0
 801d992:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801d996:	f84b 3b1c 	str.w	r3, [fp], #28
 801d99a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d99e:	4680      	mov	r8, r0
 801d9a0:	460c      	mov	r4, r1
 801d9a2:	465e      	mov	r6, fp
 801d9a4:	46aa      	mov	sl, r5
 801d9a6:	46a9      	mov	r9, r5
 801d9a8:	9501      	str	r5, [sp, #4]
 801d9aa:	68a2      	ldr	r2, [r4, #8]
 801d9ac:	b152      	cbz	r2, 801d9c4 <_scanf_float+0x60>
 801d9ae:	683b      	ldr	r3, [r7, #0]
 801d9b0:	781b      	ldrb	r3, [r3, #0]
 801d9b2:	2b4e      	cmp	r3, #78	; 0x4e
 801d9b4:	d864      	bhi.n	801da80 <_scanf_float+0x11c>
 801d9b6:	2b40      	cmp	r3, #64	; 0x40
 801d9b8:	d83c      	bhi.n	801da34 <_scanf_float+0xd0>
 801d9ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d9be:	b2c8      	uxtb	r0, r1
 801d9c0:	280e      	cmp	r0, #14
 801d9c2:	d93a      	bls.n	801da3a <_scanf_float+0xd6>
 801d9c4:	f1b9 0f00 	cmp.w	r9, #0
 801d9c8:	d003      	beq.n	801d9d2 <_scanf_float+0x6e>
 801d9ca:	6823      	ldr	r3, [r4, #0]
 801d9cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d9d0:	6023      	str	r3, [r4, #0]
 801d9d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d9d6:	f1ba 0f01 	cmp.w	sl, #1
 801d9da:	f200 8113 	bhi.w	801dc04 <_scanf_float+0x2a0>
 801d9de:	455e      	cmp	r6, fp
 801d9e0:	f200 8105 	bhi.w	801dbee <_scanf_float+0x28a>
 801d9e4:	2501      	movs	r5, #1
 801d9e6:	4628      	mov	r0, r5
 801d9e8:	b007      	add	sp, #28
 801d9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801d9f2:	2a0d      	cmp	r2, #13
 801d9f4:	d8e6      	bhi.n	801d9c4 <_scanf_float+0x60>
 801d9f6:	a101      	add	r1, pc, #4	; (adr r1, 801d9fc <_scanf_float+0x98>)
 801d9f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d9fc:	0801db3b 	.word	0x0801db3b
 801da00:	0801d9c5 	.word	0x0801d9c5
 801da04:	0801d9c5 	.word	0x0801d9c5
 801da08:	0801d9c5 	.word	0x0801d9c5
 801da0c:	0801db9b 	.word	0x0801db9b
 801da10:	0801db73 	.word	0x0801db73
 801da14:	0801d9c5 	.word	0x0801d9c5
 801da18:	0801d9c5 	.word	0x0801d9c5
 801da1c:	0801db49 	.word	0x0801db49
 801da20:	0801d9c5 	.word	0x0801d9c5
 801da24:	0801d9c5 	.word	0x0801d9c5
 801da28:	0801d9c5 	.word	0x0801d9c5
 801da2c:	0801d9c5 	.word	0x0801d9c5
 801da30:	0801db01 	.word	0x0801db01
 801da34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801da38:	e7db      	b.n	801d9f2 <_scanf_float+0x8e>
 801da3a:	290e      	cmp	r1, #14
 801da3c:	d8c2      	bhi.n	801d9c4 <_scanf_float+0x60>
 801da3e:	a001      	add	r0, pc, #4	; (adr r0, 801da44 <_scanf_float+0xe0>)
 801da40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801da44:	0801daf3 	.word	0x0801daf3
 801da48:	0801d9c5 	.word	0x0801d9c5
 801da4c:	0801daf3 	.word	0x0801daf3
 801da50:	0801db87 	.word	0x0801db87
 801da54:	0801d9c5 	.word	0x0801d9c5
 801da58:	0801daa1 	.word	0x0801daa1
 801da5c:	0801dadd 	.word	0x0801dadd
 801da60:	0801dadd 	.word	0x0801dadd
 801da64:	0801dadd 	.word	0x0801dadd
 801da68:	0801dadd 	.word	0x0801dadd
 801da6c:	0801dadd 	.word	0x0801dadd
 801da70:	0801dadd 	.word	0x0801dadd
 801da74:	0801dadd 	.word	0x0801dadd
 801da78:	0801dadd 	.word	0x0801dadd
 801da7c:	0801dadd 	.word	0x0801dadd
 801da80:	2b6e      	cmp	r3, #110	; 0x6e
 801da82:	d809      	bhi.n	801da98 <_scanf_float+0x134>
 801da84:	2b60      	cmp	r3, #96	; 0x60
 801da86:	d8b2      	bhi.n	801d9ee <_scanf_float+0x8a>
 801da88:	2b54      	cmp	r3, #84	; 0x54
 801da8a:	d077      	beq.n	801db7c <_scanf_float+0x218>
 801da8c:	2b59      	cmp	r3, #89	; 0x59
 801da8e:	d199      	bne.n	801d9c4 <_scanf_float+0x60>
 801da90:	2d07      	cmp	r5, #7
 801da92:	d197      	bne.n	801d9c4 <_scanf_float+0x60>
 801da94:	2508      	movs	r5, #8
 801da96:	e029      	b.n	801daec <_scanf_float+0x188>
 801da98:	2b74      	cmp	r3, #116	; 0x74
 801da9a:	d06f      	beq.n	801db7c <_scanf_float+0x218>
 801da9c:	2b79      	cmp	r3, #121	; 0x79
 801da9e:	e7f6      	b.n	801da8e <_scanf_float+0x12a>
 801daa0:	6821      	ldr	r1, [r4, #0]
 801daa2:	05c8      	lsls	r0, r1, #23
 801daa4:	d51a      	bpl.n	801dadc <_scanf_float+0x178>
 801daa6:	9b02      	ldr	r3, [sp, #8]
 801daa8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801daac:	6021      	str	r1, [r4, #0]
 801daae:	f109 0901 	add.w	r9, r9, #1
 801dab2:	b11b      	cbz	r3, 801dabc <_scanf_float+0x158>
 801dab4:	3b01      	subs	r3, #1
 801dab6:	3201      	adds	r2, #1
 801dab8:	9302      	str	r3, [sp, #8]
 801daba:	60a2      	str	r2, [r4, #8]
 801dabc:	68a3      	ldr	r3, [r4, #8]
 801dabe:	3b01      	subs	r3, #1
 801dac0:	60a3      	str	r3, [r4, #8]
 801dac2:	6923      	ldr	r3, [r4, #16]
 801dac4:	3301      	adds	r3, #1
 801dac6:	6123      	str	r3, [r4, #16]
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	3b01      	subs	r3, #1
 801dacc:	2b00      	cmp	r3, #0
 801dace:	607b      	str	r3, [r7, #4]
 801dad0:	f340 8084 	ble.w	801dbdc <_scanf_float+0x278>
 801dad4:	683b      	ldr	r3, [r7, #0]
 801dad6:	3301      	adds	r3, #1
 801dad8:	603b      	str	r3, [r7, #0]
 801dada:	e766      	b.n	801d9aa <_scanf_float+0x46>
 801dadc:	eb1a 0f05 	cmn.w	sl, r5
 801dae0:	f47f af70 	bne.w	801d9c4 <_scanf_float+0x60>
 801dae4:	6822      	ldr	r2, [r4, #0]
 801dae6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801daea:	6022      	str	r2, [r4, #0]
 801daec:	f806 3b01 	strb.w	r3, [r6], #1
 801daf0:	e7e4      	b.n	801dabc <_scanf_float+0x158>
 801daf2:	6822      	ldr	r2, [r4, #0]
 801daf4:	0610      	lsls	r0, r2, #24
 801daf6:	f57f af65 	bpl.w	801d9c4 <_scanf_float+0x60>
 801dafa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801dafe:	e7f4      	b.n	801daea <_scanf_float+0x186>
 801db00:	f1ba 0f00 	cmp.w	sl, #0
 801db04:	d10e      	bne.n	801db24 <_scanf_float+0x1c0>
 801db06:	f1b9 0f00 	cmp.w	r9, #0
 801db0a:	d10e      	bne.n	801db2a <_scanf_float+0x1c6>
 801db0c:	6822      	ldr	r2, [r4, #0]
 801db0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801db12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801db16:	d108      	bne.n	801db2a <_scanf_float+0x1c6>
 801db18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801db1c:	6022      	str	r2, [r4, #0]
 801db1e:	f04f 0a01 	mov.w	sl, #1
 801db22:	e7e3      	b.n	801daec <_scanf_float+0x188>
 801db24:	f1ba 0f02 	cmp.w	sl, #2
 801db28:	d055      	beq.n	801dbd6 <_scanf_float+0x272>
 801db2a:	2d01      	cmp	r5, #1
 801db2c:	d002      	beq.n	801db34 <_scanf_float+0x1d0>
 801db2e:	2d04      	cmp	r5, #4
 801db30:	f47f af48 	bne.w	801d9c4 <_scanf_float+0x60>
 801db34:	3501      	adds	r5, #1
 801db36:	b2ed      	uxtb	r5, r5
 801db38:	e7d8      	b.n	801daec <_scanf_float+0x188>
 801db3a:	f1ba 0f01 	cmp.w	sl, #1
 801db3e:	f47f af41 	bne.w	801d9c4 <_scanf_float+0x60>
 801db42:	f04f 0a02 	mov.w	sl, #2
 801db46:	e7d1      	b.n	801daec <_scanf_float+0x188>
 801db48:	b97d      	cbnz	r5, 801db6a <_scanf_float+0x206>
 801db4a:	f1b9 0f00 	cmp.w	r9, #0
 801db4e:	f47f af3c 	bne.w	801d9ca <_scanf_float+0x66>
 801db52:	6822      	ldr	r2, [r4, #0]
 801db54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801db58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801db5c:	f47f af39 	bne.w	801d9d2 <_scanf_float+0x6e>
 801db60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801db64:	6022      	str	r2, [r4, #0]
 801db66:	2501      	movs	r5, #1
 801db68:	e7c0      	b.n	801daec <_scanf_float+0x188>
 801db6a:	2d03      	cmp	r5, #3
 801db6c:	d0e2      	beq.n	801db34 <_scanf_float+0x1d0>
 801db6e:	2d05      	cmp	r5, #5
 801db70:	e7de      	b.n	801db30 <_scanf_float+0x1cc>
 801db72:	2d02      	cmp	r5, #2
 801db74:	f47f af26 	bne.w	801d9c4 <_scanf_float+0x60>
 801db78:	2503      	movs	r5, #3
 801db7a:	e7b7      	b.n	801daec <_scanf_float+0x188>
 801db7c:	2d06      	cmp	r5, #6
 801db7e:	f47f af21 	bne.w	801d9c4 <_scanf_float+0x60>
 801db82:	2507      	movs	r5, #7
 801db84:	e7b2      	b.n	801daec <_scanf_float+0x188>
 801db86:	6822      	ldr	r2, [r4, #0]
 801db88:	0591      	lsls	r1, r2, #22
 801db8a:	f57f af1b 	bpl.w	801d9c4 <_scanf_float+0x60>
 801db8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801db92:	6022      	str	r2, [r4, #0]
 801db94:	f8cd 9004 	str.w	r9, [sp, #4]
 801db98:	e7a8      	b.n	801daec <_scanf_float+0x188>
 801db9a:	6822      	ldr	r2, [r4, #0]
 801db9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801dba0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801dba4:	d006      	beq.n	801dbb4 <_scanf_float+0x250>
 801dba6:	0550      	lsls	r0, r2, #21
 801dba8:	f57f af0c 	bpl.w	801d9c4 <_scanf_float+0x60>
 801dbac:	f1b9 0f00 	cmp.w	r9, #0
 801dbb0:	f43f af0f 	beq.w	801d9d2 <_scanf_float+0x6e>
 801dbb4:	0591      	lsls	r1, r2, #22
 801dbb6:	bf58      	it	pl
 801dbb8:	9901      	ldrpl	r1, [sp, #4]
 801dbba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dbbe:	bf58      	it	pl
 801dbc0:	eba9 0101 	subpl.w	r1, r9, r1
 801dbc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801dbc8:	bf58      	it	pl
 801dbca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801dbce:	6022      	str	r2, [r4, #0]
 801dbd0:	f04f 0900 	mov.w	r9, #0
 801dbd4:	e78a      	b.n	801daec <_scanf_float+0x188>
 801dbd6:	f04f 0a03 	mov.w	sl, #3
 801dbda:	e787      	b.n	801daec <_scanf_float+0x188>
 801dbdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801dbe0:	4639      	mov	r1, r7
 801dbe2:	4640      	mov	r0, r8
 801dbe4:	4798      	blx	r3
 801dbe6:	2800      	cmp	r0, #0
 801dbe8:	f43f aedf 	beq.w	801d9aa <_scanf_float+0x46>
 801dbec:	e6ea      	b.n	801d9c4 <_scanf_float+0x60>
 801dbee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dbf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dbf6:	463a      	mov	r2, r7
 801dbf8:	4640      	mov	r0, r8
 801dbfa:	4798      	blx	r3
 801dbfc:	6923      	ldr	r3, [r4, #16]
 801dbfe:	3b01      	subs	r3, #1
 801dc00:	6123      	str	r3, [r4, #16]
 801dc02:	e6ec      	b.n	801d9de <_scanf_float+0x7a>
 801dc04:	1e6b      	subs	r3, r5, #1
 801dc06:	2b06      	cmp	r3, #6
 801dc08:	d825      	bhi.n	801dc56 <_scanf_float+0x2f2>
 801dc0a:	2d02      	cmp	r5, #2
 801dc0c:	d836      	bhi.n	801dc7c <_scanf_float+0x318>
 801dc0e:	455e      	cmp	r6, fp
 801dc10:	f67f aee8 	bls.w	801d9e4 <_scanf_float+0x80>
 801dc14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dc18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dc1c:	463a      	mov	r2, r7
 801dc1e:	4640      	mov	r0, r8
 801dc20:	4798      	blx	r3
 801dc22:	6923      	ldr	r3, [r4, #16]
 801dc24:	3b01      	subs	r3, #1
 801dc26:	6123      	str	r3, [r4, #16]
 801dc28:	e7f1      	b.n	801dc0e <_scanf_float+0x2aa>
 801dc2a:	9802      	ldr	r0, [sp, #8]
 801dc2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dc30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801dc34:	9002      	str	r0, [sp, #8]
 801dc36:	463a      	mov	r2, r7
 801dc38:	4640      	mov	r0, r8
 801dc3a:	4798      	blx	r3
 801dc3c:	6923      	ldr	r3, [r4, #16]
 801dc3e:	3b01      	subs	r3, #1
 801dc40:	6123      	str	r3, [r4, #16]
 801dc42:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dc46:	fa5f fa8a 	uxtb.w	sl, sl
 801dc4a:	f1ba 0f02 	cmp.w	sl, #2
 801dc4e:	d1ec      	bne.n	801dc2a <_scanf_float+0x2c6>
 801dc50:	3d03      	subs	r5, #3
 801dc52:	b2ed      	uxtb	r5, r5
 801dc54:	1b76      	subs	r6, r6, r5
 801dc56:	6823      	ldr	r3, [r4, #0]
 801dc58:	05da      	lsls	r2, r3, #23
 801dc5a:	d52f      	bpl.n	801dcbc <_scanf_float+0x358>
 801dc5c:	055b      	lsls	r3, r3, #21
 801dc5e:	d510      	bpl.n	801dc82 <_scanf_float+0x31e>
 801dc60:	455e      	cmp	r6, fp
 801dc62:	f67f aebf 	bls.w	801d9e4 <_scanf_float+0x80>
 801dc66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dc6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dc6e:	463a      	mov	r2, r7
 801dc70:	4640      	mov	r0, r8
 801dc72:	4798      	blx	r3
 801dc74:	6923      	ldr	r3, [r4, #16]
 801dc76:	3b01      	subs	r3, #1
 801dc78:	6123      	str	r3, [r4, #16]
 801dc7a:	e7f1      	b.n	801dc60 <_scanf_float+0x2fc>
 801dc7c:	46aa      	mov	sl, r5
 801dc7e:	9602      	str	r6, [sp, #8]
 801dc80:	e7df      	b.n	801dc42 <_scanf_float+0x2de>
 801dc82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dc86:	6923      	ldr	r3, [r4, #16]
 801dc88:	2965      	cmp	r1, #101	; 0x65
 801dc8a:	f103 33ff 	add.w	r3, r3, #4294967295
 801dc8e:	f106 35ff 	add.w	r5, r6, #4294967295
 801dc92:	6123      	str	r3, [r4, #16]
 801dc94:	d00c      	beq.n	801dcb0 <_scanf_float+0x34c>
 801dc96:	2945      	cmp	r1, #69	; 0x45
 801dc98:	d00a      	beq.n	801dcb0 <_scanf_float+0x34c>
 801dc9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dc9e:	463a      	mov	r2, r7
 801dca0:	4640      	mov	r0, r8
 801dca2:	4798      	blx	r3
 801dca4:	6923      	ldr	r3, [r4, #16]
 801dca6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dcaa:	3b01      	subs	r3, #1
 801dcac:	1eb5      	subs	r5, r6, #2
 801dcae:	6123      	str	r3, [r4, #16]
 801dcb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dcb4:	463a      	mov	r2, r7
 801dcb6:	4640      	mov	r0, r8
 801dcb8:	4798      	blx	r3
 801dcba:	462e      	mov	r6, r5
 801dcbc:	6825      	ldr	r5, [r4, #0]
 801dcbe:	f015 0510 	ands.w	r5, r5, #16
 801dcc2:	d158      	bne.n	801dd76 <_scanf_float+0x412>
 801dcc4:	7035      	strb	r5, [r6, #0]
 801dcc6:	6823      	ldr	r3, [r4, #0]
 801dcc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801dccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dcd0:	d11c      	bne.n	801dd0c <_scanf_float+0x3a8>
 801dcd2:	9b01      	ldr	r3, [sp, #4]
 801dcd4:	454b      	cmp	r3, r9
 801dcd6:	eba3 0209 	sub.w	r2, r3, r9
 801dcda:	d124      	bne.n	801dd26 <_scanf_float+0x3c2>
 801dcdc:	2200      	movs	r2, #0
 801dcde:	4659      	mov	r1, fp
 801dce0:	4640      	mov	r0, r8
 801dce2:	f000 feaf 	bl	801ea44 <_strtod_r>
 801dce6:	9b03      	ldr	r3, [sp, #12]
 801dce8:	6821      	ldr	r1, [r4, #0]
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	f011 0f02 	tst.w	r1, #2
 801dcf0:	ec57 6b10 	vmov	r6, r7, d0
 801dcf4:	f103 0204 	add.w	r2, r3, #4
 801dcf8:	d020      	beq.n	801dd3c <_scanf_float+0x3d8>
 801dcfa:	9903      	ldr	r1, [sp, #12]
 801dcfc:	600a      	str	r2, [r1, #0]
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	e9c3 6700 	strd	r6, r7, [r3]
 801dd04:	68e3      	ldr	r3, [r4, #12]
 801dd06:	3301      	adds	r3, #1
 801dd08:	60e3      	str	r3, [r4, #12]
 801dd0a:	e66c      	b.n	801d9e6 <_scanf_float+0x82>
 801dd0c:	9b04      	ldr	r3, [sp, #16]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d0e4      	beq.n	801dcdc <_scanf_float+0x378>
 801dd12:	9905      	ldr	r1, [sp, #20]
 801dd14:	230a      	movs	r3, #10
 801dd16:	462a      	mov	r2, r5
 801dd18:	3101      	adds	r1, #1
 801dd1a:	4640      	mov	r0, r8
 801dd1c:	f000 ff1c 	bl	801eb58 <_strtol_r>
 801dd20:	9b04      	ldr	r3, [sp, #16]
 801dd22:	9e05      	ldr	r6, [sp, #20]
 801dd24:	1ac2      	subs	r2, r0, r3
 801dd26:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801dd2a:	429e      	cmp	r6, r3
 801dd2c:	bf28      	it	cs
 801dd2e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801dd32:	4912      	ldr	r1, [pc, #72]	; (801dd7c <_scanf_float+0x418>)
 801dd34:	4630      	mov	r0, r6
 801dd36:	f000 f82b 	bl	801dd90 <siprintf>
 801dd3a:	e7cf      	b.n	801dcdc <_scanf_float+0x378>
 801dd3c:	f011 0f04 	tst.w	r1, #4
 801dd40:	9903      	ldr	r1, [sp, #12]
 801dd42:	600a      	str	r2, [r1, #0]
 801dd44:	d1db      	bne.n	801dcfe <_scanf_float+0x39a>
 801dd46:	f8d3 8000 	ldr.w	r8, [r3]
 801dd4a:	ee10 2a10 	vmov	r2, s0
 801dd4e:	ee10 0a10 	vmov	r0, s0
 801dd52:	463b      	mov	r3, r7
 801dd54:	4639      	mov	r1, r7
 801dd56:	f7e2 fef9 	bl	8000b4c <__aeabi_dcmpun>
 801dd5a:	b128      	cbz	r0, 801dd68 <_scanf_float+0x404>
 801dd5c:	4808      	ldr	r0, [pc, #32]	; (801dd80 <_scanf_float+0x41c>)
 801dd5e:	f000 f811 	bl	801dd84 <nanf>
 801dd62:	ed88 0a00 	vstr	s0, [r8]
 801dd66:	e7cd      	b.n	801dd04 <_scanf_float+0x3a0>
 801dd68:	4630      	mov	r0, r6
 801dd6a:	4639      	mov	r1, r7
 801dd6c:	f7e2 ff4c 	bl	8000c08 <__aeabi_d2f>
 801dd70:	f8c8 0000 	str.w	r0, [r8]
 801dd74:	e7c6      	b.n	801dd04 <_scanf_float+0x3a0>
 801dd76:	2500      	movs	r5, #0
 801dd78:	e635      	b.n	801d9e6 <_scanf_float+0x82>
 801dd7a:	bf00      	nop
 801dd7c:	08029748 	.word	0x08029748
 801dd80:	08029bc0 	.word	0x08029bc0

0801dd84 <nanf>:
 801dd84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801dd8c <nanf+0x8>
 801dd88:	4770      	bx	lr
 801dd8a:	bf00      	nop
 801dd8c:	7fc00000 	.word	0x7fc00000

0801dd90 <siprintf>:
 801dd90:	b40e      	push	{r1, r2, r3}
 801dd92:	b500      	push	{lr}
 801dd94:	b09c      	sub	sp, #112	; 0x70
 801dd96:	ab1d      	add	r3, sp, #116	; 0x74
 801dd98:	9002      	str	r0, [sp, #8]
 801dd9a:	9006      	str	r0, [sp, #24]
 801dd9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dda0:	4809      	ldr	r0, [pc, #36]	; (801ddc8 <siprintf+0x38>)
 801dda2:	9107      	str	r1, [sp, #28]
 801dda4:	9104      	str	r1, [sp, #16]
 801dda6:	4909      	ldr	r1, [pc, #36]	; (801ddcc <siprintf+0x3c>)
 801dda8:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddac:	9105      	str	r1, [sp, #20]
 801ddae:	6800      	ldr	r0, [r0, #0]
 801ddb0:	9301      	str	r3, [sp, #4]
 801ddb2:	a902      	add	r1, sp, #8
 801ddb4:	f002 ffb0 	bl	8020d18 <_svfiprintf_r>
 801ddb8:	9b02      	ldr	r3, [sp, #8]
 801ddba:	2200      	movs	r2, #0
 801ddbc:	701a      	strb	r2, [r3, #0]
 801ddbe:	b01c      	add	sp, #112	; 0x70
 801ddc0:	f85d eb04 	ldr.w	lr, [sp], #4
 801ddc4:	b003      	add	sp, #12
 801ddc6:	4770      	bx	lr
 801ddc8:	20000634 	.word	0x20000634
 801ddcc:	ffff0208 	.word	0xffff0208

0801ddd0 <strncpy>:
 801ddd0:	b510      	push	{r4, lr}
 801ddd2:	3901      	subs	r1, #1
 801ddd4:	4603      	mov	r3, r0
 801ddd6:	b132      	cbz	r2, 801dde6 <strncpy+0x16>
 801ddd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dddc:	f803 4b01 	strb.w	r4, [r3], #1
 801dde0:	3a01      	subs	r2, #1
 801dde2:	2c00      	cmp	r4, #0
 801dde4:	d1f7      	bne.n	801ddd6 <strncpy+0x6>
 801dde6:	441a      	add	r2, r3
 801dde8:	2100      	movs	r1, #0
 801ddea:	4293      	cmp	r3, r2
 801ddec:	d100      	bne.n	801ddf0 <strncpy+0x20>
 801ddee:	bd10      	pop	{r4, pc}
 801ddf0:	f803 1b01 	strb.w	r1, [r3], #1
 801ddf4:	e7f9      	b.n	801ddea <strncpy+0x1a>

0801ddf6 <sulp>:
 801ddf6:	b570      	push	{r4, r5, r6, lr}
 801ddf8:	4604      	mov	r4, r0
 801ddfa:	460d      	mov	r5, r1
 801ddfc:	ec45 4b10 	vmov	d0, r4, r5
 801de00:	4616      	mov	r6, r2
 801de02:	f002 fd25 	bl	8020850 <__ulp>
 801de06:	ec51 0b10 	vmov	r0, r1, d0
 801de0a:	b17e      	cbz	r6, 801de2c <sulp+0x36>
 801de0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801de10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801de14:	2b00      	cmp	r3, #0
 801de16:	dd09      	ble.n	801de2c <sulp+0x36>
 801de18:	051b      	lsls	r3, r3, #20
 801de1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801de1e:	2400      	movs	r4, #0
 801de20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801de24:	4622      	mov	r2, r4
 801de26:	462b      	mov	r3, r5
 801de28:	f7e2 fbf6 	bl	8000618 <__aeabi_dmul>
 801de2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801de30 <_strtod_l>:
 801de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de34:	b0a3      	sub	sp, #140	; 0x8c
 801de36:	461f      	mov	r7, r3
 801de38:	2300      	movs	r3, #0
 801de3a:	931e      	str	r3, [sp, #120]	; 0x78
 801de3c:	4ba4      	ldr	r3, [pc, #656]	; (801e0d0 <_strtod_l+0x2a0>)
 801de3e:	9219      	str	r2, [sp, #100]	; 0x64
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	9307      	str	r3, [sp, #28]
 801de44:	4604      	mov	r4, r0
 801de46:	4618      	mov	r0, r3
 801de48:	4688      	mov	r8, r1
 801de4a:	f7e2 f9d1 	bl	80001f0 <strlen>
 801de4e:	f04f 0a00 	mov.w	sl, #0
 801de52:	4605      	mov	r5, r0
 801de54:	f04f 0b00 	mov.w	fp, #0
 801de58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801de5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801de5e:	781a      	ldrb	r2, [r3, #0]
 801de60:	2a2b      	cmp	r2, #43	; 0x2b
 801de62:	d04c      	beq.n	801defe <_strtod_l+0xce>
 801de64:	d839      	bhi.n	801deda <_strtod_l+0xaa>
 801de66:	2a0d      	cmp	r2, #13
 801de68:	d832      	bhi.n	801ded0 <_strtod_l+0xa0>
 801de6a:	2a08      	cmp	r2, #8
 801de6c:	d832      	bhi.n	801ded4 <_strtod_l+0xa4>
 801de6e:	2a00      	cmp	r2, #0
 801de70:	d03c      	beq.n	801deec <_strtod_l+0xbc>
 801de72:	2300      	movs	r3, #0
 801de74:	930e      	str	r3, [sp, #56]	; 0x38
 801de76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801de78:	7833      	ldrb	r3, [r6, #0]
 801de7a:	2b30      	cmp	r3, #48	; 0x30
 801de7c:	f040 80b4 	bne.w	801dfe8 <_strtod_l+0x1b8>
 801de80:	7873      	ldrb	r3, [r6, #1]
 801de82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801de86:	2b58      	cmp	r3, #88	; 0x58
 801de88:	d16c      	bne.n	801df64 <_strtod_l+0x134>
 801de8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de8c:	9301      	str	r3, [sp, #4]
 801de8e:	ab1e      	add	r3, sp, #120	; 0x78
 801de90:	9702      	str	r7, [sp, #8]
 801de92:	9300      	str	r3, [sp, #0]
 801de94:	4a8f      	ldr	r2, [pc, #572]	; (801e0d4 <_strtod_l+0x2a4>)
 801de96:	ab1f      	add	r3, sp, #124	; 0x7c
 801de98:	a91d      	add	r1, sp, #116	; 0x74
 801de9a:	4620      	mov	r0, r4
 801de9c:	f001 fe34 	bl	801fb08 <__gethex>
 801dea0:	f010 0707 	ands.w	r7, r0, #7
 801dea4:	4605      	mov	r5, r0
 801dea6:	d005      	beq.n	801deb4 <_strtod_l+0x84>
 801dea8:	2f06      	cmp	r7, #6
 801deaa:	d12a      	bne.n	801df02 <_strtod_l+0xd2>
 801deac:	3601      	adds	r6, #1
 801deae:	2300      	movs	r3, #0
 801deb0:	961d      	str	r6, [sp, #116]	; 0x74
 801deb2:	930e      	str	r3, [sp, #56]	; 0x38
 801deb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	f040 8596 	bne.w	801e9e8 <_strtod_l+0xbb8>
 801debc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801debe:	b1db      	cbz	r3, 801def8 <_strtod_l+0xc8>
 801dec0:	4652      	mov	r2, sl
 801dec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801dec6:	ec43 2b10 	vmov	d0, r2, r3
 801deca:	b023      	add	sp, #140	; 0x8c
 801decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ded0:	2a20      	cmp	r2, #32
 801ded2:	d1ce      	bne.n	801de72 <_strtod_l+0x42>
 801ded4:	3301      	adds	r3, #1
 801ded6:	931d      	str	r3, [sp, #116]	; 0x74
 801ded8:	e7c0      	b.n	801de5c <_strtod_l+0x2c>
 801deda:	2a2d      	cmp	r2, #45	; 0x2d
 801dedc:	d1c9      	bne.n	801de72 <_strtod_l+0x42>
 801dede:	2201      	movs	r2, #1
 801dee0:	920e      	str	r2, [sp, #56]	; 0x38
 801dee2:	1c5a      	adds	r2, r3, #1
 801dee4:	921d      	str	r2, [sp, #116]	; 0x74
 801dee6:	785b      	ldrb	r3, [r3, #1]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d1c4      	bne.n	801de76 <_strtod_l+0x46>
 801deec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801deee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801def2:	2b00      	cmp	r3, #0
 801def4:	f040 8576 	bne.w	801e9e4 <_strtod_l+0xbb4>
 801def8:	4652      	mov	r2, sl
 801defa:	465b      	mov	r3, fp
 801defc:	e7e3      	b.n	801dec6 <_strtod_l+0x96>
 801defe:	2200      	movs	r2, #0
 801df00:	e7ee      	b.n	801dee0 <_strtod_l+0xb0>
 801df02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801df04:	b13a      	cbz	r2, 801df16 <_strtod_l+0xe6>
 801df06:	2135      	movs	r1, #53	; 0x35
 801df08:	a820      	add	r0, sp, #128	; 0x80
 801df0a:	f002 fdac 	bl	8020a66 <__copybits>
 801df0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801df10:	4620      	mov	r0, r4
 801df12:	f002 f971 	bl	80201f8 <_Bfree>
 801df16:	3f01      	subs	r7, #1
 801df18:	2f05      	cmp	r7, #5
 801df1a:	d807      	bhi.n	801df2c <_strtod_l+0xfc>
 801df1c:	e8df f007 	tbb	[pc, r7]
 801df20:	1d180b0e 	.word	0x1d180b0e
 801df24:	030e      	.short	0x030e
 801df26:	f04f 0b00 	mov.w	fp, #0
 801df2a:	46da      	mov	sl, fp
 801df2c:	0728      	lsls	r0, r5, #28
 801df2e:	d5c1      	bpl.n	801deb4 <_strtod_l+0x84>
 801df30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801df34:	e7be      	b.n	801deb4 <_strtod_l+0x84>
 801df36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801df3a:	e7f7      	b.n	801df2c <_strtod_l+0xfc>
 801df3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801df40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801df42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801df46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801df4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801df4e:	e7ed      	b.n	801df2c <_strtod_l+0xfc>
 801df50:	f8df b184 	ldr.w	fp, [pc, #388]	; 801e0d8 <_strtod_l+0x2a8>
 801df54:	f04f 0a00 	mov.w	sl, #0
 801df58:	e7e8      	b.n	801df2c <_strtod_l+0xfc>
 801df5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801df5e:	f04f 3aff 	mov.w	sl, #4294967295
 801df62:	e7e3      	b.n	801df2c <_strtod_l+0xfc>
 801df64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df66:	1c5a      	adds	r2, r3, #1
 801df68:	921d      	str	r2, [sp, #116]	; 0x74
 801df6a:	785b      	ldrb	r3, [r3, #1]
 801df6c:	2b30      	cmp	r3, #48	; 0x30
 801df6e:	d0f9      	beq.n	801df64 <_strtod_l+0x134>
 801df70:	2b00      	cmp	r3, #0
 801df72:	d09f      	beq.n	801deb4 <_strtod_l+0x84>
 801df74:	2301      	movs	r3, #1
 801df76:	f04f 0900 	mov.w	r9, #0
 801df7a:	9304      	str	r3, [sp, #16]
 801df7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df7e:	930a      	str	r3, [sp, #40]	; 0x28
 801df80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801df84:	464f      	mov	r7, r9
 801df86:	220a      	movs	r2, #10
 801df88:	981d      	ldr	r0, [sp, #116]	; 0x74
 801df8a:	7806      	ldrb	r6, [r0, #0]
 801df8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801df90:	b2d9      	uxtb	r1, r3
 801df92:	2909      	cmp	r1, #9
 801df94:	d92a      	bls.n	801dfec <_strtod_l+0x1bc>
 801df96:	9907      	ldr	r1, [sp, #28]
 801df98:	462a      	mov	r2, r5
 801df9a:	f003 f818 	bl	8020fce <strncmp>
 801df9e:	b398      	cbz	r0, 801e008 <_strtod_l+0x1d8>
 801dfa0:	2000      	movs	r0, #0
 801dfa2:	4633      	mov	r3, r6
 801dfa4:	463d      	mov	r5, r7
 801dfa6:	9007      	str	r0, [sp, #28]
 801dfa8:	4602      	mov	r2, r0
 801dfaa:	2b65      	cmp	r3, #101	; 0x65
 801dfac:	d001      	beq.n	801dfb2 <_strtod_l+0x182>
 801dfae:	2b45      	cmp	r3, #69	; 0x45
 801dfb0:	d118      	bne.n	801dfe4 <_strtod_l+0x1b4>
 801dfb2:	b91d      	cbnz	r5, 801dfbc <_strtod_l+0x18c>
 801dfb4:	9b04      	ldr	r3, [sp, #16]
 801dfb6:	4303      	orrs	r3, r0
 801dfb8:	d098      	beq.n	801deec <_strtod_l+0xbc>
 801dfba:	2500      	movs	r5, #0
 801dfbc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801dfc0:	f108 0301 	add.w	r3, r8, #1
 801dfc4:	931d      	str	r3, [sp, #116]	; 0x74
 801dfc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801dfca:	2b2b      	cmp	r3, #43	; 0x2b
 801dfcc:	d075      	beq.n	801e0ba <_strtod_l+0x28a>
 801dfce:	2b2d      	cmp	r3, #45	; 0x2d
 801dfd0:	d07b      	beq.n	801e0ca <_strtod_l+0x29a>
 801dfd2:	f04f 0c00 	mov.w	ip, #0
 801dfd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801dfda:	2909      	cmp	r1, #9
 801dfdc:	f240 8082 	bls.w	801e0e4 <_strtod_l+0x2b4>
 801dfe0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801dfe4:	2600      	movs	r6, #0
 801dfe6:	e09d      	b.n	801e124 <_strtod_l+0x2f4>
 801dfe8:	2300      	movs	r3, #0
 801dfea:	e7c4      	b.n	801df76 <_strtod_l+0x146>
 801dfec:	2f08      	cmp	r7, #8
 801dfee:	bfd8      	it	le
 801dff0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801dff2:	f100 0001 	add.w	r0, r0, #1
 801dff6:	bfda      	itte	le
 801dff8:	fb02 3301 	mlale	r3, r2, r1, r3
 801dffc:	9309      	strle	r3, [sp, #36]	; 0x24
 801dffe:	fb02 3909 	mlagt	r9, r2, r9, r3
 801e002:	3701      	adds	r7, #1
 801e004:	901d      	str	r0, [sp, #116]	; 0x74
 801e006:	e7bf      	b.n	801df88 <_strtod_l+0x158>
 801e008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e00a:	195a      	adds	r2, r3, r5
 801e00c:	921d      	str	r2, [sp, #116]	; 0x74
 801e00e:	5d5b      	ldrb	r3, [r3, r5]
 801e010:	2f00      	cmp	r7, #0
 801e012:	d037      	beq.n	801e084 <_strtod_l+0x254>
 801e014:	9007      	str	r0, [sp, #28]
 801e016:	463d      	mov	r5, r7
 801e018:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801e01c:	2a09      	cmp	r2, #9
 801e01e:	d912      	bls.n	801e046 <_strtod_l+0x216>
 801e020:	2201      	movs	r2, #1
 801e022:	e7c2      	b.n	801dfaa <_strtod_l+0x17a>
 801e024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e026:	1c5a      	adds	r2, r3, #1
 801e028:	921d      	str	r2, [sp, #116]	; 0x74
 801e02a:	785b      	ldrb	r3, [r3, #1]
 801e02c:	3001      	adds	r0, #1
 801e02e:	2b30      	cmp	r3, #48	; 0x30
 801e030:	d0f8      	beq.n	801e024 <_strtod_l+0x1f4>
 801e032:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801e036:	2a08      	cmp	r2, #8
 801e038:	f200 84db 	bhi.w	801e9f2 <_strtod_l+0xbc2>
 801e03c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e03e:	9007      	str	r0, [sp, #28]
 801e040:	2000      	movs	r0, #0
 801e042:	920a      	str	r2, [sp, #40]	; 0x28
 801e044:	4605      	mov	r5, r0
 801e046:	3b30      	subs	r3, #48	; 0x30
 801e048:	f100 0201 	add.w	r2, r0, #1
 801e04c:	d014      	beq.n	801e078 <_strtod_l+0x248>
 801e04e:	9907      	ldr	r1, [sp, #28]
 801e050:	4411      	add	r1, r2
 801e052:	9107      	str	r1, [sp, #28]
 801e054:	462a      	mov	r2, r5
 801e056:	eb00 0e05 	add.w	lr, r0, r5
 801e05a:	210a      	movs	r1, #10
 801e05c:	4572      	cmp	r2, lr
 801e05e:	d113      	bne.n	801e088 <_strtod_l+0x258>
 801e060:	182a      	adds	r2, r5, r0
 801e062:	2a08      	cmp	r2, #8
 801e064:	f105 0501 	add.w	r5, r5, #1
 801e068:	4405      	add	r5, r0
 801e06a:	dc1c      	bgt.n	801e0a6 <_strtod_l+0x276>
 801e06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e06e:	220a      	movs	r2, #10
 801e070:	fb02 3301 	mla	r3, r2, r1, r3
 801e074:	9309      	str	r3, [sp, #36]	; 0x24
 801e076:	2200      	movs	r2, #0
 801e078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e07a:	1c59      	adds	r1, r3, #1
 801e07c:	911d      	str	r1, [sp, #116]	; 0x74
 801e07e:	785b      	ldrb	r3, [r3, #1]
 801e080:	4610      	mov	r0, r2
 801e082:	e7c9      	b.n	801e018 <_strtod_l+0x1e8>
 801e084:	4638      	mov	r0, r7
 801e086:	e7d2      	b.n	801e02e <_strtod_l+0x1fe>
 801e088:	2a08      	cmp	r2, #8
 801e08a:	dc04      	bgt.n	801e096 <_strtod_l+0x266>
 801e08c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e08e:	434e      	muls	r6, r1
 801e090:	9609      	str	r6, [sp, #36]	; 0x24
 801e092:	3201      	adds	r2, #1
 801e094:	e7e2      	b.n	801e05c <_strtod_l+0x22c>
 801e096:	f102 0c01 	add.w	ip, r2, #1
 801e09a:	f1bc 0f10 	cmp.w	ip, #16
 801e09e:	bfd8      	it	le
 801e0a0:	fb01 f909 	mulle.w	r9, r1, r9
 801e0a4:	e7f5      	b.n	801e092 <_strtod_l+0x262>
 801e0a6:	2d10      	cmp	r5, #16
 801e0a8:	bfdc      	itt	le
 801e0aa:	220a      	movle	r2, #10
 801e0ac:	fb02 3909 	mlale	r9, r2, r9, r3
 801e0b0:	e7e1      	b.n	801e076 <_strtod_l+0x246>
 801e0b2:	2300      	movs	r3, #0
 801e0b4:	9307      	str	r3, [sp, #28]
 801e0b6:	2201      	movs	r2, #1
 801e0b8:	e77c      	b.n	801dfb4 <_strtod_l+0x184>
 801e0ba:	f04f 0c00 	mov.w	ip, #0
 801e0be:	f108 0302 	add.w	r3, r8, #2
 801e0c2:	931d      	str	r3, [sp, #116]	; 0x74
 801e0c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e0c8:	e785      	b.n	801dfd6 <_strtod_l+0x1a6>
 801e0ca:	f04f 0c01 	mov.w	ip, #1
 801e0ce:	e7f6      	b.n	801e0be <_strtod_l+0x28e>
 801e0d0:	08029a04 	.word	0x08029a04
 801e0d4:	08029750 	.word	0x08029750
 801e0d8:	7ff00000 	.word	0x7ff00000
 801e0dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0de:	1c59      	adds	r1, r3, #1
 801e0e0:	911d      	str	r1, [sp, #116]	; 0x74
 801e0e2:	785b      	ldrb	r3, [r3, #1]
 801e0e4:	2b30      	cmp	r3, #48	; 0x30
 801e0e6:	d0f9      	beq.n	801e0dc <_strtod_l+0x2ac>
 801e0e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801e0ec:	2908      	cmp	r1, #8
 801e0ee:	f63f af79 	bhi.w	801dfe4 <_strtod_l+0x1b4>
 801e0f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801e0f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0f8:	9308      	str	r3, [sp, #32]
 801e0fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0fc:	1c59      	adds	r1, r3, #1
 801e0fe:	911d      	str	r1, [sp, #116]	; 0x74
 801e100:	785b      	ldrb	r3, [r3, #1]
 801e102:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801e106:	2e09      	cmp	r6, #9
 801e108:	d937      	bls.n	801e17a <_strtod_l+0x34a>
 801e10a:	9e08      	ldr	r6, [sp, #32]
 801e10c:	1b89      	subs	r1, r1, r6
 801e10e:	2908      	cmp	r1, #8
 801e110:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801e114:	dc02      	bgt.n	801e11c <_strtod_l+0x2ec>
 801e116:	4576      	cmp	r6, lr
 801e118:	bfa8      	it	ge
 801e11a:	4676      	movge	r6, lr
 801e11c:	f1bc 0f00 	cmp.w	ip, #0
 801e120:	d000      	beq.n	801e124 <_strtod_l+0x2f4>
 801e122:	4276      	negs	r6, r6
 801e124:	2d00      	cmp	r5, #0
 801e126:	d14f      	bne.n	801e1c8 <_strtod_l+0x398>
 801e128:	9904      	ldr	r1, [sp, #16]
 801e12a:	4301      	orrs	r1, r0
 801e12c:	f47f aec2 	bne.w	801deb4 <_strtod_l+0x84>
 801e130:	2a00      	cmp	r2, #0
 801e132:	f47f aedb 	bne.w	801deec <_strtod_l+0xbc>
 801e136:	2b69      	cmp	r3, #105	; 0x69
 801e138:	d027      	beq.n	801e18a <_strtod_l+0x35a>
 801e13a:	dc24      	bgt.n	801e186 <_strtod_l+0x356>
 801e13c:	2b49      	cmp	r3, #73	; 0x49
 801e13e:	d024      	beq.n	801e18a <_strtod_l+0x35a>
 801e140:	2b4e      	cmp	r3, #78	; 0x4e
 801e142:	f47f aed3 	bne.w	801deec <_strtod_l+0xbc>
 801e146:	499e      	ldr	r1, [pc, #632]	; (801e3c0 <_strtod_l+0x590>)
 801e148:	a81d      	add	r0, sp, #116	; 0x74
 801e14a:	f001 ff35 	bl	801ffb8 <__match>
 801e14e:	2800      	cmp	r0, #0
 801e150:	f43f aecc 	beq.w	801deec <_strtod_l+0xbc>
 801e154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e156:	781b      	ldrb	r3, [r3, #0]
 801e158:	2b28      	cmp	r3, #40	; 0x28
 801e15a:	d12d      	bne.n	801e1b8 <_strtod_l+0x388>
 801e15c:	4999      	ldr	r1, [pc, #612]	; (801e3c4 <_strtod_l+0x594>)
 801e15e:	aa20      	add	r2, sp, #128	; 0x80
 801e160:	a81d      	add	r0, sp, #116	; 0x74
 801e162:	f001 ff3d 	bl	801ffe0 <__hexnan>
 801e166:	2805      	cmp	r0, #5
 801e168:	d126      	bne.n	801e1b8 <_strtod_l+0x388>
 801e16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e16c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801e170:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801e174:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801e178:	e69c      	b.n	801deb4 <_strtod_l+0x84>
 801e17a:	210a      	movs	r1, #10
 801e17c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801e180:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801e184:	e7b9      	b.n	801e0fa <_strtod_l+0x2ca>
 801e186:	2b6e      	cmp	r3, #110	; 0x6e
 801e188:	e7db      	b.n	801e142 <_strtod_l+0x312>
 801e18a:	498f      	ldr	r1, [pc, #572]	; (801e3c8 <_strtod_l+0x598>)
 801e18c:	a81d      	add	r0, sp, #116	; 0x74
 801e18e:	f001 ff13 	bl	801ffb8 <__match>
 801e192:	2800      	cmp	r0, #0
 801e194:	f43f aeaa 	beq.w	801deec <_strtod_l+0xbc>
 801e198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e19a:	498c      	ldr	r1, [pc, #560]	; (801e3cc <_strtod_l+0x59c>)
 801e19c:	3b01      	subs	r3, #1
 801e19e:	a81d      	add	r0, sp, #116	; 0x74
 801e1a0:	931d      	str	r3, [sp, #116]	; 0x74
 801e1a2:	f001 ff09 	bl	801ffb8 <__match>
 801e1a6:	b910      	cbnz	r0, 801e1ae <_strtod_l+0x37e>
 801e1a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1aa:	3301      	adds	r3, #1
 801e1ac:	931d      	str	r3, [sp, #116]	; 0x74
 801e1ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801e3dc <_strtod_l+0x5ac>
 801e1b2:	f04f 0a00 	mov.w	sl, #0
 801e1b6:	e67d      	b.n	801deb4 <_strtod_l+0x84>
 801e1b8:	4885      	ldr	r0, [pc, #532]	; (801e3d0 <_strtod_l+0x5a0>)
 801e1ba:	f002 fead 	bl	8020f18 <nan>
 801e1be:	ed8d 0b04 	vstr	d0, [sp, #16]
 801e1c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e1c6:	e675      	b.n	801deb4 <_strtod_l+0x84>
 801e1c8:	9b07      	ldr	r3, [sp, #28]
 801e1ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e1cc:	1af3      	subs	r3, r6, r3
 801e1ce:	2f00      	cmp	r7, #0
 801e1d0:	bf08      	it	eq
 801e1d2:	462f      	moveq	r7, r5
 801e1d4:	2d10      	cmp	r5, #16
 801e1d6:	9308      	str	r3, [sp, #32]
 801e1d8:	46a8      	mov	r8, r5
 801e1da:	bfa8      	it	ge
 801e1dc:	f04f 0810 	movge.w	r8, #16
 801e1e0:	f7e2 f9a0 	bl	8000524 <__aeabi_ui2d>
 801e1e4:	2d09      	cmp	r5, #9
 801e1e6:	4682      	mov	sl, r0
 801e1e8:	468b      	mov	fp, r1
 801e1ea:	dd13      	ble.n	801e214 <_strtod_l+0x3e4>
 801e1ec:	4b79      	ldr	r3, [pc, #484]	; (801e3d4 <_strtod_l+0x5a4>)
 801e1ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e1f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e1f6:	f7e2 fa0f 	bl	8000618 <__aeabi_dmul>
 801e1fa:	4682      	mov	sl, r0
 801e1fc:	4648      	mov	r0, r9
 801e1fe:	468b      	mov	fp, r1
 801e200:	f7e2 f990 	bl	8000524 <__aeabi_ui2d>
 801e204:	4602      	mov	r2, r0
 801e206:	460b      	mov	r3, r1
 801e208:	4650      	mov	r0, sl
 801e20a:	4659      	mov	r1, fp
 801e20c:	f7e2 f84e 	bl	80002ac <__adddf3>
 801e210:	4682      	mov	sl, r0
 801e212:	468b      	mov	fp, r1
 801e214:	2d0f      	cmp	r5, #15
 801e216:	dc38      	bgt.n	801e28a <_strtod_l+0x45a>
 801e218:	9b08      	ldr	r3, [sp, #32]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	f43f ae4a 	beq.w	801deb4 <_strtod_l+0x84>
 801e220:	dd24      	ble.n	801e26c <_strtod_l+0x43c>
 801e222:	2b16      	cmp	r3, #22
 801e224:	dc0b      	bgt.n	801e23e <_strtod_l+0x40e>
 801e226:	4d6b      	ldr	r5, [pc, #428]	; (801e3d4 <_strtod_l+0x5a4>)
 801e228:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801e22c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e230:	4652      	mov	r2, sl
 801e232:	465b      	mov	r3, fp
 801e234:	f7e2 f9f0 	bl	8000618 <__aeabi_dmul>
 801e238:	4682      	mov	sl, r0
 801e23a:	468b      	mov	fp, r1
 801e23c:	e63a      	b.n	801deb4 <_strtod_l+0x84>
 801e23e:	9a08      	ldr	r2, [sp, #32]
 801e240:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801e244:	4293      	cmp	r3, r2
 801e246:	db20      	blt.n	801e28a <_strtod_l+0x45a>
 801e248:	4c62      	ldr	r4, [pc, #392]	; (801e3d4 <_strtod_l+0x5a4>)
 801e24a:	f1c5 050f 	rsb	r5, r5, #15
 801e24e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e252:	4652      	mov	r2, sl
 801e254:	465b      	mov	r3, fp
 801e256:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e25a:	f7e2 f9dd 	bl	8000618 <__aeabi_dmul>
 801e25e:	9b08      	ldr	r3, [sp, #32]
 801e260:	1b5d      	subs	r5, r3, r5
 801e262:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e266:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e26a:	e7e3      	b.n	801e234 <_strtod_l+0x404>
 801e26c:	9b08      	ldr	r3, [sp, #32]
 801e26e:	3316      	adds	r3, #22
 801e270:	db0b      	blt.n	801e28a <_strtod_l+0x45a>
 801e272:	9b07      	ldr	r3, [sp, #28]
 801e274:	4a57      	ldr	r2, [pc, #348]	; (801e3d4 <_strtod_l+0x5a4>)
 801e276:	1b9e      	subs	r6, r3, r6
 801e278:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801e27c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e280:	4650      	mov	r0, sl
 801e282:	4659      	mov	r1, fp
 801e284:	f7e2 faf2 	bl	800086c <__aeabi_ddiv>
 801e288:	e7d6      	b.n	801e238 <_strtod_l+0x408>
 801e28a:	9b08      	ldr	r3, [sp, #32]
 801e28c:	eba5 0808 	sub.w	r8, r5, r8
 801e290:	4498      	add	r8, r3
 801e292:	f1b8 0f00 	cmp.w	r8, #0
 801e296:	dd71      	ble.n	801e37c <_strtod_l+0x54c>
 801e298:	f018 030f 	ands.w	r3, r8, #15
 801e29c:	d00a      	beq.n	801e2b4 <_strtod_l+0x484>
 801e29e:	494d      	ldr	r1, [pc, #308]	; (801e3d4 <_strtod_l+0x5a4>)
 801e2a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e2a4:	4652      	mov	r2, sl
 801e2a6:	465b      	mov	r3, fp
 801e2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e2ac:	f7e2 f9b4 	bl	8000618 <__aeabi_dmul>
 801e2b0:	4682      	mov	sl, r0
 801e2b2:	468b      	mov	fp, r1
 801e2b4:	f038 080f 	bics.w	r8, r8, #15
 801e2b8:	d04d      	beq.n	801e356 <_strtod_l+0x526>
 801e2ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801e2be:	dd22      	ble.n	801e306 <_strtod_l+0x4d6>
 801e2c0:	2500      	movs	r5, #0
 801e2c2:	462e      	mov	r6, r5
 801e2c4:	9509      	str	r5, [sp, #36]	; 0x24
 801e2c6:	9507      	str	r5, [sp, #28]
 801e2c8:	2322      	movs	r3, #34	; 0x22
 801e2ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 801e3dc <_strtod_l+0x5ac>
 801e2ce:	6023      	str	r3, [r4, #0]
 801e2d0:	f04f 0a00 	mov.w	sl, #0
 801e2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	f43f adec 	beq.w	801deb4 <_strtod_l+0x84>
 801e2dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e2de:	4620      	mov	r0, r4
 801e2e0:	f001 ff8a 	bl	80201f8 <_Bfree>
 801e2e4:	9907      	ldr	r1, [sp, #28]
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	f001 ff86 	bl	80201f8 <_Bfree>
 801e2ec:	4631      	mov	r1, r6
 801e2ee:	4620      	mov	r0, r4
 801e2f0:	f001 ff82 	bl	80201f8 <_Bfree>
 801e2f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	f001 ff7e 	bl	80201f8 <_Bfree>
 801e2fc:	4629      	mov	r1, r5
 801e2fe:	4620      	mov	r0, r4
 801e300:	f001 ff7a 	bl	80201f8 <_Bfree>
 801e304:	e5d6      	b.n	801deb4 <_strtod_l+0x84>
 801e306:	2300      	movs	r3, #0
 801e308:	ea4f 1828 	mov.w	r8, r8, asr #4
 801e30c:	4650      	mov	r0, sl
 801e30e:	4659      	mov	r1, fp
 801e310:	4699      	mov	r9, r3
 801e312:	f1b8 0f01 	cmp.w	r8, #1
 801e316:	dc21      	bgt.n	801e35c <_strtod_l+0x52c>
 801e318:	b10b      	cbz	r3, 801e31e <_strtod_l+0x4ee>
 801e31a:	4682      	mov	sl, r0
 801e31c:	468b      	mov	fp, r1
 801e31e:	4b2e      	ldr	r3, [pc, #184]	; (801e3d8 <_strtod_l+0x5a8>)
 801e320:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801e324:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801e328:	4652      	mov	r2, sl
 801e32a:	465b      	mov	r3, fp
 801e32c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801e330:	f7e2 f972 	bl	8000618 <__aeabi_dmul>
 801e334:	4b29      	ldr	r3, [pc, #164]	; (801e3dc <_strtod_l+0x5ac>)
 801e336:	460a      	mov	r2, r1
 801e338:	400b      	ands	r3, r1
 801e33a:	4929      	ldr	r1, [pc, #164]	; (801e3e0 <_strtod_l+0x5b0>)
 801e33c:	428b      	cmp	r3, r1
 801e33e:	4682      	mov	sl, r0
 801e340:	d8be      	bhi.n	801e2c0 <_strtod_l+0x490>
 801e342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e346:	428b      	cmp	r3, r1
 801e348:	bf86      	itte	hi
 801e34a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801e3e4 <_strtod_l+0x5b4>
 801e34e:	f04f 3aff 	movhi.w	sl, #4294967295
 801e352:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801e356:	2300      	movs	r3, #0
 801e358:	9304      	str	r3, [sp, #16]
 801e35a:	e081      	b.n	801e460 <_strtod_l+0x630>
 801e35c:	f018 0f01 	tst.w	r8, #1
 801e360:	d007      	beq.n	801e372 <_strtod_l+0x542>
 801e362:	4b1d      	ldr	r3, [pc, #116]	; (801e3d8 <_strtod_l+0x5a8>)
 801e364:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e36c:	f7e2 f954 	bl	8000618 <__aeabi_dmul>
 801e370:	2301      	movs	r3, #1
 801e372:	f109 0901 	add.w	r9, r9, #1
 801e376:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e37a:	e7ca      	b.n	801e312 <_strtod_l+0x4e2>
 801e37c:	d0eb      	beq.n	801e356 <_strtod_l+0x526>
 801e37e:	f1c8 0800 	rsb	r8, r8, #0
 801e382:	f018 020f 	ands.w	r2, r8, #15
 801e386:	d00a      	beq.n	801e39e <_strtod_l+0x56e>
 801e388:	4b12      	ldr	r3, [pc, #72]	; (801e3d4 <_strtod_l+0x5a4>)
 801e38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e38e:	4650      	mov	r0, sl
 801e390:	4659      	mov	r1, fp
 801e392:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e396:	f7e2 fa69 	bl	800086c <__aeabi_ddiv>
 801e39a:	4682      	mov	sl, r0
 801e39c:	468b      	mov	fp, r1
 801e39e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801e3a2:	d0d8      	beq.n	801e356 <_strtod_l+0x526>
 801e3a4:	f1b8 0f1f 	cmp.w	r8, #31
 801e3a8:	dd1e      	ble.n	801e3e8 <_strtod_l+0x5b8>
 801e3aa:	2500      	movs	r5, #0
 801e3ac:	462e      	mov	r6, r5
 801e3ae:	9509      	str	r5, [sp, #36]	; 0x24
 801e3b0:	9507      	str	r5, [sp, #28]
 801e3b2:	2322      	movs	r3, #34	; 0x22
 801e3b4:	f04f 0a00 	mov.w	sl, #0
 801e3b8:	f04f 0b00 	mov.w	fp, #0
 801e3bc:	6023      	str	r3, [r4, #0]
 801e3be:	e789      	b.n	801e2d4 <_strtod_l+0x4a4>
 801e3c0:	08029721 	.word	0x08029721
 801e3c4:	08029764 	.word	0x08029764
 801e3c8:	08029719 	.word	0x08029719
 801e3cc:	080298a4 	.word	0x080298a4
 801e3d0:	08029bc0 	.word	0x08029bc0
 801e3d4:	08029aa0 	.word	0x08029aa0
 801e3d8:	08029a78 	.word	0x08029a78
 801e3dc:	7ff00000 	.word	0x7ff00000
 801e3e0:	7ca00000 	.word	0x7ca00000
 801e3e4:	7fefffff 	.word	0x7fefffff
 801e3e8:	f018 0310 	ands.w	r3, r8, #16
 801e3ec:	bf18      	it	ne
 801e3ee:	236a      	movne	r3, #106	; 0x6a
 801e3f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e7a8 <_strtod_l+0x978>
 801e3f4:	9304      	str	r3, [sp, #16]
 801e3f6:	4650      	mov	r0, sl
 801e3f8:	4659      	mov	r1, fp
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	f018 0f01 	tst.w	r8, #1
 801e400:	d004      	beq.n	801e40c <_strtod_l+0x5dc>
 801e402:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e406:	f7e2 f907 	bl	8000618 <__aeabi_dmul>
 801e40a:	2301      	movs	r3, #1
 801e40c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e410:	f109 0908 	add.w	r9, r9, #8
 801e414:	d1f2      	bne.n	801e3fc <_strtod_l+0x5cc>
 801e416:	b10b      	cbz	r3, 801e41c <_strtod_l+0x5ec>
 801e418:	4682      	mov	sl, r0
 801e41a:	468b      	mov	fp, r1
 801e41c:	9b04      	ldr	r3, [sp, #16]
 801e41e:	b1bb      	cbz	r3, 801e450 <_strtod_l+0x620>
 801e420:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e424:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e428:	2b00      	cmp	r3, #0
 801e42a:	4659      	mov	r1, fp
 801e42c:	dd10      	ble.n	801e450 <_strtod_l+0x620>
 801e42e:	2b1f      	cmp	r3, #31
 801e430:	f340 8128 	ble.w	801e684 <_strtod_l+0x854>
 801e434:	2b34      	cmp	r3, #52	; 0x34
 801e436:	bfde      	ittt	le
 801e438:	3b20      	suble	r3, #32
 801e43a:	f04f 32ff 	movle.w	r2, #4294967295
 801e43e:	fa02 f303 	lslle.w	r3, r2, r3
 801e442:	f04f 0a00 	mov.w	sl, #0
 801e446:	bfcc      	ite	gt
 801e448:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e44c:	ea03 0b01 	andle.w	fp, r3, r1
 801e450:	2200      	movs	r2, #0
 801e452:	2300      	movs	r3, #0
 801e454:	4650      	mov	r0, sl
 801e456:	4659      	mov	r1, fp
 801e458:	f7e2 fb46 	bl	8000ae8 <__aeabi_dcmpeq>
 801e45c:	2800      	cmp	r0, #0
 801e45e:	d1a4      	bne.n	801e3aa <_strtod_l+0x57a>
 801e460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e462:	9300      	str	r3, [sp, #0]
 801e464:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e466:	462b      	mov	r3, r5
 801e468:	463a      	mov	r2, r7
 801e46a:	4620      	mov	r0, r4
 801e46c:	f001 ff30 	bl	80202d0 <__s2b>
 801e470:	9009      	str	r0, [sp, #36]	; 0x24
 801e472:	2800      	cmp	r0, #0
 801e474:	f43f af24 	beq.w	801e2c0 <_strtod_l+0x490>
 801e478:	9b07      	ldr	r3, [sp, #28]
 801e47a:	1b9e      	subs	r6, r3, r6
 801e47c:	9b08      	ldr	r3, [sp, #32]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	bfb4      	ite	lt
 801e482:	4633      	movlt	r3, r6
 801e484:	2300      	movge	r3, #0
 801e486:	9310      	str	r3, [sp, #64]	; 0x40
 801e488:	9b08      	ldr	r3, [sp, #32]
 801e48a:	2500      	movs	r5, #0
 801e48c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e490:	9318      	str	r3, [sp, #96]	; 0x60
 801e492:	462e      	mov	r6, r5
 801e494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e496:	4620      	mov	r0, r4
 801e498:	6859      	ldr	r1, [r3, #4]
 801e49a:	f001 fe6d 	bl	8020178 <_Balloc>
 801e49e:	9007      	str	r0, [sp, #28]
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	f43f af11 	beq.w	801e2c8 <_strtod_l+0x498>
 801e4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4a8:	691a      	ldr	r2, [r3, #16]
 801e4aa:	3202      	adds	r2, #2
 801e4ac:	f103 010c 	add.w	r1, r3, #12
 801e4b0:	0092      	lsls	r2, r2, #2
 801e4b2:	300c      	adds	r0, #12
 801e4b4:	f001 fe52 	bl	802015c <memcpy>
 801e4b8:	ec4b ab10 	vmov	d0, sl, fp
 801e4bc:	aa20      	add	r2, sp, #128	; 0x80
 801e4be:	a91f      	add	r1, sp, #124	; 0x7c
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e4c6:	f002 fa3f 	bl	8020948 <__d2b>
 801e4ca:	901e      	str	r0, [sp, #120]	; 0x78
 801e4cc:	2800      	cmp	r0, #0
 801e4ce:	f43f aefb 	beq.w	801e2c8 <_strtod_l+0x498>
 801e4d2:	2101      	movs	r1, #1
 801e4d4:	4620      	mov	r0, r4
 801e4d6:	f001 ff95 	bl	8020404 <__i2b>
 801e4da:	4606      	mov	r6, r0
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	f43f aef3 	beq.w	801e2c8 <_strtod_l+0x498>
 801e4e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e4e4:	9904      	ldr	r1, [sp, #16]
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	bfab      	itete	ge
 801e4ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e4ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e4ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e4f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e4f4:	bfac      	ite	ge
 801e4f6:	eb03 0902 	addge.w	r9, r3, r2
 801e4fa:	1ad7      	sublt	r7, r2, r3
 801e4fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e4fe:	eba3 0801 	sub.w	r8, r3, r1
 801e502:	4490      	add	r8, r2
 801e504:	4ba3      	ldr	r3, [pc, #652]	; (801e794 <_strtod_l+0x964>)
 801e506:	f108 38ff 	add.w	r8, r8, #4294967295
 801e50a:	4598      	cmp	r8, r3
 801e50c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e510:	f280 80cc 	bge.w	801e6ac <_strtod_l+0x87c>
 801e514:	eba3 0308 	sub.w	r3, r3, r8
 801e518:	2b1f      	cmp	r3, #31
 801e51a:	eba2 0203 	sub.w	r2, r2, r3
 801e51e:	f04f 0101 	mov.w	r1, #1
 801e522:	f300 80b6 	bgt.w	801e692 <_strtod_l+0x862>
 801e526:	fa01 f303 	lsl.w	r3, r1, r3
 801e52a:	9311      	str	r3, [sp, #68]	; 0x44
 801e52c:	2300      	movs	r3, #0
 801e52e:	930c      	str	r3, [sp, #48]	; 0x30
 801e530:	eb09 0802 	add.w	r8, r9, r2
 801e534:	9b04      	ldr	r3, [sp, #16]
 801e536:	45c1      	cmp	r9, r8
 801e538:	4417      	add	r7, r2
 801e53a:	441f      	add	r7, r3
 801e53c:	464b      	mov	r3, r9
 801e53e:	bfa8      	it	ge
 801e540:	4643      	movge	r3, r8
 801e542:	42bb      	cmp	r3, r7
 801e544:	bfa8      	it	ge
 801e546:	463b      	movge	r3, r7
 801e548:	2b00      	cmp	r3, #0
 801e54a:	bfc2      	ittt	gt
 801e54c:	eba8 0803 	subgt.w	r8, r8, r3
 801e550:	1aff      	subgt	r7, r7, r3
 801e552:	eba9 0903 	subgt.w	r9, r9, r3
 801e556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e558:	2b00      	cmp	r3, #0
 801e55a:	dd17      	ble.n	801e58c <_strtod_l+0x75c>
 801e55c:	4631      	mov	r1, r6
 801e55e:	461a      	mov	r2, r3
 801e560:	4620      	mov	r0, r4
 801e562:	f002 f80b 	bl	802057c <__pow5mult>
 801e566:	4606      	mov	r6, r0
 801e568:	2800      	cmp	r0, #0
 801e56a:	f43f aead 	beq.w	801e2c8 <_strtod_l+0x498>
 801e56e:	4601      	mov	r1, r0
 801e570:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e572:	4620      	mov	r0, r4
 801e574:	f001 ff5c 	bl	8020430 <__multiply>
 801e578:	900f      	str	r0, [sp, #60]	; 0x3c
 801e57a:	2800      	cmp	r0, #0
 801e57c:	f43f aea4 	beq.w	801e2c8 <_strtod_l+0x498>
 801e580:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e582:	4620      	mov	r0, r4
 801e584:	f001 fe38 	bl	80201f8 <_Bfree>
 801e588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e58a:	931e      	str	r3, [sp, #120]	; 0x78
 801e58c:	f1b8 0f00 	cmp.w	r8, #0
 801e590:	f300 8091 	bgt.w	801e6b6 <_strtod_l+0x886>
 801e594:	9b08      	ldr	r3, [sp, #32]
 801e596:	2b00      	cmp	r3, #0
 801e598:	dd08      	ble.n	801e5ac <_strtod_l+0x77c>
 801e59a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e59c:	9907      	ldr	r1, [sp, #28]
 801e59e:	4620      	mov	r0, r4
 801e5a0:	f001 ffec 	bl	802057c <__pow5mult>
 801e5a4:	9007      	str	r0, [sp, #28]
 801e5a6:	2800      	cmp	r0, #0
 801e5a8:	f43f ae8e 	beq.w	801e2c8 <_strtod_l+0x498>
 801e5ac:	2f00      	cmp	r7, #0
 801e5ae:	dd08      	ble.n	801e5c2 <_strtod_l+0x792>
 801e5b0:	9907      	ldr	r1, [sp, #28]
 801e5b2:	463a      	mov	r2, r7
 801e5b4:	4620      	mov	r0, r4
 801e5b6:	f002 f83b 	bl	8020630 <__lshift>
 801e5ba:	9007      	str	r0, [sp, #28]
 801e5bc:	2800      	cmp	r0, #0
 801e5be:	f43f ae83 	beq.w	801e2c8 <_strtod_l+0x498>
 801e5c2:	f1b9 0f00 	cmp.w	r9, #0
 801e5c6:	dd08      	ble.n	801e5da <_strtod_l+0x7aa>
 801e5c8:	4631      	mov	r1, r6
 801e5ca:	464a      	mov	r2, r9
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	f002 f82f 	bl	8020630 <__lshift>
 801e5d2:	4606      	mov	r6, r0
 801e5d4:	2800      	cmp	r0, #0
 801e5d6:	f43f ae77 	beq.w	801e2c8 <_strtod_l+0x498>
 801e5da:	9a07      	ldr	r2, [sp, #28]
 801e5dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e5de:	4620      	mov	r0, r4
 801e5e0:	f002 f8ae 	bl	8020740 <__mdiff>
 801e5e4:	4605      	mov	r5, r0
 801e5e6:	2800      	cmp	r0, #0
 801e5e8:	f43f ae6e 	beq.w	801e2c8 <_strtod_l+0x498>
 801e5ec:	68c3      	ldr	r3, [r0, #12]
 801e5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 801e5f0:	2300      	movs	r3, #0
 801e5f2:	60c3      	str	r3, [r0, #12]
 801e5f4:	4631      	mov	r1, r6
 801e5f6:	f002 f887 	bl	8020708 <__mcmp>
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	da65      	bge.n	801e6ca <_strtod_l+0x89a>
 801e5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e600:	ea53 030a 	orrs.w	r3, r3, sl
 801e604:	f040 8087 	bne.w	801e716 <_strtod_l+0x8e6>
 801e608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	f040 8082 	bne.w	801e716 <_strtod_l+0x8e6>
 801e612:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e616:	0d1b      	lsrs	r3, r3, #20
 801e618:	051b      	lsls	r3, r3, #20
 801e61a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e61e:	d97a      	bls.n	801e716 <_strtod_l+0x8e6>
 801e620:	696b      	ldr	r3, [r5, #20]
 801e622:	b913      	cbnz	r3, 801e62a <_strtod_l+0x7fa>
 801e624:	692b      	ldr	r3, [r5, #16]
 801e626:	2b01      	cmp	r3, #1
 801e628:	dd75      	ble.n	801e716 <_strtod_l+0x8e6>
 801e62a:	4629      	mov	r1, r5
 801e62c:	2201      	movs	r2, #1
 801e62e:	4620      	mov	r0, r4
 801e630:	f001 fffe 	bl	8020630 <__lshift>
 801e634:	4631      	mov	r1, r6
 801e636:	4605      	mov	r5, r0
 801e638:	f002 f866 	bl	8020708 <__mcmp>
 801e63c:	2800      	cmp	r0, #0
 801e63e:	dd6a      	ble.n	801e716 <_strtod_l+0x8e6>
 801e640:	9904      	ldr	r1, [sp, #16]
 801e642:	4a55      	ldr	r2, [pc, #340]	; (801e798 <_strtod_l+0x968>)
 801e644:	465b      	mov	r3, fp
 801e646:	2900      	cmp	r1, #0
 801e648:	f000 8085 	beq.w	801e756 <_strtod_l+0x926>
 801e64c:	ea02 010b 	and.w	r1, r2, fp
 801e650:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e654:	dc7f      	bgt.n	801e756 <_strtod_l+0x926>
 801e656:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e65a:	f77f aeaa 	ble.w	801e3b2 <_strtod_l+0x582>
 801e65e:	4a4f      	ldr	r2, [pc, #316]	; (801e79c <_strtod_l+0x96c>)
 801e660:	2300      	movs	r3, #0
 801e662:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e666:	4650      	mov	r0, sl
 801e668:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e66c:	4659      	mov	r1, fp
 801e66e:	f7e1 ffd3 	bl	8000618 <__aeabi_dmul>
 801e672:	460b      	mov	r3, r1
 801e674:	4303      	orrs	r3, r0
 801e676:	bf08      	it	eq
 801e678:	2322      	moveq	r3, #34	; 0x22
 801e67a:	4682      	mov	sl, r0
 801e67c:	468b      	mov	fp, r1
 801e67e:	bf08      	it	eq
 801e680:	6023      	streq	r3, [r4, #0]
 801e682:	e62b      	b.n	801e2dc <_strtod_l+0x4ac>
 801e684:	f04f 32ff 	mov.w	r2, #4294967295
 801e688:	fa02 f303 	lsl.w	r3, r2, r3
 801e68c:	ea03 0a0a 	and.w	sl, r3, sl
 801e690:	e6de      	b.n	801e450 <_strtod_l+0x620>
 801e692:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e696:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e69a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e69e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e6a2:	fa01 f308 	lsl.w	r3, r1, r8
 801e6a6:	930c      	str	r3, [sp, #48]	; 0x30
 801e6a8:	9111      	str	r1, [sp, #68]	; 0x44
 801e6aa:	e741      	b.n	801e530 <_strtod_l+0x700>
 801e6ac:	2300      	movs	r3, #0
 801e6ae:	930c      	str	r3, [sp, #48]	; 0x30
 801e6b0:	2301      	movs	r3, #1
 801e6b2:	9311      	str	r3, [sp, #68]	; 0x44
 801e6b4:	e73c      	b.n	801e530 <_strtod_l+0x700>
 801e6b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e6b8:	4642      	mov	r2, r8
 801e6ba:	4620      	mov	r0, r4
 801e6bc:	f001 ffb8 	bl	8020630 <__lshift>
 801e6c0:	901e      	str	r0, [sp, #120]	; 0x78
 801e6c2:	2800      	cmp	r0, #0
 801e6c4:	f47f af66 	bne.w	801e594 <_strtod_l+0x764>
 801e6c8:	e5fe      	b.n	801e2c8 <_strtod_l+0x498>
 801e6ca:	465f      	mov	r7, fp
 801e6cc:	d16e      	bne.n	801e7ac <_strtod_l+0x97c>
 801e6ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e6d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e6d4:	b342      	cbz	r2, 801e728 <_strtod_l+0x8f8>
 801e6d6:	4a32      	ldr	r2, [pc, #200]	; (801e7a0 <_strtod_l+0x970>)
 801e6d8:	4293      	cmp	r3, r2
 801e6da:	d128      	bne.n	801e72e <_strtod_l+0x8fe>
 801e6dc:	9b04      	ldr	r3, [sp, #16]
 801e6de:	4650      	mov	r0, sl
 801e6e0:	b1eb      	cbz	r3, 801e71e <_strtod_l+0x8ee>
 801e6e2:	4a2d      	ldr	r2, [pc, #180]	; (801e798 <_strtod_l+0x968>)
 801e6e4:	403a      	ands	r2, r7
 801e6e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e6ea:	f04f 31ff 	mov.w	r1, #4294967295
 801e6ee:	d819      	bhi.n	801e724 <_strtod_l+0x8f4>
 801e6f0:	0d12      	lsrs	r2, r2, #20
 801e6f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e6f6:	fa01 f303 	lsl.w	r3, r1, r3
 801e6fa:	4298      	cmp	r0, r3
 801e6fc:	d117      	bne.n	801e72e <_strtod_l+0x8fe>
 801e6fe:	4b29      	ldr	r3, [pc, #164]	; (801e7a4 <_strtod_l+0x974>)
 801e700:	429f      	cmp	r7, r3
 801e702:	d102      	bne.n	801e70a <_strtod_l+0x8da>
 801e704:	3001      	adds	r0, #1
 801e706:	f43f addf 	beq.w	801e2c8 <_strtod_l+0x498>
 801e70a:	4b23      	ldr	r3, [pc, #140]	; (801e798 <_strtod_l+0x968>)
 801e70c:	403b      	ands	r3, r7
 801e70e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e712:	f04f 0a00 	mov.w	sl, #0
 801e716:	9b04      	ldr	r3, [sp, #16]
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d1a0      	bne.n	801e65e <_strtod_l+0x82e>
 801e71c:	e5de      	b.n	801e2dc <_strtod_l+0x4ac>
 801e71e:	f04f 33ff 	mov.w	r3, #4294967295
 801e722:	e7ea      	b.n	801e6fa <_strtod_l+0x8ca>
 801e724:	460b      	mov	r3, r1
 801e726:	e7e8      	b.n	801e6fa <_strtod_l+0x8ca>
 801e728:	ea53 030a 	orrs.w	r3, r3, sl
 801e72c:	d088      	beq.n	801e640 <_strtod_l+0x810>
 801e72e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e730:	b1db      	cbz	r3, 801e76a <_strtod_l+0x93a>
 801e732:	423b      	tst	r3, r7
 801e734:	d0ef      	beq.n	801e716 <_strtod_l+0x8e6>
 801e736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e738:	9a04      	ldr	r2, [sp, #16]
 801e73a:	4650      	mov	r0, sl
 801e73c:	4659      	mov	r1, fp
 801e73e:	b1c3      	cbz	r3, 801e772 <_strtod_l+0x942>
 801e740:	f7ff fb59 	bl	801ddf6 <sulp>
 801e744:	4602      	mov	r2, r0
 801e746:	460b      	mov	r3, r1
 801e748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e74c:	f7e1 fdae 	bl	80002ac <__adddf3>
 801e750:	4682      	mov	sl, r0
 801e752:	468b      	mov	fp, r1
 801e754:	e7df      	b.n	801e716 <_strtod_l+0x8e6>
 801e756:	4013      	ands	r3, r2
 801e758:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e75c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e760:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e764:	f04f 3aff 	mov.w	sl, #4294967295
 801e768:	e7d5      	b.n	801e716 <_strtod_l+0x8e6>
 801e76a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e76c:	ea13 0f0a 	tst.w	r3, sl
 801e770:	e7e0      	b.n	801e734 <_strtod_l+0x904>
 801e772:	f7ff fb40 	bl	801ddf6 <sulp>
 801e776:	4602      	mov	r2, r0
 801e778:	460b      	mov	r3, r1
 801e77a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e77e:	f7e1 fd93 	bl	80002a8 <__aeabi_dsub>
 801e782:	2200      	movs	r2, #0
 801e784:	2300      	movs	r3, #0
 801e786:	4682      	mov	sl, r0
 801e788:	468b      	mov	fp, r1
 801e78a:	f7e2 f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 801e78e:	2800      	cmp	r0, #0
 801e790:	d0c1      	beq.n	801e716 <_strtod_l+0x8e6>
 801e792:	e60e      	b.n	801e3b2 <_strtod_l+0x582>
 801e794:	fffffc02 	.word	0xfffffc02
 801e798:	7ff00000 	.word	0x7ff00000
 801e79c:	39500000 	.word	0x39500000
 801e7a0:	000fffff 	.word	0x000fffff
 801e7a4:	7fefffff 	.word	0x7fefffff
 801e7a8:	08029778 	.word	0x08029778
 801e7ac:	4631      	mov	r1, r6
 801e7ae:	4628      	mov	r0, r5
 801e7b0:	f002 f926 	bl	8020a00 <__ratio>
 801e7b4:	ec59 8b10 	vmov	r8, r9, d0
 801e7b8:	ee10 0a10 	vmov	r0, s0
 801e7bc:	2200      	movs	r2, #0
 801e7be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e7c2:	4649      	mov	r1, r9
 801e7c4:	f7e2 f9a4 	bl	8000b10 <__aeabi_dcmple>
 801e7c8:	2800      	cmp	r0, #0
 801e7ca:	d07c      	beq.n	801e8c6 <_strtod_l+0xa96>
 801e7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d04c      	beq.n	801e86c <_strtod_l+0xa3c>
 801e7d2:	4b95      	ldr	r3, [pc, #596]	; (801ea28 <_strtod_l+0xbf8>)
 801e7d4:	2200      	movs	r2, #0
 801e7d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e7da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ea28 <_strtod_l+0xbf8>
 801e7de:	f04f 0800 	mov.w	r8, #0
 801e7e2:	4b92      	ldr	r3, [pc, #584]	; (801ea2c <_strtod_l+0xbfc>)
 801e7e4:	403b      	ands	r3, r7
 801e7e6:	9311      	str	r3, [sp, #68]	; 0x44
 801e7e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e7ea:	4b91      	ldr	r3, [pc, #580]	; (801ea30 <_strtod_l+0xc00>)
 801e7ec:	429a      	cmp	r2, r3
 801e7ee:	f040 80b2 	bne.w	801e956 <_strtod_l+0xb26>
 801e7f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e7f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e7fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e7fe:	ec4b ab10 	vmov	d0, sl, fp
 801e802:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e806:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e80a:	f002 f821 	bl	8020850 <__ulp>
 801e80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e812:	ec53 2b10 	vmov	r2, r3, d0
 801e816:	f7e1 feff 	bl	8000618 <__aeabi_dmul>
 801e81a:	4652      	mov	r2, sl
 801e81c:	465b      	mov	r3, fp
 801e81e:	f7e1 fd45 	bl	80002ac <__adddf3>
 801e822:	460b      	mov	r3, r1
 801e824:	4981      	ldr	r1, [pc, #516]	; (801ea2c <_strtod_l+0xbfc>)
 801e826:	4a83      	ldr	r2, [pc, #524]	; (801ea34 <_strtod_l+0xc04>)
 801e828:	4019      	ands	r1, r3
 801e82a:	4291      	cmp	r1, r2
 801e82c:	4682      	mov	sl, r0
 801e82e:	d95e      	bls.n	801e8ee <_strtod_l+0xabe>
 801e830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e832:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e836:	4293      	cmp	r3, r2
 801e838:	d103      	bne.n	801e842 <_strtod_l+0xa12>
 801e83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e83c:	3301      	adds	r3, #1
 801e83e:	f43f ad43 	beq.w	801e2c8 <_strtod_l+0x498>
 801e842:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801ea40 <_strtod_l+0xc10>
 801e846:	f04f 3aff 	mov.w	sl, #4294967295
 801e84a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e84c:	4620      	mov	r0, r4
 801e84e:	f001 fcd3 	bl	80201f8 <_Bfree>
 801e852:	9907      	ldr	r1, [sp, #28]
 801e854:	4620      	mov	r0, r4
 801e856:	f001 fccf 	bl	80201f8 <_Bfree>
 801e85a:	4631      	mov	r1, r6
 801e85c:	4620      	mov	r0, r4
 801e85e:	f001 fccb 	bl	80201f8 <_Bfree>
 801e862:	4629      	mov	r1, r5
 801e864:	4620      	mov	r0, r4
 801e866:	f001 fcc7 	bl	80201f8 <_Bfree>
 801e86a:	e613      	b.n	801e494 <_strtod_l+0x664>
 801e86c:	f1ba 0f00 	cmp.w	sl, #0
 801e870:	d11b      	bne.n	801e8aa <_strtod_l+0xa7a>
 801e872:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e876:	b9f3      	cbnz	r3, 801e8b6 <_strtod_l+0xa86>
 801e878:	4b6b      	ldr	r3, [pc, #428]	; (801ea28 <_strtod_l+0xbf8>)
 801e87a:	2200      	movs	r2, #0
 801e87c:	4640      	mov	r0, r8
 801e87e:	4649      	mov	r1, r9
 801e880:	f7e2 f93c 	bl	8000afc <__aeabi_dcmplt>
 801e884:	b9d0      	cbnz	r0, 801e8bc <_strtod_l+0xa8c>
 801e886:	4640      	mov	r0, r8
 801e888:	4649      	mov	r1, r9
 801e88a:	4b6b      	ldr	r3, [pc, #428]	; (801ea38 <_strtod_l+0xc08>)
 801e88c:	2200      	movs	r2, #0
 801e88e:	f7e1 fec3 	bl	8000618 <__aeabi_dmul>
 801e892:	4680      	mov	r8, r0
 801e894:	4689      	mov	r9, r1
 801e896:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e89a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801e89e:	931b      	str	r3, [sp, #108]	; 0x6c
 801e8a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801e8a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e8a8:	e79b      	b.n	801e7e2 <_strtod_l+0x9b2>
 801e8aa:	f1ba 0f01 	cmp.w	sl, #1
 801e8ae:	d102      	bne.n	801e8b6 <_strtod_l+0xa86>
 801e8b0:	2f00      	cmp	r7, #0
 801e8b2:	f43f ad7e 	beq.w	801e3b2 <_strtod_l+0x582>
 801e8b6:	4b61      	ldr	r3, [pc, #388]	; (801ea3c <_strtod_l+0xc0c>)
 801e8b8:	2200      	movs	r2, #0
 801e8ba:	e78c      	b.n	801e7d6 <_strtod_l+0x9a6>
 801e8bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ea38 <_strtod_l+0xc08>
 801e8c0:	f04f 0800 	mov.w	r8, #0
 801e8c4:	e7e7      	b.n	801e896 <_strtod_l+0xa66>
 801e8c6:	4b5c      	ldr	r3, [pc, #368]	; (801ea38 <_strtod_l+0xc08>)
 801e8c8:	4640      	mov	r0, r8
 801e8ca:	4649      	mov	r1, r9
 801e8cc:	2200      	movs	r2, #0
 801e8ce:	f7e1 fea3 	bl	8000618 <__aeabi_dmul>
 801e8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8d4:	4680      	mov	r8, r0
 801e8d6:	4689      	mov	r9, r1
 801e8d8:	b933      	cbnz	r3, 801e8e8 <_strtod_l+0xab8>
 801e8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e8de:	9012      	str	r0, [sp, #72]	; 0x48
 801e8e0:	9313      	str	r3, [sp, #76]	; 0x4c
 801e8e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e8e6:	e7dd      	b.n	801e8a4 <_strtod_l+0xa74>
 801e8e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801e8ec:	e7f9      	b.n	801e8e2 <_strtod_l+0xab2>
 801e8ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801e8f2:	9b04      	ldr	r3, [sp, #16]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d1a8      	bne.n	801e84a <_strtod_l+0xa1a>
 801e8f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e8fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e8fe:	0d1b      	lsrs	r3, r3, #20
 801e900:	051b      	lsls	r3, r3, #20
 801e902:	429a      	cmp	r2, r3
 801e904:	d1a1      	bne.n	801e84a <_strtod_l+0xa1a>
 801e906:	4640      	mov	r0, r8
 801e908:	4649      	mov	r1, r9
 801e90a:	f7e2 fa35 	bl	8000d78 <__aeabi_d2lz>
 801e90e:	f7e1 fe55 	bl	80005bc <__aeabi_l2d>
 801e912:	4602      	mov	r2, r0
 801e914:	460b      	mov	r3, r1
 801e916:	4640      	mov	r0, r8
 801e918:	4649      	mov	r1, r9
 801e91a:	f7e1 fcc5 	bl	80002a8 <__aeabi_dsub>
 801e91e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e920:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e924:	ea43 030a 	orr.w	r3, r3, sl
 801e928:	4313      	orrs	r3, r2
 801e92a:	4680      	mov	r8, r0
 801e92c:	4689      	mov	r9, r1
 801e92e:	d053      	beq.n	801e9d8 <_strtod_l+0xba8>
 801e930:	a335      	add	r3, pc, #212	; (adr r3, 801ea08 <_strtod_l+0xbd8>)
 801e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e936:	f7e2 f8e1 	bl	8000afc <__aeabi_dcmplt>
 801e93a:	2800      	cmp	r0, #0
 801e93c:	f47f acce 	bne.w	801e2dc <_strtod_l+0x4ac>
 801e940:	a333      	add	r3, pc, #204	; (adr r3, 801ea10 <_strtod_l+0xbe0>)
 801e942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e946:	4640      	mov	r0, r8
 801e948:	4649      	mov	r1, r9
 801e94a:	f7e2 f8f5 	bl	8000b38 <__aeabi_dcmpgt>
 801e94e:	2800      	cmp	r0, #0
 801e950:	f43f af7b 	beq.w	801e84a <_strtod_l+0xa1a>
 801e954:	e4c2      	b.n	801e2dc <_strtod_l+0x4ac>
 801e956:	9b04      	ldr	r3, [sp, #16]
 801e958:	b333      	cbz	r3, 801e9a8 <_strtod_l+0xb78>
 801e95a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e95c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e960:	d822      	bhi.n	801e9a8 <_strtod_l+0xb78>
 801e962:	a32d      	add	r3, pc, #180	; (adr r3, 801ea18 <_strtod_l+0xbe8>)
 801e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e968:	4640      	mov	r0, r8
 801e96a:	4649      	mov	r1, r9
 801e96c:	f7e2 f8d0 	bl	8000b10 <__aeabi_dcmple>
 801e970:	b1a0      	cbz	r0, 801e99c <_strtod_l+0xb6c>
 801e972:	4649      	mov	r1, r9
 801e974:	4640      	mov	r0, r8
 801e976:	f7e2 f927 	bl	8000bc8 <__aeabi_d2uiz>
 801e97a:	2801      	cmp	r0, #1
 801e97c:	bf38      	it	cc
 801e97e:	2001      	movcc	r0, #1
 801e980:	f7e1 fdd0 	bl	8000524 <__aeabi_ui2d>
 801e984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e986:	4680      	mov	r8, r0
 801e988:	4689      	mov	r9, r1
 801e98a:	bb13      	cbnz	r3, 801e9d2 <_strtod_l+0xba2>
 801e98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e990:	9014      	str	r0, [sp, #80]	; 0x50
 801e992:	9315      	str	r3, [sp, #84]	; 0x54
 801e994:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801e998:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e99c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e99e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e9a4:	1a9b      	subs	r3, r3, r2
 801e9a6:	930d      	str	r3, [sp, #52]	; 0x34
 801e9a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e9ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e9b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e9b4:	f001 ff4c 	bl	8020850 <__ulp>
 801e9b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e9bc:	ec53 2b10 	vmov	r2, r3, d0
 801e9c0:	f7e1 fe2a 	bl	8000618 <__aeabi_dmul>
 801e9c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e9c8:	f7e1 fc70 	bl	80002ac <__adddf3>
 801e9cc:	4682      	mov	sl, r0
 801e9ce:	468b      	mov	fp, r1
 801e9d0:	e78f      	b.n	801e8f2 <_strtod_l+0xac2>
 801e9d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801e9d6:	e7dd      	b.n	801e994 <_strtod_l+0xb64>
 801e9d8:	a311      	add	r3, pc, #68	; (adr r3, 801ea20 <_strtod_l+0xbf0>)
 801e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9de:	f7e2 f88d 	bl	8000afc <__aeabi_dcmplt>
 801e9e2:	e7b4      	b.n	801e94e <_strtod_l+0xb1e>
 801e9e4:	2300      	movs	r3, #0
 801e9e6:	930e      	str	r3, [sp, #56]	; 0x38
 801e9e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e9ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e9ec:	6013      	str	r3, [r2, #0]
 801e9ee:	f7ff ba65 	b.w	801debc <_strtod_l+0x8c>
 801e9f2:	2b65      	cmp	r3, #101	; 0x65
 801e9f4:	f43f ab5d 	beq.w	801e0b2 <_strtod_l+0x282>
 801e9f8:	2b45      	cmp	r3, #69	; 0x45
 801e9fa:	f43f ab5a 	beq.w	801e0b2 <_strtod_l+0x282>
 801e9fe:	2201      	movs	r2, #1
 801ea00:	f7ff bb92 	b.w	801e128 <_strtod_l+0x2f8>
 801ea04:	f3af 8000 	nop.w
 801ea08:	94a03595 	.word	0x94a03595
 801ea0c:	3fdfffff 	.word	0x3fdfffff
 801ea10:	35afe535 	.word	0x35afe535
 801ea14:	3fe00000 	.word	0x3fe00000
 801ea18:	ffc00000 	.word	0xffc00000
 801ea1c:	41dfffff 	.word	0x41dfffff
 801ea20:	94a03595 	.word	0x94a03595
 801ea24:	3fcfffff 	.word	0x3fcfffff
 801ea28:	3ff00000 	.word	0x3ff00000
 801ea2c:	7ff00000 	.word	0x7ff00000
 801ea30:	7fe00000 	.word	0x7fe00000
 801ea34:	7c9fffff 	.word	0x7c9fffff
 801ea38:	3fe00000 	.word	0x3fe00000
 801ea3c:	bff00000 	.word	0xbff00000
 801ea40:	7fefffff 	.word	0x7fefffff

0801ea44 <_strtod_r>:
 801ea44:	4b01      	ldr	r3, [pc, #4]	; (801ea4c <_strtod_r+0x8>)
 801ea46:	f7ff b9f3 	b.w	801de30 <_strtod_l>
 801ea4a:	bf00      	nop
 801ea4c:	2000069c 	.word	0x2000069c

0801ea50 <_strtol_l.isra.0>:
 801ea50:	2b01      	cmp	r3, #1
 801ea52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea56:	d001      	beq.n	801ea5c <_strtol_l.isra.0+0xc>
 801ea58:	2b24      	cmp	r3, #36	; 0x24
 801ea5a:	d906      	bls.n	801ea6a <_strtol_l.isra.0+0x1a>
 801ea5c:	f7fe fae6 	bl	801d02c <__errno>
 801ea60:	2316      	movs	r3, #22
 801ea62:	6003      	str	r3, [r0, #0]
 801ea64:	2000      	movs	r0, #0
 801ea66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea6a:	4f3a      	ldr	r7, [pc, #232]	; (801eb54 <_strtol_l.isra.0+0x104>)
 801ea6c:	468e      	mov	lr, r1
 801ea6e:	4676      	mov	r6, lr
 801ea70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ea74:	5de5      	ldrb	r5, [r4, r7]
 801ea76:	f015 0508 	ands.w	r5, r5, #8
 801ea7a:	d1f8      	bne.n	801ea6e <_strtol_l.isra.0+0x1e>
 801ea7c:	2c2d      	cmp	r4, #45	; 0x2d
 801ea7e:	d134      	bne.n	801eaea <_strtol_l.isra.0+0x9a>
 801ea80:	f89e 4000 	ldrb.w	r4, [lr]
 801ea84:	f04f 0801 	mov.w	r8, #1
 801ea88:	f106 0e02 	add.w	lr, r6, #2
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	d05c      	beq.n	801eb4a <_strtol_l.isra.0+0xfa>
 801ea90:	2b10      	cmp	r3, #16
 801ea92:	d10c      	bne.n	801eaae <_strtol_l.isra.0+0x5e>
 801ea94:	2c30      	cmp	r4, #48	; 0x30
 801ea96:	d10a      	bne.n	801eaae <_strtol_l.isra.0+0x5e>
 801ea98:	f89e 4000 	ldrb.w	r4, [lr]
 801ea9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801eaa0:	2c58      	cmp	r4, #88	; 0x58
 801eaa2:	d14d      	bne.n	801eb40 <_strtol_l.isra.0+0xf0>
 801eaa4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801eaa8:	2310      	movs	r3, #16
 801eaaa:	f10e 0e02 	add.w	lr, lr, #2
 801eaae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801eab2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eab6:	2600      	movs	r6, #0
 801eab8:	fbbc f9f3 	udiv	r9, ip, r3
 801eabc:	4635      	mov	r5, r6
 801eabe:	fb03 ca19 	mls	sl, r3, r9, ip
 801eac2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801eac6:	2f09      	cmp	r7, #9
 801eac8:	d818      	bhi.n	801eafc <_strtol_l.isra.0+0xac>
 801eaca:	463c      	mov	r4, r7
 801eacc:	42a3      	cmp	r3, r4
 801eace:	dd24      	ble.n	801eb1a <_strtol_l.isra.0+0xca>
 801ead0:	2e00      	cmp	r6, #0
 801ead2:	db1f      	blt.n	801eb14 <_strtol_l.isra.0+0xc4>
 801ead4:	45a9      	cmp	r9, r5
 801ead6:	d31d      	bcc.n	801eb14 <_strtol_l.isra.0+0xc4>
 801ead8:	d101      	bne.n	801eade <_strtol_l.isra.0+0x8e>
 801eada:	45a2      	cmp	sl, r4
 801eadc:	db1a      	blt.n	801eb14 <_strtol_l.isra.0+0xc4>
 801eade:	fb05 4503 	mla	r5, r5, r3, r4
 801eae2:	2601      	movs	r6, #1
 801eae4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801eae8:	e7eb      	b.n	801eac2 <_strtol_l.isra.0+0x72>
 801eaea:	2c2b      	cmp	r4, #43	; 0x2b
 801eaec:	bf08      	it	eq
 801eaee:	f89e 4000 	ldrbeq.w	r4, [lr]
 801eaf2:	46a8      	mov	r8, r5
 801eaf4:	bf08      	it	eq
 801eaf6:	f106 0e02 	addeq.w	lr, r6, #2
 801eafa:	e7c7      	b.n	801ea8c <_strtol_l.isra.0+0x3c>
 801eafc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801eb00:	2f19      	cmp	r7, #25
 801eb02:	d801      	bhi.n	801eb08 <_strtol_l.isra.0+0xb8>
 801eb04:	3c37      	subs	r4, #55	; 0x37
 801eb06:	e7e1      	b.n	801eacc <_strtol_l.isra.0+0x7c>
 801eb08:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801eb0c:	2f19      	cmp	r7, #25
 801eb0e:	d804      	bhi.n	801eb1a <_strtol_l.isra.0+0xca>
 801eb10:	3c57      	subs	r4, #87	; 0x57
 801eb12:	e7db      	b.n	801eacc <_strtol_l.isra.0+0x7c>
 801eb14:	f04f 36ff 	mov.w	r6, #4294967295
 801eb18:	e7e4      	b.n	801eae4 <_strtol_l.isra.0+0x94>
 801eb1a:	2e00      	cmp	r6, #0
 801eb1c:	da05      	bge.n	801eb2a <_strtol_l.isra.0+0xda>
 801eb1e:	2322      	movs	r3, #34	; 0x22
 801eb20:	6003      	str	r3, [r0, #0]
 801eb22:	4665      	mov	r5, ip
 801eb24:	b942      	cbnz	r2, 801eb38 <_strtol_l.isra.0+0xe8>
 801eb26:	4628      	mov	r0, r5
 801eb28:	e79d      	b.n	801ea66 <_strtol_l.isra.0+0x16>
 801eb2a:	f1b8 0f00 	cmp.w	r8, #0
 801eb2e:	d000      	beq.n	801eb32 <_strtol_l.isra.0+0xe2>
 801eb30:	426d      	negs	r5, r5
 801eb32:	2a00      	cmp	r2, #0
 801eb34:	d0f7      	beq.n	801eb26 <_strtol_l.isra.0+0xd6>
 801eb36:	b10e      	cbz	r6, 801eb3c <_strtol_l.isra.0+0xec>
 801eb38:	f10e 31ff 	add.w	r1, lr, #4294967295
 801eb3c:	6011      	str	r1, [r2, #0]
 801eb3e:	e7f2      	b.n	801eb26 <_strtol_l.isra.0+0xd6>
 801eb40:	2430      	movs	r4, #48	; 0x30
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d1b3      	bne.n	801eaae <_strtol_l.isra.0+0x5e>
 801eb46:	2308      	movs	r3, #8
 801eb48:	e7b1      	b.n	801eaae <_strtol_l.isra.0+0x5e>
 801eb4a:	2c30      	cmp	r4, #48	; 0x30
 801eb4c:	d0a4      	beq.n	801ea98 <_strtol_l.isra.0+0x48>
 801eb4e:	230a      	movs	r3, #10
 801eb50:	e7ad      	b.n	801eaae <_strtol_l.isra.0+0x5e>
 801eb52:	bf00      	nop
 801eb54:	080297a1 	.word	0x080297a1

0801eb58 <_strtol_r>:
 801eb58:	f7ff bf7a 	b.w	801ea50 <_strtol_l.isra.0>

0801eb5c <quorem>:
 801eb5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb60:	6903      	ldr	r3, [r0, #16]
 801eb62:	690c      	ldr	r4, [r1, #16]
 801eb64:	42a3      	cmp	r3, r4
 801eb66:	4607      	mov	r7, r0
 801eb68:	f2c0 8081 	blt.w	801ec6e <quorem+0x112>
 801eb6c:	3c01      	subs	r4, #1
 801eb6e:	f101 0814 	add.w	r8, r1, #20
 801eb72:	f100 0514 	add.w	r5, r0, #20
 801eb76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eb7a:	9301      	str	r3, [sp, #4]
 801eb7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801eb80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eb84:	3301      	adds	r3, #1
 801eb86:	429a      	cmp	r2, r3
 801eb88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801eb8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801eb90:	fbb2 f6f3 	udiv	r6, r2, r3
 801eb94:	d331      	bcc.n	801ebfa <quorem+0x9e>
 801eb96:	f04f 0e00 	mov.w	lr, #0
 801eb9a:	4640      	mov	r0, r8
 801eb9c:	46ac      	mov	ip, r5
 801eb9e:	46f2      	mov	sl, lr
 801eba0:	f850 2b04 	ldr.w	r2, [r0], #4
 801eba4:	b293      	uxth	r3, r2
 801eba6:	fb06 e303 	mla	r3, r6, r3, lr
 801ebaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ebae:	b29b      	uxth	r3, r3
 801ebb0:	ebaa 0303 	sub.w	r3, sl, r3
 801ebb4:	0c12      	lsrs	r2, r2, #16
 801ebb6:	f8dc a000 	ldr.w	sl, [ip]
 801ebba:	fb06 e202 	mla	r2, r6, r2, lr
 801ebbe:	fa13 f38a 	uxtah	r3, r3, sl
 801ebc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ebc6:	fa1f fa82 	uxth.w	sl, r2
 801ebca:	f8dc 2000 	ldr.w	r2, [ip]
 801ebce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ebd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ebd6:	b29b      	uxth	r3, r3
 801ebd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ebdc:	4581      	cmp	r9, r0
 801ebde:	f84c 3b04 	str.w	r3, [ip], #4
 801ebe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ebe6:	d2db      	bcs.n	801eba0 <quorem+0x44>
 801ebe8:	f855 300b 	ldr.w	r3, [r5, fp]
 801ebec:	b92b      	cbnz	r3, 801ebfa <quorem+0x9e>
 801ebee:	9b01      	ldr	r3, [sp, #4]
 801ebf0:	3b04      	subs	r3, #4
 801ebf2:	429d      	cmp	r5, r3
 801ebf4:	461a      	mov	r2, r3
 801ebf6:	d32e      	bcc.n	801ec56 <quorem+0xfa>
 801ebf8:	613c      	str	r4, [r7, #16]
 801ebfa:	4638      	mov	r0, r7
 801ebfc:	f001 fd84 	bl	8020708 <__mcmp>
 801ec00:	2800      	cmp	r0, #0
 801ec02:	db24      	blt.n	801ec4e <quorem+0xf2>
 801ec04:	3601      	adds	r6, #1
 801ec06:	4628      	mov	r0, r5
 801ec08:	f04f 0c00 	mov.w	ip, #0
 801ec0c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ec10:	f8d0 e000 	ldr.w	lr, [r0]
 801ec14:	b293      	uxth	r3, r2
 801ec16:	ebac 0303 	sub.w	r3, ip, r3
 801ec1a:	0c12      	lsrs	r2, r2, #16
 801ec1c:	fa13 f38e 	uxtah	r3, r3, lr
 801ec20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ec24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ec28:	b29b      	uxth	r3, r3
 801ec2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ec2e:	45c1      	cmp	r9, r8
 801ec30:	f840 3b04 	str.w	r3, [r0], #4
 801ec34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ec38:	d2e8      	bcs.n	801ec0c <quorem+0xb0>
 801ec3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ec3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ec42:	b922      	cbnz	r2, 801ec4e <quorem+0xf2>
 801ec44:	3b04      	subs	r3, #4
 801ec46:	429d      	cmp	r5, r3
 801ec48:	461a      	mov	r2, r3
 801ec4a:	d30a      	bcc.n	801ec62 <quorem+0x106>
 801ec4c:	613c      	str	r4, [r7, #16]
 801ec4e:	4630      	mov	r0, r6
 801ec50:	b003      	add	sp, #12
 801ec52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec56:	6812      	ldr	r2, [r2, #0]
 801ec58:	3b04      	subs	r3, #4
 801ec5a:	2a00      	cmp	r2, #0
 801ec5c:	d1cc      	bne.n	801ebf8 <quorem+0x9c>
 801ec5e:	3c01      	subs	r4, #1
 801ec60:	e7c7      	b.n	801ebf2 <quorem+0x96>
 801ec62:	6812      	ldr	r2, [r2, #0]
 801ec64:	3b04      	subs	r3, #4
 801ec66:	2a00      	cmp	r2, #0
 801ec68:	d1f0      	bne.n	801ec4c <quorem+0xf0>
 801ec6a:	3c01      	subs	r4, #1
 801ec6c:	e7eb      	b.n	801ec46 <quorem+0xea>
 801ec6e:	2000      	movs	r0, #0
 801ec70:	e7ee      	b.n	801ec50 <quorem+0xf4>
 801ec72:	0000      	movs	r0, r0
 801ec74:	0000      	movs	r0, r0
	...

0801ec78 <_dtoa_r>:
 801ec78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec7c:	ed2d 8b02 	vpush	{d8}
 801ec80:	ec57 6b10 	vmov	r6, r7, d0
 801ec84:	b095      	sub	sp, #84	; 0x54
 801ec86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ec88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ec8c:	9105      	str	r1, [sp, #20]
 801ec8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ec92:	4604      	mov	r4, r0
 801ec94:	9209      	str	r2, [sp, #36]	; 0x24
 801ec96:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec98:	b975      	cbnz	r5, 801ecb8 <_dtoa_r+0x40>
 801ec9a:	2010      	movs	r0, #16
 801ec9c:	f001 fa44 	bl	8020128 <malloc>
 801eca0:	4602      	mov	r2, r0
 801eca2:	6260      	str	r0, [r4, #36]	; 0x24
 801eca4:	b920      	cbnz	r0, 801ecb0 <_dtoa_r+0x38>
 801eca6:	4bb2      	ldr	r3, [pc, #712]	; (801ef70 <_dtoa_r+0x2f8>)
 801eca8:	21ea      	movs	r1, #234	; 0xea
 801ecaa:	48b2      	ldr	r0, [pc, #712]	; (801ef74 <_dtoa_r+0x2fc>)
 801ecac:	f002 fa82 	bl	80211b4 <__assert_func>
 801ecb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ecb4:	6005      	str	r5, [r0, #0]
 801ecb6:	60c5      	str	r5, [r0, #12]
 801ecb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ecba:	6819      	ldr	r1, [r3, #0]
 801ecbc:	b151      	cbz	r1, 801ecd4 <_dtoa_r+0x5c>
 801ecbe:	685a      	ldr	r2, [r3, #4]
 801ecc0:	604a      	str	r2, [r1, #4]
 801ecc2:	2301      	movs	r3, #1
 801ecc4:	4093      	lsls	r3, r2
 801ecc6:	608b      	str	r3, [r1, #8]
 801ecc8:	4620      	mov	r0, r4
 801ecca:	f001 fa95 	bl	80201f8 <_Bfree>
 801ecce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ecd0:	2200      	movs	r2, #0
 801ecd2:	601a      	str	r2, [r3, #0]
 801ecd4:	1e3b      	subs	r3, r7, #0
 801ecd6:	bfb9      	ittee	lt
 801ecd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ecdc:	9303      	strlt	r3, [sp, #12]
 801ecde:	2300      	movge	r3, #0
 801ece0:	f8c8 3000 	strge.w	r3, [r8]
 801ece4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ece8:	4ba3      	ldr	r3, [pc, #652]	; (801ef78 <_dtoa_r+0x300>)
 801ecea:	bfbc      	itt	lt
 801ecec:	2201      	movlt	r2, #1
 801ecee:	f8c8 2000 	strlt.w	r2, [r8]
 801ecf2:	ea33 0309 	bics.w	r3, r3, r9
 801ecf6:	d11b      	bne.n	801ed30 <_dtoa_r+0xb8>
 801ecf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ecfa:	f242 730f 	movw	r3, #9999	; 0x270f
 801ecfe:	6013      	str	r3, [r2, #0]
 801ed00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ed04:	4333      	orrs	r3, r6
 801ed06:	f000 857a 	beq.w	801f7fe <_dtoa_r+0xb86>
 801ed0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ed0c:	b963      	cbnz	r3, 801ed28 <_dtoa_r+0xb0>
 801ed0e:	4b9b      	ldr	r3, [pc, #620]	; (801ef7c <_dtoa_r+0x304>)
 801ed10:	e024      	b.n	801ed5c <_dtoa_r+0xe4>
 801ed12:	4b9b      	ldr	r3, [pc, #620]	; (801ef80 <_dtoa_r+0x308>)
 801ed14:	9300      	str	r3, [sp, #0]
 801ed16:	3308      	adds	r3, #8
 801ed18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ed1a:	6013      	str	r3, [r2, #0]
 801ed1c:	9800      	ldr	r0, [sp, #0]
 801ed1e:	b015      	add	sp, #84	; 0x54
 801ed20:	ecbd 8b02 	vpop	{d8}
 801ed24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed28:	4b94      	ldr	r3, [pc, #592]	; (801ef7c <_dtoa_r+0x304>)
 801ed2a:	9300      	str	r3, [sp, #0]
 801ed2c:	3303      	adds	r3, #3
 801ed2e:	e7f3      	b.n	801ed18 <_dtoa_r+0xa0>
 801ed30:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ed34:	2200      	movs	r2, #0
 801ed36:	ec51 0b17 	vmov	r0, r1, d7
 801ed3a:	2300      	movs	r3, #0
 801ed3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ed40:	f7e1 fed2 	bl	8000ae8 <__aeabi_dcmpeq>
 801ed44:	4680      	mov	r8, r0
 801ed46:	b158      	cbz	r0, 801ed60 <_dtoa_r+0xe8>
 801ed48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed4a:	2301      	movs	r3, #1
 801ed4c:	6013      	str	r3, [r2, #0]
 801ed4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	f000 8551 	beq.w	801f7f8 <_dtoa_r+0xb80>
 801ed56:	488b      	ldr	r0, [pc, #556]	; (801ef84 <_dtoa_r+0x30c>)
 801ed58:	6018      	str	r0, [r3, #0]
 801ed5a:	1e43      	subs	r3, r0, #1
 801ed5c:	9300      	str	r3, [sp, #0]
 801ed5e:	e7dd      	b.n	801ed1c <_dtoa_r+0xa4>
 801ed60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ed64:	aa12      	add	r2, sp, #72	; 0x48
 801ed66:	a913      	add	r1, sp, #76	; 0x4c
 801ed68:	4620      	mov	r0, r4
 801ed6a:	f001 fded 	bl	8020948 <__d2b>
 801ed6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ed72:	4683      	mov	fp, r0
 801ed74:	2d00      	cmp	r5, #0
 801ed76:	d07c      	beq.n	801ee72 <_dtoa_r+0x1fa>
 801ed78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ed7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ed82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ed86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ed8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ed8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ed92:	4b7d      	ldr	r3, [pc, #500]	; (801ef88 <_dtoa_r+0x310>)
 801ed94:	2200      	movs	r2, #0
 801ed96:	4630      	mov	r0, r6
 801ed98:	4639      	mov	r1, r7
 801ed9a:	f7e1 fa85 	bl	80002a8 <__aeabi_dsub>
 801ed9e:	a36e      	add	r3, pc, #440	; (adr r3, 801ef58 <_dtoa_r+0x2e0>)
 801eda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda4:	f7e1 fc38 	bl	8000618 <__aeabi_dmul>
 801eda8:	a36d      	add	r3, pc, #436	; (adr r3, 801ef60 <_dtoa_r+0x2e8>)
 801edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edae:	f7e1 fa7d 	bl	80002ac <__adddf3>
 801edb2:	4606      	mov	r6, r0
 801edb4:	4628      	mov	r0, r5
 801edb6:	460f      	mov	r7, r1
 801edb8:	f7e1 fbc4 	bl	8000544 <__aeabi_i2d>
 801edbc:	a36a      	add	r3, pc, #424	; (adr r3, 801ef68 <_dtoa_r+0x2f0>)
 801edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edc2:	f7e1 fc29 	bl	8000618 <__aeabi_dmul>
 801edc6:	4602      	mov	r2, r0
 801edc8:	460b      	mov	r3, r1
 801edca:	4630      	mov	r0, r6
 801edcc:	4639      	mov	r1, r7
 801edce:	f7e1 fa6d 	bl	80002ac <__adddf3>
 801edd2:	4606      	mov	r6, r0
 801edd4:	460f      	mov	r7, r1
 801edd6:	f7e1 fecf 	bl	8000b78 <__aeabi_d2iz>
 801edda:	2200      	movs	r2, #0
 801eddc:	4682      	mov	sl, r0
 801edde:	2300      	movs	r3, #0
 801ede0:	4630      	mov	r0, r6
 801ede2:	4639      	mov	r1, r7
 801ede4:	f7e1 fe8a 	bl	8000afc <__aeabi_dcmplt>
 801ede8:	b148      	cbz	r0, 801edfe <_dtoa_r+0x186>
 801edea:	4650      	mov	r0, sl
 801edec:	f7e1 fbaa 	bl	8000544 <__aeabi_i2d>
 801edf0:	4632      	mov	r2, r6
 801edf2:	463b      	mov	r3, r7
 801edf4:	f7e1 fe78 	bl	8000ae8 <__aeabi_dcmpeq>
 801edf8:	b908      	cbnz	r0, 801edfe <_dtoa_r+0x186>
 801edfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801edfe:	f1ba 0f16 	cmp.w	sl, #22
 801ee02:	d854      	bhi.n	801eeae <_dtoa_r+0x236>
 801ee04:	4b61      	ldr	r3, [pc, #388]	; (801ef8c <_dtoa_r+0x314>)
 801ee06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee12:	f7e1 fe73 	bl	8000afc <__aeabi_dcmplt>
 801ee16:	2800      	cmp	r0, #0
 801ee18:	d04b      	beq.n	801eeb2 <_dtoa_r+0x23a>
 801ee1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ee1e:	2300      	movs	r3, #0
 801ee20:	930e      	str	r3, [sp, #56]	; 0x38
 801ee22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ee24:	1b5d      	subs	r5, r3, r5
 801ee26:	1e6b      	subs	r3, r5, #1
 801ee28:	9304      	str	r3, [sp, #16]
 801ee2a:	bf43      	ittte	mi
 801ee2c:	2300      	movmi	r3, #0
 801ee2e:	f1c5 0801 	rsbmi	r8, r5, #1
 801ee32:	9304      	strmi	r3, [sp, #16]
 801ee34:	f04f 0800 	movpl.w	r8, #0
 801ee38:	f1ba 0f00 	cmp.w	sl, #0
 801ee3c:	db3b      	blt.n	801eeb6 <_dtoa_r+0x23e>
 801ee3e:	9b04      	ldr	r3, [sp, #16]
 801ee40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ee44:	4453      	add	r3, sl
 801ee46:	9304      	str	r3, [sp, #16]
 801ee48:	2300      	movs	r3, #0
 801ee4a:	9306      	str	r3, [sp, #24]
 801ee4c:	9b05      	ldr	r3, [sp, #20]
 801ee4e:	2b09      	cmp	r3, #9
 801ee50:	d869      	bhi.n	801ef26 <_dtoa_r+0x2ae>
 801ee52:	2b05      	cmp	r3, #5
 801ee54:	bfc4      	itt	gt
 801ee56:	3b04      	subgt	r3, #4
 801ee58:	9305      	strgt	r3, [sp, #20]
 801ee5a:	9b05      	ldr	r3, [sp, #20]
 801ee5c:	f1a3 0302 	sub.w	r3, r3, #2
 801ee60:	bfcc      	ite	gt
 801ee62:	2500      	movgt	r5, #0
 801ee64:	2501      	movle	r5, #1
 801ee66:	2b03      	cmp	r3, #3
 801ee68:	d869      	bhi.n	801ef3e <_dtoa_r+0x2c6>
 801ee6a:	e8df f003 	tbb	[pc, r3]
 801ee6e:	4e2c      	.short	0x4e2c
 801ee70:	5a4c      	.short	0x5a4c
 801ee72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801ee76:	441d      	add	r5, r3
 801ee78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ee7c:	2b20      	cmp	r3, #32
 801ee7e:	bfc1      	itttt	gt
 801ee80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ee84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ee88:	fa09 f303 	lslgt.w	r3, r9, r3
 801ee8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ee90:	bfda      	itte	le
 801ee92:	f1c3 0320 	rsble	r3, r3, #32
 801ee96:	fa06 f003 	lslle.w	r0, r6, r3
 801ee9a:	4318      	orrgt	r0, r3
 801ee9c:	f7e1 fb42 	bl	8000524 <__aeabi_ui2d>
 801eea0:	2301      	movs	r3, #1
 801eea2:	4606      	mov	r6, r0
 801eea4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801eea8:	3d01      	subs	r5, #1
 801eeaa:	9310      	str	r3, [sp, #64]	; 0x40
 801eeac:	e771      	b.n	801ed92 <_dtoa_r+0x11a>
 801eeae:	2301      	movs	r3, #1
 801eeb0:	e7b6      	b.n	801ee20 <_dtoa_r+0x1a8>
 801eeb2:	900e      	str	r0, [sp, #56]	; 0x38
 801eeb4:	e7b5      	b.n	801ee22 <_dtoa_r+0x1aa>
 801eeb6:	f1ca 0300 	rsb	r3, sl, #0
 801eeba:	9306      	str	r3, [sp, #24]
 801eebc:	2300      	movs	r3, #0
 801eebe:	eba8 080a 	sub.w	r8, r8, sl
 801eec2:	930d      	str	r3, [sp, #52]	; 0x34
 801eec4:	e7c2      	b.n	801ee4c <_dtoa_r+0x1d4>
 801eec6:	2300      	movs	r3, #0
 801eec8:	9308      	str	r3, [sp, #32]
 801eeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eecc:	2b00      	cmp	r3, #0
 801eece:	dc39      	bgt.n	801ef44 <_dtoa_r+0x2cc>
 801eed0:	f04f 0901 	mov.w	r9, #1
 801eed4:	f8cd 9004 	str.w	r9, [sp, #4]
 801eed8:	464b      	mov	r3, r9
 801eeda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801eede:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801eee0:	2200      	movs	r2, #0
 801eee2:	6042      	str	r2, [r0, #4]
 801eee4:	2204      	movs	r2, #4
 801eee6:	f102 0614 	add.w	r6, r2, #20
 801eeea:	429e      	cmp	r6, r3
 801eeec:	6841      	ldr	r1, [r0, #4]
 801eeee:	d92f      	bls.n	801ef50 <_dtoa_r+0x2d8>
 801eef0:	4620      	mov	r0, r4
 801eef2:	f001 f941 	bl	8020178 <_Balloc>
 801eef6:	9000      	str	r0, [sp, #0]
 801eef8:	2800      	cmp	r0, #0
 801eefa:	d14b      	bne.n	801ef94 <_dtoa_r+0x31c>
 801eefc:	4b24      	ldr	r3, [pc, #144]	; (801ef90 <_dtoa_r+0x318>)
 801eefe:	4602      	mov	r2, r0
 801ef00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ef04:	e6d1      	b.n	801ecaa <_dtoa_r+0x32>
 801ef06:	2301      	movs	r3, #1
 801ef08:	e7de      	b.n	801eec8 <_dtoa_r+0x250>
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	9308      	str	r3, [sp, #32]
 801ef0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef10:	eb0a 0903 	add.w	r9, sl, r3
 801ef14:	f109 0301 	add.w	r3, r9, #1
 801ef18:	2b01      	cmp	r3, #1
 801ef1a:	9301      	str	r3, [sp, #4]
 801ef1c:	bfb8      	it	lt
 801ef1e:	2301      	movlt	r3, #1
 801ef20:	e7dd      	b.n	801eede <_dtoa_r+0x266>
 801ef22:	2301      	movs	r3, #1
 801ef24:	e7f2      	b.n	801ef0c <_dtoa_r+0x294>
 801ef26:	2501      	movs	r5, #1
 801ef28:	2300      	movs	r3, #0
 801ef2a:	9305      	str	r3, [sp, #20]
 801ef2c:	9508      	str	r5, [sp, #32]
 801ef2e:	f04f 39ff 	mov.w	r9, #4294967295
 801ef32:	2200      	movs	r2, #0
 801ef34:	f8cd 9004 	str.w	r9, [sp, #4]
 801ef38:	2312      	movs	r3, #18
 801ef3a:	9209      	str	r2, [sp, #36]	; 0x24
 801ef3c:	e7cf      	b.n	801eede <_dtoa_r+0x266>
 801ef3e:	2301      	movs	r3, #1
 801ef40:	9308      	str	r3, [sp, #32]
 801ef42:	e7f4      	b.n	801ef2e <_dtoa_r+0x2b6>
 801ef44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ef48:	f8cd 9004 	str.w	r9, [sp, #4]
 801ef4c:	464b      	mov	r3, r9
 801ef4e:	e7c6      	b.n	801eede <_dtoa_r+0x266>
 801ef50:	3101      	adds	r1, #1
 801ef52:	6041      	str	r1, [r0, #4]
 801ef54:	0052      	lsls	r2, r2, #1
 801ef56:	e7c6      	b.n	801eee6 <_dtoa_r+0x26e>
 801ef58:	636f4361 	.word	0x636f4361
 801ef5c:	3fd287a7 	.word	0x3fd287a7
 801ef60:	8b60c8b3 	.word	0x8b60c8b3
 801ef64:	3fc68a28 	.word	0x3fc68a28
 801ef68:	509f79fb 	.word	0x509f79fb
 801ef6c:	3fd34413 	.word	0x3fd34413
 801ef70:	080298ae 	.word	0x080298ae
 801ef74:	080298c5 	.word	0x080298c5
 801ef78:	7ff00000 	.word	0x7ff00000
 801ef7c:	080298aa 	.word	0x080298aa
 801ef80:	080298a1 	.word	0x080298a1
 801ef84:	08029725 	.word	0x08029725
 801ef88:	3ff80000 	.word	0x3ff80000
 801ef8c:	08029aa0 	.word	0x08029aa0
 801ef90:	08029924 	.word	0x08029924
 801ef94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef96:	9a00      	ldr	r2, [sp, #0]
 801ef98:	601a      	str	r2, [r3, #0]
 801ef9a:	9b01      	ldr	r3, [sp, #4]
 801ef9c:	2b0e      	cmp	r3, #14
 801ef9e:	f200 80ad 	bhi.w	801f0fc <_dtoa_r+0x484>
 801efa2:	2d00      	cmp	r5, #0
 801efa4:	f000 80aa 	beq.w	801f0fc <_dtoa_r+0x484>
 801efa8:	f1ba 0f00 	cmp.w	sl, #0
 801efac:	dd36      	ble.n	801f01c <_dtoa_r+0x3a4>
 801efae:	4ac3      	ldr	r2, [pc, #780]	; (801f2bc <_dtoa_r+0x644>)
 801efb0:	f00a 030f 	and.w	r3, sl, #15
 801efb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801efb8:	ed93 7b00 	vldr	d7, [r3]
 801efbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801efc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801efc4:	eeb0 8a47 	vmov.f32	s16, s14
 801efc8:	eef0 8a67 	vmov.f32	s17, s15
 801efcc:	d016      	beq.n	801effc <_dtoa_r+0x384>
 801efce:	4bbc      	ldr	r3, [pc, #752]	; (801f2c0 <_dtoa_r+0x648>)
 801efd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801efd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801efd8:	f7e1 fc48 	bl	800086c <__aeabi_ddiv>
 801efdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801efe0:	f007 070f 	and.w	r7, r7, #15
 801efe4:	2503      	movs	r5, #3
 801efe6:	4eb6      	ldr	r6, [pc, #728]	; (801f2c0 <_dtoa_r+0x648>)
 801efe8:	b957      	cbnz	r7, 801f000 <_dtoa_r+0x388>
 801efea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efee:	ec53 2b18 	vmov	r2, r3, d8
 801eff2:	f7e1 fc3b 	bl	800086c <__aeabi_ddiv>
 801eff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801effa:	e029      	b.n	801f050 <_dtoa_r+0x3d8>
 801effc:	2502      	movs	r5, #2
 801effe:	e7f2      	b.n	801efe6 <_dtoa_r+0x36e>
 801f000:	07f9      	lsls	r1, r7, #31
 801f002:	d508      	bpl.n	801f016 <_dtoa_r+0x39e>
 801f004:	ec51 0b18 	vmov	r0, r1, d8
 801f008:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f00c:	f7e1 fb04 	bl	8000618 <__aeabi_dmul>
 801f010:	ec41 0b18 	vmov	d8, r0, r1
 801f014:	3501      	adds	r5, #1
 801f016:	107f      	asrs	r7, r7, #1
 801f018:	3608      	adds	r6, #8
 801f01a:	e7e5      	b.n	801efe8 <_dtoa_r+0x370>
 801f01c:	f000 80a6 	beq.w	801f16c <_dtoa_r+0x4f4>
 801f020:	f1ca 0600 	rsb	r6, sl, #0
 801f024:	4ba5      	ldr	r3, [pc, #660]	; (801f2bc <_dtoa_r+0x644>)
 801f026:	4fa6      	ldr	r7, [pc, #664]	; (801f2c0 <_dtoa_r+0x648>)
 801f028:	f006 020f 	and.w	r2, r6, #15
 801f02c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f034:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f038:	f7e1 faee 	bl	8000618 <__aeabi_dmul>
 801f03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f040:	1136      	asrs	r6, r6, #4
 801f042:	2300      	movs	r3, #0
 801f044:	2502      	movs	r5, #2
 801f046:	2e00      	cmp	r6, #0
 801f048:	f040 8085 	bne.w	801f156 <_dtoa_r+0x4de>
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d1d2      	bne.n	801eff6 <_dtoa_r+0x37e>
 801f050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f052:	2b00      	cmp	r3, #0
 801f054:	f000 808c 	beq.w	801f170 <_dtoa_r+0x4f8>
 801f058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f05c:	4b99      	ldr	r3, [pc, #612]	; (801f2c4 <_dtoa_r+0x64c>)
 801f05e:	2200      	movs	r2, #0
 801f060:	4630      	mov	r0, r6
 801f062:	4639      	mov	r1, r7
 801f064:	f7e1 fd4a 	bl	8000afc <__aeabi_dcmplt>
 801f068:	2800      	cmp	r0, #0
 801f06a:	f000 8081 	beq.w	801f170 <_dtoa_r+0x4f8>
 801f06e:	9b01      	ldr	r3, [sp, #4]
 801f070:	2b00      	cmp	r3, #0
 801f072:	d07d      	beq.n	801f170 <_dtoa_r+0x4f8>
 801f074:	f1b9 0f00 	cmp.w	r9, #0
 801f078:	dd3c      	ble.n	801f0f4 <_dtoa_r+0x47c>
 801f07a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f07e:	9307      	str	r3, [sp, #28]
 801f080:	2200      	movs	r2, #0
 801f082:	4b91      	ldr	r3, [pc, #580]	; (801f2c8 <_dtoa_r+0x650>)
 801f084:	4630      	mov	r0, r6
 801f086:	4639      	mov	r1, r7
 801f088:	f7e1 fac6 	bl	8000618 <__aeabi_dmul>
 801f08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f090:	3501      	adds	r5, #1
 801f092:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f096:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f09a:	4628      	mov	r0, r5
 801f09c:	f7e1 fa52 	bl	8000544 <__aeabi_i2d>
 801f0a0:	4632      	mov	r2, r6
 801f0a2:	463b      	mov	r3, r7
 801f0a4:	f7e1 fab8 	bl	8000618 <__aeabi_dmul>
 801f0a8:	4b88      	ldr	r3, [pc, #544]	; (801f2cc <_dtoa_r+0x654>)
 801f0aa:	2200      	movs	r2, #0
 801f0ac:	f7e1 f8fe 	bl	80002ac <__adddf3>
 801f0b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0b8:	9303      	str	r3, [sp, #12]
 801f0ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d15c      	bne.n	801f17a <_dtoa_r+0x502>
 801f0c0:	4b83      	ldr	r3, [pc, #524]	; (801f2d0 <_dtoa_r+0x658>)
 801f0c2:	2200      	movs	r2, #0
 801f0c4:	4630      	mov	r0, r6
 801f0c6:	4639      	mov	r1, r7
 801f0c8:	f7e1 f8ee 	bl	80002a8 <__aeabi_dsub>
 801f0cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f0d0:	4606      	mov	r6, r0
 801f0d2:	460f      	mov	r7, r1
 801f0d4:	f7e1 fd30 	bl	8000b38 <__aeabi_dcmpgt>
 801f0d8:	2800      	cmp	r0, #0
 801f0da:	f040 8296 	bne.w	801f60a <_dtoa_r+0x992>
 801f0de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f0e2:	4630      	mov	r0, r6
 801f0e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f0e8:	4639      	mov	r1, r7
 801f0ea:	f7e1 fd07 	bl	8000afc <__aeabi_dcmplt>
 801f0ee:	2800      	cmp	r0, #0
 801f0f0:	f040 8288 	bne.w	801f604 <_dtoa_r+0x98c>
 801f0f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f0f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f0fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	f2c0 8158 	blt.w	801f3b4 <_dtoa_r+0x73c>
 801f104:	f1ba 0f0e 	cmp.w	sl, #14
 801f108:	f300 8154 	bgt.w	801f3b4 <_dtoa_r+0x73c>
 801f10c:	4b6b      	ldr	r3, [pc, #428]	; (801f2bc <_dtoa_r+0x644>)
 801f10e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f112:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f118:	2b00      	cmp	r3, #0
 801f11a:	f280 80e3 	bge.w	801f2e4 <_dtoa_r+0x66c>
 801f11e:	9b01      	ldr	r3, [sp, #4]
 801f120:	2b00      	cmp	r3, #0
 801f122:	f300 80df 	bgt.w	801f2e4 <_dtoa_r+0x66c>
 801f126:	f040 826d 	bne.w	801f604 <_dtoa_r+0x98c>
 801f12a:	4b69      	ldr	r3, [pc, #420]	; (801f2d0 <_dtoa_r+0x658>)
 801f12c:	2200      	movs	r2, #0
 801f12e:	4640      	mov	r0, r8
 801f130:	4649      	mov	r1, r9
 801f132:	f7e1 fa71 	bl	8000618 <__aeabi_dmul>
 801f136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f13a:	f7e1 fcf3 	bl	8000b24 <__aeabi_dcmpge>
 801f13e:	9e01      	ldr	r6, [sp, #4]
 801f140:	4637      	mov	r7, r6
 801f142:	2800      	cmp	r0, #0
 801f144:	f040 8243 	bne.w	801f5ce <_dtoa_r+0x956>
 801f148:	9d00      	ldr	r5, [sp, #0]
 801f14a:	2331      	movs	r3, #49	; 0x31
 801f14c:	f805 3b01 	strb.w	r3, [r5], #1
 801f150:	f10a 0a01 	add.w	sl, sl, #1
 801f154:	e23f      	b.n	801f5d6 <_dtoa_r+0x95e>
 801f156:	07f2      	lsls	r2, r6, #31
 801f158:	d505      	bpl.n	801f166 <_dtoa_r+0x4ee>
 801f15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f15e:	f7e1 fa5b 	bl	8000618 <__aeabi_dmul>
 801f162:	3501      	adds	r5, #1
 801f164:	2301      	movs	r3, #1
 801f166:	1076      	asrs	r6, r6, #1
 801f168:	3708      	adds	r7, #8
 801f16a:	e76c      	b.n	801f046 <_dtoa_r+0x3ce>
 801f16c:	2502      	movs	r5, #2
 801f16e:	e76f      	b.n	801f050 <_dtoa_r+0x3d8>
 801f170:	9b01      	ldr	r3, [sp, #4]
 801f172:	f8cd a01c 	str.w	sl, [sp, #28]
 801f176:	930c      	str	r3, [sp, #48]	; 0x30
 801f178:	e78d      	b.n	801f096 <_dtoa_r+0x41e>
 801f17a:	9900      	ldr	r1, [sp, #0]
 801f17c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f17e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f180:	4b4e      	ldr	r3, [pc, #312]	; (801f2bc <_dtoa_r+0x644>)
 801f182:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f186:	4401      	add	r1, r0
 801f188:	9102      	str	r1, [sp, #8]
 801f18a:	9908      	ldr	r1, [sp, #32]
 801f18c:	eeb0 8a47 	vmov.f32	s16, s14
 801f190:	eef0 8a67 	vmov.f32	s17, s15
 801f194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f19c:	2900      	cmp	r1, #0
 801f19e:	d045      	beq.n	801f22c <_dtoa_r+0x5b4>
 801f1a0:	494c      	ldr	r1, [pc, #304]	; (801f2d4 <_dtoa_r+0x65c>)
 801f1a2:	2000      	movs	r0, #0
 801f1a4:	f7e1 fb62 	bl	800086c <__aeabi_ddiv>
 801f1a8:	ec53 2b18 	vmov	r2, r3, d8
 801f1ac:	f7e1 f87c 	bl	80002a8 <__aeabi_dsub>
 801f1b0:	9d00      	ldr	r5, [sp, #0]
 801f1b2:	ec41 0b18 	vmov	d8, r0, r1
 801f1b6:	4639      	mov	r1, r7
 801f1b8:	4630      	mov	r0, r6
 801f1ba:	f7e1 fcdd 	bl	8000b78 <__aeabi_d2iz>
 801f1be:	900c      	str	r0, [sp, #48]	; 0x30
 801f1c0:	f7e1 f9c0 	bl	8000544 <__aeabi_i2d>
 801f1c4:	4602      	mov	r2, r0
 801f1c6:	460b      	mov	r3, r1
 801f1c8:	4630      	mov	r0, r6
 801f1ca:	4639      	mov	r1, r7
 801f1cc:	f7e1 f86c 	bl	80002a8 <__aeabi_dsub>
 801f1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f1d2:	3330      	adds	r3, #48	; 0x30
 801f1d4:	f805 3b01 	strb.w	r3, [r5], #1
 801f1d8:	ec53 2b18 	vmov	r2, r3, d8
 801f1dc:	4606      	mov	r6, r0
 801f1de:	460f      	mov	r7, r1
 801f1e0:	f7e1 fc8c 	bl	8000afc <__aeabi_dcmplt>
 801f1e4:	2800      	cmp	r0, #0
 801f1e6:	d165      	bne.n	801f2b4 <_dtoa_r+0x63c>
 801f1e8:	4632      	mov	r2, r6
 801f1ea:	463b      	mov	r3, r7
 801f1ec:	4935      	ldr	r1, [pc, #212]	; (801f2c4 <_dtoa_r+0x64c>)
 801f1ee:	2000      	movs	r0, #0
 801f1f0:	f7e1 f85a 	bl	80002a8 <__aeabi_dsub>
 801f1f4:	ec53 2b18 	vmov	r2, r3, d8
 801f1f8:	f7e1 fc80 	bl	8000afc <__aeabi_dcmplt>
 801f1fc:	2800      	cmp	r0, #0
 801f1fe:	f040 80b9 	bne.w	801f374 <_dtoa_r+0x6fc>
 801f202:	9b02      	ldr	r3, [sp, #8]
 801f204:	429d      	cmp	r5, r3
 801f206:	f43f af75 	beq.w	801f0f4 <_dtoa_r+0x47c>
 801f20a:	4b2f      	ldr	r3, [pc, #188]	; (801f2c8 <_dtoa_r+0x650>)
 801f20c:	ec51 0b18 	vmov	r0, r1, d8
 801f210:	2200      	movs	r2, #0
 801f212:	f7e1 fa01 	bl	8000618 <__aeabi_dmul>
 801f216:	4b2c      	ldr	r3, [pc, #176]	; (801f2c8 <_dtoa_r+0x650>)
 801f218:	ec41 0b18 	vmov	d8, r0, r1
 801f21c:	2200      	movs	r2, #0
 801f21e:	4630      	mov	r0, r6
 801f220:	4639      	mov	r1, r7
 801f222:	f7e1 f9f9 	bl	8000618 <__aeabi_dmul>
 801f226:	4606      	mov	r6, r0
 801f228:	460f      	mov	r7, r1
 801f22a:	e7c4      	b.n	801f1b6 <_dtoa_r+0x53e>
 801f22c:	ec51 0b17 	vmov	r0, r1, d7
 801f230:	f7e1 f9f2 	bl	8000618 <__aeabi_dmul>
 801f234:	9b02      	ldr	r3, [sp, #8]
 801f236:	9d00      	ldr	r5, [sp, #0]
 801f238:	930c      	str	r3, [sp, #48]	; 0x30
 801f23a:	ec41 0b18 	vmov	d8, r0, r1
 801f23e:	4639      	mov	r1, r7
 801f240:	4630      	mov	r0, r6
 801f242:	f7e1 fc99 	bl	8000b78 <__aeabi_d2iz>
 801f246:	9011      	str	r0, [sp, #68]	; 0x44
 801f248:	f7e1 f97c 	bl	8000544 <__aeabi_i2d>
 801f24c:	4602      	mov	r2, r0
 801f24e:	460b      	mov	r3, r1
 801f250:	4630      	mov	r0, r6
 801f252:	4639      	mov	r1, r7
 801f254:	f7e1 f828 	bl	80002a8 <__aeabi_dsub>
 801f258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f25a:	3330      	adds	r3, #48	; 0x30
 801f25c:	f805 3b01 	strb.w	r3, [r5], #1
 801f260:	9b02      	ldr	r3, [sp, #8]
 801f262:	429d      	cmp	r5, r3
 801f264:	4606      	mov	r6, r0
 801f266:	460f      	mov	r7, r1
 801f268:	f04f 0200 	mov.w	r2, #0
 801f26c:	d134      	bne.n	801f2d8 <_dtoa_r+0x660>
 801f26e:	4b19      	ldr	r3, [pc, #100]	; (801f2d4 <_dtoa_r+0x65c>)
 801f270:	ec51 0b18 	vmov	r0, r1, d8
 801f274:	f7e1 f81a 	bl	80002ac <__adddf3>
 801f278:	4602      	mov	r2, r0
 801f27a:	460b      	mov	r3, r1
 801f27c:	4630      	mov	r0, r6
 801f27e:	4639      	mov	r1, r7
 801f280:	f7e1 fc5a 	bl	8000b38 <__aeabi_dcmpgt>
 801f284:	2800      	cmp	r0, #0
 801f286:	d175      	bne.n	801f374 <_dtoa_r+0x6fc>
 801f288:	ec53 2b18 	vmov	r2, r3, d8
 801f28c:	4911      	ldr	r1, [pc, #68]	; (801f2d4 <_dtoa_r+0x65c>)
 801f28e:	2000      	movs	r0, #0
 801f290:	f7e1 f80a 	bl	80002a8 <__aeabi_dsub>
 801f294:	4602      	mov	r2, r0
 801f296:	460b      	mov	r3, r1
 801f298:	4630      	mov	r0, r6
 801f29a:	4639      	mov	r1, r7
 801f29c:	f7e1 fc2e 	bl	8000afc <__aeabi_dcmplt>
 801f2a0:	2800      	cmp	r0, #0
 801f2a2:	f43f af27 	beq.w	801f0f4 <_dtoa_r+0x47c>
 801f2a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f2a8:	1e6b      	subs	r3, r5, #1
 801f2aa:	930c      	str	r3, [sp, #48]	; 0x30
 801f2ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f2b0:	2b30      	cmp	r3, #48	; 0x30
 801f2b2:	d0f8      	beq.n	801f2a6 <_dtoa_r+0x62e>
 801f2b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f2b8:	e04a      	b.n	801f350 <_dtoa_r+0x6d8>
 801f2ba:	bf00      	nop
 801f2bc:	08029aa0 	.word	0x08029aa0
 801f2c0:	08029a78 	.word	0x08029a78
 801f2c4:	3ff00000 	.word	0x3ff00000
 801f2c8:	40240000 	.word	0x40240000
 801f2cc:	401c0000 	.word	0x401c0000
 801f2d0:	40140000 	.word	0x40140000
 801f2d4:	3fe00000 	.word	0x3fe00000
 801f2d8:	4baf      	ldr	r3, [pc, #700]	; (801f598 <_dtoa_r+0x920>)
 801f2da:	f7e1 f99d 	bl	8000618 <__aeabi_dmul>
 801f2de:	4606      	mov	r6, r0
 801f2e0:	460f      	mov	r7, r1
 801f2e2:	e7ac      	b.n	801f23e <_dtoa_r+0x5c6>
 801f2e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f2e8:	9d00      	ldr	r5, [sp, #0]
 801f2ea:	4642      	mov	r2, r8
 801f2ec:	464b      	mov	r3, r9
 801f2ee:	4630      	mov	r0, r6
 801f2f0:	4639      	mov	r1, r7
 801f2f2:	f7e1 fabb 	bl	800086c <__aeabi_ddiv>
 801f2f6:	f7e1 fc3f 	bl	8000b78 <__aeabi_d2iz>
 801f2fa:	9002      	str	r0, [sp, #8]
 801f2fc:	f7e1 f922 	bl	8000544 <__aeabi_i2d>
 801f300:	4642      	mov	r2, r8
 801f302:	464b      	mov	r3, r9
 801f304:	f7e1 f988 	bl	8000618 <__aeabi_dmul>
 801f308:	4602      	mov	r2, r0
 801f30a:	460b      	mov	r3, r1
 801f30c:	4630      	mov	r0, r6
 801f30e:	4639      	mov	r1, r7
 801f310:	f7e0 ffca 	bl	80002a8 <__aeabi_dsub>
 801f314:	9e02      	ldr	r6, [sp, #8]
 801f316:	9f01      	ldr	r7, [sp, #4]
 801f318:	3630      	adds	r6, #48	; 0x30
 801f31a:	f805 6b01 	strb.w	r6, [r5], #1
 801f31e:	9e00      	ldr	r6, [sp, #0]
 801f320:	1bae      	subs	r6, r5, r6
 801f322:	42b7      	cmp	r7, r6
 801f324:	4602      	mov	r2, r0
 801f326:	460b      	mov	r3, r1
 801f328:	d137      	bne.n	801f39a <_dtoa_r+0x722>
 801f32a:	f7e0 ffbf 	bl	80002ac <__adddf3>
 801f32e:	4642      	mov	r2, r8
 801f330:	464b      	mov	r3, r9
 801f332:	4606      	mov	r6, r0
 801f334:	460f      	mov	r7, r1
 801f336:	f7e1 fbff 	bl	8000b38 <__aeabi_dcmpgt>
 801f33a:	b9c8      	cbnz	r0, 801f370 <_dtoa_r+0x6f8>
 801f33c:	4642      	mov	r2, r8
 801f33e:	464b      	mov	r3, r9
 801f340:	4630      	mov	r0, r6
 801f342:	4639      	mov	r1, r7
 801f344:	f7e1 fbd0 	bl	8000ae8 <__aeabi_dcmpeq>
 801f348:	b110      	cbz	r0, 801f350 <_dtoa_r+0x6d8>
 801f34a:	9b02      	ldr	r3, [sp, #8]
 801f34c:	07d9      	lsls	r1, r3, #31
 801f34e:	d40f      	bmi.n	801f370 <_dtoa_r+0x6f8>
 801f350:	4620      	mov	r0, r4
 801f352:	4659      	mov	r1, fp
 801f354:	f000 ff50 	bl	80201f8 <_Bfree>
 801f358:	2300      	movs	r3, #0
 801f35a:	702b      	strb	r3, [r5, #0]
 801f35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f35e:	f10a 0001 	add.w	r0, sl, #1
 801f362:	6018      	str	r0, [r3, #0]
 801f364:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f366:	2b00      	cmp	r3, #0
 801f368:	f43f acd8 	beq.w	801ed1c <_dtoa_r+0xa4>
 801f36c:	601d      	str	r5, [r3, #0]
 801f36e:	e4d5      	b.n	801ed1c <_dtoa_r+0xa4>
 801f370:	f8cd a01c 	str.w	sl, [sp, #28]
 801f374:	462b      	mov	r3, r5
 801f376:	461d      	mov	r5, r3
 801f378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f37c:	2a39      	cmp	r2, #57	; 0x39
 801f37e:	d108      	bne.n	801f392 <_dtoa_r+0x71a>
 801f380:	9a00      	ldr	r2, [sp, #0]
 801f382:	429a      	cmp	r2, r3
 801f384:	d1f7      	bne.n	801f376 <_dtoa_r+0x6fe>
 801f386:	9a07      	ldr	r2, [sp, #28]
 801f388:	9900      	ldr	r1, [sp, #0]
 801f38a:	3201      	adds	r2, #1
 801f38c:	9207      	str	r2, [sp, #28]
 801f38e:	2230      	movs	r2, #48	; 0x30
 801f390:	700a      	strb	r2, [r1, #0]
 801f392:	781a      	ldrb	r2, [r3, #0]
 801f394:	3201      	adds	r2, #1
 801f396:	701a      	strb	r2, [r3, #0]
 801f398:	e78c      	b.n	801f2b4 <_dtoa_r+0x63c>
 801f39a:	4b7f      	ldr	r3, [pc, #508]	; (801f598 <_dtoa_r+0x920>)
 801f39c:	2200      	movs	r2, #0
 801f39e:	f7e1 f93b 	bl	8000618 <__aeabi_dmul>
 801f3a2:	2200      	movs	r2, #0
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	4606      	mov	r6, r0
 801f3a8:	460f      	mov	r7, r1
 801f3aa:	f7e1 fb9d 	bl	8000ae8 <__aeabi_dcmpeq>
 801f3ae:	2800      	cmp	r0, #0
 801f3b0:	d09b      	beq.n	801f2ea <_dtoa_r+0x672>
 801f3b2:	e7cd      	b.n	801f350 <_dtoa_r+0x6d8>
 801f3b4:	9a08      	ldr	r2, [sp, #32]
 801f3b6:	2a00      	cmp	r2, #0
 801f3b8:	f000 80c4 	beq.w	801f544 <_dtoa_r+0x8cc>
 801f3bc:	9a05      	ldr	r2, [sp, #20]
 801f3be:	2a01      	cmp	r2, #1
 801f3c0:	f300 80a8 	bgt.w	801f514 <_dtoa_r+0x89c>
 801f3c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f3c6:	2a00      	cmp	r2, #0
 801f3c8:	f000 80a0 	beq.w	801f50c <_dtoa_r+0x894>
 801f3cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f3d0:	9e06      	ldr	r6, [sp, #24]
 801f3d2:	4645      	mov	r5, r8
 801f3d4:	9a04      	ldr	r2, [sp, #16]
 801f3d6:	2101      	movs	r1, #1
 801f3d8:	441a      	add	r2, r3
 801f3da:	4620      	mov	r0, r4
 801f3dc:	4498      	add	r8, r3
 801f3de:	9204      	str	r2, [sp, #16]
 801f3e0:	f001 f810 	bl	8020404 <__i2b>
 801f3e4:	4607      	mov	r7, r0
 801f3e6:	2d00      	cmp	r5, #0
 801f3e8:	dd0b      	ble.n	801f402 <_dtoa_r+0x78a>
 801f3ea:	9b04      	ldr	r3, [sp, #16]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	dd08      	ble.n	801f402 <_dtoa_r+0x78a>
 801f3f0:	42ab      	cmp	r3, r5
 801f3f2:	9a04      	ldr	r2, [sp, #16]
 801f3f4:	bfa8      	it	ge
 801f3f6:	462b      	movge	r3, r5
 801f3f8:	eba8 0803 	sub.w	r8, r8, r3
 801f3fc:	1aed      	subs	r5, r5, r3
 801f3fe:	1ad3      	subs	r3, r2, r3
 801f400:	9304      	str	r3, [sp, #16]
 801f402:	9b06      	ldr	r3, [sp, #24]
 801f404:	b1fb      	cbz	r3, 801f446 <_dtoa_r+0x7ce>
 801f406:	9b08      	ldr	r3, [sp, #32]
 801f408:	2b00      	cmp	r3, #0
 801f40a:	f000 809f 	beq.w	801f54c <_dtoa_r+0x8d4>
 801f40e:	2e00      	cmp	r6, #0
 801f410:	dd11      	ble.n	801f436 <_dtoa_r+0x7be>
 801f412:	4639      	mov	r1, r7
 801f414:	4632      	mov	r2, r6
 801f416:	4620      	mov	r0, r4
 801f418:	f001 f8b0 	bl	802057c <__pow5mult>
 801f41c:	465a      	mov	r2, fp
 801f41e:	4601      	mov	r1, r0
 801f420:	4607      	mov	r7, r0
 801f422:	4620      	mov	r0, r4
 801f424:	f001 f804 	bl	8020430 <__multiply>
 801f428:	4659      	mov	r1, fp
 801f42a:	9007      	str	r0, [sp, #28]
 801f42c:	4620      	mov	r0, r4
 801f42e:	f000 fee3 	bl	80201f8 <_Bfree>
 801f432:	9b07      	ldr	r3, [sp, #28]
 801f434:	469b      	mov	fp, r3
 801f436:	9b06      	ldr	r3, [sp, #24]
 801f438:	1b9a      	subs	r2, r3, r6
 801f43a:	d004      	beq.n	801f446 <_dtoa_r+0x7ce>
 801f43c:	4659      	mov	r1, fp
 801f43e:	4620      	mov	r0, r4
 801f440:	f001 f89c 	bl	802057c <__pow5mult>
 801f444:	4683      	mov	fp, r0
 801f446:	2101      	movs	r1, #1
 801f448:	4620      	mov	r0, r4
 801f44a:	f000 ffdb 	bl	8020404 <__i2b>
 801f44e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f450:	2b00      	cmp	r3, #0
 801f452:	4606      	mov	r6, r0
 801f454:	dd7c      	ble.n	801f550 <_dtoa_r+0x8d8>
 801f456:	461a      	mov	r2, r3
 801f458:	4601      	mov	r1, r0
 801f45a:	4620      	mov	r0, r4
 801f45c:	f001 f88e 	bl	802057c <__pow5mult>
 801f460:	9b05      	ldr	r3, [sp, #20]
 801f462:	2b01      	cmp	r3, #1
 801f464:	4606      	mov	r6, r0
 801f466:	dd76      	ble.n	801f556 <_dtoa_r+0x8de>
 801f468:	2300      	movs	r3, #0
 801f46a:	9306      	str	r3, [sp, #24]
 801f46c:	6933      	ldr	r3, [r6, #16]
 801f46e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f472:	6918      	ldr	r0, [r3, #16]
 801f474:	f000 ff76 	bl	8020364 <__hi0bits>
 801f478:	f1c0 0020 	rsb	r0, r0, #32
 801f47c:	9b04      	ldr	r3, [sp, #16]
 801f47e:	4418      	add	r0, r3
 801f480:	f010 001f 	ands.w	r0, r0, #31
 801f484:	f000 8086 	beq.w	801f594 <_dtoa_r+0x91c>
 801f488:	f1c0 0320 	rsb	r3, r0, #32
 801f48c:	2b04      	cmp	r3, #4
 801f48e:	dd7f      	ble.n	801f590 <_dtoa_r+0x918>
 801f490:	f1c0 001c 	rsb	r0, r0, #28
 801f494:	9b04      	ldr	r3, [sp, #16]
 801f496:	4403      	add	r3, r0
 801f498:	4480      	add	r8, r0
 801f49a:	4405      	add	r5, r0
 801f49c:	9304      	str	r3, [sp, #16]
 801f49e:	f1b8 0f00 	cmp.w	r8, #0
 801f4a2:	dd05      	ble.n	801f4b0 <_dtoa_r+0x838>
 801f4a4:	4659      	mov	r1, fp
 801f4a6:	4642      	mov	r2, r8
 801f4a8:	4620      	mov	r0, r4
 801f4aa:	f001 f8c1 	bl	8020630 <__lshift>
 801f4ae:	4683      	mov	fp, r0
 801f4b0:	9b04      	ldr	r3, [sp, #16]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	dd05      	ble.n	801f4c2 <_dtoa_r+0x84a>
 801f4b6:	4631      	mov	r1, r6
 801f4b8:	461a      	mov	r2, r3
 801f4ba:	4620      	mov	r0, r4
 801f4bc:	f001 f8b8 	bl	8020630 <__lshift>
 801f4c0:	4606      	mov	r6, r0
 801f4c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d069      	beq.n	801f59c <_dtoa_r+0x924>
 801f4c8:	4631      	mov	r1, r6
 801f4ca:	4658      	mov	r0, fp
 801f4cc:	f001 f91c 	bl	8020708 <__mcmp>
 801f4d0:	2800      	cmp	r0, #0
 801f4d2:	da63      	bge.n	801f59c <_dtoa_r+0x924>
 801f4d4:	2300      	movs	r3, #0
 801f4d6:	4659      	mov	r1, fp
 801f4d8:	220a      	movs	r2, #10
 801f4da:	4620      	mov	r0, r4
 801f4dc:	f000 feae 	bl	802023c <__multadd>
 801f4e0:	9b08      	ldr	r3, [sp, #32]
 801f4e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f4e6:	4683      	mov	fp, r0
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	f000 818f 	beq.w	801f80c <_dtoa_r+0xb94>
 801f4ee:	4639      	mov	r1, r7
 801f4f0:	2300      	movs	r3, #0
 801f4f2:	220a      	movs	r2, #10
 801f4f4:	4620      	mov	r0, r4
 801f4f6:	f000 fea1 	bl	802023c <__multadd>
 801f4fa:	f1b9 0f00 	cmp.w	r9, #0
 801f4fe:	4607      	mov	r7, r0
 801f500:	f300 808e 	bgt.w	801f620 <_dtoa_r+0x9a8>
 801f504:	9b05      	ldr	r3, [sp, #20]
 801f506:	2b02      	cmp	r3, #2
 801f508:	dc50      	bgt.n	801f5ac <_dtoa_r+0x934>
 801f50a:	e089      	b.n	801f620 <_dtoa_r+0x9a8>
 801f50c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f50e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f512:	e75d      	b.n	801f3d0 <_dtoa_r+0x758>
 801f514:	9b01      	ldr	r3, [sp, #4]
 801f516:	1e5e      	subs	r6, r3, #1
 801f518:	9b06      	ldr	r3, [sp, #24]
 801f51a:	42b3      	cmp	r3, r6
 801f51c:	bfbf      	itttt	lt
 801f51e:	9b06      	ldrlt	r3, [sp, #24]
 801f520:	9606      	strlt	r6, [sp, #24]
 801f522:	1af2      	sublt	r2, r6, r3
 801f524:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f526:	bfb6      	itet	lt
 801f528:	189b      	addlt	r3, r3, r2
 801f52a:	1b9e      	subge	r6, r3, r6
 801f52c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f52e:	9b01      	ldr	r3, [sp, #4]
 801f530:	bfb8      	it	lt
 801f532:	2600      	movlt	r6, #0
 801f534:	2b00      	cmp	r3, #0
 801f536:	bfb5      	itete	lt
 801f538:	eba8 0503 	sublt.w	r5, r8, r3
 801f53c:	9b01      	ldrge	r3, [sp, #4]
 801f53e:	2300      	movlt	r3, #0
 801f540:	4645      	movge	r5, r8
 801f542:	e747      	b.n	801f3d4 <_dtoa_r+0x75c>
 801f544:	9e06      	ldr	r6, [sp, #24]
 801f546:	9f08      	ldr	r7, [sp, #32]
 801f548:	4645      	mov	r5, r8
 801f54a:	e74c      	b.n	801f3e6 <_dtoa_r+0x76e>
 801f54c:	9a06      	ldr	r2, [sp, #24]
 801f54e:	e775      	b.n	801f43c <_dtoa_r+0x7c4>
 801f550:	9b05      	ldr	r3, [sp, #20]
 801f552:	2b01      	cmp	r3, #1
 801f554:	dc18      	bgt.n	801f588 <_dtoa_r+0x910>
 801f556:	9b02      	ldr	r3, [sp, #8]
 801f558:	b9b3      	cbnz	r3, 801f588 <_dtoa_r+0x910>
 801f55a:	9b03      	ldr	r3, [sp, #12]
 801f55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f560:	b9a3      	cbnz	r3, 801f58c <_dtoa_r+0x914>
 801f562:	9b03      	ldr	r3, [sp, #12]
 801f564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f568:	0d1b      	lsrs	r3, r3, #20
 801f56a:	051b      	lsls	r3, r3, #20
 801f56c:	b12b      	cbz	r3, 801f57a <_dtoa_r+0x902>
 801f56e:	9b04      	ldr	r3, [sp, #16]
 801f570:	3301      	adds	r3, #1
 801f572:	9304      	str	r3, [sp, #16]
 801f574:	f108 0801 	add.w	r8, r8, #1
 801f578:	2301      	movs	r3, #1
 801f57a:	9306      	str	r3, [sp, #24]
 801f57c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f57e:	2b00      	cmp	r3, #0
 801f580:	f47f af74 	bne.w	801f46c <_dtoa_r+0x7f4>
 801f584:	2001      	movs	r0, #1
 801f586:	e779      	b.n	801f47c <_dtoa_r+0x804>
 801f588:	2300      	movs	r3, #0
 801f58a:	e7f6      	b.n	801f57a <_dtoa_r+0x902>
 801f58c:	9b02      	ldr	r3, [sp, #8]
 801f58e:	e7f4      	b.n	801f57a <_dtoa_r+0x902>
 801f590:	d085      	beq.n	801f49e <_dtoa_r+0x826>
 801f592:	4618      	mov	r0, r3
 801f594:	301c      	adds	r0, #28
 801f596:	e77d      	b.n	801f494 <_dtoa_r+0x81c>
 801f598:	40240000 	.word	0x40240000
 801f59c:	9b01      	ldr	r3, [sp, #4]
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	dc38      	bgt.n	801f614 <_dtoa_r+0x99c>
 801f5a2:	9b05      	ldr	r3, [sp, #20]
 801f5a4:	2b02      	cmp	r3, #2
 801f5a6:	dd35      	ble.n	801f614 <_dtoa_r+0x99c>
 801f5a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f5ac:	f1b9 0f00 	cmp.w	r9, #0
 801f5b0:	d10d      	bne.n	801f5ce <_dtoa_r+0x956>
 801f5b2:	4631      	mov	r1, r6
 801f5b4:	464b      	mov	r3, r9
 801f5b6:	2205      	movs	r2, #5
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f000 fe3f 	bl	802023c <__multadd>
 801f5be:	4601      	mov	r1, r0
 801f5c0:	4606      	mov	r6, r0
 801f5c2:	4658      	mov	r0, fp
 801f5c4:	f001 f8a0 	bl	8020708 <__mcmp>
 801f5c8:	2800      	cmp	r0, #0
 801f5ca:	f73f adbd 	bgt.w	801f148 <_dtoa_r+0x4d0>
 801f5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5d0:	9d00      	ldr	r5, [sp, #0]
 801f5d2:	ea6f 0a03 	mvn.w	sl, r3
 801f5d6:	f04f 0800 	mov.w	r8, #0
 801f5da:	4631      	mov	r1, r6
 801f5dc:	4620      	mov	r0, r4
 801f5de:	f000 fe0b 	bl	80201f8 <_Bfree>
 801f5e2:	2f00      	cmp	r7, #0
 801f5e4:	f43f aeb4 	beq.w	801f350 <_dtoa_r+0x6d8>
 801f5e8:	f1b8 0f00 	cmp.w	r8, #0
 801f5ec:	d005      	beq.n	801f5fa <_dtoa_r+0x982>
 801f5ee:	45b8      	cmp	r8, r7
 801f5f0:	d003      	beq.n	801f5fa <_dtoa_r+0x982>
 801f5f2:	4641      	mov	r1, r8
 801f5f4:	4620      	mov	r0, r4
 801f5f6:	f000 fdff 	bl	80201f8 <_Bfree>
 801f5fa:	4639      	mov	r1, r7
 801f5fc:	4620      	mov	r0, r4
 801f5fe:	f000 fdfb 	bl	80201f8 <_Bfree>
 801f602:	e6a5      	b.n	801f350 <_dtoa_r+0x6d8>
 801f604:	2600      	movs	r6, #0
 801f606:	4637      	mov	r7, r6
 801f608:	e7e1      	b.n	801f5ce <_dtoa_r+0x956>
 801f60a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f60c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f610:	4637      	mov	r7, r6
 801f612:	e599      	b.n	801f148 <_dtoa_r+0x4d0>
 801f614:	9b08      	ldr	r3, [sp, #32]
 801f616:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	f000 80fd 	beq.w	801f81a <_dtoa_r+0xba2>
 801f620:	2d00      	cmp	r5, #0
 801f622:	dd05      	ble.n	801f630 <_dtoa_r+0x9b8>
 801f624:	4639      	mov	r1, r7
 801f626:	462a      	mov	r2, r5
 801f628:	4620      	mov	r0, r4
 801f62a:	f001 f801 	bl	8020630 <__lshift>
 801f62e:	4607      	mov	r7, r0
 801f630:	9b06      	ldr	r3, [sp, #24]
 801f632:	2b00      	cmp	r3, #0
 801f634:	d05c      	beq.n	801f6f0 <_dtoa_r+0xa78>
 801f636:	6879      	ldr	r1, [r7, #4]
 801f638:	4620      	mov	r0, r4
 801f63a:	f000 fd9d 	bl	8020178 <_Balloc>
 801f63e:	4605      	mov	r5, r0
 801f640:	b928      	cbnz	r0, 801f64e <_dtoa_r+0x9d6>
 801f642:	4b80      	ldr	r3, [pc, #512]	; (801f844 <_dtoa_r+0xbcc>)
 801f644:	4602      	mov	r2, r0
 801f646:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f64a:	f7ff bb2e 	b.w	801ecaa <_dtoa_r+0x32>
 801f64e:	693a      	ldr	r2, [r7, #16]
 801f650:	3202      	adds	r2, #2
 801f652:	0092      	lsls	r2, r2, #2
 801f654:	f107 010c 	add.w	r1, r7, #12
 801f658:	300c      	adds	r0, #12
 801f65a:	f000 fd7f 	bl	802015c <memcpy>
 801f65e:	2201      	movs	r2, #1
 801f660:	4629      	mov	r1, r5
 801f662:	4620      	mov	r0, r4
 801f664:	f000 ffe4 	bl	8020630 <__lshift>
 801f668:	9b00      	ldr	r3, [sp, #0]
 801f66a:	3301      	adds	r3, #1
 801f66c:	9301      	str	r3, [sp, #4]
 801f66e:	9b00      	ldr	r3, [sp, #0]
 801f670:	444b      	add	r3, r9
 801f672:	9307      	str	r3, [sp, #28]
 801f674:	9b02      	ldr	r3, [sp, #8]
 801f676:	f003 0301 	and.w	r3, r3, #1
 801f67a:	46b8      	mov	r8, r7
 801f67c:	9306      	str	r3, [sp, #24]
 801f67e:	4607      	mov	r7, r0
 801f680:	9b01      	ldr	r3, [sp, #4]
 801f682:	4631      	mov	r1, r6
 801f684:	3b01      	subs	r3, #1
 801f686:	4658      	mov	r0, fp
 801f688:	9302      	str	r3, [sp, #8]
 801f68a:	f7ff fa67 	bl	801eb5c <quorem>
 801f68e:	4603      	mov	r3, r0
 801f690:	3330      	adds	r3, #48	; 0x30
 801f692:	9004      	str	r0, [sp, #16]
 801f694:	4641      	mov	r1, r8
 801f696:	4658      	mov	r0, fp
 801f698:	9308      	str	r3, [sp, #32]
 801f69a:	f001 f835 	bl	8020708 <__mcmp>
 801f69e:	463a      	mov	r2, r7
 801f6a0:	4681      	mov	r9, r0
 801f6a2:	4631      	mov	r1, r6
 801f6a4:	4620      	mov	r0, r4
 801f6a6:	f001 f84b 	bl	8020740 <__mdiff>
 801f6aa:	68c2      	ldr	r2, [r0, #12]
 801f6ac:	9b08      	ldr	r3, [sp, #32]
 801f6ae:	4605      	mov	r5, r0
 801f6b0:	bb02      	cbnz	r2, 801f6f4 <_dtoa_r+0xa7c>
 801f6b2:	4601      	mov	r1, r0
 801f6b4:	4658      	mov	r0, fp
 801f6b6:	f001 f827 	bl	8020708 <__mcmp>
 801f6ba:	9b08      	ldr	r3, [sp, #32]
 801f6bc:	4602      	mov	r2, r0
 801f6be:	4629      	mov	r1, r5
 801f6c0:	4620      	mov	r0, r4
 801f6c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f6c6:	f000 fd97 	bl	80201f8 <_Bfree>
 801f6ca:	9b05      	ldr	r3, [sp, #20]
 801f6cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6ce:	9d01      	ldr	r5, [sp, #4]
 801f6d0:	ea43 0102 	orr.w	r1, r3, r2
 801f6d4:	9b06      	ldr	r3, [sp, #24]
 801f6d6:	430b      	orrs	r3, r1
 801f6d8:	9b08      	ldr	r3, [sp, #32]
 801f6da:	d10d      	bne.n	801f6f8 <_dtoa_r+0xa80>
 801f6dc:	2b39      	cmp	r3, #57	; 0x39
 801f6de:	d029      	beq.n	801f734 <_dtoa_r+0xabc>
 801f6e0:	f1b9 0f00 	cmp.w	r9, #0
 801f6e4:	dd01      	ble.n	801f6ea <_dtoa_r+0xa72>
 801f6e6:	9b04      	ldr	r3, [sp, #16]
 801f6e8:	3331      	adds	r3, #49	; 0x31
 801f6ea:	9a02      	ldr	r2, [sp, #8]
 801f6ec:	7013      	strb	r3, [r2, #0]
 801f6ee:	e774      	b.n	801f5da <_dtoa_r+0x962>
 801f6f0:	4638      	mov	r0, r7
 801f6f2:	e7b9      	b.n	801f668 <_dtoa_r+0x9f0>
 801f6f4:	2201      	movs	r2, #1
 801f6f6:	e7e2      	b.n	801f6be <_dtoa_r+0xa46>
 801f6f8:	f1b9 0f00 	cmp.w	r9, #0
 801f6fc:	db06      	blt.n	801f70c <_dtoa_r+0xa94>
 801f6fe:	9905      	ldr	r1, [sp, #20]
 801f700:	ea41 0909 	orr.w	r9, r1, r9
 801f704:	9906      	ldr	r1, [sp, #24]
 801f706:	ea59 0101 	orrs.w	r1, r9, r1
 801f70a:	d120      	bne.n	801f74e <_dtoa_r+0xad6>
 801f70c:	2a00      	cmp	r2, #0
 801f70e:	ddec      	ble.n	801f6ea <_dtoa_r+0xa72>
 801f710:	4659      	mov	r1, fp
 801f712:	2201      	movs	r2, #1
 801f714:	4620      	mov	r0, r4
 801f716:	9301      	str	r3, [sp, #4]
 801f718:	f000 ff8a 	bl	8020630 <__lshift>
 801f71c:	4631      	mov	r1, r6
 801f71e:	4683      	mov	fp, r0
 801f720:	f000 fff2 	bl	8020708 <__mcmp>
 801f724:	2800      	cmp	r0, #0
 801f726:	9b01      	ldr	r3, [sp, #4]
 801f728:	dc02      	bgt.n	801f730 <_dtoa_r+0xab8>
 801f72a:	d1de      	bne.n	801f6ea <_dtoa_r+0xa72>
 801f72c:	07da      	lsls	r2, r3, #31
 801f72e:	d5dc      	bpl.n	801f6ea <_dtoa_r+0xa72>
 801f730:	2b39      	cmp	r3, #57	; 0x39
 801f732:	d1d8      	bne.n	801f6e6 <_dtoa_r+0xa6e>
 801f734:	9a02      	ldr	r2, [sp, #8]
 801f736:	2339      	movs	r3, #57	; 0x39
 801f738:	7013      	strb	r3, [r2, #0]
 801f73a:	462b      	mov	r3, r5
 801f73c:	461d      	mov	r5, r3
 801f73e:	3b01      	subs	r3, #1
 801f740:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f744:	2a39      	cmp	r2, #57	; 0x39
 801f746:	d050      	beq.n	801f7ea <_dtoa_r+0xb72>
 801f748:	3201      	adds	r2, #1
 801f74a:	701a      	strb	r2, [r3, #0]
 801f74c:	e745      	b.n	801f5da <_dtoa_r+0x962>
 801f74e:	2a00      	cmp	r2, #0
 801f750:	dd03      	ble.n	801f75a <_dtoa_r+0xae2>
 801f752:	2b39      	cmp	r3, #57	; 0x39
 801f754:	d0ee      	beq.n	801f734 <_dtoa_r+0xabc>
 801f756:	3301      	adds	r3, #1
 801f758:	e7c7      	b.n	801f6ea <_dtoa_r+0xa72>
 801f75a:	9a01      	ldr	r2, [sp, #4]
 801f75c:	9907      	ldr	r1, [sp, #28]
 801f75e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f762:	428a      	cmp	r2, r1
 801f764:	d02a      	beq.n	801f7bc <_dtoa_r+0xb44>
 801f766:	4659      	mov	r1, fp
 801f768:	2300      	movs	r3, #0
 801f76a:	220a      	movs	r2, #10
 801f76c:	4620      	mov	r0, r4
 801f76e:	f000 fd65 	bl	802023c <__multadd>
 801f772:	45b8      	cmp	r8, r7
 801f774:	4683      	mov	fp, r0
 801f776:	f04f 0300 	mov.w	r3, #0
 801f77a:	f04f 020a 	mov.w	r2, #10
 801f77e:	4641      	mov	r1, r8
 801f780:	4620      	mov	r0, r4
 801f782:	d107      	bne.n	801f794 <_dtoa_r+0xb1c>
 801f784:	f000 fd5a 	bl	802023c <__multadd>
 801f788:	4680      	mov	r8, r0
 801f78a:	4607      	mov	r7, r0
 801f78c:	9b01      	ldr	r3, [sp, #4]
 801f78e:	3301      	adds	r3, #1
 801f790:	9301      	str	r3, [sp, #4]
 801f792:	e775      	b.n	801f680 <_dtoa_r+0xa08>
 801f794:	f000 fd52 	bl	802023c <__multadd>
 801f798:	4639      	mov	r1, r7
 801f79a:	4680      	mov	r8, r0
 801f79c:	2300      	movs	r3, #0
 801f79e:	220a      	movs	r2, #10
 801f7a0:	4620      	mov	r0, r4
 801f7a2:	f000 fd4b 	bl	802023c <__multadd>
 801f7a6:	4607      	mov	r7, r0
 801f7a8:	e7f0      	b.n	801f78c <_dtoa_r+0xb14>
 801f7aa:	f1b9 0f00 	cmp.w	r9, #0
 801f7ae:	9a00      	ldr	r2, [sp, #0]
 801f7b0:	bfcc      	ite	gt
 801f7b2:	464d      	movgt	r5, r9
 801f7b4:	2501      	movle	r5, #1
 801f7b6:	4415      	add	r5, r2
 801f7b8:	f04f 0800 	mov.w	r8, #0
 801f7bc:	4659      	mov	r1, fp
 801f7be:	2201      	movs	r2, #1
 801f7c0:	4620      	mov	r0, r4
 801f7c2:	9301      	str	r3, [sp, #4]
 801f7c4:	f000 ff34 	bl	8020630 <__lshift>
 801f7c8:	4631      	mov	r1, r6
 801f7ca:	4683      	mov	fp, r0
 801f7cc:	f000 ff9c 	bl	8020708 <__mcmp>
 801f7d0:	2800      	cmp	r0, #0
 801f7d2:	dcb2      	bgt.n	801f73a <_dtoa_r+0xac2>
 801f7d4:	d102      	bne.n	801f7dc <_dtoa_r+0xb64>
 801f7d6:	9b01      	ldr	r3, [sp, #4]
 801f7d8:	07db      	lsls	r3, r3, #31
 801f7da:	d4ae      	bmi.n	801f73a <_dtoa_r+0xac2>
 801f7dc:	462b      	mov	r3, r5
 801f7de:	461d      	mov	r5, r3
 801f7e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f7e4:	2a30      	cmp	r2, #48	; 0x30
 801f7e6:	d0fa      	beq.n	801f7de <_dtoa_r+0xb66>
 801f7e8:	e6f7      	b.n	801f5da <_dtoa_r+0x962>
 801f7ea:	9a00      	ldr	r2, [sp, #0]
 801f7ec:	429a      	cmp	r2, r3
 801f7ee:	d1a5      	bne.n	801f73c <_dtoa_r+0xac4>
 801f7f0:	f10a 0a01 	add.w	sl, sl, #1
 801f7f4:	2331      	movs	r3, #49	; 0x31
 801f7f6:	e779      	b.n	801f6ec <_dtoa_r+0xa74>
 801f7f8:	4b13      	ldr	r3, [pc, #76]	; (801f848 <_dtoa_r+0xbd0>)
 801f7fa:	f7ff baaf 	b.w	801ed5c <_dtoa_r+0xe4>
 801f7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f800:	2b00      	cmp	r3, #0
 801f802:	f47f aa86 	bne.w	801ed12 <_dtoa_r+0x9a>
 801f806:	4b11      	ldr	r3, [pc, #68]	; (801f84c <_dtoa_r+0xbd4>)
 801f808:	f7ff baa8 	b.w	801ed5c <_dtoa_r+0xe4>
 801f80c:	f1b9 0f00 	cmp.w	r9, #0
 801f810:	dc03      	bgt.n	801f81a <_dtoa_r+0xba2>
 801f812:	9b05      	ldr	r3, [sp, #20]
 801f814:	2b02      	cmp	r3, #2
 801f816:	f73f aec9 	bgt.w	801f5ac <_dtoa_r+0x934>
 801f81a:	9d00      	ldr	r5, [sp, #0]
 801f81c:	4631      	mov	r1, r6
 801f81e:	4658      	mov	r0, fp
 801f820:	f7ff f99c 	bl	801eb5c <quorem>
 801f824:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f828:	f805 3b01 	strb.w	r3, [r5], #1
 801f82c:	9a00      	ldr	r2, [sp, #0]
 801f82e:	1aaa      	subs	r2, r5, r2
 801f830:	4591      	cmp	r9, r2
 801f832:	ddba      	ble.n	801f7aa <_dtoa_r+0xb32>
 801f834:	4659      	mov	r1, fp
 801f836:	2300      	movs	r3, #0
 801f838:	220a      	movs	r2, #10
 801f83a:	4620      	mov	r0, r4
 801f83c:	f000 fcfe 	bl	802023c <__multadd>
 801f840:	4683      	mov	fp, r0
 801f842:	e7eb      	b.n	801f81c <_dtoa_r+0xba4>
 801f844:	08029924 	.word	0x08029924
 801f848:	08029724 	.word	0x08029724
 801f84c:	080298a1 	.word	0x080298a1

0801f850 <std>:
 801f850:	2300      	movs	r3, #0
 801f852:	b510      	push	{r4, lr}
 801f854:	4604      	mov	r4, r0
 801f856:	e9c0 3300 	strd	r3, r3, [r0]
 801f85a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f85e:	6083      	str	r3, [r0, #8]
 801f860:	8181      	strh	r1, [r0, #12]
 801f862:	6643      	str	r3, [r0, #100]	; 0x64
 801f864:	81c2      	strh	r2, [r0, #14]
 801f866:	6183      	str	r3, [r0, #24]
 801f868:	4619      	mov	r1, r3
 801f86a:	2208      	movs	r2, #8
 801f86c:	305c      	adds	r0, #92	; 0x5c
 801f86e:	f7fd fc07 	bl	801d080 <memset>
 801f872:	4b05      	ldr	r3, [pc, #20]	; (801f888 <std+0x38>)
 801f874:	6263      	str	r3, [r4, #36]	; 0x24
 801f876:	4b05      	ldr	r3, [pc, #20]	; (801f88c <std+0x3c>)
 801f878:	62a3      	str	r3, [r4, #40]	; 0x28
 801f87a:	4b05      	ldr	r3, [pc, #20]	; (801f890 <std+0x40>)
 801f87c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f87e:	4b05      	ldr	r3, [pc, #20]	; (801f894 <std+0x44>)
 801f880:	6224      	str	r4, [r4, #32]
 801f882:	6323      	str	r3, [r4, #48]	; 0x30
 801f884:	bd10      	pop	{r4, pc}
 801f886:	bf00      	nop
 801f888:	08020f49 	.word	0x08020f49
 801f88c:	08020f6b 	.word	0x08020f6b
 801f890:	08020fa3 	.word	0x08020fa3
 801f894:	08020fc7 	.word	0x08020fc7

0801f898 <_cleanup_r>:
 801f898:	4901      	ldr	r1, [pc, #4]	; (801f8a0 <_cleanup_r+0x8>)
 801f89a:	f000 b8af 	b.w	801f9fc <_fwalk_reent>
 801f89e:	bf00      	nop
 801f8a0:	0802131d 	.word	0x0802131d

0801f8a4 <__sfmoreglue>:
 801f8a4:	b570      	push	{r4, r5, r6, lr}
 801f8a6:	1e4a      	subs	r2, r1, #1
 801f8a8:	2568      	movs	r5, #104	; 0x68
 801f8aa:	4355      	muls	r5, r2
 801f8ac:	460e      	mov	r6, r1
 801f8ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f8b2:	f001 f97b 	bl	8020bac <_malloc_r>
 801f8b6:	4604      	mov	r4, r0
 801f8b8:	b140      	cbz	r0, 801f8cc <__sfmoreglue+0x28>
 801f8ba:	2100      	movs	r1, #0
 801f8bc:	e9c0 1600 	strd	r1, r6, [r0]
 801f8c0:	300c      	adds	r0, #12
 801f8c2:	60a0      	str	r0, [r4, #8]
 801f8c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f8c8:	f7fd fbda 	bl	801d080 <memset>
 801f8cc:	4620      	mov	r0, r4
 801f8ce:	bd70      	pop	{r4, r5, r6, pc}

0801f8d0 <__sfp_lock_acquire>:
 801f8d0:	4801      	ldr	r0, [pc, #4]	; (801f8d8 <__sfp_lock_acquire+0x8>)
 801f8d2:	f000 bc26 	b.w	8020122 <__retarget_lock_acquire_recursive>
 801f8d6:	bf00      	nop
 801f8d8:	2000a044 	.word	0x2000a044

0801f8dc <__sfp_lock_release>:
 801f8dc:	4801      	ldr	r0, [pc, #4]	; (801f8e4 <__sfp_lock_release+0x8>)
 801f8de:	f000 bc21 	b.w	8020124 <__retarget_lock_release_recursive>
 801f8e2:	bf00      	nop
 801f8e4:	2000a044 	.word	0x2000a044

0801f8e8 <__sinit_lock_acquire>:
 801f8e8:	4801      	ldr	r0, [pc, #4]	; (801f8f0 <__sinit_lock_acquire+0x8>)
 801f8ea:	f000 bc1a 	b.w	8020122 <__retarget_lock_acquire_recursive>
 801f8ee:	bf00      	nop
 801f8f0:	2000a043 	.word	0x2000a043

0801f8f4 <__sinit_lock_release>:
 801f8f4:	4801      	ldr	r0, [pc, #4]	; (801f8fc <__sinit_lock_release+0x8>)
 801f8f6:	f000 bc15 	b.w	8020124 <__retarget_lock_release_recursive>
 801f8fa:	bf00      	nop
 801f8fc:	2000a043 	.word	0x2000a043

0801f900 <__sinit>:
 801f900:	b510      	push	{r4, lr}
 801f902:	4604      	mov	r4, r0
 801f904:	f7ff fff0 	bl	801f8e8 <__sinit_lock_acquire>
 801f908:	69a3      	ldr	r3, [r4, #24]
 801f90a:	b11b      	cbz	r3, 801f914 <__sinit+0x14>
 801f90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f910:	f7ff bff0 	b.w	801f8f4 <__sinit_lock_release>
 801f914:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f918:	6523      	str	r3, [r4, #80]	; 0x50
 801f91a:	4b13      	ldr	r3, [pc, #76]	; (801f968 <__sinit+0x68>)
 801f91c:	4a13      	ldr	r2, [pc, #76]	; (801f96c <__sinit+0x6c>)
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	62a2      	str	r2, [r4, #40]	; 0x28
 801f922:	42a3      	cmp	r3, r4
 801f924:	bf04      	itt	eq
 801f926:	2301      	moveq	r3, #1
 801f928:	61a3      	streq	r3, [r4, #24]
 801f92a:	4620      	mov	r0, r4
 801f92c:	f000 f820 	bl	801f970 <__sfp>
 801f930:	6060      	str	r0, [r4, #4]
 801f932:	4620      	mov	r0, r4
 801f934:	f000 f81c 	bl	801f970 <__sfp>
 801f938:	60a0      	str	r0, [r4, #8]
 801f93a:	4620      	mov	r0, r4
 801f93c:	f000 f818 	bl	801f970 <__sfp>
 801f940:	2200      	movs	r2, #0
 801f942:	60e0      	str	r0, [r4, #12]
 801f944:	2104      	movs	r1, #4
 801f946:	6860      	ldr	r0, [r4, #4]
 801f948:	f7ff ff82 	bl	801f850 <std>
 801f94c:	68a0      	ldr	r0, [r4, #8]
 801f94e:	2201      	movs	r2, #1
 801f950:	2109      	movs	r1, #9
 801f952:	f7ff ff7d 	bl	801f850 <std>
 801f956:	68e0      	ldr	r0, [r4, #12]
 801f958:	2202      	movs	r2, #2
 801f95a:	2112      	movs	r1, #18
 801f95c:	f7ff ff78 	bl	801f850 <std>
 801f960:	2301      	movs	r3, #1
 801f962:	61a3      	str	r3, [r4, #24]
 801f964:	e7d2      	b.n	801f90c <__sinit+0xc>
 801f966:	bf00      	nop
 801f968:	08029710 	.word	0x08029710
 801f96c:	0801f899 	.word	0x0801f899

0801f970 <__sfp>:
 801f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f972:	4607      	mov	r7, r0
 801f974:	f7ff ffac 	bl	801f8d0 <__sfp_lock_acquire>
 801f978:	4b1e      	ldr	r3, [pc, #120]	; (801f9f4 <__sfp+0x84>)
 801f97a:	681e      	ldr	r6, [r3, #0]
 801f97c:	69b3      	ldr	r3, [r6, #24]
 801f97e:	b913      	cbnz	r3, 801f986 <__sfp+0x16>
 801f980:	4630      	mov	r0, r6
 801f982:	f7ff ffbd 	bl	801f900 <__sinit>
 801f986:	3648      	adds	r6, #72	; 0x48
 801f988:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f98c:	3b01      	subs	r3, #1
 801f98e:	d503      	bpl.n	801f998 <__sfp+0x28>
 801f990:	6833      	ldr	r3, [r6, #0]
 801f992:	b30b      	cbz	r3, 801f9d8 <__sfp+0x68>
 801f994:	6836      	ldr	r6, [r6, #0]
 801f996:	e7f7      	b.n	801f988 <__sfp+0x18>
 801f998:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f99c:	b9d5      	cbnz	r5, 801f9d4 <__sfp+0x64>
 801f99e:	4b16      	ldr	r3, [pc, #88]	; (801f9f8 <__sfp+0x88>)
 801f9a0:	60e3      	str	r3, [r4, #12]
 801f9a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f9a6:	6665      	str	r5, [r4, #100]	; 0x64
 801f9a8:	f000 fbba 	bl	8020120 <__retarget_lock_init_recursive>
 801f9ac:	f7ff ff96 	bl	801f8dc <__sfp_lock_release>
 801f9b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f9b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f9b8:	6025      	str	r5, [r4, #0]
 801f9ba:	61a5      	str	r5, [r4, #24]
 801f9bc:	2208      	movs	r2, #8
 801f9be:	4629      	mov	r1, r5
 801f9c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f9c4:	f7fd fb5c 	bl	801d080 <memset>
 801f9c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f9cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f9d4:	3468      	adds	r4, #104	; 0x68
 801f9d6:	e7d9      	b.n	801f98c <__sfp+0x1c>
 801f9d8:	2104      	movs	r1, #4
 801f9da:	4638      	mov	r0, r7
 801f9dc:	f7ff ff62 	bl	801f8a4 <__sfmoreglue>
 801f9e0:	4604      	mov	r4, r0
 801f9e2:	6030      	str	r0, [r6, #0]
 801f9e4:	2800      	cmp	r0, #0
 801f9e6:	d1d5      	bne.n	801f994 <__sfp+0x24>
 801f9e8:	f7ff ff78 	bl	801f8dc <__sfp_lock_release>
 801f9ec:	230c      	movs	r3, #12
 801f9ee:	603b      	str	r3, [r7, #0]
 801f9f0:	e7ee      	b.n	801f9d0 <__sfp+0x60>
 801f9f2:	bf00      	nop
 801f9f4:	08029710 	.word	0x08029710
 801f9f8:	ffff0001 	.word	0xffff0001

0801f9fc <_fwalk_reent>:
 801f9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa00:	4606      	mov	r6, r0
 801fa02:	4688      	mov	r8, r1
 801fa04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fa08:	2700      	movs	r7, #0
 801fa0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fa0e:	f1b9 0901 	subs.w	r9, r9, #1
 801fa12:	d505      	bpl.n	801fa20 <_fwalk_reent+0x24>
 801fa14:	6824      	ldr	r4, [r4, #0]
 801fa16:	2c00      	cmp	r4, #0
 801fa18:	d1f7      	bne.n	801fa0a <_fwalk_reent+0xe>
 801fa1a:	4638      	mov	r0, r7
 801fa1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fa20:	89ab      	ldrh	r3, [r5, #12]
 801fa22:	2b01      	cmp	r3, #1
 801fa24:	d907      	bls.n	801fa36 <_fwalk_reent+0x3a>
 801fa26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fa2a:	3301      	adds	r3, #1
 801fa2c:	d003      	beq.n	801fa36 <_fwalk_reent+0x3a>
 801fa2e:	4629      	mov	r1, r5
 801fa30:	4630      	mov	r0, r6
 801fa32:	47c0      	blx	r8
 801fa34:	4307      	orrs	r7, r0
 801fa36:	3568      	adds	r5, #104	; 0x68
 801fa38:	e7e9      	b.n	801fa0e <_fwalk_reent+0x12>

0801fa3a <rshift>:
 801fa3a:	6903      	ldr	r3, [r0, #16]
 801fa3c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801fa40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fa44:	ea4f 1261 	mov.w	r2, r1, asr #5
 801fa48:	f100 0414 	add.w	r4, r0, #20
 801fa4c:	dd45      	ble.n	801fada <rshift+0xa0>
 801fa4e:	f011 011f 	ands.w	r1, r1, #31
 801fa52:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801fa56:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fa5a:	d10c      	bne.n	801fa76 <rshift+0x3c>
 801fa5c:	f100 0710 	add.w	r7, r0, #16
 801fa60:	4629      	mov	r1, r5
 801fa62:	42b1      	cmp	r1, r6
 801fa64:	d334      	bcc.n	801fad0 <rshift+0x96>
 801fa66:	1a9b      	subs	r3, r3, r2
 801fa68:	009b      	lsls	r3, r3, #2
 801fa6a:	1eea      	subs	r2, r5, #3
 801fa6c:	4296      	cmp	r6, r2
 801fa6e:	bf38      	it	cc
 801fa70:	2300      	movcc	r3, #0
 801fa72:	4423      	add	r3, r4
 801fa74:	e015      	b.n	801faa2 <rshift+0x68>
 801fa76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801fa7a:	f1c1 0820 	rsb	r8, r1, #32
 801fa7e:	40cf      	lsrs	r7, r1
 801fa80:	f105 0e04 	add.w	lr, r5, #4
 801fa84:	46a1      	mov	r9, r4
 801fa86:	4576      	cmp	r6, lr
 801fa88:	46f4      	mov	ip, lr
 801fa8a:	d815      	bhi.n	801fab8 <rshift+0x7e>
 801fa8c:	1a9b      	subs	r3, r3, r2
 801fa8e:	009a      	lsls	r2, r3, #2
 801fa90:	3a04      	subs	r2, #4
 801fa92:	3501      	adds	r5, #1
 801fa94:	42ae      	cmp	r6, r5
 801fa96:	bf38      	it	cc
 801fa98:	2200      	movcc	r2, #0
 801fa9a:	18a3      	adds	r3, r4, r2
 801fa9c:	50a7      	str	r7, [r4, r2]
 801fa9e:	b107      	cbz	r7, 801faa2 <rshift+0x68>
 801faa0:	3304      	adds	r3, #4
 801faa2:	1b1a      	subs	r2, r3, r4
 801faa4:	42a3      	cmp	r3, r4
 801faa6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801faaa:	bf08      	it	eq
 801faac:	2300      	moveq	r3, #0
 801faae:	6102      	str	r2, [r0, #16]
 801fab0:	bf08      	it	eq
 801fab2:	6143      	streq	r3, [r0, #20]
 801fab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fab8:	f8dc c000 	ldr.w	ip, [ip]
 801fabc:	fa0c fc08 	lsl.w	ip, ip, r8
 801fac0:	ea4c 0707 	orr.w	r7, ip, r7
 801fac4:	f849 7b04 	str.w	r7, [r9], #4
 801fac8:	f85e 7b04 	ldr.w	r7, [lr], #4
 801facc:	40cf      	lsrs	r7, r1
 801face:	e7da      	b.n	801fa86 <rshift+0x4c>
 801fad0:	f851 cb04 	ldr.w	ip, [r1], #4
 801fad4:	f847 cf04 	str.w	ip, [r7, #4]!
 801fad8:	e7c3      	b.n	801fa62 <rshift+0x28>
 801fada:	4623      	mov	r3, r4
 801fadc:	e7e1      	b.n	801faa2 <rshift+0x68>

0801fade <__hexdig_fun>:
 801fade:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fae2:	2b09      	cmp	r3, #9
 801fae4:	d802      	bhi.n	801faec <__hexdig_fun+0xe>
 801fae6:	3820      	subs	r0, #32
 801fae8:	b2c0      	uxtb	r0, r0
 801faea:	4770      	bx	lr
 801faec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801faf0:	2b05      	cmp	r3, #5
 801faf2:	d801      	bhi.n	801faf8 <__hexdig_fun+0x1a>
 801faf4:	3847      	subs	r0, #71	; 0x47
 801faf6:	e7f7      	b.n	801fae8 <__hexdig_fun+0xa>
 801faf8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801fafc:	2b05      	cmp	r3, #5
 801fafe:	d801      	bhi.n	801fb04 <__hexdig_fun+0x26>
 801fb00:	3827      	subs	r0, #39	; 0x27
 801fb02:	e7f1      	b.n	801fae8 <__hexdig_fun+0xa>
 801fb04:	2000      	movs	r0, #0
 801fb06:	4770      	bx	lr

0801fb08 <__gethex>:
 801fb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb0c:	ed2d 8b02 	vpush	{d8}
 801fb10:	b089      	sub	sp, #36	; 0x24
 801fb12:	ee08 0a10 	vmov	s16, r0
 801fb16:	9304      	str	r3, [sp, #16]
 801fb18:	4bbc      	ldr	r3, [pc, #752]	; (801fe0c <__gethex+0x304>)
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	9301      	str	r3, [sp, #4]
 801fb1e:	4618      	mov	r0, r3
 801fb20:	468b      	mov	fp, r1
 801fb22:	4690      	mov	r8, r2
 801fb24:	f7e0 fb64 	bl	80001f0 <strlen>
 801fb28:	9b01      	ldr	r3, [sp, #4]
 801fb2a:	f8db 2000 	ldr.w	r2, [fp]
 801fb2e:	4403      	add	r3, r0
 801fb30:	4682      	mov	sl, r0
 801fb32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fb36:	9305      	str	r3, [sp, #20]
 801fb38:	1c93      	adds	r3, r2, #2
 801fb3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801fb3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801fb42:	32fe      	adds	r2, #254	; 0xfe
 801fb44:	18d1      	adds	r1, r2, r3
 801fb46:	461f      	mov	r7, r3
 801fb48:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fb4c:	9100      	str	r1, [sp, #0]
 801fb4e:	2830      	cmp	r0, #48	; 0x30
 801fb50:	d0f8      	beq.n	801fb44 <__gethex+0x3c>
 801fb52:	f7ff ffc4 	bl	801fade <__hexdig_fun>
 801fb56:	4604      	mov	r4, r0
 801fb58:	2800      	cmp	r0, #0
 801fb5a:	d13a      	bne.n	801fbd2 <__gethex+0xca>
 801fb5c:	9901      	ldr	r1, [sp, #4]
 801fb5e:	4652      	mov	r2, sl
 801fb60:	4638      	mov	r0, r7
 801fb62:	f001 fa34 	bl	8020fce <strncmp>
 801fb66:	4605      	mov	r5, r0
 801fb68:	2800      	cmp	r0, #0
 801fb6a:	d168      	bne.n	801fc3e <__gethex+0x136>
 801fb6c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801fb70:	eb07 060a 	add.w	r6, r7, sl
 801fb74:	f7ff ffb3 	bl	801fade <__hexdig_fun>
 801fb78:	2800      	cmp	r0, #0
 801fb7a:	d062      	beq.n	801fc42 <__gethex+0x13a>
 801fb7c:	4633      	mov	r3, r6
 801fb7e:	7818      	ldrb	r0, [r3, #0]
 801fb80:	2830      	cmp	r0, #48	; 0x30
 801fb82:	461f      	mov	r7, r3
 801fb84:	f103 0301 	add.w	r3, r3, #1
 801fb88:	d0f9      	beq.n	801fb7e <__gethex+0x76>
 801fb8a:	f7ff ffa8 	bl	801fade <__hexdig_fun>
 801fb8e:	2301      	movs	r3, #1
 801fb90:	fab0 f480 	clz	r4, r0
 801fb94:	0964      	lsrs	r4, r4, #5
 801fb96:	4635      	mov	r5, r6
 801fb98:	9300      	str	r3, [sp, #0]
 801fb9a:	463a      	mov	r2, r7
 801fb9c:	4616      	mov	r6, r2
 801fb9e:	3201      	adds	r2, #1
 801fba0:	7830      	ldrb	r0, [r6, #0]
 801fba2:	f7ff ff9c 	bl	801fade <__hexdig_fun>
 801fba6:	2800      	cmp	r0, #0
 801fba8:	d1f8      	bne.n	801fb9c <__gethex+0x94>
 801fbaa:	9901      	ldr	r1, [sp, #4]
 801fbac:	4652      	mov	r2, sl
 801fbae:	4630      	mov	r0, r6
 801fbb0:	f001 fa0d 	bl	8020fce <strncmp>
 801fbb4:	b980      	cbnz	r0, 801fbd8 <__gethex+0xd0>
 801fbb6:	b94d      	cbnz	r5, 801fbcc <__gethex+0xc4>
 801fbb8:	eb06 050a 	add.w	r5, r6, sl
 801fbbc:	462a      	mov	r2, r5
 801fbbe:	4616      	mov	r6, r2
 801fbc0:	3201      	adds	r2, #1
 801fbc2:	7830      	ldrb	r0, [r6, #0]
 801fbc4:	f7ff ff8b 	bl	801fade <__hexdig_fun>
 801fbc8:	2800      	cmp	r0, #0
 801fbca:	d1f8      	bne.n	801fbbe <__gethex+0xb6>
 801fbcc:	1bad      	subs	r5, r5, r6
 801fbce:	00ad      	lsls	r5, r5, #2
 801fbd0:	e004      	b.n	801fbdc <__gethex+0xd4>
 801fbd2:	2400      	movs	r4, #0
 801fbd4:	4625      	mov	r5, r4
 801fbd6:	e7e0      	b.n	801fb9a <__gethex+0x92>
 801fbd8:	2d00      	cmp	r5, #0
 801fbda:	d1f7      	bne.n	801fbcc <__gethex+0xc4>
 801fbdc:	7833      	ldrb	r3, [r6, #0]
 801fbde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fbe2:	2b50      	cmp	r3, #80	; 0x50
 801fbe4:	d13b      	bne.n	801fc5e <__gethex+0x156>
 801fbe6:	7873      	ldrb	r3, [r6, #1]
 801fbe8:	2b2b      	cmp	r3, #43	; 0x2b
 801fbea:	d02c      	beq.n	801fc46 <__gethex+0x13e>
 801fbec:	2b2d      	cmp	r3, #45	; 0x2d
 801fbee:	d02e      	beq.n	801fc4e <__gethex+0x146>
 801fbf0:	1c71      	adds	r1, r6, #1
 801fbf2:	f04f 0900 	mov.w	r9, #0
 801fbf6:	7808      	ldrb	r0, [r1, #0]
 801fbf8:	f7ff ff71 	bl	801fade <__hexdig_fun>
 801fbfc:	1e43      	subs	r3, r0, #1
 801fbfe:	b2db      	uxtb	r3, r3
 801fc00:	2b18      	cmp	r3, #24
 801fc02:	d82c      	bhi.n	801fc5e <__gethex+0x156>
 801fc04:	f1a0 0210 	sub.w	r2, r0, #16
 801fc08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fc0c:	f7ff ff67 	bl	801fade <__hexdig_fun>
 801fc10:	1e43      	subs	r3, r0, #1
 801fc12:	b2db      	uxtb	r3, r3
 801fc14:	2b18      	cmp	r3, #24
 801fc16:	d91d      	bls.n	801fc54 <__gethex+0x14c>
 801fc18:	f1b9 0f00 	cmp.w	r9, #0
 801fc1c:	d000      	beq.n	801fc20 <__gethex+0x118>
 801fc1e:	4252      	negs	r2, r2
 801fc20:	4415      	add	r5, r2
 801fc22:	f8cb 1000 	str.w	r1, [fp]
 801fc26:	b1e4      	cbz	r4, 801fc62 <__gethex+0x15a>
 801fc28:	9b00      	ldr	r3, [sp, #0]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	bf14      	ite	ne
 801fc2e:	2700      	movne	r7, #0
 801fc30:	2706      	moveq	r7, #6
 801fc32:	4638      	mov	r0, r7
 801fc34:	b009      	add	sp, #36	; 0x24
 801fc36:	ecbd 8b02 	vpop	{d8}
 801fc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc3e:	463e      	mov	r6, r7
 801fc40:	4625      	mov	r5, r4
 801fc42:	2401      	movs	r4, #1
 801fc44:	e7ca      	b.n	801fbdc <__gethex+0xd4>
 801fc46:	f04f 0900 	mov.w	r9, #0
 801fc4a:	1cb1      	adds	r1, r6, #2
 801fc4c:	e7d3      	b.n	801fbf6 <__gethex+0xee>
 801fc4e:	f04f 0901 	mov.w	r9, #1
 801fc52:	e7fa      	b.n	801fc4a <__gethex+0x142>
 801fc54:	230a      	movs	r3, #10
 801fc56:	fb03 0202 	mla	r2, r3, r2, r0
 801fc5a:	3a10      	subs	r2, #16
 801fc5c:	e7d4      	b.n	801fc08 <__gethex+0x100>
 801fc5e:	4631      	mov	r1, r6
 801fc60:	e7df      	b.n	801fc22 <__gethex+0x11a>
 801fc62:	1bf3      	subs	r3, r6, r7
 801fc64:	3b01      	subs	r3, #1
 801fc66:	4621      	mov	r1, r4
 801fc68:	2b07      	cmp	r3, #7
 801fc6a:	dc0b      	bgt.n	801fc84 <__gethex+0x17c>
 801fc6c:	ee18 0a10 	vmov	r0, s16
 801fc70:	f000 fa82 	bl	8020178 <_Balloc>
 801fc74:	4604      	mov	r4, r0
 801fc76:	b940      	cbnz	r0, 801fc8a <__gethex+0x182>
 801fc78:	4b65      	ldr	r3, [pc, #404]	; (801fe10 <__gethex+0x308>)
 801fc7a:	4602      	mov	r2, r0
 801fc7c:	21de      	movs	r1, #222	; 0xde
 801fc7e:	4865      	ldr	r0, [pc, #404]	; (801fe14 <__gethex+0x30c>)
 801fc80:	f001 fa98 	bl	80211b4 <__assert_func>
 801fc84:	3101      	adds	r1, #1
 801fc86:	105b      	asrs	r3, r3, #1
 801fc88:	e7ee      	b.n	801fc68 <__gethex+0x160>
 801fc8a:	f100 0914 	add.w	r9, r0, #20
 801fc8e:	f04f 0b00 	mov.w	fp, #0
 801fc92:	f1ca 0301 	rsb	r3, sl, #1
 801fc96:	f8cd 9008 	str.w	r9, [sp, #8]
 801fc9a:	f8cd b000 	str.w	fp, [sp]
 801fc9e:	9306      	str	r3, [sp, #24]
 801fca0:	42b7      	cmp	r7, r6
 801fca2:	d340      	bcc.n	801fd26 <__gethex+0x21e>
 801fca4:	9802      	ldr	r0, [sp, #8]
 801fca6:	9b00      	ldr	r3, [sp, #0]
 801fca8:	f840 3b04 	str.w	r3, [r0], #4
 801fcac:	eba0 0009 	sub.w	r0, r0, r9
 801fcb0:	1080      	asrs	r0, r0, #2
 801fcb2:	0146      	lsls	r6, r0, #5
 801fcb4:	6120      	str	r0, [r4, #16]
 801fcb6:	4618      	mov	r0, r3
 801fcb8:	f000 fb54 	bl	8020364 <__hi0bits>
 801fcbc:	1a30      	subs	r0, r6, r0
 801fcbe:	f8d8 6000 	ldr.w	r6, [r8]
 801fcc2:	42b0      	cmp	r0, r6
 801fcc4:	dd63      	ble.n	801fd8e <__gethex+0x286>
 801fcc6:	1b87      	subs	r7, r0, r6
 801fcc8:	4639      	mov	r1, r7
 801fcca:	4620      	mov	r0, r4
 801fccc:	f000 feee 	bl	8020aac <__any_on>
 801fcd0:	4682      	mov	sl, r0
 801fcd2:	b1a8      	cbz	r0, 801fd00 <__gethex+0x1f8>
 801fcd4:	1e7b      	subs	r3, r7, #1
 801fcd6:	1159      	asrs	r1, r3, #5
 801fcd8:	f003 021f 	and.w	r2, r3, #31
 801fcdc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801fce0:	f04f 0a01 	mov.w	sl, #1
 801fce4:	fa0a f202 	lsl.w	r2, sl, r2
 801fce8:	420a      	tst	r2, r1
 801fcea:	d009      	beq.n	801fd00 <__gethex+0x1f8>
 801fcec:	4553      	cmp	r3, sl
 801fcee:	dd05      	ble.n	801fcfc <__gethex+0x1f4>
 801fcf0:	1eb9      	subs	r1, r7, #2
 801fcf2:	4620      	mov	r0, r4
 801fcf4:	f000 feda 	bl	8020aac <__any_on>
 801fcf8:	2800      	cmp	r0, #0
 801fcfa:	d145      	bne.n	801fd88 <__gethex+0x280>
 801fcfc:	f04f 0a02 	mov.w	sl, #2
 801fd00:	4639      	mov	r1, r7
 801fd02:	4620      	mov	r0, r4
 801fd04:	f7ff fe99 	bl	801fa3a <rshift>
 801fd08:	443d      	add	r5, r7
 801fd0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fd0e:	42ab      	cmp	r3, r5
 801fd10:	da4c      	bge.n	801fdac <__gethex+0x2a4>
 801fd12:	ee18 0a10 	vmov	r0, s16
 801fd16:	4621      	mov	r1, r4
 801fd18:	f000 fa6e 	bl	80201f8 <_Bfree>
 801fd1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd1e:	2300      	movs	r3, #0
 801fd20:	6013      	str	r3, [r2, #0]
 801fd22:	27a3      	movs	r7, #163	; 0xa3
 801fd24:	e785      	b.n	801fc32 <__gethex+0x12a>
 801fd26:	1e73      	subs	r3, r6, #1
 801fd28:	9a05      	ldr	r2, [sp, #20]
 801fd2a:	9303      	str	r3, [sp, #12]
 801fd2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fd30:	4293      	cmp	r3, r2
 801fd32:	d019      	beq.n	801fd68 <__gethex+0x260>
 801fd34:	f1bb 0f20 	cmp.w	fp, #32
 801fd38:	d107      	bne.n	801fd4a <__gethex+0x242>
 801fd3a:	9b02      	ldr	r3, [sp, #8]
 801fd3c:	9a00      	ldr	r2, [sp, #0]
 801fd3e:	f843 2b04 	str.w	r2, [r3], #4
 801fd42:	9302      	str	r3, [sp, #8]
 801fd44:	2300      	movs	r3, #0
 801fd46:	9300      	str	r3, [sp, #0]
 801fd48:	469b      	mov	fp, r3
 801fd4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fd4e:	f7ff fec6 	bl	801fade <__hexdig_fun>
 801fd52:	9b00      	ldr	r3, [sp, #0]
 801fd54:	f000 000f 	and.w	r0, r0, #15
 801fd58:	fa00 f00b 	lsl.w	r0, r0, fp
 801fd5c:	4303      	orrs	r3, r0
 801fd5e:	9300      	str	r3, [sp, #0]
 801fd60:	f10b 0b04 	add.w	fp, fp, #4
 801fd64:	9b03      	ldr	r3, [sp, #12]
 801fd66:	e00d      	b.n	801fd84 <__gethex+0x27c>
 801fd68:	9b03      	ldr	r3, [sp, #12]
 801fd6a:	9a06      	ldr	r2, [sp, #24]
 801fd6c:	4413      	add	r3, r2
 801fd6e:	42bb      	cmp	r3, r7
 801fd70:	d3e0      	bcc.n	801fd34 <__gethex+0x22c>
 801fd72:	4618      	mov	r0, r3
 801fd74:	9901      	ldr	r1, [sp, #4]
 801fd76:	9307      	str	r3, [sp, #28]
 801fd78:	4652      	mov	r2, sl
 801fd7a:	f001 f928 	bl	8020fce <strncmp>
 801fd7e:	9b07      	ldr	r3, [sp, #28]
 801fd80:	2800      	cmp	r0, #0
 801fd82:	d1d7      	bne.n	801fd34 <__gethex+0x22c>
 801fd84:	461e      	mov	r6, r3
 801fd86:	e78b      	b.n	801fca0 <__gethex+0x198>
 801fd88:	f04f 0a03 	mov.w	sl, #3
 801fd8c:	e7b8      	b.n	801fd00 <__gethex+0x1f8>
 801fd8e:	da0a      	bge.n	801fda6 <__gethex+0x29e>
 801fd90:	1a37      	subs	r7, r6, r0
 801fd92:	4621      	mov	r1, r4
 801fd94:	ee18 0a10 	vmov	r0, s16
 801fd98:	463a      	mov	r2, r7
 801fd9a:	f000 fc49 	bl	8020630 <__lshift>
 801fd9e:	1bed      	subs	r5, r5, r7
 801fda0:	4604      	mov	r4, r0
 801fda2:	f100 0914 	add.w	r9, r0, #20
 801fda6:	f04f 0a00 	mov.w	sl, #0
 801fdaa:	e7ae      	b.n	801fd0a <__gethex+0x202>
 801fdac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fdb0:	42a8      	cmp	r0, r5
 801fdb2:	dd72      	ble.n	801fe9a <__gethex+0x392>
 801fdb4:	1b45      	subs	r5, r0, r5
 801fdb6:	42ae      	cmp	r6, r5
 801fdb8:	dc36      	bgt.n	801fe28 <__gethex+0x320>
 801fdba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fdbe:	2b02      	cmp	r3, #2
 801fdc0:	d02a      	beq.n	801fe18 <__gethex+0x310>
 801fdc2:	2b03      	cmp	r3, #3
 801fdc4:	d02c      	beq.n	801fe20 <__gethex+0x318>
 801fdc6:	2b01      	cmp	r3, #1
 801fdc8:	d115      	bne.n	801fdf6 <__gethex+0x2ee>
 801fdca:	42ae      	cmp	r6, r5
 801fdcc:	d113      	bne.n	801fdf6 <__gethex+0x2ee>
 801fdce:	2e01      	cmp	r6, #1
 801fdd0:	d10b      	bne.n	801fdea <__gethex+0x2e2>
 801fdd2:	9a04      	ldr	r2, [sp, #16]
 801fdd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fdd8:	6013      	str	r3, [r2, #0]
 801fdda:	2301      	movs	r3, #1
 801fddc:	6123      	str	r3, [r4, #16]
 801fdde:	f8c9 3000 	str.w	r3, [r9]
 801fde2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fde4:	2762      	movs	r7, #98	; 0x62
 801fde6:	601c      	str	r4, [r3, #0]
 801fde8:	e723      	b.n	801fc32 <__gethex+0x12a>
 801fdea:	1e71      	subs	r1, r6, #1
 801fdec:	4620      	mov	r0, r4
 801fdee:	f000 fe5d 	bl	8020aac <__any_on>
 801fdf2:	2800      	cmp	r0, #0
 801fdf4:	d1ed      	bne.n	801fdd2 <__gethex+0x2ca>
 801fdf6:	ee18 0a10 	vmov	r0, s16
 801fdfa:	4621      	mov	r1, r4
 801fdfc:	f000 f9fc 	bl	80201f8 <_Bfree>
 801fe00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe02:	2300      	movs	r3, #0
 801fe04:	6013      	str	r3, [r2, #0]
 801fe06:	2750      	movs	r7, #80	; 0x50
 801fe08:	e713      	b.n	801fc32 <__gethex+0x12a>
 801fe0a:	bf00      	nop
 801fe0c:	08029a04 	.word	0x08029a04
 801fe10:	08029924 	.word	0x08029924
 801fe14:	08029998 	.word	0x08029998
 801fe18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d1eb      	bne.n	801fdf6 <__gethex+0x2ee>
 801fe1e:	e7d8      	b.n	801fdd2 <__gethex+0x2ca>
 801fe20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	d1d5      	bne.n	801fdd2 <__gethex+0x2ca>
 801fe26:	e7e6      	b.n	801fdf6 <__gethex+0x2ee>
 801fe28:	1e6f      	subs	r7, r5, #1
 801fe2a:	f1ba 0f00 	cmp.w	sl, #0
 801fe2e:	d131      	bne.n	801fe94 <__gethex+0x38c>
 801fe30:	b127      	cbz	r7, 801fe3c <__gethex+0x334>
 801fe32:	4639      	mov	r1, r7
 801fe34:	4620      	mov	r0, r4
 801fe36:	f000 fe39 	bl	8020aac <__any_on>
 801fe3a:	4682      	mov	sl, r0
 801fe3c:	117b      	asrs	r3, r7, #5
 801fe3e:	2101      	movs	r1, #1
 801fe40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fe44:	f007 071f 	and.w	r7, r7, #31
 801fe48:	fa01 f707 	lsl.w	r7, r1, r7
 801fe4c:	421f      	tst	r7, r3
 801fe4e:	4629      	mov	r1, r5
 801fe50:	4620      	mov	r0, r4
 801fe52:	bf18      	it	ne
 801fe54:	f04a 0a02 	orrne.w	sl, sl, #2
 801fe58:	1b76      	subs	r6, r6, r5
 801fe5a:	f7ff fdee 	bl	801fa3a <rshift>
 801fe5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801fe62:	2702      	movs	r7, #2
 801fe64:	f1ba 0f00 	cmp.w	sl, #0
 801fe68:	d048      	beq.n	801fefc <__gethex+0x3f4>
 801fe6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fe6e:	2b02      	cmp	r3, #2
 801fe70:	d015      	beq.n	801fe9e <__gethex+0x396>
 801fe72:	2b03      	cmp	r3, #3
 801fe74:	d017      	beq.n	801fea6 <__gethex+0x39e>
 801fe76:	2b01      	cmp	r3, #1
 801fe78:	d109      	bne.n	801fe8e <__gethex+0x386>
 801fe7a:	f01a 0f02 	tst.w	sl, #2
 801fe7e:	d006      	beq.n	801fe8e <__gethex+0x386>
 801fe80:	f8d9 0000 	ldr.w	r0, [r9]
 801fe84:	ea4a 0a00 	orr.w	sl, sl, r0
 801fe88:	f01a 0f01 	tst.w	sl, #1
 801fe8c:	d10e      	bne.n	801feac <__gethex+0x3a4>
 801fe8e:	f047 0710 	orr.w	r7, r7, #16
 801fe92:	e033      	b.n	801fefc <__gethex+0x3f4>
 801fe94:	f04f 0a01 	mov.w	sl, #1
 801fe98:	e7d0      	b.n	801fe3c <__gethex+0x334>
 801fe9a:	2701      	movs	r7, #1
 801fe9c:	e7e2      	b.n	801fe64 <__gethex+0x35c>
 801fe9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fea0:	f1c3 0301 	rsb	r3, r3, #1
 801fea4:	9315      	str	r3, [sp, #84]	; 0x54
 801fea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d0f0      	beq.n	801fe8e <__gethex+0x386>
 801feac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801feb0:	f104 0314 	add.w	r3, r4, #20
 801feb4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801feb8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801febc:	f04f 0c00 	mov.w	ip, #0
 801fec0:	4618      	mov	r0, r3
 801fec2:	f853 2b04 	ldr.w	r2, [r3], #4
 801fec6:	f1b2 3fff 	cmp.w	r2, #4294967295
 801feca:	d01c      	beq.n	801ff06 <__gethex+0x3fe>
 801fecc:	3201      	adds	r2, #1
 801fece:	6002      	str	r2, [r0, #0]
 801fed0:	2f02      	cmp	r7, #2
 801fed2:	f104 0314 	add.w	r3, r4, #20
 801fed6:	d13f      	bne.n	801ff58 <__gethex+0x450>
 801fed8:	f8d8 2000 	ldr.w	r2, [r8]
 801fedc:	3a01      	subs	r2, #1
 801fede:	42b2      	cmp	r2, r6
 801fee0:	d10a      	bne.n	801fef8 <__gethex+0x3f0>
 801fee2:	1171      	asrs	r1, r6, #5
 801fee4:	2201      	movs	r2, #1
 801fee6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801feea:	f006 061f 	and.w	r6, r6, #31
 801feee:	fa02 f606 	lsl.w	r6, r2, r6
 801fef2:	421e      	tst	r6, r3
 801fef4:	bf18      	it	ne
 801fef6:	4617      	movne	r7, r2
 801fef8:	f047 0720 	orr.w	r7, r7, #32
 801fefc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fefe:	601c      	str	r4, [r3, #0]
 801ff00:	9b04      	ldr	r3, [sp, #16]
 801ff02:	601d      	str	r5, [r3, #0]
 801ff04:	e695      	b.n	801fc32 <__gethex+0x12a>
 801ff06:	4299      	cmp	r1, r3
 801ff08:	f843 cc04 	str.w	ip, [r3, #-4]
 801ff0c:	d8d8      	bhi.n	801fec0 <__gethex+0x3b8>
 801ff0e:	68a3      	ldr	r3, [r4, #8]
 801ff10:	459b      	cmp	fp, r3
 801ff12:	db19      	blt.n	801ff48 <__gethex+0x440>
 801ff14:	6861      	ldr	r1, [r4, #4]
 801ff16:	ee18 0a10 	vmov	r0, s16
 801ff1a:	3101      	adds	r1, #1
 801ff1c:	f000 f92c 	bl	8020178 <_Balloc>
 801ff20:	4681      	mov	r9, r0
 801ff22:	b918      	cbnz	r0, 801ff2c <__gethex+0x424>
 801ff24:	4b1a      	ldr	r3, [pc, #104]	; (801ff90 <__gethex+0x488>)
 801ff26:	4602      	mov	r2, r0
 801ff28:	2184      	movs	r1, #132	; 0x84
 801ff2a:	e6a8      	b.n	801fc7e <__gethex+0x176>
 801ff2c:	6922      	ldr	r2, [r4, #16]
 801ff2e:	3202      	adds	r2, #2
 801ff30:	f104 010c 	add.w	r1, r4, #12
 801ff34:	0092      	lsls	r2, r2, #2
 801ff36:	300c      	adds	r0, #12
 801ff38:	f000 f910 	bl	802015c <memcpy>
 801ff3c:	4621      	mov	r1, r4
 801ff3e:	ee18 0a10 	vmov	r0, s16
 801ff42:	f000 f959 	bl	80201f8 <_Bfree>
 801ff46:	464c      	mov	r4, r9
 801ff48:	6923      	ldr	r3, [r4, #16]
 801ff4a:	1c5a      	adds	r2, r3, #1
 801ff4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ff50:	6122      	str	r2, [r4, #16]
 801ff52:	2201      	movs	r2, #1
 801ff54:	615a      	str	r2, [r3, #20]
 801ff56:	e7bb      	b.n	801fed0 <__gethex+0x3c8>
 801ff58:	6922      	ldr	r2, [r4, #16]
 801ff5a:	455a      	cmp	r2, fp
 801ff5c:	dd0b      	ble.n	801ff76 <__gethex+0x46e>
 801ff5e:	2101      	movs	r1, #1
 801ff60:	4620      	mov	r0, r4
 801ff62:	f7ff fd6a 	bl	801fa3a <rshift>
 801ff66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ff6a:	3501      	adds	r5, #1
 801ff6c:	42ab      	cmp	r3, r5
 801ff6e:	f6ff aed0 	blt.w	801fd12 <__gethex+0x20a>
 801ff72:	2701      	movs	r7, #1
 801ff74:	e7c0      	b.n	801fef8 <__gethex+0x3f0>
 801ff76:	f016 061f 	ands.w	r6, r6, #31
 801ff7a:	d0fa      	beq.n	801ff72 <__gethex+0x46a>
 801ff7c:	449a      	add	sl, r3
 801ff7e:	f1c6 0620 	rsb	r6, r6, #32
 801ff82:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801ff86:	f000 f9ed 	bl	8020364 <__hi0bits>
 801ff8a:	42b0      	cmp	r0, r6
 801ff8c:	dbe7      	blt.n	801ff5e <__gethex+0x456>
 801ff8e:	e7f0      	b.n	801ff72 <__gethex+0x46a>
 801ff90:	08029924 	.word	0x08029924

0801ff94 <L_shift>:
 801ff94:	f1c2 0208 	rsb	r2, r2, #8
 801ff98:	0092      	lsls	r2, r2, #2
 801ff9a:	b570      	push	{r4, r5, r6, lr}
 801ff9c:	f1c2 0620 	rsb	r6, r2, #32
 801ffa0:	6843      	ldr	r3, [r0, #4]
 801ffa2:	6804      	ldr	r4, [r0, #0]
 801ffa4:	fa03 f506 	lsl.w	r5, r3, r6
 801ffa8:	432c      	orrs	r4, r5
 801ffaa:	40d3      	lsrs	r3, r2
 801ffac:	6004      	str	r4, [r0, #0]
 801ffae:	f840 3f04 	str.w	r3, [r0, #4]!
 801ffb2:	4288      	cmp	r0, r1
 801ffb4:	d3f4      	bcc.n	801ffa0 <L_shift+0xc>
 801ffb6:	bd70      	pop	{r4, r5, r6, pc}

0801ffb8 <__match>:
 801ffb8:	b530      	push	{r4, r5, lr}
 801ffba:	6803      	ldr	r3, [r0, #0]
 801ffbc:	3301      	adds	r3, #1
 801ffbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ffc2:	b914      	cbnz	r4, 801ffca <__match+0x12>
 801ffc4:	6003      	str	r3, [r0, #0]
 801ffc6:	2001      	movs	r0, #1
 801ffc8:	bd30      	pop	{r4, r5, pc}
 801ffca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ffce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ffd2:	2d19      	cmp	r5, #25
 801ffd4:	bf98      	it	ls
 801ffd6:	3220      	addls	r2, #32
 801ffd8:	42a2      	cmp	r2, r4
 801ffda:	d0f0      	beq.n	801ffbe <__match+0x6>
 801ffdc:	2000      	movs	r0, #0
 801ffde:	e7f3      	b.n	801ffc8 <__match+0x10>

0801ffe0 <__hexnan>:
 801ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffe4:	680b      	ldr	r3, [r1, #0]
 801ffe6:	6801      	ldr	r1, [r0, #0]
 801ffe8:	115e      	asrs	r6, r3, #5
 801ffea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ffee:	f013 031f 	ands.w	r3, r3, #31
 801fff2:	b087      	sub	sp, #28
 801fff4:	bf18      	it	ne
 801fff6:	3604      	addne	r6, #4
 801fff8:	2500      	movs	r5, #0
 801fffa:	1f37      	subs	r7, r6, #4
 801fffc:	4682      	mov	sl, r0
 801fffe:	4690      	mov	r8, r2
 8020000:	9301      	str	r3, [sp, #4]
 8020002:	f846 5c04 	str.w	r5, [r6, #-4]
 8020006:	46b9      	mov	r9, r7
 8020008:	463c      	mov	r4, r7
 802000a:	9502      	str	r5, [sp, #8]
 802000c:	46ab      	mov	fp, r5
 802000e:	784a      	ldrb	r2, [r1, #1]
 8020010:	1c4b      	adds	r3, r1, #1
 8020012:	9303      	str	r3, [sp, #12]
 8020014:	b342      	cbz	r2, 8020068 <__hexnan+0x88>
 8020016:	4610      	mov	r0, r2
 8020018:	9105      	str	r1, [sp, #20]
 802001a:	9204      	str	r2, [sp, #16]
 802001c:	f7ff fd5f 	bl	801fade <__hexdig_fun>
 8020020:	2800      	cmp	r0, #0
 8020022:	d14f      	bne.n	80200c4 <__hexnan+0xe4>
 8020024:	9a04      	ldr	r2, [sp, #16]
 8020026:	9905      	ldr	r1, [sp, #20]
 8020028:	2a20      	cmp	r2, #32
 802002a:	d818      	bhi.n	802005e <__hexnan+0x7e>
 802002c:	9b02      	ldr	r3, [sp, #8]
 802002e:	459b      	cmp	fp, r3
 8020030:	dd13      	ble.n	802005a <__hexnan+0x7a>
 8020032:	454c      	cmp	r4, r9
 8020034:	d206      	bcs.n	8020044 <__hexnan+0x64>
 8020036:	2d07      	cmp	r5, #7
 8020038:	dc04      	bgt.n	8020044 <__hexnan+0x64>
 802003a:	462a      	mov	r2, r5
 802003c:	4649      	mov	r1, r9
 802003e:	4620      	mov	r0, r4
 8020040:	f7ff ffa8 	bl	801ff94 <L_shift>
 8020044:	4544      	cmp	r4, r8
 8020046:	d950      	bls.n	80200ea <__hexnan+0x10a>
 8020048:	2300      	movs	r3, #0
 802004a:	f1a4 0904 	sub.w	r9, r4, #4
 802004e:	f844 3c04 	str.w	r3, [r4, #-4]
 8020052:	f8cd b008 	str.w	fp, [sp, #8]
 8020056:	464c      	mov	r4, r9
 8020058:	461d      	mov	r5, r3
 802005a:	9903      	ldr	r1, [sp, #12]
 802005c:	e7d7      	b.n	802000e <__hexnan+0x2e>
 802005e:	2a29      	cmp	r2, #41	; 0x29
 8020060:	d156      	bne.n	8020110 <__hexnan+0x130>
 8020062:	3102      	adds	r1, #2
 8020064:	f8ca 1000 	str.w	r1, [sl]
 8020068:	f1bb 0f00 	cmp.w	fp, #0
 802006c:	d050      	beq.n	8020110 <__hexnan+0x130>
 802006e:	454c      	cmp	r4, r9
 8020070:	d206      	bcs.n	8020080 <__hexnan+0xa0>
 8020072:	2d07      	cmp	r5, #7
 8020074:	dc04      	bgt.n	8020080 <__hexnan+0xa0>
 8020076:	462a      	mov	r2, r5
 8020078:	4649      	mov	r1, r9
 802007a:	4620      	mov	r0, r4
 802007c:	f7ff ff8a 	bl	801ff94 <L_shift>
 8020080:	4544      	cmp	r4, r8
 8020082:	d934      	bls.n	80200ee <__hexnan+0x10e>
 8020084:	f1a8 0204 	sub.w	r2, r8, #4
 8020088:	4623      	mov	r3, r4
 802008a:	f853 1b04 	ldr.w	r1, [r3], #4
 802008e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020092:	429f      	cmp	r7, r3
 8020094:	d2f9      	bcs.n	802008a <__hexnan+0xaa>
 8020096:	1b3b      	subs	r3, r7, r4
 8020098:	f023 0303 	bic.w	r3, r3, #3
 802009c:	3304      	adds	r3, #4
 802009e:	3401      	adds	r4, #1
 80200a0:	3e03      	subs	r6, #3
 80200a2:	42b4      	cmp	r4, r6
 80200a4:	bf88      	it	hi
 80200a6:	2304      	movhi	r3, #4
 80200a8:	4443      	add	r3, r8
 80200aa:	2200      	movs	r2, #0
 80200ac:	f843 2b04 	str.w	r2, [r3], #4
 80200b0:	429f      	cmp	r7, r3
 80200b2:	d2fb      	bcs.n	80200ac <__hexnan+0xcc>
 80200b4:	683b      	ldr	r3, [r7, #0]
 80200b6:	b91b      	cbnz	r3, 80200c0 <__hexnan+0xe0>
 80200b8:	4547      	cmp	r7, r8
 80200ba:	d127      	bne.n	802010c <__hexnan+0x12c>
 80200bc:	2301      	movs	r3, #1
 80200be:	603b      	str	r3, [r7, #0]
 80200c0:	2005      	movs	r0, #5
 80200c2:	e026      	b.n	8020112 <__hexnan+0x132>
 80200c4:	3501      	adds	r5, #1
 80200c6:	2d08      	cmp	r5, #8
 80200c8:	f10b 0b01 	add.w	fp, fp, #1
 80200cc:	dd06      	ble.n	80200dc <__hexnan+0xfc>
 80200ce:	4544      	cmp	r4, r8
 80200d0:	d9c3      	bls.n	802005a <__hexnan+0x7a>
 80200d2:	2300      	movs	r3, #0
 80200d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80200d8:	2501      	movs	r5, #1
 80200da:	3c04      	subs	r4, #4
 80200dc:	6822      	ldr	r2, [r4, #0]
 80200de:	f000 000f 	and.w	r0, r0, #15
 80200e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80200e6:	6022      	str	r2, [r4, #0]
 80200e8:	e7b7      	b.n	802005a <__hexnan+0x7a>
 80200ea:	2508      	movs	r5, #8
 80200ec:	e7b5      	b.n	802005a <__hexnan+0x7a>
 80200ee:	9b01      	ldr	r3, [sp, #4]
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d0df      	beq.n	80200b4 <__hexnan+0xd4>
 80200f4:	f04f 32ff 	mov.w	r2, #4294967295
 80200f8:	f1c3 0320 	rsb	r3, r3, #32
 80200fc:	fa22 f303 	lsr.w	r3, r2, r3
 8020100:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020104:	401a      	ands	r2, r3
 8020106:	f846 2c04 	str.w	r2, [r6, #-4]
 802010a:	e7d3      	b.n	80200b4 <__hexnan+0xd4>
 802010c:	3f04      	subs	r7, #4
 802010e:	e7d1      	b.n	80200b4 <__hexnan+0xd4>
 8020110:	2004      	movs	r0, #4
 8020112:	b007      	add	sp, #28
 8020114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020118 <_localeconv_r>:
 8020118:	4800      	ldr	r0, [pc, #0]	; (802011c <_localeconv_r+0x4>)
 802011a:	4770      	bx	lr
 802011c:	2000078c 	.word	0x2000078c

08020120 <__retarget_lock_init_recursive>:
 8020120:	4770      	bx	lr

08020122 <__retarget_lock_acquire_recursive>:
 8020122:	4770      	bx	lr

08020124 <__retarget_lock_release_recursive>:
 8020124:	4770      	bx	lr
	...

08020128 <malloc>:
 8020128:	4b02      	ldr	r3, [pc, #8]	; (8020134 <malloc+0xc>)
 802012a:	4601      	mov	r1, r0
 802012c:	6818      	ldr	r0, [r3, #0]
 802012e:	f000 bd3d 	b.w	8020bac <_malloc_r>
 8020132:	bf00      	nop
 8020134:	20000634 	.word	0x20000634

08020138 <__ascii_mbtowc>:
 8020138:	b082      	sub	sp, #8
 802013a:	b901      	cbnz	r1, 802013e <__ascii_mbtowc+0x6>
 802013c:	a901      	add	r1, sp, #4
 802013e:	b142      	cbz	r2, 8020152 <__ascii_mbtowc+0x1a>
 8020140:	b14b      	cbz	r3, 8020156 <__ascii_mbtowc+0x1e>
 8020142:	7813      	ldrb	r3, [r2, #0]
 8020144:	600b      	str	r3, [r1, #0]
 8020146:	7812      	ldrb	r2, [r2, #0]
 8020148:	1e10      	subs	r0, r2, #0
 802014a:	bf18      	it	ne
 802014c:	2001      	movne	r0, #1
 802014e:	b002      	add	sp, #8
 8020150:	4770      	bx	lr
 8020152:	4610      	mov	r0, r2
 8020154:	e7fb      	b.n	802014e <__ascii_mbtowc+0x16>
 8020156:	f06f 0001 	mvn.w	r0, #1
 802015a:	e7f8      	b.n	802014e <__ascii_mbtowc+0x16>

0802015c <memcpy>:
 802015c:	440a      	add	r2, r1
 802015e:	4291      	cmp	r1, r2
 8020160:	f100 33ff 	add.w	r3, r0, #4294967295
 8020164:	d100      	bne.n	8020168 <memcpy+0xc>
 8020166:	4770      	bx	lr
 8020168:	b510      	push	{r4, lr}
 802016a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802016e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020172:	4291      	cmp	r1, r2
 8020174:	d1f9      	bne.n	802016a <memcpy+0xe>
 8020176:	bd10      	pop	{r4, pc}

08020178 <_Balloc>:
 8020178:	b570      	push	{r4, r5, r6, lr}
 802017a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802017c:	4604      	mov	r4, r0
 802017e:	460d      	mov	r5, r1
 8020180:	b976      	cbnz	r6, 80201a0 <_Balloc+0x28>
 8020182:	2010      	movs	r0, #16
 8020184:	f7ff ffd0 	bl	8020128 <malloc>
 8020188:	4602      	mov	r2, r0
 802018a:	6260      	str	r0, [r4, #36]	; 0x24
 802018c:	b920      	cbnz	r0, 8020198 <_Balloc+0x20>
 802018e:	4b18      	ldr	r3, [pc, #96]	; (80201f0 <_Balloc+0x78>)
 8020190:	4818      	ldr	r0, [pc, #96]	; (80201f4 <_Balloc+0x7c>)
 8020192:	2166      	movs	r1, #102	; 0x66
 8020194:	f001 f80e 	bl	80211b4 <__assert_func>
 8020198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802019c:	6006      	str	r6, [r0, #0]
 802019e:	60c6      	str	r6, [r0, #12]
 80201a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80201a2:	68f3      	ldr	r3, [r6, #12]
 80201a4:	b183      	cbz	r3, 80201c8 <_Balloc+0x50>
 80201a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80201a8:	68db      	ldr	r3, [r3, #12]
 80201aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80201ae:	b9b8      	cbnz	r0, 80201e0 <_Balloc+0x68>
 80201b0:	2101      	movs	r1, #1
 80201b2:	fa01 f605 	lsl.w	r6, r1, r5
 80201b6:	1d72      	adds	r2, r6, #5
 80201b8:	0092      	lsls	r2, r2, #2
 80201ba:	4620      	mov	r0, r4
 80201bc:	f000 fc97 	bl	8020aee <_calloc_r>
 80201c0:	b160      	cbz	r0, 80201dc <_Balloc+0x64>
 80201c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80201c6:	e00e      	b.n	80201e6 <_Balloc+0x6e>
 80201c8:	2221      	movs	r2, #33	; 0x21
 80201ca:	2104      	movs	r1, #4
 80201cc:	4620      	mov	r0, r4
 80201ce:	f000 fc8e 	bl	8020aee <_calloc_r>
 80201d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80201d4:	60f0      	str	r0, [r6, #12]
 80201d6:	68db      	ldr	r3, [r3, #12]
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d1e4      	bne.n	80201a6 <_Balloc+0x2e>
 80201dc:	2000      	movs	r0, #0
 80201de:	bd70      	pop	{r4, r5, r6, pc}
 80201e0:	6802      	ldr	r2, [r0, #0]
 80201e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80201e6:	2300      	movs	r3, #0
 80201e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80201ec:	e7f7      	b.n	80201de <_Balloc+0x66>
 80201ee:	bf00      	nop
 80201f0:	080298ae 	.word	0x080298ae
 80201f4:	08029a18 	.word	0x08029a18

080201f8 <_Bfree>:
 80201f8:	b570      	push	{r4, r5, r6, lr}
 80201fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80201fc:	4605      	mov	r5, r0
 80201fe:	460c      	mov	r4, r1
 8020200:	b976      	cbnz	r6, 8020220 <_Bfree+0x28>
 8020202:	2010      	movs	r0, #16
 8020204:	f7ff ff90 	bl	8020128 <malloc>
 8020208:	4602      	mov	r2, r0
 802020a:	6268      	str	r0, [r5, #36]	; 0x24
 802020c:	b920      	cbnz	r0, 8020218 <_Bfree+0x20>
 802020e:	4b09      	ldr	r3, [pc, #36]	; (8020234 <_Bfree+0x3c>)
 8020210:	4809      	ldr	r0, [pc, #36]	; (8020238 <_Bfree+0x40>)
 8020212:	218a      	movs	r1, #138	; 0x8a
 8020214:	f000 ffce 	bl	80211b4 <__assert_func>
 8020218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802021c:	6006      	str	r6, [r0, #0]
 802021e:	60c6      	str	r6, [r0, #12]
 8020220:	b13c      	cbz	r4, 8020232 <_Bfree+0x3a>
 8020222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020224:	6862      	ldr	r2, [r4, #4]
 8020226:	68db      	ldr	r3, [r3, #12]
 8020228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802022c:	6021      	str	r1, [r4, #0]
 802022e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020232:	bd70      	pop	{r4, r5, r6, pc}
 8020234:	080298ae 	.word	0x080298ae
 8020238:	08029a18 	.word	0x08029a18

0802023c <__multadd>:
 802023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020240:	690e      	ldr	r6, [r1, #16]
 8020242:	4607      	mov	r7, r0
 8020244:	4698      	mov	r8, r3
 8020246:	460c      	mov	r4, r1
 8020248:	f101 0014 	add.w	r0, r1, #20
 802024c:	2300      	movs	r3, #0
 802024e:	6805      	ldr	r5, [r0, #0]
 8020250:	b2a9      	uxth	r1, r5
 8020252:	fb02 8101 	mla	r1, r2, r1, r8
 8020256:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802025a:	0c2d      	lsrs	r5, r5, #16
 802025c:	fb02 c505 	mla	r5, r2, r5, ip
 8020260:	b289      	uxth	r1, r1
 8020262:	3301      	adds	r3, #1
 8020264:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020268:	429e      	cmp	r6, r3
 802026a:	f840 1b04 	str.w	r1, [r0], #4
 802026e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020272:	dcec      	bgt.n	802024e <__multadd+0x12>
 8020274:	f1b8 0f00 	cmp.w	r8, #0
 8020278:	d022      	beq.n	80202c0 <__multadd+0x84>
 802027a:	68a3      	ldr	r3, [r4, #8]
 802027c:	42b3      	cmp	r3, r6
 802027e:	dc19      	bgt.n	80202b4 <__multadd+0x78>
 8020280:	6861      	ldr	r1, [r4, #4]
 8020282:	4638      	mov	r0, r7
 8020284:	3101      	adds	r1, #1
 8020286:	f7ff ff77 	bl	8020178 <_Balloc>
 802028a:	4605      	mov	r5, r0
 802028c:	b928      	cbnz	r0, 802029a <__multadd+0x5e>
 802028e:	4602      	mov	r2, r0
 8020290:	4b0d      	ldr	r3, [pc, #52]	; (80202c8 <__multadd+0x8c>)
 8020292:	480e      	ldr	r0, [pc, #56]	; (80202cc <__multadd+0x90>)
 8020294:	21b5      	movs	r1, #181	; 0xb5
 8020296:	f000 ff8d 	bl	80211b4 <__assert_func>
 802029a:	6922      	ldr	r2, [r4, #16]
 802029c:	3202      	adds	r2, #2
 802029e:	f104 010c 	add.w	r1, r4, #12
 80202a2:	0092      	lsls	r2, r2, #2
 80202a4:	300c      	adds	r0, #12
 80202a6:	f7ff ff59 	bl	802015c <memcpy>
 80202aa:	4621      	mov	r1, r4
 80202ac:	4638      	mov	r0, r7
 80202ae:	f7ff ffa3 	bl	80201f8 <_Bfree>
 80202b2:	462c      	mov	r4, r5
 80202b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80202b8:	3601      	adds	r6, #1
 80202ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80202be:	6126      	str	r6, [r4, #16]
 80202c0:	4620      	mov	r0, r4
 80202c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202c6:	bf00      	nop
 80202c8:	08029924 	.word	0x08029924
 80202cc:	08029a18 	.word	0x08029a18

080202d0 <__s2b>:
 80202d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80202d4:	460c      	mov	r4, r1
 80202d6:	4615      	mov	r5, r2
 80202d8:	461f      	mov	r7, r3
 80202da:	2209      	movs	r2, #9
 80202dc:	3308      	adds	r3, #8
 80202de:	4606      	mov	r6, r0
 80202e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80202e4:	2100      	movs	r1, #0
 80202e6:	2201      	movs	r2, #1
 80202e8:	429a      	cmp	r2, r3
 80202ea:	db09      	blt.n	8020300 <__s2b+0x30>
 80202ec:	4630      	mov	r0, r6
 80202ee:	f7ff ff43 	bl	8020178 <_Balloc>
 80202f2:	b940      	cbnz	r0, 8020306 <__s2b+0x36>
 80202f4:	4602      	mov	r2, r0
 80202f6:	4b19      	ldr	r3, [pc, #100]	; (802035c <__s2b+0x8c>)
 80202f8:	4819      	ldr	r0, [pc, #100]	; (8020360 <__s2b+0x90>)
 80202fa:	21ce      	movs	r1, #206	; 0xce
 80202fc:	f000 ff5a 	bl	80211b4 <__assert_func>
 8020300:	0052      	lsls	r2, r2, #1
 8020302:	3101      	adds	r1, #1
 8020304:	e7f0      	b.n	80202e8 <__s2b+0x18>
 8020306:	9b08      	ldr	r3, [sp, #32]
 8020308:	6143      	str	r3, [r0, #20]
 802030a:	2d09      	cmp	r5, #9
 802030c:	f04f 0301 	mov.w	r3, #1
 8020310:	6103      	str	r3, [r0, #16]
 8020312:	dd16      	ble.n	8020342 <__s2b+0x72>
 8020314:	f104 0909 	add.w	r9, r4, #9
 8020318:	46c8      	mov	r8, r9
 802031a:	442c      	add	r4, r5
 802031c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020320:	4601      	mov	r1, r0
 8020322:	3b30      	subs	r3, #48	; 0x30
 8020324:	220a      	movs	r2, #10
 8020326:	4630      	mov	r0, r6
 8020328:	f7ff ff88 	bl	802023c <__multadd>
 802032c:	45a0      	cmp	r8, r4
 802032e:	d1f5      	bne.n	802031c <__s2b+0x4c>
 8020330:	f1a5 0408 	sub.w	r4, r5, #8
 8020334:	444c      	add	r4, r9
 8020336:	1b2d      	subs	r5, r5, r4
 8020338:	1963      	adds	r3, r4, r5
 802033a:	42bb      	cmp	r3, r7
 802033c:	db04      	blt.n	8020348 <__s2b+0x78>
 802033e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020342:	340a      	adds	r4, #10
 8020344:	2509      	movs	r5, #9
 8020346:	e7f6      	b.n	8020336 <__s2b+0x66>
 8020348:	f814 3b01 	ldrb.w	r3, [r4], #1
 802034c:	4601      	mov	r1, r0
 802034e:	3b30      	subs	r3, #48	; 0x30
 8020350:	220a      	movs	r2, #10
 8020352:	4630      	mov	r0, r6
 8020354:	f7ff ff72 	bl	802023c <__multadd>
 8020358:	e7ee      	b.n	8020338 <__s2b+0x68>
 802035a:	bf00      	nop
 802035c:	08029924 	.word	0x08029924
 8020360:	08029a18 	.word	0x08029a18

08020364 <__hi0bits>:
 8020364:	0c03      	lsrs	r3, r0, #16
 8020366:	041b      	lsls	r3, r3, #16
 8020368:	b9d3      	cbnz	r3, 80203a0 <__hi0bits+0x3c>
 802036a:	0400      	lsls	r0, r0, #16
 802036c:	2310      	movs	r3, #16
 802036e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020372:	bf04      	itt	eq
 8020374:	0200      	lsleq	r0, r0, #8
 8020376:	3308      	addeq	r3, #8
 8020378:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802037c:	bf04      	itt	eq
 802037e:	0100      	lsleq	r0, r0, #4
 8020380:	3304      	addeq	r3, #4
 8020382:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020386:	bf04      	itt	eq
 8020388:	0080      	lsleq	r0, r0, #2
 802038a:	3302      	addeq	r3, #2
 802038c:	2800      	cmp	r0, #0
 802038e:	db05      	blt.n	802039c <__hi0bits+0x38>
 8020390:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020394:	f103 0301 	add.w	r3, r3, #1
 8020398:	bf08      	it	eq
 802039a:	2320      	moveq	r3, #32
 802039c:	4618      	mov	r0, r3
 802039e:	4770      	bx	lr
 80203a0:	2300      	movs	r3, #0
 80203a2:	e7e4      	b.n	802036e <__hi0bits+0xa>

080203a4 <__lo0bits>:
 80203a4:	6803      	ldr	r3, [r0, #0]
 80203a6:	f013 0207 	ands.w	r2, r3, #7
 80203aa:	4601      	mov	r1, r0
 80203ac:	d00b      	beq.n	80203c6 <__lo0bits+0x22>
 80203ae:	07da      	lsls	r2, r3, #31
 80203b0:	d424      	bmi.n	80203fc <__lo0bits+0x58>
 80203b2:	0798      	lsls	r0, r3, #30
 80203b4:	bf49      	itett	mi
 80203b6:	085b      	lsrmi	r3, r3, #1
 80203b8:	089b      	lsrpl	r3, r3, #2
 80203ba:	2001      	movmi	r0, #1
 80203bc:	600b      	strmi	r3, [r1, #0]
 80203be:	bf5c      	itt	pl
 80203c0:	600b      	strpl	r3, [r1, #0]
 80203c2:	2002      	movpl	r0, #2
 80203c4:	4770      	bx	lr
 80203c6:	b298      	uxth	r0, r3
 80203c8:	b9b0      	cbnz	r0, 80203f8 <__lo0bits+0x54>
 80203ca:	0c1b      	lsrs	r3, r3, #16
 80203cc:	2010      	movs	r0, #16
 80203ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80203d2:	bf04      	itt	eq
 80203d4:	0a1b      	lsreq	r3, r3, #8
 80203d6:	3008      	addeq	r0, #8
 80203d8:	071a      	lsls	r2, r3, #28
 80203da:	bf04      	itt	eq
 80203dc:	091b      	lsreq	r3, r3, #4
 80203de:	3004      	addeq	r0, #4
 80203e0:	079a      	lsls	r2, r3, #30
 80203e2:	bf04      	itt	eq
 80203e4:	089b      	lsreq	r3, r3, #2
 80203e6:	3002      	addeq	r0, #2
 80203e8:	07da      	lsls	r2, r3, #31
 80203ea:	d403      	bmi.n	80203f4 <__lo0bits+0x50>
 80203ec:	085b      	lsrs	r3, r3, #1
 80203ee:	f100 0001 	add.w	r0, r0, #1
 80203f2:	d005      	beq.n	8020400 <__lo0bits+0x5c>
 80203f4:	600b      	str	r3, [r1, #0]
 80203f6:	4770      	bx	lr
 80203f8:	4610      	mov	r0, r2
 80203fa:	e7e8      	b.n	80203ce <__lo0bits+0x2a>
 80203fc:	2000      	movs	r0, #0
 80203fe:	4770      	bx	lr
 8020400:	2020      	movs	r0, #32
 8020402:	4770      	bx	lr

08020404 <__i2b>:
 8020404:	b510      	push	{r4, lr}
 8020406:	460c      	mov	r4, r1
 8020408:	2101      	movs	r1, #1
 802040a:	f7ff feb5 	bl	8020178 <_Balloc>
 802040e:	4602      	mov	r2, r0
 8020410:	b928      	cbnz	r0, 802041e <__i2b+0x1a>
 8020412:	4b05      	ldr	r3, [pc, #20]	; (8020428 <__i2b+0x24>)
 8020414:	4805      	ldr	r0, [pc, #20]	; (802042c <__i2b+0x28>)
 8020416:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802041a:	f000 fecb 	bl	80211b4 <__assert_func>
 802041e:	2301      	movs	r3, #1
 8020420:	6144      	str	r4, [r0, #20]
 8020422:	6103      	str	r3, [r0, #16]
 8020424:	bd10      	pop	{r4, pc}
 8020426:	bf00      	nop
 8020428:	08029924 	.word	0x08029924
 802042c:	08029a18 	.word	0x08029a18

08020430 <__multiply>:
 8020430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020434:	4614      	mov	r4, r2
 8020436:	690a      	ldr	r2, [r1, #16]
 8020438:	6923      	ldr	r3, [r4, #16]
 802043a:	429a      	cmp	r2, r3
 802043c:	bfb8      	it	lt
 802043e:	460b      	movlt	r3, r1
 8020440:	460d      	mov	r5, r1
 8020442:	bfbc      	itt	lt
 8020444:	4625      	movlt	r5, r4
 8020446:	461c      	movlt	r4, r3
 8020448:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802044c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020450:	68ab      	ldr	r3, [r5, #8]
 8020452:	6869      	ldr	r1, [r5, #4]
 8020454:	eb0a 0709 	add.w	r7, sl, r9
 8020458:	42bb      	cmp	r3, r7
 802045a:	b085      	sub	sp, #20
 802045c:	bfb8      	it	lt
 802045e:	3101      	addlt	r1, #1
 8020460:	f7ff fe8a 	bl	8020178 <_Balloc>
 8020464:	b930      	cbnz	r0, 8020474 <__multiply+0x44>
 8020466:	4602      	mov	r2, r0
 8020468:	4b42      	ldr	r3, [pc, #264]	; (8020574 <__multiply+0x144>)
 802046a:	4843      	ldr	r0, [pc, #268]	; (8020578 <__multiply+0x148>)
 802046c:	f240 115d 	movw	r1, #349	; 0x15d
 8020470:	f000 fea0 	bl	80211b4 <__assert_func>
 8020474:	f100 0614 	add.w	r6, r0, #20
 8020478:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802047c:	4633      	mov	r3, r6
 802047e:	2200      	movs	r2, #0
 8020480:	4543      	cmp	r3, r8
 8020482:	d31e      	bcc.n	80204c2 <__multiply+0x92>
 8020484:	f105 0c14 	add.w	ip, r5, #20
 8020488:	f104 0314 	add.w	r3, r4, #20
 802048c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020490:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020494:	9202      	str	r2, [sp, #8]
 8020496:	ebac 0205 	sub.w	r2, ip, r5
 802049a:	3a15      	subs	r2, #21
 802049c:	f022 0203 	bic.w	r2, r2, #3
 80204a0:	3204      	adds	r2, #4
 80204a2:	f105 0115 	add.w	r1, r5, #21
 80204a6:	458c      	cmp	ip, r1
 80204a8:	bf38      	it	cc
 80204aa:	2204      	movcc	r2, #4
 80204ac:	9201      	str	r2, [sp, #4]
 80204ae:	9a02      	ldr	r2, [sp, #8]
 80204b0:	9303      	str	r3, [sp, #12]
 80204b2:	429a      	cmp	r2, r3
 80204b4:	d808      	bhi.n	80204c8 <__multiply+0x98>
 80204b6:	2f00      	cmp	r7, #0
 80204b8:	dc55      	bgt.n	8020566 <__multiply+0x136>
 80204ba:	6107      	str	r7, [r0, #16]
 80204bc:	b005      	add	sp, #20
 80204be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204c2:	f843 2b04 	str.w	r2, [r3], #4
 80204c6:	e7db      	b.n	8020480 <__multiply+0x50>
 80204c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80204cc:	f1ba 0f00 	cmp.w	sl, #0
 80204d0:	d020      	beq.n	8020514 <__multiply+0xe4>
 80204d2:	f105 0e14 	add.w	lr, r5, #20
 80204d6:	46b1      	mov	r9, r6
 80204d8:	2200      	movs	r2, #0
 80204da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80204de:	f8d9 b000 	ldr.w	fp, [r9]
 80204e2:	b2a1      	uxth	r1, r4
 80204e4:	fa1f fb8b 	uxth.w	fp, fp
 80204e8:	fb0a b101 	mla	r1, sl, r1, fp
 80204ec:	4411      	add	r1, r2
 80204ee:	f8d9 2000 	ldr.w	r2, [r9]
 80204f2:	0c24      	lsrs	r4, r4, #16
 80204f4:	0c12      	lsrs	r2, r2, #16
 80204f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80204fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80204fe:	b289      	uxth	r1, r1
 8020500:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020504:	45f4      	cmp	ip, lr
 8020506:	f849 1b04 	str.w	r1, [r9], #4
 802050a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802050e:	d8e4      	bhi.n	80204da <__multiply+0xaa>
 8020510:	9901      	ldr	r1, [sp, #4]
 8020512:	5072      	str	r2, [r6, r1]
 8020514:	9a03      	ldr	r2, [sp, #12]
 8020516:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802051a:	3304      	adds	r3, #4
 802051c:	f1b9 0f00 	cmp.w	r9, #0
 8020520:	d01f      	beq.n	8020562 <__multiply+0x132>
 8020522:	6834      	ldr	r4, [r6, #0]
 8020524:	f105 0114 	add.w	r1, r5, #20
 8020528:	46b6      	mov	lr, r6
 802052a:	f04f 0a00 	mov.w	sl, #0
 802052e:	880a      	ldrh	r2, [r1, #0]
 8020530:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020534:	fb09 b202 	mla	r2, r9, r2, fp
 8020538:	4492      	add	sl, r2
 802053a:	b2a4      	uxth	r4, r4
 802053c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020540:	f84e 4b04 	str.w	r4, [lr], #4
 8020544:	f851 4b04 	ldr.w	r4, [r1], #4
 8020548:	f8be 2000 	ldrh.w	r2, [lr]
 802054c:	0c24      	lsrs	r4, r4, #16
 802054e:	fb09 2404 	mla	r4, r9, r4, r2
 8020552:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020556:	458c      	cmp	ip, r1
 8020558:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802055c:	d8e7      	bhi.n	802052e <__multiply+0xfe>
 802055e:	9a01      	ldr	r2, [sp, #4]
 8020560:	50b4      	str	r4, [r6, r2]
 8020562:	3604      	adds	r6, #4
 8020564:	e7a3      	b.n	80204ae <__multiply+0x7e>
 8020566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802056a:	2b00      	cmp	r3, #0
 802056c:	d1a5      	bne.n	80204ba <__multiply+0x8a>
 802056e:	3f01      	subs	r7, #1
 8020570:	e7a1      	b.n	80204b6 <__multiply+0x86>
 8020572:	bf00      	nop
 8020574:	08029924 	.word	0x08029924
 8020578:	08029a18 	.word	0x08029a18

0802057c <__pow5mult>:
 802057c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020580:	4615      	mov	r5, r2
 8020582:	f012 0203 	ands.w	r2, r2, #3
 8020586:	4606      	mov	r6, r0
 8020588:	460f      	mov	r7, r1
 802058a:	d007      	beq.n	802059c <__pow5mult+0x20>
 802058c:	4c25      	ldr	r4, [pc, #148]	; (8020624 <__pow5mult+0xa8>)
 802058e:	3a01      	subs	r2, #1
 8020590:	2300      	movs	r3, #0
 8020592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020596:	f7ff fe51 	bl	802023c <__multadd>
 802059a:	4607      	mov	r7, r0
 802059c:	10ad      	asrs	r5, r5, #2
 802059e:	d03d      	beq.n	802061c <__pow5mult+0xa0>
 80205a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80205a2:	b97c      	cbnz	r4, 80205c4 <__pow5mult+0x48>
 80205a4:	2010      	movs	r0, #16
 80205a6:	f7ff fdbf 	bl	8020128 <malloc>
 80205aa:	4602      	mov	r2, r0
 80205ac:	6270      	str	r0, [r6, #36]	; 0x24
 80205ae:	b928      	cbnz	r0, 80205bc <__pow5mult+0x40>
 80205b0:	4b1d      	ldr	r3, [pc, #116]	; (8020628 <__pow5mult+0xac>)
 80205b2:	481e      	ldr	r0, [pc, #120]	; (802062c <__pow5mult+0xb0>)
 80205b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80205b8:	f000 fdfc 	bl	80211b4 <__assert_func>
 80205bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80205c0:	6004      	str	r4, [r0, #0]
 80205c2:	60c4      	str	r4, [r0, #12]
 80205c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80205c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80205cc:	b94c      	cbnz	r4, 80205e2 <__pow5mult+0x66>
 80205ce:	f240 2171 	movw	r1, #625	; 0x271
 80205d2:	4630      	mov	r0, r6
 80205d4:	f7ff ff16 	bl	8020404 <__i2b>
 80205d8:	2300      	movs	r3, #0
 80205da:	f8c8 0008 	str.w	r0, [r8, #8]
 80205de:	4604      	mov	r4, r0
 80205e0:	6003      	str	r3, [r0, #0]
 80205e2:	f04f 0900 	mov.w	r9, #0
 80205e6:	07eb      	lsls	r3, r5, #31
 80205e8:	d50a      	bpl.n	8020600 <__pow5mult+0x84>
 80205ea:	4639      	mov	r1, r7
 80205ec:	4622      	mov	r2, r4
 80205ee:	4630      	mov	r0, r6
 80205f0:	f7ff ff1e 	bl	8020430 <__multiply>
 80205f4:	4639      	mov	r1, r7
 80205f6:	4680      	mov	r8, r0
 80205f8:	4630      	mov	r0, r6
 80205fa:	f7ff fdfd 	bl	80201f8 <_Bfree>
 80205fe:	4647      	mov	r7, r8
 8020600:	106d      	asrs	r5, r5, #1
 8020602:	d00b      	beq.n	802061c <__pow5mult+0xa0>
 8020604:	6820      	ldr	r0, [r4, #0]
 8020606:	b938      	cbnz	r0, 8020618 <__pow5mult+0x9c>
 8020608:	4622      	mov	r2, r4
 802060a:	4621      	mov	r1, r4
 802060c:	4630      	mov	r0, r6
 802060e:	f7ff ff0f 	bl	8020430 <__multiply>
 8020612:	6020      	str	r0, [r4, #0]
 8020614:	f8c0 9000 	str.w	r9, [r0]
 8020618:	4604      	mov	r4, r0
 802061a:	e7e4      	b.n	80205e6 <__pow5mult+0x6a>
 802061c:	4638      	mov	r0, r7
 802061e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020622:	bf00      	nop
 8020624:	08029b68 	.word	0x08029b68
 8020628:	080298ae 	.word	0x080298ae
 802062c:	08029a18 	.word	0x08029a18

08020630 <__lshift>:
 8020630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020634:	460c      	mov	r4, r1
 8020636:	6849      	ldr	r1, [r1, #4]
 8020638:	6923      	ldr	r3, [r4, #16]
 802063a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802063e:	68a3      	ldr	r3, [r4, #8]
 8020640:	4607      	mov	r7, r0
 8020642:	4691      	mov	r9, r2
 8020644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020648:	f108 0601 	add.w	r6, r8, #1
 802064c:	42b3      	cmp	r3, r6
 802064e:	db0b      	blt.n	8020668 <__lshift+0x38>
 8020650:	4638      	mov	r0, r7
 8020652:	f7ff fd91 	bl	8020178 <_Balloc>
 8020656:	4605      	mov	r5, r0
 8020658:	b948      	cbnz	r0, 802066e <__lshift+0x3e>
 802065a:	4602      	mov	r2, r0
 802065c:	4b28      	ldr	r3, [pc, #160]	; (8020700 <__lshift+0xd0>)
 802065e:	4829      	ldr	r0, [pc, #164]	; (8020704 <__lshift+0xd4>)
 8020660:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020664:	f000 fda6 	bl	80211b4 <__assert_func>
 8020668:	3101      	adds	r1, #1
 802066a:	005b      	lsls	r3, r3, #1
 802066c:	e7ee      	b.n	802064c <__lshift+0x1c>
 802066e:	2300      	movs	r3, #0
 8020670:	f100 0114 	add.w	r1, r0, #20
 8020674:	f100 0210 	add.w	r2, r0, #16
 8020678:	4618      	mov	r0, r3
 802067a:	4553      	cmp	r3, sl
 802067c:	db33      	blt.n	80206e6 <__lshift+0xb6>
 802067e:	6920      	ldr	r0, [r4, #16]
 8020680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020684:	f104 0314 	add.w	r3, r4, #20
 8020688:	f019 091f 	ands.w	r9, r9, #31
 802068c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020694:	d02b      	beq.n	80206ee <__lshift+0xbe>
 8020696:	f1c9 0e20 	rsb	lr, r9, #32
 802069a:	468a      	mov	sl, r1
 802069c:	2200      	movs	r2, #0
 802069e:	6818      	ldr	r0, [r3, #0]
 80206a0:	fa00 f009 	lsl.w	r0, r0, r9
 80206a4:	4302      	orrs	r2, r0
 80206a6:	f84a 2b04 	str.w	r2, [sl], #4
 80206aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80206ae:	459c      	cmp	ip, r3
 80206b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80206b4:	d8f3      	bhi.n	802069e <__lshift+0x6e>
 80206b6:	ebac 0304 	sub.w	r3, ip, r4
 80206ba:	3b15      	subs	r3, #21
 80206bc:	f023 0303 	bic.w	r3, r3, #3
 80206c0:	3304      	adds	r3, #4
 80206c2:	f104 0015 	add.w	r0, r4, #21
 80206c6:	4584      	cmp	ip, r0
 80206c8:	bf38      	it	cc
 80206ca:	2304      	movcc	r3, #4
 80206cc:	50ca      	str	r2, [r1, r3]
 80206ce:	b10a      	cbz	r2, 80206d4 <__lshift+0xa4>
 80206d0:	f108 0602 	add.w	r6, r8, #2
 80206d4:	3e01      	subs	r6, #1
 80206d6:	4638      	mov	r0, r7
 80206d8:	612e      	str	r6, [r5, #16]
 80206da:	4621      	mov	r1, r4
 80206dc:	f7ff fd8c 	bl	80201f8 <_Bfree>
 80206e0:	4628      	mov	r0, r5
 80206e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80206e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80206ea:	3301      	adds	r3, #1
 80206ec:	e7c5      	b.n	802067a <__lshift+0x4a>
 80206ee:	3904      	subs	r1, #4
 80206f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80206f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80206f8:	459c      	cmp	ip, r3
 80206fa:	d8f9      	bhi.n	80206f0 <__lshift+0xc0>
 80206fc:	e7ea      	b.n	80206d4 <__lshift+0xa4>
 80206fe:	bf00      	nop
 8020700:	08029924 	.word	0x08029924
 8020704:	08029a18 	.word	0x08029a18

08020708 <__mcmp>:
 8020708:	b530      	push	{r4, r5, lr}
 802070a:	6902      	ldr	r2, [r0, #16]
 802070c:	690c      	ldr	r4, [r1, #16]
 802070e:	1b12      	subs	r2, r2, r4
 8020710:	d10e      	bne.n	8020730 <__mcmp+0x28>
 8020712:	f100 0314 	add.w	r3, r0, #20
 8020716:	3114      	adds	r1, #20
 8020718:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802071c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020720:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020724:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020728:	42a5      	cmp	r5, r4
 802072a:	d003      	beq.n	8020734 <__mcmp+0x2c>
 802072c:	d305      	bcc.n	802073a <__mcmp+0x32>
 802072e:	2201      	movs	r2, #1
 8020730:	4610      	mov	r0, r2
 8020732:	bd30      	pop	{r4, r5, pc}
 8020734:	4283      	cmp	r3, r0
 8020736:	d3f3      	bcc.n	8020720 <__mcmp+0x18>
 8020738:	e7fa      	b.n	8020730 <__mcmp+0x28>
 802073a:	f04f 32ff 	mov.w	r2, #4294967295
 802073e:	e7f7      	b.n	8020730 <__mcmp+0x28>

08020740 <__mdiff>:
 8020740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020744:	460c      	mov	r4, r1
 8020746:	4606      	mov	r6, r0
 8020748:	4611      	mov	r1, r2
 802074a:	4620      	mov	r0, r4
 802074c:	4617      	mov	r7, r2
 802074e:	f7ff ffdb 	bl	8020708 <__mcmp>
 8020752:	1e05      	subs	r5, r0, #0
 8020754:	d110      	bne.n	8020778 <__mdiff+0x38>
 8020756:	4629      	mov	r1, r5
 8020758:	4630      	mov	r0, r6
 802075a:	f7ff fd0d 	bl	8020178 <_Balloc>
 802075e:	b930      	cbnz	r0, 802076e <__mdiff+0x2e>
 8020760:	4b39      	ldr	r3, [pc, #228]	; (8020848 <__mdiff+0x108>)
 8020762:	4602      	mov	r2, r0
 8020764:	f240 2132 	movw	r1, #562	; 0x232
 8020768:	4838      	ldr	r0, [pc, #224]	; (802084c <__mdiff+0x10c>)
 802076a:	f000 fd23 	bl	80211b4 <__assert_func>
 802076e:	2301      	movs	r3, #1
 8020770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020778:	bfa4      	itt	ge
 802077a:	463b      	movge	r3, r7
 802077c:	4627      	movge	r7, r4
 802077e:	4630      	mov	r0, r6
 8020780:	6879      	ldr	r1, [r7, #4]
 8020782:	bfa6      	itte	ge
 8020784:	461c      	movge	r4, r3
 8020786:	2500      	movge	r5, #0
 8020788:	2501      	movlt	r5, #1
 802078a:	f7ff fcf5 	bl	8020178 <_Balloc>
 802078e:	b920      	cbnz	r0, 802079a <__mdiff+0x5a>
 8020790:	4b2d      	ldr	r3, [pc, #180]	; (8020848 <__mdiff+0x108>)
 8020792:	4602      	mov	r2, r0
 8020794:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020798:	e7e6      	b.n	8020768 <__mdiff+0x28>
 802079a:	693e      	ldr	r6, [r7, #16]
 802079c:	60c5      	str	r5, [r0, #12]
 802079e:	6925      	ldr	r5, [r4, #16]
 80207a0:	f107 0114 	add.w	r1, r7, #20
 80207a4:	f104 0914 	add.w	r9, r4, #20
 80207a8:	f100 0e14 	add.w	lr, r0, #20
 80207ac:	f107 0210 	add.w	r2, r7, #16
 80207b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80207b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80207b8:	46f2      	mov	sl, lr
 80207ba:	2700      	movs	r7, #0
 80207bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80207c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80207c4:	fa1f f883 	uxth.w	r8, r3
 80207c8:	fa17 f78b 	uxtah	r7, r7, fp
 80207cc:	0c1b      	lsrs	r3, r3, #16
 80207ce:	eba7 0808 	sub.w	r8, r7, r8
 80207d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80207d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80207da:	fa1f f888 	uxth.w	r8, r8
 80207de:	141f      	asrs	r7, r3, #16
 80207e0:	454d      	cmp	r5, r9
 80207e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80207e6:	f84a 3b04 	str.w	r3, [sl], #4
 80207ea:	d8e7      	bhi.n	80207bc <__mdiff+0x7c>
 80207ec:	1b2b      	subs	r3, r5, r4
 80207ee:	3b15      	subs	r3, #21
 80207f0:	f023 0303 	bic.w	r3, r3, #3
 80207f4:	3304      	adds	r3, #4
 80207f6:	3415      	adds	r4, #21
 80207f8:	42a5      	cmp	r5, r4
 80207fa:	bf38      	it	cc
 80207fc:	2304      	movcc	r3, #4
 80207fe:	4419      	add	r1, r3
 8020800:	4473      	add	r3, lr
 8020802:	469e      	mov	lr, r3
 8020804:	460d      	mov	r5, r1
 8020806:	4565      	cmp	r5, ip
 8020808:	d30e      	bcc.n	8020828 <__mdiff+0xe8>
 802080a:	f10c 0203 	add.w	r2, ip, #3
 802080e:	1a52      	subs	r2, r2, r1
 8020810:	f022 0203 	bic.w	r2, r2, #3
 8020814:	3903      	subs	r1, #3
 8020816:	458c      	cmp	ip, r1
 8020818:	bf38      	it	cc
 802081a:	2200      	movcc	r2, #0
 802081c:	441a      	add	r2, r3
 802081e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020822:	b17b      	cbz	r3, 8020844 <__mdiff+0x104>
 8020824:	6106      	str	r6, [r0, #16]
 8020826:	e7a5      	b.n	8020774 <__mdiff+0x34>
 8020828:	f855 8b04 	ldr.w	r8, [r5], #4
 802082c:	fa17 f488 	uxtah	r4, r7, r8
 8020830:	1422      	asrs	r2, r4, #16
 8020832:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020836:	b2a4      	uxth	r4, r4
 8020838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802083c:	f84e 4b04 	str.w	r4, [lr], #4
 8020840:	1417      	asrs	r7, r2, #16
 8020842:	e7e0      	b.n	8020806 <__mdiff+0xc6>
 8020844:	3e01      	subs	r6, #1
 8020846:	e7ea      	b.n	802081e <__mdiff+0xde>
 8020848:	08029924 	.word	0x08029924
 802084c:	08029a18 	.word	0x08029a18

08020850 <__ulp>:
 8020850:	b082      	sub	sp, #8
 8020852:	ed8d 0b00 	vstr	d0, [sp]
 8020856:	9b01      	ldr	r3, [sp, #4]
 8020858:	4912      	ldr	r1, [pc, #72]	; (80208a4 <__ulp+0x54>)
 802085a:	4019      	ands	r1, r3
 802085c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020860:	2900      	cmp	r1, #0
 8020862:	dd05      	ble.n	8020870 <__ulp+0x20>
 8020864:	2200      	movs	r2, #0
 8020866:	460b      	mov	r3, r1
 8020868:	ec43 2b10 	vmov	d0, r2, r3
 802086c:	b002      	add	sp, #8
 802086e:	4770      	bx	lr
 8020870:	4249      	negs	r1, r1
 8020872:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8020876:	ea4f 5021 	mov.w	r0, r1, asr #20
 802087a:	f04f 0200 	mov.w	r2, #0
 802087e:	f04f 0300 	mov.w	r3, #0
 8020882:	da04      	bge.n	802088e <__ulp+0x3e>
 8020884:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8020888:	fa41 f300 	asr.w	r3, r1, r0
 802088c:	e7ec      	b.n	8020868 <__ulp+0x18>
 802088e:	f1a0 0114 	sub.w	r1, r0, #20
 8020892:	291e      	cmp	r1, #30
 8020894:	bfda      	itte	le
 8020896:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802089a:	fa20 f101 	lsrle.w	r1, r0, r1
 802089e:	2101      	movgt	r1, #1
 80208a0:	460a      	mov	r2, r1
 80208a2:	e7e1      	b.n	8020868 <__ulp+0x18>
 80208a4:	7ff00000 	.word	0x7ff00000

080208a8 <__b2d>:
 80208a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208aa:	6905      	ldr	r5, [r0, #16]
 80208ac:	f100 0714 	add.w	r7, r0, #20
 80208b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80208b4:	1f2e      	subs	r6, r5, #4
 80208b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80208ba:	4620      	mov	r0, r4
 80208bc:	f7ff fd52 	bl	8020364 <__hi0bits>
 80208c0:	f1c0 0320 	rsb	r3, r0, #32
 80208c4:	280a      	cmp	r0, #10
 80208c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020944 <__b2d+0x9c>
 80208ca:	600b      	str	r3, [r1, #0]
 80208cc:	dc14      	bgt.n	80208f8 <__b2d+0x50>
 80208ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80208d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80208d6:	42b7      	cmp	r7, r6
 80208d8:	ea41 030c 	orr.w	r3, r1, ip
 80208dc:	bf34      	ite	cc
 80208de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80208e2:	2100      	movcs	r1, #0
 80208e4:	3015      	adds	r0, #21
 80208e6:	fa04 f000 	lsl.w	r0, r4, r0
 80208ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80208ee:	ea40 0201 	orr.w	r2, r0, r1
 80208f2:	ec43 2b10 	vmov	d0, r2, r3
 80208f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80208f8:	42b7      	cmp	r7, r6
 80208fa:	bf3a      	itte	cc
 80208fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020900:	f1a5 0608 	subcc.w	r6, r5, #8
 8020904:	2100      	movcs	r1, #0
 8020906:	380b      	subs	r0, #11
 8020908:	d017      	beq.n	802093a <__b2d+0x92>
 802090a:	f1c0 0c20 	rsb	ip, r0, #32
 802090e:	fa04 f500 	lsl.w	r5, r4, r0
 8020912:	42be      	cmp	r6, r7
 8020914:	fa21 f40c 	lsr.w	r4, r1, ip
 8020918:	ea45 0504 	orr.w	r5, r5, r4
 802091c:	bf8c      	ite	hi
 802091e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020922:	2400      	movls	r4, #0
 8020924:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8020928:	fa01 f000 	lsl.w	r0, r1, r0
 802092c:	fa24 f40c 	lsr.w	r4, r4, ip
 8020930:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020934:	ea40 0204 	orr.w	r2, r0, r4
 8020938:	e7db      	b.n	80208f2 <__b2d+0x4a>
 802093a:	ea44 030c 	orr.w	r3, r4, ip
 802093e:	460a      	mov	r2, r1
 8020940:	e7d7      	b.n	80208f2 <__b2d+0x4a>
 8020942:	bf00      	nop
 8020944:	3ff00000 	.word	0x3ff00000

08020948 <__d2b>:
 8020948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802094c:	4689      	mov	r9, r1
 802094e:	2101      	movs	r1, #1
 8020950:	ec57 6b10 	vmov	r6, r7, d0
 8020954:	4690      	mov	r8, r2
 8020956:	f7ff fc0f 	bl	8020178 <_Balloc>
 802095a:	4604      	mov	r4, r0
 802095c:	b930      	cbnz	r0, 802096c <__d2b+0x24>
 802095e:	4602      	mov	r2, r0
 8020960:	4b25      	ldr	r3, [pc, #148]	; (80209f8 <__d2b+0xb0>)
 8020962:	4826      	ldr	r0, [pc, #152]	; (80209fc <__d2b+0xb4>)
 8020964:	f240 310a 	movw	r1, #778	; 0x30a
 8020968:	f000 fc24 	bl	80211b4 <__assert_func>
 802096c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020974:	bb35      	cbnz	r5, 80209c4 <__d2b+0x7c>
 8020976:	2e00      	cmp	r6, #0
 8020978:	9301      	str	r3, [sp, #4]
 802097a:	d028      	beq.n	80209ce <__d2b+0x86>
 802097c:	4668      	mov	r0, sp
 802097e:	9600      	str	r6, [sp, #0]
 8020980:	f7ff fd10 	bl	80203a4 <__lo0bits>
 8020984:	9900      	ldr	r1, [sp, #0]
 8020986:	b300      	cbz	r0, 80209ca <__d2b+0x82>
 8020988:	9a01      	ldr	r2, [sp, #4]
 802098a:	f1c0 0320 	rsb	r3, r0, #32
 802098e:	fa02 f303 	lsl.w	r3, r2, r3
 8020992:	430b      	orrs	r3, r1
 8020994:	40c2      	lsrs	r2, r0
 8020996:	6163      	str	r3, [r4, #20]
 8020998:	9201      	str	r2, [sp, #4]
 802099a:	9b01      	ldr	r3, [sp, #4]
 802099c:	61a3      	str	r3, [r4, #24]
 802099e:	2b00      	cmp	r3, #0
 80209a0:	bf14      	ite	ne
 80209a2:	2202      	movne	r2, #2
 80209a4:	2201      	moveq	r2, #1
 80209a6:	6122      	str	r2, [r4, #16]
 80209a8:	b1d5      	cbz	r5, 80209e0 <__d2b+0x98>
 80209aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80209ae:	4405      	add	r5, r0
 80209b0:	f8c9 5000 	str.w	r5, [r9]
 80209b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80209b8:	f8c8 0000 	str.w	r0, [r8]
 80209bc:	4620      	mov	r0, r4
 80209be:	b003      	add	sp, #12
 80209c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80209c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80209c8:	e7d5      	b.n	8020976 <__d2b+0x2e>
 80209ca:	6161      	str	r1, [r4, #20]
 80209cc:	e7e5      	b.n	802099a <__d2b+0x52>
 80209ce:	a801      	add	r0, sp, #4
 80209d0:	f7ff fce8 	bl	80203a4 <__lo0bits>
 80209d4:	9b01      	ldr	r3, [sp, #4]
 80209d6:	6163      	str	r3, [r4, #20]
 80209d8:	2201      	movs	r2, #1
 80209da:	6122      	str	r2, [r4, #16]
 80209dc:	3020      	adds	r0, #32
 80209de:	e7e3      	b.n	80209a8 <__d2b+0x60>
 80209e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80209e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80209e8:	f8c9 0000 	str.w	r0, [r9]
 80209ec:	6918      	ldr	r0, [r3, #16]
 80209ee:	f7ff fcb9 	bl	8020364 <__hi0bits>
 80209f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80209f6:	e7df      	b.n	80209b8 <__d2b+0x70>
 80209f8:	08029924 	.word	0x08029924
 80209fc:	08029a18 	.word	0x08029a18

08020a00 <__ratio>:
 8020a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a04:	4688      	mov	r8, r1
 8020a06:	4669      	mov	r1, sp
 8020a08:	4681      	mov	r9, r0
 8020a0a:	f7ff ff4d 	bl	80208a8 <__b2d>
 8020a0e:	a901      	add	r1, sp, #4
 8020a10:	4640      	mov	r0, r8
 8020a12:	ec55 4b10 	vmov	r4, r5, d0
 8020a16:	f7ff ff47 	bl	80208a8 <__b2d>
 8020a1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020a1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8020a22:	eba3 0c02 	sub.w	ip, r3, r2
 8020a26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020a2a:	1a9b      	subs	r3, r3, r2
 8020a2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020a30:	ec51 0b10 	vmov	r0, r1, d0
 8020a34:	2b00      	cmp	r3, #0
 8020a36:	bfd6      	itet	le
 8020a38:	460a      	movle	r2, r1
 8020a3a:	462a      	movgt	r2, r5
 8020a3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020a40:	468b      	mov	fp, r1
 8020a42:	462f      	mov	r7, r5
 8020a44:	bfd4      	ite	le
 8020a46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8020a4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020a4e:	4620      	mov	r0, r4
 8020a50:	ee10 2a10 	vmov	r2, s0
 8020a54:	465b      	mov	r3, fp
 8020a56:	4639      	mov	r1, r7
 8020a58:	f7df ff08 	bl	800086c <__aeabi_ddiv>
 8020a5c:	ec41 0b10 	vmov	d0, r0, r1
 8020a60:	b003      	add	sp, #12
 8020a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a66 <__copybits>:
 8020a66:	3901      	subs	r1, #1
 8020a68:	b570      	push	{r4, r5, r6, lr}
 8020a6a:	1149      	asrs	r1, r1, #5
 8020a6c:	6914      	ldr	r4, [r2, #16]
 8020a6e:	3101      	adds	r1, #1
 8020a70:	f102 0314 	add.w	r3, r2, #20
 8020a74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020a78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020a7c:	1f05      	subs	r5, r0, #4
 8020a7e:	42a3      	cmp	r3, r4
 8020a80:	d30c      	bcc.n	8020a9c <__copybits+0x36>
 8020a82:	1aa3      	subs	r3, r4, r2
 8020a84:	3b11      	subs	r3, #17
 8020a86:	f023 0303 	bic.w	r3, r3, #3
 8020a8a:	3211      	adds	r2, #17
 8020a8c:	42a2      	cmp	r2, r4
 8020a8e:	bf88      	it	hi
 8020a90:	2300      	movhi	r3, #0
 8020a92:	4418      	add	r0, r3
 8020a94:	2300      	movs	r3, #0
 8020a96:	4288      	cmp	r0, r1
 8020a98:	d305      	bcc.n	8020aa6 <__copybits+0x40>
 8020a9a:	bd70      	pop	{r4, r5, r6, pc}
 8020a9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8020aa0:	f845 6f04 	str.w	r6, [r5, #4]!
 8020aa4:	e7eb      	b.n	8020a7e <__copybits+0x18>
 8020aa6:	f840 3b04 	str.w	r3, [r0], #4
 8020aaa:	e7f4      	b.n	8020a96 <__copybits+0x30>

08020aac <__any_on>:
 8020aac:	f100 0214 	add.w	r2, r0, #20
 8020ab0:	6900      	ldr	r0, [r0, #16]
 8020ab2:	114b      	asrs	r3, r1, #5
 8020ab4:	4298      	cmp	r0, r3
 8020ab6:	b510      	push	{r4, lr}
 8020ab8:	db11      	blt.n	8020ade <__any_on+0x32>
 8020aba:	dd0a      	ble.n	8020ad2 <__any_on+0x26>
 8020abc:	f011 011f 	ands.w	r1, r1, #31
 8020ac0:	d007      	beq.n	8020ad2 <__any_on+0x26>
 8020ac2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020ac6:	fa24 f001 	lsr.w	r0, r4, r1
 8020aca:	fa00 f101 	lsl.w	r1, r0, r1
 8020ace:	428c      	cmp	r4, r1
 8020ad0:	d10b      	bne.n	8020aea <__any_on+0x3e>
 8020ad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020ad6:	4293      	cmp	r3, r2
 8020ad8:	d803      	bhi.n	8020ae2 <__any_on+0x36>
 8020ada:	2000      	movs	r0, #0
 8020adc:	bd10      	pop	{r4, pc}
 8020ade:	4603      	mov	r3, r0
 8020ae0:	e7f7      	b.n	8020ad2 <__any_on+0x26>
 8020ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020ae6:	2900      	cmp	r1, #0
 8020ae8:	d0f5      	beq.n	8020ad6 <__any_on+0x2a>
 8020aea:	2001      	movs	r0, #1
 8020aec:	e7f6      	b.n	8020adc <__any_on+0x30>

08020aee <_calloc_r>:
 8020aee:	b513      	push	{r0, r1, r4, lr}
 8020af0:	434a      	muls	r2, r1
 8020af2:	4611      	mov	r1, r2
 8020af4:	9201      	str	r2, [sp, #4]
 8020af6:	f000 f859 	bl	8020bac <_malloc_r>
 8020afa:	4604      	mov	r4, r0
 8020afc:	b118      	cbz	r0, 8020b06 <_calloc_r+0x18>
 8020afe:	9a01      	ldr	r2, [sp, #4]
 8020b00:	2100      	movs	r1, #0
 8020b02:	f7fc fabd 	bl	801d080 <memset>
 8020b06:	4620      	mov	r0, r4
 8020b08:	b002      	add	sp, #8
 8020b0a:	bd10      	pop	{r4, pc}

08020b0c <_free_r>:
 8020b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020b0e:	2900      	cmp	r1, #0
 8020b10:	d048      	beq.n	8020ba4 <_free_r+0x98>
 8020b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020b16:	9001      	str	r0, [sp, #4]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8020b1e:	bfb8      	it	lt
 8020b20:	18e4      	addlt	r4, r4, r3
 8020b22:	f000 fcd9 	bl	80214d8 <__malloc_lock>
 8020b26:	4a20      	ldr	r2, [pc, #128]	; (8020ba8 <_free_r+0x9c>)
 8020b28:	9801      	ldr	r0, [sp, #4]
 8020b2a:	6813      	ldr	r3, [r2, #0]
 8020b2c:	4615      	mov	r5, r2
 8020b2e:	b933      	cbnz	r3, 8020b3e <_free_r+0x32>
 8020b30:	6063      	str	r3, [r4, #4]
 8020b32:	6014      	str	r4, [r2, #0]
 8020b34:	b003      	add	sp, #12
 8020b36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020b3a:	f000 bcd3 	b.w	80214e4 <__malloc_unlock>
 8020b3e:	42a3      	cmp	r3, r4
 8020b40:	d90b      	bls.n	8020b5a <_free_r+0x4e>
 8020b42:	6821      	ldr	r1, [r4, #0]
 8020b44:	1862      	adds	r2, r4, r1
 8020b46:	4293      	cmp	r3, r2
 8020b48:	bf04      	itt	eq
 8020b4a:	681a      	ldreq	r2, [r3, #0]
 8020b4c:	685b      	ldreq	r3, [r3, #4]
 8020b4e:	6063      	str	r3, [r4, #4]
 8020b50:	bf04      	itt	eq
 8020b52:	1852      	addeq	r2, r2, r1
 8020b54:	6022      	streq	r2, [r4, #0]
 8020b56:	602c      	str	r4, [r5, #0]
 8020b58:	e7ec      	b.n	8020b34 <_free_r+0x28>
 8020b5a:	461a      	mov	r2, r3
 8020b5c:	685b      	ldr	r3, [r3, #4]
 8020b5e:	b10b      	cbz	r3, 8020b64 <_free_r+0x58>
 8020b60:	42a3      	cmp	r3, r4
 8020b62:	d9fa      	bls.n	8020b5a <_free_r+0x4e>
 8020b64:	6811      	ldr	r1, [r2, #0]
 8020b66:	1855      	adds	r5, r2, r1
 8020b68:	42a5      	cmp	r5, r4
 8020b6a:	d10b      	bne.n	8020b84 <_free_r+0x78>
 8020b6c:	6824      	ldr	r4, [r4, #0]
 8020b6e:	4421      	add	r1, r4
 8020b70:	1854      	adds	r4, r2, r1
 8020b72:	42a3      	cmp	r3, r4
 8020b74:	6011      	str	r1, [r2, #0]
 8020b76:	d1dd      	bne.n	8020b34 <_free_r+0x28>
 8020b78:	681c      	ldr	r4, [r3, #0]
 8020b7a:	685b      	ldr	r3, [r3, #4]
 8020b7c:	6053      	str	r3, [r2, #4]
 8020b7e:	4421      	add	r1, r4
 8020b80:	6011      	str	r1, [r2, #0]
 8020b82:	e7d7      	b.n	8020b34 <_free_r+0x28>
 8020b84:	d902      	bls.n	8020b8c <_free_r+0x80>
 8020b86:	230c      	movs	r3, #12
 8020b88:	6003      	str	r3, [r0, #0]
 8020b8a:	e7d3      	b.n	8020b34 <_free_r+0x28>
 8020b8c:	6825      	ldr	r5, [r4, #0]
 8020b8e:	1961      	adds	r1, r4, r5
 8020b90:	428b      	cmp	r3, r1
 8020b92:	bf04      	itt	eq
 8020b94:	6819      	ldreq	r1, [r3, #0]
 8020b96:	685b      	ldreq	r3, [r3, #4]
 8020b98:	6063      	str	r3, [r4, #4]
 8020b9a:	bf04      	itt	eq
 8020b9c:	1949      	addeq	r1, r1, r5
 8020b9e:	6021      	streq	r1, [r4, #0]
 8020ba0:	6054      	str	r4, [r2, #4]
 8020ba2:	e7c7      	b.n	8020b34 <_free_r+0x28>
 8020ba4:	b003      	add	sp, #12
 8020ba6:	bd30      	pop	{r4, r5, pc}
 8020ba8:	20001f3c 	.word	0x20001f3c

08020bac <_malloc_r>:
 8020bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bae:	1ccd      	adds	r5, r1, #3
 8020bb0:	f025 0503 	bic.w	r5, r5, #3
 8020bb4:	3508      	adds	r5, #8
 8020bb6:	2d0c      	cmp	r5, #12
 8020bb8:	bf38      	it	cc
 8020bba:	250c      	movcc	r5, #12
 8020bbc:	2d00      	cmp	r5, #0
 8020bbe:	4606      	mov	r6, r0
 8020bc0:	db01      	blt.n	8020bc6 <_malloc_r+0x1a>
 8020bc2:	42a9      	cmp	r1, r5
 8020bc4:	d903      	bls.n	8020bce <_malloc_r+0x22>
 8020bc6:	230c      	movs	r3, #12
 8020bc8:	6033      	str	r3, [r6, #0]
 8020bca:	2000      	movs	r0, #0
 8020bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bce:	f000 fc83 	bl	80214d8 <__malloc_lock>
 8020bd2:	4921      	ldr	r1, [pc, #132]	; (8020c58 <_malloc_r+0xac>)
 8020bd4:	680a      	ldr	r2, [r1, #0]
 8020bd6:	4614      	mov	r4, r2
 8020bd8:	b99c      	cbnz	r4, 8020c02 <_malloc_r+0x56>
 8020bda:	4f20      	ldr	r7, [pc, #128]	; (8020c5c <_malloc_r+0xb0>)
 8020bdc:	683b      	ldr	r3, [r7, #0]
 8020bde:	b923      	cbnz	r3, 8020bea <_malloc_r+0x3e>
 8020be0:	4621      	mov	r1, r4
 8020be2:	4630      	mov	r0, r6
 8020be4:	f000 f9a0 	bl	8020f28 <_sbrk_r>
 8020be8:	6038      	str	r0, [r7, #0]
 8020bea:	4629      	mov	r1, r5
 8020bec:	4630      	mov	r0, r6
 8020bee:	f000 f99b 	bl	8020f28 <_sbrk_r>
 8020bf2:	1c43      	adds	r3, r0, #1
 8020bf4:	d123      	bne.n	8020c3e <_malloc_r+0x92>
 8020bf6:	230c      	movs	r3, #12
 8020bf8:	6033      	str	r3, [r6, #0]
 8020bfa:	4630      	mov	r0, r6
 8020bfc:	f000 fc72 	bl	80214e4 <__malloc_unlock>
 8020c00:	e7e3      	b.n	8020bca <_malloc_r+0x1e>
 8020c02:	6823      	ldr	r3, [r4, #0]
 8020c04:	1b5b      	subs	r3, r3, r5
 8020c06:	d417      	bmi.n	8020c38 <_malloc_r+0x8c>
 8020c08:	2b0b      	cmp	r3, #11
 8020c0a:	d903      	bls.n	8020c14 <_malloc_r+0x68>
 8020c0c:	6023      	str	r3, [r4, #0]
 8020c0e:	441c      	add	r4, r3
 8020c10:	6025      	str	r5, [r4, #0]
 8020c12:	e004      	b.n	8020c1e <_malloc_r+0x72>
 8020c14:	6863      	ldr	r3, [r4, #4]
 8020c16:	42a2      	cmp	r2, r4
 8020c18:	bf0c      	ite	eq
 8020c1a:	600b      	streq	r3, [r1, #0]
 8020c1c:	6053      	strne	r3, [r2, #4]
 8020c1e:	4630      	mov	r0, r6
 8020c20:	f000 fc60 	bl	80214e4 <__malloc_unlock>
 8020c24:	f104 000b 	add.w	r0, r4, #11
 8020c28:	1d23      	adds	r3, r4, #4
 8020c2a:	f020 0007 	bic.w	r0, r0, #7
 8020c2e:	1ac2      	subs	r2, r0, r3
 8020c30:	d0cc      	beq.n	8020bcc <_malloc_r+0x20>
 8020c32:	1a1b      	subs	r3, r3, r0
 8020c34:	50a3      	str	r3, [r4, r2]
 8020c36:	e7c9      	b.n	8020bcc <_malloc_r+0x20>
 8020c38:	4622      	mov	r2, r4
 8020c3a:	6864      	ldr	r4, [r4, #4]
 8020c3c:	e7cc      	b.n	8020bd8 <_malloc_r+0x2c>
 8020c3e:	1cc4      	adds	r4, r0, #3
 8020c40:	f024 0403 	bic.w	r4, r4, #3
 8020c44:	42a0      	cmp	r0, r4
 8020c46:	d0e3      	beq.n	8020c10 <_malloc_r+0x64>
 8020c48:	1a21      	subs	r1, r4, r0
 8020c4a:	4630      	mov	r0, r6
 8020c4c:	f000 f96c 	bl	8020f28 <_sbrk_r>
 8020c50:	3001      	adds	r0, #1
 8020c52:	d1dd      	bne.n	8020c10 <_malloc_r+0x64>
 8020c54:	e7cf      	b.n	8020bf6 <_malloc_r+0x4a>
 8020c56:	bf00      	nop
 8020c58:	20001f3c 	.word	0x20001f3c
 8020c5c:	20001f40 	.word	0x20001f40

08020c60 <__ssputs_r>:
 8020c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c64:	688e      	ldr	r6, [r1, #8]
 8020c66:	429e      	cmp	r6, r3
 8020c68:	4682      	mov	sl, r0
 8020c6a:	460c      	mov	r4, r1
 8020c6c:	4690      	mov	r8, r2
 8020c6e:	461f      	mov	r7, r3
 8020c70:	d838      	bhi.n	8020ce4 <__ssputs_r+0x84>
 8020c72:	898a      	ldrh	r2, [r1, #12]
 8020c74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020c78:	d032      	beq.n	8020ce0 <__ssputs_r+0x80>
 8020c7a:	6825      	ldr	r5, [r4, #0]
 8020c7c:	6909      	ldr	r1, [r1, #16]
 8020c7e:	eba5 0901 	sub.w	r9, r5, r1
 8020c82:	6965      	ldr	r5, [r4, #20]
 8020c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020c88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020c8c:	3301      	adds	r3, #1
 8020c8e:	444b      	add	r3, r9
 8020c90:	106d      	asrs	r5, r5, #1
 8020c92:	429d      	cmp	r5, r3
 8020c94:	bf38      	it	cc
 8020c96:	461d      	movcc	r5, r3
 8020c98:	0553      	lsls	r3, r2, #21
 8020c9a:	d531      	bpl.n	8020d00 <__ssputs_r+0xa0>
 8020c9c:	4629      	mov	r1, r5
 8020c9e:	f7ff ff85 	bl	8020bac <_malloc_r>
 8020ca2:	4606      	mov	r6, r0
 8020ca4:	b950      	cbnz	r0, 8020cbc <__ssputs_r+0x5c>
 8020ca6:	230c      	movs	r3, #12
 8020ca8:	f8ca 3000 	str.w	r3, [sl]
 8020cac:	89a3      	ldrh	r3, [r4, #12]
 8020cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cb2:	81a3      	strh	r3, [r4, #12]
 8020cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8020cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cbc:	6921      	ldr	r1, [r4, #16]
 8020cbe:	464a      	mov	r2, r9
 8020cc0:	f7ff fa4c 	bl	802015c <memcpy>
 8020cc4:	89a3      	ldrh	r3, [r4, #12]
 8020cc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020cce:	81a3      	strh	r3, [r4, #12]
 8020cd0:	6126      	str	r6, [r4, #16]
 8020cd2:	6165      	str	r5, [r4, #20]
 8020cd4:	444e      	add	r6, r9
 8020cd6:	eba5 0509 	sub.w	r5, r5, r9
 8020cda:	6026      	str	r6, [r4, #0]
 8020cdc:	60a5      	str	r5, [r4, #8]
 8020cde:	463e      	mov	r6, r7
 8020ce0:	42be      	cmp	r6, r7
 8020ce2:	d900      	bls.n	8020ce6 <__ssputs_r+0x86>
 8020ce4:	463e      	mov	r6, r7
 8020ce6:	4632      	mov	r2, r6
 8020ce8:	6820      	ldr	r0, [r4, #0]
 8020cea:	4641      	mov	r1, r8
 8020cec:	f000 fbda 	bl	80214a4 <memmove>
 8020cf0:	68a3      	ldr	r3, [r4, #8]
 8020cf2:	6822      	ldr	r2, [r4, #0]
 8020cf4:	1b9b      	subs	r3, r3, r6
 8020cf6:	4432      	add	r2, r6
 8020cf8:	60a3      	str	r3, [r4, #8]
 8020cfa:	6022      	str	r2, [r4, #0]
 8020cfc:	2000      	movs	r0, #0
 8020cfe:	e7db      	b.n	8020cb8 <__ssputs_r+0x58>
 8020d00:	462a      	mov	r2, r5
 8020d02:	f000 fbf5 	bl	80214f0 <_realloc_r>
 8020d06:	4606      	mov	r6, r0
 8020d08:	2800      	cmp	r0, #0
 8020d0a:	d1e1      	bne.n	8020cd0 <__ssputs_r+0x70>
 8020d0c:	6921      	ldr	r1, [r4, #16]
 8020d0e:	4650      	mov	r0, sl
 8020d10:	f7ff fefc 	bl	8020b0c <_free_r>
 8020d14:	e7c7      	b.n	8020ca6 <__ssputs_r+0x46>
	...

08020d18 <_svfiprintf_r>:
 8020d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d1c:	4698      	mov	r8, r3
 8020d1e:	898b      	ldrh	r3, [r1, #12]
 8020d20:	061b      	lsls	r3, r3, #24
 8020d22:	b09d      	sub	sp, #116	; 0x74
 8020d24:	4607      	mov	r7, r0
 8020d26:	460d      	mov	r5, r1
 8020d28:	4614      	mov	r4, r2
 8020d2a:	d50e      	bpl.n	8020d4a <_svfiprintf_r+0x32>
 8020d2c:	690b      	ldr	r3, [r1, #16]
 8020d2e:	b963      	cbnz	r3, 8020d4a <_svfiprintf_r+0x32>
 8020d30:	2140      	movs	r1, #64	; 0x40
 8020d32:	f7ff ff3b 	bl	8020bac <_malloc_r>
 8020d36:	6028      	str	r0, [r5, #0]
 8020d38:	6128      	str	r0, [r5, #16]
 8020d3a:	b920      	cbnz	r0, 8020d46 <_svfiprintf_r+0x2e>
 8020d3c:	230c      	movs	r3, #12
 8020d3e:	603b      	str	r3, [r7, #0]
 8020d40:	f04f 30ff 	mov.w	r0, #4294967295
 8020d44:	e0d1      	b.n	8020eea <_svfiprintf_r+0x1d2>
 8020d46:	2340      	movs	r3, #64	; 0x40
 8020d48:	616b      	str	r3, [r5, #20]
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8020d4e:	2320      	movs	r3, #32
 8020d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8020d58:	2330      	movs	r3, #48	; 0x30
 8020d5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020f04 <_svfiprintf_r+0x1ec>
 8020d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020d62:	f04f 0901 	mov.w	r9, #1
 8020d66:	4623      	mov	r3, r4
 8020d68:	469a      	mov	sl, r3
 8020d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020d6e:	b10a      	cbz	r2, 8020d74 <_svfiprintf_r+0x5c>
 8020d70:	2a25      	cmp	r2, #37	; 0x25
 8020d72:	d1f9      	bne.n	8020d68 <_svfiprintf_r+0x50>
 8020d74:	ebba 0b04 	subs.w	fp, sl, r4
 8020d78:	d00b      	beq.n	8020d92 <_svfiprintf_r+0x7a>
 8020d7a:	465b      	mov	r3, fp
 8020d7c:	4622      	mov	r2, r4
 8020d7e:	4629      	mov	r1, r5
 8020d80:	4638      	mov	r0, r7
 8020d82:	f7ff ff6d 	bl	8020c60 <__ssputs_r>
 8020d86:	3001      	adds	r0, #1
 8020d88:	f000 80aa 	beq.w	8020ee0 <_svfiprintf_r+0x1c8>
 8020d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d8e:	445a      	add	r2, fp
 8020d90:	9209      	str	r2, [sp, #36]	; 0x24
 8020d92:	f89a 3000 	ldrb.w	r3, [sl]
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	f000 80a2 	beq.w	8020ee0 <_svfiprintf_r+0x1c8>
 8020d9c:	2300      	movs	r3, #0
 8020d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8020da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020da6:	f10a 0a01 	add.w	sl, sl, #1
 8020daa:	9304      	str	r3, [sp, #16]
 8020dac:	9307      	str	r3, [sp, #28]
 8020dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020db2:	931a      	str	r3, [sp, #104]	; 0x68
 8020db4:	4654      	mov	r4, sl
 8020db6:	2205      	movs	r2, #5
 8020db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020dbc:	4851      	ldr	r0, [pc, #324]	; (8020f04 <_svfiprintf_r+0x1ec>)
 8020dbe:	f7df fa1f 	bl	8000200 <memchr>
 8020dc2:	9a04      	ldr	r2, [sp, #16]
 8020dc4:	b9d8      	cbnz	r0, 8020dfe <_svfiprintf_r+0xe6>
 8020dc6:	06d0      	lsls	r0, r2, #27
 8020dc8:	bf44      	itt	mi
 8020dca:	2320      	movmi	r3, #32
 8020dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020dd0:	0711      	lsls	r1, r2, #28
 8020dd2:	bf44      	itt	mi
 8020dd4:	232b      	movmi	r3, #43	; 0x2b
 8020dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020dda:	f89a 3000 	ldrb.w	r3, [sl]
 8020dde:	2b2a      	cmp	r3, #42	; 0x2a
 8020de0:	d015      	beq.n	8020e0e <_svfiprintf_r+0xf6>
 8020de2:	9a07      	ldr	r2, [sp, #28]
 8020de4:	4654      	mov	r4, sl
 8020de6:	2000      	movs	r0, #0
 8020de8:	f04f 0c0a 	mov.w	ip, #10
 8020dec:	4621      	mov	r1, r4
 8020dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020df2:	3b30      	subs	r3, #48	; 0x30
 8020df4:	2b09      	cmp	r3, #9
 8020df6:	d94e      	bls.n	8020e96 <_svfiprintf_r+0x17e>
 8020df8:	b1b0      	cbz	r0, 8020e28 <_svfiprintf_r+0x110>
 8020dfa:	9207      	str	r2, [sp, #28]
 8020dfc:	e014      	b.n	8020e28 <_svfiprintf_r+0x110>
 8020dfe:	eba0 0308 	sub.w	r3, r0, r8
 8020e02:	fa09 f303 	lsl.w	r3, r9, r3
 8020e06:	4313      	orrs	r3, r2
 8020e08:	9304      	str	r3, [sp, #16]
 8020e0a:	46a2      	mov	sl, r4
 8020e0c:	e7d2      	b.n	8020db4 <_svfiprintf_r+0x9c>
 8020e0e:	9b03      	ldr	r3, [sp, #12]
 8020e10:	1d19      	adds	r1, r3, #4
 8020e12:	681b      	ldr	r3, [r3, #0]
 8020e14:	9103      	str	r1, [sp, #12]
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	bfbb      	ittet	lt
 8020e1a:	425b      	neglt	r3, r3
 8020e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8020e20:	9307      	strge	r3, [sp, #28]
 8020e22:	9307      	strlt	r3, [sp, #28]
 8020e24:	bfb8      	it	lt
 8020e26:	9204      	strlt	r2, [sp, #16]
 8020e28:	7823      	ldrb	r3, [r4, #0]
 8020e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8020e2c:	d10c      	bne.n	8020e48 <_svfiprintf_r+0x130>
 8020e2e:	7863      	ldrb	r3, [r4, #1]
 8020e30:	2b2a      	cmp	r3, #42	; 0x2a
 8020e32:	d135      	bne.n	8020ea0 <_svfiprintf_r+0x188>
 8020e34:	9b03      	ldr	r3, [sp, #12]
 8020e36:	1d1a      	adds	r2, r3, #4
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	9203      	str	r2, [sp, #12]
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	bfb8      	it	lt
 8020e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8020e44:	3402      	adds	r4, #2
 8020e46:	9305      	str	r3, [sp, #20]
 8020e48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020f14 <_svfiprintf_r+0x1fc>
 8020e4c:	7821      	ldrb	r1, [r4, #0]
 8020e4e:	2203      	movs	r2, #3
 8020e50:	4650      	mov	r0, sl
 8020e52:	f7df f9d5 	bl	8000200 <memchr>
 8020e56:	b140      	cbz	r0, 8020e6a <_svfiprintf_r+0x152>
 8020e58:	2340      	movs	r3, #64	; 0x40
 8020e5a:	eba0 000a 	sub.w	r0, r0, sl
 8020e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8020e62:	9b04      	ldr	r3, [sp, #16]
 8020e64:	4303      	orrs	r3, r0
 8020e66:	3401      	adds	r4, #1
 8020e68:	9304      	str	r3, [sp, #16]
 8020e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e6e:	4826      	ldr	r0, [pc, #152]	; (8020f08 <_svfiprintf_r+0x1f0>)
 8020e70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020e74:	2206      	movs	r2, #6
 8020e76:	f7df f9c3 	bl	8000200 <memchr>
 8020e7a:	2800      	cmp	r0, #0
 8020e7c:	d038      	beq.n	8020ef0 <_svfiprintf_r+0x1d8>
 8020e7e:	4b23      	ldr	r3, [pc, #140]	; (8020f0c <_svfiprintf_r+0x1f4>)
 8020e80:	bb1b      	cbnz	r3, 8020eca <_svfiprintf_r+0x1b2>
 8020e82:	9b03      	ldr	r3, [sp, #12]
 8020e84:	3307      	adds	r3, #7
 8020e86:	f023 0307 	bic.w	r3, r3, #7
 8020e8a:	3308      	adds	r3, #8
 8020e8c:	9303      	str	r3, [sp, #12]
 8020e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e90:	4433      	add	r3, r6
 8020e92:	9309      	str	r3, [sp, #36]	; 0x24
 8020e94:	e767      	b.n	8020d66 <_svfiprintf_r+0x4e>
 8020e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8020e9a:	460c      	mov	r4, r1
 8020e9c:	2001      	movs	r0, #1
 8020e9e:	e7a5      	b.n	8020dec <_svfiprintf_r+0xd4>
 8020ea0:	2300      	movs	r3, #0
 8020ea2:	3401      	adds	r4, #1
 8020ea4:	9305      	str	r3, [sp, #20]
 8020ea6:	4619      	mov	r1, r3
 8020ea8:	f04f 0c0a 	mov.w	ip, #10
 8020eac:	4620      	mov	r0, r4
 8020eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020eb2:	3a30      	subs	r2, #48	; 0x30
 8020eb4:	2a09      	cmp	r2, #9
 8020eb6:	d903      	bls.n	8020ec0 <_svfiprintf_r+0x1a8>
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d0c5      	beq.n	8020e48 <_svfiprintf_r+0x130>
 8020ebc:	9105      	str	r1, [sp, #20]
 8020ebe:	e7c3      	b.n	8020e48 <_svfiprintf_r+0x130>
 8020ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8020ec4:	4604      	mov	r4, r0
 8020ec6:	2301      	movs	r3, #1
 8020ec8:	e7f0      	b.n	8020eac <_svfiprintf_r+0x194>
 8020eca:	ab03      	add	r3, sp, #12
 8020ecc:	9300      	str	r3, [sp, #0]
 8020ece:	462a      	mov	r2, r5
 8020ed0:	4b0f      	ldr	r3, [pc, #60]	; (8020f10 <_svfiprintf_r+0x1f8>)
 8020ed2:	a904      	add	r1, sp, #16
 8020ed4:	4638      	mov	r0, r7
 8020ed6:	f7fc f97b 	bl	801d1d0 <_printf_float>
 8020eda:	1c42      	adds	r2, r0, #1
 8020edc:	4606      	mov	r6, r0
 8020ede:	d1d6      	bne.n	8020e8e <_svfiprintf_r+0x176>
 8020ee0:	89ab      	ldrh	r3, [r5, #12]
 8020ee2:	065b      	lsls	r3, r3, #25
 8020ee4:	f53f af2c 	bmi.w	8020d40 <_svfiprintf_r+0x28>
 8020ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020eea:	b01d      	add	sp, #116	; 0x74
 8020eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ef0:	ab03      	add	r3, sp, #12
 8020ef2:	9300      	str	r3, [sp, #0]
 8020ef4:	462a      	mov	r2, r5
 8020ef6:	4b06      	ldr	r3, [pc, #24]	; (8020f10 <_svfiprintf_r+0x1f8>)
 8020ef8:	a904      	add	r1, sp, #16
 8020efa:	4638      	mov	r0, r7
 8020efc:	f7fc fc0c 	bl	801d718 <_printf_i>
 8020f00:	e7eb      	b.n	8020eda <_svfiprintf_r+0x1c2>
 8020f02:	bf00      	nop
 8020f04:	08029b74 	.word	0x08029b74
 8020f08:	08029b7e 	.word	0x08029b7e
 8020f0c:	0801d1d1 	.word	0x0801d1d1
 8020f10:	08020c61 	.word	0x08020c61
 8020f14:	08029b7a 	.word	0x08029b7a

08020f18 <nan>:
 8020f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020f20 <nan+0x8>
 8020f1c:	4770      	bx	lr
 8020f1e:	bf00      	nop
 8020f20:	00000000 	.word	0x00000000
 8020f24:	7ff80000 	.word	0x7ff80000

08020f28 <_sbrk_r>:
 8020f28:	b538      	push	{r3, r4, r5, lr}
 8020f2a:	4d06      	ldr	r5, [pc, #24]	; (8020f44 <_sbrk_r+0x1c>)
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	4604      	mov	r4, r0
 8020f30:	4608      	mov	r0, r1
 8020f32:	602b      	str	r3, [r5, #0]
 8020f34:	f7e6 fc06 	bl	8007744 <_sbrk>
 8020f38:	1c43      	adds	r3, r0, #1
 8020f3a:	d102      	bne.n	8020f42 <_sbrk_r+0x1a>
 8020f3c:	682b      	ldr	r3, [r5, #0]
 8020f3e:	b103      	cbz	r3, 8020f42 <_sbrk_r+0x1a>
 8020f40:	6023      	str	r3, [r4, #0]
 8020f42:	bd38      	pop	{r3, r4, r5, pc}
 8020f44:	2000a04c 	.word	0x2000a04c

08020f48 <__sread>:
 8020f48:	b510      	push	{r4, lr}
 8020f4a:	460c      	mov	r4, r1
 8020f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f50:	f000 fc4e 	bl	80217f0 <_read_r>
 8020f54:	2800      	cmp	r0, #0
 8020f56:	bfab      	itete	ge
 8020f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8020f5c:	181b      	addge	r3, r3, r0
 8020f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020f62:	bfac      	ite	ge
 8020f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8020f66:	81a3      	strhlt	r3, [r4, #12]
 8020f68:	bd10      	pop	{r4, pc}

08020f6a <__swrite>:
 8020f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f6e:	461f      	mov	r7, r3
 8020f70:	898b      	ldrh	r3, [r1, #12]
 8020f72:	05db      	lsls	r3, r3, #23
 8020f74:	4605      	mov	r5, r0
 8020f76:	460c      	mov	r4, r1
 8020f78:	4616      	mov	r6, r2
 8020f7a:	d505      	bpl.n	8020f88 <__swrite+0x1e>
 8020f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f80:	2302      	movs	r3, #2
 8020f82:	2200      	movs	r2, #0
 8020f84:	f000 fa18 	bl	80213b8 <_lseek_r>
 8020f88:	89a3      	ldrh	r3, [r4, #12]
 8020f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020f92:	81a3      	strh	r3, [r4, #12]
 8020f94:	4632      	mov	r2, r6
 8020f96:	463b      	mov	r3, r7
 8020f98:	4628      	mov	r0, r5
 8020f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020f9e:	f000 b889 	b.w	80210b4 <_write_r>

08020fa2 <__sseek>:
 8020fa2:	b510      	push	{r4, lr}
 8020fa4:	460c      	mov	r4, r1
 8020fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020faa:	f000 fa05 	bl	80213b8 <_lseek_r>
 8020fae:	1c43      	adds	r3, r0, #1
 8020fb0:	89a3      	ldrh	r3, [r4, #12]
 8020fb2:	bf15      	itete	ne
 8020fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8020fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020fbe:	81a3      	strheq	r3, [r4, #12]
 8020fc0:	bf18      	it	ne
 8020fc2:	81a3      	strhne	r3, [r4, #12]
 8020fc4:	bd10      	pop	{r4, pc}

08020fc6 <__sclose>:
 8020fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020fca:	f000 b911 	b.w	80211f0 <_close_r>

08020fce <strncmp>:
 8020fce:	b510      	push	{r4, lr}
 8020fd0:	b16a      	cbz	r2, 8020fee <strncmp+0x20>
 8020fd2:	3901      	subs	r1, #1
 8020fd4:	1884      	adds	r4, r0, r2
 8020fd6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020fda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020fde:	4293      	cmp	r3, r2
 8020fe0:	d103      	bne.n	8020fea <strncmp+0x1c>
 8020fe2:	42a0      	cmp	r0, r4
 8020fe4:	d001      	beq.n	8020fea <strncmp+0x1c>
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	d1f5      	bne.n	8020fd6 <strncmp+0x8>
 8020fea:	1a98      	subs	r0, r3, r2
 8020fec:	bd10      	pop	{r4, pc}
 8020fee:	4610      	mov	r0, r2
 8020ff0:	e7fc      	b.n	8020fec <strncmp+0x1e>
	...

08020ff4 <__swbuf_r>:
 8020ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ff6:	460e      	mov	r6, r1
 8020ff8:	4614      	mov	r4, r2
 8020ffa:	4605      	mov	r5, r0
 8020ffc:	b118      	cbz	r0, 8021006 <__swbuf_r+0x12>
 8020ffe:	6983      	ldr	r3, [r0, #24]
 8021000:	b90b      	cbnz	r3, 8021006 <__swbuf_r+0x12>
 8021002:	f7fe fc7d 	bl	801f900 <__sinit>
 8021006:	4b21      	ldr	r3, [pc, #132]	; (802108c <__swbuf_r+0x98>)
 8021008:	429c      	cmp	r4, r3
 802100a:	d12b      	bne.n	8021064 <__swbuf_r+0x70>
 802100c:	686c      	ldr	r4, [r5, #4]
 802100e:	69a3      	ldr	r3, [r4, #24]
 8021010:	60a3      	str	r3, [r4, #8]
 8021012:	89a3      	ldrh	r3, [r4, #12]
 8021014:	071a      	lsls	r2, r3, #28
 8021016:	d52f      	bpl.n	8021078 <__swbuf_r+0x84>
 8021018:	6923      	ldr	r3, [r4, #16]
 802101a:	b36b      	cbz	r3, 8021078 <__swbuf_r+0x84>
 802101c:	6923      	ldr	r3, [r4, #16]
 802101e:	6820      	ldr	r0, [r4, #0]
 8021020:	1ac0      	subs	r0, r0, r3
 8021022:	6963      	ldr	r3, [r4, #20]
 8021024:	b2f6      	uxtb	r6, r6
 8021026:	4283      	cmp	r3, r0
 8021028:	4637      	mov	r7, r6
 802102a:	dc04      	bgt.n	8021036 <__swbuf_r+0x42>
 802102c:	4621      	mov	r1, r4
 802102e:	4628      	mov	r0, r5
 8021030:	f000 f974 	bl	802131c <_fflush_r>
 8021034:	bb30      	cbnz	r0, 8021084 <__swbuf_r+0x90>
 8021036:	68a3      	ldr	r3, [r4, #8]
 8021038:	3b01      	subs	r3, #1
 802103a:	60a3      	str	r3, [r4, #8]
 802103c:	6823      	ldr	r3, [r4, #0]
 802103e:	1c5a      	adds	r2, r3, #1
 8021040:	6022      	str	r2, [r4, #0]
 8021042:	701e      	strb	r6, [r3, #0]
 8021044:	6963      	ldr	r3, [r4, #20]
 8021046:	3001      	adds	r0, #1
 8021048:	4283      	cmp	r3, r0
 802104a:	d004      	beq.n	8021056 <__swbuf_r+0x62>
 802104c:	89a3      	ldrh	r3, [r4, #12]
 802104e:	07db      	lsls	r3, r3, #31
 8021050:	d506      	bpl.n	8021060 <__swbuf_r+0x6c>
 8021052:	2e0a      	cmp	r6, #10
 8021054:	d104      	bne.n	8021060 <__swbuf_r+0x6c>
 8021056:	4621      	mov	r1, r4
 8021058:	4628      	mov	r0, r5
 802105a:	f000 f95f 	bl	802131c <_fflush_r>
 802105e:	b988      	cbnz	r0, 8021084 <__swbuf_r+0x90>
 8021060:	4638      	mov	r0, r7
 8021062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021064:	4b0a      	ldr	r3, [pc, #40]	; (8021090 <__swbuf_r+0x9c>)
 8021066:	429c      	cmp	r4, r3
 8021068:	d101      	bne.n	802106e <__swbuf_r+0x7a>
 802106a:	68ac      	ldr	r4, [r5, #8]
 802106c:	e7cf      	b.n	802100e <__swbuf_r+0x1a>
 802106e:	4b09      	ldr	r3, [pc, #36]	; (8021094 <__swbuf_r+0xa0>)
 8021070:	429c      	cmp	r4, r3
 8021072:	bf08      	it	eq
 8021074:	68ec      	ldreq	r4, [r5, #12]
 8021076:	e7ca      	b.n	802100e <__swbuf_r+0x1a>
 8021078:	4621      	mov	r1, r4
 802107a:	4628      	mov	r0, r5
 802107c:	f000 f82c 	bl	80210d8 <__swsetup_r>
 8021080:	2800      	cmp	r0, #0
 8021082:	d0cb      	beq.n	802101c <__swbuf_r+0x28>
 8021084:	f04f 37ff 	mov.w	r7, #4294967295
 8021088:	e7ea      	b.n	8021060 <__swbuf_r+0x6c>
 802108a:	bf00      	nop
 802108c:	08029958 	.word	0x08029958
 8021090:	08029978 	.word	0x08029978
 8021094:	08029938 	.word	0x08029938

08021098 <__ascii_wctomb>:
 8021098:	b149      	cbz	r1, 80210ae <__ascii_wctomb+0x16>
 802109a:	2aff      	cmp	r2, #255	; 0xff
 802109c:	bf85      	ittet	hi
 802109e:	238a      	movhi	r3, #138	; 0x8a
 80210a0:	6003      	strhi	r3, [r0, #0]
 80210a2:	700a      	strbls	r2, [r1, #0]
 80210a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80210a8:	bf98      	it	ls
 80210aa:	2001      	movls	r0, #1
 80210ac:	4770      	bx	lr
 80210ae:	4608      	mov	r0, r1
 80210b0:	4770      	bx	lr
	...

080210b4 <_write_r>:
 80210b4:	b538      	push	{r3, r4, r5, lr}
 80210b6:	4d07      	ldr	r5, [pc, #28]	; (80210d4 <_write_r+0x20>)
 80210b8:	4604      	mov	r4, r0
 80210ba:	4608      	mov	r0, r1
 80210bc:	4611      	mov	r1, r2
 80210be:	2200      	movs	r2, #0
 80210c0:	602a      	str	r2, [r5, #0]
 80210c2:	461a      	mov	r2, r3
 80210c4:	f7e6 faed 	bl	80076a2 <_write>
 80210c8:	1c43      	adds	r3, r0, #1
 80210ca:	d102      	bne.n	80210d2 <_write_r+0x1e>
 80210cc:	682b      	ldr	r3, [r5, #0]
 80210ce:	b103      	cbz	r3, 80210d2 <_write_r+0x1e>
 80210d0:	6023      	str	r3, [r4, #0]
 80210d2:	bd38      	pop	{r3, r4, r5, pc}
 80210d4:	2000a04c 	.word	0x2000a04c

080210d8 <__swsetup_r>:
 80210d8:	4b32      	ldr	r3, [pc, #200]	; (80211a4 <__swsetup_r+0xcc>)
 80210da:	b570      	push	{r4, r5, r6, lr}
 80210dc:	681d      	ldr	r5, [r3, #0]
 80210de:	4606      	mov	r6, r0
 80210e0:	460c      	mov	r4, r1
 80210e2:	b125      	cbz	r5, 80210ee <__swsetup_r+0x16>
 80210e4:	69ab      	ldr	r3, [r5, #24]
 80210e6:	b913      	cbnz	r3, 80210ee <__swsetup_r+0x16>
 80210e8:	4628      	mov	r0, r5
 80210ea:	f7fe fc09 	bl	801f900 <__sinit>
 80210ee:	4b2e      	ldr	r3, [pc, #184]	; (80211a8 <__swsetup_r+0xd0>)
 80210f0:	429c      	cmp	r4, r3
 80210f2:	d10f      	bne.n	8021114 <__swsetup_r+0x3c>
 80210f4:	686c      	ldr	r4, [r5, #4]
 80210f6:	89a3      	ldrh	r3, [r4, #12]
 80210f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80210fc:	0719      	lsls	r1, r3, #28
 80210fe:	d42c      	bmi.n	802115a <__swsetup_r+0x82>
 8021100:	06dd      	lsls	r5, r3, #27
 8021102:	d411      	bmi.n	8021128 <__swsetup_r+0x50>
 8021104:	2309      	movs	r3, #9
 8021106:	6033      	str	r3, [r6, #0]
 8021108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802110c:	81a3      	strh	r3, [r4, #12]
 802110e:	f04f 30ff 	mov.w	r0, #4294967295
 8021112:	e03e      	b.n	8021192 <__swsetup_r+0xba>
 8021114:	4b25      	ldr	r3, [pc, #148]	; (80211ac <__swsetup_r+0xd4>)
 8021116:	429c      	cmp	r4, r3
 8021118:	d101      	bne.n	802111e <__swsetup_r+0x46>
 802111a:	68ac      	ldr	r4, [r5, #8]
 802111c:	e7eb      	b.n	80210f6 <__swsetup_r+0x1e>
 802111e:	4b24      	ldr	r3, [pc, #144]	; (80211b0 <__swsetup_r+0xd8>)
 8021120:	429c      	cmp	r4, r3
 8021122:	bf08      	it	eq
 8021124:	68ec      	ldreq	r4, [r5, #12]
 8021126:	e7e6      	b.n	80210f6 <__swsetup_r+0x1e>
 8021128:	0758      	lsls	r0, r3, #29
 802112a:	d512      	bpl.n	8021152 <__swsetup_r+0x7a>
 802112c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802112e:	b141      	cbz	r1, 8021142 <__swsetup_r+0x6a>
 8021130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021134:	4299      	cmp	r1, r3
 8021136:	d002      	beq.n	802113e <__swsetup_r+0x66>
 8021138:	4630      	mov	r0, r6
 802113a:	f7ff fce7 	bl	8020b0c <_free_r>
 802113e:	2300      	movs	r3, #0
 8021140:	6363      	str	r3, [r4, #52]	; 0x34
 8021142:	89a3      	ldrh	r3, [r4, #12]
 8021144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021148:	81a3      	strh	r3, [r4, #12]
 802114a:	2300      	movs	r3, #0
 802114c:	6063      	str	r3, [r4, #4]
 802114e:	6923      	ldr	r3, [r4, #16]
 8021150:	6023      	str	r3, [r4, #0]
 8021152:	89a3      	ldrh	r3, [r4, #12]
 8021154:	f043 0308 	orr.w	r3, r3, #8
 8021158:	81a3      	strh	r3, [r4, #12]
 802115a:	6923      	ldr	r3, [r4, #16]
 802115c:	b94b      	cbnz	r3, 8021172 <__swsetup_r+0x9a>
 802115e:	89a3      	ldrh	r3, [r4, #12]
 8021160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021168:	d003      	beq.n	8021172 <__swsetup_r+0x9a>
 802116a:	4621      	mov	r1, r4
 802116c:	4630      	mov	r0, r6
 802116e:	f000 f959 	bl	8021424 <__smakebuf_r>
 8021172:	89a0      	ldrh	r0, [r4, #12]
 8021174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021178:	f010 0301 	ands.w	r3, r0, #1
 802117c:	d00a      	beq.n	8021194 <__swsetup_r+0xbc>
 802117e:	2300      	movs	r3, #0
 8021180:	60a3      	str	r3, [r4, #8]
 8021182:	6963      	ldr	r3, [r4, #20]
 8021184:	425b      	negs	r3, r3
 8021186:	61a3      	str	r3, [r4, #24]
 8021188:	6923      	ldr	r3, [r4, #16]
 802118a:	b943      	cbnz	r3, 802119e <__swsetup_r+0xc6>
 802118c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021190:	d1ba      	bne.n	8021108 <__swsetup_r+0x30>
 8021192:	bd70      	pop	{r4, r5, r6, pc}
 8021194:	0781      	lsls	r1, r0, #30
 8021196:	bf58      	it	pl
 8021198:	6963      	ldrpl	r3, [r4, #20]
 802119a:	60a3      	str	r3, [r4, #8]
 802119c:	e7f4      	b.n	8021188 <__swsetup_r+0xb0>
 802119e:	2000      	movs	r0, #0
 80211a0:	e7f7      	b.n	8021192 <__swsetup_r+0xba>
 80211a2:	bf00      	nop
 80211a4:	20000634 	.word	0x20000634
 80211a8:	08029958 	.word	0x08029958
 80211ac:	08029978 	.word	0x08029978
 80211b0:	08029938 	.word	0x08029938

080211b4 <__assert_func>:
 80211b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211b6:	4614      	mov	r4, r2
 80211b8:	461a      	mov	r2, r3
 80211ba:	4b09      	ldr	r3, [pc, #36]	; (80211e0 <__assert_func+0x2c>)
 80211bc:	681b      	ldr	r3, [r3, #0]
 80211be:	4605      	mov	r5, r0
 80211c0:	68d8      	ldr	r0, [r3, #12]
 80211c2:	b14c      	cbz	r4, 80211d8 <__assert_func+0x24>
 80211c4:	4b07      	ldr	r3, [pc, #28]	; (80211e4 <__assert_func+0x30>)
 80211c6:	9100      	str	r1, [sp, #0]
 80211c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80211cc:	4906      	ldr	r1, [pc, #24]	; (80211e8 <__assert_func+0x34>)
 80211ce:	462b      	mov	r3, r5
 80211d0:	f000 f8e0 	bl	8021394 <fiprintf>
 80211d4:	f000 fb1e 	bl	8021814 <abort>
 80211d8:	4b04      	ldr	r3, [pc, #16]	; (80211ec <__assert_func+0x38>)
 80211da:	461c      	mov	r4, r3
 80211dc:	e7f3      	b.n	80211c6 <__assert_func+0x12>
 80211de:	bf00      	nop
 80211e0:	20000634 	.word	0x20000634
 80211e4:	08029b85 	.word	0x08029b85
 80211e8:	08029b92 	.word	0x08029b92
 80211ec:	08029bc0 	.word	0x08029bc0

080211f0 <_close_r>:
 80211f0:	b538      	push	{r3, r4, r5, lr}
 80211f2:	4d06      	ldr	r5, [pc, #24]	; (802120c <_close_r+0x1c>)
 80211f4:	2300      	movs	r3, #0
 80211f6:	4604      	mov	r4, r0
 80211f8:	4608      	mov	r0, r1
 80211fa:	602b      	str	r3, [r5, #0]
 80211fc:	f7e6 fa6d 	bl	80076da <_close>
 8021200:	1c43      	adds	r3, r0, #1
 8021202:	d102      	bne.n	802120a <_close_r+0x1a>
 8021204:	682b      	ldr	r3, [r5, #0]
 8021206:	b103      	cbz	r3, 802120a <_close_r+0x1a>
 8021208:	6023      	str	r3, [r4, #0]
 802120a:	bd38      	pop	{r3, r4, r5, pc}
 802120c:	2000a04c 	.word	0x2000a04c

08021210 <__sflush_r>:
 8021210:	898a      	ldrh	r2, [r1, #12]
 8021212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021216:	4605      	mov	r5, r0
 8021218:	0710      	lsls	r0, r2, #28
 802121a:	460c      	mov	r4, r1
 802121c:	d458      	bmi.n	80212d0 <__sflush_r+0xc0>
 802121e:	684b      	ldr	r3, [r1, #4]
 8021220:	2b00      	cmp	r3, #0
 8021222:	dc05      	bgt.n	8021230 <__sflush_r+0x20>
 8021224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021226:	2b00      	cmp	r3, #0
 8021228:	dc02      	bgt.n	8021230 <__sflush_r+0x20>
 802122a:	2000      	movs	r0, #0
 802122c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021232:	2e00      	cmp	r6, #0
 8021234:	d0f9      	beq.n	802122a <__sflush_r+0x1a>
 8021236:	2300      	movs	r3, #0
 8021238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802123c:	682f      	ldr	r7, [r5, #0]
 802123e:	602b      	str	r3, [r5, #0]
 8021240:	d032      	beq.n	80212a8 <__sflush_r+0x98>
 8021242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021244:	89a3      	ldrh	r3, [r4, #12]
 8021246:	075a      	lsls	r2, r3, #29
 8021248:	d505      	bpl.n	8021256 <__sflush_r+0x46>
 802124a:	6863      	ldr	r3, [r4, #4]
 802124c:	1ac0      	subs	r0, r0, r3
 802124e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021250:	b10b      	cbz	r3, 8021256 <__sflush_r+0x46>
 8021252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021254:	1ac0      	subs	r0, r0, r3
 8021256:	2300      	movs	r3, #0
 8021258:	4602      	mov	r2, r0
 802125a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802125c:	6a21      	ldr	r1, [r4, #32]
 802125e:	4628      	mov	r0, r5
 8021260:	47b0      	blx	r6
 8021262:	1c43      	adds	r3, r0, #1
 8021264:	89a3      	ldrh	r3, [r4, #12]
 8021266:	d106      	bne.n	8021276 <__sflush_r+0x66>
 8021268:	6829      	ldr	r1, [r5, #0]
 802126a:	291d      	cmp	r1, #29
 802126c:	d82c      	bhi.n	80212c8 <__sflush_r+0xb8>
 802126e:	4a2a      	ldr	r2, [pc, #168]	; (8021318 <__sflush_r+0x108>)
 8021270:	40ca      	lsrs	r2, r1
 8021272:	07d6      	lsls	r6, r2, #31
 8021274:	d528      	bpl.n	80212c8 <__sflush_r+0xb8>
 8021276:	2200      	movs	r2, #0
 8021278:	6062      	str	r2, [r4, #4]
 802127a:	04d9      	lsls	r1, r3, #19
 802127c:	6922      	ldr	r2, [r4, #16]
 802127e:	6022      	str	r2, [r4, #0]
 8021280:	d504      	bpl.n	802128c <__sflush_r+0x7c>
 8021282:	1c42      	adds	r2, r0, #1
 8021284:	d101      	bne.n	802128a <__sflush_r+0x7a>
 8021286:	682b      	ldr	r3, [r5, #0]
 8021288:	b903      	cbnz	r3, 802128c <__sflush_r+0x7c>
 802128a:	6560      	str	r0, [r4, #84]	; 0x54
 802128c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802128e:	602f      	str	r7, [r5, #0]
 8021290:	2900      	cmp	r1, #0
 8021292:	d0ca      	beq.n	802122a <__sflush_r+0x1a>
 8021294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021298:	4299      	cmp	r1, r3
 802129a:	d002      	beq.n	80212a2 <__sflush_r+0x92>
 802129c:	4628      	mov	r0, r5
 802129e:	f7ff fc35 	bl	8020b0c <_free_r>
 80212a2:	2000      	movs	r0, #0
 80212a4:	6360      	str	r0, [r4, #52]	; 0x34
 80212a6:	e7c1      	b.n	802122c <__sflush_r+0x1c>
 80212a8:	6a21      	ldr	r1, [r4, #32]
 80212aa:	2301      	movs	r3, #1
 80212ac:	4628      	mov	r0, r5
 80212ae:	47b0      	blx	r6
 80212b0:	1c41      	adds	r1, r0, #1
 80212b2:	d1c7      	bne.n	8021244 <__sflush_r+0x34>
 80212b4:	682b      	ldr	r3, [r5, #0]
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d0c4      	beq.n	8021244 <__sflush_r+0x34>
 80212ba:	2b1d      	cmp	r3, #29
 80212bc:	d001      	beq.n	80212c2 <__sflush_r+0xb2>
 80212be:	2b16      	cmp	r3, #22
 80212c0:	d101      	bne.n	80212c6 <__sflush_r+0xb6>
 80212c2:	602f      	str	r7, [r5, #0]
 80212c4:	e7b1      	b.n	802122a <__sflush_r+0x1a>
 80212c6:	89a3      	ldrh	r3, [r4, #12]
 80212c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80212cc:	81a3      	strh	r3, [r4, #12]
 80212ce:	e7ad      	b.n	802122c <__sflush_r+0x1c>
 80212d0:	690f      	ldr	r7, [r1, #16]
 80212d2:	2f00      	cmp	r7, #0
 80212d4:	d0a9      	beq.n	802122a <__sflush_r+0x1a>
 80212d6:	0793      	lsls	r3, r2, #30
 80212d8:	680e      	ldr	r6, [r1, #0]
 80212da:	bf08      	it	eq
 80212dc:	694b      	ldreq	r3, [r1, #20]
 80212de:	600f      	str	r7, [r1, #0]
 80212e0:	bf18      	it	ne
 80212e2:	2300      	movne	r3, #0
 80212e4:	eba6 0807 	sub.w	r8, r6, r7
 80212e8:	608b      	str	r3, [r1, #8]
 80212ea:	f1b8 0f00 	cmp.w	r8, #0
 80212ee:	dd9c      	ble.n	802122a <__sflush_r+0x1a>
 80212f0:	6a21      	ldr	r1, [r4, #32]
 80212f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80212f4:	4643      	mov	r3, r8
 80212f6:	463a      	mov	r2, r7
 80212f8:	4628      	mov	r0, r5
 80212fa:	47b0      	blx	r6
 80212fc:	2800      	cmp	r0, #0
 80212fe:	dc06      	bgt.n	802130e <__sflush_r+0xfe>
 8021300:	89a3      	ldrh	r3, [r4, #12]
 8021302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021306:	81a3      	strh	r3, [r4, #12]
 8021308:	f04f 30ff 	mov.w	r0, #4294967295
 802130c:	e78e      	b.n	802122c <__sflush_r+0x1c>
 802130e:	4407      	add	r7, r0
 8021310:	eba8 0800 	sub.w	r8, r8, r0
 8021314:	e7e9      	b.n	80212ea <__sflush_r+0xda>
 8021316:	bf00      	nop
 8021318:	20400001 	.word	0x20400001

0802131c <_fflush_r>:
 802131c:	b538      	push	{r3, r4, r5, lr}
 802131e:	690b      	ldr	r3, [r1, #16]
 8021320:	4605      	mov	r5, r0
 8021322:	460c      	mov	r4, r1
 8021324:	b913      	cbnz	r3, 802132c <_fflush_r+0x10>
 8021326:	2500      	movs	r5, #0
 8021328:	4628      	mov	r0, r5
 802132a:	bd38      	pop	{r3, r4, r5, pc}
 802132c:	b118      	cbz	r0, 8021336 <_fflush_r+0x1a>
 802132e:	6983      	ldr	r3, [r0, #24]
 8021330:	b90b      	cbnz	r3, 8021336 <_fflush_r+0x1a>
 8021332:	f7fe fae5 	bl	801f900 <__sinit>
 8021336:	4b14      	ldr	r3, [pc, #80]	; (8021388 <_fflush_r+0x6c>)
 8021338:	429c      	cmp	r4, r3
 802133a:	d11b      	bne.n	8021374 <_fflush_r+0x58>
 802133c:	686c      	ldr	r4, [r5, #4]
 802133e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021342:	2b00      	cmp	r3, #0
 8021344:	d0ef      	beq.n	8021326 <_fflush_r+0xa>
 8021346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021348:	07d0      	lsls	r0, r2, #31
 802134a:	d404      	bmi.n	8021356 <_fflush_r+0x3a>
 802134c:	0599      	lsls	r1, r3, #22
 802134e:	d402      	bmi.n	8021356 <_fflush_r+0x3a>
 8021350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021352:	f7fe fee6 	bl	8020122 <__retarget_lock_acquire_recursive>
 8021356:	4628      	mov	r0, r5
 8021358:	4621      	mov	r1, r4
 802135a:	f7ff ff59 	bl	8021210 <__sflush_r>
 802135e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021360:	07da      	lsls	r2, r3, #31
 8021362:	4605      	mov	r5, r0
 8021364:	d4e0      	bmi.n	8021328 <_fflush_r+0xc>
 8021366:	89a3      	ldrh	r3, [r4, #12]
 8021368:	059b      	lsls	r3, r3, #22
 802136a:	d4dd      	bmi.n	8021328 <_fflush_r+0xc>
 802136c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802136e:	f7fe fed9 	bl	8020124 <__retarget_lock_release_recursive>
 8021372:	e7d9      	b.n	8021328 <_fflush_r+0xc>
 8021374:	4b05      	ldr	r3, [pc, #20]	; (802138c <_fflush_r+0x70>)
 8021376:	429c      	cmp	r4, r3
 8021378:	d101      	bne.n	802137e <_fflush_r+0x62>
 802137a:	68ac      	ldr	r4, [r5, #8]
 802137c:	e7df      	b.n	802133e <_fflush_r+0x22>
 802137e:	4b04      	ldr	r3, [pc, #16]	; (8021390 <_fflush_r+0x74>)
 8021380:	429c      	cmp	r4, r3
 8021382:	bf08      	it	eq
 8021384:	68ec      	ldreq	r4, [r5, #12]
 8021386:	e7da      	b.n	802133e <_fflush_r+0x22>
 8021388:	08029958 	.word	0x08029958
 802138c:	08029978 	.word	0x08029978
 8021390:	08029938 	.word	0x08029938

08021394 <fiprintf>:
 8021394:	b40e      	push	{r1, r2, r3}
 8021396:	b503      	push	{r0, r1, lr}
 8021398:	4601      	mov	r1, r0
 802139a:	ab03      	add	r3, sp, #12
 802139c:	4805      	ldr	r0, [pc, #20]	; (80213b4 <fiprintf+0x20>)
 802139e:	f853 2b04 	ldr.w	r2, [r3], #4
 80213a2:	6800      	ldr	r0, [r0, #0]
 80213a4:	9301      	str	r3, [sp, #4]
 80213a6:	f000 f8f3 	bl	8021590 <_vfiprintf_r>
 80213aa:	b002      	add	sp, #8
 80213ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80213b0:	b003      	add	sp, #12
 80213b2:	4770      	bx	lr
 80213b4:	20000634 	.word	0x20000634

080213b8 <_lseek_r>:
 80213b8:	b538      	push	{r3, r4, r5, lr}
 80213ba:	4d07      	ldr	r5, [pc, #28]	; (80213d8 <_lseek_r+0x20>)
 80213bc:	4604      	mov	r4, r0
 80213be:	4608      	mov	r0, r1
 80213c0:	4611      	mov	r1, r2
 80213c2:	2200      	movs	r2, #0
 80213c4:	602a      	str	r2, [r5, #0]
 80213c6:	461a      	mov	r2, r3
 80213c8:	f7e6 f9ae 	bl	8007728 <_lseek>
 80213cc:	1c43      	adds	r3, r0, #1
 80213ce:	d102      	bne.n	80213d6 <_lseek_r+0x1e>
 80213d0:	682b      	ldr	r3, [r5, #0]
 80213d2:	b103      	cbz	r3, 80213d6 <_lseek_r+0x1e>
 80213d4:	6023      	str	r3, [r4, #0]
 80213d6:	bd38      	pop	{r3, r4, r5, pc}
 80213d8:	2000a04c 	.word	0x2000a04c

080213dc <__swhatbuf_r>:
 80213dc:	b570      	push	{r4, r5, r6, lr}
 80213de:	460e      	mov	r6, r1
 80213e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80213e4:	2900      	cmp	r1, #0
 80213e6:	b096      	sub	sp, #88	; 0x58
 80213e8:	4614      	mov	r4, r2
 80213ea:	461d      	mov	r5, r3
 80213ec:	da07      	bge.n	80213fe <__swhatbuf_r+0x22>
 80213ee:	2300      	movs	r3, #0
 80213f0:	602b      	str	r3, [r5, #0]
 80213f2:	89b3      	ldrh	r3, [r6, #12]
 80213f4:	061a      	lsls	r2, r3, #24
 80213f6:	d410      	bmi.n	802141a <__swhatbuf_r+0x3e>
 80213f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80213fc:	e00e      	b.n	802141c <__swhatbuf_r+0x40>
 80213fe:	466a      	mov	r2, sp
 8021400:	f000 fa10 	bl	8021824 <_fstat_r>
 8021404:	2800      	cmp	r0, #0
 8021406:	dbf2      	blt.n	80213ee <__swhatbuf_r+0x12>
 8021408:	9a01      	ldr	r2, [sp, #4]
 802140a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802140e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021412:	425a      	negs	r2, r3
 8021414:	415a      	adcs	r2, r3
 8021416:	602a      	str	r2, [r5, #0]
 8021418:	e7ee      	b.n	80213f8 <__swhatbuf_r+0x1c>
 802141a:	2340      	movs	r3, #64	; 0x40
 802141c:	2000      	movs	r0, #0
 802141e:	6023      	str	r3, [r4, #0]
 8021420:	b016      	add	sp, #88	; 0x58
 8021422:	bd70      	pop	{r4, r5, r6, pc}

08021424 <__smakebuf_r>:
 8021424:	898b      	ldrh	r3, [r1, #12]
 8021426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021428:	079d      	lsls	r5, r3, #30
 802142a:	4606      	mov	r6, r0
 802142c:	460c      	mov	r4, r1
 802142e:	d507      	bpl.n	8021440 <__smakebuf_r+0x1c>
 8021430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021434:	6023      	str	r3, [r4, #0]
 8021436:	6123      	str	r3, [r4, #16]
 8021438:	2301      	movs	r3, #1
 802143a:	6163      	str	r3, [r4, #20]
 802143c:	b002      	add	sp, #8
 802143e:	bd70      	pop	{r4, r5, r6, pc}
 8021440:	ab01      	add	r3, sp, #4
 8021442:	466a      	mov	r2, sp
 8021444:	f7ff ffca 	bl	80213dc <__swhatbuf_r>
 8021448:	9900      	ldr	r1, [sp, #0]
 802144a:	4605      	mov	r5, r0
 802144c:	4630      	mov	r0, r6
 802144e:	f7ff fbad 	bl	8020bac <_malloc_r>
 8021452:	b948      	cbnz	r0, 8021468 <__smakebuf_r+0x44>
 8021454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021458:	059a      	lsls	r2, r3, #22
 802145a:	d4ef      	bmi.n	802143c <__smakebuf_r+0x18>
 802145c:	f023 0303 	bic.w	r3, r3, #3
 8021460:	f043 0302 	orr.w	r3, r3, #2
 8021464:	81a3      	strh	r3, [r4, #12]
 8021466:	e7e3      	b.n	8021430 <__smakebuf_r+0xc>
 8021468:	4b0d      	ldr	r3, [pc, #52]	; (80214a0 <__smakebuf_r+0x7c>)
 802146a:	62b3      	str	r3, [r6, #40]	; 0x28
 802146c:	89a3      	ldrh	r3, [r4, #12]
 802146e:	6020      	str	r0, [r4, #0]
 8021470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021474:	81a3      	strh	r3, [r4, #12]
 8021476:	9b00      	ldr	r3, [sp, #0]
 8021478:	6163      	str	r3, [r4, #20]
 802147a:	9b01      	ldr	r3, [sp, #4]
 802147c:	6120      	str	r0, [r4, #16]
 802147e:	b15b      	cbz	r3, 8021498 <__smakebuf_r+0x74>
 8021480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021484:	4630      	mov	r0, r6
 8021486:	f000 f9df 	bl	8021848 <_isatty_r>
 802148a:	b128      	cbz	r0, 8021498 <__smakebuf_r+0x74>
 802148c:	89a3      	ldrh	r3, [r4, #12]
 802148e:	f023 0303 	bic.w	r3, r3, #3
 8021492:	f043 0301 	orr.w	r3, r3, #1
 8021496:	81a3      	strh	r3, [r4, #12]
 8021498:	89a0      	ldrh	r0, [r4, #12]
 802149a:	4305      	orrs	r5, r0
 802149c:	81a5      	strh	r5, [r4, #12]
 802149e:	e7cd      	b.n	802143c <__smakebuf_r+0x18>
 80214a0:	0801f899 	.word	0x0801f899

080214a4 <memmove>:
 80214a4:	4288      	cmp	r0, r1
 80214a6:	b510      	push	{r4, lr}
 80214a8:	eb01 0402 	add.w	r4, r1, r2
 80214ac:	d902      	bls.n	80214b4 <memmove+0x10>
 80214ae:	4284      	cmp	r4, r0
 80214b0:	4623      	mov	r3, r4
 80214b2:	d807      	bhi.n	80214c4 <memmove+0x20>
 80214b4:	1e43      	subs	r3, r0, #1
 80214b6:	42a1      	cmp	r1, r4
 80214b8:	d008      	beq.n	80214cc <memmove+0x28>
 80214ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80214be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80214c2:	e7f8      	b.n	80214b6 <memmove+0x12>
 80214c4:	4402      	add	r2, r0
 80214c6:	4601      	mov	r1, r0
 80214c8:	428a      	cmp	r2, r1
 80214ca:	d100      	bne.n	80214ce <memmove+0x2a>
 80214cc:	bd10      	pop	{r4, pc}
 80214ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80214d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80214d6:	e7f7      	b.n	80214c8 <memmove+0x24>

080214d8 <__malloc_lock>:
 80214d8:	4801      	ldr	r0, [pc, #4]	; (80214e0 <__malloc_lock+0x8>)
 80214da:	f7fe be22 	b.w	8020122 <__retarget_lock_acquire_recursive>
 80214de:	bf00      	nop
 80214e0:	2000a040 	.word	0x2000a040

080214e4 <__malloc_unlock>:
 80214e4:	4801      	ldr	r0, [pc, #4]	; (80214ec <__malloc_unlock+0x8>)
 80214e6:	f7fe be1d 	b.w	8020124 <__retarget_lock_release_recursive>
 80214ea:	bf00      	nop
 80214ec:	2000a040 	.word	0x2000a040

080214f0 <_realloc_r>:
 80214f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214f2:	4607      	mov	r7, r0
 80214f4:	4614      	mov	r4, r2
 80214f6:	460e      	mov	r6, r1
 80214f8:	b921      	cbnz	r1, 8021504 <_realloc_r+0x14>
 80214fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80214fe:	4611      	mov	r1, r2
 8021500:	f7ff bb54 	b.w	8020bac <_malloc_r>
 8021504:	b922      	cbnz	r2, 8021510 <_realloc_r+0x20>
 8021506:	f7ff fb01 	bl	8020b0c <_free_r>
 802150a:	4625      	mov	r5, r4
 802150c:	4628      	mov	r0, r5
 802150e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021510:	f000 f9aa 	bl	8021868 <_malloc_usable_size_r>
 8021514:	42a0      	cmp	r0, r4
 8021516:	d20f      	bcs.n	8021538 <_realloc_r+0x48>
 8021518:	4621      	mov	r1, r4
 802151a:	4638      	mov	r0, r7
 802151c:	f7ff fb46 	bl	8020bac <_malloc_r>
 8021520:	4605      	mov	r5, r0
 8021522:	2800      	cmp	r0, #0
 8021524:	d0f2      	beq.n	802150c <_realloc_r+0x1c>
 8021526:	4631      	mov	r1, r6
 8021528:	4622      	mov	r2, r4
 802152a:	f7fe fe17 	bl	802015c <memcpy>
 802152e:	4631      	mov	r1, r6
 8021530:	4638      	mov	r0, r7
 8021532:	f7ff faeb 	bl	8020b0c <_free_r>
 8021536:	e7e9      	b.n	802150c <_realloc_r+0x1c>
 8021538:	4635      	mov	r5, r6
 802153a:	e7e7      	b.n	802150c <_realloc_r+0x1c>

0802153c <__sfputc_r>:
 802153c:	6893      	ldr	r3, [r2, #8]
 802153e:	3b01      	subs	r3, #1
 8021540:	2b00      	cmp	r3, #0
 8021542:	b410      	push	{r4}
 8021544:	6093      	str	r3, [r2, #8]
 8021546:	da08      	bge.n	802155a <__sfputc_r+0x1e>
 8021548:	6994      	ldr	r4, [r2, #24]
 802154a:	42a3      	cmp	r3, r4
 802154c:	db01      	blt.n	8021552 <__sfputc_r+0x16>
 802154e:	290a      	cmp	r1, #10
 8021550:	d103      	bne.n	802155a <__sfputc_r+0x1e>
 8021552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021556:	f7ff bd4d 	b.w	8020ff4 <__swbuf_r>
 802155a:	6813      	ldr	r3, [r2, #0]
 802155c:	1c58      	adds	r0, r3, #1
 802155e:	6010      	str	r0, [r2, #0]
 8021560:	7019      	strb	r1, [r3, #0]
 8021562:	4608      	mov	r0, r1
 8021564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021568:	4770      	bx	lr

0802156a <__sfputs_r>:
 802156a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802156c:	4606      	mov	r6, r0
 802156e:	460f      	mov	r7, r1
 8021570:	4614      	mov	r4, r2
 8021572:	18d5      	adds	r5, r2, r3
 8021574:	42ac      	cmp	r4, r5
 8021576:	d101      	bne.n	802157c <__sfputs_r+0x12>
 8021578:	2000      	movs	r0, #0
 802157a:	e007      	b.n	802158c <__sfputs_r+0x22>
 802157c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021580:	463a      	mov	r2, r7
 8021582:	4630      	mov	r0, r6
 8021584:	f7ff ffda 	bl	802153c <__sfputc_r>
 8021588:	1c43      	adds	r3, r0, #1
 802158a:	d1f3      	bne.n	8021574 <__sfputs_r+0xa>
 802158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021590 <_vfiprintf_r>:
 8021590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021594:	460d      	mov	r5, r1
 8021596:	b09d      	sub	sp, #116	; 0x74
 8021598:	4614      	mov	r4, r2
 802159a:	4698      	mov	r8, r3
 802159c:	4606      	mov	r6, r0
 802159e:	b118      	cbz	r0, 80215a8 <_vfiprintf_r+0x18>
 80215a0:	6983      	ldr	r3, [r0, #24]
 80215a2:	b90b      	cbnz	r3, 80215a8 <_vfiprintf_r+0x18>
 80215a4:	f7fe f9ac 	bl	801f900 <__sinit>
 80215a8:	4b89      	ldr	r3, [pc, #548]	; (80217d0 <_vfiprintf_r+0x240>)
 80215aa:	429d      	cmp	r5, r3
 80215ac:	d11b      	bne.n	80215e6 <_vfiprintf_r+0x56>
 80215ae:	6875      	ldr	r5, [r6, #4]
 80215b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80215b2:	07d9      	lsls	r1, r3, #31
 80215b4:	d405      	bmi.n	80215c2 <_vfiprintf_r+0x32>
 80215b6:	89ab      	ldrh	r3, [r5, #12]
 80215b8:	059a      	lsls	r2, r3, #22
 80215ba:	d402      	bmi.n	80215c2 <_vfiprintf_r+0x32>
 80215bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80215be:	f7fe fdb0 	bl	8020122 <__retarget_lock_acquire_recursive>
 80215c2:	89ab      	ldrh	r3, [r5, #12]
 80215c4:	071b      	lsls	r3, r3, #28
 80215c6:	d501      	bpl.n	80215cc <_vfiprintf_r+0x3c>
 80215c8:	692b      	ldr	r3, [r5, #16]
 80215ca:	b9eb      	cbnz	r3, 8021608 <_vfiprintf_r+0x78>
 80215cc:	4629      	mov	r1, r5
 80215ce:	4630      	mov	r0, r6
 80215d0:	f7ff fd82 	bl	80210d8 <__swsetup_r>
 80215d4:	b1c0      	cbz	r0, 8021608 <_vfiprintf_r+0x78>
 80215d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80215d8:	07dc      	lsls	r4, r3, #31
 80215da:	d50e      	bpl.n	80215fa <_vfiprintf_r+0x6a>
 80215dc:	f04f 30ff 	mov.w	r0, #4294967295
 80215e0:	b01d      	add	sp, #116	; 0x74
 80215e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e6:	4b7b      	ldr	r3, [pc, #492]	; (80217d4 <_vfiprintf_r+0x244>)
 80215e8:	429d      	cmp	r5, r3
 80215ea:	d101      	bne.n	80215f0 <_vfiprintf_r+0x60>
 80215ec:	68b5      	ldr	r5, [r6, #8]
 80215ee:	e7df      	b.n	80215b0 <_vfiprintf_r+0x20>
 80215f0:	4b79      	ldr	r3, [pc, #484]	; (80217d8 <_vfiprintf_r+0x248>)
 80215f2:	429d      	cmp	r5, r3
 80215f4:	bf08      	it	eq
 80215f6:	68f5      	ldreq	r5, [r6, #12]
 80215f8:	e7da      	b.n	80215b0 <_vfiprintf_r+0x20>
 80215fa:	89ab      	ldrh	r3, [r5, #12]
 80215fc:	0598      	lsls	r0, r3, #22
 80215fe:	d4ed      	bmi.n	80215dc <_vfiprintf_r+0x4c>
 8021600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021602:	f7fe fd8f 	bl	8020124 <__retarget_lock_release_recursive>
 8021606:	e7e9      	b.n	80215dc <_vfiprintf_r+0x4c>
 8021608:	2300      	movs	r3, #0
 802160a:	9309      	str	r3, [sp, #36]	; 0x24
 802160c:	2320      	movs	r3, #32
 802160e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021612:	f8cd 800c 	str.w	r8, [sp, #12]
 8021616:	2330      	movs	r3, #48	; 0x30
 8021618:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80217dc <_vfiprintf_r+0x24c>
 802161c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021620:	f04f 0901 	mov.w	r9, #1
 8021624:	4623      	mov	r3, r4
 8021626:	469a      	mov	sl, r3
 8021628:	f813 2b01 	ldrb.w	r2, [r3], #1
 802162c:	b10a      	cbz	r2, 8021632 <_vfiprintf_r+0xa2>
 802162e:	2a25      	cmp	r2, #37	; 0x25
 8021630:	d1f9      	bne.n	8021626 <_vfiprintf_r+0x96>
 8021632:	ebba 0b04 	subs.w	fp, sl, r4
 8021636:	d00b      	beq.n	8021650 <_vfiprintf_r+0xc0>
 8021638:	465b      	mov	r3, fp
 802163a:	4622      	mov	r2, r4
 802163c:	4629      	mov	r1, r5
 802163e:	4630      	mov	r0, r6
 8021640:	f7ff ff93 	bl	802156a <__sfputs_r>
 8021644:	3001      	adds	r0, #1
 8021646:	f000 80aa 	beq.w	802179e <_vfiprintf_r+0x20e>
 802164a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802164c:	445a      	add	r2, fp
 802164e:	9209      	str	r2, [sp, #36]	; 0x24
 8021650:	f89a 3000 	ldrb.w	r3, [sl]
 8021654:	2b00      	cmp	r3, #0
 8021656:	f000 80a2 	beq.w	802179e <_vfiprintf_r+0x20e>
 802165a:	2300      	movs	r3, #0
 802165c:	f04f 32ff 	mov.w	r2, #4294967295
 8021660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021664:	f10a 0a01 	add.w	sl, sl, #1
 8021668:	9304      	str	r3, [sp, #16]
 802166a:	9307      	str	r3, [sp, #28]
 802166c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021670:	931a      	str	r3, [sp, #104]	; 0x68
 8021672:	4654      	mov	r4, sl
 8021674:	2205      	movs	r2, #5
 8021676:	f814 1b01 	ldrb.w	r1, [r4], #1
 802167a:	4858      	ldr	r0, [pc, #352]	; (80217dc <_vfiprintf_r+0x24c>)
 802167c:	f7de fdc0 	bl	8000200 <memchr>
 8021680:	9a04      	ldr	r2, [sp, #16]
 8021682:	b9d8      	cbnz	r0, 80216bc <_vfiprintf_r+0x12c>
 8021684:	06d1      	lsls	r1, r2, #27
 8021686:	bf44      	itt	mi
 8021688:	2320      	movmi	r3, #32
 802168a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802168e:	0713      	lsls	r3, r2, #28
 8021690:	bf44      	itt	mi
 8021692:	232b      	movmi	r3, #43	; 0x2b
 8021694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021698:	f89a 3000 	ldrb.w	r3, [sl]
 802169c:	2b2a      	cmp	r3, #42	; 0x2a
 802169e:	d015      	beq.n	80216cc <_vfiprintf_r+0x13c>
 80216a0:	9a07      	ldr	r2, [sp, #28]
 80216a2:	4654      	mov	r4, sl
 80216a4:	2000      	movs	r0, #0
 80216a6:	f04f 0c0a 	mov.w	ip, #10
 80216aa:	4621      	mov	r1, r4
 80216ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80216b0:	3b30      	subs	r3, #48	; 0x30
 80216b2:	2b09      	cmp	r3, #9
 80216b4:	d94e      	bls.n	8021754 <_vfiprintf_r+0x1c4>
 80216b6:	b1b0      	cbz	r0, 80216e6 <_vfiprintf_r+0x156>
 80216b8:	9207      	str	r2, [sp, #28]
 80216ba:	e014      	b.n	80216e6 <_vfiprintf_r+0x156>
 80216bc:	eba0 0308 	sub.w	r3, r0, r8
 80216c0:	fa09 f303 	lsl.w	r3, r9, r3
 80216c4:	4313      	orrs	r3, r2
 80216c6:	9304      	str	r3, [sp, #16]
 80216c8:	46a2      	mov	sl, r4
 80216ca:	e7d2      	b.n	8021672 <_vfiprintf_r+0xe2>
 80216cc:	9b03      	ldr	r3, [sp, #12]
 80216ce:	1d19      	adds	r1, r3, #4
 80216d0:	681b      	ldr	r3, [r3, #0]
 80216d2:	9103      	str	r1, [sp, #12]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	bfbb      	ittet	lt
 80216d8:	425b      	neglt	r3, r3
 80216da:	f042 0202 	orrlt.w	r2, r2, #2
 80216de:	9307      	strge	r3, [sp, #28]
 80216e0:	9307      	strlt	r3, [sp, #28]
 80216e2:	bfb8      	it	lt
 80216e4:	9204      	strlt	r2, [sp, #16]
 80216e6:	7823      	ldrb	r3, [r4, #0]
 80216e8:	2b2e      	cmp	r3, #46	; 0x2e
 80216ea:	d10c      	bne.n	8021706 <_vfiprintf_r+0x176>
 80216ec:	7863      	ldrb	r3, [r4, #1]
 80216ee:	2b2a      	cmp	r3, #42	; 0x2a
 80216f0:	d135      	bne.n	802175e <_vfiprintf_r+0x1ce>
 80216f2:	9b03      	ldr	r3, [sp, #12]
 80216f4:	1d1a      	adds	r2, r3, #4
 80216f6:	681b      	ldr	r3, [r3, #0]
 80216f8:	9203      	str	r2, [sp, #12]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	bfb8      	it	lt
 80216fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8021702:	3402      	adds	r4, #2
 8021704:	9305      	str	r3, [sp, #20]
 8021706:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80217ec <_vfiprintf_r+0x25c>
 802170a:	7821      	ldrb	r1, [r4, #0]
 802170c:	2203      	movs	r2, #3
 802170e:	4650      	mov	r0, sl
 8021710:	f7de fd76 	bl	8000200 <memchr>
 8021714:	b140      	cbz	r0, 8021728 <_vfiprintf_r+0x198>
 8021716:	2340      	movs	r3, #64	; 0x40
 8021718:	eba0 000a 	sub.w	r0, r0, sl
 802171c:	fa03 f000 	lsl.w	r0, r3, r0
 8021720:	9b04      	ldr	r3, [sp, #16]
 8021722:	4303      	orrs	r3, r0
 8021724:	3401      	adds	r4, #1
 8021726:	9304      	str	r3, [sp, #16]
 8021728:	f814 1b01 	ldrb.w	r1, [r4], #1
 802172c:	482c      	ldr	r0, [pc, #176]	; (80217e0 <_vfiprintf_r+0x250>)
 802172e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021732:	2206      	movs	r2, #6
 8021734:	f7de fd64 	bl	8000200 <memchr>
 8021738:	2800      	cmp	r0, #0
 802173a:	d03f      	beq.n	80217bc <_vfiprintf_r+0x22c>
 802173c:	4b29      	ldr	r3, [pc, #164]	; (80217e4 <_vfiprintf_r+0x254>)
 802173e:	bb1b      	cbnz	r3, 8021788 <_vfiprintf_r+0x1f8>
 8021740:	9b03      	ldr	r3, [sp, #12]
 8021742:	3307      	adds	r3, #7
 8021744:	f023 0307 	bic.w	r3, r3, #7
 8021748:	3308      	adds	r3, #8
 802174a:	9303      	str	r3, [sp, #12]
 802174c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802174e:	443b      	add	r3, r7
 8021750:	9309      	str	r3, [sp, #36]	; 0x24
 8021752:	e767      	b.n	8021624 <_vfiprintf_r+0x94>
 8021754:	fb0c 3202 	mla	r2, ip, r2, r3
 8021758:	460c      	mov	r4, r1
 802175a:	2001      	movs	r0, #1
 802175c:	e7a5      	b.n	80216aa <_vfiprintf_r+0x11a>
 802175e:	2300      	movs	r3, #0
 8021760:	3401      	adds	r4, #1
 8021762:	9305      	str	r3, [sp, #20]
 8021764:	4619      	mov	r1, r3
 8021766:	f04f 0c0a 	mov.w	ip, #10
 802176a:	4620      	mov	r0, r4
 802176c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021770:	3a30      	subs	r2, #48	; 0x30
 8021772:	2a09      	cmp	r2, #9
 8021774:	d903      	bls.n	802177e <_vfiprintf_r+0x1ee>
 8021776:	2b00      	cmp	r3, #0
 8021778:	d0c5      	beq.n	8021706 <_vfiprintf_r+0x176>
 802177a:	9105      	str	r1, [sp, #20]
 802177c:	e7c3      	b.n	8021706 <_vfiprintf_r+0x176>
 802177e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021782:	4604      	mov	r4, r0
 8021784:	2301      	movs	r3, #1
 8021786:	e7f0      	b.n	802176a <_vfiprintf_r+0x1da>
 8021788:	ab03      	add	r3, sp, #12
 802178a:	9300      	str	r3, [sp, #0]
 802178c:	462a      	mov	r2, r5
 802178e:	4b16      	ldr	r3, [pc, #88]	; (80217e8 <_vfiprintf_r+0x258>)
 8021790:	a904      	add	r1, sp, #16
 8021792:	4630      	mov	r0, r6
 8021794:	f7fb fd1c 	bl	801d1d0 <_printf_float>
 8021798:	4607      	mov	r7, r0
 802179a:	1c78      	adds	r0, r7, #1
 802179c:	d1d6      	bne.n	802174c <_vfiprintf_r+0x1bc>
 802179e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80217a0:	07d9      	lsls	r1, r3, #31
 80217a2:	d405      	bmi.n	80217b0 <_vfiprintf_r+0x220>
 80217a4:	89ab      	ldrh	r3, [r5, #12]
 80217a6:	059a      	lsls	r2, r3, #22
 80217a8:	d402      	bmi.n	80217b0 <_vfiprintf_r+0x220>
 80217aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80217ac:	f7fe fcba 	bl	8020124 <__retarget_lock_release_recursive>
 80217b0:	89ab      	ldrh	r3, [r5, #12]
 80217b2:	065b      	lsls	r3, r3, #25
 80217b4:	f53f af12 	bmi.w	80215dc <_vfiprintf_r+0x4c>
 80217b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217ba:	e711      	b.n	80215e0 <_vfiprintf_r+0x50>
 80217bc:	ab03      	add	r3, sp, #12
 80217be:	9300      	str	r3, [sp, #0]
 80217c0:	462a      	mov	r2, r5
 80217c2:	4b09      	ldr	r3, [pc, #36]	; (80217e8 <_vfiprintf_r+0x258>)
 80217c4:	a904      	add	r1, sp, #16
 80217c6:	4630      	mov	r0, r6
 80217c8:	f7fb ffa6 	bl	801d718 <_printf_i>
 80217cc:	e7e4      	b.n	8021798 <_vfiprintf_r+0x208>
 80217ce:	bf00      	nop
 80217d0:	08029958 	.word	0x08029958
 80217d4:	08029978 	.word	0x08029978
 80217d8:	08029938 	.word	0x08029938
 80217dc:	08029b74 	.word	0x08029b74
 80217e0:	08029b7e 	.word	0x08029b7e
 80217e4:	0801d1d1 	.word	0x0801d1d1
 80217e8:	0802156b 	.word	0x0802156b
 80217ec:	08029b7a 	.word	0x08029b7a

080217f0 <_read_r>:
 80217f0:	b538      	push	{r3, r4, r5, lr}
 80217f2:	4d07      	ldr	r5, [pc, #28]	; (8021810 <_read_r+0x20>)
 80217f4:	4604      	mov	r4, r0
 80217f6:	4608      	mov	r0, r1
 80217f8:	4611      	mov	r1, r2
 80217fa:	2200      	movs	r2, #0
 80217fc:	602a      	str	r2, [r5, #0]
 80217fe:	461a      	mov	r2, r3
 8021800:	f7e5 ff32 	bl	8007668 <_read>
 8021804:	1c43      	adds	r3, r0, #1
 8021806:	d102      	bne.n	802180e <_read_r+0x1e>
 8021808:	682b      	ldr	r3, [r5, #0]
 802180a:	b103      	cbz	r3, 802180e <_read_r+0x1e>
 802180c:	6023      	str	r3, [r4, #0]
 802180e:	bd38      	pop	{r3, r4, r5, pc}
 8021810:	2000a04c 	.word	0x2000a04c

08021814 <abort>:
 8021814:	b508      	push	{r3, lr}
 8021816:	2006      	movs	r0, #6
 8021818:	f000 f856 	bl	80218c8 <raise>
 802181c:	2001      	movs	r0, #1
 802181e:	f7e5 ff19 	bl	8007654 <_exit>
	...

08021824 <_fstat_r>:
 8021824:	b538      	push	{r3, r4, r5, lr}
 8021826:	4d07      	ldr	r5, [pc, #28]	; (8021844 <_fstat_r+0x20>)
 8021828:	2300      	movs	r3, #0
 802182a:	4604      	mov	r4, r0
 802182c:	4608      	mov	r0, r1
 802182e:	4611      	mov	r1, r2
 8021830:	602b      	str	r3, [r5, #0]
 8021832:	f7e5 ff5e 	bl	80076f2 <_fstat>
 8021836:	1c43      	adds	r3, r0, #1
 8021838:	d102      	bne.n	8021840 <_fstat_r+0x1c>
 802183a:	682b      	ldr	r3, [r5, #0]
 802183c:	b103      	cbz	r3, 8021840 <_fstat_r+0x1c>
 802183e:	6023      	str	r3, [r4, #0]
 8021840:	bd38      	pop	{r3, r4, r5, pc}
 8021842:	bf00      	nop
 8021844:	2000a04c 	.word	0x2000a04c

08021848 <_isatty_r>:
 8021848:	b538      	push	{r3, r4, r5, lr}
 802184a:	4d06      	ldr	r5, [pc, #24]	; (8021864 <_isatty_r+0x1c>)
 802184c:	2300      	movs	r3, #0
 802184e:	4604      	mov	r4, r0
 8021850:	4608      	mov	r0, r1
 8021852:	602b      	str	r3, [r5, #0]
 8021854:	f7e5 ff5d 	bl	8007712 <_isatty>
 8021858:	1c43      	adds	r3, r0, #1
 802185a:	d102      	bne.n	8021862 <_isatty_r+0x1a>
 802185c:	682b      	ldr	r3, [r5, #0]
 802185e:	b103      	cbz	r3, 8021862 <_isatty_r+0x1a>
 8021860:	6023      	str	r3, [r4, #0]
 8021862:	bd38      	pop	{r3, r4, r5, pc}
 8021864:	2000a04c 	.word	0x2000a04c

08021868 <_malloc_usable_size_r>:
 8021868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802186c:	1f18      	subs	r0, r3, #4
 802186e:	2b00      	cmp	r3, #0
 8021870:	bfbc      	itt	lt
 8021872:	580b      	ldrlt	r3, [r1, r0]
 8021874:	18c0      	addlt	r0, r0, r3
 8021876:	4770      	bx	lr

08021878 <_raise_r>:
 8021878:	291f      	cmp	r1, #31
 802187a:	b538      	push	{r3, r4, r5, lr}
 802187c:	4604      	mov	r4, r0
 802187e:	460d      	mov	r5, r1
 8021880:	d904      	bls.n	802188c <_raise_r+0x14>
 8021882:	2316      	movs	r3, #22
 8021884:	6003      	str	r3, [r0, #0]
 8021886:	f04f 30ff 	mov.w	r0, #4294967295
 802188a:	bd38      	pop	{r3, r4, r5, pc}
 802188c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802188e:	b112      	cbz	r2, 8021896 <_raise_r+0x1e>
 8021890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021894:	b94b      	cbnz	r3, 80218aa <_raise_r+0x32>
 8021896:	4620      	mov	r0, r4
 8021898:	f000 f830 	bl	80218fc <_getpid_r>
 802189c:	462a      	mov	r2, r5
 802189e:	4601      	mov	r1, r0
 80218a0:	4620      	mov	r0, r4
 80218a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80218a6:	f000 b817 	b.w	80218d8 <_kill_r>
 80218aa:	2b01      	cmp	r3, #1
 80218ac:	d00a      	beq.n	80218c4 <_raise_r+0x4c>
 80218ae:	1c59      	adds	r1, r3, #1
 80218b0:	d103      	bne.n	80218ba <_raise_r+0x42>
 80218b2:	2316      	movs	r3, #22
 80218b4:	6003      	str	r3, [r0, #0]
 80218b6:	2001      	movs	r0, #1
 80218b8:	e7e7      	b.n	802188a <_raise_r+0x12>
 80218ba:	2400      	movs	r4, #0
 80218bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80218c0:	4628      	mov	r0, r5
 80218c2:	4798      	blx	r3
 80218c4:	2000      	movs	r0, #0
 80218c6:	e7e0      	b.n	802188a <_raise_r+0x12>

080218c8 <raise>:
 80218c8:	4b02      	ldr	r3, [pc, #8]	; (80218d4 <raise+0xc>)
 80218ca:	4601      	mov	r1, r0
 80218cc:	6818      	ldr	r0, [r3, #0]
 80218ce:	f7ff bfd3 	b.w	8021878 <_raise_r>
 80218d2:	bf00      	nop
 80218d4:	20000634 	.word	0x20000634

080218d8 <_kill_r>:
 80218d8:	b538      	push	{r3, r4, r5, lr}
 80218da:	4d07      	ldr	r5, [pc, #28]	; (80218f8 <_kill_r+0x20>)
 80218dc:	2300      	movs	r3, #0
 80218de:	4604      	mov	r4, r0
 80218e0:	4608      	mov	r0, r1
 80218e2:	4611      	mov	r1, r2
 80218e4:	602b      	str	r3, [r5, #0]
 80218e6:	f7e5 fea5 	bl	8007634 <_kill>
 80218ea:	1c43      	adds	r3, r0, #1
 80218ec:	d102      	bne.n	80218f4 <_kill_r+0x1c>
 80218ee:	682b      	ldr	r3, [r5, #0]
 80218f0:	b103      	cbz	r3, 80218f4 <_kill_r+0x1c>
 80218f2:	6023      	str	r3, [r4, #0]
 80218f4:	bd38      	pop	{r3, r4, r5, pc}
 80218f6:	bf00      	nop
 80218f8:	2000a04c 	.word	0x2000a04c

080218fc <_getpid_r>:
 80218fc:	f7e5 be92 	b.w	8007624 <_getpid>

08021900 <sqrt>:
 8021900:	b538      	push	{r3, r4, r5, lr}
 8021902:	ed2d 8b02 	vpush	{d8}
 8021906:	ec55 4b10 	vmov	r4, r5, d0
 802190a:	f000 f82d 	bl	8021968 <__ieee754_sqrt>
 802190e:	4b15      	ldr	r3, [pc, #84]	; (8021964 <sqrt+0x64>)
 8021910:	eeb0 8a40 	vmov.f32	s16, s0
 8021914:	eef0 8a60 	vmov.f32	s17, s1
 8021918:	f993 3000 	ldrsb.w	r3, [r3]
 802191c:	3301      	adds	r3, #1
 802191e:	d019      	beq.n	8021954 <sqrt+0x54>
 8021920:	4622      	mov	r2, r4
 8021922:	462b      	mov	r3, r5
 8021924:	4620      	mov	r0, r4
 8021926:	4629      	mov	r1, r5
 8021928:	f7df f910 	bl	8000b4c <__aeabi_dcmpun>
 802192c:	b990      	cbnz	r0, 8021954 <sqrt+0x54>
 802192e:	2200      	movs	r2, #0
 8021930:	2300      	movs	r3, #0
 8021932:	4620      	mov	r0, r4
 8021934:	4629      	mov	r1, r5
 8021936:	f7df f8e1 	bl	8000afc <__aeabi_dcmplt>
 802193a:	b158      	cbz	r0, 8021954 <sqrt+0x54>
 802193c:	f7fb fb76 	bl	801d02c <__errno>
 8021940:	2321      	movs	r3, #33	; 0x21
 8021942:	6003      	str	r3, [r0, #0]
 8021944:	2200      	movs	r2, #0
 8021946:	2300      	movs	r3, #0
 8021948:	4610      	mov	r0, r2
 802194a:	4619      	mov	r1, r3
 802194c:	f7de ff8e 	bl	800086c <__aeabi_ddiv>
 8021950:	ec41 0b18 	vmov	d8, r0, r1
 8021954:	eeb0 0a48 	vmov.f32	s0, s16
 8021958:	eef0 0a68 	vmov.f32	s1, s17
 802195c:	ecbd 8b02 	vpop	{d8}
 8021960:	bd38      	pop	{r3, r4, r5, pc}
 8021962:	bf00      	nop
 8021964:	20000808 	.word	0x20000808

08021968 <__ieee754_sqrt>:
 8021968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802196c:	ec55 4b10 	vmov	r4, r5, d0
 8021970:	4e56      	ldr	r6, [pc, #344]	; (8021acc <__ieee754_sqrt+0x164>)
 8021972:	43ae      	bics	r6, r5
 8021974:	ee10 0a10 	vmov	r0, s0
 8021978:	ee10 3a10 	vmov	r3, s0
 802197c:	4629      	mov	r1, r5
 802197e:	462a      	mov	r2, r5
 8021980:	d110      	bne.n	80219a4 <__ieee754_sqrt+0x3c>
 8021982:	ee10 2a10 	vmov	r2, s0
 8021986:	462b      	mov	r3, r5
 8021988:	f7de fe46 	bl	8000618 <__aeabi_dmul>
 802198c:	4602      	mov	r2, r0
 802198e:	460b      	mov	r3, r1
 8021990:	4620      	mov	r0, r4
 8021992:	4629      	mov	r1, r5
 8021994:	f7de fc8a 	bl	80002ac <__adddf3>
 8021998:	4604      	mov	r4, r0
 802199a:	460d      	mov	r5, r1
 802199c:	ec45 4b10 	vmov	d0, r4, r5
 80219a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219a4:	2d00      	cmp	r5, #0
 80219a6:	dc10      	bgt.n	80219ca <__ieee754_sqrt+0x62>
 80219a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80219ac:	4330      	orrs	r0, r6
 80219ae:	d0f5      	beq.n	802199c <__ieee754_sqrt+0x34>
 80219b0:	b15d      	cbz	r5, 80219ca <__ieee754_sqrt+0x62>
 80219b2:	ee10 2a10 	vmov	r2, s0
 80219b6:	462b      	mov	r3, r5
 80219b8:	ee10 0a10 	vmov	r0, s0
 80219bc:	f7de fc74 	bl	80002a8 <__aeabi_dsub>
 80219c0:	4602      	mov	r2, r0
 80219c2:	460b      	mov	r3, r1
 80219c4:	f7de ff52 	bl	800086c <__aeabi_ddiv>
 80219c8:	e7e6      	b.n	8021998 <__ieee754_sqrt+0x30>
 80219ca:	1509      	asrs	r1, r1, #20
 80219cc:	d076      	beq.n	8021abc <__ieee754_sqrt+0x154>
 80219ce:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80219d2:	07ce      	lsls	r6, r1, #31
 80219d4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80219d8:	bf5e      	ittt	pl
 80219da:	0fda      	lsrpl	r2, r3, #31
 80219dc:	005b      	lslpl	r3, r3, #1
 80219de:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80219e2:	0fda      	lsrs	r2, r3, #31
 80219e4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80219e8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80219ec:	2000      	movs	r0, #0
 80219ee:	106d      	asrs	r5, r5, #1
 80219f0:	005b      	lsls	r3, r3, #1
 80219f2:	f04f 0e16 	mov.w	lr, #22
 80219f6:	4684      	mov	ip, r0
 80219f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80219fc:	eb0c 0401 	add.w	r4, ip, r1
 8021a00:	4294      	cmp	r4, r2
 8021a02:	bfde      	ittt	le
 8021a04:	1b12      	suble	r2, r2, r4
 8021a06:	eb04 0c01 	addle.w	ip, r4, r1
 8021a0a:	1840      	addle	r0, r0, r1
 8021a0c:	0052      	lsls	r2, r2, #1
 8021a0e:	f1be 0e01 	subs.w	lr, lr, #1
 8021a12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021a16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021a1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021a1e:	d1ed      	bne.n	80219fc <__ieee754_sqrt+0x94>
 8021a20:	4671      	mov	r1, lr
 8021a22:	2720      	movs	r7, #32
 8021a24:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021a28:	4562      	cmp	r2, ip
 8021a2a:	eb04 060e 	add.w	r6, r4, lr
 8021a2e:	dc02      	bgt.n	8021a36 <__ieee754_sqrt+0xce>
 8021a30:	d113      	bne.n	8021a5a <__ieee754_sqrt+0xf2>
 8021a32:	429e      	cmp	r6, r3
 8021a34:	d811      	bhi.n	8021a5a <__ieee754_sqrt+0xf2>
 8021a36:	2e00      	cmp	r6, #0
 8021a38:	eb06 0e04 	add.w	lr, r6, r4
 8021a3c:	da43      	bge.n	8021ac6 <__ieee754_sqrt+0x15e>
 8021a3e:	f1be 0f00 	cmp.w	lr, #0
 8021a42:	db40      	blt.n	8021ac6 <__ieee754_sqrt+0x15e>
 8021a44:	f10c 0801 	add.w	r8, ip, #1
 8021a48:	eba2 020c 	sub.w	r2, r2, ip
 8021a4c:	429e      	cmp	r6, r3
 8021a4e:	bf88      	it	hi
 8021a50:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8021a54:	1b9b      	subs	r3, r3, r6
 8021a56:	4421      	add	r1, r4
 8021a58:	46c4      	mov	ip, r8
 8021a5a:	0052      	lsls	r2, r2, #1
 8021a5c:	3f01      	subs	r7, #1
 8021a5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021a62:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021a66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021a6a:	d1dd      	bne.n	8021a28 <__ieee754_sqrt+0xc0>
 8021a6c:	4313      	orrs	r3, r2
 8021a6e:	d006      	beq.n	8021a7e <__ieee754_sqrt+0x116>
 8021a70:	1c4c      	adds	r4, r1, #1
 8021a72:	bf13      	iteet	ne
 8021a74:	3101      	addne	r1, #1
 8021a76:	3001      	addeq	r0, #1
 8021a78:	4639      	moveq	r1, r7
 8021a7a:	f021 0101 	bicne.w	r1, r1, #1
 8021a7e:	1043      	asrs	r3, r0, #1
 8021a80:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021a84:	0849      	lsrs	r1, r1, #1
 8021a86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021a8a:	07c2      	lsls	r2, r0, #31
 8021a8c:	bf48      	it	mi
 8021a8e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8021a92:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8021a96:	460c      	mov	r4, r1
 8021a98:	463d      	mov	r5, r7
 8021a9a:	e77f      	b.n	802199c <__ieee754_sqrt+0x34>
 8021a9c:	0ada      	lsrs	r2, r3, #11
 8021a9e:	3815      	subs	r0, #21
 8021aa0:	055b      	lsls	r3, r3, #21
 8021aa2:	2a00      	cmp	r2, #0
 8021aa4:	d0fa      	beq.n	8021a9c <__ieee754_sqrt+0x134>
 8021aa6:	02d7      	lsls	r7, r2, #11
 8021aa8:	d50a      	bpl.n	8021ac0 <__ieee754_sqrt+0x158>
 8021aaa:	f1c1 0420 	rsb	r4, r1, #32
 8021aae:	fa23 f404 	lsr.w	r4, r3, r4
 8021ab2:	1e4d      	subs	r5, r1, #1
 8021ab4:	408b      	lsls	r3, r1
 8021ab6:	4322      	orrs	r2, r4
 8021ab8:	1b41      	subs	r1, r0, r5
 8021aba:	e788      	b.n	80219ce <__ieee754_sqrt+0x66>
 8021abc:	4608      	mov	r0, r1
 8021abe:	e7f0      	b.n	8021aa2 <__ieee754_sqrt+0x13a>
 8021ac0:	0052      	lsls	r2, r2, #1
 8021ac2:	3101      	adds	r1, #1
 8021ac4:	e7ef      	b.n	8021aa6 <__ieee754_sqrt+0x13e>
 8021ac6:	46e0      	mov	r8, ip
 8021ac8:	e7be      	b.n	8021a48 <__ieee754_sqrt+0xe0>
 8021aca:	bf00      	nop
 8021acc:	7ff00000 	.word	0x7ff00000

08021ad0 <_init>:
 8021ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ad2:	bf00      	nop
 8021ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ad6:	bc08      	pop	{r3}
 8021ad8:	469e      	mov	lr, r3
 8021ada:	4770      	bx	lr

08021adc <_fini>:
 8021adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ade:	bf00      	nop
 8021ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ae2:	bc08      	pop	{r3}
 8021ae4:	469e      	mov	lr, r3
 8021ae6:	4770      	bx	lr
